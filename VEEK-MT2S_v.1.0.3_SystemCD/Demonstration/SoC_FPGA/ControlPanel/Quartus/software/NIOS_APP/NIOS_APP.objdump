
NIOS_APP.elf:     file format elf32-littlenios2
NIOS_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005864 memsz 0x00005864 flags r-x
    LOAD off    0x00006884 vaddr 0x00025884 paddr 0x000262fc align 2**12
         filesz 0x00000a78 memsz 0x00000a78 flags rw-
    LOAD off    0x00007d74 vaddr 0x00026d74 paddr 0x00026d74 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004f18  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000728  0002515c  0002515c  0000615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a78  00025884  000262fc  00006884  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00026d74  00026d74  00007d74  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00026e94  00026e94  000072fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000072fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000007b0  00000000  00000000  00007320  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009d89  00000000  00000000  00007ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000038f5  00000000  00000000  00011859  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003ecb  00000000  00000000  0001514e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012ec  00000000  00000000  0001901c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002461  00000000  00000000  0001a308  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001f4b  00000000  00000000  0001c769  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001e6b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000398  00000000  00000000  0001e718  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00020c8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00020c91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020c9b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020c9c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00020c9d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00020ca1  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00020ca5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00020ca9  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00020cb2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00020cbb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00020cc4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00020cce  2**0
                  CONTENTS, READONLY
 29 .jdi          00006255  00000000  00000000  00020cf9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     003b3682  00000000  00000000  00026f4e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
0002515c l    d  .rodata	00000000 .rodata
00025884 l    d  .rwdata	00000000 .rwdata
00026d74 l    d  .bss	00000000 .bss
00026e94 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NIOS_APP_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mipi_bridge_config.c
00025884 l     O .rwdata	00000034 MipiBridgeReg
00000000 l    df *ABS*	00000000 mipi_camera_config.c
000258b8 l     O .rwdata	00000762 MipiCameraReg
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00022ff4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0002601c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000236b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002397c l     F .text	00000034 alt_dev_reg
000260fc l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00023c74 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00023ec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00024014 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024040 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000244b4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000245f4 l     F .text	0000003c alt_get_errno
00024630 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00026d90 g     O .bss	00000004 alt_instruction_exception_handler
0002379c g     F .text	0000007c alt_main
00022f44 g     F .text	00000080 _puts_r
00026d94 g     O .bss	00000100 alt_irq
000205e4 g     F .text	00000060 ACK_check
000262fc g       *ABS*	00000000 __flash_rwdata_start
00020558 g     F .text	0000008c ACK_single_check
00022168 g     F .text	0000006c OV8865_write_AF
00022ef8 g     F .text	0000004c printf
00022884 g     F .text	00000440 .hidden __divsf3
00020644 g     F .text	00000200 OC_I2C_Write
00022cc4 g     F .text	00000070 .hidden __fixsfsi
00024a50 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00021d6c g     F .text	00000074 led_blink
00020020 g       *ABS*	00000000 __flash_exceptions_start
00026d74 g     O .bss	00000004 errno
00026d7c g     O .bss	00000004 alt_argv
0002e2d0 g       *ABS*	00000000 _gp
00023818 g     F .text	00000030 usleep
0002167c g     F .text	00000158 config_for_linux
00026150 g     O .rwdata	00000180 alt_fd_list
00024a74 g     F .text	00000090 alt_find_dev
00020398 g     F .text	0000013c oc_i2c_init_ex
00024578 g     F .text	0000007c alt_io_redirect
0002515c g       *ABS*	00000000 __DTOR_END__
00022fc4 g     F .text	00000014 puts
00024d40 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023af4 g     F .text	000000ec altera_avalon_jtag_uart_read
00022ebc g     F .text	0000003c _printf_r
000227c8 g     F .text	00000064 .hidden __udivsi3
00021384 g     F .text	000000a4 Init_mipi_d8m
00024cb0 g     F .text	00000090 alt_icache_flush
00022254 g     F .text	000000cc OV8865_FOCUS_Move_to
000262e8 g     O .rwdata	00000004 alt_max_fd
000220fc g     F .text	0000006c OV8865_write_cmos_sensor_8
000262d0 g     O .rwdata	00000004 _global_impure_ptr
00026e94 g       *ABS*	00000000 __bss_end
000243c4 g     F .text	000000f0 alt_iic_isr_register
00024948 g     F .text	00000108 alt_tick
00024378 g     F .text	0000004c alt_ic_irq_enabled
0002103c g     F .text	000000b8 mipi_clear_error
00020bac g     F .text	00000210 OC_I2CL_Write
000248ac g     F .text	0000009c alt_alarm_stop
00026d84 g     O .bss	00000004 alt_irq_active
00020844 g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000d4 alt_irq_handler
00026128 g     O .rwdata	00000028 alt_dev_null
00020290 g     F .text	00000058 Write32_Data
00023fcc g     F .text	00000048 alt_dcache_flush_all
000262fc g       *ABS*	00000000 __ram_rwdata_end
000262e0 g     O .rwdata	00000008 alt_dev_list
00023884 g     F .text	000000f8 write
00025884 g       *ABS*	00000000 __ram_rodata_end
0002282c g     F .text	00000058 .hidden __umodsi3
0002118c g     F .text	00000178 mipi_show_error_info_more
00026e94 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002515c g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
00023cec g     F .text	0000007c alt_avalon_timer_sc_init
00022e58 g     F .text	00000064 .hidden __clzsi2
00023be0 g     F .text	00000094 altera_avalon_jtag_uart_write
00023060 g     F .text	00000524 ___vfprintf_internal_r
00024f98 g     F .text	00000190 __call_exitprocs
00021970 g     F .text	000001fc test
00020244 g     F .text	0000004c _start
00026d88 g     O .bss	00000004 _alt_tick_rate
00026d8c g     O .bss	00000004 _alt_nticks
000239e8 g     F .text	0000004c alt_sys_init
00022d34 g     F .text	00000124 .hidden __floatsisf
00024e40 g     F .text	00000158 __register_exitproc
00022098 g     F .text	00000064 OV8865_read_cmos_sensor_8
00021e84 g     F .text	0000006c MipiBridgeRegWrite
00025884 g       *ABS*	00000000 __ram_rwdata_start
0002515c g       *ABS*	00000000 __ram_rodata_start
00023a34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00024c0c g     F .text	000000a4 alt_get_fd
00023d68 g     F .text	00000158 alt_busy_sleep
00024e10 g     F .text	00000030 memcmp
00026e94 g       *ABS*	00000000 __alt_stack_base
00020340 g     F .text	00000058 oc_i2c_init
00024b04 g     F .text	00000108 alt_find_file
0002407c g     F .text	000000a4 alt_dev_llist_insert
000224c4 g     F .text	0000020c MipiCameraInit
00021e38 g     F .text	0000004c nSWAP16
000235a0 g     F .text	000000b8 __sfvwrite_small_dev
00026d74 g       *ABS*	00000000 __bss_start
00021de0 g     F .text	00000058 main
00026d80 g     O .bss	00000004 alt_envp
00023a94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000262ec g     O .rwdata	00000004 alt_errno
000226d0 g     F .text	00000084 .hidden __divsi3
000204d4 g     F .text	00000084 oc_i2c_uninit
0002515c g       *ABS*	00000000 __CTOR_END__
00022320 g     F .text	000001a4 MIPI_BIN_LEVEL
0002515c g       *ABS*	00000000 __flash_rodata_start
0002515c g       *ABS*	00000000 __DTOR_LIST__
000239b0 g     F .text	00000038 alt_irq_init
00024848 g     F .text	00000064 alt_release_fd
00021f68 g     F .text	00000130 MipiBridgeInit
00025754 g     O .rodata	00000100 .hidden __clz_tab
00024ddc g     F .text	00000014 atexit
00023658 g     F .text	00000058 _write_r
00021604 g     F .text	00000078 MIX_MoveLayer
000262d4 g     O .rwdata	00000004 _impure_ptr
00026d78 g     O .bss	00000004 alt_argc
00021ef0 g     F .text	00000078 MipiBridgeRegRead
00024180 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000262d8 g     O .rwdata	00000008 alt_fs_list
000202e8 g     F .text	00000058 Read32_Data
00021524 g     F .text	000000e0 MIX_EnableLayer
000208a8 g     F .text	000001cc OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00024214 g     F .text	00000050 alt_ic_isr_register
000262fc g       *ABS*	00000000 _edata
00026e94 g       *ABS*	00000000 _end
00021428 g     F .text	000000fc MIX_Reset
00020244 g       *ABS*	00000000 __ram_exceptions_end
000217d4 g     F .text	0000019c test_camera
000242ec g     F .text	0000008c alt_ic_irq_disable
00020a74 g     F .text	00000138 OC_I2C_Read_Continue
00024df0 g     F .text	00000020 exit
00022754 g     F .text	00000074 .hidden __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000210f4 g     F .text	00000098 mipi_show_error_info
00020dbc g     F .text	00000280 OC_I2CL_Read
00025128 g     F .text	00000034 _exit
00022fd8 g     F .text	0000001c strlen
00021b6c g     F .text	00000200 test_audio
000246f4 g     F .text	00000154 open
000241e0 g     F .text	00000034 alt_icache_flush_all
000262f0 g     O .rwdata	00000004 alt_priority_mask
00024264 g     F .text	00000088 alt_ic_irq_enable
00023584 g     F .text	0000001c __vfprintf_internal
00021304 g     F .text	00000080 MIPI_Init
000262f4 g     O .rwdata	00000008 alt_alarm_list
00024120 g     F .text	00000060 _do_ctors
00023efc g     F .text	000000d0 close
000221d4 g     F .text	00000080 OV8865_read_AF
00023718 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	109b6504 	addi	r2,r2,28052
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	109b6504 	addi	r2,r2,28052
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a2b017 	ldw	r2,-30016(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a2b017 	ldw	r2,-30016(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xffff0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6b8b414 	ori	gp,gp,58064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	109b5d14 	ori	r2,r2,28020

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18dba514 	ori	r3,r3,28308

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xffff0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00237180 	call	23718 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002379c0 	call	2379c <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xffff028c>

00020290 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
   20290:	defffb04 	addi	sp,sp,-20
   20294:	df000415 	stw	fp,16(sp)
   20298:	df000404 	addi	fp,sp,16
   2029c:	e13ffd15 	stw	r4,-12(fp)
   202a0:	e17ffe15 	stw	r5,-8(fp)
   202a4:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
   202a8:	e0bffe17 	ldw	r2,-8(fp)
   202ac:	1085883a 	add	r2,r2,r2
   202b0:	1085883a 	add	r2,r2,r2
   202b4:	1007883a 	mov	r3,r2
   202b8:	e0bffd17 	ldw	r2,-12(fp)
   202bc:	1885883a 	add	r2,r3,r2
   202c0:	1007883a 	mov	r3,r2
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
   202cc:	00800044 	movi	r2,1
   202d0:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
   202d4:	e0bffc17 	ldw	r2,-16(fp)
}
   202d8:	e037883a 	mov	sp,fp
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00104 	addi	sp,sp,4
   202e4:	f800283a 	ret

000202e8 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
   202e8:	defffb04 	addi	sp,sp,-20
   202ec:	df000415 	stw	fp,16(sp)
   202f0:	df000404 	addi	fp,sp,16
   202f4:	e13ffd15 	stw	r4,-12(fp)
   202f8:	e17ffe15 	stw	r5,-8(fp)
   202fc:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   20300:	e0bffe17 	ldw	r2,-8(fp)
   20304:	1085883a 	add	r2,r2,r2
   20308:	1085883a 	add	r2,r2,r2
   2030c:	1007883a 	mov	r3,r2
   20310:	e0bffd17 	ldw	r2,-12(fp)
   20314:	1885883a 	add	r2,r3,r2
   20318:	10c00037 	ldwio	r3,0(r2)
   2031c:	e0bfff17 	ldw	r2,-4(fp)
   20320:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
   20324:	00800044 	movi	r2,1
   20328:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
   2032c:	e0bffc17 	ldw	r2,-16(fp)
}
   20330:	e037883a 	mov	sp,fp
   20334:	df000017 	ldw	fp,0(sp)
   20338:	dec00104 	addi	sp,sp,4
   2033c:	f800283a 	ret

00020340 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
   20340:	defffa04 	addi	sp,sp,-24
   20344:	dfc00515 	stw	ra,20(sp)
   20348:	df000415 	stw	fp,16(sp)
   2034c:	df000404 	addi	fp,sp,16
   20350:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
   20354:	0080bef4 	movhi	r2,763
   20358:	10bc2004 	addi	r2,r2,-3968
   2035c:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
   20360:	008001b4 	movhi	r2,6
   20364:	1086a004 	addi	r2,r2,6784
   20368:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   2036c:	e1bffd17 	ldw	r6,-12(fp)
   20370:	e17ffc17 	ldw	r5,-16(fp)
   20374:	e13fff17 	ldw	r4,-4(fp)
   20378:	00203980 	call	20398 <oc_i2c_init_ex>
   2037c:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
   20380:	e0bffe17 	ldw	r2,-8(fp)
}
   20384:	e037883a 	mov	sp,fp
   20388:	dfc00117 	ldw	ra,4(sp)
   2038c:	df000017 	ldw	fp,0(sp)
   20390:	dec00204 	addi	sp,sp,8
   20394:	f800283a 	ret

00020398 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
   20398:	defff604 	addi	sp,sp,-40
   2039c:	dfc00915 	stw	ra,36(sp)
   203a0:	df000815 	stw	fp,32(sp)
   203a4:	df000804 	addi	fp,sp,32
   203a8:	e13ffd15 	stw	r4,-12(fp)
   203ac:	e17ffe15 	stw	r5,-8(fp)
   203b0:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
   203b4:	00800044 	movi	r2,1
   203b8:	e0bff815 	stw	r2,-32(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   203bc:	00bfe004 	movi	r2,-128
   203c0:	e0bff905 	stb	r2,-28(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10800164 	muli	r2,r2,5
   203cc:	100b883a 	mov	r5,r2
   203d0:	e13ffe17 	ldw	r4,-8(fp)
   203d4:	00226d00 	call	226d0 <__divsi3>
   203d8:	10bfffc4 	addi	r2,r2,-1
   203dc:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
   203e0:	e0bffa17 	ldw	r2,-24(fp)
   203e4:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203e8:	e0bffa17 	ldw	r2,-24(fp)
   203ec:	1005d23a 	srai	r2,r2,8
   203f0:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
   203f4:	e0bffd17 	ldw	r2,-12(fp)
   203f8:	e0fffb03 	ldbu	r3,-20(fp)
   203fc:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
   20400:	e0bffd17 	ldw	r2,-12(fp)
   20404:	10800104 	addi	r2,r2,4
   20408:	1007883a 	mov	r3,r2
   2040c:	e0bffb43 	ldbu	r2,-19(fp)
   20410:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
   20414:	e0bffd17 	ldw	r2,-12(fp)
   20418:	10800204 	addi	r2,r2,8
   2041c:	1007883a 	mov	r3,r2
   20420:	e0bff903 	ldbu	r2,-28(fp)
   20424:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
   20428:	e0bff817 	ldw	r2,-32(fp)
   2042c:	10000826 	beq	r2,zero,20450 <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
   20430:	e0bffd17 	ldw	r2,-12(fp)
   20434:	10800037 	ldwio	r2,0(r2)
   20438:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
   2043c:	e0bffc17 	ldw	r2,-16(fp)
   20440:	10c03fcc 	andi	r3,r2,255
   20444:	e0bffb03 	ldbu	r2,-20(fp)
   20448:	18800126 	beq	r3,r2,20450 <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
   2044c:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
   20450:	e0bff817 	ldw	r2,-32(fp)
   20454:	10000926 	beq	r2,zero,2047c <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
   20458:	e0bffd17 	ldw	r2,-12(fp)
   2045c:	10800104 	addi	r2,r2,4
   20460:	10800037 	ldwio	r2,0(r2)
   20464:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
   20468:	e0bffc17 	ldw	r2,-16(fp)
   2046c:	10c03fcc 	andi	r3,r2,255
   20470:	e0bffb43 	ldbu	r2,-19(fp)
   20474:	18800126 	beq	r3,r2,2047c <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
   20478:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check control
    if (bSuccess){
   2047c:	e0bff817 	ldw	r2,-32(fp)
   20480:	10000926 	beq	r2,zero,204a8 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
   20484:	e0bffd17 	ldw	r2,-12(fp)
   20488:	10800204 	addi	r2,r2,8
   2048c:	10800037 	ldwio	r2,0(r2)
   20490:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
   20494:	e0bffc17 	ldw	r2,-16(fp)
   20498:	10c03fcc 	andi	r3,r2,255
   2049c:	e0bff903 	ldbu	r2,-28(fp)
   204a0:	18800126 	beq	r3,r2,204a8 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
   204a4:	e03ff815 	stw	zero,-32(fp)
        }
    }

   if (bSuccess){
   204a8:	e0bff817 	ldw	r2,-32(fp)
   204ac:	1000031e 	bne	r2,zero,204bc <oc_i2c_init_ex+0x124>
//       printf("\nI2C core is enabled! \r\n");
   }
   else
       printf("\nI2C core is not enabled successfully! \r\n");
   204b0:	010000b4 	movhi	r4,2
   204b4:	21145704 	addi	r4,r4,20828
   204b8:	0022fc40 	call	22fc4 <puts>

   return bSuccess;
   204bc:	e0bff817 	ldw	r2,-32(fp)

}
   204c0:	e037883a 	mov	sp,fp
   204c4:	dfc00117 	ldw	ra,4(sp)
   204c8:	df000017 	ldw	fp,0(sp)
   204cc:	dec00204 	addi	sp,sp,8
   204d0:	f800283a 	ret

000204d4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
   204d4:	defffa04 	addi	sp,sp,-24
   204d8:	dfc00515 	stw	ra,20(sp)
   204dc:	df000415 	stw	fp,16(sp)
   204e0:	df000404 	addi	fp,sp,16
   204e4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   204e8:	00800044 	movi	r2,1
   204ec:	e0bffc15 	stw	r2,-16(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   204f0:	e03ffd05 	stb	zero,-12(fp)

    IOWR( i2c_base, 2, ControlValue);
   204f4:	e0bfff17 	ldw	r2,-4(fp)
   204f8:	10800204 	addi	r2,r2,8
   204fc:	1007883a 	mov	r3,r2
   20500:	e0bffd03 	ldbu	r2,-12(fp)
   20504:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
   20508:	e0bfff17 	ldw	r2,-4(fp)
   2050c:	10800204 	addi	r2,r2,8
   20510:	10800037 	ldwio	r2,0(r2)
   20514:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
   20518:	e0bffe17 	ldw	r2,-8(fp)
   2051c:	10c03fcc 	andi	r3,r2,255
   20520:	e0bffd03 	ldbu	r2,-12(fp)
   20524:	18800126 	beq	r3,r2,2052c <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
   20528:	e03ffc15 	stw	zero,-16(fp)
    }

   if (bSuccess){
   2052c:	e0bffc17 	ldw	r2,-16(fp)
   20530:	1000031e 	bne	r2,zero,20540 <oc_i2c_uninit+0x6c>
//       printf("\I2C core  is disabled! \r\n");
   }
   else
       printf("\I2C core is failed to disable! \r\n");
   20534:	010000b4 	movhi	r4,2
   20538:	21146204 	addi	r4,r4,20872
   2053c:	0022fc40 	call	22fc4 <puts>

   return bSuccess;
   20540:	e0bffc17 	ldw	r2,-16(fp)

}
   20544:	e037883a 	mov	sp,fp
   20548:	dfc00117 	ldw	ra,4(sp)
   2054c:	df000017 	ldw	fp,0(sp)
   20550:	dec00204 	addi	sp,sp,8
   20554:	f800283a 	ret

00020558 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
   20558:	defffb04 	addi	sp,sp,-20
   2055c:	dfc00415 	stw	ra,16(sp)
   20560:	df000315 	stw	fp,12(sp)
   20564:	df000304 	addi	fp,sp,12
   20568:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   2056c:	00800044 	movi	r2,1
   20570:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
   20574:	01003e84 	movi	r4,250
   20578:	00238180 	call	23818 <usleep>
    read_data =IORD(i2c_base, 4);
   2057c:	e0bfff17 	ldw	r2,-4(fp)
   20580:	10800404 	addi	r2,r2,16
   20584:	10800037 	ldwio	r2,0(r2)
   20588:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
   2058c:	e0bffe17 	ldw	r2,-8(fp)
   20590:	1080008c 	andi	r2,r2,2
   20594:	10000126 	beq	r2,zero,2059c <ACK_single_check+0x44>
            bSuccess = FALSE;
   20598:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
   2059c:	e0bffd17 	ldw	r2,-12(fp)
   205a0:	10000a26 	beq	r2,zero,205cc <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
   205a4:	01003e84 	movi	r4,250
   205a8:	00238180 	call	23818 <usleep>
            read_data =IORD(i2c_base, 4);
   205ac:	e0bfff17 	ldw	r2,-4(fp)
   205b0:	10800404 	addi	r2,r2,16
   205b4:	10800037 	ldwio	r2,0(r2)
   205b8:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
   205bc:	e0bffe17 	ldw	r2,-8(fp)
   205c0:	1080200c 	andi	r2,r2,128
   205c4:	10000126 	beq	r2,zero,205cc <ACK_single_check+0x74>
                    bSuccess = FALSE;
   205c8:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
   205cc:	e0bffd17 	ldw	r2,-12(fp)
}
   205d0:	e037883a 	mov	sp,fp
   205d4:	dfc00117 	ldw	ra,4(sp)
   205d8:	df000017 	ldw	fp,0(sp)
   205dc:	dec00204 	addi	sp,sp,8
   205e0:	f800283a 	ret

000205e4 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   205e4:	defffb04 	addi	sp,sp,-20
   205e8:	dfc00415 	stw	ra,16(sp)
   205ec:	df000315 	stw	fp,12(sp)
   205f0:	df000304 	addi	fp,sp,12
   205f4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
   205f8:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
   205fc:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
   20600:	00000306 	br	20610 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
   20604:	e13fff17 	ldw	r4,-4(fp)
   20608:	00205580 	call	20558 <ACK_single_check>
   2060c:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   20610:	e0bffd17 	ldw	r2,-12(fp)
   20614:	1000051e 	bne	r2,zero,2062c <ACK_check+0x48>
   20618:	e0bffe17 	ldw	r2,-8(fp)
   2061c:	10c00044 	addi	r3,r2,1
   20620:	e0fffe15 	stw	r3,-8(fp)
   20624:	10800290 	cmplti	r2,r2,10
   20628:	103ff61e 	bne	r2,zero,20604 <__alt_data_end+0xffff0604>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
   2062c:	e0bffd17 	ldw	r2,-12(fp)
}
   20630:	e037883a 	mov	sp,fp
   20634:	dfc00117 	ldw	ra,4(sp)
   20638:	df000017 	ldw	fp,0(sp)
   2063c:	dec00204 	addi	sp,sp,8
   20640:	f800283a 	ret

00020644 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
   20644:	defff904 	addi	sp,sp,-28
   20648:	dfc00615 	stw	ra,24(sp)
   2064c:	df000515 	stw	fp,20(sp)
   20650:	df000504 	addi	fp,sp,20
   20654:	e13ffc15 	stw	r4,-16(fp)
   20658:	2807883a 	mov	r3,r5
   2065c:	3005883a 	mov	r2,r6
   20660:	e1ffff15 	stw	r7,-4(fp)
   20664:	e0fffd05 	stb	r3,-12(fp)
   20668:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   2066c:	e0bffd03 	ldbu	r2,-12(fp)
   20670:	100d883a 	mov	r6,r2
   20674:	014000c4 	movi	r5,3
   20678:	e13ffc17 	ldw	r4,-16(fp)
   2067c:	00202900 	call	20290 <Write32_Data>
   20680:	1000051e 	bne	r2,zero,20698 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
   20684:	010000b4 	movhi	r4,2
   20688:	21146b04 	addi	r4,r4,20908
   2068c:	0022fc40 	call	22fc4 <puts>
       return FALSE;
   20690:	0005883a 	mov	r2,zero
   20694:	00006606 	br	20830 <OC_I2C_Write+0x1ec>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
   20698:	01802404 	movi	r6,144
   2069c:	01400104 	movi	r5,4
   206a0:	e13ffc17 	ldw	r4,-16(fp)
   206a4:	00202900 	call	20290 <Write32_Data>
   206a8:	1000051e 	bne	r2,zero,206c0 <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
   206ac:	010000b4 	movhi	r4,2
   206b0:	21147104 	addi	r4,r4,20932
   206b4:	0022fc40 	call	22fc4 <puts>
       return FALSE;
   206b8:	0005883a 	mov	r2,zero
   206bc:	00005c06 	br	20830 <OC_I2C_Write+0x1ec>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   206c0:	e13ffc17 	ldw	r4,-16(fp)
   206c4:	00205e40 	call	205e4 <ACK_check>
   206c8:	1000051e 	bne	r2,zero,206e0 <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
   206cc:	010000b4 	movhi	r4,2
   206d0:	21147704 	addi	r4,r4,20956
   206d4:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   206d8:	0005883a 	mov	r2,zero
   206dc:	00005406 	br	20830 <OC_I2C_Write+0x1ec>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   206e0:	e0bffe03 	ldbu	r2,-8(fp)
   206e4:	100d883a 	mov	r6,r2
   206e8:	014000c4 	movi	r5,3
   206ec:	e13ffc17 	ldw	r4,-16(fp)
   206f0:	00202900 	call	20290 <Write32_Data>
   206f4:	1000051e 	bne	r2,zero,2070c <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
   206f8:	010000b4 	movhi	r4,2
   206fc:	21147d04 	addi	r4,r4,20980
   20700:	0022fc40 	call	22fc4 <puts>
       return FALSE;
   20704:	0005883a 	mov	r2,zero
   20708:	00004906 	br	20830 <OC_I2C_Write+0x1ec>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
   2070c:	01800404 	movi	r6,16
   20710:	01400104 	movi	r5,4
   20714:	e13ffc17 	ldw	r4,-16(fp)
   20718:	00202900 	call	20290 <Write32_Data>
   2071c:	1000051e 	bne	r2,zero,20734 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
   20720:	010000b4 	movhi	r4,2
   20724:	21148304 	addi	r4,r4,21004
   20728:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   2072c:	0005883a 	mov	r2,zero
   20730:	00003f06 	br	20830 <OC_I2C_Write+0x1ec>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20734:	e13ffc17 	ldw	r4,-16(fp)
   20738:	00205e40 	call	205e4 <ACK_check>
   2073c:	1000051e 	bne	r2,zero,20754 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
   20740:	010000b4 	movhi	r4,2
   20744:	21148904 	addi	r4,r4,21028
   20748:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   2074c:	0005883a 	mov	r2,zero
   20750:	00003706 	br	20830 <OC_I2C_Write+0x1ec>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
   20754:	e0800217 	ldw	r2,8(fp)
   20758:	10bfffc4 	addi	r2,r2,-1
   2075c:	e0bffb15 	stw	r2,-20(fp)
   20760:	00002406 	br	207f4 <OC_I2C_Write+0x1b0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
   20764:	e0bffb17 	ldw	r2,-20(fp)
   20768:	e0ffff17 	ldw	r3,-4(fp)
   2076c:	1885883a 	add	r2,r3,r2
   20770:	10800003 	ldbu	r2,0(r2)
   20774:	10803fcc 	andi	r2,r2,255
   20778:	100d883a 	mov	r6,r2
   2077c:	014000c4 	movi	r5,3
   20780:	e13ffc17 	ldw	r4,-16(fp)
   20784:	00202900 	call	20290 <Write32_Data>
   20788:	1000051e 	bne	r2,zero,207a0 <OC_I2C_Write+0x15c>
              printf("OC_I2C_Write error[6]\r\n");
   2078c:	010000b4 	movhi	r4,2
   20790:	21148f04 	addi	r4,r4,21052
   20794:	0022fc40 	call	22fc4 <puts>
              return FALSE;
   20798:	0005883a 	mov	r2,zero
   2079c:	00002406 	br	20830 <OC_I2C_Write+0x1ec>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
   207a0:	01800404 	movi	r6,16
   207a4:	01400104 	movi	r5,4
   207a8:	e13ffc17 	ldw	r4,-16(fp)
   207ac:	00202900 	call	20290 <Write32_Data>
   207b0:	1000051e 	bne	r2,zero,207c8 <OC_I2C_Write+0x184>
             printf("OC_I2C_Write error[7]\r\n");
   207b4:	010000b4 	movhi	r4,2
   207b8:	21149504 	addi	r4,r4,21076
   207bc:	0022fc40 	call	22fc4 <puts>
              return FALSE;
   207c0:	0005883a 	mov	r2,zero
   207c4:	00001a06 	br	20830 <OC_I2C_Write+0x1ec>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
   207c8:	e13ffc17 	ldw	r4,-16(fp)
   207cc:	00205e40 	call	205e4 <ACK_check>
   207d0:	1000051e 	bne	r2,zero,207e8 <OC_I2C_Write+0x1a4>
              printf("OC_I2C_Write error[8]\r\n");
   207d4:	010000b4 	movhi	r4,2
   207d8:	21149b04 	addi	r4,r4,21100
   207dc:	0022fc40 	call	22fc4 <puts>
              return FALSE;
   207e0:	0005883a 	mov	r2,zero
   207e4:	00001206 	br	20830 <OC_I2C_Write+0x1ec>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
        for( i=nWriteLength-1;i>=0;i--){
   207e8:	e0bffb17 	ldw	r2,-20(fp)
   207ec:	10bfffc4 	addi	r2,r2,-1
   207f0:	e0bffb15 	stw	r2,-20(fp)
   207f4:	e0bffb17 	ldw	r2,-20(fp)
   207f8:	103fda0e 	bge	r2,zero,20764 <__alt_data_end+0xffff0764>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
   207fc:	01801004 	movi	r6,64
   20800:	01400104 	movi	r5,4
   20804:	e13ffc17 	ldw	r4,-16(fp)
   20808:	00202900 	call	20290 <Write32_Data>
   2080c:	1000051e 	bne	r2,zero,20824 <OC_I2C_Write+0x1e0>
         printf("OC_I2C_Write error[9]\r\n");
   20810:	010000b4 	movhi	r4,2
   20814:	2114a104 	addi	r4,r4,21124
   20818:	0022fc40 	call	22fc4 <puts>
         return FALSE;
   2081c:	0005883a 	mov	r2,zero
   20820:	00000306 	br	20830 <OC_I2C_Write+0x1ec>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   20824:	01003e84 	movi	r4,250
   20828:	00238180 	call	23818 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
   2082c:	00800044 	movi	r2,1

}
   20830:	e037883a 	mov	sp,fp
   20834:	dfc00117 	ldw	ra,4(sp)
   20838:	df000017 	ldw	fp,0(sp)
   2083c:	dec00204 	addi	sp,sp,8
   20840:	f800283a 	ret

00020844 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
   20844:	defffb04 	addi	sp,sp,-20
   20848:	dfc00415 	stw	ra,16(sp)
   2084c:	df000315 	stw	fp,12(sp)
   20850:	df000304 	addi	fp,sp,12
   20854:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
   20858:	01003e84 	movi	r4,250
   2085c:	00238180 	call	23818 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
   20860:	e0bffe04 	addi	r2,fp,-8
   20864:	100d883a 	mov	r6,r2
   20868:	01400104 	movi	r5,4
   2086c:	e13fff17 	ldw	r4,-4(fp)
   20870:	00202e80 	call	202e8 <Read32_Data>
   20874:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
   20878:	e0bffd17 	ldw	r2,-12(fp)
   2087c:	10000426 	beq	r2,zero,20890 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
   20880:	e0bffe17 	ldw	r2,-8(fp)
   20884:	1080008c 	andi	r2,r2,2
   20888:	10000126 	beq	r2,zero,20890 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
   2088c:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
   20890:	e0bffd17 	ldw	r2,-12(fp)

}
   20894:	e037883a 	mov	sp,fp
   20898:	dfc00117 	ldw	ra,4(sp)
   2089c:	df000017 	ldw	fp,0(sp)
   208a0:	dec00204 	addi	sp,sp,8
   208a4:	f800283a 	ret

000208a8 <OC_I2C_Read>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   208a8:	defff804 	addi	sp,sp,-32
   208ac:	dfc00715 	stw	ra,28(sp)
   208b0:	df000615 	stw	fp,24(sp)
   208b4:	df000604 	addi	fp,sp,24
   208b8:	e13ffc15 	stw	r4,-16(fp)
   208bc:	2807883a 	mov	r3,r5
   208c0:	3005883a 	mov	r2,r6
   208c4:	e1ffff15 	stw	r7,-4(fp)
   208c8:	e0fffd05 	stb	r3,-12(fp)
   208cc:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   208d0:	e0bffc17 	ldw	r2,-16(fp)
   208d4:	10800304 	addi	r2,r2,12
   208d8:	1007883a 	mov	r3,r2
   208dc:	e0bffd03 	ldbu	r2,-12(fp)
   208e0:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   208e4:	e0bffc17 	ldw	r2,-16(fp)
   208e8:	10800404 	addi	r2,r2,16
   208ec:	1007883a 	mov	r3,r2
   208f0:	00802404 	movi	r2,144
   208f4:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   208f8:	e13ffc17 	ldw	r4,-16(fp)
   208fc:	00205e40 	call	205e4 <ACK_check>
   20900:	1000051e 	bne	r2,zero,20918 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
   20904:	010000b4 	movhi	r4,2
   20908:	2114a704 	addi	r4,r4,21148
   2090c:	0022fc40 	call	22fc4 <puts>
       return FALSE;
   20910:	0005883a 	mov	r2,zero
   20914:	00005206 	br	20a60 <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
   20918:	e0bffc17 	ldw	r2,-16(fp)
   2091c:	10800304 	addi	r2,r2,12
   20920:	1007883a 	mov	r3,r2
   20924:	e0bffe03 	ldbu	r2,-8(fp)
   20928:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   2092c:	e0bffc17 	ldw	r2,-16(fp)
   20930:	10800404 	addi	r2,r2,16
   20934:	1007883a 	mov	r3,r2
   20938:	00800404 	movi	r2,16
   2093c:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20940:	e13ffc17 	ldw	r4,-16(fp)
   20944:	00205e40 	call	205e4 <ACK_check>
   20948:	1000051e 	bne	r2,zero,20960 <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
   2094c:	010000b4 	movhi	r4,2
   20950:	2114ad04 	addi	r4,r4,21172
   20954:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20958:	0005883a 	mov	r2,zero
   2095c:	00004006 	br	20a60 <OC_I2C_Read+0x1b8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
   20960:	e0bffc17 	ldw	r2,-16(fp)
   20964:	10800304 	addi	r2,r2,12
   20968:	1007883a 	mov	r3,r2
   2096c:	e0bffd03 	ldbu	r2,-12(fp)
   20970:	10800054 	ori	r2,r2,1
   20974:	10803fcc 	andi	r2,r2,255
   20978:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   2097c:	e0bffc17 	ldw	r2,-16(fp)
   20980:	10800404 	addi	r2,r2,16
   20984:	1007883a 	mov	r3,r2
   20988:	00802404 	movi	r2,144
   2098c:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20990:	e13ffc17 	ldw	r4,-16(fp)
   20994:	00205e40 	call	205e4 <ACK_check>
   20998:	1000051e 	bne	r2,zero,209b0 <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
   2099c:	010000b4 	movhi	r4,2
   209a0:	2114b304 	addi	r4,r4,21196
   209a4:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   209a8:	0005883a 	mov	r2,zero
   209ac:	00002c06 	br	20a60 <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
   209b0:	e03ffa15 	stw	zero,-24(fp)
   209b4:	00001f06 	br	20a34 <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   209b8:	e0bffc17 	ldw	r2,-16(fp)
   209bc:	10800404 	addi	r2,r2,16
   209c0:	1009883a 	mov	r4,r2
   209c4:	e0bffa17 	ldw	r2,-24(fp)
   209c8:	10c00044 	addi	r3,r2,1
   209cc:	e0800217 	ldw	r2,8(fp)
   209d0:	1880021e 	bne	r3,r2,209dc <OC_I2C_Read+0x134>
   209d4:	00800a04 	movi	r2,40
   209d8:	00000106 	br	209e0 <OC_I2C_Read+0x138>
   209dc:	00800804 	movi	r2,32
   209e0:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   209e4:	e13ffc17 	ldw	r4,-16(fp)
   209e8:	00208440 	call	20844 <ACK_judge_for_read>
   209ec:	1000051e 	bne	r2,zero,20a04 <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
   209f0:	010000b4 	movhi	r4,2
   209f4:	2114b904 	addi	r4,r4,21220
   209f8:	0022fc40 	call	22fc4 <puts>
            return FALSE;
   209fc:	0005883a 	mov	r2,zero
   20a00:	00001706 	br	20a60 <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20a04:	e0bffc17 	ldw	r2,-16(fp)
   20a08:	10800304 	addi	r2,r2,12
   20a0c:	10800037 	ldwio	r2,0(r2)
   20a10:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20a14:	e0bffa17 	ldw	r2,-24(fp)
   20a18:	e0ffff17 	ldw	r3,-4(fp)
   20a1c:	1885883a 	add	r2,r3,r2
   20a20:	e0fffb17 	ldw	r3,-20(fp)
   20a24:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20a28:	e0bffa17 	ldw	r2,-24(fp)
   20a2c:	10800044 	addi	r2,r2,1
   20a30:	e0bffa15 	stw	r2,-24(fp)
   20a34:	e0fffa17 	ldw	r3,-24(fp)
   20a38:	e0800217 	ldw	r2,8(fp)
   20a3c:	18bfde16 	blt	r3,r2,209b8 <__alt_data_end+0xffff09b8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20a40:	e0bffc17 	ldw	r2,-16(fp)
   20a44:	10800404 	addi	r2,r2,16
   20a48:	1007883a 	mov	r3,r2
   20a4c:	00801004 	movi	r2,64
   20a50:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20a54:	01003e84 	movi	r4,250
   20a58:	00238180 	call	23818 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20a5c:	00800044 	movi	r2,1

}
   20a60:	e037883a 	mov	sp,fp
   20a64:	dfc00117 	ldw	ra,4(sp)
   20a68:	df000017 	ldw	fp,0(sp)
   20a6c:	dec00204 	addi	sp,sp,8
   20a70:	f800283a 	ret

00020a74 <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
   20a74:	defff804 	addi	sp,sp,-32
   20a78:	dfc00715 	stw	ra,28(sp)
   20a7c:	df000615 	stw	fp,24(sp)
   20a80:	df000604 	addi	fp,sp,24
   20a84:	e13ffc15 	stw	r4,-16(fp)
   20a88:	2805883a 	mov	r2,r5
   20a8c:	e1bffe15 	stw	r6,-8(fp)
   20a90:	e1ffff15 	stw	r7,-4(fp)
   20a94:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
   20a98:	e0bffc17 	ldw	r2,-16(fp)
   20a9c:	10800304 	addi	r2,r2,12
   20aa0:	1007883a 	mov	r3,r2
   20aa4:	e0bffd03 	ldbu	r2,-12(fp)
   20aa8:	10800054 	ori	r2,r2,1
   20aac:	10803fcc 	andi	r2,r2,255
   20ab0:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20ab4:	e0bffc17 	ldw	r2,-16(fp)
   20ab8:	10800404 	addi	r2,r2,16
   20abc:	1007883a 	mov	r3,r2
   20ac0:	00802404 	movi	r2,144
   20ac4:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20ac8:	e13ffc17 	ldw	r4,-16(fp)
   20acc:	00205e40 	call	205e4 <ACK_check>
   20ad0:	1000051e 	bne	r2,zero,20ae8 <OC_I2C_Read_Continue+0x74>
        printf("OC_I2C_Read error[8]\r\n");
   20ad4:	010000b4 	movhi	r4,2
   20ad8:	2114b304 	addi	r4,r4,21196
   20adc:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20ae0:	0005883a 	mov	r2,zero
   20ae4:	00002c06 	br	20b98 <OC_I2C_Read_Continue+0x124>
    }

    for(i=0;i<nReadLength;i++){
   20ae8:	e03ffa15 	stw	zero,-24(fp)
   20aec:	00001f06 	br	20b6c <OC_I2C_Read_Continue+0xf8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20af0:	e0bffc17 	ldw	r2,-16(fp)
   20af4:	10800404 	addi	r2,r2,16
   20af8:	1009883a 	mov	r4,r2
   20afc:	e0bffa17 	ldw	r2,-24(fp)
   20b00:	10c00044 	addi	r3,r2,1
   20b04:	e0bfff17 	ldw	r2,-4(fp)
   20b08:	1880021e 	bne	r3,r2,20b14 <OC_I2C_Read_Continue+0xa0>
   20b0c:	00800a04 	movi	r2,40
   20b10:	00000106 	br	20b18 <OC_I2C_Read_Continue+0xa4>
   20b14:	00800804 	movi	r2,32
   20b18:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20b1c:	e13ffc17 	ldw	r4,-16(fp)
   20b20:	00208440 	call	20844 <ACK_judge_for_read>
   20b24:	1000051e 	bne	r2,zero,20b3c <OC_I2C_Read_Continue+0xc8>
            printf("OC_I2C_Read error[10]\r\n");
   20b28:	010000b4 	movhi	r4,2
   20b2c:	2114b904 	addi	r4,r4,21220
   20b30:	0022fc40 	call	22fc4 <puts>
            return FALSE;
   20b34:	0005883a 	mov	r2,zero
   20b38:	00001706 	br	20b98 <OC_I2C_Read_Continue+0x124>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20b3c:	e0bffc17 	ldw	r2,-16(fp)
   20b40:	10800304 	addi	r2,r2,12
   20b44:	10800037 	ldwio	r2,0(r2)
   20b48:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20b4c:	e0bffa17 	ldw	r2,-24(fp)
   20b50:	e0fffe17 	ldw	r3,-8(fp)
   20b54:	1885883a 	add	r2,r3,r2
   20b58:	e0fffb17 	ldw	r3,-20(fp)
   20b5c:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20b60:	e0bffa17 	ldw	r2,-24(fp)
   20b64:	10800044 	addi	r2,r2,1
   20b68:	e0bffa15 	stw	r2,-24(fp)
   20b6c:	e0fffa17 	ldw	r3,-24(fp)
   20b70:	e0bfff17 	ldw	r2,-4(fp)
   20b74:	18bfde16 	blt	r3,r2,20af0 <__alt_data_end+0xffff0af0>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20b78:	e0bffc17 	ldw	r2,-16(fp)
   20b7c:	10800404 	addi	r2,r2,16
   20b80:	1007883a 	mov	r3,r2
   20b84:	00801004 	movi	r2,64
   20b88:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20b8c:	01003e84 	movi	r4,250
   20b90:	00238180 	call	23818 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20b94:	00800044 	movi	r2,1

}
   20b98:	e037883a 	mov	sp,fp
   20b9c:	dfc00117 	ldw	ra,4(sp)
   20ba0:	df000017 	ldw	fp,0(sp)
   20ba4:	dec00204 	addi	sp,sp,8
   20ba8:	f800283a 	ret

00020bac <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
   20bac:	defff804 	addi	sp,sp,-32
   20bb0:	dfc00715 	stw	ra,28(sp)
   20bb4:	df000615 	stw	fp,24(sp)
   20bb8:	df000604 	addi	fp,sp,24
   20bbc:	e13ffc15 	stw	r4,-16(fp)
   20bc0:	2807883a 	mov	r3,r5
   20bc4:	3005883a 	mov	r2,r6
   20bc8:	e1ffff15 	stw	r7,-4(fp)
   20bcc:	e0fffd05 	stb	r3,-12(fp)
   20bd0:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20bd4:	e0bffe0b 	ldhu	r2,-8(fp)
   20bd8:	1004d23a 	srli	r2,r2,8
   20bdc:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
   20be0:	e0bffe0b 	ldhu	r2,-8(fp)
   20be4:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20be8:	e0bffd03 	ldbu	r2,-12(fp)
   20bec:	100d883a 	mov	r6,r2
   20bf0:	014000c4 	movi	r5,3
   20bf4:	e13ffc17 	ldw	r4,-16(fp)
   20bf8:	00202900 	call	20290 <Write32_Data>
   20bfc:	1000021e 	bne	r2,zero,20c08 <OC_I2CL_Write+0x5c>
       return FALSE;
   20c00:	0005883a 	mov	r2,zero
   20c04:	00006806 	br	20da8 <OC_I2CL_Write+0x1fc>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
   20c08:	01802404 	movi	r6,144
   20c0c:	01400104 	movi	r5,4
   20c10:	e13ffc17 	ldw	r4,-16(fp)
   20c14:	00202900 	call	20290 <Write32_Data>
   20c18:	1000021e 	bne	r2,zero,20c24 <OC_I2CL_Write+0x78>
       return FALSE;
   20c1c:	0005883a 	mov	r2,zero
   20c20:	00006106 	br	20da8 <OC_I2CL_Write+0x1fc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20c24:	e13ffc17 	ldw	r4,-16(fp)
   20c28:	00205e40 	call	205e4 <ACK_check>
   20c2c:	1000051e 	bne	r2,zero,20c44 <OC_I2CL_Write+0x98>
        printf("OC_I2CL_Write error[0]\r\n");
   20c30:	010000b4 	movhi	r4,2
   20c34:	2114bf04 	addi	r4,r4,21244
   20c38:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20c3c:	0005883a 	mov	r2,zero
   20c40:	00005906 	br	20da8 <OC_I2CL_Write+0x1fc>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20c44:	e0bffb03 	ldbu	r2,-20(fp)
   20c48:	100d883a 	mov	r6,r2
   20c4c:	014000c4 	movi	r5,3
   20c50:	e13ffc17 	ldw	r4,-16(fp)
   20c54:	00202900 	call	20290 <Write32_Data>
   20c58:	1000021e 	bne	r2,zero,20c64 <OC_I2CL_Write+0xb8>
       return FALSE;
   20c5c:	0005883a 	mov	r2,zero
   20c60:	00005106 	br	20da8 <OC_I2CL_Write+0x1fc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20c64:	01800404 	movi	r6,16
   20c68:	01400104 	movi	r5,4
   20c6c:	e13ffc17 	ldw	r4,-16(fp)
   20c70:	00202900 	call	20290 <Write32_Data>
   20c74:	1000021e 	bne	r2,zero,20c80 <OC_I2CL_Write+0xd4>
        return FALSE;
   20c78:	0005883a 	mov	r2,zero
   20c7c:	00004a06 	br	20da8 <OC_I2CL_Write+0x1fc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20c80:	e13ffc17 	ldw	r4,-16(fp)
   20c84:	00205e40 	call	205e4 <ACK_check>
   20c88:	1000051e 	bne	r2,zero,20ca0 <OC_I2CL_Write+0xf4>
        printf("OC_I2CL_Write error[1]\r\n");
   20c8c:	010000b4 	movhi	r4,2
   20c90:	2114c504 	addi	r4,r4,21268
   20c94:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20c98:	0005883a 	mov	r2,zero
   20c9c:	00004206 	br	20da8 <OC_I2CL_Write+0x1fc>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
   20ca0:	e0bffb43 	ldbu	r2,-19(fp)
   20ca4:	100d883a 	mov	r6,r2
   20ca8:	014000c4 	movi	r5,3
   20cac:	e13ffc17 	ldw	r4,-16(fp)
   20cb0:	00202900 	call	20290 <Write32_Data>
   20cb4:	1000021e 	bne	r2,zero,20cc0 <OC_I2CL_Write+0x114>
       return FALSE;
   20cb8:	0005883a 	mov	r2,zero
   20cbc:	00003a06 	br	20da8 <OC_I2CL_Write+0x1fc>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
   20cc0:	01800404 	movi	r6,16
   20cc4:	01400104 	movi	r5,4
   20cc8:	e13ffc17 	ldw	r4,-16(fp)
   20ccc:	00202900 	call	20290 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20cd0:	e13ffc17 	ldw	r4,-16(fp)
   20cd4:	00205e40 	call	205e4 <ACK_check>
   20cd8:	1000051e 	bne	r2,zero,20cf0 <OC_I2CL_Write+0x144>
        printf("OC_I2CL_Write error[2]\r\n");
   20cdc:	010000b4 	movhi	r4,2
   20ce0:	2114cb04 	addi	r4,r4,21292
   20ce4:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20ce8:	0005883a 	mov	r2,zero
   20cec:	00002e06 	br	20da8 <OC_I2CL_Write+0x1fc>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
   20cf0:	e0800217 	ldw	r2,8(fp)
   20cf4:	10bfffc4 	addi	r2,r2,-1
   20cf8:	e0bffa15 	stw	r2,-24(fp)
   20cfc:	00001e06 	br	20d78 <OC_I2CL_Write+0x1cc>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   20d00:	e0bffa17 	ldw	r2,-24(fp)
   20d04:	e0ffff17 	ldw	r3,-4(fp)
   20d08:	1885883a 	add	r2,r3,r2
   20d0c:	10800003 	ldbu	r2,0(r2)
   20d10:	10803fcc 	andi	r2,r2,255
   20d14:	100d883a 	mov	r6,r2
   20d18:	014000c4 	movi	r5,3
   20d1c:	e13ffc17 	ldw	r4,-16(fp)
   20d20:	00202900 	call	20290 <Write32_Data>
   20d24:	1000021e 	bne	r2,zero,20d30 <OC_I2CL_Write+0x184>
            return FALSE;
   20d28:	0005883a 	mov	r2,zero
   20d2c:	00001e06 	br	20da8 <OC_I2CL_Write+0x1fc>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
   20d30:	01800404 	movi	r6,16
   20d34:	01400104 	movi	r5,4
   20d38:	e13ffc17 	ldw	r4,-16(fp)
   20d3c:	00202900 	call	20290 <Write32_Data>
   20d40:	1000021e 	bne	r2,zero,20d4c <OC_I2CL_Write+0x1a0>
            return FALSE;
   20d44:	0005883a 	mov	r2,zero
   20d48:	00001706 	br	20da8 <OC_I2CL_Write+0x1fc>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
   20d4c:	e13ffc17 	ldw	r4,-16(fp)
   20d50:	00205e40 	call	205e4 <ACK_check>
   20d54:	1000051e 	bne	r2,zero,20d6c <OC_I2CL_Write+0x1c0>
             printf("OC_I2CL_Write error[3]\r\n");
   20d58:	010000b4 	movhi	r4,2
   20d5c:	2114d104 	addi	r4,r4,21316
   20d60:	0022fc40 	call	22fc4 <puts>
             return FALSE;
   20d64:	0005883a 	mov	r2,zero
   20d68:	00000f06 	br	20da8 <OC_I2CL_Write+0x1fc>
        return FALSE;
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
   20d6c:	e0bffa17 	ldw	r2,-24(fp)
   20d70:	10bfffc4 	addi	r2,r2,-1
   20d74:	e0bffa15 	stw	r2,-24(fp)
   20d78:	e0bffa17 	ldw	r2,-24(fp)
   20d7c:	103fe00e 	bge	r2,zero,20d00 <__alt_data_end+0xffff0d00>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
   20d80:	01801004 	movi	r6,64
   20d84:	01400104 	movi	r5,4
   20d88:	e13ffc17 	ldw	r4,-16(fp)
   20d8c:	00202900 	call	20290 <Write32_Data>
   20d90:	1000021e 	bne	r2,zero,20d9c <OC_I2CL_Write+0x1f0>
         return FALSE;
   20d94:	0005883a 	mov	r2,zero
   20d98:	00000306 	br	20da8 <OC_I2CL_Write+0x1fc>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   20d9c:	01003e84 	movi	r4,250
   20da0:	00238180 	call	23818 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   20da4:	00800044 	movi	r2,1
}
   20da8:	e037883a 	mov	sp,fp
   20dac:	dfc00117 	ldw	ra,4(sp)
   20db0:	df000017 	ldw	fp,0(sp)
   20db4:	dec00204 	addi	sp,sp,8
   20db8:	f800283a 	ret

00020dbc <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
   20dbc:	defff704 	addi	sp,sp,-36
   20dc0:	dfc00815 	stw	ra,32(sp)
   20dc4:	df000715 	stw	fp,28(sp)
   20dc8:	df000704 	addi	fp,sp,28
   20dcc:	e13ffc15 	stw	r4,-16(fp)
   20dd0:	2807883a 	mov	r3,r5
   20dd4:	3005883a 	mov	r2,r6
   20dd8:	e1ffff15 	stw	r7,-4(fp)
   20ddc:	e0fffd05 	stb	r3,-12(fp)
   20de0:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20de4:	e0bffe0b 	ldhu	r2,-8(fp)
   20de8:	1004d23a 	srli	r2,r2,8
   20dec:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
   20df0:	e0bffe0b 	ldhu	r2,-8(fp)
   20df4:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20df8:	e0bffd03 	ldbu	r2,-12(fp)
   20dfc:	100d883a 	mov	r6,r2
   20e00:	014000c4 	movi	r5,3
   20e04:	e13ffc17 	ldw	r4,-16(fp)
   20e08:	00202900 	call	20290 <Write32_Data>
   20e0c:	1000021e 	bne	r2,zero,20e18 <OC_I2CL_Read+0x5c>
       return FALSE;
   20e10:	0005883a 	mov	r2,zero
   20e14:	00008406 	br	21028 <OC_I2CL_Read+0x26c>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
   20e18:	01802404 	movi	r6,144
   20e1c:	01400104 	movi	r5,4
   20e20:	e13ffc17 	ldw	r4,-16(fp)
   20e24:	00202900 	call	20290 <Write32_Data>
   20e28:	1000021e 	bne	r2,zero,20e34 <OC_I2CL_Read+0x78>
       return FALSE;
   20e2c:	0005883a 	mov	r2,zero
   20e30:	00007d06 	br	21028 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20e34:	e13ffc17 	ldw	r4,-16(fp)
   20e38:	00205e40 	call	205e4 <ACK_check>
   20e3c:	1000051e 	bne	r2,zero,20e54 <OC_I2CL_Read+0x98>
        printf("OC_I2CL_Read error[0]\r\n");
   20e40:	010000b4 	movhi	r4,2
   20e44:	2114d704 	addi	r4,r4,21340
   20e48:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20e4c:	0005883a 	mov	r2,zero
   20e50:	00007506 	br	21028 <OC_I2CL_Read+0x26c>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20e54:	e0bffa03 	ldbu	r2,-24(fp)
   20e58:	100d883a 	mov	r6,r2
   20e5c:	014000c4 	movi	r5,3
   20e60:	e13ffc17 	ldw	r4,-16(fp)
   20e64:	00202900 	call	20290 <Write32_Data>
   20e68:	1000021e 	bne	r2,zero,20e74 <OC_I2CL_Read+0xb8>
       return FALSE;
   20e6c:	0005883a 	mov	r2,zero
   20e70:	00006d06 	br	21028 <OC_I2CL_Read+0x26c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20e74:	01800404 	movi	r6,16
   20e78:	01400104 	movi	r5,4
   20e7c:	e13ffc17 	ldw	r4,-16(fp)
   20e80:	00202900 	call	20290 <Write32_Data>
   20e84:	1000021e 	bne	r2,zero,20e90 <OC_I2CL_Read+0xd4>
        return FALSE;
   20e88:	0005883a 	mov	r2,zero
   20e8c:	00006606 	br	21028 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20e90:	e13ffc17 	ldw	r4,-16(fp)
   20e94:	00205e40 	call	205e4 <ACK_check>
   20e98:	1000051e 	bne	r2,zero,20eb0 <OC_I2CL_Read+0xf4>
        printf("OC_I2CL_Read error[1]\r\n");
   20e9c:	010000b4 	movhi	r4,2
   20ea0:	2114dd04 	addi	r4,r4,21364
   20ea4:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20ea8:	0005883a 	mov	r2,zero
   20eac:	00005e06 	br	21028 <OC_I2CL_Read+0x26c>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   20eb0:	e0bffa43 	ldbu	r2,-23(fp)
   20eb4:	100d883a 	mov	r6,r2
   20eb8:	014000c4 	movi	r5,3
   20ebc:	e13ffc17 	ldw	r4,-16(fp)
   20ec0:	00202900 	call	20290 <Write32_Data>
   20ec4:	1000021e 	bne	r2,zero,20ed0 <OC_I2CL_Read+0x114>
       return FALSE;
   20ec8:	0005883a 	mov	r2,zero
   20ecc:	00005606 	br	21028 <OC_I2CL_Read+0x26c>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20ed0:	01800404 	movi	r6,16
   20ed4:	01400104 	movi	r5,4
   20ed8:	e13ffc17 	ldw	r4,-16(fp)
   20edc:	00202900 	call	20290 <Write32_Data>
   20ee0:	1000021e 	bne	r2,zero,20eec <OC_I2CL_Read+0x130>
        return FALSE;
   20ee4:	0005883a 	mov	r2,zero
   20ee8:	00004f06 	br	21028 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20eec:	e13ffc17 	ldw	r4,-16(fp)
   20ef0:	00205e40 	call	205e4 <ACK_check>
   20ef4:	1000051e 	bne	r2,zero,20f0c <OC_I2CL_Read+0x150>
        printf("OC_I2CL_Read error[2]\r\n");
   20ef8:	010000b4 	movhi	r4,2
   20efc:	2114e304 	addi	r4,r4,21388
   20f00:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20f04:	0005883a 	mov	r2,zero
   20f08:	00004706 	br	21028 <OC_I2CL_Read+0x26c>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   20f0c:	e0bffd03 	ldbu	r2,-12(fp)
   20f10:	10800054 	ori	r2,r2,1
   20f14:	10803fcc 	andi	r2,r2,255
   20f18:	100d883a 	mov	r6,r2
   20f1c:	014000c4 	movi	r5,3
   20f20:	e13ffc17 	ldw	r4,-16(fp)
   20f24:	00202900 	call	20290 <Write32_Data>
   20f28:	1000021e 	bne	r2,zero,20f34 <OC_I2CL_Read+0x178>
         return FALSE;
   20f2c:	0005883a 	mov	r2,zero
   20f30:	00003d06 	br	21028 <OC_I2CL_Read+0x26c>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
   20f34:	01802404 	movi	r6,144
   20f38:	01400104 	movi	r5,4
   20f3c:	e13ffc17 	ldw	r4,-16(fp)
   20f40:	00202900 	call	20290 <Write32_Data>
   20f44:	1000021e 	bne	r2,zero,20f50 <OC_I2CL_Read+0x194>
         return FALSE;
   20f48:	0005883a 	mov	r2,zero
   20f4c:	00003606 	br	21028 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20f50:	e13ffc17 	ldw	r4,-16(fp)
   20f54:	00205e40 	call	205e4 <ACK_check>
   20f58:	1000051e 	bne	r2,zero,20f70 <OC_I2CL_Read+0x1b4>
        printf("OC_I2CL_Read error[3]\r\n");
   20f5c:	010000b4 	movhi	r4,2
   20f60:	2114e904 	addi	r4,r4,21412
   20f64:	0022fc40 	call	22fc4 <puts>
        return FALSE;
   20f68:	0005883a 	mov	r2,zero
   20f6c:	00002e06 	br	21028 <OC_I2CL_Read+0x26c>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   20f70:	e03ff915 	stw	zero,-28(fp)
   20f74:	00001f06 	br	20ff4 <OC_I2CL_Read+0x238>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20f78:	e0bffc17 	ldw	r2,-16(fp)
   20f7c:	10800404 	addi	r2,r2,16
   20f80:	1009883a 	mov	r4,r2
   20f84:	e0bff917 	ldw	r2,-28(fp)
   20f88:	10c00044 	addi	r3,r2,1
   20f8c:	e0800217 	ldw	r2,8(fp)
   20f90:	1880021e 	bne	r3,r2,20f9c <OC_I2CL_Read+0x1e0>
   20f94:	00800a04 	movi	r2,40
   20f98:	00000106 	br	20fa0 <OC_I2CL_Read+0x1e4>
   20f9c:	00800804 	movi	r2,32
   20fa0:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20fa4:	e13ffc17 	ldw	r4,-16(fp)
   20fa8:	00208440 	call	20844 <ACK_judge_for_read>
   20fac:	1000051e 	bne	r2,zero,20fc4 <OC_I2CL_Read+0x208>
            printf("OC_I2CL_Read error[4]\r\n");
   20fb0:	010000b4 	movhi	r4,2
   20fb4:	2114ef04 	addi	r4,r4,21436
   20fb8:	0022fc40 	call	22fc4 <puts>
            return FALSE;
   20fbc:	0005883a 	mov	r2,zero
   20fc0:	00001906 	br	21028 <OC_I2CL_Read+0x26c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20fc4:	e0bffc17 	ldw	r2,-16(fp)
   20fc8:	10800304 	addi	r2,r2,12
   20fcc:	10800037 	ldwio	r2,0(r2)
   20fd0:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20fd4:	e0bff917 	ldw	r2,-28(fp)
   20fd8:	e0ffff17 	ldw	r3,-4(fp)
   20fdc:	1885883a 	add	r2,r3,r2
   20fe0:	e0fffb17 	ldw	r3,-20(fp)
   20fe4:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   20fe8:	e0bff917 	ldw	r2,-28(fp)
   20fec:	10800044 	addi	r2,r2,1
   20ff0:	e0bff915 	stw	r2,-28(fp)
   20ff4:	e0fff917 	ldw	r3,-28(fp)
   20ff8:	e0800217 	ldw	r2,8(fp)
   20ffc:	18bfde16 	blt	r3,r2,20f78 <__alt_data_end+0xffff0f78>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
   21000:	01801004 	movi	r6,64
   21004:	01400104 	movi	r5,4
   21008:	e13ffc17 	ldw	r4,-16(fp)
   2100c:	00202900 	call	20290 <Write32_Data>
   21010:	1000021e 	bne	r2,zero,2101c <OC_I2CL_Read+0x260>
       return FALSE;
   21014:	0005883a 	mov	r2,zero
   21018:	00000306 	br	21028 <OC_I2CL_Read+0x26c>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   2101c:	01003e84 	movi	r4,250
   21020:	00238180 	call	23818 <usleep>

   return TRUE;
   21024:	00800044 	movi	r2,1

}
   21028:	e037883a 	mov	sp,fp
   2102c:	dfc00117 	ldw	ra,4(sp)
   21030:	df000017 	ldw	fp,0(sp)
   21034:	dec00204 	addi	sp,sp,8
   21038:	f800283a 	ret

0002103c <mipi_clear_error>:
#define MIPI_REG_CSIErrEn		0x0066
#define MIPI_REG_MDLSynErr		0x0068
#define MIPI_REG_FrmErrCnt		0x0080
#define MIPI_REG_MDLErrCnt		0x0090

void mipi_clear_error(void){
   2103c:	defffe04 	addi	sp,sp,-8
   21040:	dfc00115 	stw	ra,4(sp)
   21044:	df000015 	stw	fp,0(sp)
   21048:	d839883a 	mov	fp,sp
	MipiBridgeRegWrite(MIPI_REG_CSIStatus,0x01FF); // clear error
   2104c:	01407fc4 	movi	r5,511
   21050:	01001904 	movi	r4,100
   21054:	0021e840 	call	21e84 <MipiBridgeRegWrite>
	MipiBridgeRegWrite(MIPI_REG_MDLSynErr,0x0000); // clear error
   21058:	000b883a 	mov	r5,zero
   2105c:	01001a04 	movi	r4,104
   21060:	0021e840 	call	21e84 <MipiBridgeRegWrite>
	MipiBridgeRegWrite(MIPI_REG_FrmErrCnt,0x0000); // clear error
   21064:	000b883a 	mov	r5,zero
   21068:	01002004 	movi	r4,128
   2106c:	0021e840 	call	21e84 <MipiBridgeRegWrite>
	MipiBridgeRegWrite(MIPI_REG_MDLErrCnt, 0x0000); // clear error
   21070:	000b883a 	mov	r5,zero
   21074:	01002404 	movi	r4,144
   21078:	0021e840 	call	21e84 <MipiBridgeRegWrite>

  	MipiBridgeRegWrite(0x0082,0x00);
   2107c:	000b883a 	mov	r5,zero
   21080:	01002084 	movi	r4,130
   21084:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x0084,0x00);
   21088:	000b883a 	mov	r5,zero
   2108c:	01002104 	movi	r4,132
   21090:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x0086,0x00);
   21094:	000b883a 	mov	r5,zero
   21098:	01002184 	movi	r4,134
   2109c:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x0088,0x00);
   210a0:	000b883a 	mov	r5,zero
   210a4:	01002204 	movi	r4,136
   210a8:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x008A,0x00);
   210ac:	000b883a 	mov	r5,zero
   210b0:	01002284 	movi	r4,138
   210b4:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x008C,0x00);
   210b8:	000b883a 	mov	r5,zero
   210bc:	01002304 	movi	r4,140
   210c0:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x008E,0x00);
   210c4:	000b883a 	mov	r5,zero
   210c8:	01002384 	movi	r4,142
   210cc:	0021e840 	call	21e84 <MipiBridgeRegWrite>
  	MipiBridgeRegWrite(0x0090,0x00);
   210d0:	000b883a 	mov	r5,zero
   210d4:	01002404 	movi	r4,144
   210d8:	0021e840 	call	21e84 <MipiBridgeRegWrite>
}
   210dc:	0001883a 	nop
   210e0:	e037883a 	mov	sp,fp
   210e4:	dfc00117 	ldw	ra,4(sp)
   210e8:	df000017 	ldw	fp,0(sp)
   210ec:	dec00204 	addi	sp,sp,8
   210f0:	f800283a 	ret

000210f4 <mipi_show_error_info>:

void mipi_show_error_info(void){
   210f4:	defff904 	addi	sp,sp,-28
   210f8:	dfc00615 	stw	ra,24(sp)
   210fc:	df000515 	stw	fp,20(sp)
   21100:	df000504 	addi	fp,sp,20

	alt_u16 PHY_status, SCI_status, MDLSynErr, FrmErrCnt, MDLErrCnt;

	PHY_status = MipiBridgeRegRead(MIPI_REG_PHYSta);
   21104:	01001884 	movi	r4,98
   21108:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   2110c:	e0bffd0d 	sth	r2,-12(fp)
	SCI_status = MipiBridgeRegRead(MIPI_REG_CSIStatus);
   21110:	01001904 	movi	r4,100
   21114:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21118:	e0bffd8d 	sth	r2,-10(fp)
	MDLSynErr = MipiBridgeRegRead(MIPI_REG_MDLSynErr);
   2111c:	01001a04 	movi	r4,104
   21120:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21124:	e0bffe0d 	sth	r2,-8(fp)
	FrmErrCnt = MipiBridgeRegRead(MIPI_REG_FrmErrCnt);
   21128:	01002004 	movi	r4,128
   2112c:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21130:	e0bffe8d 	sth	r2,-6(fp)
	MDLErrCnt = MipiBridgeRegRead(MIPI_REG_MDLErrCnt);
   21134:	01002404 	movi	r4,144
   21138:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   2113c:	e0bfff0d 	sth	r2,-4(fp)
	printf("PHY_status=%xh, CSI_status=%xh, MDLSynErr=%xh, FrmErrCnt=%xh, MDLErrCnt=%xh\r\n", PHY_status, SCI_status, MDLSynErr,FrmErrCnt, MDLErrCnt);
   21140:	e13ffd0b 	ldhu	r4,-12(fp)
   21144:	e17ffd8b 	ldhu	r5,-10(fp)
   21148:	e1bffe0b 	ldhu	r6,-8(fp)
   2114c:	e0bffe8b 	ldhu	r2,-6(fp)
   21150:	e0ffff0b 	ldhu	r3,-4(fp)
   21154:	d8c00115 	stw	r3,4(sp)
   21158:	d8800015 	stw	r2,0(sp)
   2115c:	300f883a 	mov	r7,r6
   21160:	280d883a 	mov	r6,r5
   21164:	200b883a 	mov	r5,r4
   21168:	010000b4 	movhi	r4,2
   2116c:	2114f504 	addi	r4,r4,21460
   21170:	0022ef80 	call	22ef8 <printf>
}
   21174:	0001883a 	nop
   21178:	e037883a 	mov	sp,fp
   2117c:	dfc00117 	ldw	ra,4(sp)
   21180:	df000017 	ldw	fp,0(sp)
   21184:	dec00204 	addi	sp,sp,8
   21188:	f800283a 	ret

0002118c <mipi_show_error_info_more>:

void mipi_show_error_info_more(void){
   2118c:	defffe04 	addi	sp,sp,-8
   21190:	dfc00115 	stw	ra,4(sp)
   21194:	df000015 	stw	fp,0(sp)
   21198:	d839883a 	mov	fp,sp
    printf("FrmErrCnt = %d\n",MipiBridgeRegRead(0x0080));
   2119c:	01002004 	movi	r4,128
   211a0:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   211a4:	10bfffcc 	andi	r2,r2,65535
   211a8:	100b883a 	mov	r5,r2
   211ac:	010000b4 	movhi	r4,2
   211b0:	21150904 	addi	r4,r4,21540
   211b4:	0022ef80 	call	22ef8 <printf>
    printf("CRCErrCnt = %d\n",MipiBridgeRegRead(0x0082));
   211b8:	01002084 	movi	r4,130
   211bc:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   211c0:	10bfffcc 	andi	r2,r2,65535
   211c4:	100b883a 	mov	r5,r2
   211c8:	010000b4 	movhi	r4,2
   211cc:	21150d04 	addi	r4,r4,21556
   211d0:	0022ef80 	call	22ef8 <printf>
    printf("CorErrCnt = %d\n",MipiBridgeRegRead(0x0084));
   211d4:	01002104 	movi	r4,132
   211d8:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   211dc:	10bfffcc 	andi	r2,r2,65535
   211e0:	100b883a 	mov	r5,r2
   211e4:	010000b4 	movhi	r4,2
   211e8:	21151104 	addi	r4,r4,21572
   211ec:	0022ef80 	call	22ef8 <printf>
    printf("HdrErrCnt = %d\n",MipiBridgeRegRead(0x0086));
   211f0:	01002184 	movi	r4,134
   211f4:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   211f8:	10bfffcc 	andi	r2,r2,65535
   211fc:	100b883a 	mov	r5,r2
   21200:	010000b4 	movhi	r4,2
   21204:	21151504 	addi	r4,r4,21588
   21208:	0022ef80 	call	22ef8 <printf>
    printf("EIDErrCnt = %d\n",MipiBridgeRegRead(0x0088));
   2120c:	01002204 	movi	r4,136
   21210:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21214:	10bfffcc 	andi	r2,r2,65535
   21218:	100b883a 	mov	r5,r2
   2121c:	010000b4 	movhi	r4,2
   21220:	21151904 	addi	r4,r4,21604
   21224:	0022ef80 	call	22ef8 <printf>
    printf("CtlErrCnt = %d\n",MipiBridgeRegRead(0x008A));
   21228:	01002284 	movi	r4,138
   2122c:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21230:	10bfffcc 	andi	r2,r2,65535
   21234:	100b883a 	mov	r5,r2
   21238:	010000b4 	movhi	r4,2
   2123c:	21151d04 	addi	r4,r4,21620
   21240:	0022ef80 	call	22ef8 <printf>
    printf("SoTErrCnt = %d\n",MipiBridgeRegRead(0x008C));
   21244:	01002304 	movi	r4,140
   21248:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   2124c:	10bfffcc 	andi	r2,r2,65535
   21250:	100b883a 	mov	r5,r2
   21254:	010000b4 	movhi	r4,2
   21258:	21152104 	addi	r4,r4,21636
   2125c:	0022ef80 	call	22ef8 <printf>
    printf("SynErrCnt = %d\n",MipiBridgeRegRead(0x008E));
   21260:	01002384 	movi	r4,142
   21264:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21268:	10bfffcc 	andi	r2,r2,65535
   2126c:	100b883a 	mov	r5,r2
   21270:	010000b4 	movhi	r4,2
   21274:	21152504 	addi	r4,r4,21652
   21278:	0022ef80 	call	22ef8 <printf>
    printf("MDLErrCnt = %d\n",MipiBridgeRegRead(0x0090));
   2127c:	01002404 	movi	r4,144
   21280:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21284:	10bfffcc 	andi	r2,r2,65535
   21288:	100b883a 	mov	r5,r2
   2128c:	010000b4 	movhi	r4,2
   21290:	21152904 	addi	r4,r4,21668
   21294:	0022ef80 	call	22ef8 <printf>
    printf("FIFOSTATUS = %d\n",MipiBridgeRegRead(0x00F8));
   21298:	01003e04 	movi	r4,248
   2129c:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   212a0:	10bfffcc 	andi	r2,r2,65535
   212a4:	100b883a 	mov	r5,r2
   212a8:	010000b4 	movhi	r4,2
   212ac:	21152d04 	addi	r4,r4,21684
   212b0:	0022ef80 	call	22ef8 <printf>
    printf("DataType = 0x%04x\n",MipiBridgeRegRead(0x006A));
   212b4:	01001a84 	movi	r4,106
   212b8:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   212bc:	10bfffcc 	andi	r2,r2,65535
   212c0:	100b883a 	mov	r5,r2
   212c4:	010000b4 	movhi	r4,2
   212c8:	21153204 	addi	r4,r4,21704
   212cc:	0022ef80 	call	22ef8 <printf>
    printf("CSIPktLen = %d\n",MipiBridgeRegRead(0x006E));
   212d0:	01001b84 	movi	r4,110
   212d4:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   212d8:	10bfffcc 	andi	r2,r2,65535
   212dc:	100b883a 	mov	r5,r2
   212e0:	010000b4 	movhi	r4,2
   212e4:	21153704 	addi	r4,r4,21724
   212e8:	0022ef80 	call	22ef8 <printf>
}
   212ec:	0001883a 	nop
   212f0:	e037883a 	mov	sp,fp
   212f4:	dfc00117 	ldw	ra,4(sp)
   212f8:	df000017 	ldw	fp,0(sp)
   212fc:	dec00204 	addi	sp,sp,8
   21300:	f800283a 	ret

00021304 <MIPI_Init>:



bool MIPI_Init(void){
   21304:	defffd04 	addi	sp,sp,-12
   21308:	dfc00215 	stw	ra,8(sp)
   2130c:	df000115 	stw	fp,4(sp)
   21310:	df000104 	addi	fp,sp,4
	bool bSuccess;


	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, 50*1000*1000,400*1000); //I2C: 400K
   21314:	018001b4 	movhi	r6,6
   21318:	3186a004 	addi	r6,r6,6784
   2131c:	0140bef4 	movhi	r5,763
   21320:	297c2004 	addi	r5,r5,-3968
   21324:	01000174 	movhi	r4,5
   21328:	21100004 	addi	r4,r4,16384
   2132c:	00203980 	call	20398 <oc_i2c_init_ex>
   21330:	e0bfff15 	stw	r2,-4(fp)
	if (!bSuccess)
   21334:	e0bfff17 	ldw	r2,-4(fp)
   21338:	1000031e 	bne	r2,zero,21348 <MIPI_Init+0x44>
		printf("failed to init MIPI- Bridge i2c\r\n");
   2133c:	010000b4 	movhi	r4,2
   21340:	21153b04 	addi	r4,r4,21740
   21344:	0022fc40 	call	22fc4 <puts>

    usleep(50*1000);
   21348:	0130d414 	movui	r4,50000
   2134c:	00238180 	call	23818 <usleep>
    MipiBridgeInit();
   21350:	0021f680 	call	21f68 <MipiBridgeInit>

    usleep(500*1000);
   21354:	01000234 	movhi	r4,8
   21358:	21284804 	addi	r4,r4,-24288
   2135c:	00238180 	call	23818 <usleep>
    OV8865_FOCUS_Move_to(1023);
    usleep(20*1000);
    OV8865_FOCUS_Move_to(512);
*/
    // config camear
    MipiCameraInit();
   21360:	00224c40 	call	224c4 <MipiCameraInit>
//    oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);  // Release I2C bus , due to two I2C master shared!




 	usleep(1000);
   21364:	0100fa04 	movi	r4,1000
   21368:	00238180 	call	23818 <usleep>


//    oc_i2c_uninit(I2C_OPENCORES_MIPI_BASE);

	return bSuccess;
   2136c:	e0bfff17 	ldw	r2,-4(fp)
}
   21370:	e037883a 	mov	sp,fp
   21374:	dfc00117 	ldw	ra,4(sp)
   21378:	df000017 	ldw	fp,0(sp)
   2137c:	dec00204 	addi	sp,sp,8
   21380:	f800283a 	ret

00021384 <Init_mipi_d8m>:


bool Init_mipi_d8m(void){
   21384:	defffd04 	addi	sp,sp,-12
   21388:	dfc00215 	stw	ra,8(sp)
   2138c:	df000115 	stw	fp,4(sp)
   21390:	df000104 	addi	fp,sp,4
	bool bSuccess;
	// hardware reset
	  IOWR(CAMERA_PWDN_N_BASE, 0x00, 0x00);
   21394:	0007883a 	mov	r3,zero
   21398:	00800174 	movhi	r2,5
   2139c:	108c0004 	addi	r2,r2,12288
   213a0:	10c00035 	stwio	r3,0(r2)
	  IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);
   213a4:	0007883a 	mov	r3,zero
   213a8:	00800174 	movhi	r2,5
   213ac:	10940004 	addi	r2,r2,20480
   213b0:	10c00035 	stwio	r3,0(r2)

	  usleep(2000);
   213b4:	0101f404 	movi	r4,2000
   213b8:	00238180 	call	23818 <usleep>
	  IOWR(CAMERA_PWDN_N_BASE, 0x00, 0xFF);
   213bc:	00c03fc4 	movi	r3,255
   213c0:	00800174 	movhi	r2,5
   213c4:	108c0004 	addi	r2,r2,12288
   213c8:	10c00035 	stwio	r3,0(r2)

	  usleep(2000);
   213cc:	0101f404 	movi	r4,2000
   213d0:	00238180 	call	23818 <usleep>
	  IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);
   213d4:	00c03fc4 	movi	r3,255
   213d8:	00800174 	movhi	r2,5
   213dc:	10940004 	addi	r2,r2,20480
   213e0:	10c00035 	stwio	r3,0(r2)

	  bSuccess = MIPI_Init();
   213e4:	00213040 	call	21304 <MIPI_Init>
   213e8:	e0bfff15 	stw	r2,-4(fp)
	  if (!bSuccess){
   213ec:	e0bfff17 	ldw	r2,-4(fp)
   213f0:	1000041e 	bne	r2,zero,21404 <Init_mipi_d8m+0x80>
		  printf("MIPI_Init Init failed!\r\n");
   213f4:	010000b4 	movhi	r4,2
   213f8:	21154404 	addi	r4,r4,21776
   213fc:	0022fc40 	call	22fc4 <puts>
   21400:	00000306 	br	21410 <Init_mipi_d8m+0x8c>
	  }else{
		  printf("MIPI_Init Init successfully!\r\n");
   21404:	010000b4 	movhi	r4,2
   21408:	21154a04 	addi	r4,r4,21800
   2140c:	0022fc40 	call	22fc4 <puts>
	   if (!MIPI_Init()){
		  printf("MIPI_Init Init failed!\r\n");
	  }else{
		  printf("MIPI_Init Init successfully!\r\n");
	  }*/
}
   21410:	0001883a 	nop
   21414:	e037883a 	mov	sp,fp
   21418:	dfc00117 	ldw	ra,4(sp)
   2141c:	df000017 	ldw	fp,0(sp)
   21420:	dec00204 	addi	sp,sp,8
   21424:	f800283a 	ret

00021428 <MIX_Reset>:
#define FRAME_BACKGROUN_B		255

#define  PIP_WIDTH				270
#define  PIP_HEIGHT				200

void MIX_Reset(int bGo){
   21428:	defffe04 	addi	sp,sp,-8
   2142c:	df000115 	stw	fp,4(sp)
   21430:	df000104 	addi	fp,sp,4
   21434:	e13fff15 	stw	r4,-4(fp)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0, 0x00); // stop
   21438:	0007883a 	mov	r3,zero
   2143c:	008000f4 	movhi	r2,3
   21440:	10880004 	addi	r2,r2,8192
   21444:	10c00035 	stwio	r3,0(r2)

	IOWR(ALT_VIP_CL_MIXER_0_BASE, 3, FRAME_WIDTH); // frame width
   21448:	00c0c804 	movi	r3,800
   2144c:	008000f4 	movhi	r2,3
   21450:	10880304 	addi	r2,r2,8204
   21454:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 4, FRAME_HEIGHT); // frame height
   21458:	00c07804 	movi	r3,480
   2145c:	008000f4 	movhi	r2,3
   21460:	10880404 	addi	r2,r2,8208
   21464:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 5, FRAME_BACKGROUN_R);
   21468:	0007883a 	mov	r3,zero
   2146c:	008000f4 	movhi	r2,3
   21470:	10880504 	addi	r2,r2,8212
   21474:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 6, FRAME_BACKGROUN_G);
   21478:	0007883a 	mov	r3,zero
   2147c:	008000f4 	movhi	r2,3
   21480:	10880604 	addi	r2,r2,8216
   21484:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 7, FRAME_BACKGROUN_B);
   21488:	00c03fc4 	movi	r3,255
   2148c:	008000f4 	movhi	r2,3
   21490:	10880704 	addi	r2,r2,8220
   21494:	10c00035 	stwio	r3,0(r2)

	// layer 0
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+0, 0x00); // x offset
   21498:	0007883a 	mov	r3,zero
   2149c:	008000f4 	movhi	r2,3
   214a0:	10880804 	addi	r2,r2,8224
   214a4:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+1, 0x00); // y offset
   214a8:	0007883a 	mov	r3,zero
   214ac:	008000f4 	movhi	r2,3
   214b0:	10880904 	addi	r2,r2,8228
   214b4:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+2, 0x00); // disable
   214b8:	0007883a 	mov	r3,zero
   214bc:	008000f4 	movhi	r2,3
   214c0:	10880a04 	addi	r2,r2,8232
   214c4:	10c00035 	stwio	r3,0(r2)

	// layer 1
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 13+0, 0x00); // x offset
   214c8:	0007883a 	mov	r3,zero
   214cc:	008000f4 	movhi	r2,3
   214d0:	10880d04 	addi	r2,r2,8244
   214d4:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 13+1, 0x00); // y offset
   214d8:	0007883a 	mov	r3,zero
   214dc:	008000f4 	movhi	r2,3
   214e0:	10880e04 	addi	r2,r2,8248
   214e4:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 13+2, 0x00); // disable
   214e8:	0007883a 	mov	r3,zero
   214ec:	008000f4 	movhi	r2,3
   214f0:	10880f04 	addi	r2,r2,8252
   214f4:	10c00035 	stwio	r3,0(r2)

	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0x00, bGo?0x01:0x00); // go
   214f8:	e0bfff17 	ldw	r2,-4(fp)
   214fc:	1004c03a 	cmpne	r2,r2,zero
   21500:	10c03fcc 	andi	r3,r2,255
   21504:	008000f4 	movhi	r2,3
   21508:	10880004 	addi	r2,r2,8192
   2150c:	10c00035 	stwio	r3,0(r2)
}
   21510:	0001883a 	nop
   21514:	e037883a 	mov	sp,fp
   21518:	df000017 	ldw	fp,0(sp)
   2151c:	dec00104 	addi	sp,sp,4
   21520:	f800283a 	ret

00021524 <MIX_EnableLayer>:

// nLayer = 0: means layer 0
// nLayer = 1: means layer 1


void MIX_EnableLayer(int nLayer, int bEnable, int x, int y){
   21524:	defffa04 	addi	sp,sp,-24
   21528:	dfc00515 	stw	ra,20(sp)
   2152c:	df000415 	stw	fp,16(sp)
   21530:	df000404 	addi	fp,sp,16
   21534:	e13ffc15 	stw	r4,-16(fp)
   21538:	e17ffd15 	stw	r5,-12(fp)
   2153c:	e1bffe15 	stw	r6,-8(fp)
   21540:	e1ffff15 	stw	r7,-4(fp)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0x00, 0x00); // stop
   21544:	0007883a 	mov	r3,zero
   21548:	008000f4 	movhi	r2,3
   2154c:	10880004 	addi	r2,r2,8192
   21550:	10c00035 	stwio	r3,0(r2)
	usleep(200*1000);
   21554:	010000f4 	movhi	r4,3
   21558:	21035004 	addi	r4,r4,3392
   2155c:	00238180 	call	23818 <usleep>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+nLayer*5+ 2, bEnable?0x01:0x00); // layer disable
   21560:	e0bffc17 	ldw	r2,-16(fp)
   21564:	10800524 	muli	r2,r2,20
   21568:	10800a04 	addi	r2,r2,40
   2156c:	1007883a 	mov	r3,r2
   21570:	008000f4 	movhi	r2,3
   21574:	10880004 	addi	r2,r2,8192
   21578:	1885883a 	add	r2,r3,r2
   2157c:	e0fffd17 	ldw	r3,-12(fp)
   21580:	1806c03a 	cmpne	r3,r3,zero
   21584:	18c03fcc 	andi	r3,r3,255
   21588:	10c00035 	stwio	r3,0(r2)
	if (bEnable){
   2158c:	e0bffd17 	ldw	r2,-12(fp)
   21590:	10001226 	beq	r2,zero,215dc <MIX_EnableLayer+0xb8>
		IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+nLayer*5+ 0, x);
   21594:	e0bffc17 	ldw	r2,-16(fp)
   21598:	10800524 	muli	r2,r2,20
   2159c:	10800804 	addi	r2,r2,32
   215a0:	1007883a 	mov	r3,r2
   215a4:	008000f4 	movhi	r2,3
   215a8:	10880004 	addi	r2,r2,8192
   215ac:	1885883a 	add	r2,r3,r2
   215b0:	e0fffe17 	ldw	r3,-8(fp)
   215b4:	10c00035 	stwio	r3,0(r2)
		IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+nLayer*5+ 1, y);
   215b8:	e0bffc17 	ldw	r2,-16(fp)
   215bc:	10800524 	muli	r2,r2,20
   215c0:	10800904 	addi	r2,r2,36
   215c4:	1007883a 	mov	r3,r2
   215c8:	008000f4 	movhi	r2,3
   215cc:	10880004 	addi	r2,r2,8192
   215d0:	1885883a 	add	r2,r3,r2
   215d4:	e0ffff17 	ldw	r3,-4(fp)
   215d8:	10c00035 	stwio	r3,0(r2)
	}
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0x00, 0x01); // go
   215dc:	00c00044 	movi	r3,1
   215e0:	008000f4 	movhi	r2,3
   215e4:	10880004 	addi	r2,r2,8192
   215e8:	10c00035 	stwio	r3,0(r2)
}
   215ec:	0001883a 	nop
   215f0:	e037883a 	mov	sp,fp
   215f4:	dfc00117 	ldw	ra,4(sp)
   215f8:	df000017 	ldw	fp,0(sp)
   215fc:	dec00204 	addi	sp,sp,8
   21600:	f800283a 	ret

00021604 <MIX_MoveLayer>:

void MIX_MoveLayer(int nLayer, int bEnable, int x, int y){
   21604:	defffb04 	addi	sp,sp,-20
   21608:	df000415 	stw	fp,16(sp)
   2160c:	df000404 	addi	fp,sp,16
   21610:	e13ffc15 	stw	r4,-16(fp)
   21614:	e17ffd15 	stw	r5,-12(fp)
   21618:	e1bffe15 	stw	r6,-8(fp)
   2161c:	e1ffff15 	stw	r7,-4(fp)
//	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0x00, 0x00); // stop
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+nLayer*5+ 0, x);
   21620:	e0bffc17 	ldw	r2,-16(fp)
   21624:	10800524 	muli	r2,r2,20
   21628:	10800804 	addi	r2,r2,32
   2162c:	1007883a 	mov	r3,r2
   21630:	008000f4 	movhi	r2,3
   21634:	10880004 	addi	r2,r2,8192
   21638:	1885883a 	add	r2,r3,r2
   2163c:	e0fffe17 	ldw	r3,-8(fp)
   21640:	10c00035 	stwio	r3,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, 8+nLayer*5+ 1, y);
   21644:	e0bffc17 	ldw	r2,-16(fp)
   21648:	10800524 	muli	r2,r2,20
   2164c:	10800904 	addi	r2,r2,36
   21650:	1007883a 	mov	r3,r2
   21654:	008000f4 	movhi	r2,3
   21658:	10880004 	addi	r2,r2,8192
   2165c:	1885883a 	add	r2,r3,r2
   21660:	e0ffff17 	ldw	r3,-4(fp)
   21664:	10c00035 	stwio	r3,0(r2)
//	IOWR(ALT_VIP_CL_MIXER_0_BASE, 0x00, 0x01); // go
}
   21668:	0001883a 	nop
   2166c:	e037883a 	mov	sp,fp
   21670:	df000017 	ldw	fp,0(sp)
   21674:	dec00104 	addi	sp,sp,4
   21678:	f800283a 	ret

0002167c <config_for_linux>:
#define LAYER_ENABLE 	0x01
#define LAYER_DISABLE 	0x00



int config_for_linux(){
   2167c:	defffb04 	addi	sp,sp,-20
   21680:	dfc00415 	stw	ra,16(sp)
   21684:	df000315 	stw	fp,12(sp)
   21688:	df000304 	addi	fp,sp,12
	// config mixer
	const int bGo = 1; //1:go, 0:no-go
   2168c:	00800044 	movi	r2,1
   21690:	e0bffd15 	stw	r2,-12(fp)
	const int nLayer1 = 0;
   21694:	e03ffe15 	stw	zero,-8(fp)
	const int nLayer2 = 1;
   21698:	00800044 	movi	r2,1
   2169c:	e0bfff15 	stw	r2,-4(fp)

	printf("Init VIP\n");
   216a0:	010000b4 	movhi	r4,2
   216a4:	21155204 	addi	r4,r4,21832
   216a8:	0022fc40 	call	22fc4 <puts>
	MIX_Reset(bGo);
   216ac:	e13ffd17 	ldw	r4,-12(fp)
   216b0:	00214280 	call	21428 <MIX_Reset>

	//printf("show background\r\n");
	usleep(3000*1000); // show color bar
   216b4:	01000bb4 	movhi	r4,46
   216b8:	2131b004 	addi	r4,r4,-14656
   216bc:	00238180 	call	23818 <usleep>

	printf("enable layer 1(linux frame buffer)\r\n");
   216c0:	010000b4 	movhi	r4,2
   216c4:	21155504 	addi	r4,r4,21844
   216c8:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer1, LAYER_ENABLE, 0, 0);
   216cc:	000f883a 	mov	r7,zero
   216d0:	000d883a 	mov	r6,zero
   216d4:	01400044 	movi	r5,1
   216d8:	e13ffe17 	ldw	r4,-8(fp)
   216dc:	00215240 	call	21524 <MIX_EnableLayer>


	// config scaler. scale to (VIDEO_IN_WIDTH, VIDEO_IN_HEIGHT) and enable it
#if TV_DECODER_ALT_VIP_CL_SCL_0_BASE
	// video-in scaler
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x03, PIP_WIDTH); // output width
   216e0:	00c04384 	movi	r3,270
   216e4:	00800134 	movhi	r2,4
   216e8:	10a40304 	addi	r2,r2,-28660
   216ec:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x04, PIP_HEIGHT); // output height
   216f0:	00c03204 	movi	r3,200
   216f4:	00800134 	movhi	r2,4
   216f8:	10a40404 	addi	r2,r2,-28656
   216fc:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x00, 0x01); // go
   21700:	00c00044 	movi	r3,1
   21704:	00800134 	movhi	r2,4
   21708:	10a40004 	addi	r2,r2,-28672
   2170c:	10c00035 	stwio	r3,0(r2)
#endif

#if TV_DECODER_ALT_VIP_CL_SCL_1_BASE
	// camera scaler
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x03, PIP_WIDTH); // output width
   21710:	00c04384 	movi	r3,270
   21714:	008000f4 	movhi	r2,3
   21718:	109c0304 	addi	r2,r2,28684
   2171c:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x04, PIP_HEIGHT); // output height
   21720:	00c03204 	movi	r3,200
   21724:	008000f4 	movhi	r2,3
   21728:	109c0404 	addi	r2,r2,28688
   2172c:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x00, 0x01); // go
   21730:	00c00044 	movi	r3,1
   21734:	008000f4 	movhi	r2,3
   21738:	109c0004 	addi	r2,r2,28672
   2173c:	10c00035 	stwio	r3,0(r2)
#endif

#ifdef TV_DECODER_ALT_VIP_CL_SWI_0_BASE
	// set switch II input to camera & go
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x00); // stop
   21740:	0007883a 	mov	r3,zero
   21744:	00800134 	movhi	r2,4
   21748:	10a80004 	addi	r2,r2,-24576
   2174c:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x04, 0x01); // dout0: din_0 as input (first one is din_0)
   21750:	00c00044 	movi	r3,1
   21754:	00800134 	movhi	r2,4
   21758:	10a80404 	addi	r2,r2,-24560
   2175c:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x01); // go
   21760:	00c00044 	movi	r3,1
   21764:	00800134 	movhi	r2,4
   21768:	10a80004 	addi	r2,r2,-24576
   2176c:	10c00035 	stwio	r3,0(r2)
	// move layer to center of screen
#endif

	////////////////////////////////
	// enable camera for test
	printf("enable camera display\r\n");
   21770:	010000b4 	movhi	r4,2
   21774:	21155e04 	addi	r4,r4,21880
   21778:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer2, LAYER_ENABLE, (FRAME_WIDTH-PIP_WIDTH)/2, (FRAME_HEIGHT-PIP_HEIGHT)/2);
   2177c:	01c02304 	movi	r7,140
   21780:	01804244 	movi	r6,265
   21784:	01400044 	movi	r5,1
   21788:	e13fff17 	ldw	r4,-4(fp)
   2178c:	00215240 	call	21524 <MIX_EnableLayer>
	usleep(2*1000*1000);
   21790:	010007f4 	movhi	r4,31
   21794:	21212004 	addi	r4,r4,-31616
   21798:	00238180 	call	23818 <usleep>
	printf("disable camera display\r\n");
   2179c:	010000b4 	movhi	r4,2
   217a0:	21156404 	addi	r4,r4,21904
   217a4:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer2, LAYER_DISABLE, 0, 0);
   217a8:	000f883a 	mov	r7,zero
   217ac:	000d883a 	mov	r6,zero
   217b0:	000b883a 	mov	r5,zero
   217b4:	e13fff17 	ldw	r4,-4(fp)
   217b8:	00215240 	call	21524 <MIX_EnableLayer>

	return 0;
   217bc:	0005883a 	mov	r2,zero

}
   217c0:	e037883a 	mov	sp,fp
   217c4:	dfc00117 	ldw	ra,4(sp)
   217c8:	df000017 	ldw	fp,0(sp)
   217cc:	dec00204 	addi	sp,sp,8
   217d0:	f800283a 	ret

000217d4 <test_camera>:


int test_camera(){
   217d4:	defff904 	addi	sp,sp,-28
   217d8:	dfc00615 	stw	ra,24(sp)
   217dc:	df000515 	stw	fp,20(sp)
   217e0:	df000504 	addi	fp,sp,20

	int led_mask, i;
	const int bGo = 1; //1:go, 0:no-go
   217e4:	00800044 	movi	r2,1
   217e8:	e0bffc15 	stw	r2,-16(fp)
	const int nLayer1 = 0; // linux frame buffer
   217ec:	e03ffd15 	stw	zero,-12(fp)
	const int nLayer2 = 1; // camera
   217f0:	00800044 	movi	r2,1
   217f4:	e0bffe15 	stw	r2,-8(fp)
	const int nLayer3 = 2; // NTSC/PAL
   217f8:	00800084 	movi	r2,2
   217fc:	e0bfff15 	stw	r2,-4(fp)

	printf("Init VIP\n");
   21800:	010000b4 	movhi	r4,2
   21804:	21155204 	addi	r4,r4,21832
   21808:	0022fc40 	call	22fc4 <puts>

#if TV_DECODER_ALT_VIP_CL_CVI_0_BASE
	IOWR(TV_DECODER_ALT_VIP_CL_CVI_0_BASE, 0x00, 0x01); // go
   2180c:	00c00044 	movi	r3,1
   21810:	008000f4 	movhi	r2,3
   21814:	10980004 	addi	r2,r2,24576
   21818:	10c00035 	stwio	r3,0(r2)
#endif

#if TV_DECODER_ALT_VIP_CL_SCL_0_BASE
	// scale NTSL/PAL
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x03, PIP_WIDTH); // output width
   2181c:	00c04384 	movi	r3,270
   21820:	00800134 	movhi	r2,4
   21824:	10a40304 	addi	r2,r2,-28660
   21828:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x04, PIP_HEIGHT); // output height
   2182c:	00c03204 	movi	r3,200
   21830:	00800134 	movhi	r2,4
   21834:	10a40404 	addi	r2,r2,-28656
   21838:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x00, 0x01); // go
   2183c:	00c00044 	movi	r3,1
   21840:	00800134 	movhi	r2,4
   21844:	10a40004 	addi	r2,r2,-28672
   21848:	10c00035 	stwio	r3,0(r2)
#endif

#ifdef TV_DECODER_ALT_VIP_CL_SCL_1_BASE
	// scale d8m
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x03, PIP_WIDTH); // output width
   2184c:	00c04384 	movi	r3,270
   21850:	008000f4 	movhi	r2,3
   21854:	109c0304 	addi	r2,r2,28684
   21858:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x04, PIP_HEIGHT); // output height
   2185c:	00c03204 	movi	r3,200
   21860:	008000f4 	movhi	r2,3
   21864:	109c0404 	addi	r2,r2,28688
   21868:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_1_BASE, 0x00, 0x01); // go
   2186c:	00c00044 	movi	r3,1
   21870:	008000f4 	movhi	r2,3
   21874:	109c0004 	addi	r2,r2,28672
   21878:	10c00035 	stwio	r3,0(r2)
#endif

#ifdef TV_DECODER_ALT_VIP_CL_SWI_0_BASE
	// set switch II input to camera & go
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x00); // stop
   2187c:	0007883a 	mov	r3,zero
   21880:	00800134 	movhi	r2,4
   21884:	10a80004 	addi	r2,r2,-24576
   21888:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x04, 0x01); // dout0: din_0 as input (first one is din_0)
   2188c:	00c00044 	movi	r3,1
   21890:	00800134 	movhi	r2,4
   21894:	10a80404 	addi	r2,r2,-24560
   21898:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x01); // go
   2189c:	00c00044 	movi	r3,1
   218a0:	00800134 	movhi	r2,4
   218a4:	10a80004 	addi	r2,r2,-24576
   218a8:	10c00035 	stwio	r3,0(r2)
#endif

	MIX_Reset(bGo);
   218ac:	e13ffc17 	ldw	r4,-16(fp)
   218b0:	00214280 	call	21428 <MIX_Reset>
	//


  // init VIP mixer II

	printf("show background\r\n");
   218b4:	010000b4 	movhi	r4,2
   218b8:	21156a04 	addi	r4,r4,21928
   218bc:	0022fc40 	call	22fc4 <puts>
	usleep(3000*1000); // show color bar
   218c0:	01000bb4 	movhi	r4,46
   218c4:	2131b004 	addi	r4,r4,-14656
   218c8:	00238180 	call	23818 <usleep>

	//MIX_EnableLayer(nLayer1, LAYER_ENABLE, 0, 0);


	printf("show layer 2\r\n");
   218cc:	010000b4 	movhi	r4,2
   218d0:	21156f04 	addi	r4,r4,21948
   218d4:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer2, LAYER_ENABLE, 10, 10); // cannot be (0,0)
   218d8:	01c00284 	movi	r7,10
   218dc:	01800284 	movi	r6,10
   218e0:	01400044 	movi	r5,1
   218e4:	e13ffe17 	ldw	r4,-8(fp)
   218e8:	00215240 	call	21524 <MIX_EnableLayer>

	usleep(5000*1000);
   218ec:	01001334 	movhi	r4,76
   218f0:	2112d004 	addi	r4,r4,19264
   218f4:	00238180 	call	23818 <usleep>

#ifdef TV_DECODER_ALT_VIP_CL_SWI_0_BASE
	int nSel = 1;
   218f8:	00800044 	movi	r2,1
   218fc:	e0bffb15 	stw	r2,-20(fp)
	while(1){
		printf("switch %d\r\n", nSel);
   21900:	e17ffb17 	ldw	r5,-20(fp)
   21904:	010000b4 	movhi	r4,2
   21908:	21157304 	addi	r4,r4,21964
   2190c:	0022ef80 	call	22ef8 <printf>
		IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x00); // stop
   21910:	0007883a 	mov	r3,zero
   21914:	00800134 	movhi	r2,4
   21918:	10a80004 	addi	r2,r2,-24576
   2191c:	10c00035 	stwio	r3,0(r2)
		IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x04, nSel); // dout0: din_0 as input (first one is din_0)
   21920:	00800134 	movhi	r2,4
   21924:	10a80404 	addi	r2,r2,-24560
   21928:	e0fffb17 	ldw	r3,-20(fp)
   2192c:	10c00035 	stwio	r3,0(r2)
		IOWR(TV_DECODER_ALT_VIP_CL_SWI_0_BASE, 0x00, 0x01); // go
   21930:	00c00044 	movi	r3,1
   21934:	00800134 	movhi	r2,4
   21938:	10a80004 	addi	r2,r2,-24576
   2193c:	10c00035 	stwio	r3,0(r2)

		usleep(3*1000*1000);
   21940:	01000bb4 	movhi	r4,46
   21944:	2131b004 	addi	r4,r4,-14656
   21948:	00238180 	call	23818 <usleep>
		if (nSel == 1)
   2194c:	e0bffb17 	ldw	r2,-20(fp)
   21950:	10800058 	cmpnei	r2,r2,1
   21954:	1000031e 	bne	r2,zero,21964 <test_camera+0x190>
			nSel = 2;
   21958:	00800084 	movi	r2,2
   2195c:	e0bffb15 	stw	r2,-20(fp)
   21960:	003fe706 	br	21900 <__alt_data_end+0xffff1900>
		else
			nSel = 1;
   21964:	00800044 	movi	r2,1
   21968:	e0bffb15 	stw	r2,-20(fp)
	}
   2196c:	003fe406 	br	21900 <__alt_data_end+0xffff1900>

00021970 <test>:

}


int test()
{
   21970:	defff604 	addi	sp,sp,-40
   21974:	dfc00915 	stw	ra,36(sp)
   21978:	df000815 	stw	fp,32(sp)
   2197c:	df000804 	addi	fp,sp,32
	int led_mask, i;
	const int bGo = 1; //1:go, 0:no-go
   21980:	00800044 	movi	r2,1
   21984:	e0bffb15 	stw	r2,-20(fp)
	const int nLayer1 = 0;
   21988:	e03ffc15 	stw	zero,-16(fp)
	const int nLayer2 = 1;
   2198c:	00800044 	movi	r2,1
   21990:	e0bffd15 	stw	r2,-12(fp)
	const int nLayer3 = 2;
   21994:	00800084 	movi	r2,2
   21998:	e0bffe15 	stw	r2,-8(fp)

	printf("Init VIP\n");
   2199c:	010000b4 	movhi	r4,2
   219a0:	21155204 	addi	r4,r4,21832
   219a4:	0022fc40 	call	22fc4 <puts>

#if TV_DECODER_ALT_VIP_CL_CVI_0_BASE
	IOWR(TV_DECODER_ALT_VIP_CL_CVI_0_BASE, 0x00, 0x01); // go
   219a8:	00c00044 	movi	r3,1
   219ac:	008000f4 	movhi	r2,3
   219b0:	10980004 	addi	r2,r2,24576
   219b4:	10c00035 	stwio	r3,0(r2)
#endif

#if TV_DECODER_ALT_VIP_CL_SCL_0_BASE
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x03, 270+200); // output width
   219b8:	00c07584 	movi	r3,470
   219bc:	00800134 	movhi	r2,4
   219c0:	10a40304 	addi	r2,r2,-28660
   219c4:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x04, 200+200); // output height
   219c8:	00c06404 	movi	r3,400
   219cc:	00800134 	movhi	r2,4
   219d0:	10a40404 	addi	r2,r2,-28656
   219d4:	10c00035 	stwio	r3,0(r2)
	IOWR(TV_DECODER_ALT_VIP_CL_SCL_0_BASE, 0x00, 0x01); // go
   219d8:	00c00044 	movi	r3,1
   219dc:	00800134 	movhi	r2,4
   219e0:	10a40004 	addi	r2,r2,-28672
   219e4:	10c00035 	stwio	r3,0(r2)
#endif

	MIX_Reset(bGo);
   219e8:	e13ffb17 	ldw	r4,-20(fp)
   219ec:	00214280 	call	21428 <MIX_Reset>


	// led blink
	led_mask = 0x01;
   219f0:	00800044 	movi	r2,1
   219f4:	e0bff815 	stw	r2,-32(fp)
	for(i=0;i<10;i++){
   219f8:	e03ff915 	stw	zero,-28(fp)
   219fc:	00000b06 	br	21a2c <test+0xbc>
		IOWR(LEDR_BASE, 0x00, led_mask);
   21a00:	008c0004 	movi	r2,12288
   21a04:	e0fff817 	ldw	r3,-32(fp)
   21a08:	10c00035 	stwio	r3,0(r2)
		led_mask <<= 1;
   21a0c:	e0bff817 	ldw	r2,-32(fp)
   21a10:	1085883a 	add	r2,r2,r2
   21a14:	e0bff815 	stw	r2,-32(fp)
		usleep(20*1000);
   21a18:	01138804 	movi	r4,20000
   21a1c:	00238180 	call	23818 <usleep>
	MIX_Reset(bGo);


	// led blink
	led_mask = 0x01;
	for(i=0;i<10;i++){
   21a20:	e0bff917 	ldw	r2,-28(fp)
   21a24:	10800044 	addi	r2,r2,1
   21a28:	e0bff915 	stw	r2,-28(fp)
   21a2c:	e0bff917 	ldw	r2,-28(fp)
   21a30:	10800290 	cmplti	r2,r2,10
   21a34:	103ff21e 	bne	r2,zero,21a00 <__alt_data_end+0xffff1a00>
		IOWR(LEDR_BASE, 0x00, led_mask);
		led_mask <<= 1;
		usleep(20*1000);
	}

	led_mask = 0x01 << 9;
   21a38:	00808004 	movi	r2,512
   21a3c:	e0bff815 	stw	r2,-32(fp)
	for(i=0;i<10;i++){
   21a40:	e03ff915 	stw	zero,-28(fp)
   21a44:	00000b06 	br	21a74 <test+0x104>
		IOWR(LEDR_BASE, 0x00, led_mask);
   21a48:	008c0004 	movi	r2,12288
   21a4c:	e0fff817 	ldw	r3,-32(fp)
   21a50:	10c00035 	stwio	r3,0(r2)
		led_mask >>= 1;
   21a54:	e0bff817 	ldw	r2,-32(fp)
   21a58:	1005d07a 	srai	r2,r2,1
   21a5c:	e0bff815 	stw	r2,-32(fp)
		usleep(20*1000);
   21a60:	01138804 	movi	r4,20000
   21a64:	00238180 	call	23818 <usleep>
		led_mask <<= 1;
		usleep(20*1000);
	}

	led_mask = 0x01 << 9;
	for(i=0;i<10;i++){
   21a68:	e0bff917 	ldw	r2,-28(fp)
   21a6c:	10800044 	addi	r2,r2,1
   21a70:	e0bff915 	stw	r2,-28(fp)
   21a74:	e0bff917 	ldw	r2,-28(fp)
   21a78:	10800290 	cmplti	r2,r2,10
   21a7c:	103ff21e 	bne	r2,zero,21a48 <__alt_data_end+0xffff1a48>
		IOWR(LEDR_BASE, 0x00, led_mask);
		led_mask >>= 1;
		usleep(20*1000);
	}
	IOWR(LEDR_BASE, 0x00, 0x00);
   21a80:	0007883a 	mov	r3,zero
   21a84:	008c0004 	movi	r2,12288
   21a88:	10c00035 	stwio	r3,0(r2)


  // init VIP mixer II

	printf("show background\r\n");
   21a8c:	010000b4 	movhi	r4,2
   21a90:	21156a04 	addi	r4,r4,21928
   21a94:	0022fc40 	call	22fc4 <puts>
	usleep(3000*1000); // show color bar
   21a98:	01000bb4 	movhi	r4,46
   21a9c:	2131b004 	addi	r4,r4,-14656
   21aa0:	00238180 	call	23818 <usleep>

	//MIX_EnableLayer(nLayer1, LAYER_ENABLE, 0, 0);

	printf("show layer 1\r\n");
   21aa4:	010000b4 	movhi	r4,2
   21aa8:	21157604 	addi	r4,r4,21976
   21aac:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer1, LAYER_ENABLE, 0, 0);
   21ab0:	000f883a 	mov	r7,zero
   21ab4:	000d883a 	mov	r6,zero
   21ab8:	01400044 	movi	r5,1
   21abc:	e13ffc17 	ldw	r4,-16(fp)
   21ac0:	00215240 	call	21524 <MIX_EnableLayer>
	usleep(5000*1000);
   21ac4:	01001334 	movhi	r4,76
   21ac8:	2112d004 	addi	r4,r4,19264
   21acc:	00238180 	call	23818 <usleep>

	printf("show layer 2\r\n");
   21ad0:	010000b4 	movhi	r4,2
   21ad4:	21156f04 	addi	r4,r4,21948
   21ad8:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer2, LAYER_ENABLE, 10, 10); // cannot be (0,0)
   21adc:	01c00284 	movi	r7,10
   21ae0:	01800284 	movi	r6,10
   21ae4:	01400044 	movi	r5,1
   21ae8:	e13ffd17 	ldw	r4,-12(fp)
   21aec:	00215240 	call	21524 <MIX_EnableLayer>

	usleep(5000*1000);
   21af0:	01001334 	movhi	r4,76
   21af4:	2112d004 	addi	r4,r4,19264
   21af8:	00238180 	call	23818 <usleep>

	printf("show layer 3\r\n");
   21afc:	010000b4 	movhi	r4,2
   21b00:	21157a04 	addi	r4,r4,21992
   21b04:	0022fc40 	call	22fc4 <puts>
	MIX_EnableLayer(nLayer3, LAYER_ENABLE, 300, 300); // cannot be (0,0)
   21b08:	01c04b04 	movi	r7,300
   21b0c:	01804b04 	movi	r6,300
   21b10:	01400044 	movi	r5,1
   21b14:	e13ffe17 	ldw	r4,-8(fp)
   21b18:	00215240 	call	21524 <MIX_EnableLayer>


	int x=1, y=1;
   21b1c:	00800044 	movi	r2,1
   21b20:	e0bffa15 	stw	r2,-24(fp)
   21b24:	00800044 	movi	r2,1
   21b28:	e0bfff15 	stw	r2,-4(fp)
	while(1){
		MIX_MoveLayer(nLayer2, LAYER_ENABLE, x, y); // cannot be (0,0)
   21b2c:	e1ffff17 	ldw	r7,-4(fp)
   21b30:	e1bffa17 	ldw	r6,-24(fp)
   21b34:	01400044 	movi	r5,1
   21b38:	e13ffd17 	ldw	r4,-12(fp)
   21b3c:	00216040 	call	21604 <MIX_MoveLayer>
		usleep(2000);
   21b40:	0101f404 	movi	r4,2000
   21b44:	00238180 	call	23818 <usleep>
		x++;
   21b48:	e0bffa17 	ldw	r2,-24(fp)
   21b4c:	10800044 	addi	r2,r2,1
   21b50:	e0bffa15 	stw	r2,-24(fp)
		if (x > 400)
   21b54:	e0bffa17 	ldw	r2,-24(fp)
   21b58:	10806450 	cmplti	r2,r2,401
   21b5c:	103ff31e 	bne	r2,zero,21b2c <__alt_data_end+0xffff1b2c>
			x = 1;
   21b60:	00800044 	movi	r2,1
   21b64:	e0bffa15 	stw	r2,-24(fp)
	}
   21b68:	003ff006 	br	21b2c <__alt_data_end+0xffff1b2c>

00021b6c <test_audio>:
#define DAC_FIFO_FULL_BIT	0x01
#define ADC_FIFO_EMPTY_BIT	0x02

// http://tmrc1.tp.edu.tw/HTML/RSR20081124231639YLZ/content/wave3-1-4.html
int test_audio()
{
   21b6c:	deffee04 	addi	sp,sp,-72
   21b70:	dfc01115 	stw	ra,68(sp)
   21b74:	df001015 	stw	fp,64(sp)
   21b78:	df001004 	addi	fp,sp,64
	int status;
	unsigned int cnt = 0;
   21b7c:	e03ff015 	stw	zero,-64(fp)
	unsigned int vol=0;
   21b80:	e03ff115 	stw	zero,-60(fp)
	float szToneFreq[] = {261.6, 293.7, 329.6, 349.2, 392.0, 440, 493.9, 523.3, 523.3};
   21b84:	0090e0f4 	movhi	r2,17283
   21b88:	10b33344 	addi	r2,r2,-13107
   21b8c:	e0bff715 	stw	r2,-36(fp)
   21b90:	0090e4f4 	movhi	r2,17299
   21b94:	10b66684 	addi	r2,r2,-9830
   21b98:	e0bff815 	stw	r2,-32(fp)
   21b9c:	0090e974 	movhi	r2,17317
   21ba0:	10b33344 	addi	r2,r2,-13107
   21ba4:	e0bff915 	stw	r2,-28(fp)
   21ba8:	0090ebf4 	movhi	r2,17327
   21bac:	10a66684 	addi	r2,r2,-26214
   21bb0:	e0bffa15 	stw	r2,-24(fp)
   21bb4:	0090f134 	movhi	r2,17348
   21bb8:	e0bffb15 	stw	r2,-20(fp)
   21bbc:	0090f734 	movhi	r2,17372
   21bc0:	e0bffc15 	stw	r2,-16(fp)
   21bc4:	0090fdf4 	movhi	r2,17399
   21bc8:	10bcccc4 	addi	r2,r2,-3277
   21bcc:	e0bffd15 	stw	r2,-12(fp)
   21bd0:	009100f4 	movhi	r2,17411
   21bd4:	10b4ccc4 	addi	r2,r2,-11469
   21bd8:	e0bffe15 	stw	r2,-8(fp)
   21bdc:	009100f4 	movhi	r2,17411
   21be0:	10b4ccc4 	addi	r2,r2,-11469
   21be4:	e0bfff15 	stw	r2,-4(fp)
	int max_cnt, nIndex=0;
   21be8:	e03ff315 	stw	zero,-52(fp)
	int sample_cnt = 0;
   21bec:	e03ff415 	stw	zero,-48(fp)
	const int nDataRate = 48000;
   21bf0:	00aee014 	movui	r2,48000
   21bf4:	e0bff515 	stw	r2,-44(fp)

	// clear fifo
	IOWR(AUDIO_BASE, REG_CMD_ADDR, 0x01);
   21bf8:	00c00044 	movi	r3,1
   21bfc:	00800134 	movhi	r2,4
   21c00:	10a00204 	addi	r2,r2,-32760
   21c04:	10c00035 	stwio	r3,0(r2)
	IOWR(AUDIO_BASE, REG_CMD_ADDR, 0x00);
   21c08:	0007883a 	mov	r3,zero
   21c0c:	00800134 	movhi	r2,4
   21c10:	10a00204 	addi	r2,r2,-32760
   21c14:	10c00035 	stwio	r3,0(r2)

	printf("Audio Player...\r\n");
   21c18:	010000b4 	movhi	r4,2
   21c1c:	21157e04 	addi	r4,r4,22008
   21c20:	0022fc40 	call	22fc4 <puts>
	printf("Please make sure a speaker is connected to the line-out audio jack.\r\n");
   21c24:	010000b4 	movhi	r4,2
   21c28:	21158304 	addi	r4,r4,22028
   21c2c:	0022fc40 	call	22fc4 <puts>
	// dac (play sound)
	max_cnt = (float)nDataRate/szToneFreq[nIndex];
   21c30:	e13ff517 	ldw	r4,-44(fp)
   21c34:	0022d340 	call	22d34 <__floatsisf>
   21c38:	1009883a 	mov	r4,r2
   21c3c:	e0bff317 	ldw	r2,-52(fp)
   21c40:	1085883a 	add	r2,r2,r2
   21c44:	1085883a 	add	r2,r2,r2
   21c48:	e0fff004 	addi	r3,fp,-64
   21c4c:	1885883a 	add	r2,r3,r2
   21c50:	10800704 	addi	r2,r2,28
   21c54:	10c00017 	ldw	r3,0(r2)
   21c58:	180b883a 	mov	r5,r3
   21c5c:	00228840 	call	22884 <__divsf3>
   21c60:	1007883a 	mov	r3,r2
   21c64:	1805883a 	mov	r2,r3
   21c68:	1009883a 	mov	r4,r2
   21c6c:	0022cc40 	call	22cc4 <__fixsfsi>
   21c70:	e0bff215 	stw	r2,-56(fp)
	while(1){
		status = IORD(AUDIO_BASE, REG_STATUS_ADDR);
   21c74:	00800134 	movhi	r2,4
   21c78:	10a00304 	addi	r2,r2,-32756
   21c7c:	10800037 	ldwio	r2,0(r2)
   21c80:	e0bff615 	stw	r2,-40(fp)

		if ((status & DAC_FIFO_FULL_BIT) != DAC_FIFO_FULL_BIT){
   21c84:	e0bff617 	ldw	r2,-40(fp)
   21c88:	1080004c 	andi	r2,r2,1
   21c8c:	103ff91e 	bne	r2,zero,21c74 <__alt_data_end+0xffff1c74>
			if (cnt < max_cnt/2)
   21c90:	e0bff217 	ldw	r2,-56(fp)
   21c94:	1006d7fa 	srli	r3,r2,31
   21c98:	1885883a 	add	r2,r3,r2
   21c9c:	1005d07a 	srai	r2,r2,1
   21ca0:	1007883a 	mov	r3,r2
   21ca4:	e0bff017 	ldw	r2,-64(fp)
   21ca8:	10c0022e 	bgeu	r2,r3,21cb4 <test_audio+0x148>
				vol = 0;
   21cac:	e03ff115 	stw	zero,-60(fp)
   21cb0:	00000306 	br	21cc0 <test_audio+0x154>
			else
				vol = 0x0FFF0FFF;
   21cb4:	0083fff4 	movhi	r2,4095
   21cb8:	1083ffc4 	addi	r2,r2,4095
   21cbc:	e0bff115 	stw	r2,-60(fp)
			IOWR(AUDIO_BASE, REG_DAC_FIFO_ADDR, vol);
   21cc0:	e0fff117 	ldw	r3,-60(fp)
   21cc4:	00800134 	movhi	r2,4
   21cc8:	10a00004 	addi	r2,r2,-32768
   21ccc:	10c00035 	stwio	r3,0(r2)

			//
			sample_cnt++;
   21cd0:	e0bff417 	ldw	r2,-48(fp)
   21cd4:	10800044 	addi	r2,r2,1
   21cd8:	e0bff415 	stw	r2,-48(fp)
			cnt++;
   21cdc:	e0bff017 	ldw	r2,-64(fp)
   21ce0:	10800044 	addi	r2,r2,1
   21ce4:	e0bff015 	stw	r2,-64(fp)
			if (cnt >= max_cnt){
   21ce8:	e0bff217 	ldw	r2,-56(fp)
   21cec:	e0fff017 	ldw	r3,-64(fp)
   21cf0:	18800136 	bltu	r3,r2,21cf8 <test_audio+0x18c>
				cnt = 0;
   21cf4:	e03ff015 	stw	zero,-64(fp)
			}


			if (sample_cnt >= nDataRate){
   21cf8:	e0fff417 	ldw	r3,-48(fp)
   21cfc:	e0bff517 	ldw	r2,-44(fp)
   21d00:	18bfdc16 	blt	r3,r2,21c74 <__alt_data_end+0xffff1c74>
				max_cnt = (float)nDataRate/szToneFreq[nIndex];
   21d04:	e13ff517 	ldw	r4,-44(fp)
   21d08:	0022d340 	call	22d34 <__floatsisf>
   21d0c:	1009883a 	mov	r4,r2
   21d10:	e0bff317 	ldw	r2,-52(fp)
   21d14:	1085883a 	add	r2,r2,r2
   21d18:	1085883a 	add	r2,r2,r2
   21d1c:	e0fff004 	addi	r3,fp,-64
   21d20:	1885883a 	add	r2,r3,r2
   21d24:	10800704 	addi	r2,r2,28
   21d28:	10c00017 	ldw	r3,0(r2)
   21d2c:	180b883a 	mov	r5,r3
   21d30:	00228840 	call	22884 <__divsf3>
   21d34:	1007883a 	mov	r3,r2
   21d38:	1805883a 	mov	r2,r3
   21d3c:	1009883a 	mov	r4,r2
   21d40:	0022cc40 	call	22cc4 <__fixsfsi>
   21d44:	e0bff215 	stw	r2,-56(fp)
				sample_cnt = 0;
   21d48:	e03ff415 	stw	zero,-48(fp)
				nIndex++;
   21d4c:	e0bff317 	ldw	r2,-52(fp)
   21d50:	10800044 	addi	r2,r2,1
   21d54:	e0bff315 	stw	r2,-52(fp)
				if (nIndex >= sizeof(szToneFreq)/sizeof(szToneFreq[0]))
   21d58:	e0bff317 	ldw	r2,-52(fp)
   21d5c:	10800270 	cmpltui	r2,r2,9
   21d60:	103fc41e 	bne	r2,zero,21c74 <__alt_data_end+0xffff1c74>
					nIndex = 0;
   21d64:	e03ff315 	stw	zero,-52(fp)
			}



		}
	}
   21d68:	003fc206 	br	21c74 <__alt_data_end+0xffff1c74>

00021d6c <led_blink>:
}


void led_blink(void){
   21d6c:	defffd04 	addi	sp,sp,-12
   21d70:	dfc00215 	stw	ra,8(sp)
   21d74:	df000115 	stw	fp,4(sp)
   21d78:	df000104 	addi	fp,sp,4
	int i;
	for(i=0;i<6;i++){
   21d7c:	e03fff15 	stw	zero,-4(fp)
   21d80:	00000e06 	br	21dbc <led_blink+0x50>
		IOWR(LEDR_BASE, 0x00, (i%2 ==0)?0xFF:0x00);
   21d84:	e0bfff17 	ldw	r2,-4(fp)
   21d88:	1080004c 	andi	r2,r2,1
   21d8c:	1000021e 	bne	r2,zero,21d98 <led_blink+0x2c>
   21d90:	00803fc4 	movi	r2,255
   21d94:	00000106 	br	21d9c <led_blink+0x30>
   21d98:	0005883a 	mov	r2,zero
   21d9c:	00cc0004 	movi	r3,12288
   21da0:	18800035 	stwio	r2,0(r3)
		usleep(100*1000);
   21da4:	010000b4 	movhi	r4,2
   21da8:	2121a804 	addi	r4,r4,-31072
   21dac:	00238180 	call	23818 <usleep>
}


void led_blink(void){
	int i;
	for(i=0;i<6;i++){
   21db0:	e0bfff17 	ldw	r2,-4(fp)
   21db4:	10800044 	addi	r2,r2,1
   21db8:	e0bfff15 	stw	r2,-4(fp)
   21dbc:	e0bfff17 	ldw	r2,-4(fp)
   21dc0:	10800190 	cmplti	r2,r2,6
   21dc4:	103fef1e 	bne	r2,zero,21d84 <__alt_data_end+0xffff1d84>
		IOWR(LEDR_BASE, 0x00, (i%2 ==0)?0xFF:0x00);
		usleep(100*1000);
	}
}
   21dc8:	0001883a 	nop
   21dcc:	e037883a 	mov	sp,fp
   21dd0:	dfc00117 	ldw	ra,4(sp)
   21dd4:	df000017 	ldw	fp,0(sp)
   21dd8:	dec00204 	addi	sp,sp,8
   21ddc:	f800283a 	ret

00021de0 <main>:



int main(){
   21de0:	defffd04 	addi	sp,sp,-12
   21de4:	dfc00215 	stw	ra,8(sp)
   21de8:	df000115 	stw	fp,4(sp)
   21dec:	df000104 	addi	fp,sp,4
	int result;

	// nios welcome led
	led_blink();
   21df0:	0021d6c0 	call	21d6c <led_blink>

	// init MIPI
	Init_mipi_d8m();
   21df4:	00213840 	call	21384 <Init_mipi_d8m>


	// clear adc fifo
	IOWR(AUDIO_BASE, REG_CMD_ADDR, 0x01);
   21df8:	00c00044 	movi	r3,1
   21dfc:	00800134 	movhi	r2,4
   21e00:	10a00204 	addi	r2,r2,-32760
   21e04:	10c00035 	stwio	r3,0(r2)
	IOWR(AUDIO_BASE, REG_CMD_ADDR, 0x00);
   21e08:	0007883a 	mov	r3,zero
   21e0c:	00800134 	movhi	r2,4
   21e10:	10a00204 	addi	r2,r2,-32760
   21e14:	10c00035 	stwio	r3,0(r2)

	//result = test_audio();
	//result = test_camera();
	result = config_for_linux();
   21e18:	002167c0 	call	2167c <config_for_linux>
   21e1c:	e0bfff15 	stw	r2,-4(fp)


	return result;
   21e20:	e0bfff17 	ldw	r2,-4(fp)
}
   21e24:	e037883a 	mov	sp,fp
   21e28:	dfc00117 	ldw	ra,4(sp)
   21e2c:	df000017 	ldw	fp,0(sp)
   21e30:	dec00204 	addi	sp,sp,8
   21e34:	f800283a 	ret

00021e38 <nSWAP16>:
	{0x0004,0x8047} // Configuration Control Register

};


alt_u16 nSWAP16(alt_u16 x){
   21e38:	defffd04 	addi	sp,sp,-12
   21e3c:	df000215 	stw	fp,8(sp)
   21e40:	df000204 	addi	fp,sp,8
   21e44:	2005883a 	mov	r2,r4
   21e48:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 y;
	//y =  (((x) >> 8) & 0xff) | (((x) & 0xff) << 8);

//	y = x;
	y = (x >> 8) & 0x00ff;
   21e4c:	e0bfff0b 	ldhu	r2,-4(fp)
   21e50:	1004d23a 	srli	r2,r2,8
   21e54:	e0bffe0d 	sth	r2,-8(fp)
	y |= (x << 8) & 0xff00;
   21e58:	e0bfff0b 	ldhu	r2,-4(fp)
   21e5c:	1004923a 	slli	r2,r2,8
   21e60:	1007883a 	mov	r3,r2
   21e64:	e0bffe0b 	ldhu	r2,-8(fp)
   21e68:	1884b03a 	or	r2,r3,r2
   21e6c:	e0bffe0d 	sth	r2,-8(fp)
	return y;
   21e70:	e0bffe0b 	ldhu	r2,-8(fp)
}
   21e74:	e037883a 	mov	sp,fp
   21e78:	df000017 	ldw	fp,0(sp)
   21e7c:	dec00104 	addi	sp,sp,4
   21e80:	f800283a 	ret

00021e84 <MipiBridgeRegWrite>:


void MipiBridgeRegWrite(alt_u16 Addr, alt_u16 Value){
   21e84:	defffa04 	addi	sp,sp,-24
   21e88:	dfc00515 	stw	ra,20(sp)
   21e8c:	df000415 	stw	fp,16(sp)
   21e90:	df000404 	addi	fp,sp,16
   21e94:	2007883a 	mov	r3,r4
   21e98:	2805883a 	mov	r2,r5
   21e9c:	e0fffe0d 	sth	r3,-8(fp)
   21ea0:	e0bfff0d 	sth	r2,-4(fp)
	const alt_u8 device_address = MIPI_BRIDGE_I2C_ADDR;
   21ea4:	00800704 	movi	r2,28
   21ea8:	e0bffd05 	stb	r2,-12(fp)
	OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, device_address, Addr, (alt_u8 *)&Value, sizeof(Value));
   21eac:	e0fffd03 	ldbu	r3,-12(fp)
   21eb0:	e13ffe0b 	ldhu	r4,-8(fp)
   21eb4:	e17fff04 	addi	r5,fp,-4
   21eb8:	00800084 	movi	r2,2
   21ebc:	d8800015 	stw	r2,0(sp)
   21ec0:	280f883a 	mov	r7,r5
   21ec4:	200d883a 	mov	r6,r4
   21ec8:	180b883a 	mov	r5,r3
   21ecc:	01000174 	movhi	r4,5
   21ed0:	21100004 	addi	r4,r4,16384
   21ed4:	0020bac0 	call	20bac <OC_I2CL_Write>
}
   21ed8:	0001883a 	nop
   21edc:	e037883a 	mov	sp,fp
   21ee0:	dfc00117 	ldw	ra,4(sp)
   21ee4:	df000017 	ldw	fp,0(sp)
   21ee8:	dec00204 	addi	sp,sp,8
   21eec:	f800283a 	ret

00021ef0 <MipiBridgeRegRead>:

alt_u16 MipiBridgeRegRead(alt_u16 Addr){
   21ef0:	defffa04 	addi	sp,sp,-24
   21ef4:	dfc00515 	stw	ra,20(sp)
   21ef8:	df000415 	stw	fp,16(sp)
   21efc:	df000404 	addi	fp,sp,16
   21f00:	2005883a 	mov	r2,r4
   21f04:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 Value,tValue;
	const alt_u8 device_address = MIPI_BRIDGE_I2C_ADDR;
   21f08:	00800704 	movi	r2,28
   21f0c:	e0bffd05 	stb	r2,-12(fp)

	OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE,device_address, Addr,(alt_u8 *)&Value,sizeof(Value));
   21f10:	e0fffd03 	ldbu	r3,-12(fp)
   21f14:	e13fff0b 	ldhu	r4,-4(fp)
   21f18:	e17ffe04 	addi	r5,fp,-8
   21f1c:	00800084 	movi	r2,2
   21f20:	d8800015 	stw	r2,0(sp)
   21f24:	280f883a 	mov	r7,r5
   21f28:	200d883a 	mov	r6,r4
   21f2c:	180b883a 	mov	r5,r3
   21f30:	01000174 	movhi	r4,5
   21f34:	21100004 	addi	r4,r4,16384
   21f38:	0020dbc0 	call	20dbc <OC_I2CL_Read>

	tValue = nSWAP16(Value);
   21f3c:	e0bffe0b 	ldhu	r2,-8(fp)
   21f40:	10bfffcc 	andi	r2,r2,65535
   21f44:	1009883a 	mov	r4,r2
   21f48:	0021e380 	call	21e38 <nSWAP16>
   21f4c:	e0bffd8d 	sth	r2,-10(fp)

	return (tValue);
   21f50:	e0bffd8b 	ldhu	r2,-10(fp)
}
   21f54:	e037883a 	mov	sp,fp
   21f58:	dfc00117 	ldw	ra,4(sp)
   21f5c:	df000017 	ldw	fp,0(sp)
   21f60:	dec00204 	addi	sp,sp,8
   21f64:	f800283a 	ret

00021f68 <MipiBridgeInit>:




void MipiBridgeInit(void){
   21f68:	defffb04 	addi	sp,sp,-20
   21f6c:	dfc00415 	stw	ra,16(sp)
   21f70:	df000315 	stw	fp,12(sp)
   21f74:	df000304 	addi	fp,sp,12

	alt_u16 data;
    int i, num;

	printf("\nStart MipiBridgeInit!\n");
   21f78:	010000b4 	movhi	r4,2
   21f7c:	21159504 	addi	r4,r4,22100
   21f80:	0022fc40 	call	22fc4 <puts>

	data = MipiBridgeRegRead(0x0000); // read chip and revision id;
   21f84:	0009883a 	mov	r4,zero
   21f88:	0021ef00 	call	21ef0 <MipiBridgeRegRead>
   21f8c:	e0bffe0d 	sth	r2,-8(fp)

	printf("Chip and Revision ID is 0x%04xh(expected: 0x4401);\n",data);
   21f90:	e0bffe0b 	ldhu	r2,-8(fp)
   21f94:	100b883a 	mov	r5,r2
   21f98:	010000b4 	movhi	r4,2
   21f9c:	21159b04 	addi	r4,r4,22124
   21fa0:	0022ef80 	call	22ef8 <printf>


    num = sizeof(MipiBridgeReg)/sizeof(MipiBridgeReg[0]);
   21fa4:	00800344 	movi	r2,13
   21fa8:	e0bfff15 	stw	r2,-4(fp)

    for(i=0;i<num;i++){
   21fac:	e03ffd15 	stw	zero,-12(fp)
   21fb0:	00002d06 	br	22068 <MipiBridgeInit+0x100>
   	 if (MipiBridgeReg[i].Addr == 0xFFFF)   usleep(MipiBridgeReg[i].Data*1000);
   21fb4:	008000b4 	movhi	r2,2
   21fb8:	10962104 	addi	r2,r2,22660
   21fbc:	e0fffd17 	ldw	r3,-12(fp)
   21fc0:	18c7883a 	add	r3,r3,r3
   21fc4:	18c7883a 	add	r3,r3,r3
   21fc8:	10c5883a 	add	r2,r2,r3
   21fcc:	1080000b 	ldhu	r2,0(r2)
   21fd0:	10ffffcc 	andi	r3,r2,65535
   21fd4:	00bfffd4 	movui	r2,65535
   21fd8:	18800d1e 	bne	r3,r2,22010 <MipiBridgeInit+0xa8>
   21fdc:	008000b4 	movhi	r2,2
   21fe0:	10962104 	addi	r2,r2,22660
   21fe4:	e0fffd17 	ldw	r3,-12(fp)
   21fe8:	18c7883a 	add	r3,r3,r3
   21fec:	18c7883a 	add	r3,r3,r3
   21ff0:	10c5883a 	add	r2,r2,r3
   21ff4:	10800084 	addi	r2,r2,2
   21ff8:	1080000b 	ldhu	r2,0(r2)
   21ffc:	10bfffcc 	andi	r2,r2,65535
   22000:	1080fa24 	muli	r2,r2,1000
   22004:	1009883a 	mov	r4,r2
   22008:	00238180 	call	23818 <usleep>
   2200c:	00001306 	br	2205c <MipiBridgeInit+0xf4>
        else MipiBridgeRegWrite(MipiBridgeReg[i].Addr,  MipiBridgeReg[i].Data);
   22010:	008000b4 	movhi	r2,2
   22014:	10962104 	addi	r2,r2,22660
   22018:	e0fffd17 	ldw	r3,-12(fp)
   2201c:	18c7883a 	add	r3,r3,r3
   22020:	18c7883a 	add	r3,r3,r3
   22024:	10c5883a 	add	r2,r2,r3
   22028:	1080000b 	ldhu	r2,0(r2)
   2202c:	113fffcc 	andi	r4,r2,65535
   22030:	008000b4 	movhi	r2,2
   22034:	10962104 	addi	r2,r2,22660
   22038:	e0fffd17 	ldw	r3,-12(fp)
   2203c:	18c7883a 	add	r3,r3,r3
   22040:	18c7883a 	add	r3,r3,r3
   22044:	10c5883a 	add	r2,r2,r3
   22048:	10800084 	addi	r2,r2,2
   2204c:	1080000b 	ldhu	r2,0(r2)
   22050:	10bfffcc 	andi	r2,r2,65535
   22054:	100b883a 	mov	r5,r2
   22058:	0021e840 	call	21e84 <MipiBridgeRegWrite>
	printf("Chip and Revision ID is 0x%04xh(expected: 0x4401);\n",data);


    num = sizeof(MipiBridgeReg)/sizeof(MipiBridgeReg[0]);

    for(i=0;i<num;i++){
   2205c:	e0bffd17 	ldw	r2,-12(fp)
   22060:	10800044 	addi	r2,r2,1
   22064:	e0bffd15 	stw	r2,-12(fp)
   22068:	e0fffd17 	ldw	r3,-12(fp)
   2206c:	e0bfff17 	ldw	r2,-4(fp)
   22070:	18bfd016 	blt	r3,r2,21fb4 <__alt_data_end+0xffff1fb4>
//     MipiBridgeRegWrite(0x005A,((cap<<6) + (HsRxRs<<4) + ClkDly_data));
//     MipiBridgeRegWrite(0x005C,((cap<<6) + (HsRxRs<<4) + ClkDly_data));
//     MipiBridgeRegWrite(0x005E,((cap<<6) + (HsRxRs<<4) + ClkDly_data));
//

    printf("End MipiBridgeInit!\n\n");
   22074:	010000b4 	movhi	r4,2
   22078:	2115a804 	addi	r4,r4,22176
   2207c:	0022fc40 	call	22fc4 <puts>

}
   22080:	0001883a 	nop
   22084:	e037883a 	mov	sp,fp
   22088:	dfc00117 	ldw	ra,4(sp)
   2208c:	df000017 	ldw	fp,0(sp)
   22090:	dec00204 	addi	sp,sp,8
   22094:	f800283a 	ret

00022098 <OV8865_read_cmos_sensor_8>:





alt_u8 OV8865_read_cmos_sensor_8(alt_u16 Addr){
   22098:	defffb04 	addi	sp,sp,-20
   2209c:	dfc00415 	stw	ra,16(sp)
   220a0:	df000315 	stw	fp,12(sp)
   220a4:	df000304 	addi	fp,sp,12
   220a8:	2005883a 	mov	r2,r4
   220ac:	e0bfff0d 	sth	r2,-4(fp)
	const alt_u8 device_address = MIPI_I2C_ADDR;
   220b0:	00801b04 	movi	r2,108
   220b4:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 Value;

	//OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, device_address, SWAP16(Addr), (alt_u8 *)&Value, sizeof(Value));
	OC_I2CL_Read(I2C_OPENCORES_CAMERA_BASE, device_address, Addr, (alt_u8 *)&Value, sizeof(Value));
   220b8:	e0fffe03 	ldbu	r3,-8(fp)
   220bc:	e13fff0b 	ldhu	r4,-4(fp)
   220c0:	e17ffe44 	addi	r5,fp,-7
   220c4:	00800044 	movi	r2,1
   220c8:	d8800015 	stw	r2,0(sp)
   220cc:	280f883a 	mov	r7,r5
   220d0:	200d883a 	mov	r6,r4
   220d4:	180b883a 	mov	r5,r3
   220d8:	01000174 	movhi	r4,5
   220dc:	21080004 	addi	r4,r4,8192
   220e0:	0020dbc0 	call	20dbc <OC_I2CL_Read>

	return (Value);
   220e4:	e0bffe43 	ldbu	r2,-7(fp)
}
   220e8:	e037883a 	mov	sp,fp
   220ec:	dfc00117 	ldw	ra,4(sp)
   220f0:	df000017 	ldw	fp,0(sp)
   220f4:	dec00204 	addi	sp,sp,8
   220f8:	f800283a 	ret

000220fc <OV8865_write_cmos_sensor_8>:


void OV8865_write_cmos_sensor_8(alt_u16 Addr, alt_u8 Value){
   220fc:	defffa04 	addi	sp,sp,-24
   22100:	dfc00515 	stw	ra,20(sp)
   22104:	df000415 	stw	fp,16(sp)
   22108:	df000404 	addi	fp,sp,16
   2210c:	2007883a 	mov	r3,r4
   22110:	2805883a 	mov	r2,r5
   22114:	e0fffe0d 	sth	r3,-8(fp)
   22118:	e0bfff05 	stb	r2,-4(fp)
	const alt_u8 device_address = MIPI_I2C_ADDR;
   2211c:	00801b04 	movi	r2,108
   22120:	e0bffd05 	stb	r2,-12(fp)
	//OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, device_address, SWAP16(Addr), (alt_u8 *)&Value, sizeof(Value));
	OC_I2CL_Write(I2C_OPENCORES_CAMERA_BASE, device_address, Addr, (alt_u8 *)&Value, sizeof(Value));
   22124:	e0fffd03 	ldbu	r3,-12(fp)
   22128:	e13ffe0b 	ldhu	r4,-8(fp)
   2212c:	e17fff04 	addi	r5,fp,-4
   22130:	00800044 	movi	r2,1
   22134:	d8800015 	stw	r2,0(sp)
   22138:	280f883a 	mov	r7,r5
   2213c:	200d883a 	mov	r6,r4
   22140:	180b883a 	mov	r5,r3
   22144:	01000174 	movhi	r4,5
   22148:	21080004 	addi	r4,r4,8192
   2214c:	0020bac0 	call	20bac <OC_I2CL_Write>
}
   22150:	0001883a 	nop
   22154:	e037883a 	mov	sp,fp
   22158:	dfc00117 	ldw	ra,4(sp)
   2215c:	df000017 	ldw	fp,0(sp)
   22160:	dec00204 	addi	sp,sp,8
   22164:	f800283a 	ret

00022168 <OV8865_write_AF>:


void OV8865_write_AF(alt_u8 msb, alt_u8 lsb){
   22168:	defffa04 	addi	sp,sp,-24
   2216c:	dfc00515 	stw	ra,20(sp)
   22170:	df000415 	stw	fp,16(sp)
   22174:	df000404 	addi	fp,sp,16
   22178:	2007883a 	mov	r3,r4
   2217c:	2805883a 	mov	r2,r5
   22180:	e0fffe05 	stb	r3,-8(fp)
   22184:	e0bfff05 	stb	r2,-4(fp)
	// VCM149C
	const alt_u8 device_address = MIPI_AF_I2C_ADDR;
   22188:	00800604 	movi	r2,24
   2218c:	e0bffd05 	stb	r2,-12(fp)
	OC_I2C_Write(I2C_OPENCORES_CAMERA_BASE, device_address, msb, (alt_u8 *)&lsb, sizeof(lsb));
   22190:	e0fffd03 	ldbu	r3,-12(fp)
   22194:	e13ffe03 	ldbu	r4,-8(fp)
   22198:	e17fff04 	addi	r5,fp,-4
   2219c:	00800044 	movi	r2,1
   221a0:	d8800015 	stw	r2,0(sp)
   221a4:	280f883a 	mov	r7,r5
   221a8:	200d883a 	mov	r6,r4
   221ac:	180b883a 	mov	r5,r3
   221b0:	01000174 	movhi	r4,5
   221b4:	21080004 	addi	r4,r4,8192
   221b8:	00206440 	call	20644 <OC_I2C_Write>
}
   221bc:	0001883a 	nop
   221c0:	e037883a 	mov	sp,fp
   221c4:	dfc00117 	ldw	ra,4(sp)
   221c8:	df000017 	ldw	fp,0(sp)
   221cc:	dec00204 	addi	sp,sp,8
   221d0:	f800283a 	ret

000221d4 <OV8865_read_AF>:

void OV8865_read_AF(void){
   221d4:	defffb04 	addi	sp,sp,-20
   221d8:	dfc00415 	stw	ra,16(sp)
   221dc:	df000315 	stw	fp,12(sp)
   221e0:	df000304 	addi	fp,sp,12
	// VCM149C
	const alt_u8 device_address = MIPI_AF_I2C_ADDR;
   221e4:	00800604 	movi	r2,24
   221e8:	e0bffd05 	stb	r2,-12(fp)
	alt_u8 szData8[2];
	bool bSuccess;

		bSuccess = OC_I2C_Read_Continue(I2C_OPENCORES_CAMERA_BASE, device_address, szData8, sizeof(szData8));
   221ec:	e0bffd03 	ldbu	r2,-12(fp)
   221f0:	e0ffff04 	addi	r3,fp,-4
   221f4:	01c00084 	movi	r7,2
   221f8:	180d883a 	mov	r6,r3
   221fc:	100b883a 	mov	r5,r2
   22200:	01000174 	movhi	r4,5
   22204:	21080004 	addi	r4,r4,8192
   22208:	0020a740 	call	20a74 <OC_I2C_Read_Continue>
   2220c:	e0bffe15 	stw	r2,-8(fp)
		if (bSuccess)
   22210:	e0bffe17 	ldw	r2,-8(fp)
   22214:	10000926 	beq	r2,zero,2223c <OV8865_read_AF+0x68>
			printf("Read MSB=%xh, LSB=%xh\r\n", szData8[0], szData8[1]);
   22218:	e0bfff03 	ldbu	r2,-4(fp)
   2221c:	10803fcc 	andi	r2,r2,255
   22220:	e0ffff43 	ldbu	r3,-3(fp)
   22224:	18c03fcc 	andi	r3,r3,255
   22228:	180d883a 	mov	r6,r3
   2222c:	100b883a 	mov	r5,r2
   22230:	010000b4 	movhi	r4,2
   22234:	2115ae04 	addi	r4,r4,22200
   22238:	0022ef80 	call	22ef8 <printf>
}
   2223c:	0001883a 	nop
   22240:	e037883a 	mov	sp,fp
   22244:	dfc00117 	ldw	ra,4(sp)
   22248:	df000017 	ldw	fp,0(sp)
   2224c:	dec00204 	addi	sp,sp,8
   22250:	f800283a 	ret

00022254 <OV8865_FOCUS_Move_to>:

void OV8865_FOCUS_Move_to(alt_u16 a_u2MovePosition)
{
   22254:	defffb04 	addi	sp,sp,-20
   22258:	dfc00415 	stw	ra,16(sp)
   2225c:	df000315 	stw	fp,12(sp)
   22260:	df000304 	addi	fp,sp,12
   22264:	2005883a 	mov	r2,r4
   22268:	e0bfff0d 	sth	r2,-4(fp)
  if (a_u2MovePosition > 1023)   {a_u2MovePosition = 1023;}
   2226c:	e0bfff0b 	ldhu	r2,-4(fp)
   22270:	10810030 	cmpltui	r2,r2,1024
   22274:	1000021e 	bne	r2,zero,22280 <OV8865_FOCUS_Move_to+0x2c>
   22278:	0080ffc4 	movi	r2,1023
   2227c:	e0bfff0d 	sth	r2,-4(fp)
  if (a_u2MovePosition < 0)     {a_u2MovePosition = 0;}
  int bSuccess;

//  Focus_Released(); // waiting for VCM release I2C bus

	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, 50*1000*1000,400*1000); //I2C: 400K
   22280:	018001b4 	movhi	r6,6
   22284:	3186a004 	addi	r6,r6,6784
   22288:	0140bef4 	movhi	r5,763
   2228c:	297c2004 	addi	r5,r5,-3968
   22290:	01000174 	movhi	r4,5
   22294:	21080004 	addi	r4,r4,8192
   22298:	00203980 	call	20398 <oc_i2c_init_ex>
   2229c:	e0bffd15 	stw	r2,-12(fp)
	if (!bSuccess)
   222a0:	e0bffd17 	ldw	r2,-12(fp)
   222a4:	1000031e 	bne	r2,zero,222b4 <OV8865_FOCUS_Move_to+0x60>
		printf("failed to init MIPI- Camera i2c\r\n");
   222a8:	010000b4 	movhi	r4,2
   222ac:	2115b404 	addi	r4,r4,22224
   222b0:	0022fc40 	call	22fc4 <puts>

  alt_u8 msb,lsb;
  msb = (a_u2MovePosition >> 4)&0x00FF;
   222b4:	e0bfff0b 	ldhu	r2,-4(fp)
   222b8:	1004d13a 	srli	r2,r2,4
   222bc:	e0bffe05 	stb	r2,-8(fp)
  lsb = (a_u2MovePosition << 4 )&0x00F0;
   222c0:	e0bfff0b 	ldhu	r2,-4(fp)
   222c4:	1004913a 	slli	r2,r2,4
   222c8:	e0bffe45 	stb	r2,-7(fp)
  lsb += 0x06;
   222cc:	e0bffe43 	ldbu	r2,-7(fp)
   222d0:	10800184 	addi	r2,r2,6
   222d4:	e0bffe45 	stb	r2,-7(fp)
//	printf("Write MSB=%xh, LSB=%xh\r\n", msb, lsb);
	OV8865_write_AF(msb, lsb+0x6);
   222d8:	e0fffe03 	ldbu	r3,-8(fp)
   222dc:	e0bffe43 	ldbu	r2,-7(fp)
   222e0:	10800184 	addi	r2,r2,6
   222e4:	10803fcc 	andi	r2,r2,255
   222e8:	100b883a 	mov	r5,r2
   222ec:	1809883a 	mov	r4,r3
   222f0:	00221680 	call	22168 <OV8865_write_AF>
	usleep(1000);
   222f4:	0100fa04 	movi	r4,1000
   222f8:	00238180 	call	23818 <usleep>
//	OV8865_read_AF();

	oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);  // Release I2C bus , due to two I2C master shared!
   222fc:	01000174 	movhi	r4,5
   22300:	21080004 	addi	r4,r4,8192
   22304:	00204d40 	call	204d4 <oc_i2c_uninit>

}
   22308:	0001883a 	nop
   2230c:	e037883a 	mov	sp,fp
   22310:	dfc00117 	ldw	ra,4(sp)
   22314:	df000017 	ldw	fp,0(sp)
   22318:	dec00204 	addi	sp,sp,8
   2231c:	f800283a 	ret

00022320 <MIPI_BIN_LEVEL>:




//ZOOM
void MIPI_BIN_LEVEL(alt_u8 level){
   22320:	defffc04 	addi	sp,sp,-16
   22324:	dfc00315 	stw	ra,12(sp)
   22328:	df000215 	stw	fp,8(sp)
   2232c:	df000204 	addi	fp,sp,8
   22330:	2005883a 	mov	r2,r4
   22334:	e0bfff05 	stb	r2,-4(fp)
	if(level <= 1) level = 1;
   22338:	e0bfff03 	ldbu	r2,-4(fp)
   2233c:	108000a8 	cmpgeui	r2,r2,2
   22340:	1000021e 	bne	r2,zero,2234c <MIPI_BIN_LEVEL+0x2c>
   22344:	00800044 	movi	r2,1
   22348:	e0bfff05 	stb	r2,-4(fp)
	if(level >= 3) level = 3;
   2234c:	e0bfff03 	ldbu	r2,-4(fp)
   22350:	108000f0 	cmpltui	r2,r2,3
   22354:	1000021e 	bne	r2,zero,22360 <MIPI_BIN_LEVEL+0x40>
   22358:	008000c4 	movi	r2,3
   2235c:	e0bfff05 	stb	r2,-4(fp)

//	  Focus_Released(); // waiting for VCM release I2C bus

	  int bSuccess;
		bSuccess = oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, 50*1000*1000,400*1000); //I2C: 400K
   22360:	018001b4 	movhi	r6,6
   22364:	3186a004 	addi	r6,r6,6784
   22368:	0140bef4 	movhi	r5,763
   2236c:	297c2004 	addi	r5,r5,-3968
   22370:	01000174 	movhi	r4,5
   22374:	21080004 	addi	r4,r4,8192
   22378:	00203980 	call	20398 <oc_i2c_init_ex>
   2237c:	e0bffe15 	stw	r2,-8(fp)
		if (!bSuccess)
   22380:	e0bffe17 	ldw	r2,-8(fp)
   22384:	1000031e 	bne	r2,zero,22394 <MIPI_BIN_LEVEL+0x74>
			printf("failed to init MIPI- Camera i2c\r\n");
   22388:	010000b4 	movhi	r4,2
   2238c:	2115b404 	addi	r4,r4,22224
   22390:	0022fc40 	call	22fc4 <puts>


	//OV8865_write_cmos_sensor_8(0x0100, 0x00);

	if(level == 1){
   22394:	e0bfff03 	ldbu	r2,-4(fp)
   22398:	10800058 	cmpnei	r2,r2,1
   2239c:	1000131e 	bne	r2,zero,223ec <MIPI_BIN_LEVEL+0xcc>
		OV8865_write_cmos_sensor_8(0x3814, 0x01);
   223a0:	01400044 	movi	r5,1
   223a4:	010e0504 	movi	r4,14356
   223a8:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3815, 0x01);
   223ac:	01400044 	movi	r5,1
   223b0:	010e0544 	movi	r4,14357
   223b4:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382a, 0x01);
   223b8:	01400044 	movi	r5,1
   223bc:	010e0a84 	movi	r4,14378
   223c0:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382b, 0x01);
   223c4:	01400044 	movi	r5,1
   223c8:	010e0ac4 	movi	r4,14379
   223cc:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>

		//OV8865_write_cmos_sensor_8(0x3830, 28);
		//OV8865_write_cmos_sensor_8(0x3836, 28);


		OV8865_write_cmos_sensor_8(0x3830, 4);
   223d0:	01400104 	movi	r5,4
   223d4:	010e0c04 	movi	r4,14384
   223d8:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3836, 1);
   223dc:	01400044 	movi	r5,1
   223e0:	010e0d84 	movi	r4,14390
   223e4:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
   223e8:	00002b06 	br	22498 <MIPI_BIN_LEVEL+0x178>
	}
	else if(level == 2){
   223ec:	e0bfff03 	ldbu	r2,-4(fp)
   223f0:	10800098 	cmpnei	r2,r2,2
   223f4:	1000131e 	bne	r2,zero,22444 <MIPI_BIN_LEVEL+0x124>
		OV8865_write_cmos_sensor_8(0x3814, 0x03);
   223f8:	014000c4 	movi	r5,3
   223fc:	010e0504 	movi	r4,14356
   22400:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3815, 0x01);
   22404:	01400044 	movi	r5,1
   22408:	010e0544 	movi	r4,14357
   2240c:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382a, 0x03);
   22410:	014000c4 	movi	r5,3
   22414:	010e0a84 	movi	r4,14378
   22418:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382b, 0x01);
   2241c:	01400044 	movi	r5,1
   22420:	010e0ac4 	movi	r4,14379
   22424:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>

		OV8865_write_cmos_sensor_8(0x3830, 8);
   22428:	01400204 	movi	r5,8
   2242c:	010e0c04 	movi	r4,14384
   22430:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3836, 2);
   22434:	01400084 	movi	r5,2
   22438:	010e0d84 	movi	r4,14390
   2243c:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
   22440:	00001506 	br	22498 <MIPI_BIN_LEVEL+0x178>

	}
	else if(level == 3){
   22444:	e0bfff03 	ldbu	r2,-4(fp)
   22448:	108000d8 	cmpnei	r2,r2,3
   2244c:	1000121e 	bne	r2,zero,22498 <MIPI_BIN_LEVEL+0x178>
		OV8865_write_cmos_sensor_8(0x3814, 0x07);
   22450:	014001c4 	movi	r5,7
   22454:	010e0504 	movi	r4,14356
   22458:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3815, 0x01);
   2245c:	01400044 	movi	r5,1
   22460:	010e0544 	movi	r4,14357
   22464:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382a, 0x07);
   22468:	014001c4 	movi	r5,7
   2246c:	010e0a84 	movi	r4,14378
   22470:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x382b, 0x01);
   22474:	01400044 	movi	r5,1
   22478:	010e0ac4 	movi	r4,14379
   2247c:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>

		OV8865_write_cmos_sensor_8(0x3830, 16);
   22480:	01400404 	movi	r5,16
   22484:	010e0c04 	movi	r4,14384
   22488:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
		OV8865_write_cmos_sensor_8(0x3836, 4);
   2248c:	01400104 	movi	r5,4
   22490:	010e0d84 	movi	r4,14390
   22494:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
	}
    usleep(10000);
   22498:	0109c404 	movi	r4,10000
   2249c:	00238180 	call	23818 <usleep>
	//OV8865_write_cmos_sensor_8(0x0100, 0x01);

	oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);  // Release I2C bus , due to two I2C master shared!
   224a0:	01000174 	movhi	r4,5
   224a4:	21080004 	addi	r4,r4,8192
   224a8:	00204d40 	call	204d4 <oc_i2c_uninit>

}
   224ac:	0001883a 	nop
   224b0:	e037883a 	mov	sp,fp
   224b4:	dfc00117 	ldw	ra,4(sp)
   224b8:	df000017 	ldw	fp,0(sp)
   224bc:	dec00204 	addi	sp,sp,8
   224c0:	f800283a 	ret

000224c4 <MipiCameraInit>:
//		OV8865_write_cmos_sensor_8(0x0100, 0x01);
//}


void MipiCameraInit(void)
{
   224c4:	defffb04 	addi	sp,sp,-20
   224c8:	dfc00415 	stw	ra,16(sp)
   224cc:	df000315 	stw	fp,12(sp)
   224d0:	df000304 	addi	fp,sp,12
    int bSuccess;

  //  Focus_Released(); // waiting for VCM release I2C bus


		bSuccess = oc_i2c_init_ex(I2C_OPENCORES_CAMERA_BASE, 50*1000*1000,400*1000); //I2C: 400K
   224d4:	018001b4 	movhi	r6,6
   224d8:	3186a004 	addi	r6,r6,6784
   224dc:	0140bef4 	movhi	r5,763
   224e0:	297c2004 	addi	r5,r5,-3968
   224e4:	01000174 	movhi	r4,5
   224e8:	21080004 	addi	r4,r4,8192
   224ec:	00203980 	call	20398 <oc_i2c_init_ex>
   224f0:	e0bffe15 	stw	r2,-8(fp)
		if (!bSuccess)
   224f4:	e0bffe17 	ldw	r2,-8(fp)
   224f8:	1000031e 	bne	r2,zero,22508 <MipiCameraInit+0x44>
			printf("failed to init MIPI- Camera i2c\r\n");
   224fc:	010000b4 	movhi	r4,2
   22500:	2115b404 	addi	r4,r4,22224
   22504:	0022fc40 	call	22fc4 <puts>
//        usleep(10000);
//    }
//


	 OV8865DB("\nStart MipiCameraInit -OV8865!\r\n");
   22508:	010000b4 	movhi	r4,2
   2250c:	2115bd04 	addi	r4,r4,22260
   22510:	0022fc40 	call	22fc4 <puts>
	 OV8865DB("Write Read Test!\n");
   22514:	010000b4 	movhi	r4,2
   22518:	2115c504 	addi	r4,r4,22292
   2251c:	0022fc40 	call	22fc4 <puts>

	    for(i=0;i<10;i++){
   22520:	e03ffd15 	stw	zero,-12(fp)
   22524:	00001406 	br	22578 <MipiCameraInit+0xb4>
	       OV8865_write_cmos_sensor_8(0x3809,i);
   22528:	e0bffd17 	ldw	r2,-12(fp)
   2252c:	10803fcc 	andi	r2,r2,255
   22530:	100b883a 	mov	r5,r2
   22534:	010e0244 	movi	r4,14345
   22538:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
	      usleep(100);
   2253c:	01001904 	movi	r4,100
   22540:	00238180 	call	23818 <usleep>
	        printf("%d (%d)\n",OV8865_read_cmos_sensor_8(0x3809),i);
   22544:	010e0244 	movi	r4,14345
   22548:	00220980 	call	22098 <OV8865_read_cmos_sensor_8>
   2254c:	10803fcc 	andi	r2,r2,255
   22550:	e1bffd17 	ldw	r6,-12(fp)
   22554:	100b883a 	mov	r5,r2
   22558:	010000b4 	movhi	r4,2
   2255c:	2115ca04 	addi	r4,r4,22312
   22560:	0022ef80 	call	22ef8 <printf>
	      usleep(100);
   22564:	01001904 	movi	r4,100
   22568:	00238180 	call	23818 <usleep>


	 OV8865DB("\nStart MipiCameraInit -OV8865!\r\n");
	 OV8865DB("Write Read Test!\n");

	    for(i=0;i<10;i++){
   2256c:	e0bffd17 	ldw	r2,-12(fp)
   22570:	10800044 	addi	r2,r2,1
   22574:	e0bffd15 	stw	r2,-12(fp)
   22578:	e0bffd17 	ldw	r2,-12(fp)
   2257c:	10800290 	cmplti	r2,r2,10
   22580:	103fe91e 	bne	r2,zero,22528 <__alt_data_end+0xffff2528>
	       OV8865_write_cmos_sensor_8(0x3809,i);
	      usleep(100);
	        printf("%d (%d)\n",OV8865_read_cmos_sensor_8(0x3809),i);
	      usleep(100);
	    }
	 num = sizeof(MipiCameraReg)/sizeof(MipiCameraReg[0]);
   22584:	00804ec4 	movi	r2,315
   22588:	e0bfff15 	stw	r2,-4(fp)
     for(i=0;i<num;i++){
   2258c:	e03ffd15 	stw	zero,-12(fp)
   22590:	00003c06 	br	22684 <MipiCameraInit+0x1c0>

    	 if (MipiCameraReg[i].Type == TIME_DELAY)   usleep(MipiCameraReg[i].Data*100);
   22594:	008000b4 	movhi	r2,2
   22598:	10962e04 	addi	r2,r2,22712
   2259c:	e0fffd17 	ldw	r3,-12(fp)
   225a0:	18c001a4 	muli	r3,r3,6
   225a4:	10c5883a 	add	r2,r2,r3
   225a8:	10800003 	ldbu	r2,0(r2)
   225ac:	10803fcc 	andi	r2,r2,255
   225b0:	108000d8 	cmpnei	r2,r2,3
   225b4:	10000c1e 	bne	r2,zero,225e8 <MipiCameraInit+0x124>
   225b8:	008000b4 	movhi	r2,2
   225bc:	10962e04 	addi	r2,r2,22712
   225c0:	e0fffd17 	ldw	r3,-12(fp)
   225c4:	18c001a4 	muli	r3,r3,6
   225c8:	10c5883a 	add	r2,r2,r3
   225cc:	10800104 	addi	r2,r2,4
   225d0:	10800003 	ldbu	r2,0(r2)
   225d4:	10803fcc 	andi	r2,r2,255
   225d8:	10801924 	muli	r2,r2,100
   225dc:	1009883a 	mov	r4,r2
   225e0:	00238180 	call	23818 <usleep>
   225e4:	00002406 	br	22678 <MipiCameraInit+0x1b4>
    	 else if(MipiCameraReg[i].Type == END_OF_SCRIPT)   break;
   225e8:	008000b4 	movhi	r2,2
   225ec:	10962e04 	addi	r2,r2,22712
   225f0:	e0fffd17 	ldw	r3,-12(fp)
   225f4:	18c001a4 	muli	r3,r3,6
   225f8:	10c5883a 	add	r2,r2,r3
   225fc:	10800003 	ldbu	r2,0(r2)
   22600:	10803fcc 	andi	r2,r2,255
   22604:	10800118 	cmpnei	r2,r2,4
   22608:	10002226 	beq	r2,zero,22694 <MipiCameraInit+0x1d0>
    	 else if(MipiCameraReg[i].Type == 0x6c)   OV8865_write_cmos_sensor_8(MipiCameraReg[i].Addr, MipiCameraReg[i].Data);
   2260c:	008000b4 	movhi	r2,2
   22610:	10962e04 	addi	r2,r2,22712
   22614:	e0fffd17 	ldw	r3,-12(fp)
   22618:	18c001a4 	muli	r3,r3,6
   2261c:	10c5883a 	add	r2,r2,r3
   22620:	10800003 	ldbu	r2,0(r2)
   22624:	10803fcc 	andi	r2,r2,255
   22628:	10801b18 	cmpnei	r2,r2,108
   2262c:	1000121e 	bne	r2,zero,22678 <MipiCameraInit+0x1b4>
   22630:	008000b4 	movhi	r2,2
   22634:	10962e04 	addi	r2,r2,22712
   22638:	e0fffd17 	ldw	r3,-12(fp)
   2263c:	18c001a4 	muli	r3,r3,6
   22640:	10c5883a 	add	r2,r2,r3
   22644:	10800084 	addi	r2,r2,2
   22648:	1080000b 	ldhu	r2,0(r2)
   2264c:	113fffcc 	andi	r4,r2,65535
   22650:	008000b4 	movhi	r2,2
   22654:	10962e04 	addi	r2,r2,22712
   22658:	e0fffd17 	ldw	r3,-12(fp)
   2265c:	18c001a4 	muli	r3,r3,6
   22660:	10c5883a 	add	r2,r2,r3
   22664:	10800104 	addi	r2,r2,4
   22668:	10800003 	ldbu	r2,0(r2)
   2266c:	10803fcc 	andi	r2,r2,255
   22670:	100b883a 	mov	r5,r2
   22674:	00220fc0 	call	220fc <OV8865_write_cmos_sensor_8>
	      usleep(100);
	        printf("%d (%d)\n",OV8865_read_cmos_sensor_8(0x3809),i);
	      usleep(100);
	    }
	 num = sizeof(MipiCameraReg)/sizeof(MipiCameraReg[0]);
     for(i=0;i<num;i++){
   22678:	e0bffd17 	ldw	r2,-12(fp)
   2267c:	10800044 	addi	r2,r2,1
   22680:	e0bffd15 	stw	r2,-12(fp)
   22684:	e0fffd17 	ldw	r3,-12(fp)
   22688:	e0bfff17 	ldw	r2,-4(fp)
   2268c:	18bfc116 	blt	r3,r2,22594 <__alt_data_end+0xffff2594>
   22690:	00000106 	br	22698 <MipiCameraInit+0x1d4>

    	 if (MipiCameraReg[i].Type == TIME_DELAY)   usleep(MipiCameraReg[i].Data*100);
    	 else if(MipiCameraReg[i].Type == END_OF_SCRIPT)   break;
   22694:	0001883a 	nop
    	 else if(MipiCameraReg[i].Type == 0x6c)   OV8865_write_cmos_sensor_8(MipiCameraReg[i].Addr, MipiCameraReg[i].Data);
     }

     MIPI_BIN_LEVEL(CAMERA_BIN_LEVEL_DEFAULT);
   22698:	010000c4 	movi	r4,3
   2269c:	00223200 	call	22320 <MIPI_BIN_LEVEL>


 	oc_i2c_uninit(I2C_OPENCORES_CAMERA_BASE);  // Release I2C bus , due to two I2C master shared!
   226a0:	01000174 	movhi	r4,5
   226a4:	21080004 	addi	r4,r4,8192
   226a8:	00204d40 	call	204d4 <oc_i2c_uninit>



	 OV8865DB("\nEnd MipiCameraInit! -OV8865!\r\n\n");
   226ac:	010000b4 	movhi	r4,2
   226b0:	2115cd04 	addi	r4,r4,22324
   226b4:	0022fc40 	call	22fc4 <puts>

}
   226b8:	0001883a 	nop
   226bc:	e037883a 	mov	sp,fp
   226c0:	dfc00117 	ldw	ra,4(sp)
   226c4:	df000017 	ldw	fp,0(sp)
   226c8:	dec00204 	addi	sp,sp,8
   226cc:	f800283a 	ret

000226d0 <__divsi3>:
   226d0:	20001b16 	blt	r4,zero,22740 <__divsi3+0x70>
   226d4:	000f883a 	mov	r7,zero
   226d8:	28001616 	blt	r5,zero,22734 <__divsi3+0x64>
   226dc:	200d883a 	mov	r6,r4
   226e0:	29001a2e 	bgeu	r5,r4,2274c <__divsi3+0x7c>
   226e4:	00800804 	movi	r2,32
   226e8:	00c00044 	movi	r3,1
   226ec:	00000106 	br	226f4 <__divsi3+0x24>
   226f0:	10000d26 	beq	r2,zero,22728 <__divsi3+0x58>
   226f4:	294b883a 	add	r5,r5,r5
   226f8:	10bfffc4 	addi	r2,r2,-1
   226fc:	18c7883a 	add	r3,r3,r3
   22700:	293ffb36 	bltu	r5,r4,226f0 <__alt_data_end+0xffff26f0>
   22704:	0005883a 	mov	r2,zero
   22708:	18000726 	beq	r3,zero,22728 <__divsi3+0x58>
   2270c:	0005883a 	mov	r2,zero
   22710:	31400236 	bltu	r6,r5,2271c <__divsi3+0x4c>
   22714:	314dc83a 	sub	r6,r6,r5
   22718:	10c4b03a 	or	r2,r2,r3
   2271c:	1806d07a 	srli	r3,r3,1
   22720:	280ad07a 	srli	r5,r5,1
   22724:	183ffa1e 	bne	r3,zero,22710 <__alt_data_end+0xffff2710>
   22728:	38000126 	beq	r7,zero,22730 <__divsi3+0x60>
   2272c:	0085c83a 	sub	r2,zero,r2
   22730:	f800283a 	ret
   22734:	014bc83a 	sub	r5,zero,r5
   22738:	39c0005c 	xori	r7,r7,1
   2273c:	003fe706 	br	226dc <__alt_data_end+0xffff26dc>
   22740:	0109c83a 	sub	r4,zero,r4
   22744:	01c00044 	movi	r7,1
   22748:	003fe306 	br	226d8 <__alt_data_end+0xffff26d8>
   2274c:	00c00044 	movi	r3,1
   22750:	003fee06 	br	2270c <__alt_data_end+0xffff270c>

00022754 <__modsi3>:
   22754:	20001716 	blt	r4,zero,227b4 <__modsi3+0x60>
   22758:	000f883a 	mov	r7,zero
   2275c:	2005883a 	mov	r2,r4
   22760:	28001216 	blt	r5,zero,227ac <__modsi3+0x58>
   22764:	2900162e 	bgeu	r5,r4,227c0 <__modsi3+0x6c>
   22768:	01800804 	movi	r6,32
   2276c:	00c00044 	movi	r3,1
   22770:	00000106 	br	22778 <__modsi3+0x24>
   22774:	30000a26 	beq	r6,zero,227a0 <__modsi3+0x4c>
   22778:	294b883a 	add	r5,r5,r5
   2277c:	31bfffc4 	addi	r6,r6,-1
   22780:	18c7883a 	add	r3,r3,r3
   22784:	293ffb36 	bltu	r5,r4,22774 <__alt_data_end+0xffff2774>
   22788:	18000526 	beq	r3,zero,227a0 <__modsi3+0x4c>
   2278c:	1806d07a 	srli	r3,r3,1
   22790:	11400136 	bltu	r2,r5,22798 <__modsi3+0x44>
   22794:	1145c83a 	sub	r2,r2,r5
   22798:	280ad07a 	srli	r5,r5,1
   2279c:	183ffb1e 	bne	r3,zero,2278c <__alt_data_end+0xffff278c>
   227a0:	38000126 	beq	r7,zero,227a8 <__modsi3+0x54>
   227a4:	0085c83a 	sub	r2,zero,r2
   227a8:	f800283a 	ret
   227ac:	014bc83a 	sub	r5,zero,r5
   227b0:	003fec06 	br	22764 <__alt_data_end+0xffff2764>
   227b4:	0109c83a 	sub	r4,zero,r4
   227b8:	01c00044 	movi	r7,1
   227bc:	003fe706 	br	2275c <__alt_data_end+0xffff275c>
   227c0:	00c00044 	movi	r3,1
   227c4:	003ff106 	br	2278c <__alt_data_end+0xffff278c>

000227c8 <__udivsi3>:
   227c8:	200d883a 	mov	r6,r4
   227cc:	2900152e 	bgeu	r5,r4,22824 <__udivsi3+0x5c>
   227d0:	28001416 	blt	r5,zero,22824 <__udivsi3+0x5c>
   227d4:	00800804 	movi	r2,32
   227d8:	00c00044 	movi	r3,1
   227dc:	00000206 	br	227e8 <__udivsi3+0x20>
   227e0:	10000e26 	beq	r2,zero,2281c <__udivsi3+0x54>
   227e4:	28000516 	blt	r5,zero,227fc <__udivsi3+0x34>
   227e8:	294b883a 	add	r5,r5,r5
   227ec:	10bfffc4 	addi	r2,r2,-1
   227f0:	18c7883a 	add	r3,r3,r3
   227f4:	293ffa36 	bltu	r5,r4,227e0 <__alt_data_end+0xffff27e0>
   227f8:	18000826 	beq	r3,zero,2281c <__udivsi3+0x54>
   227fc:	0005883a 	mov	r2,zero
   22800:	31400236 	bltu	r6,r5,2280c <__udivsi3+0x44>
   22804:	314dc83a 	sub	r6,r6,r5
   22808:	10c4b03a 	or	r2,r2,r3
   2280c:	1806d07a 	srli	r3,r3,1
   22810:	280ad07a 	srli	r5,r5,1
   22814:	183ffa1e 	bne	r3,zero,22800 <__alt_data_end+0xffff2800>
   22818:	f800283a 	ret
   2281c:	0005883a 	mov	r2,zero
   22820:	f800283a 	ret
   22824:	00c00044 	movi	r3,1
   22828:	003ff406 	br	227fc <__alt_data_end+0xffff27fc>

0002282c <__umodsi3>:
   2282c:	2005883a 	mov	r2,r4
   22830:	2900122e 	bgeu	r5,r4,2287c <__umodsi3+0x50>
   22834:	28001116 	blt	r5,zero,2287c <__umodsi3+0x50>
   22838:	01800804 	movi	r6,32
   2283c:	00c00044 	movi	r3,1
   22840:	00000206 	br	2284c <__umodsi3+0x20>
   22844:	30000c26 	beq	r6,zero,22878 <__umodsi3+0x4c>
   22848:	28000516 	blt	r5,zero,22860 <__umodsi3+0x34>
   2284c:	294b883a 	add	r5,r5,r5
   22850:	31bfffc4 	addi	r6,r6,-1
   22854:	18c7883a 	add	r3,r3,r3
   22858:	293ffa36 	bltu	r5,r4,22844 <__alt_data_end+0xffff2844>
   2285c:	18000626 	beq	r3,zero,22878 <__umodsi3+0x4c>
   22860:	1806d07a 	srli	r3,r3,1
   22864:	11400136 	bltu	r2,r5,2286c <__umodsi3+0x40>
   22868:	1145c83a 	sub	r2,r2,r5
   2286c:	280ad07a 	srli	r5,r5,1
   22870:	183ffb1e 	bne	r3,zero,22860 <__alt_data_end+0xffff2860>
   22874:	f800283a 	ret
   22878:	f800283a 	ret
   2287c:	00c00044 	movi	r3,1
   22880:	003ff706 	br	22860 <__alt_data_end+0xffff2860>

00022884 <__divsf3>:
   22884:	defff504 	addi	sp,sp,-44
   22888:	200cd5fa 	srli	r6,r4,23
   2288c:	dcc00415 	stw	r19,16(sp)
   22890:	2026d7fa 	srli	r19,r4,31
   22894:	00c02034 	movhi	r3,128
   22898:	dd800715 	stw	r22,28(sp)
   2289c:	dd000515 	stw	r20,20(sp)
   228a0:	dc800315 	stw	r18,12(sp)
   228a4:	18ffffc4 	addi	r3,r3,-1
   228a8:	dfc00a15 	stw	ra,40(sp)
   228ac:	df000915 	stw	fp,36(sp)
   228b0:	ddc00815 	stw	r23,32(sp)
   228b4:	dd400615 	stw	r21,24(sp)
   228b8:	dc400215 	stw	r17,8(sp)
   228bc:	dc000115 	stw	r16,4(sp)
   228c0:	35003fcc 	andi	r20,r6,255
   228c4:	1924703a 	and	r18,r3,r4
   228c8:	9d803fcc 	andi	r22,r19,255
   228cc:	a0005226 	beq	r20,zero,22a18 <__divsf3+0x194>
   228d0:	00803fc4 	movi	r2,255
   228d4:	a0802e26 	beq	r20,r2,22990 <__divsf3+0x10c>
   228d8:	91002034 	orhi	r4,r18,128
   228dc:	202490fa 	slli	r18,r4,3
   228e0:	a53fe044 	addi	r20,r20,-127
   228e4:	0021883a 	mov	r16,zero
   228e8:	002f883a 	mov	r23,zero
   228ec:	280cd5fa 	srli	r6,r5,23
   228f0:	282ad7fa 	srli	r21,r5,31
   228f4:	00c02034 	movhi	r3,128
   228f8:	18ffffc4 	addi	r3,r3,-1
   228fc:	31803fcc 	andi	r6,r6,255
   22900:	1962703a 	and	r17,r3,r5
   22904:	af003fcc 	andi	fp,r21,255
   22908:	30004a26 	beq	r6,zero,22a34 <__divsf3+0x1b0>
   2290c:	00803fc4 	movi	r2,255
   22910:	30804526 	beq	r6,r2,22a28 <__divsf3+0x1a4>
   22914:	89402034 	orhi	r5,r17,128
   22918:	282290fa 	slli	r17,r5,3
   2291c:	31bfe044 	addi	r6,r6,-127
   22920:	000b883a 	mov	r5,zero
   22924:	2c20b03a 	or	r16,r5,r16
   22928:	802090ba 	slli	r16,r16,2
   2292c:	008000b4 	movhi	r2,2
   22930:	108a5404 	addi	r2,r2,10576
   22934:	80a1883a 	add	r16,r16,r2
   22938:	81000017 	ldw	r4,0(r16)
   2293c:	9d46f03a 	xor	r3,r19,r21
   22940:	180f883a 	mov	r7,r3
   22944:	18803fcc 	andi	r2,r3,255
   22948:	a18dc83a 	sub	r6,r20,r6
   2294c:	2000683a 	jmp	r4
   22950:	00022b34 	movhi	zero,2220
   22954:	000229b8 	rdprs	zero,zero,2214
   22958:	00022b28 	cmpgeui	zero,zero,2220
   2295c:	000229a4 	muli	zero,zero,2214
   22960:	00022b28 	cmpgeui	zero,zero,2220
   22964:	00022b00 	call	22b0 <__alt_mem_onchip_memory2-0x1dd50>
   22968:	00022b28 	cmpgeui	zero,zero,2220
   2296c:	000229a4 	muli	zero,zero,2214
   22970:	000229b8 	rdprs	zero,zero,2214
   22974:	000229b8 	rdprs	zero,zero,2214
   22978:	00022b00 	call	22b0 <__alt_mem_onchip_memory2-0x1dd50>
   2297c:	000229a4 	muli	zero,zero,2214
   22980:	00022c14 	movui	zero,2224
   22984:	00022c14 	movui	zero,2224
   22988:	00022c14 	movui	zero,2224
   2298c:	00022bc8 	cmpgei	zero,zero,2223
   22990:	9000581e 	bne	r18,zero,22af4 <__divsf3+0x270>
   22994:	04000204 	movi	r16,8
   22998:	05c00084 	movi	r23,2
   2299c:	003fd306 	br	228ec <__alt_data_end+0xffff28ec>
   229a0:	0023883a 	mov	r17,zero
   229a4:	e02d883a 	mov	r22,fp
   229a8:	282f883a 	mov	r23,r5
   229ac:	00800084 	movi	r2,2
   229b0:	b8808f1e 	bne	r23,r2,22bf0 <__divsf3+0x36c>
   229b4:	b005883a 	mov	r2,r22
   229b8:	11c0004c 	andi	r7,r2,1
   229bc:	013fffc4 	movi	r4,-1
   229c0:	000d883a 	mov	r6,zero
   229c4:	21003fcc 	andi	r4,r4,255
   229c8:	200895fa 	slli	r4,r4,23
   229cc:	38803fcc 	andi	r2,r7,255
   229d0:	00c02034 	movhi	r3,128
   229d4:	100497fa 	slli	r2,r2,31
   229d8:	18ffffc4 	addi	r3,r3,-1
   229dc:	30c6703a 	and	r3,r6,r3
   229e0:	1906b03a 	or	r3,r3,r4
   229e4:	1884b03a 	or	r2,r3,r2
   229e8:	dfc00a17 	ldw	ra,40(sp)
   229ec:	df000917 	ldw	fp,36(sp)
   229f0:	ddc00817 	ldw	r23,32(sp)
   229f4:	dd800717 	ldw	r22,28(sp)
   229f8:	dd400617 	ldw	r21,24(sp)
   229fc:	dd000517 	ldw	r20,20(sp)
   22a00:	dcc00417 	ldw	r19,16(sp)
   22a04:	dc800317 	ldw	r18,12(sp)
   22a08:	dc400217 	ldw	r17,8(sp)
   22a0c:	dc000117 	ldw	r16,4(sp)
   22a10:	dec00b04 	addi	sp,sp,44
   22a14:	f800283a 	ret
   22a18:	90002b1e 	bne	r18,zero,22ac8 <__divsf3+0x244>
   22a1c:	04000104 	movi	r16,4
   22a20:	05c00044 	movi	r23,1
   22a24:	003fb106 	br	228ec <__alt_data_end+0xffff28ec>
   22a28:	8800251e 	bne	r17,zero,22ac0 <__divsf3+0x23c>
   22a2c:	01400084 	movi	r5,2
   22a30:	00000206 	br	22a3c <__divsf3+0x1b8>
   22a34:	88001a1e 	bne	r17,zero,22aa0 <__divsf3+0x21c>
   22a38:	01400044 	movi	r5,1
   22a3c:	8160b03a 	or	r16,r16,r5
   22a40:	802090ba 	slli	r16,r16,2
   22a44:	00c000b4 	movhi	r3,2
   22a48:	18ca9804 	addi	r3,r3,10848
   22a4c:	80e1883a 	add	r16,r16,r3
   22a50:	80c00017 	ldw	r3,0(r16)
   22a54:	9d44f03a 	xor	r2,r19,r21
   22a58:	a18dc83a 	sub	r6,r20,r6
   22a5c:	1800683a 	jmp	r3
   22a60:	000229b8 	rdprs	zero,zero,2214
   22a64:	000229b8 	rdprs	zero,zero,2214
   22a68:	00022c04 	movi	zero,2224
   22a6c:	000229a0 	cmpeqi	zero,zero,2214
   22a70:	00022c04 	movi	zero,2224
   22a74:	00022b00 	call	22b0 <__alt_mem_onchip_memory2-0x1dd50>
   22a78:	00022c04 	movi	zero,2224
   22a7c:	000229a0 	cmpeqi	zero,zero,2214
   22a80:	000229b8 	rdprs	zero,zero,2214
   22a84:	000229b8 	rdprs	zero,zero,2214
   22a88:	00022b00 	call	22b0 <__alt_mem_onchip_memory2-0x1dd50>
   22a8c:	000229a0 	cmpeqi	zero,zero,2214
   22a90:	00022c14 	movui	zero,2224
   22a94:	00022c14 	movui	zero,2224
   22a98:	00022c14 	movui	zero,2224
   22a9c:	00022c2c 	andhi	zero,zero,2224
   22aa0:	8809883a 	mov	r4,r17
   22aa4:	0022e580 	call	22e58 <__clzsi2>
   22aa8:	10fffec4 	addi	r3,r2,-5
   22aac:	10801d84 	addi	r2,r2,118
   22ab0:	88e2983a 	sll	r17,r17,r3
   22ab4:	008dc83a 	sub	r6,zero,r2
   22ab8:	000b883a 	mov	r5,zero
   22abc:	003f9906 	br	22924 <__alt_data_end+0xffff2924>
   22ac0:	014000c4 	movi	r5,3
   22ac4:	003f9706 	br	22924 <__alt_data_end+0xffff2924>
   22ac8:	9009883a 	mov	r4,r18
   22acc:	d9400015 	stw	r5,0(sp)
   22ad0:	0022e580 	call	22e58 <__clzsi2>
   22ad4:	10fffec4 	addi	r3,r2,-5
   22ad8:	11801d84 	addi	r6,r2,118
   22adc:	90e4983a 	sll	r18,r18,r3
   22ae0:	01a9c83a 	sub	r20,zero,r6
   22ae4:	0021883a 	mov	r16,zero
   22ae8:	002f883a 	mov	r23,zero
   22aec:	d9400017 	ldw	r5,0(sp)
   22af0:	003f7e06 	br	228ec <__alt_data_end+0xffff28ec>
   22af4:	04000304 	movi	r16,12
   22af8:	05c000c4 	movi	r23,3
   22afc:	003f7b06 	br	228ec <__alt_data_end+0xffff28ec>
   22b00:	01802034 	movhi	r6,128
   22b04:	000f883a 	mov	r7,zero
   22b08:	31bfffc4 	addi	r6,r6,-1
   22b0c:	013fffc4 	movi	r4,-1
   22b10:	003fac06 	br	229c4 <__alt_data_end+0xffff29c4>
   22b14:	01400044 	movi	r5,1
   22b18:	2909c83a 	sub	r4,r5,r4
   22b1c:	00c006c4 	movi	r3,27
   22b20:	19004b0e 	bge	r3,r4,22c50 <__divsf3+0x3cc>
   22b24:	114e703a 	and	r7,r2,r5
   22b28:	0009883a 	mov	r4,zero
   22b2c:	000d883a 	mov	r6,zero
   22b30:	003fa406 	br	229c4 <__alt_data_end+0xffff29c4>
   22b34:	9006917a 	slli	r3,r18,5
   22b38:	8822917a 	slli	r17,r17,5
   22b3c:	1c40372e 	bgeu	r3,r17,22c1c <__divsf3+0x398>
   22b40:	31bfffc4 	addi	r6,r6,-1
   22b44:	010006c4 	movi	r4,27
   22b48:	000b883a 	mov	r5,zero
   22b4c:	180f883a 	mov	r7,r3
   22b50:	294b883a 	add	r5,r5,r5
   22b54:	18c7883a 	add	r3,r3,r3
   22b58:	38000116 	blt	r7,zero,22b60 <__divsf3+0x2dc>
   22b5c:	1c400236 	bltu	r3,r17,22b68 <__divsf3+0x2e4>
   22b60:	1c47c83a 	sub	r3,r3,r17
   22b64:	29400054 	ori	r5,r5,1
   22b68:	213fffc4 	addi	r4,r4,-1
   22b6c:	203ff71e 	bne	r4,zero,22b4c <__alt_data_end+0xffff2b4c>
   22b70:	1806c03a 	cmpne	r3,r3,zero
   22b74:	1962b03a 	or	r17,r3,r5
   22b78:	31001fc4 	addi	r4,r6,127
   22b7c:	013fe50e 	bge	zero,r4,22b14 <__alt_data_end+0xffff2b14>
   22b80:	88c001cc 	andi	r3,r17,7
   22b84:	18000426 	beq	r3,zero,22b98 <__divsf3+0x314>
   22b88:	88c003cc 	andi	r3,r17,15
   22b8c:	01400104 	movi	r5,4
   22b90:	19400126 	beq	r3,r5,22b98 <__divsf3+0x314>
   22b94:	8963883a 	add	r17,r17,r5
   22b98:	88c2002c 	andhi	r3,r17,2048
   22b9c:	18000426 	beq	r3,zero,22bb0 <__divsf3+0x32c>
   22ba0:	00fe0034 	movhi	r3,63488
   22ba4:	18ffffc4 	addi	r3,r3,-1
   22ba8:	31002004 	addi	r4,r6,128
   22bac:	88e2703a 	and	r17,r17,r3
   22bb0:	00c03f84 	movi	r3,254
   22bb4:	193f8016 	blt	r3,r4,229b8 <__alt_data_end+0xffff29b8>
   22bb8:	880c91ba 	slli	r6,r17,6
   22bbc:	11c0004c 	andi	r7,r2,1
   22bc0:	300cd27a 	srli	r6,r6,9
   22bc4:	003f7f06 	br	229c4 <__alt_data_end+0xffff29c4>
   22bc8:	9080102c 	andhi	r2,r18,64
   22bcc:	10000226 	beq	r2,zero,22bd8 <__divsf3+0x354>
   22bd0:	8880102c 	andhi	r2,r17,64
   22bd4:	10001826 	beq	r2,zero,22c38 <__divsf3+0x3b4>
   22bd8:	00802034 	movhi	r2,128
   22bdc:	91801034 	orhi	r6,r18,64
   22be0:	10bfffc4 	addi	r2,r2,-1
   22be4:	980f883a 	mov	r7,r19
   22be8:	308c703a 	and	r6,r6,r2
   22bec:	003fc706 	br	22b0c <__alt_data_end+0xffff2b0c>
   22bf0:	008000c4 	movi	r2,3
   22bf4:	b8802d26 	beq	r23,r2,22cac <__divsf3+0x428>
   22bf8:	00c00044 	movi	r3,1
   22bfc:	b005883a 	mov	r2,r22
   22c00:	b8ffdd1e 	bne	r23,r3,22b78 <__alt_data_end+0xffff2b78>
   22c04:	11c0004c 	andi	r7,r2,1
   22c08:	0009883a 	mov	r4,zero
   22c0c:	000d883a 	mov	r6,zero
   22c10:	003f6c06 	br	229c4 <__alt_data_end+0xffff29c4>
   22c14:	9023883a 	mov	r17,r18
   22c18:	003f6406 	br	229ac <__alt_data_end+0xffff29ac>
   22c1c:	1c47c83a 	sub	r3,r3,r17
   22c20:	01000684 	movi	r4,26
   22c24:	01400044 	movi	r5,1
   22c28:	003fc806 	br	22b4c <__alt_data_end+0xffff2b4c>
   22c2c:	9080102c 	andhi	r2,r18,64
   22c30:	103fe926 	beq	r2,zero,22bd8 <__alt_data_end+0xffff2bd8>
   22c34:	0023883a 	mov	r17,zero
   22c38:	00802034 	movhi	r2,128
   22c3c:	89801034 	orhi	r6,r17,64
   22c40:	10bfffc4 	addi	r2,r2,-1
   22c44:	a80f883a 	mov	r7,r21
   22c48:	308c703a 	and	r6,r6,r2
   22c4c:	003faf06 	br	22b0c <__alt_data_end+0xffff2b0c>
   22c50:	01c00804 	movi	r7,32
   22c54:	390fc83a 	sub	r7,r7,r4
   22c58:	89ce983a 	sll	r7,r17,r7
   22c5c:	890ad83a 	srl	r5,r17,r4
   22c60:	380ec03a 	cmpne	r7,r7,zero
   22c64:	29cab03a 	or	r5,r5,r7
   22c68:	28c001cc 	andi	r3,r5,7
   22c6c:	18000426 	beq	r3,zero,22c80 <__divsf3+0x3fc>
   22c70:	28c003cc 	andi	r3,r5,15
   22c74:	01000104 	movi	r4,4
   22c78:	19000126 	beq	r3,r4,22c80 <__divsf3+0x3fc>
   22c7c:	290b883a 	add	r5,r5,r4
   22c80:	28c1002c 	andhi	r3,r5,1024
   22c84:	18000426 	beq	r3,zero,22c98 <__divsf3+0x414>
   22c88:	11c0004c 	andi	r7,r2,1
   22c8c:	01000044 	movi	r4,1
   22c90:	000d883a 	mov	r6,zero
   22c94:	003f4b06 	br	229c4 <__alt_data_end+0xffff29c4>
   22c98:	280a91ba 	slli	r5,r5,6
   22c9c:	11c0004c 	andi	r7,r2,1
   22ca0:	0009883a 	mov	r4,zero
   22ca4:	280cd27a 	srli	r6,r5,9
   22ca8:	003f4606 	br	229c4 <__alt_data_end+0xffff29c4>
   22cac:	00802034 	movhi	r2,128
   22cb0:	89801034 	orhi	r6,r17,64
   22cb4:	10bfffc4 	addi	r2,r2,-1
   22cb8:	b00f883a 	mov	r7,r22
   22cbc:	308c703a 	and	r6,r6,r2
   22cc0:	003f9206 	br	22b0c <__alt_data_end+0xffff2b0c>

00022cc4 <__fixsfsi>:
   22cc4:	200ad5fa 	srli	r5,r4,23
   22cc8:	00c02034 	movhi	r3,128
   22ccc:	18ffffc4 	addi	r3,r3,-1
   22cd0:	29403fcc 	andi	r5,r5,255
   22cd4:	00801f84 	movi	r2,126
   22cd8:	1906703a 	and	r3,r3,r4
   22cdc:	2008d7fa 	srli	r4,r4,31
   22ce0:	11400e0e 	bge	r2,r5,22d1c <__fixsfsi+0x58>
   22ce4:	00802744 	movi	r2,157
   22ce8:	11400816 	blt	r2,r5,22d0c <__fixsfsi+0x48>
   22cec:	00802544 	movi	r2,149
   22cf0:	18c02034 	orhi	r3,r3,128
   22cf4:	11400b0e 	bge	r2,r5,22d24 <__fixsfsi+0x60>
   22cf8:	28bfda84 	addi	r2,r5,-150
   22cfc:	1884983a 	sll	r2,r3,r2
   22d00:	20000726 	beq	r4,zero,22d20 <__fixsfsi+0x5c>
   22d04:	0085c83a 	sub	r2,zero,r2
   22d08:	f800283a 	ret
   22d0c:	00a00034 	movhi	r2,32768
   22d10:	10bfffc4 	addi	r2,r2,-1
   22d14:	2085883a 	add	r2,r4,r2
   22d18:	f800283a 	ret
   22d1c:	0005883a 	mov	r2,zero
   22d20:	f800283a 	ret
   22d24:	00802584 	movi	r2,150
   22d28:	1145c83a 	sub	r2,r2,r5
   22d2c:	1884d83a 	srl	r2,r3,r2
   22d30:	003ff306 	br	22d00 <__alt_data_end+0xffff2d00>

00022d34 <__floatsisf>:
   22d34:	defffd04 	addi	sp,sp,-12
   22d38:	dfc00215 	stw	ra,8(sp)
   22d3c:	dc400115 	stw	r17,4(sp)
   22d40:	dc000015 	stw	r16,0(sp)
   22d44:	20003526 	beq	r4,zero,22e1c <__floatsisf+0xe8>
   22d48:	2021883a 	mov	r16,r4
   22d4c:	2022d7fa 	srli	r17,r4,31
   22d50:	20003616 	blt	r4,zero,22e2c <__floatsisf+0xf8>
   22d54:	8009883a 	mov	r4,r16
   22d58:	0022e580 	call	22e58 <__clzsi2>
   22d5c:	00c02784 	movi	r3,158
   22d60:	1887c83a 	sub	r3,r3,r2
   22d64:	01002584 	movi	r4,150
   22d68:	20c01416 	blt	r4,r3,22dbc <__floatsisf+0x88>
   22d6c:	20c9c83a 	sub	r4,r4,r3
   22d70:	8120983a 	sll	r16,r16,r4
   22d74:	00802034 	movhi	r2,128
   22d78:	10bfffc4 	addi	r2,r2,-1
   22d7c:	8809883a 	mov	r4,r17
   22d80:	80a0703a 	and	r16,r16,r2
   22d84:	18803fcc 	andi	r2,r3,255
   22d88:	100695fa 	slli	r3,r2,23
   22d8c:	20803fcc 	andi	r2,r4,255
   22d90:	100897fa 	slli	r4,r2,31
   22d94:	00802034 	movhi	r2,128
   22d98:	10bfffc4 	addi	r2,r2,-1
   22d9c:	8084703a 	and	r2,r16,r2
   22da0:	10c4b03a 	or	r2,r2,r3
   22da4:	1104b03a 	or	r2,r2,r4
   22da8:	dfc00217 	ldw	ra,8(sp)
   22dac:	dc400117 	ldw	r17,4(sp)
   22db0:	dc000017 	ldw	r16,0(sp)
   22db4:	dec00304 	addi	sp,sp,12
   22db8:	f800283a 	ret
   22dbc:	01002644 	movi	r4,153
   22dc0:	20c01c16 	blt	r4,r3,22e34 <__floatsisf+0x100>
   22dc4:	20c9c83a 	sub	r4,r4,r3
   22dc8:	8120983a 	sll	r16,r16,r4
   22dcc:	013f0034 	movhi	r4,64512
   22dd0:	213fffc4 	addi	r4,r4,-1
   22dd4:	814001cc 	andi	r5,r16,7
   22dd8:	8108703a 	and	r4,r16,r4
   22ddc:	28000426 	beq	r5,zero,22df0 <__floatsisf+0xbc>
   22de0:	840003cc 	andi	r16,r16,15
   22de4:	01400104 	movi	r5,4
   22de8:	81400126 	beq	r16,r5,22df0 <__floatsisf+0xbc>
   22dec:	2149883a 	add	r4,r4,r5
   22df0:	2141002c 	andhi	r5,r4,1024
   22df4:	28000526 	beq	r5,zero,22e0c <__floatsisf+0xd8>
   22df8:	00c027c4 	movi	r3,159
   22dfc:	1887c83a 	sub	r3,r3,r2
   22e00:	00bf0034 	movhi	r2,64512
   22e04:	10bfffc4 	addi	r2,r2,-1
   22e08:	2088703a 	and	r4,r4,r2
   22e0c:	202091ba 	slli	r16,r4,6
   22e10:	8809883a 	mov	r4,r17
   22e14:	8020d27a 	srli	r16,r16,9
   22e18:	003fda06 	br	22d84 <__alt_data_end+0xffff2d84>
   22e1c:	0009883a 	mov	r4,zero
   22e20:	0007883a 	mov	r3,zero
   22e24:	0021883a 	mov	r16,zero
   22e28:	003fd606 	br	22d84 <__alt_data_end+0xffff2d84>
   22e2c:	0121c83a 	sub	r16,zero,r4
   22e30:	003fc806 	br	22d54 <__alt_data_end+0xffff2d54>
   22e34:	01002e44 	movi	r4,185
   22e38:	20c9c83a 	sub	r4,r4,r3
   22e3c:	01400144 	movi	r5,5
   22e40:	8108983a 	sll	r4,r16,r4
   22e44:	288bc83a 	sub	r5,r5,r2
   22e48:	8160d83a 	srl	r16,r16,r5
   22e4c:	2008c03a 	cmpne	r4,r4,zero
   22e50:	8120b03a 	or	r16,r16,r4
   22e54:	003fdd06 	br	22dcc <__alt_data_end+0xffff2dcc>

00022e58 <__clzsi2>:
   22e58:	00bfffd4 	movui	r2,65535
   22e5c:	11000536 	bltu	r2,r4,22e74 <__clzsi2+0x1c>
   22e60:	00803fc4 	movi	r2,255
   22e64:	11000f36 	bltu	r2,r4,22ea4 <__clzsi2+0x4c>
   22e68:	00800804 	movi	r2,32
   22e6c:	0007883a 	mov	r3,zero
   22e70:	00000506 	br	22e88 <__clzsi2+0x30>
   22e74:	00804034 	movhi	r2,256
   22e78:	10bfffc4 	addi	r2,r2,-1
   22e7c:	11000c2e 	bgeu	r2,r4,22eb0 <__clzsi2+0x58>
   22e80:	00800204 	movi	r2,8
   22e84:	00c00604 	movi	r3,24
   22e88:	20c8d83a 	srl	r4,r4,r3
   22e8c:	00c000b4 	movhi	r3,2
   22e90:	18d5d504 	addi	r3,r3,22356
   22e94:	1909883a 	add	r4,r3,r4
   22e98:	20c00003 	ldbu	r3,0(r4)
   22e9c:	10c5c83a 	sub	r2,r2,r3
   22ea0:	f800283a 	ret
   22ea4:	00800604 	movi	r2,24
   22ea8:	00c00204 	movi	r3,8
   22eac:	003ff606 	br	22e88 <__alt_data_end+0xffff2e88>
   22eb0:	00800404 	movi	r2,16
   22eb4:	1007883a 	mov	r3,r2
   22eb8:	003ff306 	br	22e88 <__alt_data_end+0xffff2e88>

00022ebc <_printf_r>:
   22ebc:	defffd04 	addi	sp,sp,-12
   22ec0:	dfc00015 	stw	ra,0(sp)
   22ec4:	d9800115 	stw	r6,4(sp)
   22ec8:	d9c00215 	stw	r7,8(sp)
   22ecc:	20c00217 	ldw	r3,8(r4)
   22ed0:	018000b4 	movhi	r6,2
   22ed4:	318d6804 	addi	r6,r6,13728
   22ed8:	19800115 	stw	r6,4(r3)
   22edc:	280d883a 	mov	r6,r5
   22ee0:	21400217 	ldw	r5,8(r4)
   22ee4:	d9c00104 	addi	r7,sp,4
   22ee8:	00230600 	call	23060 <___vfprintf_internal_r>
   22eec:	dfc00017 	ldw	ra,0(sp)
   22ef0:	dec00304 	addi	sp,sp,12
   22ef4:	f800283a 	ret

00022ef8 <printf>:
   22ef8:	defffc04 	addi	sp,sp,-16
   22efc:	dfc00015 	stw	ra,0(sp)
   22f00:	d9400115 	stw	r5,4(sp)
   22f04:	d9800215 	stw	r6,8(sp)
   22f08:	d9c00315 	stw	r7,12(sp)
   22f0c:	008000b4 	movhi	r2,2
   22f10:	1098b504 	addi	r2,r2,25300
   22f14:	10800017 	ldw	r2,0(r2)
   22f18:	014000b4 	movhi	r5,2
   22f1c:	294d6804 	addi	r5,r5,13728
   22f20:	10c00217 	ldw	r3,8(r2)
   22f24:	d9800104 	addi	r6,sp,4
   22f28:	19400115 	stw	r5,4(r3)
   22f2c:	200b883a 	mov	r5,r4
   22f30:	11000217 	ldw	r4,8(r2)
   22f34:	00235840 	call	23584 <__vfprintf_internal>
   22f38:	dfc00017 	ldw	ra,0(sp)
   22f3c:	dec00404 	addi	sp,sp,16
   22f40:	f800283a 	ret

00022f44 <_puts_r>:
   22f44:	defffd04 	addi	sp,sp,-12
   22f48:	dc000015 	stw	r16,0(sp)
   22f4c:	2021883a 	mov	r16,r4
   22f50:	2809883a 	mov	r4,r5
   22f54:	dfc00215 	stw	ra,8(sp)
   22f58:	dc400115 	stw	r17,4(sp)
   22f5c:	2823883a 	mov	r17,r5
   22f60:	0022fd80 	call	22fd8 <strlen>
   22f64:	81400217 	ldw	r5,8(r16)
   22f68:	010000b4 	movhi	r4,2
   22f6c:	210d6804 	addi	r4,r4,13728
   22f70:	29000115 	stw	r4,4(r5)
   22f74:	100f883a 	mov	r7,r2
   22f78:	880d883a 	mov	r6,r17
   22f7c:	8009883a 	mov	r4,r16
   22f80:	00235a00 	call	235a0 <__sfvwrite_small_dev>
   22f84:	00ffffc4 	movi	r3,-1
   22f88:	10c00926 	beq	r2,r3,22fb0 <_puts_r+0x6c>
   22f8c:	81400217 	ldw	r5,8(r16)
   22f90:	018000b4 	movhi	r6,2
   22f94:	01c00044 	movi	r7,1
   22f98:	28800117 	ldw	r2,4(r5)
   22f9c:	31961504 	addi	r6,r6,22612
   22fa0:	8009883a 	mov	r4,r16
   22fa4:	103ee83a 	callr	r2
   22fa8:	10bfffe0 	cmpeqi	r2,r2,-1
   22fac:	0085c83a 	sub	r2,zero,r2
   22fb0:	dfc00217 	ldw	ra,8(sp)
   22fb4:	dc400117 	ldw	r17,4(sp)
   22fb8:	dc000017 	ldw	r16,0(sp)
   22fbc:	dec00304 	addi	sp,sp,12
   22fc0:	f800283a 	ret

00022fc4 <puts>:
   22fc4:	008000b4 	movhi	r2,2
   22fc8:	1098b504 	addi	r2,r2,25300
   22fcc:	200b883a 	mov	r5,r4
   22fd0:	11000017 	ldw	r4,0(r2)
   22fd4:	0022f441 	jmpi	22f44 <_puts_r>

00022fd8 <strlen>:
   22fd8:	2005883a 	mov	r2,r4
   22fdc:	10c00007 	ldb	r3,0(r2)
   22fe0:	18000226 	beq	r3,zero,22fec <strlen+0x14>
   22fe4:	10800044 	addi	r2,r2,1
   22fe8:	003ffc06 	br	22fdc <__alt_data_end+0xffff2fdc>
   22fec:	1105c83a 	sub	r2,r2,r4
   22ff0:	f800283a 	ret

00022ff4 <print_repeat>:
   22ff4:	defffb04 	addi	sp,sp,-20
   22ff8:	dc800315 	stw	r18,12(sp)
   22ffc:	dc400215 	stw	r17,8(sp)
   23000:	dc000115 	stw	r16,4(sp)
   23004:	dfc00415 	stw	ra,16(sp)
   23008:	2025883a 	mov	r18,r4
   2300c:	2823883a 	mov	r17,r5
   23010:	d9800005 	stb	r6,0(sp)
   23014:	3821883a 	mov	r16,r7
   23018:	04000a0e 	bge	zero,r16,23044 <print_repeat+0x50>
   2301c:	88800117 	ldw	r2,4(r17)
   23020:	01c00044 	movi	r7,1
   23024:	d80d883a 	mov	r6,sp
   23028:	880b883a 	mov	r5,r17
   2302c:	9009883a 	mov	r4,r18
   23030:	103ee83a 	callr	r2
   23034:	843fffc4 	addi	r16,r16,-1
   23038:	103ff726 	beq	r2,zero,23018 <__alt_data_end+0xffff3018>
   2303c:	00bfffc4 	movi	r2,-1
   23040:	00000106 	br	23048 <print_repeat+0x54>
   23044:	0005883a 	mov	r2,zero
   23048:	dfc00417 	ldw	ra,16(sp)
   2304c:	dc800317 	ldw	r18,12(sp)
   23050:	dc400217 	ldw	r17,8(sp)
   23054:	dc000117 	ldw	r16,4(sp)
   23058:	dec00504 	addi	sp,sp,20
   2305c:	f800283a 	ret

00023060 <___vfprintf_internal_r>:
   23060:	deffe504 	addi	sp,sp,-108
   23064:	d8c00804 	addi	r3,sp,32
   23068:	df001915 	stw	fp,100(sp)
   2306c:	ddc01815 	stw	r23,96(sp)
   23070:	dd801715 	stw	r22,92(sp)
   23074:	dd401615 	stw	r21,88(sp)
   23078:	dd001515 	stw	r20,84(sp)
   2307c:	dcc01415 	stw	r19,80(sp)
   23080:	dc801315 	stw	r18,76(sp)
   23084:	dc401215 	stw	r17,72(sp)
   23088:	dc001115 	stw	r16,68(sp)
   2308c:	dfc01a15 	stw	ra,104(sp)
   23090:	2027883a 	mov	r19,r4
   23094:	2839883a 	mov	fp,r5
   23098:	382d883a 	mov	r22,r7
   2309c:	d9800f15 	stw	r6,60(sp)
   230a0:	0021883a 	mov	r16,zero
   230a4:	d8000e15 	stw	zero,56(sp)
   230a8:	002f883a 	mov	r23,zero
   230ac:	002b883a 	mov	r21,zero
   230b0:	0025883a 	mov	r18,zero
   230b4:	0023883a 	mov	r17,zero
   230b8:	d8000c15 	stw	zero,48(sp)
   230bc:	d8000b15 	stw	zero,44(sp)
   230c0:	0029883a 	mov	r20,zero
   230c4:	d8c00915 	stw	r3,36(sp)
   230c8:	d8c00f17 	ldw	r3,60(sp)
   230cc:	19000003 	ldbu	r4,0(r3)
   230d0:	20803fcc 	andi	r2,r4,255
   230d4:	1080201c 	xori	r2,r2,128
   230d8:	10bfe004 	addi	r2,r2,-128
   230dc:	10011c26 	beq	r2,zero,23550 <___vfprintf_internal_r+0x4f0>
   230e0:	00c00044 	movi	r3,1
   230e4:	a0c01426 	beq	r20,r3,23138 <___vfprintf_internal_r+0xd8>
   230e8:	1d000216 	blt	r3,r20,230f4 <___vfprintf_internal_r+0x94>
   230ec:	a0000626 	beq	r20,zero,23108 <___vfprintf_internal_r+0xa8>
   230f0:	00011306 	br	23540 <___vfprintf_internal_r+0x4e0>
   230f4:	01400084 	movi	r5,2
   230f8:	a1401d26 	beq	r20,r5,23170 <___vfprintf_internal_r+0x110>
   230fc:	014000c4 	movi	r5,3
   23100:	a1402926 	beq	r20,r5,231a8 <___vfprintf_internal_r+0x148>
   23104:	00010e06 	br	23540 <___vfprintf_internal_r+0x4e0>
   23108:	01400944 	movi	r5,37
   2310c:	1140fb26 	beq	r2,r5,234fc <___vfprintf_internal_r+0x49c>
   23110:	e0800117 	ldw	r2,4(fp)
   23114:	d9000005 	stb	r4,0(sp)
   23118:	01c00044 	movi	r7,1
   2311c:	d80d883a 	mov	r6,sp
   23120:	e00b883a 	mov	r5,fp
   23124:	9809883a 	mov	r4,r19
   23128:	103ee83a 	callr	r2
   2312c:	1000d61e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23130:	84000044 	addi	r16,r16,1
   23134:	00010206 	br	23540 <___vfprintf_internal_r+0x4e0>
   23138:	01400c04 	movi	r5,48
   2313c:	1140f826 	beq	r2,r5,23520 <___vfprintf_internal_r+0x4c0>
   23140:	01400944 	movi	r5,37
   23144:	11400a1e 	bne	r2,r5,23170 <___vfprintf_internal_r+0x110>
   23148:	d8800005 	stb	r2,0(sp)
   2314c:	e0800117 	ldw	r2,4(fp)
   23150:	a00f883a 	mov	r7,r20
   23154:	d80d883a 	mov	r6,sp
   23158:	e00b883a 	mov	r5,fp
   2315c:	9809883a 	mov	r4,r19
   23160:	103ee83a 	callr	r2
   23164:	1000c81e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23168:	84000044 	addi	r16,r16,1
   2316c:	0000f306 	br	2353c <___vfprintf_internal_r+0x4dc>
   23170:	217ff404 	addi	r5,r4,-48
   23174:	29403fcc 	andi	r5,r5,255
   23178:	00c00244 	movi	r3,9
   2317c:	19400736 	bltu	r3,r5,2319c <___vfprintf_internal_r+0x13c>
   23180:	00bfffc4 	movi	r2,-1
   23184:	88800226 	beq	r17,r2,23190 <___vfprintf_internal_r+0x130>
   23188:	8c4002a4 	muli	r17,r17,10
   2318c:	00000106 	br	23194 <___vfprintf_internal_r+0x134>
   23190:	0023883a 	mov	r17,zero
   23194:	2c63883a 	add	r17,r5,r17
   23198:	0000e206 	br	23524 <___vfprintf_internal_r+0x4c4>
   2319c:	01400b84 	movi	r5,46
   231a0:	1140e426 	beq	r2,r5,23534 <___vfprintf_internal_r+0x4d4>
   231a4:	05000084 	movi	r20,2
   231a8:	213ff404 	addi	r4,r4,-48
   231ac:	21003fcc 	andi	r4,r4,255
   231b0:	00c00244 	movi	r3,9
   231b4:	19000736 	bltu	r3,r4,231d4 <___vfprintf_internal_r+0x174>
   231b8:	00bfffc4 	movi	r2,-1
   231bc:	90800226 	beq	r18,r2,231c8 <___vfprintf_internal_r+0x168>
   231c0:	948002a4 	muli	r18,r18,10
   231c4:	00000106 	br	231cc <___vfprintf_internal_r+0x16c>
   231c8:	0025883a 	mov	r18,zero
   231cc:	24a5883a 	add	r18,r4,r18
   231d0:	0000db06 	br	23540 <___vfprintf_internal_r+0x4e0>
   231d4:	00c01b04 	movi	r3,108
   231d8:	10c0d426 	beq	r2,r3,2352c <___vfprintf_internal_r+0x4cc>
   231dc:	013fffc4 	movi	r4,-1
   231e0:	91000226 	beq	r18,r4,231ec <___vfprintf_internal_r+0x18c>
   231e4:	d8000b15 	stw	zero,44(sp)
   231e8:	00000106 	br	231f0 <___vfprintf_internal_r+0x190>
   231ec:	04800044 	movi	r18,1
   231f0:	01001a44 	movi	r4,105
   231f4:	11001626 	beq	r2,r4,23250 <___vfprintf_internal_r+0x1f0>
   231f8:	20800916 	blt	r4,r2,23220 <___vfprintf_internal_r+0x1c0>
   231fc:	010018c4 	movi	r4,99
   23200:	11008a26 	beq	r2,r4,2342c <___vfprintf_internal_r+0x3cc>
   23204:	01001904 	movi	r4,100
   23208:	11001126 	beq	r2,r4,23250 <___vfprintf_internal_r+0x1f0>
   2320c:	01001604 	movi	r4,88
   23210:	1100ca1e 	bne	r2,r4,2353c <___vfprintf_internal_r+0x4dc>
   23214:	00c00044 	movi	r3,1
   23218:	d8c00e15 	stw	r3,56(sp)
   2321c:	00001406 	br	23270 <___vfprintf_internal_r+0x210>
   23220:	01001cc4 	movi	r4,115
   23224:	11009a26 	beq	r2,r4,23490 <___vfprintf_internal_r+0x430>
   23228:	20800416 	blt	r4,r2,2323c <___vfprintf_internal_r+0x1dc>
   2322c:	01001bc4 	movi	r4,111
   23230:	1100c21e 	bne	r2,r4,2353c <___vfprintf_internal_r+0x4dc>
   23234:	05400204 	movi	r21,8
   23238:	00000e06 	br	23274 <___vfprintf_internal_r+0x214>
   2323c:	01001d44 	movi	r4,117
   23240:	11000c26 	beq	r2,r4,23274 <___vfprintf_internal_r+0x214>
   23244:	01001e04 	movi	r4,120
   23248:	11000926 	beq	r2,r4,23270 <___vfprintf_internal_r+0x210>
   2324c:	0000bb06 	br	2353c <___vfprintf_internal_r+0x4dc>
   23250:	b5000104 	addi	r20,r22,4
   23254:	b8000726 	beq	r23,zero,23274 <___vfprintf_internal_r+0x214>
   23258:	dd000d15 	stw	r20,52(sp)
   2325c:	b5800017 	ldw	r22,0(r22)
   23260:	b000080e 	bge	r22,zero,23284 <___vfprintf_internal_r+0x224>
   23264:	05adc83a 	sub	r22,zero,r22
   23268:	02800044 	movi	r10,1
   2326c:	00000606 	br	23288 <___vfprintf_internal_r+0x228>
   23270:	05400404 	movi	r21,16
   23274:	b0c00104 	addi	r3,r22,4
   23278:	d8c00d15 	stw	r3,52(sp)
   2327c:	b5800017 	ldw	r22,0(r22)
   23280:	002f883a 	mov	r23,zero
   23284:	0015883a 	mov	r10,zero
   23288:	d829883a 	mov	r20,sp
   2328c:	b0001426 	beq	r22,zero,232e0 <___vfprintf_internal_r+0x280>
   23290:	b009883a 	mov	r4,r22
   23294:	a80b883a 	mov	r5,r21
   23298:	da801015 	stw	r10,64(sp)
   2329c:	00227c80 	call	227c8 <__udivsi3>
   232a0:	1549383a 	mul	r4,r2,r21
   232a4:	00c00244 	movi	r3,9
   232a8:	da801017 	ldw	r10,64(sp)
   232ac:	b12dc83a 	sub	r22,r22,r4
   232b0:	1d800216 	blt	r3,r22,232bc <___vfprintf_internal_r+0x25c>
   232b4:	b5800c04 	addi	r22,r22,48
   232b8:	00000506 	br	232d0 <___vfprintf_internal_r+0x270>
   232bc:	d8c00e17 	ldw	r3,56(sp)
   232c0:	18000226 	beq	r3,zero,232cc <___vfprintf_internal_r+0x26c>
   232c4:	b5800dc4 	addi	r22,r22,55
   232c8:	00000106 	br	232d0 <___vfprintf_internal_r+0x270>
   232cc:	b58015c4 	addi	r22,r22,87
   232d0:	a5800005 	stb	r22,0(r20)
   232d4:	a5000044 	addi	r20,r20,1
   232d8:	102d883a 	mov	r22,r2
   232dc:	003feb06 	br	2328c <__alt_data_end+0xffff328c>
   232e0:	a6c7c83a 	sub	r3,r20,sp
   232e4:	d8c00a15 	stw	r3,40(sp)
   232e8:	90c5c83a 	sub	r2,r18,r3
   232ec:	00800a0e 	bge	zero,r2,23318 <___vfprintf_internal_r+0x2b8>
   232f0:	a085883a 	add	r2,r20,r2
   232f4:	01400c04 	movi	r5,48
   232f8:	d8c00917 	ldw	r3,36(sp)
   232fc:	a009883a 	mov	r4,r20
   23300:	a0c0032e 	bgeu	r20,r3,23310 <___vfprintf_internal_r+0x2b0>
   23304:	a5000044 	addi	r20,r20,1
   23308:	21400005 	stb	r5,0(r4)
   2330c:	a0bffa1e 	bne	r20,r2,232f8 <__alt_data_end+0xffff32f8>
   23310:	a6c7c83a 	sub	r3,r20,sp
   23314:	d8c00a15 	stw	r3,40(sp)
   23318:	d8c00a17 	ldw	r3,40(sp)
   2331c:	50d3883a 	add	r9,r10,r3
   23320:	d8c00b17 	ldw	r3,44(sp)
   23324:	8a6dc83a 	sub	r22,r17,r9
   23328:	18001726 	beq	r3,zero,23388 <___vfprintf_internal_r+0x328>
   2332c:	50000a26 	beq	r10,zero,23358 <___vfprintf_internal_r+0x2f8>
   23330:	00800b44 	movi	r2,45
   23334:	d8800805 	stb	r2,32(sp)
   23338:	e0800117 	ldw	r2,4(fp)
   2333c:	01c00044 	movi	r7,1
   23340:	d9800804 	addi	r6,sp,32
   23344:	e00b883a 	mov	r5,fp
   23348:	9809883a 	mov	r4,r19
   2334c:	103ee83a 	callr	r2
   23350:	10004d1e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23354:	84000044 	addi	r16,r16,1
   23358:	0580070e 	bge	zero,r22,23378 <___vfprintf_internal_r+0x318>
   2335c:	b00f883a 	mov	r7,r22
   23360:	01800c04 	movi	r6,48
   23364:	e00b883a 	mov	r5,fp
   23368:	9809883a 	mov	r4,r19
   2336c:	0022ff40 	call	22ff4 <print_repeat>
   23370:	1000451e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23374:	85a1883a 	add	r16,r16,r22
   23378:	d8c00a17 	ldw	r3,40(sp)
   2337c:	a013883a 	mov	r9,r20
   23380:	1d2dc83a 	sub	r22,r3,r20
   23384:	00002206 	br	23410 <___vfprintf_internal_r+0x3b0>
   23388:	0580090e 	bge	zero,r22,233b0 <___vfprintf_internal_r+0x350>
   2338c:	b00f883a 	mov	r7,r22
   23390:	01800804 	movi	r6,32
   23394:	e00b883a 	mov	r5,fp
   23398:	9809883a 	mov	r4,r19
   2339c:	da801015 	stw	r10,64(sp)
   233a0:	0022ff40 	call	22ff4 <print_repeat>
   233a4:	da801017 	ldw	r10,64(sp)
   233a8:	1000371e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   233ac:	85a1883a 	add	r16,r16,r22
   233b0:	503ff126 	beq	r10,zero,23378 <__alt_data_end+0xffff3378>
   233b4:	00800b44 	movi	r2,45
   233b8:	d8800805 	stb	r2,32(sp)
   233bc:	e0800117 	ldw	r2,4(fp)
   233c0:	01c00044 	movi	r7,1
   233c4:	d9800804 	addi	r6,sp,32
   233c8:	e00b883a 	mov	r5,fp
   233cc:	9809883a 	mov	r4,r19
   233d0:	103ee83a 	callr	r2
   233d4:	10002c1e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   233d8:	84000044 	addi	r16,r16,1
   233dc:	003fe606 	br	23378 <__alt_data_end+0xffff3378>
   233e0:	4a7fffc4 	addi	r9,r9,-1
   233e4:	48800003 	ldbu	r2,0(r9)
   233e8:	01c00044 	movi	r7,1
   233ec:	d9800804 	addi	r6,sp,32
   233f0:	d8800805 	stb	r2,32(sp)
   233f4:	e0800117 	ldw	r2,4(fp)
   233f8:	e00b883a 	mov	r5,fp
   233fc:	da401015 	stw	r9,64(sp)
   23400:	9809883a 	mov	r4,r19
   23404:	103ee83a 	callr	r2
   23408:	da401017 	ldw	r9,64(sp)
   2340c:	10001e1e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23410:	8245c83a 	sub	r2,r16,r9
   23414:	4d89883a 	add	r4,r9,r22
   23418:	a085883a 	add	r2,r20,r2
   2341c:	013ff016 	blt	zero,r4,233e0 <__alt_data_end+0xffff33e0>
   23420:	1021883a 	mov	r16,r2
   23424:	dd800d17 	ldw	r22,52(sp)
   23428:	00004406 	br	2353c <___vfprintf_internal_r+0x4dc>
   2342c:	00800044 	movi	r2,1
   23430:	1440080e 	bge	r2,r17,23454 <___vfprintf_internal_r+0x3f4>
   23434:	8d3fffc4 	addi	r20,r17,-1
   23438:	a00f883a 	mov	r7,r20
   2343c:	01800804 	movi	r6,32
   23440:	e00b883a 	mov	r5,fp
   23444:	9809883a 	mov	r4,r19
   23448:	0022ff40 	call	22ff4 <print_repeat>
   2344c:	10000e1e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   23450:	8521883a 	add	r16,r16,r20
   23454:	b0800017 	ldw	r2,0(r22)
   23458:	01c00044 	movi	r7,1
   2345c:	d80d883a 	mov	r6,sp
   23460:	d8800005 	stb	r2,0(sp)
   23464:	e0800117 	ldw	r2,4(fp)
   23468:	e00b883a 	mov	r5,fp
   2346c:	9809883a 	mov	r4,r19
   23470:	b5000104 	addi	r20,r22,4
   23474:	103ee83a 	callr	r2
   23478:	1000031e 	bne	r2,zero,23488 <___vfprintf_internal_r+0x428>
   2347c:	84000044 	addi	r16,r16,1
   23480:	a02d883a 	mov	r22,r20
   23484:	00002d06 	br	2353c <___vfprintf_internal_r+0x4dc>
   23488:	00bfffc4 	movi	r2,-1
   2348c:	00003106 	br	23554 <___vfprintf_internal_r+0x4f4>
   23490:	b5000017 	ldw	r20,0(r22)
   23494:	b0c00104 	addi	r3,r22,4
   23498:	d8c00a15 	stw	r3,40(sp)
   2349c:	a009883a 	mov	r4,r20
   234a0:	0022fd80 	call	22fd8 <strlen>
   234a4:	8893c83a 	sub	r9,r17,r2
   234a8:	102d883a 	mov	r22,r2
   234ac:	0240090e 	bge	zero,r9,234d4 <___vfprintf_internal_r+0x474>
   234b0:	480f883a 	mov	r7,r9
   234b4:	01800804 	movi	r6,32
   234b8:	e00b883a 	mov	r5,fp
   234bc:	9809883a 	mov	r4,r19
   234c0:	da401015 	stw	r9,64(sp)
   234c4:	0022ff40 	call	22ff4 <print_repeat>
   234c8:	da401017 	ldw	r9,64(sp)
   234cc:	103fee1e 	bne	r2,zero,23488 <__alt_data_end+0xffff3488>
   234d0:	8261883a 	add	r16,r16,r9
   234d4:	e0800117 	ldw	r2,4(fp)
   234d8:	b00f883a 	mov	r7,r22
   234dc:	a00d883a 	mov	r6,r20
   234e0:	e00b883a 	mov	r5,fp
   234e4:	9809883a 	mov	r4,r19
   234e8:	103ee83a 	callr	r2
   234ec:	103fe61e 	bne	r2,zero,23488 <__alt_data_end+0xffff3488>
   234f0:	85a1883a 	add	r16,r16,r22
   234f4:	dd800a17 	ldw	r22,40(sp)
   234f8:	00001006 	br	2353c <___vfprintf_internal_r+0x4dc>
   234fc:	05c00044 	movi	r23,1
   23500:	04bfffc4 	movi	r18,-1
   23504:	d8000e15 	stw	zero,56(sp)
   23508:	05400284 	movi	r21,10
   2350c:	9023883a 	mov	r17,r18
   23510:	d8000c15 	stw	zero,48(sp)
   23514:	d8000b15 	stw	zero,44(sp)
   23518:	b829883a 	mov	r20,r23
   2351c:	00000806 	br	23540 <___vfprintf_internal_r+0x4e0>
   23520:	dd000b15 	stw	r20,44(sp)
   23524:	05000084 	movi	r20,2
   23528:	00000506 	br	23540 <___vfprintf_internal_r+0x4e0>
   2352c:	00c00044 	movi	r3,1
   23530:	d8c00c15 	stw	r3,48(sp)
   23534:	050000c4 	movi	r20,3
   23538:	00000106 	br	23540 <___vfprintf_internal_r+0x4e0>
   2353c:	0029883a 	mov	r20,zero
   23540:	d8c00f17 	ldw	r3,60(sp)
   23544:	18c00044 	addi	r3,r3,1
   23548:	d8c00f15 	stw	r3,60(sp)
   2354c:	003ede06 	br	230c8 <__alt_data_end+0xffff30c8>
   23550:	8005883a 	mov	r2,r16
   23554:	dfc01a17 	ldw	ra,104(sp)
   23558:	df001917 	ldw	fp,100(sp)
   2355c:	ddc01817 	ldw	r23,96(sp)
   23560:	dd801717 	ldw	r22,92(sp)
   23564:	dd401617 	ldw	r21,88(sp)
   23568:	dd001517 	ldw	r20,84(sp)
   2356c:	dcc01417 	ldw	r19,80(sp)
   23570:	dc801317 	ldw	r18,76(sp)
   23574:	dc401217 	ldw	r17,72(sp)
   23578:	dc001117 	ldw	r16,68(sp)
   2357c:	dec01b04 	addi	sp,sp,108
   23580:	f800283a 	ret

00023584 <__vfprintf_internal>:
   23584:	008000b4 	movhi	r2,2
   23588:	1098b504 	addi	r2,r2,25300
   2358c:	300f883a 	mov	r7,r6
   23590:	280d883a 	mov	r6,r5
   23594:	200b883a 	mov	r5,r4
   23598:	11000017 	ldw	r4,0(r2)
   2359c:	00230601 	jmpi	23060 <___vfprintf_internal_r>

000235a0 <__sfvwrite_small_dev>:
   235a0:	2880000b 	ldhu	r2,0(r5)
   235a4:	1080020c 	andi	r2,r2,8
   235a8:	10002126 	beq	r2,zero,23630 <__sfvwrite_small_dev+0x90>
   235ac:	2880008f 	ldh	r2,2(r5)
   235b0:	defffa04 	addi	sp,sp,-24
   235b4:	dc000015 	stw	r16,0(sp)
   235b8:	dfc00515 	stw	ra,20(sp)
   235bc:	dd000415 	stw	r20,16(sp)
   235c0:	dcc00315 	stw	r19,12(sp)
   235c4:	dc800215 	stw	r18,8(sp)
   235c8:	dc400115 	stw	r17,4(sp)
   235cc:	2821883a 	mov	r16,r5
   235d0:	10001216 	blt	r2,zero,2361c <__sfvwrite_small_dev+0x7c>
   235d4:	2027883a 	mov	r19,r4
   235d8:	3025883a 	mov	r18,r6
   235dc:	3823883a 	mov	r17,r7
   235e0:	05010004 	movi	r20,1024
   235e4:	04400b0e 	bge	zero,r17,23614 <__sfvwrite_small_dev+0x74>
   235e8:	880f883a 	mov	r7,r17
   235ec:	a440010e 	bge	r20,r17,235f4 <__sfvwrite_small_dev+0x54>
   235f0:	01c10004 	movi	r7,1024
   235f4:	8140008f 	ldh	r5,2(r16)
   235f8:	900d883a 	mov	r6,r18
   235fc:	9809883a 	mov	r4,r19
   23600:	00236580 	call	23658 <_write_r>
   23604:	0080050e 	bge	zero,r2,2361c <__sfvwrite_small_dev+0x7c>
   23608:	88a3c83a 	sub	r17,r17,r2
   2360c:	90a5883a 	add	r18,r18,r2
   23610:	003ff406 	br	235e4 <__alt_data_end+0xffff35e4>
   23614:	0005883a 	mov	r2,zero
   23618:	00000706 	br	23638 <__sfvwrite_small_dev+0x98>
   2361c:	8080000b 	ldhu	r2,0(r16)
   23620:	10801014 	ori	r2,r2,64
   23624:	8080000d 	sth	r2,0(r16)
   23628:	00bfffc4 	movi	r2,-1
   2362c:	00000206 	br	23638 <__sfvwrite_small_dev+0x98>
   23630:	00bfffc4 	movi	r2,-1
   23634:	f800283a 	ret
   23638:	dfc00517 	ldw	ra,20(sp)
   2363c:	dd000417 	ldw	r20,16(sp)
   23640:	dcc00317 	ldw	r19,12(sp)
   23644:	dc800217 	ldw	r18,8(sp)
   23648:	dc400117 	ldw	r17,4(sp)
   2364c:	dc000017 	ldw	r16,0(sp)
   23650:	dec00604 	addi	sp,sp,24
   23654:	f800283a 	ret

00023658 <_write_r>:
   23658:	defffd04 	addi	sp,sp,-12
   2365c:	dc000015 	stw	r16,0(sp)
   23660:	040000b4 	movhi	r16,2
   23664:	dc400115 	stw	r17,4(sp)
   23668:	841b5d04 	addi	r16,r16,28020
   2366c:	2023883a 	mov	r17,r4
   23670:	2809883a 	mov	r4,r5
   23674:	300b883a 	mov	r5,r6
   23678:	380d883a 	mov	r6,r7
   2367c:	dfc00215 	stw	ra,8(sp)
   23680:	80000015 	stw	zero,0(r16)
   23684:	00238840 	call	23884 <write>
   23688:	00ffffc4 	movi	r3,-1
   2368c:	10c0031e 	bne	r2,r3,2369c <_write_r+0x44>
   23690:	80c00017 	ldw	r3,0(r16)
   23694:	18000126 	beq	r3,zero,2369c <_write_r+0x44>
   23698:	88c00015 	stw	r3,0(r17)
   2369c:	dfc00217 	ldw	ra,8(sp)
   236a0:	dc400117 	ldw	r17,4(sp)
   236a4:	dc000017 	ldw	r16,0(sp)
   236a8:	dec00304 	addi	sp,sp,12
   236ac:	f800283a 	ret

000236b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   236b0:	defffc04 	addi	sp,sp,-16
   236b4:	df000315 	stw	fp,12(sp)
   236b8:	df000304 	addi	fp,sp,12
   236bc:	e13ffd15 	stw	r4,-12(fp)
   236c0:	e17ffe15 	stw	r5,-8(fp)
   236c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   236c8:	e0fffe17 	ldw	r3,-8(fp)
   236cc:	e0bffd17 	ldw	r2,-12(fp)
   236d0:	18800c26 	beq	r3,r2,23704 <alt_load_section+0x54>
  {
    while( to != end )
   236d4:	00000806 	br	236f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   236d8:	e0bffe17 	ldw	r2,-8(fp)
   236dc:	10c00104 	addi	r3,r2,4
   236e0:	e0fffe15 	stw	r3,-8(fp)
   236e4:	e0fffd17 	ldw	r3,-12(fp)
   236e8:	19000104 	addi	r4,r3,4
   236ec:	e13ffd15 	stw	r4,-12(fp)
   236f0:	18c00017 	ldw	r3,0(r3)
   236f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   236f8:	e0fffe17 	ldw	r3,-8(fp)
   236fc:	e0bfff17 	ldw	r2,-4(fp)
   23700:	18bff51e 	bne	r3,r2,236d8 <__alt_data_end+0xffff36d8>
    {
      *to++ = *from++;
    }
  }
}
   23704:	0001883a 	nop
   23708:	e037883a 	mov	sp,fp
   2370c:	df000017 	ldw	fp,0(sp)
   23710:	dec00104 	addi	sp,sp,4
   23714:	f800283a 	ret

00023718 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23718:	defffe04 	addi	sp,sp,-8
   2371c:	dfc00115 	stw	ra,4(sp)
   23720:	df000015 	stw	fp,0(sp)
   23724:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23728:	018000b4 	movhi	r6,2
   2372c:	3198bf04 	addi	r6,r6,25340
   23730:	014000b4 	movhi	r5,2
   23734:	29562104 	addi	r5,r5,22660
   23738:	010000b4 	movhi	r4,2
   2373c:	2118bf04 	addi	r4,r4,25340
   23740:	00236b00 	call	236b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23744:	018000b4 	movhi	r6,2
   23748:	31809104 	addi	r6,r6,580
   2374c:	014000b4 	movhi	r5,2
   23750:	29400804 	addi	r5,r5,32
   23754:	010000b4 	movhi	r4,2
   23758:	21000804 	addi	r4,r4,32
   2375c:	00236b00 	call	236b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23760:	018000b4 	movhi	r6,2
   23764:	31962104 	addi	r6,r6,22660
   23768:	014000b4 	movhi	r5,2
   2376c:	29545704 	addi	r5,r5,20828
   23770:	010000b4 	movhi	r4,2
   23774:	21145704 	addi	r4,r4,20828
   23778:	00236b00 	call	236b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2377c:	0023fcc0 	call	23fcc <alt_dcache_flush_all>
  alt_icache_flush_all();
   23780:	00241e00 	call	241e0 <alt_icache_flush_all>
}
   23784:	0001883a 	nop
   23788:	e037883a 	mov	sp,fp
   2378c:	dfc00117 	ldw	ra,4(sp)
   23790:	df000017 	ldw	fp,0(sp)
   23794:	dec00204 	addi	sp,sp,8
   23798:	f800283a 	ret

0002379c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2379c:	defffd04 	addi	sp,sp,-12
   237a0:	dfc00215 	stw	ra,8(sp)
   237a4:	df000115 	stw	fp,4(sp)
   237a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   237ac:	0009883a 	mov	r4,zero
   237b0:	00239b00 	call	239b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   237b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   237b8:	00239e80 	call	239e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   237bc:	018000b4 	movhi	r6,2
   237c0:	31961604 	addi	r6,r6,22616
   237c4:	014000b4 	movhi	r5,2
   237c8:	29561604 	addi	r5,r5,22616
   237cc:	010000b4 	movhi	r4,2
   237d0:	21161604 	addi	r4,r4,22616
   237d4:	00245780 	call	24578 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   237d8:	00241200 	call	24120 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   237dc:	010000b4 	movhi	r4,2
   237e0:	21106004 	addi	r4,r4,16768
   237e4:	0024ddc0 	call	24ddc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   237e8:	d0a2aa17 	ldw	r2,-30040(gp)
   237ec:	d0e2ab17 	ldw	r3,-30036(gp)
   237f0:	d122ac17 	ldw	r4,-30032(gp)
   237f4:	200d883a 	mov	r6,r4
   237f8:	180b883a 	mov	r5,r3
   237fc:	1009883a 	mov	r4,r2
   23800:	0021de00 	call	21de0 <main>
   23804:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23808:	01000044 	movi	r4,1
   2380c:	0023efc0 	call	23efc <close>
  exit (result);
   23810:	e13fff17 	ldw	r4,-4(fp)
   23814:	0024df00 	call	24df0 <exit>

00023818 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23818:	defffd04 	addi	sp,sp,-12
   2381c:	dfc00215 	stw	ra,8(sp)
   23820:	df000115 	stw	fp,4(sp)
   23824:	df000104 	addi	fp,sp,4
   23828:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2382c:	e13fff17 	ldw	r4,-4(fp)
   23830:	0023d680 	call	23d68 <alt_busy_sleep>
}
   23834:	e037883a 	mov	sp,fp
   23838:	dfc00117 	ldw	ra,4(sp)
   2383c:	df000017 	ldw	fp,0(sp)
   23840:	dec00204 	addi	sp,sp,8
   23844:	f800283a 	ret

00023848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23848:	defffe04 	addi	sp,sp,-8
   2384c:	dfc00115 	stw	ra,4(sp)
   23850:	df000015 	stw	fp,0(sp)
   23854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23858:	d0a00717 	ldw	r2,-32740(gp)
   2385c:	10000326 	beq	r2,zero,2386c <alt_get_errno+0x24>
   23860:	d0a00717 	ldw	r2,-32740(gp)
   23864:	103ee83a 	callr	r2
   23868:	00000106 	br	23870 <alt_get_errno+0x28>
   2386c:	d0a2a904 	addi	r2,gp,-30044
}
   23870:	e037883a 	mov	sp,fp
   23874:	dfc00117 	ldw	ra,4(sp)
   23878:	df000017 	ldw	fp,0(sp)
   2387c:	dec00204 	addi	sp,sp,8
   23880:	f800283a 	ret

00023884 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23884:	defff904 	addi	sp,sp,-28
   23888:	dfc00615 	stw	ra,24(sp)
   2388c:	df000515 	stw	fp,20(sp)
   23890:	df000504 	addi	fp,sp,20
   23894:	e13ffd15 	stw	r4,-12(fp)
   23898:	e17ffe15 	stw	r5,-8(fp)
   2389c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238a0:	e0bffd17 	ldw	r2,-12(fp)
   238a4:	10000616 	blt	r2,zero,238c0 <write+0x3c>
   238a8:	e0bffd17 	ldw	r2,-12(fp)
   238ac:	10c00324 	muli	r3,r2,12
   238b0:	008000b4 	movhi	r2,2
   238b4:	10985404 	addi	r2,r2,24912
   238b8:	1885883a 	add	r2,r3,r2
   238bc:	00000106 	br	238c4 <write+0x40>
   238c0:	0005883a 	mov	r2,zero
   238c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   238c8:	e0bffb17 	ldw	r2,-20(fp)
   238cc:	10002126 	beq	r2,zero,23954 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   238d0:	e0bffb17 	ldw	r2,-20(fp)
   238d4:	10800217 	ldw	r2,8(r2)
   238d8:	108000cc 	andi	r2,r2,3
   238dc:	10001826 	beq	r2,zero,23940 <write+0xbc>
   238e0:	e0bffb17 	ldw	r2,-20(fp)
   238e4:	10800017 	ldw	r2,0(r2)
   238e8:	10800617 	ldw	r2,24(r2)
   238ec:	10001426 	beq	r2,zero,23940 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   238f0:	e0bffb17 	ldw	r2,-20(fp)
   238f4:	10800017 	ldw	r2,0(r2)
   238f8:	10800617 	ldw	r2,24(r2)
   238fc:	e0ffff17 	ldw	r3,-4(fp)
   23900:	180d883a 	mov	r6,r3
   23904:	e17ffe17 	ldw	r5,-8(fp)
   23908:	e13ffb17 	ldw	r4,-20(fp)
   2390c:	103ee83a 	callr	r2
   23910:	e0bffc15 	stw	r2,-16(fp)
   23914:	e0bffc17 	ldw	r2,-16(fp)
   23918:	1000070e 	bge	r2,zero,23938 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2391c:	00238480 	call	23848 <alt_get_errno>
   23920:	1007883a 	mov	r3,r2
   23924:	e0bffc17 	ldw	r2,-16(fp)
   23928:	0085c83a 	sub	r2,zero,r2
   2392c:	18800015 	stw	r2,0(r3)
        return -1;
   23930:	00bfffc4 	movi	r2,-1
   23934:	00000c06 	br	23968 <write+0xe4>
      }
      return rval;
   23938:	e0bffc17 	ldw	r2,-16(fp)
   2393c:	00000a06 	br	23968 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23940:	00238480 	call	23848 <alt_get_errno>
   23944:	1007883a 	mov	r3,r2
   23948:	00800344 	movi	r2,13
   2394c:	18800015 	stw	r2,0(r3)
   23950:	00000406 	br	23964 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23954:	00238480 	call	23848 <alt_get_errno>
   23958:	1007883a 	mov	r3,r2
   2395c:	00801444 	movi	r2,81
   23960:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23964:	00bfffc4 	movi	r2,-1
}
   23968:	e037883a 	mov	sp,fp
   2396c:	dfc00117 	ldw	ra,4(sp)
   23970:	df000017 	ldw	fp,0(sp)
   23974:	dec00204 	addi	sp,sp,8
   23978:	f800283a 	ret

0002397c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2397c:	defffd04 	addi	sp,sp,-12
   23980:	dfc00215 	stw	ra,8(sp)
   23984:	df000115 	stw	fp,4(sp)
   23988:	df000104 	addi	fp,sp,4
   2398c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23990:	d1600404 	addi	r5,gp,-32752
   23994:	e13fff17 	ldw	r4,-4(fp)
   23998:	002407c0 	call	2407c <alt_dev_llist_insert>
}
   2399c:	e037883a 	mov	sp,fp
   239a0:	dfc00117 	ldw	ra,4(sp)
   239a4:	df000017 	ldw	fp,0(sp)
   239a8:	dec00204 	addi	sp,sp,8
   239ac:	f800283a 	ret

000239b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   239b0:	defffd04 	addi	sp,sp,-12
   239b4:	dfc00215 	stw	ra,8(sp)
   239b8:	df000115 	stw	fp,4(sp)
   239bc:	df000104 	addi	fp,sp,4
   239c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   239c4:	0024a500 	call	24a50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   239c8:	00800044 	movi	r2,1
   239cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   239d0:	0001883a 	nop
   239d4:	e037883a 	mov	sp,fp
   239d8:	dfc00117 	ldw	ra,4(sp)
   239dc:	df000017 	ldw	fp,0(sp)
   239e0:	dec00204 	addi	sp,sp,8
   239e4:	f800283a 	ret

000239e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   239e8:	defffe04 	addi	sp,sp,-8
   239ec:	dfc00115 	stw	ra,4(sp)
   239f0:	df000015 	stw	fp,0(sp)
   239f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   239f8:	01c0fa04 	movi	r7,1000
   239fc:	000d883a 	mov	r6,zero
   23a00:	000b883a 	mov	r5,zero
   23a04:	01002004 	movi	r4,128
   23a08:	0023cec0 	call	23cec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23a0c:	010000b4 	movhi	r4,2
   23a10:	21183f04 	addi	r4,r4,24828
   23a14:	002397c0 	call	2397c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23a18:	0001883a 	nop
}
   23a1c:	0001883a 	nop
   23a20:	e037883a 	mov	sp,fp
   23a24:	dfc00117 	ldw	ra,4(sp)
   23a28:	df000017 	ldw	fp,0(sp)
   23a2c:	dec00204 	addi	sp,sp,8
   23a30:	f800283a 	ret

00023a34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23a34:	defffa04 	addi	sp,sp,-24
   23a38:	dfc00515 	stw	ra,20(sp)
   23a3c:	df000415 	stw	fp,16(sp)
   23a40:	df000404 	addi	fp,sp,16
   23a44:	e13ffd15 	stw	r4,-12(fp)
   23a48:	e17ffe15 	stw	r5,-8(fp)
   23a4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23a50:	e0bffd17 	ldw	r2,-12(fp)
   23a54:	10800017 	ldw	r2,0(r2)
   23a58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23a5c:	e0bffc17 	ldw	r2,-16(fp)
   23a60:	10c00a04 	addi	r3,r2,40
   23a64:	e0bffd17 	ldw	r2,-12(fp)
   23a68:	10800217 	ldw	r2,8(r2)
   23a6c:	100f883a 	mov	r7,r2
   23a70:	e1bfff17 	ldw	r6,-4(fp)
   23a74:	e17ffe17 	ldw	r5,-8(fp)
   23a78:	1809883a 	mov	r4,r3
   23a7c:	0023af40 	call	23af4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23a80:	e037883a 	mov	sp,fp
   23a84:	dfc00117 	ldw	ra,4(sp)
   23a88:	df000017 	ldw	fp,0(sp)
   23a8c:	dec00204 	addi	sp,sp,8
   23a90:	f800283a 	ret

00023a94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23a94:	defffa04 	addi	sp,sp,-24
   23a98:	dfc00515 	stw	ra,20(sp)
   23a9c:	df000415 	stw	fp,16(sp)
   23aa0:	df000404 	addi	fp,sp,16
   23aa4:	e13ffd15 	stw	r4,-12(fp)
   23aa8:	e17ffe15 	stw	r5,-8(fp)
   23aac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23ab0:	e0bffd17 	ldw	r2,-12(fp)
   23ab4:	10800017 	ldw	r2,0(r2)
   23ab8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23abc:	e0bffc17 	ldw	r2,-16(fp)
   23ac0:	10c00a04 	addi	r3,r2,40
   23ac4:	e0bffd17 	ldw	r2,-12(fp)
   23ac8:	10800217 	ldw	r2,8(r2)
   23acc:	100f883a 	mov	r7,r2
   23ad0:	e1bfff17 	ldw	r6,-4(fp)
   23ad4:	e17ffe17 	ldw	r5,-8(fp)
   23ad8:	1809883a 	mov	r4,r3
   23adc:	0023be00 	call	23be0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23ae0:	e037883a 	mov	sp,fp
   23ae4:	dfc00117 	ldw	ra,4(sp)
   23ae8:	df000017 	ldw	fp,0(sp)
   23aec:	dec00204 	addi	sp,sp,8
   23af0:	f800283a 	ret

00023af4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23af4:	defff704 	addi	sp,sp,-36
   23af8:	df000815 	stw	fp,32(sp)
   23afc:	df000804 	addi	fp,sp,32
   23b00:	e13ffc15 	stw	r4,-16(fp)
   23b04:	e17ffd15 	stw	r5,-12(fp)
   23b08:	e1bffe15 	stw	r6,-8(fp)
   23b0c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23b10:	e0bffc17 	ldw	r2,-16(fp)
   23b14:	10800017 	ldw	r2,0(r2)
   23b18:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23b1c:	e0bffd17 	ldw	r2,-12(fp)
   23b20:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23b24:	e0bffe17 	ldw	r2,-8(fp)
   23b28:	e0fffd17 	ldw	r3,-12(fp)
   23b2c:	1885883a 	add	r2,r3,r2
   23b30:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23b34:	00001206 	br	23b80 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23b38:	e0bff917 	ldw	r2,-28(fp)
   23b3c:	10800037 	ldwio	r2,0(r2)
   23b40:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23b44:	e0bffb17 	ldw	r2,-20(fp)
   23b48:	10a0000c 	andi	r2,r2,32768
   23b4c:	10000626 	beq	r2,zero,23b68 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23b50:	e0bff817 	ldw	r2,-32(fp)
   23b54:	10c00044 	addi	r3,r2,1
   23b58:	e0fff815 	stw	r3,-32(fp)
   23b5c:	e0fffb17 	ldw	r3,-20(fp)
   23b60:	10c00005 	stb	r3,0(r2)
   23b64:	00000606 	br	23b80 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   23b68:	e0fff817 	ldw	r3,-32(fp)
   23b6c:	e0bffd17 	ldw	r2,-12(fp)
   23b70:	1880071e 	bne	r3,r2,23b90 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   23b74:	e0bfff17 	ldw	r2,-4(fp)
   23b78:	1090000c 	andi	r2,r2,16384
   23b7c:	1000061e 	bne	r2,zero,23b98 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   23b80:	e0fff817 	ldw	r3,-32(fp)
   23b84:	e0bffa17 	ldw	r2,-24(fp)
   23b88:	18bfeb36 	bltu	r3,r2,23b38 <__alt_data_end+0xffff3b38>
   23b8c:	00000306 	br	23b9c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   23b90:	0001883a 	nop
   23b94:	00000106 	br	23b9c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   23b98:	0001883a 	nop
    
  }

  if (ptr != buffer)
   23b9c:	e0fff817 	ldw	r3,-32(fp)
   23ba0:	e0bffd17 	ldw	r2,-12(fp)
   23ba4:	18800426 	beq	r3,r2,23bb8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   23ba8:	e0fff817 	ldw	r3,-32(fp)
   23bac:	e0bffd17 	ldw	r2,-12(fp)
   23bb0:	1885c83a 	sub	r2,r3,r2
   23bb4:	00000606 	br	23bd0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   23bb8:	e0bfff17 	ldw	r2,-4(fp)
   23bbc:	1090000c 	andi	r2,r2,16384
   23bc0:	10000226 	beq	r2,zero,23bcc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   23bc4:	00bffd44 	movi	r2,-11
   23bc8:	00000106 	br	23bd0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   23bcc:	00bffec4 	movi	r2,-5
}
   23bd0:	e037883a 	mov	sp,fp
   23bd4:	df000017 	ldw	fp,0(sp)
   23bd8:	dec00104 	addi	sp,sp,4
   23bdc:	f800283a 	ret

00023be0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23be0:	defff904 	addi	sp,sp,-28
   23be4:	df000615 	stw	fp,24(sp)
   23be8:	df000604 	addi	fp,sp,24
   23bec:	e13ffc15 	stw	r4,-16(fp)
   23bf0:	e17ffd15 	stw	r5,-12(fp)
   23bf4:	e1bffe15 	stw	r6,-8(fp)
   23bf8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23bfc:	e0bffc17 	ldw	r2,-16(fp)
   23c00:	10800017 	ldw	r2,0(r2)
   23c04:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   23c08:	e0bffe17 	ldw	r2,-8(fp)
   23c0c:	e0fffd17 	ldw	r3,-12(fp)
   23c10:	1885883a 	add	r2,r3,r2
   23c14:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   23c18:	00000e06 	br	23c54 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   23c1c:	e0bffa17 	ldw	r2,-24(fp)
   23c20:	10800104 	addi	r2,r2,4
   23c24:	10800037 	ldwio	r2,0(r2)
   23c28:	10bfffec 	andhi	r2,r2,65535
   23c2c:	10000926 	beq	r2,zero,23c54 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   23c30:	e0fffa17 	ldw	r3,-24(fp)
   23c34:	e0bffd17 	ldw	r2,-12(fp)
   23c38:	11000044 	addi	r4,r2,1
   23c3c:	e13ffd15 	stw	r4,-12(fp)
   23c40:	10800003 	ldbu	r2,0(r2)
   23c44:	10803fcc 	andi	r2,r2,255
   23c48:	1080201c 	xori	r2,r2,128
   23c4c:	10bfe004 	addi	r2,r2,-128
   23c50:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   23c54:	e0fffd17 	ldw	r3,-12(fp)
   23c58:	e0bffb17 	ldw	r2,-20(fp)
   23c5c:	18bfef36 	bltu	r3,r2,23c1c <__alt_data_end+0xffff3c1c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   23c60:	e0bffe17 	ldw	r2,-8(fp)
}
   23c64:	e037883a 	mov	sp,fp
   23c68:	df000017 	ldw	fp,0(sp)
   23c6c:	dec00104 	addi	sp,sp,4
   23c70:	f800283a 	ret

00023c74 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   23c74:	defffa04 	addi	sp,sp,-24
   23c78:	dfc00515 	stw	ra,20(sp)
   23c7c:	df000415 	stw	fp,16(sp)
   23c80:	df000404 	addi	fp,sp,16
   23c84:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   23c88:	0007883a 	mov	r3,zero
   23c8c:	e0bfff17 	ldw	r2,-4(fp)
   23c90:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   23c94:	e0bfff17 	ldw	r2,-4(fp)
   23c98:	10800104 	addi	r2,r2,4
   23c9c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ca0:	0005303a 	rdctl	r2,status
   23ca4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23ca8:	e0fffd17 	ldw	r3,-12(fp)
   23cac:	00bfff84 	movi	r2,-2
   23cb0:	1884703a 	and	r2,r3,r2
   23cb4:	1001703a 	wrctl	status,r2
  
  return context;
   23cb8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   23cbc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   23cc0:	00249480 	call	24948 <alt_tick>
   23cc4:	e0bffc17 	ldw	r2,-16(fp)
   23cc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23ccc:	e0bffe17 	ldw	r2,-8(fp)
   23cd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   23cd4:	0001883a 	nop
   23cd8:	e037883a 	mov	sp,fp
   23cdc:	dfc00117 	ldw	ra,4(sp)
   23ce0:	df000017 	ldw	fp,0(sp)
   23ce4:	dec00204 	addi	sp,sp,8
   23ce8:	f800283a 	ret

00023cec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   23cec:	defff804 	addi	sp,sp,-32
   23cf0:	dfc00715 	stw	ra,28(sp)
   23cf4:	df000615 	stw	fp,24(sp)
   23cf8:	df000604 	addi	fp,sp,24
   23cfc:	e13ffc15 	stw	r4,-16(fp)
   23d00:	e17ffd15 	stw	r5,-12(fp)
   23d04:	e1bffe15 	stw	r6,-8(fp)
   23d08:	e1ffff15 	stw	r7,-4(fp)
   23d0c:	e0bfff17 	ldw	r2,-4(fp)
   23d10:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   23d14:	d0a2ae17 	ldw	r2,-30024(gp)
   23d18:	1000021e 	bne	r2,zero,23d24 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   23d1c:	e0bffb17 	ldw	r2,-20(fp)
   23d20:	d0a2ae15 	stw	r2,-30024(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   23d24:	e0bffc17 	ldw	r2,-16(fp)
   23d28:	10800104 	addi	r2,r2,4
   23d2c:	00c001c4 	movi	r3,7
   23d30:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   23d34:	d8000015 	stw	zero,0(sp)
   23d38:	e1fffc17 	ldw	r7,-16(fp)
   23d3c:	018000b4 	movhi	r6,2
   23d40:	318f1d04 	addi	r6,r6,15476
   23d44:	e17ffe17 	ldw	r5,-8(fp)
   23d48:	e13ffd17 	ldw	r4,-12(fp)
   23d4c:	00242140 	call	24214 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   23d50:	0001883a 	nop
   23d54:	e037883a 	mov	sp,fp
   23d58:	dfc00117 	ldw	ra,4(sp)
   23d5c:	df000017 	ldw	fp,0(sp)
   23d60:	dec00204 	addi	sp,sp,8
   23d64:	f800283a 	ret

00023d68 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   23d68:	defffa04 	addi	sp,sp,-24
   23d6c:	dfc00515 	stw	ra,20(sp)
   23d70:	df000415 	stw	fp,16(sp)
   23d74:	df000404 	addi	fp,sp,16
   23d78:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   23d7c:	008000c4 	movi	r2,3
   23d80:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   23d84:	e0fffd17 	ldw	r3,-12(fp)
   23d88:	008003f4 	movhi	r2,15
   23d8c:	10909004 	addi	r2,r2,16960
   23d90:	1885383a 	mul	r2,r3,r2
   23d94:	100b883a 	mov	r5,r2
   23d98:	0100bef4 	movhi	r4,763
   23d9c:	213c2004 	addi	r4,r4,-3968
   23da0:	00227c80 	call	227c8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   23da4:	100b883a 	mov	r5,r2
   23da8:	01200034 	movhi	r4,32768
   23dac:	213fffc4 	addi	r4,r4,-1
   23db0:	00227c80 	call	227c8 <__udivsi3>
   23db4:	100b883a 	mov	r5,r2
   23db8:	e13fff17 	ldw	r4,-4(fp)
   23dbc:	00227c80 	call	227c8 <__udivsi3>
   23dc0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   23dc4:	e0bffe17 	ldw	r2,-8(fp)
   23dc8:	10002a26 	beq	r2,zero,23e74 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   23dcc:	e03ffc15 	stw	zero,-16(fp)
   23dd0:	00001706 	br	23e30 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   23dd4:	00a00034 	movhi	r2,32768
   23dd8:	10bfffc4 	addi	r2,r2,-1
   23ddc:	10bfffc4 	addi	r2,r2,-1
   23de0:	103ffe1e 	bne	r2,zero,23ddc <__alt_data_end+0xffff3ddc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   23de4:	e0fffd17 	ldw	r3,-12(fp)
   23de8:	008003f4 	movhi	r2,15
   23dec:	10909004 	addi	r2,r2,16960
   23df0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   23df4:	100b883a 	mov	r5,r2
   23df8:	0100bef4 	movhi	r4,763
   23dfc:	213c2004 	addi	r4,r4,-3968
   23e00:	00227c80 	call	227c8 <__udivsi3>
   23e04:	100b883a 	mov	r5,r2
   23e08:	01200034 	movhi	r4,32768
   23e0c:	213fffc4 	addi	r4,r4,-1
   23e10:	00227c80 	call	227c8 <__udivsi3>
   23e14:	1007883a 	mov	r3,r2
   23e18:	e0bfff17 	ldw	r2,-4(fp)
   23e1c:	10c5c83a 	sub	r2,r2,r3
   23e20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   23e24:	e0bffc17 	ldw	r2,-16(fp)
   23e28:	10800044 	addi	r2,r2,1
   23e2c:	e0bffc15 	stw	r2,-16(fp)
   23e30:	e0fffc17 	ldw	r3,-16(fp)
   23e34:	e0bffe17 	ldw	r2,-8(fp)
   23e38:	18bfe616 	blt	r3,r2,23dd4 <__alt_data_end+0xffff3dd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23e3c:	e0fffd17 	ldw	r3,-12(fp)
   23e40:	008003f4 	movhi	r2,15
   23e44:	10909004 	addi	r2,r2,16960
   23e48:	1885383a 	mul	r2,r3,r2
   23e4c:	100b883a 	mov	r5,r2
   23e50:	0100bef4 	movhi	r4,763
   23e54:	213c2004 	addi	r4,r4,-3968
   23e58:	00227c80 	call	227c8 <__udivsi3>
   23e5c:	1007883a 	mov	r3,r2
   23e60:	e0bfff17 	ldw	r2,-4(fp)
   23e64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23e68:	10bfffc4 	addi	r2,r2,-1
   23e6c:	103ffe1e 	bne	r2,zero,23e68 <__alt_data_end+0xffff3e68>
   23e70:	00000d06 	br	23ea8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   23e74:	e0fffd17 	ldw	r3,-12(fp)
   23e78:	008003f4 	movhi	r2,15
   23e7c:	10909004 	addi	r2,r2,16960
   23e80:	1885383a 	mul	r2,r3,r2
   23e84:	100b883a 	mov	r5,r2
   23e88:	0100bef4 	movhi	r4,763
   23e8c:	213c2004 	addi	r4,r4,-3968
   23e90:	00227c80 	call	227c8 <__udivsi3>
   23e94:	1007883a 	mov	r3,r2
   23e98:	e0bfff17 	ldw	r2,-4(fp)
   23e9c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   23ea0:	10bfffc4 	addi	r2,r2,-1
   23ea4:	00bffe16 	blt	zero,r2,23ea0 <__alt_data_end+0xffff3ea0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   23ea8:	0005883a 	mov	r2,zero
}
   23eac:	e037883a 	mov	sp,fp
   23eb0:	dfc00117 	ldw	ra,4(sp)
   23eb4:	df000017 	ldw	fp,0(sp)
   23eb8:	dec00204 	addi	sp,sp,8
   23ebc:	f800283a 	ret

00023ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23ec0:	defffe04 	addi	sp,sp,-8
   23ec4:	dfc00115 	stw	ra,4(sp)
   23ec8:	df000015 	stw	fp,0(sp)
   23ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23ed0:	d0a00717 	ldw	r2,-32740(gp)
   23ed4:	10000326 	beq	r2,zero,23ee4 <alt_get_errno+0x24>
   23ed8:	d0a00717 	ldw	r2,-32740(gp)
   23edc:	103ee83a 	callr	r2
   23ee0:	00000106 	br	23ee8 <alt_get_errno+0x28>
   23ee4:	d0a2a904 	addi	r2,gp,-30044
}
   23ee8:	e037883a 	mov	sp,fp
   23eec:	dfc00117 	ldw	ra,4(sp)
   23ef0:	df000017 	ldw	fp,0(sp)
   23ef4:	dec00204 	addi	sp,sp,8
   23ef8:	f800283a 	ret

00023efc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23efc:	defffb04 	addi	sp,sp,-20
   23f00:	dfc00415 	stw	ra,16(sp)
   23f04:	df000315 	stw	fp,12(sp)
   23f08:	df000304 	addi	fp,sp,12
   23f0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23f10:	e0bfff17 	ldw	r2,-4(fp)
   23f14:	10000616 	blt	r2,zero,23f30 <close+0x34>
   23f18:	e0bfff17 	ldw	r2,-4(fp)
   23f1c:	10c00324 	muli	r3,r2,12
   23f20:	008000b4 	movhi	r2,2
   23f24:	10985404 	addi	r2,r2,24912
   23f28:	1885883a 	add	r2,r3,r2
   23f2c:	00000106 	br	23f34 <close+0x38>
   23f30:	0005883a 	mov	r2,zero
   23f34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23f38:	e0bffd17 	ldw	r2,-12(fp)
   23f3c:	10001926 	beq	r2,zero,23fa4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23f40:	e0bffd17 	ldw	r2,-12(fp)
   23f44:	10800017 	ldw	r2,0(r2)
   23f48:	10800417 	ldw	r2,16(r2)
   23f4c:	10000626 	beq	r2,zero,23f68 <close+0x6c>
   23f50:	e0bffd17 	ldw	r2,-12(fp)
   23f54:	10800017 	ldw	r2,0(r2)
   23f58:	10800417 	ldw	r2,16(r2)
   23f5c:	e13ffd17 	ldw	r4,-12(fp)
   23f60:	103ee83a 	callr	r2
   23f64:	00000106 	br	23f6c <close+0x70>
   23f68:	0005883a 	mov	r2,zero
   23f6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23f70:	e13fff17 	ldw	r4,-4(fp)
   23f74:	00248480 	call	24848 <alt_release_fd>
    if (rval < 0)
   23f78:	e0bffe17 	ldw	r2,-8(fp)
   23f7c:	1000070e 	bge	r2,zero,23f9c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   23f80:	0023ec00 	call	23ec0 <alt_get_errno>
   23f84:	1007883a 	mov	r3,r2
   23f88:	e0bffe17 	ldw	r2,-8(fp)
   23f8c:	0085c83a 	sub	r2,zero,r2
   23f90:	18800015 	stw	r2,0(r3)
      return -1;
   23f94:	00bfffc4 	movi	r2,-1
   23f98:	00000706 	br	23fb8 <close+0xbc>
    }
    return 0;
   23f9c:	0005883a 	mov	r2,zero
   23fa0:	00000506 	br	23fb8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23fa4:	0023ec00 	call	23ec0 <alt_get_errno>
   23fa8:	1007883a 	mov	r3,r2
   23fac:	00801444 	movi	r2,81
   23fb0:	18800015 	stw	r2,0(r3)
    return -1;
   23fb4:	00bfffc4 	movi	r2,-1
  }
}
   23fb8:	e037883a 	mov	sp,fp
   23fbc:	dfc00117 	ldw	ra,4(sp)
   23fc0:	df000017 	ldw	fp,0(sp)
   23fc4:	dec00204 	addi	sp,sp,8
   23fc8:	f800283a 	ret

00023fcc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   23fcc:	defffe04 	addi	sp,sp,-8
   23fd0:	df000115 	stw	fp,4(sp)
   23fd4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   23fd8:	e03fff15 	stw	zero,-4(fp)
   23fdc:	00000506 	br	23ff4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   23fe0:	e0bfff17 	ldw	r2,-4(fp)
   23fe4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   23fe8:	e0bfff17 	ldw	r2,-4(fp)
   23fec:	10800804 	addi	r2,r2,32
   23ff0:	e0bfff15 	stw	r2,-4(fp)
   23ff4:	e0bfff17 	ldw	r2,-4(fp)
   23ff8:	10820030 	cmpltui	r2,r2,2048
   23ffc:	103ff81e 	bne	r2,zero,23fe0 <__alt_data_end+0xffff3fe0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24000:	0001883a 	nop
   24004:	e037883a 	mov	sp,fp
   24008:	df000017 	ldw	fp,0(sp)
   2400c:	dec00104 	addi	sp,sp,4
   24010:	f800283a 	ret

00024014 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   24014:	defffc04 	addi	sp,sp,-16
   24018:	df000315 	stw	fp,12(sp)
   2401c:	df000304 	addi	fp,sp,12
   24020:	e13ffd15 	stw	r4,-12(fp)
   24024:	e17ffe15 	stw	r5,-8(fp)
   24028:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2402c:	e0bfff17 	ldw	r2,-4(fp)
}
   24030:	e037883a 	mov	sp,fp
   24034:	df000017 	ldw	fp,0(sp)
   24038:	dec00104 	addi	sp,sp,4
   2403c:	f800283a 	ret

00024040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24040:	defffe04 	addi	sp,sp,-8
   24044:	dfc00115 	stw	ra,4(sp)
   24048:	df000015 	stw	fp,0(sp)
   2404c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24050:	d0a00717 	ldw	r2,-32740(gp)
   24054:	10000326 	beq	r2,zero,24064 <alt_get_errno+0x24>
   24058:	d0a00717 	ldw	r2,-32740(gp)
   2405c:	103ee83a 	callr	r2
   24060:	00000106 	br	24068 <alt_get_errno+0x28>
   24064:	d0a2a904 	addi	r2,gp,-30044
}
   24068:	e037883a 	mov	sp,fp
   2406c:	dfc00117 	ldw	ra,4(sp)
   24070:	df000017 	ldw	fp,0(sp)
   24074:	dec00204 	addi	sp,sp,8
   24078:	f800283a 	ret

0002407c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2407c:	defffa04 	addi	sp,sp,-24
   24080:	dfc00515 	stw	ra,20(sp)
   24084:	df000415 	stw	fp,16(sp)
   24088:	df000404 	addi	fp,sp,16
   2408c:	e13ffe15 	stw	r4,-8(fp)
   24090:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24094:	e0bffe17 	ldw	r2,-8(fp)
   24098:	10000326 	beq	r2,zero,240a8 <alt_dev_llist_insert+0x2c>
   2409c:	e0bffe17 	ldw	r2,-8(fp)
   240a0:	10800217 	ldw	r2,8(r2)
   240a4:	1000061e 	bne	r2,zero,240c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   240a8:	00240400 	call	24040 <alt_get_errno>
   240ac:	1007883a 	mov	r3,r2
   240b0:	00800584 	movi	r2,22
   240b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   240b8:	00bffa84 	movi	r2,-22
   240bc:	00001306 	br	2410c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   240c0:	e0bffe17 	ldw	r2,-8(fp)
   240c4:	e0ffff17 	ldw	r3,-4(fp)
   240c8:	e0fffc15 	stw	r3,-16(fp)
   240cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   240d0:	e0bffd17 	ldw	r2,-12(fp)
   240d4:	e0fffc17 	ldw	r3,-16(fp)
   240d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   240dc:	e0bffc17 	ldw	r2,-16(fp)
   240e0:	10c00017 	ldw	r3,0(r2)
   240e4:	e0bffd17 	ldw	r2,-12(fp)
   240e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   240ec:	e0bffc17 	ldw	r2,-16(fp)
   240f0:	10800017 	ldw	r2,0(r2)
   240f4:	e0fffd17 	ldw	r3,-12(fp)
   240f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   240fc:	e0bffc17 	ldw	r2,-16(fp)
   24100:	e0fffd17 	ldw	r3,-12(fp)
   24104:	10c00015 	stw	r3,0(r2)

  return 0;  
   24108:	0005883a 	mov	r2,zero
}
   2410c:	e037883a 	mov	sp,fp
   24110:	dfc00117 	ldw	ra,4(sp)
   24114:	df000017 	ldw	fp,0(sp)
   24118:	dec00204 	addi	sp,sp,8
   2411c:	f800283a 	ret

00024120 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24120:	defffd04 	addi	sp,sp,-12
   24124:	dfc00215 	stw	ra,8(sp)
   24128:	df000115 	stw	fp,4(sp)
   2412c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24130:	008000b4 	movhi	r2,2
   24134:	10945604 	addi	r2,r2,20824
   24138:	e0bfff15 	stw	r2,-4(fp)
   2413c:	00000606 	br	24158 <_do_ctors+0x38>
        (*ctor) (); 
   24140:	e0bfff17 	ldw	r2,-4(fp)
   24144:	10800017 	ldw	r2,0(r2)
   24148:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2414c:	e0bfff17 	ldw	r2,-4(fp)
   24150:	10bfff04 	addi	r2,r2,-4
   24154:	e0bfff15 	stw	r2,-4(fp)
   24158:	e0ffff17 	ldw	r3,-4(fp)
   2415c:	008000b4 	movhi	r2,2
   24160:	10945704 	addi	r2,r2,20828
   24164:	18bff62e 	bgeu	r3,r2,24140 <__alt_data_end+0xffff4140>
        (*ctor) (); 
}
   24168:	0001883a 	nop
   2416c:	e037883a 	mov	sp,fp
   24170:	dfc00117 	ldw	ra,4(sp)
   24174:	df000017 	ldw	fp,0(sp)
   24178:	dec00204 	addi	sp,sp,8
   2417c:	f800283a 	ret

00024180 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24180:	defffd04 	addi	sp,sp,-12
   24184:	dfc00215 	stw	ra,8(sp)
   24188:	df000115 	stw	fp,4(sp)
   2418c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24190:	008000b4 	movhi	r2,2
   24194:	10945604 	addi	r2,r2,20824
   24198:	e0bfff15 	stw	r2,-4(fp)
   2419c:	00000606 	br	241b8 <_do_dtors+0x38>
        (*dtor) (); 
   241a0:	e0bfff17 	ldw	r2,-4(fp)
   241a4:	10800017 	ldw	r2,0(r2)
   241a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   241ac:	e0bfff17 	ldw	r2,-4(fp)
   241b0:	10bfff04 	addi	r2,r2,-4
   241b4:	e0bfff15 	stw	r2,-4(fp)
   241b8:	e0ffff17 	ldw	r3,-4(fp)
   241bc:	008000b4 	movhi	r2,2
   241c0:	10945704 	addi	r2,r2,20828
   241c4:	18bff62e 	bgeu	r3,r2,241a0 <__alt_data_end+0xffff41a0>
        (*dtor) (); 
}
   241c8:	0001883a 	nop
   241cc:	e037883a 	mov	sp,fp
   241d0:	dfc00117 	ldw	ra,4(sp)
   241d4:	df000017 	ldw	fp,0(sp)
   241d8:	dec00204 	addi	sp,sp,8
   241dc:	f800283a 	ret

000241e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   241e0:	defffe04 	addi	sp,sp,-8
   241e4:	dfc00115 	stw	ra,4(sp)
   241e8:	df000015 	stw	fp,0(sp)
   241ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   241f0:	01440004 	movi	r5,4096
   241f4:	0009883a 	mov	r4,zero
   241f8:	0024cb00 	call	24cb0 <alt_icache_flush>
#endif
}
   241fc:	0001883a 	nop
   24200:	e037883a 	mov	sp,fp
   24204:	dfc00117 	ldw	ra,4(sp)
   24208:	df000017 	ldw	fp,0(sp)
   2420c:	dec00204 	addi	sp,sp,8
   24210:	f800283a 	ret

00024214 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24214:	defff904 	addi	sp,sp,-28
   24218:	dfc00615 	stw	ra,24(sp)
   2421c:	df000515 	stw	fp,20(sp)
   24220:	df000504 	addi	fp,sp,20
   24224:	e13ffc15 	stw	r4,-16(fp)
   24228:	e17ffd15 	stw	r5,-12(fp)
   2422c:	e1bffe15 	stw	r6,-8(fp)
   24230:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24234:	e0800217 	ldw	r2,8(fp)
   24238:	d8800015 	stw	r2,0(sp)
   2423c:	e1ffff17 	ldw	r7,-4(fp)
   24240:	e1bffe17 	ldw	r6,-8(fp)
   24244:	e17ffd17 	ldw	r5,-12(fp)
   24248:	e13ffc17 	ldw	r4,-16(fp)
   2424c:	00243c40 	call	243c4 <alt_iic_isr_register>
}  
   24250:	e037883a 	mov	sp,fp
   24254:	dfc00117 	ldw	ra,4(sp)
   24258:	df000017 	ldw	fp,0(sp)
   2425c:	dec00204 	addi	sp,sp,8
   24260:	f800283a 	ret

00024264 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24264:	defff904 	addi	sp,sp,-28
   24268:	df000615 	stw	fp,24(sp)
   2426c:	df000604 	addi	fp,sp,24
   24270:	e13ffe15 	stw	r4,-8(fp)
   24274:	e17fff15 	stw	r5,-4(fp)
   24278:	e0bfff17 	ldw	r2,-4(fp)
   2427c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24280:	0005303a 	rdctl	r2,status
   24284:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24288:	e0fffb17 	ldw	r3,-20(fp)
   2428c:	00bfff84 	movi	r2,-2
   24290:	1884703a 	and	r2,r3,r2
   24294:	1001703a 	wrctl	status,r2
  
  return context;
   24298:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2429c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   242a0:	00c00044 	movi	r3,1
   242a4:	e0bffa17 	ldw	r2,-24(fp)
   242a8:	1884983a 	sll	r2,r3,r2
   242ac:	1007883a 	mov	r3,r2
   242b0:	d0a2ad17 	ldw	r2,-30028(gp)
   242b4:	1884b03a 	or	r2,r3,r2
   242b8:	d0a2ad15 	stw	r2,-30028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   242bc:	d0a2ad17 	ldw	r2,-30028(gp)
   242c0:	100170fa 	wrctl	ienable,r2
   242c4:	e0bffc17 	ldw	r2,-16(fp)
   242c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242cc:	e0bffd17 	ldw	r2,-12(fp)
   242d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   242d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   242d8:	0001883a 	nop
}
   242dc:	e037883a 	mov	sp,fp
   242e0:	df000017 	ldw	fp,0(sp)
   242e4:	dec00104 	addi	sp,sp,4
   242e8:	f800283a 	ret

000242ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   242ec:	defff904 	addi	sp,sp,-28
   242f0:	df000615 	stw	fp,24(sp)
   242f4:	df000604 	addi	fp,sp,24
   242f8:	e13ffe15 	stw	r4,-8(fp)
   242fc:	e17fff15 	stw	r5,-4(fp)
   24300:	e0bfff17 	ldw	r2,-4(fp)
   24304:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24308:	0005303a 	rdctl	r2,status
   2430c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24310:	e0fffb17 	ldw	r3,-20(fp)
   24314:	00bfff84 	movi	r2,-2
   24318:	1884703a 	and	r2,r3,r2
   2431c:	1001703a 	wrctl	status,r2
  
  return context;
   24320:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24324:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   24328:	00c00044 	movi	r3,1
   2432c:	e0bffa17 	ldw	r2,-24(fp)
   24330:	1884983a 	sll	r2,r3,r2
   24334:	0084303a 	nor	r2,zero,r2
   24338:	1007883a 	mov	r3,r2
   2433c:	d0a2ad17 	ldw	r2,-30028(gp)
   24340:	1884703a 	and	r2,r3,r2
   24344:	d0a2ad15 	stw	r2,-30028(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24348:	d0a2ad17 	ldw	r2,-30028(gp)
   2434c:	100170fa 	wrctl	ienable,r2
   24350:	e0bffc17 	ldw	r2,-16(fp)
   24354:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24358:	e0bffd17 	ldw	r2,-12(fp)
   2435c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24360:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24364:	0001883a 	nop
}
   24368:	e037883a 	mov	sp,fp
   2436c:	df000017 	ldw	fp,0(sp)
   24370:	dec00104 	addi	sp,sp,4
   24374:	f800283a 	ret

00024378 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24378:	defffc04 	addi	sp,sp,-16
   2437c:	df000315 	stw	fp,12(sp)
   24380:	df000304 	addi	fp,sp,12
   24384:	e13ffe15 	stw	r4,-8(fp)
   24388:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2438c:	000530fa 	rdctl	r2,ienable
   24390:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24394:	00c00044 	movi	r3,1
   24398:	e0bfff17 	ldw	r2,-4(fp)
   2439c:	1884983a 	sll	r2,r3,r2
   243a0:	1007883a 	mov	r3,r2
   243a4:	e0bffd17 	ldw	r2,-12(fp)
   243a8:	1884703a 	and	r2,r3,r2
   243ac:	1004c03a 	cmpne	r2,r2,zero
   243b0:	10803fcc 	andi	r2,r2,255
}
   243b4:	e037883a 	mov	sp,fp
   243b8:	df000017 	ldw	fp,0(sp)
   243bc:	dec00104 	addi	sp,sp,4
   243c0:	f800283a 	ret

000243c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   243c4:	defff504 	addi	sp,sp,-44
   243c8:	dfc00a15 	stw	ra,40(sp)
   243cc:	df000915 	stw	fp,36(sp)
   243d0:	df000904 	addi	fp,sp,36
   243d4:	e13ffc15 	stw	r4,-16(fp)
   243d8:	e17ffd15 	stw	r5,-12(fp)
   243dc:	e1bffe15 	stw	r6,-8(fp)
   243e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   243e4:	00bffa84 	movi	r2,-22
   243e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   243ec:	e0bffd17 	ldw	r2,-12(fp)
   243f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   243f4:	e0bff817 	ldw	r2,-32(fp)
   243f8:	10800808 	cmpgei	r2,r2,32
   243fc:	1000271e 	bne	r2,zero,2449c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24400:	0005303a 	rdctl	r2,status
   24404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24408:	e0fffb17 	ldw	r3,-20(fp)
   2440c:	00bfff84 	movi	r2,-2
   24410:	1884703a 	and	r2,r3,r2
   24414:	1001703a 	wrctl	status,r2
  
  return context;
   24418:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2441c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   24420:	008000b4 	movhi	r2,2
   24424:	109b6504 	addi	r2,r2,28052
   24428:	e0fff817 	ldw	r3,-32(fp)
   2442c:	180690fa 	slli	r3,r3,3
   24430:	10c5883a 	add	r2,r2,r3
   24434:	e0fffe17 	ldw	r3,-8(fp)
   24438:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2443c:	008000b4 	movhi	r2,2
   24440:	109b6504 	addi	r2,r2,28052
   24444:	e0fff817 	ldw	r3,-32(fp)
   24448:	180690fa 	slli	r3,r3,3
   2444c:	10c5883a 	add	r2,r2,r3
   24450:	10800104 	addi	r2,r2,4
   24454:	e0ffff17 	ldw	r3,-4(fp)
   24458:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2445c:	e0bffe17 	ldw	r2,-8(fp)
   24460:	10000526 	beq	r2,zero,24478 <alt_iic_isr_register+0xb4>
   24464:	e0bff817 	ldw	r2,-32(fp)
   24468:	100b883a 	mov	r5,r2
   2446c:	e13ffc17 	ldw	r4,-16(fp)
   24470:	00242640 	call	24264 <alt_ic_irq_enable>
   24474:	00000406 	br	24488 <alt_iic_isr_register+0xc4>
   24478:	e0bff817 	ldw	r2,-32(fp)
   2447c:	100b883a 	mov	r5,r2
   24480:	e13ffc17 	ldw	r4,-16(fp)
   24484:	00242ec0 	call	242ec <alt_ic_irq_disable>
   24488:	e0bff715 	stw	r2,-36(fp)
   2448c:	e0bffa17 	ldw	r2,-24(fp)
   24490:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24494:	e0bff917 	ldw	r2,-28(fp)
   24498:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2449c:	e0bff717 	ldw	r2,-36(fp)
}
   244a0:	e037883a 	mov	sp,fp
   244a4:	dfc00117 	ldw	ra,4(sp)
   244a8:	df000017 	ldw	fp,0(sp)
   244ac:	dec00204 	addi	sp,sp,8
   244b0:	f800283a 	ret

000244b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   244b4:	defff904 	addi	sp,sp,-28
   244b8:	dfc00615 	stw	ra,24(sp)
   244bc:	df000515 	stw	fp,20(sp)
   244c0:	df000504 	addi	fp,sp,20
   244c4:	e13ffc15 	stw	r4,-16(fp)
   244c8:	e17ffd15 	stw	r5,-12(fp)
   244cc:	e1bffe15 	stw	r6,-8(fp)
   244d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   244d4:	e1bfff17 	ldw	r6,-4(fp)
   244d8:	e17ffe17 	ldw	r5,-8(fp)
   244dc:	e13ffd17 	ldw	r4,-12(fp)
   244e0:	00246f40 	call	246f4 <open>
   244e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   244e8:	e0bffb17 	ldw	r2,-20(fp)
   244ec:	10001c16 	blt	r2,zero,24560 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   244f0:	008000b4 	movhi	r2,2
   244f4:	10985404 	addi	r2,r2,24912
   244f8:	e0fffb17 	ldw	r3,-20(fp)
   244fc:	18c00324 	muli	r3,r3,12
   24500:	10c5883a 	add	r2,r2,r3
   24504:	10c00017 	ldw	r3,0(r2)
   24508:	e0bffc17 	ldw	r2,-16(fp)
   2450c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24510:	008000b4 	movhi	r2,2
   24514:	10985404 	addi	r2,r2,24912
   24518:	e0fffb17 	ldw	r3,-20(fp)
   2451c:	18c00324 	muli	r3,r3,12
   24520:	10c5883a 	add	r2,r2,r3
   24524:	10800104 	addi	r2,r2,4
   24528:	10c00017 	ldw	r3,0(r2)
   2452c:	e0bffc17 	ldw	r2,-16(fp)
   24530:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24534:	008000b4 	movhi	r2,2
   24538:	10985404 	addi	r2,r2,24912
   2453c:	e0fffb17 	ldw	r3,-20(fp)
   24540:	18c00324 	muli	r3,r3,12
   24544:	10c5883a 	add	r2,r2,r3
   24548:	10800204 	addi	r2,r2,8
   2454c:	10c00017 	ldw	r3,0(r2)
   24550:	e0bffc17 	ldw	r2,-16(fp)
   24554:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24558:	e13ffb17 	ldw	r4,-20(fp)
   2455c:	00248480 	call	24848 <alt_release_fd>
  }
} 
   24560:	0001883a 	nop
   24564:	e037883a 	mov	sp,fp
   24568:	dfc00117 	ldw	ra,4(sp)
   2456c:	df000017 	ldw	fp,0(sp)
   24570:	dec00204 	addi	sp,sp,8
   24574:	f800283a 	ret

00024578 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24578:	defffb04 	addi	sp,sp,-20
   2457c:	dfc00415 	stw	ra,16(sp)
   24580:	df000315 	stw	fp,12(sp)
   24584:	df000304 	addi	fp,sp,12
   24588:	e13ffd15 	stw	r4,-12(fp)
   2458c:	e17ffe15 	stw	r5,-8(fp)
   24590:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24594:	01c07fc4 	movi	r7,511
   24598:	01800044 	movi	r6,1
   2459c:	e17ffd17 	ldw	r5,-12(fp)
   245a0:	010000b4 	movhi	r4,2
   245a4:	21185704 	addi	r4,r4,24924
   245a8:	00244b40 	call	244b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   245ac:	01c07fc4 	movi	r7,511
   245b0:	000d883a 	mov	r6,zero
   245b4:	e17ffe17 	ldw	r5,-8(fp)
   245b8:	010000b4 	movhi	r4,2
   245bc:	21185404 	addi	r4,r4,24912
   245c0:	00244b40 	call	244b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   245c4:	01c07fc4 	movi	r7,511
   245c8:	01800044 	movi	r6,1
   245cc:	e17fff17 	ldw	r5,-4(fp)
   245d0:	010000b4 	movhi	r4,2
   245d4:	21185a04 	addi	r4,r4,24936
   245d8:	00244b40 	call	244b4 <alt_open_fd>
}  
   245dc:	0001883a 	nop
   245e0:	e037883a 	mov	sp,fp
   245e4:	dfc00117 	ldw	ra,4(sp)
   245e8:	df000017 	ldw	fp,0(sp)
   245ec:	dec00204 	addi	sp,sp,8
   245f0:	f800283a 	ret

000245f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   245f4:	defffe04 	addi	sp,sp,-8
   245f8:	dfc00115 	stw	ra,4(sp)
   245fc:	df000015 	stw	fp,0(sp)
   24600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24604:	d0a00717 	ldw	r2,-32740(gp)
   24608:	10000326 	beq	r2,zero,24618 <alt_get_errno+0x24>
   2460c:	d0a00717 	ldw	r2,-32740(gp)
   24610:	103ee83a 	callr	r2
   24614:	00000106 	br	2461c <alt_get_errno+0x28>
   24618:	d0a2a904 	addi	r2,gp,-30044
}
   2461c:	e037883a 	mov	sp,fp
   24620:	dfc00117 	ldw	ra,4(sp)
   24624:	df000017 	ldw	fp,0(sp)
   24628:	dec00204 	addi	sp,sp,8
   2462c:	f800283a 	ret

00024630 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24630:	defffd04 	addi	sp,sp,-12
   24634:	df000215 	stw	fp,8(sp)
   24638:	df000204 	addi	fp,sp,8
   2463c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24640:	e0bfff17 	ldw	r2,-4(fp)
   24644:	10800217 	ldw	r2,8(r2)
   24648:	10d00034 	orhi	r3,r2,16384
   2464c:	e0bfff17 	ldw	r2,-4(fp)
   24650:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24654:	e03ffe15 	stw	zero,-8(fp)
   24658:	00001d06 	br	246d0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2465c:	008000b4 	movhi	r2,2
   24660:	10985404 	addi	r2,r2,24912
   24664:	e0fffe17 	ldw	r3,-8(fp)
   24668:	18c00324 	muli	r3,r3,12
   2466c:	10c5883a 	add	r2,r2,r3
   24670:	10c00017 	ldw	r3,0(r2)
   24674:	e0bfff17 	ldw	r2,-4(fp)
   24678:	10800017 	ldw	r2,0(r2)
   2467c:	1880111e 	bne	r3,r2,246c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24680:	008000b4 	movhi	r2,2
   24684:	10985404 	addi	r2,r2,24912
   24688:	e0fffe17 	ldw	r3,-8(fp)
   2468c:	18c00324 	muli	r3,r3,12
   24690:	10c5883a 	add	r2,r2,r3
   24694:	10800204 	addi	r2,r2,8
   24698:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2469c:	1000090e 	bge	r2,zero,246c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   246a0:	e0bffe17 	ldw	r2,-8(fp)
   246a4:	10c00324 	muli	r3,r2,12
   246a8:	008000b4 	movhi	r2,2
   246ac:	10985404 	addi	r2,r2,24912
   246b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   246b4:	e0bfff17 	ldw	r2,-4(fp)
   246b8:	18800226 	beq	r3,r2,246c4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   246bc:	00bffcc4 	movi	r2,-13
   246c0:	00000806 	br	246e4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   246c4:	e0bffe17 	ldw	r2,-8(fp)
   246c8:	10800044 	addi	r2,r2,1
   246cc:	e0bffe15 	stw	r2,-8(fp)
   246d0:	d0a00617 	ldw	r2,-32744(gp)
   246d4:	1007883a 	mov	r3,r2
   246d8:	e0bffe17 	ldw	r2,-8(fp)
   246dc:	18bfdf2e 	bgeu	r3,r2,2465c <__alt_data_end+0xffff465c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   246e0:	0005883a 	mov	r2,zero
}
   246e4:	e037883a 	mov	sp,fp
   246e8:	df000017 	ldw	fp,0(sp)
   246ec:	dec00104 	addi	sp,sp,4
   246f0:	f800283a 	ret

000246f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   246f4:	defff604 	addi	sp,sp,-40
   246f8:	dfc00915 	stw	ra,36(sp)
   246fc:	df000815 	stw	fp,32(sp)
   24700:	df000804 	addi	fp,sp,32
   24704:	e13ffd15 	stw	r4,-12(fp)
   24708:	e17ffe15 	stw	r5,-8(fp)
   2470c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24710:	00bfffc4 	movi	r2,-1
   24714:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24718:	00bffb44 	movi	r2,-19
   2471c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24720:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24724:	d1600404 	addi	r5,gp,-32752
   24728:	e13ffd17 	ldw	r4,-12(fp)
   2472c:	0024a740 	call	24a74 <alt_find_dev>
   24730:	e0bff815 	stw	r2,-32(fp)
   24734:	e0bff817 	ldw	r2,-32(fp)
   24738:	1000051e 	bne	r2,zero,24750 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2473c:	e13ffd17 	ldw	r4,-12(fp)
   24740:	0024b040 	call	24b04 <alt_find_file>
   24744:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   24748:	00800044 	movi	r2,1
   2474c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24750:	e0bff817 	ldw	r2,-32(fp)
   24754:	10002926 	beq	r2,zero,247fc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24758:	e13ff817 	ldw	r4,-32(fp)
   2475c:	0024c0c0 	call	24c0c <alt_get_fd>
   24760:	e0bff915 	stw	r2,-28(fp)
   24764:	e0bff917 	ldw	r2,-28(fp)
   24768:	1000030e 	bge	r2,zero,24778 <open+0x84>
    {
      status = index;
   2476c:	e0bff917 	ldw	r2,-28(fp)
   24770:	e0bffa15 	stw	r2,-24(fp)
   24774:	00002306 	br	24804 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   24778:	e0bff917 	ldw	r2,-28(fp)
   2477c:	10c00324 	muli	r3,r2,12
   24780:	008000b4 	movhi	r2,2
   24784:	10985404 	addi	r2,r2,24912
   24788:	1885883a 	add	r2,r3,r2
   2478c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24790:	e0fffe17 	ldw	r3,-8(fp)
   24794:	00900034 	movhi	r2,16384
   24798:	10bfffc4 	addi	r2,r2,-1
   2479c:	1886703a 	and	r3,r3,r2
   247a0:	e0bffc17 	ldw	r2,-16(fp)
   247a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   247a8:	e0bffb17 	ldw	r2,-20(fp)
   247ac:	1000051e 	bne	r2,zero,247c4 <open+0xd0>
   247b0:	e13ffc17 	ldw	r4,-16(fp)
   247b4:	00246300 	call	24630 <alt_file_locked>
   247b8:	e0bffa15 	stw	r2,-24(fp)
   247bc:	e0bffa17 	ldw	r2,-24(fp)
   247c0:	10001016 	blt	r2,zero,24804 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   247c4:	e0bff817 	ldw	r2,-32(fp)
   247c8:	10800317 	ldw	r2,12(r2)
   247cc:	10000826 	beq	r2,zero,247f0 <open+0xfc>
   247d0:	e0bff817 	ldw	r2,-32(fp)
   247d4:	10800317 	ldw	r2,12(r2)
   247d8:	e1ffff17 	ldw	r7,-4(fp)
   247dc:	e1bffe17 	ldw	r6,-8(fp)
   247e0:	e17ffd17 	ldw	r5,-12(fp)
   247e4:	e13ffc17 	ldw	r4,-16(fp)
   247e8:	103ee83a 	callr	r2
   247ec:	00000106 	br	247f4 <open+0x100>
   247f0:	0005883a 	mov	r2,zero
   247f4:	e0bffa15 	stw	r2,-24(fp)
   247f8:	00000206 	br	24804 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   247fc:	00bffb44 	movi	r2,-19
   24800:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24804:	e0bffa17 	ldw	r2,-24(fp)
   24808:	1000090e 	bge	r2,zero,24830 <open+0x13c>
  {
    alt_release_fd (index);  
   2480c:	e13ff917 	ldw	r4,-28(fp)
   24810:	00248480 	call	24848 <alt_release_fd>
    ALT_ERRNO = -status;
   24814:	00245f40 	call	245f4 <alt_get_errno>
   24818:	1007883a 	mov	r3,r2
   2481c:	e0bffa17 	ldw	r2,-24(fp)
   24820:	0085c83a 	sub	r2,zero,r2
   24824:	18800015 	stw	r2,0(r3)
    return -1;
   24828:	00bfffc4 	movi	r2,-1
   2482c:	00000106 	br	24834 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   24830:	e0bff917 	ldw	r2,-28(fp)
}
   24834:	e037883a 	mov	sp,fp
   24838:	dfc00117 	ldw	ra,4(sp)
   2483c:	df000017 	ldw	fp,0(sp)
   24840:	dec00204 	addi	sp,sp,8
   24844:	f800283a 	ret

00024848 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24848:	defffe04 	addi	sp,sp,-8
   2484c:	df000115 	stw	fp,4(sp)
   24850:	df000104 	addi	fp,sp,4
   24854:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   24858:	e0bfff17 	ldw	r2,-4(fp)
   2485c:	108000d0 	cmplti	r2,r2,3
   24860:	10000d1e 	bne	r2,zero,24898 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   24864:	008000b4 	movhi	r2,2
   24868:	10985404 	addi	r2,r2,24912
   2486c:	e0ffff17 	ldw	r3,-4(fp)
   24870:	18c00324 	muli	r3,r3,12
   24874:	10c5883a 	add	r2,r2,r3
   24878:	10800204 	addi	r2,r2,8
   2487c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   24880:	008000b4 	movhi	r2,2
   24884:	10985404 	addi	r2,r2,24912
   24888:	e0ffff17 	ldw	r3,-4(fp)
   2488c:	18c00324 	muli	r3,r3,12
   24890:	10c5883a 	add	r2,r2,r3
   24894:	10000015 	stw	zero,0(r2)
  }
}
   24898:	0001883a 	nop
   2489c:	e037883a 	mov	sp,fp
   248a0:	df000017 	ldw	fp,0(sp)
   248a4:	dec00104 	addi	sp,sp,4
   248a8:	f800283a 	ret

000248ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   248ac:	defffa04 	addi	sp,sp,-24
   248b0:	df000515 	stw	fp,20(sp)
   248b4:	df000504 	addi	fp,sp,20
   248b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   248bc:	0005303a 	rdctl	r2,status
   248c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   248c4:	e0fffc17 	ldw	r3,-16(fp)
   248c8:	00bfff84 	movi	r2,-2
   248cc:	1884703a 	and	r2,r3,r2
   248d0:	1001703a 	wrctl	status,r2
  
  return context;
   248d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   248d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   248dc:	e0bfff17 	ldw	r2,-4(fp)
   248e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   248e4:	e0bffd17 	ldw	r2,-12(fp)
   248e8:	10800017 	ldw	r2,0(r2)
   248ec:	e0fffd17 	ldw	r3,-12(fp)
   248f0:	18c00117 	ldw	r3,4(r3)
   248f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   248f8:	e0bffd17 	ldw	r2,-12(fp)
   248fc:	10800117 	ldw	r2,4(r2)
   24900:	e0fffd17 	ldw	r3,-12(fp)
   24904:	18c00017 	ldw	r3,0(r3)
   24908:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2490c:	e0bffd17 	ldw	r2,-12(fp)
   24910:	e0fffd17 	ldw	r3,-12(fp)
   24914:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24918:	e0bffd17 	ldw	r2,-12(fp)
   2491c:	e0fffd17 	ldw	r3,-12(fp)
   24920:	10c00015 	stw	r3,0(r2)
   24924:	e0bffb17 	ldw	r2,-20(fp)
   24928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2492c:	e0bffe17 	ldw	r2,-8(fp)
   24930:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24934:	0001883a 	nop
   24938:	e037883a 	mov	sp,fp
   2493c:	df000017 	ldw	fp,0(sp)
   24940:	dec00104 	addi	sp,sp,4
   24944:	f800283a 	ret

00024948 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24948:	defffb04 	addi	sp,sp,-20
   2494c:	dfc00415 	stw	ra,16(sp)
   24950:	df000315 	stw	fp,12(sp)
   24954:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24958:	d0a00917 	ldw	r2,-32732(gp)
   2495c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24960:	d0a2af17 	ldw	r2,-30020(gp)
   24964:	10800044 	addi	r2,r2,1
   24968:	d0a2af15 	stw	r2,-30020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2496c:	00002e06 	br	24a28 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24970:	e0bffd17 	ldw	r2,-12(fp)
   24974:	10800017 	ldw	r2,0(r2)
   24978:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2497c:	e0bffd17 	ldw	r2,-12(fp)
   24980:	10800403 	ldbu	r2,16(r2)
   24984:	10803fcc 	andi	r2,r2,255
   24988:	10000426 	beq	r2,zero,2499c <alt_tick+0x54>
   2498c:	d0a2af17 	ldw	r2,-30020(gp)
   24990:	1000021e 	bne	r2,zero,2499c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24994:	e0bffd17 	ldw	r2,-12(fp)
   24998:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2499c:	e0bffd17 	ldw	r2,-12(fp)
   249a0:	10800217 	ldw	r2,8(r2)
   249a4:	d0e2af17 	ldw	r3,-30020(gp)
   249a8:	18801d36 	bltu	r3,r2,24a20 <alt_tick+0xd8>
   249ac:	e0bffd17 	ldw	r2,-12(fp)
   249b0:	10800403 	ldbu	r2,16(r2)
   249b4:	10803fcc 	andi	r2,r2,255
   249b8:	1000191e 	bne	r2,zero,24a20 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   249bc:	e0bffd17 	ldw	r2,-12(fp)
   249c0:	10800317 	ldw	r2,12(r2)
   249c4:	e0fffd17 	ldw	r3,-12(fp)
   249c8:	18c00517 	ldw	r3,20(r3)
   249cc:	1809883a 	mov	r4,r3
   249d0:	103ee83a 	callr	r2
   249d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   249d8:	e0bfff17 	ldw	r2,-4(fp)
   249dc:	1000031e 	bne	r2,zero,249ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   249e0:	e13ffd17 	ldw	r4,-12(fp)
   249e4:	00248ac0 	call	248ac <alt_alarm_stop>
   249e8:	00000d06 	br	24a20 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   249ec:	e0bffd17 	ldw	r2,-12(fp)
   249f0:	10c00217 	ldw	r3,8(r2)
   249f4:	e0bfff17 	ldw	r2,-4(fp)
   249f8:	1887883a 	add	r3,r3,r2
   249fc:	e0bffd17 	ldw	r2,-12(fp)
   24a00:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24a04:	e0bffd17 	ldw	r2,-12(fp)
   24a08:	10c00217 	ldw	r3,8(r2)
   24a0c:	d0a2af17 	ldw	r2,-30020(gp)
   24a10:	1880032e 	bgeu	r3,r2,24a20 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24a14:	e0bffd17 	ldw	r2,-12(fp)
   24a18:	00c00044 	movi	r3,1
   24a1c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24a20:	e0bffe17 	ldw	r2,-8(fp)
   24a24:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24a28:	e0fffd17 	ldw	r3,-12(fp)
   24a2c:	d0a00904 	addi	r2,gp,-32732
   24a30:	18bfcf1e 	bne	r3,r2,24970 <__alt_data_end+0xffff4970>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24a34:	0001883a 	nop
}
   24a38:	0001883a 	nop
   24a3c:	e037883a 	mov	sp,fp
   24a40:	dfc00117 	ldw	ra,4(sp)
   24a44:	df000017 	ldw	fp,0(sp)
   24a48:	dec00204 	addi	sp,sp,8
   24a4c:	f800283a 	ret

00024a50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24a50:	deffff04 	addi	sp,sp,-4
   24a54:	df000015 	stw	fp,0(sp)
   24a58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24a5c:	000170fa 	wrctl	ienable,zero
}
   24a60:	0001883a 	nop
   24a64:	e037883a 	mov	sp,fp
   24a68:	df000017 	ldw	fp,0(sp)
   24a6c:	dec00104 	addi	sp,sp,4
   24a70:	f800283a 	ret

00024a74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24a74:	defffa04 	addi	sp,sp,-24
   24a78:	dfc00515 	stw	ra,20(sp)
   24a7c:	df000415 	stw	fp,16(sp)
   24a80:	df000404 	addi	fp,sp,16
   24a84:	e13ffe15 	stw	r4,-8(fp)
   24a88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24a8c:	e0bfff17 	ldw	r2,-4(fp)
   24a90:	10800017 	ldw	r2,0(r2)
   24a94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24a98:	e13ffe17 	ldw	r4,-8(fp)
   24a9c:	0022fd80 	call	22fd8 <strlen>
   24aa0:	10800044 	addi	r2,r2,1
   24aa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24aa8:	00000d06 	br	24ae0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24aac:	e0bffc17 	ldw	r2,-16(fp)
   24ab0:	10800217 	ldw	r2,8(r2)
   24ab4:	e0fffd17 	ldw	r3,-12(fp)
   24ab8:	180d883a 	mov	r6,r3
   24abc:	e17ffe17 	ldw	r5,-8(fp)
   24ac0:	1009883a 	mov	r4,r2
   24ac4:	0024e100 	call	24e10 <memcmp>
   24ac8:	1000021e 	bne	r2,zero,24ad4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24acc:	e0bffc17 	ldw	r2,-16(fp)
   24ad0:	00000706 	br	24af0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24ad4:	e0bffc17 	ldw	r2,-16(fp)
   24ad8:	10800017 	ldw	r2,0(r2)
   24adc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24ae0:	e0fffc17 	ldw	r3,-16(fp)
   24ae4:	e0bfff17 	ldw	r2,-4(fp)
   24ae8:	18bff01e 	bne	r3,r2,24aac <__alt_data_end+0xffff4aac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24aec:	0005883a 	mov	r2,zero
}
   24af0:	e037883a 	mov	sp,fp
   24af4:	dfc00117 	ldw	ra,4(sp)
   24af8:	df000017 	ldw	fp,0(sp)
   24afc:	dec00204 	addi	sp,sp,8
   24b00:	f800283a 	ret

00024b04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24b04:	defffb04 	addi	sp,sp,-20
   24b08:	dfc00415 	stw	ra,16(sp)
   24b0c:	df000315 	stw	fp,12(sp)
   24b10:	df000304 	addi	fp,sp,12
   24b14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24b18:	d0a00217 	ldw	r2,-32760(gp)
   24b1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24b20:	00003106 	br	24be8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   24b24:	e0bffd17 	ldw	r2,-12(fp)
   24b28:	10800217 	ldw	r2,8(r2)
   24b2c:	1009883a 	mov	r4,r2
   24b30:	0022fd80 	call	22fd8 <strlen>
   24b34:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   24b38:	e0bffd17 	ldw	r2,-12(fp)
   24b3c:	10c00217 	ldw	r3,8(r2)
   24b40:	e0bffe17 	ldw	r2,-8(fp)
   24b44:	10bfffc4 	addi	r2,r2,-1
   24b48:	1885883a 	add	r2,r3,r2
   24b4c:	10800003 	ldbu	r2,0(r2)
   24b50:	10803fcc 	andi	r2,r2,255
   24b54:	1080201c 	xori	r2,r2,128
   24b58:	10bfe004 	addi	r2,r2,-128
   24b5c:	10800bd8 	cmpnei	r2,r2,47
   24b60:	1000031e 	bne	r2,zero,24b70 <alt_find_file+0x6c>
    {
      len -= 1;
   24b64:	e0bffe17 	ldw	r2,-8(fp)
   24b68:	10bfffc4 	addi	r2,r2,-1
   24b6c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24b70:	e0bffe17 	ldw	r2,-8(fp)
   24b74:	e0ffff17 	ldw	r3,-4(fp)
   24b78:	1885883a 	add	r2,r3,r2
   24b7c:	10800003 	ldbu	r2,0(r2)
   24b80:	10803fcc 	andi	r2,r2,255
   24b84:	1080201c 	xori	r2,r2,128
   24b88:	10bfe004 	addi	r2,r2,-128
   24b8c:	10800be0 	cmpeqi	r2,r2,47
   24b90:	1000081e 	bne	r2,zero,24bb4 <alt_find_file+0xb0>
   24b94:	e0bffe17 	ldw	r2,-8(fp)
   24b98:	e0ffff17 	ldw	r3,-4(fp)
   24b9c:	1885883a 	add	r2,r3,r2
   24ba0:	10800003 	ldbu	r2,0(r2)
   24ba4:	10803fcc 	andi	r2,r2,255
   24ba8:	1080201c 	xori	r2,r2,128
   24bac:	10bfe004 	addi	r2,r2,-128
   24bb0:	10000a1e 	bne	r2,zero,24bdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   24bb4:	e0bffd17 	ldw	r2,-12(fp)
   24bb8:	10800217 	ldw	r2,8(r2)
   24bbc:	e0fffe17 	ldw	r3,-8(fp)
   24bc0:	180d883a 	mov	r6,r3
   24bc4:	e17fff17 	ldw	r5,-4(fp)
   24bc8:	1009883a 	mov	r4,r2
   24bcc:	0024e100 	call	24e10 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24bd0:	1000021e 	bne	r2,zero,24bdc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24bd4:	e0bffd17 	ldw	r2,-12(fp)
   24bd8:	00000706 	br	24bf8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   24bdc:	e0bffd17 	ldw	r2,-12(fp)
   24be0:	10800017 	ldw	r2,0(r2)
   24be4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24be8:	e0fffd17 	ldw	r3,-12(fp)
   24bec:	d0a00204 	addi	r2,gp,-32760
   24bf0:	18bfcc1e 	bne	r3,r2,24b24 <__alt_data_end+0xffff4b24>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24bf4:	0005883a 	mov	r2,zero
}
   24bf8:	e037883a 	mov	sp,fp
   24bfc:	dfc00117 	ldw	ra,4(sp)
   24c00:	df000017 	ldw	fp,0(sp)
   24c04:	dec00204 	addi	sp,sp,8
   24c08:	f800283a 	ret

00024c0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24c0c:	defffc04 	addi	sp,sp,-16
   24c10:	df000315 	stw	fp,12(sp)
   24c14:	df000304 	addi	fp,sp,12
   24c18:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   24c1c:	00bffa04 	movi	r2,-24
   24c20:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24c24:	e03ffd15 	stw	zero,-12(fp)
   24c28:	00001906 	br	24c90 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   24c2c:	008000b4 	movhi	r2,2
   24c30:	10985404 	addi	r2,r2,24912
   24c34:	e0fffd17 	ldw	r3,-12(fp)
   24c38:	18c00324 	muli	r3,r3,12
   24c3c:	10c5883a 	add	r2,r2,r3
   24c40:	10800017 	ldw	r2,0(r2)
   24c44:	10000f1e 	bne	r2,zero,24c84 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   24c48:	008000b4 	movhi	r2,2
   24c4c:	10985404 	addi	r2,r2,24912
   24c50:	e0fffd17 	ldw	r3,-12(fp)
   24c54:	18c00324 	muli	r3,r3,12
   24c58:	10c5883a 	add	r2,r2,r3
   24c5c:	e0ffff17 	ldw	r3,-4(fp)
   24c60:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   24c64:	d0e00617 	ldw	r3,-32744(gp)
   24c68:	e0bffd17 	ldw	r2,-12(fp)
   24c6c:	1880020e 	bge	r3,r2,24c78 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   24c70:	e0bffd17 	ldw	r2,-12(fp)
   24c74:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   24c78:	e0bffd17 	ldw	r2,-12(fp)
   24c7c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   24c80:	00000606 	br	24c9c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   24c84:	e0bffd17 	ldw	r2,-12(fp)
   24c88:	10800044 	addi	r2,r2,1
   24c8c:	e0bffd15 	stw	r2,-12(fp)
   24c90:	e0bffd17 	ldw	r2,-12(fp)
   24c94:	10800810 	cmplti	r2,r2,32
   24c98:	103fe41e 	bne	r2,zero,24c2c <__alt_data_end+0xffff4c2c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   24c9c:	e0bffe17 	ldw	r2,-8(fp)
}
   24ca0:	e037883a 	mov	sp,fp
   24ca4:	df000017 	ldw	fp,0(sp)
   24ca8:	dec00104 	addi	sp,sp,4
   24cac:	f800283a 	ret

00024cb0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   24cb0:	defffb04 	addi	sp,sp,-20
   24cb4:	df000415 	stw	fp,16(sp)
   24cb8:	df000404 	addi	fp,sp,16
   24cbc:	e13ffe15 	stw	r4,-8(fp)
   24cc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24cc4:	e0bfff17 	ldw	r2,-4(fp)
   24cc8:	10840070 	cmpltui	r2,r2,4097
   24ccc:	1000021e 	bne	r2,zero,24cd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24cd0:	00840004 	movi	r2,4096
   24cd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   24cd8:	e0fffe17 	ldw	r3,-8(fp)
   24cdc:	e0bfff17 	ldw	r2,-4(fp)
   24ce0:	1885883a 	add	r2,r3,r2
   24ce4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24ce8:	e0bffe17 	ldw	r2,-8(fp)
   24cec:	e0bffc15 	stw	r2,-16(fp)
   24cf0:	00000506 	br	24d08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24cf4:	e0bffc17 	ldw	r2,-16(fp)
   24cf8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24cfc:	e0bffc17 	ldw	r2,-16(fp)
   24d00:	10800804 	addi	r2,r2,32
   24d04:	e0bffc15 	stw	r2,-16(fp)
   24d08:	e0fffc17 	ldw	r3,-16(fp)
   24d0c:	e0bffd17 	ldw	r2,-12(fp)
   24d10:	18bff836 	bltu	r3,r2,24cf4 <__alt_data_end+0xffff4cf4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24d14:	e0bffe17 	ldw	r2,-8(fp)
   24d18:	108007cc 	andi	r2,r2,31
   24d1c:	10000226 	beq	r2,zero,24d28 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24d20:	e0bffc17 	ldw	r2,-16(fp)
   24d24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24d28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24d2c:	0001883a 	nop
   24d30:	e037883a 	mov	sp,fp
   24d34:	df000017 	ldw	fp,0(sp)
   24d38:	dec00104 	addi	sp,sp,4
   24d3c:	f800283a 	ret

00024d40 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24d40:	defffe04 	addi	sp,sp,-8
   24d44:	df000115 	stw	fp,4(sp)
   24d48:	df000104 	addi	fp,sp,4
   24d4c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24d50:	e0bfff17 	ldw	r2,-4(fp)
   24d54:	10bffe84 	addi	r2,r2,-6
   24d58:	10c00428 	cmpgeui	r3,r2,16
   24d5c:	18001a1e 	bne	r3,zero,24dc8 <alt_exception_cause_generated_bad_addr+0x88>
   24d60:	100690ba 	slli	r3,r2,2
   24d64:	008000b4 	movhi	r2,2
   24d68:	10935e04 	addi	r2,r2,19832
   24d6c:	1885883a 	add	r2,r3,r2
   24d70:	10800017 	ldw	r2,0(r2)
   24d74:	1000683a 	jmp	r2
   24d78:	00024db8 	rdprs	zero,zero,2358
   24d7c:	00024db8 	rdprs	zero,zero,2358
   24d80:	00024dc8 	cmpgei	zero,zero,2359
   24d84:	00024dc8 	cmpgei	zero,zero,2359
   24d88:	00024dc8 	cmpgei	zero,zero,2359
   24d8c:	00024db8 	rdprs	zero,zero,2358
   24d90:	00024dc0 	call	24dc <__alt_mem_onchip_memory2-0x1db24>
   24d94:	00024dc8 	cmpgei	zero,zero,2359
   24d98:	00024db8 	rdprs	zero,zero,2358
   24d9c:	00024db8 	rdprs	zero,zero,2358
   24da0:	00024dc8 	cmpgei	zero,zero,2359
   24da4:	00024db8 	rdprs	zero,zero,2358
   24da8:	00024dc0 	call	24dc <__alt_mem_onchip_memory2-0x1db24>
   24dac:	00024dc8 	cmpgei	zero,zero,2359
   24db0:	00024dc8 	cmpgei	zero,zero,2359
   24db4:	00024db8 	rdprs	zero,zero,2358
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24db8:	00800044 	movi	r2,1
   24dbc:	00000306 	br	24dcc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24dc0:	0005883a 	mov	r2,zero
   24dc4:	00000106 	br	24dcc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24dc8:	0005883a 	mov	r2,zero
  }
}
   24dcc:	e037883a 	mov	sp,fp
   24dd0:	df000017 	ldw	fp,0(sp)
   24dd4:	dec00104 	addi	sp,sp,4
   24dd8:	f800283a 	ret

00024ddc <atexit>:
   24ddc:	200b883a 	mov	r5,r4
   24de0:	000f883a 	mov	r7,zero
   24de4:	000d883a 	mov	r6,zero
   24de8:	0009883a 	mov	r4,zero
   24dec:	0024e401 	jmpi	24e40 <__register_exitproc>

00024df0 <exit>:
   24df0:	defffe04 	addi	sp,sp,-8
   24df4:	000b883a 	mov	r5,zero
   24df8:	dc000015 	stw	r16,0(sp)
   24dfc:	dfc00115 	stw	ra,4(sp)
   24e00:	2021883a 	mov	r16,r4
   24e04:	0024f980 	call	24f98 <__call_exitprocs>
   24e08:	8009883a 	mov	r4,r16
   24e0c:	00251280 	call	25128 <_exit>

00024e10 <memcmp>:
   24e10:	218d883a 	add	r6,r4,r6
   24e14:	21800826 	beq	r4,r6,24e38 <memcmp+0x28>
   24e18:	20800003 	ldbu	r2,0(r4)
   24e1c:	28c00003 	ldbu	r3,0(r5)
   24e20:	10c00226 	beq	r2,r3,24e2c <memcmp+0x1c>
   24e24:	10c5c83a 	sub	r2,r2,r3
   24e28:	f800283a 	ret
   24e2c:	21000044 	addi	r4,r4,1
   24e30:	29400044 	addi	r5,r5,1
   24e34:	003ff706 	br	24e14 <__alt_data_end+0xffff4e14>
   24e38:	0005883a 	mov	r2,zero
   24e3c:	f800283a 	ret

00024e40 <__register_exitproc>:
   24e40:	008000b4 	movhi	r2,2
   24e44:	1098b404 	addi	r2,r2,25296
   24e48:	10c00017 	ldw	r3,0(r2)
   24e4c:	defff904 	addi	sp,sp,-28
   24e50:	dc000015 	stw	r16,0(sp)
   24e54:	1c000c17 	ldw	r16,48(r3)
   24e58:	dd400515 	stw	r21,20(sp)
   24e5c:	dd000415 	stw	r20,16(sp)
   24e60:	dcc00315 	stw	r19,12(sp)
   24e64:	dc800215 	stw	r18,8(sp)
   24e68:	dc400115 	stw	r17,4(sp)
   24e6c:	dfc00615 	stw	ra,24(sp)
   24e70:	202b883a 	mov	r21,r4
   24e74:	2823883a 	mov	r17,r5
   24e78:	3027883a 	mov	r19,r6
   24e7c:	3825883a 	mov	r18,r7
   24e80:	1029883a 	mov	r20,r2
   24e84:	8000021e 	bne	r16,zero,24e90 <__register_exitproc+0x50>
   24e88:	1c000d04 	addi	r16,r3,52
   24e8c:	1c000c15 	stw	r16,48(r3)
   24e90:	80800117 	ldw	r2,4(r16)
   24e94:	00c007c4 	movi	r3,31
   24e98:	1880110e 	bge	r3,r2,24ee0 <__register_exitproc+0xa0>
   24e9c:	00800034 	movhi	r2,0
   24ea0:	10800004 	addi	r2,r2,0
   24ea4:	1000021e 	bne	r2,zero,24eb0 <__register_exitproc+0x70>
   24ea8:	00bfffc4 	movi	r2,-1
   24eac:	00003106 	br	24f74 <__register_exitproc+0x134>
   24eb0:	01002304 	movi	r4,140
   24eb4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24eb8:	1021883a 	mov	r16,r2
   24ebc:	103ffa26 	beq	r2,zero,24ea8 <__alt_data_end+0xffff4ea8>
   24ec0:	10000115 	stw	zero,4(r2)
   24ec4:	a0800017 	ldw	r2,0(r20)
   24ec8:	10c00c17 	ldw	r3,48(r2)
   24ecc:	80c00015 	stw	r3,0(r16)
   24ed0:	14000c15 	stw	r16,48(r2)
   24ed4:	80002215 	stw	zero,136(r16)
   24ed8:	a8001d26 	beq	r21,zero,24f50 <__register_exitproc+0x110>
   24edc:	00000606 	br	24ef8 <__register_exitproc+0xb8>
   24ee0:	a8001b26 	beq	r21,zero,24f50 <__register_exitproc+0x110>
   24ee4:	80802217 	ldw	r2,136(r16)
   24ee8:	1000091e 	bne	r2,zero,24f10 <__register_exitproc+0xd0>
   24eec:	00800034 	movhi	r2,0
   24ef0:	10800004 	addi	r2,r2,0
   24ef4:	103fec26 	beq	r2,zero,24ea8 <__alt_data_end+0xffff4ea8>
   24ef8:	01004204 	movi	r4,264
   24efc:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24f00:	103fe926 	beq	r2,zero,24ea8 <__alt_data_end+0xffff4ea8>
   24f04:	10004015 	stw	zero,256(r2)
   24f08:	10004115 	stw	zero,260(r2)
   24f0c:	80802215 	stw	r2,136(r16)
   24f10:	81400117 	ldw	r5,4(r16)
   24f14:	01000044 	movi	r4,1
   24f18:	2947883a 	add	r3,r5,r5
   24f1c:	18c7883a 	add	r3,r3,r3
   24f20:	10c7883a 	add	r3,r2,r3
   24f24:	1cc00015 	stw	r19,0(r3)
   24f28:	2148983a 	sll	r4,r4,r5
   24f2c:	11404017 	ldw	r5,256(r2)
   24f30:	290ab03a 	or	r5,r5,r4
   24f34:	11404015 	stw	r5,256(r2)
   24f38:	1c802015 	stw	r18,128(r3)
   24f3c:	00c00084 	movi	r3,2
   24f40:	a8c0031e 	bne	r21,r3,24f50 <__register_exitproc+0x110>
   24f44:	10c04117 	ldw	r3,260(r2)
   24f48:	1908b03a 	or	r4,r3,r4
   24f4c:	11004115 	stw	r4,260(r2)
   24f50:	80800117 	ldw	r2,4(r16)
   24f54:	10c00044 	addi	r3,r2,1
   24f58:	10800084 	addi	r2,r2,2
   24f5c:	1085883a 	add	r2,r2,r2
   24f60:	1085883a 	add	r2,r2,r2
   24f64:	80c00115 	stw	r3,4(r16)
   24f68:	80a1883a 	add	r16,r16,r2
   24f6c:	84400015 	stw	r17,0(r16)
   24f70:	0005883a 	mov	r2,zero
   24f74:	dfc00617 	ldw	ra,24(sp)
   24f78:	dd400517 	ldw	r21,20(sp)
   24f7c:	dd000417 	ldw	r20,16(sp)
   24f80:	dcc00317 	ldw	r19,12(sp)
   24f84:	dc800217 	ldw	r18,8(sp)
   24f88:	dc400117 	ldw	r17,4(sp)
   24f8c:	dc000017 	ldw	r16,0(sp)
   24f90:	dec00704 	addi	sp,sp,28
   24f94:	f800283a 	ret

00024f98 <__call_exitprocs>:
   24f98:	defff504 	addi	sp,sp,-44
   24f9c:	dd000515 	stw	r20,20(sp)
   24fa0:	050000b4 	movhi	r20,2
   24fa4:	dc800315 	stw	r18,12(sp)
   24fa8:	dfc00a15 	stw	ra,40(sp)
   24fac:	df000915 	stw	fp,36(sp)
   24fb0:	ddc00815 	stw	r23,32(sp)
   24fb4:	dd800715 	stw	r22,28(sp)
   24fb8:	dd400615 	stw	r21,24(sp)
   24fbc:	dcc00415 	stw	r19,16(sp)
   24fc0:	dc400215 	stw	r17,8(sp)
   24fc4:	dc000115 	stw	r16,4(sp)
   24fc8:	d9000015 	stw	r4,0(sp)
   24fcc:	2825883a 	mov	r18,r5
   24fd0:	a518b404 	addi	r20,r20,25296
   24fd4:	a4400017 	ldw	r17,0(r20)
   24fd8:	8cc00c17 	ldw	r19,48(r17)
   24fdc:	8c400c04 	addi	r17,r17,48
   24fe0:	98004526 	beq	r19,zero,250f8 <__call_exitprocs+0x160>
   24fe4:	9c000117 	ldw	r16,4(r19)
   24fe8:	00900034 	movhi	r2,16384
   24fec:	10bfffc4 	addi	r2,r2,-1
   24ff0:	9d402217 	ldw	r21,136(r19)
   24ff4:	85bfffc4 	addi	r22,r16,-1
   24ff8:	80a1883a 	add	r16,r16,r2
   24ffc:	8421883a 	add	r16,r16,r16
   25000:	8421883a 	add	r16,r16,r16
   25004:	ac2f883a 	add	r23,r21,r16
   25008:	84000204 	addi	r16,r16,8
   2500c:	9c21883a 	add	r16,r19,r16
   25010:	b0002716 	blt	r22,zero,250b0 <__call_exitprocs+0x118>
   25014:	90000726 	beq	r18,zero,25034 <__call_exitprocs+0x9c>
   25018:	a800041e 	bne	r21,zero,2502c <__call_exitprocs+0x94>
   2501c:	b5bfffc4 	addi	r22,r22,-1
   25020:	bdffff04 	addi	r23,r23,-4
   25024:	843fff04 	addi	r16,r16,-4
   25028:	003ff906 	br	25010 <__alt_data_end+0xffff5010>
   2502c:	b9002017 	ldw	r4,128(r23)
   25030:	913ffa1e 	bne	r18,r4,2501c <__alt_data_end+0xffff501c>
   25034:	99000117 	ldw	r4,4(r19)
   25038:	82000017 	ldw	r8,0(r16)
   2503c:	213fffc4 	addi	r4,r4,-1
   25040:	b100021e 	bne	r22,r4,2504c <__call_exitprocs+0xb4>
   25044:	9d800115 	stw	r22,4(r19)
   25048:	00000106 	br	25050 <__call_exitprocs+0xb8>
   2504c:	80000015 	stw	zero,0(r16)
   25050:	403ff226 	beq	r8,zero,2501c <__alt_data_end+0xffff501c>
   25054:	9f000117 	ldw	fp,4(r19)
   25058:	a8000526 	beq	r21,zero,25070 <__call_exitprocs+0xd8>
   2505c:	00800044 	movi	r2,1
   25060:	1592983a 	sll	r9,r2,r22
   25064:	a9404017 	ldw	r5,256(r21)
   25068:	494a703a 	and	r5,r9,r5
   2506c:	2800021e 	bne	r5,zero,25078 <__call_exitprocs+0xe0>
   25070:	403ee83a 	callr	r8
   25074:	00000906 	br	2509c <__call_exitprocs+0x104>
   25078:	a9004117 	ldw	r4,260(r21)
   2507c:	4908703a 	and	r4,r9,r4
   25080:	2000041e 	bne	r4,zero,25094 <__call_exitprocs+0xfc>
   25084:	b9400017 	ldw	r5,0(r23)
   25088:	d9000017 	ldw	r4,0(sp)
   2508c:	403ee83a 	callr	r8
   25090:	00000206 	br	2509c <__call_exitprocs+0x104>
   25094:	b9000017 	ldw	r4,0(r23)
   25098:	403ee83a 	callr	r8
   2509c:	99000117 	ldw	r4,4(r19)
   250a0:	e13fcc1e 	bne	fp,r4,24fd4 <__alt_data_end+0xffff4fd4>
   250a4:	89000017 	ldw	r4,0(r17)
   250a8:	993fdc26 	beq	r19,r4,2501c <__alt_data_end+0xffff501c>
   250ac:	003fc906 	br	24fd4 <__alt_data_end+0xffff4fd4>
   250b0:	00800034 	movhi	r2,0
   250b4:	10800004 	addi	r2,r2,0
   250b8:	10000f26 	beq	r2,zero,250f8 <__call_exitprocs+0x160>
   250bc:	99400117 	ldw	r5,4(r19)
   250c0:	99000017 	ldw	r4,0(r19)
   250c4:	2800091e 	bne	r5,zero,250ec <__call_exitprocs+0x154>
   250c8:	20000826 	beq	r4,zero,250ec <__call_exitprocs+0x154>
   250cc:	89000015 	stw	r4,0(r17)
   250d0:	a8000226 	beq	r21,zero,250dc <__call_exitprocs+0x144>
   250d4:	a809883a 	mov	r4,r21
   250d8:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   250dc:	9809883a 	mov	r4,r19
   250e0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   250e4:	8cc00017 	ldw	r19,0(r17)
   250e8:	003fbd06 	br	24fe0 <__alt_data_end+0xffff4fe0>
   250ec:	9823883a 	mov	r17,r19
   250f0:	2027883a 	mov	r19,r4
   250f4:	003fba06 	br	24fe0 <__alt_data_end+0xffff4fe0>
   250f8:	dfc00a17 	ldw	ra,40(sp)
   250fc:	df000917 	ldw	fp,36(sp)
   25100:	ddc00817 	ldw	r23,32(sp)
   25104:	dd800717 	ldw	r22,28(sp)
   25108:	dd400617 	ldw	r21,24(sp)
   2510c:	dd000517 	ldw	r20,20(sp)
   25110:	dcc00417 	ldw	r19,16(sp)
   25114:	dc800317 	ldw	r18,12(sp)
   25118:	dc400217 	ldw	r17,8(sp)
   2511c:	dc000117 	ldw	r16,4(sp)
   25120:	dec00b04 	addi	sp,sp,44
   25124:	f800283a 	ret

00025128 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25128:	defffd04 	addi	sp,sp,-12
   2512c:	df000215 	stw	fp,8(sp)
   25130:	df000204 	addi	fp,sp,8
   25134:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25138:	0001883a 	nop
   2513c:	e0bfff17 	ldw	r2,-4(fp)
   25140:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25144:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25148:	10000226 	beq	r2,zero,25154 <_exit+0x2c>
    ALT_SIM_FAIL();
   2514c:	002af070 	cmpltui	zero,zero,43969
   25150:	00000106 	br	25158 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25154:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25158:	003fff06 	br	25158 <__alt_data_end+0xffff5158>
