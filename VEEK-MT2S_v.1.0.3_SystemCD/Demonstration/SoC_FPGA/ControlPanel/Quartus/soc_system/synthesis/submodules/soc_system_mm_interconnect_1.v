// soc_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 203

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_1 (
		output wire [4:0]  TERASIC_ALSA_apb_slave_clkctrl_paddr,                      //                      TERASIC_ALSA_apb_slave_clkctrl.paddr
		output wire        TERASIC_ALSA_apb_slave_clkctrl_psel,                       //                                                    .psel
		output wire        TERASIC_ALSA_apb_slave_clkctrl_penable,                    //                                                    .penable
		output wire        TERASIC_ALSA_apb_slave_clkctrl_pwrite,                     //                                                    .pwrite
		output wire [31:0] TERASIC_ALSA_apb_slave_clkctrl_pwdata,                     //                                                    .pwdata
		input  wire [31:0] TERASIC_ALSA_apb_slave_clkctrl_prdata,                     //                                                    .prdata
		input  wire        TERASIC_ALSA_apb_slave_clkctrl_pready,                     //                                                    .pready
		output wire [4:0]  TERASIC_ALSA_apb_slave_output_paddr,                       //                       TERASIC_ALSA_apb_slave_output.paddr
		output wire        TERASIC_ALSA_apb_slave_output_psel,                        //                                                    .psel
		output wire        TERASIC_ALSA_apb_slave_output_penable,                     //                                                    .penable
		output wire        TERASIC_ALSA_apb_slave_output_pwrite,                      //                                                    .pwrite
		output wire [31:0] TERASIC_ALSA_apb_slave_output_pwdata,                      //                                                    .pwdata
		input  wire [31:0] TERASIC_ALSA_apb_slave_output_prdata,                      //                                                    .prdata
		input  wire        TERASIC_ALSA_apb_slave_output_pready,                      //                                                    .pready
		input  wire        clk_50_clk_clk,                                            //                                          clk_50_clk.clk
		input  wire        vga_stream_out_clk_clk,                                    //                                  vga_stream_out_clk.clk
		input  wire        alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset, // alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset.reset
		input  wire        mm_bridge_0_reset_reset_bridge_in_reset_reset,             //             mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_reset_reset_bridge_in_reset_reset,              //              nios2_gen2_reset_reset_bridge_in_reset.reset
		input  wire        tv_decoder_clk_50_reset_reset_bridge_in_reset_reset,       //       tv_decoder_clk_50_reset_reset_bridge_in_reset.reset
		input  wire [18:0] mm_bridge_0_m0_address,                                    //                                      mm_bridge_0_m0.address
		output wire        mm_bridge_0_m0_waitrequest,                                //                                                    .waitrequest
		input  wire [0:0]  mm_bridge_0_m0_burstcount,                                 //                                                    .burstcount
		input  wire [3:0]  mm_bridge_0_m0_byteenable,                                 //                                                    .byteenable
		input  wire        mm_bridge_0_m0_read,                                       //                                                    .read
		output wire [31:0] mm_bridge_0_m0_readdata,                                   //                                                    .readdata
		output wire        mm_bridge_0_m0_readdatavalid,                              //                                                    .readdatavalid
		input  wire        mm_bridge_0_m0_write,                                      //                                                    .write
		input  wire [31:0] mm_bridge_0_m0_writedata,                                  //                                                    .writedata
		input  wire        mm_bridge_0_m0_debugaccess,                                //                                                    .debugaccess
		input  wire [18:0] nios2_gen2_data_master_address,                            //                              nios2_gen2_data_master.address
		output wire        nios2_gen2_data_master_waitrequest,                        //                                                    .waitrequest
		input  wire [3:0]  nios2_gen2_data_master_byteenable,                         //                                                    .byteenable
		input  wire        nios2_gen2_data_master_read,                               //                                                    .read
		output wire [31:0] nios2_gen2_data_master_readdata,                           //                                                    .readdata
		output wire        nios2_gen2_data_master_readdatavalid,                      //                                                    .readdatavalid
		input  wire        nios2_gen2_data_master_write,                              //                                                    .write
		input  wire [31:0] nios2_gen2_data_master_writedata,                          //                                                    .writedata
		input  wire        nios2_gen2_data_master_debugaccess,                        //                                                    .debugaccess
		input  wire [17:0] nios2_gen2_instruction_master_address,                     //                       nios2_gen2_instruction_master.address
		output wire        nios2_gen2_instruction_master_waitrequest,                 //                                                    .waitrequest
		input  wire        nios2_gen2_instruction_master_read,                        //                                                    .read
		output wire [31:0] nios2_gen2_instruction_master_readdata,                    //                                                    .readdata
		output wire        nios2_gen2_instruction_master_readdatavalid,               //                                                    .readdatavalid
		output wire [6:0]  alt_vip_cl_mixer_0_control_address,                        //                          alt_vip_cl_mixer_0_control.address
		output wire        alt_vip_cl_mixer_0_control_write,                          //                                                    .write
		output wire        alt_vip_cl_mixer_0_control_read,                           //                                                    .read
		input  wire [31:0] alt_vip_cl_mixer_0_control_readdata,                       //                                                    .readdata
		output wire [31:0] alt_vip_cl_mixer_0_control_writedata,                      //                                                    .writedata
		output wire [3:0]  alt_vip_cl_mixer_0_control_byteenable,                     //                                                    .byteenable
		input  wire        alt_vip_cl_mixer_0_control_readdatavalid,                  //                                                    .readdatavalid
		input  wire        alt_vip_cl_mixer_0_control_waitrequest,                    //                                                    .waitrequest
		output wire [4:0]  alt_vip_vfr_vga_avalon_slave_address,                      //                        alt_vip_vfr_vga_avalon_slave.address
		output wire        alt_vip_vfr_vga_avalon_slave_write,                        //                                                    .write
		output wire        alt_vip_vfr_vga_avalon_slave_read,                         //                                                    .read
		input  wire [31:0] alt_vip_vfr_vga_avalon_slave_readdata,                     //                                                    .readdata
		output wire [31:0] alt_vip_vfr_vga_avalon_slave_writedata,                    //                                                    .writedata
		output wire [1:0]  camera_pwdn_n_s1_address,                                  //                                    camera_pwdn_n_s1.address
		output wire        camera_pwdn_n_s1_write,                                    //                                                    .write
		input  wire [31:0] camera_pwdn_n_s1_readdata,                                 //                                                    .readdata
		output wire [31:0] camera_pwdn_n_s1_writedata,                                //                                                    .writedata
		output wire        camera_pwdn_n_s1_chipselect,                               //                                                    .chipselect
		output wire [2:0]  i2c_opencores_camera_avalon_slave_0_address,               //                 i2c_opencores_camera_avalon_slave_0.address
		output wire        i2c_opencores_camera_avalon_slave_0_write,                 //                                                    .write
		input  wire [7:0]  i2c_opencores_camera_avalon_slave_0_readdata,              //                                                    .readdata
		output wire [7:0]  i2c_opencores_camera_avalon_slave_0_writedata,             //                                                    .writedata
		input  wire        i2c_opencores_camera_avalon_slave_0_waitrequest,           //                                                    .waitrequest
		output wire        i2c_opencores_camera_avalon_slave_0_chipselect,            //                                                    .chipselect
		output wire [2:0]  i2c_opencores_light_avalon_slave_0_address,                //                  i2c_opencores_light_avalon_slave_0.address
		output wire        i2c_opencores_light_avalon_slave_0_write,                  //                                                    .write
		input  wire [7:0]  i2c_opencores_light_avalon_slave_0_readdata,               //                                                    .readdata
		output wire [7:0]  i2c_opencores_light_avalon_slave_0_writedata,              //                                                    .writedata
		input  wire        i2c_opencores_light_avalon_slave_0_waitrequest,            //                                                    .waitrequest
		output wire        i2c_opencores_light_avalon_slave_0_chipselect,             //                                                    .chipselect
		output wire [2:0]  i2c_opencores_mipi_avalon_slave_0_address,                 //                   i2c_opencores_mipi_avalon_slave_0.address
		output wire        i2c_opencores_mipi_avalon_slave_0_write,                   //                                                    .write
		input  wire [7:0]  i2c_opencores_mipi_avalon_slave_0_readdata,                //                                                    .readdata
		output wire [7:0]  i2c_opencores_mipi_avalon_slave_0_writedata,               //                                                    .writedata
		input  wire        i2c_opencores_mipi_avalon_slave_0_waitrequest,             //                                                    .waitrequest
		output wire        i2c_opencores_mipi_avalon_slave_0_chipselect,              //                                                    .chipselect
		output wire [0:0]  ir_rx_avalon_slave_address,                                //                                  ir_rx_avalon_slave.address
		output wire        ir_rx_avalon_slave_write,                                  //                                                    .write
		output wire        ir_rx_avalon_slave_read,                                   //                                                    .read
		input  wire [31:0] ir_rx_avalon_slave_readdata,                               //                                                    .readdata
		output wire [31:0] ir_rx_avalon_slave_writedata,                              //                                                    .writedata
		output wire        ir_rx_avalon_slave_chipselect,                             //                                                    .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                       //                         jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                         //                                                    .write
		output wire        jtag_uart_avalon_jtag_slave_read,                          //                                                    .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                      //                                                    .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                     //                                                    .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                   //                                                    .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                    //                                                    .chipselect
		output wire [1:0]  key_s1_address,                                            //                                              key_s1.address
		output wire        key_s1_write,                                              //                                                    .write
		input  wire [31:0] key_s1_readdata,                                           //                                                    .readdata
		output wire [31:0] key_s1_writedata,                                          //                                                    .writedata
		output wire        key_s1_chipselect,                                         //                                                    .chipselect
		output wire [1:0]  ledr_s1_address,                                           //                                             ledr_s1.address
		output wire        ledr_s1_write,                                             //                                                    .write
		input  wire [31:0] ledr_s1_readdata,                                          //                                                    .readdata
		output wire [31:0] ledr_s1_writedata,                                         //                                                    .writedata
		output wire        ledr_s1_chipselect,                                        //                                                    .chipselect
		output wire [1:0]  light_int_s1_address,                                      //                                        light_int_s1.address
		output wire        light_int_s1_write,                                        //                                                    .write
		input  wire [31:0] light_int_s1_readdata,                                     //                                                    .readdata
		output wire [31:0] light_int_s1_writedata,                                    //                                                    .writedata
		output wire        light_int_s1_chipselect,                                   //                                                    .chipselect
		output wire [1:0]  mipi_reset_n_s1_address,                                   //                                     mipi_reset_n_s1.address
		output wire        mipi_reset_n_s1_write,                                     //                                                    .write
		input  wire [31:0] mipi_reset_n_s1_readdata,                                  //                                                    .readdata
		output wire [31:0] mipi_reset_n_s1_writedata,                                 //                                                    .writedata
		output wire        mipi_reset_n_s1_chipselect,                                //                                                    .chipselect
		output wire [1:0]  mpu_int_s1_address,                                        //                                          mpu_int_s1.address
		output wire        mpu_int_s1_write,                                          //                                                    .write
		input  wire [31:0] mpu_int_s1_readdata,                                       //                                                    .readdata
		output wire [31:0] mpu_int_s1_writedata,                                      //                                                    .writedata
		output wire        mpu_int_s1_chipselect,                                     //                                                    .chipselect
		output wire [8:0]  nios2_gen2_debug_mem_slave_address,                        //                          nios2_gen2_debug_mem_slave.address
		output wire        nios2_gen2_debug_mem_slave_write,                          //                                                    .write
		output wire        nios2_gen2_debug_mem_slave_read,                           //                                                    .read
		input  wire [31:0] nios2_gen2_debug_mem_slave_readdata,                       //                                                    .readdata
		output wire [31:0] nios2_gen2_debug_mem_slave_writedata,                      //                                                    .writedata
		output wire [3:0]  nios2_gen2_debug_mem_slave_byteenable,                     //                                                    .byteenable
		input  wire        nios2_gen2_debug_mem_slave_waitrequest,                    //                                                    .waitrequest
		output wire        nios2_gen2_debug_mem_slave_debugaccess,                    //                                                    .debugaccess
		output wire [12:0] onchip_memory2_s1_address,                                 //                                   onchip_memory2_s1.address
		output wire        onchip_memory2_s1_write,                                   //                                                    .write
		input  wire [63:0] onchip_memory2_s1_readdata,                                //                                                    .readdata
		output wire [63:0] onchip_memory2_s1_writedata,                               //                                                    .writedata
		output wire [7:0]  onchip_memory2_s1_byteenable,                              //                                                    .byteenable
		output wire        onchip_memory2_s1_chipselect,                              //                                                    .chipselect
		output wire        onchip_memory2_s1_clken,                                   //                                                    .clken
		output wire [2:0]  seg7_slave_address,                                        //                                          seg7_slave.address
		output wire        seg7_slave_write,                                          //                                                    .write
		output wire        seg7_slave_read,                                           //                                                    .read
		input  wire [31:0] seg7_slave_readdata,                                       //                                                    .readdata
		output wire [31:0] seg7_slave_writedata,                                      //                                                    .writedata
		output wire [2:0]  spi_spi_control_port_address,                              //                                spi_spi_control_port.address
		output wire        spi_spi_control_port_write,                                //                                                    .write
		output wire        spi_spi_control_port_read,                                 //                                                    .read
		input  wire [15:0] spi_spi_control_port_readdata,                             //                                                    .readdata
		output wire [15:0] spi_spi_control_port_writedata,                            //                                                    .writedata
		output wire        spi_spi_control_port_chipselect,                           //                                                    .chipselect
		output wire [2:0]  spi_mpu_spi_control_port_address,                          //                            spi_mpu_spi_control_port.address
		output wire        spi_mpu_spi_control_port_write,                            //                                                    .write
		output wire        spi_mpu_spi_control_port_read,                             //                                                    .read
		input  wire [15:0] spi_mpu_spi_control_port_readdata,                         //                                                    .readdata
		output wire [15:0] spi_mpu_spi_control_port_writedata,                        //                                                    .writedata
		output wire        spi_mpu_spi_control_port_chipselect,                       //                                                    .chipselect
		output wire [1:0]  sw_s1_address,                                             //                                               sw_s1.address
		output wire        sw_s1_write,                                               //                                                    .write
		input  wire [31:0] sw_s1_readdata,                                            //                                                    .readdata
		output wire [31:0] sw_s1_writedata,                                           //                                                    .writedata
		output wire        sw_s1_chipselect,                                          //                                                    .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,                          //                            sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                         //                                                    .readdata
		output wire [2:0]  timer_s1_address,                                          //                                            timer_s1.address
		output wire        timer_s1_write,                                            //                                                    .write
		input  wire [15:0] timer_s1_readdata,                                         //                                                    .readdata
		output wire [15:0] timer_s1_writedata,                                        //                                                    .writedata
		output wire        timer_s1_chipselect,                                       //                                                    .chipselect
		output wire [2:0]  ts_i2c_avalon_slave_0_address,                             //                               ts_i2c_avalon_slave_0.address
		output wire        ts_i2c_avalon_slave_0_write,                               //                                                    .write
		input  wire [7:0]  ts_i2c_avalon_slave_0_readdata,                            //                                                    .readdata
		output wire [7:0]  ts_i2c_avalon_slave_0_writedata,                           //                                                    .writedata
		input  wire        ts_i2c_avalon_slave_0_waitrequest,                         //                                                    .waitrequest
		output wire        ts_i2c_avalon_slave_0_chipselect,                          //                                                    .chipselect
		output wire [1:0]  ts_interrupt_s1_address,                                   //                                     ts_interrupt_s1.address
		output wire        ts_interrupt_s1_write,                                     //                                                    .write
		input  wire [31:0] ts_interrupt_s1_readdata,                                  //                                                    .readdata
		output wire [31:0] ts_interrupt_s1_writedata,                                 //                                                    .writedata
		output wire        ts_interrupt_s1_chipselect,                                //                                                    .chipselect
		output wire [4:0]  tv_decoder_alt_vip_cl_cvi_0_control_address,               //                 tv_decoder_alt_vip_cl_cvi_0_control.address
		output wire        tv_decoder_alt_vip_cl_cvi_0_control_write,                 //                                                    .write
		output wire        tv_decoder_alt_vip_cl_cvi_0_control_read,                  //                                                    .read
		input  wire [31:0] tv_decoder_alt_vip_cl_cvi_0_control_readdata,              //                                                    .readdata
		output wire [31:0] tv_decoder_alt_vip_cl_cvi_0_control_writedata,             //                                                    .writedata
		output wire [3:0]  tv_decoder_alt_vip_cl_cvi_0_control_byteenable,            //                                                    .byteenable
		input  wire        tv_decoder_alt_vip_cl_cvi_0_control_waitrequest,           //                                                    .waitrequest
		output wire [6:0]  tv_decoder_alt_vip_cl_scl_0_control_address,               //                 tv_decoder_alt_vip_cl_scl_0_control.address
		output wire        tv_decoder_alt_vip_cl_scl_0_control_write,                 //                                                    .write
		output wire        tv_decoder_alt_vip_cl_scl_0_control_read,                  //                                                    .read
		input  wire [31:0] tv_decoder_alt_vip_cl_scl_0_control_readdata,              //                                                    .readdata
		output wire [31:0] tv_decoder_alt_vip_cl_scl_0_control_writedata,             //                                                    .writedata
		output wire [3:0]  tv_decoder_alt_vip_cl_scl_0_control_byteenable,            //                                                    .byteenable
		input  wire        tv_decoder_alt_vip_cl_scl_0_control_readdatavalid,         //                                                    .readdatavalid
		input  wire        tv_decoder_alt_vip_cl_scl_0_control_waitrequest,           //                                                    .waitrequest
		output wire [6:0]  tv_decoder_alt_vip_cl_scl_1_control_address,               //                 tv_decoder_alt_vip_cl_scl_1_control.address
		output wire        tv_decoder_alt_vip_cl_scl_1_control_write,                 //                                                    .write
		output wire        tv_decoder_alt_vip_cl_scl_1_control_read,                  //                                                    .read
		input  wire [31:0] tv_decoder_alt_vip_cl_scl_1_control_readdata,              //                                                    .readdata
		output wire [31:0] tv_decoder_alt_vip_cl_scl_1_control_writedata,             //                                                    .writedata
		output wire [3:0]  tv_decoder_alt_vip_cl_scl_1_control_byteenable,            //                                                    .byteenable
		input  wire        tv_decoder_alt_vip_cl_scl_1_control_readdatavalid,         //                                                    .readdatavalid
		input  wire        tv_decoder_alt_vip_cl_scl_1_control_waitrequest,           //                                                    .waitrequest
		output wire [4:0]  tv_decoder_alt_vip_cl_swi_0_control_address,               //                 tv_decoder_alt_vip_cl_swi_0_control.address
		output wire        tv_decoder_alt_vip_cl_swi_0_control_write,                 //                                                    .write
		output wire        tv_decoder_alt_vip_cl_swi_0_control_read,                  //                                                    .read
		input  wire [31:0] tv_decoder_alt_vip_cl_swi_0_control_readdata,              //                                                    .readdata
		output wire [31:0] tv_decoder_alt_vip_cl_swi_0_control_writedata,             //                                                    .writedata
		output wire [2:0]  tv_decoder_stream_capture_avalon_slave_address,            //              tv_decoder_stream_capture_avalon_slave.address
		output wire        tv_decoder_stream_capture_avalon_slave_write,              //                                                    .write
		output wire        tv_decoder_stream_capture_avalon_slave_read,               //                                                    .read
		input  wire [31:0] tv_decoder_stream_capture_avalon_slave_readdata,           //                                                    .readdata
		output wire [31:0] tv_decoder_stream_capture_avalon_slave_writedata,          //                                                    .writedata
		output wire        tv_decoder_stream_capture_avalon_slave_chipselect          //                                                    .chipselect
	);

	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_data_master_agent:av_waitrequest -> nios2_gen2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_data_master_agent:av_readdata -> nios2_gen2_data_master_translator:uav_readdata
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_data_master_translator:uav_debugaccess -> nios2_gen2_data_master_agent:av_debugaccess
	wire   [18:0] nios2_gen2_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_data_master_translator:uav_address -> nios2_gen2_data_master_agent:av_address
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_data_master_translator:uav_read -> nios2_gen2_data_master_agent:av_read
	wire    [3:0] nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_data_master_translator:uav_byteenable -> nios2_gen2_data_master_agent:av_byteenable
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_data_master_agent:av_readdatavalid -> nios2_gen2_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_data_master_translator:uav_lock -> nios2_gen2_data_master_agent:av_lock
	wire          nios2_gen2_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_data_master_translator:uav_write -> nios2_gen2_data_master_agent:av_write
	wire   [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_data_master_translator:uav_writedata -> nios2_gen2_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_data_master_translator:uav_burstcount -> nios2_gen2_data_master_agent:av_burstcount
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;                  // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;                     // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;                  // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [18:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;                      // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;                         // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;                   // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;                // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;                         // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;                        // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;                    // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;                   // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_instruction_master_agent:av_waitrequest -> nios2_gen2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_instruction_master_agent:av_readdata -> nios2_gen2_instruction_master_translator:uav_readdata
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_instruction_master_translator:uav_debugaccess -> nios2_gen2_instruction_master_agent:av_debugaccess
	wire   [18:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_instruction_master_translator:uav_address -> nios2_gen2_instruction_master_agent:av_address
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_instruction_master_translator:uav_read -> nios2_gen2_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_instruction_master_translator:uav_byteenable -> nios2_gen2_instruction_master_agent:av_byteenable
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_instruction_master_agent:av_readdatavalid -> nios2_gen2_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_instruction_master_translator:uav_lock -> nios2_gen2_instruction_master_agent:av_lock
	wire          nios2_gen2_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_instruction_master_translator:uav_write -> nios2_gen2_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_instruction_master_translator:uav_writedata -> nios2_gen2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_instruction_master_translator:uav_burstcount -> nios2_gen2_instruction_master_agent:av_burstcount
	wire   [31:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdata;                            // tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_readdata -> tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_readdata
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_waitrequest;                         // tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_waitrequest -> tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_waitrequest
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_debugaccess;                         // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_debugaccess -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_debugaccess
	wire   [18:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_address;                             // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_address -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_address
	wire    [3:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_byteenable;                          // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_byteenable -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_byteenable
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_read;                                // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_read -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_read
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdatavalid;                       // tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_readdatavalid -> tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_readdatavalid
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_lock;                                // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_lock -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_lock
	wire   [31:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_writedata;                           // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_writedata -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_writedata
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_write;                               // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_write -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_write
	wire    [2:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_burstcount;                          // tv_decoder_alt_vip_cl_cvi_0_control_agent:m0_burstcount -> tv_decoder_alt_vip_cl_cvi_0_control_translator:uav_burstcount
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_valid;                        // tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_source_valid -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:in_valid
	wire  [100:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_data;                         // tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_source_data -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:in_data
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_ready;                        // tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:in_ready -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_source_ready
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_startofpacket;                // tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_source_startofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:in_startofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_endofpacket;                  // tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_source_endofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:in_endofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_valid;                     // tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:out_valid -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_sink_valid
	wire  [100:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_data;                      // tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:out_data -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_sink_data
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_ready;                     // tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_sink_ready -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:out_ready
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_startofpacket;             // tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:out_startofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_sink_startofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_endofpacket;               // tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo:out_endofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rf_sink_endofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_valid;                   // tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_src_valid -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_data;                    // tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_src_data -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:in_data
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_ready;                   // tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:in_ready -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_valid
	wire   [99:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_data
	wire          cmd_mux_src_ready;                                                                // tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_ready -> cmd_mux:src_ready
	wire   [29:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> tv_decoder_alt_vip_cl_cvi_0_control_agent:cp_endofpacket
	wire   [31:0] tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdata;                            // tv_decoder_alt_vip_cl_scl_0_control_translator:uav_readdata -> tv_decoder_alt_vip_cl_scl_0_control_agent:m0_readdata
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_waitrequest;                         // tv_decoder_alt_vip_cl_scl_0_control_translator:uav_waitrequest -> tv_decoder_alt_vip_cl_scl_0_control_agent:m0_waitrequest
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_debugaccess;                         // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_debugaccess -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_debugaccess
	wire   [18:0] tv_decoder_alt_vip_cl_scl_0_control_agent_m0_address;                             // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_address -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_address
	wire    [3:0] tv_decoder_alt_vip_cl_scl_0_control_agent_m0_byteenable;                          // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_byteenable -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_byteenable
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_read;                                // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_read -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_read
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdatavalid;                       // tv_decoder_alt_vip_cl_scl_0_control_translator:uav_readdatavalid -> tv_decoder_alt_vip_cl_scl_0_control_agent:m0_readdatavalid
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_lock;                                // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_lock -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_lock
	wire   [31:0] tv_decoder_alt_vip_cl_scl_0_control_agent_m0_writedata;                           // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_writedata -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_writedata
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_m0_write;                               // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_write -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_write
	wire    [2:0] tv_decoder_alt_vip_cl_scl_0_control_agent_m0_burstcount;                          // tv_decoder_alt_vip_cl_scl_0_control_agent:m0_burstcount -> tv_decoder_alt_vip_cl_scl_0_control_translator:uav_burstcount
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_valid;                        // tv_decoder_alt_vip_cl_scl_0_control_agent:rf_source_valid -> tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:in_valid
	wire  [100:0] tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_data;                         // tv_decoder_alt_vip_cl_scl_0_control_agent:rf_source_data -> tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:in_data
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_ready;                        // tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:in_ready -> tv_decoder_alt_vip_cl_scl_0_control_agent:rf_source_ready
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_startofpacket;                // tv_decoder_alt_vip_cl_scl_0_control_agent:rf_source_startofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:in_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_endofpacket;                  // tv_decoder_alt_vip_cl_scl_0_control_agent:rf_source_endofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:in_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_valid;                     // tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:out_valid -> tv_decoder_alt_vip_cl_scl_0_control_agent:rf_sink_valid
	wire  [100:0] tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_data;                      // tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:out_data -> tv_decoder_alt_vip_cl_scl_0_control_agent:rf_sink_data
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_ready;                     // tv_decoder_alt_vip_cl_scl_0_control_agent:rf_sink_ready -> tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:out_ready
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_startofpacket;             // tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:out_startofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent:rf_sink_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_endofpacket;               // tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo:out_endofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent:rf_sink_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_valid;                   // tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_src_valid -> tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_data;                    // tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_src_data -> tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:in_data
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_ready;                   // tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:in_ready -> tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> tv_decoder_alt_vip_cl_scl_0_control_agent:cp_valid
	wire   [99:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> tv_decoder_alt_vip_cl_scl_0_control_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                            // tv_decoder_alt_vip_cl_scl_0_control_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [29:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> tv_decoder_alt_vip_cl_scl_0_control_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> tv_decoder_alt_vip_cl_scl_0_control_agent:cp_endofpacket
	wire   [31:0] tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdata;                            // tv_decoder_alt_vip_cl_scl_1_control_translator:uav_readdata -> tv_decoder_alt_vip_cl_scl_1_control_agent:m0_readdata
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_waitrequest;                         // tv_decoder_alt_vip_cl_scl_1_control_translator:uav_waitrequest -> tv_decoder_alt_vip_cl_scl_1_control_agent:m0_waitrequest
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_debugaccess;                         // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_debugaccess -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_debugaccess
	wire   [18:0] tv_decoder_alt_vip_cl_scl_1_control_agent_m0_address;                             // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_address -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_address
	wire    [3:0] tv_decoder_alt_vip_cl_scl_1_control_agent_m0_byteenable;                          // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_byteenable -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_byteenable
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_read;                                // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_read -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_read
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdatavalid;                       // tv_decoder_alt_vip_cl_scl_1_control_translator:uav_readdatavalid -> tv_decoder_alt_vip_cl_scl_1_control_agent:m0_readdatavalid
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_lock;                                // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_lock -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_lock
	wire   [31:0] tv_decoder_alt_vip_cl_scl_1_control_agent_m0_writedata;                           // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_writedata -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_writedata
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_m0_write;                               // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_write -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_write
	wire    [2:0] tv_decoder_alt_vip_cl_scl_1_control_agent_m0_burstcount;                          // tv_decoder_alt_vip_cl_scl_1_control_agent:m0_burstcount -> tv_decoder_alt_vip_cl_scl_1_control_translator:uav_burstcount
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_valid;                        // tv_decoder_alt_vip_cl_scl_1_control_agent:rf_source_valid -> tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:in_valid
	wire  [100:0] tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_data;                         // tv_decoder_alt_vip_cl_scl_1_control_agent:rf_source_data -> tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:in_data
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_ready;                        // tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:in_ready -> tv_decoder_alt_vip_cl_scl_1_control_agent:rf_source_ready
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_startofpacket;                // tv_decoder_alt_vip_cl_scl_1_control_agent:rf_source_startofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:in_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_endofpacket;                  // tv_decoder_alt_vip_cl_scl_1_control_agent:rf_source_endofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:in_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_valid;                     // tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:out_valid -> tv_decoder_alt_vip_cl_scl_1_control_agent:rf_sink_valid
	wire  [100:0] tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_data;                      // tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:out_data -> tv_decoder_alt_vip_cl_scl_1_control_agent:rf_sink_data
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_ready;                     // tv_decoder_alt_vip_cl_scl_1_control_agent:rf_sink_ready -> tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:out_ready
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_startofpacket;             // tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:out_startofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent:rf_sink_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_endofpacket;               // tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo:out_endofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent:rf_sink_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_valid;                   // tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_src_valid -> tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:in_valid
	wire   [33:0] tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_data;                    // tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_src_data -> tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:in_data
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_ready;                   // tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:in_ready -> tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> tv_decoder_alt_vip_cl_scl_1_control_agent:cp_valid
	wire   [99:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> tv_decoder_alt_vip_cl_scl_1_control_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                            // tv_decoder_alt_vip_cl_scl_1_control_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [29:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> tv_decoder_alt_vip_cl_scl_1_control_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> tv_decoder_alt_vip_cl_scl_1_control_agent:cp_endofpacket
	wire   [31:0] tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdata;                            // tv_decoder_alt_vip_cl_swi_0_control_translator:uav_readdata -> tv_decoder_alt_vip_cl_swi_0_control_agent:m0_readdata
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_waitrequest;                         // tv_decoder_alt_vip_cl_swi_0_control_translator:uav_waitrequest -> tv_decoder_alt_vip_cl_swi_0_control_agent:m0_waitrequest
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_debugaccess;                         // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_debugaccess -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_debugaccess
	wire   [18:0] tv_decoder_alt_vip_cl_swi_0_control_agent_m0_address;                             // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_address -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_address
	wire    [3:0] tv_decoder_alt_vip_cl_swi_0_control_agent_m0_byteenable;                          // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_byteenable -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_byteenable
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_read;                                // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_read -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_read
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdatavalid;                       // tv_decoder_alt_vip_cl_swi_0_control_translator:uav_readdatavalid -> tv_decoder_alt_vip_cl_swi_0_control_agent:m0_readdatavalid
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_lock;                                // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_lock -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_lock
	wire   [31:0] tv_decoder_alt_vip_cl_swi_0_control_agent_m0_writedata;                           // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_writedata -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_writedata
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_m0_write;                               // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_write -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_write
	wire    [2:0] tv_decoder_alt_vip_cl_swi_0_control_agent_m0_burstcount;                          // tv_decoder_alt_vip_cl_swi_0_control_agent:m0_burstcount -> tv_decoder_alt_vip_cl_swi_0_control_translator:uav_burstcount
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_valid;                        // tv_decoder_alt_vip_cl_swi_0_control_agent:rf_source_valid -> tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:in_valid
	wire  [100:0] tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_data;                         // tv_decoder_alt_vip_cl_swi_0_control_agent:rf_source_data -> tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:in_data
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_ready;                        // tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:in_ready -> tv_decoder_alt_vip_cl_swi_0_control_agent:rf_source_ready
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_startofpacket;                // tv_decoder_alt_vip_cl_swi_0_control_agent:rf_source_startofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:in_startofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_endofpacket;                  // tv_decoder_alt_vip_cl_swi_0_control_agent:rf_source_endofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:in_endofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_valid;                     // tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:out_valid -> tv_decoder_alt_vip_cl_swi_0_control_agent:rf_sink_valid
	wire  [100:0] tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_data;                      // tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:out_data -> tv_decoder_alt_vip_cl_swi_0_control_agent:rf_sink_data
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_ready;                     // tv_decoder_alt_vip_cl_swi_0_control_agent:rf_sink_ready -> tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:out_ready
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_startofpacket;             // tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:out_startofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent:rf_sink_startofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_endofpacket;               // tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo:out_endofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent:rf_sink_endofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_valid;                   // tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_src_valid -> tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_data;                    // tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_src_data -> tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:in_data
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_ready;                   // tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:in_ready -> tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> tv_decoder_alt_vip_cl_swi_0_control_agent:cp_valid
	wire   [99:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> tv_decoder_alt_vip_cl_swi_0_control_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                            // tv_decoder_alt_vip_cl_swi_0_control_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [29:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> tv_decoder_alt_vip_cl_swi_0_control_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> tv_decoder_alt_vip_cl_swi_0_control_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [18:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [100:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [100:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire   [99:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                            // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [29:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata;                              // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdata -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdata
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest;                           // i2c_opencores_mipi_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_mipi_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess;                           // i2c_opencores_mipi_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_mipi_avalon_slave_0_translator:uav_debugaccess
	wire   [18:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_address;                               // i2c_opencores_mipi_avalon_slave_0_agent:m0_address -> i2c_opencores_mipi_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable;                            // i2c_opencores_mipi_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_mipi_avalon_slave_0_translator:uav_byteenable
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_read;                                  // i2c_opencores_mipi_avalon_slave_0_agent:m0_read -> i2c_opencores_mipi_avalon_slave_0_translator:uav_read
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid;                         // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_lock;                                  // i2c_opencores_mipi_avalon_slave_0_agent:m0_lock -> i2c_opencores_mipi_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata;                             // i2c_opencores_mipi_avalon_slave_0_agent:m0_writedata -> i2c_opencores_mipi_avalon_slave_0_translator:uav_writedata
	wire          i2c_opencores_mipi_avalon_slave_0_agent_m0_write;                                 // i2c_opencores_mipi_avalon_slave_0_agent:m0_write -> i2c_opencores_mipi_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount;                            // i2c_opencores_mipi_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_mipi_avalon_slave_0_translator:uav_burstcount
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid;                          // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data;                           // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_data -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready;                          // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rf_source_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket;                  // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket;                    // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid;                       // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data;                        // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready;                       // i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket;               // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                 // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> i2c_opencores_mipi_avalon_slave_0_agent:cp_valid
	wire   [99:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> i2c_opencores_mipi_avalon_slave_0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                            // i2c_opencores_mipi_avalon_slave_0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [29:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> i2c_opencores_mipi_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_readdata;                            // i2c_opencores_camera_avalon_slave_0_translator:uav_readdata -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdata
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest;                         // i2c_opencores_camera_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_camera_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess;                         // i2c_opencores_camera_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_camera_avalon_slave_0_translator:uav_debugaccess
	wire   [18:0] i2c_opencores_camera_avalon_slave_0_agent_m0_address;                             // i2c_opencores_camera_avalon_slave_0_agent:m0_address -> i2c_opencores_camera_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable;                          // i2c_opencores_camera_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_camera_avalon_slave_0_translator:uav_byteenable
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_read;                                // i2c_opencores_camera_avalon_slave_0_agent:m0_read -> i2c_opencores_camera_avalon_slave_0_translator:uav_read
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid;                       // i2c_opencores_camera_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_lock;                                // i2c_opencores_camera_avalon_slave_0_agent:m0_lock -> i2c_opencores_camera_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_writedata;                           // i2c_opencores_camera_avalon_slave_0_agent:m0_writedata -> i2c_opencores_camera_avalon_slave_0_translator:uav_writedata
	wire          i2c_opencores_camera_avalon_slave_0_agent_m0_write;                               // i2c_opencores_camera_avalon_slave_0_agent:m0_write -> i2c_opencores_camera_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount;                          // i2c_opencores_camera_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_camera_avalon_slave_0_translator:uav_burstcount
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid;                        // i2c_opencores_camera_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] i2c_opencores_camera_avalon_slave_0_agent_rf_source_data;                         // i2c_opencores_camera_avalon_slave_0_agent:rf_source_data -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready;                        // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_camera_avalon_slave_0_agent:rf_source_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket;                // i2c_opencores_camera_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket;                  // i2c_opencores_camera_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid;                     // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data;                      // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready;                     // i2c_opencores_camera_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket;             // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket;               // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> i2c_opencores_camera_avalon_slave_0_agent:cp_valid
	wire   [99:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> i2c_opencores_camera_avalon_slave_0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                            // i2c_opencores_camera_avalon_slave_0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [29:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> i2c_opencores_camera_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] alt_vip_cl_mixer_0_control_agent_m0_readdata;                                     // alt_vip_cl_mixer_0_control_translator:uav_readdata -> alt_vip_cl_mixer_0_control_agent:m0_readdata
	wire          alt_vip_cl_mixer_0_control_agent_m0_waitrequest;                                  // alt_vip_cl_mixer_0_control_translator:uav_waitrequest -> alt_vip_cl_mixer_0_control_agent:m0_waitrequest
	wire          alt_vip_cl_mixer_0_control_agent_m0_debugaccess;                                  // alt_vip_cl_mixer_0_control_agent:m0_debugaccess -> alt_vip_cl_mixer_0_control_translator:uav_debugaccess
	wire   [18:0] alt_vip_cl_mixer_0_control_agent_m0_address;                                      // alt_vip_cl_mixer_0_control_agent:m0_address -> alt_vip_cl_mixer_0_control_translator:uav_address
	wire    [3:0] alt_vip_cl_mixer_0_control_agent_m0_byteenable;                                   // alt_vip_cl_mixer_0_control_agent:m0_byteenable -> alt_vip_cl_mixer_0_control_translator:uav_byteenable
	wire          alt_vip_cl_mixer_0_control_agent_m0_read;                                         // alt_vip_cl_mixer_0_control_agent:m0_read -> alt_vip_cl_mixer_0_control_translator:uav_read
	wire          alt_vip_cl_mixer_0_control_agent_m0_readdatavalid;                                // alt_vip_cl_mixer_0_control_translator:uav_readdatavalid -> alt_vip_cl_mixer_0_control_agent:m0_readdatavalid
	wire          alt_vip_cl_mixer_0_control_agent_m0_lock;                                         // alt_vip_cl_mixer_0_control_agent:m0_lock -> alt_vip_cl_mixer_0_control_translator:uav_lock
	wire   [31:0] alt_vip_cl_mixer_0_control_agent_m0_writedata;                                    // alt_vip_cl_mixer_0_control_agent:m0_writedata -> alt_vip_cl_mixer_0_control_translator:uav_writedata
	wire          alt_vip_cl_mixer_0_control_agent_m0_write;                                        // alt_vip_cl_mixer_0_control_agent:m0_write -> alt_vip_cl_mixer_0_control_translator:uav_write
	wire    [2:0] alt_vip_cl_mixer_0_control_agent_m0_burstcount;                                   // alt_vip_cl_mixer_0_control_agent:m0_burstcount -> alt_vip_cl_mixer_0_control_translator:uav_burstcount
	wire          alt_vip_cl_mixer_0_control_agent_rf_source_valid;                                 // alt_vip_cl_mixer_0_control_agent:rf_source_valid -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_valid
	wire  [100:0] alt_vip_cl_mixer_0_control_agent_rf_source_data;                                  // alt_vip_cl_mixer_0_control_agent:rf_source_data -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_data
	wire          alt_vip_cl_mixer_0_control_agent_rf_source_ready;                                 // alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_ready -> alt_vip_cl_mixer_0_control_agent:rf_source_ready
	wire          alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket;                         // alt_vip_cl_mixer_0_control_agent:rf_source_startofpacket -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket;                           // alt_vip_cl_mixer_0_control_agent:rf_source_endofpacket -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid;                              // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_valid -> alt_vip_cl_mixer_0_control_agent:rf_sink_valid
	wire  [100:0] alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data;                               // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_data -> alt_vip_cl_mixer_0_control_agent:rf_sink_data
	wire          alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready;                              // alt_vip_cl_mixer_0_control_agent:rf_sink_ready -> alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_ready
	wire          alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket;                      // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_startofpacket -> alt_vip_cl_mixer_0_control_agent:rf_sink_startofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket;                        // alt_vip_cl_mixer_0_control_agent_rsp_fifo:out_endofpacket -> alt_vip_cl_mixer_0_control_agent:rf_sink_endofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid;                            // alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_valid -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data;                             // alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_data -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_data
	wire          alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready;                            // alt_vip_cl_mixer_0_control_agent_rdata_fifo:in_ready -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> alt_vip_cl_mixer_0_control_agent:cp_valid
	wire   [99:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> alt_vip_cl_mixer_0_control_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                            // alt_vip_cl_mixer_0_control_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [29:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> alt_vip_cl_mixer_0_control_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> alt_vip_cl_mixer_0_control_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> alt_vip_cl_mixer_0_control_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                       // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [18:0] sysid_qsys_control_slave_agent_m0_address;                                        // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                     // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                           // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                           // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                      // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                          // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                     // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                   // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [100:0] sysid_qsys_control_slave_agent_rf_source_data;                                    // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                   // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [100:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire   [99:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                            // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [29:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_debug_mem_slave_translator:uav_readdata -> nios2_gen2_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_debug_mem_slave_translator:uav_debugaccess
	wire   [18:0] nios2_gen2_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_debug_mem_slave_agent:m0_address -> nios2_gen2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_debug_mem_slave_agent:m0_read -> nios2_gen2_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_debug_mem_slave_agent:m0_lock -> nios2_gen2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_debug_mem_slave_agent:m0_writedata -> nios2_gen2_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_debug_mem_slave_agent:m0_write -> nios2_gen2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [100:0] nios2_gen2_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_debug_mem_slave_agent:rf_source_data -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_debug_mem_slave_agent:rf_sink_valid
	wire  [100:0] nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> nios2_gen2_debug_mem_slave_agent:cp_valid
	wire   [99:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> nios2_gen2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                            // nios2_gen2_debug_mem_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [29:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> nios2_gen2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> nios2_gen2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> nios2_gen2_debug_mem_slave_agent:cp_endofpacket
	wire   [63:0] onchip_memory2_s1_agent_m0_readdata;                                              // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_agent:m0_readdata
	wire          onchip_memory2_s1_agent_m0_waitrequest;                                           // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_agent:m0_waitrequest
	wire          onchip_memory2_s1_agent_m0_debugaccess;                                           // onchip_memory2_s1_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire   [18:0] onchip_memory2_s1_agent_m0_address;                                               // onchip_memory2_s1_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire    [7:0] onchip_memory2_s1_agent_m0_byteenable;                                            // onchip_memory2_s1_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_agent_m0_read;                                                  // onchip_memory2_s1_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire          onchip_memory2_s1_agent_m0_readdatavalid;                                         // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_agent:m0_readdatavalid
	wire          onchip_memory2_s1_agent_m0_lock;                                                  // onchip_memory2_s1_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire   [63:0] onchip_memory2_s1_agent_m0_writedata;                                             // onchip_memory2_s1_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire          onchip_memory2_s1_agent_m0_write;                                                 // onchip_memory2_s1_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire    [3:0] onchip_memory2_s1_agent_m0_burstcount;                                            // onchip_memory2_s1_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire          onchip_memory2_s1_agent_rf_source_valid;                                          // onchip_memory2_s1_agent:rf_source_valid -> onchip_memory2_s1_agent_rsp_fifo:in_valid
	wire  [136:0] onchip_memory2_s1_agent_rf_source_data;                                           // onchip_memory2_s1_agent:rf_source_data -> onchip_memory2_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_agent_rf_source_ready;                                          // onchip_memory2_s1_agent_rsp_fifo:in_ready -> onchip_memory2_s1_agent:rf_source_ready
	wire          onchip_memory2_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_s1_agent:rf_source_startofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_s1_agent:rf_source_endofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_s1_agent_rsp_fifo:out_valid -> onchip_memory2_s1_agent:rf_sink_valid
	wire  [136:0] onchip_memory2_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_s1_agent_rsp_fifo:out_data -> onchip_memory2_s1_agent:rf_sink_data
	wire          onchip_memory2_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_s1_agent:rf_sink_ready -> onchip_memory2_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_agent:rf_sink_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                       // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                    // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                    // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [18:0] timer_s1_agent_m0_address;                                                        // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                     // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                           // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                  // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                           // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                      // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                          // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                     // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                   // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [100:0] timer_s1_agent_rf_source_data;                                                    // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                   // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                           // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                             // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [100:0] timer_s1_agent_rsp_fifo_out_data;                                                 // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> timer_s1_agent:cp_valid
	wire   [99:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> timer_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                            // timer_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [29:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> timer_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire   [31:0] ledr_s1_agent_m0_readdata;                                                        // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire          ledr_s1_agent_m0_waitrequest;                                                     // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire          ledr_s1_agent_m0_debugaccess;                                                     // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [18:0] ledr_s1_agent_m0_address;                                                         // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire    [3:0] ledr_s1_agent_m0_byteenable;                                                      // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire          ledr_s1_agent_m0_read;                                                            // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire          ledr_s1_agent_m0_readdatavalid;                                                   // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire          ledr_s1_agent_m0_lock;                                                            // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire   [31:0] ledr_s1_agent_m0_writedata;                                                       // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire          ledr_s1_agent_m0_write;                                                           // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire    [2:0] ledr_s1_agent_m0_burstcount;                                                      // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire          ledr_s1_agent_rf_source_valid;                                                    // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [100:0] ledr_s1_agent_rf_source_data;                                                     // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire          ledr_s1_agent_rf_source_ready;                                                    // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire          ledr_s1_agent_rf_source_startofpacket;                                            // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire          ledr_s1_agent_rf_source_endofpacket;                                              // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire          ledr_s1_agent_rsp_fifo_out_valid;                                                 // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [100:0] ledr_s1_agent_rsp_fifo_out_data;                                                  // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire          ledr_s1_agent_rsp_fifo_out_ready;                                                 // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire          ledr_s1_agent_rsp_fifo_out_startofpacket;                                         // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire          ledr_s1_agent_rsp_fifo_out_endofpacket;                                           // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> ledr_s1_agent:cp_valid
	wire   [99:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> ledr_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                            // ledr_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [29:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> ledr_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire   [31:0] camera_pwdn_n_s1_agent_m0_readdata;                                               // camera_pwdn_n_s1_translator:uav_readdata -> camera_pwdn_n_s1_agent:m0_readdata
	wire          camera_pwdn_n_s1_agent_m0_waitrequest;                                            // camera_pwdn_n_s1_translator:uav_waitrequest -> camera_pwdn_n_s1_agent:m0_waitrequest
	wire          camera_pwdn_n_s1_agent_m0_debugaccess;                                            // camera_pwdn_n_s1_agent:m0_debugaccess -> camera_pwdn_n_s1_translator:uav_debugaccess
	wire   [18:0] camera_pwdn_n_s1_agent_m0_address;                                                // camera_pwdn_n_s1_agent:m0_address -> camera_pwdn_n_s1_translator:uav_address
	wire    [3:0] camera_pwdn_n_s1_agent_m0_byteenable;                                             // camera_pwdn_n_s1_agent:m0_byteenable -> camera_pwdn_n_s1_translator:uav_byteenable
	wire          camera_pwdn_n_s1_agent_m0_read;                                                   // camera_pwdn_n_s1_agent:m0_read -> camera_pwdn_n_s1_translator:uav_read
	wire          camera_pwdn_n_s1_agent_m0_readdatavalid;                                          // camera_pwdn_n_s1_translator:uav_readdatavalid -> camera_pwdn_n_s1_agent:m0_readdatavalid
	wire          camera_pwdn_n_s1_agent_m0_lock;                                                   // camera_pwdn_n_s1_agent:m0_lock -> camera_pwdn_n_s1_translator:uav_lock
	wire   [31:0] camera_pwdn_n_s1_agent_m0_writedata;                                              // camera_pwdn_n_s1_agent:m0_writedata -> camera_pwdn_n_s1_translator:uav_writedata
	wire          camera_pwdn_n_s1_agent_m0_write;                                                  // camera_pwdn_n_s1_agent:m0_write -> camera_pwdn_n_s1_translator:uav_write
	wire    [2:0] camera_pwdn_n_s1_agent_m0_burstcount;                                             // camera_pwdn_n_s1_agent:m0_burstcount -> camera_pwdn_n_s1_translator:uav_burstcount
	wire          camera_pwdn_n_s1_agent_rf_source_valid;                                           // camera_pwdn_n_s1_agent:rf_source_valid -> camera_pwdn_n_s1_agent_rsp_fifo:in_valid
	wire  [100:0] camera_pwdn_n_s1_agent_rf_source_data;                                            // camera_pwdn_n_s1_agent:rf_source_data -> camera_pwdn_n_s1_agent_rsp_fifo:in_data
	wire          camera_pwdn_n_s1_agent_rf_source_ready;                                           // camera_pwdn_n_s1_agent_rsp_fifo:in_ready -> camera_pwdn_n_s1_agent:rf_source_ready
	wire          camera_pwdn_n_s1_agent_rf_source_startofpacket;                                   // camera_pwdn_n_s1_agent:rf_source_startofpacket -> camera_pwdn_n_s1_agent_rsp_fifo:in_startofpacket
	wire          camera_pwdn_n_s1_agent_rf_source_endofpacket;                                     // camera_pwdn_n_s1_agent:rf_source_endofpacket -> camera_pwdn_n_s1_agent_rsp_fifo:in_endofpacket
	wire          camera_pwdn_n_s1_agent_rsp_fifo_out_valid;                                        // camera_pwdn_n_s1_agent_rsp_fifo:out_valid -> camera_pwdn_n_s1_agent:rf_sink_valid
	wire  [100:0] camera_pwdn_n_s1_agent_rsp_fifo_out_data;                                         // camera_pwdn_n_s1_agent_rsp_fifo:out_data -> camera_pwdn_n_s1_agent:rf_sink_data
	wire          camera_pwdn_n_s1_agent_rsp_fifo_out_ready;                                        // camera_pwdn_n_s1_agent:rf_sink_ready -> camera_pwdn_n_s1_agent_rsp_fifo:out_ready
	wire          camera_pwdn_n_s1_agent_rsp_fifo_out_startofpacket;                                // camera_pwdn_n_s1_agent_rsp_fifo:out_startofpacket -> camera_pwdn_n_s1_agent:rf_sink_startofpacket
	wire          camera_pwdn_n_s1_agent_rsp_fifo_out_endofpacket;                                  // camera_pwdn_n_s1_agent_rsp_fifo:out_endofpacket -> camera_pwdn_n_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> camera_pwdn_n_s1_agent:cp_valid
	wire   [99:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> camera_pwdn_n_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                            // camera_pwdn_n_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [29:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> camera_pwdn_n_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> camera_pwdn_n_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> camera_pwdn_n_s1_agent:cp_endofpacket
	wire   [31:0] mipi_reset_n_s1_agent_m0_readdata;                                                // mipi_reset_n_s1_translator:uav_readdata -> mipi_reset_n_s1_agent:m0_readdata
	wire          mipi_reset_n_s1_agent_m0_waitrequest;                                             // mipi_reset_n_s1_translator:uav_waitrequest -> mipi_reset_n_s1_agent:m0_waitrequest
	wire          mipi_reset_n_s1_agent_m0_debugaccess;                                             // mipi_reset_n_s1_agent:m0_debugaccess -> mipi_reset_n_s1_translator:uav_debugaccess
	wire   [18:0] mipi_reset_n_s1_agent_m0_address;                                                 // mipi_reset_n_s1_agent:m0_address -> mipi_reset_n_s1_translator:uav_address
	wire    [3:0] mipi_reset_n_s1_agent_m0_byteenable;                                              // mipi_reset_n_s1_agent:m0_byteenable -> mipi_reset_n_s1_translator:uav_byteenable
	wire          mipi_reset_n_s1_agent_m0_read;                                                    // mipi_reset_n_s1_agent:m0_read -> mipi_reset_n_s1_translator:uav_read
	wire          mipi_reset_n_s1_agent_m0_readdatavalid;                                           // mipi_reset_n_s1_translator:uav_readdatavalid -> mipi_reset_n_s1_agent:m0_readdatavalid
	wire          mipi_reset_n_s1_agent_m0_lock;                                                    // mipi_reset_n_s1_agent:m0_lock -> mipi_reset_n_s1_translator:uav_lock
	wire   [31:0] mipi_reset_n_s1_agent_m0_writedata;                                               // mipi_reset_n_s1_agent:m0_writedata -> mipi_reset_n_s1_translator:uav_writedata
	wire          mipi_reset_n_s1_agent_m0_write;                                                   // mipi_reset_n_s1_agent:m0_write -> mipi_reset_n_s1_translator:uav_write
	wire    [2:0] mipi_reset_n_s1_agent_m0_burstcount;                                              // mipi_reset_n_s1_agent:m0_burstcount -> mipi_reset_n_s1_translator:uav_burstcount
	wire          mipi_reset_n_s1_agent_rf_source_valid;                                            // mipi_reset_n_s1_agent:rf_source_valid -> mipi_reset_n_s1_agent_rsp_fifo:in_valid
	wire  [100:0] mipi_reset_n_s1_agent_rf_source_data;                                             // mipi_reset_n_s1_agent:rf_source_data -> mipi_reset_n_s1_agent_rsp_fifo:in_data
	wire          mipi_reset_n_s1_agent_rf_source_ready;                                            // mipi_reset_n_s1_agent_rsp_fifo:in_ready -> mipi_reset_n_s1_agent:rf_source_ready
	wire          mipi_reset_n_s1_agent_rf_source_startofpacket;                                    // mipi_reset_n_s1_agent:rf_source_startofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_startofpacket
	wire          mipi_reset_n_s1_agent_rf_source_endofpacket;                                      // mipi_reset_n_s1_agent:rf_source_endofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_endofpacket
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_valid;                                         // mipi_reset_n_s1_agent_rsp_fifo:out_valid -> mipi_reset_n_s1_agent:rf_sink_valid
	wire  [100:0] mipi_reset_n_s1_agent_rsp_fifo_out_data;                                          // mipi_reset_n_s1_agent_rsp_fifo:out_data -> mipi_reset_n_s1_agent:rf_sink_data
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_ready;                                         // mipi_reset_n_s1_agent:rf_sink_ready -> mipi_reset_n_s1_agent_rsp_fifo:out_ready
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket;                                 // mipi_reset_n_s1_agent_rsp_fifo:out_startofpacket -> mipi_reset_n_s1_agent:rf_sink_startofpacket
	wire          mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket;                                   // mipi_reset_n_s1_agent_rsp_fifo:out_endofpacket -> mipi_reset_n_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> mipi_reset_n_s1_agent:cp_valid
	wire   [99:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> mipi_reset_n_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                            // mipi_reset_n_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [29:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> mipi_reset_n_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> mipi_reset_n_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> mipi_reset_n_s1_agent:cp_endofpacket
	wire    [4:0] terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr;                     // TERASIC_ALSA_apb_slave_clkctrl_agent:paddr -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_paddr
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pready;                    // TERASIC_ALSA_apb_slave_clkctrl_translator:s0_pready -> TERASIC_ALSA_apb_slave_clkctrl_agent:pready
	wire   [31:0] terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_prdata;                    // TERASIC_ALSA_apb_slave_clkctrl_translator:s0_prdata -> TERASIC_ALSA_apb_slave_clkctrl_agent:prdata
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pslverr;                   // TERASIC_ALSA_apb_slave_clkctrl_translator:s0_pslverr -> TERASIC_ALSA_apb_slave_clkctrl_agent:pslverr
	wire   [31:0] terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwdata;                    // TERASIC_ALSA_apb_slave_clkctrl_agent:pwdata -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_pwdata
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_penable;                   // TERASIC_ALSA_apb_slave_clkctrl_agent:penable -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_penable
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_psel;                      // TERASIC_ALSA_apb_slave_clkctrl_agent:psel -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_psel
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwrite;                    // TERASIC_ALSA_apb_slave_clkctrl_agent:pwrite -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_pwrite
	wire          terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr31;                   // TERASIC_ALSA_apb_slave_clkctrl_agent:paddr31 -> TERASIC_ALSA_apb_slave_clkctrl_translator:s0_paddr31
	wire          cmd_mux_015_src_valid;                                                            // cmd_mux_015:src_valid -> TERASIC_ALSA_apb_slave_clkctrl_agent:cp_valid
	wire   [99:0] cmd_mux_015_src_data;                                                             // cmd_mux_015:src_data -> TERASIC_ALSA_apb_slave_clkctrl_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                            // TERASIC_ALSA_apb_slave_clkctrl_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [29:0] cmd_mux_015_src_channel;                                                          // cmd_mux_015:src_channel -> TERASIC_ALSA_apb_slave_clkctrl_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                    // cmd_mux_015:src_startofpacket -> TERASIC_ALSA_apb_slave_clkctrl_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                      // cmd_mux_015:src_endofpacket -> TERASIC_ALSA_apb_slave_clkctrl_agent:cp_endofpacket
	wire    [4:0] terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr;                      // TERASIC_ALSA_apb_slave_output_agent:paddr -> TERASIC_ALSA_apb_slave_output_translator:s0_paddr
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_pready;                     // TERASIC_ALSA_apb_slave_output_translator:s0_pready -> TERASIC_ALSA_apb_slave_output_agent:pready
	wire   [31:0] terasic_alsa_apb_slave_output_agent_altera_apb_master_prdata;                     // TERASIC_ALSA_apb_slave_output_translator:s0_prdata -> TERASIC_ALSA_apb_slave_output_agent:prdata
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_pslverr;                    // TERASIC_ALSA_apb_slave_output_translator:s0_pslverr -> TERASIC_ALSA_apb_slave_output_agent:pslverr
	wire   [31:0] terasic_alsa_apb_slave_output_agent_altera_apb_master_pwdata;                     // TERASIC_ALSA_apb_slave_output_agent:pwdata -> TERASIC_ALSA_apb_slave_output_translator:s0_pwdata
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_penable;                    // TERASIC_ALSA_apb_slave_output_agent:penable -> TERASIC_ALSA_apb_slave_output_translator:s0_penable
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_psel;                       // TERASIC_ALSA_apb_slave_output_agent:psel -> TERASIC_ALSA_apb_slave_output_translator:s0_psel
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_pwrite;                     // TERASIC_ALSA_apb_slave_output_agent:pwrite -> TERASIC_ALSA_apb_slave_output_translator:s0_pwrite
	wire          terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr31;                    // TERASIC_ALSA_apb_slave_output_agent:paddr31 -> TERASIC_ALSA_apb_slave_output_translator:s0_paddr31
	wire          cmd_mux_016_src_valid;                                                            // cmd_mux_016:src_valid -> TERASIC_ALSA_apb_slave_output_agent:cp_valid
	wire   [99:0] cmd_mux_016_src_data;                                                             // cmd_mux_016:src_data -> TERASIC_ALSA_apb_slave_output_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                            // TERASIC_ALSA_apb_slave_output_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [29:0] cmd_mux_016_src_channel;                                                          // cmd_mux_016:src_channel -> TERASIC_ALSA_apb_slave_output_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                    // cmd_mux_016:src_startofpacket -> TERASIC_ALSA_apb_slave_output_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                      // cmd_mux_016:src_endofpacket -> TERASIC_ALSA_apb_slave_output_agent:cp_endofpacket
	wire   [31:0] alt_vip_vfr_vga_avalon_slave_agent_m0_readdata;                                   // alt_vip_vfr_vga_avalon_slave_translator:uav_readdata -> alt_vip_vfr_vga_avalon_slave_agent:m0_readdata
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest;                                // alt_vip_vfr_vga_avalon_slave_translator:uav_waitrequest -> alt_vip_vfr_vga_avalon_slave_agent:m0_waitrequest
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess;                                // alt_vip_vfr_vga_avalon_slave_agent:m0_debugaccess -> alt_vip_vfr_vga_avalon_slave_translator:uav_debugaccess
	wire   [18:0] alt_vip_vfr_vga_avalon_slave_agent_m0_address;                                    // alt_vip_vfr_vga_avalon_slave_agent:m0_address -> alt_vip_vfr_vga_avalon_slave_translator:uav_address
	wire    [3:0] alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable;                                 // alt_vip_vfr_vga_avalon_slave_agent:m0_byteenable -> alt_vip_vfr_vga_avalon_slave_translator:uav_byteenable
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_read;                                       // alt_vip_vfr_vga_avalon_slave_agent:m0_read -> alt_vip_vfr_vga_avalon_slave_translator:uav_read
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid;                              // alt_vip_vfr_vga_avalon_slave_translator:uav_readdatavalid -> alt_vip_vfr_vga_avalon_slave_agent:m0_readdatavalid
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_lock;                                       // alt_vip_vfr_vga_avalon_slave_agent:m0_lock -> alt_vip_vfr_vga_avalon_slave_translator:uav_lock
	wire   [31:0] alt_vip_vfr_vga_avalon_slave_agent_m0_writedata;                                  // alt_vip_vfr_vga_avalon_slave_agent:m0_writedata -> alt_vip_vfr_vga_avalon_slave_translator:uav_writedata
	wire          alt_vip_vfr_vga_avalon_slave_agent_m0_write;                                      // alt_vip_vfr_vga_avalon_slave_agent:m0_write -> alt_vip_vfr_vga_avalon_slave_translator:uav_write
	wire    [2:0] alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount;                                 // alt_vip_vfr_vga_avalon_slave_agent:m0_burstcount -> alt_vip_vfr_vga_avalon_slave_translator:uav_burstcount
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid;                               // alt_vip_vfr_vga_avalon_slave_agent:rf_source_valid -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_valid
	wire  [100:0] alt_vip_vfr_vga_avalon_slave_agent_rf_source_data;                                // alt_vip_vfr_vga_avalon_slave_agent:rf_source_data -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready;                               // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_ready -> alt_vip_vfr_vga_avalon_slave_agent:rf_source_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket;                       // alt_vip_vfr_vga_avalon_slave_agent:rf_source_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket;                         // alt_vip_vfr_vga_avalon_slave_agent:rf_source_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid;                            // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_valid -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_valid
	wire  [100:0] alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data;                             // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_data -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready;                            // alt_vip_vfr_vga_avalon_slave_agent:rf_sink_ready -> alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket;                    // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket;                      // alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo:out_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent:rf_sink_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid;                          // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_valid -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data;                           // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_data -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready;                          // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:in_ready -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                            // cmd_mux_017:src_valid -> alt_vip_vfr_vga_avalon_slave_agent:cp_valid
	wire   [99:0] cmd_mux_017_src_data;                                                             // cmd_mux_017:src_data -> alt_vip_vfr_vga_avalon_slave_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                            // alt_vip_vfr_vga_avalon_slave_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [29:0] cmd_mux_017_src_channel;                                                          // cmd_mux_017:src_channel -> alt_vip_vfr_vga_avalon_slave_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                    // cmd_mux_017:src_startofpacket -> alt_vip_vfr_vga_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                      // cmd_mux_017:src_endofpacket -> alt_vip_vfr_vga_avalon_slave_agent:cp_endofpacket
	wire   [31:0] ir_rx_avalon_slave_agent_m0_readdata;                                             // ir_rx_avalon_slave_translator:uav_readdata -> ir_rx_avalon_slave_agent:m0_readdata
	wire          ir_rx_avalon_slave_agent_m0_waitrequest;                                          // ir_rx_avalon_slave_translator:uav_waitrequest -> ir_rx_avalon_slave_agent:m0_waitrequest
	wire          ir_rx_avalon_slave_agent_m0_debugaccess;                                          // ir_rx_avalon_slave_agent:m0_debugaccess -> ir_rx_avalon_slave_translator:uav_debugaccess
	wire   [18:0] ir_rx_avalon_slave_agent_m0_address;                                              // ir_rx_avalon_slave_agent:m0_address -> ir_rx_avalon_slave_translator:uav_address
	wire    [3:0] ir_rx_avalon_slave_agent_m0_byteenable;                                           // ir_rx_avalon_slave_agent:m0_byteenable -> ir_rx_avalon_slave_translator:uav_byteenable
	wire          ir_rx_avalon_slave_agent_m0_read;                                                 // ir_rx_avalon_slave_agent:m0_read -> ir_rx_avalon_slave_translator:uav_read
	wire          ir_rx_avalon_slave_agent_m0_readdatavalid;                                        // ir_rx_avalon_slave_translator:uav_readdatavalid -> ir_rx_avalon_slave_agent:m0_readdatavalid
	wire          ir_rx_avalon_slave_agent_m0_lock;                                                 // ir_rx_avalon_slave_agent:m0_lock -> ir_rx_avalon_slave_translator:uav_lock
	wire   [31:0] ir_rx_avalon_slave_agent_m0_writedata;                                            // ir_rx_avalon_slave_agent:m0_writedata -> ir_rx_avalon_slave_translator:uav_writedata
	wire          ir_rx_avalon_slave_agent_m0_write;                                                // ir_rx_avalon_slave_agent:m0_write -> ir_rx_avalon_slave_translator:uav_write
	wire    [2:0] ir_rx_avalon_slave_agent_m0_burstcount;                                           // ir_rx_avalon_slave_agent:m0_burstcount -> ir_rx_avalon_slave_translator:uav_burstcount
	wire          ir_rx_avalon_slave_agent_rf_source_valid;                                         // ir_rx_avalon_slave_agent:rf_source_valid -> ir_rx_avalon_slave_agent_rsp_fifo:in_valid
	wire  [100:0] ir_rx_avalon_slave_agent_rf_source_data;                                          // ir_rx_avalon_slave_agent:rf_source_data -> ir_rx_avalon_slave_agent_rsp_fifo:in_data
	wire          ir_rx_avalon_slave_agent_rf_source_ready;                                         // ir_rx_avalon_slave_agent_rsp_fifo:in_ready -> ir_rx_avalon_slave_agent:rf_source_ready
	wire          ir_rx_avalon_slave_agent_rf_source_startofpacket;                                 // ir_rx_avalon_slave_agent:rf_source_startofpacket -> ir_rx_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          ir_rx_avalon_slave_agent_rf_source_endofpacket;                                   // ir_rx_avalon_slave_agent:rf_source_endofpacket -> ir_rx_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          ir_rx_avalon_slave_agent_rsp_fifo_out_valid;                                      // ir_rx_avalon_slave_agent_rsp_fifo:out_valid -> ir_rx_avalon_slave_agent:rf_sink_valid
	wire  [100:0] ir_rx_avalon_slave_agent_rsp_fifo_out_data;                                       // ir_rx_avalon_slave_agent_rsp_fifo:out_data -> ir_rx_avalon_slave_agent:rf_sink_data
	wire          ir_rx_avalon_slave_agent_rsp_fifo_out_ready;                                      // ir_rx_avalon_slave_agent:rf_sink_ready -> ir_rx_avalon_slave_agent_rsp_fifo:out_ready
	wire          ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket;                              // ir_rx_avalon_slave_agent_rsp_fifo:out_startofpacket -> ir_rx_avalon_slave_agent:rf_sink_startofpacket
	wire          ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket;                                // ir_rx_avalon_slave_agent_rsp_fifo:out_endofpacket -> ir_rx_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                            // cmd_mux_018:src_valid -> ir_rx_avalon_slave_agent:cp_valid
	wire   [99:0] cmd_mux_018_src_data;                                                             // cmd_mux_018:src_data -> ir_rx_avalon_slave_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                            // ir_rx_avalon_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [29:0] cmd_mux_018_src_channel;                                                          // cmd_mux_018:src_channel -> ir_rx_avalon_slave_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                    // cmd_mux_018:src_startofpacket -> ir_rx_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                      // cmd_mux_018:src_endofpacket -> ir_rx_avalon_slave_agent:cp_endofpacket
	wire   [31:0] ts_i2c_avalon_slave_0_agent_m0_readdata;                                          // ts_i2c_avalon_slave_0_translator:uav_readdata -> ts_i2c_avalon_slave_0_agent:m0_readdata
	wire          ts_i2c_avalon_slave_0_agent_m0_waitrequest;                                       // ts_i2c_avalon_slave_0_translator:uav_waitrequest -> ts_i2c_avalon_slave_0_agent:m0_waitrequest
	wire          ts_i2c_avalon_slave_0_agent_m0_debugaccess;                                       // ts_i2c_avalon_slave_0_agent:m0_debugaccess -> ts_i2c_avalon_slave_0_translator:uav_debugaccess
	wire   [18:0] ts_i2c_avalon_slave_0_agent_m0_address;                                           // ts_i2c_avalon_slave_0_agent:m0_address -> ts_i2c_avalon_slave_0_translator:uav_address
	wire    [3:0] ts_i2c_avalon_slave_0_agent_m0_byteenable;                                        // ts_i2c_avalon_slave_0_agent:m0_byteenable -> ts_i2c_avalon_slave_0_translator:uav_byteenable
	wire          ts_i2c_avalon_slave_0_agent_m0_read;                                              // ts_i2c_avalon_slave_0_agent:m0_read -> ts_i2c_avalon_slave_0_translator:uav_read
	wire          ts_i2c_avalon_slave_0_agent_m0_readdatavalid;                                     // ts_i2c_avalon_slave_0_translator:uav_readdatavalid -> ts_i2c_avalon_slave_0_agent:m0_readdatavalid
	wire          ts_i2c_avalon_slave_0_agent_m0_lock;                                              // ts_i2c_avalon_slave_0_agent:m0_lock -> ts_i2c_avalon_slave_0_translator:uav_lock
	wire   [31:0] ts_i2c_avalon_slave_0_agent_m0_writedata;                                         // ts_i2c_avalon_slave_0_agent:m0_writedata -> ts_i2c_avalon_slave_0_translator:uav_writedata
	wire          ts_i2c_avalon_slave_0_agent_m0_write;                                             // ts_i2c_avalon_slave_0_agent:m0_write -> ts_i2c_avalon_slave_0_translator:uav_write
	wire    [2:0] ts_i2c_avalon_slave_0_agent_m0_burstcount;                                        // ts_i2c_avalon_slave_0_agent:m0_burstcount -> ts_i2c_avalon_slave_0_translator:uav_burstcount
	wire          ts_i2c_avalon_slave_0_agent_rf_source_valid;                                      // ts_i2c_avalon_slave_0_agent:rf_source_valid -> ts_i2c_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] ts_i2c_avalon_slave_0_agent_rf_source_data;                                       // ts_i2c_avalon_slave_0_agent:rf_source_data -> ts_i2c_avalon_slave_0_agent_rsp_fifo:in_data
	wire          ts_i2c_avalon_slave_0_agent_rf_source_ready;                                      // ts_i2c_avalon_slave_0_agent_rsp_fifo:in_ready -> ts_i2c_avalon_slave_0_agent:rf_source_ready
	wire          ts_i2c_avalon_slave_0_agent_rf_source_startofpacket;                              // ts_i2c_avalon_slave_0_agent:rf_source_startofpacket -> ts_i2c_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          ts_i2c_avalon_slave_0_agent_rf_source_endofpacket;                                // ts_i2c_avalon_slave_0_agent:rf_source_endofpacket -> ts_i2c_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          ts_i2c_avalon_slave_0_agent_rsp_fifo_out_valid;                                   // ts_i2c_avalon_slave_0_agent_rsp_fifo:out_valid -> ts_i2c_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] ts_i2c_avalon_slave_0_agent_rsp_fifo_out_data;                                    // ts_i2c_avalon_slave_0_agent_rsp_fifo:out_data -> ts_i2c_avalon_slave_0_agent:rf_sink_data
	wire          ts_i2c_avalon_slave_0_agent_rsp_fifo_out_ready;                                   // ts_i2c_avalon_slave_0_agent:rf_sink_ready -> ts_i2c_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          ts_i2c_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                           // ts_i2c_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> ts_i2c_avalon_slave_0_agent:rf_sink_startofpacket
	wire          ts_i2c_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                             // ts_i2c_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> ts_i2c_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                            // cmd_mux_019:src_valid -> ts_i2c_avalon_slave_0_agent:cp_valid
	wire   [99:0] cmd_mux_019_src_data;                                                             // cmd_mux_019:src_data -> ts_i2c_avalon_slave_0_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                            // ts_i2c_avalon_slave_0_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [29:0] cmd_mux_019_src_channel;                                                          // cmd_mux_019:src_channel -> ts_i2c_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                    // cmd_mux_019:src_startofpacket -> ts_i2c_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                      // cmd_mux_019:src_endofpacket -> ts_i2c_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] i2c_opencores_light_avalon_slave_0_agent_m0_readdata;                             // i2c_opencores_light_avalon_slave_0_translator:uav_readdata -> i2c_opencores_light_avalon_slave_0_agent:m0_readdata
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_waitrequest;                          // i2c_opencores_light_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_light_avalon_slave_0_agent:m0_waitrequest
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_debugaccess;                          // i2c_opencores_light_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_light_avalon_slave_0_translator:uav_debugaccess
	wire   [18:0] i2c_opencores_light_avalon_slave_0_agent_m0_address;                              // i2c_opencores_light_avalon_slave_0_agent:m0_address -> i2c_opencores_light_avalon_slave_0_translator:uav_address
	wire    [3:0] i2c_opencores_light_avalon_slave_0_agent_m0_byteenable;                           // i2c_opencores_light_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_light_avalon_slave_0_translator:uav_byteenable
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_read;                                 // i2c_opencores_light_avalon_slave_0_agent:m0_read -> i2c_opencores_light_avalon_slave_0_translator:uav_read
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_readdatavalid;                        // i2c_opencores_light_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_light_avalon_slave_0_agent:m0_readdatavalid
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_lock;                                 // i2c_opencores_light_avalon_slave_0_agent:m0_lock -> i2c_opencores_light_avalon_slave_0_translator:uav_lock
	wire   [31:0] i2c_opencores_light_avalon_slave_0_agent_m0_writedata;                            // i2c_opencores_light_avalon_slave_0_agent:m0_writedata -> i2c_opencores_light_avalon_slave_0_translator:uav_writedata
	wire          i2c_opencores_light_avalon_slave_0_agent_m0_write;                                // i2c_opencores_light_avalon_slave_0_agent:m0_write -> i2c_opencores_light_avalon_slave_0_translator:uav_write
	wire    [2:0] i2c_opencores_light_avalon_slave_0_agent_m0_burstcount;                           // i2c_opencores_light_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_light_avalon_slave_0_translator:uav_burstcount
	wire          i2c_opencores_light_avalon_slave_0_agent_rf_source_valid;                         // i2c_opencores_light_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] i2c_opencores_light_avalon_slave_0_agent_rf_source_data;                          // i2c_opencores_light_avalon_slave_0_agent:rf_source_data -> i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:in_data
	wire          i2c_opencores_light_avalon_slave_0_agent_rf_source_ready;                         // i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_light_avalon_slave_0_agent:rf_source_ready
	wire          i2c_opencores_light_avalon_slave_0_agent_rf_source_startofpacket;                 // i2c_opencores_light_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          i2c_opencores_light_avalon_slave_0_agent_rf_source_endofpacket;                   // i2c_opencores_light_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_valid;                      // i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_light_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_data;                       // i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_light_avalon_slave_0_agent:rf_sink_data
	wire          i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_ready;                      // i2c_opencores_light_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_startofpacket;              // i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_light_avalon_slave_0_agent:rf_sink_startofpacket
	wire          i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                // i2c_opencores_light_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_light_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                            // cmd_mux_020:src_valid -> i2c_opencores_light_avalon_slave_0_agent:cp_valid
	wire   [99:0] cmd_mux_020_src_data;                                                             // cmd_mux_020:src_data -> i2c_opencores_light_avalon_slave_0_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                            // i2c_opencores_light_avalon_slave_0_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [29:0] cmd_mux_020_src_channel;                                                          // cmd_mux_020:src_channel -> i2c_opencores_light_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                    // cmd_mux_020:src_startofpacket -> i2c_opencores_light_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                      // cmd_mux_020:src_endofpacket -> i2c_opencores_light_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] key_s1_agent_m0_readdata;                                                         // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                                      // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                                      // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [18:0] key_s1_agent_m0_address;                                                          // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                       // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                             // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                                    // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                             // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                        // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                            // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                       // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                                     // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [100:0] key_s1_agent_rf_source_data;                                                      // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                                     // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                             // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                               // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                                  // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [100:0] key_s1_agent_rsp_fifo_out_data;                                                   // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                                  // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                          // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                            // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                            // cmd_mux_021:src_valid -> key_s1_agent:cp_valid
	wire   [99:0] cmd_mux_021_src_data;                                                             // cmd_mux_021:src_data -> key_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                            // key_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [29:0] cmd_mux_021_src_channel;                                                          // cmd_mux_021:src_channel -> key_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                    // cmd_mux_021:src_startofpacket -> key_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                      // cmd_mux_021:src_endofpacket -> key_s1_agent:cp_endofpacket
	wire   [31:0] sw_s1_agent_m0_readdata;                                                          // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                                       // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                                       // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [18:0] sw_s1_agent_m0_address;                                                           // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                                        // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                              // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                                     // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                              // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                                         // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                             // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                                        // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                                      // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [100:0] sw_s1_agent_rf_source_data;                                                       // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                                      // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                              // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                                // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                                   // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [100:0] sw_s1_agent_rsp_fifo_out_data;                                                    // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                                   // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                                           // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                             // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_022_src_valid;                                                            // cmd_mux_022:src_valid -> sw_s1_agent:cp_valid
	wire   [99:0] cmd_mux_022_src_data;                                                             // cmd_mux_022:src_data -> sw_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                            // sw_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [29:0] cmd_mux_022_src_channel;                                                          // cmd_mux_022:src_channel -> sw_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                    // cmd_mux_022:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                      // cmd_mux_022:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire   [31:0] ts_interrupt_s1_agent_m0_readdata;                                                // ts_interrupt_s1_translator:uav_readdata -> ts_interrupt_s1_agent:m0_readdata
	wire          ts_interrupt_s1_agent_m0_waitrequest;                                             // ts_interrupt_s1_translator:uav_waitrequest -> ts_interrupt_s1_agent:m0_waitrequest
	wire          ts_interrupt_s1_agent_m0_debugaccess;                                             // ts_interrupt_s1_agent:m0_debugaccess -> ts_interrupt_s1_translator:uav_debugaccess
	wire   [18:0] ts_interrupt_s1_agent_m0_address;                                                 // ts_interrupt_s1_agent:m0_address -> ts_interrupt_s1_translator:uav_address
	wire    [3:0] ts_interrupt_s1_agent_m0_byteenable;                                              // ts_interrupt_s1_agent:m0_byteenable -> ts_interrupt_s1_translator:uav_byteenable
	wire          ts_interrupt_s1_agent_m0_read;                                                    // ts_interrupt_s1_agent:m0_read -> ts_interrupt_s1_translator:uav_read
	wire          ts_interrupt_s1_agent_m0_readdatavalid;                                           // ts_interrupt_s1_translator:uav_readdatavalid -> ts_interrupt_s1_agent:m0_readdatavalid
	wire          ts_interrupt_s1_agent_m0_lock;                                                    // ts_interrupt_s1_agent:m0_lock -> ts_interrupt_s1_translator:uav_lock
	wire   [31:0] ts_interrupt_s1_agent_m0_writedata;                                               // ts_interrupt_s1_agent:m0_writedata -> ts_interrupt_s1_translator:uav_writedata
	wire          ts_interrupt_s1_agent_m0_write;                                                   // ts_interrupt_s1_agent:m0_write -> ts_interrupt_s1_translator:uav_write
	wire    [2:0] ts_interrupt_s1_agent_m0_burstcount;                                              // ts_interrupt_s1_agent:m0_burstcount -> ts_interrupt_s1_translator:uav_burstcount
	wire          ts_interrupt_s1_agent_rf_source_valid;                                            // ts_interrupt_s1_agent:rf_source_valid -> ts_interrupt_s1_agent_rsp_fifo:in_valid
	wire  [100:0] ts_interrupt_s1_agent_rf_source_data;                                             // ts_interrupt_s1_agent:rf_source_data -> ts_interrupt_s1_agent_rsp_fifo:in_data
	wire          ts_interrupt_s1_agent_rf_source_ready;                                            // ts_interrupt_s1_agent_rsp_fifo:in_ready -> ts_interrupt_s1_agent:rf_source_ready
	wire          ts_interrupt_s1_agent_rf_source_startofpacket;                                    // ts_interrupt_s1_agent:rf_source_startofpacket -> ts_interrupt_s1_agent_rsp_fifo:in_startofpacket
	wire          ts_interrupt_s1_agent_rf_source_endofpacket;                                      // ts_interrupt_s1_agent:rf_source_endofpacket -> ts_interrupt_s1_agent_rsp_fifo:in_endofpacket
	wire          ts_interrupt_s1_agent_rsp_fifo_out_valid;                                         // ts_interrupt_s1_agent_rsp_fifo:out_valid -> ts_interrupt_s1_agent:rf_sink_valid
	wire  [100:0] ts_interrupt_s1_agent_rsp_fifo_out_data;                                          // ts_interrupt_s1_agent_rsp_fifo:out_data -> ts_interrupt_s1_agent:rf_sink_data
	wire          ts_interrupt_s1_agent_rsp_fifo_out_ready;                                         // ts_interrupt_s1_agent:rf_sink_ready -> ts_interrupt_s1_agent_rsp_fifo:out_ready
	wire          ts_interrupt_s1_agent_rsp_fifo_out_startofpacket;                                 // ts_interrupt_s1_agent_rsp_fifo:out_startofpacket -> ts_interrupt_s1_agent:rf_sink_startofpacket
	wire          ts_interrupt_s1_agent_rsp_fifo_out_endofpacket;                                   // ts_interrupt_s1_agent_rsp_fifo:out_endofpacket -> ts_interrupt_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_023_src_valid;                                                            // cmd_mux_023:src_valid -> ts_interrupt_s1_agent:cp_valid
	wire   [99:0] cmd_mux_023_src_data;                                                             // cmd_mux_023:src_data -> ts_interrupt_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                            // ts_interrupt_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [29:0] cmd_mux_023_src_channel;                                                          // cmd_mux_023:src_channel -> ts_interrupt_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                    // cmd_mux_023:src_startofpacket -> ts_interrupt_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                      // cmd_mux_023:src_endofpacket -> ts_interrupt_s1_agent:cp_endofpacket
	wire   [31:0] mpu_int_s1_agent_m0_readdata;                                                     // mpu_int_s1_translator:uav_readdata -> mpu_int_s1_agent:m0_readdata
	wire          mpu_int_s1_agent_m0_waitrequest;                                                  // mpu_int_s1_translator:uav_waitrequest -> mpu_int_s1_agent:m0_waitrequest
	wire          mpu_int_s1_agent_m0_debugaccess;                                                  // mpu_int_s1_agent:m0_debugaccess -> mpu_int_s1_translator:uav_debugaccess
	wire   [18:0] mpu_int_s1_agent_m0_address;                                                      // mpu_int_s1_agent:m0_address -> mpu_int_s1_translator:uav_address
	wire    [3:0] mpu_int_s1_agent_m0_byteenable;                                                   // mpu_int_s1_agent:m0_byteenable -> mpu_int_s1_translator:uav_byteenable
	wire          mpu_int_s1_agent_m0_read;                                                         // mpu_int_s1_agent:m0_read -> mpu_int_s1_translator:uav_read
	wire          mpu_int_s1_agent_m0_readdatavalid;                                                // mpu_int_s1_translator:uav_readdatavalid -> mpu_int_s1_agent:m0_readdatavalid
	wire          mpu_int_s1_agent_m0_lock;                                                         // mpu_int_s1_agent:m0_lock -> mpu_int_s1_translator:uav_lock
	wire   [31:0] mpu_int_s1_agent_m0_writedata;                                                    // mpu_int_s1_agent:m0_writedata -> mpu_int_s1_translator:uav_writedata
	wire          mpu_int_s1_agent_m0_write;                                                        // mpu_int_s1_agent:m0_write -> mpu_int_s1_translator:uav_write
	wire    [2:0] mpu_int_s1_agent_m0_burstcount;                                                   // mpu_int_s1_agent:m0_burstcount -> mpu_int_s1_translator:uav_burstcount
	wire          mpu_int_s1_agent_rf_source_valid;                                                 // mpu_int_s1_agent:rf_source_valid -> mpu_int_s1_agent_rsp_fifo:in_valid
	wire  [100:0] mpu_int_s1_agent_rf_source_data;                                                  // mpu_int_s1_agent:rf_source_data -> mpu_int_s1_agent_rsp_fifo:in_data
	wire          mpu_int_s1_agent_rf_source_ready;                                                 // mpu_int_s1_agent_rsp_fifo:in_ready -> mpu_int_s1_agent:rf_source_ready
	wire          mpu_int_s1_agent_rf_source_startofpacket;                                         // mpu_int_s1_agent:rf_source_startofpacket -> mpu_int_s1_agent_rsp_fifo:in_startofpacket
	wire          mpu_int_s1_agent_rf_source_endofpacket;                                           // mpu_int_s1_agent:rf_source_endofpacket -> mpu_int_s1_agent_rsp_fifo:in_endofpacket
	wire          mpu_int_s1_agent_rsp_fifo_out_valid;                                              // mpu_int_s1_agent_rsp_fifo:out_valid -> mpu_int_s1_agent:rf_sink_valid
	wire  [100:0] mpu_int_s1_agent_rsp_fifo_out_data;                                               // mpu_int_s1_agent_rsp_fifo:out_data -> mpu_int_s1_agent:rf_sink_data
	wire          mpu_int_s1_agent_rsp_fifo_out_ready;                                              // mpu_int_s1_agent:rf_sink_ready -> mpu_int_s1_agent_rsp_fifo:out_ready
	wire          mpu_int_s1_agent_rsp_fifo_out_startofpacket;                                      // mpu_int_s1_agent_rsp_fifo:out_startofpacket -> mpu_int_s1_agent:rf_sink_startofpacket
	wire          mpu_int_s1_agent_rsp_fifo_out_endofpacket;                                        // mpu_int_s1_agent_rsp_fifo:out_endofpacket -> mpu_int_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_024_src_valid;                                                            // cmd_mux_024:src_valid -> mpu_int_s1_agent:cp_valid
	wire   [99:0] cmd_mux_024_src_data;                                                             // cmd_mux_024:src_data -> mpu_int_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                            // mpu_int_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [29:0] cmd_mux_024_src_channel;                                                          // cmd_mux_024:src_channel -> mpu_int_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                    // cmd_mux_024:src_startofpacket -> mpu_int_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                      // cmd_mux_024:src_endofpacket -> mpu_int_s1_agent:cp_endofpacket
	wire   [31:0] light_int_s1_agent_m0_readdata;                                                   // light_int_s1_translator:uav_readdata -> light_int_s1_agent:m0_readdata
	wire          light_int_s1_agent_m0_waitrequest;                                                // light_int_s1_translator:uav_waitrequest -> light_int_s1_agent:m0_waitrequest
	wire          light_int_s1_agent_m0_debugaccess;                                                // light_int_s1_agent:m0_debugaccess -> light_int_s1_translator:uav_debugaccess
	wire   [18:0] light_int_s1_agent_m0_address;                                                    // light_int_s1_agent:m0_address -> light_int_s1_translator:uav_address
	wire    [3:0] light_int_s1_agent_m0_byteenable;                                                 // light_int_s1_agent:m0_byteenable -> light_int_s1_translator:uav_byteenable
	wire          light_int_s1_agent_m0_read;                                                       // light_int_s1_agent:m0_read -> light_int_s1_translator:uav_read
	wire          light_int_s1_agent_m0_readdatavalid;                                              // light_int_s1_translator:uav_readdatavalid -> light_int_s1_agent:m0_readdatavalid
	wire          light_int_s1_agent_m0_lock;                                                       // light_int_s1_agent:m0_lock -> light_int_s1_translator:uav_lock
	wire   [31:0] light_int_s1_agent_m0_writedata;                                                  // light_int_s1_agent:m0_writedata -> light_int_s1_translator:uav_writedata
	wire          light_int_s1_agent_m0_write;                                                      // light_int_s1_agent:m0_write -> light_int_s1_translator:uav_write
	wire    [2:0] light_int_s1_agent_m0_burstcount;                                                 // light_int_s1_agent:m0_burstcount -> light_int_s1_translator:uav_burstcount
	wire          light_int_s1_agent_rf_source_valid;                                               // light_int_s1_agent:rf_source_valid -> light_int_s1_agent_rsp_fifo:in_valid
	wire  [100:0] light_int_s1_agent_rf_source_data;                                                // light_int_s1_agent:rf_source_data -> light_int_s1_agent_rsp_fifo:in_data
	wire          light_int_s1_agent_rf_source_ready;                                               // light_int_s1_agent_rsp_fifo:in_ready -> light_int_s1_agent:rf_source_ready
	wire          light_int_s1_agent_rf_source_startofpacket;                                       // light_int_s1_agent:rf_source_startofpacket -> light_int_s1_agent_rsp_fifo:in_startofpacket
	wire          light_int_s1_agent_rf_source_endofpacket;                                         // light_int_s1_agent:rf_source_endofpacket -> light_int_s1_agent_rsp_fifo:in_endofpacket
	wire          light_int_s1_agent_rsp_fifo_out_valid;                                            // light_int_s1_agent_rsp_fifo:out_valid -> light_int_s1_agent:rf_sink_valid
	wire  [100:0] light_int_s1_agent_rsp_fifo_out_data;                                             // light_int_s1_agent_rsp_fifo:out_data -> light_int_s1_agent:rf_sink_data
	wire          light_int_s1_agent_rsp_fifo_out_ready;                                            // light_int_s1_agent:rf_sink_ready -> light_int_s1_agent_rsp_fifo:out_ready
	wire          light_int_s1_agent_rsp_fifo_out_startofpacket;                                    // light_int_s1_agent_rsp_fifo:out_startofpacket -> light_int_s1_agent:rf_sink_startofpacket
	wire          light_int_s1_agent_rsp_fifo_out_endofpacket;                                      // light_int_s1_agent_rsp_fifo:out_endofpacket -> light_int_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_025_src_valid;                                                            // cmd_mux_025:src_valid -> light_int_s1_agent:cp_valid
	wire   [99:0] cmd_mux_025_src_data;                                                             // cmd_mux_025:src_data -> light_int_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                            // light_int_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [29:0] cmd_mux_025_src_channel;                                                          // cmd_mux_025:src_channel -> light_int_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                    // cmd_mux_025:src_startofpacket -> light_int_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                      // cmd_mux_025:src_endofpacket -> light_int_s1_agent:cp_endofpacket
	wire   [31:0] seg7_slave_agent_m0_readdata;                                                     // seg7_slave_translator:uav_readdata -> seg7_slave_agent:m0_readdata
	wire          seg7_slave_agent_m0_waitrequest;                                                  // seg7_slave_translator:uav_waitrequest -> seg7_slave_agent:m0_waitrequest
	wire          seg7_slave_agent_m0_debugaccess;                                                  // seg7_slave_agent:m0_debugaccess -> seg7_slave_translator:uav_debugaccess
	wire   [18:0] seg7_slave_agent_m0_address;                                                      // seg7_slave_agent:m0_address -> seg7_slave_translator:uav_address
	wire    [3:0] seg7_slave_agent_m0_byteenable;                                                   // seg7_slave_agent:m0_byteenable -> seg7_slave_translator:uav_byteenable
	wire          seg7_slave_agent_m0_read;                                                         // seg7_slave_agent:m0_read -> seg7_slave_translator:uav_read
	wire          seg7_slave_agent_m0_readdatavalid;                                                // seg7_slave_translator:uav_readdatavalid -> seg7_slave_agent:m0_readdatavalid
	wire          seg7_slave_agent_m0_lock;                                                         // seg7_slave_agent:m0_lock -> seg7_slave_translator:uav_lock
	wire   [31:0] seg7_slave_agent_m0_writedata;                                                    // seg7_slave_agent:m0_writedata -> seg7_slave_translator:uav_writedata
	wire          seg7_slave_agent_m0_write;                                                        // seg7_slave_agent:m0_write -> seg7_slave_translator:uav_write
	wire    [2:0] seg7_slave_agent_m0_burstcount;                                                   // seg7_slave_agent:m0_burstcount -> seg7_slave_translator:uav_burstcount
	wire          seg7_slave_agent_rf_source_valid;                                                 // seg7_slave_agent:rf_source_valid -> seg7_slave_agent_rsp_fifo:in_valid
	wire  [100:0] seg7_slave_agent_rf_source_data;                                                  // seg7_slave_agent:rf_source_data -> seg7_slave_agent_rsp_fifo:in_data
	wire          seg7_slave_agent_rf_source_ready;                                                 // seg7_slave_agent_rsp_fifo:in_ready -> seg7_slave_agent:rf_source_ready
	wire          seg7_slave_agent_rf_source_startofpacket;                                         // seg7_slave_agent:rf_source_startofpacket -> seg7_slave_agent_rsp_fifo:in_startofpacket
	wire          seg7_slave_agent_rf_source_endofpacket;                                           // seg7_slave_agent:rf_source_endofpacket -> seg7_slave_agent_rsp_fifo:in_endofpacket
	wire          seg7_slave_agent_rsp_fifo_out_valid;                                              // seg7_slave_agent_rsp_fifo:out_valid -> seg7_slave_agent:rf_sink_valid
	wire  [100:0] seg7_slave_agent_rsp_fifo_out_data;                                               // seg7_slave_agent_rsp_fifo:out_data -> seg7_slave_agent:rf_sink_data
	wire          seg7_slave_agent_rsp_fifo_out_ready;                                              // seg7_slave_agent:rf_sink_ready -> seg7_slave_agent_rsp_fifo:out_ready
	wire          seg7_slave_agent_rsp_fifo_out_startofpacket;                                      // seg7_slave_agent_rsp_fifo:out_startofpacket -> seg7_slave_agent:rf_sink_startofpacket
	wire          seg7_slave_agent_rsp_fifo_out_endofpacket;                                        // seg7_slave_agent_rsp_fifo:out_endofpacket -> seg7_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_026_src_valid;                                                            // cmd_mux_026:src_valid -> seg7_slave_agent:cp_valid
	wire   [99:0] cmd_mux_026_src_data;                                                             // cmd_mux_026:src_data -> seg7_slave_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                            // seg7_slave_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [29:0] cmd_mux_026_src_channel;                                                          // cmd_mux_026:src_channel -> seg7_slave_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                    // cmd_mux_026:src_startofpacket -> seg7_slave_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                      // cmd_mux_026:src_endofpacket -> seg7_slave_agent:cp_endofpacket
	wire   [31:0] spi_spi_control_port_agent_m0_readdata;                                           // spi_spi_control_port_translator:uav_readdata -> spi_spi_control_port_agent:m0_readdata
	wire          spi_spi_control_port_agent_m0_waitrequest;                                        // spi_spi_control_port_translator:uav_waitrequest -> spi_spi_control_port_agent:m0_waitrequest
	wire          spi_spi_control_port_agent_m0_debugaccess;                                        // spi_spi_control_port_agent:m0_debugaccess -> spi_spi_control_port_translator:uav_debugaccess
	wire   [18:0] spi_spi_control_port_agent_m0_address;                                            // spi_spi_control_port_agent:m0_address -> spi_spi_control_port_translator:uav_address
	wire    [3:0] spi_spi_control_port_agent_m0_byteenable;                                         // spi_spi_control_port_agent:m0_byteenable -> spi_spi_control_port_translator:uav_byteenable
	wire          spi_spi_control_port_agent_m0_read;                                               // spi_spi_control_port_agent:m0_read -> spi_spi_control_port_translator:uav_read
	wire          spi_spi_control_port_agent_m0_readdatavalid;                                      // spi_spi_control_port_translator:uav_readdatavalid -> spi_spi_control_port_agent:m0_readdatavalid
	wire          spi_spi_control_port_agent_m0_lock;                                               // spi_spi_control_port_agent:m0_lock -> spi_spi_control_port_translator:uav_lock
	wire   [31:0] spi_spi_control_port_agent_m0_writedata;                                          // spi_spi_control_port_agent:m0_writedata -> spi_spi_control_port_translator:uav_writedata
	wire          spi_spi_control_port_agent_m0_write;                                              // spi_spi_control_port_agent:m0_write -> spi_spi_control_port_translator:uav_write
	wire    [2:0] spi_spi_control_port_agent_m0_burstcount;                                         // spi_spi_control_port_agent:m0_burstcount -> spi_spi_control_port_translator:uav_burstcount
	wire          spi_spi_control_port_agent_rf_source_valid;                                       // spi_spi_control_port_agent:rf_source_valid -> spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [100:0] spi_spi_control_port_agent_rf_source_data;                                        // spi_spi_control_port_agent:rf_source_data -> spi_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_spi_control_port_agent_rf_source_ready;                                       // spi_spi_control_port_agent_rsp_fifo:in_ready -> spi_spi_control_port_agent:rf_source_ready
	wire          spi_spi_control_port_agent_rf_source_startofpacket;                               // spi_spi_control_port_agent:rf_source_startofpacket -> spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_spi_control_port_agent_rf_source_endofpacket;                                 // spi_spi_control_port_agent:rf_source_endofpacket -> spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_valid;                                    // spi_spi_control_port_agent_rsp_fifo:out_valid -> spi_spi_control_port_agent:rf_sink_valid
	wire  [100:0] spi_spi_control_port_agent_rsp_fifo_out_data;                                     // spi_spi_control_port_agent_rsp_fifo:out_data -> spi_spi_control_port_agent:rf_sink_data
	wire          spi_spi_control_port_agent_rsp_fifo_out_ready;                                    // spi_spi_control_port_agent:rf_sink_ready -> spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_spi_control_port_agent_rsp_fifo_out_startofpacket;                            // spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                              // spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_027_src_valid;                                                            // cmd_mux_027:src_valid -> spi_spi_control_port_agent:cp_valid
	wire   [99:0] cmd_mux_027_src_data;                                                             // cmd_mux_027:src_data -> spi_spi_control_port_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                            // spi_spi_control_port_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [29:0] cmd_mux_027_src_channel;                                                          // cmd_mux_027:src_channel -> spi_spi_control_port_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                    // cmd_mux_027:src_startofpacket -> spi_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                      // cmd_mux_027:src_endofpacket -> spi_spi_control_port_agent:cp_endofpacket
	wire   [31:0] spi_mpu_spi_control_port_agent_m0_readdata;                                       // spi_mpu_spi_control_port_translator:uav_readdata -> spi_mpu_spi_control_port_agent:m0_readdata
	wire          spi_mpu_spi_control_port_agent_m0_waitrequest;                                    // spi_mpu_spi_control_port_translator:uav_waitrequest -> spi_mpu_spi_control_port_agent:m0_waitrequest
	wire          spi_mpu_spi_control_port_agent_m0_debugaccess;                                    // spi_mpu_spi_control_port_agent:m0_debugaccess -> spi_mpu_spi_control_port_translator:uav_debugaccess
	wire   [18:0] spi_mpu_spi_control_port_agent_m0_address;                                        // spi_mpu_spi_control_port_agent:m0_address -> spi_mpu_spi_control_port_translator:uav_address
	wire    [3:0] spi_mpu_spi_control_port_agent_m0_byteenable;                                     // spi_mpu_spi_control_port_agent:m0_byteenable -> spi_mpu_spi_control_port_translator:uav_byteenable
	wire          spi_mpu_spi_control_port_agent_m0_read;                                           // spi_mpu_spi_control_port_agent:m0_read -> spi_mpu_spi_control_port_translator:uav_read
	wire          spi_mpu_spi_control_port_agent_m0_readdatavalid;                                  // spi_mpu_spi_control_port_translator:uav_readdatavalid -> spi_mpu_spi_control_port_agent:m0_readdatavalid
	wire          spi_mpu_spi_control_port_agent_m0_lock;                                           // spi_mpu_spi_control_port_agent:m0_lock -> spi_mpu_spi_control_port_translator:uav_lock
	wire   [31:0] spi_mpu_spi_control_port_agent_m0_writedata;                                      // spi_mpu_spi_control_port_agent:m0_writedata -> spi_mpu_spi_control_port_translator:uav_writedata
	wire          spi_mpu_spi_control_port_agent_m0_write;                                          // spi_mpu_spi_control_port_agent:m0_write -> spi_mpu_spi_control_port_translator:uav_write
	wire    [2:0] spi_mpu_spi_control_port_agent_m0_burstcount;                                     // spi_mpu_spi_control_port_agent:m0_burstcount -> spi_mpu_spi_control_port_translator:uav_burstcount
	wire          spi_mpu_spi_control_port_agent_rf_source_valid;                                   // spi_mpu_spi_control_port_agent:rf_source_valid -> spi_mpu_spi_control_port_agent_rsp_fifo:in_valid
	wire  [100:0] spi_mpu_spi_control_port_agent_rf_source_data;                                    // spi_mpu_spi_control_port_agent:rf_source_data -> spi_mpu_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_mpu_spi_control_port_agent_rf_source_ready;                                   // spi_mpu_spi_control_port_agent_rsp_fifo:in_ready -> spi_mpu_spi_control_port_agent:rf_source_ready
	wire          spi_mpu_spi_control_port_agent_rf_source_startofpacket;                           // spi_mpu_spi_control_port_agent:rf_source_startofpacket -> spi_mpu_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_mpu_spi_control_port_agent_rf_source_endofpacket;                             // spi_mpu_spi_control_port_agent:rf_source_endofpacket -> spi_mpu_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_mpu_spi_control_port_agent_rsp_fifo_out_valid;                                // spi_mpu_spi_control_port_agent_rsp_fifo:out_valid -> spi_mpu_spi_control_port_agent:rf_sink_valid
	wire  [100:0] spi_mpu_spi_control_port_agent_rsp_fifo_out_data;                                 // spi_mpu_spi_control_port_agent_rsp_fifo:out_data -> spi_mpu_spi_control_port_agent:rf_sink_data
	wire          spi_mpu_spi_control_port_agent_rsp_fifo_out_ready;                                // spi_mpu_spi_control_port_agent:rf_sink_ready -> spi_mpu_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_mpu_spi_control_port_agent_rsp_fifo_out_startofpacket;                        // spi_mpu_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_mpu_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_mpu_spi_control_port_agent_rsp_fifo_out_endofpacket;                          // spi_mpu_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_mpu_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_028_src_valid;                                                            // cmd_mux_028:src_valid -> spi_mpu_spi_control_port_agent:cp_valid
	wire   [99:0] cmd_mux_028_src_data;                                                             // cmd_mux_028:src_data -> spi_mpu_spi_control_port_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                            // spi_mpu_spi_control_port_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [29:0] cmd_mux_028_src_channel;                                                          // cmd_mux_028:src_channel -> spi_mpu_spi_control_port_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                    // cmd_mux_028:src_startofpacket -> spi_mpu_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                      // cmd_mux_028:src_endofpacket -> spi_mpu_spi_control_port_agent:cp_endofpacket
	wire   [31:0] tv_decoder_stream_capture_avalon_slave_agent_m0_readdata;                         // tv_decoder_stream_capture_avalon_slave_translator:uav_readdata -> tv_decoder_stream_capture_avalon_slave_agent:m0_readdata
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_waitrequest;                      // tv_decoder_stream_capture_avalon_slave_translator:uav_waitrequest -> tv_decoder_stream_capture_avalon_slave_agent:m0_waitrequest
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_debugaccess;                      // tv_decoder_stream_capture_avalon_slave_agent:m0_debugaccess -> tv_decoder_stream_capture_avalon_slave_translator:uav_debugaccess
	wire   [18:0] tv_decoder_stream_capture_avalon_slave_agent_m0_address;                          // tv_decoder_stream_capture_avalon_slave_agent:m0_address -> tv_decoder_stream_capture_avalon_slave_translator:uav_address
	wire    [3:0] tv_decoder_stream_capture_avalon_slave_agent_m0_byteenable;                       // tv_decoder_stream_capture_avalon_slave_agent:m0_byteenable -> tv_decoder_stream_capture_avalon_slave_translator:uav_byteenable
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_read;                             // tv_decoder_stream_capture_avalon_slave_agent:m0_read -> tv_decoder_stream_capture_avalon_slave_translator:uav_read
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_readdatavalid;                    // tv_decoder_stream_capture_avalon_slave_translator:uav_readdatavalid -> tv_decoder_stream_capture_avalon_slave_agent:m0_readdatavalid
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_lock;                             // tv_decoder_stream_capture_avalon_slave_agent:m0_lock -> tv_decoder_stream_capture_avalon_slave_translator:uav_lock
	wire   [31:0] tv_decoder_stream_capture_avalon_slave_agent_m0_writedata;                        // tv_decoder_stream_capture_avalon_slave_agent:m0_writedata -> tv_decoder_stream_capture_avalon_slave_translator:uav_writedata
	wire          tv_decoder_stream_capture_avalon_slave_agent_m0_write;                            // tv_decoder_stream_capture_avalon_slave_agent:m0_write -> tv_decoder_stream_capture_avalon_slave_translator:uav_write
	wire    [2:0] tv_decoder_stream_capture_avalon_slave_agent_m0_burstcount;                       // tv_decoder_stream_capture_avalon_slave_agent:m0_burstcount -> tv_decoder_stream_capture_avalon_slave_translator:uav_burstcount
	wire          tv_decoder_stream_capture_avalon_slave_agent_rf_source_valid;                     // tv_decoder_stream_capture_avalon_slave_agent:rf_source_valid -> tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:in_valid
	wire  [100:0] tv_decoder_stream_capture_avalon_slave_agent_rf_source_data;                      // tv_decoder_stream_capture_avalon_slave_agent:rf_source_data -> tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:in_data
	wire          tv_decoder_stream_capture_avalon_slave_agent_rf_source_ready;                     // tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:in_ready -> tv_decoder_stream_capture_avalon_slave_agent:rf_source_ready
	wire          tv_decoder_stream_capture_avalon_slave_agent_rf_source_startofpacket;             // tv_decoder_stream_capture_avalon_slave_agent:rf_source_startofpacket -> tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rf_source_endofpacket;               // tv_decoder_stream_capture_avalon_slave_agent:rf_source_endofpacket -> tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_valid;                  // tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:out_valid -> tv_decoder_stream_capture_avalon_slave_agent:rf_sink_valid
	wire  [100:0] tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_data;                   // tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:out_data -> tv_decoder_stream_capture_avalon_slave_agent:rf_sink_data
	wire          tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_ready;                  // tv_decoder_stream_capture_avalon_slave_agent:rf_sink_ready -> tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:out_ready
	wire          tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_startofpacket;          // tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:out_startofpacket -> tv_decoder_stream_capture_avalon_slave_agent:rf_sink_startofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_endofpacket;            // tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo:out_endofpacket -> tv_decoder_stream_capture_avalon_slave_agent:rf_sink_endofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_valid;                // tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_src_valid -> tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_data;                 // tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_src_data -> tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:in_data
	wire          tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_ready;                // tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:in_ready -> tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_029_src_valid;                                                            // cmd_mux_029:src_valid -> tv_decoder_stream_capture_avalon_slave_agent:cp_valid
	wire   [99:0] cmd_mux_029_src_data;                                                             // cmd_mux_029:src_data -> tv_decoder_stream_capture_avalon_slave_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                            // tv_decoder_stream_capture_avalon_slave_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [29:0] cmd_mux_029_src_channel;                                                          // cmd_mux_029:src_channel -> tv_decoder_stream_capture_avalon_slave_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                    // cmd_mux_029:src_startofpacket -> tv_decoder_stream_capture_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                      // cmd_mux_029:src_endofpacket -> tv_decoder_stream_capture_avalon_slave_agent:cp_endofpacket
	wire          nios2_gen2_data_master_agent_cp_valid;                                            // nios2_gen2_data_master_agent:cp_valid -> router:sink_valid
	wire   [99:0] nios2_gen2_data_master_agent_cp_data;                                             // nios2_gen2_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_data_master_agent:cp_ready
	wire          nios2_gen2_data_master_agent_cp_startofpacket;                                    // nios2_gen2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_data_master_agent_cp_endofpacket;                                      // nios2_gen2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mm_bridge_0_m0_agent_cp_valid;                                                    // mm_bridge_0_m0_agent:cp_valid -> router_001:sink_valid
	wire   [99:0] mm_bridge_0_m0_agent_cp_data;                                                     // mm_bridge_0_m0_agent:cp_data -> router_001:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                                    // router_001:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                                            // mm_bridge_0_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                                              // mm_bridge_0_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_gen2_instruction_master_agent_cp_valid;                                     // nios2_gen2_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire   [99:0] nios2_gen2_instruction_master_agent_cp_data;                                      // nios2_gen2_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_gen2_instruction_master_agent_cp_ready;                                     // router_002:sink_ready -> nios2_gen2_instruction_master_agent:cp_ready
	wire          nios2_gen2_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_gen2_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_valid;                               // tv_decoder_alt_vip_cl_cvi_0_control_agent:rp_valid -> router_003:sink_valid
	wire   [99:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_data;                                // tv_decoder_alt_vip_cl_cvi_0_control_agent:rp_data -> router_003:sink_data
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_ready;                               // router_003:sink_ready -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rp_ready
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_startofpacket;                       // tv_decoder_alt_vip_cl_cvi_0_control_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_endofpacket;                         // tv_decoder_alt_vip_cl_cvi_0_control_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux:sink_valid
	wire   [99:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                             // rsp_demux:sink_ready -> router_003:src_ready
	wire   [29:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rp_valid;                               // tv_decoder_alt_vip_cl_scl_0_control_agent:rp_valid -> router_004:sink_valid
	wire   [99:0] tv_decoder_alt_vip_cl_scl_0_control_agent_rp_data;                                // tv_decoder_alt_vip_cl_scl_0_control_agent:rp_data -> router_004:sink_data
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rp_ready;                               // router_004:sink_ready -> tv_decoder_alt_vip_cl_scl_0_control_agent:rp_ready
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rp_startofpacket;                       // tv_decoder_alt_vip_cl_scl_0_control_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rp_endofpacket;                         // tv_decoder_alt_vip_cl_scl_0_control_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_001:sink_valid
	wire   [99:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                             // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [29:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rp_valid;                               // tv_decoder_alt_vip_cl_scl_1_control_agent:rp_valid -> router_005:sink_valid
	wire   [99:0] tv_decoder_alt_vip_cl_scl_1_control_agent_rp_data;                                // tv_decoder_alt_vip_cl_scl_1_control_agent:rp_data -> router_005:sink_data
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rp_ready;                               // router_005:sink_ready -> tv_decoder_alt_vip_cl_scl_1_control_agent:rp_ready
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rp_startofpacket;                       // tv_decoder_alt_vip_cl_scl_1_control_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rp_endofpacket;                         // tv_decoder_alt_vip_cl_scl_1_control_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_002:sink_valid
	wire   [99:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [29:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rp_valid;                               // tv_decoder_alt_vip_cl_swi_0_control_agent:rp_valid -> router_006:sink_valid
	wire   [99:0] tv_decoder_alt_vip_cl_swi_0_control_agent_rp_data;                                // tv_decoder_alt_vip_cl_swi_0_control_agent:rp_data -> router_006:sink_data
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rp_ready;                               // router_006:sink_ready -> tv_decoder_alt_vip_cl_swi_0_control_agent:rp_ready
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rp_startofpacket;                       // tv_decoder_alt_vip_cl_swi_0_control_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rp_endofpacket;                         // tv_decoder_alt_vip_cl_swi_0_control_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_003:sink_valid
	wire   [99:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [29:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_007:sink_valid
	wire   [99:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_007:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_007:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_004:sink_valid
	wire   [99:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                             // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [29:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_valid;                                 // i2c_opencores_mipi_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire   [99:0] i2c_opencores_mipi_avalon_slave_0_agent_rp_data;                                  // i2c_opencores_mipi_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_ready;                                 // router_008:sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rp_ready
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket;                         // i2c_opencores_mipi_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket;                           // i2c_opencores_mipi_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_005:sink_valid
	wire   [99:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [29:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_valid;                               // i2c_opencores_camera_avalon_slave_0_agent:rp_valid -> router_009:sink_valid
	wire   [99:0] i2c_opencores_camera_avalon_slave_0_agent_rp_data;                                // i2c_opencores_camera_avalon_slave_0_agent:rp_data -> router_009:sink_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_ready;                               // router_009:sink_ready -> i2c_opencores_camera_avalon_slave_0_agent:rp_ready
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket;                       // i2c_opencores_camera_avalon_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket;                         // i2c_opencores_camera_avalon_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_006:sink_valid
	wire   [99:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [29:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rp_valid;                                        // alt_vip_cl_mixer_0_control_agent:rp_valid -> router_010:sink_valid
	wire   [99:0] alt_vip_cl_mixer_0_control_agent_rp_data;                                         // alt_vip_cl_mixer_0_control_agent:rp_data -> router_010:sink_data
	wire          alt_vip_cl_mixer_0_control_agent_rp_ready;                                        // router_010:sink_ready -> alt_vip_cl_mixer_0_control_agent:rp_ready
	wire          alt_vip_cl_mixer_0_control_agent_rp_startofpacket;                                // alt_vip_cl_mixer_0_control_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          alt_vip_cl_mixer_0_control_agent_rp_endofpacket;                                  // alt_vip_cl_mixer_0_control_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_007:sink_valid
	wire   [99:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                             // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [29:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                          // sysid_qsys_control_slave_agent:rp_valid -> router_011:sink_valid
	wire   [99:0] sysid_qsys_control_slave_agent_rp_data;                                           // sysid_qsys_control_slave_agent:rp_data -> router_011:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                          // router_011:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_control_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_control_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_008:sink_valid
	wire   [99:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                             // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [29:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_debug_mem_slave_agent:rp_valid -> router_012:sink_valid
	wire   [99:0] nios2_gen2_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_debug_mem_slave_agent:rp_data -> router_012:sink_data
	wire          nios2_gen2_debug_mem_slave_agent_rp_ready;                                        // router_012:sink_ready -> nios2_gen2_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_debug_mem_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          nios2_gen2_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_debug_mem_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_009:sink_valid
	wire   [99:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                             // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [29:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          onchip_memory2_s1_agent_rp_valid;                                                 // onchip_memory2_s1_agent:rp_valid -> router_013:sink_valid
	wire  [135:0] onchip_memory2_s1_agent_rp_data;                                                  // onchip_memory2_s1_agent:rp_data -> router_013:sink_data
	wire          onchip_memory2_s1_agent_rp_ready;                                                 // router_013:sink_ready -> onchip_memory2_s1_agent:rp_ready
	wire          onchip_memory2_s1_agent_rp_startofpacket;                                         // onchip_memory2_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          onchip_memory2_s1_agent_rp_endofpacket;                                           // onchip_memory2_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                          // timer_s1_agent:rp_valid -> router_014:sink_valid
	wire   [99:0] timer_s1_agent_rp_data;                                                           // timer_s1_agent:rp_data -> router_014:sink_data
	wire          timer_s1_agent_rp_ready;                                                          // router_014:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                  // timer_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                    // timer_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_011:sink_valid
	wire   [99:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                             // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [29:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          ledr_s1_agent_rp_valid;                                                           // ledr_s1_agent:rp_valid -> router_015:sink_valid
	wire   [99:0] ledr_s1_agent_rp_data;                                                            // ledr_s1_agent:rp_data -> router_015:sink_data
	wire          ledr_s1_agent_rp_ready;                                                           // router_015:sink_ready -> ledr_s1_agent:rp_ready
	wire          ledr_s1_agent_rp_startofpacket;                                                   // ledr_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          ledr_s1_agent_rp_endofpacket;                                                     // ledr_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_012:sink_valid
	wire   [99:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_012:sink_data
	wire          router_015_src_ready;                                                             // rsp_demux_012:sink_ready -> router_015:src_ready
	wire   [29:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_012:sink_channel
	wire          router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          camera_pwdn_n_s1_agent_rp_valid;                                                  // camera_pwdn_n_s1_agent:rp_valid -> router_016:sink_valid
	wire   [99:0] camera_pwdn_n_s1_agent_rp_data;                                                   // camera_pwdn_n_s1_agent:rp_data -> router_016:sink_data
	wire          camera_pwdn_n_s1_agent_rp_ready;                                                  // router_016:sink_ready -> camera_pwdn_n_s1_agent:rp_ready
	wire          camera_pwdn_n_s1_agent_rp_startofpacket;                                          // camera_pwdn_n_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          camera_pwdn_n_s1_agent_rp_endofpacket;                                            // camera_pwdn_n_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_013:sink_valid
	wire   [99:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_013:sink_data
	wire          router_016_src_ready;                                                             // rsp_demux_013:sink_ready -> router_016:src_ready
	wire   [29:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_013:sink_channel
	wire          router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          mipi_reset_n_s1_agent_rp_valid;                                                   // mipi_reset_n_s1_agent:rp_valid -> router_017:sink_valid
	wire   [99:0] mipi_reset_n_s1_agent_rp_data;                                                    // mipi_reset_n_s1_agent:rp_data -> router_017:sink_data
	wire          mipi_reset_n_s1_agent_rp_ready;                                                   // router_017:sink_ready -> mipi_reset_n_s1_agent:rp_ready
	wire          mipi_reset_n_s1_agent_rp_startofpacket;                                           // mipi_reset_n_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          mipi_reset_n_s1_agent_rp_endofpacket;                                             // mipi_reset_n_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_014:sink_valid
	wire   [99:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_014:sink_data
	wire          router_017_src_ready;                                                             // rsp_demux_014:sink_ready -> router_017:src_ready
	wire   [29:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_014:sink_channel
	wire          router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          terasic_alsa_apb_slave_clkctrl_agent_rp_valid;                                    // TERASIC_ALSA_apb_slave_clkctrl_agent:rp_valid -> router_018:sink_valid
	wire   [99:0] terasic_alsa_apb_slave_clkctrl_agent_rp_data;                                     // TERASIC_ALSA_apb_slave_clkctrl_agent:rp_data -> router_018:sink_data
	wire          terasic_alsa_apb_slave_clkctrl_agent_rp_ready;                                    // router_018:sink_ready -> TERASIC_ALSA_apb_slave_clkctrl_agent:rp_ready
	wire          terasic_alsa_apb_slave_clkctrl_agent_rp_startofpacket;                            // TERASIC_ALSA_apb_slave_clkctrl_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          terasic_alsa_apb_slave_clkctrl_agent_rp_endofpacket;                              // TERASIC_ALSA_apb_slave_clkctrl_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_015:sink_valid
	wire   [99:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_015:sink_data
	wire          router_018_src_ready;                                                             // rsp_demux_015:sink_ready -> router_018:src_ready
	wire   [29:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_015:sink_channel
	wire          router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          terasic_alsa_apb_slave_output_agent_rp_valid;                                     // TERASIC_ALSA_apb_slave_output_agent:rp_valid -> router_019:sink_valid
	wire   [99:0] terasic_alsa_apb_slave_output_agent_rp_data;                                      // TERASIC_ALSA_apb_slave_output_agent:rp_data -> router_019:sink_data
	wire          terasic_alsa_apb_slave_output_agent_rp_ready;                                     // router_019:sink_ready -> TERASIC_ALSA_apb_slave_output_agent:rp_ready
	wire          terasic_alsa_apb_slave_output_agent_rp_startofpacket;                             // TERASIC_ALSA_apb_slave_output_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          terasic_alsa_apb_slave_output_agent_rp_endofpacket;                               // TERASIC_ALSA_apb_slave_output_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                             // router_019:src_valid -> rsp_demux_016:sink_valid
	wire   [99:0] router_019_src_data;                                                              // router_019:src_data -> rsp_demux_016:sink_data
	wire          router_019_src_ready;                                                             // rsp_demux_016:sink_ready -> router_019:src_ready
	wire   [29:0] router_019_src_channel;                                                           // router_019:src_channel -> rsp_demux_016:sink_channel
	wire          router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_valid;                                      // alt_vip_vfr_vga_avalon_slave_agent:rp_valid -> router_020:sink_valid
	wire   [99:0] alt_vip_vfr_vga_avalon_slave_agent_rp_data;                                       // alt_vip_vfr_vga_avalon_slave_agent:rp_data -> router_020:sink_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_ready;                                      // router_020:sink_ready -> alt_vip_vfr_vga_avalon_slave_agent:rp_ready
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket;                              // alt_vip_vfr_vga_avalon_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket;                                // alt_vip_vfr_vga_avalon_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_017:sink_valid
	wire   [99:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_017:sink_data
	wire          router_020_src_ready;                                                             // rsp_demux_017:sink_ready -> router_020:src_ready
	wire   [29:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_017:sink_channel
	wire          router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          ir_rx_avalon_slave_agent_rp_valid;                                                // ir_rx_avalon_slave_agent:rp_valid -> router_021:sink_valid
	wire   [99:0] ir_rx_avalon_slave_agent_rp_data;                                                 // ir_rx_avalon_slave_agent:rp_data -> router_021:sink_data
	wire          ir_rx_avalon_slave_agent_rp_ready;                                                // router_021:sink_ready -> ir_rx_avalon_slave_agent:rp_ready
	wire          ir_rx_avalon_slave_agent_rp_startofpacket;                                        // ir_rx_avalon_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          ir_rx_avalon_slave_agent_rp_endofpacket;                                          // ir_rx_avalon_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                             // router_021:src_valid -> rsp_demux_018:sink_valid
	wire   [99:0] router_021_src_data;                                                              // router_021:src_data -> rsp_demux_018:sink_data
	wire          router_021_src_ready;                                                             // rsp_demux_018:sink_ready -> router_021:src_ready
	wire   [29:0] router_021_src_channel;                                                           // router_021:src_channel -> rsp_demux_018:sink_channel
	wire          router_021_src_startofpacket;                                                     // router_021:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_021_src_endofpacket;                                                       // router_021:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          ts_i2c_avalon_slave_0_agent_rp_valid;                                             // ts_i2c_avalon_slave_0_agent:rp_valid -> router_022:sink_valid
	wire   [99:0] ts_i2c_avalon_slave_0_agent_rp_data;                                              // ts_i2c_avalon_slave_0_agent:rp_data -> router_022:sink_data
	wire          ts_i2c_avalon_slave_0_agent_rp_ready;                                             // router_022:sink_ready -> ts_i2c_avalon_slave_0_agent:rp_ready
	wire          ts_i2c_avalon_slave_0_agent_rp_startofpacket;                                     // ts_i2c_avalon_slave_0_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          ts_i2c_avalon_slave_0_agent_rp_endofpacket;                                       // ts_i2c_avalon_slave_0_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                             // router_022:src_valid -> rsp_demux_019:sink_valid
	wire   [99:0] router_022_src_data;                                                              // router_022:src_data -> rsp_demux_019:sink_data
	wire          router_022_src_ready;                                                             // rsp_demux_019:sink_ready -> router_022:src_ready
	wire   [29:0] router_022_src_channel;                                                           // router_022:src_channel -> rsp_demux_019:sink_channel
	wire          router_022_src_startofpacket;                                                     // router_022:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_022_src_endofpacket;                                                       // router_022:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          i2c_opencores_light_avalon_slave_0_agent_rp_valid;                                // i2c_opencores_light_avalon_slave_0_agent:rp_valid -> router_023:sink_valid
	wire   [99:0] i2c_opencores_light_avalon_slave_0_agent_rp_data;                                 // i2c_opencores_light_avalon_slave_0_agent:rp_data -> router_023:sink_data
	wire          i2c_opencores_light_avalon_slave_0_agent_rp_ready;                                // router_023:sink_ready -> i2c_opencores_light_avalon_slave_0_agent:rp_ready
	wire          i2c_opencores_light_avalon_slave_0_agent_rp_startofpacket;                        // i2c_opencores_light_avalon_slave_0_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          i2c_opencores_light_avalon_slave_0_agent_rp_endofpacket;                          // i2c_opencores_light_avalon_slave_0_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                             // router_023:src_valid -> rsp_demux_020:sink_valid
	wire   [99:0] router_023_src_data;                                                              // router_023:src_data -> rsp_demux_020:sink_data
	wire          router_023_src_ready;                                                             // rsp_demux_020:sink_ready -> router_023:src_ready
	wire   [29:0] router_023_src_channel;                                                           // router_023:src_channel -> rsp_demux_020:sink_channel
	wire          router_023_src_startofpacket;                                                     // router_023:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_023_src_endofpacket;                                                       // router_023:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          key_s1_agent_rp_valid;                                                            // key_s1_agent:rp_valid -> router_024:sink_valid
	wire   [99:0] key_s1_agent_rp_data;                                                             // key_s1_agent:rp_data -> router_024:sink_data
	wire          key_s1_agent_rp_ready;                                                            // router_024:sink_ready -> key_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                                    // key_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                                      // key_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                             // router_024:src_valid -> rsp_demux_021:sink_valid
	wire   [99:0] router_024_src_data;                                                              // router_024:src_data -> rsp_demux_021:sink_data
	wire          router_024_src_ready;                                                             // rsp_demux_021:sink_ready -> router_024:src_ready
	wire   [29:0] router_024_src_channel;                                                           // router_024:src_channel -> rsp_demux_021:sink_channel
	wire          router_024_src_startofpacket;                                                     // router_024:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_024_src_endofpacket;                                                       // router_024:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                                             // sw_s1_agent:rp_valid -> router_025:sink_valid
	wire   [99:0] sw_s1_agent_rp_data;                                                              // sw_s1_agent:rp_data -> router_025:sink_data
	wire          sw_s1_agent_rp_ready;                                                             // router_025:sink_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                                     // sw_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                                       // sw_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                             // router_025:src_valid -> rsp_demux_022:sink_valid
	wire   [99:0] router_025_src_data;                                                              // router_025:src_data -> rsp_demux_022:sink_data
	wire          router_025_src_ready;                                                             // rsp_demux_022:sink_ready -> router_025:src_ready
	wire   [29:0] router_025_src_channel;                                                           // router_025:src_channel -> rsp_demux_022:sink_channel
	wire          router_025_src_startofpacket;                                                     // router_025:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_025_src_endofpacket;                                                       // router_025:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          ts_interrupt_s1_agent_rp_valid;                                                   // ts_interrupt_s1_agent:rp_valid -> router_026:sink_valid
	wire   [99:0] ts_interrupt_s1_agent_rp_data;                                                    // ts_interrupt_s1_agent:rp_data -> router_026:sink_data
	wire          ts_interrupt_s1_agent_rp_ready;                                                   // router_026:sink_ready -> ts_interrupt_s1_agent:rp_ready
	wire          ts_interrupt_s1_agent_rp_startofpacket;                                           // ts_interrupt_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          ts_interrupt_s1_agent_rp_endofpacket;                                             // ts_interrupt_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                             // router_026:src_valid -> rsp_demux_023:sink_valid
	wire   [99:0] router_026_src_data;                                                              // router_026:src_data -> rsp_demux_023:sink_data
	wire          router_026_src_ready;                                                             // rsp_demux_023:sink_ready -> router_026:src_ready
	wire   [29:0] router_026_src_channel;                                                           // router_026:src_channel -> rsp_demux_023:sink_channel
	wire          router_026_src_startofpacket;                                                     // router_026:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_026_src_endofpacket;                                                       // router_026:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          mpu_int_s1_agent_rp_valid;                                                        // mpu_int_s1_agent:rp_valid -> router_027:sink_valid
	wire   [99:0] mpu_int_s1_agent_rp_data;                                                         // mpu_int_s1_agent:rp_data -> router_027:sink_data
	wire          mpu_int_s1_agent_rp_ready;                                                        // router_027:sink_ready -> mpu_int_s1_agent:rp_ready
	wire          mpu_int_s1_agent_rp_startofpacket;                                                // mpu_int_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          mpu_int_s1_agent_rp_endofpacket;                                                  // mpu_int_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                             // router_027:src_valid -> rsp_demux_024:sink_valid
	wire   [99:0] router_027_src_data;                                                              // router_027:src_data -> rsp_demux_024:sink_data
	wire          router_027_src_ready;                                                             // rsp_demux_024:sink_ready -> router_027:src_ready
	wire   [29:0] router_027_src_channel;                                                           // router_027:src_channel -> rsp_demux_024:sink_channel
	wire          router_027_src_startofpacket;                                                     // router_027:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_027_src_endofpacket;                                                       // router_027:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          light_int_s1_agent_rp_valid;                                                      // light_int_s1_agent:rp_valid -> router_028:sink_valid
	wire   [99:0] light_int_s1_agent_rp_data;                                                       // light_int_s1_agent:rp_data -> router_028:sink_data
	wire          light_int_s1_agent_rp_ready;                                                      // router_028:sink_ready -> light_int_s1_agent:rp_ready
	wire          light_int_s1_agent_rp_startofpacket;                                              // light_int_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          light_int_s1_agent_rp_endofpacket;                                                // light_int_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                             // router_028:src_valid -> rsp_demux_025:sink_valid
	wire   [99:0] router_028_src_data;                                                              // router_028:src_data -> rsp_demux_025:sink_data
	wire          router_028_src_ready;                                                             // rsp_demux_025:sink_ready -> router_028:src_ready
	wire   [29:0] router_028_src_channel;                                                           // router_028:src_channel -> rsp_demux_025:sink_channel
	wire          router_028_src_startofpacket;                                                     // router_028:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_028_src_endofpacket;                                                       // router_028:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          seg7_slave_agent_rp_valid;                                                        // seg7_slave_agent:rp_valid -> router_029:sink_valid
	wire   [99:0] seg7_slave_agent_rp_data;                                                         // seg7_slave_agent:rp_data -> router_029:sink_data
	wire          seg7_slave_agent_rp_ready;                                                        // router_029:sink_ready -> seg7_slave_agent:rp_ready
	wire          seg7_slave_agent_rp_startofpacket;                                                // seg7_slave_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          seg7_slave_agent_rp_endofpacket;                                                  // seg7_slave_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                             // router_029:src_valid -> rsp_demux_026:sink_valid
	wire   [99:0] router_029_src_data;                                                              // router_029:src_data -> rsp_demux_026:sink_data
	wire          router_029_src_ready;                                                             // rsp_demux_026:sink_ready -> router_029:src_ready
	wire   [29:0] router_029_src_channel;                                                           // router_029:src_channel -> rsp_demux_026:sink_channel
	wire          router_029_src_startofpacket;                                                     // router_029:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_029_src_endofpacket;                                                       // router_029:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          spi_spi_control_port_agent_rp_valid;                                              // spi_spi_control_port_agent:rp_valid -> router_030:sink_valid
	wire   [99:0] spi_spi_control_port_agent_rp_data;                                               // spi_spi_control_port_agent:rp_data -> router_030:sink_data
	wire          spi_spi_control_port_agent_rp_ready;                                              // router_030:sink_ready -> spi_spi_control_port_agent:rp_ready
	wire          spi_spi_control_port_agent_rp_startofpacket;                                      // spi_spi_control_port_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          spi_spi_control_port_agent_rp_endofpacket;                                        // spi_spi_control_port_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                             // router_030:src_valid -> rsp_demux_027:sink_valid
	wire   [99:0] router_030_src_data;                                                              // router_030:src_data -> rsp_demux_027:sink_data
	wire          router_030_src_ready;                                                             // rsp_demux_027:sink_ready -> router_030:src_ready
	wire   [29:0] router_030_src_channel;                                                           // router_030:src_channel -> rsp_demux_027:sink_channel
	wire          router_030_src_startofpacket;                                                     // router_030:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_030_src_endofpacket;                                                       // router_030:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          spi_mpu_spi_control_port_agent_rp_valid;                                          // spi_mpu_spi_control_port_agent:rp_valid -> router_031:sink_valid
	wire   [99:0] spi_mpu_spi_control_port_agent_rp_data;                                           // spi_mpu_spi_control_port_agent:rp_data -> router_031:sink_data
	wire          spi_mpu_spi_control_port_agent_rp_ready;                                          // router_031:sink_ready -> spi_mpu_spi_control_port_agent:rp_ready
	wire          spi_mpu_spi_control_port_agent_rp_startofpacket;                                  // spi_mpu_spi_control_port_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          spi_mpu_spi_control_port_agent_rp_endofpacket;                                    // spi_mpu_spi_control_port_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                             // router_031:src_valid -> rsp_demux_028:sink_valid
	wire   [99:0] router_031_src_data;                                                              // router_031:src_data -> rsp_demux_028:sink_data
	wire          router_031_src_ready;                                                             // rsp_demux_028:sink_ready -> router_031:src_ready
	wire   [29:0] router_031_src_channel;                                                           // router_031:src_channel -> rsp_demux_028:sink_channel
	wire          router_031_src_startofpacket;                                                     // router_031:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_031_src_endofpacket;                                                       // router_031:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rp_valid;                            // tv_decoder_stream_capture_avalon_slave_agent:rp_valid -> router_032:sink_valid
	wire   [99:0] tv_decoder_stream_capture_avalon_slave_agent_rp_data;                             // tv_decoder_stream_capture_avalon_slave_agent:rp_data -> router_032:sink_data
	wire          tv_decoder_stream_capture_avalon_slave_agent_rp_ready;                            // router_032:sink_ready -> tv_decoder_stream_capture_avalon_slave_agent:rp_ready
	wire          tv_decoder_stream_capture_avalon_slave_agent_rp_startofpacket;                    // tv_decoder_stream_capture_avalon_slave_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          tv_decoder_stream_capture_avalon_slave_agent_rp_endofpacket;                      // tv_decoder_stream_capture_avalon_slave_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                             // router_032:src_valid -> rsp_demux_029:sink_valid
	wire   [99:0] router_032_src_data;                                                              // router_032:src_data -> rsp_demux_029:sink_data
	wire          router_032_src_ready;                                                             // rsp_demux_029:sink_ready -> router_032:src_ready
	wire   [29:0] router_032_src_channel;                                                           // router_032:src_channel -> rsp_demux_029:sink_channel
	wire          router_032_src_startofpacket;                                                     // router_032:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_032_src_endofpacket;                                                       // router_032:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> nios2_gen2_data_master_limiter:cmd_sink_valid
	wire   [99:0] router_src_data;                                                                  // router:src_data -> nios2_gen2_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                 // nios2_gen2_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [29:0] router_src_channel;                                                               // router:src_channel -> nios2_gen2_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> nios2_gen2_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> nios2_gen2_data_master_limiter:cmd_sink_endofpacket
	wire   [99:0] nios2_gen2_data_master_limiter_cmd_src_data;                                      // nios2_gen2_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          nios2_gen2_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_gen2_data_master_limiter:cmd_src_ready
	wire   [29:0] nios2_gen2_data_master_limiter_cmd_src_channel;                                   // nios2_gen2_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios2_gen2_data_master_limiter_cmd_src_startofpacket;                             // nios2_gen2_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          nios2_gen2_data_master_limiter_cmd_src_endofpacket;                               // nios2_gen2_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> nios2_gen2_data_master_limiter:rsp_sink_valid
	wire   [99:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> nios2_gen2_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                // nios2_gen2_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [29:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> nios2_gen2_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> nios2_gen2_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> nios2_gen2_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_data_master_limiter_rsp_src_valid;                                     // nios2_gen2_data_master_limiter:rsp_src_valid -> nios2_gen2_data_master_agent:rp_valid
	wire   [99:0] nios2_gen2_data_master_limiter_rsp_src_data;                                      // nios2_gen2_data_master_limiter:rsp_src_data -> nios2_gen2_data_master_agent:rp_data
	wire          nios2_gen2_data_master_limiter_rsp_src_ready;                                     // nios2_gen2_data_master_agent:rp_ready -> nios2_gen2_data_master_limiter:rsp_src_ready
	wire   [29:0] nios2_gen2_data_master_limiter_rsp_src_channel;                                   // nios2_gen2_data_master_limiter:rsp_src_channel -> nios2_gen2_data_master_agent:rp_channel
	wire          nios2_gen2_data_master_limiter_rsp_src_startofpacket;                             // nios2_gen2_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_data_master_agent:rp_startofpacket
	wire          nios2_gen2_data_master_limiter_rsp_src_endofpacket;                               // nios2_gen2_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire   [99:0] router_001_src_data;                                                              // router_001:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                             // mm_bridge_0_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [29:0] router_001_src_channel;                                                           // router_001:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire   [99:0] mm_bridge_0_m0_limiter_cmd_src_data;                                              // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                                             // cmd_demux_001:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire   [29:0] mm_bridge_0_m0_limiter_cmd_src_channel;                                           // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                                     // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                                       // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire   [99:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                            // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [29:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                                             // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire   [99:0] mm_bridge_0_m0_limiter_rsp_src_data;                                              // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                                             // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire   [29:0] mm_bridge_0_m0_limiter_rsp_src_channel;                                           // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                                     // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                                       // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> nios2_gen2_instruction_master_limiter:cmd_sink_valid
	wire   [99:0] router_002_src_data;                                                              // router_002:src_data -> nios2_gen2_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                             // nios2_gen2_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [29:0] router_002_src_channel;                                                           // router_002:src_channel -> nios2_gen2_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_endofpacket
	wire   [99:0] nios2_gen2_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_instruction_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          nios2_gen2_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_002:sink_ready -> nios2_gen2_instruction_master_limiter:cmd_src_ready
	wire   [29:0] nios2_gen2_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_instruction_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          nios2_gen2_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          nios2_gen2_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> nios2_gen2_instruction_master_limiter:rsp_sink_valid
	wire   [99:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> nios2_gen2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                            // nios2_gen2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [29:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> nios2_gen2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_instruction_master_limiter:rsp_src_valid -> nios2_gen2_instruction_master_agent:rp_valid
	wire   [99:0] nios2_gen2_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_instruction_master_limiter:rsp_src_data -> nios2_gen2_instruction_master_agent:rp_data
	wire          nios2_gen2_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_instruction_master_agent:rp_ready -> nios2_gen2_instruction_master_limiter:rsp_src_ready
	wire   [29:0] nios2_gen2_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_instruction_master_limiter:rsp_src_channel -> nios2_gen2_instruction_master_agent:rp_channel
	wire          nios2_gen2_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_instruction_master_agent:rp_startofpacket
	wire          nios2_gen2_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_instruction_master_agent:rp_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire   [99:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [29:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire   [99:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [29:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire   [99:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [29:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire   [99:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [29:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire   [99:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [29:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire   [99:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                            // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [29:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                            // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire   [99:0] cmd_demux_src11_data;                                                             // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                            // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [29:0] cmd_demux_src11_channel;                                                          // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                    // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                      // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                            // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire   [99:0] cmd_demux_src12_data;                                                             // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                            // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [29:0] cmd_demux_src12_channel;                                                          // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                    // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                      // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                            // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire   [99:0] cmd_demux_src13_data;                                                             // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                            // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [29:0] cmd_demux_src13_channel;                                                          // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                    // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                      // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                            // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire   [99:0] cmd_demux_src14_data;                                                             // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                            // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [29:0] cmd_demux_src14_channel;                                                          // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                    // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                      // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                         // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire   [99:0] cmd_demux_001_src4_data;                                                          // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [29:0] cmd_demux_001_src4_channel;                                                       // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                 // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                   // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                         // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire   [99:0] cmd_demux_001_src5_data;                                                          // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                         // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [29:0] cmd_demux_001_src5_channel;                                                       // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                 // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                   // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                         // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire   [99:0] cmd_demux_001_src6_data;                                                          // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                         // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [29:0] cmd_demux_001_src6_channel;                                                       // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                 // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                   // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                         // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire   [99:0] cmd_demux_001_src8_data;                                                          // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                         // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [29:0] cmd_demux_001_src8_channel;                                                       // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                 // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                   // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                         // cmd_demux_001:src9_valid -> cmd_mux_012:sink1_valid
	wire   [99:0] cmd_demux_001_src9_data;                                                          // cmd_demux_001:src9_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src9_ready;                                                         // cmd_mux_012:sink1_ready -> cmd_demux_001:src9_ready
	wire   [29:0] cmd_demux_001_src9_channel;                                                       // cmd_demux_001:src9_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                 // cmd_demux_001:src9_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                   // cmd_demux_001:src9_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                        // cmd_demux_001:src10_valid -> cmd_mux_013:sink1_valid
	wire   [99:0] cmd_demux_001_src10_data;                                                         // cmd_demux_001:src10_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src10_ready;                                                        // cmd_mux_013:sink1_ready -> cmd_demux_001:src10_ready
	wire   [29:0] cmd_demux_001_src10_channel;                                                      // cmd_demux_001:src10_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                // cmd_demux_001:src10_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                  // cmd_demux_001:src10_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                        // cmd_demux_001:src11_valid -> cmd_mux_014:sink1_valid
	wire   [99:0] cmd_demux_001_src11_data;                                                         // cmd_demux_001:src11_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src11_ready;                                                        // cmd_mux_014:sink1_ready -> cmd_demux_001:src11_ready
	wire   [29:0] cmd_demux_001_src11_channel;                                                      // cmd_demux_001:src11_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                                // cmd_demux_001:src11_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                  // cmd_demux_001:src11_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                        // cmd_demux_001:src12_valid -> cmd_mux_015:sink0_valid
	wire   [99:0] cmd_demux_001_src12_data;                                                         // cmd_demux_001:src12_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src12_ready;                                                        // cmd_mux_015:sink0_ready -> cmd_demux_001:src12_ready
	wire   [29:0] cmd_demux_001_src12_channel;                                                      // cmd_demux_001:src12_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                // cmd_demux_001:src12_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                  // cmd_demux_001:src12_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                        // cmd_demux_001:src13_valid -> cmd_mux_016:sink0_valid
	wire   [99:0] cmd_demux_001_src13_data;                                                         // cmd_demux_001:src13_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src13_ready;                                                        // cmd_mux_016:sink0_ready -> cmd_demux_001:src13_ready
	wire   [29:0] cmd_demux_001_src13_channel;                                                      // cmd_demux_001:src13_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                // cmd_demux_001:src13_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                  // cmd_demux_001:src13_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src15_valid;                                                        // cmd_demux_001:src15_valid -> cmd_mux_018:sink0_valid
	wire   [99:0] cmd_demux_001_src15_data;                                                         // cmd_demux_001:src15_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src15_ready;                                                        // cmd_mux_018:sink0_ready -> cmd_demux_001:src15_ready
	wire   [29:0] cmd_demux_001_src15_channel;                                                      // cmd_demux_001:src15_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src15_startofpacket;                                                // cmd_demux_001:src15_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                  // cmd_demux_001:src15_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src16_valid;                                                        // cmd_demux_001:src16_valid -> cmd_mux_019:sink0_valid
	wire   [99:0] cmd_demux_001_src16_data;                                                         // cmd_demux_001:src16_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src16_ready;                                                        // cmd_mux_019:sink0_ready -> cmd_demux_001:src16_ready
	wire   [29:0] cmd_demux_001_src16_channel;                                                      // cmd_demux_001:src16_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src16_startofpacket;                                                // cmd_demux_001:src16_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                  // cmd_demux_001:src16_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src17_valid;                                                        // cmd_demux_001:src17_valid -> cmd_mux_020:sink0_valid
	wire   [99:0] cmd_demux_001_src17_data;                                                         // cmd_demux_001:src17_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src17_ready;                                                        // cmd_mux_020:sink0_ready -> cmd_demux_001:src17_ready
	wire   [29:0] cmd_demux_001_src17_channel;                                                      // cmd_demux_001:src17_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src17_startofpacket;                                                // cmd_demux_001:src17_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                  // cmd_demux_001:src17_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src18_valid;                                                        // cmd_demux_001:src18_valid -> cmd_mux_021:sink0_valid
	wire   [99:0] cmd_demux_001_src18_data;                                                         // cmd_demux_001:src18_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_001_src18_ready;                                                        // cmd_mux_021:sink0_ready -> cmd_demux_001:src18_ready
	wire   [29:0] cmd_demux_001_src18_channel;                                                      // cmd_demux_001:src18_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_001_src18_startofpacket;                                                // cmd_demux_001:src18_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                  // cmd_demux_001:src18_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src19_valid;                                                        // cmd_demux_001:src19_valid -> cmd_mux_022:sink0_valid
	wire   [99:0] cmd_demux_001_src19_data;                                                         // cmd_demux_001:src19_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_001_src19_ready;                                                        // cmd_mux_022:sink0_ready -> cmd_demux_001:src19_ready
	wire   [29:0] cmd_demux_001_src19_channel;                                                      // cmd_demux_001:src19_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_001_src19_startofpacket;                                                // cmd_demux_001:src19_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                  // cmd_demux_001:src19_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_001_src20_valid;                                                        // cmd_demux_001:src20_valid -> cmd_mux_023:sink0_valid
	wire   [99:0] cmd_demux_001_src20_data;                                                         // cmd_demux_001:src20_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_001_src20_ready;                                                        // cmd_mux_023:sink0_ready -> cmd_demux_001:src20_ready
	wire   [29:0] cmd_demux_001_src20_channel;                                                      // cmd_demux_001:src20_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_001_src20_startofpacket;                                                // cmd_demux_001:src20_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                  // cmd_demux_001:src20_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src21_valid;                                                        // cmd_demux_001:src21_valid -> cmd_mux_024:sink0_valid
	wire   [99:0] cmd_demux_001_src21_data;                                                         // cmd_demux_001:src21_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_001_src21_ready;                                                        // cmd_mux_024:sink0_ready -> cmd_demux_001:src21_ready
	wire   [29:0] cmd_demux_001_src21_channel;                                                      // cmd_demux_001:src21_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_001_src21_startofpacket;                                                // cmd_demux_001:src21_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                  // cmd_demux_001:src21_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_001_src22_valid;                                                        // cmd_demux_001:src22_valid -> cmd_mux_025:sink0_valid
	wire   [99:0] cmd_demux_001_src22_data;                                                         // cmd_demux_001:src22_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_001_src22_ready;                                                        // cmd_mux_025:sink0_ready -> cmd_demux_001:src22_ready
	wire   [29:0] cmd_demux_001_src22_channel;                                                      // cmd_demux_001:src22_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_001_src22_startofpacket;                                                // cmd_demux_001:src22_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_001_src22_endofpacket;                                                  // cmd_demux_001:src22_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_001_src23_valid;                                                        // cmd_demux_001:src23_valid -> cmd_mux_026:sink0_valid
	wire   [99:0] cmd_demux_001_src23_data;                                                         // cmd_demux_001:src23_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_001_src23_ready;                                                        // cmd_mux_026:sink0_ready -> cmd_demux_001:src23_ready
	wire   [29:0] cmd_demux_001_src23_channel;                                                      // cmd_demux_001:src23_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_001_src23_startofpacket;                                                // cmd_demux_001:src23_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_001_src23_endofpacket;                                                  // cmd_demux_001:src23_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_001_src24_valid;                                                        // cmd_demux_001:src24_valid -> cmd_mux_027:sink0_valid
	wire   [99:0] cmd_demux_001_src24_data;                                                         // cmd_demux_001:src24_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_001_src24_ready;                                                        // cmd_mux_027:sink0_ready -> cmd_demux_001:src24_ready
	wire   [29:0] cmd_demux_001_src24_channel;                                                      // cmd_demux_001:src24_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_001_src24_startofpacket;                                                // cmd_demux_001:src24_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_001_src24_endofpacket;                                                  // cmd_demux_001:src24_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_001_src25_valid;                                                        // cmd_demux_001:src25_valid -> cmd_mux_028:sink0_valid
	wire   [99:0] cmd_demux_001_src25_data;                                                         // cmd_demux_001:src25_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_001_src25_ready;                                                        // cmd_mux_028:sink0_ready -> cmd_demux_001:src25_ready
	wire   [29:0] cmd_demux_001_src25_channel;                                                      // cmd_demux_001:src25_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_001_src25_startofpacket;                                                // cmd_demux_001:src25_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_001_src25_endofpacket;                                                  // cmd_demux_001:src25_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux_009:sink1_valid
	wire   [99:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux_009:sink1_ready -> cmd_demux_002:src0_ready
	wire   [29:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_010:sink1_valid
	wire   [99:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_010:sink1_ready -> cmd_demux_002:src1_ready
	wire   [29:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire   [99:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [29:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire   [99:0] rsp_demux_004_src1_data;                                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                         // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [29:0] rsp_demux_004_src1_channel;                                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire   [99:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [29:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                         // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire   [99:0] rsp_demux_005_src1_data;                                                          // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                         // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [29:0] rsp_demux_005_src1_channel;                                                       // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                 // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                   // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire   [99:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [29:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                         // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire   [99:0] rsp_demux_006_src1_data;                                                          // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                         // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [29:0] rsp_demux_006_src1_channel;                                                       // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                 // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                   // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire   [99:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [29:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                         // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire   [99:0] rsp_demux_008_src1_data;                                                          // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                         // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [29:0] rsp_demux_008_src1_channel;                                                       // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                 // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                   // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire   [99:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [29:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                         // rsp_demux_009:src1_valid -> rsp_mux_002:sink0_valid
	wire   [99:0] rsp_demux_009_src1_data;                                                          // rsp_demux_009:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_009_src1_ready;                                                         // rsp_mux_002:sink0_ready -> rsp_demux_009:src1_ready
	wire   [29:0] rsp_demux_009_src1_channel;                                                       // rsp_demux_009:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_009_src1_startofpacket;                                                 // rsp_demux_009:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                   // rsp_demux_009:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire   [99:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                         // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [29:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                         // rsp_demux_010:src1_valid -> rsp_mux_002:sink1_valid
	wire   [99:0] rsp_demux_010_src1_data;                                                          // rsp_demux_010:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_010_src1_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_010:src1_ready
	wire   [29:0] rsp_demux_010_src1_channel;                                                       // rsp_demux_010:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_010_src1_startofpacket;                                                 // rsp_demux_010:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                   // rsp_demux_010:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire   [99:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                         // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [29:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire   [99:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                         // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [29:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                         // rsp_demux_012:src1_valid -> rsp_mux_001:sink9_valid
	wire   [99:0] rsp_demux_012_src1_data;                                                          // rsp_demux_012:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_012_src1_ready;                                                         // rsp_mux_001:sink9_ready -> rsp_demux_012:src1_ready
	wire   [29:0] rsp_demux_012_src1_channel;                                                       // rsp_demux_012:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_012_src1_startofpacket;                                                 // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                   // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire   [99:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                         // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [29:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                         // rsp_demux_013:src1_valid -> rsp_mux_001:sink10_valid
	wire   [99:0] rsp_demux_013_src1_data;                                                          // rsp_demux_013:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_013_src1_ready;                                                         // rsp_mux_001:sink10_ready -> rsp_demux_013:src1_ready
	wire   [29:0] rsp_demux_013_src1_channel;                                                       // rsp_demux_013:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_013_src1_startofpacket;                                                 // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                   // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire   [99:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                         // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [29:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                         // rsp_demux_014:src1_valid -> rsp_mux_001:sink11_valid
	wire   [99:0] rsp_demux_014_src1_data;                                                          // rsp_demux_014:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_014_src1_ready;                                                         // rsp_mux_001:sink11_ready -> rsp_demux_014:src1_ready
	wire   [29:0] rsp_demux_014_src1_channel;                                                       // rsp_demux_014:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_014_src1_startofpacket;                                                 // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                   // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_015_src0_valid;                                                         // rsp_demux_015:src0_valid -> rsp_mux_001:sink12_valid
	wire   [99:0] rsp_demux_015_src0_data;                                                          // rsp_demux_015:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_015_src0_ready;                                                         // rsp_mux_001:sink12_ready -> rsp_demux_015:src0_ready
	wire   [29:0] rsp_demux_015_src0_channel;                                                       // rsp_demux_015:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_015_src0_startofpacket;                                                 // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                   // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_016_src0_valid;                                                         // rsp_demux_016:src0_valid -> rsp_mux_001:sink13_valid
	wire   [99:0] rsp_demux_016_src0_data;                                                          // rsp_demux_016:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_016_src0_ready;                                                         // rsp_mux_001:sink13_ready -> rsp_demux_016:src0_ready
	wire   [29:0] rsp_demux_016_src0_channel;                                                       // rsp_demux_016:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_016_src0_startofpacket;                                                 // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                   // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_018_src0_valid;                                                         // rsp_demux_018:src0_valid -> rsp_mux_001:sink15_valid
	wire   [99:0] rsp_demux_018_src0_data;                                                          // rsp_demux_018:src0_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_018_src0_ready;                                                         // rsp_mux_001:sink15_ready -> rsp_demux_018:src0_ready
	wire   [29:0] rsp_demux_018_src0_channel;                                                       // rsp_demux_018:src0_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_018_src0_startofpacket;                                                 // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                   // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_019_src0_valid;                                                         // rsp_demux_019:src0_valid -> rsp_mux_001:sink16_valid
	wire   [99:0] rsp_demux_019_src0_data;                                                          // rsp_demux_019:src0_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_019_src0_ready;                                                         // rsp_mux_001:sink16_ready -> rsp_demux_019:src0_ready
	wire   [29:0] rsp_demux_019_src0_channel;                                                       // rsp_demux_019:src0_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_019_src0_startofpacket;                                                 // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                   // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_020_src0_valid;                                                         // rsp_demux_020:src0_valid -> rsp_mux_001:sink17_valid
	wire   [99:0] rsp_demux_020_src0_data;                                                          // rsp_demux_020:src0_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_020_src0_ready;                                                         // rsp_mux_001:sink17_ready -> rsp_demux_020:src0_ready
	wire   [29:0] rsp_demux_020_src0_channel;                                                       // rsp_demux_020:src0_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_020_src0_startofpacket;                                                 // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                   // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_021_src0_valid;                                                         // rsp_demux_021:src0_valid -> rsp_mux_001:sink18_valid
	wire   [99:0] rsp_demux_021_src0_data;                                                          // rsp_demux_021:src0_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_021_src0_ready;                                                         // rsp_mux_001:sink18_ready -> rsp_demux_021:src0_ready
	wire   [29:0] rsp_demux_021_src0_channel;                                                       // rsp_demux_021:src0_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_021_src0_startofpacket;                                                 // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                   // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_022_src0_valid;                                                         // rsp_demux_022:src0_valid -> rsp_mux_001:sink19_valid
	wire   [99:0] rsp_demux_022_src0_data;                                                          // rsp_demux_022:src0_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_022_src0_ready;                                                         // rsp_mux_001:sink19_ready -> rsp_demux_022:src0_ready
	wire   [29:0] rsp_demux_022_src0_channel;                                                       // rsp_demux_022:src0_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_022_src0_startofpacket;                                                 // rsp_demux_022:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                   // rsp_demux_022:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_023_src0_valid;                                                         // rsp_demux_023:src0_valid -> rsp_mux_001:sink20_valid
	wire   [99:0] rsp_demux_023_src0_data;                                                          // rsp_demux_023:src0_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_023_src0_ready;                                                         // rsp_mux_001:sink20_ready -> rsp_demux_023:src0_ready
	wire   [29:0] rsp_demux_023_src0_channel;                                                       // rsp_demux_023:src0_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_023_src0_startofpacket;                                                 // rsp_demux_023:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                   // rsp_demux_023:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_024_src0_valid;                                                         // rsp_demux_024:src0_valid -> rsp_mux_001:sink21_valid
	wire   [99:0] rsp_demux_024_src0_data;                                                          // rsp_demux_024:src0_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_024_src0_ready;                                                         // rsp_mux_001:sink21_ready -> rsp_demux_024:src0_ready
	wire   [29:0] rsp_demux_024_src0_channel;                                                       // rsp_demux_024:src0_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_024_src0_startofpacket;                                                 // rsp_demux_024:src0_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                   // rsp_demux_024:src0_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_025_src0_valid;                                                         // rsp_demux_025:src0_valid -> rsp_mux_001:sink22_valid
	wire   [99:0] rsp_demux_025_src0_data;                                                          // rsp_demux_025:src0_data -> rsp_mux_001:sink22_data
	wire          rsp_demux_025_src0_ready;                                                         // rsp_mux_001:sink22_ready -> rsp_demux_025:src0_ready
	wire   [29:0] rsp_demux_025_src0_channel;                                                       // rsp_demux_025:src0_channel -> rsp_mux_001:sink22_channel
	wire          rsp_demux_025_src0_startofpacket;                                                 // rsp_demux_025:src0_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                   // rsp_demux_025:src0_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire          rsp_demux_026_src0_valid;                                                         // rsp_demux_026:src0_valid -> rsp_mux_001:sink23_valid
	wire   [99:0] rsp_demux_026_src0_data;                                                          // rsp_demux_026:src0_data -> rsp_mux_001:sink23_data
	wire          rsp_demux_026_src0_ready;                                                         // rsp_mux_001:sink23_ready -> rsp_demux_026:src0_ready
	wire   [29:0] rsp_demux_026_src0_channel;                                                       // rsp_demux_026:src0_channel -> rsp_mux_001:sink23_channel
	wire          rsp_demux_026_src0_startofpacket;                                                 // rsp_demux_026:src0_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                   // rsp_demux_026:src0_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire          rsp_demux_027_src0_valid;                                                         // rsp_demux_027:src0_valid -> rsp_mux_001:sink24_valid
	wire   [99:0] rsp_demux_027_src0_data;                                                          // rsp_demux_027:src0_data -> rsp_mux_001:sink24_data
	wire          rsp_demux_027_src0_ready;                                                         // rsp_mux_001:sink24_ready -> rsp_demux_027:src0_ready
	wire   [29:0] rsp_demux_027_src0_channel;                                                       // rsp_demux_027:src0_channel -> rsp_mux_001:sink24_channel
	wire          rsp_demux_027_src0_startofpacket;                                                 // rsp_demux_027:src0_startofpacket -> rsp_mux_001:sink24_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                   // rsp_demux_027:src0_endofpacket -> rsp_mux_001:sink24_endofpacket
	wire          rsp_demux_028_src0_valid;                                                         // rsp_demux_028:src0_valid -> rsp_mux_001:sink25_valid
	wire   [99:0] rsp_demux_028_src0_data;                                                          // rsp_demux_028:src0_data -> rsp_mux_001:sink25_data
	wire          rsp_demux_028_src0_ready;                                                         // rsp_mux_001:sink25_ready -> rsp_demux_028:src0_ready
	wire   [29:0] rsp_demux_028_src0_channel;                                                       // rsp_demux_028:src0_channel -> rsp_mux_001:sink25_channel
	wire          rsp_demux_028_src0_startofpacket;                                                 // rsp_demux_028:src0_startofpacket -> rsp_mux_001:sink25_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                   // rsp_demux_028:src0_endofpacket -> rsp_mux_001:sink25_endofpacket
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> onchip_memory2_s1_cmd_width_adapter:in_valid
	wire   [99:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> onchip_memory2_s1_cmd_width_adapter:in_data
	wire          cmd_mux_010_src_ready;                                                            // onchip_memory2_s1_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire   [29:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> onchip_memory2_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> onchip_memory2_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> onchip_memory2_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory2_s1_cmd_width_adapter_src_valid;                                    // onchip_memory2_s1_cmd_width_adapter:out_valid -> onchip_memory2_s1_agent:cp_valid
	wire  [135:0] onchip_memory2_s1_cmd_width_adapter_src_data;                                     // onchip_memory2_s1_cmd_width_adapter:out_data -> onchip_memory2_s1_agent:cp_data
	wire          onchip_memory2_s1_cmd_width_adapter_src_ready;                                    // onchip_memory2_s1_agent:cp_ready -> onchip_memory2_s1_cmd_width_adapter:out_ready
	wire   [29:0] onchip_memory2_s1_cmd_width_adapter_src_channel;                                  // onchip_memory2_s1_cmd_width_adapter:out_channel -> onchip_memory2_s1_agent:cp_channel
	wire          onchip_memory2_s1_cmd_width_adapter_src_startofpacket;                            // onchip_memory2_s1_cmd_width_adapter:out_startofpacket -> onchip_memory2_s1_agent:cp_startofpacket
	wire          onchip_memory2_s1_cmd_width_adapter_src_endofpacket;                              // onchip_memory2_s1_cmd_width_adapter:out_endofpacket -> onchip_memory2_s1_agent:cp_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> onchip_memory2_s1_rsp_width_adapter:in_valid
	wire  [135:0] router_013_src_data;                                                              // router_013:src_data -> onchip_memory2_s1_rsp_width_adapter:in_data
	wire          router_013_src_ready;                                                             // onchip_memory2_s1_rsp_width_adapter:in_ready -> router_013:src_ready
	wire   [29:0] router_013_src_channel;                                                           // router_013:src_channel -> onchip_memory2_s1_rsp_width_adapter:in_channel
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> onchip_memory2_s1_rsp_width_adapter:in_startofpacket
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> onchip_memory2_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_s1_rsp_width_adapter_src_valid;                                    // onchip_memory2_s1_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire   [99:0] onchip_memory2_s1_rsp_width_adapter_src_data;                                     // onchip_memory2_s1_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire          onchip_memory2_s1_rsp_width_adapter_src_ready;                                    // rsp_demux_010:sink_ready -> onchip_memory2_s1_rsp_width_adapter:out_ready
	wire   [29:0] onchip_memory2_s1_rsp_width_adapter_src_channel;                                  // onchip_memory2_s1_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire          onchip_memory2_s1_rsp_width_adapter_src_startofpacket;                            // onchip_memory2_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          onchip_memory2_s1_rsp_width_adapter_src_endofpacket;                              // onchip_memory2_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> crosser:in_valid
	wire   [99:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                             // crosser:in_ready -> cmd_demux:src0_ready
	wire   [29:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                // crosser:out_valid -> cmd_mux:sink0_valid
	wire   [99:0] crosser_out_data;                                                                 // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [29:0] crosser_out_channel;                                                              // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                        // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                          // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> crosser_001:in_valid
	wire   [99:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                             // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [29:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                            // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire   [99:0] crosser_001_out_data;                                                             // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                            // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [29:0] crosser_001_out_channel;                                                          // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                    // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                      // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> crosser_002:in_valid
	wire   [99:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                             // crosser_002:in_ready -> cmd_demux:src2_ready
	wire   [29:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                            // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire   [99:0] crosser_002_out_data;                                                             // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                            // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire   [29:0] crosser_002_out_channel;                                                          // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                                    // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                      // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> crosser_003:in_valid
	wire   [99:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> crosser_003:in_data
	wire          cmd_demux_src3_ready;                                                             // crosser_003:in_ready -> cmd_demux:src3_ready
	wire   [29:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                            // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire   [99:0] crosser_003_out_data;                                                             // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire          crosser_003_out_ready;                                                            // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire   [29:0] crosser_003_out_channel;                                                          // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_003_out_startofpacket;                                                    // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                      // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> crosser_004:in_valid
	wire   [99:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> crosser_004:in_data
	wire          cmd_demux_src7_ready;                                                             // crosser_004:in_ready -> cmd_demux:src7_ready
	wire   [29:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> crosser_004:in_channel
	wire          cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                            // crosser_004:out_valid -> cmd_mux_007:sink0_valid
	wire   [99:0] crosser_004_out_data;                                                             // crosser_004:out_data -> cmd_mux_007:sink0_data
	wire          crosser_004_out_ready;                                                            // cmd_mux_007:sink0_ready -> crosser_004:out_ready
	wire   [29:0] crosser_004_out_channel;                                                          // crosser_004:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_004_out_startofpacket;                                                    // crosser_004:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                      // crosser_004:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> crosser_005:in_valid
	wire   [99:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> crosser_005:in_data
	wire          cmd_demux_001_src0_ready;                                                         // crosser_005:in_ready -> cmd_demux_001:src0_ready
	wire   [29:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> crosser_005:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                            // crosser_005:out_valid -> cmd_mux:sink1_valid
	wire   [99:0] crosser_005_out_data;                                                             // crosser_005:out_data -> cmd_mux:sink1_data
	wire          crosser_005_out_ready;                                                            // cmd_mux:sink1_ready -> crosser_005:out_ready
	wire   [29:0] crosser_005_out_channel;                                                          // crosser_005:out_channel -> cmd_mux:sink1_channel
	wire          crosser_005_out_startofpacket;                                                    // crosser_005:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                                      // crosser_005:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> crosser_006:in_valid
	wire   [99:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> crosser_006:in_data
	wire          cmd_demux_001_src1_ready;                                                         // crosser_006:in_ready -> cmd_demux_001:src1_ready
	wire   [29:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> crosser_006:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                            // crosser_006:out_valid -> cmd_mux_001:sink1_valid
	wire   [99:0] crosser_006_out_data;                                                             // crosser_006:out_data -> cmd_mux_001:sink1_data
	wire          crosser_006_out_ready;                                                            // cmd_mux_001:sink1_ready -> crosser_006:out_ready
	wire   [29:0] crosser_006_out_channel;                                                          // crosser_006:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_006_out_startofpacket;                                                    // crosser_006:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                                      // crosser_006:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> crosser_007:in_valid
	wire   [99:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> crosser_007:in_data
	wire          cmd_demux_001_src2_ready;                                                         // crosser_007:in_ready -> cmd_demux_001:src2_ready
	wire   [29:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> crosser_007:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                            // crosser_007:out_valid -> cmd_mux_002:sink1_valid
	wire   [99:0] crosser_007_out_data;                                                             // crosser_007:out_data -> cmd_mux_002:sink1_data
	wire          crosser_007_out_ready;                                                            // cmd_mux_002:sink1_ready -> crosser_007:out_ready
	wire   [29:0] crosser_007_out_channel;                                                          // crosser_007:out_channel -> cmd_mux_002:sink1_channel
	wire          crosser_007_out_startofpacket;                                                    // crosser_007:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                      // crosser_007:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> crosser_008:in_valid
	wire   [99:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> crosser_008:in_data
	wire          cmd_demux_001_src3_ready;                                                         // crosser_008:in_ready -> cmd_demux_001:src3_ready
	wire   [29:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> crosser_008:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                            // crosser_008:out_valid -> cmd_mux_003:sink1_valid
	wire   [99:0] crosser_008_out_data;                                                             // crosser_008:out_data -> cmd_mux_003:sink1_data
	wire          crosser_008_out_ready;                                                            // cmd_mux_003:sink1_ready -> crosser_008:out_ready
	wire   [29:0] crosser_008_out_channel;                                                          // crosser_008:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_008_out_startofpacket;                                                    // crosser_008:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                      // crosser_008:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                         // cmd_demux_001:src7_valid -> crosser_009:in_valid
	wire   [99:0] cmd_demux_001_src7_data;                                                          // cmd_demux_001:src7_data -> crosser_009:in_data
	wire          cmd_demux_001_src7_ready;                                                         // crosser_009:in_ready -> cmd_demux_001:src7_ready
	wire   [29:0] cmd_demux_001_src7_channel;                                                       // cmd_demux_001:src7_channel -> crosser_009:in_channel
	wire          cmd_demux_001_src7_startofpacket;                                                 // cmd_demux_001:src7_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                   // cmd_demux_001:src7_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                            // crosser_009:out_valid -> cmd_mux_007:sink1_valid
	wire   [99:0] crosser_009_out_data;                                                             // crosser_009:out_data -> cmd_mux_007:sink1_data
	wire          crosser_009_out_ready;                                                            // cmd_mux_007:sink1_ready -> crosser_009:out_ready
	wire   [29:0] crosser_009_out_channel;                                                          // crosser_009:out_channel -> cmd_mux_007:sink1_channel
	wire          crosser_009_out_startofpacket;                                                    // crosser_009:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                                      // crosser_009:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                        // cmd_demux_001:src14_valid -> crosser_010:in_valid
	wire   [99:0] cmd_demux_001_src14_data;                                                         // cmd_demux_001:src14_data -> crosser_010:in_data
	wire          cmd_demux_001_src14_ready;                                                        // crosser_010:in_ready -> cmd_demux_001:src14_ready
	wire   [29:0] cmd_demux_001_src14_channel;                                                      // cmd_demux_001:src14_channel -> crosser_010:in_channel
	wire          cmd_demux_001_src14_startofpacket;                                                // cmd_demux_001:src14_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                  // cmd_demux_001:src14_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                            // crosser_010:out_valid -> cmd_mux_017:sink0_valid
	wire   [99:0] crosser_010_out_data;                                                             // crosser_010:out_data -> cmd_mux_017:sink0_data
	wire          crosser_010_out_ready;                                                            // cmd_mux_017:sink0_ready -> crosser_010:out_ready
	wire   [29:0] crosser_010_out_channel;                                                          // crosser_010:out_channel -> cmd_mux_017:sink0_channel
	wire          crosser_010_out_startofpacket;                                                    // crosser_010:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                                      // crosser_010:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src26_valid;                                                        // cmd_demux_001:src26_valid -> crosser_011:in_valid
	wire   [99:0] cmd_demux_001_src26_data;                                                         // cmd_demux_001:src26_data -> crosser_011:in_data
	wire          cmd_demux_001_src26_ready;                                                        // crosser_011:in_ready -> cmd_demux_001:src26_ready
	wire   [29:0] cmd_demux_001_src26_channel;                                                      // cmd_demux_001:src26_channel -> crosser_011:in_channel
	wire          cmd_demux_001_src26_startofpacket;                                                // cmd_demux_001:src26_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_001_src26_endofpacket;                                                  // cmd_demux_001:src26_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                            // crosser_011:out_valid -> cmd_mux_029:sink0_valid
	wire   [99:0] crosser_011_out_data;                                                             // crosser_011:out_data -> cmd_mux_029:sink0_data
	wire          crosser_011_out_ready;                                                            // cmd_mux_029:sink0_ready -> crosser_011:out_ready
	wire   [29:0] crosser_011_out_channel;                                                          // crosser_011:out_channel -> cmd_mux_029:sink0_channel
	wire          crosser_011_out_startofpacket;                                                    // crosser_011:out_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                                      // crosser_011:out_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> crosser_012:in_valid
	wire   [99:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> crosser_012:in_data
	wire          rsp_demux_src0_ready;                                                             // crosser_012:in_ready -> rsp_demux:src0_ready
	wire   [29:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                            // crosser_012:out_valid -> rsp_mux:sink0_valid
	wire   [99:0] crosser_012_out_data;                                                             // crosser_012:out_data -> rsp_mux:sink0_data
	wire          crosser_012_out_ready;                                                            // rsp_mux:sink0_ready -> crosser_012:out_ready
	wire   [29:0] crosser_012_out_channel;                                                          // crosser_012:out_channel -> rsp_mux:sink0_channel
	wire          crosser_012_out_startofpacket;                                                    // crosser_012:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_012_out_endofpacket;                                                      // crosser_012:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> crosser_013:in_valid
	wire   [99:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> crosser_013:in_data
	wire          rsp_demux_src1_ready;                                                             // crosser_013:in_ready -> rsp_demux:src1_ready
	wire   [29:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> crosser_013:in_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                            // crosser_013:out_valid -> rsp_mux_001:sink0_valid
	wire   [99:0] crosser_013_out_data;                                                             // crosser_013:out_data -> rsp_mux_001:sink0_data
	wire          crosser_013_out_ready;                                                            // rsp_mux_001:sink0_ready -> crosser_013:out_ready
	wire   [29:0] crosser_013_out_channel;                                                          // crosser_013:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_013_out_startofpacket;                                                    // crosser_013:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_013_out_endofpacket;                                                      // crosser_013:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> crosser_014:in_valid
	wire   [99:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> crosser_014:in_data
	wire          rsp_demux_001_src0_ready;                                                         // crosser_014:in_ready -> rsp_demux_001:src0_ready
	wire   [29:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                            // crosser_014:out_valid -> rsp_mux:sink1_valid
	wire   [99:0] crosser_014_out_data;                                                             // crosser_014:out_data -> rsp_mux:sink1_data
	wire          crosser_014_out_ready;                                                            // rsp_mux:sink1_ready -> crosser_014:out_ready
	wire   [29:0] crosser_014_out_channel;                                                          // crosser_014:out_channel -> rsp_mux:sink1_channel
	wire          crosser_014_out_startofpacket;                                                    // crosser_014:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_014_out_endofpacket;                                                      // crosser_014:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                         // rsp_demux_001:src1_valid -> crosser_015:in_valid
	wire   [99:0] rsp_demux_001_src1_data;                                                          // rsp_demux_001:src1_data -> crosser_015:in_data
	wire          rsp_demux_001_src1_ready;                                                         // crosser_015:in_ready -> rsp_demux_001:src1_ready
	wire   [29:0] rsp_demux_001_src1_channel;                                                       // rsp_demux_001:src1_channel -> crosser_015:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                 // rsp_demux_001:src1_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                   // rsp_demux_001:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                            // crosser_015:out_valid -> rsp_mux_001:sink1_valid
	wire   [99:0] crosser_015_out_data;                                                             // crosser_015:out_data -> rsp_mux_001:sink1_data
	wire          crosser_015_out_ready;                                                            // rsp_mux_001:sink1_ready -> crosser_015:out_ready
	wire   [29:0] crosser_015_out_channel;                                                          // crosser_015:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_015_out_startofpacket;                                                    // crosser_015:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_015_out_endofpacket;                                                      // crosser_015:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> crosser_016:in_valid
	wire   [99:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> crosser_016:in_data
	wire          rsp_demux_002_src0_ready;                                                         // crosser_016:in_ready -> rsp_demux_002:src0_ready
	wire   [29:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                            // crosser_016:out_valid -> rsp_mux:sink2_valid
	wire   [99:0] crosser_016_out_data;                                                             // crosser_016:out_data -> rsp_mux:sink2_data
	wire          crosser_016_out_ready;                                                            // rsp_mux:sink2_ready -> crosser_016:out_ready
	wire   [29:0] crosser_016_out_channel;                                                          // crosser_016:out_channel -> rsp_mux:sink2_channel
	wire          crosser_016_out_startofpacket;                                                    // crosser_016:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_016_out_endofpacket;                                                      // crosser_016:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> crosser_017:in_valid
	wire   [99:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> crosser_017:in_data
	wire          rsp_demux_002_src1_ready;                                                         // crosser_017:in_ready -> rsp_demux_002:src1_ready
	wire   [29:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> crosser_017:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                            // crosser_017:out_valid -> rsp_mux_001:sink2_valid
	wire   [99:0] crosser_017_out_data;                                                             // crosser_017:out_data -> rsp_mux_001:sink2_data
	wire          crosser_017_out_ready;                                                            // rsp_mux_001:sink2_ready -> crosser_017:out_ready
	wire   [29:0] crosser_017_out_channel;                                                          // crosser_017:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_017_out_startofpacket;                                                    // crosser_017:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_017_out_endofpacket;                                                      // crosser_017:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> crosser_018:in_valid
	wire   [99:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> crosser_018:in_data
	wire          rsp_demux_003_src0_ready;                                                         // crosser_018:in_ready -> rsp_demux_003:src0_ready
	wire   [29:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                            // crosser_018:out_valid -> rsp_mux:sink3_valid
	wire   [99:0] crosser_018_out_data;                                                             // crosser_018:out_data -> rsp_mux:sink3_data
	wire          crosser_018_out_ready;                                                            // rsp_mux:sink3_ready -> crosser_018:out_ready
	wire   [29:0] crosser_018_out_channel;                                                          // crosser_018:out_channel -> rsp_mux:sink3_channel
	wire          crosser_018_out_startofpacket;                                                    // crosser_018:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_018_out_endofpacket;                                                      // crosser_018:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                         // rsp_demux_003:src1_valid -> crosser_019:in_valid
	wire   [99:0] rsp_demux_003_src1_data;                                                          // rsp_demux_003:src1_data -> crosser_019:in_data
	wire          rsp_demux_003_src1_ready;                                                         // crosser_019:in_ready -> rsp_demux_003:src1_ready
	wire   [29:0] rsp_demux_003_src1_channel;                                                       // rsp_demux_003:src1_channel -> crosser_019:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                 // rsp_demux_003:src1_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                   // rsp_demux_003:src1_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                            // crosser_019:out_valid -> rsp_mux_001:sink3_valid
	wire   [99:0] crosser_019_out_data;                                                             // crosser_019:out_data -> rsp_mux_001:sink3_data
	wire          crosser_019_out_ready;                                                            // rsp_mux_001:sink3_ready -> crosser_019:out_ready
	wire   [29:0] crosser_019_out_channel;                                                          // crosser_019:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_019_out_startofpacket;                                                    // crosser_019:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_019_out_endofpacket;                                                      // crosser_019:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> crosser_020:in_valid
	wire   [99:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> crosser_020:in_data
	wire          rsp_demux_007_src0_ready;                                                         // crosser_020:in_ready -> rsp_demux_007:src0_ready
	wire   [29:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> crosser_020:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> crosser_020:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                            // crosser_020:out_valid -> rsp_mux:sink7_valid
	wire   [99:0] crosser_020_out_data;                                                             // crosser_020:out_data -> rsp_mux:sink7_data
	wire          crosser_020_out_ready;                                                            // rsp_mux:sink7_ready -> crosser_020:out_ready
	wire   [29:0] crosser_020_out_channel;                                                          // crosser_020:out_channel -> rsp_mux:sink7_channel
	wire          crosser_020_out_startofpacket;                                                    // crosser_020:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_020_out_endofpacket;                                                      // crosser_020:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                         // rsp_demux_007:src1_valid -> crosser_021:in_valid
	wire   [99:0] rsp_demux_007_src1_data;                                                          // rsp_demux_007:src1_data -> crosser_021:in_data
	wire          rsp_demux_007_src1_ready;                                                         // crosser_021:in_ready -> rsp_demux_007:src1_ready
	wire   [29:0] rsp_demux_007_src1_channel;                                                       // rsp_demux_007:src1_channel -> crosser_021:in_channel
	wire          rsp_demux_007_src1_startofpacket;                                                 // rsp_demux_007:src1_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                   // rsp_demux_007:src1_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                            // crosser_021:out_valid -> rsp_mux_001:sink7_valid
	wire   [99:0] crosser_021_out_data;                                                             // crosser_021:out_data -> rsp_mux_001:sink7_data
	wire          crosser_021_out_ready;                                                            // rsp_mux_001:sink7_ready -> crosser_021:out_ready
	wire   [29:0] crosser_021_out_channel;                                                          // crosser_021:out_channel -> rsp_mux_001:sink7_channel
	wire          crosser_021_out_startofpacket;                                                    // crosser_021:out_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          crosser_021_out_endofpacket;                                                      // crosser_021:out_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_017_src0_valid;                                                         // rsp_demux_017:src0_valid -> crosser_022:in_valid
	wire   [99:0] rsp_demux_017_src0_data;                                                          // rsp_demux_017:src0_data -> crosser_022:in_data
	wire          rsp_demux_017_src0_ready;                                                         // crosser_022:in_ready -> rsp_demux_017:src0_ready
	wire   [29:0] rsp_demux_017_src0_channel;                                                       // rsp_demux_017:src0_channel -> crosser_022:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                                 // rsp_demux_017:src0_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                   // rsp_demux_017:src0_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                            // crosser_022:out_valid -> rsp_mux_001:sink14_valid
	wire   [99:0] crosser_022_out_data;                                                             // crosser_022:out_data -> rsp_mux_001:sink14_data
	wire          crosser_022_out_ready;                                                            // rsp_mux_001:sink14_ready -> crosser_022:out_ready
	wire   [29:0] crosser_022_out_channel;                                                          // crosser_022:out_channel -> rsp_mux_001:sink14_channel
	wire          crosser_022_out_startofpacket;                                                    // crosser_022:out_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          crosser_022_out_endofpacket;                                                      // crosser_022:out_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_029_src0_valid;                                                         // rsp_demux_029:src0_valid -> crosser_023:in_valid
	wire   [99:0] rsp_demux_029_src0_data;                                                          // rsp_demux_029:src0_data -> crosser_023:in_data
	wire          rsp_demux_029_src0_ready;                                                         // crosser_023:in_ready -> rsp_demux_029:src0_ready
	wire   [29:0] rsp_demux_029_src0_channel;                                                       // rsp_demux_029:src0_channel -> crosser_023:in_channel
	wire          rsp_demux_029_src0_startofpacket;                                                 // rsp_demux_029:src0_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                   // rsp_demux_029:src0_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                            // crosser_023:out_valid -> rsp_mux_001:sink26_valid
	wire   [99:0] crosser_023_out_data;                                                             // crosser_023:out_data -> rsp_mux_001:sink26_data
	wire          crosser_023_out_ready;                                                            // rsp_mux_001:sink26_ready -> crosser_023:out_ready
	wire   [29:0] crosser_023_out_channel;                                                          // crosser_023:out_channel -> rsp_mux_001:sink26_channel
	wire          crosser_023_out_startofpacket;                                                    // crosser_023:out_startofpacket -> rsp_mux_001:sink26_startofpacket
	wire          crosser_023_out_endofpacket;                                                      // crosser_023:out_endofpacket -> rsp_mux_001:sink26_endofpacket
	wire   [29:0] nios2_gen2_data_master_limiter_cmd_valid_data;                                    // nios2_gen2_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [29:0] mm_bridge_0_m0_limiter_cmd_valid_data;                                            // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [29:0] nios2_gen2_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_instruction_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_valid;                   // tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_data;                    // tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_ready;                   // avalon_st_adapter:in_0_ready -> tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> tv_decoder_alt_vip_cl_cvi_0_control_agent:rdata_fifo_sink_error
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_valid;                   // tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_data;                    // tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_001:in_0_ready -> tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> tv_decoder_alt_vip_cl_scl_0_control_agent:rdata_fifo_sink_error
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_valid;                   // tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_data;                    // tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_002:in_0_ready -> tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> tv_decoder_alt_vip_cl_scl_1_control_agent:rdata_fifo_sink_error
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_valid;                   // tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_data;                    // tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_ready;                   // avalon_st_adapter_003:in_0_ready -> tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> tv_decoder_alt_vip_cl_swi_0_control_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_004:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid;                     // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data;                      // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready;                     // avalon_st_adapter_005:in_0_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid;                   // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data;                    // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready;                   // avalon_st_adapter_006:in_0_ready -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid;                            // alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data;                             // alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_007:in_0_ready -> alt_vip_cl_mixer_0_control_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                // alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> alt_vip_cl_mixer_0_control_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_008:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_009:in_0_ready -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                // nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [65:0] onchip_memory2_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          onchip_memory2_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_010:in_0_ready -> onchip_memory2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> onchip_memory2_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> onchip_memory2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                // onchip_memory2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> onchip_memory2_s1_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_src_valid;                                              // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                               // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_011:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire          ledr_s1_agent_rdata_fifo_src_valid;                                               // ledr_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_src_data;                                                // ledr_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          ledr_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_012:in_0_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                // avalon_st_adapter_012:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                 // avalon_st_adapter_012:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                // avalon_st_adapter_012:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire          camera_pwdn_n_s1_agent_rdata_fifo_src_valid;                                      // camera_pwdn_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] camera_pwdn_n_s1_agent_rdata_fifo_src_data;                                       // camera_pwdn_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          camera_pwdn_n_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_013:in_0_ready -> camera_pwdn_n_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                // avalon_st_adapter_013:out_0_valid -> camera_pwdn_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                 // avalon_st_adapter_013:out_0_data -> camera_pwdn_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                // camera_pwdn_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                // avalon_st_adapter_013:out_0_error -> camera_pwdn_n_s1_agent:rdata_fifo_sink_error
	wire          mipi_reset_n_s1_agent_rdata_fifo_src_valid;                                       // mipi_reset_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] mipi_reset_n_s1_agent_rdata_fifo_src_data;                                        // mipi_reset_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          mipi_reset_n_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_014:in_0_ready -> mipi_reset_n_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                // avalon_st_adapter_014:out_0_valid -> mipi_reset_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                 // avalon_st_adapter_014:out_0_data -> mipi_reset_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                // mipi_reset_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                // avalon_st_adapter_014:out_0_error -> mipi_reset_n_s1_agent:rdata_fifo_sink_error
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid;                          // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data;                           // alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_015:in_0_ready -> alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                // avalon_st_adapter_015:out_0_valid -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                 // avalon_st_adapter_015:out_0_data -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                // alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                // avalon_st_adapter_015:out_0_error -> alt_vip_vfr_vga_avalon_slave_agent:rdata_fifo_sink_error
	wire          ir_rx_avalon_slave_agent_rdata_fifo_src_valid;                                    // ir_rx_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] ir_rx_avalon_slave_agent_rdata_fifo_src_data;                                     // ir_rx_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          ir_rx_avalon_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_016:in_0_ready -> ir_rx_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                // avalon_st_adapter_016:out_0_valid -> ir_rx_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                 // avalon_st_adapter_016:out_0_data -> ir_rx_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                // ir_rx_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                // avalon_st_adapter_016:out_0_error -> ir_rx_avalon_slave_agent:rdata_fifo_sink_error
	wire          ts_i2c_avalon_slave_0_agent_rdata_fifo_src_valid;                                 // ts_i2c_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] ts_i2c_avalon_slave_0_agent_rdata_fifo_src_data;                                  // ts_i2c_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          ts_i2c_avalon_slave_0_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_017:in_0_ready -> ts_i2c_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                // avalon_st_adapter_017:out_0_valid -> ts_i2c_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                 // avalon_st_adapter_017:out_0_data -> ts_i2c_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                // ts_i2c_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                // avalon_st_adapter_017:out_0_error -> ts_i2c_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_valid;                    // i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_data;                     // i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_ready;                    // avalon_st_adapter_018:in_0_ready -> i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                // avalon_st_adapter_018:out_0_valid -> i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                 // avalon_st_adapter_018:out_0_data -> i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                // i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                // avalon_st_adapter_018:out_0_error -> i2c_opencores_light_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          key_s1_agent_rdata_fifo_src_valid;                                                // key_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                                 // key_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_019:in_0_ready -> key_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                // avalon_st_adapter_019:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                 // avalon_st_adapter_019:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                // avalon_st_adapter_019:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_src_valid;                                                 // sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                                  // sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_020:in_0_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                // avalon_st_adapter_020:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                 // avalon_st_adapter_020:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                // avalon_st_adapter_020:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          ts_interrupt_s1_agent_rdata_fifo_src_valid;                                       // ts_interrupt_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] ts_interrupt_s1_agent_rdata_fifo_src_data;                                        // ts_interrupt_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          ts_interrupt_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_021:in_0_ready -> ts_interrupt_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                // avalon_st_adapter_021:out_0_valid -> ts_interrupt_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                 // avalon_st_adapter_021:out_0_data -> ts_interrupt_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                // ts_interrupt_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                // avalon_st_adapter_021:out_0_error -> ts_interrupt_s1_agent:rdata_fifo_sink_error
	wire          mpu_int_s1_agent_rdata_fifo_src_valid;                                            // mpu_int_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] mpu_int_s1_agent_rdata_fifo_src_data;                                             // mpu_int_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire          mpu_int_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_022:in_0_ready -> mpu_int_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                // avalon_st_adapter_022:out_0_valid -> mpu_int_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                 // avalon_st_adapter_022:out_0_data -> mpu_int_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                // mpu_int_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                // avalon_st_adapter_022:out_0_error -> mpu_int_s1_agent:rdata_fifo_sink_error
	wire          light_int_s1_agent_rdata_fifo_src_valid;                                          // light_int_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] light_int_s1_agent_rdata_fifo_src_data;                                           // light_int_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire          light_int_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_023:in_0_ready -> light_int_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                // avalon_st_adapter_023:out_0_valid -> light_int_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                 // avalon_st_adapter_023:out_0_data -> light_int_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                // light_int_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                // avalon_st_adapter_023:out_0_error -> light_int_s1_agent:rdata_fifo_sink_error
	wire          seg7_slave_agent_rdata_fifo_src_valid;                                            // seg7_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] seg7_slave_agent_rdata_fifo_src_data;                                             // seg7_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire          seg7_slave_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_024:in_0_ready -> seg7_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                // avalon_st_adapter_024:out_0_valid -> seg7_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                 // avalon_st_adapter_024:out_0_data -> seg7_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                // seg7_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                // avalon_st_adapter_024:out_0_error -> seg7_slave_agent:rdata_fifo_sink_error
	wire          spi_spi_control_port_agent_rdata_fifo_src_valid;                                  // spi_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire   [33:0] spi_spi_control_port_agent_rdata_fifo_src_data;                                   // spi_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire          spi_spi_control_port_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_025:in_0_ready -> spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                // avalon_st_adapter_025:out_0_valid -> spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_025_out_0_data;                                                 // avalon_st_adapter_025:out_0_data -> spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                // spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                // avalon_st_adapter_025:out_0_error -> spi_spi_control_port_agent:rdata_fifo_sink_error
	wire          spi_mpu_spi_control_port_agent_rdata_fifo_src_valid;                              // spi_mpu_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] spi_mpu_spi_control_port_agent_rdata_fifo_src_data;                               // spi_mpu_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire          spi_mpu_spi_control_port_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_026:in_0_ready -> spi_mpu_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                // avalon_st_adapter_026:out_0_valid -> spi_mpu_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                 // avalon_st_adapter_026:out_0_data -> spi_mpu_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                // spi_mpu_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                // avalon_st_adapter_026:out_0_error -> spi_mpu_spi_control_port_agent:rdata_fifo_sink_error
	wire          tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_valid;                // tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_data;                 // tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_027:in_0_data
	wire          tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_ready;                // avalon_st_adapter_027:in_0_ready -> tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                // avalon_st_adapter_027:out_0_valid -> tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                 // avalon_st_adapter_027:out_0_data -> tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                // tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                // avalon_st_adapter_027:out_0_error -> tv_decoder_stream_capture_avalon_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_data_master_translator (
		.clk                    (clk_50_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_gen2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_50_clk_clk),                                                    //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_instruction_master_translator (
		.clk                    (clk_50_clk_clk),                                                                   //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tv_decoder_alt_vip_cl_cvi_0_control_translator (
		.clk                    (vga_stream_out_clk_clk),                                     //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_read),          //                         .read
		.uav_write              (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tv_decoder_alt_vip_cl_cvi_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (tv_decoder_alt_vip_cl_cvi_0_control_write),                  //                         .write
		.av_read                (tv_decoder_alt_vip_cl_cvi_0_control_read),                   //                         .read
		.av_readdata            (tv_decoder_alt_vip_cl_cvi_0_control_readdata),               //                         .readdata
		.av_writedata           (tv_decoder_alt_vip_cl_cvi_0_control_writedata),              //                         .writedata
		.av_byteenable          (tv_decoder_alt_vip_cl_cvi_0_control_byteenable),             //                         .byteenable
		.av_waitrequest         (tv_decoder_alt_vip_cl_cvi_0_control_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tv_decoder_alt_vip_cl_scl_0_control_translator (
		.clk                    (vga_stream_out_clk_clk),                                     //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_read),          //                         .read
		.uav_write              (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tv_decoder_alt_vip_cl_scl_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (tv_decoder_alt_vip_cl_scl_0_control_write),                  //                         .write
		.av_read                (tv_decoder_alt_vip_cl_scl_0_control_read),                   //                         .read
		.av_readdata            (tv_decoder_alt_vip_cl_scl_0_control_readdata),               //                         .readdata
		.av_writedata           (tv_decoder_alt_vip_cl_scl_0_control_writedata),              //                         .writedata
		.av_byteenable          (tv_decoder_alt_vip_cl_scl_0_control_byteenable),             //                         .byteenable
		.av_readdatavalid       (tv_decoder_alt_vip_cl_scl_0_control_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (tv_decoder_alt_vip_cl_scl_0_control_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tv_decoder_alt_vip_cl_scl_1_control_translator (
		.clk                    (vga_stream_out_clk_clk),                                     //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_read),          //                         .read
		.uav_write              (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tv_decoder_alt_vip_cl_scl_1_control_address),                //      avalon_anti_slave_0.address
		.av_write               (tv_decoder_alt_vip_cl_scl_1_control_write),                  //                         .write
		.av_read                (tv_decoder_alt_vip_cl_scl_1_control_read),                   //                         .read
		.av_readdata            (tv_decoder_alt_vip_cl_scl_1_control_readdata),               //                         .readdata
		.av_writedata           (tv_decoder_alt_vip_cl_scl_1_control_writedata),              //                         .writedata
		.av_byteenable          (tv_decoder_alt_vip_cl_scl_1_control_byteenable),             //                         .byteenable
		.av_readdatavalid       (tv_decoder_alt_vip_cl_scl_1_control_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (tv_decoder_alt_vip_cl_scl_1_control_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tv_decoder_alt_vip_cl_swi_0_control_translator (
		.clk                    (vga_stream_out_clk_clk),                                     //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_read),          //                         .read
		.uav_write              (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_write),         //                         .write
		.uav_waitrequest        (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tv_decoder_alt_vip_cl_swi_0_control_address),                //      avalon_anti_slave_0.address
		.av_write               (tv_decoder_alt_vip_cl_swi_0_control_write),                  //                         .write
		.av_read                (tv_decoder_alt_vip_cl_swi_0_control_read),                   //                         .read
		.av_readdata            (tv_decoder_alt_vip_cl_swi_0_control_readdata),               //                         .readdata
		.av_writedata           (tv_decoder_alt_vip_cl_swi_0_control_writedata),              //                         .writedata
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_50_clk_clk),                                     //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_mipi_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                           //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_mipi_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_mipi_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_mipi_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_mipi_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_mipi_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_mipi_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                         //              (terminated)
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_camera_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (i2c_opencores_camera_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_camera_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_camera_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_camera_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_camera_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_camera_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_camera_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_camera_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_camera_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_cl_mixer_0_control_translator (
		.clk                    (vga_stream_out_clk_clk),                                    //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_cl_mixer_0_control_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_cl_mixer_0_control_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (alt_vip_cl_mixer_0_control_agent_m0_read),                  //                         .read
		.uav_write              (alt_vip_cl_mixer_0_control_agent_m0_write),                 //                         .write
		.uav_waitrequest        (alt_vip_cl_mixer_0_control_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (alt_vip_cl_mixer_0_control_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (alt_vip_cl_mixer_0_control_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (alt_vip_cl_mixer_0_control_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (alt_vip_cl_mixer_0_control_agent_m0_writedata),             //                         .writedata
		.uav_lock               (alt_vip_cl_mixer_0_control_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (alt_vip_cl_mixer_0_control_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (alt_vip_cl_mixer_0_control_address),                        //      avalon_anti_slave_0.address
		.av_write               (alt_vip_cl_mixer_0_control_write),                          //                         .write
		.av_read                (alt_vip_cl_mixer_0_control_read),                           //                         .read
		.av_readdata            (alt_vip_cl_mixer_0_control_readdata),                       //                         .readdata
		.av_writedata           (alt_vip_cl_mixer_0_control_writedata),                      //                         .writedata
		.av_byteenable          (alt_vip_cl_mixer_0_control_byteenable),                     //                         .byteenable
		.av_readdatavalid       (alt_vip_cl_mixer_0_control_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (alt_vip_cl_mixer_0_control_waitrequest),                    //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_50_clk_clk),                                  //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_debug_mem_slave_translator (
		.clk                    (clk_50_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (onchip_memory2_s1_agent_m0_read),               //                         .read
		.uav_write              (onchip_memory2_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (onchip_memory2_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (onchip_memory2_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (onchip_memory2_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (onchip_memory2_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (onchip_memory2_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (onchip_memory2_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_s1_write),                       //                         .write
		.av_readdata            (onchip_memory2_s1_readdata),                    //                         .readdata
		.av_writedata           (onchip_memory2_s1_writedata),                   //                         .writedata
		.av_byteenable          (onchip_memory2_s1_byteenable),                  //                         .byteenable
		.av_chipselect          (onchip_memory2_s1_chipselect),                  //                         .chipselect
		.av_clken               (onchip_memory2_s1_clken),                       //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                        //                         .read
		.uav_write              (timer_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (timer_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                                //                         .write
		.av_readdata            (timer_s1_readdata),                             //                         .readdata
		.av_writedata           (timer_s1_writedata),                            //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                         //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (ledr_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                                 //                         .write
		.av_readdata            (ledr_s1_readdata),                              //                         .readdata
		.av_writedata           (ledr_s1_writedata),                             //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) camera_pwdn_n_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (camera_pwdn_n_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (camera_pwdn_n_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (camera_pwdn_n_s1_agent_m0_read),                //                         .read
		.uav_write              (camera_pwdn_n_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (camera_pwdn_n_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (camera_pwdn_n_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (camera_pwdn_n_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (camera_pwdn_n_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (camera_pwdn_n_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (camera_pwdn_n_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (camera_pwdn_n_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (camera_pwdn_n_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (camera_pwdn_n_s1_write),                        //                         .write
		.av_readdata            (camera_pwdn_n_s1_readdata),                     //                         .readdata
		.av_writedata           (camera_pwdn_n_s1_writedata),                    //                         .writedata
		.av_chipselect          (camera_pwdn_n_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mipi_reset_n_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mipi_reset_n_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (mipi_reset_n_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (mipi_reset_n_s1_agent_m0_read),                 //                         .read
		.uav_write              (mipi_reset_n_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (mipi_reset_n_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (mipi_reset_n_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (mipi_reset_n_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (mipi_reset_n_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (mipi_reset_n_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (mipi_reset_n_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (mipi_reset_n_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (mipi_reset_n_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (mipi_reset_n_s1_write),                         //                         .write
		.av_readdata            (mipi_reset_n_s1_readdata),                      //                         .readdata
		.av_writedata           (mipi_reset_n_s1_writedata),                     //                         .writedata
		.av_chipselect          (mipi_reset_n_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_apb_translator #(
		.ADDR_WIDTH     (5),
		.DATA_WIDTH     (32),
		.USE_S0_PADDR31 (1),
		.USE_M0_PADDR31 (0),
		.USE_M0_PSLVERR (0)
	) terasic_alsa_apb_slave_clkctrl_translator (
		.s0_paddr   (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr),   //        s0.paddr
		.s0_psel    (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_psel),    //          .psel
		.s0_penable (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_penable), //          .penable
		.s0_pwrite  (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwrite),  //          .pwrite
		.s0_pwdata  (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwdata),  //          .pwdata
		.s0_prdata  (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_prdata),  //          .prdata
		.s0_pslverr (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pslverr), //          .pslverr
		.s0_pready  (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pready),  //          .pready
		.s0_paddr31 (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr31), //          .paddr31
		.clk        (clk_50_clk_clk),                                                 //       clk.clk
		.reset      (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.m0_paddr   (TERASIC_ALSA_apb_slave_clkctrl_paddr),                           //        m0.paddr
		.m0_psel    (TERASIC_ALSA_apb_slave_clkctrl_psel),                            //          .psel
		.m0_penable (TERASIC_ALSA_apb_slave_clkctrl_penable),                         //          .penable
		.m0_pwrite  (TERASIC_ALSA_apb_slave_clkctrl_pwrite),                          //          .pwrite
		.m0_pwdata  (TERASIC_ALSA_apb_slave_clkctrl_pwdata),                          //          .pwdata
		.m0_prdata  (TERASIC_ALSA_apb_slave_clkctrl_prdata),                          //          .prdata
		.m0_pready  (TERASIC_ALSA_apb_slave_clkctrl_pready),                          //          .pready
		.m0_pslverr (1'b0),                                                           // (terminated)
		.m0_paddr31 ()                                                                // (terminated)
	);

	altera_merlin_apb_translator #(
		.ADDR_WIDTH     (5),
		.DATA_WIDTH     (32),
		.USE_S0_PADDR31 (1),
		.USE_M0_PADDR31 (0),
		.USE_M0_PSLVERR (0)
	) terasic_alsa_apb_slave_output_translator (
		.s0_paddr   (terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr),   //        s0.paddr
		.s0_psel    (terasic_alsa_apb_slave_output_agent_altera_apb_master_psel),    //          .psel
		.s0_penable (terasic_alsa_apb_slave_output_agent_altera_apb_master_penable), //          .penable
		.s0_pwrite  (terasic_alsa_apb_slave_output_agent_altera_apb_master_pwrite),  //          .pwrite
		.s0_pwdata  (terasic_alsa_apb_slave_output_agent_altera_apb_master_pwdata),  //          .pwdata
		.s0_prdata  (terasic_alsa_apb_slave_output_agent_altera_apb_master_prdata),  //          .prdata
		.s0_pslverr (terasic_alsa_apb_slave_output_agent_altera_apb_master_pslverr), //          .pslverr
		.s0_pready  (terasic_alsa_apb_slave_output_agent_altera_apb_master_pready),  //          .pready
		.s0_paddr31 (terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr31), //          .paddr31
		.clk        (clk_50_clk_clk),                                                //       clk.clk
		.reset      (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.m0_paddr   (TERASIC_ALSA_apb_slave_output_paddr),                           //        m0.paddr
		.m0_psel    (TERASIC_ALSA_apb_slave_output_psel),                            //          .psel
		.m0_penable (TERASIC_ALSA_apb_slave_output_penable),                         //          .penable
		.m0_pwrite  (TERASIC_ALSA_apb_slave_output_pwrite),                          //          .pwrite
		.m0_pwdata  (TERASIC_ALSA_apb_slave_output_pwdata),                          //          .pwdata
		.m0_prdata  (TERASIC_ALSA_apb_slave_output_prdata),                          //          .prdata
		.m0_pready  (TERASIC_ALSA_apb_slave_output_pready),                          //          .pready
		.m0_pslverr (1'b0),                                                          // (terminated)
		.m0_paddr31 ()                                                               // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_vip_vfr_vga_avalon_slave_translator (
		.clk                    (vga_stream_out_clk_clk),                                    //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_vip_vfr_vga_avalon_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (alt_vip_vfr_vga_avalon_slave_agent_m0_read),                //                         .read
		.uav_write              (alt_vip_vfr_vga_avalon_slave_agent_m0_write),               //                         .write
		.uav_waitrequest        (alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (alt_vip_vfr_vga_avalon_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (alt_vip_vfr_vga_avalon_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock               (alt_vip_vfr_vga_avalon_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (alt_vip_vfr_vga_avalon_slave_address),                      //      avalon_anti_slave_0.address
		.av_write               (alt_vip_vfr_vga_avalon_slave_write),                        //                         .write
		.av_read                (alt_vip_vfr_vga_avalon_slave_read),                         //                         .read
		.av_readdata            (alt_vip_vfr_vga_avalon_slave_readdata),                     //                         .readdata
		.av_writedata           (alt_vip_vfr_vga_avalon_slave_writedata),                    //                         .writedata
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (2),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ir_rx_avalon_slave_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ir_rx_avalon_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (ir_rx_avalon_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (ir_rx_avalon_slave_agent_m0_read),              //                         .read
		.uav_write              (ir_rx_avalon_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (ir_rx_avalon_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (ir_rx_avalon_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (ir_rx_avalon_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (ir_rx_avalon_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (ir_rx_avalon_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (ir_rx_avalon_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (ir_rx_avalon_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (ir_rx_avalon_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (ir_rx_avalon_slave_write),                      //                         .write
		.av_read                (ir_rx_avalon_slave_read),                       //                         .read
		.av_readdata            (ir_rx_avalon_slave_readdata),                   //                         .readdata
		.av_writedata           (ir_rx_avalon_slave_writedata),                  //                         .writedata
		.av_chipselect          (ir_rx_avalon_slave_chipselect),                 //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ts_i2c_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ts_i2c_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (ts_i2c_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (ts_i2c_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (ts_i2c_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (ts_i2c_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (ts_i2c_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (ts_i2c_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (ts_i2c_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (ts_i2c_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (ts_i2c_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (ts_i2c_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (ts_i2c_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (ts_i2c_avalon_slave_0_write),                   //                         .write
		.av_readdata            (ts_i2c_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (ts_i2c_avalon_slave_0_writedata),               //                         .writedata
		.av_waitrequest         (ts_i2c_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_chipselect          (ts_i2c_avalon_slave_0_chipselect),              //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_light_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                            //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (i2c_opencores_light_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_light_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_light_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_light_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_light_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_light_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_light_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_light_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_light_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_light_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_light_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_light_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_light_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_light_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_light_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_light_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_light_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                          //                         .read
		.uav_write              (key_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (key_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                                  //                         .write
		.av_readdata            (key_s1_readdata),                               //                         .readdata
		.av_writedata           (key_s1_writedata),                              //                         .writedata
		.av_chipselect          (key_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                           //                         .read
		.uav_write              (sw_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (sw_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (sw_s1_write),                                   //                         .write
		.av_readdata            (sw_s1_readdata),                                //                         .readdata
		.av_writedata           (sw_s1_writedata),                               //                         .writedata
		.av_chipselect          (sw_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ts_interrupt_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ts_interrupt_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (ts_interrupt_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (ts_interrupt_s1_agent_m0_read),                 //                         .read
		.uav_write              (ts_interrupt_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (ts_interrupt_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (ts_interrupt_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (ts_interrupt_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (ts_interrupt_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (ts_interrupt_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (ts_interrupt_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (ts_interrupt_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (ts_interrupt_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (ts_interrupt_s1_write),                         //                         .write
		.av_readdata            (ts_interrupt_s1_readdata),                      //                         .readdata
		.av_writedata           (ts_interrupt_s1_writedata),                     //                         .writedata
		.av_chipselect          (ts_interrupt_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mpu_int_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mpu_int_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (mpu_int_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (mpu_int_s1_agent_m0_read),                      //                         .read
		.uav_write              (mpu_int_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (mpu_int_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (mpu_int_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (mpu_int_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (mpu_int_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (mpu_int_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (mpu_int_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (mpu_int_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (mpu_int_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (mpu_int_s1_write),                              //                         .write
		.av_readdata            (mpu_int_s1_readdata),                           //                         .readdata
		.av_writedata           (mpu_int_s1_writedata),                          //                         .writedata
		.av_chipselect          (mpu_int_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) light_int_s1_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (light_int_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (light_int_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (light_int_s1_agent_m0_read),                    //                         .read
		.uav_write              (light_int_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (light_int_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (light_int_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (light_int_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (light_int_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (light_int_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (light_int_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (light_int_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (light_int_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (light_int_s1_write),                            //                         .write
		.av_readdata            (light_int_s1_readdata),                         //                         .readdata
		.av_writedata           (light_int_s1_writedata),                        //                         .writedata
		.av_chipselect          (light_int_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seg7_slave_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seg7_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (seg7_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (seg7_slave_agent_m0_read),                      //                         .read
		.uav_write              (seg7_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (seg7_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (seg7_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (seg7_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (seg7_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (seg7_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (seg7_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (seg7_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (seg7_slave_address),                            //      avalon_anti_slave_0.address
		.av_write               (seg7_slave_write),                              //                         .write
		.av_read                (seg7_slave_read),                               //                         .read
		.av_readdata            (seg7_slave_readdata),                           //                         .readdata
		.av_writedata           (seg7_slave_writedata),                          //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_spi_control_port_translator (
		.clk                    (clk_50_clk_clk),                                //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (spi_spi_control_port_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (spi_spi_control_port_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (spi_spi_control_port_agent_m0_read),            //                         .read
		.uav_write              (spi_spi_control_port_agent_m0_write),           //                         .write
		.uav_waitrequest        (spi_spi_control_port_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (spi_spi_control_port_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (spi_spi_control_port_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (spi_spi_control_port_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (spi_spi_control_port_agent_m0_writedata),       //                         .writedata
		.uav_lock               (spi_spi_control_port_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (spi_spi_control_port_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (spi_spi_control_port_address),                  //      avalon_anti_slave_0.address
		.av_write               (spi_spi_control_port_write),                    //                         .write
		.av_read                (spi_spi_control_port_read),                     //                         .read
		.av_readdata            (spi_spi_control_port_readdata),                 //                         .readdata
		.av_writedata           (spi_spi_control_port_writedata),                //                         .writedata
		.av_chipselect          (spi_spi_control_port_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_mpu_spi_control_port_translator (
		.clk                    (clk_50_clk_clk),                                  //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (spi_mpu_spi_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (spi_mpu_spi_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (spi_mpu_spi_control_port_agent_m0_read),          //                         .read
		.uav_write              (spi_mpu_spi_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (spi_mpu_spi_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (spi_mpu_spi_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (spi_mpu_spi_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (spi_mpu_spi_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (spi_mpu_spi_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (spi_mpu_spi_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (spi_mpu_spi_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (spi_mpu_spi_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (spi_mpu_spi_control_port_write),                  //                         .write
		.av_read                (spi_mpu_spi_control_port_read),                   //                         .read
		.av_readdata            (spi_mpu_spi_control_port_readdata),               //                         .readdata
		.av_writedata           (spi_mpu_spi_control_port_writedata),              //                         .writedata
		.av_chipselect          (spi_mpu_spi_control_port_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tv_decoder_stream_capture_avalon_slave_translator (
		.clk                    (vga_stream_out_clk_clk),                                        //                      clk.clk
		.reset                  (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (tv_decoder_stream_capture_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (tv_decoder_stream_capture_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (tv_decoder_stream_capture_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (tv_decoder_stream_capture_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (tv_decoder_stream_capture_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (tv_decoder_stream_capture_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (tv_decoder_stream_capture_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (tv_decoder_stream_capture_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (tv_decoder_stream_capture_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (tv_decoder_stream_capture_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (tv_decoder_stream_capture_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (tv_decoder_stream_capture_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (tv_decoder_stream_capture_avalon_slave_write),                  //                         .write
		.av_read                (tv_decoder_stream_capture_avalon_slave_read),                   //                         .read
		.av_readdata            (tv_decoder_stream_capture_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (tv_decoder_stream_capture_avalon_slave_writedata),              //                         .writedata
		.av_chipselect          (tv_decoder_stream_capture_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_data_master_agent (
		.clk                   (clk_50_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_50_clk_clk),                                                    //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_instruction_master_agent (
		.clk                   (clk_50_clk_clk),                                                                   //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tv_decoder_alt_vip_cl_cvi_0_control_agent (
		.clk                     (vga_stream_out_clk_clk),                                               //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (tv_decoder_alt_vip_cl_cvi_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                    //                .valid
		.cp_data                 (cmd_mux_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                  //                .channel
		.rf_sink_ready           (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                        //                .error
		.rdata_fifo_src_ready    (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                               //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tv_decoder_alt_vip_cl_cvi_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tv_decoder_alt_vip_cl_cvi_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                         //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tv_decoder_alt_vip_cl_scl_0_control_agent (
		.clk                     (vga_stream_out_clk_clk),                                               //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (tv_decoder_alt_vip_cl_scl_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                              //                .channel
		.rf_sink_ready           (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                               //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tv_decoder_alt_vip_cl_scl_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tv_decoder_alt_vip_cl_scl_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                         //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tv_decoder_alt_vip_cl_scl_1_control_agent (
		.clk                     (vga_stream_out_clk_clk),                                               //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_writedata),               //                .writedata
		.m0_write                (tv_decoder_alt_vip_cl_scl_1_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_ready),                   //                .ready
		.rp_valid                (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_valid),                   //                .valid
		.rp_data                 (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                              //                .channel
		.rf_sink_ready           (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                               //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_data),             //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_valid),            //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tv_decoder_alt_vip_cl_scl_1_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tv_decoder_alt_vip_cl_scl_1_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                         //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tv_decoder_alt_vip_cl_swi_0_control_agent (
		.clk                     (vga_stream_out_clk_clk),                                               //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (tv_decoder_alt_vip_cl_swi_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                              //                .channel
		.rf_sink_ready           (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                               //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tv_decoder_alt_vip_cl_swi_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tv_decoder_alt_vip_cl_swi_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                         //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_mipi_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                     //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                            //                .channel
		.rf_sink_ready           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_camera_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                       //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (i2c_opencores_camera_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_opencores_camera_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_opencores_camera_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_opencores_camera_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                              //                .channel
		.rf_sink_ready           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                       //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_cl_mixer_0_control_agent (
		.clk                     (vga_stream_out_clk_clk),                                      //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (alt_vip_cl_mixer_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_cl_mixer_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_cl_mixer_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_cl_mixer_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_cl_mixer_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_cl_mixer_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_cl_mixer_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_cl_mixer_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_cl_mixer_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_cl_mixer_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_cl_mixer_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_cl_mixer_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_cl_mixer_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_cl_mixer_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_cl_mixer_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_cl_mixer_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                     //                .channel
		.rf_sink_ready           (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_cl_mixer_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_cl_mixer_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_cl_mixer_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cl_mixer_0_control_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                      //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (alt_vip_cl_mixer_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_cl_mixer_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_cl_mixer_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_cl_mixer_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_cl_mixer_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_cl_mixer_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_cl_mixer_0_control_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                            //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_debug_mem_slave_agent (
		.clk                     (clk_50_clk_clk),                                              //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                              //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (135),
		.PKT_ORI_BURST_SIZE_L      (133),
		.PKT_RESPONSE_STATUS_H     (132),
		.PKT_RESPONSE_STATUS_L     (131),
		.PKT_BURST_SIZE_H          (106),
		.PKT_BURST_SIZE_L          (104),
		.PKT_TRANS_LOCK            (95),
		.PKT_BEGIN_BURST           (111),
		.PKT_PROTECTION_H          (126),
		.PKT_PROTECTION_L          (124),
		.PKT_BURSTWRAP_H           (103),
		.PKT_BURSTWRAP_L           (101),
		.PKT_BYTE_CNT_H            (100),
		.PKT_BYTE_CNT_L            (97),
		.PKT_ADDR_H                (90),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (91),
		.PKT_TRANS_POSTED          (92),
		.PKT_TRANS_WRITE           (93),
		.PKT_TRANS_READ            (94),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (117),
		.PKT_SRC_ID_L              (113),
		.PKT_DEST_ID_H             (122),
		.PKT_DEST_ID_L             (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (136),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_s1_agent (
		.clk                     (clk_50_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_s1_cmd_width_adapter_src_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_s1_cmd_width_adapter_src_valid),         //                .valid
		.cp_data                 (onchip_memory2_s1_cmd_width_adapter_src_data),          //                .data
		.cp_startofpacket        (onchip_memory2_s1_cmd_width_adapter_src_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_s1_cmd_width_adapter_src_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_s1_cmd_width_adapter_src_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (onchip_memory2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (137),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_011_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                       //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),             //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),             //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) camera_pwdn_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                    //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (camera_pwdn_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (camera_pwdn_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (camera_pwdn_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (camera_pwdn_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (camera_pwdn_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (camera_pwdn_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (camera_pwdn_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (camera_pwdn_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (camera_pwdn_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (camera_pwdn_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (camera_pwdn_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (camera_pwdn_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (camera_pwdn_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (camera_pwdn_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (camera_pwdn_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (camera_pwdn_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_013_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                           //                .channel
		.rf_sink_ready           (camera_pwdn_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (camera_pwdn_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (camera_pwdn_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (camera_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (camera_pwdn_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (camera_pwdn_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (camera_pwdn_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (camera_pwdn_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (camera_pwdn_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (camera_pwdn_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (camera_pwdn_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (camera_pwdn_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (camera_pwdn_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) camera_pwdn_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (camera_pwdn_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (camera_pwdn_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (camera_pwdn_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (camera_pwdn_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (camera_pwdn_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (camera_pwdn_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (camera_pwdn_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (camera_pwdn_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (camera_pwdn_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (camera_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mipi_reset_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (mipi_reset_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mipi_reset_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mipi_reset_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mipi_reset_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mipi_reset_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mipi_reset_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mipi_reset_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mipi_reset_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mipi_reset_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mipi_reset_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mipi_reset_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mipi_reset_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mipi_reset_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mipi_reset_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mipi_reset_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mipi_reset_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_014_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                          //                .channel
		.rf_sink_ready           (mipi_reset_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mipi_reset_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mipi_reset_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mipi_reset_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mipi_reset_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mipi_reset_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mipi_reset_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mipi_reset_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                //                .error
		.rdata_fifo_src_ready    (mipi_reset_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mipi_reset_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mipi_reset_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_reset_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (mipi_reset_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mipi_reset_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mipi_reset_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mipi_reset_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mipi_reset_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mipi_reset_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mipi_reset_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mipi_reset_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_apb_slave_agent #(
		.ADDR_WIDTH                (5),
		.DATA_WIDTH                (32),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_ORI_BURST_SIZE_H      (99),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100)
	) terasic_alsa_apb_slave_clkctrl_agent (
		.paddr            (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr),   // altera_apb_master.paddr
		.psel             (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_psel),    //                  .psel
		.penable          (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_penable), //                  .penable
		.pwrite           (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwrite),  //                  .pwrite
		.pwdata           (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pwdata),  //                  .pwdata
		.pready           (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pready),  //                  .pready
		.prdata           (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_prdata),  //                  .prdata
		.pslverr          (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_pslverr), //                  .pslverr
		.paddr31          (terasic_alsa_apb_slave_clkctrl_agent_altera_apb_master_paddr31), //                  .paddr31
		.cp_valid         (cmd_mux_015_src_valid),                                          //                cp.valid
		.cp_ready         (cmd_mux_015_src_ready),                                          //                  .ready
		.cp_data          (cmd_mux_015_src_data),                                           //                  .data
		.cp_channel       (cmd_mux_015_src_channel),                                        //                  .channel
		.cp_startofpacket (cmd_mux_015_src_startofpacket),                                  //                  .startofpacket
		.cp_endofpacket   (cmd_mux_015_src_endofpacket),                                    //                  .endofpacket
		.rp_valid         (terasic_alsa_apb_slave_clkctrl_agent_rp_valid),                  //                rp.valid
		.rp_ready         (terasic_alsa_apb_slave_clkctrl_agent_rp_ready),                  //                  .ready
		.rp_data          (terasic_alsa_apb_slave_clkctrl_agent_rp_data),                   //                  .data
		.rp_startofpacket (terasic_alsa_apb_slave_clkctrl_agent_rp_startofpacket),          //                  .startofpacket
		.rp_endofpacket   (terasic_alsa_apb_slave_clkctrl_agent_rp_endofpacket),            //                  .endofpacket
		.clk              (clk_50_clk_clk),                                                 //               clk.clk
		.reset            (mm_bridge_0_reset_reset_bridge_in_reset_reset)                   //         clk_reset.reset
	);

	altera_merlin_apb_slave_agent #(
		.ADDR_WIDTH                (5),
		.DATA_WIDTH                (32),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (75),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_TRANS_LOCK            (59),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_ORI_BURST_SIZE_H      (99),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100)
	) terasic_alsa_apb_slave_output_agent (
		.paddr            (terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr),   // altera_apb_master.paddr
		.psel             (terasic_alsa_apb_slave_output_agent_altera_apb_master_psel),    //                  .psel
		.penable          (terasic_alsa_apb_slave_output_agent_altera_apb_master_penable), //                  .penable
		.pwrite           (terasic_alsa_apb_slave_output_agent_altera_apb_master_pwrite),  //                  .pwrite
		.pwdata           (terasic_alsa_apb_slave_output_agent_altera_apb_master_pwdata),  //                  .pwdata
		.pready           (terasic_alsa_apb_slave_output_agent_altera_apb_master_pready),  //                  .pready
		.prdata           (terasic_alsa_apb_slave_output_agent_altera_apb_master_prdata),  //                  .prdata
		.pslverr          (terasic_alsa_apb_slave_output_agent_altera_apb_master_pslverr), //                  .pslverr
		.paddr31          (terasic_alsa_apb_slave_output_agent_altera_apb_master_paddr31), //                  .paddr31
		.cp_valid         (cmd_mux_016_src_valid),                                         //                cp.valid
		.cp_ready         (cmd_mux_016_src_ready),                                         //                  .ready
		.cp_data          (cmd_mux_016_src_data),                                          //                  .data
		.cp_channel       (cmd_mux_016_src_channel),                                       //                  .channel
		.cp_startofpacket (cmd_mux_016_src_startofpacket),                                 //                  .startofpacket
		.cp_endofpacket   (cmd_mux_016_src_endofpacket),                                   //                  .endofpacket
		.rp_valid         (terasic_alsa_apb_slave_output_agent_rp_valid),                  //                rp.valid
		.rp_ready         (terasic_alsa_apb_slave_output_agent_rp_ready),                  //                  .ready
		.rp_data          (terasic_alsa_apb_slave_output_agent_rp_data),                   //                  .data
		.rp_startofpacket (terasic_alsa_apb_slave_output_agent_rp_startofpacket),          //                  .startofpacket
		.rp_endofpacket   (terasic_alsa_apb_slave_output_agent_rp_endofpacket),            //                  .endofpacket
		.clk              (clk_50_clk_clk),                                                //               clk.clk
		.reset            (mm_bridge_0_reset_reset_bridge_in_reset_reset)                  //         clk_reset.reset
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_vip_vfr_vga_avalon_slave_agent (
		.clk                     (vga_stream_out_clk_clk),                                        //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (alt_vip_vfr_vga_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_vip_vfr_vga_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_vip_vfr_vga_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_vip_vfr_vga_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_vip_vfr_vga_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_vip_vfr_vga_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_vip_vfr_vga_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_vip_vfr_vga_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_vip_vfr_vga_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_vip_vfr_vga_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_vip_vfr_vga_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_vip_vfr_vga_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_vip_vfr_vga_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_vip_vfr_vga_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                       //                .channel
		.rf_sink_ready           (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                        //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (alt_vip_vfr_vga_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_vip_vfr_vga_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_vip_vfr_vga_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_vip_vfr_vga_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ir_rx_avalon_slave_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (ir_rx_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ir_rx_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ir_rx_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ir_rx_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ir_rx_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (ir_rx_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ir_rx_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ir_rx_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (ir_rx_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ir_rx_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (ir_rx_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (ir_rx_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ir_rx_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (ir_rx_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (ir_rx_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (ir_rx_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                             //                .channel
		.rf_sink_ready           (ir_rx_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ir_rx_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ir_rx_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ir_rx_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ir_rx_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ir_rx_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ir_rx_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ir_rx_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (ir_rx_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ir_rx_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ir_rx_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ir_rx_avalon_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (ir_rx_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ir_rx_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ir_rx_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ir_rx_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ir_rx_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ir_rx_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ir_rx_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ir_rx_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ir_rx_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ir_rx_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ts_i2c_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                         //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (ts_i2c_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ts_i2c_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ts_i2c_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ts_i2c_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ts_i2c_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (ts_i2c_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ts_i2c_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ts_i2c_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (ts_i2c_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ts_i2c_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (ts_i2c_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (ts_i2c_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ts_i2c_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (ts_i2c_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (ts_i2c_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (ts_i2c_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                //                .channel
		.rf_sink_ready           (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ts_i2c_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ts_i2c_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ts_i2c_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ts_i2c_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ts_i2c_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ts_i2c_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                         //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (ts_i2c_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (ts_i2c_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (ts_i2c_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ts_i2c_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ts_i2c_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ts_i2c_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_light_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                      //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (i2c_opencores_light_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_opencores_light_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_opencores_light_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_opencores_light_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_opencores_light_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_opencores_light_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_opencores_light_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_opencores_light_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_opencores_light_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_opencores_light_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_opencores_light_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_opencores_light_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_opencores_light_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_opencores_light_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_opencores_light_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_opencores_light_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                             //                .channel
		.rf_sink_ready           (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_opencores_light_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_opencores_light_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_opencores_light_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_light_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_opencores_light_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_light_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                      //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (i2c_opencores_light_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_light_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_light_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_light_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_light_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_light_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (key_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (key_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_021_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                       //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),             //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_022_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                       //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ts_interrupt_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ts_interrupt_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ts_interrupt_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ts_interrupt_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ts_interrupt_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ts_interrupt_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ts_interrupt_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ts_interrupt_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ts_interrupt_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ts_interrupt_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ts_interrupt_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ts_interrupt_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ts_interrupt_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ts_interrupt_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ts_interrupt_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ts_interrupt_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ts_interrupt_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_023_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                          //                .channel
		.rf_sink_ready           (ts_interrupt_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ts_interrupt_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ts_interrupt_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ts_interrupt_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ts_interrupt_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ts_interrupt_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ts_interrupt_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ts_interrupt_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ts_interrupt_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ts_interrupt_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                //                .error
		.rdata_fifo_src_ready    (ts_interrupt_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ts_interrupt_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ts_interrupt_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ts_interrupt_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (ts_interrupt_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ts_interrupt_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ts_interrupt_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ts_interrupt_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ts_interrupt_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ts_interrupt_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ts_interrupt_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ts_interrupt_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ts_interrupt_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ts_interrupt_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mpu_int_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mpu_int_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mpu_int_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mpu_int_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mpu_int_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mpu_int_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (mpu_int_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mpu_int_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mpu_int_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (mpu_int_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mpu_int_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (mpu_int_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (mpu_int_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mpu_int_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (mpu_int_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (mpu_int_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (mpu_int_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_024_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                       //                .channel
		.rf_sink_ready           (mpu_int_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mpu_int_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mpu_int_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mpu_int_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mpu_int_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mpu_int_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mpu_int_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mpu_int_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mpu_int_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mpu_int_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),             //                .error
		.rdata_fifo_src_ready    (mpu_int_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mpu_int_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mpu_int_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mpu_int_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mpu_int_s1_agent_rf_source_data),               //        in.data
		.in_valid          (mpu_int_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (mpu_int_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mpu_int_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mpu_int_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mpu_int_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mpu_int_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mpu_int_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mpu_int_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mpu_int_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) light_int_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (light_int_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (light_int_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (light_int_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (light_int_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (light_int_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (light_int_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (light_int_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (light_int_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (light_int_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (light_int_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (light_int_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (light_int_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (light_int_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (light_int_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (light_int_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (light_int_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_025_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                       //                .channel
		.rf_sink_ready           (light_int_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (light_int_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (light_int_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (light_int_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (light_int_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (light_int_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (light_int_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (light_int_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (light_int_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (light_int_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),             //                .error
		.rdata_fifo_src_ready    (light_int_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (light_int_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (light_int_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) light_int_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (light_int_s1_agent_rf_source_data),             //        in.data
		.in_valid          (light_int_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (light_int_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (light_int_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (light_int_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (light_int_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (light_int_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (light_int_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (light_int_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (light_int_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seg7_slave_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (seg7_slave_agent_m0_address),                   //              m0.address
		.m0_burstcount           (seg7_slave_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (seg7_slave_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (seg7_slave_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (seg7_slave_agent_m0_lock),                      //                .lock
		.m0_readdata             (seg7_slave_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (seg7_slave_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (seg7_slave_agent_m0_read),                      //                .read
		.m0_waitrequest          (seg7_slave_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (seg7_slave_agent_m0_writedata),                 //                .writedata
		.m0_write                (seg7_slave_agent_m0_write),                     //                .write
		.rp_endofpacket          (seg7_slave_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (seg7_slave_agent_rp_ready),                     //                .ready
		.rp_valid                (seg7_slave_agent_rp_valid),                     //                .valid
		.rp_data                 (seg7_slave_agent_rp_data),                      //                .data
		.rp_startofpacket        (seg7_slave_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_026_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                       //                .channel
		.rf_sink_ready           (seg7_slave_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (seg7_slave_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (seg7_slave_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (seg7_slave_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (seg7_slave_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (seg7_slave_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (seg7_slave_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (seg7_slave_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (seg7_slave_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (seg7_slave_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),             //                .error
		.rdata_fifo_src_ready    (seg7_slave_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seg7_slave_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (seg7_slave_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seg7_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (seg7_slave_agent_rf_source_data),               //        in.data
		.in_valid          (seg7_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (seg7_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (seg7_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (seg7_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (seg7_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (seg7_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (seg7_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (seg7_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (seg7_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_spi_control_port_agent (
		.clk                     (clk_50_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (spi_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_027_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                               //                .channel
		.rf_sink_ready           (spi_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (spi_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_spi_control_port_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (spi_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_mpu_spi_control_port_agent (
		.clk                     (clk_50_clk_clk),                                            //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (spi_mpu_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_mpu_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_mpu_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_mpu_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_mpu_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_mpu_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_mpu_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_mpu_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_mpu_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_mpu_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_mpu_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_mpu_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_mpu_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_mpu_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_mpu_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_mpu_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_028_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                                   //                .channel
		.rf_sink_ready           (spi_mpu_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_mpu_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_mpu_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_mpu_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_mpu_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_mpu_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_mpu_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_mpu_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_mpu_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_mpu_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (spi_mpu_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_mpu_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_mpu_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_mpu_spi_control_port_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (spi_mpu_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_mpu_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_mpu_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_mpu_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_mpu_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_mpu_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_mpu_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_mpu_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_mpu_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_mpu_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (30),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) tv_decoder_stream_capture_avalon_slave_agent (
		.clk                     (vga_stream_out_clk_clk),                                                  //             clk.clk
		.reset                   (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (tv_decoder_stream_capture_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tv_decoder_stream_capture_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tv_decoder_stream_capture_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tv_decoder_stream_capture_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tv_decoder_stream_capture_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (tv_decoder_stream_capture_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tv_decoder_stream_capture_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tv_decoder_stream_capture_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (tv_decoder_stream_capture_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tv_decoder_stream_capture_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (tv_decoder_stream_capture_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (tv_decoder_stream_capture_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tv_decoder_stream_capture_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (tv_decoder_stream_capture_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (tv_decoder_stream_capture_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (tv_decoder_stream_capture_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_029_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                                                 //                .channel
		.rf_sink_ready           (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tv_decoder_stream_capture_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tv_decoder_stream_capture_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tv_decoder_stream_capture_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tv_decoder_stream_capture_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tv_decoder_stream_capture_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo (
		.clk               (vga_stream_out_clk_clk),                                                  //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (tv_decoder_stream_capture_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (tv_decoder_stream_capture_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (tv_decoder_stream_capture_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tv_decoder_stream_capture_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tv_decoder_stream_capture_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tv_decoder_stream_capture_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo (
		.clk               (vga_stream_out_clk_clk),                                            //       clk.clk
		.reset             (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	soc_system_mm_interconnect_1_router router (
		.sink_ready         (nios2_gen2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (nios2_gen2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_ready),         //      sink.ready
		.sink_valid         (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_valid),         //          .valid
		.sink_data          (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_data),          //          .data
		.sink_startofpacket (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tv_decoder_alt_vip_cl_cvi_0_control_agent_rp_endofpacket),   //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_004 (
		.sink_ready         (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_ready),         //      sink.ready
		.sink_valid         (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_valid),         //          .valid
		.sink_data          (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_data),          //          .data
		.sink_startofpacket (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tv_decoder_alt_vip_cl_scl_0_control_agent_rp_endofpacket),   //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                                       //       src.ready
		.src_valid          (router_004_src_valid),                                       //          .valid
		.src_data           (router_004_src_data),                                        //          .data
		.src_channel        (router_004_src_channel),                                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_005 (
		.sink_ready         (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_ready),         //      sink.ready
		.sink_valid         (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_valid),         //          .valid
		.sink_data          (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_data),          //          .data
		.sink_startofpacket (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tv_decoder_alt_vip_cl_scl_1_control_agent_rp_endofpacket),   //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_006 (
		.sink_ready         (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_ready),         //      sink.ready
		.sink_valid         (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_valid),         //          .valid
		.sink_data          (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_data),          //          .data
		.sink_startofpacket (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tv_decoder_alt_vip_cl_swi_0_control_agent_rp_endofpacket),   //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                     //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                                       //       src.ready
		.src_valid          (router_006_src_valid),                                       //          .valid
		.src_data           (router_006_src_data),                                        //          .data
		.src_channel        (router_006_src_channel),                                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_007 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                     //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_008 (
		.sink_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_008_src_ready),                                     //       src.ready
		.src_valid          (router_008_src_valid),                                     //          .valid
		.src_data           (router_008_src_data),                                      //          .data
		.src_channel        (router_008_src_channel),                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_009 (
		.sink_ready         (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_camera_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_009_src_ready),                                       //       src.ready
		.src_valid          (router_009_src_valid),                                       //          .valid
		.src_data           (router_009_src_data),                                        //          .data
		.src_channel        (router_009_src_channel),                                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_010 (
		.sink_ready         (alt_vip_cl_mixer_0_control_agent_rp_ready),                 //      sink.ready
		.sink_valid         (alt_vip_cl_mixer_0_control_agent_rp_valid),                 //          .valid
		.sink_data          (alt_vip_cl_mixer_0_control_agent_rp_data),                  //          .data
		.sink_startofpacket (alt_vip_cl_mixer_0_control_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (alt_vip_cl_mixer_0_control_agent_rp_endofpacket),           //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                      //       src.ready
		.src_valid          (router_010_src_valid),                                      //          .valid
		.src_data           (router_010_src_data),                                       //          .data
		.src_channel        (router_010_src_channel),                                    //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_011 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_011_src_ready),                            //       src.ready
		.src_valid          (router_011_src_valid),                            //          .valid
		.src_data           (router_011_src_data),                             //          .data
		.src_channel        (router_011_src_channel),                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_012 router_012 (
		.sink_ready         (nios2_gen2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                    //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_013 router_013 (
		.sink_ready         (onchip_memory2_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (onchip_memory2_s1_agent_rp_valid),              //          .valid
		.sink_data          (onchip_memory2_s1_agent_rp_data),               //          .data
		.sink_startofpacket (onchip_memory2_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_014 router_014 (
		.sink_ready         (timer_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                       //          .valid
		.sink_data          (timer_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_015 (
		.sink_ready         (ledr_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (ledr_s1_agent_rp_valid),                        //          .valid
		.sink_data          (ledr_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (ledr_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (ledr_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_016 (
		.sink_ready         (camera_pwdn_n_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (camera_pwdn_n_s1_agent_rp_valid),               //          .valid
		.sink_data          (camera_pwdn_n_s1_agent_rp_data),                //          .data
		.sink_startofpacket (camera_pwdn_n_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (camera_pwdn_n_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_003 router_017 (
		.sink_ready         (mipi_reset_n_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (mipi_reset_n_s1_agent_rp_valid),                //          .valid
		.sink_data          (mipi_reset_n_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (mipi_reset_n_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (mipi_reset_n_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_018 (
		.sink_ready         (terasic_alsa_apb_slave_clkctrl_agent_rp_ready),         //      sink.ready
		.sink_valid         (terasic_alsa_apb_slave_clkctrl_agent_rp_valid),         //          .valid
		.sink_data          (terasic_alsa_apb_slave_clkctrl_agent_rp_data),          //          .data
		.sink_startofpacket (terasic_alsa_apb_slave_clkctrl_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (terasic_alsa_apb_slave_clkctrl_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_018_src_ready),                                  //       src.ready
		.src_valid          (router_018_src_valid),                                  //          .valid
		.src_data           (router_018_src_data),                                   //          .data
		.src_channel        (router_018_src_channel),                                //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_019 (
		.sink_ready         (terasic_alsa_apb_slave_output_agent_rp_ready),         //      sink.ready
		.sink_valid         (terasic_alsa_apb_slave_output_agent_rp_valid),         //          .valid
		.sink_data          (terasic_alsa_apb_slave_output_agent_rp_data),          //          .data
		.sink_startofpacket (terasic_alsa_apb_slave_output_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (terasic_alsa_apb_slave_output_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                       //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_019_src_ready),                                 //       src.ready
		.src_valid          (router_019_src_valid),                                 //          .valid
		.src_data           (router_019_src_data),                                  //          .data
		.src_channel        (router_019_src_channel),                               //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_020 (
		.sink_ready         (alt_vip_vfr_vga_avalon_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (alt_vip_vfr_vga_avalon_slave_agent_rp_valid),               //          .valid
		.sink_data          (alt_vip_vfr_vga_avalon_slave_agent_rp_data),                //          .data
		.sink_startofpacket (alt_vip_vfr_vga_avalon_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (alt_vip_vfr_vga_avalon_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                      //       src.ready
		.src_valid          (router_020_src_valid),                                      //          .valid
		.src_data           (router_020_src_data),                                       //          .data
		.src_channel        (router_020_src_channel),                                    //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_021 (
		.sink_ready         (ir_rx_avalon_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (ir_rx_avalon_slave_agent_rp_valid),             //          .valid
		.sink_data          (ir_rx_avalon_slave_agent_rp_data),              //          .data
		.sink_startofpacket (ir_rx_avalon_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (ir_rx_avalon_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                          //       src.ready
		.src_valid          (router_021_src_valid),                          //          .valid
		.src_data           (router_021_src_data),                           //          .data
		.src_channel        (router_021_src_channel),                        //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_022 (
		.sink_ready         (ts_i2c_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (ts_i2c_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (ts_i2c_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (ts_i2c_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (ts_i2c_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                          //       src.ready
		.src_valid          (router_022_src_valid),                          //          .valid
		.src_data           (router_022_src_data),                           //          .data
		.src_channel        (router_022_src_channel),                        //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_023 (
		.sink_ready         (i2c_opencores_light_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_light_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_light_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_light_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_light_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                            //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_023_src_ready),                                      //       src.ready
		.src_valid          (router_023_src_valid),                                      //          .valid
		.src_data           (router_023_src_data),                                       //          .data
		.src_channel        (router_023_src_channel),                                    //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_024 (
		.sink_ready         (key_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                         //          .valid
		.sink_data          (key_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_025 (
		.sink_ready         (sw_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                          //          .valid
		.sink_data          (sw_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_026 (
		.sink_ready         (ts_interrupt_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (ts_interrupt_s1_agent_rp_valid),                //          .valid
		.sink_data          (ts_interrupt_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (ts_interrupt_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (ts_interrupt_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                          //       src.ready
		.src_valid          (router_026_src_valid),                          //          .valid
		.src_data           (router_026_src_data),                           //          .data
		.src_channel        (router_026_src_channel),                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_027 (
		.sink_ready         (mpu_int_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mpu_int_s1_agent_rp_valid),                     //          .valid
		.sink_data          (mpu_int_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (mpu_int_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mpu_int_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                          //       src.ready
		.src_valid          (router_027_src_valid),                          //          .valid
		.src_data           (router_027_src_data),                           //          .data
		.src_channel        (router_027_src_channel),                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_028 (
		.sink_ready         (light_int_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (light_int_s1_agent_rp_valid),                   //          .valid
		.sink_data          (light_int_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (light_int_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (light_int_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                          //       src.ready
		.src_valid          (router_028_src_valid),                          //          .valid
		.src_data           (router_028_src_data),                           //          .data
		.src_channel        (router_028_src_channel),                        //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_029 (
		.sink_ready         (seg7_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (seg7_slave_agent_rp_valid),                     //          .valid
		.sink_data          (seg7_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (seg7_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (seg7_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                          //       src.ready
		.src_valid          (router_029_src_valid),                          //          .valid
		.src_data           (router_029_src_data),                           //          .data
		.src_channel        (router_029_src_channel),                        //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_030 (
		.sink_ready         (spi_spi_control_port_agent_rp_ready),           //      sink.ready
		.sink_valid         (spi_spi_control_port_agent_rp_valid),           //          .valid
		.sink_data          (spi_spi_control_port_agent_rp_data),            //          .data
		.sink_startofpacket (spi_spi_control_port_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (spi_spi_control_port_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                          //       src.ready
		.src_valid          (router_030_src_valid),                          //          .valid
		.src_data           (router_030_src_data),                           //          .data
		.src_channel        (router_030_src_channel),                        //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_031 (
		.sink_ready         (spi_mpu_spi_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_mpu_spi_control_port_agent_rp_valid),         //          .valid
		.sink_data          (spi_mpu_spi_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (spi_mpu_spi_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_mpu_spi_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_031_src_ready),                            //       src.ready
		.src_valid          (router_031_src_valid),                            //          .valid
		.src_data           (router_031_src_data),                             //          .data
		.src_channel        (router_031_src_channel),                          //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                       //          .endofpacket
	);

	soc_system_mm_interconnect_1_router_018 router_032 (
		.sink_ready         (tv_decoder_stream_capture_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (tv_decoder_stream_capture_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (tv_decoder_stream_capture_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (tv_decoder_stream_capture_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tv_decoder_stream_capture_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (vga_stream_out_clk_clk),                                        //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_032_src_ready),                                          //       src.ready
		.src_valid          (router_032_src_valid),                                          //          .valid
		.src_data           (router_032_src_data),                                           //          .data
		.src_channel        (router_032_src_channel),                                        //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.VALID_WIDTH               (30),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_data_master_limiter (
		.clk                    (clk_50_clk_clk),                                       //       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (nios2_gen2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.VALID_WIDTH               (30),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk_50_clk_clk),                                //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                          //          .valid
		.cmd_sink_data          (router_001_src_data),                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (30),
		.VALID_WIDTH               (30),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_instruction_master_limiter (
		.clk                    (clk_50_clk_clk),                                              //       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                        //          .valid
		.cmd_sink_data          (router_002_src_data),                                         //          .data
		.cmd_sink_channel       (router_002_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (nios2_gen2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	soc_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (clk_50_clk_clk),                                       //        clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_gen2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket)                           //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_50_clk_clk),                                //        clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid          (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                      //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                      //           .valid
		.src0_data           (cmd_demux_001_src0_data),                       //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                    //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                      //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                      //           .valid
		.src1_data           (cmd_demux_001_src1_data),                       //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                    //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                      //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                      //           .valid
		.src2_data           (cmd_demux_001_src2_data),                       //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                    //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                      //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                      //           .valid
		.src3_data           (cmd_demux_001_src3_data),                       //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                    //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                      //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                      //           .valid
		.src4_data           (cmd_demux_001_src4_data),                       //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                    //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                      //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                      //           .valid
		.src5_data           (cmd_demux_001_src5_data),                       //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                    //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),              //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                      //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                      //           .valid
		.src6_data           (cmd_demux_001_src6_data),                       //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                    //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),              //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                      //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                      //           .valid
		.src7_data           (cmd_demux_001_src7_data),                       //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                    //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),              //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                      //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                      //           .valid
		.src8_data           (cmd_demux_001_src8_data),                       //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                    //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),              //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                      //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                      //           .valid
		.src9_data           (cmd_demux_001_src9_data),                       //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                    //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),              //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                     //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                     //           .valid
		.src10_data          (cmd_demux_001_src10_data),                      //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                   //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),             //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),               //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                     //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                     //           .valid
		.src11_data          (cmd_demux_001_src11_data),                      //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                   //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),             //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),               //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                     //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                     //           .valid
		.src12_data          (cmd_demux_001_src12_data),                      //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                   //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),             //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),               //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                     //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                     //           .valid
		.src13_data          (cmd_demux_001_src13_data),                      //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                   //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),             //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),               //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                     //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                     //           .valid
		.src14_data          (cmd_demux_001_src14_data),                      //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                   //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),             //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),               //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                     //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                     //           .valid
		.src15_data          (cmd_demux_001_src15_data),                      //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                   //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),             //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),               //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                     //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                     //           .valid
		.src16_data          (cmd_demux_001_src16_data),                      //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                   //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),             //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),               //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                     //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                     //           .valid
		.src17_data          (cmd_demux_001_src17_data),                      //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                   //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),             //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),               //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                     //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                     //           .valid
		.src18_data          (cmd_demux_001_src18_data),                      //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                   //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),             //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),               //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                     //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                     //           .valid
		.src19_data          (cmd_demux_001_src19_data),                      //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                   //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),             //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),               //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                     //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                     //           .valid
		.src20_data          (cmd_demux_001_src20_data),                      //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                   //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),             //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),               //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                     //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                     //           .valid
		.src21_data          (cmd_demux_001_src21_data),                      //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                   //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),             //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),               //           .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                     //      src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                     //           .valid
		.src22_data          (cmd_demux_001_src22_data),                      //           .data
		.src22_channel       (cmd_demux_001_src22_channel),                   //           .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),             //           .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),               //           .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),                     //      src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),                     //           .valid
		.src23_data          (cmd_demux_001_src23_data),                      //           .data
		.src23_channel       (cmd_demux_001_src23_channel),                   //           .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),             //           .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket),               //           .endofpacket
		.src24_ready         (cmd_demux_001_src24_ready),                     //      src24.ready
		.src24_valid         (cmd_demux_001_src24_valid),                     //           .valid
		.src24_data          (cmd_demux_001_src24_data),                      //           .data
		.src24_channel       (cmd_demux_001_src24_channel),                   //           .channel
		.src24_startofpacket (cmd_demux_001_src24_startofpacket),             //           .startofpacket
		.src24_endofpacket   (cmd_demux_001_src24_endofpacket),               //           .endofpacket
		.src25_ready         (cmd_demux_001_src25_ready),                     //      src25.ready
		.src25_valid         (cmd_demux_001_src25_valid),                     //           .valid
		.src25_data          (cmd_demux_001_src25_data),                      //           .data
		.src25_channel       (cmd_demux_001_src25_channel),                   //           .channel
		.src25_startofpacket (cmd_demux_001_src25_startofpacket),             //           .startofpacket
		.src25_endofpacket   (cmd_demux_001_src25_endofpacket),               //           .endofpacket
		.src26_ready         (cmd_demux_001_src26_ready),                     //      src26.ready
		.src26_valid         (cmd_demux_001_src26_valid),                     //           .valid
		.src26_data          (cmd_demux_001_src26_data),                      //           .data
		.src26_channel       (cmd_demux_001_src26_channel),                   //           .channel
		.src26_startofpacket (cmd_demux_001_src26_startofpacket),             //           .startofpacket
		.src26_endofpacket   (cmd_demux_001_src26_endofpacket)                //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_50_clk_clk),                                              //        clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                               //           .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                   //          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                                     //          .valid
		.sink1_channel       (crosser_005_out_channel),                                   //          .channel
		.sink1_data          (crosser_005_out_data),                                      //          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                     //          .valid
		.sink0_channel       (crosser_001_out_channel),                                   //          .channel
		.sink0_data          (crosser_001_out_data),                                      //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                                     //          .valid
		.sink1_channel       (crosser_006_out_channel),                                   //          .channel
		.sink1_data          (crosser_006_out_data),                                      //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                     //          .valid
		.sink0_channel       (crosser_002_out_channel),                                   //          .channel
		.sink0_data          (crosser_002_out_data),                                      //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                                     //          .valid
		.sink1_channel       (crosser_007_out_channel),                                   //          .channel
		.sink1_data          (crosser_007_out_data),                                      //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                     //          .valid
		.src_data            (cmd_mux_003_src_data),                                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                     //          .valid
		.sink0_channel       (crosser_003_out_channel),                                   //          .channel
		.sink0_data          (crosser_003_out_data),                                      //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                                     //          .valid
		.sink1_channel       (crosser_008_out_channel),                                   //          .channel
		.sink1_data          (crosser_008_out_data),                                      //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //          .valid
		.src_data            (cmd_mux_004_src_data),                          //          .data
		.src_channel         (cmd_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //          .channel
		.sink0_data          (cmd_demux_src4_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //          .valid
		.src_data            (cmd_mux_005_src_data),                          //          .data
		.src_channel         (cmd_mux_005_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //          .channel
		.sink0_data          (cmd_demux_src5_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                     //          .valid
		.src_data            (cmd_mux_007_src_data),                                      //          .data
		.src_channel         (cmd_mux_007_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                     //          .valid
		.sink0_channel       (crosser_004_out_channel),                                   //          .channel
		.sink0_data          (crosser_004_out_data),                                      //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                               //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                                     //          .valid
		.sink1_channel       (crosser_009_out_channel),                                   //          .channel
		.sink1_data          (crosser_009_out_data),                                      //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                         //          .valid
		.src_data            (cmd_mux_008_src_data),                          //          .data
		.src_channel         (cmd_mux_008_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                        //          .channel
		.sink0_data          (cmd_demux_src8_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                      //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                    //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                       //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_012 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_013 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux cmd_mux_014 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_015 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //          .valid
		.src_data            (cmd_mux_015_src_data),                          //          .data
		.src_channel         (cmd_mux_015_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_016 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_017 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                     //          .valid
		.src_data            (cmd_mux_017_src_data),                                      //          .data
		.src_channel         (cmd_mux_017_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                                     //          .valid
		.sink0_channel       (crosser_010_out_channel),                                   //          .channel
		.sink0_data          (crosser_010_out_data),                                      //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_018 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_019 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //          .valid
		.src_data            (cmd_mux_019_src_data),                          //          .data
		.src_channel         (cmd_mux_019_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_020 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //          .valid
		.src_data            (cmd_mux_020_src_data),                          //          .data
		.src_channel         (cmd_mux_020_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_021 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //          .valid
		.src_data            (cmd_mux_021_src_data),                          //          .data
		.src_channel         (cmd_mux_021_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_022 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //          .valid
		.src_data            (cmd_mux_022_src_data),                          //          .data
		.src_channel         (cmd_mux_022_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_023 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //          .valid
		.src_data            (cmd_mux_023_src_data),                          //          .data
		.src_channel         (cmd_mux_023_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_024 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                         //          .valid
		.src_data            (cmd_mux_024_src_data),                          //          .data
		.src_channel         (cmd_mux_024_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src21_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src21_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src21_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src21_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src21_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src21_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_025 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                         //          .valid
		.src_data            (cmd_mux_025_src_data),                          //          .data
		.src_channel         (cmd_mux_025_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src22_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src22_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src22_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src22_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src22_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src22_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_026 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                         //          .valid
		.src_data            (cmd_mux_026_src_data),                          //          .data
		.src_channel         (cmd_mux_026_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src23_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src23_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src23_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src23_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src23_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src23_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_027 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                         //          .valid
		.src_data            (cmd_mux_027_src_data),                          //          .data
		.src_channel         (cmd_mux_027_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src24_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src24_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src24_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src24_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src24_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src24_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_028 (
		.clk                 (clk_50_clk_clk),                                //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                         //          .valid
		.src_data            (cmd_mux_028_src_data),                          //          .data
		.src_channel         (cmd_mux_028_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_001_src25_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src25_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src25_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src25_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src25_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src25_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_cmd_mux_011 cmd_mux_029 (
		.clk                 (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset               (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                     //          .valid
		.src_data            (cmd_mux_029_src_data),                                      //          .data
		.src_channel         (cmd_mux_029_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                                     //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                                     //          .valid
		.sink0_channel       (crosser_011_out_channel),                                   //          .channel
		.sink0_data          (crosser_011_out_data),                                      //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //      sink.ready
		.sink_channel       (router_003_src_channel),                                    //          .channel
		.sink_data          (router_003_src_data),                                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                      //      sink.ready
		.sink_channel       (router_004_src_channel),                                    //          .channel
		.sink_data          (router_004_src_data),                                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_004_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                      //      sink.ready
		.sink_channel       (router_005_src_channel),                                    //          .channel
		.sink_data          (router_005_src_data),                                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_005_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_004_src1_data),                       //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_005 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_005_src1_data),                       //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_006 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_006_src1_data),                       //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                      //      sink.ready
		.sink_channel       (router_010_src_channel),                                    //          .channel
		.sink_data          (router_010_src_data),                                       //          .data
		.sink_startofpacket (router_010_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_010_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_008 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_009 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                         //      sink.ready
		.sink_channel       (router_012_src_channel),                       //          .channel
		.sink_data          (router_012_src_data),                          //          .data
		.sink_startofpacket (router_012_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_012_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_009_src1_data),                      //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_010 (
		.clk                (clk_50_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (onchip_memory2_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory2_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory2_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory2_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory2_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_010_src0_data),                               //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_010_src1_data),                               //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_011 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_012 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_012_src1_data),                       //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_013 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_004 rsp_demux_014 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_014_src1_data),                       //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_015 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_016 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //      sink.ready
		.sink_channel       (router_019_src_channel),                        //          .channel
		.sink_data          (router_019_src_data),                           //          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_019_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_017 rsp_demux_017 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                      //      sink.ready
		.sink_channel       (router_020_src_channel),                                    //          .channel
		.sink_data          (router_020_src_data),                                       //          .data
		.sink_startofpacket (router_020_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_020_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_018 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //      sink.ready
		.sink_channel       (router_021_src_channel),                        //          .channel
		.sink_data          (router_021_src_data),                           //          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_021_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_019 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_020 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_021 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_022 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_023 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //      sink.ready
		.sink_channel       (router_026_src_channel),                        //          .channel
		.sink_data          (router_026_src_data),                           //          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_026_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_024 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //      sink.ready
		.sink_channel       (router_027_src_channel),                        //          .channel
		.sink_data          (router_027_src_data),                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_024_src0_data),                       //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_025 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                          //      sink.ready
		.sink_channel       (router_028_src_channel),                        //          .channel
		.sink_data          (router_028_src_data),                           //          .data
		.sink_startofpacket (router_028_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_028_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_025_src0_data),                       //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_026 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                          //      sink.ready
		.sink_channel       (router_029_src_channel),                        //          .channel
		.sink_data          (router_029_src_data),                           //          .data
		.sink_startofpacket (router_029_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_029_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_026_src0_data),                       //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_027 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                          //      sink.ready
		.sink_channel       (router_030_src_channel),                        //          .channel
		.sink_data          (router_030_src_data),                           //          .data
		.sink_startofpacket (router_030_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_030_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_027_src0_data),                       //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_011 rsp_demux_028 (
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                          //      sink.ready
		.sink_channel       (router_031_src_channel),                        //          .channel
		.sink_data          (router_031_src_data),                           //          .data
		.sink_startofpacket (router_031_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_031_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_028_src0_data),                       //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_demux_017 rsp_demux_029 (
		.clk                (vga_stream_out_clk_clk),                                    //       clk.clk
		.reset              (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                                      //      sink.ready
		.sink_channel       (router_032_src_channel),                                    //          .channel
		.sink_data          (router_032_src_data),                                       //          .data
		.sink_startofpacket (router_032_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_032_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_029_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket)                             //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (clk_50_clk_clk),                               //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_src_valid),                            //          .valid
		.src_data             (rsp_mux_src_data),                             //          .data
		.src_channel          (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (crosser_012_out_ready),                        //     sink0.ready
		.sink0_valid          (crosser_012_out_valid),                        //          .valid
		.sink0_channel        (crosser_012_out_channel),                      //          .channel
		.sink0_data           (crosser_012_out_data),                         //          .data
		.sink0_startofpacket  (crosser_012_out_startofpacket),                //          .startofpacket
		.sink0_endofpacket    (crosser_012_out_endofpacket),                  //          .endofpacket
		.sink1_ready          (crosser_014_out_ready),                        //     sink1.ready
		.sink1_valid          (crosser_014_out_valid),                        //          .valid
		.sink1_channel        (crosser_014_out_channel),                      //          .channel
		.sink1_data           (crosser_014_out_data),                         //          .data
		.sink1_startofpacket  (crosser_014_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket    (crosser_014_out_endofpacket),                  //          .endofpacket
		.sink2_ready          (crosser_016_out_ready),                        //     sink2.ready
		.sink2_valid          (crosser_016_out_valid),                        //          .valid
		.sink2_channel        (crosser_016_out_channel),                      //          .channel
		.sink2_data           (crosser_016_out_data),                         //          .data
		.sink2_startofpacket  (crosser_016_out_startofpacket),                //          .startofpacket
		.sink2_endofpacket    (crosser_016_out_endofpacket),                  //          .endofpacket
		.sink3_ready          (crosser_018_out_ready),                        //     sink3.ready
		.sink3_valid          (crosser_018_out_valid),                        //          .valid
		.sink3_channel        (crosser_018_out_channel),                      //          .channel
		.sink3_data           (crosser_018_out_data),                         //          .data
		.sink3_startofpacket  (crosser_018_out_startofpacket),                //          .startofpacket
		.sink3_endofpacket    (crosser_018_out_endofpacket),                  //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                     //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                     //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                   //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                      //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.sink7_ready          (crosser_020_out_ready),                        //     sink7.ready
		.sink7_valid          (crosser_020_out_valid),                        //          .valid
		.sink7_channel        (crosser_020_out_channel),                      //          .channel
		.sink7_data           (crosser_020_out_data),                         //          .data
		.sink7_startofpacket  (crosser_020_out_startofpacket),                //          .startofpacket
		.sink7_endofpacket    (crosser_020_out_endofpacket),                  //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                     //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                     //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                   //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                      //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                     //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                      //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                     //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                      //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                     //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                      //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                     //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                     //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                   //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                      //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),             //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),               //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                     //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                      //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket)                //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_50_clk_clk),                                //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                         //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                         //          .valid
		.src_data             (rsp_mux_001_src_data),                          //          .data
		.src_channel          (rsp_mux_001_src_channel),                       //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready          (crosser_013_out_ready),                         //     sink0.ready
		.sink0_valid          (crosser_013_out_valid),                         //          .valid
		.sink0_channel        (crosser_013_out_channel),                       //          .channel
		.sink0_data           (crosser_013_out_data),                          //          .data
		.sink0_startofpacket  (crosser_013_out_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (crosser_013_out_endofpacket),                   //          .endofpacket
		.sink1_ready          (crosser_015_out_ready),                         //     sink1.ready
		.sink1_valid          (crosser_015_out_valid),                         //          .valid
		.sink1_channel        (crosser_015_out_channel),                       //          .channel
		.sink1_data           (crosser_015_out_data),                          //          .data
		.sink1_startofpacket  (crosser_015_out_startofpacket),                 //          .startofpacket
		.sink1_endofpacket    (crosser_015_out_endofpacket),                   //          .endofpacket
		.sink2_ready          (crosser_017_out_ready),                         //     sink2.ready
		.sink2_valid          (crosser_017_out_valid),                         //          .valid
		.sink2_channel        (crosser_017_out_channel),                       //          .channel
		.sink2_data           (crosser_017_out_data),                          //          .data
		.sink2_startofpacket  (crosser_017_out_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (crosser_017_out_endofpacket),                   //          .endofpacket
		.sink3_ready          (crosser_019_out_ready),                         //     sink3.ready
		.sink3_valid          (crosser_019_out_valid),                         //          .valid
		.sink3_channel        (crosser_019_out_channel),                       //          .channel
		.sink3_data           (crosser_019_out_data),                          //          .data
		.sink3_startofpacket  (crosser_019_out_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (crosser_019_out_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                      //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                      //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                    //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                       //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),              //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                      //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                      //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                    //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                       //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),              //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                      //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                      //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                    //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                       //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),              //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                //          .endofpacket
		.sink7_ready          (crosser_021_out_ready),                         //     sink7.ready
		.sink7_valid          (crosser_021_out_valid),                         //          .valid
		.sink7_channel        (crosser_021_out_channel),                       //          .channel
		.sink7_data           (crosser_021_out_data),                          //          .data
		.sink7_startofpacket  (crosser_021_out_startofpacket),                 //          .startofpacket
		.sink7_endofpacket    (crosser_021_out_endofpacket),                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                      //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                      //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                    //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                       //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                //          .endofpacket
		.sink9_ready          (rsp_demux_012_src1_ready),                      //     sink9.ready
		.sink9_valid          (rsp_demux_012_src1_valid),                      //          .valid
		.sink9_channel        (rsp_demux_012_src1_channel),                    //          .channel
		.sink9_data           (rsp_demux_012_src1_data),                       //          .data
		.sink9_startofpacket  (rsp_demux_012_src1_startofpacket),              //          .startofpacket
		.sink9_endofpacket    (rsp_demux_012_src1_endofpacket),                //          .endofpacket
		.sink10_ready         (rsp_demux_013_src1_ready),                      //    sink10.ready
		.sink10_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.sink10_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.sink10_data          (rsp_demux_013_src1_data),                       //          .data
		.sink10_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.sink10_endofpacket   (rsp_demux_013_src1_endofpacket),                //          .endofpacket
		.sink11_ready         (rsp_demux_014_src1_ready),                      //    sink11.ready
		.sink11_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.sink11_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.sink11_data          (rsp_demux_014_src1_data),                       //          .data
		.sink11_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.sink11_endofpacket   (rsp_demux_014_src1_endofpacket),                //          .endofpacket
		.sink12_ready         (rsp_demux_015_src0_ready),                      //    sink12.ready
		.sink12_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.sink12_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.sink12_data          (rsp_demux_015_src0_data),                       //          .data
		.sink12_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.sink12_endofpacket   (rsp_demux_015_src0_endofpacket),                //          .endofpacket
		.sink13_ready         (rsp_demux_016_src0_ready),                      //    sink13.ready
		.sink13_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.sink13_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.sink13_data          (rsp_demux_016_src0_data),                       //          .data
		.sink13_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.sink13_endofpacket   (rsp_demux_016_src0_endofpacket),                //          .endofpacket
		.sink14_ready         (crosser_022_out_ready),                         //    sink14.ready
		.sink14_valid         (crosser_022_out_valid),                         //          .valid
		.sink14_channel       (crosser_022_out_channel),                       //          .channel
		.sink14_data          (crosser_022_out_data),                          //          .data
		.sink14_startofpacket (crosser_022_out_startofpacket),                 //          .startofpacket
		.sink14_endofpacket   (crosser_022_out_endofpacket),                   //          .endofpacket
		.sink15_ready         (rsp_demux_018_src0_ready),                      //    sink15.ready
		.sink15_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.sink15_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.sink15_data          (rsp_demux_018_src0_data),                       //          .data
		.sink15_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.sink15_endofpacket   (rsp_demux_018_src0_endofpacket),                //          .endofpacket
		.sink16_ready         (rsp_demux_019_src0_ready),                      //    sink16.ready
		.sink16_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.sink16_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.sink16_data          (rsp_demux_019_src0_data),                       //          .data
		.sink16_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.sink16_endofpacket   (rsp_demux_019_src0_endofpacket),                //          .endofpacket
		.sink17_ready         (rsp_demux_020_src0_ready),                      //    sink17.ready
		.sink17_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.sink17_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.sink17_data          (rsp_demux_020_src0_data),                       //          .data
		.sink17_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.sink17_endofpacket   (rsp_demux_020_src0_endofpacket),                //          .endofpacket
		.sink18_ready         (rsp_demux_021_src0_ready),                      //    sink18.ready
		.sink18_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.sink18_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.sink18_data          (rsp_demux_021_src0_data),                       //          .data
		.sink18_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.sink18_endofpacket   (rsp_demux_021_src0_endofpacket),                //          .endofpacket
		.sink19_ready         (rsp_demux_022_src0_ready),                      //    sink19.ready
		.sink19_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.sink19_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.sink19_data          (rsp_demux_022_src0_data),                       //          .data
		.sink19_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.sink19_endofpacket   (rsp_demux_022_src0_endofpacket),                //          .endofpacket
		.sink20_ready         (rsp_demux_023_src0_ready),                      //    sink20.ready
		.sink20_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.sink20_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.sink20_data          (rsp_demux_023_src0_data),                       //          .data
		.sink20_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.sink20_endofpacket   (rsp_demux_023_src0_endofpacket),                //          .endofpacket
		.sink21_ready         (rsp_demux_024_src0_ready),                      //    sink21.ready
		.sink21_valid         (rsp_demux_024_src0_valid),                      //          .valid
		.sink21_channel       (rsp_demux_024_src0_channel),                    //          .channel
		.sink21_data          (rsp_demux_024_src0_data),                       //          .data
		.sink21_startofpacket (rsp_demux_024_src0_startofpacket),              //          .startofpacket
		.sink21_endofpacket   (rsp_demux_024_src0_endofpacket),                //          .endofpacket
		.sink22_ready         (rsp_demux_025_src0_ready),                      //    sink22.ready
		.sink22_valid         (rsp_demux_025_src0_valid),                      //          .valid
		.sink22_channel       (rsp_demux_025_src0_channel),                    //          .channel
		.sink22_data          (rsp_demux_025_src0_data),                       //          .data
		.sink22_startofpacket (rsp_demux_025_src0_startofpacket),              //          .startofpacket
		.sink22_endofpacket   (rsp_demux_025_src0_endofpacket),                //          .endofpacket
		.sink23_ready         (rsp_demux_026_src0_ready),                      //    sink23.ready
		.sink23_valid         (rsp_demux_026_src0_valid),                      //          .valid
		.sink23_channel       (rsp_demux_026_src0_channel),                    //          .channel
		.sink23_data          (rsp_demux_026_src0_data),                       //          .data
		.sink23_startofpacket (rsp_demux_026_src0_startofpacket),              //          .startofpacket
		.sink23_endofpacket   (rsp_demux_026_src0_endofpacket),                //          .endofpacket
		.sink24_ready         (rsp_demux_027_src0_ready),                      //    sink24.ready
		.sink24_valid         (rsp_demux_027_src0_valid),                      //          .valid
		.sink24_channel       (rsp_demux_027_src0_channel),                    //          .channel
		.sink24_data          (rsp_demux_027_src0_data),                       //          .data
		.sink24_startofpacket (rsp_demux_027_src0_startofpacket),              //          .startofpacket
		.sink24_endofpacket   (rsp_demux_027_src0_endofpacket),                //          .endofpacket
		.sink25_ready         (rsp_demux_028_src0_ready),                      //    sink25.ready
		.sink25_valid         (rsp_demux_028_src0_valid),                      //          .valid
		.sink25_channel       (rsp_demux_028_src0_channel),                    //          .channel
		.sink25_data          (rsp_demux_028_src0_data),                       //          .data
		.sink25_startofpacket (rsp_demux_028_src0_startofpacket),              //          .startofpacket
		.sink25_endofpacket   (rsp_demux_028_src0_endofpacket),                //          .endofpacket
		.sink26_ready         (crosser_023_out_ready),                         //    sink26.ready
		.sink26_valid         (crosser_023_out_valid),                         //          .valid
		.sink26_channel       (crosser_023_out_channel),                       //          .channel
		.sink26_data          (crosser_023_out_data),                          //          .data
		.sink26_startofpacket (crosser_023_out_startofpacket),                 //          .startofpacket
		.sink26_endofpacket   (crosser_023_out_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                        //          .valid
		.src_data            (rsp_mux_002_src_data),                         //          .data
		.src_channel         (rsp_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_009_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_009_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_009_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_009_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_009_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_009_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_010_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_010_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_010_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_010_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_010_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_010_src1_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (54),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (61),
		.IN_PKT_TRANS_COMPRESSED_READ  (55),
		.IN_PKT_TRANS_WRITE            (57),
		.IN_PKT_BURSTWRAP_H            (67),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (70),
		.IN_PKT_BURST_SIZE_L           (68),
		.IN_PKT_RESPONSE_STATUS_H      (96),
		.IN_PKT_RESPONSE_STATUS_L      (95),
		.IN_PKT_TRANS_EXCLUSIVE        (60),
		.IN_PKT_BURST_TYPE_H           (72),
		.IN_PKT_BURST_TYPE_L           (71),
		.IN_PKT_ORI_BURST_SIZE_L       (97),
		.IN_PKT_ORI_BURST_SIZE_H       (99),
		.IN_ST_DATA_W                  (100),
		.OUT_PKT_ADDR_H                (90),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (100),
		.OUT_PKT_BYTE_CNT_L            (97),
		.OUT_PKT_TRANS_COMPRESSED_READ (91),
		.OUT_PKT_BURST_SIZE_H          (106),
		.OUT_PKT_BURST_SIZE_L          (104),
		.OUT_PKT_RESPONSE_STATUS_H     (132),
		.OUT_PKT_RESPONSE_STATUS_L     (131),
		.OUT_PKT_TRANS_EXCLUSIVE       (96),
		.OUT_PKT_BURST_TYPE_H          (108),
		.OUT_PKT_BURST_TYPE_L          (107),
		.OUT_PKT_ORI_BURST_SIZE_L      (133),
		.OUT_PKT_ORI_BURST_SIZE_H      (135),
		.OUT_ST_DATA_W                 (136),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_s1_cmd_width_adapter (
		.clk                  (clk_50_clk_clk),                                        //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                                 //          .ready
		.in_data              (cmd_mux_010_src_data),                                  //          .data
		.out_endofpacket      (onchip_memory2_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (90),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (100),
		.IN_PKT_BYTE_CNT_L             (97),
		.IN_PKT_TRANS_COMPRESSED_READ  (91),
		.IN_PKT_TRANS_WRITE            (93),
		.IN_PKT_BURSTWRAP_H            (103),
		.IN_PKT_BURSTWRAP_L            (101),
		.IN_PKT_BURST_SIZE_H           (106),
		.IN_PKT_BURST_SIZE_L           (104),
		.IN_PKT_RESPONSE_STATUS_H      (132),
		.IN_PKT_RESPONSE_STATUS_L      (131),
		.IN_PKT_TRANS_EXCLUSIVE        (96),
		.IN_PKT_BURST_TYPE_H           (108),
		.IN_PKT_BURST_TYPE_L           (107),
		.IN_PKT_ORI_BURST_SIZE_L       (133),
		.IN_PKT_ORI_BURST_SIZE_H       (135),
		.IN_ST_DATA_W                  (136),
		.OUT_PKT_ADDR_H                (54),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (61),
		.OUT_PKT_TRANS_COMPRESSED_READ (55),
		.OUT_PKT_BURST_SIZE_H          (70),
		.OUT_PKT_BURST_SIZE_L          (68),
		.OUT_PKT_RESPONSE_STATUS_H     (96),
		.OUT_PKT_RESPONSE_STATUS_L     (95),
		.OUT_PKT_TRANS_EXCLUSIVE       (60),
		.OUT_PKT_BURST_TYPE_H          (72),
		.OUT_PKT_BURST_TYPE_L          (71),
		.OUT_PKT_ORI_BURST_SIZE_L      (97),
		.OUT_PKT_ORI_BURST_SIZE_H      (99),
		.OUT_ST_DATA_W                 (100),
		.ST_CHANNEL_W                  (30),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_s1_rsp_width_adapter (
		.clk                  (clk_50_clk_clk),                                        //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_013_src_valid),                                  //      sink.valid
		.in_channel           (router_013_src_channel),                                //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_013_src_ready),                                  //          .ready
		.in_data              (router_013_src_data),                                   //          .data
		.out_endofpacket      (onchip_memory2_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                    //              .channel
		.in_data           (cmd_demux_src0_data),                                       //              .data
		.out_ready         (crosser_out_ready),                                         //           out.ready
		.out_valid         (crosser_out_valid),                                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_out_channel),                                       //              .channel
		.out_data          (crosser_out_data),                                          //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                    //              .channel
		.in_data           (cmd_demux_src1_data),                                       //              .data
		.out_ready         (crosser_001_out_ready),                                     //           out.ready
		.out_valid         (crosser_001_out_valid),                                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //              .channel
		.out_data          (crosser_001_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                    //              .channel
		.in_data           (cmd_demux_src2_data),                                       //              .data
		.out_ready         (crosser_002_out_ready),                                     //           out.ready
		.out_valid         (crosser_002_out_valid),                                     //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                   //              .channel
		.out_data          (crosser_002_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                    //              .channel
		.in_data           (cmd_demux_src3_data),                                       //              .data
		.out_ready         (crosser_003_out_ready),                                     //           out.ready
		.out_valid         (crosser_003_out_valid),                                     //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                   //              .channel
		.out_data          (crosser_003_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),              //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                                    //              .channel
		.in_data           (cmd_demux_src7_data),                                       //              .data
		.out_ready         (crosser_004_out_ready),                                     //           out.ready
		.out_valid         (crosser_004_out_valid),                                     //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                   //              .channel
		.out_data          (crosser_004_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                //              .channel
		.in_data           (cmd_demux_001_src0_data),                                   //              .data
		.out_ready         (crosser_005_out_ready),                                     //           out.ready
		.out_valid         (crosser_005_out_valid),                                     //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                   //              .channel
		.out_data          (crosser_005_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                //              .channel
		.in_data           (cmd_demux_001_src1_data),                                   //              .data
		.out_ready         (crosser_006_out_ready),                                     //           out.ready
		.out_valid         (crosser_006_out_valid),                                     //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                   //              .channel
		.out_data          (crosser_006_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                //              .channel
		.in_data           (cmd_demux_001_src2_data),                                   //              .data
		.out_ready         (crosser_007_out_ready),                                     //           out.ready
		.out_valid         (crosser_007_out_valid),                                     //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                   //              .channel
		.out_data          (crosser_007_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                //              .channel
		.in_data           (cmd_demux_001_src3_data),                                   //              .data
		.out_ready         (crosser_008_out_ready),                                     //           out.ready
		.out_valid         (crosser_008_out_valid),                                     //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                   //              .channel
		.out_data          (crosser_008_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src7_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src7_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src7_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src7_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src7_channel),                                //              .channel
		.in_data           (cmd_demux_001_src7_data),                                   //              .data
		.out_ready         (crosser_009_out_ready),                                     //           out.ready
		.out_valid         (crosser_009_out_valid),                                     //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                   //              .channel
		.out_data          (crosser_009_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src14_ready),                                 //            in.ready
		.in_valid          (cmd_demux_001_src14_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_001_src14_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src14_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_001_src14_channel),                               //              .channel
		.in_data           (cmd_demux_001_src14_data),                                  //              .data
		.out_ready         (crosser_010_out_ready),                                     //           out.ready
		.out_valid         (crosser_010_out_valid),                                     //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                   //              .channel
		.out_data          (crosser_010_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_50_clk_clk),                                            //        in_clk.clk
		.in_reset          (mm_bridge_0_reset_reset_bridge_in_reset_reset),             //  in_clk_reset.reset
		.out_clk           (vga_stream_out_clk_clk),                                    //       out_clk.clk
		.out_reset         (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src26_ready),                                 //            in.ready
		.in_valid          (cmd_demux_001_src26_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_001_src26_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src26_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_001_src26_channel),                               //              .channel
		.in_data           (cmd_demux_001_src26_data),                                  //              .data
		.out_ready         (crosser_011_out_ready),                                     //           out.ready
		.out_valid         (crosser_011_out_valid),                                     //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                   //              .channel
		.out_data          (crosser_011_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                    //              .channel
		.in_data           (rsp_demux_src0_data),                                       //              .data
		.out_ready         (crosser_012_out_ready),                                     //           out.ready
		.out_valid         (crosser_012_out_valid),                                     //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                   //              .channel
		.out_data          (crosser_012_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                    //              .channel
		.in_data           (rsp_demux_src1_data),                                       //              .data
		.out_ready         (crosser_013_out_ready),                                     //           out.ready
		.out_valid         (crosser_013_out_valid),                                     //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                   //              .channel
		.out_data          (crosser_013_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                //              .channel
		.in_data           (rsp_demux_001_src0_data),                                   //              .data
		.out_ready         (crosser_014_out_ready),                                     //           out.ready
		.out_valid         (crosser_014_out_valid),                                     //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                   //              .channel
		.out_data          (crosser_014_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                  //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                //              .channel
		.in_data           (rsp_demux_001_src1_data),                                   //              .data
		.out_ready         (crosser_015_out_ready),                                     //           out.ready
		.out_valid         (crosser_015_out_valid),                                     //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                   //              .channel
		.out_data          (crosser_015_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                //              .channel
		.in_data           (rsp_demux_002_src0_data),                                   //              .data
		.out_ready         (crosser_016_out_ready),                                     //           out.ready
		.out_valid         (crosser_016_out_valid),                                     //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                   //              .channel
		.out_data          (crosser_016_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                                  //            in.ready
		.in_valid          (rsp_demux_002_src1_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_002_src1_channel),                                //              .channel
		.in_data           (rsp_demux_002_src1_data),                                   //              .data
		.out_ready         (crosser_017_out_ready),                                     //           out.ready
		.out_valid         (crosser_017_out_valid),                                     //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                   //              .channel
		.out_data          (crosser_017_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                //              .channel
		.in_data           (rsp_demux_003_src0_data),                                   //              .data
		.out_ready         (crosser_018_out_ready),                                     //           out.ready
		.out_valid         (crosser_018_out_valid),                                     //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                   //              .channel
		.out_data          (crosser_018_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                  //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                //              .channel
		.in_data           (rsp_demux_003_src1_data),                                   //              .data
		.out_ready         (crosser_019_out_ready),                                     //           out.ready
		.out_valid         (crosser_019_out_valid),                                     //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                   //              .channel
		.out_data          (crosser_019_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),              // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                                //              .channel
		.in_data           (rsp_demux_007_src0_data),                                   //              .data
		.out_ready         (crosser_020_out_ready),                                     //           out.ready
		.out_valid         (crosser_020_out_valid),                                     //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                   //              .channel
		.out_data          (crosser_020_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src1_ready),                                  //            in.ready
		.in_valid          (rsp_demux_007_src1_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_007_src1_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src1_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_007_src1_channel),                                //              .channel
		.in_data           (rsp_demux_007_src1_data),                                   //              .data
		.out_ready         (crosser_021_out_ready),                                     //           out.ready
		.out_valid         (crosser_021_out_valid),                                     //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_021_out_channel),                                   //              .channel
		.out_data          (crosser_021_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                                //              .channel
		.in_data           (rsp_demux_017_src0_data),                                   //              .data
		.out_ready         (crosser_022_out_ready),                                     //           out.ready
		.out_valid         (crosser_022_out_valid),                                     //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                   //              .channel
		.out_data          (crosser_022_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (100),
		.BITS_PER_SYMBOL     (100),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (30),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (vga_stream_out_clk_clk),                                    //        in_clk.clk
		.in_reset          (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                            //       out_clk.clk
		.out_reset         (mm_bridge_0_reset_reset_bridge_in_reset_reset),             // out_clk_reset.reset
		.in_ready          (rsp_demux_029_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_029_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_029_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_029_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_029_src0_channel),                                //              .channel
		.in_data           (rsp_demux_029_src0_data),                                   //              .data
		.out_ready         (crosser_023_out_ready),                                     //           out.ready
		.out_valid         (crosser_023_out_valid),                                     //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                   //              .channel
		.out_data          (crosser_023_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tv_decoder_alt_vip_cl_cvi_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                   //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tv_decoder_alt_vip_cl_scl_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tv_decoder_alt_vip_cl_scl_1_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tv_decoder_alt_vip_cl_swi_0_control_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_50_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                       //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_50_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                             //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                               //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (alt_vip_cl_mixer_0_control_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                          //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_50_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                      //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter_010 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (onchip_memory2_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (onchip_memory2_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (camera_pwdn_n_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (camera_pwdn_n_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (camera_pwdn_n_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mipi_reset_n_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (mipi_reset_n_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (mipi_reset_n_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (alt_vip_vfr_vga_avalon_slave_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                          //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ir_rx_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (ir_rx_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (ir_rx_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_50_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (ts_i2c_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                 //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_opencores_light_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ts_interrupt_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (ts_interrupt_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (ts_interrupt_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mpu_int_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (mpu_int_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (mpu_int_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (light_int_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (light_int_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (light_int_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (seg7_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (seg7_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (seg7_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_50_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (spi_spi_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (spi_spi_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (spi_spi_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (spi_mpu_spi_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (spi_mpu_spi_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (spi_mpu_spi_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (vga_stream_out_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (alt_vip_cl_mixer_0_main_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (tv_decoder_stream_capture_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                                  //         .error
	);

endmodule
