
GUI_APP.elf:     file format elf32-littlenios2
GUI_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000f2ffc memsz 0x000f315c flags rwx
    LOAD off    0x000f5000 vaddr 0x09001000 paddr 0x09001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  09001000  09001000  000f5000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f110  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00066394  0401f354  0401f354  00020354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0006d934  040856e8  040856e8  000866e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  040f301c  040f301c  000f401c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040f317c  040f317c  000f5000  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  09001020  09001020  000f5000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000f5000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000014f0  00000000  00000000  000f5028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00031d6e  00000000  00000000  000f6518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c6bf  00000000  00000000  00128286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010643  00000000  00000000  00134945  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003e74  00000000  00000000  00144f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007954  00000000  00000000  00148dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001ff40  00000000  00000000  00150750  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  00170690  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000020a0  00000000  00000000  001706e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00179c9e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  00179ca1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00179cab  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00179cac  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00179cad  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00179cb1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00179cb5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00179cb9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00179cc2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00179ccb  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  00179cd4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004a  00000000  00000000  00179cd8  2**0
                  CONTENTS, READONLY
 30 .jdi          00003b3c  00000000  00000000  00179d22  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000af7c4  00000000  00000000  0017d85e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09001000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401f354 l    d  .rodata	00000000 .rodata
040856e8 l    d  .rwdata	00000000 .rwdata
040f301c l    d  .bss	00000000 .bss
040f317c l    d  .sdram	00000000 .sdram
09001020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../GUI_APP_bsp//obj/HAL/src/crt0.o
04000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 tahomabold_20.cpp
04063c44 l     O .rodata	000000b6 _ZL16tahomabold_20_33
04063cfa l     O .rodata	00000104 _ZL16tahomabold_20_34
04063dfe l     O .rodata	000001a0 _ZL16tahomabold_20_35
04063f9e l     O .rodata	00000152 _ZL16tahomabold_20_36
040640f0 l     O .rodata	00000270 _ZL16tahomabold_20_37
04064360 l     O .rodata	000001ba _ZL16tahomabold_20_38
0406451a l     O .rodata	0000009c _ZL16tahomabold_20_39
040645b6 l     O .rodata	000000ea _ZL16tahomabold_20_40
040646a0 l     O .rodata	000000ea _ZL16tahomabold_20_41
0406478a l     O .rodata	00000152 _ZL16tahomabold_20_42
040648dc l     O .rodata	000001a0 _ZL16tahomabold_20_43
04064a7c l     O .rodata	0000009c _ZL16tahomabold_20_44
04064b18 l     O .rodata	000000ea _ZL16tahomabold_20_45
04064c02 l     O .rodata	0000009c _ZL16tahomabold_20_46
04064c9e l     O .rodata	00000138 _ZL16tahomabold_20_47
04064dd6 l     O .rodata	00000152 _ZL16tahomabold_20_48
04064f28 l     O .rodata	00000152 _ZL16tahomabold_20_49
0406507a l     O .rodata	00000152 _ZL16tahomabold_20_50
040651cc l     O .rodata	00000152 _ZL16tahomabold_20_51
0406531e l     O .rodata	00000152 _ZL16tahomabold_20_52
04065470 l     O .rodata	00000152 _ZL16tahomabold_20_53
040655c2 l     O .rodata	00000152 _ZL16tahomabold_20_54
04065714 l     O .rodata	00000152 _ZL16tahomabold_20_55
04065866 l     O .rodata	00000152 _ZL16tahomabold_20_56
040659b8 l     O .rodata	00000152 _ZL16tahomabold_20_57
04065b0a l     O .rodata	000000b6 _ZL16tahomabold_20_58
04065bc0 l     O .rodata	000000b6 _ZL16tahomabold_20_59
04065c76 l     O .rodata	000001a0 _ZL16tahomabold_20_60
04065e16 l     O .rodata	000001a0 _ZL16tahomabold_20_61
04065fb6 l     O .rodata	000001a0 _ZL16tahomabold_20_62
04066156 l     O .rodata	0000011e _ZL16tahomabold_20_63
04066274 l     O .rodata	000001d4 _ZL16tahomabold_20_64
04066448 l     O .rodata	0000016c _ZL16tahomabold_20_65
040665b4 l     O .rodata	0000016c _ZL16tahomabold_20_66
04066720 l     O .rodata	00000152 _ZL16tahomabold_20_67
04066872 l     O .rodata	00000186 _ZL16tahomabold_20_68
040669f8 l     O .rodata	00000138 _ZL16tahomabold_20_69
04066b30 l     O .rodata	00000138 _ZL16tahomabold_20_70
04066c68 l     O .rodata	00000186 _ZL16tahomabold_20_71
04066dee l     O .rodata	00000186 _ZL16tahomabold_20_72
04066f74 l     O .rodata	00000104 _ZL16tahomabold_20_73
04067078 l     O .rodata	00000104 _ZL16tahomabold_20_74
0406717c l     O .rodata	0000016c _ZL16tahomabold_20_75
040672e8 l     O .rodata	0000011e _ZL16tahomabold_20_76
04067406 l     O .rodata	000001d4 _ZL16tahomabold_20_77
040675da l     O .rodata	00000186 _ZL16tahomabold_20_78
04067760 l     O .rodata	00000186 _ZL16tahomabold_20_79
040678e6 l     O .rodata	00000152 _ZL16tahomabold_20_80
04067a38 l     O .rodata	00000186 _ZL16tahomabold_20_81
04067bbe l     O .rodata	00000186 _ZL16tahomabold_20_82
04067d44 l     O .rodata	00000152 _ZL16tahomabold_20_83
04067e96 l     O .rodata	00000138 _ZL16tahomabold_20_84
04067fce l     O .rodata	00000186 _ZL16tahomabold_20_85
04068154 l     O .rodata	0000016c _ZL16tahomabold_20_86
040682c0 l     O .rodata	00000222 _ZL16tahomabold_20_87
040684e2 l     O .rodata	0000016c _ZL16tahomabold_20_88
0406864e l     O .rodata	0000016c _ZL16tahomabold_20_89
040687ba l     O .rodata	00000138 _ZL16tahomabold_20_90
040688f2 l     O .rodata	000000ea _ZL16tahomabold_20_91
040689dc l     O .rodata	00000138 _ZL16tahomabold_20_92
04068b14 l     O .rodata	000000ea _ZL16tahomabold_20_93
04068bfe l     O .rodata	000001a0 _ZL16tahomabold_20_94
04068d9e l     O .rodata	00000152 _ZL16tahomabold_20_95
04068ef0 l     O .rodata	0000011e _ZL16tahomabold_20_96
0406900e l     O .rodata	00000138 _ZL16tahomabold_20_97
04069146 l     O .rodata	00000152 _ZL16tahomabold_20_98
04069298 l     O .rodata	0000011e _ZL16tahomabold_20_99
040693b6 l     O .rodata	00000152 _ZL17tahomabold_20_100
04069508 l     O .rodata	00000138 _ZL17tahomabold_20_101
04069640 l     O .rodata	000000d0 _ZL17tahomabold_20_102
04069710 l     O .rodata	00000152 _ZL17tahomabold_20_103
04069862 l     O .rodata	00000152 _ZL17tahomabold_20_104
040699b4 l     O .rodata	0000009c _ZL17tahomabold_20_105
04069a50 l     O .rodata	000000ea _ZL17tahomabold_20_106
04069b3a l     O .rodata	00000138 _ZL17tahomabold_20_107
04069c72 l     O .rodata	0000009c _ZL17tahomabold_20_108
04069d0e l     O .rodata	000001ee _ZL17tahomabold_20_109
04069efc l     O .rodata	00000152 _ZL17tahomabold_20_110
0406a04e l     O .rodata	00000138 _ZL17tahomabold_20_111
0406a186 l     O .rodata	00000152 _ZL17tahomabold_20_112
0406a2d8 l     O .rodata	00000152 _ZL17tahomabold_20_113
0406a42a l     O .rodata	000000ea _ZL17tahomabold_20_114
0406a514 l     O .rodata	00000104 _ZL17tahomabold_20_115
0406a618 l     O .rodata	000000d0 _ZL17tahomabold_20_116
0406a6e8 l     O .rodata	00000152 _ZL17tahomabold_20_117
0406a83a l     O .rodata	00000138 _ZL17tahomabold_20_118
0406a972 l     O .rodata	000001d4 _ZL17tahomabold_20_119
0406ab46 l     O .rodata	00000138 _ZL17tahomabold_20_120
0406ac7e l     O .rodata	00000138 _ZL17tahomabold_20_121
0406adb6 l     O .rodata	0000011e _ZL17tahomabold_20_122
0406aed4 l     O .rodata	00000138 _ZL17tahomabold_20_123
0406b00c l     O .rodata	00000152 _ZL17tahomabold_20_124
0406b15e l     O .rodata	00000138 _ZL17tahomabold_20_125
0406b296 l     O .rodata	000001a0 _ZL17tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.cpp
0406b436 l     O .rodata	000001b8 _ZL16tahomabold_32_33
0406b5ee l     O .rodata	00000280 _ZL16tahomabold_32_34
0406b86e l     O .rodata	00000410 _ZL16tahomabold_32_35
0406bc7e l     O .rodata	00000320 _ZL16tahomabold_32_36
0406bf9e l     O .rodata	000005f0 _ZL16tahomabold_32_37
0406c58e l     O .rodata	00000410 _ZL16tahomabold_32_38
0406c99e l     O .rodata	00000168 _ZL16tahomabold_32_39
0406cb06 l     O .rodata	00000258 _ZL16tahomabold_32_40
0406cd5e l     O .rodata	00000258 _ZL16tahomabold_32_41
0406cfb6 l     O .rodata	00000320 _ZL16tahomabold_32_42
0406d2d6 l     O .rodata	00000410 _ZL16tahomabold_32_43
0406d6e6 l     O .rodata	00000190 _ZL16tahomabold_32_44
0406d876 l     O .rodata	00000230 _ZL16tahomabold_32_45
0406daa6 l     O .rodata	00000190 _ZL16tahomabold_32_46
0406dc36 l     O .rodata	000002d0 _ZL16tahomabold_32_47
0406df06 l     O .rodata	00000320 _ZL16tahomabold_32_48
0406e226 l     O .rodata	00000320 _ZL16tahomabold_32_49
0406e546 l     O .rodata	00000320 _ZL16tahomabold_32_50
0406e866 l     O .rodata	00000320 _ZL16tahomabold_32_51
0406eb86 l     O .rodata	00000320 _ZL16tahomabold_32_52
0406eea6 l     O .rodata	00000320 _ZL16tahomabold_32_53
0406f1c6 l     O .rodata	00000320 _ZL16tahomabold_32_54
0406f4e6 l     O .rodata	00000320 _ZL16tahomabold_32_55
0406f806 l     O .rodata	00000320 _ZL16tahomabold_32_56
0406fb26 l     O .rodata	00000320 _ZL16tahomabold_32_57
0406fe46 l     O .rodata	000001e0 _ZL16tahomabold_32_58
04070026 l     O .rodata	000001e0 _ZL16tahomabold_32_59
04070206 l     O .rodata	00000410 _ZL16tahomabold_32_60
04070616 l     O .rodata	00000410 _ZL16tahomabold_32_61
04070a26 l     O .rodata	00000410 _ZL16tahomabold_32_62
04070e36 l     O .rodata	000002d0 _ZL16tahomabold_32_63
04071106 l     O .rodata	00000488 _ZL16tahomabold_32_64
0407158e l     O .rodata	00000370 _ZL16tahomabold_32_65
040718fe l     O .rodata	00000370 _ZL16tahomabold_32_66
04071c6e l     O .rodata	00000348 _ZL16tahomabold_32_67
04071fb6 l     O .rodata	000003c0 _ZL16tahomabold_32_68
04072376 l     O .rodata	00000320 _ZL16tahomabold_32_69
04072696 l     O .rodata	000002f8 _ZL16tahomabold_32_70
0407298e l     O .rodata	000003c0 _ZL16tahomabold_32_71
04072d4e l     O .rodata	000003c0 _ZL16tahomabold_32_72
0407310e l     O .rodata	00000258 _ZL16tahomabold_32_73
04073366 l     O .rodata	00000280 _ZL16tahomabold_32_74
040735e6 l     O .rodata	00000398 _ZL16tahomabold_32_75
0407397e l     O .rodata	000002d0 _ZL16tahomabold_32_76
04073c4e l     O .rodata	00000488 _ZL16tahomabold_32_77
040740d6 l     O .rodata	000003e8 _ZL16tahomabold_32_78
040744be l     O .rodata	000003e8 _ZL16tahomabold_32_79
040748a6 l     O .rodata	00000348 _ZL16tahomabold_32_80
04074bee l     O .rodata	000003e8 _ZL16tahomabold_32_81
04074fd6 l     O .rodata	000003c0 _ZL16tahomabold_32_82
04075396 l     O .rodata	00000320 _ZL16tahomabold_32_83
040756b6 l     O .rodata	00000320 _ZL16tahomabold_32_84
040759d6 l     O .rodata	000003c0 _ZL16tahomabold_32_85
04075d96 l     O .rodata	00000370 _ZL16tahomabold_32_86
04076106 l     O .rodata	00000528 _ZL16tahomabold_32_87
0407662e l     O .rodata	00000370 _ZL16tahomabold_32_88
0407699e l     O .rodata	00000370 _ZL16tahomabold_32_89
04076d0e l     O .rodata	00000320 _ZL16tahomabold_32_90
0407702e l     O .rodata	00000258 _ZL16tahomabold_32_91
04077286 l     O .rodata	000002d0 _ZL16tahomabold_32_92
04077556 l     O .rodata	00000258 _ZL16tahomabold_32_93
040777ae l     O .rodata	00000410 _ZL16tahomabold_32_94
04077bbe l     O .rodata	00000320 _ZL16tahomabold_32_95
04077ede l     O .rodata	000002a8 _ZL16tahomabold_32_96
04078186 l     O .rodata	000002f8 _ZL16tahomabold_32_97
0407847e l     O .rodata	00000320 _ZL16tahomabold_32_98
0407879e l     O .rodata	000002a8 _ZL16tahomabold_32_99
04078a46 l     O .rodata	00000320 _ZL17tahomabold_32_100
04078d66 l     O .rodata	000002f8 _ZL17tahomabold_32_101
0407905e l     O .rodata	00000230 _ZL17tahomabold_32_102
0407928e l     O .rodata	00000320 _ZL17tahomabold_32_103
040795ae l     O .rodata	00000320 _ZL17tahomabold_32_104
040798ce l     O .rodata	00000190 _ZL17tahomabold_32_105
04079a5e l     O .rodata	00000208 _ZL17tahomabold_32_106
04079c66 l     O .rodata	000002f8 _ZL17tahomabold_32_107
04079f5e l     O .rodata	00000190 _ZL17tahomabold_32_108
0407a0ee l     O .rodata	000004d8 _ZL17tahomabold_32_109
0407a5c6 l     O .rodata	00000320 _ZL17tahomabold_32_110
0407a8e6 l     O .rodata	00000320 _ZL17tahomabold_32_111
0407ac06 l     O .rodata	00000320 _ZL17tahomabold_32_112
0407af26 l     O .rodata	00000320 _ZL17tahomabold_32_113
0407b246 l     O .rodata	00000230 _ZL17tahomabold_32_114
0407b476 l     O .rodata	00000280 _ZL17tahomabold_32_115
0407b6f6 l     O .rodata	00000208 _ZL17tahomabold_32_116
0407b8fe l     O .rodata	00000320 _ZL17tahomabold_32_117
0407bc1e l     O .rodata	000002f8 _ZL17tahomabold_32_118
0407bf16 l     O .rodata	00000460 _ZL17tahomabold_32_119
0407c376 l     O .rodata	000002f8 _ZL17tahomabold_32_120
0407c66e l     O .rodata	000002d0 _ZL17tahomabold_32_121
0407c93e l     O .rodata	000002a8 _ZL17tahomabold_32_122
0407cbe6 l     O .rodata	00000320 _ZL17tahomabold_32_123
0407cf06 l     O .rodata	00000320 _ZL17tahomabold_32_124
0407d226 l     O .rodata	00000320 _ZL17tahomabold_32_125
0407d546 l     O .rodata	00000410 _ZL17tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.cpp
00000000 l    df *ABS*	00000000 gimp_bmp.cpp
00000000 l    df *ABS*	00000000 simple_graphics.cpp
00000000 l    df *ABS*	00000000 simple_text.cpp
00000000 l    df *ABS*	00000000 gui_gsensor.cpp
00000000 l    df *ABS*	00000000 H_Bar.cpp
00000000 l    df *ABS*	00000000 V_Bar.cpp
00000000 l    df *ABS*	00000000 ball.cpp
00000000 l    df *ABS*	00000000 ball_water.cpp
00000000 l    df *ABS*	00000000 bar.cpp
0407da50 l     O .rodata	000075a0 _ZL3bar
00000000 l    df *ABS*	00000000 bright.cpp
00000000 l    df *ABS*	00000000 dot.cpp
00000000 l    df *ABS*	00000000 h_Bar_Line.cpp
00000000 l    df *ABS*	00000000 h_bar_water.cpp
00000000 l    df *ABS*	00000000 ring.cpp
00000000 l    df *ABS*	00000000 v_Bar_Line.cpp
00000000 l    df *ABS*	00000000 v_bar_water.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 mpu9250.cpp
00000000 l    df *ABS*	00000000 I2C_core.cpp
00000000 l    df *ABS*	00000000 light_sensor.cpp
040f2fcc l     O .rwdata	00000004 _ZL25Light_I2C_Controller_Base
00000000 l    df *ABS*	00000000 multi_touch2.cpp
04008574 l     F .text	00000354 _ZL14mtc2_QueryDataP9MTC2_INFO
040088c8 l     F .text	00000088 _ZL8mtc2_ISRPv
00000000 l    df *ABS*	00000000 queue.cpp
00000000 l    df *ABS*	00000000 vip_fr.cpp
00000000 l    df *ABS*	00000000 s_atan.c
04085368 l     O .rodata	00000020 atanhi
04085348 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
040f1450 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040854da l     O .rodata	00000010 zeroes.4389
040854ea l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
040854fa l     O .rodata	00000010 zeroes.4404
040130c4 l     F .text	000000bc __sbprintf
0408550a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040132d4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04014e04 l     F .text	00000008 __fp_unlock
04014e18 l     F .text	0000019c __sinit.part.1
04014fb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
040f1c9c l     O .rwdata	00000020 lc_ctype_charset
040f1c7c l     O .rwdata	00000020 lc_message_charset
040f1cbc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04085538 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0408566c l     O .rodata	00000010 blanks.4332
0408565c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
04018c78 l     F .text	000000fc __sprint_r.part.0
0408568c l     O .rodata	00000010 blanks.4348
0408567c l     O .rodata	00000010 zeroes.4349
0401a204 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401b7d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0401b928 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401b954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401bce0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0401bdc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401bf94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040f3008 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401c3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401c4e8 l     F .text	00000034 alt_dev_reg
040f1e9c l     O .rwdata	000000cc epcs_flash_controller_0
040f1f68 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0401c5c0 l     F .text	00000034 alt_flash_device_register
0401c648 l     F .text	000003f8 alt_epcs_flash_query
0401ca40 l     F .text	000000ec alt_epcs_flash_memcmp
0401ce18 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401d2e0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401d4ec l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401db24 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0401dc74 l     F .text	00000038 epcs_test_wip
0401dcac l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401e4d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401e7d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0401e910 l     F .text	0000003c alt_get_errno
0401e94c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040f3050 g     O .bss	00000004 alt_instruction_exception_handler
040f0760 g     O .rwdata	00000010 v_Bar_Line
04000698 g     F .text	000003e8 _Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi
04016f78 g     F .text	00000074 _mprec_log10
04007990 g     F .text	0000026c _Z13OC_I2CL_WritelhtPhi
0401cd8c g     F .text	0000008c alt_epcs_flash_get_info
04008f24 g     F .text	000000d8 _Z10VIPFR_InitmPvS_mm
04017064 g     F .text	0000008c __any_on
0401a7a0 g     F .text	00000054 _isatty_r
04085544 g     O .rodata	00000028 __mprec_tinytens
040ed23c g     O .rwdata	00000010 h_Bar_Line
0401bed0 g     F .text	0000007c alt_main
0400ebb0 g     F .text	00000090 strcpy
040040ec g     F .text	00000260 _Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc
0400e9c4 g     F .text	000000c0 _puts_r
040f307c g     O .bss	00000100 alt_irq
04009bd4 g     F .text	00000014 fabs
0401a7f4 g     F .text	00000060 _lseek_r
04009be8 g     F .text	00000130 sqrt
04004534 g     F .text	000000e8 _Z29vid_string_pixel_length_alphaP15abc_font_structPc
04001dbc g     F .text	00000074 _Z13vid_get_pixeliiP16VIP_FRAME_READER
0401b6a4 g     F .text	00000088 .hidden __eqdf2
04000310 g     F .text	00000044 _Z5PtSetP5POINTii
04006198 g     F .text	00000040 _ZN7MPU92506whoamiEv
0400461c  w    F .text	00000144 _Z23seperate_color_channelsiPhS_S_S_
040f317c g       *ABS*	00000000 __alt_heap_start
0400946c g     F .text	00000048 _Z14FrameReader_Gomb
0400e988 g     F .text	0000003c printf
0401aa0c g     F .text	0000009c _wcrtomb_r
0400808c g     F .text	000000f8 _Z18Light_Get_ADCData0Pt
0401772c g     F .text	0000005c __sseek
04015154 g     F .text	00000010 __sinit
0401a8b4 g     F .text	00000140 __swbuf_r
04015c1c g     F .text	0000007c _setlocale_r
04014fbc g     F .text	00000068 __sfmoreglue
040f05c4 g     O .rwdata	00000199 v_Bar_Line_data
0401bf70 g     F .text	00000024 __malloc_unlock
0400a698 g     F .text	00000440 .hidden __divsf3
04095ce4 g     O .rwdata	00000010 H_Bar
040003b4 g     F .text	0000008c _Z11RectInflateP4RECTii
04015f98 g     F .text	0000015c memmove
0401513c g     F .text	00000018 _cleanup
040160f4 g     F .text	000000a8 _Balloc
04086e68 g     O .rwdata	00000415 cour10_font_array
0400b430 g     F .text	00000070 .hidden __fixsfsi
040004cc g     F .text	00000068 _Z8RectCopyP4RECTS0_
04000534 g     F .text	00000034 _Z9RectWidthP4RECT
04007eec g     F .text	00000068 _Z10Light_Initm
0400c848 g     F .text	000000dc .hidden __gtdf2
0401eb64 g     F .text	00000024 altera_nios2_gen2_irq_init
0400dea4 g     F .text	00000010 __errno
0401dce8 g     F .text	000000fc epcs_sector_erase
09001000 g     F .entry	00000000 __reset
04000e50 g     F .text	00000170 _Z21copy_pix_map_24_to_32PvlllS_l
04000fc0 g     F .text	00000148 _Z21copy_pix_map_24_to_24PvlllS_l
0401a744 g     F .text	0000005c _fstat_r
0400145c g     F .text	00000368 _Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER
040f3028 g     O .bss	00000004 errno
040176a8 g     F .text	00000008 __seofread
04008ffc g     F .text	0000003c _Z12VIPFR_UnInitP16VIP_FRAME_READER
04017a3c g     F .text	0000123c ___svfiprintf_internal_r
04009384 g     F .text	000000a8 _Z21FrameReader_SetFrame1mmmmmmm
040f3040 g     O .bss	00000004 alt_argv
040fafc8 g       *ABS*	00000000 _gp
0401c384 g     F .text	00000030 usleep
0400af4c g     F .text	000004e4 .hidden __subsf3
040d23e8 g     O .rwdata	00000d27 ball_water_data
0400914c g     F .text	00000050 _Z8VIPFR_GoP16VIP_FRAME_READERb
040f1d1c g     O .rwdata	00000180 alt_fd_list
04095cf4 g     O .rwdata	0000ea61 V_Bar_Data
0401df2c g     F .text	0000006c epcs_write_status_register
0401ed84 g     F .text	00000090 alt_find_dev
0400e6e8 g     F .text	00000148 memcpy
0400059c g     F .text	000000b4 _Z10PtDistanceP5POINTS0_
04014e0c g     F .text	0000000c _cleanup_r
0400daac g     F .text	000000dc .hidden __floatsidf
0401e894 g     F .text	0000007c alt_io_redirect
0400028c g     F .text	00000084 _Z10IsPtInRectP5POINTP4RECT
0400c924 g     F .text	000000f4 .hidden __ltdf2
0401f354 g       *ABS*	00000000 __DTOR_END__
0400ea84 g     F .text	00000014 puts
04004890  w    F .text	0000022c _Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER
0401e734 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04001b40 g     F .text	000000f0 _Z14vid_print_chariiicPcP16VIP_FRAME_READER
0401cf24 g     F .text	00000100 alt_epcs_flash_write_block
04009fa0 g     F .text	00000074 __fpclassifyd
04016ed4 g     F .text	000000a4 __ratio
0401a1e8 g     F .text	0000001c __vfiprintf_internal
0401d6e4 g     F .text	0000021c altera_avalon_jtag_uart_read
0400deb4 g     F .text	00000014 malloc
0400e958 g     F .text	00000030 _printf_r
0400a114 g     F .text	00000064 .hidden __udivsi3
0401bd1c g     F .text	000000a4 isatty
040f0770 g     O .rwdata	00000ccd v_bar_water_data
04085594 g     O .rodata	000000c8 __mprec_tens
04002440 g     F .text	0000006c _Z22vid_color_convert16_24tPc
04008dc4 g     F .text	00000098 _Z10QUEUE_PushP12QUEUE_STRUCTm
040070ac g     F .text	0000014c _Z14oc_i2c_init_exlll
04006064 g     F .text	00000134 _ZN7MPU925014set_gyro_scaleEi
04015c98 g     F .text	0000000c __locale_charset
04007848 g     F .text	00000148 _Z20OC_I2C_Read_ContinuelhPhi
040f3024 g     O .bss	00000004 __malloc_top_pad
040f2fe4 g     O .rwdata	00000004 __mb_cur_max
04015cc8 g     F .text	0000000c _localeconv_r
040065a0 g     F .text	00000108 _ZN7MPU92509calib_accEv
04006720 g     F .text	00000130 _ZN7MPU92509calib_magEv
04016500 g     F .text	0000003c __i2b
040155d8 g     F .text	000004bc __sfvwrite_r
04006ff4 g     F .text	00000058 _Z11Read32_DatallPl
0400ea98 g     F .text	00000054 _sbrk_r
04008d60 g     F .text	00000064 _Z12QUEUE_IsFullP12QUEUE_STRUCT
0400919c g     F .text	00000044 _Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER
0401a854 g     F .text	00000060 _read_r
040f2ffc g     O .rwdata	00000004 alt_max_fd
0401a438 g     F .text	000000f0 _fclose_r
04014dd4 g     F .text	00000030 fflush
040f3020 g     O .bss	00000004 __malloc_max_sbrked_mem
04002b04 g     F .text	000003bc _Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER
0400db88 g     F .text	00000110 .hidden __extendsfdf2
040862a8 g     O .rwdata	00000bc0 tahomabold_32
0400b6b4 g     F .text	000008ac .hidden __adddf3
0400aad8 g     F .text	00000078 .hidden __nesf2
0401ceac g     F .text	00000078 alt_epcs_flash_erase_block
04016c7c g     F .text	0000010c __b2d
0401b16c g     F .text	00000538 .hidden __umoddi3
0401bdfc g     F .text	000000d4 lseek
040f2fd0 g     O .rwdata	00000004 __fdlib_version
0400801c g     F .text	00000070 _Z17Light_PowerSwitchb
040f2fd4 g     O .rwdata	00000004 _global_impure_ptr
0401e1f8 g     F .text	0000005c epcs_exit_4_bytes_mode
040170f0 g     F .text	00000564 _realloc_r
040f317c g       *ABS*	00000000 __bss_end
0401bbf0 g     F .text	000000f0 alt_iic_isr_register
0401c27c g     F .text	00000108 alt_tick
0400942c g     F .text	00000040 _Z23FrameReader_SelectFramemh
0401abf4 g     F .text	00000578 .hidden __udivdi3
040064c0 g     F .text	000000e0 _ZN7MPU92509read_tempEv
0401a6a0 g     F .text	00000024 _fputwc_r
0408556c g     O .rodata	00000028 __mprec_bigtens
040162e4 g     F .text	00000104 __s2b
0401b72c g     F .text	000000a8 .hidden __floatunsidf
040ed24c g     O .rwdata	00000d42 h_bar_water_data
040169bc g     F .text	00000060 __mcmp
0400434c g     F .text	000001e8 _Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER
04015174 g     F .text	00000018 __fp_lock_all
0401bba4 g     F .text	0000004c alt_ic_irq_enabled
0400206c g     F .text	000002e8 _Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER
0401c1e0 g     F .text	0000009c alt_alarm_stop
04008314 g     F .text	00000054 _Z18Light_SetInterrupth
040f3038 g     O .bss	00000004 alt_irq_active
04003f30  w    F .text	00000054 _Z4min3iii
040000fc g     F .exceptions	000000d4 alt_irq_handler
040f1cf4 g     O .rwdata	00000028 alt_dev_null
040023a0 g     F .text	000000a0 _Z22vid_color_convert24_16Pc
040a4758 g     O .rwdata	00000010 V_Bar
0400827c g     F .text	0000004c _Z18Light_SetThreshLowPh
04007310 g     F .text	0000009c _Z9ACK_checkl
0401b8e0 g     F .text	00000048 alt_dcache_flush_all
040163e8 g     F .text	00000068 __hi0bits
0400da2c g     F .text	00000080 .hidden __fixdfsi
040f2ff4 g     O .rwdata	00000008 alt_dev_list
0401c3f0 g     F .text	000000f8 write
04003fe8  w    F .text	00000104 _Z25vid_put_pixel_in_span_mapiiPi
04004d18 g     F .text	00000170 _Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii
0401b990 g     F .text	000000b0 fstat
0400c924 g     F .text	000000f4 .hidden __ledf2
040035fc g     F .text	00000240 _Z19vid_bres_scan_edgesiiiiPi
04016734 g     F .text	00000140 __pow5mult
04007f54 g     F .text	00000064 _Z11Light_GetIDPh
04018d8c g     F .text	0000145c ___vfiprintf_internal_r
040f3034 g     O .bss	00000004 __nlocale_changed
0400a178 g     F .text	00000058 .hidden __umodsi3
04001c30 g     F .text	0000018c _Z13vid_set_pixeliijP16VIP_FRAME_READER
04008ad4 g     F .text	0000016c _Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_
0401e0b4 g     F .text	00000068 epcs_read_electronic_signature
04000a80 g     F .text	0000003c _Z18free_gimp_bmp_dataP13bitmap_struct
04008cec g     F .text	00000034 _Z12QUEUE_DeleteP12QUEUE_STRUCT
040f317c g       *ABS*	00000000 end
04008c7c g     F .text	00000070 _Z9QUEUE_Newi
0400634c g     F .text	00000174 _ZN7MPU92509read_gyroEv
04006994 g     F .text	00000490 _ZN7MPU92508read_allEv
04000d14 g     F .text	0000013c _Z21copy_pix_map_32_to_16PvlllS_l
04006f9c g     F .text	00000058 _Z12Write32_Datalll
0401d220 g     F .text	000000c0 altera_avalon_jtag_uart_init
04004abc  w    F .text	0000025c _Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0401f354 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401db9c g     F .text	0000007c alt_avalon_timer_sc_init
0400de40 g     F .text	00000064 .hidden __clzsi2
0401d900 g     F .text	00000224 altera_avalon_jtag_uart_write
04003edc  w    F .text	00000054 _Z4max3iii
04015164 g     F .text	00000004 __sfp_lock_acquire
04015eb4 g     F .text	000000e4 memchr
04010eb0 g     F .text	000021f8 ___vfprintf_internal_r
0400eaec g     F .text	00000058 _sprintf_r
040071f8 g     F .text	0000008c _Z13oc_i2c_uninitl
040152c8 g     F .text	00000310 _free_r
04015ca4 g     F .text	00000010 __locale_mb_cur_max
0401f1a0 g     F .text	00000180 __call_exitprocs
040f3030 g     O .bss	00000004 __mlocale_changed
04004e88 g     F .text	00000110 _Z10draw_arrayPjiiP16VIP_FRAME_READERiij
040f2fdc g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	00000048 _start
040061d8 g     F .text	00000174 _ZN7MPU92508read_accEv
040f3048 g     O .bss	00000004 _alt_tick_rate
040082c8 g     F .text	0000004c _Z19Light_SetThreshHighPh
04016874 g     F .text	00000148 __lshift
0401eb88 g     F .text	000001fc alt_avalon_spi_command
04000bc4 g     F .text	00000150 _Z21copy_pix_map_32_to_24PvlllS_l
040f304c g     O .bss	00000004 _alt_nticks
0401bfd0 g     F .text	000000fc read
0401c554 g     F .text	0000006c alt_sys_init
0400b4a0 g     F .text	00000124 .hidden __floatsisf
0401786c g     F .text	000001d0 __ssprint_r
04008368 g     F .text	00000064 _Z18Light_GetInterruptPh
040f1440 g     O .rwdata	00000010 v_bar_water
0400274c g     F .text	00000270 _Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER
0401f088 g     F .text	00000118 __register_exitproc
04007284 g     F .text	0000008c _Z16ACK_single_checkl
040073ac g     F .text	0000024c _Z12OC_I2C_WritelhhPhi
0401653c g     F .text	000001f8 __multiply
0400926c g     F .text	00000070 _Z16DRAW_EraseScreenP16VIP_FRAME_READERm
0401d58c g     F .text	00000068 altera_avalon_jtag_uart_close
04005d08 g     F .text	00000054 _ZN7MPU925014testConnectionEv
040f3054 g     O .bss	00000028 __malloc_current_mallinfo
0400aad8 g     F .text	00000078 .hidden __eqsf2
04016d88 g     F .text	0000014c __d2b
0401dc18 g     F .text	0000005c epcs_read_status_register
04005ae8 g     F .text	00000088 _ZN7MPU9250C1Emh
04005b70 g     F .text	000000ac _ZN7MPU92508WriteRegEhh
040095a4 g     F .text	000000a8 _Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER
0401d0bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401ef1c g     F .text	000000a4 alt_get_fd
0401e380 g     F .text	00000158 alt_busy_sleep
04003f84  w    F .text	00000064 _Z9max_diff3iii
040050fc g     F .text	000000e4 _Z9Get_lightPtS_
0401a320 g     F .text	00000054 _close_r
04008184 g     F .text	000000f8 _Z18Light_Get_ADCData1Pt
040029bc g     F .text	00000148 _Z15vid_draw_circleiiiicP16VIP_FRAME_READER
0401e11c g     F .text	00000080 epcs_read_device_id
0401f00c g     F .text	0000007c memcmp
0401d17c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040f317c g       *ABS*	00000000 __alt_stack_base
0401d1cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
09001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0401f354 g     O .rodata	000448f0 gesture_bmp
04013180 g     F .text	00000154 __swsetup_r
0400383c g     F .text	000003b4 _Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER
0400bf60 g     F .text	000008e8 .hidden __divdf3
04015024 g     F .text	00000118 __sfp
04016fec g     F .text	00000078 __copybits
04000568 g     F .text	00000034 _Z10RectHeightP4RECT
040f1874 g     O .rwdata	00000408 __malloc_av_
04015170 g     F .text	00000004 __sinit_lock_release
04005060 g     F .text	0000009c _Z14InitBackGroundP16VIP_FRAME_READER
040094b4 g     F .text	00000048 _Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER
0400ca18 g     F .text	00000718 .hidden __muldf3
04017654 g     F .text	00000054 __sread
0401ee14 g     F .text	00000108 alt_find_file
0401e514 g     F .text	000000a4 alt_dev_llist_insert
0401bf4c g     F .text	00000024 __malloc_lock
0401c130 g     F .text	000000b0 sbrk
0400ecd8 g     F .text	000021d8 ___svfprintf_internal_r
04014d78 g     F .text	0000005c _fflush_r
0401a374 g     F .text	000000c4 _calloc_r
040f3014 g     O .rwdata	00000008 alt_flash_dev_list
04000440 g     F .text	0000008c _Z10RectOffsetP4RECTii
040f301c g       *ABS*	00000000 __bss_start
0400e830 g     F .text	00000128 memset
04005a58 g     F .text	00000090 main
04009038 g     F .text	00000114 _Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii
040f3044 g     O .bss	00000004 alt_envp
040f301c g     O .bss	00000004 __malloc_max_total_mem
0401d11c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0401a9f4 g     F .text	00000018 __swbuf
040856e8 g     O .rwdata	00000bc0 tahomabold_20
04008a88 g     F .text	0000004c _Z11MTC2_UnInitP9MTC2_INFO
04017788 g     F .text	00000008 __sclose
0400a014 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0401a528 g     F .text	00000014 fclose
0400dc98 g     F .text	000001a8 .hidden __truncdfsf2
040f2fc8 g     O .rwdata	00000004 cour10_font
040134d4 g     F .text	00001688 _dtoa_r
0400dedc g     F .text	0000080c _malloc_r
0401ab68 g     F .text	00000030 __ascii_wctomb
040f3000 g     O .rwdata	00000004 alt_errno
04015a94 g     F .text	000000c4 _fwalk
040ece64 g     O .rwdata	00000211 dot_data
0400a01c g     F .text	00000084 .hidden __divsi3
04002ec0 g     F .text	0000073c _Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER
040151a4 g     F .text	00000124 _malloc_trim_r
0401f354 g       *ABS*	00000000 __CTOR_END__
0400ab50 g     F .text	000003fc .hidden __mulsf3
040024ac g     F .text	000002a0 _Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER
0401cb2c g     F .text	00000260 alt_epcs_flash_write
04017790 g     F .text	000000dc strcmp
0401f354 g       *ABS*	00000000 __DTOR_LIST__
040092dc g     F .text	000000a8 _Z21FrameReader_SetFrame0mmmmmmm
04001310 g     F .text	0000014c _Z22vid_scroll_string_initiiiiiPciS_
0401b6a4 g     F .text	00000088 .hidden __nedf2
040d3110 g     O .rwdata	00000010 ball_water
0401c51c g     F .text	00000038 alt_irq_init
0401c0cc g     F .text	00000064 alt_release_fd
04006e24 g     F .text	000000d0 _ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_
0400964c g     F .text	00000588 atan
04005c94 g     F .text	00000074 _ZN7MPU92508ReadRegsEhPhj
0400eb44 g     F .text	0000006c sprintf
0408538d g     O .rodata	00000100 .hidden __clz_tab
040f302c g     O .bss	00000004 _PathLocale
04007fb8 g     F .text	00000064 _Z15Light_GetTimingPh
04005f38 g     F .text	0000012c _ZN7MPU925013set_acc_scaleEi
0401efc0 g     F .text	00000014 atexit
04005ae8 g     F .text	00000088 _ZN7MPU9250C2Emh
04001108 g     F .text	00000160 _Z21copy_pix_map_24_to_16PvlllS_l
0401a2c0 g     F .text	00000060 _write_r
04008504 g     F .text	00000070 _Z14I2C_Read_LightahPh
04015cd4 g     F .text	00000018 setlocale
04000abc g     F .text	00000108 _Z21copy_pix_map_32_to_32PvlllS_l
04003e10  w    F .text	000000cc _Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER
040f2fd8 g     O .rwdata	00000004 _impure_ptr
040f303c g     O .bss	00000004 alt_argc
04014b5c g     F .text	0000021c __sflush_r
0401e618 g     F .text	00000060 _do_dtors
04015cc0 g     F .text	00000008 __locale_cjk_lang
040094fc g     F .text	00000054 _Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv
04000020 g       .exceptions	00000000 alt_irq_entry
040ed078 g     O .rwdata	00000010 dot
04016c18 g     F .text	00000064 __ulp
0401518c g     F .text	00000018 __fp_unlock_all
0400765c g     F .text	000001ec _Z11OC_I2C_ReadlhhPhi
04008c40 g     F .text	0000003c _Z15MTC2_ClearEventP9MTC2_INFO
04003cdc g     F .text	00000134 _Z11CropImage16PsS_ssssssss
040f2fec g     O .rwdata	00000008 alt_fs_list
04008950 g     F .text	00000138 _Z9MTC2_Initmmmm
040a4768 g     O .rwdata	0002dc6d ball_data
04000354 g     F .text	00000060 _Z7RectSetP4RECTiiii
040d23d8 g     O .rwdata	00000010 ball
040d3120 g     O .rwdata	00019d32 bright_data
040075f8 g     F .text	00000064 _Z18ACK_judge_for_readl
040083cc g     F .text	00000054 _Z15Light_SetTimingh
04015cec g     F .text	0000000c localeconv
0401dde4 g     F .text	000000f4 epcs_read_buffer
04009d18 g     F .text	00000288 __ieee754_sqrt
040017c4 g     F .text	0000011c _Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER
0401c5f4 g     F .text	00000054 alt_epcs_flash_init
0401ba40 g     F .text	00000050 alt_ic_isr_register
040f301c g       *ABS*	00000000 _edata
04008420 g     F .text	00000074 _Z15I2C_Write_Lightahh
04008494 g     F .text	00000070 _Z17I2C_Write_Light16ahPh
040f317c g       *ABS*	00000000 _end
0401e678 g     F .text	00000068 alt_flash_open_dev
0401a53c g     F .text	00000164 __fputwc
0401d5f4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04008e5c g     F .text	00000094 _Z9QUEUE_PopP12QUEUE_STRUCT
04003bf0 g     F .text	000000ec _Z11CopyImage16PsS_ssss
0401bb18 g     F .text	0000008c alt_ic_irq_disable
040f05b4 g     O .rwdata	00000010 ring
0401e19c g     F .text	0000005c epcs_enter_4_bytes_mode
040012cc g     F .text	00000044 _Z22vid_scroll_string_quitP22vid_text_scroll_struct
040176b0 g     F .text	0000007c __swrite
04087280 g     O .rwdata	0000ea61 H_Bar_Data
040f2fe0 g     O .rwdata	00000004 __malloc_trim_threshold
0400704c g     F .text	00000060 _Z11oc_i2c_initl
04001e30 g     F .text	0000023c _Z15vid_paint_blockiiiiiP16VIP_FRAME_READER
04015cb4 g     F .text	0000000c __locale_msgcharset
040018e0 g     F .text	00000108 _Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_
0401efd4 g     F .text	00000038 exit
040ed088 g     O .rwdata	000001b1 h_Bar_Line_data
04015b58 g     F .text	000000c4 _fwalk_reent
0400b5c4 g     F .text	000000f0 .hidden __floatunsisf
04016a1c g     F .text	000001fc __mdiff
0401e6e0 g     F .text	00000054 alt_flash_close_dev
0400a0a0 g     F .text	00000074 .hidden __modsi3
04008d20 g     F .text	00000040 _Z13QUEUE_IsEmptyP12QUEUE_STRUCT
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04015168 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04006ef4 g     F .text	000000a8 _ZN7MPU925010getMotion6EPfS0_S0_S0_S0_S0_
04000650 g     F .text	00000048 _Z6PtCopyP5POINTS0_
0401f320 g     F .text	00000034 _exit
04004760  w    F .text	00000130 _Z20merge_color_channelsihhhPh
0401e254 g     F .text	0000012c alt_alarm_start
04002354 g     F .text	0000004c _Z16vid_merge_colorsiii
04015cf8 g     F .text	000001bc __smakebuf_r
04009550 g     F .text	00000054 _Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv
040066a8 g     F .text	00000078 _ZN7MPU925013AK8963_whoamiEv
0400ec40 g     F .text	00000098 strlen
0401ded8 g     F .text	00000054 epcs_write_enable
0401ea10 g     F .text	00000154 open
0400c848 g     F .text	000000dc .hidden __gedf2
040051e0 g     F .text	00000878 _Z11GUI_GSensorP9MTC2_INFO
04001268 g     F .text	00000064 _Z16vid_clean_screenP16VIP_FRAME_READERi
040f2fe8 g     O .rwdata	00000004 __wctomb
04018d74 g     F .text	00000018 __sprint_r
04005c1c g     F .text	00000078 _ZN7MPU92507ReadRegEhh
040019e8 g     F .text	00000158 _Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER
040ece54 g     O .rwdata	00000010 bright
040f3004 g     O .rwdata	00000004 alt_priority_mask
04007bfc g     F .text	000002f0 _Z12OC_I2CL_ReadlhtPhi
0401ba90 g     F .text	00000088 alt_ic_irq_enable
040130a8 g     F .text	0000001c __vfprintf_internal
0401ab98 g     F .text	0000005c _wctomb_r
0400d130 g     F .text	000008fc .hidden __subdf3
0401d024 g     F .text	00000098 alt_epcs_flash_read
04016450 g     F .text	000000b0 __lo0bits
040edf90 g     O .rwdata	00000010 h_bar_water
04005d5c g     F .text	000001dc _ZN7MPU925010initializeEii
040f300c g     O .rwdata	00000008 alt_alarm_list
0401e5b8 g     F .text	00000060 _do_ctors
0401aaa8 g     F .text	000000c0 wcrtomb
040091e0 g     F .text	0000008c _Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER
0401b810 g     F .text	000000d0 close
04008ef0 g     F .text	00000034 _Z11QUEUE_EmptyP12QUEUE_STRUCT
0400a1d0 g     F .text	000004c8 .hidden __addsf3
04004f98 g     F .text	000000c8 _Z20DrawTransparentImageP16VIP_FRAME_READERP17gimp_image_structiij
0401a6c4 g     F .text	00000080 fputwc
040edfa0 g     O .rwdata	00002614 ring_data
0400dec8 g     F .text	00000014 free
0401516c g     F .text	00000004 __sinit_lock_acquire
0401df98 g     F .text	0000011c epcs_write_buffer
04006850 g     F .text	00000144 _ZN7MPU92508read_magEv
040161c4 g     F .text	00000120 __multadd
0401619c g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008103f4 	movhi	r2,1039
 4000140:	108c1f04 	addi	r2,r2,12412
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008103f4 	movhi	r2,1039
 4000158:	108c1f04 	addi	r2,r2,12412
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_epcs_flash_controller_0+0xfafff12c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_epcs_flash_controller_0+0xfafff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a02217 	ldw	r2,-32632(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a02217 	ldw	r2,-32632(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_epcs_flash_controller_0+0xfafff248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068103f4 	movhi	gp,1039
    ori gp, gp, %lo(_gp)
 4000260:	d6abf214 	ori	gp,gp,45000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008103f4 	movhi	r2,1039
    ori r2, r2, %lo(__bss_start)
 4000268:	108c0714 	ori	r2,r2,12316

    movhi r3, %hi(__bss_end)
 400026c:	00c103f4 	movhi	r3,1039
    ori r3, r3, %lo(__bss_end)
 4000270:	18cc5f14 	ori	r3,r3,12668

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_epcs_flash_controller_0+0xfafff278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000284:	401bed00 	call	401bed0 <alt_main>

04000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000288:	003fff06 	br	4000288 <__alt_mem_epcs_flash_controller_0+0xfafff288>

0400028c <_Z10IsPtInRectP5POINTP4RECT>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 400028c:	defffc04 	addi	sp,sp,-16
 4000290:	df000315 	stw	fp,12(sp)
 4000294:	df000304 	addi	fp,sp,12
 4000298:	e13ffe15 	stw	r4,-8(fp)
 400029c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 40002a0:	e03ffd05 	stb	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 40002a4:	e0bffe17 	ldw	r2,-8(fp)
 40002a8:	10c00017 	ldw	r3,0(r2)
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	10800017 	ldw	r2,0(r2)
 40002b4:	18801116 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002b8:	e0bffe17 	ldw	r2,-8(fp)
 40002bc:	10800017 	ldw	r2,0(r2)
 40002c0:	e0ffff17 	ldw	r3,-4(fp)
 40002c4:	18c00117 	ldw	r3,4(r3)
 40002c8:	18800c16 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002cc:	e0bffe17 	ldw	r2,-8(fp)
 40002d0:	10c00117 	ldw	r3,4(r2)
 40002d4:	e0bfff17 	ldw	r2,-4(fp)
 40002d8:	10800217 	ldw	r2,8(r2)
 40002dc:	18800716 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002e0:	e0bffe17 	ldw	r2,-8(fp)
 40002e4:	10800117 	ldw	r2,4(r2)
 40002e8:	e0ffff17 	ldw	r3,-4(fp)
 40002ec:	18c00317 	ldw	r3,12(r3)
 40002f0:	18800216 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
        bYes = TRUE;
 40002f4:	00800044 	movi	r2,1
 40002f8:	e0bffd05 	stb	r2,-12(fp)
    
    return bYes;
 40002fc:	e0bffd03 	ldbu	r2,-12(fp)
}
 4000300:	e037883a 	mov	sp,fp
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00104 	addi	sp,sp,4
 400030c:	f800283a 	ret

04000310 <_Z5PtSetP5POINTii>:

void PtSet(POINT *pt, int x, int y){
 4000310:	defffc04 	addi	sp,sp,-16
 4000314:	df000315 	stw	fp,12(sp)
 4000318:	df000304 	addi	fp,sp,12
 400031c:	e13ffd15 	stw	r4,-12(fp)
 4000320:	e17ffe15 	stw	r5,-8(fp)
 4000324:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 4000328:	e0bffd17 	ldw	r2,-12(fp)
 400032c:	e0fffe17 	ldw	r3,-8(fp)
 4000330:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 4000334:	e0bffd17 	ldw	r2,-12(fp)
 4000338:	e0ffff17 	ldw	r3,-4(fp)
 400033c:	10c00115 	stw	r3,4(r2)
}
 4000340:	0001883a 	nop
 4000344:	e037883a 	mov	sp,fp
 4000348:	df000017 	ldw	fp,0(sp)
 400034c:	dec00104 	addi	sp,sp,4
 4000350:	f800283a 	ret

04000354 <_Z7RectSetP4RECTiiii>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 4000354:	defffb04 	addi	sp,sp,-20
 4000358:	df000415 	stw	fp,16(sp)
 400035c:	df000404 	addi	fp,sp,16
 4000360:	e13ffc15 	stw	r4,-16(fp)
 4000364:	e17ffd15 	stw	r5,-12(fp)
 4000368:	e1bffe15 	stw	r6,-8(fp)
 400036c:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 4000370:	e0bffc17 	ldw	r2,-16(fp)
 4000374:	e0fffd17 	ldw	r3,-12(fp)
 4000378:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 400037c:	e0bffc17 	ldw	r2,-16(fp)
 4000380:	e0fffe17 	ldw	r3,-8(fp)
 4000384:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	e0ffff17 	ldw	r3,-4(fp)
 4000390:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4000394:	e0bffc17 	ldw	r2,-16(fp)
 4000398:	e0c00117 	ldw	r3,4(fp)
 400039c:	10c00315 	stw	r3,12(r2)
}
 40003a0:	0001883a 	nop
 40003a4:	e037883a 	mov	sp,fp
 40003a8:	df000017 	ldw	fp,0(sp)
 40003ac:	dec00104 	addi	sp,sp,4
 40003b0:	f800283a 	ret

040003b4 <_Z11RectInflateP4RECTii>:

void RectInflate(RECT *rc, int x, int y){
 40003b4:	defffc04 	addi	sp,sp,-16
 40003b8:	df000315 	stw	fp,12(sp)
 40003bc:	df000304 	addi	fp,sp,12
 40003c0:	e13ffd15 	stw	r4,-12(fp)
 40003c4:	e17ffe15 	stw	r5,-8(fp)
 40003c8:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 40003cc:	e0bffd17 	ldw	r2,-12(fp)
 40003d0:	10c00017 	ldw	r3,0(r2)
 40003d4:	e0bffe17 	ldw	r2,-8(fp)
 40003d8:	1887c83a 	sub	r3,r3,r2
 40003dc:	e0bffd17 	ldw	r2,-12(fp)
 40003e0:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003e4:	e0bffd17 	ldw	r2,-12(fp)
 40003e8:	10c00117 	ldw	r3,4(r2)
 40003ec:	e0bffe17 	ldw	r2,-8(fp)
 40003f0:	1887883a 	add	r3,r3,r2
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 40003fc:	e0bffd17 	ldw	r2,-12(fp)
 4000400:	10c00217 	ldw	r3,8(r2)
 4000404:	e0bfff17 	ldw	r2,-4(fp)
 4000408:	1887c83a 	sub	r3,r3,r2
 400040c:	e0bffd17 	ldw	r2,-12(fp)
 4000410:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000414:	e0bffd17 	ldw	r2,-12(fp)
 4000418:	10c00317 	ldw	r3,12(r2)
 400041c:	e0bfff17 	ldw	r2,-4(fp)
 4000420:	1887883a 	add	r3,r3,r2
 4000424:	e0bffd17 	ldw	r2,-12(fp)
 4000428:	10c00315 	stw	r3,12(r2)
}
 400042c:	0001883a 	nop
 4000430:	e037883a 	mov	sp,fp
 4000434:	df000017 	ldw	fp,0(sp)
 4000438:	dec00104 	addi	sp,sp,4
 400043c:	f800283a 	ret

04000440 <_Z10RectOffsetP4RECTii>:

void RectOffset(RECT *rc, int x, int y){
 4000440:	defffc04 	addi	sp,sp,-16
 4000444:	df000315 	stw	fp,12(sp)
 4000448:	df000304 	addi	fp,sp,12
 400044c:	e13ffd15 	stw	r4,-12(fp)
 4000450:	e17ffe15 	stw	r5,-8(fp)
 4000454:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 4000458:	e0bffd17 	ldw	r2,-12(fp)
 400045c:	10c00017 	ldw	r3,0(r2)
 4000460:	e0bffe17 	ldw	r2,-8(fp)
 4000464:	1887883a 	add	r3,r3,r2
 4000468:	e0bffd17 	ldw	r2,-12(fp)
 400046c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000470:	e0bffd17 	ldw	r2,-12(fp)
 4000474:	10c00117 	ldw	r3,4(r2)
 4000478:	e0bffe17 	ldw	r2,-8(fp)
 400047c:	1887883a 	add	r3,r3,r2
 4000480:	e0bffd17 	ldw	r2,-12(fp)
 4000484:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 4000488:	e0bffd17 	ldw	r2,-12(fp)
 400048c:	10c00217 	ldw	r3,8(r2)
 4000490:	e0bfff17 	ldw	r2,-4(fp)
 4000494:	1887883a 	add	r3,r3,r2
 4000498:	e0bffd17 	ldw	r2,-12(fp)
 400049c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 40004a0:	e0bffd17 	ldw	r2,-12(fp)
 40004a4:	10c00317 	ldw	r3,12(r2)
 40004a8:	e0bfff17 	ldw	r2,-4(fp)
 40004ac:	1887883a 	add	r3,r3,r2
 40004b0:	e0bffd17 	ldw	r2,-12(fp)
 40004b4:	10c00315 	stw	r3,12(r2)
}
 40004b8:	0001883a 	nop
 40004bc:	e037883a 	mov	sp,fp
 40004c0:	df000017 	ldw	fp,0(sp)
 40004c4:	dec00104 	addi	sp,sp,4
 40004c8:	f800283a 	ret

040004cc <_Z8RectCopyP4RECTS0_>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 40004cc:	defffd04 	addi	sp,sp,-12
 40004d0:	df000215 	stw	fp,8(sp)
 40004d4:	df000204 	addi	fp,sp,8
 40004d8:	e13ffe15 	stw	r4,-8(fp)
 40004dc:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 40004e0:	e0bfff17 	ldw	r2,-4(fp)
 40004e4:	10c00017 	ldw	r3,0(r2)
 40004e8:	e0bffe17 	ldw	r2,-8(fp)
 40004ec:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 40004f0:	e0bfff17 	ldw	r2,-4(fp)
 40004f4:	10c00117 	ldw	r3,4(r2)
 40004f8:	e0bffe17 	ldw	r2,-8(fp)
 40004fc:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000500:	e0bfff17 	ldw	r2,-4(fp)
 4000504:	10c00217 	ldw	r3,8(r2)
 4000508:	e0bffe17 	ldw	r2,-8(fp)
 400050c:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000510:	e0bfff17 	ldw	r2,-4(fp)
 4000514:	10c00317 	ldw	r3,12(r2)
 4000518:	e0bffe17 	ldw	r2,-8(fp)
 400051c:	10c00315 	stw	r3,12(r2)
}
 4000520:	0001883a 	nop
 4000524:	e037883a 	mov	sp,fp
 4000528:	df000017 	ldw	fp,0(sp)
 400052c:	dec00104 	addi	sp,sp,4
 4000530:	f800283a 	ret

04000534 <_Z9RectWidthP4RECT>:

int RectWidth(RECT *rc){
 4000534:	defffe04 	addi	sp,sp,-8
 4000538:	df000115 	stw	fp,4(sp)
 400053c:	df000104 	addi	fp,sp,4
 4000540:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 4000544:	e0bfff17 	ldw	r2,-4(fp)
 4000548:	10c00117 	ldw	r3,4(r2)
 400054c:	e0bfff17 	ldw	r2,-4(fp)
 4000550:	10800017 	ldw	r2,0(r2)
 4000554:	1885c83a 	sub	r2,r3,r2
}
 4000558:	e037883a 	mov	sp,fp
 400055c:	df000017 	ldw	fp,0(sp)
 4000560:	dec00104 	addi	sp,sp,4
 4000564:	f800283a 	ret

04000568 <_Z10RectHeightP4RECT>:

int RectHeight(RECT *rc){
 4000568:	defffe04 	addi	sp,sp,-8
 400056c:	df000115 	stw	fp,4(sp)
 4000570:	df000104 	addi	fp,sp,4
 4000574:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 4000578:	e0bfff17 	ldw	r2,-4(fp)
 400057c:	10c00317 	ldw	r3,12(r2)
 4000580:	e0bfff17 	ldw	r2,-4(fp)
 4000584:	10800217 	ldw	r2,8(r2)
 4000588:	1885c83a 	sub	r2,r3,r2
}
 400058c:	e037883a 	mov	sp,fp
 4000590:	df000017 	ldw	fp,0(sp)
 4000594:	dec00104 	addi	sp,sp,4
 4000598:	f800283a 	ret

0400059c <_Z10PtDistanceP5POINTS0_>:

int PtDistance(POINT *pt1, POINT *pt2){
 400059c:	defff904 	addi	sp,sp,-28
 40005a0:	dfc00615 	stw	ra,24(sp)
 40005a4:	df000515 	stw	fp,20(sp)
 40005a8:	df000504 	addi	fp,sp,20
 40005ac:	e13ffe15 	stw	r4,-8(fp)
 40005b0:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 40005b4:	e0bffe17 	ldw	r2,-8(fp)
 40005b8:	10c00017 	ldw	r3,0(r2)
 40005bc:	e0bfff17 	ldw	r2,-4(fp)
 40005c0:	10800017 	ldw	r2,0(r2)
 40005c4:	1885c83a 	sub	r2,r3,r2
 40005c8:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10c00117 	ldw	r3,4(r2)
 40005d4:	e0bfff17 	ldw	r2,-4(fp)
 40005d8:	10800117 	ldw	r2,4(r2)
 40005dc:	1885c83a 	sub	r2,r3,r2
 40005e0:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 40005e4:	e0fffb17 	ldw	r3,-20(fp)
 40005e8:	e0bffb17 	ldw	r2,-20(fp)
 40005ec:	1887383a 	mul	r3,r3,r2
 40005f0:	e13ffc17 	ldw	r4,-16(fp)
 40005f4:	e0bffc17 	ldw	r2,-16(fp)
 40005f8:	2085383a 	mul	r2,r4,r2
 40005fc:	1885883a 	add	r2,r3,r2
 4000600:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 4000604:	e13ffd17 	ldw	r4,-12(fp)
 4000608:	400daac0 	call	400daac <__floatsidf>
 400060c:	100b883a 	mov	r5,r2
 4000610:	180d883a 	mov	r6,r3
 4000614:	2809883a 	mov	r4,r5
 4000618:	300b883a 	mov	r5,r6
 400061c:	4009be80 	call	4009be8 <sqrt>
 4000620:	100b883a 	mov	r5,r2
 4000624:	180d883a 	mov	r6,r3
 4000628:	2809883a 	mov	r4,r5
 400062c:	300b883a 	mov	r5,r6
 4000630:	400da2c0 	call	400da2c <__fixdfsi>
 4000634:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 4000638:	e0bffd17 	ldw	r2,-12(fp)
}
 400063c:	e037883a 	mov	sp,fp
 4000640:	dfc00117 	ldw	ra,4(sp)
 4000644:	df000017 	ldw	fp,0(sp)
 4000648:	dec00204 	addi	sp,sp,8
 400064c:	f800283a 	ret

04000650 <_Z6PtCopyP5POINTS0_>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 4000650:	defffd04 	addi	sp,sp,-12
 4000654:	df000215 	stw	fp,8(sp)
 4000658:	df000204 	addi	fp,sp,8
 400065c:	e13ffe15 	stw	r4,-8(fp)
 4000660:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 4000664:	e0bfff17 	ldw	r2,-4(fp)
 4000668:	10c00017 	ldw	r3,0(r2)
 400066c:	e0bffe17 	ldw	r2,-8(fp)
 4000670:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10c00117 	ldw	r3,4(r2)
 400067c:	e0bffe17 	ldw	r2,-8(fp)
 4000680:	10c00115 	stw	r3,4(r2)
}
 4000684:	0001883a 	nop
 4000688:	e037883a 	mov	sp,fp
 400068c:	df000017 	ldw	fp,0(sp)
 4000690:	dec00104 	addi	sp,sp,4
 4000694:	f800283a 	ret

04000698 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi>:
#include "gimp_bmp.h"

int load_gimp_bmp( GimpImage *gimp_image, 
                    bitmap_struct *bmp, 
                    int output_bits_per_pixel )
{
 4000698:	defff604 	addi	sp,sp,-40
 400069c:	dfc00915 	stw	ra,36(sp)
 40006a0:	df000815 	stw	fp,32(sp)
 40006a4:	df000804 	addi	fp,sp,32
 40006a8:	e13ffd15 	stw	r4,-12(fp)
 40006ac:	e17ffe15 	stw	r5,-8(fp)
 40006b0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 40006b4:	e03ffa15 	stw	zero,-24(fp)
  
  int output_bytes_per_pixel = output_bits_per_pixel / 8;
 40006b8:	e0bfff17 	ldw	r2,-4(fp)
 40006bc:	1000010e 	bge	r2,zero,40006c4 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2c>
 40006c0:	108001c4 	addi	r2,r2,7
 40006c4:	1005d0fa 	srai	r2,r2,3
 40006c8:	e0bffb15 	stw	r2,-20(fp)
  int num_pixels = gimp_image->width * gimp_image->height;
 40006cc:	e0bffd17 	ldw	r2,-12(fp)
 40006d0:	10c00017 	ldw	r3,0(r2)
 40006d4:	e0bffd17 	ldw	r2,-12(fp)
 40006d8:	10800117 	ldw	r2,4(r2)
 40006dc:	1885383a 	mul	r2,r3,r2
 40006e0:	e0bffc15 	stw	r2,-16(fp)
  
  bmp->biWidth = gimp_image->width;
 40006e4:	e0bffd17 	ldw	r2,-12(fp)
 40006e8:	10800017 	ldw	r2,0(r2)
 40006ec:	1007883a 	mov	r3,r2
 40006f0:	e0bffe17 	ldw	r2,-8(fp)
 40006f4:	10c0000d 	sth	r3,0(r2)
  bmp->biHeight = gimp_image->height;
 40006f8:	e0bffd17 	ldw	r2,-12(fp)
 40006fc:	10800117 	ldw	r2,4(r2)
 4000700:	1007883a 	mov	r3,r2
 4000704:	e0bffe17 	ldw	r2,-8(fp)
 4000708:	10c0008d 	sth	r3,2(r2)
  bmp->biBitCount = output_bits_per_pixel;
 400070c:	e0bfff17 	ldw	r2,-4(fp)
 4000710:	1007883a 	mov	r3,r2
 4000714:	e0bffe17 	ldw	r2,-8(fp)
 4000718:	10c0010d 	sth	r3,4(r2)
  
  /* try to allocate memory for bitmap data */
  if ((bmp->data = (char *)malloc(num_pixels * output_bytes_per_pixel)) == NULL)
 400071c:	e0fffc17 	ldw	r3,-16(fp)
 4000720:	e0bffb17 	ldw	r2,-20(fp)
 4000724:	1885383a 	mul	r2,r3,r2
 4000728:	1009883a 	mov	r4,r2
 400072c:	400deb40 	call	400deb4 <malloc>
 4000730:	1007883a 	mov	r3,r2
 4000734:	e0bffe17 	ldw	r2,-8(fp)
 4000738:	10c00315 	stw	r3,12(r2)
 400073c:	e0bffe17 	ldw	r2,-8(fp)
 4000740:	10800317 	ldw	r2,12(r2)
 4000744:	1005003a 	cmpeq	r2,r2,zero
 4000748:	10803fcc 	andi	r2,r2,255
 400074c:	10000326 	beq	r2,zero,400075c <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0xc4>
  {
    ret_code = -1;
 4000750:	00bfffc4 	movi	r2,-1
 4000754:	e0bffa15 	stw	r2,-24(fp)
 4000758:	0000c306 	br	4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
  }
  else
  {
    if( output_bits_per_pixel == 16 )
 400075c:	e0bfff17 	ldw	r2,-4(fp)
 4000760:	10800418 	cmpnei	r2,r2,16
 4000764:	10003e1e 	bne	r2,zero,4000860 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x1c8>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 4000768:	e0bffd17 	ldw	r2,-12(fp)
 400076c:	10800217 	ldw	r2,8(r2)
 4000770:	10800118 	cmpnei	r2,r2,4
 4000774:	10001b1e 	bne	r2,zero,40007e4 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x14c>
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000778:	e0bffd17 	ldw	r2,-12(fp)
 400077c:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000780:	e0bffe17 	ldw	r2,-8(fp)
 4000784:	1080000b 	ldhu	r2,0(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000788:	117fffcc 	andi	r5,r2,65535
 400078c:	2960001c 	xori	r5,r5,32768
 4000790:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000794:	e0bffe17 	ldw	r2,-8(fp)
 4000798:	1080008b 	ldhu	r2,2(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 400079c:	11bfffcc 	andi	r6,r2,65535
 40007a0:	31a0001c 	xori	r6,r6,32768
 40007a4:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40007a8:	e0bffe17 	ldw	r2,-8(fp)
 40007ac:	1080000b 	ldhu	r2,0(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007b0:	11ffffcc 	andi	r7,r2,65535
 40007b4:	39e0001c 	xori	r7,r7,32768
 40007b8:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40007bc:	e0bffe17 	ldw	r2,-8(fp)
 40007c0:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40007c4:	e0fffe17 	ldw	r3,-8(fp)
 40007c8:	18c0000b 	ldhu	r3,0(r3)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007cc:	18ffffcc 	andi	r3,r3,65535
 40007d0:	18e0001c 	xori	r3,r3,32768
 40007d4:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40007d8:	d8c00115 	stw	r3,4(sp)
 40007dc:	d8800015 	stw	r2,0(sp)
 40007e0:	4000d140 	call	4000d14 <_Z21copy_pix_map_32_to_16PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40007e4:	e0bffd17 	ldw	r2,-12(fp)
 40007e8:	10800217 	ldw	r2,8(r2)
 40007ec:	108000d8 	cmpnei	r2,r2,3
 40007f0:	10001b1e 	bne	r2,zero,4000860 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x1c8>
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007f4:	e0bffd17 	ldw	r2,-12(fp)
 40007f8:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 40007fc:	e0bffe17 	ldw	r2,-8(fp)
 4000800:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000804:	117fffcc 	andi	r5,r2,65535
 4000808:	2960001c 	xori	r5,r5,32768
 400080c:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000810:	e0bffe17 	ldw	r2,-8(fp)
 4000814:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000818:	11bfffcc 	andi	r6,r2,65535
 400081c:	31a0001c 	xori	r6,r6,32768
 4000820:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000824:	e0bffe17 	ldw	r2,-8(fp)
 4000828:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 400082c:	11ffffcc 	andi	r7,r2,65535
 4000830:	39e0001c 	xori	r7,r7,32768
 4000834:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 4000838:	e0bffe17 	ldw	r2,-8(fp)
 400083c:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000840:	e0fffe17 	ldw	r3,-8(fp)
 4000844:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000848:	18ffffcc 	andi	r3,r3,65535
 400084c:	18e0001c 	xori	r3,r3,32768
 4000850:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000854:	d8c00115 	stw	r3,4(sp)
 4000858:	d8800015 	stw	r2,0(sp)
 400085c:	40011080 	call	4001108 <_Z21copy_pix_map_24_to_16PvlllS_l>
  
      }
    }
    if( output_bits_per_pixel == 24 )
 4000860:	e0bfff17 	ldw	r2,-4(fp)
 4000864:	10800618 	cmpnei	r2,r2,24
 4000868:	10003e1e 	bne	r2,zero,4000964 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2cc>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 400086c:	e0bffd17 	ldw	r2,-12(fp)
 4000870:	10800217 	ldw	r2,8(r2)
 4000874:	10800118 	cmpnei	r2,r2,4
 4000878:	10001b1e 	bne	r2,zero,40008e8 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x250>
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 400087c:	e0bffd17 	ldw	r2,-12(fp)
 4000880:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000884:	e0bffe17 	ldw	r2,-8(fp)
 4000888:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 400088c:	117fffcc 	andi	r5,r2,65535
 4000890:	2960001c 	xori	r5,r5,32768
 4000894:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000898:	e0bffe17 	ldw	r2,-8(fp)
 400089c:	1080008b 	ldhu	r2,2(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008a0:	11bfffcc 	andi	r6,r2,65535
 40008a4:	31a0001c 	xori	r6,r6,32768
 40008a8:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40008ac:	e0bffe17 	ldw	r2,-8(fp)
 40008b0:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008b4:	11ffffcc 	andi	r7,r2,65535
 40008b8:	39e0001c 	xori	r7,r7,32768
 40008bc:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40008c0:	e0bffe17 	ldw	r2,-8(fp)
 40008c4:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40008c8:	e0fffe17 	ldw	r3,-8(fp)
 40008cc:	18c0000b 	ldhu	r3,0(r3)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008d0:	18ffffcc 	andi	r3,r3,65535
 40008d4:	18e0001c 	xori	r3,r3,32768
 40008d8:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40008dc:	d8c00115 	stw	r3,4(sp)
 40008e0:	d8800015 	stw	r2,0(sp)
 40008e4:	4000bc40 	call	4000bc4 <_Z21copy_pix_map_32_to_24PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40008e8:	e0bffd17 	ldw	r2,-12(fp)
 40008ec:	10800217 	ldw	r2,8(r2)
 40008f0:	108000d8 	cmpnei	r2,r2,3
 40008f4:	10001b1e 	bne	r2,zero,4000964 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2cc>
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008f8:	e0bffd17 	ldw	r2,-12(fp)
 40008fc:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000900:	e0bffe17 	ldw	r2,-8(fp)
 4000904:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 4000908:	117fffcc 	andi	r5,r2,65535
 400090c:	2960001c 	xori	r5,r5,32768
 4000910:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000914:	e0bffe17 	ldw	r2,-8(fp)
 4000918:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 400091c:	11bfffcc 	andi	r6,r2,65535
 4000920:	31a0001c 	xori	r6,r6,32768
 4000924:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000928:	e0bffe17 	ldw	r2,-8(fp)
 400092c:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 4000930:	11ffffcc 	andi	r7,r2,65535
 4000934:	39e0001c 	xori	r7,r7,32768
 4000938:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 400093c:	e0bffe17 	ldw	r2,-8(fp)
 4000940:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000944:	e0fffe17 	ldw	r3,-8(fp)
 4000948:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 400094c:	18ffffcc 	andi	r3,r3,65535
 4000950:	18e0001c 	xori	r3,r3,32768
 4000954:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000958:	d8c00115 	stw	r3,4(sp)
 400095c:	d8800015 	stw	r2,0(sp)
 4000960:	4000fc00 	call	4000fc0 <_Z21copy_pix_map_24_to_24PvlllS_l>
  
      }
    }
    if( output_bits_per_pixel == 32 )
 4000964:	e0bfff17 	ldw	r2,-4(fp)
 4000968:	10800818 	cmpnei	r2,r2,32
 400096c:	10003e1e 	bne	r2,zero,4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 4000970:	e0bffd17 	ldw	r2,-12(fp)
 4000974:	10800217 	ldw	r2,8(r2)
 4000978:	10800118 	cmpnei	r2,r2,4
 400097c:	10001b1e 	bne	r2,zero,40009ec <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x354>
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000980:	e0bffd17 	ldw	r2,-12(fp)
 4000984:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000988:	e0bffe17 	ldw	r2,-8(fp)
 400098c:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000990:	117fffcc 	andi	r5,r2,65535
 4000994:	2960001c 	xori	r5,r5,32768
 4000998:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 400099c:	e0bffe17 	ldw	r2,-8(fp)
 40009a0:	1080008b 	ldhu	r2,2(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009a4:	11bfffcc 	andi	r6,r2,65535
 40009a8:	31a0001c 	xori	r6,r6,32768
 40009ac:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40009b0:	e0bffe17 	ldw	r2,-8(fp)
 40009b4:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009b8:	11ffffcc 	andi	r7,r2,65535
 40009bc:	39e0001c 	xori	r7,r7,32768
 40009c0:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40009c4:	e0bffe17 	ldw	r2,-8(fp)
 40009c8:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40009cc:	e0fffe17 	ldw	r3,-8(fp)
 40009d0:	18c0000b 	ldhu	r3,0(r3)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009d4:	18ffffcc 	andi	r3,r3,65535
 40009d8:	18e0001c 	xori	r3,r3,32768
 40009dc:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40009e0:	d8c00115 	stw	r3,4(sp)
 40009e4:	d8800015 	stw	r2,0(sp)
 40009e8:	4000abc0 	call	4000abc <_Z21copy_pix_map_32_to_32PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40009ec:	e0bffd17 	ldw	r2,-12(fp)
 40009f0:	10800217 	ldw	r2,8(r2)
 40009f4:	108000d8 	cmpnei	r2,r2,3
 40009f8:	10001b1e 	bne	r2,zero,4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009fc:	e0bffd17 	ldw	r2,-12(fp)
 4000a00:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000a04:	e0bffe17 	ldw	r2,-8(fp)
 4000a08:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a0c:	117fffcc 	andi	r5,r2,65535
 4000a10:	2960001c 	xori	r5,r5,32768
 4000a14:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000a18:	e0bffe17 	ldw	r2,-8(fp)
 4000a1c:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a20:	11bfffcc 	andi	r6,r2,65535
 4000a24:	31a0001c 	xori	r6,r6,32768
 4000a28:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000a2c:	e0bffe17 	ldw	r2,-8(fp)
 4000a30:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a34:	11ffffcc 	andi	r7,r2,65535
 4000a38:	39e0001c 	xori	r7,r7,32768
 4000a3c:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 4000a40:	e0bffe17 	ldw	r2,-8(fp)
 4000a44:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000a48:	e0fffe17 	ldw	r3,-8(fp)
 4000a4c:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a50:	18ffffcc 	andi	r3,r3,65535
 4000a54:	18e0001c 	xori	r3,r3,32768
 4000a58:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000a5c:	d8c00115 	stw	r3,4(sp)
 4000a60:	d8800015 	stw	r2,0(sp)
 4000a64:	4000e500 	call	4000e50 <_Z21copy_pix_map_24_to_32PvlllS_l>
  
      }
    }
  }
  
  return( ret_code );
 4000a68:	e0bffa17 	ldw	r2,-24(fp)
}
 4000a6c:	e037883a 	mov	sp,fp
 4000a70:	dfc00117 	ldw	ra,4(sp)
 4000a74:	df000017 	ldw	fp,0(sp)
 4000a78:	dec00204 	addi	sp,sp,8
 4000a7c:	f800283a 	ret

04000a80 <_Z18free_gimp_bmp_dataP13bitmap_struct>:

void free_gimp_bmp_data( bitmap_struct *bmp )
{
 4000a80:	defffd04 	addi	sp,sp,-12
 4000a84:	dfc00215 	stw	ra,8(sp)
 4000a88:	df000115 	stw	fp,4(sp)
 4000a8c:	df000104 	addi	fp,sp,4
 4000a90:	e13fff15 	stw	r4,-4(fp)
  free( bmp->data );
 4000a94:	e0bfff17 	ldw	r2,-4(fp)
 4000a98:	10800317 	ldw	r2,12(r2)
 4000a9c:	1009883a 	mov	r4,r2
 4000aa0:	400dec80 	call	400dec8 <free>
}
 4000aa4:	0001883a 	nop
 4000aa8:	e037883a 	mov	sp,fp
 4000aac:	dfc00117 	ldw	ra,4(sp)
 4000ab0:	df000017 	ldw	fp,0(sp)
 4000ab4:	dec00204 	addi	sp,sp,8
 4000ab8:	f800283a 	ret

04000abc <_Z21copy_pix_map_32_to_32PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000abc:	defff504 	addi	sp,sp,-44
 4000ac0:	df000a15 	stw	fp,40(sp)
 4000ac4:	df000a04 	addi	fp,sp,40
 4000ac8:	e13ffc15 	stw	r4,-16(fp)
 4000acc:	e17ffd15 	stw	r5,-12(fp)
 4000ad0:	e1bffe15 	stw	r6,-8(fp)
 4000ad4:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000ad8:	e0ffff17 	ldw	r3,-4(fp)
 4000adc:	e0bfff17 	ldw	r2,-4(fp)
 4000ae0:	1887883a 	add	r3,r3,r2
 4000ae4:	e0bfff17 	ldw	r2,-4(fp)
 4000ae8:	1887883a 	add	r3,r3,r2
 4000aec:	e0bfff17 	ldw	r2,-4(fp)
 4000af0:	1885883a 	add	r2,r3,r2
 4000af4:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
 4000af8:	e0c00217 	ldw	r3,8(fp)
 4000afc:	e0800217 	ldw	r2,8(fp)
 4000b00:	1887883a 	add	r3,r3,r2
 4000b04:	e0800217 	ldw	r2,8(fp)
 4000b08:	1887883a 	add	r3,r3,r2
 4000b0c:	e0800217 	ldw	r2,8(fp)
 4000b10:	1885883a 	add	r2,r3,r2
 4000b14:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000b18:	e03ff615 	stw	zero,-40(fp)
 4000b1c:	e0fff617 	ldw	r3,-40(fp)
 4000b20:	e0bffe17 	ldw	r2,-8(fp)
 4000b24:	1880220e 	bge	r3,r2,4000bb0 <_Z21copy_pix_map_32_to_32PvlllS_l+0xf4>
  {
    src_line_ptr = src_ptr;
 4000b28:	e0bffc17 	ldw	r2,-16(fp)
 4000b2c:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000b30:	e0800117 	ldw	r2,4(fp)
 4000b34:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000b38:	e03ff715 	stw	zero,-36(fp)
 4000b3c:	e0fff717 	ldw	r3,-36(fp)
 4000b40:	e0bffd17 	ldw	r2,-12(fp)
 4000b44:	18800e0e 	bge	r3,r2,4000b80 <_Z21copy_pix_map_32_to_32PvlllS_l+0xc4>
    {
      *(unsigned long *)(dest_line_ptr) = *(unsigned long *)(src_line_ptr);
 4000b48:	e0bff817 	ldw	r2,-32(fp)
 4000b4c:	10c00017 	ldw	r3,0(r2)
 4000b50:	e0bff917 	ldw	r2,-28(fp)
 4000b54:	10c00015 	stw	r3,0(r2)
      src_line_ptr += 4;
 4000b58:	e0bff817 	ldw	r2,-32(fp)
 4000b5c:	10800104 	addi	r2,r2,4
 4000b60:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 4;
 4000b64:	e0bff917 	ldw	r2,-28(fp)
 4000b68:	10800104 	addi	r2,r2,4
 4000b6c:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000b70:	e0bff717 	ldw	r2,-36(fp)
 4000b74:	10800044 	addi	r2,r2,1
 4000b78:	e0bff715 	stw	r2,-36(fp)
 4000b7c:	003fef06 	br	4000b3c <__alt_mem_epcs_flash_controller_0+0xfafffb3c>
    {
      *(unsigned long *)(dest_line_ptr) = *(unsigned long *)(src_line_ptr);
      src_line_ptr += 4;
      dest_line_ptr += 4;
    }
    src_ptr += src_increment;
 4000b80:	e0bffa17 	ldw	r2,-24(fp)
 4000b84:	e0fffc17 	ldw	r3,-16(fp)
 4000b88:	1885883a 	add	r2,r3,r2
 4000b8c:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000b90:	e0bffb17 	ldw	r2,-20(fp)
 4000b94:	e0c00117 	ldw	r3,4(fp)
 4000b98:	1885883a 	add	r2,r3,r2
 4000b9c:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000ba0:	e0bff617 	ldw	r2,-40(fp)
 4000ba4:	10800044 	addi	r2,r2,1
 4000ba8:	e0bff615 	stw	r2,-40(fp)
 4000bac:	003fdb06 	br	4000b1c <__alt_mem_epcs_flash_controller_0+0xfafffb1c>
      dest_line_ptr += 4;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000bb0:	0001883a 	nop
 4000bb4:	e037883a 	mov	sp,fp
 4000bb8:	df000017 	ldw	fp,0(sp)
 4000bbc:	dec00104 	addi	sp,sp,4
 4000bc0:	f800283a 	ret

04000bc4 <_Z21copy_pix_map_32_to_24PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000bc4:	defff504 	addi	sp,sp,-44
 4000bc8:	df000a15 	stw	fp,40(sp)
 4000bcc:	df000a04 	addi	fp,sp,40
 4000bd0:	e13ffc15 	stw	r4,-16(fp)
 4000bd4:	e17ffd15 	stw	r5,-12(fp)
 4000bd8:	e1bffe15 	stw	r6,-8(fp)
 4000bdc:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000be0:	e0ffff17 	ldw	r3,-4(fp)
 4000be4:	e0bfff17 	ldw	r2,-4(fp)
 4000be8:	1887883a 	add	r3,r3,r2
 4000bec:	e0bfff17 	ldw	r2,-4(fp)
 4000bf0:	1887883a 	add	r3,r3,r2
 4000bf4:	e0bfff17 	ldw	r2,-4(fp)
 4000bf8:	1885883a 	add	r2,r3,r2
 4000bfc:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
 4000c00:	e0c00217 	ldw	r3,8(fp)
 4000c04:	e0800217 	ldw	r2,8(fp)
 4000c08:	1887883a 	add	r3,r3,r2
 4000c0c:	e0800217 	ldw	r2,8(fp)
 4000c10:	1885883a 	add	r2,r3,r2
 4000c14:	e0bffb15 	stw	r2,-20(fp)

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000c18:	e03ff615 	stw	zero,-40(fp)
 4000c1c:	e0fff617 	ldw	r3,-40(fp)
 4000c20:	e0bffe17 	ldw	r2,-8(fp)
 4000c24:	1880360e 	bge	r3,r2,4000d00 <_Z21copy_pix_map_32_to_24PvlllS_l+0x13c>
  {
    src_line_ptr = src_ptr;
 4000c28:	e0bffc17 	ldw	r2,-16(fp)
 4000c2c:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000c30:	e0800117 	ldw	r2,4(fp)
 4000c34:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000c38:	e03ff715 	stw	zero,-36(fp)
 4000c3c:	e0fff717 	ldw	r3,-36(fp)
 4000c40:	e0bffd17 	ldw	r2,-12(fp)
 4000c44:	1880220e 	bge	r3,r2,4000cd0 <_Z21copy_pix_map_32_to_24PvlllS_l+0x10c>
    {
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c48:	e0bff817 	ldw	r2,-32(fp)
 4000c4c:	10c00003 	ldbu	r3,0(r2)
 4000c50:	e0bff917 	ldw	r2,-28(fp)
 4000c54:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000c58:	e0bff817 	ldw	r2,-32(fp)
 4000c5c:	10800044 	addi	r2,r2,1
 4000c60:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000c64:	e0bff917 	ldw	r2,-28(fp)
 4000c68:	10800044 	addi	r2,r2,1
 4000c6c:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c70:	e0bff817 	ldw	r2,-32(fp)
 4000c74:	10c00003 	ldbu	r3,0(r2)
 4000c78:	e0bff917 	ldw	r2,-28(fp)
 4000c7c:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000c80:	e0bff817 	ldw	r2,-32(fp)
 4000c84:	10800044 	addi	r2,r2,1
 4000c88:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000c8c:	e0bff917 	ldw	r2,-28(fp)
 4000c90:	10800044 	addi	r2,r2,1
 4000c94:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c98:	e0bff817 	ldw	r2,-32(fp)
 4000c9c:	10c00003 	ldbu	r3,0(r2)
 4000ca0:	e0bff917 	ldw	r2,-28(fp)
 4000ca4:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 2;
 4000ca8:	e0bff817 	ldw	r2,-32(fp)
 4000cac:	10800084 	addi	r2,r2,2
 4000cb0:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000cb4:	e0bff917 	ldw	r2,-28(fp)
 4000cb8:	10800044 	addi	r2,r2,1
 4000cbc:	e0bff915 	stw	r2,-28(fp)

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000cc0:	e0bff717 	ldw	r2,-36(fp)
 4000cc4:	10800044 	addi	r2,r2,1
 4000cc8:	e0bff715 	stw	r2,-36(fp)
 4000ccc:	003fdb06 	br	4000c3c <__alt_mem_epcs_flash_controller_0+0xfafffc3c>
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
      src_line_ptr += 2;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 4000cd0:	e0bffa17 	ldw	r2,-24(fp)
 4000cd4:	e0fffc17 	ldw	r3,-16(fp)
 4000cd8:	1885883a 	add	r2,r3,r2
 4000cdc:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000ce0:	e0bffb17 	ldw	r2,-20(fp)
 4000ce4:	e0c00117 	ldw	r3,4(fp)
 4000ce8:	1885883a 	add	r2,r3,r2
 4000cec:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width;

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000cf0:	e0bff617 	ldw	r2,-40(fp)
 4000cf4:	10800044 	addi	r2,r2,1
 4000cf8:	e0bff615 	stw	r2,-40(fp)
 4000cfc:	003fc706 	br	4000c1c <__alt_mem_epcs_flash_controller_0+0xfafffc1c>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000d00:	0001883a 	nop
 4000d04:	e037883a 	mov	sp,fp
 4000d08:	df000017 	ldw	fp,0(sp)
 4000d0c:	dec00104 	addi	sp,sp,4
 4000d10:	f800283a 	ret

04000d14 <_Z21copy_pix_map_32_to_16PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000d14:	defff304 	addi	sp,sp,-52
 4000d18:	df000c15 	stw	fp,48(sp)
 4000d1c:	df000c04 	addi	fp,sp,48
 4000d20:	e13ffc15 	stw	r4,-16(fp)
 4000d24:	e17ffd15 	stw	r5,-12(fp)
 4000d28:	e1bffe15 	stw	r6,-8(fp)
 4000d2c:	e1ffff15 	stw	r7,-4(fp)
  unsigned long next_long_pixel;
  unsigned short next_short_pixel;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000d30:	e0ffff17 	ldw	r3,-4(fp)
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	1887883a 	add	r3,r3,r2
 4000d3c:	e0bfff17 	ldw	r2,-4(fp)
 4000d40:	1887883a 	add	r3,r3,r2
 4000d44:	e0bfff17 	ldw	r2,-4(fp)
 4000d48:	1885883a 	add	r2,r3,r2
 4000d4c:	e0bff815 	stw	r2,-32(fp)
  dest_increment = dest_line_width + dest_line_width;
 4000d50:	e0c00217 	ldw	r3,8(fp)
 4000d54:	e0800217 	ldw	r2,8(fp)
 4000d58:	1885883a 	add	r2,r3,r2
 4000d5c:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000d60:	e03ff415 	stw	zero,-48(fp)
 4000d64:	e0fff417 	ldw	r3,-48(fp)
 4000d68:	e0bffe17 	ldw	r2,-8(fp)
 4000d6c:	1880330e 	bge	r3,r2,4000e3c <_Z21copy_pix_map_32_to_16PvlllS_l+0x128>
  {
    src_line_ptr = src_ptr;
 4000d70:	e0bffc17 	ldw	r2,-16(fp)
 4000d74:	e0bff615 	stw	r2,-40(fp)
    dest_line_ptr = dest_ptr;
 4000d78:	e0800117 	ldw	r2,4(fp)
 4000d7c:	e0bff715 	stw	r2,-36(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000d80:	e03ff515 	stw	zero,-44(fp)
 4000d84:	e0fff517 	ldw	r3,-44(fp)
 4000d88:	e0bffd17 	ldw	r2,-12(fp)
 4000d8c:	18801f0e 	bge	r3,r2,4000e0c <_Z21copy_pix_map_32_to_16PvlllS_l+0xf8>
    {
      next_long_pixel = *(unsigned long *)(src_line_ptr);
 4000d90:	e0bff617 	ldw	r2,-40(fp)
 4000d94:	10800017 	ldw	r2,0(r2)
 4000d98:	e0bffa15 	stw	r2,-24(fp)
      src_line_ptr += 4;
 4000d9c:	e0bff617 	ldw	r2,-40(fp)
 4000da0:	10800104 	addi	r2,r2,4
 4000da4:	e0bff615 	stw	r2,-40(fp)

      next_short_pixel =  (((next_long_pixel >> 3) & 0x1f) << 11) |
 4000da8:	e0bffa17 	ldw	r2,-24(fp)
 4000dac:	1004d0fa 	srli	r2,r2,3
                          (((next_long_pixel >> 10) & 0x3f) << 5) |
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;
 4000db0:	100492fa 	slli	r2,r2,11
 4000db4:	1007883a 	mov	r3,r2
    {
      next_long_pixel = *(unsigned long *)(src_line_ptr);
      src_line_ptr += 4;

      next_short_pixel =  (((next_long_pixel >> 3) & 0x1f) << 11) |
                          (((next_long_pixel >> 10) & 0x3f) << 5) |
 4000db8:	e0bffa17 	ldw	r2,-24(fp)
 4000dbc:	1004d2ba 	srli	r2,r2,10
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;
 4000dc0:	10800fcc 	andi	r2,r2,63
 4000dc4:	1004917a 	slli	r2,r2,5
 4000dc8:	1884b03a 	or	r2,r3,r2
 4000dcc:	1007883a 	mov	r3,r2
 4000dd0:	e0bffa17 	ldw	r2,-24(fp)
 4000dd4:	1004d4fa 	srli	r2,r2,19
 4000dd8:	108007cc 	andi	r2,r2,31
 4000ddc:	1884b03a 	or	r2,r3,r2
 4000de0:	e0bffb0d 	sth	r2,-20(fp)

      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
 4000de4:	e0bff717 	ldw	r2,-36(fp)
 4000de8:	e0fffb0b 	ldhu	r3,-20(fp)
 4000dec:	10c0000d 	sth	r3,0(r2)
      dest_line_ptr += 2;
 4000df0:	e0bff717 	ldw	r2,-36(fp)
 4000df4:	10800084 	addi	r2,r2,2
 4000df8:	e0bff715 	stw	r2,-36(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000dfc:	e0bff517 	ldw	r2,-44(fp)
 4000e00:	10800044 	addi	r2,r2,1
 4000e04:	e0bff515 	stw	r2,-44(fp)
 4000e08:	003fde06 	br	4000d84 <__alt_mem_epcs_flash_controller_0+0xfafffd84>
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;

      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
 4000e0c:	e0bff817 	ldw	r2,-32(fp)
 4000e10:	e0fffc17 	ldw	r3,-16(fp)
 4000e14:	1885883a 	add	r2,r3,r2
 4000e18:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000e1c:	e0bff917 	ldw	r2,-28(fp)
 4000e20:	e0c00117 	ldw	r3,4(fp)
 4000e24:	1885883a 	add	r2,r3,r2
 4000e28:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000e2c:	e0bff417 	ldw	r2,-48(fp)
 4000e30:	10800044 	addi	r2,r2,1
 4000e34:	e0bff415 	stw	r2,-48(fp)
 4000e38:	003fca06 	br	4000d64 <__alt_mem_epcs_flash_controller_0+0xfafffd64>
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000e3c:	0001883a 	nop
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	df000017 	ldw	fp,0(sp)
 4000e48:	dec00104 	addi	sp,sp,4
 4000e4c:	f800283a 	ret

04000e50 <_Z21copy_pix_map_24_to_32PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000e50:	defff504 	addi	sp,sp,-44
 4000e54:	df000a15 	stw	fp,40(sp)
 4000e58:	df000a04 	addi	fp,sp,40
 4000e5c:	e13ffc15 	stw	r4,-16(fp)
 4000e60:	e17ffd15 	stw	r5,-12(fp)
 4000e64:	e1bffe15 	stw	r6,-8(fp)
 4000e68:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width;
 4000e6c:	e0ffff17 	ldw	r3,-4(fp)
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1887883a 	add	r3,r3,r2
 4000e78:	e0bfff17 	ldw	r2,-4(fp)
 4000e7c:	1885883a 	add	r2,r3,r2
 4000e80:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
 4000e84:	e0c00217 	ldw	r3,8(fp)
 4000e88:	e0800217 	ldw	r2,8(fp)
 4000e8c:	1887883a 	add	r3,r3,r2
 4000e90:	e0800217 	ldw	r2,8(fp)
 4000e94:	1887883a 	add	r3,r3,r2
 4000e98:	e0800217 	ldw	r2,8(fp)
 4000e9c:	1885883a 	add	r2,r3,r2
 4000ea0:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000ea4:	e03ff615 	stw	zero,-40(fp)
 4000ea8:	e0fff617 	ldw	r3,-40(fp)
 4000eac:	e0bffe17 	ldw	r2,-8(fp)
 4000eb0:	18803e0e 	bge	r3,r2,4000fac <_Z21copy_pix_map_24_to_32PvlllS_l+0x15c>
  {
    src_line_ptr = src_ptr;
 4000eb4:	e0bffc17 	ldw	r2,-16(fp)
 4000eb8:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000ebc:	e0800117 	ldw	r2,4(fp)
 4000ec0:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000ec4:	e03ff715 	stw	zero,-36(fp)
 4000ec8:	e0fff717 	ldw	r3,-36(fp)
 4000ecc:	e0bffd17 	ldw	r2,-12(fp)
 4000ed0:	18802a0e 	bge	r3,r2,4000f7c <_Z21copy_pix_map_24_to_32PvlllS_l+0x12c>
    {
      *(unsigned char *)(dest_line_ptr + 2)  = *(unsigned char *)(src_line_ptr);
 4000ed4:	e0bff917 	ldw	r2,-28(fp)
 4000ed8:	10800084 	addi	r2,r2,2
 4000edc:	e0fff817 	ldw	r3,-32(fp)
 4000ee0:	18c00003 	ldbu	r3,0(r3)
 4000ee4:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000ee8:	e0bff817 	ldw	r2,-32(fp)
 4000eec:	10800044 	addi	r2,r2,1
 4000ef0:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000ef4:	e0bff917 	ldw	r2,-28(fp)
 4000ef8:	10800044 	addi	r2,r2,1
 4000efc:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr)  = *(unsigned char *)(src_line_ptr);
 4000f00:	e0bff817 	ldw	r2,-32(fp)
 4000f04:	10c00003 	ldbu	r3,0(r2)
 4000f08:	e0bff917 	ldw	r2,-28(fp)
 4000f0c:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000f10:	e0bff817 	ldw	r2,-32(fp)
 4000f14:	10800044 	addi	r2,r2,1
 4000f18:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000f1c:	e0bff917 	ldw	r2,-28(fp)
 4000f20:	10800044 	addi	r2,r2,1
 4000f24:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr - 2)  = *(unsigned char *)(src_line_ptr);
 4000f28:	e0bff917 	ldw	r2,-28(fp)
 4000f2c:	10bfff84 	addi	r2,r2,-2
 4000f30:	e0fff817 	ldw	r3,-32(fp)
 4000f34:	18c00003 	ldbu	r3,0(r3)
 4000f38:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000f3c:	e0bff817 	ldw	r2,-32(fp)
 4000f40:	10800044 	addi	r2,r2,1
 4000f44:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000f48:	e0bff917 	ldw	r2,-28(fp)
 4000f4c:	10800044 	addi	r2,r2,1
 4000f50:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr)  = 0xff;
 4000f54:	e0bff917 	ldw	r2,-28(fp)
 4000f58:	00ffffc4 	movi	r3,-1
 4000f5c:	10c00005 	stb	r3,0(r2)
      dest_line_ptr += 1;
 4000f60:	e0bff917 	ldw	r2,-28(fp)
 4000f64:	10800044 	addi	r2,r2,1
 4000f68:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000f6c:	e0bff717 	ldw	r2,-36(fp)
 4000f70:	10800044 	addi	r2,r2,1
 4000f74:	e0bff715 	stw	r2,-36(fp)
 4000f78:	003fd306 	br	4000ec8 <__alt_mem_epcs_flash_controller_0+0xfafffec8>
      src_line_ptr += 1;
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr)  = 0xff;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 4000f7c:	e0bffa17 	ldw	r2,-24(fp)
 4000f80:	e0fffc17 	ldw	r3,-16(fp)
 4000f84:	1885883a 	add	r2,r3,r2
 4000f88:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000f8c:	e0bffb17 	ldw	r2,-20(fp)
 4000f90:	e0c00117 	ldw	r3,4(fp)
 4000f94:	1885883a 	add	r2,r3,r2
 4000f98:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000f9c:	e0bff617 	ldw	r2,-40(fp)
 4000fa0:	10800044 	addi	r2,r2,1
 4000fa4:	e0bff615 	stw	r2,-40(fp)
 4000fa8:	003fbf06 	br	4000ea8 <__alt_mem_epcs_flash_controller_0+0xfafffea8>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000fac:	0001883a 	nop
 4000fb0:	e037883a 	mov	sp,fp
 4000fb4:	df000017 	ldw	fp,0(sp)
 4000fb8:	dec00104 	addi	sp,sp,4
 4000fbc:	f800283a 	ret

04000fc0 <_Z21copy_pix_map_24_to_24PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000fc0:	defff504 	addi	sp,sp,-44
 4000fc4:	df000a15 	stw	fp,40(sp)
 4000fc8:	df000a04 	addi	fp,sp,40
 4000fcc:	e13ffc15 	stw	r4,-16(fp)
 4000fd0:	e17ffd15 	stw	r5,-12(fp)
 4000fd4:	e1bffe15 	stw	r6,-8(fp)
 4000fd8:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
 4000fdc:	e0ffff17 	ldw	r3,-4(fp)
 4000fe0:	e0bfff17 	ldw	r2,-4(fp)
 4000fe4:	1887883a 	add	r3,r3,r2
 4000fe8:	e0bfff17 	ldw	r2,-4(fp)
 4000fec:	1885883a 	add	r2,r3,r2
 4000ff0:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
 4000ff4:	e0c00217 	ldw	r3,8(fp)
 4000ff8:	e0800217 	ldw	r2,8(fp)
 4000ffc:	1887883a 	add	r3,r3,r2
 4001000:	e0800217 	ldw	r2,8(fp)
 4001004:	1885883a 	add	r2,r3,r2
 4001008:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 400100c:	e03ff615 	stw	zero,-40(fp)
 4001010:	e0fff617 	ldw	r3,-40(fp)
 4001014:	e0bffe17 	ldw	r2,-8(fp)
 4001018:	1880360e 	bge	r3,r2,40010f4 <_Z21copy_pix_map_24_to_24PvlllS_l+0x134>
  {
    src_line_ptr = src_ptr;
 400101c:	e0bffc17 	ldw	r2,-16(fp)
 4001020:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4001024:	e0800117 	ldw	r2,4(fp)
 4001028:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 400102c:	e03ff715 	stw	zero,-36(fp)
 4001030:	e0fff717 	ldw	r3,-36(fp)
 4001034:	e0bffd17 	ldw	r2,-12(fp)
 4001038:	1880220e 	bge	r3,r2,40010c4 <_Z21copy_pix_map_24_to_24PvlllS_l+0x104>
    {
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 400103c:	e0bff817 	ldw	r2,-32(fp)
 4001040:	10c00003 	ldbu	r3,0(r2)
 4001044:	e0bff917 	ldw	r2,-28(fp)
 4001048:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 400104c:	e0bff817 	ldw	r2,-32(fp)
 4001050:	10800044 	addi	r2,r2,1
 4001054:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4001058:	e0bff917 	ldw	r2,-28(fp)
 400105c:	10800044 	addi	r2,r2,1
 4001060:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 4001064:	e0bff817 	ldw	r2,-32(fp)
 4001068:	10c00003 	ldbu	r3,0(r2)
 400106c:	e0bff917 	ldw	r2,-28(fp)
 4001070:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4001074:	e0bff817 	ldw	r2,-32(fp)
 4001078:	10800044 	addi	r2,r2,1
 400107c:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4001080:	e0bff917 	ldw	r2,-28(fp)
 4001084:	10800044 	addi	r2,r2,1
 4001088:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 400108c:	e0bff817 	ldw	r2,-32(fp)
 4001090:	10c00003 	ldbu	r3,0(r2)
 4001094:	e0bff917 	ldw	r2,-28(fp)
 4001098:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 400109c:	e0bff817 	ldw	r2,-32(fp)
 40010a0:	10800044 	addi	r2,r2,1
 40010a4:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 40010a8:	e0bff917 	ldw	r2,-28(fp)
 40010ac:	10800044 	addi	r2,r2,1
 40010b0:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 40010b4:	e0bff717 	ldw	r2,-36(fp)
 40010b8:	10800044 	addi	r2,r2,1
 40010bc:	e0bff715 	stw	r2,-36(fp)
 40010c0:	003fdb06 	br	4001030 <__alt_mem_epcs_flash_controller_0+0xfb000030>
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
      src_line_ptr += 1;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 40010c4:	e0bffa17 	ldw	r2,-24(fp)
 40010c8:	e0fffc17 	ldw	r3,-16(fp)
 40010cc:	1885883a 	add	r2,r3,r2
 40010d0:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 40010d4:	e0bffb17 	ldw	r2,-20(fp)
 40010d8:	e0c00117 	ldw	r3,4(fp)
 40010dc:	1885883a 	add	r2,r3,r2
 40010e0:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 40010e4:	e0bff617 	ldw	r2,-40(fp)
 40010e8:	10800044 	addi	r2,r2,1
 40010ec:	e0bff615 	stw	r2,-40(fp)
 40010f0:	003fc706 	br	4001010 <__alt_mem_epcs_flash_controller_0+0xfb000010>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 40010f4:	0001883a 	nop
 40010f8:	e037883a 	mov	sp,fp
 40010fc:	df000017 	ldw	fp,0(sp)
 4001100:	dec00104 	addi	sp,sp,4
 4001104:	f800283a 	ret

04001108 <_Z21copy_pix_map_24_to_16PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4001108:	defff404 	addi	sp,sp,-48
 400110c:	df000b15 	stw	fp,44(sp)
 4001110:	df000b04 	addi	fp,sp,44
 4001114:	e13ffc15 	stw	r4,-16(fp)
 4001118:	e17ffd15 	stw	r5,-12(fp)
 400111c:	e1bffe15 	stw	r6,-8(fp)
 4001120:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  unsigned short next_short_pixel;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
 4001124:	e0ffff17 	ldw	r3,-4(fp)
 4001128:	e0bfff17 	ldw	r2,-4(fp)
 400112c:	1887883a 	add	r3,r3,r2
 4001130:	e0bfff17 	ldw	r2,-4(fp)
 4001134:	1885883a 	add	r2,r3,r2
 4001138:	e0bff915 	stw	r2,-28(fp)
  dest_increment = dest_line_width + dest_line_width;
 400113c:	e0c00217 	ldw	r3,8(fp)
 4001140:	e0800217 	ldw	r2,8(fp)
 4001144:	1885883a 	add	r2,r3,r2
 4001148:	e0bffa15 	stw	r2,-24(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 400114c:	e03ff515 	stw	zero,-44(fp)
 4001150:	e0fff517 	ldw	r3,-44(fp)
 4001154:	e0bffe17 	ldw	r2,-8(fp)
 4001158:	18803e0e 	bge	r3,r2,4001254 <_Z21copy_pix_map_24_to_16PvlllS_l+0x14c>
  {
    src_line_ptr = src_ptr;
 400115c:	e0bffc17 	ldw	r2,-16(fp)
 4001160:	e0bff715 	stw	r2,-36(fp)
    dest_line_ptr = dest_ptr;
 4001164:	e0800117 	ldw	r2,4(fp)
 4001168:	e0bff815 	stw	r2,-32(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 400116c:	e03ff615 	stw	zero,-40(fp)
 4001170:	e0fff617 	ldw	r3,-40(fp)
 4001174:	e0bffd17 	ldw	r2,-12(fp)
 4001178:	18802a0e 	bge	r3,r2,4001224 <_Z21copy_pix_map_24_to_16PvlllS_l+0x11c>
    {
      next_short_pixel  = ((*(unsigned char *)(src_line_ptr)) & 0xf8) << 8 ;
 400117c:	e0bff717 	ldw	r2,-36(fp)
 4001180:	10800003 	ldbu	r2,0(r2)
 4001184:	10803fcc 	andi	r2,r2,255
 4001188:	10803e0c 	andi	r2,r2,248
 400118c:	1004923a 	slli	r2,r2,8
 4001190:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 4001194:	e0bff717 	ldw	r2,-36(fp)
 4001198:	10800044 	addi	r2,r2,1
 400119c:	e0bff715 	stw	r2,-36(fp)
      next_short_pixel |= ((*(unsigned char *)(src_line_ptr)) & 0xfc) << 3;
 40011a0:	e0bff717 	ldw	r2,-36(fp)
 40011a4:	10800003 	ldbu	r2,0(r2)
 40011a8:	10803fcc 	andi	r2,r2,255
 40011ac:	10803f0c 	andi	r2,r2,252
 40011b0:	100490fa 	slli	r2,r2,3
 40011b4:	1007883a 	mov	r3,r2
 40011b8:	e0bffb0b 	ldhu	r2,-20(fp)
 40011bc:	1884b03a 	or	r2,r3,r2
 40011c0:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 40011c4:	e0bff717 	ldw	r2,-36(fp)
 40011c8:	10800044 	addi	r2,r2,1
 40011cc:	e0bff715 	stw	r2,-36(fp)
      next_short_pixel |= ((*(unsigned char *)(src_line_ptr)) & 0xf8) >> 3;
 40011d0:	e0bff717 	ldw	r2,-36(fp)
 40011d4:	10800003 	ldbu	r2,0(r2)
 40011d8:	10803fcc 	andi	r2,r2,255
 40011dc:	1004d0fa 	srli	r2,r2,3
 40011e0:	10c03fcc 	andi	r3,r2,255
 40011e4:	e0bffb0b 	ldhu	r2,-20(fp)
 40011e8:	1884b03a 	or	r2,r3,r2
 40011ec:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 40011f0:	e0bff717 	ldw	r2,-36(fp)
 40011f4:	10800044 	addi	r2,r2,1
 40011f8:	e0bff715 	stw	r2,-36(fp)
  
      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
 40011fc:	e0bff817 	ldw	r2,-32(fp)
 4001200:	e0fffb0b 	ldhu	r3,-20(fp)
 4001204:	10c0000d 	sth	r3,0(r2)
      dest_line_ptr += 2;
 4001208:	e0bff817 	ldw	r2,-32(fp)
 400120c:	10800084 	addi	r2,r2,2
 4001210:	e0bff815 	stw	r2,-32(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4001214:	e0bff617 	ldw	r2,-40(fp)
 4001218:	10800044 	addi	r2,r2,1
 400121c:	e0bff615 	stw	r2,-40(fp)
 4001220:	003fd306 	br	4001170 <__alt_mem_epcs_flash_controller_0+0xfb000170>
      src_line_ptr += 1;
  
      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
 4001224:	e0bff917 	ldw	r2,-28(fp)
 4001228:	e0fffc17 	ldw	r3,-16(fp)
 400122c:	1885883a 	add	r2,r3,r2
 4001230:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4001234:	e0bffa17 	ldw	r2,-24(fp)
 4001238:	e0c00117 	ldw	r3,4(fp)
 400123c:	1885883a 	add	r2,r3,r2
 4001240:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4001244:	e0bff517 	ldw	r2,-44(fp)
 4001248:	10800044 	addi	r2,r2,1
 400124c:	e0bff515 	stw	r2,-44(fp)
 4001250:	003fbf06 	br	4001150 <__alt_mem_epcs_flash_controller_0+0xfb000150>
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4001254:	0001883a 	nop
 4001258:	e037883a 	mov	sp,fp
 400125c:	df000017 	ldw	fp,0(sp)
 4001260:	dec00104 	addi	sp,sp,4
 4001264:	f800283a 	ret

04001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4001268:	defffa04 	addi	sp,sp,-24
 400126c:	dfc00515 	stw	ra,20(sp)
 4001270:	df000415 	stw	fp,16(sp)
 4001274:	df000404 	addi	fp,sp,16
 4001278:	e13ffe15 	stw	r4,-8(fp)
 400127c:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4001280:	e0bffe17 	ldw	r2,-8(fp)
 4001284:	10c00517 	ldw	r3,20(r2)
 4001288:	e0bffe17 	ldw	r2,-8(fp)
 400128c:	11000617 	ldw	r4,24(r2)
 4001290:	e0bffe17 	ldw	r2,-8(fp)
 4001294:	d8800115 	stw	r2,4(sp)
 4001298:	e0bfff17 	ldw	r2,-4(fp)
 400129c:	d8800015 	stw	r2,0(sp)
 40012a0:	200f883a 	mov	r7,r4
 40012a4:	180d883a 	mov	r6,r3
 40012a8:	000b883a 	mov	r5,zero
 40012ac:	0009883a 	mov	r4,zero
 40012b0:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
}
 40012b4:	0001883a 	nop
 40012b8:	e037883a 	mov	sp,fp
 40012bc:	dfc00117 	ldw	ra,4(sp)
 40012c0:	df000017 	ldw	fp,0(sp)
 40012c4:	dec00204 	addi	sp,sp,8
 40012c8:	f800283a 	ret

040012cc <_Z22vid_scroll_string_quitP22vid_text_scroll_struct>:
}



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 40012cc:	defffd04 	addi	sp,sp,-12
 40012d0:	dfc00215 	stw	ra,8(sp)
 40012d4:	df000115 	stw	fp,4(sp)
 40012d8:	df000104 	addi	fp,sp,4
 40012dc:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 40012e0:	e0bfff17 	ldw	r2,-4(fp)
 40012e4:	10800517 	ldw	r2,20(r2)
 40012e8:	1009883a 	mov	r4,r2
 40012ec:	400dec80 	call	400dec8 <free>
  free(scroll);
 40012f0:	e13fff17 	ldw	r4,-4(fp)
 40012f4:	400dec80 	call	400dec8 <free>
}
 40012f8:	0001883a 	nop
 40012fc:	e037883a 	mov	sp,fp
 4001300:	dfc00117 	ldw	ra,4(sp)
 4001304:	df000017 	ldw	fp,0(sp)
 4001308:	dec00204 	addi	sp,sp,8
 400130c:	f800283a 	ret

04001310 <_Z22vid_scroll_string_initiiiiiPciS_>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 4001310:	defff904 	addi	sp,sp,-28
 4001314:	dfc00615 	stw	ra,24(sp)
 4001318:	df000515 	stw	fp,20(sp)
 400131c:	df000504 	addi	fp,sp,20
 4001320:	e13ffc15 	stw	r4,-16(fp)
 4001324:	e17ffd15 	stw	r5,-12(fp)
 4001328:	e1bffe15 	stw	r6,-8(fp)
 400132c:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = (vid_text_scroll_struct *)malloc(sizeof (vid_text_scroll_struct));
 4001330:	01000f04 	movi	r4,60
 4001334:	400deb40 	call	400deb4 <malloc>
 4001338:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 400133c:	e0bffb17 	ldw	r2,-20(fp)
 4001340:	e0fffc17 	ldw	r3,-16(fp)
 4001344:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 4001348:	e0bffb17 	ldw	r2,-20(fp)
 400134c:	e0fffd17 	ldw	r3,-12(fp)
 4001350:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 4001354:	e0bffb17 	ldw	r2,-20(fp)
 4001358:	e0fffe17 	ldw	r3,-8(fp)
 400135c:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 4001360:	e0bffb17 	ldw	r2,-20(fp)
 4001364:	e0ffff17 	ldw	r3,-4(fp)
 4001368:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 400136c:	e0bffb17 	ldw	r2,-20(fp)
 4001370:	e0c00217 	ldw	r3,8(fp)
 4001374:	10c00415 	stw	r3,16(r2)
  scroll->string = (char *)malloc(strlen(string)+2);
 4001378:	e1000517 	ldw	r4,20(fp)
 400137c:	400ec400 	call	400ec40 <strlen>
 4001380:	10800084 	addi	r2,r2,2
 4001384:	1009883a 	mov	r4,r2
 4001388:	400deb40 	call	400deb4 <malloc>
 400138c:	1007883a 	mov	r3,r2
 4001390:	e0bffb17 	ldw	r2,-20(fp)
 4001394:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4001398:	e0bffb17 	ldw	r2,-20(fp)
 400139c:	10800517 	ldw	r2,20(r2)
 40013a0:	e1400517 	ldw	r5,20(fp)
 40013a4:	1009883a 	mov	r4,r2
 40013a8:	400ebb00 	call	400ebb0 <strcpy>
  scroll->font = font;
 40013ac:	e0bffb17 	ldw	r2,-20(fp)
 40013b0:	e0c00317 	ldw	r3,12(fp)
 40013b4:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 40013b8:	e0bffb17 	ldw	r2,-20(fp)
 40013bc:	e0c00417 	ldw	r3,16(fp)
 40013c0:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40013c4:	d0a02117 	ldw	r2,-32636(gp)
  scroll->ticks_at_last_move = alt_nticks();
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	e0bffb17 	ldw	r2,-20(fp)
 40013d0:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 40013d4:	e0bffb17 	ldw	r2,-20(fp)
 40013d8:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 40013dc:	e0bffb17 	ldw	r2,-20(fp)
 40013e0:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 40013e4:	e0bffb17 	ldw	r2,-20(fp)
 40013e8:	10c00217 	ldw	r3,8(r2)
 40013ec:	e0bffb17 	ldw	r2,-20(fp)
 40013f0:	10800017 	ldw	r2,0(r2)
 40013f4:	1887c83a 	sub	r3,r3,r2
 40013f8:	e0bffb17 	ldw	r2,-20(fp)
 40013fc:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 4001400:	e1000517 	ldw	r4,20(fp)
 4001404:	400ec400 	call	400ec40 <strlen>
 4001408:	1007883a 	mov	r3,r2
 400140c:	e0bffb17 	ldw	r2,-20(fp)
 4001410:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 4001414:	e0bffb17 	ldw	r2,-20(fp)
 4001418:	10800c17 	ldw	r2,48(r2)
 400141c:	100690fa 	slli	r3,r2,3
 4001420:	e0bffb17 	ldw	r2,-20(fp)
 4001424:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 4001428:	e0bffb17 	ldw	r2,-20(fp)
 400142c:	10c00b17 	ldw	r3,44(r2)
 4001430:	e0bffb17 	ldw	r2,-20(fp)
 4001434:	10800e17 	ldw	r2,56(r2)
 4001438:	1887883a 	add	r3,r3,r2
 400143c:	e0bffb17 	ldw	r2,-20(fp)
 4001440:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 4001444:	e0bffb17 	ldw	r2,-20(fp)
  
}
 4001448:	e037883a 	mov	sp,fp
 400144c:	dfc00117 	ldw	ra,4(sp)
 4001450:	df000017 	ldw	fp,0(sp)
 4001454:	dec00204 	addi	sp,sp,8
 4001458:	f800283a 	ret

0400145c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 400145c:	deffec04 	addi	sp,sp,-80
 4001460:	dfc01315 	stw	ra,76(sp)
 4001464:	df001215 	stw	fp,72(sp)
 4001468:	dc401115 	stw	r17,68(sp)
 400146c:	dc001015 	stw	r16,64(sp)
 4001470:	df001204 	addi	fp,sp,72
 4001474:	e13ffc15 	stw	r4,-16(fp)
 4001478:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 400147c:	00800044 	movi	r2,1
 4001480:	e0bff605 	stb	r2,-40(fp)
 4001484:	d4202117 	ldw	r16,-32636(gp)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4001488:	e0bffc17 	ldw	r2,-16(fp)
 400148c:	10800817 	ldw	r2,32(r2)
 4001490:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001494:	d0a02017 	ldw	r2,-32640(gp)
 4001498:	e0fffc17 	ldw	r3,-16(fp)
 400149c:	18c00717 	ldw	r3,28(r3)
 40014a0:	10c5383a 	mul	r2,r2,r3
 40014a4:	0140fa04 	movi	r5,1000
 40014a8:	1009883a 	mov	r4,r2
 40014ac:	400a1140 	call	400a114 <__udivsi3>
 40014b0:	8885883a 	add	r2,r17,r2
 40014b4:	8085403a 	cmpgeu	r2,r16,r2
 40014b8:	10803fcc 	andi	r2,r2,255
 40014bc:	1000b926 	beq	r2,zero,40017a4 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x348>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40014c0:	d0a02117 	ldw	r2,-32636(gp)
    scroll->ticks_at_last_move = alt_nticks();
 40014c4:	1007883a 	mov	r3,r2
 40014c8:	e0bffc17 	ldw	r2,-16(fp)
 40014cc:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 40014d0:	e0bffc17 	ldw	r2,-16(fp)
 40014d4:	10800a03 	ldbu	r2,40(r2)
 40014d8:	10803fcc 	andi	r2,r2,255
 40014dc:	1080201c 	xori	r2,r2,128
 40014e0:	10bfe004 	addi	r2,r2,-128
 40014e4:	1000061e 	bne	r2,zero,4001500 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xa4>
      scroll->text_scroll_index = 0;
 40014e8:	e0bffc17 	ldw	r2,-16(fp)
 40014ec:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 40014f0:	e0bffc17 	ldw	r2,-16(fp)
 40014f4:	00c00044 	movi	r3,1
 40014f8:	10c00a05 	stb	r3,40(r2)
 40014fc:	00000e06 	br	4001538 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xdc>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 4001500:	e0bffc17 	ldw	r2,-16(fp)
 4001504:	10c00917 	ldw	r3,36(r2)
 4001508:	e0bffc17 	ldw	r2,-16(fp)
 400150c:	10800d17 	ldw	r2,52(r2)
 4001510:	18800316 	blt	r3,r2,4001520 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xc4>
      scroll->text_scroll_started = 0;
 4001514:	e0bffc17 	ldw	r2,-16(fp)
 4001518:	10000a05 	stb	zero,40(r2)
 400151c:	00000606 	br	4001538 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xdc>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 4001520:	e0bffc17 	ldw	r2,-16(fp)
 4001524:	10c00917 	ldw	r3,36(r2)
 4001528:	e0bff607 	ldb	r2,-40(fp)
 400152c:	1887883a 	add	r3,r3,r2
 4001530:	e0bffc17 	ldw	r2,-16(fp)
 4001534:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 4001538:	e0bffc17 	ldw	r2,-16(fp)
 400153c:	10c00917 	ldw	r3,36(r2)
 4001540:	e0bffc17 	ldw	r2,-16(fp)
 4001544:	10800b17 	ldw	r2,44(r2)
 4001548:	18800a0e 	bge	r3,r2,4001574 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x118>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 400154c:	e0bffc17 	ldw	r2,-16(fp)
 4001550:	10c00017 	ldw	r3,0(r2)
 4001554:	e0bffc17 	ldw	r2,-16(fp)
 4001558:	10800b17 	ldw	r2,44(r2)
 400155c:	1887883a 	add	r3,r3,r2
 4001560:	e0bffc17 	ldw	r2,-16(fp)
 4001564:	10800917 	ldw	r2,36(r2)
 4001568:	1885c83a 	sub	r2,r3,r2
 400156c:	e0bff115 	stw	r2,-60(fp)
 4001570:	00000306 	br	4001580 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x124>
    } else {
      x_start = scroll->hbegin;
 4001574:	e0bffc17 	ldw	r2,-16(fp)
 4001578:	10800017 	ldw	r2,0(r2)
 400157c:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4001580:	e0bffc17 	ldw	r2,-16(fp)
 4001584:	10800e17 	ldw	r2,56(r2)
 4001588:	e0fffc17 	ldw	r3,-16(fp)
 400158c:	18c00917 	ldw	r3,36(r3)
 4001590:	1880040e 	bge	r3,r2,40015a4 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x148>
      x_end = scroll->hend;
 4001594:	e0bffc17 	ldw	r2,-16(fp)
 4001598:	10800217 	ldw	r2,8(r2)
 400159c:	e0bff215 	stw	r2,-56(fp)
 40015a0:	00000906 	br	40015c8 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x16c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 40015a4:	e0bffc17 	ldw	r2,-16(fp)
 40015a8:	10c00217 	ldw	r3,8(r2)
 40015ac:	e0bffc17 	ldw	r2,-16(fp)
 40015b0:	10800917 	ldw	r2,36(r2)
 40015b4:	1887c83a 	sub	r3,r3,r2
 40015b8:	e0bffc17 	ldw	r2,-16(fp)
 40015bc:	10800e17 	ldw	r2,56(r2)
 40015c0:	1885883a 	add	r2,r3,r2
 40015c4:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 40015c8:	e0bff117 	ldw	r2,-60(fp)
 40015cc:	e0bff315 	stw	r2,-52(fp)
 40015d0:	e0fff317 	ldw	r3,-52(fp)
 40015d4:	e0bff217 	ldw	r2,-56(fp)
 40015d8:	1880610e 	bge	r3,r2,4001760 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x304>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 40015dc:	e0bffc17 	ldw	r2,-16(fp)
 40015e0:	10c00917 	ldw	r3,36(r2)
 40015e4:	e0bffc17 	ldw	r2,-16(fp)
 40015e8:	10800b17 	ldw	r2,44(r2)
 40015ec:	1880050e 	bge	r3,r2,4001604 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1a8>
        string_x_index = (x_index - x_start);
 40015f0:	e0fff317 	ldw	r3,-52(fp)
 40015f4:	e0bff117 	ldw	r2,-60(fp)
 40015f8:	1885c83a 	sub	r2,r3,r2
 40015fc:	e0bff415 	stw	r2,-48(fp)
 4001600:	00000a06 	br	400162c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1d0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 4001604:	e0bffc17 	ldw	r2,-16(fp)
 4001608:	10c00917 	ldw	r3,36(r2)
 400160c:	e0bffc17 	ldw	r2,-16(fp)
 4001610:	10800b17 	ldw	r2,44(r2)
 4001614:	1887c83a 	sub	r3,r3,r2
 4001618:	e0bff317 	ldw	r2,-52(fp)
 400161c:	1887883a 	add	r3,r3,r2
 4001620:	e0bff117 	ldw	r2,-60(fp)
 4001624:	1885c83a 	sub	r2,r3,r2
 4001628:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 400162c:	e0bff417 	ldw	r2,-48(fp)
 4001630:	1000010e 	bge	r2,zero,4001638 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1dc>
 4001634:	108001c4 	addi	r2,r2,7
 4001638:	1005d0fa 	srai	r2,r2,3
 400163c:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 4001640:	e0bffc17 	ldw	r2,-16(fp)
 4001644:	10c00517 	ldw	r3,20(r2)
 4001648:	e0bff717 	ldw	r2,-36(fp)
 400164c:	1885883a 	add	r2,r3,r2
 4001650:	10800003 	ldbu	r2,0(r2)
 4001654:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 4001658:	e0fff417 	ldw	r3,-48(fp)
 400165c:	00a00034 	movhi	r2,32768
 4001660:	108001c4 	addi	r2,r2,7
 4001664:	1884703a 	and	r2,r3,r2
 4001668:	1000040e 	bge	r2,zero,400167c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x220>
 400166c:	10bfffc4 	addi	r2,r2,-1
 4001670:	00fffe04 	movi	r3,-8
 4001674:	10c4b03a 	or	r2,r2,r3
 4001678:	10800044 	addi	r2,r2,1
 400167c:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 4001680:	00c02004 	movi	r3,128
 4001684:	e0bff917 	ldw	r2,-28(fp)
 4001688:	1884d83a 	srl	r2,r3,r2
 400168c:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 4001690:	e0bffc17 	ldw	r2,-16(fp)
 4001694:	10800617 	ldw	r2,24(r2)
 4001698:	e0fff807 	ldb	r3,-32(fp)
 400169c:	18fff804 	addi	r3,r3,-32
 40016a0:	18c002e4 	muli	r3,r3,11
 40016a4:	10c5883a 	add	r2,r2,r3
 40016a8:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 40016ac:	e03ff515 	stw	zero,-44(fp)
 40016b0:	e0bff517 	ldw	r2,-44(fp)
 40016b4:	108002c8 	cmpgei	r2,r2,11
 40016b8:	1000251e 	bne	r2,zero,4001750 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2f4>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 40016bc:	e0bff517 	ldw	r2,-44(fp)
 40016c0:	e0fffb17 	ldw	r3,-20(fp)
 40016c4:	1885883a 	add	r2,r3,r2
 40016c8:	10c00003 	ldbu	r3,0(r2)
 40016cc:	e0bffa03 	ldbu	r2,-24(fp)
 40016d0:	1884703a 	and	r2,r3,r2
 40016d4:	10803fcc 	andi	r2,r2,255
 40016d8:	1080201c 	xori	r2,r2,128
 40016dc:	10bfe004 	addi	r2,r2,-128
 40016e0:	10000c26 	beq	r2,zero,4001714 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2b8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 40016e4:	e0bffc17 	ldw	r2,-16(fp)
 40016e8:	10c00117 	ldw	r3,4(r2)
 40016ec:	e0bff517 	ldw	r2,-44(fp)
 40016f0:	1887883a 	add	r3,r3,r2
 40016f4:	e0bffc17 	ldw	r2,-16(fp)
 40016f8:	10800317 	ldw	r2,12(r2)
 40016fc:	e1fffd17 	ldw	r7,-12(fp)
 4001700:	100d883a 	mov	r6,r2
 4001704:	180b883a 	mov	r5,r3
 4001708:	e13ff317 	ldw	r4,-52(fp)
 400170c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
 4001710:	00000b06 	br	4001740 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2e4>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 4001714:	e0bffc17 	ldw	r2,-16(fp)
 4001718:	10c00117 	ldw	r3,4(r2)
 400171c:	e0bff517 	ldw	r2,-44(fp)
 4001720:	1887883a 	add	r3,r3,r2
 4001724:	e0bffc17 	ldw	r2,-16(fp)
 4001728:	10800417 	ldw	r2,16(r2)
 400172c:	e1fffd17 	ldw	r7,-12(fp)
 4001730:	100d883a 	mov	r6,r2
 4001734:	180b883a 	mov	r5,r3
 4001738:	e13ff317 	ldw	r4,-52(fp)
 400173c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4001740:	e0bff517 	ldw	r2,-44(fp)
 4001744:	10800044 	addi	r2,r2,1
 4001748:	e0bff515 	stw	r2,-44(fp)
 400174c:	003fd806 	br	40016b0 <__alt_mem_epcs_flash_controller_0+0xfb0006b0>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4001750:	e0bff317 	ldw	r2,-52(fp)
 4001754:	10800044 	addi	r2,r2,1
 4001758:	e0bff315 	stw	r2,-52(fp)
 400175c:	003f9c06 	br	40015d0 <__alt_mem_epcs_flash_controller_0+0xfb0005d0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 4001760:	e0bffc17 	ldw	r2,-16(fp)
 4001764:	11000117 	ldw	r4,4(r2)
 4001768:	e0bffc17 	ldw	r2,-16(fp)
 400176c:	10800117 	ldw	r2,4(r2)
 4001770:	11400284 	addi	r5,r2,10
 4001774:	e0bffc17 	ldw	r2,-16(fp)
 4001778:	10800417 	ldw	r2,16(r2)
 400177c:	e0fffd17 	ldw	r3,-12(fp)
 4001780:	d8c00215 	stw	r3,8(sp)
 4001784:	d8800115 	stw	r2,4(sp)
 4001788:	00800044 	movi	r2,1
 400178c:	d8800015 	stw	r2,0(sp)
 4001790:	280f883a 	mov	r7,r5
 4001794:	e1bff217 	ldw	r6,-56(fp)
 4001798:	200b883a 	mov	r5,r4
 400179c:	e13ff217 	ldw	r4,-56(fp)
 40017a0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    // Log what time we moved the scroll.
  }
  return(0);
 40017a4:	0005883a 	mov	r2,zero
}
 40017a8:	e6fffe04 	addi	sp,fp,-8
 40017ac:	dfc00317 	ldw	ra,12(sp)
 40017b0:	df000217 	ldw	fp,8(sp)
 40017b4:	dc400117 	ldw	r17,4(sp)
 40017b8:	dc000017 	ldw	r16,0(sp)
 40017bc:	dec00404 	addi	sp,sp,16
 40017c0:	f800283a 	ret

040017c4 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 40017c4:	defff504 	addi	sp,sp,-44
 40017c8:	dfc00a15 	stw	ra,40(sp)
 40017cc:	df000915 	stw	fp,36(sp)
 40017d0:	df000904 	addi	fp,sp,36
 40017d4:	e13ffc15 	stw	r4,-16(fp)
 40017d8:	e17ffd15 	stw	r5,-12(fp)
 40017dc:	e1bffe15 	stw	r6,-8(fp)
 40017e0:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 40017e4:	e0800217 	ldw	r2,8(fp)
 40017e8:	00803716 	blt	zero,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
 40017ec:	e0800317 	ldw	r2,12(fp)
 40017f0:	00803516 	blt	zero,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40017f4:	e0bffd17 	ldw	r2,-12(fp)
 40017f8:	e0bff815 	stw	r2,-32(fp)
 40017fc:	e0fff817 	ldw	r3,-32(fp)
 4001800:	e0bfff17 	ldw	r2,-4(fp)
 4001804:	1880300e 	bge	r3,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
      write_y = read_y + y_distance;
 4001808:	e0fff817 	ldw	r3,-32(fp)
 400180c:	e0800317 	ldw	r2,12(fp)
 4001810:	1885883a 	add	r2,r3,r2
 4001814:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 4001818:	e0bffc17 	ldw	r2,-16(fp)
 400181c:	e0bff715 	stw	r2,-36(fp)
 4001820:	e0fff717 	ldw	r3,-36(fp)
 4001824:	e0bffe17 	ldw	r2,-8(fp)
 4001828:	1880230e 	bge	r3,r2,40018b8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xf4>
        write_x = read_x + x_distance;
 400182c:	e0fff717 	ldw	r3,-36(fp)
 4001830:	e0800217 	ldw	r2,8(fp)
 4001834:	1885883a 	add	r2,r3,r2
 4001838:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 400183c:	e1800517 	ldw	r6,20(fp)
 4001840:	e17ff817 	ldw	r5,-32(fp)
 4001844:	e13ff717 	ldw	r4,-36(fp)
 4001848:	4001dbc0 	call	4001dbc <_Z13vid_get_pixeliiP16VIP_FRAME_READER>
 400184c:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 4001850:	e0bffb0f 	ldh	r2,-20(fp)
 4001854:	e1c00517 	ldw	r7,20(fp)
 4001858:	100d883a 	mov	r6,r2
 400185c:	e17ff917 	ldw	r5,-28(fp)
 4001860:	e13ffa17 	ldw	r4,-24(fp)
 4001864:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4001868:	e0fffe17 	ldw	r3,-8(fp)
 400186c:	e0800217 	ldw	r2,8(fp)
 4001870:	1885883a 	add	r2,r3,r2
 4001874:	e0fff717 	ldw	r3,-36(fp)
 4001878:	1880050e 	bge	r3,r2,4001890 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xcc>
 400187c:	e0ffff17 	ldw	r3,-4(fp)
 4001880:	e0800317 	ldw	r2,12(fp)
 4001884:	1885883a 	add	r2,r3,r2
 4001888:	e0fff817 	ldw	r3,-32(fp)
 400188c:	18800616 	blt	r3,r2,40018a8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xe4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4001890:	e0800417 	ldw	r2,16(fp)
 4001894:	e1c00517 	ldw	r7,20(fp)
 4001898:	100d883a 	mov	r6,r2
 400189c:	e17ff817 	ldw	r5,-32(fp)
 40018a0:	e13ff717 	ldw	r4,-36(fp)
 40018a4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 40018a8:	e0bff717 	ldw	r2,-36(fp)
 40018ac:	10800044 	addi	r2,r2,1
 40018b0:	e0bff715 	stw	r2,-36(fp)
 40018b4:	003fda06 	br	4001820 <__alt_mem_epcs_flash_controller_0+0xfb000820>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40018b8:	e0bff817 	ldw	r2,-32(fp)
 40018bc:	10800044 	addi	r2,r2,1
 40018c0:	e0bff815 	stw	r2,-32(fp)
 40018c4:	003fcd06 	br	40017fc <__alt_mem_epcs_flash_controller_0+0xfb0007fc>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 40018c8:	0005883a 	mov	r2,zero
}
 40018cc:	e037883a 	mov	sp,fp
 40018d0:	dfc00117 	ldw	ra,4(sp)
 40018d4:	df000017 	ldw	fp,0(sp)
 40018d8:	dec00204 	addi	sp,sp,8
 40018dc:	f800283a 	ret

040018e0 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 40018e0:	defff604 	addi	sp,sp,-40
 40018e4:	dfc00915 	stw	ra,36(sp)
 40018e8:	df000815 	stw	fp,32(sp)
 40018ec:	df000804 	addi	fp,sp,32
 40018f0:	e13ffc15 	stw	r4,-16(fp)
 40018f4:	e17ffd15 	stw	r5,-12(fp)
 40018f8:	e1bffe15 	stw	r6,-8(fp)
 40018fc:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4001900:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4001904:	e0bffc17 	ldw	r2,-16(fp)
 4001908:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 400190c:	e0bffa17 	ldw	r2,-24(fp)
 4001910:	e0c00317 	ldw	r3,12(fp)
 4001914:	1885883a 	add	r2,r3,r2
 4001918:	10800003 	ldbu	r2,0(r2)
 400191c:	10803fcc 	andi	r2,r2,255
 4001920:	1080201c 	xori	r2,r2,128
 4001924:	10bfe004 	addi	r2,r2,-128
 4001928:	10002926 	beq	r2,zero,40019d0 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0xf0>
    //Handle newline char here.
    if (string[i] == '\n') {
 400192c:	e0bffa17 	ldw	r2,-24(fp)
 4001930:	e0c00317 	ldw	r3,12(fp)
 4001934:	1885883a 	add	r2,r3,r2
 4001938:	10800003 	ldbu	r2,0(r2)
 400193c:	10803fcc 	andi	r2,r2,255
 4001940:	1080201c 	xori	r2,r2,128
 4001944:	10bfe004 	addi	r2,r2,-128
 4001948:	10800298 	cmpnei	r2,r2,10
 400194c:	1000091e 	bne	r2,zero,4001974 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0x94>
      horiz_offset = original_horiz_offset;
 4001950:	e0bffb17 	ldw	r2,-20(fp)
 4001954:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 4001958:	e0bffd17 	ldw	r2,-12(fp)
 400195c:	10800304 	addi	r2,r2,12
 4001960:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4001964:	e0bffa17 	ldw	r2,-24(fp)
 4001968:	10800044 	addi	r2,r2,1
 400196c:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4001970:	00001606 	br	40019cc <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0xec>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4001974:	e0bffa17 	ldw	r2,-24(fp)
 4001978:	e0c00317 	ldw	r3,12(fp)
 400197c:	1885883a 	add	r2,r3,r2
 4001980:	10800003 	ldbu	r2,0(r2)
 4001984:	10c03fcc 	andi	r3,r2,255
 4001988:	18c0201c 	xori	r3,r3,128
 400198c:	18ffe004 	addi	r3,r3,-128
 4001990:	e0800217 	ldw	r2,8(fp)
 4001994:	d8800115 	stw	r2,4(sp)
 4001998:	e0bfff17 	ldw	r2,-4(fp)
 400199c:	d8800015 	stw	r2,0(sp)
 40019a0:	180f883a 	mov	r7,r3
 40019a4:	e1bffe17 	ldw	r6,-8(fp)
 40019a8:	e17ffd17 	ldw	r5,-12(fp)
 40019ac:	e13ffc17 	ldw	r4,-16(fp)
 40019b0:	4001b400 	call	4001b40 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER>
    i++;
 40019b4:	e0bffa17 	ldw	r2,-24(fp)
 40019b8:	10800044 	addi	r2,r2,1
 40019bc:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 40019c0:	e0bffc17 	ldw	r2,-16(fp)
 40019c4:	10800204 	addi	r2,r2,8
 40019c8:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 40019cc:	003fcf06 	br	400190c <__alt_mem_epcs_flash_controller_0+0xfb00090c>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 40019d0:	0005883a 	mov	r2,zero
}
 40019d4:	e037883a 	mov	sp,fp
 40019d8:	dfc00117 	ldw	ra,4(sp)
 40019dc:	df000017 	ldw	fp,0(sp)
 40019e0:	dec00204 	addi	sp,sp,8
 40019e4:	f800283a 	ret

040019e8 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 40019e8:	defff704 	addi	sp,sp,-36
 40019ec:	dfc00815 	stw	ra,32(sp)
 40019f0:	df000715 	stw	fp,28(sp)
 40019f4:	df000704 	addi	fp,sp,28
 40019f8:	e13ffc15 	stw	r4,-16(fp)
 40019fc:	e17ffd15 	stw	r5,-12(fp)
 4001a00:	e1bffe15 	stw	r6,-8(fp)
 4001a04:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4001a08:	e0800317 	ldw	r2,12(fp)
 4001a0c:	10000a26 	beq	r2,zero,4001a38 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 4001a10:	e0800417 	ldw	r2,16(fp)
 4001a14:	d8800115 	stw	r2,4(sp)
 4001a18:	e0800217 	ldw	r2,8(fp)
 4001a1c:	d8800015 	stw	r2,0(sp)
 4001a20:	e1ffff17 	ldw	r7,-4(fp)
 4001a24:	e1bffe17 	ldw	r6,-8(fp)
 4001a28:	e17ffd17 	ldw	r5,-12(fp)
 4001a2c:	e13ffc17 	ldw	r4,-16(fp)
 4001a30:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
 4001a34:	00003c06 	br	4001b28 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER+0x140>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4001a38:	e0bfff17 	ldw	r2,-4(fp)
 4001a3c:	10ffffc4 	addi	r3,r2,-1
 4001a40:	e0800417 	ldw	r2,16(fp)
 4001a44:	d8800215 	stw	r2,8(sp)
 4001a48:	e0800217 	ldw	r2,8(fp)
 4001a4c:	d8800115 	stw	r2,4(sp)
 4001a50:	00800044 	movi	r2,1
 4001a54:	d8800015 	stw	r2,0(sp)
 4001a58:	180f883a 	mov	r7,r3
 4001a5c:	e1bffc17 	ldw	r6,-16(fp)
 4001a60:	e17ffd17 	ldw	r5,-12(fp)
 4001a64:	e13ffc17 	ldw	r4,-16(fp)
 4001a68:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4001a6c:	e0bffe17 	ldw	r2,-8(fp)
 4001a70:	10ffffc4 	addi	r3,r2,-1
 4001a74:	e0bffe17 	ldw	r2,-8(fp)
 4001a78:	113fffc4 	addi	r4,r2,-1
 4001a7c:	e0bfff17 	ldw	r2,-4(fp)
 4001a80:	117fffc4 	addi	r5,r2,-1
 4001a84:	e0800417 	ldw	r2,16(fp)
 4001a88:	d8800215 	stw	r2,8(sp)
 4001a8c:	e0800217 	ldw	r2,8(fp)
 4001a90:	d8800115 	stw	r2,4(sp)
 4001a94:	00800044 	movi	r2,1
 4001a98:	d8800015 	stw	r2,0(sp)
 4001a9c:	280f883a 	mov	r7,r5
 4001aa0:	200d883a 	mov	r6,r4
 4001aa4:	e17ffd17 	ldw	r5,-12(fp)
 4001aa8:	1809883a 	mov	r4,r3
 4001aac:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4001ab0:	e0bffe17 	ldw	r2,-8(fp)
 4001ab4:	10ffffc4 	addi	r3,r2,-1
 4001ab8:	e0800417 	ldw	r2,16(fp)
 4001abc:	d8800215 	stw	r2,8(sp)
 4001ac0:	e0800217 	ldw	r2,8(fp)
 4001ac4:	d8800115 	stw	r2,4(sp)
 4001ac8:	00800044 	movi	r2,1
 4001acc:	d8800015 	stw	r2,0(sp)
 4001ad0:	e1fffd17 	ldw	r7,-12(fp)
 4001ad4:	180d883a 	mov	r6,r3
 4001ad8:	e17ffd17 	ldw	r5,-12(fp)
 4001adc:	e13ffc17 	ldw	r4,-16(fp)
 4001ae0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 4001ae4:	e0bfff17 	ldw	r2,-4(fp)
 4001ae8:	10ffffc4 	addi	r3,r2,-1
 4001aec:	e0bffe17 	ldw	r2,-8(fp)
 4001af0:	113fffc4 	addi	r4,r2,-1
 4001af4:	e0bfff17 	ldw	r2,-4(fp)
 4001af8:	117fffc4 	addi	r5,r2,-1
 4001afc:	e0800417 	ldw	r2,16(fp)
 4001b00:	d8800215 	stw	r2,8(sp)
 4001b04:	e0800217 	ldw	r2,8(fp)
 4001b08:	d8800115 	stw	r2,4(sp)
 4001b0c:	00800044 	movi	r2,1
 4001b10:	d8800015 	stw	r2,0(sp)
 4001b14:	280f883a 	mov	r7,r5
 4001b18:	200d883a 	mov	r6,r4
 4001b1c:	180b883a 	mov	r5,r3
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
  }

  return (0);
 4001b28:	0005883a 	mov	r2,zero
}
 4001b2c:	e037883a 	mov	sp,fp
 4001b30:	dfc00117 	ldw	ra,4(sp)
 4001b34:	df000017 	ldw	fp,0(sp)
 4001b38:	dec00204 	addi	sp,sp,8
 4001b3c:	f800283a 	ret

04001b40 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4001b40:	defff704 	addi	sp,sp,-36
 4001b44:	dfc00815 	stw	ra,32(sp)
 4001b48:	df000715 	stw	fp,28(sp)
 4001b4c:	df000704 	addi	fp,sp,28
 4001b50:	e13ffc15 	stw	r4,-16(fp)
 4001b54:	e17ffd15 	stw	r5,-12(fp)
 4001b58:	e1bffe15 	stw	r6,-8(fp)
 4001b5c:	3805883a 	mov	r2,r7
 4001b60:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4001b64:	e0bfff03 	ldbu	r2,-4(fp)
 4001b68:	10bff804 	addi	r2,r2,-32
 4001b6c:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001b70:	e03ff915 	stw	zero,-28(fp)
 4001b74:	e0bff917 	ldw	r2,-28(fp)
 4001b78:	108002c8 	cmpgei	r2,r2,11
 4001b7c:	1000261e 	bne	r2,zero,4001c18 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xd8>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4001b80:	e0bffb07 	ldb	r2,-20(fp)
 4001b84:	108002e4 	muli	r2,r2,11
 4001b88:	1007883a 	mov	r3,r2
 4001b8c:	e0bff917 	ldw	r2,-28(fp)
 4001b90:	1885883a 	add	r2,r3,r2
 4001b94:	e0c00217 	ldw	r3,8(fp)
 4001b98:	1885883a 	add	r2,r3,r2
 4001b9c:	10800003 	ldbu	r2,0(r2)
 4001ba0:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4001ba4:	e03ffa15 	stw	zero,-24(fp)
 4001ba8:	e0bffa17 	ldw	r2,-24(fp)
 4001bac:	10800208 	cmpgei	r2,r2,8
 4001bb0:	1000151e 	bne	r2,zero,4001c08 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xc8>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4001bb4:	e0fffb47 	ldb	r3,-19(fp)
 4001bb8:	01002004 	movi	r4,128
 4001bbc:	e0bffa17 	ldw	r2,-24(fp)
 4001bc0:	2085d83a 	sra	r2,r4,r2
 4001bc4:	1884703a 	and	r2,r3,r2
 4001bc8:	10000b26 	beq	r2,zero,4001bf8 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xb8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4001bcc:	e0fffc17 	ldw	r3,-16(fp)
 4001bd0:	e0bffa17 	ldw	r2,-24(fp)
 4001bd4:	1889883a 	add	r4,r3,r2
 4001bd8:	e0fffd17 	ldw	r3,-12(fp)
 4001bdc:	e0bff917 	ldw	r2,-28(fp)
 4001be0:	1885883a 	add	r2,r3,r2
 4001be4:	e0fffe17 	ldw	r3,-8(fp)
 4001be8:	e1c00317 	ldw	r7,12(fp)
 4001bec:	180d883a 	mov	r6,r3
 4001bf0:	100b883a 	mov	r5,r2
 4001bf4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 4001bf8:	e0bffa17 	ldw	r2,-24(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bffa15 	stw	r2,-24(fp)
 4001c04:	003fe806 	br	4001ba8 <__alt_mem_epcs_flash_controller_0+0xfb000ba8>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001c08:	e0bff917 	ldw	r2,-28(fp)
 4001c0c:	10800044 	addi	r2,r2,1
 4001c10:	e0bff915 	stw	r2,-28(fp)
 4001c14:	003fd706 	br	4001b74 <__alt_mem_epcs_flash_controller_0+0xfb000b74>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 4001c18:	0005883a 	mov	r2,zero
}
 4001c1c:	e037883a 	mov	sp,fp
 4001c20:	dfc00117 	ldw	ra,4(sp)
 4001c24:	df000017 	ldw	fp,0(sp)
 4001c28:	dec00204 	addi	sp,sp,8
 4001c2c:	f800283a 	ret

04001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 4001c30:	defff904 	addi	sp,sp,-28
 4001c34:	dfc00615 	stw	ra,24(sp)
 4001c38:	df000515 	stw	fp,20(sp)
 4001c3c:	df000504 	addi	fp,sp,20
 4001c40:	e13ffc15 	stw	r4,-16(fp)
 4001c44:	e17ffd15 	stw	r5,-12(fp)
 4001c48:	e1bffe15 	stw	r6,-8(fp)
 4001c4c:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 4001c50:	e0bfff17 	ldw	r2,-4(fp)
 4001c54:	10800417 	ldw	r2,16(r2)
 4001c58:	10800818 	cmpnei	r2,r2,32
 4001c5c:	1000141e 	bne	r2,zero,4001cb0 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x80>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
 4001c60:	e13fff17 	ldw	r4,-4(fp)
 4001c64:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001c68:	1007883a 	mov	r3,r2
 4001c6c:	e0bfff17 	ldw	r2,-4(fp)
 4001c70:	10800517 	ldw	r2,20(r2)
 4001c74:	1085883a 	add	r2,r2,r2
 4001c78:	1085883a 	add	r2,r2,r2
 4001c7c:	1009883a 	mov	r4,r2
 4001c80:	e0bffd17 	ldw	r2,-12(fp)
 4001c84:	2085383a 	mul	r2,r4,r2
 4001c88:	1887883a 	add	r3,r3,r2
 4001c8c:	e0bffc17 	ldw	r2,-16(fp)
 4001c90:	1085883a 	add	r2,r2,r2
 4001c94:	1085883a 	add	r2,r2,r2
 4001c98:	1885883a 	add	r2,r3,r2
 4001c9c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 4001ca0:	e0bffb17 	ldw	r2,-20(fp)
 4001ca4:	e0fffe17 	ldw	r3,-8(fp)
 4001ca8:	10c00035 	stwio	r3,0(r2)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 4001cac:	00003d06 	br	4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
  }
  
  else if( display->color_depth == 24 )
 4001cb0:	e0bfff17 	ldw	r2,-4(fp)
 4001cb4:	10800417 	ldw	r2,16(r2)
 4001cb8:	10800618 	cmpnei	r2,r2,24
 4001cbc:	1000241e 	bne	r2,zero,4001d50 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
 4001cc0:	e13fff17 	ldw	r4,-4(fp)
 4001cc4:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001cc8:	1009883a 	mov	r4,r2
 4001ccc:	e0bfff17 	ldw	r2,-4(fp)
 4001cd0:	10c00517 	ldw	r3,20(r2)
 4001cd4:	1805883a 	mov	r2,r3
 4001cd8:	1085883a 	add	r2,r2,r2
 4001cdc:	10c7883a 	add	r3,r2,r3
 4001ce0:	e0bffd17 	ldw	r2,-12(fp)
 4001ce4:	1885383a 	mul	r2,r3,r2
 4001ce8:	2089883a 	add	r4,r4,r2
 4001cec:	e0fffc17 	ldw	r3,-16(fp)
 4001cf0:	1805883a 	mov	r2,r3
 4001cf4:	1085883a 	add	r2,r2,r2
 4001cf8:	10c5883a 	add	r2,r2,r3
 4001cfc:	2085883a 	add	r2,r4,r2
 4001d00:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 4001d04:	e0bffb17 	ldw	r2,-20(fp)
 4001d08:	e0fffe17 	ldw	r3,-8(fp)
 4001d0c:	18c03fcc 	andi	r3,r3,255
 4001d10:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 4001d14:	e0bffb17 	ldw	r2,-20(fp)
 4001d18:	10800044 	addi	r2,r2,1
 4001d1c:	1007883a 	mov	r3,r2
 4001d20:	e0bffe17 	ldw	r2,-8(fp)
 4001d24:	1004d23a 	srli	r2,r2,8
 4001d28:	10803fcc 	andi	r2,r2,255
 4001d2c:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 4001d30:	e0bffb17 	ldw	r2,-20(fp)
 4001d34:	10800084 	addi	r2,r2,2
 4001d38:	1007883a 	mov	r3,r2
 4001d3c:	e0bffe17 	ldw	r2,-8(fp)
 4001d40:	1004d43a 	srli	r2,r2,16
 4001d44:	10803fcc 	andi	r2,r2,255
 4001d48:	18800025 	stbio	r2,0(r3)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 4001d4c:	00001506 	br	4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
  }
  
  else if( display->color_depth == 16 )
 4001d50:	e0bfff17 	ldw	r2,-4(fp)
 4001d54:	10800417 	ldw	r2,16(r2)
 4001d58:	10800418 	cmpnei	r2,r2,16
 4001d5c:	1000111e 	bne	r2,zero,4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001d60:	e13fff17 	ldw	r4,-4(fp)
 4001d64:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001d68:	1007883a 	mov	r3,r2
 4001d6c:	e0bfff17 	ldw	r2,-4(fp)
 4001d70:	10800517 	ldw	r2,20(r2)
 4001d74:	1085883a 	add	r2,r2,r2
 4001d78:	1009883a 	mov	r4,r2
 4001d7c:	e0bffd17 	ldw	r2,-12(fp)
 4001d80:	2085383a 	mul	r2,r4,r2
 4001d84:	1887883a 	add	r3,r3,r2
 4001d88:	e0bffc17 	ldw	r2,-16(fp)
 4001d8c:	1085883a 	add	r2,r2,r2
 4001d90:	1885883a 	add	r2,r3,r2
 4001d94:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
 4001d98:	e0bffb17 	ldw	r2,-20(fp)
 4001d9c:	e0fffe17 	ldw	r3,-8(fp)
 4001da0:	10c0002d 	sthio	r3,0(r2)
	}


}
 4001da4:	0001883a 	nop
 4001da8:	e037883a 	mov	sp,fp
 4001dac:	dfc00117 	ldw	ra,4(sp)
 4001db0:	df000017 	ldw	fp,0(sp)
 4001db4:	dec00204 	addi	sp,sp,8
 4001db8:	f800283a 	ret

04001dbc <_Z13vid_get_pixeliiP16VIP_FRAME_READER>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4001dbc:	defffa04 	addi	sp,sp,-24
 4001dc0:	dfc00515 	stw	ra,20(sp)
 4001dc4:	df000415 	stw	fp,16(sp)
 4001dc8:	df000404 	addi	fp,sp,16
 4001dcc:	e13ffd15 	stw	r4,-12(fp)
 4001dd0:	e17ffe15 	stw	r5,-8(fp)
 4001dd4:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001dd8:	e13fff17 	ldw	r4,-4(fp)
 4001ddc:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001de0:	1007883a 	mov	r3,r2
 4001de4:	e0bfff17 	ldw	r2,-4(fp)
 4001de8:	10800517 	ldw	r2,20(r2)
 4001dec:	1085883a 	add	r2,r2,r2
 4001df0:	1009883a 	mov	r4,r2
 4001df4:	e0bffe17 	ldw	r2,-8(fp)
 4001df8:	2085383a 	mul	r2,r4,r2
 4001dfc:	1887883a 	add	r3,r3,r2
 4001e00:	e0bffd17 	ldw	r2,-12(fp)
 4001e04:	1085883a 	add	r2,r2,r2
 4001e08:	1885883a 	add	r2,r3,r2
 4001e0c:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
 4001e10:	e0bffc17 	ldw	r2,-16(fp)
 4001e14:	1080002b 	ldhuio	r2,0(r2)
 4001e18:	10bfffcc 	andi	r2,r2,65535

}
 4001e1c:	e037883a 	mov	sp,fp
 4001e20:	dfc00117 	ldw	ra,4(sp)
 4001e24:	df000017 	ldw	fp,0(sp)
 4001e28:	dec00204 	addi	sp,sp,8
 4001e2c:	f800283a 	ret

04001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 4001e30:	defff504 	addi	sp,sp,-44
 4001e34:	dfc00a15 	stw	ra,40(sp)
 4001e38:	df000915 	stw	fp,36(sp)
 4001e3c:	df000904 	addi	fp,sp,36
 4001e40:	e13ffc15 	stw	r4,-16(fp)
 4001e44:	e17ffd15 	stw	r5,-12(fp)
 4001e48:	e1bffe15 	stw	r6,-8(fp)
 4001e4c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
 4001e50:	e0800317 	ldw	r2,12(fp)
 4001e54:	10800417 	ldw	r2,16(r2)
 4001e58:	1000010e 	bge	r2,zero,4001e60 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x30>
 4001e5c:	108001c4 	addi	r2,r2,7
 4001e60:	1005d0fa 	srai	r2,r2,3
 4001e64:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
 4001e68:	e0fffe17 	ldw	r3,-8(fp)
 4001e6c:	e0bffc17 	ldw	r2,-16(fp)
 4001e70:	1887c83a 	sub	r3,r3,r2
 4001e74:	e0bff917 	ldw	r2,-28(fp)
 4001e78:	1885383a 	mul	r2,r3,r2
 4001e7c:	e0bffa15 	stw	r2,-24(fp)

  line = (char *)malloc(bytes_per_line + 12);
 4001e80:	e0bffa17 	ldw	r2,-24(fp)
 4001e84:	10800304 	addi	r2,r2,12
 4001e88:	1009883a 	mov	r4,r2
 4001e8c:	400deb40 	call	400deb4 <malloc>
 4001e90:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
 4001e94:	e0800317 	ldw	r2,12(fp)
 4001e98:	10800417 	ldw	r2,16(r2)
 4001e9c:	10800418 	cmpnei	r2,r2,16
 4001ea0:	1000141e 	bne	r2,zero,4001ef4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0xc4>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001ea4:	e03ff715 	stw	zero,-36(fp)
 4001ea8:	e0fff717 	ldw	r3,-36(fp)
 4001eac:	e0bffa17 	ldw	r2,-24(fp)
 4001eb0:	1880400e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      *(line + i) = (unsigned char)color;
 4001eb4:	e0bff717 	ldw	r2,-36(fp)
 4001eb8:	e0fffb17 	ldw	r3,-20(fp)
 4001ebc:	1885883a 	add	r2,r3,r2
 4001ec0:	e0c00217 	ldw	r3,8(fp)
 4001ec4:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001ec8:	e0bff717 	ldw	r2,-36(fp)
 4001ecc:	10800044 	addi	r2,r2,1
 4001ed0:	e0fffb17 	ldw	r3,-20(fp)
 4001ed4:	1885883a 	add	r2,r3,r2
 4001ed8:	e0c00217 	ldw	r3,8(fp)
 4001edc:	1807d23a 	srai	r3,r3,8
 4001ee0:	10c00005 	stb	r3,0(r2)

  line = (char *)malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001ee4:	e0bff717 	ldw	r2,-36(fp)
 4001ee8:	10800084 	addi	r2,r2,2
 4001eec:	e0bff715 	stw	r2,-36(fp)
 4001ef0:	003fed06 	br	4001ea8 <__alt_mem_epcs_flash_controller_0+0xfb000ea8>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
 4001ef4:	e0800317 	ldw	r2,12(fp)
 4001ef8:	10800417 	ldw	r2,16(r2)
 4001efc:	10800618 	cmpnei	r2,r2,24
 4001f00:	10001b1e 	bne	r2,zero,4001f70 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x140>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 4001f04:	e03ff715 	stw	zero,-36(fp)
 4001f08:	e0fff717 	ldw	r3,-36(fp)
 4001f0c:	e0bffa17 	ldw	r2,-24(fp)
 4001f10:	1880280e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      *(line + i) = (unsigned char)color;
 4001f14:	e0bff717 	ldw	r2,-36(fp)
 4001f18:	e0fffb17 	ldw	r3,-20(fp)
 4001f1c:	1885883a 	add	r2,r3,r2
 4001f20:	e0c00217 	ldw	r3,8(fp)
 4001f24:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001f28:	e0bff717 	ldw	r2,-36(fp)
 4001f2c:	10800044 	addi	r2,r2,1
 4001f30:	e0fffb17 	ldw	r3,-20(fp)
 4001f34:	1885883a 	add	r2,r3,r2
 4001f38:	e0c00217 	ldw	r3,8(fp)
 4001f3c:	1807d23a 	srai	r3,r3,8
 4001f40:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
 4001f44:	e0bff717 	ldw	r2,-36(fp)
 4001f48:	10800084 	addi	r2,r2,2
 4001f4c:	e0fffb17 	ldw	r3,-20(fp)
 4001f50:	1885883a 	add	r2,r3,r2
 4001f54:	e0c00217 	ldw	r3,8(fp)
 4001f58:	1807d43a 	srai	r3,r3,16
 4001f5c:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 4001f60:	e0bff717 	ldw	r2,-36(fp)
 4001f64:	108000c4 	addi	r2,r2,3
 4001f68:	e0bff715 	stw	r2,-36(fp)
 4001f6c:	003fe606 	br	4001f08 <__alt_mem_epcs_flash_controller_0+0xfb000f08>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
 4001f70:	e0800317 	ldw	r2,12(fp)
 4001f74:	10800417 	ldw	r2,16(r2)
 4001f78:	10800818 	cmpnei	r2,r2,32
 4001f7c:	10000d1e 	bne	r2,zero,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001f80:	e03ff715 	stw	zero,-36(fp)
 4001f84:	e0fff717 	ldw	r3,-36(fp)
 4001f88:	e0bffa17 	ldw	r2,-24(fp)
 4001f8c:	1880090e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
 4001f90:	e0bff717 	ldw	r2,-36(fp)
 4001f94:	e0fffb17 	ldw	r3,-20(fp)
 4001f98:	1885883a 	add	r2,r3,r2
 4001f9c:	e0c00217 	ldw	r3,8(fp)
 4001fa0:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001fa4:	e0bff717 	ldw	r2,-36(fp)
 4001fa8:	10800104 	addi	r2,r2,4
 4001fac:	e0bff715 	stw	r2,-36(fp)
 4001fb0:	003ff406 	br	4001f84 <__alt_mem_epcs_flash_controller_0+0xfb000f84>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
 4001fb4:	e1000317 	ldw	r4,12(fp)
 4001fb8:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001fbc:	100b883a 	mov	r5,r2
 4001fc0:	e0800317 	ldw	r2,12(fp)
 4001fc4:	10c00517 	ldw	r3,20(r2)
 4001fc8:	e0bff917 	ldw	r2,-28(fp)
 4001fcc:	1887383a 	mul	r3,r3,r2
 4001fd0:	e0bffd17 	ldw	r2,-12(fp)
 4001fd4:	1887383a 	mul	r3,r3,r2
 4001fd8:	e13ffc17 	ldw	r4,-16(fp)
 4001fdc:	e0bff917 	ldw	r2,-28(fp)
 4001fe0:	2085383a 	mul	r2,r4,r2
 4001fe4:	1885883a 	add	r2,r3,r2
 4001fe8:	2885883a 	add	r2,r5,r2
 4001fec:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
 4001ff0:	e0bffd17 	ldw	r2,-12(fp)
 4001ff4:	e0bff715 	stw	r2,-36(fp)
 4001ff8:	e0fff717 	ldw	r3,-36(fp)
 4001ffc:	e0bfff17 	ldw	r2,-4(fp)
 4002000:	1880120e 	bge	r3,r2,400204c <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x21c>
  {
    memcpy( (void*)addr, line, bytes_per_line );
 4002004:	e0bff817 	ldw	r2,-32(fp)
 4002008:	e0fffa17 	ldw	r3,-24(fp)
 400200c:	180d883a 	mov	r6,r3
 4002010:	e17ffb17 	ldw	r5,-20(fp)
 4002014:	1009883a 	mov	r4,r2
 4002018:	400e6e80 	call	400e6e8 <memcpy>
    addr += (display->width * bytes_per_pixel);
 400201c:	e0800317 	ldw	r2,12(fp)
 4002020:	10c00517 	ldw	r3,20(r2)
 4002024:	e0bff917 	ldw	r2,-28(fp)
 4002028:	1885383a 	mul	r2,r3,r2
 400202c:	1007883a 	mov	r3,r2
 4002030:	e0bff817 	ldw	r2,-32(fp)
 4002034:	10c5883a 	add	r2,r2,r3
 4002038:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
 400203c:	e0bff717 	ldw	r2,-36(fp)
 4002040:	10800044 	addi	r2,r2,1
 4002044:	e0bff715 	stw	r2,-36(fp)
 4002048:	003feb06 	br	4001ff8 <__alt_mem_epcs_flash_controller_0+0xfb000ff8>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
 400204c:	e13ffb17 	ldw	r4,-20(fp)
 4002050:	400dec80 	call	400dec8 <free>
}
 4002054:	0001883a 	nop
 4002058:	e037883a 	mov	sp,fp
 400205c:	dfc00117 	ldw	ra,4(sp)
 4002060:	df000017 	ldw	fp,0(sp)
 4002064:	dec00204 	addi	sp,sp,8
 4002068:	f800283a 	ret

0400206c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 400206c:	defff504 	addi	sp,sp,-44
 4002070:	dfc00a15 	stw	ra,40(sp)
 4002074:	df000915 	stw	fp,36(sp)
 4002078:	df000904 	addi	fp,sp,36
 400207c:	2007883a 	mov	r3,r4
 4002080:	2805883a 	mov	r2,r5
 4002084:	e1bffe15 	stw	r6,-8(fp)
 4002088:	e1ffff15 	stw	r7,-4(fp)
 400208c:	e0fffc0d 	sth	r3,-16(fp)
 4002090:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = (char *)malloc(1024 * 3);
 4002094:	01030004 	movi	r4,3072
 4002098:	400deb40 	call	400deb4 <malloc>
 400209c:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 40020a0:	e0bffc0f 	ldh	r2,-16(fp)
 40020a4:	e0fffd0f 	ldh	r3,-12(fp)
 40020a8:	1880060e 	bge	r3,r2,40020c4 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x58>
  {
    short temp = Hstart;
 40020ac:	e0bffc0b 	ldhu	r2,-16(fp)
 40020b0:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 40020b4:	e0bffd0b 	ldhu	r2,-12(fp)
 40020b8:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 40020bc:	e0bff90b 	ldhu	r2,-28(fp)
 40020c0:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 40020c4:	e0800217 	ldw	r2,8(fp)
 40020c8:	10800417 	ldw	r2,16(r2)
 40020cc:	10800818 	cmpnei	r2,r2,32
 40020d0:	1000291e 	bne	r2,zero,4002178 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x10c>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
 40020d4:	e1000217 	ldw	r4,8(fp)
 40020d8:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40020dc:	1009883a 	mov	r4,r2
 40020e0:	e0800217 	ldw	r2,8(fp)
 40020e4:	10800517 	ldw	r2,20(r2)
 40020e8:	1085883a 	add	r2,r2,r2
 40020ec:	1085883a 	add	r2,r2,r2
 40020f0:	1007883a 	mov	r3,r2
 40020f4:	e0bffe17 	ldw	r2,-8(fp)
 40020f8:	1887383a 	mul	r3,r3,r2
 40020fc:	e0bffc0f 	ldh	r2,-16(fp)
 4002100:	1085883a 	add	r2,r2,r2
 4002104:	1085883a 	add	r2,r2,r2
 4002108:	1885883a 	add	r2,r3,r2
 400210c:	2085883a 	add	r2,r4,r2
 4002110:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 4002114:	e0fffd0f 	ldh	r3,-12(fp)
 4002118:	e0bffc0f 	ldh	r2,-16(fp)
 400211c:	1885c83a 	sub	r2,r3,r2
 4002120:	1085883a 	add	r2,r2,r2
 4002124:	1085883a 	add	r2,r2,r2
 4002128:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 400212c:	e03ff715 	stw	zero,-36(fp)
 4002130:	e0fff717 	ldw	r3,-36(fp)
 4002134:	e0bffb17 	ldw	r2,-20(fp)
 4002138:	1880090e 	bge	r3,r2,4002160 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0xf4>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 400213c:	e0bff717 	ldw	r2,-36(fp)
 4002140:	e0fff817 	ldw	r3,-32(fp)
 4002144:	1885883a 	add	r2,r3,r2
 4002148:	e0ffff17 	ldw	r3,-4(fp)
 400214c:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 4002150:	e0bff717 	ldw	r2,-36(fp)
 4002154:	10800104 	addi	r2,r2,4
 4002158:	e0bff715 	stw	r2,-36(fp)
 400215c:	003ff406 	br	4002130 <__alt_mem_epcs_flash_controller_0+0xfb001130>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4002160:	e0bffa17 	ldw	r2,-24(fp)
 4002164:	e0fffb17 	ldw	r3,-20(fp)
 4002168:	180d883a 	mov	r6,r3
 400216c:	e17ff817 	ldw	r5,-32(fp)
 4002170:	1009883a 	mov	r4,r2
 4002174:	400e6e80 	call	400e6e8 <memcpy>
  }
  if(display->color_depth == 24)
 4002178:	e0800217 	ldw	r2,8(fp)
 400217c:	10800417 	ldw	r2,16(r2)
 4002180:	10800618 	cmpnei	r2,r2,24
 4002184:	10003a1e 	bne	r2,zero,4002270 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x204>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
 4002188:	e1000217 	ldw	r4,8(fp)
 400218c:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4002190:	100b883a 	mov	r5,r2
 4002194:	e0800217 	ldw	r2,8(fp)
 4002198:	10c00517 	ldw	r3,20(r2)
 400219c:	1805883a 	mov	r2,r3
 40021a0:	1085883a 	add	r2,r2,r2
 40021a4:	10c7883a 	add	r3,r2,r3
 40021a8:	e0bffe17 	ldw	r2,-8(fp)
 40021ac:	1889383a 	mul	r4,r3,r2
 40021b0:	e0fffc0f 	ldh	r3,-16(fp)
 40021b4:	1805883a 	mov	r2,r3
 40021b8:	1085883a 	add	r2,r2,r2
 40021bc:	10c5883a 	add	r2,r2,r3
 40021c0:	2085883a 	add	r2,r4,r2
 40021c4:	2885883a 	add	r2,r5,r2
 40021c8:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 40021cc:	e0fffd0f 	ldh	r3,-12(fp)
 40021d0:	e0bffc0f 	ldh	r2,-16(fp)
 40021d4:	1887c83a 	sub	r3,r3,r2
 40021d8:	1805883a 	mov	r2,r3
 40021dc:	1085883a 	add	r2,r2,r2
 40021e0:	10c5883a 	add	r2,r2,r3
 40021e4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 40021e8:	e03ff715 	stw	zero,-36(fp)
 40021ec:	e0fff717 	ldw	r3,-36(fp)
 40021f0:	e0bffb17 	ldw	r2,-20(fp)
 40021f4:	1880170e 	bge	r3,r2,4002254 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x1e8>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40021f8:	e0bff717 	ldw	r2,-36(fp)
 40021fc:	e0fff817 	ldw	r3,-32(fp)
 4002200:	1885883a 	add	r2,r3,r2
 4002204:	e0ffff17 	ldw	r3,-4(fp)
 4002208:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 400220c:	e0bff717 	ldw	r2,-36(fp)
 4002210:	10800044 	addi	r2,r2,1
 4002214:	e0fff817 	ldw	r3,-32(fp)
 4002218:	1885883a 	add	r2,r3,r2
 400221c:	e0ffff17 	ldw	r3,-4(fp)
 4002220:	1807d23a 	srai	r3,r3,8
 4002224:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 4002228:	e0bff717 	ldw	r2,-36(fp)
 400222c:	10800084 	addi	r2,r2,2
 4002230:	e0fff817 	ldw	r3,-32(fp)
 4002234:	1885883a 	add	r2,r3,r2
 4002238:	e0ffff17 	ldw	r3,-4(fp)
 400223c:	1807d43a 	srai	r3,r3,16
 4002240:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 4002244:	e0bff717 	ldw	r2,-36(fp)
 4002248:	108000c4 	addi	r2,r2,3
 400224c:	e0bff715 	stw	r2,-36(fp)
 4002250:	003fe606 	br	40021ec <__alt_mem_epcs_flash_controller_0+0xfb0011ec>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4002254:	e0bffa17 	ldw	r2,-24(fp)
 4002258:	e0fffb17 	ldw	r3,-20(fp)
 400225c:	180d883a 	mov	r6,r3
 4002260:	e17ff817 	ldw	r5,-32(fp)
 4002264:	1009883a 	mov	r4,r2
 4002268:	400e6e80 	call	400e6e8 <memcpy>
 400226c:	00003106 	br	4002334 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2c8>
  }
  else if(display->color_depth == 16)
 4002270:	e0800217 	ldw	r2,8(fp)
 4002274:	10800417 	ldw	r2,16(r2)
 4002278:	10800418 	cmpnei	r2,r2,16
 400227c:	10002d1e 	bne	r2,zero,4002334 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2c8>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
 4002280:	e1000217 	ldw	r4,8(fp)
 4002284:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4002288:	1009883a 	mov	r4,r2
 400228c:	e0800217 	ldw	r2,8(fp)
 4002290:	10800517 	ldw	r2,20(r2)
 4002294:	1085883a 	add	r2,r2,r2
 4002298:	1007883a 	mov	r3,r2
 400229c:	e0bffe17 	ldw	r2,-8(fp)
 40022a0:	1887383a 	mul	r3,r3,r2
 40022a4:	e0bffc0f 	ldh	r2,-16(fp)
 40022a8:	1085883a 	add	r2,r2,r2
 40022ac:	1885883a 	add	r2,r3,r2
 40022b0:	2085883a 	add	r2,r4,r2
 40022b4:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 40022b8:	e0fffd0f 	ldh	r3,-12(fp)
 40022bc:	e0bffc0f 	ldh	r2,-16(fp)
 40022c0:	1885c83a 	sub	r2,r3,r2
 40022c4:	1085883a 	add	r2,r2,r2
 40022c8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 40022cc:	e03ff715 	stw	zero,-36(fp)
 40022d0:	e0fff717 	ldw	r3,-36(fp)
 40022d4:	e0bffb17 	ldw	r2,-20(fp)
 40022d8:	1880100e 	bge	r3,r2,400231c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2b0>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40022dc:	e0bff717 	ldw	r2,-36(fp)
 40022e0:	e0fff817 	ldw	r3,-32(fp)
 40022e4:	1885883a 	add	r2,r3,r2
 40022e8:	e0ffff17 	ldw	r3,-4(fp)
 40022ec:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 40022f0:	e0bff717 	ldw	r2,-36(fp)
 40022f4:	10800044 	addi	r2,r2,1
 40022f8:	e0fff817 	ldw	r3,-32(fp)
 40022fc:	1885883a 	add	r2,r3,r2
 4002300:	e0ffff17 	ldw	r3,-4(fp)
 4002304:	1807d23a 	srai	r3,r3,8
 4002308:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 400230c:	e0bff717 	ldw	r2,-36(fp)
 4002310:	10800084 	addi	r2,r2,2
 4002314:	e0bff715 	stw	r2,-36(fp)
 4002318:	003fed06 	br	40022d0 <__alt_mem_epcs_flash_controller_0+0xfb0012d0>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 400231c:	e0bffa17 	ldw	r2,-24(fp)
 4002320:	e0fffb17 	ldw	r3,-20(fp)
 4002324:	180d883a 	mov	r6,r3
 4002328:	e17ff817 	ldw	r5,-32(fp)
 400232c:	1009883a 	mov	r4,r2
 4002330:	400e6e80 	call	400e6e8 <memcpy>
  }
  free(fast_buffer);
 4002334:	e13ff817 	ldw	r4,-32(fp)
 4002338:	400dec80 	call	400dec8 <free>
}
 400233c:	0001883a 	nop
 4002340:	e037883a 	mov	sp,fp
 4002344:	dfc00117 	ldw	ra,4(sp)
 4002348:	df000017 	ldw	fp,0(sp)
 400234c:	dec00204 	addi	sp,sp,8
 4002350:	f800283a 	ret

04002354 <_Z16vid_merge_colorsiii>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4002354:	defffc04 	addi	sp,sp,-16
 4002358:	df000315 	stw	fp,12(sp)
 400235c:	df000304 	addi	fp,sp,12
 4002360:	e13ffd15 	stw	r4,-12(fp)
 4002364:	e17ffe15 	stw	r5,-8(fp)
 4002368:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 400236c:	e0bffe17 	ldw	r2,-8(fp)
 4002370:	1085883a 	add	r2,r2,r2
 4002374:	10800054 	ori	r2,r2,1
 4002378:	1006917a 	slli	r3,r2,5
 400237c:	e0bfff17 	ldw	r2,-4(fp)
 4002380:	1886b03a 	or	r3,r3,r2
 4002384:	e0bffd17 	ldw	r2,-12(fp)
 4002388:	100492fa 	slli	r2,r2,11
 400238c:	1884b03a 	or	r2,r3,r2
}
 4002390:	e037883a 	mov	sp,fp
 4002394:	df000017 	ldw	fp,0(sp)
 4002398:	dec00104 	addi	sp,sp,4
 400239c:	f800283a 	ret

040023a0 <_Z22vid_color_convert24_16Pc>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 40023a0:	defffc04 	addi	sp,sp,-16
 40023a4:	df000315 	stw	fp,12(sp)
 40023a8:	df000304 	addi	fp,sp,12
 40023ac:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 40023b0:	e0bfff17 	ldw	r2,-4(fp)
 40023b4:	10800003 	ldbu	r2,0(r2)
 40023b8:	1007883a 	mov	r3,r2
 40023bc:	00bffe04 	movi	r2,-8
 40023c0:	1884703a 	and	r2,r3,r2
 40023c4:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 40023c8:	e0bfff17 	ldw	r2,-4(fp)
 40023cc:	10800044 	addi	r2,r2,1
 40023d0:	10800003 	ldbu	r2,0(r2)
 40023d4:	1007883a 	mov	r3,r2
 40023d8:	00bfff04 	movi	r2,-4
 40023dc:	1884703a 	and	r2,r3,r2
 40023e0:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 40023e4:	e0bfff17 	ldw	r2,-4(fp)
 40023e8:	10800084 	addi	r2,r2,2
 40023ec:	10800003 	ldbu	r2,0(r2)
 40023f0:	1007883a 	mov	r3,r2
 40023f4:	00bffe04 	movi	r2,-8
 40023f8:	1884703a 	and	r2,r3,r2
 40023fc:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 4002400:	e0bffd83 	ldbu	r2,-10(fp)
 4002404:	1005d0fa 	srai	r2,r2,3
 4002408:	1007883a 	mov	r3,r2
 400240c:	e0bffd43 	ldbu	r2,-11(fp)
 4002410:	100490fa 	slli	r2,r2,3
 4002414:	1884b03a 	or	r2,r3,r2
 4002418:	1007883a 	mov	r3,r2
 400241c:	e0bffd03 	ldbu	r2,-12(fp)
 4002420:	1004923a 	slli	r2,r2,8
 4002424:	1884b03a 	or	r2,r3,r2
 4002428:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 400242c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4002430:	e037883a 	mov	sp,fp
 4002434:	df000017 	ldw	fp,0(sp)
 4002438:	dec00104 	addi	sp,sp,4
 400243c:	f800283a 	ret

04002440 <_Z22vid_color_convert16_24tPc>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 4002440:	defffd04 	addi	sp,sp,-12
 4002444:	df000215 	stw	fp,8(sp)
 4002448:	df000204 	addi	fp,sp,8
 400244c:	2005883a 	mov	r2,r4
 4002450:	e17fff15 	stw	r5,-4(fp)
 4002454:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4002458:	e0bffe0b 	ldhu	r2,-8(fp)
 400245c:	1005d2fa 	srai	r2,r2,11
 4002460:	1007883a 	mov	r3,r2
 4002464:	e0bfff17 	ldw	r2,-4(fp)
 4002468:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 400246c:	e0bfff17 	ldw	r2,-4(fp)
 4002470:	10800044 	addi	r2,r2,1
 4002474:	e0fffe0b 	ldhu	r3,-8(fp)
 4002478:	18c00f8c 	andi	r3,r3,62
 400247c:	1807d17a 	srai	r3,r3,5
 4002480:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4002484:	e0bfff17 	ldw	r2,-4(fp)
 4002488:	10800084 	addi	r2,r2,2
 400248c:	e0fffe0b 	ldhu	r3,-8(fp)
 4002490:	18c007cc 	andi	r3,r3,31
 4002494:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4002498:	0005883a 	mov	r2,zero
}
 400249c:	e037883a 	mov	sp,fp
 40024a0:	df000017 	ldw	fp,0(sp)
 40024a4:	dec00104 	addi	sp,sp,4
 40024a8:	f800283a 	ret

040024ac <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 40024ac:	defff504 	addi	sp,sp,-44
 40024b0:	dfc00a15 	stw	ra,40(sp)
 40024b4:	df000915 	stw	fp,36(sp)
 40024b8:	df000904 	addi	fp,sp,36
 40024bc:	e13ffc15 	stw	r4,-16(fp)
 40024c0:	e17ffd15 	stw	r5,-12(fp)
 40024c4:	e1bffe15 	stw	r6,-8(fp)
 40024c8:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
 40024cc:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
 40024d0:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 40024d4:	e1000317 	ldw	r4,12(fp)
 40024d8:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40024dc:	100b883a 	mov	r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
 40024e0:	e0800317 	ldw	r2,12(fp)
 40024e4:	10c00517 	ldw	r3,20(r2)
 40024e8:	e0800317 	ldw	r2,12(fp)
 40024ec:	10800717 	ldw	r2,28(r2)
 40024f0:	1887383a 	mul	r3,r3,r2
 40024f4:	e0bffd17 	ldw	r2,-12(fp)
 40024f8:	1887383a 	mul	r3,r3,r2
    (x * (display->bytes_per_pixel)));
 40024fc:	e0800317 	ldw	r2,12(fp)
 4002500:	11000717 	ldw	r4,28(r2)
 4002504:	e0bffc17 	ldw	r2,-16(fp)
 4002508:	2085383a 	mul	r2,r4,r2
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
 400250c:	1885883a 	add	r2,r3,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 4002510:	2885883a 	add	r2,r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
 4002514:	e0bff915 	stw	r2,-28(fp)
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
 4002518:	e0800317 	ldw	r2,12(fp)
 400251c:	10c00717 	ldw	r3,28(r2)
 4002520:	e0bfff17 	ldw	r2,-4(fp)
 4002524:	1885383a 	mul	r2,r3,r2
 4002528:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
 400252c:	e0800217 	ldw	r2,8(fp)
 4002530:	10800618 	cmpnei	r2,r2,24
 4002534:	10004a1e 	bne	r2,zero,4002660 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x1b4>
  {
    if(display->color_depth == 16)
 4002538:	e0800317 	ldw	r2,12(fp)
 400253c:	10800417 	ldw	r2,16(r2)
 4002540:	10800418 	cmpnei	r2,r2,16
 4002544:	10003c1e 	bne	r2,zero,4002638 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x18c>
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
 4002548:	e13ffa17 	ldw	r4,-24(fp)
 400254c:	400deb40 	call	400deb4 <malloc>
 4002550:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
 4002554:	e0fff717 	ldw	r3,-36(fp)
 4002558:	e0bffa17 	ldw	r2,-24(fp)
 400255c:	18802e2e 	bgeu	r3,r2,4002618 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x16c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
 4002560:	e0bff817 	ldw	r2,-32(fp)
 4002564:	1085883a 	add	r2,r2,r2
 4002568:	1007883a 	mov	r3,r2
 400256c:	e0bffb17 	ldw	r2,-20(fp)
 4002570:	10c5883a 	add	r2,r2,r3
 4002574:	e0fff717 	ldw	r3,-36(fp)
 4002578:	18c00084 	addi	r3,r3,2
 400257c:	e13ffe17 	ldw	r4,-8(fp)
 4002580:	20c7883a 	add	r3,r4,r3
 4002584:	18c00003 	ldbu	r3,0(r3)
 4002588:	18c03fcc 	andi	r3,r3,255
 400258c:	18c0201c 	xori	r3,r3,128
 4002590:	18ffe004 	addi	r3,r3,-128
 4002594:	18c03e0c 	andi	r3,r3,248
 4002598:	1807d0fa 	srai	r3,r3,3
 400259c:	180b883a 	mov	r5,r3
 40025a0:	e0fff717 	ldw	r3,-36(fp)
 40025a4:	18c00044 	addi	r3,r3,1
 40025a8:	e13ffe17 	ldw	r4,-8(fp)
 40025ac:	20c7883a 	add	r3,r4,r3
 40025b0:	18c00003 	ldbu	r3,0(r3)
 40025b4:	18c03fcc 	andi	r3,r3,255
 40025b8:	18c0201c 	xori	r3,r3,128
 40025bc:	18ffe004 	addi	r3,r3,-128
 40025c0:	18c03f0c 	andi	r3,r3,252
 40025c4:	180690fa 	slli	r3,r3,3
 40025c8:	28c6b03a 	or	r3,r5,r3
 40025cc:	180b883a 	mov	r5,r3
 40025d0:	e0fff717 	ldw	r3,-36(fp)
 40025d4:	e13ffe17 	ldw	r4,-8(fp)
 40025d8:	20c7883a 	add	r3,r4,r3
 40025dc:	18c00003 	ldbu	r3,0(r3)
 40025e0:	18c03fcc 	andi	r3,r3,255
 40025e4:	18c0201c 	xori	r3,r3,128
 40025e8:	18ffe004 	addi	r3,r3,-128
 40025ec:	18c03e0c 	andi	r3,r3,248
 40025f0:	1806923a 	slli	r3,r3,8
 40025f4:	28c6b03a 	or	r3,r5,r3
 40025f8:	10c0000d 	sth	r3,0(r2)
        index_16++;
 40025fc:	e0bff817 	ldw	r2,-32(fp)
 4002600:	10800044 	addi	r2,r2,1
 4002604:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4002608:	e0bff717 	ldw	r2,-36(fp)
 400260c:	108000c4 	addi	r2,r2,3
 4002610:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
 4002614:	003fcf06 	br	4002554 <__alt_mem_epcs_flash_controller_0+0xfb001554>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4002618:	e0bff917 	ldw	r2,-28(fp)
 400261c:	e1bffa17 	ldw	r6,-24(fp)
 4002620:	e17ffb17 	ldw	r5,-20(fp)
 4002624:	1009883a 	mov	r4,r2
 4002628:	400e6e80 	call	400e6e8 <memcpy>
      free(temp_line);
 400262c:	e13ffb17 	ldw	r4,-20(fp)
 4002630:	400dec80 	call	400dec8 <free>
 4002634:	00003f06 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    }
    else if(display->color_depth == 24)
 4002638:	e0800317 	ldw	r2,12(fp)
 400263c:	10800417 	ldw	r2,16(r2)
 4002640:	10800618 	cmpnei	r2,r2,24
 4002644:	10003b1e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4002648:	e0bff917 	ldw	r2,-28(fp)
 400264c:	e1bffa17 	ldw	r6,-24(fp)
 4002650:	e17ffe17 	ldw	r5,-8(fp)
 4002654:	1009883a 	mov	r4,r2
 4002658:	400e6e80 	call	400e6e8 <memcpy>
 400265c:	00003506 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    }
  }
  else if(source_color_depth == 16)
 4002660:	e0800217 	ldw	r2,8(fp)
 4002664:	10800418 	cmpnei	r2,r2,16
 4002668:	1000321e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
  {
    if(display->color_depth == 24)
 400266c:	e0800317 	ldw	r2,12(fp)
 4002670:	10800417 	ldw	r2,16(r2)
 4002674:	10800618 	cmpnei	r2,r2,24
 4002678:	1000251e 	bne	r2,zero,4002710 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x264>
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
 400267c:	e13ffa17 	ldw	r4,-24(fp)
 4002680:	400deb40 	call	400deb4 <malloc>
 4002684:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
 4002688:	e0fff817 	ldw	r3,-32(fp)
 400268c:	e0bfff17 	ldw	r2,-4(fp)
 4002690:	1880170e 	bge	r3,r2,40026f0 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x244>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
 4002694:	e0bff817 	ldw	r2,-32(fp)
 4002698:	e0fffe17 	ldw	r3,-8(fp)
 400269c:	1885883a 	add	r2,r3,r2
 40026a0:	10800003 	ldbu	r2,0(r2)
 40026a4:	10803fcc 	andi	r2,r2,255
 40026a8:	1080201c 	xori	r2,r2,128
 40026ac:	10bfe004 	addi	r2,r2,-128
 40026b0:	10ffffcc 	andi	r3,r2,65535
 40026b4:	e0bff717 	ldw	r2,-36(fp)
 40026b8:	1085883a 	add	r2,r2,r2
 40026bc:	1009883a 	mov	r4,r2
 40026c0:	e0bffb17 	ldw	r2,-20(fp)
 40026c4:	1105883a 	add	r2,r2,r4
 40026c8:	100b883a 	mov	r5,r2
 40026cc:	1809883a 	mov	r4,r3
 40026d0:	40024400 	call	4002440 <_Z22vid_color_convert16_24tPc>
        index_16++;
 40026d4:	e0bff817 	ldw	r2,-32(fp)
 40026d8:	10800044 	addi	r2,r2,1
 40026dc:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 40026e0:	e0bff717 	ldw	r2,-36(fp)
 40026e4:	108000c4 	addi	r2,r2,3
 40026e8:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
      while(index_16 < num_pixels )
 40026ec:	003fe606 	br	4002688 <__alt_mem_epcs_flash_controller_0+0xfb001688>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 40026f0:	e0bff917 	ldw	r2,-28(fp)
 40026f4:	e1bffa17 	ldw	r6,-24(fp)
 40026f8:	e17ffb17 	ldw	r5,-20(fp)
 40026fc:	1009883a 	mov	r4,r2
 4002700:	400e6e80 	call	400e6e8 <memcpy>
      free(temp_line);
 4002704:	e13ffb17 	ldw	r4,-20(fp)
 4002708:	400dec80 	call	400dec8 <free>
 400270c:	00000906 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
      
    }
    else if(display->color_depth == 16)
 4002710:	e0800317 	ldw	r2,12(fp)
 4002714:	10800417 	ldw	r2,16(r2)
 4002718:	10800418 	cmpnei	r2,r2,16
 400271c:	1000051e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4002720:	e0bff917 	ldw	r2,-28(fp)
 4002724:	e1bffa17 	ldw	r6,-24(fp)
 4002728:	e17ffe17 	ldw	r5,-8(fp)
 400272c:	1009883a 	mov	r4,r2
 4002730:	400e6e80 	call	400e6e8 <memcpy>
    }
  }
  return(0);
 4002734:	0005883a 	mov	r2,zero
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 400274c:	deffef04 	addi	sp,sp,-68
 4002750:	dfc01015 	stw	ra,64(sp)
 4002754:	df000f15 	stw	fp,60(sp)
 4002758:	df000f04 	addi	fp,sp,60
 400275c:	2011883a 	mov	r8,r4
 4002760:	3009883a 	mov	r4,r6
 4002764:	3807883a 	mov	r3,r7
 4002768:	e0800217 	ldw	r2,8(fp)
 400276c:	e23ffb0d 	sth	r8,-20(fp)
 4002770:	e17ffc0d 	sth	r5,-16(fp)
 4002774:	e13ffd0d 	sth	r4,-12(fp)
 4002778:	e0fffe0d 	sth	r3,-8(fp)
 400277c:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4002780:	e0fffd0b 	ldhu	r3,-12(fp)
 4002784:	e0bffb0b 	ldhu	r2,-20(fp)
 4002788:	1885c83a 	sub	r2,r3,r2
 400278c:	1000010e 	bge	r2,zero,4002794 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x48>
 4002790:	0085c83a 	sub	r2,zero,r2
 4002794:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4002798:	e0fffe0b 	ldhu	r3,-8(fp)
 400279c:	e0bffc0b 	ldhu	r2,-16(fp)
 40027a0:	1885c83a 	sub	r2,r3,r2
 40027a4:	1000010e 	bge	r2,zero,40027ac <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x60>
 40027a8:	0085c83a 	sub	r2,zero,r2
 40027ac:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 40027b0:	e0bffb0b 	ldhu	r2,-20(fp)
 40027b4:	e0fffd0b 	ldhu	r3,-12(fp)
 40027b8:	1880032e 	bgeu	r3,r2,40027c8 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x7c>
 40027bc:	00bfffc4 	movi	r2,-1
 40027c0:	e0bff315 	stw	r2,-52(fp)
 40027c4:	00000206 	br	40027d0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x84>
 40027c8:	00800044 	movi	r2,1
 40027cc:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 40027d0:	e0bffc0b 	ldhu	r2,-16(fp)
 40027d4:	e0fffe0b 	ldhu	r3,-8(fp)
 40027d8:	1880032e 	bgeu	r3,r2,40027e8 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x9c>
 40027dc:	00bfffc4 	movi	r2,-1
 40027e0:	e0bff415 	stw	r2,-48(fp)
 40027e4:	00000206 	br	40027f0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0xa4>
 40027e8:	00800044 	movi	r2,1
 40027ec:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 40027f0:	e0fff117 	ldw	r3,-60(fp)
 40027f4:	e0bff217 	ldw	r2,-56(fp)
 40027f8:	18803516 	blt	r3,r2,40028d0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x184>
    int dPr   = vert_delta<<1;
 40027fc:	e0bff217 	ldw	r2,-56(fp)
 4002800:	1085883a 	add	r2,r2,r2
 4002804:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4002808:	e0bff117 	ldw	r2,-60(fp)
 400280c:	1085883a 	add	r2,r2,r2
 4002810:	1007883a 	mov	r3,r2
 4002814:	e0bff717 	ldw	r2,-36(fp)
 4002818:	10c5c83a 	sub	r2,r2,r3
 400281c:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 4002820:	e0fff717 	ldw	r3,-36(fp)
 4002824:	e0bff117 	ldw	r2,-60(fp)
 4002828:	1885c83a 	sub	r2,r3,r2
 400282c:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4002830:	e0bff117 	ldw	r2,-60(fp)
 4002834:	10005b16 	blt	r2,zero,40029a4 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x258>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4002838:	e0bffb0b 	ldhu	r2,-20(fp)
 400283c:	e0fffc0b 	ldhu	r3,-16(fp)
 4002840:	e1000317 	ldw	r4,12(fp)
 4002844:	e1c00417 	ldw	r7,16(fp)
 4002848:	200d883a 	mov	r6,r4
 400284c:	180b883a 	mov	r5,r3
 4002850:	1009883a 	mov	r4,r2
 4002854:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      // If we're moving both up and right
      if (P > 0) {
 4002858:	e0bff517 	ldw	r2,-44(fp)
 400285c:	00800f0e 	bge	zero,r2,400289c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x150>
        horiz_start+=horiz_incr;
 4002860:	e0bff317 	ldw	r2,-52(fp)
 4002864:	1007883a 	mov	r3,r2
 4002868:	e0bffb0b 	ldhu	r2,-20(fp)
 400286c:	1885883a 	add	r2,r3,r2
 4002870:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4002874:	e0bff417 	ldw	r2,-48(fp)
 4002878:	1007883a 	mov	r3,r2
 400287c:	e0bffc0b 	ldhu	r2,-16(fp)
 4002880:	1885883a 	add	r2,r3,r2
 4002884:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4002888:	e0fff517 	ldw	r3,-44(fp)
 400288c:	e0bff817 	ldw	r2,-32(fp)
 4002890:	1885883a 	add	r2,r3,r2
 4002894:	e0bff515 	stw	r2,-44(fp)
 4002898:	00000906 	br	40028c0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x174>
      } else {
        horiz_start+=horiz_incr;
 400289c:	e0bff317 	ldw	r2,-52(fp)
 40028a0:	1007883a 	mov	r3,r2
 40028a4:	e0bffb0b 	ldhu	r2,-20(fp)
 40028a8:	1885883a 	add	r2,r3,r2
 40028ac:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 40028b0:	e0fff517 	ldw	r3,-44(fp)
 40028b4:	e0bff717 	ldw	r2,-36(fp)
 40028b8:	1885883a 	add	r2,r3,r2
 40028bc:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 40028c0:	e0bff117 	ldw	r2,-60(fp)
 40028c4:	10bfffc4 	addi	r2,r2,-1
 40028c8:	e0bff115 	stw	r2,-60(fp)
 40028cc:	003fd806 	br	4002830 <__alt_mem_epcs_flash_controller_0+0xfb001830>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 40028d0:	e0bff117 	ldw	r2,-60(fp)
 40028d4:	1085883a 	add	r2,r2,r2
 40028d8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 40028dc:	e0bff217 	ldw	r2,-56(fp)
 40028e0:	1085883a 	add	r2,r2,r2
 40028e4:	1007883a 	mov	r3,r2
 40028e8:	e0bff917 	ldw	r2,-28(fp)
 40028ec:	10c5c83a 	sub	r2,r2,r3
 40028f0:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 40028f4:	e0fff917 	ldw	r3,-28(fp)
 40028f8:	e0bff217 	ldw	r2,-56(fp)
 40028fc:	1885c83a 	sub	r2,r3,r2
 4002900:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4002904:	e0bff217 	ldw	r2,-56(fp)
 4002908:	10002616 	blt	r2,zero,40029a4 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x258>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 400290c:	e0bffb0b 	ldhu	r2,-20(fp)
 4002910:	e0fffc0b 	ldhu	r3,-16(fp)
 4002914:	e1000317 	ldw	r4,12(fp)
 4002918:	e1c00417 	ldw	r7,16(fp)
 400291c:	200d883a 	mov	r6,r4
 4002920:	180b883a 	mov	r5,r3
 4002924:	1009883a 	mov	r4,r2
 4002928:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      // If we're moving both up and right
      if (P > 0) {
 400292c:	e0bff617 	ldw	r2,-40(fp)
 4002930:	00800f0e 	bge	zero,r2,4002970 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x224>
        horiz_start+=horiz_incr;
 4002934:	e0bff317 	ldw	r2,-52(fp)
 4002938:	1007883a 	mov	r3,r2
 400293c:	e0bffb0b 	ldhu	r2,-20(fp)
 4002940:	1885883a 	add	r2,r3,r2
 4002944:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4002948:	e0bff417 	ldw	r2,-48(fp)
 400294c:	1007883a 	mov	r3,r2
 4002950:	e0bffc0b 	ldhu	r2,-16(fp)
 4002954:	1885883a 	add	r2,r3,r2
 4002958:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 400295c:	e0fff617 	ldw	r3,-40(fp)
 4002960:	e0bffa17 	ldw	r2,-24(fp)
 4002964:	1885883a 	add	r2,r3,r2
 4002968:	e0bff615 	stw	r2,-40(fp)
 400296c:	00000906 	br	4002994 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x248>
      } else {
        vert_start+=vert_incr;
 4002970:	e0bff417 	ldw	r2,-48(fp)
 4002974:	1007883a 	mov	r3,r2
 4002978:	e0bffc0b 	ldhu	r2,-16(fp)
 400297c:	1885883a 	add	r2,r3,r2
 4002980:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4002984:	e0fff617 	ldw	r3,-40(fp)
 4002988:	e0bff917 	ldw	r2,-28(fp)
 400298c:	1885883a 	add	r2,r3,r2
 4002990:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4002994:	e0bff217 	ldw	r2,-56(fp)
 4002998:	10bfffc4 	addi	r2,r2,-1
 400299c:	e0bff215 	stw	r2,-56(fp)
 40029a0:	003fd806 	br	4002904 <__alt_mem_epcs_flash_controller_0+0xfb001904>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40029a4:	0001883a 	nop
 40029a8:	e037883a 	mov	sp,fp
 40029ac:	dfc00117 	ldw	ra,4(sp)
 40029b0:	df000017 	ldw	fp,0(sp)
 40029b4:	dec00204 	addi	sp,sp,8
 40029b8:	f800283a 	ret

040029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 40029bc:	defff104 	addi	sp,sp,-60
 40029c0:	dfc00e15 	stw	ra,56(sp)
 40029c4:	df000d15 	stw	fp,52(sp)
 40029c8:	df000d04 	addi	fp,sp,52
 40029cc:	e13ffb15 	stw	r4,-20(fp)
 40029d0:	e17ffc15 	stw	r5,-16(fp)
 40029d4:	e1bffd15 	stw	r6,-12(fp)
 40029d8:	e1fffe15 	stw	r7,-8(fp)
 40029dc:	e0800217 	ldw	r2,8(fp)
 40029e0:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 40029e4:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 40029e8:	e0bffd17 	ldw	r2,-12(fp)
 40029ec:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 40029f0:	e0bffd17 	ldw	r2,-12(fp)
 40029f4:	1085883a 	add	r2,r2,r2
 40029f8:	1085883a 	add	r2,r2,r2
 40029fc:	1007883a 	mov	r3,r2
 4002a00:	00800144 	movi	r2,5
 4002a04:	10c5c83a 	sub	r2,r2,r3
 4002a08:	1000010e 	bge	r2,zero,4002a10 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0x54>
 4002a0c:	108000c4 	addi	r2,r2,3
 4002a10:	1005d0ba 	srai	r2,r2,2
 4002a14:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4002a18:	e0bfff07 	ldb	r2,-4(fp)
 4002a1c:	e0c00317 	ldw	r3,12(fp)
 4002a20:	d8c00415 	stw	r3,16(sp)
 4002a24:	d8800315 	stw	r2,12(sp)
 4002a28:	e0bffe17 	ldw	r2,-8(fp)
 4002a2c:	d8800215 	stw	r2,8(sp)
 4002a30:	d8000115 	stw	zero,4(sp)
 4002a34:	d8000015 	stw	zero,0(sp)
 4002a38:	e1fff917 	ldw	r7,-28(fp)
 4002a3c:	e1bff817 	ldw	r6,-32(fp)
 4002a40:	e17ffc17 	ldw	r5,-16(fp)
 4002a44:	e13ffb17 	ldw	r4,-20(fp)
 4002a48:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002a4c:	e0fff817 	ldw	r3,-32(fp)
 4002a50:	e0bff917 	ldw	r2,-28(fp)
 4002a54:	1880250e 	bge	r3,r2,4002aec <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0x130>
    x++;
 4002a58:	e0bff817 	ldw	r2,-32(fp)
 4002a5c:	10800044 	addi	r2,r2,1
 4002a60:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4002a64:	e0bffa17 	ldw	r2,-24(fp)
 4002a68:	1000070e 	bge	r2,zero,4002a88 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0xcc>
      p += 2*x+1;
 4002a6c:	e0bff817 	ldw	r2,-32(fp)
 4002a70:	1085883a 	add	r2,r2,r2
 4002a74:	10800044 	addi	r2,r2,1
 4002a78:	e0fffa17 	ldw	r3,-24(fp)
 4002a7c:	1885883a 	add	r2,r3,r2
 4002a80:	e0bffa15 	stw	r2,-24(fp)
 4002a84:	00000b06 	br	4002ab4 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0xf8>
    } else {
      y--;
 4002a88:	e0bff917 	ldw	r2,-28(fp)
 4002a8c:	10bfffc4 	addi	r2,r2,-1
 4002a90:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4002a94:	e0fff817 	ldw	r3,-32(fp)
 4002a98:	e0bff917 	ldw	r2,-28(fp)
 4002a9c:	1885c83a 	sub	r2,r3,r2
 4002aa0:	1085883a 	add	r2,r2,r2
 4002aa4:	10800044 	addi	r2,r2,1
 4002aa8:	e0fffa17 	ldw	r3,-24(fp)
 4002aac:	1885883a 	add	r2,r3,r2
 4002ab0:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4002ab4:	e0bfff07 	ldb	r2,-4(fp)
 4002ab8:	e0c00317 	ldw	r3,12(fp)
 4002abc:	d8c00415 	stw	r3,16(sp)
 4002ac0:	d8800315 	stw	r2,12(sp)
 4002ac4:	e0bffe17 	ldw	r2,-8(fp)
 4002ac8:	d8800215 	stw	r2,8(sp)
 4002acc:	d8000115 	stw	zero,4(sp)
 4002ad0:	d8000015 	stw	zero,0(sp)
 4002ad4:	e1fff917 	ldw	r7,-28(fp)
 4002ad8:	e1bff817 	ldw	r6,-32(fp)
 4002adc:	e17ffc17 	ldw	r5,-16(fp)
 4002ae0:	e13ffb17 	ldw	r4,-20(fp)
 4002ae4:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002ae8:	003fd806 	br	4002a4c <__alt_mem_epcs_flash_controller_0+0xfb001a4c>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4002aec:	0005883a 	mov	r2,zero
}
 4002af0:	e037883a 	mov	sp,fp
 4002af4:	dfc00117 	ldw	ra,4(sp)
 4002af8:	df000017 	ldw	fp,0(sp)
 4002afc:	dec00204 	addi	sp,sp,8
 4002b00:	f800283a 	ret

04002b04 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 4002b04:	deffec04 	addi	sp,sp,-80
 4002b08:	dfc01315 	stw	ra,76(sp)
 4002b0c:	df001215 	stw	fp,72(sp)
 4002b10:	df001204 	addi	fp,sp,72
 4002b14:	e13ffc15 	stw	r4,-16(fp)
 4002b18:	e17ffd15 	stw	r5,-12(fp)
 4002b1c:	e1bffe15 	stw	r6,-8(fp)
 4002b20:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4002b24:	e0bffc17 	ldw	r2,-16(fp)
 4002b28:	e0fffe17 	ldw	r3,-8(fp)
 4002b2c:	1880060e 	bge	r3,r2,4002b48 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x44>
  {
    temp = horiz_end;
 4002b30:	e0bffe17 	ldw	r2,-8(fp)
 4002b34:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002b38:	e0bffc17 	ldw	r2,-16(fp)
 4002b3c:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 4002b40:	e0bff617 	ldw	r2,-40(fp)
 4002b44:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 4002b48:	e0bffd17 	ldw	r2,-12(fp)
 4002b4c:	e0ffff17 	ldw	r3,-4(fp)
 4002b50:	1880060e 	bge	r3,r2,4002b6c <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x68>
  {
    temp = vert_end;
 4002b54:	e0bfff17 	ldw	r2,-4(fp)
 4002b58:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4002b5c:	e0bffd17 	ldw	r2,-12(fp)
 4002b60:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 4002b64:	e0bff617 	ldw	r2,-40(fp)
 4002b68:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 4002b6c:	e0fffe17 	ldw	r3,-8(fp)
 4002b70:	e0bffc17 	ldw	r2,-16(fp)
 4002b74:	1885c83a 	sub	r2,r3,r2
 4002b78:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 4002b7c:	e0ffff17 	ldw	r3,-4(fp)
 4002b80:	e0bffd17 	ldw	r2,-12(fp)
 4002b84:	1885c83a 	sub	r2,r3,r2
 4002b88:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 4002b8c:	e0bff717 	ldw	r2,-36(fp)
 4002b90:	1006d07a 	srli	r3,r2,1
 4002b94:	e0800217 	ldw	r2,8(fp)
 4002b98:	1880032e 	bgeu	r3,r2,4002ba8 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0xa4>
    radius = width / 2;
 4002b9c:	e0bff717 	ldw	r2,-36(fp)
 4002ba0:	1004d07a 	srli	r2,r2,1
 4002ba4:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 4002ba8:	e0bff817 	ldw	r2,-32(fp)
 4002bac:	1006d07a 	srli	r3,r2,1
 4002bb0:	e0800217 	ldw	r2,8(fp)
 4002bb4:	1880032e 	bgeu	r3,r2,4002bc4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0xc0>
    radius = height / 2;
 4002bb8:	e0bff817 	ldw	r2,-32(fp)
 4002bbc:	1004d07a 	srli	r2,r2,1
 4002bc0:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 4002bc4:	e0800217 	ldw	r2,8(fp)
 4002bc8:	1085883a 	add	r2,r2,r2
 4002bcc:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 4002bd0:	e0bff917 	ldw	r2,-28(fp)
 4002bd4:	e0fff717 	ldw	r3,-36(fp)
 4002bd8:	1885c83a 	sub	r2,r3,r2
 4002bdc:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 4002be0:	e0bff917 	ldw	r2,-28(fp)
 4002be4:	e0fff817 	ldw	r3,-32(fp)
 4002be8:	1885c83a 	sub	r2,r3,r2
 4002bec:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 4002bf0:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 4002bf4:	e0800217 	ldw	r2,8(fp)
 4002bf8:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 4002bfc:	e0800217 	ldw	r2,8(fp)
 4002c00:	1085883a 	add	r2,r2,r2
 4002c04:	1085883a 	add	r2,r2,r2
 4002c08:	1007883a 	mov	r3,r2
 4002c0c:	00800144 	movi	r2,5
 4002c10:	10c5c83a 	sub	r2,r2,r3
 4002c14:	1000010e 	bge	r2,zero,4002c1c <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x118>
 4002c18:	108000c4 	addi	r2,r2,3
 4002c1c:	1005d0ba 	srai	r2,r2,2
 4002c20:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002c24:	e0fffc17 	ldw	r3,-16(fp)
 4002c28:	e0800217 	ldw	r2,8(fp)
 4002c2c:	1891883a 	add	r8,r3,r2
 4002c30:	e0fffd17 	ldw	r3,-12(fp)
 4002c34:	e0800217 	ldw	r2,8(fp)
 4002c38:	1893883a 	add	r9,r3,r2
 4002c3c:	e1bff317 	ldw	r6,-52(fp)
 4002c40:	e1fff417 	ldw	r7,-48(fp)
 4002c44:	e0bffa17 	ldw	r2,-24(fp)
 4002c48:	e0fffb17 	ldw	r3,-20(fp)
 4002c4c:	e1000417 	ldw	r4,16(fp)
 4002c50:	21003fcc 	andi	r4,r4,255
 4002c54:	2100201c 	xori	r4,r4,128
 4002c58:	213fe004 	addi	r4,r4,-128
                           straight_width, straight_height, color, fill, display );
 4002c5c:	e1400517 	ldw	r5,20(fp)
 4002c60:	d9400415 	stw	r5,16(sp)
 4002c64:	d9000315 	stw	r4,12(sp)
 4002c68:	e1000317 	ldw	r4,12(fp)
 4002c6c:	d9000215 	stw	r4,8(sp)
 4002c70:	d8c00115 	stw	r3,4(sp)
 4002c74:	d8800015 	stw	r2,0(sp)
 4002c78:	480b883a 	mov	r5,r9
 4002c7c:	4009883a 	mov	r4,r8
 4002c80:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002c84:	e0fff317 	ldw	r3,-52(fp)
 4002c88:	e0bff417 	ldw	r2,-48(fp)
 4002c8c:	1880322e 	bgeu	r3,r2,4002d58 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x254>
    x++;
 4002c90:	e0bff317 	ldw	r2,-52(fp)
 4002c94:	10800044 	addi	r2,r2,1
 4002c98:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 4002c9c:	e0bff517 	ldw	r2,-44(fp)
 4002ca0:	1000080e 	bge	r2,zero,4002cc4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x1c0>
      p += 2*x+1;
 4002ca4:	e0bff317 	ldw	r2,-52(fp)
 4002ca8:	1085883a 	add	r2,r2,r2
 4002cac:	1007883a 	mov	r3,r2
 4002cb0:	e0bff517 	ldw	r2,-44(fp)
 4002cb4:	1885883a 	add	r2,r3,r2
 4002cb8:	10800044 	addi	r2,r2,1
 4002cbc:	e0bff515 	stw	r2,-44(fp)
 4002cc0:	00000c06 	br	4002cf4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x1f0>
    } else {
      y--;
 4002cc4:	e0bff417 	ldw	r2,-48(fp)
 4002cc8:	10bfffc4 	addi	r2,r2,-1
 4002ccc:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 4002cd0:	e0fff317 	ldw	r3,-52(fp)
 4002cd4:	e0bff417 	ldw	r2,-48(fp)
 4002cd8:	1885c83a 	sub	r2,r3,r2
 4002cdc:	1085883a 	add	r2,r2,r2
 4002ce0:	1007883a 	mov	r3,r2
 4002ce4:	e0bff517 	ldw	r2,-44(fp)
 4002ce8:	1885883a 	add	r2,r3,r2
 4002cec:	10800044 	addi	r2,r2,1
 4002cf0:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002cf4:	e0fffc17 	ldw	r3,-16(fp)
 4002cf8:	e0800217 	ldw	r2,8(fp)
 4002cfc:	1891883a 	add	r8,r3,r2
 4002d00:	e0fffd17 	ldw	r3,-12(fp)
 4002d04:	e0800217 	ldw	r2,8(fp)
 4002d08:	1893883a 	add	r9,r3,r2
 4002d0c:	e1bff317 	ldw	r6,-52(fp)
 4002d10:	e1fff417 	ldw	r7,-48(fp)
 4002d14:	e0bffa17 	ldw	r2,-24(fp)
 4002d18:	e0fffb17 	ldw	r3,-20(fp)
 4002d1c:	e1000417 	ldw	r4,16(fp)
 4002d20:	21003fcc 	andi	r4,r4,255
 4002d24:	2100201c 	xori	r4,r4,128
 4002d28:	213fe004 	addi	r4,r4,-128
                             straight_width, straight_height, color, fill, display);
 4002d2c:	e1400517 	ldw	r5,20(fp)
 4002d30:	d9400415 	stw	r5,16(sp)
 4002d34:	d9000315 	stw	r4,12(sp)
 4002d38:	e1000317 	ldw	r4,12(fp)
 4002d3c:	d9000215 	stw	r4,8(sp)
 4002d40:	d8c00115 	stw	r3,4(sp)
 4002d44:	d8800015 	stw	r2,0(sp)
 4002d48:	480b883a 	mov	r5,r9
 4002d4c:	4009883a 	mov	r4,r8
 4002d50:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002d54:	003fcb06 	br	4002c84 <__alt_mem_epcs_flash_controller_0+0xfb001c84>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4002d58:	e0800417 	ldw	r2,16(fp)
 4002d5c:	10001026 	beq	r2,zero,4002da0 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x29c>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4002d60:	e0fffd17 	ldw	r3,-12(fp)
 4002d64:	e0800217 	ldw	r2,8(fp)
 4002d68:	1889883a 	add	r4,r3,r2
 4002d6c:	e0ffff17 	ldw	r3,-4(fp)
 4002d70:	e0800217 	ldw	r2,8(fp)
 4002d74:	1887c83a 	sub	r3,r3,r2
 4002d78:	e0800517 	ldw	r2,20(fp)
 4002d7c:	d8800115 	stw	r2,4(sp)
 4002d80:	e0800317 	ldw	r2,12(fp)
 4002d84:	d8800015 	stw	r2,0(sp)
 4002d88:	180f883a 	mov	r7,r3
 4002d8c:	e1bffe17 	ldw	r6,-8(fp)
 4002d90:	200b883a 	mov	r5,r4
 4002d94:	e13ffc17 	ldw	r4,-16(fp)
 4002d98:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
 4002d9c:	00004206 	br	4002ea8 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 4002da0:	e0fffd17 	ldw	r3,-12(fp)
 4002da4:	e0800217 	ldw	r2,8(fp)
 4002da8:	1889883a 	add	r4,r3,r2
 4002dac:	e0ffff17 	ldw	r3,-4(fp)
 4002db0:	e0800217 	ldw	r2,8(fp)
 4002db4:	1887c83a 	sub	r3,r3,r2
 4002db8:	e0800517 	ldw	r2,20(fp)
 4002dbc:	d8800215 	stw	r2,8(sp)
 4002dc0:	e0800317 	ldw	r2,12(fp)
 4002dc4:	d8800115 	stw	r2,4(sp)
 4002dc8:	00800044 	movi	r2,1
 4002dcc:	d8800015 	stw	r2,0(sp)
 4002dd0:	180f883a 	mov	r7,r3
 4002dd4:	e1bffc17 	ldw	r6,-16(fp)
 4002dd8:	200b883a 	mov	r5,r4
 4002ddc:	e13ffc17 	ldw	r4,-16(fp)
 4002de0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 4002de4:	e0fffd17 	ldw	r3,-12(fp)
 4002de8:	e0800217 	ldw	r2,8(fp)
 4002dec:	1889883a 	add	r4,r3,r2
 4002df0:	e0ffff17 	ldw	r3,-4(fp)
 4002df4:	e0800217 	ldw	r2,8(fp)
 4002df8:	1887c83a 	sub	r3,r3,r2
 4002dfc:	e0800517 	ldw	r2,20(fp)
 4002e00:	d8800215 	stw	r2,8(sp)
 4002e04:	e0800317 	ldw	r2,12(fp)
 4002e08:	d8800115 	stw	r2,4(sp)
 4002e0c:	00800044 	movi	r2,1
 4002e10:	d8800015 	stw	r2,0(sp)
 4002e14:	180f883a 	mov	r7,r3
 4002e18:	e1bffe17 	ldw	r6,-8(fp)
 4002e1c:	200b883a 	mov	r5,r4
 4002e20:	e13ffe17 	ldw	r4,-8(fp)
 4002e24:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4002e28:	e0fffc17 	ldw	r3,-16(fp)
 4002e2c:	e0800217 	ldw	r2,8(fp)
 4002e30:	1889883a 	add	r4,r3,r2
 4002e34:	e0fffe17 	ldw	r3,-8(fp)
 4002e38:	e0800217 	ldw	r2,8(fp)
 4002e3c:	1887c83a 	sub	r3,r3,r2
 4002e40:	e0800517 	ldw	r2,20(fp)
 4002e44:	d8800215 	stw	r2,8(sp)
 4002e48:	e0800317 	ldw	r2,12(fp)
 4002e4c:	d8800115 	stw	r2,4(sp)
 4002e50:	00800044 	movi	r2,1
 4002e54:	d8800015 	stw	r2,0(sp)
 4002e58:	e1fffd17 	ldw	r7,-12(fp)
 4002e5c:	180d883a 	mov	r6,r3
 4002e60:	e17ffd17 	ldw	r5,-12(fp)
 4002e64:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 4002e68:	e0fffc17 	ldw	r3,-16(fp)
 4002e6c:	e0800217 	ldw	r2,8(fp)
 4002e70:	1889883a 	add	r4,r3,r2
 4002e74:	e0fffe17 	ldw	r3,-8(fp)
 4002e78:	e0800217 	ldw	r2,8(fp)
 4002e7c:	1887c83a 	sub	r3,r3,r2
 4002e80:	e0800517 	ldw	r2,20(fp)
 4002e84:	d8800215 	stw	r2,8(sp)
 4002e88:	e0800317 	ldw	r2,12(fp)
 4002e8c:	d8800115 	stw	r2,4(sp)
 4002e90:	00800044 	movi	r2,1
 4002e94:	d8800015 	stw	r2,0(sp)
 4002e98:	e1ffff17 	ldw	r7,-4(fp)
 4002e9c:	180d883a 	mov	r6,r3
 4002ea0:	e17fff17 	ldw	r5,-4(fp)
 4002ea4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
  }

  return (0);
 4002ea8:	0005883a 	mov	r2,zero
}
 4002eac:	e037883a 	mov	sp,fp
 4002eb0:	dfc00117 	ldw	ra,4(sp)
 4002eb4:	df000017 	ldw	fp,0(sp)
 4002eb8:	dec00204 	addi	sp,sp,8
 4002ebc:	f800283a 	ret

04002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 4002ec0:	defff604 	addi	sp,sp,-40
 4002ec4:	dfc00915 	stw	ra,36(sp)
 4002ec8:	df000815 	stw	fp,32(sp)
 4002ecc:	df000804 	addi	fp,sp,32
 4002ed0:	e13ffb15 	stw	r4,-20(fp)
 4002ed4:	e17ffc15 	stw	r5,-16(fp)
 4002ed8:	e1bffd15 	stw	r6,-12(fp)
 4002edc:	e1fffe15 	stw	r7,-8(fp)
 4002ee0:	e0800517 	ldw	r2,20(fp)
 4002ee4:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 4002ee8:	e0bffd17 	ldw	r2,-12(fp)
 4002eec:	1000841e 	bne	r2,zero,4003100 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 4002ef0:	e0fffc17 	ldw	r3,-16(fp)
 4002ef4:	e0bffe17 	ldw	r2,-8(fp)
 4002ef8:	1887883a 	add	r3,r3,r2
 4002efc:	e0800317 	ldw	r2,12(fp)
 4002f00:	1885883a 	add	r2,r3,r2
 4002f04:	e0c00417 	ldw	r3,16(fp)
 4002f08:	e1c00617 	ldw	r7,24(fp)
 4002f0c:	180d883a 	mov	r6,r3
 4002f10:	100b883a 	mov	r5,r2
 4002f14:	e13ffb17 	ldw	r4,-20(fp)
 4002f18:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 4002f1c:	e0fffb17 	ldw	r3,-20(fp)
 4002f20:	e0800217 	ldw	r2,8(fp)
 4002f24:	1889883a 	add	r4,r3,r2
 4002f28:	e0fffc17 	ldw	r3,-16(fp)
 4002f2c:	e0bffe17 	ldw	r2,-8(fp)
 4002f30:	1887883a 	add	r3,r3,r2
 4002f34:	e0800317 	ldw	r2,12(fp)
 4002f38:	1885883a 	add	r2,r3,r2
 4002f3c:	e0c00417 	ldw	r3,16(fp)
 4002f40:	e1c00617 	ldw	r7,24(fp)
 4002f44:	180d883a 	mov	r6,r3
 4002f48:	100b883a 	mov	r5,r2
 4002f4c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4002f50:	e0fffc17 	ldw	r3,-16(fp)
 4002f54:	e0bffe17 	ldw	r2,-8(fp)
 4002f58:	1885c83a 	sub	r2,r3,r2
 4002f5c:	e0c00417 	ldw	r3,16(fp)
 4002f60:	e1c00617 	ldw	r7,24(fp)
 4002f64:	180d883a 	mov	r6,r3
 4002f68:	100b883a 	mov	r5,r2
 4002f6c:	e13ffb17 	ldw	r4,-20(fp)
 4002f70:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 4002f74:	e0fffb17 	ldw	r3,-20(fp)
 4002f78:	e0800217 	ldw	r2,8(fp)
 4002f7c:	1889883a 	add	r4,r3,r2
 4002f80:	e0fffc17 	ldw	r3,-16(fp)
 4002f84:	e0bffe17 	ldw	r2,-8(fp)
 4002f88:	1885c83a 	sub	r2,r3,r2
 4002f8c:	e0c00417 	ldw	r3,16(fp)
 4002f90:	e1c00617 	ldw	r7,24(fp)
 4002f94:	180d883a 	mov	r6,r3
 4002f98:	100b883a 	mov	r5,r2
 4002f9c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>

        if(fill) {
 4002fa0:	e0bfff07 	ldb	r2,-4(fp)
 4002fa4:	10002926 	beq	r2,zero,400304c <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 4002fa8:	e0fffb17 	ldw	r3,-20(fp)
 4002fac:	e0bffe17 	ldw	r2,-8(fp)
 4002fb0:	1889c83a 	sub	r4,r3,r2
 4002fb4:	e0fffb17 	ldw	r3,-20(fp)
 4002fb8:	e0bffe17 	ldw	r2,-8(fp)
 4002fbc:	1887883a 	add	r3,r3,r2
 4002fc0:	e0800217 	ldw	r2,8(fp)
 4002fc4:	1887883a 	add	r3,r3,r2
 4002fc8:	e0800617 	ldw	r2,24(fp)
 4002fcc:	d8800215 	stw	r2,8(sp)
 4002fd0:	e0800417 	ldw	r2,16(fp)
 4002fd4:	d8800115 	stw	r2,4(sp)
 4002fd8:	00800044 	movi	r2,1
 4002fdc:	d8800015 	stw	r2,0(sp)
 4002fe0:	e1fffc17 	ldw	r7,-16(fp)
 4002fe4:	180d883a 	mov	r6,r3
 4002fe8:	e17ffc17 	ldw	r5,-16(fp)
 4002fec:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 4002ff0:	e0fffb17 	ldw	r3,-20(fp)
 4002ff4:	e0bffe17 	ldw	r2,-8(fp)
 4002ff8:	1889c83a 	sub	r4,r3,r2
 4002ffc:	e0fffc17 	ldw	r3,-16(fp)
 4003000:	e0800317 	ldw	r2,12(fp)
 4003004:	188b883a 	add	r5,r3,r2
 4003008:	e0fffb17 	ldw	r3,-20(fp)
 400300c:	e0bffe17 	ldw	r2,-8(fp)
 4003010:	1887883a 	add	r3,r3,r2
 4003014:	e0800217 	ldw	r2,8(fp)
 4003018:	188d883a 	add	r6,r3,r2
 400301c:	e0fffc17 	ldw	r3,-16(fp)
 4003020:	e0800317 	ldw	r2,12(fp)
 4003024:	1887883a 	add	r3,r3,r2
 4003028:	e0800617 	ldw	r2,24(fp)
 400302c:	d8800215 	stw	r2,8(sp)
 4003030:	e0800417 	ldw	r2,16(fp)
 4003034:	d8800115 	stw	r2,4(sp)
 4003038:	00800044 	movi	r2,1
 400303c:	d8800015 	stw	r2,0(sp)
 4003040:	180f883a 	mov	r7,r3
 4003044:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4003048:	00016606 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        if(fill) {
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 400304c:	e0fffb17 	ldw	r3,-20(fp)
 4003050:	e0bffe17 	ldw	r2,-8(fp)
 4003054:	1887883a 	add	r3,r3,r2
 4003058:	e0800217 	ldw	r2,8(fp)
 400305c:	1885883a 	add	r2,r3,r2
 4003060:	e0c00417 	ldw	r3,16(fp)
 4003064:	e1c00617 	ldw	r7,24(fp)
 4003068:	180d883a 	mov	r6,r3
 400306c:	e17ffc17 	ldw	r5,-16(fp)
 4003070:	1009883a 	mov	r4,r2
 4003074:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4003078:	e0fffb17 	ldw	r3,-20(fp)
 400307c:	e0bffe17 	ldw	r2,-8(fp)
 4003080:	1887883a 	add	r3,r3,r2
 4003084:	e0800217 	ldw	r2,8(fp)
 4003088:	1889883a 	add	r4,r3,r2
 400308c:	e0fffc17 	ldw	r3,-16(fp)
 4003090:	e0800317 	ldw	r2,12(fp)
 4003094:	1885883a 	add	r2,r3,r2
 4003098:	e0c00417 	ldw	r3,16(fp)
 400309c:	e1c00617 	ldw	r7,24(fp)
 40030a0:	180d883a 	mov	r6,r3
 40030a4:	100b883a 	mov	r5,r2
 40030a8:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 40030ac:	e0fffb17 	ldw	r3,-20(fp)
 40030b0:	e0bffe17 	ldw	r2,-8(fp)
 40030b4:	1885c83a 	sub	r2,r3,r2
 40030b8:	e0c00417 	ldw	r3,16(fp)
 40030bc:	e1c00617 	ldw	r7,24(fp)
 40030c0:	180d883a 	mov	r6,r3
 40030c4:	e17ffc17 	ldw	r5,-16(fp)
 40030c8:	1009883a 	mov	r4,r2
 40030cc:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 40030d0:	e0fffb17 	ldw	r3,-20(fp)
 40030d4:	e0bffe17 	ldw	r2,-8(fp)
 40030d8:	1889c83a 	sub	r4,r3,r2
 40030dc:	e0fffc17 	ldw	r3,-16(fp)
 40030e0:	e0800317 	ldw	r2,12(fp)
 40030e4:	1885883a 	add	r2,r3,r2
 40030e8:	e0c00417 	ldw	r3,16(fp)
 40030ec:	e1c00617 	ldw	r7,24(fp)
 40030f0:	180d883a 	mov	r6,r3
 40030f4:	100b883a 	mov	r5,r2
 40030f8:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40030fc:	00013906 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 4003100:	e0fffd17 	ldw	r3,-12(fp)
 4003104:	e0bffe17 	ldw	r2,-8(fp)
 4003108:	1880681e 	bne	r3,r2,40032ac <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x3ec>
      if(fill) {
 400310c:	e0bfff07 	ldb	r2,-4(fp)
 4003110:	10003126 	beq	r2,zero,40031d8 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 4003114:	e0fffb17 	ldw	r3,-20(fp)
 4003118:	e0bffd17 	ldw	r2,-12(fp)
 400311c:	1889c83a 	sub	r4,r3,r2
 4003120:	e0fffc17 	ldw	r3,-16(fp)
 4003124:	e0bffe17 	ldw	r2,-8(fp)
 4003128:	1887883a 	add	r3,r3,r2
 400312c:	e0800317 	ldw	r2,12(fp)
 4003130:	188b883a 	add	r5,r3,r2
 4003134:	e0fffb17 	ldw	r3,-20(fp)
 4003138:	e0bffd17 	ldw	r2,-12(fp)
 400313c:	1887883a 	add	r3,r3,r2
 4003140:	e0800217 	ldw	r2,8(fp)
 4003144:	188d883a 	add	r6,r3,r2
 4003148:	e0fffc17 	ldw	r3,-16(fp)
 400314c:	e0bffe17 	ldw	r2,-8(fp)
 4003150:	1887883a 	add	r3,r3,r2
 4003154:	e0800317 	ldw	r2,12(fp)
 4003158:	1887883a 	add	r3,r3,r2
 400315c:	e0800617 	ldw	r2,24(fp)
 4003160:	d8800215 	stw	r2,8(sp)
 4003164:	e0800417 	ldw	r2,16(fp)
 4003168:	d8800115 	stw	r2,4(sp)
 400316c:	00800044 	movi	r2,1
 4003170:	d8800015 	stw	r2,0(sp)
 4003174:	180f883a 	mov	r7,r3
 4003178:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 400317c:	e0fffb17 	ldw	r3,-20(fp)
 4003180:	e0bffd17 	ldw	r2,-12(fp)
 4003184:	1889c83a 	sub	r4,r3,r2
 4003188:	e0fffc17 	ldw	r3,-16(fp)
 400318c:	e0bffe17 	ldw	r2,-8(fp)
 4003190:	188bc83a 	sub	r5,r3,r2
 4003194:	e0fffb17 	ldw	r3,-20(fp)
 4003198:	e0bffd17 	ldw	r2,-12(fp)
 400319c:	1887883a 	add	r3,r3,r2
 40031a0:	e0800217 	ldw	r2,8(fp)
 40031a4:	188d883a 	add	r6,r3,r2
 40031a8:	e0fffc17 	ldw	r3,-16(fp)
 40031ac:	e0bffe17 	ldw	r2,-8(fp)
 40031b0:	1887c83a 	sub	r3,r3,r2
 40031b4:	e0800617 	ldw	r2,24(fp)
 40031b8:	d8800215 	stw	r2,8(sp)
 40031bc:	e0800417 	ldw	r2,16(fp)
 40031c0:	d8800115 	stw	r2,4(sp)
 40031c4:	00800044 	movi	r2,1
 40031c8:	d8800015 	stw	r2,0(sp)
 40031cc:	180f883a 	mov	r7,r3
 40031d0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40031d4:	00010306 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
      if(fill) {
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 40031d8:	e0fffb17 	ldw	r3,-20(fp)
 40031dc:	e0bffd17 	ldw	r2,-12(fp)
 40031e0:	1887883a 	add	r3,r3,r2
 40031e4:	e0800217 	ldw	r2,8(fp)
 40031e8:	1889883a 	add	r4,r3,r2
 40031ec:	e0fffc17 	ldw	r3,-16(fp)
 40031f0:	e0bffe17 	ldw	r2,-8(fp)
 40031f4:	1887883a 	add	r3,r3,r2
 40031f8:	e0800317 	ldw	r2,12(fp)
 40031fc:	1885883a 	add	r2,r3,r2
 4003200:	e0c00417 	ldw	r3,16(fp)
 4003204:	e1c00617 	ldw	r7,24(fp)
 4003208:	180d883a 	mov	r6,r3
 400320c:	100b883a 	mov	r5,r2
 4003210:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 4003214:	e0fffb17 	ldw	r3,-20(fp)
 4003218:	e0bffd17 	ldw	r2,-12(fp)
 400321c:	1889c83a 	sub	r4,r3,r2
 4003220:	e0fffc17 	ldw	r3,-16(fp)
 4003224:	e0bffe17 	ldw	r2,-8(fp)
 4003228:	1887883a 	add	r3,r3,r2
 400322c:	e0800317 	ldw	r2,12(fp)
 4003230:	1885883a 	add	r2,r3,r2
 4003234:	e0c00417 	ldw	r3,16(fp)
 4003238:	e1c00617 	ldw	r7,24(fp)
 400323c:	180d883a 	mov	r6,r3
 4003240:	100b883a 	mov	r5,r2
 4003244:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4003248:	e0fffb17 	ldw	r3,-20(fp)
 400324c:	e0bffd17 	ldw	r2,-12(fp)
 4003250:	1887883a 	add	r3,r3,r2
 4003254:	e0800217 	ldw	r2,8(fp)
 4003258:	1889883a 	add	r4,r3,r2
 400325c:	e0fffc17 	ldw	r3,-16(fp)
 4003260:	e0bffe17 	ldw	r2,-8(fp)
 4003264:	1885c83a 	sub	r2,r3,r2
 4003268:	e0c00417 	ldw	r3,16(fp)
 400326c:	e1c00617 	ldw	r7,24(fp)
 4003270:	180d883a 	mov	r6,r3
 4003274:	100b883a 	mov	r5,r2
 4003278:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 400327c:	e0fffb17 	ldw	r3,-20(fp)
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	1889c83a 	sub	r4,r3,r2
 4003288:	e0fffc17 	ldw	r3,-16(fp)
 400328c:	e0bffe17 	ldw	r2,-8(fp)
 4003290:	1885c83a 	sub	r2,r3,r2
 4003294:	e0c00417 	ldw	r3,16(fp)
 4003298:	e1c00617 	ldw	r7,24(fp)
 400329c:	180d883a 	mov	r6,r3
 40032a0:	100b883a 	mov	r5,r2
 40032a4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40032a8:	0000ce06 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
        vid_set_pixel(cx - x, cy - y, color, display); // top left
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 40032ac:	e0fffd17 	ldw	r3,-12(fp)
 40032b0:	e0bffe17 	ldw	r2,-8(fp)
 40032b4:	1880cb0e 	bge	r3,r2,40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        if(fill) {
 40032b8:	e0bfff07 	ldb	r2,-4(fp)
 40032bc:	10006126 	beq	r2,zero,4003444 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40032c0:	e0fffb17 	ldw	r3,-20(fp)
 40032c4:	e0bffd17 	ldw	r2,-12(fp)
 40032c8:	1889c83a 	sub	r4,r3,r2
 40032cc:	e0fffc17 	ldw	r3,-16(fp)
 40032d0:	e0bffe17 	ldw	r2,-8(fp)
 40032d4:	1887883a 	add	r3,r3,r2
 40032d8:	e0800317 	ldw	r2,12(fp)
 40032dc:	188b883a 	add	r5,r3,r2
 40032e0:	e0fffb17 	ldw	r3,-20(fp)
 40032e4:	e0bffd17 	ldw	r2,-12(fp)
 40032e8:	1887883a 	add	r3,r3,r2
 40032ec:	e0800217 	ldw	r2,8(fp)
 40032f0:	188d883a 	add	r6,r3,r2
 40032f4:	e0fffc17 	ldw	r3,-16(fp)
 40032f8:	e0bffe17 	ldw	r2,-8(fp)
 40032fc:	1887883a 	add	r3,r3,r2
 4003300:	e0800317 	ldw	r2,12(fp)
 4003304:	1887883a 	add	r3,r3,r2
 4003308:	e0800617 	ldw	r2,24(fp)
 400330c:	d8800215 	stw	r2,8(sp)
 4003310:	e0800417 	ldw	r2,16(fp)
 4003314:	d8800115 	stw	r2,4(sp)
 4003318:	00800044 	movi	r2,1
 400331c:	d8800015 	stw	r2,0(sp)
 4003320:	180f883a 	mov	r7,r3
 4003324:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4003328:	e0fffb17 	ldw	r3,-20(fp)
 400332c:	e0bffe17 	ldw	r2,-8(fp)
 4003330:	1889c83a 	sub	r4,r3,r2
 4003334:	e0fffc17 	ldw	r3,-16(fp)
 4003338:	e0bffd17 	ldw	r2,-12(fp)
 400333c:	1887883a 	add	r3,r3,r2
 4003340:	e0800317 	ldw	r2,12(fp)
 4003344:	188b883a 	add	r5,r3,r2
 4003348:	e0fffb17 	ldw	r3,-20(fp)
 400334c:	e0bffe17 	ldw	r2,-8(fp)
 4003350:	1887883a 	add	r3,r3,r2
 4003354:	e0800217 	ldw	r2,8(fp)
 4003358:	188d883a 	add	r6,r3,r2
 400335c:	e0fffc17 	ldw	r3,-16(fp)
 4003360:	e0bffd17 	ldw	r2,-12(fp)
 4003364:	1887883a 	add	r3,r3,r2
 4003368:	e0800317 	ldw	r2,12(fp)
 400336c:	1887883a 	add	r3,r3,r2
 4003370:	e0800617 	ldw	r2,24(fp)
 4003374:	d8800215 	stw	r2,8(sp)
 4003378:	e0800417 	ldw	r2,16(fp)
 400337c:	d8800115 	stw	r2,4(sp)
 4003380:	00800044 	movi	r2,1
 4003384:	d8800015 	stw	r2,0(sp)
 4003388:	180f883a 	mov	r7,r3
 400338c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4003390:	e0fffb17 	ldw	r3,-20(fp)
 4003394:	e0bffe17 	ldw	r2,-8(fp)
 4003398:	1889c83a 	sub	r4,r3,r2
 400339c:	e0fffc17 	ldw	r3,-16(fp)
 40033a0:	e0bffd17 	ldw	r2,-12(fp)
 40033a4:	188bc83a 	sub	r5,r3,r2
 40033a8:	e0fffb17 	ldw	r3,-20(fp)
 40033ac:	e0bffe17 	ldw	r2,-8(fp)
 40033b0:	1887883a 	add	r3,r3,r2
 40033b4:	e0800217 	ldw	r2,8(fp)
 40033b8:	188d883a 	add	r6,r3,r2
 40033bc:	e0fffc17 	ldw	r3,-16(fp)
 40033c0:	e0bffd17 	ldw	r2,-12(fp)
 40033c4:	1887c83a 	sub	r3,r3,r2
 40033c8:	e0800617 	ldw	r2,24(fp)
 40033cc:	d8800215 	stw	r2,8(sp)
 40033d0:	e0800417 	ldw	r2,16(fp)
 40033d4:	d8800115 	stw	r2,4(sp)
 40033d8:	00800044 	movi	r2,1
 40033dc:	d8800015 	stw	r2,0(sp)
 40033e0:	180f883a 	mov	r7,r3
 40033e4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 40033e8:	e0fffb17 	ldw	r3,-20(fp)
 40033ec:	e0bffd17 	ldw	r2,-12(fp)
 40033f0:	1889c83a 	sub	r4,r3,r2
 40033f4:	e0fffc17 	ldw	r3,-16(fp)
 40033f8:	e0bffe17 	ldw	r2,-8(fp)
 40033fc:	188bc83a 	sub	r5,r3,r2
 4003400:	e0fffb17 	ldw	r3,-20(fp)
 4003404:	e0bffd17 	ldw	r2,-12(fp)
 4003408:	1887883a 	add	r3,r3,r2
 400340c:	e0800217 	ldw	r2,8(fp)
 4003410:	188d883a 	add	r6,r3,r2
 4003414:	e0fffc17 	ldw	r3,-16(fp)
 4003418:	e0bffe17 	ldw	r2,-8(fp)
 400341c:	1887c83a 	sub	r3,r3,r2
 4003420:	e0800617 	ldw	r2,24(fp)
 4003424:	d8800215 	stw	r2,8(sp)
 4003428:	e0800417 	ldw	r2,16(fp)
 400342c:	d8800115 	stw	r2,4(sp)
 4003430:	00800044 	movi	r2,1
 4003434:	d8800015 	stw	r2,0(sp)
 4003438:	180f883a 	mov	r7,r3
 400343c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4003440:	00006806 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 4003444:	e0fffb17 	ldw	r3,-20(fp)
 4003448:	e0bffd17 	ldw	r2,-12(fp)
 400344c:	1887883a 	add	r3,r3,r2
 4003450:	e0800217 	ldw	r2,8(fp)
 4003454:	1889883a 	add	r4,r3,r2
 4003458:	e0fffc17 	ldw	r3,-16(fp)
 400345c:	e0bffe17 	ldw	r2,-8(fp)
 4003460:	1887883a 	add	r3,r3,r2
 4003464:	e0800317 	ldw	r2,12(fp)
 4003468:	1885883a 	add	r2,r3,r2
 400346c:	e0c00417 	ldw	r3,16(fp)
 4003470:	e1c00617 	ldw	r7,24(fp)
 4003474:	180d883a 	mov	r6,r3
 4003478:	100b883a 	mov	r5,r2
 400347c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4003480:	e0fffb17 	ldw	r3,-20(fp)
 4003484:	e0bffd17 	ldw	r2,-12(fp)
 4003488:	1889c83a 	sub	r4,r3,r2
 400348c:	e0fffc17 	ldw	r3,-16(fp)
 4003490:	e0bffe17 	ldw	r2,-8(fp)
 4003494:	1887883a 	add	r3,r3,r2
 4003498:	e0800317 	ldw	r2,12(fp)
 400349c:	1885883a 	add	r2,r3,r2
 40034a0:	e0c00417 	ldw	r3,16(fp)
 40034a4:	e1c00617 	ldw	r7,24(fp)
 40034a8:	180d883a 	mov	r6,r3
 40034ac:	100b883a 	mov	r5,r2
 40034b0:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 40034b4:	e0fffb17 	ldw	r3,-20(fp)
 40034b8:	e0bffd17 	ldw	r2,-12(fp)
 40034bc:	1887883a 	add	r3,r3,r2
 40034c0:	e0800217 	ldw	r2,8(fp)
 40034c4:	1889883a 	add	r4,r3,r2
 40034c8:	e0fffc17 	ldw	r3,-16(fp)
 40034cc:	e0bffe17 	ldw	r2,-8(fp)
 40034d0:	1885c83a 	sub	r2,r3,r2
 40034d4:	e0c00417 	ldw	r3,16(fp)
 40034d8:	e1c00617 	ldw	r7,24(fp)
 40034dc:	180d883a 	mov	r6,r3
 40034e0:	100b883a 	mov	r5,r2
 40034e4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - x, cy - y, color, display);
 40034e8:	e0fffb17 	ldw	r3,-20(fp)
 40034ec:	e0bffd17 	ldw	r2,-12(fp)
 40034f0:	1889c83a 	sub	r4,r3,r2
 40034f4:	e0fffc17 	ldw	r3,-16(fp)
 40034f8:	e0bffe17 	ldw	r2,-8(fp)
 40034fc:	1885c83a 	sub	r2,r3,r2
 4003500:	e0c00417 	ldw	r3,16(fp)
 4003504:	e1c00617 	ldw	r7,24(fp)
 4003508:	180d883a 	mov	r6,r3
 400350c:	100b883a 	mov	r5,r2
 4003510:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4003514:	e0fffb17 	ldw	r3,-20(fp)
 4003518:	e0bffe17 	ldw	r2,-8(fp)
 400351c:	1887883a 	add	r3,r3,r2
 4003520:	e0800217 	ldw	r2,8(fp)
 4003524:	1889883a 	add	r4,r3,r2
 4003528:	e0fffc17 	ldw	r3,-16(fp)
 400352c:	e0bffd17 	ldw	r2,-12(fp)
 4003530:	1887883a 	add	r3,r3,r2
 4003534:	e0800317 	ldw	r2,12(fp)
 4003538:	1885883a 	add	r2,r3,r2
 400353c:	e0c00417 	ldw	r3,16(fp)
 4003540:	e1c00617 	ldw	r7,24(fp)
 4003544:	180d883a 	mov	r6,r3
 4003548:	100b883a 	mov	r5,r2
 400354c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4003550:	e0fffb17 	ldw	r3,-20(fp)
 4003554:	e0bffe17 	ldw	r2,-8(fp)
 4003558:	1889c83a 	sub	r4,r3,r2
 400355c:	e0fffc17 	ldw	r3,-16(fp)
 4003560:	e0bffd17 	ldw	r2,-12(fp)
 4003564:	1887883a 	add	r3,r3,r2
 4003568:	e0800317 	ldw	r2,12(fp)
 400356c:	1885883a 	add	r2,r3,r2
 4003570:	e0c00417 	ldw	r3,16(fp)
 4003574:	e1c00617 	ldw	r7,24(fp)
 4003578:	180d883a 	mov	r6,r3
 400357c:	100b883a 	mov	r5,r2
 4003580:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4003584:	e0fffb17 	ldw	r3,-20(fp)
 4003588:	e0bffe17 	ldw	r2,-8(fp)
 400358c:	1887883a 	add	r3,r3,r2
 4003590:	e0800217 	ldw	r2,8(fp)
 4003594:	1889883a 	add	r4,r3,r2
 4003598:	e0fffc17 	ldw	r3,-16(fp)
 400359c:	e0bffd17 	ldw	r2,-12(fp)
 40035a0:	1885c83a 	sub	r2,r3,r2
 40035a4:	e0c00417 	ldw	r3,16(fp)
 40035a8:	e1c00617 	ldw	r7,24(fp)
 40035ac:	180d883a 	mov	r6,r3
 40035b0:	100b883a 	mov	r5,r2
 40035b4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy - x, color, display);
 40035b8:	e0fffb17 	ldw	r3,-20(fp)
 40035bc:	e0bffe17 	ldw	r2,-8(fp)
 40035c0:	1889c83a 	sub	r4,r3,r2
 40035c4:	e0fffc17 	ldw	r3,-16(fp)
 40035c8:	e0bffd17 	ldw	r2,-12(fp)
 40035cc:	1885c83a 	sub	r2,r3,r2
 40035d0:	e0c00417 	ldw	r3,16(fp)
 40035d4:	e1c00617 	ldw	r7,24(fp)
 40035d8:	180d883a 	mov	r6,r3
 40035dc:	100b883a 	mov	r5,r2
 40035e0:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        }
    }
}
 40035e4:	0001883a 	nop
 40035e8:	e037883a 	mov	sp,fp
 40035ec:	dfc00117 	ldw	ra,4(sp)
 40035f0:	df000017 	ldw	fp,0(sp)
 40035f4:	dec00204 	addi	sp,sp,8
 40035f8:	f800283a 	ret

040035fc <_Z19vid_bres_scan_edgesiiiiPi>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 40035fc:	deffee04 	addi	sp,sp,-72
 4003600:	dfc01115 	stw	ra,68(sp)
 4003604:	df001015 	stw	fp,64(sp)
 4003608:	df001004 	addi	fp,sp,64
 400360c:	e13ffc15 	stw	r4,-16(fp)
 4003610:	e17ffd15 	stw	r5,-12(fp)
 4003614:	e1bffe15 	stw	r6,-8(fp)
 4003618:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 400361c:	e0bffc17 	ldw	r2,-16(fp)
 4003620:	e0fffe17 	ldw	r3,-8(fp)
 4003624:	18800c0e 	bge	r3,r2,4003658 <_Z19vid_bres_scan_edgesiiiiPi+0x5c>
  {
    int tempx = x2;
 4003628:	e0bffe17 	ldw	r2,-8(fp)
 400362c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4003630:	e0bffc17 	ldw	r2,-16(fp)
 4003634:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4003638:	e0bff517 	ldw	r2,-44(fp)
 400363c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4003640:	e0bfff17 	ldw	r2,-4(fp)
 4003644:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4003648:	e0bffd17 	ldw	r2,-12(fp)
 400364c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4003650:	e0bff617 	ldw	r2,-40(fp)
 4003654:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4003658:	e0fffd17 	ldw	r3,-12(fp)
 400365c:	e0bfff17 	ldw	r2,-4(fp)
 4003660:	1885c83a 	sub	r2,r3,r2
 4003664:	1000010e 	bge	r2,zero,400366c <_Z19vid_bres_scan_edgesiiiiPi+0x70>
 4003668:	0085c83a 	sub	r2,zero,r2
 400366c:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4003670:	e0fffe17 	ldw	r3,-8(fp)
 4003674:	e0bffc17 	ldw	r2,-16(fp)
 4003678:	1885c83a 	sub	r2,r3,r2
 400367c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4003680:	e0bffd17 	ldw	r2,-12(fp)
 4003684:	e0ffff17 	ldw	r3,-4(fp)
 4003688:	1880030e 	bge	r3,r2,4003698 <_Z19vid_bres_scan_edgesiiiiPi+0x9c>
 400368c:	00bfffc4 	movi	r2,-1
 4003690:	e0bff015 	stw	r2,-64(fp)
 4003694:	00000206 	br	40036a0 <_Z19vid_bres_scan_edgesiiiiPi+0xa4>
 4003698:	00800044 	movi	r2,1
 400369c:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 40036a0:	00800044 	movi	r2,1
 40036a4:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 40036a8:	e0fff217 	ldw	r3,-56(fp)
 40036ac:	e0bff117 	ldw	r2,-60(fp)
 40036b0:	18802e16 	blt	r3,r2,400376c <_Z19vid_bres_scan_edgesiiiiPi+0x170>
    int dPr   = y_delta<<1;
 40036b4:	e0bff117 	ldw	r2,-60(fp)
 40036b8:	1085883a 	add	r2,r2,r2
 40036bc:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 40036c0:	e0bff217 	ldw	r2,-56(fp)
 40036c4:	1085883a 	add	r2,r2,r2
 40036c8:	1007883a 	mov	r3,r2
 40036cc:	e0bff817 	ldw	r2,-32(fp)
 40036d0:	10c5c83a 	sub	r2,r2,r3
 40036d4:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 40036d8:	e0fff817 	ldw	r3,-32(fp)
 40036dc:	e0bff217 	ldw	r2,-56(fp)
 40036e0:	1885c83a 	sub	r2,r3,r2
 40036e4:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 40036e8:	e0bff217 	ldw	r2,-56(fp)
 40036ec:	10004d16 	blt	r2,zero,4003824 <_Z19vid_bres_scan_edgesiiiiPi+0x228>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 40036f0:	e1800217 	ldw	r6,8(fp)
 40036f4:	e17ffd17 	ldw	r5,-12(fp)
 40036f8:	e13ffc17 	ldw	r4,-16(fp)
 40036fc:	4003fe80 	call	4003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>
      // If we're moving along both axis
      if (P > 0) {
 4003700:	e0bff317 	ldw	r2,-52(fp)
 4003704:	00800d0e 	bge	zero,r2,400373c <_Z19vid_bres_scan_edgesiiiiPi+0x140>
        x1+=x_incr;
 4003708:	e0fffc17 	ldw	r3,-16(fp)
 400370c:	e0bff717 	ldw	r2,-36(fp)
 4003710:	1885883a 	add	r2,r3,r2
 4003714:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4003718:	e0fffd17 	ldw	r3,-12(fp)
 400371c:	e0bff017 	ldw	r2,-64(fp)
 4003720:	1885883a 	add	r2,r3,r2
 4003724:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4003728:	e0fff317 	ldw	r3,-52(fp)
 400372c:	e0bff917 	ldw	r2,-28(fp)
 4003730:	1885883a 	add	r2,r3,r2
 4003734:	e0bff315 	stw	r2,-52(fp)
 4003738:	00000806 	br	400375c <_Z19vid_bres_scan_edgesiiiiPi+0x160>
      } else {
        x1+=x_incr;
 400373c:	e0fffc17 	ldw	r3,-16(fp)
 4003740:	e0bff717 	ldw	r2,-36(fp)
 4003744:	1885883a 	add	r2,r3,r2
 4003748:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 400374c:	e0fff317 	ldw	r3,-52(fp)
 4003750:	e0bff817 	ldw	r2,-32(fp)
 4003754:	1885883a 	add	r2,r3,r2
 4003758:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 400375c:	e0bff217 	ldw	r2,-56(fp)
 4003760:	10bfffc4 	addi	r2,r2,-1
 4003764:	e0bff215 	stw	r2,-56(fp)
 4003768:	003fdf06 	br	40036e8 <__alt_mem_epcs_flash_controller_0+0xfb0026e8>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 400376c:	e0bff217 	ldw	r2,-56(fp)
 4003770:	1085883a 	add	r2,r2,r2
 4003774:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 4003778:	e0bff117 	ldw	r2,-60(fp)
 400377c:	1085883a 	add	r2,r2,r2
 4003780:	1007883a 	mov	r3,r2
 4003784:	e0bffa17 	ldw	r2,-24(fp)
 4003788:	10c5c83a 	sub	r2,r2,r3
 400378c:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 4003790:	e0fffa17 	ldw	r3,-24(fp)
 4003794:	e0bff117 	ldw	r2,-60(fp)
 4003798:	1885c83a 	sub	r2,r3,r2
 400379c:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 40037a0:	e0bff117 	ldw	r2,-60(fp)
 40037a4:	10001f16 	blt	r2,zero,4003824 <_Z19vid_bres_scan_edgesiiiiPi+0x228>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 40037a8:	e1800217 	ldw	r6,8(fp)
 40037ac:	e17ffd17 	ldw	r5,-12(fp)
 40037b0:	e13ffc17 	ldw	r4,-16(fp)
 40037b4:	4003fe80 	call	4003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>
      // If we're moving along both axis
      if (P > 0) {
 40037b8:	e0bff417 	ldw	r2,-48(fp)
 40037bc:	00800d0e 	bge	zero,r2,40037f4 <_Z19vid_bres_scan_edgesiiiiPi+0x1f8>
        x1+=x_incr;
 40037c0:	e0fffc17 	ldw	r3,-16(fp)
 40037c4:	e0bff717 	ldw	r2,-36(fp)
 40037c8:	1885883a 	add	r2,r3,r2
 40037cc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 40037d0:	e0fffd17 	ldw	r3,-12(fp)
 40037d4:	e0bff017 	ldw	r2,-64(fp)
 40037d8:	1885883a 	add	r2,r3,r2
 40037dc:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 40037e0:	e0fff417 	ldw	r3,-48(fp)
 40037e4:	e0bffb17 	ldw	r2,-20(fp)
 40037e8:	1885883a 	add	r2,r3,r2
 40037ec:	e0bff415 	stw	r2,-48(fp)
 40037f0:	00000806 	br	4003814 <_Z19vid_bres_scan_edgesiiiiPi+0x218>
      } else {
        y1+=y_incr;
 40037f4:	e0fffd17 	ldw	r3,-12(fp)
 40037f8:	e0bff017 	ldw	r2,-64(fp)
 40037fc:	1885883a 	add	r2,r3,r2
 4003800:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 4003804:	e0fff417 	ldw	r3,-48(fp)
 4003808:	e0bffa17 	ldw	r2,-24(fp)
 400380c:	1885883a 	add	r2,r3,r2
 4003810:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4003814:	e0bff117 	ldw	r2,-60(fp)
 4003818:	10bfffc4 	addi	r2,r2,-1
 400381c:	e0bff115 	stw	r2,-60(fp)
 4003820:	003fdf06 	br	40037a0 <__alt_mem_epcs_flash_controller_0+0xfb0027a0>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4003824:	0001883a 	nop
 4003828:	e037883a 	mov	sp,fp
 400382c:	dfc00117 	ldw	ra,4(sp)
 4003830:	df000017 	ldw	fp,0(sp)
 4003834:	dec00204 	addi	sp,sp,8
 4003838:	f800283a 	ret

0400383c <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 400383c:	defff804 	addi	sp,sp,-32
 4003840:	dfc00715 	stw	ra,28(sp)
 4003844:	df000615 	stw	fp,24(sp)
 4003848:	df000604 	addi	fp,sp,24
 400384c:	e13ffe15 	stw	r4,-8(fp)
 4003850:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4003854:	e0bffe17 	ldw	r2,-8(fp)
 4003858:	11000017 	ldw	r4,0(r2)
 400385c:	e0bffe17 	ldw	r2,-8(fp)
 4003860:	11400317 	ldw	r5,12(r2)
 4003864:	e0bffe17 	ldw	r2,-8(fp)
 4003868:	11800117 	ldw	r6,4(r2)
 400386c:	e0bffe17 	ldw	r2,-8(fp)
 4003870:	11c00417 	ldw	r7,16(r2)
 4003874:	e0bffe17 	ldw	r2,-8(fp)
 4003878:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
 400387c:	e0ffff17 	ldw	r3,-4(fp)
 4003880:	d8c00215 	stw	r3,8(sp)
 4003884:	d8800115 	stw	r2,4(sp)
 4003888:	00800044 	movi	r2,1
 400388c:	d8800015 	stw	r2,0(sp)
 4003890:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4003894:	e0bffe17 	ldw	r2,-8(fp)
 4003898:	11000117 	ldw	r4,4(r2)
 400389c:	e0bffe17 	ldw	r2,-8(fp)
 40038a0:	11400417 	ldw	r5,16(r2)
 40038a4:	e0bffe17 	ldw	r2,-8(fp)
 40038a8:	11800217 	ldw	r6,8(r2)
 40038ac:	e0bffe17 	ldw	r2,-8(fp)
 40038b0:	11c00517 	ldw	r7,20(r2)
 40038b4:	e0bffe17 	ldw	r2,-8(fp)
 40038b8:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
 40038bc:	e0ffff17 	ldw	r3,-4(fp)
 40038c0:	d8c00215 	stw	r3,8(sp)
 40038c4:	d8800115 	stw	r2,4(sp)
 40038c8:	00800044 	movi	r2,1
 40038cc:	d8800015 	stw	r2,0(sp)
 40038d0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 40038d4:	e0bffe17 	ldw	r2,-8(fp)
 40038d8:	11000217 	ldw	r4,8(r2)
 40038dc:	e0bffe17 	ldw	r2,-8(fp)
 40038e0:	11400517 	ldw	r5,20(r2)
 40038e4:	e0bffe17 	ldw	r2,-8(fp)
 40038e8:	11800017 	ldw	r6,0(r2)
 40038ec:	e0bffe17 	ldw	r2,-8(fp)
 40038f0:	11c00317 	ldw	r7,12(r2)
 40038f4:	e0bffe17 	ldw	r2,-8(fp)
 40038f8:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
 40038fc:	e0ffff17 	ldw	r3,-4(fp)
 4003900:	d8c00215 	stw	r3,8(sp)
 4003904:	d8800115 	stw	r2,4(sp)
 4003908:	00800044 	movi	r2,1
 400390c:	d8800015 	stw	r2,0(sp)
 4003910:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4003914:	e0bffe17 	ldw	r2,-8(fp)
 4003918:	10800b17 	ldw	r2,44(r2)
 400391c:	10800058 	cmpnei	r2,r2,1
 4003920:	1000ad1e 	bne	r2,zero,4003bd8 <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x39c>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003924:	e0bffe17 	ldw	r2,-8(fp)
 4003928:	10c00317 	ldw	r3,12(r2)
 400392c:	e0bffe17 	ldw	r2,-8(fp)
 4003930:	11000417 	ldw	r4,16(r2)
 4003934:	e0bffe17 	ldw	r2,-8(fp)
 4003938:	10800517 	ldw	r2,20(r2)
 400393c:	100d883a 	mov	r6,r2
 4003940:	200b883a 	mov	r5,r4
 4003944:	1809883a 	mov	r4,r3
 4003948:	4003f300 	call	4003f30 <_Z4min3iii>
 400394c:	1007883a 	mov	r3,r2
 4003950:	e0bffe17 	ldw	r2,-8(fp)
 4003954:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003958:	e0bffe17 	ldw	r2,-8(fp)
 400395c:	10c00317 	ldw	r3,12(r2)
 4003960:	e0bffe17 	ldw	r2,-8(fp)
 4003964:	11000417 	ldw	r4,16(r2)
 4003968:	e0bffe17 	ldw	r2,-8(fp)
 400396c:	10800517 	ldw	r2,20(r2)
 4003970:	100d883a 	mov	r6,r2
 4003974:	200b883a 	mov	r5,r4
 4003978:	1809883a 	mov	r4,r3
 400397c:	4003edc0 	call	4003edc <_Z4max3iii>
 4003980:	1007883a 	mov	r3,r2
 4003984:	e0bffe17 	ldw	r2,-8(fp)
 4003988:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 400398c:	e0bffe17 	ldw	r2,-8(fp)
 4003990:	10c00317 	ldw	r3,12(r2)
 4003994:	e0bffe17 	ldw	r2,-8(fp)
 4003998:	11000417 	ldw	r4,16(r2)
 400399c:	e0bffe17 	ldw	r2,-8(fp)
 40039a0:	10800517 	ldw	r2,20(r2)
 40039a4:	100d883a 	mov	r6,r2
 40039a8:	200b883a 	mov	r5,r4
 40039ac:	1809883a 	mov	r4,r3
 40039b0:	4003f840 	call	4003f84 <_Z9max_diff3iii>
 40039b4:	1007883a 	mov	r3,r2
 40039b8:	e0bffe17 	ldw	r2,-8(fp)
 40039bc:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 40039c0:	e0bffe17 	ldw	r2,-8(fp)
 40039c4:	10c00017 	ldw	r3,0(r2)
 40039c8:	e0bffe17 	ldw	r2,-8(fp)
 40039cc:	11000117 	ldw	r4,4(r2)
 40039d0:	e0bffe17 	ldw	r2,-8(fp)
 40039d4:	10800217 	ldw	r2,8(r2)
 40039d8:	100d883a 	mov	r6,r2
 40039dc:	200b883a 	mov	r5,r4
 40039e0:	1809883a 	mov	r4,r3
 40039e4:	4003f840 	call	4003f84 <_Z9max_diff3iii>
 40039e8:	1007883a 	mov	r3,r2
 40039ec:	e0bffe17 	ldw	r2,-8(fp)
 40039f0:	10c00715 	stw	r3,28(r2)
    tri->span_array = (int *)malloc(display->height * 4 * 2);
 40039f4:	e0bfff17 	ldw	r2,-4(fp)
 40039f8:	10800617 	ldw	r2,24(r2)
 40039fc:	100490fa 	slli	r2,r2,3
 4003a00:	1009883a 	mov	r4,r2
 4003a04:	400deb40 	call	400deb4 <malloc>
 4003a08:	1007883a 	mov	r3,r2
 4003a0c:	e0bffe17 	ldw	r2,-8(fp)
 4003a10:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003a14:	e0bffe17 	ldw	r2,-8(fp)
 4003a18:	10800817 	ldw	r2,32(r2)
 4003a1c:	e0bffd15 	stw	r2,-12(fp)
 4003a20:	e0bffe17 	ldw	r2,-8(fp)
 4003a24:	10c00917 	ldw	r3,36(r2)
 4003a28:	e0bffd17 	ldw	r2,-12(fp)
 4003a2c:	18801316 	blt	r3,r2,4003a7c <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x240>
    {
      tri->span_array[i*2] = -1;
 4003a30:	e0bffe17 	ldw	r2,-8(fp)
 4003a34:	10800d17 	ldw	r2,52(r2)
 4003a38:	e0fffd17 	ldw	r3,-12(fp)
 4003a3c:	180690fa 	slli	r3,r3,3
 4003a40:	10c5883a 	add	r2,r2,r3
 4003a44:	00ffffc4 	movi	r3,-1
 4003a48:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 4003a4c:	e0bffe17 	ldw	r2,-8(fp)
 4003a50:	10c00d17 	ldw	r3,52(r2)
 4003a54:	e0bffd17 	ldw	r2,-12(fp)
 4003a58:	100490fa 	slli	r2,r2,3
 4003a5c:	10800104 	addi	r2,r2,4
 4003a60:	1885883a 	add	r2,r3,r2
 4003a64:	00ffffc4 	movi	r3,-1
 4003a68:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = (int *)malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003a6c:	e0bffd17 	ldw	r2,-12(fp)
 4003a70:	10800044 	addi	r2,r2,1
 4003a74:	e0bffd15 	stw	r2,-12(fp)
 4003a78:	003fe906 	br	4003a20 <__alt_mem_epcs_flash_controller_0+0xfb002a20>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003a7c:	e0bffe17 	ldw	r2,-8(fp)
 4003a80:	10c00017 	ldw	r3,0(r2)
 4003a84:	e0bffe17 	ldw	r2,-8(fp)
 4003a88:	11000317 	ldw	r4,12(r2)
 4003a8c:	e0bffe17 	ldw	r2,-8(fp)
 4003a90:	11400117 	ldw	r5,4(r2)
 4003a94:	e0bffe17 	ldw	r2,-8(fp)
 4003a98:	11800417 	ldw	r6,16(r2)
 4003a9c:	e0bffe17 	ldw	r2,-8(fp)
 4003aa0:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 4003aa4:	d8800015 	stw	r2,0(sp)
 4003aa8:	300f883a 	mov	r7,r6
 4003aac:	280d883a 	mov	r6,r5
 4003ab0:	200b883a 	mov	r5,r4
 4003ab4:	1809883a 	mov	r4,r3
 4003ab8:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003abc:	e0bffe17 	ldw	r2,-8(fp)
 4003ac0:	10c00117 	ldw	r3,4(r2)
 4003ac4:	e0bffe17 	ldw	r2,-8(fp)
 4003ac8:	11000417 	ldw	r4,16(r2)
 4003acc:	e0bffe17 	ldw	r2,-8(fp)
 4003ad0:	11400217 	ldw	r5,8(r2)
 4003ad4:	e0bffe17 	ldw	r2,-8(fp)
 4003ad8:	11800517 	ldw	r6,20(r2)
 4003adc:	e0bffe17 	ldw	r2,-8(fp)
 4003ae0:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 4003ae4:	d8800015 	stw	r2,0(sp)
 4003ae8:	300f883a 	mov	r7,r6
 4003aec:	280d883a 	mov	r6,r5
 4003af0:	200b883a 	mov	r5,r4
 4003af4:	1809883a 	mov	r4,r3
 4003af8:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003afc:	e0bffe17 	ldw	r2,-8(fp)
 4003b00:	10c00217 	ldw	r3,8(r2)
 4003b04:	e0bffe17 	ldw	r2,-8(fp)
 4003b08:	11000517 	ldw	r4,20(r2)
 4003b0c:	e0bffe17 	ldw	r2,-8(fp)
 4003b10:	11400017 	ldw	r5,0(r2)
 4003b14:	e0bffe17 	ldw	r2,-8(fp)
 4003b18:	11800317 	ldw	r6,12(r2)
 4003b1c:	e0bffe17 	ldw	r2,-8(fp)
 4003b20:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 4003b24:	d8800015 	stw	r2,0(sp)
 4003b28:	300f883a 	mov	r7,r6
 4003b2c:	280d883a 	mov	r6,r5
 4003b30:	200b883a 	mov	r5,r4
 4003b34:	1809883a 	mov	r4,r3
 4003b38:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003b3c:	e0bffe17 	ldw	r2,-8(fp)
 4003b40:	10800817 	ldw	r2,32(r2)
 4003b44:	e0bffd15 	stw	r2,-12(fp)
 4003b48:	e0bffe17 	ldw	r2,-8(fp)
 4003b4c:	10c00917 	ldw	r3,36(r2)
 4003b50:	e0bffd17 	ldw	r2,-12(fp)
 4003b54:	18801c16 	blt	r3,r2,4003bc8 <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x38c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4003b58:	e0bffe17 	ldw	r2,-8(fp)
 4003b5c:	10800d17 	ldw	r2,52(r2)
 4003b60:	e0fffd17 	ldw	r3,-12(fp)
 4003b64:	180690fa 	slli	r3,r3,3
 4003b68:	10c5883a 	add	r2,r2,r3
 4003b6c:	11000017 	ldw	r4,0(r2)
 4003b70:	e0bffe17 	ldw	r2,-8(fp)
 4003b74:	10c00d17 	ldw	r3,52(r2)
 4003b78:	e0bffd17 	ldw	r2,-12(fp)
 4003b7c:	100490fa 	slli	r2,r2,3
 4003b80:	10800104 	addi	r2,r2,4
 4003b84:	1885883a 	add	r2,r3,r2
 4003b88:	11400017 	ldw	r5,0(r2)
 4003b8c:	e0bffe17 	ldw	r2,-8(fp)
 4003b90:	10800a17 	ldw	r2,40(r2)
 4003b94:	e0ffff17 	ldw	r3,-4(fp)
 4003b98:	d8c00215 	stw	r3,8(sp)
 4003b9c:	d8800115 	stw	r2,4(sp)
 4003ba0:	00800044 	movi	r2,1
 4003ba4:	d8800015 	stw	r2,0(sp)
 4003ba8:	e1fffd17 	ldw	r7,-12(fp)
 4003bac:	280d883a 	mov	r6,r5
 4003bb0:	e17ffd17 	ldw	r5,-12(fp)
 4003bb4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003bb8:	e0bffd17 	ldw	r2,-12(fp)
 4003bbc:	10800044 	addi	r2,r2,1
 4003bc0:	e0bffd15 	stw	r2,-12(fp)
 4003bc4:	003fe006 	br	4003b48 <__alt_mem_epcs_flash_controller_0+0xfb002b48>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 4003bc8:	e0bffe17 	ldw	r2,-8(fp)
 4003bcc:	10800d17 	ldw	r2,52(r2)
 4003bd0:	1009883a 	mov	r4,r2
 4003bd4:	400dec80 	call	400dec8 <free>
  }
}
 4003bd8:	0001883a 	nop
 4003bdc:	e037883a 	mov	sp,fp
 4003be0:	dfc00117 	ldw	ra,4(sp)
 4003be4:	df000017 	ldw	fp,0(sp)
 4003be8:	dec00204 	addi	sp,sp,8
 4003bec:	f800283a 	ret

04003bf0 <_Z11CopyImage16PsS_ssss>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 4003bf0:	defff404 	addi	sp,sp,-48
 4003bf4:	dfc00b15 	stw	ra,44(sp)
 4003bf8:	df000a15 	stw	fp,40(sp)
 4003bfc:	df000a04 	addi	fp,sp,40
 4003c00:	e13ffa15 	stw	r4,-24(fp)
 4003c04:	e17ffb15 	stw	r5,-20(fp)
 4003c08:	300b883a 	mov	r5,r6
 4003c0c:	3809883a 	mov	r4,r7
 4003c10:	e0c00217 	ldw	r3,8(fp)
 4003c14:	e0800317 	ldw	r2,12(fp)
 4003c18:	e17ffc0d 	sth	r5,-16(fp)
 4003c1c:	e13ffd0d 	sth	r4,-12(fp)
 4003c20:	e0fffe0d 	sth	r3,-8(fp)
 4003c24:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 4003c28:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 4003c2c:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 4003c30:	e03ff615 	stw	zero,-40(fp)
 4003c34:	e03ff715 	stw	zero,-36(fp)
       y_src <= ( source_height  - 1 ); 
 4003c38:	e0bffd0f 	ldh	r2,-12(fp)
 4003c3c:	10ffffc4 	addi	r3,r2,-1
 4003c40:	e0bff617 	ldw	r2,-40(fp)
 4003c44:	18801f16 	blt	r3,r2,4003cc4 <_Z11CopyImage16PsS_ssss+0xd4>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003c48:	e0bff917 	ldw	r2,-28(fp)
 4003c4c:	1085883a 	add	r2,r2,r2
 4003c50:	1007883a 	mov	r3,r2
 4003c54:	e0bffb17 	ldw	r2,-20(fp)
 4003c58:	10c7883a 	add	r3,r2,r3
 4003c5c:	e0bff817 	ldw	r2,-32(fp)
 4003c60:	1085883a 	add	r2,r2,r2
 4003c64:	1009883a 	mov	r4,r2
 4003c68:	e0bffa17 	ldw	r2,-24(fp)
 4003c6c:	1109883a 	add	r4,r2,r4
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4003c70:	e0bffc0f 	ldh	r2,-16(fp)
 4003c74:	1085883a 	add	r2,r2,r2
 4003c78:	100d883a 	mov	r6,r2
 4003c7c:	200b883a 	mov	r5,r4
 4003c80:	1809883a 	mov	r4,r3
 4003c84:	400e6e80 	call	400e6e8 <memcpy>
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 4003c88:	e0bff617 	ldw	r2,-40(fp)
 4003c8c:	10800044 	addi	r2,r2,1
 4003c90:	e0bff615 	stw	r2,-40(fp)
 4003c94:	e0bff717 	ldw	r2,-36(fp)
 4003c98:	10800044 	addi	r2,r2,1
 4003c9c:	e0bff715 	stw	r2,-36(fp)
 4003ca0:	e0bffc0f 	ldh	r2,-16(fp)
 4003ca4:	e0fff817 	ldw	r3,-32(fp)
 4003ca8:	1885883a 	add	r2,r3,r2
 4003cac:	e0bff815 	stw	r2,-32(fp)
 4003cb0:	e0bffe0f 	ldh	r2,-8(fp)
 4003cb4:	e0fff917 	ldw	r3,-28(fp)
 4003cb8:	1885883a 	add	r2,r3,r2
 4003cbc:	e0bff915 	stw	r2,-28(fp)
 4003cc0:	003fdd06 	br	4003c38 <__alt_mem_epcs_flash_controller_0+0xfb002c38>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 4003cc4:	0001883a 	nop
 4003cc8:	e037883a 	mov	sp,fp
 4003ccc:	dfc00117 	ldw	ra,4(sp)
 4003cd0:	df000017 	ldw	fp,0(sp)
 4003cd4:	dec00204 	addi	sp,sp,8
 4003cd8:	f800283a 	ret

04003cdc <_Z11CropImage16PsS_ssssssss>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 4003cdc:	defff004 	addi	sp,sp,-64
 4003ce0:	dfc00f15 	stw	ra,60(sp)
 4003ce4:	df000e15 	stw	fp,56(sp)
 4003ce8:	df000e04 	addi	fp,sp,56
 4003cec:	e13ff615 	stw	r4,-40(fp)
 4003cf0:	e17ff715 	stw	r5,-36(fp)
 4003cf4:	3013883a 	mov	r9,r6
 4003cf8:	3811883a 	mov	r8,r7
 4003cfc:	e1c00217 	ldw	r7,8(fp)
 4003d00:	e1800317 	ldw	r6,12(fp)
 4003d04:	e1400417 	ldw	r5,16(fp)
 4003d08:	e1000517 	ldw	r4,20(fp)
 4003d0c:	e0c00617 	ldw	r3,24(fp)
 4003d10:	e0800717 	ldw	r2,28(fp)
 4003d14:	e27ff80d 	sth	r9,-32(fp)
 4003d18:	e23ff90d 	sth	r8,-28(fp)
 4003d1c:	e1fffa0d 	sth	r7,-24(fp)
 4003d20:	e1bffb0d 	sth	r6,-20(fp)
 4003d24:	e17ffc0d 	sth	r5,-16(fp)
 4003d28:	e13ffd0d 	sth	r4,-12(fp)
 4003d2c:	e0fffe0d 	sth	r3,-8(fp)
 4003d30:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 4003d34:	e0fff80f 	ldh	r3,-32(fp)
 4003d38:	e0bffc0f 	ldh	r2,-16(fp)
 4003d3c:	1885383a 	mul	r2,r3,r2
 4003d40:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 4003d44:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4003d48:	e0bffc0f 	ldh	r2,-16(fp)
 4003d4c:	e0bff215 	stw	r2,-56(fp)
 4003d50:	e03ff315 	stw	zero,-52(fp)
       y_src <= ( source_height - crop_bottom - 1 ); 
 4003d54:	e0fff90f 	ldh	r3,-28(fp)
 4003d58:	e0bffd0f 	ldh	r2,-12(fp)
 4003d5c:	1885c83a 	sub	r2,r3,r2
 4003d60:	10ffffc4 	addi	r3,r2,-1
 4003d64:	e0bff217 	ldw	r2,-56(fp)
 4003d68:	18802316 	blt	r3,r2,4003df8 <_Z11CropImage16PsS_ssssssss+0x11c>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003d6c:	e0bff517 	ldw	r2,-44(fp)
 4003d70:	1085883a 	add	r2,r2,r2
 4003d74:	1007883a 	mov	r3,r2
 4003d78:	e0bff717 	ldw	r2,-36(fp)
 4003d7c:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 4003d80:	e0fffa0f 	ldh	r3,-24(fp)
 4003d84:	e0bff417 	ldw	r2,-48(fp)
 4003d88:	1885883a 	add	r2,r3,r2
 4003d8c:	1085883a 	add	r2,r2,r2
 4003d90:	1007883a 	mov	r3,r2
 4003d94:	e0bff617 	ldw	r2,-40(fp)
 4003d98:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 4003d9c:	e0fff80f 	ldh	r3,-32(fp)
 4003da0:	e0bffa0f 	ldh	r2,-24(fp)
 4003da4:	1887c83a 	sub	r3,r3,r2
 4003da8:	e0bffb0f 	ldh	r2,-20(fp)
 4003dac:	1885c83a 	sub	r2,r3,r2
 4003db0:	1085883a 	add	r2,r2,r2
 4003db4:	100d883a 	mov	r6,r2
 4003db8:	400e6e80 	call	400e6e8 <memcpy>
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 4003dbc:	e0bff217 	ldw	r2,-56(fp)
 4003dc0:	10800044 	addi	r2,r2,1
 4003dc4:	e0bff215 	stw	r2,-56(fp)
 4003dc8:	e0bff317 	ldw	r2,-52(fp)
 4003dcc:	10800044 	addi	r2,r2,1
 4003dd0:	e0bff315 	stw	r2,-52(fp)
 4003dd4:	e0bff80f 	ldh	r2,-32(fp)
 4003dd8:	e0fff417 	ldw	r3,-48(fp)
 4003ddc:	1885883a 	add	r2,r3,r2
 4003de0:	e0bff415 	stw	r2,-48(fp)
 4003de4:	e0bffe0f 	ldh	r2,-8(fp)
 4003de8:	e0fff517 	ldw	r3,-44(fp)
 4003dec:	1885883a 	add	r2,r3,r2
 4003df0:	e0bff515 	stw	r2,-44(fp)
 4003df4:	003fd706 	br	4003d54 <__alt_mem_epcs_flash_controller_0+0xfb002d54>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 4003df8:	0001883a 	nop
 4003dfc:	e037883a 	mov	sp,fp
 4003e00:	dfc00117 	ldw	ra,4(sp)
 4003e04:	df000017 	ldw	fp,0(sp)
 4003e08:	dec00204 	addi	sp,sp,8
 4003e0c:	f800283a 	ret

04003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 4003e10:	defff704 	addi	sp,sp,-36
 4003e14:	dfc00815 	stw	ra,32(sp)
 4003e18:	df000715 	stw	fp,28(sp)
 4003e1c:	df000704 	addi	fp,sp,28
 4003e20:	e13ffc15 	stw	r4,-16(fp)
 4003e24:	e17ffd15 	stw	r5,-12(fp)
 4003e28:	e1bffe15 	stw	r6,-8(fp)
 4003e2c:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 4003e30:	e0fffd17 	ldw	r3,-12(fp)
 4003e34:	e0bfff17 	ldw	r2,-4(fp)
 4003e38:	1880121e 	bne	r3,r2,4003e84 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER+0x74>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10ffffcc 	andi	r3,r2,65535
 4003e44:	18e0001c 	xori	r3,r3,32768
 4003e48:	18e00004 	addi	r3,r3,-32768
 4003e4c:	e0bffe17 	ldw	r2,-8(fp)
 4003e50:	113fffcc 	andi	r4,r2,65535
 4003e54:	2120001c 	xori	r4,r4,32768
 4003e58:	21200004 	addi	r4,r4,-32768
 4003e5c:	e0bffd17 	ldw	r2,-12(fp)
 4003e60:	117fffcc 	andi	r5,r2,65535
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
                         color,
                         display );
 4003e64:	e0800417 	ldw	r2,16(fp)
 4003e68:	d8800015 	stw	r2,0(sp)
 4003e6c:	e1c00317 	ldw	r7,12(fp)
 4003e70:	280d883a 	mov	r6,r5
 4003e74:	200b883a 	mov	r5,r4
 4003e78:	1809883a 	mov	r4,r3
 4003e7c:	400206c0 	call	400206c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4003e80:	00001006 	br	4003ec4 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER+0xb4>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4003e84:	e0bffc17 	ldw	r2,-16(fp)
 4003e88:	113fffcc 	andi	r4,r2,65535
 4003e8c:	e0bffd17 	ldw	r2,-12(fp)
 4003e90:	117fffcc 	andi	r5,r2,65535
 4003e94:	e0bffe17 	ldw	r2,-8(fp)
 4003e98:	11bfffcc 	andi	r6,r2,65535
 4003e9c:	e0bfff17 	ldw	r2,-4(fp)
 4003ea0:	11ffffcc 	andi	r7,r2,65535
 4003ea4:	e0800217 	ldw	r2,8(fp)
 4003ea8:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
 4003eac:	e0c00417 	ldw	r3,16(fp)
 4003eb0:	d8c00215 	stw	r3,8(sp)
 4003eb4:	e0c00317 	ldw	r3,12(fp)
 4003eb8:	d8c00115 	stw	r3,4(sp)
 4003ebc:	d8800015 	stw	r2,0(sp)
 4003ec0:	400274c0 	call	400274c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER>
  }
}
 4003ec4:	0001883a 	nop
 4003ec8:	e037883a 	mov	sp,fp
 4003ecc:	dfc00117 	ldw	ra,4(sp)
 4003ed0:	df000017 	ldw	fp,0(sp)
 4003ed4:	dec00204 	addi	sp,sp,8
 4003ed8:	f800283a 	ret

04003edc <_Z4max3iii>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 4003edc:	defffc04 	addi	sp,sp,-16
 4003ee0:	df000315 	stw	fp,12(sp)
 4003ee4:	df000304 	addi	fp,sp,12
 4003ee8:	e13ffd15 	stw	r4,-12(fp)
 4003eec:	e17ffe15 	stw	r5,-8(fp)
 4003ef0:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4003ef4:	e0fffd17 	ldw	r3,-12(fp)
 4003ef8:	e0bffe17 	ldw	r2,-8(fp)
 4003efc:	1880020e 	bge	r3,r2,4003f08 <_Z4max3iii+0x2c>
    a = b;
 4003f00:	e0bffe17 	ldw	r2,-8(fp)
 4003f04:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4003f08:	e0fffd17 	ldw	r3,-12(fp)
 4003f0c:	e0bfff17 	ldw	r2,-4(fp)
 4003f10:	1880020e 	bge	r3,r2,4003f1c <_Z4max3iii+0x40>
    a = c;
 4003f14:	e0bfff17 	ldw	r2,-4(fp)
 4003f18:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4003f1c:	e0bffd17 	ldw	r2,-12(fp)
}
 4003f20:	e037883a 	mov	sp,fp
 4003f24:	df000017 	ldw	fp,0(sp)
 4003f28:	dec00104 	addi	sp,sp,4
 4003f2c:	f800283a 	ret

04003f30 <_Z4min3iii>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 4003f30:	defffc04 	addi	sp,sp,-16
 4003f34:	df000315 	stw	fp,12(sp)
 4003f38:	df000304 	addi	fp,sp,12
 4003f3c:	e13ffd15 	stw	r4,-12(fp)
 4003f40:	e17ffe15 	stw	r5,-8(fp)
 4003f44:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4003f48:	e0bffd17 	ldw	r2,-12(fp)
 4003f4c:	e0fffe17 	ldw	r3,-8(fp)
 4003f50:	1880020e 	bge	r3,r2,4003f5c <_Z4min3iii+0x2c>
    a = b;
 4003f54:	e0bffe17 	ldw	r2,-8(fp)
 4003f58:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4003f5c:	e0bffd17 	ldw	r2,-12(fp)
 4003f60:	e0ffff17 	ldw	r3,-4(fp)
 4003f64:	1880020e 	bge	r3,r2,4003f70 <_Z4min3iii+0x40>
    a = c;
 4003f68:	e0bfff17 	ldw	r2,-4(fp)
 4003f6c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4003f70:	e0bffd17 	ldw	r2,-12(fp)
}
 4003f74:	e037883a 	mov	sp,fp
 4003f78:	df000017 	ldw	fp,0(sp)
 4003f7c:	dec00104 	addi	sp,sp,4
 4003f80:	f800283a 	ret

04003f84 <_Z9max_diff3iii>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 4003f84:	defff904 	addi	sp,sp,-28
 4003f88:	dfc00615 	stw	ra,24(sp)
 4003f8c:	df000515 	stw	fp,20(sp)
 4003f90:	df000504 	addi	fp,sp,20
 4003f94:	e13ffd15 	stw	r4,-12(fp)
 4003f98:	e17ffe15 	stw	r5,-8(fp)
 4003f9c:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4003fa0:	e1bfff17 	ldw	r6,-4(fp)
 4003fa4:	e17ffe17 	ldw	r5,-8(fp)
 4003fa8:	e13ffd17 	ldw	r4,-12(fp)
 4003fac:	4003edc0 	call	4003edc <_Z4max3iii>
 4003fb0:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4003fb4:	e1bfff17 	ldw	r6,-4(fp)
 4003fb8:	e17ffe17 	ldw	r5,-8(fp)
 4003fbc:	e13ffd17 	ldw	r4,-12(fp)
 4003fc0:	4003f300 	call	4003f30 <_Z4min3iii>
 4003fc4:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4003fc8:	e0fffb17 	ldw	r3,-20(fp)
 4003fcc:	e0bffc17 	ldw	r2,-16(fp)
 4003fd0:	1885c83a 	sub	r2,r3,r2
}
 4003fd4:	e037883a 	mov	sp,fp
 4003fd8:	dfc00117 	ldw	ra,4(sp)
 4003fdc:	df000017 	ldw	fp,0(sp)
 4003fe0:	dec00204 	addi	sp,sp,8
 4003fe4:	f800283a 	ret

04003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4003fe8:	defffc04 	addi	sp,sp,-16
 4003fec:	df000315 	stw	fp,12(sp)
 4003ff0:	df000304 	addi	fp,sp,12
 4003ff4:	e13ffd15 	stw	r4,-12(fp)
 4003ff8:	e17ffe15 	stw	r5,-8(fp)
 4003ffc:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4004000:	e0bffe17 	ldw	r2,-8(fp)
 4004004:	100490fa 	slli	r2,r2,3
 4004008:	1007883a 	mov	r3,r2
 400400c:	e0bfff17 	ldw	r2,-4(fp)
 4004010:	10c5883a 	add	r2,r2,r3
 4004014:	10800017 	ldw	r2,0(r2)
 4004018:	10bfffd8 	cmpnei	r2,r2,-1
 400401c:	10000f1e 	bne	r2,zero,400405c <_Z25vid_put_pixel_in_span_mapiiPi+0x74>
  {
    span_array[y*2] = x;
 4004020:	e0bffe17 	ldw	r2,-8(fp)
 4004024:	100490fa 	slli	r2,r2,3
 4004028:	1007883a 	mov	r3,r2
 400402c:	e0bfff17 	ldw	r2,-4(fp)
 4004030:	10c5883a 	add	r2,r2,r3
 4004034:	e0fffd17 	ldw	r3,-12(fp)
 4004038:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 400403c:	e0bffe17 	ldw	r2,-8(fp)
 4004040:	100490fa 	slli	r2,r2,3
 4004044:	10800104 	addi	r2,r2,4
 4004048:	e0ffff17 	ldw	r3,-4(fp)
 400404c:	1885883a 	add	r2,r3,r2
 4004050:	e0fffd17 	ldw	r3,-12(fp)
 4004054:	10c00015 	stw	r3,0(r2)
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4004058:	00001f06 	br	40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
  if (span_array[y*2] == -1)
  {
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
 400405c:	e0bffe17 	ldw	r2,-8(fp)
 4004060:	100490fa 	slli	r2,r2,3
 4004064:	1007883a 	mov	r3,r2
 4004068:	e0bfff17 	ldw	r2,-4(fp)
 400406c:	10c5883a 	add	r2,r2,r3
 4004070:	10800017 	ldw	r2,0(r2)
 4004074:	e0fffd17 	ldw	r3,-12(fp)
 4004078:	1880080e 	bge	r3,r2,400409c <_Z25vid_put_pixel_in_span_mapiiPi+0xb4>
    span_array[y*2] = x;
 400407c:	e0bffe17 	ldw	r2,-8(fp)
 4004080:	100490fa 	slli	r2,r2,3
 4004084:	1007883a 	mov	r3,r2
 4004088:	e0bfff17 	ldw	r2,-4(fp)
 400408c:	10c5883a 	add	r2,r2,r3
 4004090:	e0fffd17 	ldw	r3,-12(fp)
 4004094:	10c00015 	stw	r3,0(r2)
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4004098:	00000f06 	br	40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
 400409c:	e0bffe17 	ldw	r2,-8(fp)
 40040a0:	100490fa 	slli	r2,r2,3
 40040a4:	10800104 	addi	r2,r2,4
 40040a8:	e0ffff17 	ldw	r3,-4(fp)
 40040ac:	1885883a 	add	r2,r3,r2
 40040b0:	10c00017 	ldw	r3,0(r2)
 40040b4:	e0bffd17 	ldw	r2,-12(fp)
 40040b8:	1880070e 	bge	r3,r2,40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
    span_array[(y*2)+1] = x;
 40040bc:	e0bffe17 	ldw	r2,-8(fp)
 40040c0:	100490fa 	slli	r2,r2,3
 40040c4:	10800104 	addi	r2,r2,4
 40040c8:	e0ffff17 	ldw	r3,-4(fp)
 40040cc:	1885883a 	add	r2,r3,r2
 40040d0:	e0fffd17 	ldw	r3,-12(fp)
 40040d4:	10c00015 	stw	r3,0(r2)
}
 40040d8:	0001883a 	nop
 40040dc:	e037883a 	mov	sp,fp
 40040e0:	df000017 	ldw	fp,0(sp)
 40040e4:	dec00104 	addi	sp,sp,4
 40040e8:	f800283a 	ret

040040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 40040ec:	defff404 	addi	sp,sp,-48
 40040f0:	dfc00b15 	stw	ra,44(sp)
 40040f4:	df000a15 	stw	fp,40(sp)
 40040f8:	df000a04 	addi	fp,sp,40
 40040fc:	e13ffc15 	stw	r4,-16(fp)
 4004100:	e17ffd15 	stw	r5,-12(fp)
 4004104:	e1bffe15 	stw	r6,-8(fp)
 4004108:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 400410c:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4004110:	e0bffc17 	ldw	r2,-16(fp)
 4004114:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4004118:	e0bff917 	ldw	r2,-28(fp)
 400411c:	e0c00417 	ldw	r3,16(fp)
 4004120:	1885883a 	add	r2,r3,r2
 4004124:	10800003 	ldbu	r2,0(r2)
 4004128:	10803fcc 	andi	r2,r2,255
 400412c:	1080201c 	xori	r2,r2,128
 4004130:	10bfe004 	addi	r2,r2,-128
 4004134:	10007f26 	beq	r2,zero,4004334 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x248>
    //Handle newline char here.
    if (string[i] == '\n') {
 4004138:	e0bff917 	ldw	r2,-28(fp)
 400413c:	e0c00417 	ldw	r3,16(fp)
 4004140:	1885883a 	add	r2,r3,r2
 4004144:	10800003 	ldbu	r2,0(r2)
 4004148:	10803fcc 	andi	r2,r2,255
 400414c:	1080201c 	xori	r2,r2,128
 4004150:	10bfe004 	addi	r2,r2,-128
 4004154:	10800298 	cmpnei	r2,r2,10
 4004158:	10000c1e 	bne	r2,zero,400418c <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0xa0>
      horiz_offset = original_horiz_offset;
 400415c:	e0bffb17 	ldw	r2,-20(fp)
 4004160:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4004164:	e0800217 	ldw	r2,8(fp)
 4004168:	1082d804 	addi	r2,r2,2912
 400416c:	10c00517 	ldw	r3,20(r2)
 4004170:	e0bffd17 	ldw	r2,-12(fp)
 4004174:	1885883a 	add	r2,r3,r2
 4004178:	e0bffd15 	stw	r2,-12(fp)
      i++;
 400417c:	e0bff917 	ldw	r2,-28(fp)
 4004180:	10800044 	addi	r2,r2,1
 4004184:	e0bff915 	stw	r2,-28(fp)
      continue;
 4004188:	00006906 	br	4004330 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x244>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 400418c:	e0bff917 	ldw	r2,-28(fp)
 4004190:	e0c00417 	ldw	r3,16(fp)
 4004194:	1885883a 	add	r2,r3,r2
 4004198:	10800003 	ldbu	r2,0(r2)
 400419c:	10803fcc 	andi	r2,r2,255
 40041a0:	1080201c 	xori	r2,r2,128
 40041a4:	10bfe004 	addi	r2,r2,-128
 40041a8:	10800818 	cmpnei	r2,r2,32
 40041ac:	1000151e 	bne	r2,zero,4004204 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x118>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40041b0:	e0bfff17 	ldw	r2,-4(fp)
 40041b4:	10bfffe0 	cmpeqi	r2,r2,-1
 40041b8:	10000b1e 	bne	r2,zero,40041e8 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0xfc>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40041bc:	e0800317 	ldw	r2,12(fp)
 40041c0:	d8800215 	stw	r2,8(sp)
 40041c4:	e0800217 	ldw	r2,8(fp)
 40041c8:	d8800115 	stw	r2,4(sp)
 40041cc:	e0bfff17 	ldw	r2,-4(fp)
 40041d0:	d8800015 	stw	r2,0(sp)
 40041d4:	01c00b44 	movi	r7,45
 40041d8:	e1bfff17 	ldw	r6,-4(fp)
 40041dc:	e17ffd17 	ldw	r5,-12(fp)
 40041e0:	e13ffc17 	ldw	r4,-16(fp)
 40041e4:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40041e8:	e0800217 	ldw	r2,8(fp)
 40041ec:	10806004 	addi	r2,r2,384
 40041f0:	10c00417 	ldw	r3,16(r2)
 40041f4:	e0bffc17 	ldw	r2,-16(fp)
 40041f8:	1885883a 	add	r2,r3,r2
 40041fc:	e0bffc15 	stw	r2,-16(fp)
 4004200:	00004806 	br	4004324 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x238>
    }
    else if(string[i] == '\t')  // this is a tab
 4004204:	e0bff917 	ldw	r2,-28(fp)
 4004208:	e0c00417 	ldw	r3,16(fp)
 400420c:	1885883a 	add	r2,r3,r2
 4004210:	10800003 	ldbu	r2,0(r2)
 4004214:	10803fcc 	andi	r2,r2,255
 4004218:	1080201c 	xori	r2,r2,128
 400421c:	10bfe004 	addi	r2,r2,-128
 4004220:	10800258 	cmpnei	r2,r2,9
 4004224:	10001c1e 	bne	r2,zero,4004298 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x1ac>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4004228:	e03ffa15 	stw	zero,-24(fp)
 400422c:	e0bffa17 	ldw	r2,-24(fp)
 4004230:	10800088 	cmpgei	r2,r2,2
 4004234:	10003b1e 	bne	r2,zero,4004324 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x238>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4004238:	e0bfff17 	ldw	r2,-4(fp)
 400423c:	10bfffe0 	cmpeqi	r2,r2,-1
 4004240:	10000b1e 	bne	r2,zero,4004270 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x184>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4004244:	e0800317 	ldw	r2,12(fp)
 4004248:	d8800215 	stw	r2,8(sp)
 400424c:	e0800217 	ldw	r2,8(fp)
 4004250:	d8800115 	stw	r2,4(sp)
 4004254:	e0bfff17 	ldw	r2,-4(fp)
 4004258:	d8800015 	stw	r2,0(sp)
 400425c:	01c00b44 	movi	r7,45
 4004260:	e1bfff17 	ldw	r6,-4(fp)
 4004264:	e17ffd17 	ldw	r5,-12(fp)
 4004268:	e13ffc17 	ldw	r4,-16(fp)
 400426c:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4004270:	e0800217 	ldw	r2,8(fp)
 4004274:	10806004 	addi	r2,r2,384
 4004278:	10c00417 	ldw	r3,16(r2)
 400427c:	e0bffc17 	ldw	r2,-16(fp)
 4004280:	1885883a 	add	r2,r3,r2
 4004284:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4004288:	e0bffa17 	ldw	r2,-24(fp)
 400428c:	10800044 	addi	r2,r2,1
 4004290:	e0bffa15 	stw	r2,-24(fp)
 4004294:	003fe506 	br	400422c <__alt_mem_epcs_flash_controller_0+0xfb00322c>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 4004298:	e0bff917 	ldw	r2,-28(fp)
 400429c:	e0c00417 	ldw	r3,16(fp)
 40042a0:	1885883a 	add	r2,r3,r2
 40042a4:	10800003 	ldbu	r2,0(r2)
 40042a8:	10c03fcc 	andi	r3,r2,255
 40042ac:	18c0201c 	xori	r3,r3,128
 40042b0:	18ffe004 	addi	r3,r3,-128
 40042b4:	e0800317 	ldw	r2,12(fp)
 40042b8:	d8800215 	stw	r2,8(sp)
 40042bc:	e0800217 	ldw	r2,8(fp)
 40042c0:	d8800115 	stw	r2,4(sp)
 40042c4:	e0bfff17 	ldw	r2,-4(fp)
 40042c8:	d8800015 	stw	r2,0(sp)
 40042cc:	180f883a 	mov	r7,r3
 40042d0:	e1bffe17 	ldw	r6,-8(fp)
 40042d4:	e17ffd17 	ldw	r5,-12(fp)
 40042d8:	e13ffc17 	ldw	r4,-16(fp)
 40042dc:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
      horiz_offset += font[string[i] - 33].bounds_width;
 40042e0:	e0bff917 	ldw	r2,-28(fp)
 40042e4:	e0c00417 	ldw	r3,16(fp)
 40042e8:	1885883a 	add	r2,r3,r2
 40042ec:	10800003 	ldbu	r2,0(r2)
 40042f0:	10c03fcc 	andi	r3,r2,255
 40042f4:	18c0201c 	xori	r3,r3,128
 40042f8:	18ffe004 	addi	r3,r3,-128
 40042fc:	00820034 	movhi	r2,2048
 4004300:	10bff7c4 	addi	r2,r2,-33
 4004304:	1885883a 	add	r2,r3,r2
 4004308:	1004917a 	slli	r2,r2,5
 400430c:	e0c00217 	ldw	r3,8(fp)
 4004310:	1885883a 	add	r2,r3,r2
 4004314:	10c00417 	ldw	r3,16(r2)
 4004318:	e0bffc17 	ldw	r2,-16(fp)
 400431c:	1885883a 	add	r2,r3,r2
 4004320:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4004324:	e0bff917 	ldw	r2,-28(fp)
 4004328:	10800044 	addi	r2,r2,1
 400432c:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4004330:	003f7906 	br	4004118 <__alt_mem_epcs_flash_controller_0+0xfb003118>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4004334:	0005883a 	mov	r2,zero
}
 4004338:	e037883a 	mov	sp,fp
 400433c:	dfc00117 	ldw	ra,4(sp)
 4004340:	df000017 	ldw	fp,0(sp)
 4004344:	dec00204 	addi	sp,sp,8
 4004348:	f800283a 	ret

0400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 400434c:	defff004 	addi	sp,sp,-64
 4004350:	dfc00f15 	stw	ra,60(sp)
 4004354:	df000e15 	stw	fp,56(sp)
 4004358:	df000e04 	addi	fp,sp,56
 400435c:	e13ffc15 	stw	r4,-16(fp)
 4004360:	e17ffd15 	stw	r5,-12(fp)
 4004364:	e1bffe15 	stw	r6,-8(fp)
 4004368:	3805883a 	mov	r2,r7
 400436c:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4004370:	e0ffff07 	ldb	r3,-4(fp)
 4004374:	00820034 	movhi	r2,2048
 4004378:	10bff7c4 	addi	r2,r2,-33
 400437c:	1885883a 	add	r2,r3,r2
 4004380:	1004917a 	slli	r2,r2,5
 4004384:	e0c00317 	ldw	r3,12(fp)
 4004388:	1885883a 	add	r2,r3,r2
 400438c:	10800617 	ldw	r2,24(r2)
 4004390:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);
 4004394:	e0800417 	ldw	r2,16(fp)
 4004398:	10c00417 	ldw	r3,16(r2)
 400439c:	e1bff984 	addi	r6,fp,-26
 40043a0:	e17ff904 	addi	r5,fp,-28
 40043a4:	e13ffe04 	addi	r4,fp,-8
 40043a8:	e0bff944 	addi	r2,fp,-27
 40043ac:	d8800015 	stw	r2,0(sp)
 40043b0:	300f883a 	mov	r7,r6
 40043b4:	280d883a 	mov	r6,r5
 40043b8:	200b883a 	mov	r5,r4
 40043bc:	1809883a 	mov	r4,r3
 40043c0:	400461c0 	call	400461c <_Z23seperate_color_channelsiPhS_S_S_>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 40043c4:	e03ff615 	stw	zero,-40(fp)
 40043c8:	e0ffff07 	ldb	r3,-4(fp)
 40043cc:	00820034 	movhi	r2,2048
 40043d0:	10bff7c4 	addi	r2,r2,-33
 40043d4:	1885883a 	add	r2,r3,r2
 40043d8:	1004917a 	slli	r2,r2,5
 40043dc:	e0c00317 	ldw	r3,12(fp)
 40043e0:	1885883a 	add	r2,r3,r2
 40043e4:	10800517 	ldw	r2,20(r2)
 40043e8:	e0fff617 	ldw	r3,-40(fp)
 40043ec:	18804b2e 	bgeu	r3,r2,400451c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER+0x1d0>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 40043f0:	e03ff715 	stw	zero,-36(fp)
 40043f4:	e0ffff07 	ldb	r3,-4(fp)
 40043f8:	00820034 	movhi	r2,2048
 40043fc:	10bff7c4 	addi	r2,r2,-33
 4004400:	1885883a 	add	r2,r3,r2
 4004404:	1004917a 	slli	r2,r2,5
 4004408:	e0c00317 	ldw	r3,12(fp)
 400440c:	1885883a 	add	r2,r3,r2
 4004410:	10800417 	ldw	r2,16(r2)
 4004414:	e0fff717 	ldw	r3,-36(fp)
 4004418:	18803c2e 	bgeu	r3,r2,400450c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER+0x1c0>
      red = original_red;
 400441c:	e0bff903 	ldbu	r2,-28(fp)
 4004420:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4004424:	e0bff983 	ldbu	r2,-26(fp)
 4004428:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 400442c:	e0bff943 	ldbu	r2,-27(fp)
 4004430:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4004434:	e0fffc17 	ldw	r3,-16(fp)
 4004438:	e0bff717 	ldw	r2,-36(fp)
 400443c:	1889883a 	add	r4,r3,r2
 4004440:	e0fffd17 	ldw	r3,-12(fp)
 4004444:	e0bff617 	ldw	r2,-40(fp)
 4004448:	1887883a 	add	r3,r3,r2
 400444c:	e0bff817 	ldw	r2,-32(fp)
 4004450:	10800003 	ldbu	r2,0(r2)
 4004454:	11403fcc 	andi	r5,r2,255
 4004458:	e0800417 	ldw	r2,16(fp)
 400445c:	d8800315 	stw	r2,12(sp)
 4004460:	e0bffa44 	addi	r2,fp,-23
 4004464:	d8800215 	stw	r2,8(sp)
 4004468:	e0bffa04 	addi	r2,fp,-24
 400446c:	d8800115 	stw	r2,4(sp)
 4004470:	e0bff9c4 	addi	r2,fp,-25
 4004474:	d8800015 	stw	r2,0(sp)
 4004478:	280f883a 	mov	r7,r5
 400447c:	e1800217 	ldw	r6,8(fp)
 4004480:	180b883a 	mov	r5,r3
 4004484:	4004abc0 	call	4004abc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (unsigned char *)&new_color);
 4004488:	e0800417 	ldw	r2,16(fp)
 400448c:	10c00417 	ldw	r3,16(r2)
 4004490:	e0bff9c3 	ldbu	r2,-25(fp)
 4004494:	11003fcc 	andi	r4,r2,255
 4004498:	e0bffa03 	ldbu	r2,-24(fp)
 400449c:	11403fcc 	andi	r5,r2,255
 40044a0:	e0bffa43 	ldbu	r2,-23(fp)
 40044a4:	11803fcc 	andi	r6,r2,255
 40044a8:	e0bffb04 	addi	r2,fp,-20
 40044ac:	d8800015 	stw	r2,0(sp)
 40044b0:	300f883a 	mov	r7,r6
 40044b4:	280d883a 	mov	r6,r5
 40044b8:	200b883a 	mov	r5,r4
 40044bc:	1809883a 	mov	r4,r3
 40044c0:	40047600 	call	4004760 <_Z20merge_color_channelsihhhPh>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 40044c4:	e0fffc17 	ldw	r3,-16(fp)
 40044c8:	e0bff717 	ldw	r2,-36(fp)
 40044cc:	1889883a 	add	r4,r3,r2
 40044d0:	e0fffd17 	ldw	r3,-12(fp)
 40044d4:	e0bff617 	ldw	r2,-40(fp)
 40044d8:	1885883a 	add	r2,r3,r2
 40044dc:	e0fffb17 	ldw	r3,-20(fp)
 40044e0:	e1c00417 	ldw	r7,16(fp)
 40044e4:	180d883a 	mov	r6,r3
 40044e8:	100b883a 	mov	r5,r2
 40044ec:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>

      alpha++;
 40044f0:	e0bff817 	ldw	r2,-32(fp)
 40044f4:	10800044 	addi	r2,r2,1
 40044f8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 40044fc:	e0bff717 	ldw	r2,-36(fp)
 4004500:	10800044 	addi	r2,r2,1
 4004504:	e0bff715 	stw	r2,-36(fp)
 4004508:	003fba06 	br	40043f4 <__alt_mem_epcs_flash_controller_0+0xfb0033f4>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 400450c:	e0bff617 	ldw	r2,-40(fp)
 4004510:	10800044 	addi	r2,r2,1
 4004514:	e0bff615 	stw	r2,-40(fp)
 4004518:	003fab06 	br	40043c8 <__alt_mem_epcs_flash_controller_0+0xfb0033c8>

      alpha++;
    }
  }

  return(0);
 400451c:	0005883a 	mov	r2,zero
}
 4004520:	e037883a 	mov	sp,fp
 4004524:	dfc00117 	ldw	ra,4(sp)
 4004528:	df000017 	ldw	fp,0(sp)
 400452c:	dec00204 	addi	sp,sp,8
 4004530:	f800283a 	ret

04004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4004534:	defffb04 	addi	sp,sp,-20
 4004538:	df000415 	stw	fp,16(sp)
 400453c:	df000404 	addi	fp,sp,16
 4004540:	e13ffe15 	stw	r4,-8(fp)
 4004544:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4004548:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 400454c:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004550:	e03ffc15 	stw	zero,-16(fp)
 4004554:	e0bffc17 	ldw	r2,-16(fp)
 4004558:	e0ffff17 	ldw	r3,-4(fp)
 400455c:	1885883a 	add	r2,r3,r2
 4004560:	10800003 	ldbu	r2,0(r2)
 4004564:	10803fcc 	andi	r2,r2,255
 4004568:	1080201c 	xori	r2,r2,128
 400456c:	10bfe004 	addi	r2,r2,-128
 4004570:	10002526 	beq	r2,zero,4004608 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0xd4>
  {
    if( string[i] == ' ' )
 4004574:	e0bffc17 	ldw	r2,-16(fp)
 4004578:	e0ffff17 	ldw	r3,-4(fp)
 400457c:	1885883a 	add	r2,r3,r2
 4004580:	10800003 	ldbu	r2,0(r2)
 4004584:	10803fcc 	andi	r2,r2,255
 4004588:	1080201c 	xori	r2,r2,128
 400458c:	10bfe004 	addi	r2,r2,-128
 4004590:	10800818 	cmpnei	r2,r2,32
 4004594:	1000071e 	bne	r2,zero,40045b4 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0x80>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 4004598:	e0bffe17 	ldw	r2,-8(fp)
 400459c:	10806004 	addi	r2,r2,384
 40045a0:	10c00417 	ldw	r3,16(r2)
 40045a4:	e0bffd17 	ldw	r2,-12(fp)
 40045a8:	1885883a 	add	r2,r3,r2
 40045ac:	e0bffd15 	stw	r2,-12(fp)
 40045b0:	00001106 	br	40045f8 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0xc4>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 40045b4:	e0bffc17 	ldw	r2,-16(fp)
 40045b8:	e0ffff17 	ldw	r3,-4(fp)
 40045bc:	1885883a 	add	r2,r3,r2
 40045c0:	10800003 	ldbu	r2,0(r2)
 40045c4:	10c03fcc 	andi	r3,r2,255
 40045c8:	18c0201c 	xori	r3,r3,128
 40045cc:	18ffe004 	addi	r3,r3,-128
 40045d0:	00820034 	movhi	r2,2048
 40045d4:	10bff7c4 	addi	r2,r2,-33
 40045d8:	1885883a 	add	r2,r3,r2
 40045dc:	1004917a 	slli	r2,r2,5
 40045e0:	e0fffe17 	ldw	r3,-8(fp)
 40045e4:	1885883a 	add	r2,r3,r2
 40045e8:	10c00417 	ldw	r3,16(r2)
 40045ec:	e0bffd17 	ldw	r2,-12(fp)
 40045f0:	1885883a 	add	r2,r3,r2
 40045f4:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 40045f8:	e0bffc17 	ldw	r2,-16(fp)
 40045fc:	10800044 	addi	r2,r2,1
 4004600:	e0bffc15 	stw	r2,-16(fp)
 4004604:	003fd306 	br	4004554 <__alt_mem_epcs_flash_controller_0+0xfb003554>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4004608:	e0bffd17 	ldw	r2,-12(fp)
}
 400460c:	e037883a 	mov	sp,fp
 4004610:	df000017 	ldw	fp,0(sp)
 4004614:	dec00104 	addi	sp,sp,4
 4004618:	f800283a 	ret

0400461c <_Z23seperate_color_channelsiPhS_S_S_>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 400461c:	defff904 	addi	sp,sp,-28
 4004620:	df000615 	stw	fp,24(sp)
 4004624:	df000604 	addi	fp,sp,24
 4004628:	e13ffc15 	stw	r4,-16(fp)
 400462c:	e17ffd15 	stw	r5,-12(fp)
 4004630:	e1bffe15 	stw	r6,-8(fp)
 4004634:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4004638:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 400463c:	e0bffc17 	ldw	r2,-16(fp)
 4004640:	10800418 	cmpnei	r2,r2,16
 4004644:	1000211e 	bne	r2,zero,40046cc <_Z23seperate_color_channelsiPhS_S_S_+0xb0>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4004648:	e0bffd17 	ldw	r2,-12(fp)
 400464c:	10c00044 	addi	r3,r2,1
 4004650:	e0fffd15 	stw	r3,-12(fp)
 4004654:	10800003 	ldbu	r2,0(r2)
 4004658:	10803fcc 	andi	r2,r2,255
 400465c:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 4004660:	e0bffd17 	ldw	r2,-12(fp)
 4004664:	10800003 	ldbu	r2,0(r2)
 4004668:	10803fcc 	andi	r2,r2,255
 400466c:	1004923a 	slli	r2,r2,8
 4004670:	1007883a 	mov	r3,r2
 4004674:	e0bffb0b 	ldhu	r2,-20(fp)
 4004678:	1885883a 	add	r2,r3,r2
 400467c:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 4004680:	e0bffb0b 	ldhu	r2,-20(fp)
 4004684:	108007cc 	andi	r2,r2,31
 4004688:	1007883a 	mov	r3,r2
 400468c:	e0800117 	ldw	r2,4(fp)
 4004690:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4004694:	e0bffb0b 	ldhu	r2,-20(fp)
 4004698:	1005d17a 	srai	r2,r2,5
 400469c:	10800fcc 	andi	r2,r2,63
 40046a0:	1007883a 	mov	r3,r2
 40046a4:	e0bfff17 	ldw	r2,-4(fp)
 40046a8:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 40046ac:	e0bffb0b 	ldhu	r2,-20(fp)
 40046b0:	1004d2fa 	srli	r2,r2,11
 40046b4:	1007883a 	mov	r3,r2
 40046b8:	e0bffe17 	ldw	r2,-8(fp)
 40046bc:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40046c0:	00800044 	movi	r2,1
 40046c4:	e0bffa15 	stw	r2,-24(fp)
 40046c8:	00002006 	br	400474c <_Z23seperate_color_channelsiPhS_S_S_+0x130>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40046cc:	e0bffc17 	ldw	r2,-16(fp)
 40046d0:	10800620 	cmpeqi	r2,r2,24
 40046d4:	1000031e 	bne	r2,zero,40046e4 <_Z23seperate_color_channelsiPhS_S_S_+0xc8>
 40046d8:	e0bffc17 	ldw	r2,-16(fp)
 40046dc:	10800818 	cmpnei	r2,r2,32
 40046e0:	1000131e 	bne	r2,zero,4004730 <_Z23seperate_color_channelsiPhS_S_S_+0x114>
  {
    *blue = *color++;
 40046e4:	e0bffd17 	ldw	r2,-12(fp)
 40046e8:	10c00044 	addi	r3,r2,1
 40046ec:	e0fffd15 	stw	r3,-12(fp)
 40046f0:	10c00003 	ldbu	r3,0(r2)
 40046f4:	e0800117 	ldw	r2,4(fp)
 40046f8:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 40046fc:	e0bffd17 	ldw	r2,-12(fp)
 4004700:	10c00044 	addi	r3,r2,1
 4004704:	e0fffd15 	stw	r3,-12(fp)
 4004708:	10c00003 	ldbu	r3,0(r2)
 400470c:	e0bfff17 	ldw	r2,-4(fp)
 4004710:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 4004714:	e0bffd17 	ldw	r2,-12(fp)
 4004718:	10c00003 	ldbu	r3,0(r2)
 400471c:	e0bffe17 	ldw	r2,-8(fp)
 4004720:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004724:	00800044 	movi	r2,1
 4004728:	e0bffa15 	stw	r2,-24(fp)
 400472c:	00000706 	br	400474c <_Z23seperate_color_channelsiPhS_S_S_+0x130>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4004730:	e0bffe17 	ldw	r2,-8(fp)
 4004734:	10000005 	stb	zero,0(r2)
    *green = 0;
 4004738:	e0bfff17 	ldw	r2,-4(fp)
 400473c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4004740:	e0800117 	ldw	r2,4(fp)
 4004744:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4004748:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 400474c:	e0bffa17 	ldw	r2,-24(fp)
}
 4004750:	e037883a 	mov	sp,fp
 4004754:	df000017 	ldw	fp,0(sp)
 4004758:	dec00104 	addi	sp,sp,4
 400475c:	f800283a 	ret

04004760 <_Z20merge_color_channelsihhhPh>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4004760:	defff904 	addi	sp,sp,-28
 4004764:	df000615 	stw	fp,24(sp)
 4004768:	df000604 	addi	fp,sp,24
 400476c:	e13ffc15 	stw	r4,-16(fp)
 4004770:	2809883a 	mov	r4,r5
 4004774:	3007883a 	mov	r3,r6
 4004778:	3805883a 	mov	r2,r7
 400477c:	e13ffd05 	stb	r4,-12(fp)
 4004780:	e0fffe05 	stb	r3,-8(fp)
 4004784:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 4004788:	e0bffc17 	ldw	r2,-16(fp)
 400478c:	10800418 	cmpnei	r2,r2,16
 4004790:	1000191e 	bne	r2,zero,40047f8 <_Z20merge_color_channelsihhhPh+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4004794:	e0bfff03 	ldbu	r2,-4(fp)
 4004798:	108007cc 	andi	r2,r2,31
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bffe03 	ldbu	r2,-8(fp)
 40047a4:	10800fcc 	andi	r2,r2,63
 40047a8:	1004917a 	slli	r2,r2,5
 40047ac:	1884b03a 	or	r2,r3,r2
 40047b0:	1007883a 	mov	r3,r2
 40047b4:	e0bffd03 	ldbu	r2,-12(fp)
 40047b8:	100492fa 	slli	r2,r2,11
 40047bc:	1884b03a 	or	r2,r3,r2
 40047c0:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 40047c4:	e0800117 	ldw	r2,4(fp)
 40047c8:	10c00044 	addi	r3,r2,1
 40047cc:	e0c00115 	stw	r3,4(fp)
 40047d0:	e0fffb0b 	ldhu	r3,-20(fp)
 40047d4:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 40047d8:	e0bffb0b 	ldhu	r2,-20(fp)
 40047dc:	1004d23a 	srli	r2,r2,8
 40047e0:	1007883a 	mov	r3,r2
 40047e4:	e0800117 	ldw	r2,4(fp)
 40047e8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40047ec:	00800044 	movi	r2,1
 40047f0:	e0bffa15 	stw	r2,-24(fp)
 40047f4:	00002106 	br	400487c <_Z20merge_color_channelsihhhPh+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40047f8:	e0bffc17 	ldw	r2,-16(fp)
 40047fc:	10800620 	cmpeqi	r2,r2,24
 4004800:	1000031e 	bne	r2,zero,4004810 <_Z20merge_color_channelsihhhPh+0xb0>
 4004804:	e0bffc17 	ldw	r2,-16(fp)
 4004808:	10800818 	cmpnei	r2,r2,32
 400480c:	1000101e 	bne	r2,zero,4004850 <_Z20merge_color_channelsihhhPh+0xf0>
  {
    *color++ = blue;
 4004810:	e0800117 	ldw	r2,4(fp)
 4004814:	10c00044 	addi	r3,r2,1
 4004818:	e0c00115 	stw	r3,4(fp)
 400481c:	e0ffff03 	ldbu	r3,-4(fp)
 4004820:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 4004824:	e0800117 	ldw	r2,4(fp)
 4004828:	10c00044 	addi	r3,r2,1
 400482c:	e0c00115 	stw	r3,4(fp)
 4004830:	e0fffe03 	ldbu	r3,-8(fp)
 4004834:	10c00005 	stb	r3,0(r2)
    *color = red;
 4004838:	e0800117 	ldw	r2,4(fp)
 400483c:	e0fffd03 	ldbu	r3,-12(fp)
 4004840:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004844:	00800044 	movi	r2,1
 4004848:	e0bffa15 	stw	r2,-24(fp)
 400484c:	00000b06 	br	400487c <_Z20merge_color_channelsihhhPh+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4004850:	e0800117 	ldw	r2,4(fp)
 4004854:	10c00044 	addi	r3,r2,1
 4004858:	e0c00115 	stw	r3,4(fp)
 400485c:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 4004860:	e0800117 	ldw	r2,4(fp)
 4004864:	10c00044 	addi	r3,r2,1
 4004868:	e0c00115 	stw	r3,4(fp)
 400486c:	10000005 	stb	zero,0(r2)
    *color = 0;
 4004870:	e0800117 	ldw	r2,4(fp)
 4004874:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4004878:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 400487c:	e0bffa17 	ldw	r2,-24(fp)
}
 4004880:	e037883a 	mov	sp,fp
 4004884:	df000017 	ldw	fp,0(sp)
 4004888:	dec00104 	addi	sp,sp,4
 400488c:	f800283a 	ret

04004890 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4004890:	defff704 	addi	sp,sp,-36
 4004894:	dfc00815 	stw	ra,32(sp)
 4004898:	df000715 	stw	fp,28(sp)
 400489c:	df000704 	addi	fp,sp,28
 40048a0:	e13ffc15 	stw	r4,-16(fp)
 40048a4:	e17ffd15 	stw	r5,-12(fp)
 40048a8:	e1bffe15 	stw	r6,-8(fp)
 40048ac:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
 40048b0:	e0800317 	ldw	r2,12(fp)
 40048b4:	10800417 	ldw	r2,16(r2)
 40048b8:	10800818 	cmpnei	r2,r2,32
 40048bc:	1000211e 	bne	r2,zero,4004944 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0xb4>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
 40048c0:	e1000317 	ldw	r4,12(fp)
 40048c4:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40048c8:	1009883a 	mov	r4,r2
 40048cc:	e0800317 	ldw	r2,12(fp)
 40048d0:	10c00517 	ldw	r3,20(r2)
 40048d4:	e0bffd17 	ldw	r2,-12(fp)
 40048d8:	1887383a 	mul	r3,r3,r2
 40048dc:	e0bffc17 	ldw	r2,-16(fp)
 40048e0:	1885883a 	add	r2,r3,r2
 40048e4:	1085883a 	add	r2,r2,r2
 40048e8:	1085883a 	add	r2,r2,r2
 40048ec:	2085883a 	add	r2,r4,r2
 40048f0:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
 40048f4:	e0bffa17 	ldw	r2,-24(fp)
 40048f8:	10800037 	ldwio	r2,0(r2)
 40048fc:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
 4004900:	e0bffb17 	ldw	r2,-20(fp)
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0800217 	ldw	r2,8(fp)
 400490c:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
 4004910:	e0bffb17 	ldw	r2,-20(fp)
 4004914:	1004d23a 	srli	r2,r2,8
 4004918:	1007883a 	mov	r3,r2
 400491c:	e0bfff17 	ldw	r2,-4(fp)
 4004920:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
 4004924:	e0bffb17 	ldw	r2,-20(fp)
 4004928:	1004d43a 	srli	r2,r2,16
 400492c:	1007883a 	mov	r3,r2
 4004930:	e0bffe17 	ldw	r2,-8(fp)
 4004934:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004938:	00800044 	movi	r2,1
 400493c:	e0bff915 	stw	r2,-28(fp)
 4004940:	00005806 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else if( display->color_depth == 24 )
 4004944:	e0800317 	ldw	r2,12(fp)
 4004948:	10800417 	ldw	r2,16(r2)
 400494c:	10800618 	cmpnei	r2,r2,24
 4004950:	1000251e 	bne	r2,zero,40049e8 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x158>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
 4004954:	e1000317 	ldw	r4,12(fp)
 4004958:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400495c:	1009883a 	mov	r4,r2
 4004960:	e0800317 	ldw	r2,12(fp)
 4004964:	10c00517 	ldw	r3,20(r2)
 4004968:	e0bffd17 	ldw	r2,-12(fp)
 400496c:	1887383a 	mul	r3,r3,r2
 4004970:	e0bffc17 	ldw	r2,-16(fp)
 4004974:	1887883a 	add	r3,r3,r2
 4004978:	1805883a 	mov	r2,r3
 400497c:	1085883a 	add	r2,r2,r2
 4004980:	10c5883a 	add	r2,r2,r3
 4004984:	2085883a 	add	r2,r4,r2
 4004988:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
 400498c:	e0bffa17 	ldw	r2,-24(fp)
 4004990:	10800023 	ldbuio	r2,0(r2)
 4004994:	10803fcc 	andi	r2,r2,255
 4004998:	1007883a 	mov	r3,r2
 400499c:	e0800217 	ldw	r2,8(fp)
 40049a0:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
 40049a4:	e0bffa17 	ldw	r2,-24(fp)
 40049a8:	10800044 	addi	r2,r2,1
 40049ac:	10800023 	ldbuio	r2,0(r2)
 40049b0:	10803fcc 	andi	r2,r2,255
 40049b4:	1007883a 	mov	r3,r2
 40049b8:	e0bfff17 	ldw	r2,-4(fp)
 40049bc:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
 40049c0:	e0bffa17 	ldw	r2,-24(fp)
 40049c4:	10800084 	addi	r2,r2,2
 40049c8:	10800023 	ldbuio	r2,0(r2)
 40049cc:	10803fcc 	andi	r2,r2,255
 40049d0:	1007883a 	mov	r3,r2
 40049d4:	e0bffe17 	ldw	r2,-8(fp)
 40049d8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40049dc:	00800044 	movi	r2,1
 40049e0:	e0bff915 	stw	r2,-28(fp)
 40049e4:	00002f06 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else if( display->color_depth == 16 )
 40049e8:	e0800317 	ldw	r2,12(fp)
 40049ec:	10800417 	ldw	r2,16(r2)
 40049f0:	10800418 	cmpnei	r2,r2,16
 40049f4:	1000241e 	bne	r2,zero,4004a88 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x1f8>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
 40049f8:	e1000317 	ldw	r4,12(fp)
 40049fc:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4004a00:	1009883a 	mov	r4,r2
 4004a04:	e0800317 	ldw	r2,12(fp)
 4004a08:	10c00517 	ldw	r3,20(r2)
 4004a0c:	e0bffd17 	ldw	r2,-12(fp)
 4004a10:	1887383a 	mul	r3,r3,r2
 4004a14:	e0bffc17 	ldw	r2,-16(fp)
 4004a18:	1885883a 	add	r2,r3,r2
 4004a1c:	1085883a 	add	r2,r2,r2
 4004a20:	2085883a 	add	r2,r4,r2
 4004a24:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
 4004a28:	e0bffa17 	ldw	r2,-24(fp)
 4004a2c:	1080002b 	ldhuio	r2,0(r2)
 4004a30:	10bfffcc 	andi	r2,r2,65535
 4004a34:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
 4004a38:	e0bffb17 	ldw	r2,-20(fp)
 4004a3c:	108007cc 	andi	r2,r2,31
 4004a40:	1007883a 	mov	r3,r2
 4004a44:	e0800217 	ldw	r2,8(fp)
 4004a48:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
 4004a4c:	e0bffb17 	ldw	r2,-20(fp)
 4004a50:	1004d17a 	srli	r2,r2,5
 4004a54:	10800fcc 	andi	r2,r2,63
 4004a58:	1007883a 	mov	r3,r2
 4004a5c:	e0bfff17 	ldw	r2,-4(fp)
 4004a60:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
 4004a64:	e0bffb17 	ldw	r2,-20(fp)
 4004a68:	1004d2fa 	srli	r2,r2,11
 4004a6c:	108007cc 	andi	r2,r2,31
 4004a70:	1007883a 	mov	r3,r2
 4004a74:	e0bffe17 	ldw	r2,-8(fp)
 4004a78:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004a7c:	00800044 	movi	r2,1
 4004a80:	e0bff915 	stw	r2,-28(fp)
 4004a84:	00000706 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else
  {
    *blue = 0;
 4004a88:	e0800217 	ldw	r2,8(fp)
 4004a8c:	10000005 	stb	zero,0(r2)
    *red = 0;
 4004a90:	e0bffe17 	ldw	r2,-8(fp)
 4004a94:	10000005 	stb	zero,0(r2)
    *green = 0;
 4004a98:	e0bfff17 	ldw	r2,-4(fp)
 4004a9c:	10000005 	stb	zero,0(r2)
    return_value = 0; 
 4004aa0:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
 4004aa4:	e0bff917 	ldw	r2,-28(fp)
}
 4004aa8:	e037883a 	mov	sp,fp
 4004aac:	dfc00117 	ldw	ra,4(sp)
 4004ab0:	df000017 	ldw	fp,0(sp)
 4004ab4:	dec00204 	addi	sp,sp,8
 4004ab8:	f800283a 	ret

04004abc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4004abc:	defff304 	addi	sp,sp,-52
 4004ac0:	dfc00c15 	stw	ra,48(sp)
 4004ac4:	df000b15 	stw	fp,44(sp)
 4004ac8:	df000b04 	addi	fp,sp,44
 4004acc:	e13ffc15 	stw	r4,-16(fp)
 4004ad0:	e17ffd15 	stw	r5,-12(fp)
 4004ad4:	e1bffe15 	stw	r6,-8(fp)
 4004ad8:	3805883a 	mov	r2,r7
 4004adc:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4004ae0:	e0bffe17 	ldw	r2,-8(fp)
 4004ae4:	10bfffd8 	cmpnei	r2,r2,-1
 4004ae8:	10000c1e 	bne	r2,zero,4004b1c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4004aec:	e13ffb44 	addi	r4,fp,-19
 4004af0:	e0fffb04 	addi	r3,fp,-20
 4004af4:	e0800517 	ldw	r2,20(fp)
 4004af8:	d8800115 	stw	r2,4(sp)
 4004afc:	e0bffb84 	addi	r2,fp,-18
 4004b00:	d8800015 	stw	r2,0(sp)
 4004b04:	200f883a 	mov	r7,r4
 4004b08:	180d883a 	mov	r6,r3
 4004b0c:	e17ffd17 	ldw	r5,-12(fp)
 4004b10:	e13ffc17 	ldw	r4,-16(fp)
 4004b14:	40048900 	call	4004890 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER>
 4004b18:	00000c06 	br	4004b4c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x90>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4004b1c:	e0800517 	ldw	r2,20(fp)
 4004b20:	10c00417 	ldw	r3,16(r2)
 4004b24:	e1bffb44 	addi	r6,fp,-19
 4004b28:	e17ffb04 	addi	r5,fp,-20
 4004b2c:	e13ffe04 	addi	r4,fp,-8
 4004b30:	e0bffb84 	addi	r2,fp,-18
 4004b34:	d8800015 	stw	r2,0(sp)
 4004b38:	300f883a 	mov	r7,r6
 4004b3c:	280d883a 	mov	r6,r5
 4004b40:	200b883a 	mov	r5,r4
 4004b44:	1809883a 	mov	r4,r3
 4004b48:	400461c0 	call	400461c <_Z23seperate_color_channelsiPhS_S_S_>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4004b4c:	e0800217 	ldw	r2,8(fp)
 4004b50:	10800003 	ldbu	r2,0(r2)
 4004b54:	10c03fcc 	andi	r3,r2,255
 4004b58:	e0bfff03 	ldbu	r2,-4(fp)
 4004b5c:	1887383a 	mul	r3,r3,r2
 4004b60:	e0bffb03 	ldbu	r2,-20(fp)
 4004b64:	11003fcc 	andi	r4,r2,255
 4004b68:	e0bfff03 	ldbu	r2,-4(fp)
 4004b6c:	01403fc4 	movi	r5,255
 4004b70:	2885c83a 	sub	r2,r5,r2
 4004b74:	2085383a 	mul	r2,r4,r2
 4004b78:	1885883a 	add	r2,r3,r2
 4004b7c:	01403fc4 	movi	r5,255
 4004b80:	1009883a 	mov	r4,r2
 4004b84:	400a01c0 	call	400a01c <__divsi3>
 4004b88:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4004b8c:	e0800317 	ldw	r2,12(fp)
 4004b90:	10800003 	ldbu	r2,0(r2)
 4004b94:	10c03fcc 	andi	r3,r2,255
 4004b98:	e0bfff03 	ldbu	r2,-4(fp)
 4004b9c:	1887383a 	mul	r3,r3,r2
 4004ba0:	e0bffb43 	ldbu	r2,-19(fp)
 4004ba4:	11003fcc 	andi	r4,r2,255
 4004ba8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bac:	01403fc4 	movi	r5,255
 4004bb0:	2885c83a 	sub	r2,r5,r2
 4004bb4:	2085383a 	mul	r2,r4,r2
 4004bb8:	1885883a 	add	r2,r3,r2
 4004bbc:	01403fc4 	movi	r5,255
 4004bc0:	1009883a 	mov	r4,r2
 4004bc4:	400a01c0 	call	400a01c <__divsi3>
 4004bc8:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4004bcc:	e0800417 	ldw	r2,16(fp)
 4004bd0:	10800003 	ldbu	r2,0(r2)
 4004bd4:	10c03fcc 	andi	r3,r2,255
 4004bd8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bdc:	1887383a 	mul	r3,r3,r2
 4004be0:	e0bffb83 	ldbu	r2,-18(fp)
 4004be4:	11003fcc 	andi	r4,r2,255
 4004be8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bec:	01403fc4 	movi	r5,255
 4004bf0:	2885c83a 	sub	r2,r5,r2
 4004bf4:	2085383a 	mul	r2,r4,r2
 4004bf8:	1885883a 	add	r2,r3,r2
 4004bfc:	01403fc4 	movi	r5,255
 4004c00:	1009883a 	mov	r4,r2
 4004c04:	400a01c0 	call	400a01c <__divsi3>
 4004c08:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4004c0c:	e0800517 	ldw	r2,20(fp)
 4004c10:	10800417 	ldw	r2,16(r2)
 4004c14:	10800418 	cmpnei	r2,r2,16
 4004c18:	1000181e 	bne	r2,zero,4004c7c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1c0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4004c1c:	e0bff817 	ldw	r2,-32(fp)
 4004c20:	10c00830 	cmpltui	r3,r2,32
 4004c24:	1800011e 	bne	r3,zero,4004c2c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x170>
 4004c28:	008007c4 	movi	r2,31
 4004c2c:	1007883a 	mov	r3,r2
 4004c30:	e0800217 	ldw	r2,8(fp)
 4004c34:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4004c38:	e0bff917 	ldw	r2,-28(fp)
 4004c3c:	10c01030 	cmpltui	r3,r2,64
 4004c40:	1800011e 	bne	r3,zero,4004c48 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x18c>
 4004c44:	00800fc4 	movi	r2,63
 4004c48:	1007883a 	mov	r3,r2
 4004c4c:	e0800317 	ldw	r2,12(fp)
 4004c50:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4004c54:	e0bffa17 	ldw	r2,-24(fp)
 4004c58:	10c00830 	cmpltui	r3,r2,32
 4004c5c:	1800011e 	bne	r3,zero,4004c64 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1a8>
 4004c60:	008007c4 	movi	r2,31
 4004c64:	1007883a 	mov	r3,r2
 4004c68:	e0800417 	ldw	r2,16(fp)
 4004c6c:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4004c70:	00800044 	movi	r2,1
 4004c74:	e0bff715 	stw	r2,-36(fp)
 4004c78:	00002106 	br	4004d00 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x244>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4004c7c:	e0800517 	ldw	r2,20(fp)
 4004c80:	10800417 	ldw	r2,16(r2)
 4004c84:	10800620 	cmpeqi	r2,r2,24
 4004c88:	1000041e 	bne	r2,zero,4004c9c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1e0>
 4004c8c:	e0800517 	ldw	r2,20(fp)
 4004c90:	10800417 	ldw	r2,16(r2)
 4004c94:	10800818 	cmpnei	r2,r2,32
 4004c98:	1000181e 	bne	r2,zero,4004cfc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x240>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4004c9c:	e0bff817 	ldw	r2,-32(fp)
 4004ca0:	10c04030 	cmpltui	r3,r2,256
 4004ca4:	1800011e 	bne	r3,zero,4004cac <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1f0>
 4004ca8:	00803fc4 	movi	r2,255
 4004cac:	1007883a 	mov	r3,r2
 4004cb0:	e0800217 	ldw	r2,8(fp)
 4004cb4:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4004cb8:	e0bff917 	ldw	r2,-28(fp)
 4004cbc:	10c04030 	cmpltui	r3,r2,256
 4004cc0:	1800011e 	bne	r3,zero,4004cc8 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x20c>
 4004cc4:	00803fc4 	movi	r2,255
 4004cc8:	1007883a 	mov	r3,r2
 4004ccc:	e0800317 	ldw	r2,12(fp)
 4004cd0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4004cd4:	e0bffa17 	ldw	r2,-24(fp)
 4004cd8:	10c04030 	cmpltui	r3,r2,256
 4004cdc:	1800011e 	bne	r3,zero,4004ce4 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x228>
 4004ce0:	00803fc4 	movi	r2,255
 4004ce4:	1007883a 	mov	r3,r2
 4004ce8:	e0800417 	ldw	r2,16(fp)
 4004cec:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4004cf0:	00800044 	movi	r2,1
 4004cf4:	e0bff715 	stw	r2,-36(fp)
 4004cf8:	00000106 	br	4004d00 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x244>
  }
  else
  {
    return_value = 0;     
 4004cfc:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4004d00:	e0bff717 	ldw	r2,-36(fp)
} 
 4004d04:	e037883a 	mov	sp,fp
 4004d08:	dfc00117 	ldw	ra,4(sp)
 4004d0c:	df000017 	ldw	fp,0(sp)
 4004d10:	dec00204 	addi	sp,sp,8
 4004d14:	f800283a 	ret

04004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>:
//#define VALID_POINT(x,y) (((x)>=DOT_SIZE && (x)<FRAME_WIDTH-DOT_SIZE && (y)>=DOT_SIZE && (y)<FRAME_HEIGHT-DOT_SIZE)?TRUE:FALSE)



void DrawImage(VIP_FRAME_READER *pReader, struct gimp_image_struct* Terasic_image, int horiz, int vert )
{
 4004d18:	defff504 	addi	sp,sp,-44
 4004d1c:	dfc00a15 	stw	ra,40(sp)
 4004d20:	df000915 	stw	fp,36(sp)
 4004d24:	df000904 	addi	fp,sp,36
 4004d28:	e13ffc15 	stw	r4,-16(fp)
 4004d2c:	e17ffd15 	stw	r5,-12(fp)
 4004d30:	e1bffe15 	stw	r6,-8(fp)
 4004d34:	e1ffff15 	stw	r7,-4(fp)

  bitmap_struct* image;
  alt_u8 *pDes, *pSrc, *image_dest;
  int y;

  image = (bitmap_struct *)malloc(sizeof(bitmap_struct));
 4004d38:	01000404 	movi	r4,16
 4004d3c:	400deb40 	call	400deb4 <malloc>
 4004d40:	e0bffa15 	stw	r2,-24(fp)
  
  if( image != NULL )
 4004d44:	e0bffa17 	ldw	r2,-24(fp)
 4004d48:	10004926 	beq	r2,zero,4004e70 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii+0x158>
  {
    // Load the CIII logo
    load_gimp_bmp( Terasic_image, image, 32);
 4004d4c:	01800804 	movi	r6,32
 4004d50:	e17ffa17 	ldw	r5,-24(fp)
 4004d54:	e13ffd17 	ldw	r4,-12(fp)
 4004d58:	40006980 	call	4000698 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi>

    image_dest = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (vert*pReader->width*pReader->bytes_per_pixel) + (horiz*pReader->bytes_per_pixel);
 4004d5c:	e13ffc17 	ldw	r4,-16(fp)
 4004d60:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4004d64:	1009883a 	mov	r4,r2
 4004d68:	e0bffc17 	ldw	r2,-16(fp)
 4004d6c:	10c00517 	ldw	r3,20(r2)
 4004d70:	e0bfff17 	ldw	r2,-4(fp)
 4004d74:	1887383a 	mul	r3,r3,r2
 4004d78:	e0bffc17 	ldw	r2,-16(fp)
 4004d7c:	10800717 	ldw	r2,28(r2)
 4004d80:	1885383a 	mul	r2,r3,r2
 4004d84:	100b883a 	mov	r5,r2
 4004d88:	e0bffc17 	ldw	r2,-16(fp)
 4004d8c:	10c00717 	ldw	r3,28(r2)
 4004d90:	e0bffe17 	ldw	r2,-8(fp)
 4004d94:	1885383a 	mul	r2,r3,r2
 4004d98:	2885883a 	add	r2,r5,r2
 4004d9c:	2085883a 	add	r2,r4,r2
 4004da0:	e0bffb15 	stw	r2,-20(fp)

    pSrc = (alt_u8 *)image->data;
 4004da4:	e0bffa17 	ldw	r2,-24(fp)
 4004da8:	10800317 	ldw	r2,12(r2)
 4004dac:	e0bff815 	stw	r2,-32(fp)
    pDes = image_dest;
 4004db0:	e0bffb17 	ldw	r2,-20(fp)
 4004db4:	e0bff715 	stw	r2,-36(fp)
    for(y=0;y<image->biHeight;y++){
 4004db8:	e03ff915 	stw	zero,-28(fp)
 4004dbc:	e0bffa17 	ldw	r2,-24(fp)
 4004dc0:	1080008b 	ldhu	r2,2(r2)
 4004dc4:	10bfffcc 	andi	r2,r2,65535
 4004dc8:	10a0001c 	xori	r2,r2,32768
 4004dcc:	10a00004 	addi	r2,r2,-32768
 4004dd0:	e0fff917 	ldw	r3,-28(fp)
 4004dd4:	1880220e 	bge	r3,r2,4004e60 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii+0x148>
        memcpy(pDes, pSrc, image->biWidth * 4);
 4004dd8:	e0bffa17 	ldw	r2,-24(fp)
 4004ddc:	1080000b 	ldhu	r2,0(r2)
 4004de0:	10bfffcc 	andi	r2,r2,65535
 4004de4:	10a0001c 	xori	r2,r2,32768
 4004de8:	10a00004 	addi	r2,r2,-32768
 4004dec:	1085883a 	add	r2,r2,r2
 4004df0:	1085883a 	add	r2,r2,r2
 4004df4:	100d883a 	mov	r6,r2
 4004df8:	e17ff817 	ldw	r5,-32(fp)
 4004dfc:	e13ff717 	ldw	r4,-36(fp)
 4004e00:	400e6e80 	call	400e6e8 <memcpy>
        pSrc += image->biWidth * 4;
 4004e04:	e0bffa17 	ldw	r2,-24(fp)
 4004e08:	1080000b 	ldhu	r2,0(r2)
 4004e0c:	10bfffcc 	andi	r2,r2,65535
 4004e10:	10a0001c 	xori	r2,r2,32768
 4004e14:	10a00004 	addi	r2,r2,-32768
 4004e18:	1085883a 	add	r2,r2,r2
 4004e1c:	1085883a 	add	r2,r2,r2
 4004e20:	1007883a 	mov	r3,r2
 4004e24:	e0bff817 	ldw	r2,-32(fp)
 4004e28:	10c5883a 	add	r2,r2,r3
 4004e2c:	e0bff815 	stw	r2,-32(fp)
        pDes += pReader->width * 4;
 4004e30:	e0bffc17 	ldw	r2,-16(fp)
 4004e34:	10800517 	ldw	r2,20(r2)
 4004e38:	1085883a 	add	r2,r2,r2
 4004e3c:	1085883a 	add	r2,r2,r2
 4004e40:	1007883a 	mov	r3,r2
 4004e44:	e0bff717 	ldw	r2,-36(fp)
 4004e48:	10c5883a 	add	r2,r2,r3
 4004e4c:	e0bff715 	stw	r2,-36(fp)

    image_dest = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (vert*pReader->width*pReader->bytes_per_pixel) + (horiz*pReader->bytes_per_pixel);

    pSrc = (alt_u8 *)image->data;
    pDes = image_dest;
    for(y=0;y<image->biHeight;y++){
 4004e50:	e0bff917 	ldw	r2,-28(fp)
 4004e54:	10800044 	addi	r2,r2,1
 4004e58:	e0bff915 	stw	r2,-28(fp)
 4004e5c:	003fd706 	br	4004dbc <__alt_mem_epcs_flash_controller_0+0xfb003dbc>
        memcpy(pDes, pSrc, image->biWidth * 4);
        pSrc += image->biWidth * 4;
        pDes += pReader->width * 4;
    }

    free_gimp_bmp_data( image );
 4004e60:	e13ffa17 	ldw	r4,-24(fp)
 4004e64:	4000a800 	call	4000a80 <_Z18free_gimp_bmp_dataP13bitmap_struct>
    free( image );
 4004e68:	e13ffa17 	ldw	r4,-24(fp)
 4004e6c:	400dec80 	call	400dec8 <free>
  }
}
 4004e70:	0001883a 	nop
 4004e74:	e037883a 	mov	sp,fp
 4004e78:	dfc00117 	ldw	ra,4(sp)
 4004e7c:	df000017 	ldw	fp,0(sp)
 4004e80:	dec00204 	addi	sp,sp,8
 4004e84:	f800283a 	ret

04004e88 <_Z10draw_arrayPjiiP16VIP_FRAME_READERiij>:

void draw_array(unsigned int *buffer, int x_size, int y_size,
		VIP_FRAME_READER *pReader, int x_offset, int y_offset,
  unsigned int transparent_color)
{
 4004e88:	defff604 	addi	sp,sp,-40
 4004e8c:	dfc00915 	stw	ra,36(sp)
 4004e90:	df000815 	stw	fp,32(sp)
 4004e94:	df000804 	addi	fp,sp,32
 4004e98:	e13ffc15 	stw	r4,-16(fp)
 4004e9c:	e17ffd15 	stw	r5,-12(fp)
 4004ea0:	e1bffe15 	stw	r6,-8(fp)
 4004ea4:	e1ffff15 	stw	r7,-4(fp)
//  int addr = (alt_u8 *)VIPFR_GetDrawFrame(pReader);

  int x_b,y_b;
  unsigned int color;

  current_buffer = (unsigned int*)VIPFR_GetDrawFrame(pReader);
 4004ea8:	e13fff17 	ldw	r4,-4(fp)
 4004eac:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4004eb0:	e0bffa15 	stw	r2,-24(fp)

  transparent_color = 0xFF000000 | transparent_color;
 4004eb4:	e0800417 	ldw	r2,16(fp)
 4004eb8:	10bfc034 	orhi	r2,r2,65280
 4004ebc:	e0800415 	stw	r2,16(fp)

  for (x_b = 0; x_b<x_size; x_b++) {
 4004ec0:	e03ff815 	stw	zero,-32(fp)
 4004ec4:	e0fff817 	ldw	r3,-32(fp)
 4004ec8:	e0bffd17 	ldw	r2,-12(fp)
 4004ecc:	18802c0e 	bge	r3,r2,4004f80 <_Z10draw_arrayPjiiP16VIP_FRAME_READERiij+0xf8>
    for (y_b = 0; y_b<y_size; y_b++) {
 4004ed0:	e03ff915 	stw	zero,-28(fp)
 4004ed4:	e0fff917 	ldw	r3,-28(fp)
 4004ed8:	e0bffe17 	ldw	r2,-8(fp)
 4004edc:	1880240e 	bge	r3,r2,4004f70 <_Z10draw_arrayPjiiP16VIP_FRAME_READERiij+0xe8>
      color = buffer[y_b*x_size+x_b];
 4004ee0:	e0fff917 	ldw	r3,-28(fp)
 4004ee4:	e0bffd17 	ldw	r2,-12(fp)
 4004ee8:	1887383a 	mul	r3,r3,r2
 4004eec:	e0bff817 	ldw	r2,-32(fp)
 4004ef0:	1885883a 	add	r2,r3,r2
 4004ef4:	1085883a 	add	r2,r2,r2
 4004ef8:	1085883a 	add	r2,r2,r2
 4004efc:	1007883a 	mov	r3,r2
 4004f00:	e0bffc17 	ldw	r2,-16(fp)
 4004f04:	10c5883a 	add	r2,r2,r3
 4004f08:	10800017 	ldw	r2,0(r2)
 4004f0c:	e0bffb15 	stw	r2,-20(fp)
      if (color != transparent_color) {
 4004f10:	e0fffb17 	ldw	r3,-20(fp)
 4004f14:	e0800417 	ldw	r2,16(fp)
 4004f18:	18801126 	beq	r3,r2,4004f60 <_Z10draw_arrayPjiiP16VIP_FRAME_READERiij+0xd8>
        current_buffer[(y_b+y_offset)*pReader->width+(x_b+x_offset)] = color;
 4004f1c:	e0fff917 	ldw	r3,-28(fp)
 4004f20:	e0800317 	ldw	r2,12(fp)
 4004f24:	1887883a 	add	r3,r3,r2
 4004f28:	e0bfff17 	ldw	r2,-4(fp)
 4004f2c:	10800517 	ldw	r2,20(r2)
 4004f30:	1887383a 	mul	r3,r3,r2
 4004f34:	e13ff817 	ldw	r4,-32(fp)
 4004f38:	e0800217 	ldw	r2,8(fp)
 4004f3c:	2085883a 	add	r2,r4,r2
 4004f40:	1885883a 	add	r2,r3,r2
 4004f44:	1085883a 	add	r2,r2,r2
 4004f48:	1085883a 	add	r2,r2,r2
 4004f4c:	1007883a 	mov	r3,r2
 4004f50:	e0bffa17 	ldw	r2,-24(fp)
 4004f54:	10c5883a 	add	r2,r2,r3
 4004f58:	e0fffb17 	ldw	r3,-20(fp)
 4004f5c:	10c00015 	stw	r3,0(r2)
  current_buffer = (unsigned int*)VIPFR_GetDrawFrame(pReader);

  transparent_color = 0xFF000000 | transparent_color;

  for (x_b = 0; x_b<x_size; x_b++) {
    for (y_b = 0; y_b<y_size; y_b++) {
 4004f60:	e0bff917 	ldw	r2,-28(fp)
 4004f64:	10800044 	addi	r2,r2,1
 4004f68:	e0bff915 	stw	r2,-28(fp)
 4004f6c:	003fd906 	br	4004ed4 <__alt_mem_epcs_flash_controller_0+0xfb003ed4>

  current_buffer = (unsigned int*)VIPFR_GetDrawFrame(pReader);

  transparent_color = 0xFF000000 | transparent_color;

  for (x_b = 0; x_b<x_size; x_b++) {
 4004f70:	e0bff817 	ldw	r2,-32(fp)
 4004f74:	10800044 	addi	r2,r2,1
 4004f78:	e0bff815 	stw	r2,-32(fp)
 4004f7c:	003fd106 	br	4004ec4 <__alt_mem_epcs_flash_controller_0+0xfb003ec4>
      if (color != transparent_color) {
        current_buffer[(y_b+y_offset)*pReader->width+(x_b+x_offset)] = color;
      }
    }
  }
}
 4004f80:	0001883a 	nop
 4004f84:	e037883a 	mov	sp,fp
 4004f88:	dfc00117 	ldw	ra,4(sp)
 4004f8c:	df000017 	ldw	fp,0(sp)
 4004f90:	dec00204 	addi	sp,sp,8
 4004f94:	f800283a 	ret

04004f98 <_Z20DrawTransparentImageP16VIP_FRAME_READERP17gimp_image_structiij>:

void DrawTransparentImage( VIP_FRAME_READER *pReader, struct gimp_image_struct* Terasic_image, int horiz, int vert,unsigned int transparent_color )
{
 4004f98:	defff604 	addi	sp,sp,-40
 4004f9c:	dfc00915 	stw	ra,36(sp)
 4004fa0:	df000815 	stw	fp,32(sp)
 4004fa4:	df000804 	addi	fp,sp,32
 4004fa8:	e13ffc15 	stw	r4,-16(fp)
 4004fac:	e17ffd15 	stw	r5,-12(fp)
 4004fb0:	e1bffe15 	stw	r6,-8(fp)
 4004fb4:	e1ffff15 	stw	r7,-4(fp)

  bitmap_struct* image;

  image = (bitmap_struct*)malloc(sizeof(bitmap_struct));
 4004fb8:	01000404 	movi	r4,16
 4004fbc:	400deb40 	call	400deb4 <malloc>
 4004fc0:	e0bffb15 	stw	r2,-20(fp)

  if( image != NULL )
 4004fc4:	e0bffb17 	ldw	r2,-20(fp)
 4004fc8:	10001f26 	beq	r2,zero,4005048 <_Z20DrawTransparentImageP16VIP_FRAME_READERP17gimp_image_structiij+0xb0>
  {
    // Load the CIII logo
    load_gimp_bmp( Terasic_image, image, 32);
 4004fcc:	01800804 	movi	r6,32
 4004fd0:	e17ffb17 	ldw	r5,-20(fp)
 4004fd4:	e13ffd17 	ldw	r4,-12(fp)
 4004fd8:	40006980 	call	4000698 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi>

//      image_dest = (char*)(( display->buffer_ptrs[display->buffer_being_written]->buffer ) + (vert * (display->width * 4)) + horiz * 4);
   //   image_dest = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (vert*pReader->width*pReader->bytes_per_pixel) + (horiz*pReader->bytes_per_pixel);

    draw_array((unsigned int*)image->data,image->biWidth,image->biHeight,pReader,horiz,vert,transparent_color);
 4004fdc:	e0bffb17 	ldw	r2,-20(fp)
 4004fe0:	10c00317 	ldw	r3,12(r2)
 4004fe4:	e0bffb17 	ldw	r2,-20(fp)
 4004fe8:	1080000b 	ldhu	r2,0(r2)
 4004fec:	113fffcc 	andi	r4,r2,65535
 4004ff0:	2120001c 	xori	r4,r4,32768
 4004ff4:	21200004 	addi	r4,r4,-32768
 4004ff8:	e0bffb17 	ldw	r2,-20(fp)
 4004ffc:	1080008b 	ldhu	r2,2(r2)
 4005000:	117fffcc 	andi	r5,r2,65535
 4005004:	2960001c 	xori	r5,r5,32768
 4005008:	29600004 	addi	r5,r5,-32768
 400500c:	e0800217 	ldw	r2,8(fp)
 4005010:	d8800215 	stw	r2,8(sp)
 4005014:	e0bfff17 	ldw	r2,-4(fp)
 4005018:	d8800115 	stw	r2,4(sp)
 400501c:	e0bffe17 	ldw	r2,-8(fp)
 4005020:	d8800015 	stw	r2,0(sp)
 4005024:	e1fffc17 	ldw	r7,-16(fp)
 4005028:	280d883a 	mov	r6,r5
 400502c:	200b883a 	mov	r5,r4
 4005030:	1809883a 	mov	r4,r3
 4005034:	4004e880 	call	4004e88 <_Z10draw_arrayPjiiP16VIP_FRAME_READERiij>

    free_gimp_bmp_data( image );
 4005038:	e13ffb17 	ldw	r4,-20(fp)
 400503c:	4000a800 	call	4000a80 <_Z18free_gimp_bmp_dataP13bitmap_struct>
    free( image );
 4005040:	e13ffb17 	ldw	r4,-20(fp)
 4005044:	400dec80 	call	400dec8 <free>
  }
}
 4005048:	0001883a 	nop
 400504c:	e037883a 	mov	sp,fp
 4005050:	dfc00117 	ldw	ra,4(sp)
 4005054:	df000017 	ldw	fp,0(sp)
 4005058:	dec00204 	addi	sp,sp,8
 400505c:	f800283a 	ret

04005060 <_Z14InitBackGroundP16VIP_FRAME_READER>:



void InitBackGround(VIP_FRAME_READER *pReader)
{
 4005060:	defffd04 	addi	sp,sp,-12
 4005064:	dfc00215 	stw	ra,8(sp)
 4005068:	df000115 	stw	fp,4(sp)
 400506c:	df000104 	addi	fp,sp,4
 4005070:	e13fff15 	stw	r4,-4(fp)
    extern gimp_image_struct H_Bar;
    extern gimp_image_struct V_Bar;
    extern gimp_image_struct ball;
    extern gimp_image_struct bright;
    
    vid_clean_screen(pReader, COLOR_WHITE);
 4005074:	01404034 	movhi	r5,256
 4005078:	297fffc4 	addi	r5,r5,-1
 400507c:	e13fff17 	ldw	r4,-4(fp)
 4005080:	40012680 	call	4001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>
        
        //draw v_Bar , h_Bar, Ball
        DrawImage(pReader, &V_Bar, V_BAR_X,V_BAR_Y);
 4005084:	01c00c84 	movi	r7,50
 4005088:	01800784 	movi	r6,30
 400508c:	014102b4 	movhi	r5,1034
 4005090:	2951d604 	addi	r5,r5,18264
 4005094:	e13fff17 	ldw	r4,-4(fp)
 4005098:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &ball, CENTER_BALL_X, CENTER_BALL_Y);
 400509c:	01c01184 	movi	r7,70
 40050a0:	01802d04 	movi	r6,180
 40050a4:	01410374 	movhi	r5,1037
 40050a8:	2948f604 	addi	r5,r5,9176
 40050ac:	e13fff17 	ldw	r4,-4(fp)
 40050b0:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &H_Bar, H_BAR_X,H_BAR_Y);
 40050b4:	01c06384 	movi	r7,398
 40050b8:	01802304 	movi	r6,140
 40050bc:	01410274 	movhi	r5,1033
 40050c0:	29573904 	addi	r5,r5,23780
 40050c4:	e13fff17 	ldw	r4,-4(fp)
 40050c8:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &bright,  570, 30);
 40050cc:	01c00784 	movi	r7,30
 40050d0:	01808e84 	movi	r6,570
 40050d4:	014103f4 	movhi	r5,1039
 40050d8:	29739504 	addi	r5,r5,-12716
 40050dc:	e13fff17 	ldw	r4,-4(fp)
 40050e0:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
              
     //  memcpy(temp_Buffer, (void*)(display->buffer_ptrs[display->buffer_being_written]->buffer),display->bytes_per_frame);
}
 40050e4:	0001883a 	nop
 40050e8:	e037883a 	mov	sp,fp
 40050ec:	dfc00117 	ldw	ra,4(sp)
 40050f0:	df000017 	ldw	fp,0(sp)
 40050f4:	dec00204 	addi	sp,sp,8
 40050f8:	f800283a 	ret

040050fc <_Z9Get_lightPtS_>:


bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
 40050fc:	defffa04 	addi	sp,sp,-24
 4005100:	dfc00515 	stw	ra,20(sp)
 4005104:	df000415 	stw	fp,16(sp)
 4005108:	df000404 	addi	fp,sp,16
 400510c:	e13ffe15 	stw	r4,-8(fp)
 4005110:	e17fff15 	stw	r5,-4(fp)
    bool bPass = FALSE;
 4005114:	e03ffc05 	stb	zero,-16(fp)
    alt_u8 device_Id = 0;
 4005118:	e03ffc45 	stb	zero,-15(fp)

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
 400511c:	e0bffc44 	addi	r2,fp,-15
 4005120:	1009883a 	mov	r4,r2
 4005124:	4007f540 	call	4007f54 <_Z11Light_GetIDPh>
    if(device_Id == 0)
 4005128:	e0bffc43 	ldbu	r2,-15(fp)
 400512c:	10803fcc 	andi	r2,r2,255
 4005130:	1000051e 	bne	r2,zero,4005148 <_Z9Get_lightPtS_+0x4c>
    {
        printf("read id fail \n");
 4005134:	01010234 	movhi	r4,1032
 4005138:	21365604 	addi	r4,r4,-9896
 400513c:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4005140:	0005883a 	mov	r2,zero
 4005144:	00002106 	br	40051cc <_Z9Get_lightPtS_+0xd0>
    	//printf("Light Sensor ID=%xh\r\n", device_Id); //
    }


    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
 4005148:	e0bffc84 	addi	r2,fp,-14
 400514c:	1009883a 	mov	r4,r2
 4005150:	400808c0 	call	400808c <_Z18Light_Get_ADCData0Pt>
 4005154:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
 4005158:	e0bffc03 	ldbu	r2,-16(fp)
 400515c:	1080005c 	xori	r2,r2,1
 4005160:	10803fcc 	andi	r2,r2,255
 4005164:	10000526 	beq	r2,zero,400517c <_Z9Get_lightPtS_+0x80>
    {
        printf("Get ADC Channle 0 data fail \n");
 4005168:	01010234 	movhi	r4,1032
 400516c:	21365a04 	addi	r4,r4,-9880
 4005170:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4005174:	0005883a 	mov	r2,zero
 4005178:	00001406 	br	40051cc <_Z9Get_lightPtS_+0xd0>
    }
    *light0 = ChannelData0;
 400517c:	e0fffc8b 	ldhu	r3,-14(fp)
 4005180:	e0bffe17 	ldw	r2,-8(fp)
 4005184:	10c0000d 	sth	r3,0(r2)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
 4005188:	e0bffd04 	addi	r2,fp,-12
 400518c:	1009883a 	mov	r4,r2
 4005190:	40081840 	call	4008184 <_Z18Light_Get_ADCData1Pt>
 4005194:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
 4005198:	e0bffc03 	ldbu	r2,-16(fp)
 400519c:	1080005c 	xori	r2,r2,1
 40051a0:	10803fcc 	andi	r2,r2,255
 40051a4:	10000526 	beq	r2,zero,40051bc <_Z9Get_lightPtS_+0xc0>
    {
        printf("Get ADC Channle 1 data fail \n");
 40051a8:	01010234 	movhi	r4,1032
 40051ac:	21366204 	addi	r4,r4,-9848
 40051b0:	400ea840 	call	400ea84 <puts>
        return FALSE;
 40051b4:	0005883a 	mov	r2,zero
 40051b8:	00000406 	br	40051cc <_Z9Get_lightPtS_+0xd0>
    }
    *light1 = ChannelData1;
 40051bc:	e0fffd0b 	ldhu	r3,-12(fp)
 40051c0:	e0bfff17 	ldw	r2,-4(fp)
 40051c4:	10c0000d 	sth	r3,0(r2)
    return TRUE;
 40051c8:	00800044 	movi	r2,1
}
 40051cc:	e037883a 	mov	sp,fp
 40051d0:	dfc00117 	ldw	ra,4(sp)
 40051d4:	df000017 	ldw	fp,0(sp)
 40051d8:	dec00204 	addi	sp,sp,8
 40051dc:	f800283a 	ret

040051e0 <_Z11GUI_GSensorP9MTC2_INFO>:
extern gimp_image_struct h_Bar_Line;
extern gimp_image_struct v_Bar_Line;
extern gimp_image_struct ring;
extern gimp_image_struct dot;

void GUI_GSensor(MTC2_INFO *pTouch){
 40051e0:	deff7304 	addi	sp,sp,-564
 40051e4:	dfc08c15 	stw	ra,560(sp)
 40051e8:	df008b15 	stw	fp,556(sp)
 40051ec:	ddc08a15 	stw	r23,552(sp)
 40051f0:	dd808915 	stw	r22,548(sp)
 40051f4:	dd408815 	stw	r21,544(sp)
 40051f8:	dd008715 	stw	r20,540(sp)
 40051fc:	dcc08615 	stw	r19,536(sp)
 4005200:	dc808515 	stw	r18,532(sp)
 4005204:	dc408415 	stw	r17,528(sp)
 4005208:	dc008315 	stw	r16,524(sp)
 400520c:	df008b04 	addi	fp,sp,556
 4005210:	e13ff715 	stw	r4,-36(fp)
    VIP_FRAME_READER *pReader;
    int text_length;
   // void *pBackgroundBuffer; // use sram as buffer
    void *pBackgroundBuffer = (void *)FR_FRAME_BACKGROUND;  // use sdram as buffer
 4005214:	00810bf4 	movhi	r2,1071
 4005218:	10b80004 	addi	r2,r2,-8192
 400521c:	e0bf8015 	stw	r2,-512(fp)

    // mpu
    MPU9250 mpu(MPU_I2C_OPENCORES_BASE);
 4005220:	e0bf8904 	addi	r2,fp,-476
 4005224:	01803404 	movi	r6,208
 4005228:	01424034 	movhi	r5,2304
 400522c:	29482804 	addi	r5,r5,8352
 4005230:	1009883a 	mov	r4,r2
 4005234:	4005ae80 	call	4005ae8 <_ZN7MPU9250C1Emh>
    float ax, ay, az, gx, gy, gz, mx, my, mz;
    float x_angle, y_angle;
    const float x_offset_angle = 0.0, y_offset_angle = 0.0;
 4005238:	e03f8115 	stw	zero,-508(fp)
 400523c:	e03f8215 	stw	zero,-504(fp)
    const float to_radius = 180.0/M_PI;
 4005240:	00909974 	movhi	r2,16997
 4005244:	108bb844 	addi	r2,r2,12001
 4005248:	e0bf8315 	stw	r2,-500(fp)

    // light
    alt_u16 light0 = 0, light1 = 0;
 400524c:	e03fa70d 	sth	zero,-356(fp)
 4005250:	e03fa78d 	sth	zero,-354(fp)
    bool bPass = FALSE;
 4005254:	e03f8405 	stb	zero,-496(fp)
    char szText[128], szText2[128];

    int nX= 0, nY = 0;
 4005258:	e03f8515 	stw	zero,-492(fp)
 400525c:	e03f8615 	stw	zero,-488(fp)
    int center_x=400, center_y =400;
 4005260:	00806404 	movi	r2,400
 4005264:	e0bf7e15 	stw	r2,-520(fp)
 4005268:	00806404 	movi	r2,400
 400526c:	e0bf7f15 	stw	r2,-516(fp)

    ICON_LOCATION h_Bar = {0,0, 600, 325, 438-30 };
 4005270:	e03fe815 	stw	zero,-96(fp)
 4005274:	e03fe915 	stw	zero,-92(fp)
 4005278:	00809604 	movi	r2,600
 400527c:	e0bfea15 	stw	r2,-88(fp)
 4005280:	00805144 	movi	r2,325
 4005284:	e0bfeb15 	stw	r2,-84(fp)
 4005288:	00806604 	movi	r2,408
 400528c:	e0bfec15 	stw	r2,-80(fp)
    ICON_LOCATION v_Bar = {0, 0, 600, 40,  265-30};
 4005290:	e03fed15 	stw	zero,-76(fp)
 4005294:	e03fee15 	stw	zero,-72(fp)
 4005298:	00809604 	movi	r2,600
 400529c:	e0bfef15 	stw	r2,-68(fp)
 40052a0:	00800a04 	movi	r2,40
 40052a4:	e0bff015 	stw	r2,-64(fp)
 40052a8:	00803ac4 	movi	r2,235
 40052ac:	e0bff115 	stw	r2,-60(fp)
    ICON_LOCATION center_Ball = {0,0, 125, 289, 210-30};
 40052b0:	e03ff215 	stw	zero,-56(fp)
 40052b4:	e03ff315 	stw	zero,-52(fp)
 40052b8:	00801f44 	movi	r2,125
 40052bc:	e0bff415 	stw	r2,-48(fp)
 40052c0:	00804844 	movi	r2,289
 40052c4:	e0bff515 	stw	r2,-44(fp)
 40052c8:	00802d04 	movi	r2,180
 40052cc:	e0bff615 	stw	r2,-40(fp)

    // graphic


    printf("===== Welcome to G_sensor demo program =====\n");
 40052d0:	01010234 	movhi	r4,1032
 40052d4:	21366a04 	addi	r4,r4,-9816
 40052d8:	400ea840 	call	400ea84 <puts>
    
    // init light sensor i2c and power on
    Light_Init(LIGHT_I2C_OPENCORES_BASE);
 40052dc:	01024034 	movhi	r4,2304
 40052e0:	21082004 	addi	r4,r4,8320
 40052e4:	4007eec0 	call	4007eec <_Z10Light_Initm>
    Light_PowerSwitch(TRUE);
 40052e8:	01000044 	movi	r4,1
 40052ec:	400801c0 	call	400801c <_Z17Light_PowerSwitchb>


    // init frame reader
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
 40052f0:	00807804 	movi	r2,480
 40052f4:	d8800015 	stw	r2,0(sp)
 40052f8:	01c0c804 	movi	r7,800
 40052fc:	018185f4 	movhi	r6,1559
 4005300:	319c0004 	addi	r6,r6,28672
 4005304:	01418034 	movhi	r5,1536
 4005308:	01024034 	movhi	r4,2304
 400530c:	21080004 	addi	r4,r4,8192
 4005310:	4008f240 	call	4008f24 <_Z10VIPFR_InitmPvS_mm>
 4005314:	e0bf8715 	stw	r2,-484(fp)
    VIPFR_Go(pReader, TRUE);
 4005318:	01400044 	movi	r5,1
 400531c:	e13f8717 	ldw	r4,-484(fp)
 4005320:	400914c0 	call	400914c <_Z8VIPFR_GoP16VIP_FRAME_READERb>
    //}


    
   // draw desktop background
    InitBackGround(pReader);
 4005324:	e13f8717 	ldw	r4,-484(fp)
 4005328:	40050600 	call	4005060 <_Z14InitBackGroundP16VIP_FRAME_READER>
    VIPFR_ReadDrawFrame(pReader, pBackgroundBuffer); // save background
 400532c:	e17f8017 	ldw	r5,-512(fp)
 4005330:	e13f8717 	ldw	r4,-484(fp)
 4005334:	40094fc0 	call	40094fc <_Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv>
  //  VIPFR_ActiveDrawFrame(pReader);
    

   mpu.initialize();
 4005338:	e0bf8904 	addi	r2,fp,-476
 400533c:	01800044 	movi	r6,1
 4005340:	01400044 	movi	r5,1
 4005344:	1009883a 	mov	r4,r2
 4005348:	4005d5c0 	call	4005d5c <_ZN7MPU925010initializeEii>
   while(1){

  		////////////////////////////
  		// handle gsensor

	   mpu.getMotion9(&ax, &ay, &az, &gx, &gy, &gz, &mx, &my, &mz);
 400534c:	e1bfa004 	addi	r6,fp,-384
 4005350:	e17f9f04 	addi	r5,fp,-388
 4005354:	e13f9e04 	addi	r4,fp,-392
 4005358:	e0ff8904 	addi	r3,fp,-476
 400535c:	e0bfa604 	addi	r2,fp,-360
 4005360:	d8800515 	stw	r2,20(sp)
 4005364:	e0bfa504 	addi	r2,fp,-364
 4005368:	d8800415 	stw	r2,16(sp)
 400536c:	e0bfa404 	addi	r2,fp,-368
 4005370:	d8800315 	stw	r2,12(sp)
 4005374:	e0bfa304 	addi	r2,fp,-372
 4005378:	d8800215 	stw	r2,8(sp)
 400537c:	e0bfa204 	addi	r2,fp,-376
 4005380:	d8800115 	stw	r2,4(sp)
 4005384:	e0bfa104 	addi	r2,fp,-380
 4005388:	d8800015 	stw	r2,0(sp)
 400538c:	300f883a 	mov	r7,r6
 4005390:	280d883a 	mov	r6,r5
 4005394:	200b883a 	mov	r5,r4
 4005398:	1809883a 	mov	r4,r3
 400539c:	4006e240 	call	4006e24 <_ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_>

	   if (az != 0){
 40053a0:	e0bfa017 	ldw	r2,-384(fp)
 40053a4:	000b883a 	mov	r5,zero
 40053a8:	1009883a 	mov	r4,r2
 40053ac:	400aad80 	call	400aad8 <__eqsf2>
 40053b0:	10005f26 	beq	r2,zero,4005530 <_Z11GUI_GSensorP9MTC2_INFO+0x350>
		   x_angle = atan(ax/az)*to_radius - x_offset_angle;
 40053b4:	e0bf9e17 	ldw	r2,-392(fp)
 40053b8:	e0ffa017 	ldw	r3,-384(fp)
 40053bc:	180b883a 	mov	r5,r3
 40053c0:	1009883a 	mov	r4,r2
 40053c4:	400a6980 	call	400a698 <__divsf3>
 40053c8:	1007883a 	mov	r3,r2
 40053cc:	1805883a 	mov	r2,r3
 40053d0:	1009883a 	mov	r4,r2
 40053d4:	400db880 	call	400db88 <__extendsfdf2>
 40053d8:	100b883a 	mov	r5,r2
 40053dc:	180d883a 	mov	r6,r3
 40053e0:	2809883a 	mov	r4,r5
 40053e4:	300b883a 	mov	r5,r6
 40053e8:	400964c0 	call	400964c <atan>
 40053ec:	1021883a 	mov	r16,r2
 40053f0:	1823883a 	mov	r17,r3
 40053f4:	e13f8317 	ldw	r4,-500(fp)
 40053f8:	400db880 	call	400db88 <__extendsfdf2>
 40053fc:	1009883a 	mov	r4,r2
 4005400:	180b883a 	mov	r5,r3
 4005404:	200d883a 	mov	r6,r4
 4005408:	280f883a 	mov	r7,r5
 400540c:	8009883a 	mov	r4,r16
 4005410:	880b883a 	mov	r5,r17
 4005414:	400ca180 	call	400ca18 <__muldf3>
 4005418:	1009883a 	mov	r4,r2
 400541c:	180b883a 	mov	r5,r3
 4005420:	2021883a 	mov	r16,r4
 4005424:	2823883a 	mov	r17,r5
 4005428:	e13f8117 	ldw	r4,-508(fp)
 400542c:	400db880 	call	400db88 <__extendsfdf2>
 4005430:	1009883a 	mov	r4,r2
 4005434:	180b883a 	mov	r5,r3
 4005438:	200d883a 	mov	r6,r4
 400543c:	280f883a 	mov	r7,r5
 4005440:	8009883a 	mov	r4,r16
 4005444:	880b883a 	mov	r5,r17
 4005448:	400d1300 	call	400d130 <__subdf3>
 400544c:	1009883a 	mov	r4,r2
 4005450:	180b883a 	mov	r5,r3
 4005454:	2005883a 	mov	r2,r4
 4005458:	2807883a 	mov	r3,r5
 400545c:	1009883a 	mov	r4,r2
 4005460:	180b883a 	mov	r5,r3
 4005464:	400dc980 	call	400dc98 <__truncdfsf2>
 4005468:	1007883a 	mov	r3,r2
 400546c:	e0ff7c15 	stw	r3,-528(fp)
		   y_angle = y_offset_angle - atan(ay/az)*to_radius;
 4005470:	e13f8217 	ldw	r4,-504(fp)
 4005474:	400db880 	call	400db88 <__extendsfdf2>
 4005478:	1021883a 	mov	r16,r2
 400547c:	1823883a 	mov	r17,r3
 4005480:	e0bf9f17 	ldw	r2,-388(fp)
 4005484:	e0ffa017 	ldw	r3,-384(fp)
 4005488:	180b883a 	mov	r5,r3
 400548c:	1009883a 	mov	r4,r2
 4005490:	400a6980 	call	400a698 <__divsf3>
 4005494:	1007883a 	mov	r3,r2
 4005498:	1805883a 	mov	r2,r3
 400549c:	1009883a 	mov	r4,r2
 40054a0:	400db880 	call	400db88 <__extendsfdf2>
 40054a4:	100b883a 	mov	r5,r2
 40054a8:	180d883a 	mov	r6,r3
 40054ac:	2809883a 	mov	r4,r5
 40054b0:	300b883a 	mov	r5,r6
 40054b4:	400964c0 	call	400964c <atan>
 40054b8:	1025883a 	mov	r18,r2
 40054bc:	1827883a 	mov	r19,r3
 40054c0:	e13f8317 	ldw	r4,-500(fp)
 40054c4:	400db880 	call	400db88 <__extendsfdf2>
 40054c8:	1009883a 	mov	r4,r2
 40054cc:	180b883a 	mov	r5,r3
 40054d0:	200d883a 	mov	r6,r4
 40054d4:	280f883a 	mov	r7,r5
 40054d8:	9009883a 	mov	r4,r18
 40054dc:	980b883a 	mov	r5,r19
 40054e0:	400ca180 	call	400ca18 <__muldf3>
 40054e4:	1009883a 	mov	r4,r2
 40054e8:	180b883a 	mov	r5,r3
 40054ec:	2005883a 	mov	r2,r4
 40054f0:	2807883a 	mov	r3,r5
 40054f4:	100d883a 	mov	r6,r2
 40054f8:	180f883a 	mov	r7,r3
 40054fc:	8009883a 	mov	r4,r16
 4005500:	880b883a 	mov	r5,r17
 4005504:	400d1300 	call	400d130 <__subdf3>
 4005508:	1009883a 	mov	r4,r2
 400550c:	180b883a 	mov	r5,r3
 4005510:	2005883a 	mov	r2,r4
 4005514:	2807883a 	mov	r3,r5
 4005518:	1009883a 	mov	r4,r2
 400551c:	180b883a 	mov	r5,r3
 4005520:	400dc980 	call	400dc98 <__truncdfsf2>
 4005524:	1007883a 	mov	r3,r2
 4005528:	e0ff7d15 	stw	r3,-524(fp)
 400552c:	00000506 	br	4005544 <_Z11GUI_GSensorP9MTC2_INFO+0x364>
	   }else{
		   printf("-------------------- az is zero\r\n");
 4005530:	01010234 	movhi	r4,1032
 4005534:	21367604 	addi	r4,r4,-9768
 4005538:	400ea840 	call	400ea84 <puts>
		   x_angle = 0.0;
 400553c:	e03f7c15 	stw	zero,-528(fp)
		   y_angle = 0.0;
 4005540:	e03f7d15 	stw	zero,-524(fp)
	   }

       nX = (int)(x_angle * 140 /90);
 4005544:	0150c334 	movhi	r5,17164
 4005548:	e13f7c17 	ldw	r4,-528(fp)
 400554c:	400ab500 	call	400ab50 <__mulsf3>
 4005550:	1007883a 	mov	r3,r2
 4005554:	1805883a 	mov	r2,r3
 4005558:	0150ad34 	movhi	r5,17076
 400555c:	1009883a 	mov	r4,r2
 4005560:	400a6980 	call	400a698 <__divsf3>
 4005564:	1007883a 	mov	r3,r2
 4005568:	1805883a 	mov	r2,r3
 400556c:	1009883a 	mov	r4,r2
 4005570:	400b4300 	call	400b430 <__fixsfsi>
 4005574:	e0bf8515 	stw	r2,-492(fp)
       nY = (int)(y_angle * 140 /90);
 4005578:	0150c334 	movhi	r5,17164
 400557c:	e13f7d17 	ldw	r4,-524(fp)
 4005580:	400ab500 	call	400ab50 <__mulsf3>
 4005584:	1007883a 	mov	r3,r2
 4005588:	1805883a 	mov	r2,r3
 400558c:	0150ad34 	movhi	r5,17076
 4005590:	1009883a 	mov	r4,r2
 4005594:	400a6980 	call	400a698 <__divsf3>
 4005598:	1007883a 	mov	r3,r2
 400559c:	1805883a 	mov	r2,r3
 40055a0:	1009883a 	mov	r4,r2
 40055a4:	400b4300 	call	400b430 <__fixsfsi>
 40055a8:	e0bf8615 	stw	r2,-488(fp)

        // calculate ball location
        if(nX >= 0)
 40055ac:	e0bf8517 	ldw	r2,-492(fp)
 40055b0:	10000616 	blt	r2,zero,40055cc <_Z11GUI_GSensorP9MTC2_INFO+0x3ec>
            center_x = nX > R? R:nX;
 40055b4:	e0bf8517 	ldw	r2,-492(fp)
 40055b8:	10c011d0 	cmplti	r3,r2,71
 40055bc:	1800011e 	bne	r3,zero,40055c4 <_Z11GUI_GSensorP9MTC2_INFO+0x3e4>
 40055c0:	00801184 	movi	r2,70
 40055c4:	e0bf7e15 	stw	r2,-520(fp)
 40055c8:	00000506 	br	40055e0 <_Z11GUI_GSensorP9MTC2_INFO+0x400>
        else
            center_x = nX < R*(-1) ? R*(-1) : nX;
 40055cc:	e0bf8517 	ldw	r2,-492(fp)
 40055d0:	10ffee88 	cmpgei	r3,r2,-70
 40055d4:	1800011e 	bne	r3,zero,40055dc <_Z11GUI_GSensorP9MTC2_INFO+0x3fc>
 40055d8:	00bfee84 	movi	r2,-70
 40055dc:	e0bf7e15 	stw	r2,-520(fp)

        if(nY >= 0)
 40055e0:	e0bf8617 	ldw	r2,-488(fp)
 40055e4:	10000616 	blt	r2,zero,4005600 <_Z11GUI_GSensorP9MTC2_INFO+0x420>
            center_y = nY > R ? R : nY;
 40055e8:	e0bf8617 	ldw	r2,-488(fp)
 40055ec:	10c011d0 	cmplti	r3,r2,71
 40055f0:	1800011e 	bne	r3,zero,40055f8 <_Z11GUI_GSensorP9MTC2_INFO+0x418>
 40055f4:	00801184 	movi	r2,70
 40055f8:	e0bf7f15 	stw	r2,-516(fp)
 40055fc:	00000506 	br	4005614 <_Z11GUI_GSensorP9MTC2_INFO+0x434>
        else
            center_y = nY < R*(-1) ? R*(-1) : nY;
 4005600:	e0bf8617 	ldw	r2,-488(fp)
 4005604:	10ffee88 	cmpgei	r3,r2,-70
 4005608:	1800011e 	bne	r3,zero,4005610 <_Z11GUI_GSensorP9MTC2_INFO+0x430>
 400560c:	00bfee84 	movi	r2,-70
 4005610:	e0bf7f15 	stw	r2,-516(fp)

        printf("x_angle=%.3f, y_angle=%.3f, ax=%.3f, ay=%.3f, az=%.3f\r\n", x_angle, y_angle, ax, ay, az);
 4005614:	e13f7c17 	ldw	r4,-528(fp)
 4005618:	400db880 	call	400db88 <__extendsfdf2>
 400561c:	102d883a 	mov	r22,r2
 4005620:	182f883a 	mov	r23,r3
 4005624:	e13f7d17 	ldw	r4,-524(fp)
 4005628:	400db880 	call	400db88 <__extendsfdf2>
 400562c:	1029883a 	mov	r20,r2
 4005630:	182b883a 	mov	r21,r3
 4005634:	e0bf9e17 	ldw	r2,-392(fp)
 4005638:	1009883a 	mov	r4,r2
 400563c:	400db880 	call	400db88 <__extendsfdf2>
 4005640:	1021883a 	mov	r16,r2
 4005644:	1823883a 	mov	r17,r3
 4005648:	e0bf9f17 	ldw	r2,-388(fp)
 400564c:	1009883a 	mov	r4,r2
 4005650:	400db880 	call	400db88 <__extendsfdf2>
 4005654:	1025883a 	mov	r18,r2
 4005658:	1827883a 	mov	r19,r3
 400565c:	e0bfa017 	ldw	r2,-384(fp)
 4005660:	1009883a 	mov	r4,r2
 4005664:	400db880 	call	400db88 <__extendsfdf2>
 4005668:	1009883a 	mov	r4,r2
 400566c:	180b883a 	mov	r5,r3
 4005670:	d9000515 	stw	r4,20(sp)
 4005674:	d9400615 	stw	r5,24(sp)
 4005678:	dc800315 	stw	r18,12(sp)
 400567c:	dcc00415 	stw	r19,16(sp)
 4005680:	dc000115 	stw	r16,4(sp)
 4005684:	dc400215 	stw	r17,8(sp)
 4005688:	dd400015 	stw	r21,0(sp)
 400568c:	a00f883a 	mov	r7,r20
 4005690:	b00b883a 	mov	r5,r22
 4005694:	b80d883a 	mov	r6,r23
 4005698:	01010234 	movhi	r4,1032
 400569c:	21367f04 	addi	r4,r4,-9732
 40056a0:	400e9880 	call	400e988 <printf>

        // draw back ground
        VIPFR_WriteDrawFrame(pReader, pBackgroundBuffer); /// restore background
 40056a4:	e17f8017 	ldw	r5,-512(fp)
 40056a8:	e13f8717 	ldw	r4,-484(fp)
 40056ac:	40095500 	call	4009550 <_Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv>

        //draw ball water
        DrawTransparentImage(pReader, &ball_water, center_x+center_Ball.origin_x, center_Ball.origin_y-center_y, 0x0073c301);
 40056b0:	e0fff517 	ldw	r3,-44(fp)
 40056b4:	e0bf7e17 	ldw	r2,-520(fp)
 40056b8:	1889883a 	add	r4,r3,r2
 40056bc:	e0fff617 	ldw	r3,-40(fp)
 40056c0:	e0bf7f17 	ldw	r2,-516(fp)
 40056c4:	1887c83a 	sub	r3,r3,r2
 40056c8:	00801d34 	movhi	r2,116
 40056cc:	10b0c044 	addi	r2,r2,-15615
 40056d0:	d8800015 	stw	r2,0(sp)
 40056d4:	180f883a 	mov	r7,r3
 40056d8:	200d883a 	mov	r6,r4
 40056dc:	01410374 	movhi	r5,1037
 40056e0:	294c4404 	addi	r5,r5,12560
 40056e4:	e13f8717 	ldw	r4,-484(fp)
 40056e8:	4004f980 	call	4004f98 <_Z20DrawTransparentImageP16VIP_FRAME_READERP17gimp_image_structiij>
       
         //draw ring
        DrawTransparentImage(pReader, &ring, center_Ball.origin_x-13, center_Ball.origin_y-13, 0x0073c301);
 40056ec:	e0bff517 	ldw	r2,-44(fp)
 40056f0:	10fffcc4 	addi	r3,r2,-13
 40056f4:	e0bff617 	ldw	r2,-40(fp)
 40056f8:	113ffcc4 	addi	r4,r2,-13
 40056fc:	00801d34 	movhi	r2,116
 4005700:	10b0c044 	addi	r2,r2,-15615
 4005704:	d8800015 	stw	r2,0(sp)
 4005708:	200f883a 	mov	r7,r4
 400570c:	180d883a 	mov	r6,r3
 4005710:	014103f4 	movhi	r5,1039
 4005714:	29416d04 	addi	r5,r5,1460
 4005718:	e13f8717 	ldw	r4,-484(fp)
 400571c:	4004f980 	call	4004f98 <_Z20DrawTransparentImageP16VIP_FRAME_READERP17gimp_image_structiij>
        
        DrawImage(pReader, &v_bar_water, v_Bar.origin_x, v_Bar.origin_y-nY);
 4005720:	e13ff017 	ldw	r4,-64(fp)
 4005724:	e0fff117 	ldw	r3,-60(fp)
 4005728:	e0bf8617 	ldw	r2,-488(fp)
 400572c:	1885c83a 	sub	r2,r3,r2
 4005730:	100f883a 	mov	r7,r2
 4005734:	200d883a 	mov	r6,r4
 4005738:	014103f4 	movhi	r5,1039
 400573c:	29451004 	addi	r5,r5,5184
 4005740:	e13f8717 	ldw	r4,-484(fp)
 4005744:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &h_bar_water, nX+h_Bar.origin_x, h_Bar.origin_y);
 4005748:	e0ffeb17 	ldw	r3,-84(fp)
 400574c:	e0bf8517 	ldw	r2,-492(fp)
 4005750:	1885883a 	add	r2,r3,r2
 4005754:	e0ffec17 	ldw	r3,-80(fp)
 4005758:	180f883a 	mov	r7,r3
 400575c:	100d883a 	mov	r6,r2
 4005760:	014103f4 	movhi	r5,1039
 4005764:	2977e404 	addi	r5,r5,-8304
 4005768:	e13f8717 	ldw	r4,-484(fp)
 400576c:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>

        //draw Line
        DrawImage(pReader, &h_Bar_Line, h_Bar.origin_x-5, h_Bar.origin_y-2);
 4005770:	e0bfeb17 	ldw	r2,-84(fp)
 4005774:	10fffec4 	addi	r3,r2,-5
 4005778:	e0bfec17 	ldw	r2,-80(fp)
 400577c:	10bfff84 	addi	r2,r2,-2
 4005780:	100f883a 	mov	r7,r2
 4005784:	180d883a 	mov	r6,r3
 4005788:	014103f4 	movhi	r5,1039
 400578c:	29748f04 	addi	r5,r5,-11716
 4005790:	e13f8717 	ldw	r4,-484(fp)
 4005794:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &h_Bar_Line, h_Bar.origin_x+41, h_Bar.origin_y-2);
 4005798:	e0bfeb17 	ldw	r2,-84(fp)
 400579c:	10c00a44 	addi	r3,r2,41
 40057a0:	e0bfec17 	ldw	r2,-80(fp)
 40057a4:	10bfff84 	addi	r2,r2,-2
 40057a8:	100f883a 	mov	r7,r2
 40057ac:	180d883a 	mov	r6,r3
 40057b0:	014103f4 	movhi	r5,1039
 40057b4:	29748f04 	addi	r5,r5,-11716
 40057b8:	e13f8717 	ldw	r4,-484(fp)
 40057bc:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        
        DrawImage(pReader, &v_Bar_Line, v_Bar.origin_x-2, v_Bar.origin_y-6);
 40057c0:	e0bff017 	ldw	r2,-64(fp)
 40057c4:	10ffff84 	addi	r3,r2,-2
 40057c8:	e0bff117 	ldw	r2,-60(fp)
 40057cc:	10bffe84 	addi	r2,r2,-6
 40057d0:	100f883a 	mov	r7,r2
 40057d4:	180d883a 	mov	r6,r3
 40057d8:	014103f4 	movhi	r5,1039
 40057dc:	2941d804 	addi	r5,r5,1888
 40057e0:	e13f8717 	ldw	r4,-484(fp)
 40057e4:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        DrawImage(pReader, &v_Bar_Line, v_Bar.origin_x-2, v_Bar.origin_y+40);
 40057e8:	e0bff017 	ldw	r2,-64(fp)
 40057ec:	10ffff84 	addi	r3,r2,-2
 40057f0:	e0bff117 	ldw	r2,-60(fp)
 40057f4:	10800a04 	addi	r2,r2,40
 40057f8:	100f883a 	mov	r7,r2
 40057fc:	180d883a 	mov	r6,r3
 4005800:	014103f4 	movhi	r5,1039
 4005804:	2941d804 	addi	r5,r5,1888
 4005808:	e13f8717 	ldw	r4,-484(fp)
 400580c:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>

        //display x angle
        sprintf(szText, "%d", (int)(x_angle));
 4005810:	e13f7c17 	ldw	r4,-528(fp)
 4005814:	400b4300 	call	400b430 <__fixsfsi>
 4005818:	1007883a 	mov	r3,r2
 400581c:	e0bfa804 	addi	r2,fp,-352
 4005820:	180d883a 	mov	r6,r3
 4005824:	01410234 	movhi	r5,1032
 4005828:	29768d04 	addi	r5,r5,-9676
 400582c:	1009883a 	mov	r4,r2
 4005830:	400eb440 	call	400eb44 <sprintf>
        vid_print_string_alpha(480, 380-30, COLOR_BLACK,COLOR_WHITE, tahomabold_32, pReader, szText);
 4005834:	e0bfa804 	addi	r2,fp,-352
 4005838:	d8800215 	stw	r2,8(sp)
 400583c:	e0bf8717 	ldw	r2,-484(fp)
 4005840:	d8800115 	stw	r2,4(sp)
 4005844:	00810234 	movhi	r2,1032
 4005848:	1098aa04 	addi	r2,r2,25256
 400584c:	d8800015 	stw	r2,0(sp)
 4005850:	01c04034 	movhi	r7,256
 4005854:	39ffffc4 	addi	r7,r7,-1
 4005858:	000d883a 	mov	r6,zero
 400585c:	01405784 	movi	r5,350
 4005860:	01007804 	movi	r4,480
 4005864:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        text_length = vid_string_pixel_length_alpha(tahomabold_32, szText);
 4005868:	e0bfa804 	addi	r2,fp,-352
 400586c:	100b883a 	mov	r5,r2
 4005870:	01010234 	movhi	r4,1032
 4005874:	2118aa04 	addi	r4,r4,25256
 4005878:	40045340 	call	4004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>
 400587c:	e0bf8815 	stw	r2,-480(fp)
        DrawImage(pReader, &dot, 480+text_length, 390-30);
 4005880:	e0bf8817 	ldw	r2,-480(fp)
 4005884:	10807804 	addi	r2,r2,480
 4005888:	01c05a04 	movi	r7,360
 400588c:	100d883a 	mov	r6,r2
 4005890:	014103f4 	movhi	r5,1039
 4005894:	29741e04 	addi	r5,r5,-12168
 4005898:	e13f8717 	ldw	r4,-484(fp)
 400589c:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>
        
        //display y angle
        sprintf(szText, "%d", (int)(y_angle));
 40058a0:	e13f7d17 	ldw	r4,-524(fp)
 40058a4:	400b4300 	call	400b430 <__fixsfsi>
 40058a8:	1007883a 	mov	r3,r2
 40058ac:	e0bfa804 	addi	r2,fp,-352
 40058b0:	180d883a 	mov	r6,r3
 40058b4:	01410234 	movhi	r5,1032
 40058b8:	29768d04 	addi	r5,r5,-9676
 40058bc:	1009883a 	mov	r4,r2
 40058c0:	400eb440 	call	400eb44 <sprintf>
        vid_print_string_alpha(90, 100-30, COLOR_BLACK,COLOR_WHITE, tahomabold_32, pReader, szText);
 40058c4:	e0bfa804 	addi	r2,fp,-352
 40058c8:	d8800215 	stw	r2,8(sp)
 40058cc:	e0bf8717 	ldw	r2,-484(fp)
 40058d0:	d8800115 	stw	r2,4(sp)
 40058d4:	00810234 	movhi	r2,1032
 40058d8:	1098aa04 	addi	r2,r2,25256
 40058dc:	d8800015 	stw	r2,0(sp)
 40058e0:	01c04034 	movhi	r7,256
 40058e4:	39ffffc4 	addi	r7,r7,-1
 40058e8:	000d883a 	mov	r6,zero
 40058ec:	01401184 	movi	r5,70
 40058f0:	01001684 	movi	r4,90
 40058f4:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        text_length = vid_string_pixel_length_alpha(tahomabold_32, szText);
 40058f8:	e0bfa804 	addi	r2,fp,-352
 40058fc:	100b883a 	mov	r5,r2
 4005900:	01010234 	movhi	r4,1032
 4005904:	2118aa04 	addi	r4,r4,25256
 4005908:	40045340 	call	4004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>
 400590c:	e0bf8815 	stw	r2,-480(fp)
        DrawImage(pReader, &dot, 90+text_length, 110-30);
 4005910:	e0bf8817 	ldw	r2,-480(fp)
 4005914:	10801684 	addi	r2,r2,90
 4005918:	01c01404 	movi	r7,80
 400591c:	100d883a 	mov	r6,r2
 4005920:	014103f4 	movhi	r5,1039
 4005924:	29741e04 	addi	r5,r5,-12168
 4005928:	e13f8717 	ldw	r4,-484(fp)
 400592c:	4004d180 	call	4004d18 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>


   		////////////////////////////
   		// handle light sensor
        
        sprintf(szText, "%d", 0);
 4005930:	e0bfa804 	addi	r2,fp,-352
 4005934:	000d883a 	mov	r6,zero
 4005938:	01410234 	movhi	r5,1032
 400593c:	29768d04 	addi	r5,r5,-9676
 4005940:	1009883a 	mov	r4,r2
 4005944:	400eb440 	call	400eb44 <sprintf>
        sprintf(szText2, "%d", 0);
 4005948:	e0bfc804 	addi	r2,fp,-224
 400594c:	000d883a 	mov	r6,zero
 4005950:	01410234 	movhi	r5,1032
 4005954:	29768d04 	addi	r5,r5,-9676
 4005958:	1009883a 	mov	r4,r2
 400595c:	400eb440 	call	400eb44 <sprintf>
        bPass = Get_light(&light0,&light1);
 4005960:	e0ffa784 	addi	r3,fp,-354
 4005964:	e0bfa704 	addi	r2,fp,-356
 4005968:	180b883a 	mov	r5,r3
 400596c:	1009883a 	mov	r4,r2
 4005970:	40050fc0 	call	40050fc <_Z9Get_lightPtS_>
 4005974:	e0bf8405 	stb	r2,-496(fp)
        if(bPass)
 4005978:	e0bf8403 	ldbu	r2,-496(fp)
 400597c:	10001926 	beq	r2,zero,40059e4 <_Z11GUI_GSensorP9MTC2_INFO+0x804>
        {
            sprintf(szText,  "%d", light0);
 4005980:	e0bfa70b 	ldhu	r2,-356(fp)
 4005984:	10ffffcc 	andi	r3,r2,65535
 4005988:	e0bfa804 	addi	r2,fp,-352
 400598c:	180d883a 	mov	r6,r3
 4005990:	01410234 	movhi	r5,1032
 4005994:	29768d04 	addi	r5,r5,-9676
 4005998:	1009883a 	mov	r4,r2
 400599c:	400eb440 	call	400eb44 <sprintf>
            sprintf(szText2, "%d", light1);
 40059a0:	e0bfa78b 	ldhu	r2,-354(fp)
 40059a4:	10ffffcc 	andi	r3,r2,65535
 40059a8:	e0bfc804 	addi	r2,fp,-224
 40059ac:	180d883a 	mov	r6,r3
 40059b0:	01410234 	movhi	r5,1032
 40059b4:	29768d04 	addi	r5,r5,-9676
 40059b8:	1009883a 	mov	r4,r2
 40059bc:	400eb440 	call	400eb44 <sprintf>
            printf("light0=%d, light1=%d\r\n", light0, light1);
 40059c0:	e0bfa70b 	ldhu	r2,-356(fp)
 40059c4:	10bfffcc 	andi	r2,r2,65535
 40059c8:	e0ffa78b 	ldhu	r3,-354(fp)
 40059cc:	18ffffcc 	andi	r3,r3,65535
 40059d0:	180d883a 	mov	r6,r3
 40059d4:	100b883a 	mov	r5,r2
 40059d8:	01010234 	movhi	r4,1032
 40059dc:	21368e04 	addi	r4,r4,-9672
 40059e0:	400e9880 	call	400e988 <printf>
        }else{
        	//printf("light sensor i2c fail.....................\r\n");
        	//break;
        }
        vid_print_string_alpha(630, 55, COLOR_WHITE,-1, tahomabold_32, pReader, szText);
 40059e4:	e0bfa804 	addi	r2,fp,-352
 40059e8:	d8800215 	stw	r2,8(sp)
 40059ec:	e0bf8717 	ldw	r2,-484(fp)
 40059f0:	d8800115 	stw	r2,4(sp)
 40059f4:	00810234 	movhi	r2,1032
 40059f8:	1098aa04 	addi	r2,r2,25256
 40059fc:	d8800015 	stw	r2,0(sp)
 4005a00:	01ffffc4 	movi	r7,-1
 4005a04:	01804034 	movhi	r6,256
 4005a08:	31bfffc4 	addi	r6,r6,-1
 4005a0c:	01400dc4 	movi	r5,55
 4005a10:	01009d84 	movi	r4,630
 4005a14:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        vid_print_string_alpha(630, 115, COLOR_WHITE,-1, tahomabold_32, pReader, szText2);
 4005a18:	e0bfc804 	addi	r2,fp,-224
 4005a1c:	d8800215 	stw	r2,8(sp)
 4005a20:	e0bf8717 	ldw	r2,-484(fp)
 4005a24:	d8800115 	stw	r2,4(sp)
 4005a28:	00810234 	movhi	r2,1032
 4005a2c:	1098aa04 	addi	r2,r2,25256
 4005a30:	d8800015 	stw	r2,0(sp)
 4005a34:	01ffffc4 	movi	r7,-1
 4005a38:	01804034 	movhi	r6,256
 4005a3c:	31bfffc4 	addi	r6,r6,-1
 4005a40:	01401cc4 	movi	r5,115
 4005a44:	01009d84 	movi	r4,630
 4005a48:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        

        // update gui now
        VIPFR_ActiveDrawFrame(pReader);
 4005a4c:	e13f8717 	ldw	r4,-484(fp)
 4005a50:	40091e00 	call	40091e0 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>
  //  VIPFR_ActiveDrawFrame(pReader);
    

   mpu.initialize();

   while(1){
 4005a54:	003e3d06 	br	400534c <__alt_mem_epcs_flash_controller_0+0xfb00434c>

04005a58 <main>:
#include "gui_gsensor.h"
#include "system.h"
#include "system.h"

int main()
{
 4005a58:	defffd04 	addi	sp,sp,-12
 4005a5c:	dfc00215 	stw	ra,8(sp)
 4005a60:	df000115 	stw	fp,4(sp)
 4005a64:	df000104 	addi	fp,sp,4

    // touch
    MTC2_INFO *pTouch;

    IOWR(LED_BASE, 0x00, 0xFF); // high-active
 4005a68:	00c03fc4 	movi	r3,255
 4005a6c:	00820034 	movhi	r2,2048
 4005a70:	10801004 	addi	r2,r2,64
 4005a74:	10c00035 	stwio	r3,0(r2)
    printf("Terasic G-Sensor Demo\r\n");
 4005a78:	01010234 	movhi	r4,1032
 4005a7c:	2113fc04 	addi	r4,r4,20464
 4005a80:	400ea840 	call	400ea84 <puts>

    // init touch
    pTouch=MTC2_Init(TOUCH_I2C_OPENCORES_BASE,TOUCH_INT_N_BASE,TOUCH_INT_N_IRQ, TOUCH_INT_N_IRQ_INTERRUPT_CONTROLLER_ID);
 4005a84:	000f883a 	mov	r7,zero
 4005a88:	01800244 	movi	r6,9
 4005a8c:	01424034 	movhi	r5,2304
 4005a90:	29484004 	addi	r5,r5,8448
 4005a94:	01024034 	movhi	r4,2304
 4005a98:	21083004 	addi	r4,r4,8384
 4005a9c:	40089500 	call	4008950 <_Z9MTC2_Initmmmm>
 4005aa0:	e0bfff15 	stw	r2,-4(fp)

    if (!pTouch){
 4005aa4:	e0bfff17 	ldw	r2,-4(fp)
 4005aa8:	1000041e 	bne	r2,zero,4005abc <main+0x64>
        printf("Failed to init multi-touch\r\n");
 4005aac:	01010234 	movhi	r4,1032
 4005ab0:	21140204 	addi	r4,r4,20488
 4005ab4:	400ea840 	call	400ea84 <puts>
 4005ab8:	00000306 	br	4005ac8 <main+0x70>
    }else{
        printf("Init touch successfully\r\n");
 4005abc:	01010234 	movhi	r4,1032
 4005ac0:	21140904 	addi	r4,r4,20516
 4005ac4:	400ea840 	call	400ea84 <puts>

    }
    GUI_GSensor(pTouch);
 4005ac8:	e13fff17 	ldw	r4,-4(fp)
 4005acc:	40051e00 	call	40051e0 <_Z11GUI_GSensorP9MTC2_INFO>
  return 0;
 4005ad0:	0005883a 	mov	r2,zero
}
 4005ad4:	e037883a 	mov	sp,fp
 4005ad8:	dfc00117 	ldw	ra,4(sp)
 4005adc:	df000017 	ldw	fp,0(sp)
 4005ae0:	dec00204 	addi	sp,sp,8
 4005ae4:	f800283a 	ret

04005ae8 <_ZN7MPU9250C1Emh>:

#define G_SI 9.80665
#define PI  3.14159
//-----------------------------------------------------------------------------------------------

MPU9250::MPU9250(uint32_t ControllerAddr, uint8_t DeviceAddr):
 4005ae8:	defff904 	addi	sp,sp,-28
 4005aec:	dfc00615 	stw	ra,24(sp)
 4005af0:	df000515 	stw	fp,20(sp)
 4005af4:	df000504 	addi	fp,sp,20
 4005af8:	e13ffd15 	stw	r4,-12(fp)
 4005afc:	e17ffe15 	stw	r5,-8(fp)
 4005b00:	3005883a 	mov	r2,r6
 4005b04:	e0bfff05 	stb	r2,-4(fp)
m_ControllerAddr(ControllerAddr),
devAddr(DeviceAddr)
 4005b08:	e0bffd17 	ldw	r2,-12(fp)
 4005b0c:	e0fffe17 	ldw	r3,-8(fp)
 4005b10:	10c01315 	stw	r3,76(r2)
 4005b14:	e0bffd17 	ldw	r2,-12(fp)
 4005b18:	e0ffff03 	ldbu	r3,-4(fp)
 4005b1c:	10c01405 	stb	r3,80(r2)
{
	const int ref_clk = 50*1000*1000; // 50Mhz
 4005b20:	0080bef4 	movhi	r2,763
 4005b24:	10bc2004 	addi	r2,r2,-3968
 4005b28:	e0bffb15 	stw	r2,-20(fp)
	const int i2c_clk = 100*1000; // 100KHz
 4005b2c:	008000b4 	movhi	r2,2
 4005b30:	10a1a804 	addi	r2,r2,-31072
 4005b34:	e0bffc15 	stw	r2,-16(fp)
	oc_i2c_init_ex(m_ControllerAddr, ref_clk, i2c_clk);
 4005b38:	e0bffd17 	ldw	r2,-12(fp)
 4005b3c:	10801317 	ldw	r2,76(r2)
 4005b40:	018000b4 	movhi	r6,2
 4005b44:	31a1a804 	addi	r6,r6,-31072
 4005b48:	0140bef4 	movhi	r5,763
 4005b4c:	297c2004 	addi	r5,r5,-3968
 4005b50:	1009883a 	mov	r4,r2
 4005b54:	40070ac0 	call	40070ac <_Z14oc_i2c_init_exlll>
}
 4005b58:	0001883a 	nop
 4005b5c:	e037883a 	mov	sp,fp
 4005b60:	dfc00117 	ldw	ra,4(sp)
 4005b64:	df000017 	ldw	fp,0(sp)
 4005b68:	dec00204 	addi	sp,sp,8
 4005b6c:	f800283a 	ret

04005b70 <_ZN7MPU92508WriteRegEhh>:
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
 4005b70:	defffa04 	addi	sp,sp,-24
 4005b74:	dfc00515 	stw	ra,20(sp)
 4005b78:	df000415 	stw	fp,16(sp)
 4005b7c:	df000404 	addi	fp,sp,16
 4005b80:	e13ffd15 	stw	r4,-12(fp)
 4005b84:	2807883a 	mov	r3,r5
 4005b88:	3005883a 	mov	r2,r6
 4005b8c:	e0fffe05 	stb	r3,-8(fp)
 4005b90:	e0bfff05 	stb	r2,-4(fp)
#if 1
	if (WriteAddr & READ_FLAG)
 4005b94:	e0bffe03 	ldbu	r2,-8(fp)
 4005b98:	10803fcc 	andi	r2,r2,255
 4005b9c:	1080201c 	xori	r2,r2,128
 4005ba0:	10bfe004 	addi	r2,r2,-128
 4005ba4:	1000080e 	bge	r2,zero,4005bc8 <_ZN7MPU92508WriteRegEhh+0x58>
		return ReadReg(WriteAddr, WriteData);
 4005ba8:	e0bffe03 	ldbu	r2,-8(fp)
 4005bac:	e0ffff03 	ldbu	r3,-4(fp)
 4005bb0:	18c03fcc 	andi	r3,r3,255
 4005bb4:	180d883a 	mov	r6,r3
 4005bb8:	100b883a 	mov	r5,r2
 4005bbc:	e13ffd17 	ldw	r4,-12(fp)
 4005bc0:	4005c1c0 	call	4005c1c <_ZN7MPU92507ReadRegEhh>
 4005bc4:	00001006 	br	4005c08 <_ZN7MPU92508WriteRegEhh+0x98>
	OC_I2C_Write(m_ControllerAddr,devAddr, WriteAddr, &WriteData, sizeof(WriteData));
 4005bc8:	e0bffd17 	ldw	r2,-12(fp)
 4005bcc:	10801317 	ldw	r2,76(r2)
 4005bd0:	1011883a 	mov	r8,r2
 4005bd4:	e0bffd17 	ldw	r2,-12(fp)
 4005bd8:	10801403 	ldbu	r2,80(r2)
 4005bdc:	10c03fcc 	andi	r3,r2,255
 4005be0:	e13ffe03 	ldbu	r4,-8(fp)
 4005be4:	00800044 	movi	r2,1
 4005be8:	e17fff04 	addi	r5,fp,-4
 4005bec:	d8800015 	stw	r2,0(sp)
 4005bf0:	280f883a 	mov	r7,r5
 4005bf4:	200d883a 	mov	r6,r4
 4005bf8:	180b883a 	mov	r5,r3
 4005bfc:	4009883a 	mov	r4,r8
 4005c00:	40073ac0 	call	40073ac <_Z12OC_I2C_WritelhhPhi>
	return 0x00;
 4005c04:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
 4005c08:	e037883a 	mov	sp,fp
 4005c0c:	dfc00117 	ldw	ra,4(sp)
 4005c10:	df000017 	ldw	fp,0(sp)
 4005c14:	dec00204 	addi	sp,sp,8
 4005c18:	f800283a 	ret

04005c1c <_ZN7MPU92507ReadRegEhh>:

//-----------------------------------------------------------------------------------------------

unsigned int  MPU9250::ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
 4005c1c:	defff904 	addi	sp,sp,-28
 4005c20:	dfc00615 	stw	ra,24(sp)
 4005c24:	df000515 	stw	fp,20(sp)
 4005c28:	df000504 	addi	fp,sp,20
 4005c2c:	e13ffd15 	stw	r4,-12(fp)
 4005c30:	2807883a 	mov	r3,r5
 4005c34:	3005883a 	mov	r2,r6
 4005c38:	e0fffe05 	stb	r3,-8(fp)
 4005c3c:	e0bfff05 	stb	r2,-4(fp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(m_ControllerAddr,devAddr,WriteAddr, &ReadData, sizeof(ReadData));
 4005c40:	e0bffd17 	ldw	r2,-12(fp)
 4005c44:	10801317 	ldw	r2,76(r2)
 4005c48:	1011883a 	mov	r8,r2
 4005c4c:	e0bffd17 	ldw	r2,-12(fp)
 4005c50:	10801403 	ldbu	r2,80(r2)
 4005c54:	10c03fcc 	andi	r3,r2,255
 4005c58:	e13ffe03 	ldbu	r4,-8(fp)
 4005c5c:	00800044 	movi	r2,1
 4005c60:	d8800015 	stw	r2,0(sp)
 4005c64:	e1fffc04 	addi	r7,fp,-16
 4005c68:	200d883a 	mov	r6,r4
 4005c6c:	180b883a 	mov	r5,r3
 4005c70:	4009883a 	mov	r4,r8
 4005c74:	400765c0 	call	400765c <_Z11OC_I2C_ReadlhhPhi>
	return ReadData;
 4005c78:	e0bffc03 	ldbu	r2,-16(fp)
 4005c7c:	10803fcc 	andi	r2,r2,255
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
 4005c80:	e037883a 	mov	sp,fp
 4005c84:	dfc00117 	ldw	ra,4(sp)
 4005c88:	df000017 	ldw	fp,0(sp)
 4005c8c:	dec00204 	addi	sp,sp,8
 4005c90:	f800283a 	ret

04005c94 <_ZN7MPU92508ReadRegsEhPhj>:

//-----------------------------------------------------------------------------------------------

void MPU9250::ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 4005c94:	defff904 	addi	sp,sp,-28
 4005c98:	dfc00615 	stw	ra,24(sp)
 4005c9c:	df000515 	stw	fp,20(sp)
 4005ca0:	df000504 	addi	fp,sp,20
 4005ca4:	e13ffc15 	stw	r4,-16(fp)
 4005ca8:	2805883a 	mov	r2,r5
 4005cac:	e1bffe15 	stw	r6,-8(fp)
 4005cb0:	e1ffff15 	stw	r7,-4(fp)
 4005cb4:	e0bffd05 	stb	r2,-12(fp)
#if 1
	OC_I2C_Read(m_ControllerAddr,devAddr,ReadAddr, ReadBuf, Bytes);
 4005cb8:	e0bffc17 	ldw	r2,-16(fp)
 4005cbc:	10801317 	ldw	r2,76(r2)
 4005cc0:	1011883a 	mov	r8,r2
 4005cc4:	e0bffc17 	ldw	r2,-16(fp)
 4005cc8:	10801403 	ldbu	r2,80(r2)
 4005ccc:	10c03fcc 	andi	r3,r2,255
 4005cd0:	e13ffd03 	ldbu	r4,-12(fp)
 4005cd4:	e0bfff17 	ldw	r2,-4(fp)
 4005cd8:	d8800015 	stw	r2,0(sp)
 4005cdc:	e1fffe17 	ldw	r7,-8(fp)
 4005ce0:	200d883a 	mov	r6,r4
 4005ce4:	180b883a 	mov	r5,r3
 4005ce8:	4009883a 	mov	r4,r8
 4005cec:	400765c0 	call	400765c <_Z11OC_I2C_ReadlhhPhi>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
 4005cf0:	0001883a 	nop
 4005cf4:	e037883a 	mov	sp,fp
 4005cf8:	dfc00117 	ldw	ra,4(sp)
 4005cfc:	df000017 	ldw	fp,0(sp)
 4005d00:	dec00204 	addi	sp,sp,8
 4005d04:	f800283a 	ret

04005d08 <_ZN7MPU925014testConnectionEv>:
usage: call this function to know if SPI and MPU9250 are working correctly.
returns true if mpu9250 answers
-----------------------------------------------------------------------------------------------*/

bool MPU9250::testConnection()
{
 4005d08:	defffc04 	addi	sp,sp,-16
 4005d0c:	dfc00315 	stw	ra,12(sp)
 4005d10:	df000215 	stw	fp,8(sp)
 4005d14:	df000204 	addi	fp,sp,8
 4005d18:	e13fff15 	stw	r4,-4(fp)
    unsigned int response;
    response=WriteReg(MPUREG_WHOAMI|READ_FLAG, 0x00);
 4005d1c:	000d883a 	mov	r6,zero
 4005d20:	01403d44 	movi	r5,245
 4005d24:	e13fff17 	ldw	r4,-4(fp)
 4005d28:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 4005d2c:	e0bffe15 	stw	r2,-8(fp)

    if (response == 0x71)
 4005d30:	e0bffe17 	ldw	r2,-8(fp)
 4005d34:	10801c58 	cmpnei	r2,r2,113
 4005d38:	1000021e 	bne	r2,zero,4005d44 <_ZN7MPU925014testConnectionEv+0x3c>
        return true;
 4005d3c:	00800044 	movi	r2,1
 4005d40:	00000106 	br	4005d48 <_ZN7MPU925014testConnectionEv+0x40>
    else
        return false;
 4005d44:	0005883a 	mov	r2,zero
}
 4005d48:	e037883a 	mov	sp,fp
 4005d4c:	dfc00117 	ldw	ra,4(sp)
 4005d50:	df000017 	ldw	fp,0(sp)
 4005d54:	dec00204 	addi	sp,sp,8
 4005d58:	f800283a 	ret

04005d5c <_ZN7MPU925010initializeEii>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250::initialize(int sample_rate_div, int low_pass_filter)
{
 4005d5c:	defff204 	addi	sp,sp,-56
 4005d60:	dfc00d15 	stw	ra,52(sp)
 4005d64:	df000c15 	stw	fp,48(sp)
 4005d68:	df000c04 	addi	fp,sp,48
 4005d6c:	e13ffd15 	stw	r4,-12(fp)
 4005d70:	e17ffe15 	stw	r5,-8(fp)
 4005d74:	e1bfff15 	stw	r6,-4(fp)
    uint8_t i = 0;
 4005d78:	e03ff405 	stb	zero,-48(fp)

        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte

    };
 4005d7c:	e0bff444 	addi	r2,fp,-47
 4005d80:	00c00804 	movi	r3,32
 4005d84:	180d883a 	mov	r6,r3
 4005d88:	000b883a 	mov	r5,zero
 4005d8c:	1009883a 	mov	r4,r2
 4005d90:	400e8300 	call	400e830 <memset>
 4005d94:	00800044 	movi	r2,1
 4005d98:	e0bff445 	stb	r2,-47(fp)
 4005d9c:	00801ac4 	movi	r2,107
 4005da0:	e0bff485 	stb	r2,-46(fp)
 4005da4:	00801b04 	movi	r2,108
 4005da8:	e0bff505 	stb	r2,-44(fp)
 4005dac:	00800684 	movi	r2,26
 4005db0:	e0bff585 	stb	r2,-42(fp)
 4005db4:	00800604 	movi	r2,24
 4005db8:	e0bff5c5 	stb	r2,-41(fp)
 4005dbc:	008006c4 	movi	r2,27
 4005dc0:	e0bff605 	stb	r2,-40(fp)
 4005dc4:	00800204 	movi	r2,8
 4005dc8:	e0bff645 	stb	r2,-39(fp)
 4005dcc:	00800704 	movi	r2,28
 4005dd0:	e0bff685 	stb	r2,-38(fp)
 4005dd4:	00800244 	movi	r2,9
 4005dd8:	e0bff6c5 	stb	r2,-37(fp)
 4005ddc:	00800744 	movi	r2,29
 4005de0:	e0bff705 	stb	r2,-36(fp)
 4005de4:	00800c04 	movi	r2,48
 4005de8:	e0bff745 	stb	r2,-35(fp)
 4005dec:	00800dc4 	movi	r2,55
 4005df0:	e0bff785 	stb	r2,-34(fp)
 4005df4:	00800804 	movi	r2,32
 4005df8:	e0bff7c5 	stb	r2,-33(fp)
 4005dfc:	00801a84 	movi	r2,106
 4005e00:	e0bff805 	stb	r2,-32(fp)
 4005e04:	00800344 	movi	r2,13
 4005e08:	e0bff845 	stb	r2,-31(fp)
 4005e0c:	00800904 	movi	r2,36
 4005e10:	e0bff885 	stb	r2,-30(fp)
 4005e14:	00800304 	movi	r2,12
 4005e18:	e0bff8c5 	stb	r2,-29(fp)
 4005e1c:	00800944 	movi	r2,37
 4005e20:	e0bff905 	stb	r2,-28(fp)
 4005e24:	008002c4 	movi	r2,11
 4005e28:	e0bff945 	stb	r2,-27(fp)
 4005e2c:	00800984 	movi	r2,38
 4005e30:	e0bff985 	stb	r2,-26(fp)
 4005e34:	00800044 	movi	r2,1
 4005e38:	e0bff9c5 	stb	r2,-25(fp)
 4005e3c:	008018c4 	movi	r2,99
 4005e40:	e0bffa05 	stb	r2,-24(fp)
 4005e44:	00bfe044 	movi	r2,-127
 4005e48:	e0bffa45 	stb	r2,-23(fp)
 4005e4c:	008009c4 	movi	r2,39
 4005e50:	e0bffa85 	stb	r2,-22(fp)
 4005e54:	00800284 	movi	r2,10
 4005e58:	e0bffac5 	stb	r2,-21(fp)
 4005e5c:	00800984 	movi	r2,38
 4005e60:	e0bffb05 	stb	r2,-20(fp)
 4005e64:	00800484 	movi	r2,18
 4005e68:	e0bffb45 	stb	r2,-19(fp)
 4005e6c:	008018c4 	movi	r2,99
 4005e70:	e0bffb85 	stb	r2,-18(fp)
 4005e74:	00bfe044 	movi	r2,-127
 4005e78:	e0bffbc5 	stb	r2,-17(fp)
 4005e7c:	008009c4 	movi	r2,39
 4005e80:	e0bffc05 	stb	r2,-16(fp)
 4005e84:	e0bfff17 	ldw	r2,-4(fp)
 4005e88:	e0bff545 	stb	r2,-43(fp)
    //spi.format(8,0);
    //spi.frequency(1000000);

    for(i=0; i<MPU_InitRegNum; i++) {
 4005e8c:	e03ff405 	stb	zero,-48(fp)
 4005e90:	e0bff403 	ldbu	r2,-48(fp)
 4005e94:	10800428 	cmpgeui	r2,r2,16
 4005e98:	1000191e 	bne	r2,zero,4005f00 <_ZN7MPU925010initializeEii+0x1a4>
        WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 4005e9c:	e0bff403 	ldbu	r2,-48(fp)
 4005ea0:	1085883a 	add	r2,r2,r2
 4005ea4:	e0fff404 	addi	r3,fp,-48
 4005ea8:	1885883a 	add	r2,r3,r2
 4005eac:	10800084 	addi	r2,r2,2
 4005eb0:	10800003 	ldbu	r2,0(r2)
 4005eb4:	10c03fcc 	andi	r3,r2,255
 4005eb8:	e0bff403 	ldbu	r2,-48(fp)
 4005ebc:	1085883a 	add	r2,r2,r2
 4005ec0:	e13ff404 	addi	r4,fp,-48
 4005ec4:	2085883a 	add	r2,r4,r2
 4005ec8:	10800044 	addi	r2,r2,1
 4005ecc:	10800003 	ldbu	r2,0(r2)
 4005ed0:	10803fcc 	andi	r2,r2,255
 4005ed4:	100d883a 	mov	r6,r2
 4005ed8:	180b883a 	mov	r5,r3
 4005edc:	e13ffd17 	ldw	r4,-12(fp)
 4005ee0:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
        usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
 4005ee4:	010000b4 	movhi	r4,2
 4005ee8:	2121a804 	addi	r4,r4,-31072
 4005eec:	401c3840 	call	401c384 <usleep>

    };
    //spi.format(8,0);
    //spi.frequency(1000000);

    for(i=0; i<MPU_InitRegNum; i++) {
 4005ef0:	e0bff403 	ldbu	r2,-48(fp)
 4005ef4:	10800044 	addi	r2,r2,1
 4005ef8:	e0bff405 	stb	r2,-48(fp)
 4005efc:	003fe406 	br	4005e90 <__alt_mem_epcs_flash_controller_0+0xfb004e90>
        WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
        usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
    }

    set_acc_scale(BITS_FS_16G);
 4005f00:	01400604 	movi	r5,24
 4005f04:	e13ffd17 	ldw	r4,-12(fp)
 4005f08:	4005f380 	call	4005f38 <_ZN7MPU925013set_acc_scaleEi>
    set_gyro_scale(BITS_FS_2000DPS);
 4005f0c:	01400604 	movi	r5,24
 4005f10:	e13ffd17 	ldw	r4,-12(fp)
 4005f14:	40060640 	call	4006064 <_ZN7MPU925014set_gyro_scaleEi>

    calib_mag();
 4005f18:	e13ffd17 	ldw	r4,-12(fp)
 4005f1c:	40067200 	call	4006720 <_ZN7MPU92509calib_magEv>
    return 0;
 4005f20:	0005883a 	mov	r2,zero
}
 4005f24:	e037883a 	mov	sp,fp
 4005f28:	dfc00117 	ldw	ra,4(sp)
 4005f2c:	df000017 	ldw	fp,0(sp)
 4005f30:	dec00204 	addi	sp,sp,8
 4005f34:	f800283a 	ret

04005f38 <_ZN7MPU925013set_acc_scaleEi>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::set_acc_scale(int scale)
{
 4005f38:	defffb04 	addi	sp,sp,-20
 4005f3c:	dfc00415 	stw	ra,16(sp)
 4005f40:	df000315 	stw	fp,12(sp)
 4005f44:	df000304 	addi	fp,sp,12
 4005f48:	e13ffe15 	stw	r4,-8(fp)
 4005f4c:	e17fff15 	stw	r5,-4(fp)
    unsigned int temp_scale;
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
 4005f50:	e0bfff17 	ldw	r2,-4(fp)
 4005f54:	10803fcc 	andi	r2,r2,255
 4005f58:	100d883a 	mov	r6,r2
 4005f5c:	01400704 	movi	r5,28
 4005f60:	e13ffe17 	ldw	r4,-8(fp)
 4005f64:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>

    switch (scale){
 4005f68:	e0bfff17 	ldw	r2,-4(fp)
 4005f6c:	10c00220 	cmpeqi	r3,r2,8
 4005f70:	18000d1e 	bne	r3,zero,4005fa8 <_ZN7MPU925013set_acc_scaleEi+0x70>
 4005f74:	10c00248 	cmpgei	r3,r2,9
 4005f78:	1800021e 	bne	r3,zero,4005f84 <_ZN7MPU925013set_acc_scaleEi+0x4c>
 4005f7c:	10000626 	beq	r2,zero,4005f98 <_ZN7MPU925013set_acc_scaleEi+0x60>
 4005f80:	00001506 	br	4005fd8 <_ZN7MPU925013set_acc_scaleEi+0xa0>
 4005f84:	10c00420 	cmpeqi	r3,r2,16
 4005f88:	18000b1e 	bne	r3,zero,4005fb8 <_ZN7MPU925013set_acc_scaleEi+0x80>
 4005f8c:	10800620 	cmpeqi	r2,r2,24
 4005f90:	10000d1e 	bne	r2,zero,4005fc8 <_ZN7MPU925013set_acc_scaleEi+0x90>
 4005f94:	00001006 	br	4005fd8 <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_2G:
            acc_divider=16384;
 4005f98:	e0bffe17 	ldw	r2,-8(fp)
 4005f9c:	00d1a034 	movhi	r3,18048
 4005fa0:	10c00015 	stw	r3,0(r2)
        break;
 4005fa4:	00000c06 	br	4005fd8 <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_4G:
            acc_divider=8192;
 4005fa8:	e0bffe17 	ldw	r2,-8(fp)
 4005fac:	00d18034 	movhi	r3,17920
 4005fb0:	10c00015 	stw	r3,0(r2)
        break;
 4005fb4:	00000806 	br	4005fd8 <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_8G:
            acc_divider=4096;
 4005fb8:	e0bffe17 	ldw	r2,-8(fp)
 4005fbc:	00d16034 	movhi	r3,17792
 4005fc0:	10c00015 	stw	r3,0(r2)
        break;
 4005fc4:	00000406 	br	4005fd8 <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_16G:
            acc_divider=2048;
 4005fc8:	e0bffe17 	ldw	r2,-8(fp)
 4005fcc:	00d14034 	movhi	r3,17664
 4005fd0:	10c00015 	stw	r3,0(r2)
        break;
 4005fd4:	0001883a 	nop
    }
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 4005fd8:	000d883a 	mov	r6,zero
 4005fdc:	01402704 	movi	r5,156
 4005fe0:	e13ffe17 	ldw	r4,-8(fp)
 4005fe4:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 4005fe8:	e0bffd15 	stw	r2,-12(fp)

    switch (temp_scale){
 4005fec:	e0bffd17 	ldw	r2,-12(fp)
 4005ff0:	10c00220 	cmpeqi	r3,r2,8
 4005ff4:	18000c1e 	bne	r3,zero,4006028 <_ZN7MPU925013set_acc_scaleEi+0xf0>
 4005ff8:	10c00268 	cmpgeui	r3,r2,9
 4005ffc:	1800021e 	bne	r3,zero,4006008 <_ZN7MPU925013set_acc_scaleEi+0xd0>
 4006000:	10000626 	beq	r2,zero,400601c <_ZN7MPU925013set_acc_scaleEi+0xe4>
 4006004:	00001106 	br	400604c <_ZN7MPU925013set_acc_scaleEi+0x114>
 4006008:	10c00420 	cmpeqi	r3,r2,16
 400600c:	1800091e 	bne	r3,zero,4006034 <_ZN7MPU925013set_acc_scaleEi+0xfc>
 4006010:	10800620 	cmpeqi	r2,r2,24
 4006014:	10000a1e 	bne	r2,zero,4006040 <_ZN7MPU925013set_acc_scaleEi+0x108>
 4006018:	00000c06 	br	400604c <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_2G:
            temp_scale=2;
 400601c:	00800084 	movi	r2,2
 4006020:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006024:	00000906 	br	400604c <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_4G:
            temp_scale=4;
 4006028:	00800104 	movi	r2,4
 400602c:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006030:	00000606 	br	400604c <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_8G:
            temp_scale=8;
 4006034:	00800204 	movi	r2,8
 4006038:	e0bffd15 	stw	r2,-12(fp)
        break;
 400603c:	00000306 	br	400604c <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_16G:
            temp_scale=16;
 4006040:	00800404 	movi	r2,16
 4006044:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006048:	0001883a 	nop
    }
    return temp_scale;
 400604c:	e0bffd17 	ldw	r2,-12(fp)
}
 4006050:	e037883a 	mov	sp,fp
 4006054:	dfc00117 	ldw	ra,4(sp)
 4006058:	df000017 	ldw	fp,0(sp)
 400605c:	dec00204 	addi	sp,sp,8
 4006060:	f800283a 	ret

04006064 <_ZN7MPU925014set_gyro_scaleEi>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::set_gyro_scale(int scale)
{
 4006064:	defffb04 	addi	sp,sp,-20
 4006068:	dfc00415 	stw	ra,16(sp)
 400606c:	df000315 	stw	fp,12(sp)
 4006070:	df000304 	addi	fp,sp,12
 4006074:	e13ffe15 	stw	r4,-8(fp)
 4006078:	e17fff15 	stw	r5,-4(fp)
    unsigned int temp_scale;
    WriteReg(MPUREG_GYRO_CONFIG, scale);
 400607c:	e0bfff17 	ldw	r2,-4(fp)
 4006080:	10803fcc 	andi	r2,r2,255
 4006084:	100d883a 	mov	r6,r2
 4006088:	014006c4 	movi	r5,27
 400608c:	e13ffe17 	ldw	r4,-8(fp)
 4006090:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    switch (scale){
 4006094:	e0bfff17 	ldw	r2,-4(fp)
 4006098:	10c00220 	cmpeqi	r3,r2,8
 400609c:	18000d1e 	bne	r3,zero,40060d4 <_ZN7MPU925014set_gyro_scaleEi+0x70>
 40060a0:	10c00248 	cmpgei	r3,r2,9
 40060a4:	1800021e 	bne	r3,zero,40060b0 <_ZN7MPU925014set_gyro_scaleEi+0x4c>
 40060a8:	10000626 	beq	r2,zero,40060c4 <_ZN7MPU925014set_gyro_scaleEi+0x60>
 40060ac:	00001706 	br	400610c <_ZN7MPU925014set_gyro_scaleEi+0xa8>
 40060b0:	10c00420 	cmpeqi	r3,r2,16
 40060b4:	18000b1e 	bne	r3,zero,40060e4 <_ZN7MPU925014set_gyro_scaleEi+0x80>
 40060b8:	10800620 	cmpeqi	r2,r2,24
 40060bc:	10000e1e 	bne	r2,zero,40060f8 <_ZN7MPU925014set_gyro_scaleEi+0x94>
 40060c0:	00001206 	br	400610c <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_250DPS:
            gyro_divider=131;
 40060c4:	e0bffe17 	ldw	r2,-8(fp)
 40060c8:	00d0c0f4 	movhi	r3,17155
 40060cc:	10c00115 	stw	r3,4(r2)
        break;
 40060d0:	00000e06 	br	400610c <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
 40060d4:	e0bffe17 	ldw	r2,-8(fp)
 40060d8:	00d0a0f4 	movhi	r3,17027
 40060dc:	10c00115 	stw	r3,4(r2)
        break;
 40060e0:	00000a06 	br	400610c <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
 40060e4:	e0fffe17 	ldw	r3,-8(fp)
 40060e8:	009080f4 	movhi	r2,16899
 40060ec:	108cccc4 	addi	r2,r2,13107
 40060f0:	18800115 	stw	r2,4(r3)
        break;
 40060f4:	00000506 	br	400610c <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
 40060f8:	e0fffe17 	ldw	r3,-8(fp)
 40060fc:	009060f4 	movhi	r2,16771
 4006100:	108cccc4 	addi	r2,r2,13107
 4006104:	18800115 	stw	r2,4(r3)
        break;
 4006108:	0001883a 	nop
    }
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
 400610c:	000d883a 	mov	r6,zero
 4006110:	014026c4 	movi	r5,155
 4006114:	e13ffe17 	ldw	r4,-8(fp)
 4006118:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 400611c:	e0bffd15 	stw	r2,-12(fp)
    switch (temp_scale){
 4006120:	e0bffd17 	ldw	r2,-12(fp)
 4006124:	10c00220 	cmpeqi	r3,r2,8
 4006128:	18000c1e 	bne	r3,zero,400615c <_ZN7MPU925014set_gyro_scaleEi+0xf8>
 400612c:	10c00268 	cmpgeui	r3,r2,9
 4006130:	1800021e 	bne	r3,zero,400613c <_ZN7MPU925014set_gyro_scaleEi+0xd8>
 4006134:	10000626 	beq	r2,zero,4006150 <_ZN7MPU925014set_gyro_scaleEi+0xec>
 4006138:	00001106 	br	4006180 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
 400613c:	10c00420 	cmpeqi	r3,r2,16
 4006140:	1800091e 	bne	r3,zero,4006168 <_ZN7MPU925014set_gyro_scaleEi+0x104>
 4006144:	10800620 	cmpeqi	r2,r2,24
 4006148:	10000a1e 	bne	r2,zero,4006174 <_ZN7MPU925014set_gyro_scaleEi+0x110>
 400614c:	00000c06 	br	4006180 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_250DPS:
            temp_scale=250;
 4006150:	00803e84 	movi	r2,250
 4006154:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006158:	00000906 	br	4006180 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_500DPS:
            temp_scale=500;
 400615c:	00807d04 	movi	r2,500
 4006160:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006164:	00000606 	br	4006180 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_1000DPS:
            temp_scale=1000;
 4006168:	0080fa04 	movi	r2,1000
 400616c:	e0bffd15 	stw	r2,-12(fp)
        break;
 4006170:	00000306 	br	4006180 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_2000DPS:
            temp_scale=2000;
 4006174:	0081f404 	movi	r2,2000
 4006178:	e0bffd15 	stw	r2,-12(fp)
        break;
 400617c:	0001883a 	nop
    }
    return temp_scale;
 4006180:	e0bffd17 	ldw	r2,-12(fp)
}
 4006184:	e037883a 	mov	sp,fp
 4006188:	dfc00117 	ldw	ra,4(sp)
 400618c:	df000017 	ldw	fp,0(sp)
 4006190:	dec00204 	addi	sp,sp,8
 4006194:	f800283a 	ret

04006198 <_ZN7MPU92506whoamiEv>:
mpu9250 which should be 104 when in SPI mode.
returns the I2C address (104)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::whoami()
{
 4006198:	defffc04 	addi	sp,sp,-16
 400619c:	dfc00315 	stw	ra,12(sp)
 40061a0:	df000215 	stw	fp,8(sp)
 40061a4:	df000204 	addi	fp,sp,8
 40061a8:	e13fff15 	stw	r4,-4(fp)
    unsigned int response;
    response=WriteReg(MPUREG_WHOAMI|READ_FLAG, 0x00);
 40061ac:	000d883a 	mov	r6,zero
 40061b0:	01403d44 	movi	r5,245
 40061b4:	e13fff17 	ldw	r4,-4(fp)
 40061b8:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 40061bc:	e0bffe15 	stw	r2,-8(fp)
    return response;
 40061c0:	e0bffe17 	ldw	r2,-8(fp)
}
 40061c4:	e037883a 	mov	sp,fp
 40061c8:	dfc00117 	ldw	ra,4(sp)
 40061cc:	df000017 	ldw	fp,0(sp)
 40061d0:	dec00204 	addi	sp,sp,8
 40061d4:	f800283a 	ret

040061d8 <_ZN7MPU92508read_accEv>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_acc()
{
 40061d8:	defff604 	addi	sp,sp,-40
 40061dc:	dfc00915 	stw	ra,36(sp)
 40061e0:	df000815 	stw	fp,32(sp)
 40061e4:	dc400715 	stw	r17,28(sp)
 40061e8:	dc000615 	stw	r16,24(sp)
 40061ec:	df000804 	addi	fp,sp,32
 40061f0:	e13ffd15 	stw	r4,-12(fp)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
 40061f4:	e0bffb04 	addi	r2,fp,-20
 40061f8:	01c00184 	movi	r7,6
 40061fc:	100d883a 	mov	r6,r2
 4006200:	01400ec4 	movi	r5,59
 4006204:	e13ffd17 	ldw	r4,-12(fp)
 4006208:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>
    for(i=0; i<3; i++) {
 400620c:	e03ff815 	stw	zero,-32(fp)
 4006210:	e0bff817 	ldw	r2,-32(fp)
 4006214:	108000c8 	cmpgei	r2,r2,3
 4006218:	1000441e 	bne	r2,zero,400632c <_ZN7MPU92508read_accEv+0x154>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 400621c:	e0bff817 	ldw	r2,-32(fp)
 4006220:	1085883a 	add	r2,r2,r2
 4006224:	1007883a 	mov	r3,r2
 4006228:	e0bffb04 	addi	r2,fp,-20
 400622c:	10c5883a 	add	r2,r2,r3
 4006230:	10800003 	ldbu	r2,0(r2)
 4006234:	10803fcc 	andi	r2,r2,255
 4006238:	1004923a 	slli	r2,r2,8
 400623c:	1009883a 	mov	r4,r2
 4006240:	e0bff817 	ldw	r2,-32(fp)
 4006244:	1085883a 	add	r2,r2,r2
 4006248:	10800044 	addi	r2,r2,1
 400624c:	e0fffb04 	addi	r3,fp,-20
 4006250:	1885883a 	add	r2,r3,r2
 4006254:	10800003 	ldbu	r2,0(r2)
 4006258:	10803fcc 	andi	r2,r2,255
 400625c:	2084b03a 	or	r2,r4,r2
 4006260:	e0bff90d 	sth	r2,-28(fp)
        data = (float)bit_data;
 4006264:	e0bff90f 	ldh	r2,-28(fp)
 4006268:	1009883a 	mov	r4,r2
 400626c:	400b4a00 	call	400b4a0 <__floatsisf>
 4006270:	1007883a 	mov	r3,r2
 4006274:	e0fffa15 	stw	r3,-24(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
 4006278:	e13ffa17 	ldw	r4,-24(fp)
 400627c:	400db880 	call	400db88 <__extendsfdf2>
 4006280:	1011883a 	mov	r8,r2
 4006284:	1813883a 	mov	r9,r3
 4006288:	018ea4f4 	movhi	r6,14995
 400628c:	31a8c144 	addi	r6,r6,-23803
 4006290:	01d00934 	movhi	r7,16420
 4006294:	39e74044 	addi	r7,r7,-25343
 4006298:	4009883a 	mov	r4,r8
 400629c:	480b883a 	mov	r5,r9
 40062a0:	400ca180 	call	400ca18 <__muldf3>
 40062a4:	1009883a 	mov	r4,r2
 40062a8:	180b883a 	mov	r5,r3
 40062ac:	2021883a 	mov	r16,r4
 40062b0:	2823883a 	mov	r17,r5
 40062b4:	e0bffd17 	ldw	r2,-12(fp)
 40062b8:	10c00017 	ldw	r3,0(r2)
 40062bc:	1809883a 	mov	r4,r3
 40062c0:	400db880 	call	400db88 <__extendsfdf2>
 40062c4:	1009883a 	mov	r4,r2
 40062c8:	180b883a 	mov	r5,r3
 40062cc:	200d883a 	mov	r6,r4
 40062d0:	280f883a 	mov	r7,r5
 40062d4:	8009883a 	mov	r4,r16
 40062d8:	880b883a 	mov	r5,r17
 40062dc:	400bf600 	call	400bf60 <__divdf3>
 40062e0:	1009883a 	mov	r4,r2
 40062e4:	180b883a 	mov	r5,r3
 40062e8:	2005883a 	mov	r2,r4
 40062ec:	2807883a 	mov	r3,r5
 40062f0:	1009883a 	mov	r4,r2
 40062f4:	180b883a 	mov	r5,r3
 40062f8:	400dc980 	call	400dc98 <__truncdfsf2>
 40062fc:	1009883a 	mov	r4,r2
 4006300:	e0fffd17 	ldw	r3,-12(fp)
 4006304:	e0bff817 	ldw	r2,-32(fp)
 4006308:	10800244 	addi	r2,r2,9
 400630c:	1085883a 	add	r2,r2,r2
 4006310:	1085883a 	add	r2,r2,r2
 4006314:	1885883a 	add	r2,r3,r2
 4006318:	11000015 	stw	r4,0(r2)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
 400631c:	e0bff817 	ldw	r2,-32(fp)
 4006320:	10800044 	addi	r2,r2,1
 4006324:	e0bff815 	stw	r2,-32(fp)
 4006328:	003fb906 	br	4006210 <__alt_mem_epcs_flash_controller_0+0xfb005210>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }

}
 400632c:	0001883a 	nop
 4006330:	e6fffe04 	addi	sp,fp,-8
 4006334:	dfc00317 	ldw	ra,12(sp)
 4006338:	df000217 	ldw	fp,8(sp)
 400633c:	dc400117 	ldw	r17,4(sp)
 4006340:	dc000017 	ldw	r16,0(sp)
 4006344:	dec00404 	addi	sp,sp,16
 4006348:	f800283a 	ret

0400634c <_ZN7MPU92509read_gyroEv>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_gyro()
{
 400634c:	defff604 	addi	sp,sp,-40
 4006350:	dfc00915 	stw	ra,36(sp)
 4006354:	df000815 	stw	fp,32(sp)
 4006358:	dc400715 	stw	r17,28(sp)
 400635c:	dc000615 	stw	r16,24(sp)
 4006360:	df000804 	addi	fp,sp,32
 4006364:	e13ffd15 	stw	r4,-12(fp)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
 4006368:	e0bffb04 	addi	r2,fp,-20
 400636c:	01c00184 	movi	r7,6
 4006370:	100d883a 	mov	r6,r2
 4006374:	014010c4 	movi	r5,67
 4006378:	e13ffd17 	ldw	r4,-12(fp)
 400637c:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>
    for(i=0; i<3; i++) {
 4006380:	e03ff815 	stw	zero,-32(fp)
 4006384:	e0bff817 	ldw	r2,-32(fp)
 4006388:	108000c8 	cmpgei	r2,r2,3
 400638c:	1000441e 	bne	r2,zero,40064a0 <_ZN7MPU92509read_gyroEv+0x154>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4006390:	e0bff817 	ldw	r2,-32(fp)
 4006394:	1085883a 	add	r2,r2,r2
 4006398:	1007883a 	mov	r3,r2
 400639c:	e0bffb04 	addi	r2,fp,-20
 40063a0:	10c5883a 	add	r2,r2,r3
 40063a4:	10800003 	ldbu	r2,0(r2)
 40063a8:	10803fcc 	andi	r2,r2,255
 40063ac:	1004923a 	slli	r2,r2,8
 40063b0:	1009883a 	mov	r4,r2
 40063b4:	e0bff817 	ldw	r2,-32(fp)
 40063b8:	1085883a 	add	r2,r2,r2
 40063bc:	10800044 	addi	r2,r2,1
 40063c0:	e0fffb04 	addi	r3,fp,-20
 40063c4:	1885883a 	add	r2,r3,r2
 40063c8:	10800003 	ldbu	r2,0(r2)
 40063cc:	10803fcc 	andi	r2,r2,255
 40063d0:	2084b03a 	or	r2,r4,r2
 40063d4:	e0bff90d 	sth	r2,-28(fp)
        data = (float)bit_data;
 40063d8:	e0bff90f 	ldh	r2,-28(fp)
 40063dc:	1009883a 	mov	r4,r2
 40063e0:	400b4a00 	call	400b4a0 <__floatsisf>
 40063e4:	1007883a 	mov	r3,r2
 40063e8:	e0fffa15 	stw	r3,-24(fp)
        gyroscope_data[i] = (PI / 180) * data / gyro_divider;
 40063ec:	e13ffa17 	ldw	r4,-24(fp)
 40063f0:	400db880 	call	400db88 <__extendsfdf2>
 40063f4:	1011883a 	mov	r8,r2
 40063f8:	1813883a 	mov	r9,r3
 40063fc:	01a943b4 	movhi	r6,42254
 4006400:	31b89c04 	addi	r6,r6,-7568
 4006404:	01cfe4b4 	movhi	r7,16274
 4006408:	39f7d144 	addi	r7,r7,-8379
 400640c:	4009883a 	mov	r4,r8
 4006410:	480b883a 	mov	r5,r9
 4006414:	400ca180 	call	400ca18 <__muldf3>
 4006418:	1009883a 	mov	r4,r2
 400641c:	180b883a 	mov	r5,r3
 4006420:	2021883a 	mov	r16,r4
 4006424:	2823883a 	mov	r17,r5
 4006428:	e0bffd17 	ldw	r2,-12(fp)
 400642c:	10c00117 	ldw	r3,4(r2)
 4006430:	1809883a 	mov	r4,r3
 4006434:	400db880 	call	400db88 <__extendsfdf2>
 4006438:	1009883a 	mov	r4,r2
 400643c:	180b883a 	mov	r5,r3
 4006440:	200d883a 	mov	r6,r4
 4006444:	280f883a 	mov	r7,r5
 4006448:	8009883a 	mov	r4,r16
 400644c:	880b883a 	mov	r5,r17
 4006450:	400bf600 	call	400bf60 <__divdf3>
 4006454:	1009883a 	mov	r4,r2
 4006458:	180b883a 	mov	r5,r3
 400645c:	2005883a 	mov	r2,r4
 4006460:	2807883a 	mov	r3,r5
 4006464:	1009883a 	mov	r4,r2
 4006468:	180b883a 	mov	r5,r3
 400646c:	400dc980 	call	400dc98 <__truncdfsf2>
 4006470:	1009883a 	mov	r4,r2
 4006474:	e0fffd17 	ldw	r3,-12(fp)
 4006478:	e0bff817 	ldw	r2,-32(fp)
 400647c:	10800304 	addi	r2,r2,12
 4006480:	1085883a 	add	r2,r2,r2
 4006484:	1085883a 	add	r2,r2,r2
 4006488:	1885883a 	add	r2,r3,r2
 400648c:	11000015 	stw	r4,0(r2)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
 4006490:	e0bff817 	ldw	r2,-32(fp)
 4006494:	10800044 	addi	r2,r2,1
 4006498:	e0bff815 	stw	r2,-32(fp)
 400649c:	003fb906 	br	4006384 <__alt_mem_epcs_flash_controller_0+0xfb005384>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i] = (PI / 180) * data / gyro_divider;
    }

}
 40064a0:	0001883a 	nop
 40064a4:	e6fffe04 	addi	sp,fp,-8
 40064a8:	dfc00317 	ldw	ra,12(sp)
 40064ac:	df000217 	ldw	fp,8(sp)
 40064b0:	dc400117 	ldw	r17,4(sp)
 40064b4:	dc000017 	ldw	r16,0(sp)
 40064b8:	dec00404 	addi	sp,sp,16
 40064bc:	f800283a 	ret

040064c0 <_ZN7MPU92509read_tempEv>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_temp()
{
 40064c0:	defffa04 	addi	sp,sp,-24
 40064c4:	dfc00515 	stw	ra,20(sp)
 40064c8:	df000415 	stw	fp,16(sp)
 40064cc:	df000404 	addi	fp,sp,16
 40064d0:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[2];
    int16_t bit_data;
    float data;
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);
 40064d4:	e0bffe04 	addi	r2,fp,-8
 40064d8:	01c00084 	movi	r7,2
 40064dc:	100d883a 	mov	r6,r2
 40064e0:	01401044 	movi	r5,65
 40064e4:	e13fff17 	ldw	r4,-4(fp)
 40064e8:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>

    bit_data=((int16_t)response[0]<<8)|response[1];
 40064ec:	e0bffe03 	ldbu	r2,-8(fp)
 40064f0:	10803fcc 	andi	r2,r2,255
 40064f4:	1004923a 	slli	r2,r2,8
 40064f8:	1007883a 	mov	r3,r2
 40064fc:	e0bffe43 	ldbu	r2,-7(fp)
 4006500:	10803fcc 	andi	r2,r2,255
 4006504:	1884b03a 	or	r2,r3,r2
 4006508:	e0bffc0d 	sth	r2,-16(fp)
    data=(float)bit_data;
 400650c:	e0bffc0f 	ldh	r2,-16(fp)
 4006510:	1009883a 	mov	r4,r2
 4006514:	400b4a00 	call	400b4a0 <__floatsisf>
 4006518:	1007883a 	mov	r3,r2
 400651c:	e0fffd15 	stw	r3,-12(fp)
    temperature=(data/340)+36.53;
 4006520:	0150eab4 	movhi	r5,17322
 4006524:	e13ffd17 	ldw	r4,-12(fp)
 4006528:	400a6980 	call	400a698 <__divsf3>
 400652c:	1007883a 	mov	r3,r2
 4006530:	1805883a 	mov	r2,r3
 4006534:	1009883a 	mov	r4,r2
 4006538:	400db880 	call	400db88 <__extendsfdf2>
 400653c:	1011883a 	mov	r8,r2
 4006540:	1813883a 	mov	r9,r3
 4006544:	01828f74 	movhi	r6,2621
 4006548:	319c2904 	addi	r6,r6,28836
 400654c:	01d010b4 	movhi	r7,16450
 4006550:	39d0f5c4 	addi	r7,r7,17367
 4006554:	4009883a 	mov	r4,r8
 4006558:	480b883a 	mov	r5,r9
 400655c:	400b6b40 	call	400b6b4 <__adddf3>
 4006560:	1009883a 	mov	r4,r2
 4006564:	180b883a 	mov	r5,r3
 4006568:	2005883a 	mov	r2,r4
 400656c:	2807883a 	mov	r3,r5
 4006570:	1009883a 	mov	r4,r2
 4006574:	180b883a 	mov	r5,r3
 4006578:	400dc980 	call	400dc98 <__truncdfsf2>
 400657c:	1007883a 	mov	r3,r2
 4006580:	e0bfff17 	ldw	r2,-4(fp)
 4006584:	10c00815 	stw	r3,32(r2)
}
 4006588:	0001883a 	nop
 400658c:	e037883a 	mov	sp,fp
 4006590:	dfc00117 	ldw	ra,4(sp)
 4006594:	df000017 	ldw	fp,0(sp)
 4006598:	dec00204 	addi	sp,sp,8
 400659c:	f800283a 	ret

040065a0 <_ZN7MPU92509calib_accEv>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void MPU9250::calib_acc()
{
 40065a0:	defffb04 	addi	sp,sp,-20
 40065a4:	dfc00415 	stw	ra,16(sp)
 40065a8:	df000315 	stw	fp,12(sp)
 40065ac:	df000304 	addi	fp,sp,12
 40065b0:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 40065b4:	000d883a 	mov	r6,zero
 40065b8:	01402704 	movi	r5,156
 40065bc:	e13fff17 	ldw	r4,-4(fp)
 40065c0:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 40065c4:	e0bffd15 	stw	r2,-12(fp)
    set_acc_scale(BITS_FS_8G);
 40065c8:	01400404 	movi	r5,16
 40065cc:	e13fff17 	ldw	r4,-4(fp)
 40065d0:	4005f380 	call	4005f38 <_ZN7MPU925013set_acc_scaleEi>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

    ReadRegs(MPUREG_SELF_TEST_X,response,4);
 40065d4:	e0bffe04 	addi	r2,fp,-8
 40065d8:	01c00104 	movi	r7,4
 40065dc:	100d883a 	mov	r6,r2
 40065e0:	01400344 	movi	r5,13
 40065e4:	e13fff17 	ldw	r4,-4(fp)
 40065e8:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
 40065ec:	e0bffe03 	ldbu	r2,-8(fp)
 40065f0:	10c03fcc 	andi	r3,r2,255
 40065f4:	00802a74 	movhi	r2,169
 40065f8:	1097d804 	addi	r2,r2,24416
 40065fc:	1884703a 	and	r2,r3,r2
 4006600:	1007d0fa 	srai	r3,r2,3
 4006604:	e0bffec3 	ldbu	r2,-5(fp)
 4006608:	10803fcc 	andi	r2,r2,255
 400660c:	10a4000c 	andi	r2,r2,36864
 4006610:	1005d13a 	srai	r2,r2,4
 4006614:	1886b03a 	or	r3,r3,r2
 4006618:	e0bfff17 	ldw	r2,-4(fp)
 400661c:	10c00215 	stw	r3,8(r2)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
 4006620:	e0bffe43 	ldbu	r2,-7(fp)
 4006624:	10c03fcc 	andi	r3,r2,255
 4006628:	00802a74 	movhi	r2,169
 400662c:	1097d804 	addi	r2,r2,24416
 4006630:	1884703a 	and	r2,r3,r2
 4006634:	1007d0fa 	srai	r3,r2,3
 4006638:	e0bffec3 	ldbu	r2,-5(fp)
 400663c:	10803fcc 	andi	r2,r2,255
 4006640:	1080900c 	andi	r2,r2,576
 4006644:	1005d0ba 	srai	r2,r2,2
 4006648:	1886b03a 	or	r3,r3,r2
 400664c:	e0bfff17 	ldw	r2,-4(fp)
 4006650:	10c00315 	stw	r3,12(r2)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
 4006654:	e0bffe83 	ldbu	r2,-6(fp)
 4006658:	10c03fcc 	andi	r3,r2,255
 400665c:	00802a74 	movhi	r2,169
 4006660:	1097d804 	addi	r2,r2,24416
 4006664:	1884703a 	and	r2,r3,r2
 4006668:	1007d0fa 	srai	r3,r2,3
 400666c:	e0bffec3 	ldbu	r2,-5(fp)
 4006670:	10803fcc 	andi	r2,r2,255
 4006674:	1080024c 	andi	r2,r2,9
 4006678:	1886b03a 	or	r3,r3,r2
 400667c:	e0bfff17 	ldw	r2,-4(fp)
 4006680:	10c00415 	stw	r3,16(r2)

    set_acc_scale(temp_scale);
 4006684:	e17ffd17 	ldw	r5,-12(fp)
 4006688:	e13fff17 	ldw	r4,-4(fp)
 400668c:	4005f380 	call	4005f38 <_ZN7MPU925013set_acc_scaleEi>
}
 4006690:	0001883a 	nop
 4006694:	e037883a 	mov	sp,fp
 4006698:	dfc00117 	ldw	ra,4(sp)
 400669c:	df000017 	ldw	fp,0(sp)
 40066a0:	dec00204 	addi	sp,sp,8
 40066a4:	f800283a 	ret

040066a8 <_ZN7MPU925013AK8963_whoamiEv>:

//-----------------------------------------------------------------------------------------------

uint8_t MPU9250::AK8963_whoami(){
 40066a8:	defffc04 	addi	sp,sp,-16
 40066ac:	dfc00315 	stw	ra,12(sp)
 40066b0:	df000215 	stw	fp,8(sp)
 40066b4:	df000204 	addi	fp,sp,8
 40066b8:	e13fff15 	stw	r4,-4(fp)
    uint8_t response;
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 40066bc:	01802304 	movi	r6,140
 40066c0:	01400944 	movi	r5,37
 40066c4:	e13fff17 	ldw	r4,-4(fp)
 40066c8:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_WIA); //I2C slave 0 register address from where to begin data transfer
 40066cc:	000d883a 	mov	r6,zero
 40066d0:	01400984 	movi	r5,38
 40066d4:	e13fff17 	ldw	r4,-4(fp)
 40066d8:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81); //Read 1 byte from the magnetometer
 40066dc:	01802044 	movi	r6,129
 40066e0:	014009c4 	movi	r5,39
 40066e4:	e13fff17 	ldw	r4,-4(fp)
 40066e8:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>

    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
 40066ec:	0109c404 	movi	r4,10000
 40066f0:	401c3840 	call	401c384 <usleep>
    response=WriteReg(MPUREG_EXT_SENS_DATA_00|READ_FLAG, 0x00);    //Read I2C
 40066f4:	000d883a 	mov	r6,zero
 40066f8:	01403244 	movi	r5,201
 40066fc:	e13fff17 	ldw	r4,-4(fp)
 4006700:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
 4006704:	e0bffe05 	stb	r2,-8(fp)
    //ReadRegs(MPUREG_EXT_SENS_DATA_00,response,1);
    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C

    return response;
 4006708:	e0bffe03 	ldbu	r2,-8(fp)
}
 400670c:	e037883a 	mov	sp,fp
 4006710:	dfc00117 	ldw	ra,4(sp)
 4006714:	df000017 	ldw	fp,0(sp)
 4006718:	dec00204 	addi	sp,sp,8
 400671c:	f800283a 	ret

04006720 <_ZN7MPU92509calib_magEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::calib_mag(){
 4006720:	defffa04 	addi	sp,sp,-24
 4006724:	dfc00515 	stw	ra,20(sp)
 4006728:	df000415 	stw	fp,16(sp)
 400672c:	df000404 	addi	fp,sp,16
 4006730:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 4006734:	01802304 	movi	r6,140
 4006738:	01400944 	movi	r5,37
 400673c:	e13fff17 	ldw	r4,-4(fp)
 4006740:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
 4006744:	01800404 	movi	r6,16
 4006748:	01400984 	movi	r5,38
 400674c:	e13fff17 	ldw	r4,-4(fp)
 4006750:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
 4006754:	018020c4 	movi	r6,131
 4006758:	014009c4 	movi	r5,39
 400675c:	e13fff17 	ldw	r4,-4(fp)
 4006760:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>

    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
 4006764:	0109c404 	movi	r4,10000
 4006768:	401c3840 	call	401c384 <usleep>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
 400676c:	e0bffe04 	addi	r2,fp,-8
 4006770:	01c000c4 	movi	r7,3
 4006774:	100d883a 	mov	r6,r2
 4006778:	01401244 	movi	r5,73
 400677c:	e13fff17 	ldw	r4,-4(fp)
 4006780:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
 4006784:	e03ffc15 	stw	zero,-16(fp)
 4006788:	e0bffc17 	ldw	r2,-16(fp)
 400678c:	108000c8 	cmpgei	r2,r2,3
 4006790:	1000291e 	bne	r2,zero,4006838 <_ZN7MPU92509calib_magEv+0x118>
        data=response[i];
 4006794:	e0fffe04 	addi	r3,fp,-8
 4006798:	e0bffc17 	ldw	r2,-16(fp)
 400679c:	1885883a 	add	r2,r3,r2
 40067a0:	10800003 	ldbu	r2,0(r2)
 40067a4:	10803fcc 	andi	r2,r2,255
 40067a8:	1009883a 	mov	r4,r2
 40067ac:	400b5c40 	call	400b5c4 <__floatunsisf>
 40067b0:	1007883a 	mov	r3,r2
 40067b4:	e0fffd15 	stw	r3,-12(fp)
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
 40067b8:	0150c034 	movhi	r5,17152
 40067bc:	e13ffd17 	ldw	r4,-12(fp)
 40067c0:	400af4c0 	call	400af4c <__subsf3>
 40067c4:	1007883a 	mov	r3,r2
 40067c8:	1805883a 	mov	r2,r3
 40067cc:	0150e034 	movhi	r5,17280
 40067d0:	1009883a 	mov	r4,r2
 40067d4:	400a6980 	call	400a698 <__divsf3>
 40067d8:	1007883a 	mov	r3,r2
 40067dc:	1805883a 	mov	r2,r3
 40067e0:	014fe034 	movhi	r5,16256
 40067e4:	1009883a 	mov	r4,r2
 40067e8:	400a1d00 	call	400a1d0 <__addsf3>
 40067ec:	1007883a 	mov	r3,r2
 40067f0:	1805883a 	mov	r2,r3
 40067f4:	014f86b4 	movhi	r5,15898
 40067f8:	29666684 	addi	r5,r5,-26214
 40067fc:	1009883a 	mov	r4,r2
 4006800:	400ab500 	call	400ab50 <__mulsf3>
 4006804:	1007883a 	mov	r3,r2
 4006808:	1809883a 	mov	r4,r3
 400680c:	e0ffff17 	ldw	r3,-4(fp)
 4006810:	e0bffc17 	ldw	r2,-16(fp)
 4006814:	10800144 	addi	r2,r2,5
 4006818:	1085883a 	add	r2,r2,r2
 400681c:	1085883a 	add	r2,r2,r2
 4006820:	1885883a 	add	r2,r3,r2
 4006824:	11000015 	stw	r4,0(r2)
    usleep(10000);
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
 4006828:	e0bffc17 	ldw	r2,-16(fp)
 400682c:	10800044 	addi	r2,r2,1
 4006830:	e0bffc15 	stw	r2,-16(fp)
 4006834:	003fd406 	br	4006788 <__alt_mem_epcs_flash_controller_0+0xfb005788>
        data=response[i];
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    }
}
 4006838:	0001883a 	nop
 400683c:	e037883a 	mov	sp,fp
 4006840:	dfc00117 	ldw	ra,4(sp)
 4006844:	df000017 	ldw	fp,0(sp)
 4006848:	dec00204 	addi	sp,sp,8
 400684c:	f800283a 	ret

04006850 <_ZN7MPU92508read_magEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::read_mag(){
 4006850:	defff804 	addi	sp,sp,-32
 4006854:	dfc00715 	stw	ra,28(sp)
 4006858:	df000615 	stw	fp,24(sp)
 400685c:	df000604 	addi	fp,sp,24
 4006860:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[7];
    int16_t bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 4006864:	01802304 	movi	r6,140
 4006868:	01400944 	movi	r5,37
 400686c:	e13fff17 	ldw	r4,-4(fp)
 4006870:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
 4006874:	018000c4 	movi	r6,3
 4006878:	01400984 	movi	r5,38
 400687c:	e13fff17 	ldw	r4,-4(fp)
 4006880:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
 4006884:	018021c4 	movi	r6,135
 4006888:	014009c4 	movi	r5,39
 400688c:	e13fff17 	ldw	r4,-4(fp)
 4006890:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>

    usleep(10000);
 4006894:	0109c404 	movi	r4,10000
 4006898:	401c3840 	call	401c384 <usleep>
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
 400689c:	e0bffd04 	addi	r2,fp,-12
 40068a0:	01c001c4 	movi	r7,7
 40068a4:	100d883a 	mov	r6,r2
 40068a8:	01401244 	movi	r5,73
 40068ac:	e13fff17 	ldw	r4,-4(fp)
 40068b0:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
 40068b4:	e03ffa15 	stw	zero,-24(fp)
 40068b8:	e0bffa17 	ldw	r2,-24(fp)
 40068bc:	108000c8 	cmpgei	r2,r2,3
 40068c0:	10002e1e 	bne	r2,zero,400697c <_ZN7MPU92508read_magEv+0x12c>
        bit_data=((int16_t)response[i*2+1]<<8)|response[i*2];
 40068c4:	e0bffa17 	ldw	r2,-24(fp)
 40068c8:	1085883a 	add	r2,r2,r2
 40068cc:	10800044 	addi	r2,r2,1
 40068d0:	e0fffd04 	addi	r3,fp,-12
 40068d4:	1885883a 	add	r2,r3,r2
 40068d8:	10800003 	ldbu	r2,0(r2)
 40068dc:	10803fcc 	andi	r2,r2,255
 40068e0:	1004923a 	slli	r2,r2,8
 40068e4:	1007883a 	mov	r3,r2
 40068e8:	e0bffa17 	ldw	r2,-24(fp)
 40068ec:	1085883a 	add	r2,r2,r2
 40068f0:	1009883a 	mov	r4,r2
 40068f4:	e0bffd04 	addi	r2,fp,-12
 40068f8:	1105883a 	add	r2,r2,r4
 40068fc:	10800003 	ldbu	r2,0(r2)
 4006900:	10803fcc 	andi	r2,r2,255
 4006904:	1884b03a 	or	r2,r3,r2
 4006908:	e0bffb0d 	sth	r2,-20(fp)
        data=(float)bit_data;
 400690c:	e0bffb0f 	ldh	r2,-20(fp)
 4006910:	1009883a 	mov	r4,r2
 4006914:	400b4a00 	call	400b4a0 <__floatsisf>
 4006918:	1007883a 	mov	r3,r2
 400691c:	e0fffc15 	stw	r3,-16(fp)
        magnetometer_data[i]=data*magnetometer_ASA[i];
 4006920:	e0ffff17 	ldw	r3,-4(fp)
 4006924:	e0bffa17 	ldw	r2,-24(fp)
 4006928:	10800144 	addi	r2,r2,5
 400692c:	1085883a 	add	r2,r2,r2
 4006930:	1085883a 	add	r2,r2,r2
 4006934:	1885883a 	add	r2,r3,r2
 4006938:	10c00017 	ldw	r3,0(r2)
 400693c:	e17ffc17 	ldw	r5,-16(fp)
 4006940:	1809883a 	mov	r4,r3
 4006944:	400ab500 	call	400ab50 <__mulsf3>
 4006948:	1007883a 	mov	r3,r2
 400694c:	1809883a 	mov	r4,r3
 4006950:	e0ffff17 	ldw	r3,-4(fp)
 4006954:	e0bffa17 	ldw	r2,-24(fp)
 4006958:	108003c4 	addi	r2,r2,15
 400695c:	1085883a 	add	r2,r2,r2
 4006960:	1085883a 	add	r2,r2,r2
 4006964:	1885883a 	add	r2,r3,r2
 4006968:	11000015 	stw	r4,0(r2)
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer

    usleep(10000);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
 400696c:	e0bffa17 	ldw	r2,-24(fp)
 4006970:	10800044 	addi	r2,r2,1
 4006974:	e0bffa15 	stw	r2,-24(fp)
 4006978:	003fcf06 	br	40068b8 <__alt_mem_epcs_flash_controller_0+0xfb0058b8>
        bit_data=((int16_t)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    }
}
 400697c:	0001883a 	nop
 4006980:	e037883a 	mov	sp,fp
 4006984:	dfc00117 	ldw	ra,4(sp)
 4006988:	df000017 	ldw	fp,0(sp)
 400698c:	dec00204 	addi	sp,sp,8
 4006990:	f800283a 	ret

04006994 <_ZN7MPU92508read_allEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::read_all(){
 4006994:	defff104 	addi	sp,sp,-60
 4006998:	dfc00e15 	stw	ra,56(sp)
 400699c:	df000d15 	stw	fp,52(sp)
 40069a0:	dc800c15 	stw	r18,48(sp)
 40069a4:	dc400b15 	stw	r17,44(sp)
 40069a8:	dc000a15 	stw	r16,40(sp)
 40069ac:	df000d04 	addi	fp,sp,52
 40069b0:	e13ffc15 	stw	r4,-16(fp)
    int16_t bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 40069b4:	01802304 	movi	r6,140
 40069b8:	01400944 	movi	r5,37
 40069bc:	e13ffc17 	ldw	r4,-16(fp)
 40069c0:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
 40069c4:	018000c4 	movi	r6,3
 40069c8:	01400984 	movi	r5,38
 40069cc:	e13ffc17 	ldw	r4,-16(fp)
 40069d0:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
 40069d4:	018021c4 	movi	r6,135
 40069d8:	014009c4 	movi	r5,39
 40069dc:	e13ffc17 	ldw	r4,-16(fp)
 40069e0:	4005b700 	call	4005b70 <_ZN7MPU92508WriteRegEhh>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.

    //wait(0.001);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
 40069e4:	e0bff604 	addi	r2,fp,-40
 40069e8:	01c00544 	movi	r7,21
 40069ec:	100d883a 	mov	r6,r2
 40069f0:	01400ec4 	movi	r5,59
 40069f4:	e13ffc17 	ldw	r4,-16(fp)
 40069f8:	4005c940 	call	4005c94 <_ZN7MPU92508ReadRegsEhPhj>
    //Get accelerometer value
    for(i=0; i<3; i++) {
 40069fc:	e03ff315 	stw	zero,-52(fp)
 4006a00:	e0bff317 	ldw	r2,-52(fp)
 4006a04:	108000c8 	cmpgei	r2,r2,3
 4006a08:	1000441e 	bne	r2,zero,4006b1c <_ZN7MPU92508read_allEv+0x188>
        bit_data = ((int16_t)response[i*2] << 8)|response[i*2+1];
 4006a0c:	e0bff317 	ldw	r2,-52(fp)
 4006a10:	1085883a 	add	r2,r2,r2
 4006a14:	1007883a 	mov	r3,r2
 4006a18:	e0bff604 	addi	r2,fp,-40
 4006a1c:	10c5883a 	add	r2,r2,r3
 4006a20:	10800003 	ldbu	r2,0(r2)
 4006a24:	10803fcc 	andi	r2,r2,255
 4006a28:	1004923a 	slli	r2,r2,8
 4006a2c:	1009883a 	mov	r4,r2
 4006a30:	e0bff317 	ldw	r2,-52(fp)
 4006a34:	1085883a 	add	r2,r2,r2
 4006a38:	10800044 	addi	r2,r2,1
 4006a3c:	e0fff604 	addi	r3,fp,-40
 4006a40:	1885883a 	add	r2,r3,r2
 4006a44:	10800003 	ldbu	r2,0(r2)
 4006a48:	10803fcc 	andi	r2,r2,255
 4006a4c:	2084b03a 	or	r2,r4,r2
 4006a50:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 4006a54:	e0bff40f 	ldh	r2,-48(fp)
 4006a58:	1009883a 	mov	r4,r2
 4006a5c:	400b4a00 	call	400b4a0 <__floatsisf>
 4006a60:	1007883a 	mov	r3,r2
 4006a64:	e0fff515 	stw	r3,-44(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
 4006a68:	e13ff517 	ldw	r4,-44(fp)
 4006a6c:	400db880 	call	400db88 <__extendsfdf2>
 4006a70:	1011883a 	mov	r8,r2
 4006a74:	1813883a 	mov	r9,r3
 4006a78:	018ea4f4 	movhi	r6,14995
 4006a7c:	31a8c144 	addi	r6,r6,-23803
 4006a80:	01d00934 	movhi	r7,16420
 4006a84:	39e74044 	addi	r7,r7,-25343
 4006a88:	4009883a 	mov	r4,r8
 4006a8c:	480b883a 	mov	r5,r9
 4006a90:	400ca180 	call	400ca18 <__muldf3>
 4006a94:	1009883a 	mov	r4,r2
 4006a98:	180b883a 	mov	r5,r3
 4006a9c:	2021883a 	mov	r16,r4
 4006aa0:	2823883a 	mov	r17,r5
 4006aa4:	e0bffc17 	ldw	r2,-16(fp)
 4006aa8:	10c00017 	ldw	r3,0(r2)
 4006aac:	1809883a 	mov	r4,r3
 4006ab0:	400db880 	call	400db88 <__extendsfdf2>
 4006ab4:	1009883a 	mov	r4,r2
 4006ab8:	180b883a 	mov	r5,r3
 4006abc:	200d883a 	mov	r6,r4
 4006ac0:	280f883a 	mov	r7,r5
 4006ac4:	8009883a 	mov	r4,r16
 4006ac8:	880b883a 	mov	r5,r17
 4006acc:	400bf600 	call	400bf60 <__divdf3>
 4006ad0:	1009883a 	mov	r4,r2
 4006ad4:	180b883a 	mov	r5,r3
 4006ad8:	2005883a 	mov	r2,r4
 4006adc:	2807883a 	mov	r3,r5
 4006ae0:	1009883a 	mov	r4,r2
 4006ae4:	180b883a 	mov	r5,r3
 4006ae8:	400dc980 	call	400dc98 <__truncdfsf2>
 4006aec:	1009883a 	mov	r4,r2
 4006af0:	e0fffc17 	ldw	r3,-16(fp)
 4006af4:	e0bff317 	ldw	r2,-52(fp)
 4006af8:	10800244 	addi	r2,r2,9
 4006afc:	1085883a 	add	r2,r2,r2
 4006b00:	1085883a 	add	r2,r2,r2
 4006b04:	1885883a 	add	r2,r3,r2
 4006b08:	11000015 	stw	r4,0(r2)
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.

    //wait(0.001);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
 4006b0c:	e0bff317 	ldw	r2,-52(fp)
 4006b10:	10800044 	addi	r2,r2,1
 4006b14:	e0bff315 	stw	r2,-52(fp)
 4006b18:	003fb906 	br	4006a00 <__alt_mem_epcs_flash_controller_0+0xfb005a00>
        bit_data = ((int16_t)response[i*2] << 8)|response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }
    //Get temperature
    bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4006b1c:	e0bff317 	ldw	r2,-52(fp)
 4006b20:	1085883a 	add	r2,r2,r2
 4006b24:	1007883a 	mov	r3,r2
 4006b28:	e0bff604 	addi	r2,fp,-40
 4006b2c:	10c5883a 	add	r2,r2,r3
 4006b30:	10800003 	ldbu	r2,0(r2)
 4006b34:	10803fcc 	andi	r2,r2,255
 4006b38:	1004923a 	slli	r2,r2,8
 4006b3c:	1009883a 	mov	r4,r2
 4006b40:	e0bff317 	ldw	r2,-52(fp)
 4006b44:	1085883a 	add	r2,r2,r2
 4006b48:	10800044 	addi	r2,r2,1
 4006b4c:	e0fff604 	addi	r3,fp,-40
 4006b50:	1885883a 	add	r2,r3,r2
 4006b54:	10800003 	ldbu	r2,0(r2)
 4006b58:	10803fcc 	andi	r2,r2,255
 4006b5c:	2084b03a 	or	r2,r4,r2
 4006b60:	e0bff40d 	sth	r2,-48(fp)
    data = (float)bit_data;
 4006b64:	e0bff40f 	ldh	r2,-48(fp)
 4006b68:	1009883a 	mov	r4,r2
 4006b6c:	400b4a00 	call	400b4a0 <__floatsisf>
 4006b70:	1007883a 	mov	r3,r2
 4006b74:	e0fff515 	stw	r3,-44(fp)
    temperature = ((data - 21) / 333.87) + 21;
 4006b78:	01506a34 	movhi	r5,16808
 4006b7c:	e13ff517 	ldw	r4,-44(fp)
 4006b80:	400af4c0 	call	400af4c <__subsf3>
 4006b84:	1007883a 	mov	r3,r2
 4006b88:	1805883a 	mov	r2,r3
 4006b8c:	1009883a 	mov	r4,r2
 4006b90:	400db880 	call	400db88 <__extendsfdf2>
 4006b94:	1011883a 	mov	r8,r2
 4006b98:	1813883a 	mov	r9,r3
 4006b9c:	01a147f4 	movhi	r6,34079
 4006ba0:	31ae1484 	addi	r6,r6,-18350
 4006ba4:	01d01d74 	movhi	r7,16501
 4006ba8:	39f77ac4 	addi	r7,r7,-8725
 4006bac:	4009883a 	mov	r4,r8
 4006bb0:	480b883a 	mov	r5,r9
 4006bb4:	400bf600 	call	400bf60 <__divdf3>
 4006bb8:	1009883a 	mov	r4,r2
 4006bbc:	180b883a 	mov	r5,r3
 4006bc0:	2005883a 	mov	r2,r4
 4006bc4:	2807883a 	mov	r3,r5
 4006bc8:	000d883a 	mov	r6,zero
 4006bcc:	01d00d74 	movhi	r7,16437
 4006bd0:	1009883a 	mov	r4,r2
 4006bd4:	180b883a 	mov	r5,r3
 4006bd8:	400b6b40 	call	400b6b4 <__adddf3>
 4006bdc:	1009883a 	mov	r4,r2
 4006be0:	180b883a 	mov	r5,r3
 4006be4:	2005883a 	mov	r2,r4
 4006be8:	2807883a 	mov	r3,r5
 4006bec:	1009883a 	mov	r4,r2
 4006bf0:	180b883a 	mov	r5,r3
 4006bf4:	400dc980 	call	400dc98 <__truncdfsf2>
 4006bf8:	1007883a 	mov	r3,r2
 4006bfc:	e0bffc17 	ldw	r2,-16(fp)
 4006c00:	10c00815 	stw	r3,32(r2)
    //Get gyroscope value
    for(i=4; i<7; i++) {
 4006c04:	00800104 	movi	r2,4
 4006c08:	e0bff315 	stw	r2,-52(fp)
 4006c0c:	e0bff317 	ldw	r2,-52(fp)
 4006c10:	108001c8 	cmpgei	r2,r2,7
 4006c14:	1000451e 	bne	r2,zero,4006d2c <_ZN7MPU92508read_allEv+0x398>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4006c18:	e0bff317 	ldw	r2,-52(fp)
 4006c1c:	1085883a 	add	r2,r2,r2
 4006c20:	1007883a 	mov	r3,r2
 4006c24:	e0bff604 	addi	r2,fp,-40
 4006c28:	10c5883a 	add	r2,r2,r3
 4006c2c:	10800003 	ldbu	r2,0(r2)
 4006c30:	10803fcc 	andi	r2,r2,255
 4006c34:	1004923a 	slli	r2,r2,8
 4006c38:	1009883a 	mov	r4,r2
 4006c3c:	e0bff317 	ldw	r2,-52(fp)
 4006c40:	1085883a 	add	r2,r2,r2
 4006c44:	10800044 	addi	r2,r2,1
 4006c48:	e0fff604 	addi	r3,fp,-40
 4006c4c:	1885883a 	add	r2,r3,r2
 4006c50:	10800003 	ldbu	r2,0(r2)
 4006c54:	10803fcc 	andi	r2,r2,255
 4006c58:	2084b03a 	or	r2,r4,r2
 4006c5c:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 4006c60:	e0bff40f 	ldh	r2,-48(fp)
 4006c64:	1009883a 	mov	r4,r2
 4006c68:	400b4a00 	call	400b4a0 <__floatsisf>
 4006c6c:	1007883a 	mov	r3,r2
 4006c70:	e0fff515 	stw	r3,-44(fp)
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
 4006c74:	e0bff317 	ldw	r2,-52(fp)
 4006c78:	14bfff04 	addi	r18,r2,-4
 4006c7c:	e13ff517 	ldw	r4,-44(fp)
 4006c80:	400db880 	call	400db88 <__extendsfdf2>
 4006c84:	1011883a 	mov	r8,r2
 4006c88:	1813883a 	mov	r9,r3
 4006c8c:	01a943b4 	movhi	r6,42254
 4006c90:	31b89c04 	addi	r6,r6,-7568
 4006c94:	01cfe4b4 	movhi	r7,16274
 4006c98:	39f7d144 	addi	r7,r7,-8379
 4006c9c:	4009883a 	mov	r4,r8
 4006ca0:	480b883a 	mov	r5,r9
 4006ca4:	400ca180 	call	400ca18 <__muldf3>
 4006ca8:	1009883a 	mov	r4,r2
 4006cac:	180b883a 	mov	r5,r3
 4006cb0:	2021883a 	mov	r16,r4
 4006cb4:	2823883a 	mov	r17,r5
 4006cb8:	e0bffc17 	ldw	r2,-16(fp)
 4006cbc:	10c00117 	ldw	r3,4(r2)
 4006cc0:	1809883a 	mov	r4,r3
 4006cc4:	400db880 	call	400db88 <__extendsfdf2>
 4006cc8:	1009883a 	mov	r4,r2
 4006ccc:	180b883a 	mov	r5,r3
 4006cd0:	200d883a 	mov	r6,r4
 4006cd4:	280f883a 	mov	r7,r5
 4006cd8:	8009883a 	mov	r4,r16
 4006cdc:	880b883a 	mov	r5,r17
 4006ce0:	400bf600 	call	400bf60 <__divdf3>
 4006ce4:	1009883a 	mov	r4,r2
 4006ce8:	180b883a 	mov	r5,r3
 4006cec:	2005883a 	mov	r2,r4
 4006cf0:	2807883a 	mov	r3,r5
 4006cf4:	1009883a 	mov	r4,r2
 4006cf8:	180b883a 	mov	r5,r3
 4006cfc:	400dc980 	call	400dc98 <__truncdfsf2>
 4006d00:	1009883a 	mov	r4,r2
 4006d04:	e0fffc17 	ldw	r3,-16(fp)
 4006d08:	90800304 	addi	r2,r18,12
 4006d0c:	1085883a 	add	r2,r2,r2
 4006d10:	1085883a 	add	r2,r2,r2
 4006d14:	1885883a 	add	r2,r3,r2
 4006d18:	11000015 	stw	r4,0(r2)
    //Get temperature
    bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    //Get gyroscope value
    for(i=4; i<7; i++) {
 4006d1c:	e0bff317 	ldw	r2,-52(fp)
 4006d20:	10800044 	addi	r2,r2,1
 4006d24:	e0bff315 	stw	r2,-52(fp)
 4006d28:	003fb806 	br	4006c0c <__alt_mem_epcs_flash_controller_0+0xfb005c0c>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
 4006d2c:	008001c4 	movi	r2,7
 4006d30:	e0bff315 	stw	r2,-52(fp)
 4006d34:	e0bff317 	ldw	r2,-52(fp)
 4006d38:	10800288 	cmpgei	r2,r2,10
 4006d3c:	1000301e 	bne	r2,zero,4006e00 <_ZN7MPU92508read_allEv+0x46c>
        bit_data = ((int16_t)response[i*2+1] << 8) | response[i*2];
 4006d40:	e0bff317 	ldw	r2,-52(fp)
 4006d44:	1085883a 	add	r2,r2,r2
 4006d48:	10800044 	addi	r2,r2,1
 4006d4c:	e0fff604 	addi	r3,fp,-40
 4006d50:	1885883a 	add	r2,r3,r2
 4006d54:	10800003 	ldbu	r2,0(r2)
 4006d58:	10803fcc 	andi	r2,r2,255
 4006d5c:	1004923a 	slli	r2,r2,8
 4006d60:	1007883a 	mov	r3,r2
 4006d64:	e0bff317 	ldw	r2,-52(fp)
 4006d68:	1085883a 	add	r2,r2,r2
 4006d6c:	1009883a 	mov	r4,r2
 4006d70:	e0bff604 	addi	r2,fp,-40
 4006d74:	1105883a 	add	r2,r2,r4
 4006d78:	10800003 	ldbu	r2,0(r2)
 4006d7c:	10803fcc 	andi	r2,r2,255
 4006d80:	1884b03a 	or	r2,r3,r2
 4006d84:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 4006d88:	e0bff40f 	ldh	r2,-48(fp)
 4006d8c:	1009883a 	mov	r4,r2
 4006d90:	400b4a00 	call	400b4a0 <__floatsisf>
 4006d94:	1007883a 	mov	r3,r2
 4006d98:	e0fff515 	stw	r3,-44(fp)
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
 4006d9c:	e0bff317 	ldw	r2,-52(fp)
 4006da0:	143ffe44 	addi	r16,r2,-7
 4006da4:	e0bff317 	ldw	r2,-52(fp)
 4006da8:	10bffe44 	addi	r2,r2,-7
 4006dac:	e0fffc17 	ldw	r3,-16(fp)
 4006db0:	10800144 	addi	r2,r2,5
 4006db4:	1085883a 	add	r2,r2,r2
 4006db8:	1085883a 	add	r2,r2,r2
 4006dbc:	1885883a 	add	r2,r3,r2
 4006dc0:	10c00017 	ldw	r3,0(r2)
 4006dc4:	e17ff517 	ldw	r5,-44(fp)
 4006dc8:	1809883a 	mov	r4,r3
 4006dcc:	400ab500 	call	400ab50 <__mulsf3>
 4006dd0:	1007883a 	mov	r3,r2
 4006dd4:	1809883a 	mov	r4,r3
 4006dd8:	e0fffc17 	ldw	r3,-16(fp)
 4006ddc:	808003c4 	addi	r2,r16,15
 4006de0:	1085883a 	add	r2,r2,r2
 4006de4:	1085883a 	add	r2,r2,r2
 4006de8:	1885883a 	add	r2,r3,r2
 4006dec:	11000015 	stw	r4,0(r2)
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
 4006df0:	e0bff317 	ldw	r2,-52(fp)
 4006df4:	10800044 	addi	r2,r2,1
 4006df8:	e0bff315 	stw	r2,-52(fp)
 4006dfc:	003fcd06 	br	4006d34 <__alt_mem_epcs_flash_controller_0+0xfb005d34>
        bit_data = ((int16_t)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    }
}
 4006e00:	0001883a 	nop
 4006e04:	e6fffd04 	addi	sp,fp,-12
 4006e08:	dfc00417 	ldw	ra,16(sp)
 4006e0c:	df000317 	ldw	fp,12(sp)
 4006e10:	dc800217 	ldw	r18,8(sp)
 4006e14:	dc400117 	ldw	r17,4(sp)
 4006e18:	dc000017 	ldw	r16,0(sp)
 4006e1c:	dec00504 	addi	sp,sp,20
 4006e20:	f800283a 	ret

04006e24 <_ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void MPU9250::getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
 4006e24:	defffa04 	addi	sp,sp,-24
 4006e28:	dfc00515 	stw	ra,20(sp)
 4006e2c:	df000415 	stw	fp,16(sp)
 4006e30:	df000404 	addi	fp,sp,16
 4006e34:	e13ffc15 	stw	r4,-16(fp)
 4006e38:	e17ffd15 	stw	r5,-12(fp)
 4006e3c:	e1bffe15 	stw	r6,-8(fp)
 4006e40:	e1ffff15 	stw	r7,-4(fp)
    read_all();
 4006e44:	e13ffc17 	ldw	r4,-16(fp)
 4006e48:	40069940 	call	4006994 <_ZN7MPU92508read_allEv>
    *ax = accelerometer_data[0];
 4006e4c:	e0bffc17 	ldw	r2,-16(fp)
 4006e50:	10c00917 	ldw	r3,36(r2)
 4006e54:	e0bffd17 	ldw	r2,-12(fp)
 4006e58:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
 4006e5c:	e0bffc17 	ldw	r2,-16(fp)
 4006e60:	10c00a17 	ldw	r3,40(r2)
 4006e64:	e0bffe17 	ldw	r2,-8(fp)
 4006e68:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
 4006e6c:	e0bffc17 	ldw	r2,-16(fp)
 4006e70:	10c00b17 	ldw	r3,44(r2)
 4006e74:	e0bfff17 	ldw	r2,-4(fp)
 4006e78:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
 4006e7c:	e0bffc17 	ldw	r2,-16(fp)
 4006e80:	10c00c17 	ldw	r3,48(r2)
 4006e84:	e0800217 	ldw	r2,8(fp)
 4006e88:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
 4006e8c:	e0bffc17 	ldw	r2,-16(fp)
 4006e90:	10c00d17 	ldw	r3,52(r2)
 4006e94:	e0800317 	ldw	r2,12(fp)
 4006e98:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
 4006e9c:	e0bffc17 	ldw	r2,-16(fp)
 4006ea0:	10c00e17 	ldw	r3,56(r2)
 4006ea4:	e0800417 	ldw	r2,16(fp)
 4006ea8:	10c00015 	stw	r3,0(r2)
    *mx = magnetometer_data[0];
 4006eac:	e0bffc17 	ldw	r2,-16(fp)
 4006eb0:	10c00f17 	ldw	r3,60(r2)
 4006eb4:	e0800517 	ldw	r2,20(fp)
 4006eb8:	10c00015 	stw	r3,0(r2)
    *my = magnetometer_data[1];
 4006ebc:	e0bffc17 	ldw	r2,-16(fp)
 4006ec0:	10c01017 	ldw	r3,64(r2)
 4006ec4:	e0800617 	ldw	r2,24(fp)
 4006ec8:	10c00015 	stw	r3,0(r2)
    *mz = magnetometer_data[2];
 4006ecc:	e0bffc17 	ldw	r2,-16(fp)
 4006ed0:	10c01117 	ldw	r3,68(r2)
 4006ed4:	e0800717 	ldw	r2,28(fp)
 4006ed8:	10c00015 	stw	r3,0(r2)
}
 4006edc:	0001883a 	nop
 4006ee0:	e037883a 	mov	sp,fp
 4006ee4:	dfc00117 	ldw	ra,4(sp)
 4006ee8:	df000017 	ldw	fp,0(sp)
 4006eec:	dec00204 	addi	sp,sp,8
 4006ef0:	f800283a 	ret

04006ef4 <_ZN7MPU925010getMotion6EPfS0_S0_S0_S0_S0_>:

//-----------------------------------------------------------------------------------------------

void MPU9250::getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
 4006ef4:	defffa04 	addi	sp,sp,-24
 4006ef8:	dfc00515 	stw	ra,20(sp)
 4006efc:	df000415 	stw	fp,16(sp)
 4006f00:	df000404 	addi	fp,sp,16
 4006f04:	e13ffc15 	stw	r4,-16(fp)
 4006f08:	e17ffd15 	stw	r5,-12(fp)
 4006f0c:	e1bffe15 	stw	r6,-8(fp)
 4006f10:	e1ffff15 	stw	r7,-4(fp)
    read_acc();
 4006f14:	e13ffc17 	ldw	r4,-16(fp)
 4006f18:	40061d80 	call	40061d8 <_ZN7MPU92508read_accEv>
    read_gyro();
 4006f1c:	e13ffc17 	ldw	r4,-16(fp)
 4006f20:	400634c0 	call	400634c <_ZN7MPU92509read_gyroEv>
    *ax = accelerometer_data[0];
 4006f24:	e0bffc17 	ldw	r2,-16(fp)
 4006f28:	10c00917 	ldw	r3,36(r2)
 4006f2c:	e0bffd17 	ldw	r2,-12(fp)
 4006f30:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
 4006f34:	e0bffc17 	ldw	r2,-16(fp)
 4006f38:	10c00a17 	ldw	r3,40(r2)
 4006f3c:	e0bffe17 	ldw	r2,-8(fp)
 4006f40:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
 4006f44:	e0bffc17 	ldw	r2,-16(fp)
 4006f48:	10c00b17 	ldw	r3,44(r2)
 4006f4c:	e0bfff17 	ldw	r2,-4(fp)
 4006f50:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
 4006f54:	e0bffc17 	ldw	r2,-16(fp)
 4006f58:	10c00c17 	ldw	r3,48(r2)
 4006f5c:	e0800217 	ldw	r2,8(fp)
 4006f60:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
 4006f64:	e0bffc17 	ldw	r2,-16(fp)
 4006f68:	10c00d17 	ldw	r3,52(r2)
 4006f6c:	e0800317 	ldw	r2,12(fp)
 4006f70:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
 4006f74:	e0bffc17 	ldw	r2,-16(fp)
 4006f78:	10c00e17 	ldw	r3,56(r2)
 4006f7c:	e0800417 	ldw	r2,16(fp)
 4006f80:	10c00015 	stw	r3,0(r2)
}
 4006f84:	0001883a 	nop
 4006f88:	e037883a 	mov	sp,fp
 4006f8c:	dfc00117 	ldw	ra,4(sp)
 4006f90:	df000017 	ldw	fp,0(sp)
 4006f94:	dec00204 	addi	sp,sp,8
 4006f98:	f800283a 	ret

04006f9c <_Z12Write32_Datalll>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 4006f9c:	defffb04 	addi	sp,sp,-20
 4006fa0:	df000415 	stw	fp,16(sp)
 4006fa4:	df000404 	addi	fp,sp,16
 4006fa8:	e13ffd15 	stw	r4,-12(fp)
 4006fac:	e17ffe15 	stw	r5,-8(fp)
 4006fb0:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4006fb4:	e0bffe17 	ldw	r2,-8(fp)
 4006fb8:	1085883a 	add	r2,r2,r2
 4006fbc:	1085883a 	add	r2,r2,r2
 4006fc0:	1007883a 	mov	r3,r2
 4006fc4:	e0bffd17 	ldw	r2,-12(fp)
 4006fc8:	1885883a 	add	r2,r3,r2
 4006fcc:	1007883a 	mov	r3,r2
 4006fd0:	e0bfff17 	ldw	r2,-4(fp)
 4006fd4:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 4006fd8:	00800044 	movi	r2,1
 4006fdc:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 4006fe0:	e0bffc03 	ldbu	r2,-16(fp)
}
 4006fe4:	e037883a 	mov	sp,fp
 4006fe8:	df000017 	ldw	fp,0(sp)
 4006fec:	dec00104 	addi	sp,sp,4
 4006ff0:	f800283a 	ret

04006ff4 <_Z11Read32_DatallPl>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 4006ff4:	defffb04 	addi	sp,sp,-20
 4006ff8:	df000415 	stw	fp,16(sp)
 4006ffc:	df000404 	addi	fp,sp,16
 4007000:	e13ffd15 	stw	r4,-12(fp)
 4007004:	e17ffe15 	stw	r5,-8(fp)
 4007008:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 400700c:	e0bffe17 	ldw	r2,-8(fp)
 4007010:	1085883a 	add	r2,r2,r2
 4007014:	1085883a 	add	r2,r2,r2
 4007018:	1007883a 	mov	r3,r2
 400701c:	e0bffd17 	ldw	r2,-12(fp)
 4007020:	1885883a 	add	r2,r3,r2
 4007024:	10c00037 	ldwio	r3,0(r2)
 4007028:	e0bfff17 	ldw	r2,-4(fp)
 400702c:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 4007030:	00800044 	movi	r2,1
 4007034:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 4007038:	e0bffc03 	ldbu	r2,-16(fp)
}
 400703c:	e037883a 	mov	sp,fp
 4007040:	df000017 	ldw	fp,0(sp)
 4007044:	dec00104 	addi	sp,sp,4
 4007048:	f800283a 	ret

0400704c <_Z11oc_i2c_initl>:

bool oc_i2c_init(alt_32 i2c_base){
 400704c:	defffa04 	addi	sp,sp,-24
 4007050:	dfc00515 	stw	ra,20(sp)
 4007054:	df000415 	stw	fp,16(sp)
 4007058:	df000404 	addi	fp,sp,16
 400705c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 4007060:	0080bef4 	movhi	r2,763
 4007064:	10bc2004 	addi	r2,r2,-3968
 4007068:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 400706c:	008001b4 	movhi	r2,6
 4007070:	1086a004 	addi	r2,r2,6784
 4007074:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 4007078:	018001b4 	movhi	r6,6
 400707c:	3186a004 	addi	r6,r6,6784
 4007080:	0140bef4 	movhi	r5,763
 4007084:	297c2004 	addi	r5,r5,-3968
 4007088:	e13fff17 	ldw	r4,-4(fp)
 400708c:	40070ac0 	call	40070ac <_Z14oc_i2c_init_exlll>
 4007090:	e0bffe05 	stb	r2,-8(fp)

	return bSuccess;
 4007094:	e0bffe03 	ldbu	r2,-8(fp)
}
 4007098:	e037883a 	mov	sp,fp
 400709c:	dfc00117 	ldw	ra,4(sp)
 40070a0:	df000017 	ldw	fp,0(sp)
 40070a4:	dec00204 	addi	sp,sp,8
 40070a8:	f800283a 	ret

040070ac <_Z14oc_i2c_init_exlll>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 40070ac:	defff704 	addi	sp,sp,-36
 40070b0:	dfc00815 	stw	ra,32(sp)
 40070b4:	df000715 	stw	fp,28(sp)
 40070b8:	df000704 	addi	fp,sp,28
 40070bc:	e13ffd15 	stw	r4,-12(fp)
 40070c0:	e17ffe15 	stw	r5,-8(fp)
 40070c4:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 40070c8:	00800044 	movi	r2,1
 40070cc:	e0bff905 	stb	r2,-28(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 40070d0:	00bfe004 	movi	r2,-128
 40070d4:	e0bff945 	stb	r2,-27(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 40070d8:	e0bfff17 	ldw	r2,-4(fp)
 40070dc:	10800164 	muli	r2,r2,5
 40070e0:	100b883a 	mov	r5,r2
 40070e4:	e13ffe17 	ldw	r4,-8(fp)
 40070e8:	400a01c0 	call	400a01c <__divsi3>
 40070ec:	10bfffc4 	addi	r2,r2,-1
 40070f0:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 40070f4:	e0bffa17 	ldw	r2,-24(fp)
 40070f8:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 40070fc:	e0bffa17 	ldw	r2,-24(fp)
 4007100:	1005d23a 	srai	r2,r2,8
 4007104:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 4007108:	e0bffd17 	ldw	r2,-12(fp)
 400710c:	e0fffb03 	ldbu	r3,-20(fp)
 4007110:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 4007114:	e0bffd17 	ldw	r2,-12(fp)
 4007118:	10800104 	addi	r2,r2,4
 400711c:	1007883a 	mov	r3,r2
 4007120:	e0bffb43 	ldbu	r2,-19(fp)
 4007124:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 4007128:	e0bffd17 	ldw	r2,-12(fp)
 400712c:	10800204 	addi	r2,r2,8
 4007130:	1007883a 	mov	r3,r2
 4007134:	00802004 	movi	r2,128
 4007138:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 400713c:	e0bff903 	ldbu	r2,-28(fp)
 4007140:	10000826 	beq	r2,zero,4007164 <_Z14oc_i2c_init_exlll+0xb8>
    	read_data =IORD(i2c_base, 0);
 4007144:	e0bffd17 	ldw	r2,-12(fp)
 4007148:	10800037 	ldwio	r2,0(r2)
 400714c:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 4007150:	e0bffc17 	ldw	r2,-16(fp)
 4007154:	10c03fcc 	andi	r3,r2,255
 4007158:	e0bffb03 	ldbu	r2,-20(fp)
 400715c:	18800126 	beq	r3,r2,4007164 <_Z14oc_i2c_init_exlll+0xb8>
            bSuccess = FALSE;
 4007160:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 4007164:	e0bff903 	ldbu	r2,-28(fp)
 4007168:	10000926 	beq	r2,zero,4007190 <_Z14oc_i2c_init_exlll+0xe4>
    	read_data =IORD(i2c_base, 1);
 400716c:	e0bffd17 	ldw	r2,-12(fp)
 4007170:	10800104 	addi	r2,r2,4
 4007174:	10800037 	ldwio	r2,0(r2)
 4007178:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 400717c:	e0bffc17 	ldw	r2,-16(fp)
 4007180:	10c03fcc 	andi	r3,r2,255
 4007184:	e0bffb43 	ldbu	r2,-19(fp)
 4007188:	18800126 	beq	r3,r2,4007190 <_Z14oc_i2c_init_exlll+0xe4>
            bSuccess = FALSE;
 400718c:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check control
    if (bSuccess){
 4007190:	e0bff903 	ldbu	r2,-28(fp)
 4007194:	10000926 	beq	r2,zero,40071bc <_Z14oc_i2c_init_exlll+0x110>
    	read_data =IORD(i2c_base, 2);
 4007198:	e0bffd17 	ldw	r2,-12(fp)
 400719c:	10800204 	addi	r2,r2,8
 40071a0:	10800037 	ldwio	r2,0(r2)
 40071a4:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 40071a8:	e0bffc17 	ldw	r2,-16(fp)
 40071ac:	10803fcc 	andi	r2,r2,255
 40071b0:	10802020 	cmpeqi	r2,r2,128
 40071b4:	1000011e 	bne	r2,zero,40071bc <_Z14oc_i2c_init_exlll+0x110>
            bSuccess = FALSE;
 40071b8:	e03ff905 	stb	zero,-28(fp)
        }
    }

   if (bSuccess)
 40071bc:	e0bff903 	ldbu	r2,-28(fp)
 40071c0:	10000426 	beq	r2,zero,40071d4 <_Z14oc_i2c_init_exlll+0x128>
       printf("\nI2C core is enabled! \r\n");
 40071c4:	01010234 	movhi	r4,1032
 40071c8:	21141004 	addi	r4,r4,20544
 40071cc:	400ea840 	call	400ea84 <puts>
 40071d0:	00000306 	br	40071e0 <_Z14oc_i2c_init_exlll+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 40071d4:	01010234 	movhi	r4,1032
 40071d8:	21141604 	addi	r4,r4,20568
 40071dc:	400ea840 	call	400ea84 <puts>

   return bSuccess;
 40071e0:	e0bff903 	ldbu	r2,-28(fp)

}
 40071e4:	e037883a 	mov	sp,fp
 40071e8:	dfc00117 	ldw	ra,4(sp)
 40071ec:	df000017 	ldw	fp,0(sp)
 40071f0:	dec00204 	addi	sp,sp,8
 40071f4:	f800283a 	ret

040071f8 <_Z13oc_i2c_uninitl>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 40071f8:	defffb04 	addi	sp,sp,-20
 40071fc:	dfc00415 	stw	ra,16(sp)
 4007200:	df000315 	stw	fp,12(sp)
 4007204:	df000304 	addi	fp,sp,12
 4007208:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 400720c:	00800044 	movi	r2,1
 4007210:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 4007214:	e03ffd45 	stb	zero,-11(fp)

    IOWR( i2c_base, 2, ControlValue);
 4007218:	e0bfff17 	ldw	r2,-4(fp)
 400721c:	10800204 	addi	r2,r2,8
 4007220:	0007883a 	mov	r3,zero
 4007224:	10c00035 	stwio	r3,0(r2)
   	read_data =IORD(i2c_base, 2);
 4007228:	e0bfff17 	ldw	r2,-4(fp)
 400722c:	10800204 	addi	r2,r2,8
 4007230:	10800037 	ldwio	r2,0(r2)
 4007234:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 4007238:	e0bffe17 	ldw	r2,-8(fp)
 400723c:	10803fcc 	andi	r2,r2,255
 4007240:	10000126 	beq	r2,zero,4007248 <_Z13oc_i2c_uninitl+0x50>
            bSuccess = FALSE;
 4007244:	e03ffd05 	stb	zero,-12(fp)
    }

   if (bSuccess)
 4007248:	e0bffd03 	ldbu	r2,-12(fp)
 400724c:	10000426 	beq	r2,zero,4007260 <_Z13oc_i2c_uninitl+0x68>
       printf("\nI2C core  is disabled! \r\n");
 4007250:	01010234 	movhi	r4,1032
 4007254:	21142104 	addi	r4,r4,20612
 4007258:	400ea840 	call	400ea84 <puts>
 400725c:	00000306 	br	400726c <_Z13oc_i2c_uninitl+0x74>
   else
       printf("\nI2C core is failed to disable! \r\n");
 4007260:	01010234 	movhi	r4,1032
 4007264:	21142804 	addi	r4,r4,20640
 4007268:	400ea840 	call	400ea84 <puts>

   return bSuccess;
 400726c:	e0bffd03 	ldbu	r2,-12(fp)

}
 4007270:	e037883a 	mov	sp,fp
 4007274:	dfc00117 	ldw	ra,4(sp)
 4007278:	df000017 	ldw	fp,0(sp)
 400727c:	dec00204 	addi	sp,sp,8
 4007280:	f800283a 	ret

04007284 <_Z16ACK_single_checkl>:




bool  ACK_single_check(alt_32 i2c_base)
{
 4007284:	defffb04 	addi	sp,sp,-20
 4007288:	dfc00415 	stw	ra,16(sp)
 400728c:	df000315 	stw	fp,12(sp)
 4007290:	df000304 	addi	fp,sp,12
 4007294:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 4007298:	00800044 	movi	r2,1
 400729c:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 40072a0:	01003e84 	movi	r4,250
 40072a4:	401c3840 	call	401c384 <usleep>
    read_data =IORD(i2c_base, 4);
 40072a8:	e0bfff17 	ldw	r2,-4(fp)
 40072ac:	10800404 	addi	r2,r2,16
 40072b0:	10800037 	ldwio	r2,0(r2)
 40072b4:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 40072b8:	e0bffe17 	ldw	r2,-8(fp)
 40072bc:	1080008c 	andi	r2,r2,2
 40072c0:	10000126 	beq	r2,zero,40072c8 <_Z16ACK_single_checkl+0x44>
            bSuccess = FALSE;
 40072c4:	e03ffd05 	stb	zero,-12(fp)
     if (bSuccess){
 40072c8:	e0bffd03 	ldbu	r2,-12(fp)
 40072cc:	10000a26 	beq	r2,zero,40072f8 <_Z16ACK_single_checkl+0x74>
            usleep(ACK_SLEEP_TIME);
 40072d0:	01003e84 	movi	r4,250
 40072d4:	401c3840 	call	401c384 <usleep>
            read_data =IORD(i2c_base, 4);
 40072d8:	e0bfff17 	ldw	r2,-4(fp)
 40072dc:	10800404 	addi	r2,r2,16
 40072e0:	10800037 	ldwio	r2,0(r2)
 40072e4:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 40072e8:	e0bffe17 	ldw	r2,-8(fp)
 40072ec:	1080200c 	andi	r2,r2,128
 40072f0:	10000126 	beq	r2,zero,40072f8 <_Z16ACK_single_checkl+0x74>
                    bSuccess = FALSE;
 40072f4:	e03ffd05 	stb	zero,-12(fp)
     }
    return bSuccess;
 40072f8:	e0bffd03 	ldbu	r2,-12(fp)
}
 40072fc:	e037883a 	mov	sp,fp
 4007300:	dfc00117 	ldw	ra,4(sp)
 4007304:	df000017 	ldw	fp,0(sp)
 4007308:	dec00204 	addi	sp,sp,8
 400730c:	f800283a 	ret

04007310 <_Z9ACK_checkl>:


bool  ACK_check(alt_32 i2c_base){
 4007310:	defffb04 	addi	sp,sp,-20
 4007314:	dfc00415 	stw	ra,16(sp)
 4007318:	df000315 	stw	fp,12(sp)
 400731c:	df000304 	addi	fp,sp,12
 4007320:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 4007324:	e03ffd05 	stb	zero,-12(fp)
    int i=0;
 4007328:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 400732c:	e0bffd03 	ldbu	r2,-12(fp)
 4007330:	1080005c 	xori	r2,r2,1
 4007334:	10803fcc 	andi	r2,r2,255
 4007338:	10000726 	beq	r2,zero,4007358 <_Z9ACK_checkl+0x48>
 400733c:	e0bffe17 	ldw	r2,-8(fp)
 4007340:	10c00044 	addi	r3,r2,1
 4007344:	e0fffe15 	stw	r3,-8(fp)
 4007348:	10800288 	cmpgei	r2,r2,10
 400734c:	1000021e 	bne	r2,zero,4007358 <_Z9ACK_checkl+0x48>
 4007350:	00800044 	movi	r2,1
 4007354:	00000106 	br	400735c <_Z9ACK_checkl+0x4c>
 4007358:	0005883a 	mov	r2,zero
 400735c:	10803fcc 	andi	r2,r2,255
 4007360:	10000426 	beq	r2,zero,4007374 <_Z9ACK_checkl+0x64>
        bSuccess = ACK_single_check(i2c_base);
 4007364:	e13fff17 	ldw	r4,-4(fp)
 4007368:	40072840 	call	4007284 <_Z16ACK_single_checkl>
 400736c:	e0bffd05 	stb	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 4007370:	003fee06 	br	400732c <__alt_mem_epcs_flash_controller_0+0xfb00632c>
        bSuccess = ACK_single_check(i2c_base);
    }
    if (!bSuccess){
 4007374:	e0bffd03 	ldbu	r2,-12(fp)
 4007378:	1080005c 	xori	r2,r2,1
 400737c:	10803fcc 	andi	r2,r2,255
 4007380:	10000426 	beq	r2,zero,4007394 <_Z9ACK_checkl+0x84>
    	printf("no ack !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);
 4007384:	e17ffe17 	ldw	r5,-8(fp)
 4007388:	01010234 	movhi	r4,1032
 400738c:	21143104 	addi	r4,r4,20676
 4007390:	400e9880 	call	400e988 <printf>
      //  if (!bSuccess)
    //	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

    }

    return bSuccess;
 4007394:	e0bffd03 	ldbu	r2,-12(fp)
}
 4007398:	e037883a 	mov	sp,fp
 400739c:	dfc00117 	ldw	ra,4(sp)
 40073a0:	df000017 	ldw	fp,0(sp)
 40073a4:	dec00204 	addi	sp,sp,8
 40073a8:	f800283a 	ret

040073ac <_Z12OC_I2C_WritelhhPhi>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 40073ac:	defff904 	addi	sp,sp,-28
 40073b0:	dfc00615 	stw	ra,24(sp)
 40073b4:	df000515 	stw	fp,20(sp)
 40073b8:	df000504 	addi	fp,sp,20
 40073bc:	e13ffc15 	stw	r4,-16(fp)
 40073c0:	2807883a 	mov	r3,r5
 40073c4:	3005883a 	mov	r2,r6
 40073c8:	e1ffff15 	stw	r7,-4(fp)
 40073cc:	e0fffd05 	stb	r3,-12(fp)
 40073d0:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 40073d4:	e0bffd03 	ldbu	r2,-12(fp)
 40073d8:	100d883a 	mov	r6,r2
 40073dc:	014000c4 	movi	r5,3
 40073e0:	e13ffc17 	ldw	r4,-16(fp)
 40073e4:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 40073e8:	1080005c 	xori	r2,r2,1
 40073ec:	10803fcc 	andi	r2,r2,255
 40073f0:	10000526 	beq	r2,zero,4007408 <_Z12OC_I2C_WritelhhPhi+0x5c>
       printf("OC_I2C_Write error[0]\r\n");
 40073f4:	01010234 	movhi	r4,1032
 40073f8:	21143a04 	addi	r4,r4,20712
 40073fc:	400ea840 	call	400ea84 <puts>
       return FALSE;
 4007400:	0005883a 	mov	r2,zero
 4007404:	00007706 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 4007408:	01802404 	movi	r6,144
 400740c:	01400104 	movi	r5,4
 4007410:	e13ffc17 	ldw	r4,-16(fp)
 4007414:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007418:	1080005c 	xori	r2,r2,1
 400741c:	10803fcc 	andi	r2,r2,255
 4007420:	10000526 	beq	r2,zero,4007438 <_Z12OC_I2C_WritelhhPhi+0x8c>
       printf("OC_I2C_Write error[1]\r\n");
 4007424:	01010234 	movhi	r4,1032
 4007428:	21144004 	addi	r4,r4,20736
 400742c:	400ea840 	call	400ea84 <puts>
       return FALSE;
 4007430:	0005883a 	mov	r2,zero
 4007434:	00006b06 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007438:	e13ffc17 	ldw	r4,-16(fp)
 400743c:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007440:	1080005c 	xori	r2,r2,1
 4007444:	10803fcc 	andi	r2,r2,255
 4007448:	10000526 	beq	r2,zero,4007460 <_Z12OC_I2C_WritelhhPhi+0xb4>
        printf("OC_I2C_Write error[2]\r\n");
 400744c:	01010234 	movhi	r4,1032
 4007450:	21144604 	addi	r4,r4,20760
 4007454:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007458:	0005883a 	mov	r2,zero
 400745c:	00006106 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 4007460:	e0bffe03 	ldbu	r2,-8(fp)
 4007464:	100d883a 	mov	r6,r2
 4007468:	014000c4 	movi	r5,3
 400746c:	e13ffc17 	ldw	r4,-16(fp)
 4007470:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007474:	1080005c 	xori	r2,r2,1
 4007478:	10803fcc 	andi	r2,r2,255
 400747c:	10000526 	beq	r2,zero,4007494 <_Z12OC_I2C_WritelhhPhi+0xe8>
       printf("OC_I2C_Write error[3]\r\n");
 4007480:	01010234 	movhi	r4,1032
 4007484:	21144c04 	addi	r4,r4,20784
 4007488:	400ea840 	call	400ea84 <puts>
       return FALSE;
 400748c:	0005883a 	mov	r2,zero
 4007490:	00005406 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 4007494:	01800404 	movi	r6,16
 4007498:	01400104 	movi	r5,4
 400749c:	e13ffc17 	ldw	r4,-16(fp)
 40074a0:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 40074a4:	1080005c 	xori	r2,r2,1
 40074a8:	10803fcc 	andi	r2,r2,255
 40074ac:	10000526 	beq	r2,zero,40074c4 <_Z12OC_I2C_WritelhhPhi+0x118>
        printf("OC_I2C_Write error[4]\r\n");
 40074b0:	01010234 	movhi	r4,1032
 40074b4:	21145204 	addi	r4,r4,20808
 40074b8:	400ea840 	call	400ea84 <puts>
        return FALSE;
 40074bc:	0005883a 	mov	r2,zero
 40074c0:	00004806 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40074c4:	e13ffc17 	ldw	r4,-16(fp)
 40074c8:	40073100 	call	4007310 <_Z9ACK_checkl>
 40074cc:	1080005c 	xori	r2,r2,1
 40074d0:	10803fcc 	andi	r2,r2,255
 40074d4:	10000526 	beq	r2,zero,40074ec <_Z12OC_I2C_WritelhhPhi+0x140>
        printf("OC_I2C_Write error[5]\r\n");
 40074d8:	01010234 	movhi	r4,1032
 40074dc:	21145804 	addi	r4,r4,20832
 40074e0:	400ea840 	call	400ea84 <puts>
        return FALSE;
 40074e4:	0005883a 	mov	r2,zero
 40074e8:	00003e06 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 40074ec:	e03ffb15 	stw	zero,-20(fp)
 40074f0:	e0fffb17 	ldw	r3,-20(fp)
 40074f4:	e0800217 	ldw	r2,8(fp)
 40074f8:	18802b0e 	bge	r3,r2,40075a8 <_Z12OC_I2C_WritelhhPhi+0x1fc>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 40074fc:	e0bffb17 	ldw	r2,-20(fp)
 4007500:	e0ffff17 	ldw	r3,-4(fp)
 4007504:	1885883a 	add	r2,r3,r2
 4007508:	10800003 	ldbu	r2,0(r2)
 400750c:	10803fcc 	andi	r2,r2,255
 4007510:	100d883a 	mov	r6,r2
 4007514:	014000c4 	movi	r5,3
 4007518:	e13ffc17 	ldw	r4,-16(fp)
 400751c:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007520:	1080005c 	xori	r2,r2,1
 4007524:	10803fcc 	andi	r2,r2,255
 4007528:	10000526 	beq	r2,zero,4007540 <_Z12OC_I2C_WritelhhPhi+0x194>
              printf("OC_I2C_Write error[6]\r\n");
 400752c:	01010234 	movhi	r4,1032
 4007530:	21145e04 	addi	r4,r4,20856
 4007534:	400ea840 	call	400ea84 <puts>
              return FALSE;
 4007538:	0005883a 	mov	r2,zero
 400753c:	00002906 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 4007540:	01800404 	movi	r6,16
 4007544:	01400104 	movi	r5,4
 4007548:	e13ffc17 	ldw	r4,-16(fp)
 400754c:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007550:	1080005c 	xori	r2,r2,1
 4007554:	10803fcc 	andi	r2,r2,255
 4007558:	10000526 	beq	r2,zero,4007570 <_Z12OC_I2C_WritelhhPhi+0x1c4>
             printf("OC_I2C_Write error[7]\r\n");
 400755c:	01010234 	movhi	r4,1032
 4007560:	21146404 	addi	r4,r4,20880
 4007564:	400ea840 	call	400ea84 <puts>
              return FALSE;
 4007568:	0005883a 	mov	r2,zero
 400756c:	00001d06 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 4007570:	e13ffc17 	ldw	r4,-16(fp)
 4007574:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007578:	1080005c 	xori	r2,r2,1
 400757c:	10803fcc 	andi	r2,r2,255
 4007580:	10000526 	beq	r2,zero,4007598 <_Z12OC_I2C_WritelhhPhi+0x1ec>
              printf("OC_I2C_Write error[8]\r\n");
 4007584:	01010234 	movhi	r4,1032
 4007588:	21146a04 	addi	r4,r4,20904
 400758c:	400ea840 	call	400ea84 <puts>
              return FALSE;
 4007590:	0005883a 	mov	r2,zero
 4007594:	00001306 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 4007598:	e0bffb17 	ldw	r2,-20(fp)
 400759c:	10800044 	addi	r2,r2,1
 40075a0:	e0bffb15 	stw	r2,-20(fp)
 40075a4:	003fd206 	br	40074f0 <__alt_mem_epcs_flash_controller_0+0xfb0064f0>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 40075a8:	01801004 	movi	r6,64
 40075ac:	01400104 	movi	r5,4
 40075b0:	e13ffc17 	ldw	r4,-16(fp)
 40075b4:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 40075b8:	1080005c 	xori	r2,r2,1
 40075bc:	10803fcc 	andi	r2,r2,255
 40075c0:	10000526 	beq	r2,zero,40075d8 <_Z12OC_I2C_WritelhhPhi+0x22c>
         printf("OC_I2C_Write error[9]\r\n");
 40075c4:	01010234 	movhi	r4,1032
 40075c8:	21147004 	addi	r4,r4,20928
 40075cc:	400ea840 	call	400ea84 <puts>
         return FALSE;
 40075d0:	0005883a 	mov	r2,zero
 40075d4:	00000306 	br	40075e4 <_Z12OC_I2C_WritelhhPhi+0x238>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 40075d8:	01003e84 	movi	r4,250
 40075dc:	401c3840 	call	401c384 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 40075e0:	00800044 	movi	r2,1

}
 40075e4:	e037883a 	mov	sp,fp
 40075e8:	dfc00117 	ldw	ra,4(sp)
 40075ec:	df000017 	ldw	fp,0(sp)
 40075f0:	dec00204 	addi	sp,sp,8
 40075f4:	f800283a 	ret

040075f8 <_Z18ACK_judge_for_readl>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 40075f8:	defffb04 	addi	sp,sp,-20
 40075fc:	dfc00415 	stw	ra,16(sp)
 4007600:	df000315 	stw	fp,12(sp)
 4007604:	df000304 	addi	fp,sp,12
 4007608:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 400760c:	01003e84 	movi	r4,250
 4007610:	401c3840 	call	401c384 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 4007614:	e0bffe04 	addi	r2,fp,-8
 4007618:	100d883a 	mov	r6,r2
 400761c:	01400104 	movi	r5,4
 4007620:	e13fff17 	ldw	r4,-4(fp)
 4007624:	4006ff40 	call	4006ff4 <_Z11Read32_DatallPl>
 4007628:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess){
 400762c:	e0bffd03 	ldbu	r2,-12(fp)
 4007630:	10000426 	beq	r2,zero,4007644 <_Z18ACK_judge_for_readl+0x4c>
        if(this_data & 0x02)
 4007634:	e0bffe17 	ldw	r2,-8(fp)
 4007638:	1080008c 	andi	r2,r2,2
 400763c:	10000126 	beq	r2,zero,4007644 <_Z18ACK_judge_for_readl+0x4c>
            bSuccess = FALSE;
 4007640:	e03ffd05 	stb	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 4007644:	e0bffd03 	ldbu	r2,-12(fp)

}
 4007648:	e037883a 	mov	sp,fp
 400764c:	dfc00117 	ldw	ra,4(sp)
 4007650:	df000017 	ldw	fp,0(sp)
 4007654:	dec00204 	addi	sp,sp,8
 4007658:	f800283a 	ret

0400765c <_Z11OC_I2C_ReadlhhPhi>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 400765c:	defff804 	addi	sp,sp,-32
 4007660:	dfc00715 	stw	ra,28(sp)
 4007664:	df000615 	stw	fp,24(sp)
 4007668:	df000604 	addi	fp,sp,24
 400766c:	e13ffc15 	stw	r4,-16(fp)
 4007670:	2807883a 	mov	r3,r5
 4007674:	3005883a 	mov	r2,r6
 4007678:	e1ffff15 	stw	r7,-4(fp)
 400767c:	e0fffd05 	stb	r3,-12(fp)
 4007680:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 4007684:	e0bffc17 	ldw	r2,-16(fp)
 4007688:	10800304 	addi	r2,r2,12
 400768c:	1007883a 	mov	r3,r2
 4007690:	e0bffd03 	ldbu	r2,-12(fp)
 4007694:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 4007698:	e0bffc17 	ldw	r2,-16(fp)
 400769c:	10800404 	addi	r2,r2,16
 40076a0:	1007883a 	mov	r3,r2
 40076a4:	00802404 	movi	r2,144
 40076a8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 40076ac:	e13ffc17 	ldw	r4,-16(fp)
 40076b0:	40073100 	call	4007310 <_Z9ACK_checkl>
 40076b4:	1080005c 	xori	r2,r2,1
 40076b8:	10803fcc 	andi	r2,r2,255
 40076bc:	10000526 	beq	r2,zero,40076d4 <_Z11OC_I2C_ReadlhhPhi+0x78>
       printf("OC_I2C_Read error[2]\r\n");
 40076c0:	01010234 	movhi	r4,1032
 40076c4:	21147604 	addi	r4,r4,20952
 40076c8:	400ea840 	call	400ea84 <puts>
       return FALSE;
 40076cc:	0005883a 	mov	r2,zero
 40076d0:	00005806 	br	4007834 <_Z11OC_I2C_ReadlhhPhi+0x1d8>
   }
   IOWR(i2c_base, 3,sub_address);
 40076d4:	e0bffc17 	ldw	r2,-16(fp)
 40076d8:	10800304 	addi	r2,r2,12
 40076dc:	1007883a 	mov	r3,r2
 40076e0:	e0bffe03 	ldbu	r2,-8(fp)
 40076e4:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 40076e8:	e0bffc17 	ldw	r2,-16(fp)
 40076ec:	10800404 	addi	r2,r2,16
 40076f0:	1007883a 	mov	r3,r2
 40076f4:	00800404 	movi	r2,16
 40076f8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 40076fc:	e13ffc17 	ldw	r4,-16(fp)
 4007700:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007704:	1080005c 	xori	r2,r2,1
 4007708:	10803fcc 	andi	r2,r2,255
 400770c:	10000526 	beq	r2,zero,4007724 <_Z11OC_I2C_ReadlhhPhi+0xc8>
        printf("OC_I2C_Read error[5]\r\n");
 4007710:	01010234 	movhi	r4,1032
 4007714:	21147c04 	addi	r4,r4,20976
 4007718:	400ea840 	call	400ea84 <puts>
        return FALSE;
 400771c:	0005883a 	mov	r2,zero
 4007720:	00004406 	br	4007834 <_Z11OC_I2C_ReadlhhPhi+0x1d8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 4007724:	e0bffc17 	ldw	r2,-16(fp)
 4007728:	10800304 	addi	r2,r2,12
 400772c:	1007883a 	mov	r3,r2
 4007730:	e0bffd03 	ldbu	r2,-12(fp)
 4007734:	10800054 	ori	r2,r2,1
 4007738:	10803fcc 	andi	r2,r2,255
 400773c:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4007740:	e0bffc17 	ldw	r2,-16(fp)
 4007744:	10800404 	addi	r2,r2,16
 4007748:	1007883a 	mov	r3,r2
 400774c:	00802404 	movi	r2,144
 4007750:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 4007754:	e13ffc17 	ldw	r4,-16(fp)
 4007758:	40073100 	call	4007310 <_Z9ACK_checkl>
 400775c:	1080005c 	xori	r2,r2,1
 4007760:	10803fcc 	andi	r2,r2,255
 4007764:	10000526 	beq	r2,zero,400777c <_Z11OC_I2C_ReadlhhPhi+0x120>
        printf("OC_I2C_Read error[8]\r\n");
 4007768:	01010234 	movhi	r4,1032
 400776c:	21148204 	addi	r4,r4,21000
 4007770:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007774:	0005883a 	mov	r2,zero
 4007778:	00002e06 	br	4007834 <_Z11OC_I2C_ReadlhhPhi+0x1d8>
    }

    for(i=0;i<nReadLength;i++){
 400777c:	e03ffa15 	stw	zero,-24(fp)
 4007780:	e0fffa17 	ldw	r3,-24(fp)
 4007784:	e0800217 	ldw	r2,8(fp)
 4007788:	1880220e 	bge	r3,r2,4007814 <_Z11OC_I2C_ReadlhhPhi+0x1b8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 400778c:	e0bffc17 	ldw	r2,-16(fp)
 4007790:	10800404 	addi	r2,r2,16
 4007794:	1009883a 	mov	r4,r2
 4007798:	e0bffa17 	ldw	r2,-24(fp)
 400779c:	10c00044 	addi	r3,r2,1
 40077a0:	e0800217 	ldw	r2,8(fp)
 40077a4:	1880021e 	bne	r3,r2,40077b0 <_Z11OC_I2C_ReadlhhPhi+0x154>
 40077a8:	00800a04 	movi	r2,40
 40077ac:	00000106 	br	40077b4 <_Z11OC_I2C_ReadlhhPhi+0x158>
 40077b0:	00800804 	movi	r2,32
 40077b4:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 40077b8:	e13ffc17 	ldw	r4,-16(fp)
 40077bc:	40075f80 	call	40075f8 <_Z18ACK_judge_for_readl>
 40077c0:	1080005c 	xori	r2,r2,1
 40077c4:	10803fcc 	andi	r2,r2,255
 40077c8:	10000526 	beq	r2,zero,40077e0 <_Z11OC_I2C_ReadlhhPhi+0x184>
            printf("OC_I2C_Read error[10]\r\n");
 40077cc:	01010234 	movhi	r4,1032
 40077d0:	21148804 	addi	r4,r4,21024
 40077d4:	400ea840 	call	400ea84 <puts>
            return FALSE;
 40077d8:	0005883a 	mov	r2,zero
 40077dc:	00001506 	br	4007834 <_Z11OC_I2C_ReadlhhPhi+0x1d8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 40077e0:	e0bffc17 	ldw	r2,-16(fp)
 40077e4:	10800304 	addi	r2,r2,12
 40077e8:	10800037 	ldwio	r2,0(r2)
 40077ec:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 40077f0:	e0bffa17 	ldw	r2,-24(fp)
 40077f4:	e0ffff17 	ldw	r3,-4(fp)
 40077f8:	1885883a 	add	r2,r3,r2
 40077fc:	e0fffb17 	ldw	r3,-20(fp)
 4007800:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 4007804:	e0bffa17 	ldw	r2,-24(fp)
 4007808:	10800044 	addi	r2,r2,1
 400780c:	e0bffa15 	stw	r2,-24(fp)
 4007810:	003fdb06 	br	4007780 <__alt_mem_epcs_flash_controller_0+0xfb006780>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 4007814:	e0bffc17 	ldw	r2,-16(fp)
 4007818:	10800404 	addi	r2,r2,16
 400781c:	1007883a 	mov	r3,r2
 4007820:	00801004 	movi	r2,64
 4007824:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007828:	01003e84 	movi	r4,250
 400782c:	401c3840 	call	401c384 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 4007830:	00800044 	movi	r2,1

}
 4007834:	e037883a 	mov	sp,fp
 4007838:	dfc00117 	ldw	ra,4(sp)
 400783c:	df000017 	ldw	fp,0(sp)
 4007840:	dec00204 	addi	sp,sp,8
 4007844:	f800283a 	ret

04007848 <_Z20OC_I2C_Read_ContinuelhPhi>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 4007848:	defff804 	addi	sp,sp,-32
 400784c:	dfc00715 	stw	ra,28(sp)
 4007850:	df000615 	stw	fp,24(sp)
 4007854:	df000604 	addi	fp,sp,24
 4007858:	e13ffc15 	stw	r4,-16(fp)
 400785c:	2805883a 	mov	r2,r5
 4007860:	e1bffe15 	stw	r6,-8(fp)
 4007864:	e1ffff15 	stw	r7,-4(fp)
 4007868:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 400786c:	e0bffc17 	ldw	r2,-16(fp)
 4007870:	10800304 	addi	r2,r2,12
 4007874:	1007883a 	mov	r3,r2
 4007878:	e0bffd03 	ldbu	r2,-12(fp)
 400787c:	10800054 	ori	r2,r2,1
 4007880:	10803fcc 	andi	r2,r2,255
 4007884:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4007888:	e0bffc17 	ldw	r2,-16(fp)
 400788c:	10800404 	addi	r2,r2,16
 4007890:	1007883a 	mov	r3,r2
 4007894:	00802404 	movi	r2,144
 4007898:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 400789c:	e13ffc17 	ldw	r4,-16(fp)
 40078a0:	40073100 	call	4007310 <_Z9ACK_checkl>
 40078a4:	1080005c 	xori	r2,r2,1
 40078a8:	10803fcc 	andi	r2,r2,255
 40078ac:	10000526 	beq	r2,zero,40078c4 <_Z20OC_I2C_Read_ContinuelhPhi+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
 40078b0:	01010234 	movhi	r4,1032
 40078b4:	21148204 	addi	r4,r4,21000
 40078b8:	400ea840 	call	400ea84 <puts>
        return FALSE;
 40078bc:	0005883a 	mov	r2,zero
 40078c0:	00002e06 	br	400797c <_Z20OC_I2C_Read_ContinuelhPhi+0x134>
    }

    for(i=0;i<nReadLength;i++){
 40078c4:	e03ffa15 	stw	zero,-24(fp)
 40078c8:	e0fffa17 	ldw	r3,-24(fp)
 40078cc:	e0bfff17 	ldw	r2,-4(fp)
 40078d0:	1880220e 	bge	r3,r2,400795c <_Z20OC_I2C_Read_ContinuelhPhi+0x114>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 40078d4:	e0bffc17 	ldw	r2,-16(fp)
 40078d8:	10800404 	addi	r2,r2,16
 40078dc:	1009883a 	mov	r4,r2
 40078e0:	e0bffa17 	ldw	r2,-24(fp)
 40078e4:	10c00044 	addi	r3,r2,1
 40078e8:	e0bfff17 	ldw	r2,-4(fp)
 40078ec:	1880021e 	bne	r3,r2,40078f8 <_Z20OC_I2C_Read_ContinuelhPhi+0xb0>
 40078f0:	00800a04 	movi	r2,40
 40078f4:	00000106 	br	40078fc <_Z20OC_I2C_Read_ContinuelhPhi+0xb4>
 40078f8:	00800804 	movi	r2,32
 40078fc:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4007900:	e13ffc17 	ldw	r4,-16(fp)
 4007904:	40075f80 	call	40075f8 <_Z18ACK_judge_for_readl>
 4007908:	1080005c 	xori	r2,r2,1
 400790c:	10803fcc 	andi	r2,r2,255
 4007910:	10000526 	beq	r2,zero,4007928 <_Z20OC_I2C_Read_ContinuelhPhi+0xe0>
            printf("OC_I2C_Read error[10]\r\n");
 4007914:	01010234 	movhi	r4,1032
 4007918:	21148804 	addi	r4,r4,21024
 400791c:	400ea840 	call	400ea84 <puts>
            return FALSE;
 4007920:	0005883a 	mov	r2,zero
 4007924:	00001506 	br	400797c <_Z20OC_I2C_Read_ContinuelhPhi+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007928:	e0bffc17 	ldw	r2,-16(fp)
 400792c:	10800304 	addi	r2,r2,12
 4007930:	10800037 	ldwio	r2,0(r2)
 4007934:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4007938:	e0bffa17 	ldw	r2,-24(fp)
 400793c:	e0fffe17 	ldw	r3,-8(fp)
 4007940:	1885883a 	add	r2,r3,r2
 4007944:	e0fffb17 	ldw	r3,-20(fp)
 4007948:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 400794c:	e0bffa17 	ldw	r2,-24(fp)
 4007950:	10800044 	addi	r2,r2,1
 4007954:	e0bffa15 	stw	r2,-24(fp)
 4007958:	003fdb06 	br	40078c8 <__alt_mem_epcs_flash_controller_0+0xfb0068c8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 400795c:	e0bffc17 	ldw	r2,-16(fp)
 4007960:	10800404 	addi	r2,r2,16
 4007964:	1007883a 	mov	r3,r2
 4007968:	00801004 	movi	r2,64
 400796c:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007970:	01003e84 	movi	r4,250
 4007974:	401c3840 	call	401c384 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 4007978:	00800044 	movi	r2,1

}
 400797c:	e037883a 	mov	sp,fp
 4007980:	dfc00117 	ldw	ra,4(sp)
 4007984:	df000017 	ldw	fp,0(sp)
 4007988:	dec00204 	addi	sp,sp,8
 400798c:	f800283a 	ret

04007990 <_Z13OC_I2CL_WritelhtPhi>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 4007990:	defff804 	addi	sp,sp,-32
 4007994:	dfc00715 	stw	ra,28(sp)
 4007998:	df000615 	stw	fp,24(sp)
 400799c:	df000604 	addi	fp,sp,24
 40079a0:	e13ffc15 	stw	r4,-16(fp)
 40079a4:	2807883a 	mov	r3,r5
 40079a8:	3005883a 	mov	r2,r6
 40079ac:	e1ffff15 	stw	r7,-4(fp)
 40079b0:	e0fffd05 	stb	r3,-12(fp)
 40079b4:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 40079b8:	e0bffe0b 	ldhu	r2,-8(fp)
 40079bc:	1004d23a 	srli	r2,r2,8
 40079c0:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 40079c4:	e0bffe0b 	ldhu	r2,-8(fp)
 40079c8:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 40079cc:	e0bffd03 	ldbu	r2,-12(fp)
 40079d0:	100d883a 	mov	r6,r2
 40079d4:	014000c4 	movi	r5,3
 40079d8:	e13ffc17 	ldw	r4,-16(fp)
 40079dc:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 40079e0:	1080005c 	xori	r2,r2,1
 40079e4:	10803fcc 	andi	r2,r2,255
 40079e8:	10000226 	beq	r2,zero,40079f4 <_Z13OC_I2CL_WritelhtPhi+0x64>
       return FALSE;
 40079ec:	0005883a 	mov	r2,zero
 40079f0:	00007d06 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 40079f4:	01802404 	movi	r6,144
 40079f8:	01400104 	movi	r5,4
 40079fc:	e13ffc17 	ldw	r4,-16(fp)
 4007a00:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007a04:	1080005c 	xori	r2,r2,1
 4007a08:	10803fcc 	andi	r2,r2,255
 4007a0c:	10000226 	beq	r2,zero,4007a18 <_Z13OC_I2CL_WritelhtPhi+0x88>
       return FALSE;
 4007a10:	0005883a 	mov	r2,zero
 4007a14:	00007406 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007a18:	e13ffc17 	ldw	r4,-16(fp)
 4007a1c:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007a20:	1080005c 	xori	r2,r2,1
 4007a24:	10803fcc 	andi	r2,r2,255
 4007a28:	10000526 	beq	r2,zero,4007a40 <_Z13OC_I2CL_WritelhtPhi+0xb0>
        printf("OC_I2CL_Write error[0]\r\n");
 4007a2c:	01010234 	movhi	r4,1032
 4007a30:	21148e04 	addi	r4,r4,21048
 4007a34:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007a38:	0005883a 	mov	r2,zero
 4007a3c:	00006a06 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007a40:	e0bffb03 	ldbu	r2,-20(fp)
 4007a44:	100d883a 	mov	r6,r2
 4007a48:	014000c4 	movi	r5,3
 4007a4c:	e13ffc17 	ldw	r4,-16(fp)
 4007a50:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007a54:	1080005c 	xori	r2,r2,1
 4007a58:	10803fcc 	andi	r2,r2,255
 4007a5c:	10000226 	beq	r2,zero,4007a68 <_Z13OC_I2CL_WritelhtPhi+0xd8>
       return FALSE;
 4007a60:	0005883a 	mov	r2,zero
 4007a64:	00006006 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007a68:	01800404 	movi	r6,16
 4007a6c:	01400104 	movi	r5,4
 4007a70:	e13ffc17 	ldw	r4,-16(fp)
 4007a74:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007a78:	1080005c 	xori	r2,r2,1
 4007a7c:	10803fcc 	andi	r2,r2,255
 4007a80:	10000226 	beq	r2,zero,4007a8c <_Z13OC_I2CL_WritelhtPhi+0xfc>
        return FALSE;
 4007a84:	0005883a 	mov	r2,zero
 4007a88:	00005706 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007a8c:	e13ffc17 	ldw	r4,-16(fp)
 4007a90:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007a94:	1080005c 	xori	r2,r2,1
 4007a98:	10803fcc 	andi	r2,r2,255
 4007a9c:	10000526 	beq	r2,zero,4007ab4 <_Z13OC_I2CL_WritelhtPhi+0x124>
        printf("OC_I2CL_Write error[1]\r\n");
 4007aa0:	01010234 	movhi	r4,1032
 4007aa4:	21149404 	addi	r4,r4,21072
 4007aa8:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007aac:	0005883a 	mov	r2,zero
 4007ab0:	00004d06 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 4007ab4:	e0bffb43 	ldbu	r2,-19(fp)
 4007ab8:	100d883a 	mov	r6,r2
 4007abc:	014000c4 	movi	r5,3
 4007ac0:	e13ffc17 	ldw	r4,-16(fp)
 4007ac4:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007ac8:	1080005c 	xori	r2,r2,1
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000226 	beq	r2,zero,4007adc <_Z13OC_I2CL_WritelhtPhi+0x14c>
       return FALSE;
 4007ad4:	0005883a 	mov	r2,zero
 4007ad8:	00004306 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 4007adc:	01800404 	movi	r6,16
 4007ae0:	01400104 	movi	r5,4
 4007ae4:	e13ffc17 	ldw	r4,-16(fp)
 4007ae8:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007aec:	e13ffc17 	ldw	r4,-16(fp)
 4007af0:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007af4:	1080005c 	xori	r2,r2,1
 4007af8:	10803fcc 	andi	r2,r2,255
 4007afc:	10000526 	beq	r2,zero,4007b14 <_Z13OC_I2CL_WritelhtPhi+0x184>
        printf("OC_I2CL_Write error[2]\r\n");
 4007b00:	01010234 	movhi	r4,1032
 4007b04:	21149a04 	addi	r4,r4,21096
 4007b08:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007b0c:	0005883a 	mov	r2,zero
 4007b10:	00003506 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 4007b14:	e03ffa15 	stw	zero,-24(fp)
 4007b18:	e0fffa17 	ldw	r3,-24(fp)
 4007b1c:	e0800217 	ldw	r2,8(fp)
 4007b20:	1880250e 	bge	r3,r2,4007bb8 <_Z13OC_I2CL_WritelhtPhi+0x228>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 4007b24:	e0bffa17 	ldw	r2,-24(fp)
 4007b28:	e0ffff17 	ldw	r3,-4(fp)
 4007b2c:	1885883a 	add	r2,r3,r2
 4007b30:	10800003 	ldbu	r2,0(r2)
 4007b34:	10803fcc 	andi	r2,r2,255
 4007b38:	100d883a 	mov	r6,r2
 4007b3c:	014000c4 	movi	r5,3
 4007b40:	e13ffc17 	ldw	r4,-16(fp)
 4007b44:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007b48:	1080005c 	xori	r2,r2,1
 4007b4c:	10803fcc 	andi	r2,r2,255
 4007b50:	10000226 	beq	r2,zero,4007b5c <_Z13OC_I2CL_WritelhtPhi+0x1cc>
            return FALSE;
 4007b54:	0005883a 	mov	r2,zero
 4007b58:	00002306 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 4007b5c:	01800404 	movi	r6,16
 4007b60:	01400104 	movi	r5,4
 4007b64:	e13ffc17 	ldw	r4,-16(fp)
 4007b68:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007b6c:	1080005c 	xori	r2,r2,1
 4007b70:	10803fcc 	andi	r2,r2,255
 4007b74:	10000226 	beq	r2,zero,4007b80 <_Z13OC_I2CL_WritelhtPhi+0x1f0>
            return FALSE;
 4007b78:	0005883a 	mov	r2,zero
 4007b7c:	00001a06 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 4007b80:	e13ffc17 	ldw	r4,-16(fp)
 4007b84:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007b88:	1080005c 	xori	r2,r2,1
 4007b8c:	10803fcc 	andi	r2,r2,255
 4007b90:	10000526 	beq	r2,zero,4007ba8 <_Z13OC_I2CL_WritelhtPhi+0x218>
             printf("OC_I2CL_Write error[3]\r\n");
 4007b94:	01010234 	movhi	r4,1032
 4007b98:	2114a004 	addi	r4,r4,21120
 4007b9c:	400ea840 	call	400ea84 <puts>
             return FALSE;
 4007ba0:	0005883a 	mov	r2,zero
 4007ba4:	00001006 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 4007ba8:	e0bffa17 	ldw	r2,-24(fp)
 4007bac:	10800044 	addi	r2,r2,1
 4007bb0:	e0bffa15 	stw	r2,-24(fp)
 4007bb4:	003fd806 	br	4007b18 <__alt_mem_epcs_flash_controller_0+0xfb006b18>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 4007bb8:	01801004 	movi	r6,64
 4007bbc:	01400104 	movi	r5,4
 4007bc0:	e13ffc17 	ldw	r4,-16(fp)
 4007bc4:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007bc8:	1080005c 	xori	r2,r2,1
 4007bcc:	10803fcc 	andi	r2,r2,255
 4007bd0:	10000226 	beq	r2,zero,4007bdc <_Z13OC_I2CL_WritelhtPhi+0x24c>
         return FALSE;
 4007bd4:	0005883a 	mov	r2,zero
 4007bd8:	00000306 	br	4007be8 <_Z13OC_I2CL_WritelhtPhi+0x258>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 4007bdc:	01003e84 	movi	r4,250
 4007be0:	401c3840 	call	401c384 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 4007be4:	00800044 	movi	r2,1
}
 4007be8:	e037883a 	mov	sp,fp
 4007bec:	dfc00117 	ldw	ra,4(sp)
 4007bf0:	df000017 	ldw	fp,0(sp)
 4007bf4:	dec00204 	addi	sp,sp,8
 4007bf8:	f800283a 	ret

04007bfc <_Z12OC_I2CL_ReadlhtPhi>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 4007bfc:	defff704 	addi	sp,sp,-36
 4007c00:	dfc00815 	stw	ra,32(sp)
 4007c04:	df000715 	stw	fp,28(sp)
 4007c08:	df000704 	addi	fp,sp,28
 4007c0c:	e13ffc15 	stw	r4,-16(fp)
 4007c10:	2807883a 	mov	r3,r5
 4007c14:	3005883a 	mov	r2,r6
 4007c18:	e1ffff15 	stw	r7,-4(fp)
 4007c1c:	e0fffd05 	stb	r3,-12(fp)
 4007c20:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4007c24:	e0bffe0b 	ldhu	r2,-8(fp)
 4007c28:	1004d23a 	srli	r2,r2,8
 4007c2c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 4007c30:	e0bffe0b 	ldhu	r2,-8(fp)
 4007c34:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4007c38:	e0bffd03 	ldbu	r2,-12(fp)
 4007c3c:	100d883a 	mov	r6,r2
 4007c40:	014000c4 	movi	r5,3
 4007c44:	e13ffc17 	ldw	r4,-16(fp)
 4007c48:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007c4c:	1080005c 	xori	r2,r2,1
 4007c50:	10803fcc 	andi	r2,r2,255
 4007c54:	10000226 	beq	r2,zero,4007c60 <_Z12OC_I2CL_ReadlhtPhi+0x64>
       return FALSE;
 4007c58:	0005883a 	mov	r2,zero
 4007c5c:	00009e06 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 4007c60:	01802404 	movi	r6,144
 4007c64:	01400104 	movi	r5,4
 4007c68:	e13ffc17 	ldw	r4,-16(fp)
 4007c6c:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007c70:	1080005c 	xori	r2,r2,1
 4007c74:	10803fcc 	andi	r2,r2,255
 4007c78:	10000226 	beq	r2,zero,4007c84 <_Z12OC_I2CL_ReadlhtPhi+0x88>
       return FALSE;
 4007c7c:	0005883a 	mov	r2,zero
 4007c80:	00009506 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007c84:	e13ffc17 	ldw	r4,-16(fp)
 4007c88:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007c8c:	1080005c 	xori	r2,r2,1
 4007c90:	10803fcc 	andi	r2,r2,255
 4007c94:	10000526 	beq	r2,zero,4007cac <_Z12OC_I2CL_ReadlhtPhi+0xb0>
        printf("OC_I2CL_Read error[0]\r\n");
 4007c98:	01010234 	movhi	r4,1032
 4007c9c:	2114a604 	addi	r4,r4,21144
 4007ca0:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007ca4:	0005883a 	mov	r2,zero
 4007ca8:	00008b06 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007cac:	e0bffa03 	ldbu	r2,-24(fp)
 4007cb0:	100d883a 	mov	r6,r2
 4007cb4:	014000c4 	movi	r5,3
 4007cb8:	e13ffc17 	ldw	r4,-16(fp)
 4007cbc:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007cc0:	1080005c 	xori	r2,r2,1
 4007cc4:	10803fcc 	andi	r2,r2,255
 4007cc8:	10000226 	beq	r2,zero,4007cd4 <_Z12OC_I2CL_ReadlhtPhi+0xd8>
       return FALSE;
 4007ccc:	0005883a 	mov	r2,zero
 4007cd0:	00008106 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007cd4:	01800404 	movi	r6,16
 4007cd8:	01400104 	movi	r5,4
 4007cdc:	e13ffc17 	ldw	r4,-16(fp)
 4007ce0:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007ce4:	1080005c 	xori	r2,r2,1
 4007ce8:	10803fcc 	andi	r2,r2,255
 4007cec:	10000226 	beq	r2,zero,4007cf8 <_Z12OC_I2CL_ReadlhtPhi+0xfc>
        return FALSE;
 4007cf0:	0005883a 	mov	r2,zero
 4007cf4:	00007806 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007cf8:	e13ffc17 	ldw	r4,-16(fp)
 4007cfc:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007d00:	1080005c 	xori	r2,r2,1
 4007d04:	10803fcc 	andi	r2,r2,255
 4007d08:	10000526 	beq	r2,zero,4007d20 <_Z12OC_I2CL_ReadlhtPhi+0x124>
        printf("OC_I2CL_Read error[1]\r\n");
 4007d0c:	01010234 	movhi	r4,1032
 4007d10:	2114ac04 	addi	r4,r4,21168
 4007d14:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007d18:	0005883a 	mov	r2,zero
 4007d1c:	00006e06 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 4007d20:	e0bffa43 	ldbu	r2,-23(fp)
 4007d24:	100d883a 	mov	r6,r2
 4007d28:	014000c4 	movi	r5,3
 4007d2c:	e13ffc17 	ldw	r4,-16(fp)
 4007d30:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007d34:	1080005c 	xori	r2,r2,1
 4007d38:	10803fcc 	andi	r2,r2,255
 4007d3c:	10000226 	beq	r2,zero,4007d48 <_Z12OC_I2CL_ReadlhtPhi+0x14c>
       return FALSE;
 4007d40:	0005883a 	mov	r2,zero
 4007d44:	00006406 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007d48:	01800404 	movi	r6,16
 4007d4c:	01400104 	movi	r5,4
 4007d50:	e13ffc17 	ldw	r4,-16(fp)
 4007d54:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007d58:	1080005c 	xori	r2,r2,1
 4007d5c:	10803fcc 	andi	r2,r2,255
 4007d60:	10000226 	beq	r2,zero,4007d6c <_Z12OC_I2CL_ReadlhtPhi+0x170>
        return FALSE;
 4007d64:	0005883a 	mov	r2,zero
 4007d68:	00005b06 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007d6c:	e13ffc17 	ldw	r4,-16(fp)
 4007d70:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007d74:	1080005c 	xori	r2,r2,1
 4007d78:	10803fcc 	andi	r2,r2,255
 4007d7c:	10000526 	beq	r2,zero,4007d94 <_Z12OC_I2CL_ReadlhtPhi+0x198>
        printf("OC_I2CL_Read error[2]\r\n");
 4007d80:	01010234 	movhi	r4,1032
 4007d84:	2114b204 	addi	r4,r4,21192
 4007d88:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007d8c:	0005883a 	mov	r2,zero
 4007d90:	00005106 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 4007d94:	e0bffd03 	ldbu	r2,-12(fp)
 4007d98:	10800054 	ori	r2,r2,1
 4007d9c:	10803fcc 	andi	r2,r2,255
 4007da0:	100d883a 	mov	r6,r2
 4007da4:	014000c4 	movi	r5,3
 4007da8:	e13ffc17 	ldw	r4,-16(fp)
 4007dac:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007db0:	1080005c 	xori	r2,r2,1
 4007db4:	10803fcc 	andi	r2,r2,255
 4007db8:	10000226 	beq	r2,zero,4007dc4 <_Z12OC_I2CL_ReadlhtPhi+0x1c8>
         return FALSE;
 4007dbc:	0005883a 	mov	r2,zero
 4007dc0:	00004506 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 4007dc4:	01802404 	movi	r6,144
 4007dc8:	01400104 	movi	r5,4
 4007dcc:	e13ffc17 	ldw	r4,-16(fp)
 4007dd0:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007dd4:	1080005c 	xori	r2,r2,1
 4007dd8:	10803fcc 	andi	r2,r2,255
 4007ddc:	10000226 	beq	r2,zero,4007de8 <_Z12OC_I2CL_ReadlhtPhi+0x1ec>
         return FALSE;
 4007de0:	0005883a 	mov	r2,zero
 4007de4:	00003c06 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007de8:	e13ffc17 	ldw	r4,-16(fp)
 4007dec:	40073100 	call	4007310 <_Z9ACK_checkl>
 4007df0:	1080005c 	xori	r2,r2,1
 4007df4:	10803fcc 	andi	r2,r2,255
 4007df8:	10000526 	beq	r2,zero,4007e10 <_Z12OC_I2CL_ReadlhtPhi+0x214>
        printf("OC_I2CL_Read error[3]\r\n");
 4007dfc:	01010234 	movhi	r4,1032
 4007e00:	2114b804 	addi	r4,r4,21216
 4007e04:	400ea840 	call	400ea84 <puts>
        return FALSE;
 4007e08:	0005883a 	mov	r2,zero
 4007e0c:	00003206 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 4007e10:	e03ff915 	stw	zero,-28(fp)
 4007e14:	e0fff917 	ldw	r3,-28(fp)
 4007e18:	e0800217 	ldw	r2,8(fp)
 4007e1c:	1880220e 	bge	r3,r2,4007ea8 <_Z12OC_I2CL_ReadlhtPhi+0x2ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4007e20:	e0bffc17 	ldw	r2,-16(fp)
 4007e24:	10800404 	addi	r2,r2,16
 4007e28:	1009883a 	mov	r4,r2
 4007e2c:	e0bff917 	ldw	r2,-28(fp)
 4007e30:	10c00044 	addi	r3,r2,1
 4007e34:	e0800217 	ldw	r2,8(fp)
 4007e38:	1880021e 	bne	r3,r2,4007e44 <_Z12OC_I2CL_ReadlhtPhi+0x248>
 4007e3c:	00800a04 	movi	r2,40
 4007e40:	00000106 	br	4007e48 <_Z12OC_I2CL_ReadlhtPhi+0x24c>
 4007e44:	00800804 	movi	r2,32
 4007e48:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4007e4c:	e13ffc17 	ldw	r4,-16(fp)
 4007e50:	40075f80 	call	40075f8 <_Z18ACK_judge_for_readl>
 4007e54:	1080005c 	xori	r2,r2,1
 4007e58:	10803fcc 	andi	r2,r2,255
 4007e5c:	10000526 	beq	r2,zero,4007e74 <_Z12OC_I2CL_ReadlhtPhi+0x278>
            printf("OC_I2CL_Read error[4]\r\n");
 4007e60:	01010234 	movhi	r4,1032
 4007e64:	2114be04 	addi	r4,r4,21240
 4007e68:	400ea840 	call	400ea84 <puts>
            return FALSE;
 4007e6c:	0005883a 	mov	r2,zero
 4007e70:	00001906 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007e74:	e0bffc17 	ldw	r2,-16(fp)
 4007e78:	10800304 	addi	r2,r2,12
 4007e7c:	10800037 	ldwio	r2,0(r2)
 4007e80:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4007e84:	e0bff917 	ldw	r2,-28(fp)
 4007e88:	e0ffff17 	ldw	r3,-4(fp)
 4007e8c:	1885883a 	add	r2,r3,r2
 4007e90:	e0fffb17 	ldw	r3,-20(fp)
 4007e94:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 4007e98:	e0bff917 	ldw	r2,-28(fp)
 4007e9c:	10800044 	addi	r2,r2,1
 4007ea0:	e0bff915 	stw	r2,-28(fp)
 4007ea4:	003fdb06 	br	4007e14 <__alt_mem_epcs_flash_controller_0+0xfb006e14>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
 4007ea8:	01801004 	movi	r6,64
 4007eac:	01400104 	movi	r5,4
 4007eb0:	e13ffc17 	ldw	r4,-16(fp)
 4007eb4:	4006f9c0 	call	4006f9c <_Z12Write32_Datalll>
 4007eb8:	1080005c 	xori	r2,r2,1
 4007ebc:	10803fcc 	andi	r2,r2,255
 4007ec0:	10000226 	beq	r2,zero,4007ecc <_Z12OC_I2CL_ReadlhtPhi+0x2d0>
       return FALSE;
 4007ec4:	0005883a 	mov	r2,zero
 4007ec8:	00000306 	br	4007ed8 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007ecc:	01003e84 	movi	r4,250
 4007ed0:	401c3840 	call	401c384 <usleep>

   return TRUE;
 4007ed4:	00800044 	movi	r2,1

}
 4007ed8:	e037883a 	mov	sp,fp
 4007edc:	dfc00117 	ldw	ra,4(sp)
 4007ee0:	df000017 	ldw	fp,0(sp)
 4007ee4:	dec00204 	addi	sp,sp,8
 4007ee8:	f800283a 	ret

04007eec <_Z10Light_Initm>:

////////////////////////////////////////
// export API
static alt_u32 Light_I2C_Controller_Base = LIGHT_I2C_OPENCORES_BASE;

void Light_Init(alt_u32 I2C_Controller_Base){
 4007eec:	defffb04 	addi	sp,sp,-20
 4007ef0:	dfc00415 	stw	ra,16(sp)
 4007ef4:	df000315 	stw	fp,12(sp)
 4007ef8:	df000304 	addi	fp,sp,12
 4007efc:	e13fff15 	stw	r4,-4(fp)
	const int Ref_CLK = 50*1000*1000; // 50MHz
 4007f00:	0080bef4 	movhi	r2,763
 4007f04:	10bc2004 	addi	r2,r2,-3968
 4007f08:	e0bffd15 	stw	r2,-12(fp)
	const int I2C_CLK = 400*1000; // 400KHz
 4007f0c:	008001b4 	movhi	r2,6
 4007f10:	1086a004 	addi	r2,r2,6784
 4007f14:	e0bffe15 	stw	r2,-8(fp)

	Light_I2C_Controller_Base = I2C_Controller_Base;
 4007f18:	e0bfff17 	ldw	r2,-4(fp)
 4007f1c:	d0a00115 	stw	r2,-32764(gp)
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
 4007f20:	d0a00117 	ldw	r2,-32764(gp)
 4007f24:	018001b4 	movhi	r6,6
 4007f28:	3186a004 	addi	r6,r6,6784
 4007f2c:	0140bef4 	movhi	r5,763
 4007f30:	297c2004 	addi	r5,r5,-3968
 4007f34:	1009883a 	mov	r4,r2
 4007f38:	40070ac0 	call	40070ac <_Z14oc_i2c_init_exlll>
}
 4007f3c:	0001883a 	nop
 4007f40:	e037883a 	mov	sp,fp
 4007f44:	dfc00117 	ldw	ra,4(sp)
 4007f48:	df000017 	ldw	fp,0(sp)
 4007f4c:	dec00204 	addi	sp,sp,8
 4007f50:	f800283a 	ret

04007f54 <_Z11Light_GetIDPh>:

void Light_GetID(alt_u8 *data)
{
 4007f54:	defffc04 	addi	sp,sp,-16
 4007f58:	dfc00315 	stw	ra,12(sp)
 4007f5c:	df000215 	stw	fp,8(sp)
 4007f60:	df000204 	addi	fp,sp,8
 4007f64:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | ID_REG ;
 4007f68:	00bfe284 	movi	r2,-118
 4007f6c:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
 4007f70:	e0bffe03 	ldbu	r2,-8(fp)
 4007f74:	e1bfff17 	ldw	r6,-4(fp)
 4007f78:	100b883a 	mov	r5,r2
 4007f7c:	01001484 	movi	r4,82
 4007f80:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 4007f84:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
 4007f88:	e0bffe43 	ldbu	r2,-7(fp)
 4007f8c:	1080005c 	xori	r2,r2,1
 4007f90:	10803fcc 	andi	r2,r2,255
 4007f94:	10000226 	beq	r2,zero,4007fa0 <_Z11Light_GetIDPh+0x4c>
 4007f98:	e0bfff17 	ldw	r2,-4(fp)
 4007f9c:	10000005 	stb	zero,0(r2)

}
 4007fa0:	0001883a 	nop
 4007fa4:	e037883a 	mov	sp,fp
 4007fa8:	dfc00117 	ldw	ra,4(sp)
 4007fac:	df000017 	ldw	fp,0(sp)
 4007fb0:	dec00204 	addi	sp,sp,8
 4007fb4:	f800283a 	ret

04007fb8 <_Z15Light_GetTimingPh>:

void Light_GetTiming(alt_u8 *data)
{
 4007fb8:	defffc04 	addi	sp,sp,-16
 4007fbc:	dfc00315 	stw	ra,12(sp)
 4007fc0:	df000215 	stw	fp,8(sp)
 4007fc4:	df000204 	addi	fp,sp,8
 4007fc8:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
 4007fcc:	00bfe044 	movi	r2,-127
 4007fd0:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
 4007fd4:	e0bffe03 	ldbu	r2,-8(fp)
 4007fd8:	e1bfff17 	ldw	r6,-4(fp)
 4007fdc:	100b883a 	mov	r5,r2
 4007fe0:	01001484 	movi	r4,82
 4007fe4:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 4007fe8:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
 4007fec:	e0bffe43 	ldbu	r2,-7(fp)
 4007ff0:	1080005c 	xori	r2,r2,1
 4007ff4:	10803fcc 	andi	r2,r2,255
 4007ff8:	10000226 	beq	r2,zero,4008004 <_Z15Light_GetTimingPh+0x4c>
 4007ffc:	e0bfff17 	ldw	r2,-4(fp)
 4008000:	10000005 	stb	zero,0(r2)

}
 4008004:	0001883a 	nop
 4008008:	e037883a 	mov	sp,fp
 400800c:	dfc00117 	ldw	ra,4(sp)
 4008010:	df000017 	ldw	fp,0(sp)
 4008014:	dec00204 	addi	sp,sp,8
 4008018:	f800283a 	ret

0400801c <_Z17Light_PowerSwitchb>:

bool Light_PowerSwitch(bool bSwitch)
{
 400801c:	defffc04 	addi	sp,sp,-16
 4008020:	dfc00315 	stw	ra,12(sp)
 4008024:	df000215 	stw	fp,8(sp)
 4008028:	df000204 	addi	fp,sp,8
 400802c:	2005883a 	mov	r2,r4
 4008030:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 data = 0;
 4008034:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;
 4008038:	00bfe004 	movi	r2,-128
 400803c:	e0bffe45 	stb	r2,-7(fp)
    
    data = bSwitch ? 0x03 : 0x00 ;
 4008040:	e0bfff03 	ldbu	r2,-4(fp)
 4008044:	10000226 	beq	r2,zero,4008050 <_Z17Light_PowerSwitchb+0x34>
 4008048:	008000c4 	movi	r2,3
 400804c:	00000106 	br	4008054 <_Z17Light_PowerSwitchb+0x38>
 4008050:	0005883a 	mov	r2,zero
 4008054:	e0bffe05 	stb	r2,-8(fp)
   
    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
 4008058:	e0bffe43 	ldbu	r2,-7(fp)
 400805c:	e0fffe03 	ldbu	r3,-8(fp)
 4008060:	180d883a 	mov	r6,r3
 4008064:	100b883a 	mov	r5,r2
 4008068:	01001484 	movi	r4,82
 400806c:	40084200 	call	4008420 <_Z15I2C_Write_Lightahh>
 4008070:	e0bffe85 	stb	r2,-6(fp)
    
    return bPass;
 4008074:	e0bffe83 	ldbu	r2,-6(fp)
}
 4008078:	e037883a 	mov	sp,fp
 400807c:	dfc00117 	ldw	ra,4(sp)
 4008080:	df000017 	ldw	fp,0(sp)
 4008084:	dec00204 	addi	sp,sp,8
 4008088:	f800283a 	ret

0400808c <_Z18Light_Get_ADCData0Pt>:

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
 400808c:	defffc04 	addi	sp,sp,-16
 4008090:	dfc00315 	stw	ra,12(sp)
 4008094:	df000215 	stw	fp,8(sp)
 4008098:	df000204 	addi	fp,sp,8
 400809c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data0Low, Data0High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA0LOW ;
 40080a0:	00bfe304 	movi	r2,-116
 40080a4:	e0bffe05 	stb	r2,-8(fp)
    //alt_u8 CommandCode = 0x8C;
    
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
 40080a8:	e0bffe03 	ldbu	r2,-8(fp)
 40080ac:	e0fffe84 	addi	r3,fp,-6
 40080b0:	180d883a 	mov	r6,r3
 40080b4:	100b883a 	mov	r5,r2
 40080b8:	01001484 	movi	r4,82
 40080bc:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 40080c0:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass) 
 40080c4:	e0bffe43 	ldbu	r2,-7(fp)
 40080c8:	1080005c 	xori	r2,r2,1
 40080cc:	10803fcc 	andi	r2,r2,255
 40080d0:	10000226 	beq	r2,zero,40080dc <_Z18Light_Get_ADCData0Pt+0x50>
    {
         return FALSE;
 40080d4:	0005883a 	mov	r2,zero
 40080d8:	00002506 	br	4008170 <_Z18Light_Get_ADCData0Pt+0xe4>
    }
    else *pChannelData = Data0Low;
 40080dc:	e0bffe83 	ldbu	r2,-6(fp)
 40080e0:	10c03fcc 	andi	r3,r2,255
 40080e4:	e0bfff17 	ldw	r2,-4(fp)
 40080e8:	10c0000d 	sth	r3,0(r2)
    
    if(bPass)
 40080ec:	e0bffe43 	ldbu	r2,-7(fp)
 40080f0:	10001426 	beq	r2,zero,4008144 <_Z18Light_Get_ADCData0Pt+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA0HIGH ;
 40080f4:	00bfe344 	movi	r2,-115
 40080f8:	e0bffe05 	stb	r2,-8(fp)
        //CommandCode = 0x8D;
  
        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
 40080fc:	e0bffe03 	ldbu	r2,-8(fp)
 4008100:	e0fffec4 	addi	r3,fp,-5
 4008104:	180d883a 	mov	r6,r3
 4008108:	100b883a 	mov	r5,r2
 400810c:	01001484 	movi	r4,82
 4008110:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 4008114:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)  
 4008118:	e0bffe43 	ldbu	r2,-7(fp)
 400811c:	1080005c 	xori	r2,r2,1
 4008120:	10803fcc 	andi	r2,r2,255
 4008124:	10000226 	beq	r2,zero,4008130 <_Z18Light_Get_ADCData0Pt+0xa4>
        {
            return FALSE;
 4008128:	0005883a 	mov	r2,zero
 400812c:	00001006 	br	4008170 <_Z18Light_Get_ADCData0Pt+0xe4>
        }
        else *(pChannelData+1) = Data0High;
 4008130:	e0bfff17 	ldw	r2,-4(fp)
 4008134:	10800084 	addi	r2,r2,2
 4008138:	e0fffec3 	ldbu	r3,-5(fp)
 400813c:	18c03fcc 	andi	r3,r3,255
 4008140:	10c0000d 	sth	r3,0(r2)
    }
    
    *pChannelData = (Data0High << 8) | Data0Low;
 4008144:	e0bffec3 	ldbu	r2,-5(fp)
 4008148:	10803fcc 	andi	r2,r2,255
 400814c:	1004923a 	slli	r2,r2,8
 4008150:	1007883a 	mov	r3,r2
 4008154:	e0bffe83 	ldbu	r2,-6(fp)
 4008158:	10803fcc 	andi	r2,r2,255
 400815c:	1884b03a 	or	r2,r3,r2
 4008160:	1007883a 	mov	r3,r2
 4008164:	e0bfff17 	ldw	r2,-4(fp)
 4008168:	10c0000d 	sth	r3,0(r2)
    
    return TRUE;
 400816c:	00800044 	movi	r2,1
}
 4008170:	e037883a 	mov	sp,fp
 4008174:	dfc00117 	ldw	ra,4(sp)
 4008178:	df000017 	ldw	fp,0(sp)
 400817c:	dec00204 	addi	sp,sp,8
 4008180:	f800283a 	ret

04008184 <_Z18Light_Get_ADCData1Pt>:

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
 4008184:	defffc04 	addi	sp,sp,-16
 4008188:	dfc00315 	stw	ra,12(sp)
 400818c:	df000215 	stw	fp,8(sp)
 4008190:	df000204 	addi	fp,sp,8
 4008194:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data1Low, Data1High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;
 4008198:	00bfe384 	movi	r2,-114
 400819c:	e0bffe05 	stb	r2,-8(fp)
    
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
 40081a0:	e0bffe03 	ldbu	r2,-8(fp)
 40081a4:	e0fffe84 	addi	r3,fp,-6
 40081a8:	180d883a 	mov	r6,r3
 40081ac:	100b883a 	mov	r5,r2
 40081b0:	01001484 	movi	r4,82
 40081b4:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 40081b8:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass) 
 40081bc:	e0bffe43 	ldbu	r2,-7(fp)
 40081c0:	1080005c 	xori	r2,r2,1
 40081c4:	10803fcc 	andi	r2,r2,255
 40081c8:	10000226 	beq	r2,zero,40081d4 <_Z18Light_Get_ADCData1Pt+0x50>
    {
         return FALSE;
 40081cc:	0005883a 	mov	r2,zero
 40081d0:	00002506 	br	4008268 <_Z18Light_Get_ADCData1Pt+0xe4>
    }
    else *pChannelData = Data1Low;
 40081d4:	e0bffe83 	ldbu	r2,-6(fp)
 40081d8:	10c03fcc 	andi	r3,r2,255
 40081dc:	e0bfff17 	ldw	r2,-4(fp)
 40081e0:	10c0000d 	sth	r3,0(r2)
    
    if(bPass)
 40081e4:	e0bffe43 	ldbu	r2,-7(fp)
 40081e8:	10001426 	beq	r2,zero,400823c <_Z18Light_Get_ADCData1Pt+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA1HIGH ;
 40081ec:	00bfe3c4 	movi	r2,-113
 40081f0:	e0bffe05 	stb	r2,-8(fp)
  
        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
 40081f4:	e0bffe03 	ldbu	r2,-8(fp)
 40081f8:	e0fffec4 	addi	r3,fp,-5
 40081fc:	180d883a 	mov	r6,r3
 4008200:	100b883a 	mov	r5,r2
 4008204:	01001484 	movi	r4,82
 4008208:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 400820c:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)  
 4008210:	e0bffe43 	ldbu	r2,-7(fp)
 4008214:	1080005c 	xori	r2,r2,1
 4008218:	10803fcc 	andi	r2,r2,255
 400821c:	10000226 	beq	r2,zero,4008228 <_Z18Light_Get_ADCData1Pt+0xa4>
        {
            return FALSE;
 4008220:	0005883a 	mov	r2,zero
 4008224:	00001006 	br	4008268 <_Z18Light_Get_ADCData1Pt+0xe4>
        }
        else *(pChannelData+1) = Data1High;
 4008228:	e0bfff17 	ldw	r2,-4(fp)
 400822c:	10800084 	addi	r2,r2,2
 4008230:	e0fffec3 	ldbu	r3,-5(fp)
 4008234:	18c03fcc 	andi	r3,r3,255
 4008238:	10c0000d 	sth	r3,0(r2)
    }
    
    *pChannelData = (Data1High << 8) | Data1Low;
 400823c:	e0bffec3 	ldbu	r2,-5(fp)
 4008240:	10803fcc 	andi	r2,r2,255
 4008244:	1004923a 	slli	r2,r2,8
 4008248:	1007883a 	mov	r3,r2
 400824c:	e0bffe83 	ldbu	r2,-6(fp)
 4008250:	10803fcc 	andi	r2,r2,255
 4008254:	1884b03a 	or	r2,r3,r2
 4008258:	1007883a 	mov	r3,r2
 400825c:	e0bfff17 	ldw	r2,-4(fp)
 4008260:	10c0000d 	sth	r3,0(r2)
    
    return TRUE;
 4008264:	00800044 	movi	r2,1
}
 4008268:	e037883a 	mov	sp,fp
 400826c:	dfc00117 	ldw	ra,4(sp)
 4008270:	df000017 	ldw	fp,0(sp)
 4008274:	dec00204 	addi	sp,sp,8
 4008278:	f800283a 	ret

0400827c <_Z18Light_SetThreshLowPh>:

bool Light_SetThreshLow(alt_u8 *pData)
{
 400827c:	defffc04 	addi	sp,sp,-16
 4008280:	dfc00315 	stw	ra,12(sp)
 4008284:	df000215 	stw	fp,8(sp)
 4008288:	df000204 	addi	fp,sp,8
 400828c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHLOWLOW_REG ;
 4008290:	00bfe884 	movi	r2,-94
 4008294:	e0bffe05 	stb	r2,-8(fp)
    
    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
 4008298:	e0bffe03 	ldbu	r2,-8(fp)
 400829c:	e1bfff17 	ldw	r6,-4(fp)
 40082a0:	100b883a 	mov	r5,r2
 40082a4:	01001484 	movi	r4,82
 40082a8:	40084940 	call	4008494 <_Z17I2C_Write_Light16ahPh>
 40082ac:	e0bffe45 	stb	r2,-7(fp)
//        
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }
    
    return bPass;
 40082b0:	e0bffe43 	ldbu	r2,-7(fp)
}
 40082b4:	e037883a 	mov	sp,fp
 40082b8:	dfc00117 	ldw	ra,4(sp)
 40082bc:	df000017 	ldw	fp,0(sp)
 40082c0:	dec00204 	addi	sp,sp,8
 40082c4:	f800283a 	ret

040082c8 <_Z19Light_SetThreshHighPh>:

bool Light_SetThreshHigh(alt_u8 *pData)
{
 40082c8:	defffc04 	addi	sp,sp,-16
 40082cc:	dfc00315 	stw	ra,12(sp)
 40082d0:	df000215 	stw	fp,8(sp)
 40082d4:	df000204 	addi	fp,sp,8
 40082d8:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHHIGHLOW_REG ;
 40082dc:	00bfe904 	movi	r2,-92
 40082e0:	e0bffe05 	stb	r2,-8(fp)
    
    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
 40082e4:	e0bffe03 	ldbu	r2,-8(fp)
 40082e8:	e1bfff17 	ldw	r6,-4(fp)
 40082ec:	100b883a 	mov	r5,r2
 40082f0:	01001484 	movi	r4,82
 40082f4:	40084940 	call	4008494 <_Z17I2C_Write_Light16ahPh>
 40082f8:	e0bffe45 	stb	r2,-7(fp)
//        
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }
    
    return bPass;
 40082fc:	e0bffe43 	ldbu	r2,-7(fp)
}
 4008300:	e037883a 	mov	sp,fp
 4008304:	dfc00117 	ldw	ra,4(sp)
 4008308:	df000017 	ldw	fp,0(sp)
 400830c:	dec00204 	addi	sp,sp,8
 4008310:	f800283a 	ret

04008314 <_Z18Light_SetInterrupth>:

bool Light_SetInterrupt(alt_u8 data)
{
 4008314:	defffc04 	addi	sp,sp,-16
 4008318:	dfc00315 	stw	ra,12(sp)
 400831c:	df000215 	stw	fp,8(sp)
 4008320:	df000204 	addi	fp,sp,8
 4008324:	2005883a 	mov	r2,r4
 4008328:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
 400832c:	00bfe184 	movi	r2,-122
 4008330:	e0bffe05 	stb	r2,-8(fp)
    
    bPass = I2C_Write_Light(DEVICE_ADDR,CommandCode , data);
 4008334:	e0bffe03 	ldbu	r2,-8(fp)
 4008338:	e0ffff03 	ldbu	r3,-4(fp)
 400833c:	180d883a 	mov	r6,r3
 4008340:	100b883a 	mov	r5,r2
 4008344:	01001484 	movi	r4,82
 4008348:	40084200 	call	4008420 <_Z15I2C_Write_Lightahh>
 400834c:	e0bffe45 	stb	r2,-7(fp)
    
    return bPass;
 4008350:	e0bffe43 	ldbu	r2,-7(fp)
}
 4008354:	e037883a 	mov	sp,fp
 4008358:	dfc00117 	ldw	ra,4(sp)
 400835c:	df000017 	ldw	fp,0(sp)
 4008360:	dec00204 	addi	sp,sp,8
 4008364:	f800283a 	ret

04008368 <_Z18Light_GetInterruptPh>:

void Light_GetInterrupt(alt_u8 *data)
{
 4008368:	defffc04 	addi	sp,sp,-16
 400836c:	dfc00315 	stw	ra,12(sp)
 4008370:	df000215 	stw	fp,8(sp)
 4008374:	df000204 	addi	fp,sp,8
 4008378:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
 400837c:	00bfe184 	movi	r2,-122
 4008380:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
 4008384:	e0bffe03 	ldbu	r2,-8(fp)
 4008388:	e1bfff17 	ldw	r6,-4(fp)
 400838c:	100b883a 	mov	r5,r2
 4008390:	01001484 	movi	r4,82
 4008394:	40085040 	call	4008504 <_Z14I2C_Read_LightahPh>
 4008398:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
 400839c:	e0bffe43 	ldbu	r2,-7(fp)
 40083a0:	1080005c 	xori	r2,r2,1
 40083a4:	10803fcc 	andi	r2,r2,255
 40083a8:	10000226 	beq	r2,zero,40083b4 <_Z18Light_GetInterruptPh+0x4c>
 40083ac:	e0bfff17 	ldw	r2,-4(fp)
 40083b0:	10000005 	stb	zero,0(r2)
}
 40083b4:	0001883a 	nop
 40083b8:	e037883a 	mov	sp,fp
 40083bc:	dfc00117 	ldw	ra,4(sp)
 40083c0:	df000017 	ldw	fp,0(sp)
 40083c4:	dec00204 	addi	sp,sp,8
 40083c8:	f800283a 	ret

040083cc <_Z15Light_SetTimingh>:

bool Light_SetTiming(alt_u8 data)
{
 40083cc:	defffc04 	addi	sp,sp,-16
 40083d0:	dfc00315 	stw	ra,12(sp)
 40083d4:	df000215 	stw	fp,8(sp)
 40083d8:	df000204 	addi	fp,sp,8
 40083dc:	2005883a 	mov	r2,r4
 40083e0:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
 40083e4:	00bfe044 	movi	r2,-127
 40083e8:	e0bffe05 	stb	r2,-8(fp)
    
    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
 40083ec:	e0bffe03 	ldbu	r2,-8(fp)
 40083f0:	e0ffff03 	ldbu	r3,-4(fp)
 40083f4:	180d883a 	mov	r6,r3
 40083f8:	100b883a 	mov	r5,r2
 40083fc:	01001484 	movi	r4,82
 4008400:	40084200 	call	4008420 <_Z15I2C_Write_Lightahh>
 4008404:	e0bffe45 	stb	r2,-7(fp)
    
    return bPass;
 4008408:	e0bffe43 	ldbu	r2,-7(fp)
}
 400840c:	e037883a 	mov	sp,fp
 4008410:	dfc00117 	ldw	ra,4(sp)
 4008414:	df000017 	ldw	fp,0(sp)
 4008418:	dec00204 	addi	sp,sp,8
 400841c:	f800283a 	ret

04008420 <_Z15I2C_Write_Lightahh>:

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
 4008420:	defff904 	addi	sp,sp,-28
 4008424:	dfc00615 	stw	ra,24(sp)
 4008428:	df000515 	stw	fp,20(sp)
 400842c:	df000504 	addi	fp,sp,20
 4008430:	2807883a 	mov	r3,r5
 4008434:	3005883a 	mov	r2,r6
 4008438:	e13ffd05 	stb	r4,-12(fp)
 400843c:	e0fffe05 	stb	r3,-8(fp)
 4008440:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
 4008444:	d0a00117 	ldw	r2,-32764(gp)
 4008448:	1011883a 	mov	r8,r2
 400844c:	e0bffd03 	ldbu	r2,-12(fp)
 4008450:	10c03fcc 	andi	r3,r2,255
 4008454:	e13ffe03 	ldbu	r4,-8(fp)
 4008458:	e17fff04 	addi	r5,fp,-4
 400845c:	00800044 	movi	r2,1
 4008460:	d8800015 	stw	r2,0(sp)
 4008464:	280f883a 	mov	r7,r5
 4008468:	200d883a 	mov	r6,r4
 400846c:	180b883a 	mov	r5,r3
 4008470:	4009883a 	mov	r4,r8
 4008474:	40073ac0 	call	40073ac <_Z12OC_I2C_WritelhhPhi>
 4008478:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
 400847c:	e0bffc03 	ldbu	r2,-16(fp)


}
 4008480:	e037883a 	mov	sp,fp
 4008484:	dfc00117 	ldw	ra,4(sp)
 4008488:	df000017 	ldw	fp,0(sp)
 400848c:	dec00204 	addi	sp,sp,8
 4008490:	f800283a 	ret

04008494 <_Z17I2C_Write_Light16ahPh>:

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
 4008494:	defff904 	addi	sp,sp,-28
 4008498:	dfc00615 	stw	ra,24(sp)
 400849c:	df000515 	stw	fp,20(sp)
 40084a0:	df000504 	addi	fp,sp,20
 40084a4:	2007883a 	mov	r3,r4
 40084a8:	2805883a 	mov	r2,r5
 40084ac:	e1bfff15 	stw	r6,-4(fp)
 40084b0:	e0fffd05 	stb	r3,-12(fp)
 40084b4:	e0bffe05 	stb	r2,-8(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
 40084b8:	d0a00117 	ldw	r2,-32764(gp)
 40084bc:	1011883a 	mov	r8,r2
 40084c0:	e0bffd03 	ldbu	r2,-12(fp)
 40084c4:	10c03fcc 	andi	r3,r2,255
 40084c8:	e13ffe03 	ldbu	r4,-8(fp)
 40084cc:	00800084 	movi	r2,2
 40084d0:	d8800015 	stw	r2,0(sp)
 40084d4:	e1ffff17 	ldw	r7,-4(fp)
 40084d8:	200d883a 	mov	r6,r4
 40084dc:	180b883a 	mov	r5,r3
 40084e0:	4009883a 	mov	r4,r8
 40084e4:	40073ac0 	call	40073ac <_Z12OC_I2C_WritelhhPhi>
 40084e8:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
 40084ec:	e0bffc03 	ldbu	r2,-16(fp)


}
 40084f0:	e037883a 	mov	sp,fp
 40084f4:	dfc00117 	ldw	ra,4(sp)
 40084f8:	df000017 	ldw	fp,0(sp)
 40084fc:	dec00204 	addi	sp,sp,8
 4008500:	f800283a 	ret

04008504 <_Z14I2C_Read_LightahPh>:

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
 4008504:	defff904 	addi	sp,sp,-28
 4008508:	dfc00615 	stw	ra,24(sp)
 400850c:	df000515 	stw	fp,20(sp)
 4008510:	df000504 	addi	fp,sp,20
 4008514:	2007883a 	mov	r3,r4
 4008518:	2805883a 	mov	r2,r5
 400851c:	e1bfff15 	stw	r6,-4(fp)
 4008520:	e0fffd05 	stb	r3,-12(fp)
 4008524:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
 4008528:	d0a00117 	ldw	r2,-32764(gp)
 400852c:	1011883a 	mov	r8,r2
 4008530:	e0bffd03 	ldbu	r2,-12(fp)
 4008534:	10c03fcc 	andi	r3,r2,255
 4008538:	e13ffe03 	ldbu	r4,-8(fp)
 400853c:	00800044 	movi	r2,1
 4008540:	d8800015 	stw	r2,0(sp)
 4008544:	e1ffff17 	ldw	r7,-4(fp)
 4008548:	200d883a 	mov	r6,r4
 400854c:	180b883a 	mov	r5,r3
 4008550:	4009883a 	mov	r4,r8
 4008554:	400765c0 	call	400765c <_Z11OC_I2C_ReadlhhPhi>
 4008558:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
 400855c:	e0bffc03 	ldbu	r2,-16(fp)
}
 4008560:	e037883a 	mov	sp,fp
 4008564:	dfc00117 	ldw	ra,4(sp)
 4008568:	df000017 	ldw	fp,0(sp)
 400856c:	dec00204 	addi	sp,sp,8
 4008570:	f800283a 	ret

04008574 <_ZL14mtc2_QueryDataP9MTC2_INFO>:
#define TRUE 1


#define I2C_FT5316_ADDR    0x70

static void mtc2_QueryData(MTC2_INFO *p){
 4008574:	deffe804 	addi	sp,sp,-96
 4008578:	dfc01715 	stw	ra,92(sp)
 400857c:	df001615 	stw	fp,88(sp)
 4008580:	df001604 	addi	fp,sp,88
 4008584:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;

    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
 4008588:	e0bfff17 	ldw	r2,-4(fp)
 400858c:	10800017 	ldw	r2,0(r2)
 4008590:	1009883a 	mov	r4,r2
 4008594:	e0fff704 	addi	r3,fp,-36
 4008598:	008007c4 	movi	r2,31
 400859c:	d8800015 	stw	r2,0(sp)
 40085a0:	180f883a 	mov	r7,r3
 40085a4:	000d883a 	mov	r6,zero
 40085a8:	01401c04 	movi	r5,112
 40085ac:	400765c0 	call	400765c <_Z11OC_I2C_ReadlhhPhi>
 40085b0:	10803fcc 	andi	r2,r2,255
 40085b4:	10009f26 	beq	r2,zero,4008834 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x2c0>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
 40085b8:	01000584 	movi	r4,22
 40085bc:	400deb40 	call	400deb4 <malloc>
 40085c0:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
 40085c4:	e0fff743 	ldbu	r3,-35(fp)
 40085c8:	e0bfeb17 	ldw	r2,-84(fp)
 40085cc:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
 40085d0:	e0fff783 	ldbu	r3,-34(fp)
 40085d4:	e0bfeb17 	ldw	r2,-84(fp)
 40085d8:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
 40085dc:	e0bff7c3 	ldbu	r2,-33(fp)
 40085e0:	10803fcc 	andi	r2,r2,255
 40085e4:	108003cc 	andi	r2,r2,15
 40085e8:	1006923a 	slli	r3,r2,8
 40085ec:	e0bff803 	ldbu	r2,-32(fp)
 40085f0:	10803fcc 	andi	r2,r2,255
 40085f4:	1884b03a 	or	r2,r3,r2
 40085f8:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
 40085fc:	e0bff843 	ldbu	r2,-31(fp)
 4008600:	10803fcc 	andi	r2,r2,255
 4008604:	108003cc 	andi	r2,r2,15
 4008608:	1006923a 	slli	r3,r2,8
 400860c:	e0bff883 	ldbu	r2,-30(fp)
 4008610:	10803fcc 	andi	r2,r2,255
 4008614:	1884b03a 	or	r2,r3,r2
 4008618:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
 400861c:	e0bff943 	ldbu	r2,-27(fp)
 4008620:	10803fcc 	andi	r2,r2,255
 4008624:	108003cc 	andi	r2,r2,15
 4008628:	1006923a 	slli	r3,r2,8
 400862c:	e0bff983 	ldbu	r2,-26(fp)
 4008630:	10803fcc 	andi	r2,r2,255
 4008634:	1884b03a 	or	r2,r3,r2
 4008638:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
 400863c:	e0bff9c3 	ldbu	r2,-25(fp)
 4008640:	10803fcc 	andi	r2,r2,255
 4008644:	108003cc 	andi	r2,r2,15
 4008648:	1006923a 	slli	r3,r2,8
 400864c:	e0bffa03 	ldbu	r2,-24(fp)
 4008650:	10803fcc 	andi	r2,r2,255
 4008654:	1884b03a 	or	r2,r3,r2
 4008658:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
 400865c:	e0bffac3 	ldbu	r2,-21(fp)
 4008660:	10803fcc 	andi	r2,r2,255
 4008664:	108003cc 	andi	r2,r2,15
 4008668:	1006923a 	slli	r3,r2,8
 400866c:	e0bffb03 	ldbu	r2,-20(fp)
 4008670:	10803fcc 	andi	r2,r2,255
 4008674:	1884b03a 	or	r2,r3,r2
 4008678:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
 400867c:	e0bffb43 	ldbu	r2,-19(fp)
 4008680:	10803fcc 	andi	r2,r2,255
 4008684:	108003cc 	andi	r2,r2,15
 4008688:	1006923a 	slli	r3,r2,8
 400868c:	e0bffb83 	ldbu	r2,-18(fp)
 4008690:	10803fcc 	andi	r2,r2,255
 4008694:	1884b03a 	or	r2,r3,r2
 4008698:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
 400869c:	e0bffc43 	ldbu	r2,-15(fp)
 40086a0:	10803fcc 	andi	r2,r2,255
 40086a4:	108003cc 	andi	r2,r2,15
 40086a8:	1006923a 	slli	r3,r2,8
 40086ac:	e0bffc83 	ldbu	r2,-14(fp)
 40086b0:	10803fcc 	andi	r2,r2,255
 40086b4:	1884b03a 	or	r2,r3,r2
 40086b8:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
 40086bc:	e0bffcc3 	ldbu	r2,-13(fp)
 40086c0:	10803fcc 	andi	r2,r2,255
 40086c4:	108003cc 	andi	r2,r2,15
 40086c8:	1006923a 	slli	r3,r2,8
 40086cc:	e0bffd03 	ldbu	r2,-12(fp)
 40086d0:	10803fcc 	andi	r2,r2,255
 40086d4:	1884b03a 	or	r2,r3,r2
 40086d8:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
 40086dc:	e0bffdc3 	ldbu	r2,-9(fp)
 40086e0:	10803fcc 	andi	r2,r2,255
 40086e4:	108003cc 	andi	r2,r2,15
 40086e8:	1006923a 	slli	r3,r2,8
 40086ec:	e0bffe03 	ldbu	r2,-8(fp)
 40086f0:	10803fcc 	andi	r2,r2,255
 40086f4:	1884b03a 	or	r2,r3,r2
 40086f8:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
 40086fc:	e0bffe43 	ldbu	r2,-7(fp)
 4008700:	10803fcc 	andi	r2,r2,255
 4008704:	108003cc 	andi	r2,r2,15
 4008708:	1006923a 	slli	r3,r2,8
 400870c:	e0bffe83 	ldbu	r2,-6(fp)
 4008710:	10803fcc 	andi	r2,r2,255
 4008714:	1884b03a 	or	r2,r3,r2
 4008718:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
 400871c:	e0bfec17 	ldw	r2,-80(fp)
 4008720:	1080c824 	muli	r2,r2,800
 4008724:	1004d2ba 	srli	r2,r2,10
 4008728:	1007883a 	mov	r3,r2
 400872c:	e0bfeb17 	ldw	r2,-84(fp)
 4008730:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
 4008734:	e0bfed17 	ldw	r2,-76(fp)
 4008738:	01400284 	movi	r5,10
 400873c:	1009883a 	mov	r4,r2
 4008740:	400a1140 	call	400a114 <__udivsi3>
 4008744:	100490fa 	slli	r2,r2,3
 4008748:	1007883a 	mov	r3,r2
 400874c:	e0bfeb17 	ldw	r2,-84(fp)
 4008750:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
 4008754:	e0bfee17 	ldw	r2,-72(fp)
 4008758:	1080c824 	muli	r2,r2,800
 400875c:	1004d2ba 	srli	r2,r2,10
 4008760:	1007883a 	mov	r3,r2
 4008764:	e0bfeb17 	ldw	r2,-84(fp)
 4008768:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
 400876c:	e0bfef17 	ldw	r2,-68(fp)
 4008770:	01400284 	movi	r5,10
 4008774:	1009883a 	mov	r4,r2
 4008778:	400a1140 	call	400a114 <__udivsi3>
 400877c:	100490fa 	slli	r2,r2,3
 4008780:	1007883a 	mov	r3,r2
 4008784:	e0bfeb17 	ldw	r2,-84(fp)
 4008788:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
 400878c:	e0bff017 	ldw	r2,-64(fp)
 4008790:	1080c824 	muli	r2,r2,800
 4008794:	1004d2ba 	srli	r2,r2,10
 4008798:	1007883a 	mov	r3,r2
 400879c:	e0bfeb17 	ldw	r2,-84(fp)
 40087a0:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
 40087a4:	e0bff117 	ldw	r2,-60(fp)
 40087a8:	01400284 	movi	r5,10
 40087ac:	1009883a 	mov	r4,r2
 40087b0:	400a1140 	call	400a114 <__udivsi3>
 40087b4:	100490fa 	slli	r2,r2,3
 40087b8:	1007883a 	mov	r3,r2
 40087bc:	e0bfeb17 	ldw	r2,-84(fp)
 40087c0:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
 40087c4:	e0bff217 	ldw	r2,-56(fp)
 40087c8:	1080c824 	muli	r2,r2,800
 40087cc:	1004d2ba 	srli	r2,r2,10
 40087d0:	1007883a 	mov	r3,r2
 40087d4:	e0bfeb17 	ldw	r2,-84(fp)
 40087d8:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
 40087dc:	e0bff317 	ldw	r2,-52(fp)
 40087e0:	01400284 	movi	r5,10
 40087e4:	1009883a 	mov	r4,r2
 40087e8:	400a1140 	call	400a114 <__udivsi3>
 40087ec:	100490fa 	slli	r2,r2,3
 40087f0:	1007883a 	mov	r3,r2
 40087f4:	e0bfeb17 	ldw	r2,-84(fp)
 40087f8:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
 40087fc:	e0bff417 	ldw	r2,-48(fp)
 4008800:	1080c824 	muli	r2,r2,800
 4008804:	1004d2ba 	srli	r2,r2,10
 4008808:	1007883a 	mov	r3,r2
 400880c:	e0bfeb17 	ldw	r2,-84(fp)
 4008810:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
 4008814:	e0bff517 	ldw	r2,-44(fp)
 4008818:	01400284 	movi	r5,10
 400881c:	1009883a 	mov	r4,r2
 4008820:	400a1140 	call	400a114 <__udivsi3>
 4008824:	100490fa 	slli	r2,r2,3
 4008828:	1007883a 	mov	r3,r2
 400882c:	e0bfeb17 	ldw	r2,-84(fp)
 4008830:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
 4008834:	e0bfeb17 	ldw	r2,-84(fp)
 4008838:	10800043 	ldbu	r2,1(r2)
 400883c:	10803fcc 	andi	r2,r2,255
 4008840:	10001926 	beq	r2,zero,40088a8 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x334>
 4008844:	e0bfeb17 	ldw	r2,-84(fp)
 4008848:	10800043 	ldbu	r2,1(r2)
 400884c:	10803fcc 	andi	r2,r2,255
 4008850:	108001a8 	cmpgeui	r2,r2,6
 4008854:	1000141e 	bne	r2,zero,40088a8 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x334>
    {
		if (QUEUE_IsFull(p->pQueue)){
 4008858:	e0bfff17 	ldw	r2,-4(fp)
 400885c:	10800417 	ldw	r2,16(r2)
 4008860:	1009883a 	mov	r4,r2
 4008864:	4008d600 	call	4008d60 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>
 4008868:	10803fcc 	andi	r2,r2,255
 400886c:	10000726 	beq	r2,zero,400888c <_ZL14mtc2_QueryDataP9MTC2_INFO+0x318>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 4008870:	e0bfff17 	ldw	r2,-4(fp)
 4008874:	10800417 	ldw	r2,16(r2)
 4008878:	1009883a 	mov	r4,r2
 400887c:	4008e5c0 	call	4008e5c <_Z9QUEUE_PopP12QUEUE_STRUCT>
 4008880:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
 4008884:	e13ff617 	ldw	r4,-40(fp)
 4008888:	400dec80 	call	400dec8 <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
 400888c:	e0bfff17 	ldw	r2,-4(fp)
 4008890:	10800417 	ldw	r2,16(r2)
 4008894:	e0ffeb17 	ldw	r3,-84(fp)
 4008898:	180b883a 	mov	r5,r3
 400889c:	1009883a 	mov	r4,r2
 40088a0:	4008dc40 	call	4008dc4 <_Z10QUEUE_PushP12QUEUE_STRUCTm>
 40088a4:	00000206 	br	40088b0 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x33c>
    }
    else
    	free(pEvent);
 40088a8:	e13feb17 	ldw	r4,-84(fp)
 40088ac:	400dec80 	call	400dec8 <free>
}
 40088b0:	0001883a 	nop
 40088b4:	e037883a 	mov	sp,fp
 40088b8:	dfc00117 	ldw	ra,4(sp)
 40088bc:	df000017 	ldw	fp,0(sp)
 40088c0:	dec00204 	addi	sp,sp,8
 40088c4:	f800283a 	ret

040088c8 <_ZL8mtc2_ISRPv>:


static void mtc2_ISR(void* context){
 40088c8:	defffc04 	addi	sp,sp,-16
 40088cc:	dfc00315 	stw	ra,12(sp)
 40088d0:	df000215 	stw	fp,8(sp)
 40088d4:	df000204 	addi	fp,sp,8
 40088d8:	e13fff15 	stw	r4,-4(fp)


   MTC2_INFO *p = (MTC2_INFO *)context;
 40088dc:	e0bfff17 	ldw	r2,-4(fp)
 40088e0:	e0bffe15 	stw	r2,-8(fp)

   alt_ic_irq_disable(p->TOUCH_INT_CONTROLLER_ID,p->INT_IRQ_NUM);
 40088e4:	e0bffe17 	ldw	r2,-8(fp)
 40088e8:	10c00317 	ldw	r3,12(r2)
 40088ec:	e0bffe17 	ldw	r2,-8(fp)
 40088f0:	10800217 	ldw	r2,8(r2)
 40088f4:	100b883a 	mov	r5,r2
 40088f8:	1809883a 	mov	r4,r3
 40088fc:	401bb180 	call	401bb18 <alt_ic_irq_disable>
   mtc2_QueryData(p);
 4008900:	e13ffe17 	ldw	r4,-8(fp)
 4008904:	40085740 	call	4008574 <_ZL14mtc2_QueryDataP9MTC2_INFO>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
 4008908:	e0bffe17 	ldw	r2,-8(fp)
 400890c:	10800117 	ldw	r2,4(r2)
 4008910:	10800304 	addi	r2,r2,12
 4008914:	0007883a 	mov	r3,zero
 4008918:	10c00035 	stwio	r3,0(r2)

    alt_ic_irq_enable(p->TOUCH_INT_CONTROLLER_ID,p->INT_IRQ_NUM);
 400891c:	e0bffe17 	ldw	r2,-8(fp)
 4008920:	10c00317 	ldw	r3,12(r2)
 4008924:	e0bffe17 	ldw	r2,-8(fp)
 4008928:	10800217 	ldw	r2,8(r2)
 400892c:	100b883a 	mov	r5,r2
 4008930:	1809883a 	mov	r4,r3
 4008934:	401ba900 	call	401ba90 <alt_ic_irq_enable>
 }
 4008938:	0001883a 	nop
 400893c:	e037883a 	mov	sp,fp
 4008940:	dfc00117 	ldw	ra,4(sp)
 4008944:	df000017 	ldw	fp,0(sp)
 4008948:	dec00204 	addi	sp,sp,8
 400894c:	f800283a 	ret

04008950 <_Z9MTC2_Initmmmm>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM, alt_u32 TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID)
{
 4008950:	defff804 	addi	sp,sp,-32
 4008954:	dfc00715 	stw	ra,28(sp)
 4008958:	df000615 	stw	fp,24(sp)
 400895c:	df000604 	addi	fp,sp,24
 4008960:	e13ffc15 	stw	r4,-16(fp)
 4008964:	e17ffd15 	stw	r5,-12(fp)
 4008968:	e1bffe15 	stw	r6,-8(fp)
 400896c:	e1ffff15 	stw	r7,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
 4008970:	01000504 	movi	r4,20
 4008974:	400deb40 	call	400deb4 <malloc>
 4008978:	e0bffb15 	stw	r2,-20(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
 400897c:	e0bffb17 	ldw	r2,-20(fp)
 4008980:	e0fffc17 	ldw	r3,-16(fp)
 4008984:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
 4008988:	e0bffb17 	ldw	r2,-20(fp)
 400898c:	e0fffd17 	ldw	r3,-12(fp)
 4008990:	10c00115 	stw	r3,4(r2)
    p->TOUCH_INT_CONTROLLER_ID=TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID;
 4008994:	e0bffb17 	ldw	r2,-20(fp)
 4008998:	e0ffff17 	ldw	r3,-4(fp)
 400899c:	10c00315 	stw	r3,12(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
 40089a0:	e0bffb17 	ldw	r2,-20(fp)
 40089a4:	e0fffe17 	ldw	r3,-8(fp)
 40089a8:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
 40089ac:	01000804 	movi	r4,32
 40089b0:	4008c7c0 	call	4008c7c <_Z9QUEUE_Newi>
 40089b4:	1007883a 	mov	r3,r2
 40089b8:	e0bffb17 	ldw	r2,-20(fp)
 40089bc:	10c00415 	stw	r3,16(r2)


    // init i2c for i2c_opencore
    oc_i2c_init_ex(TOUCH_I2C_BASE,  50*1000*1000 /* 50MHz */, 400*1000 /* 400K */);
 40089c0:	e0bffc17 	ldw	r2,-16(fp)
 40089c4:	018001b4 	movhi	r6,6
 40089c8:	3186a004 	addi	r6,r6,6784
 40089cc:	0140bef4 	movhi	r5,763
 40089d0:	297c2004 	addi	r5,r5,-3968
 40089d4:	1009883a 	mov	r4,r2
 40089d8:	40070ac0 	call	40070ac <_Z14oc_i2c_init_exlll>


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
 40089dc:	e0bffb17 	ldw	r2,-20(fp)
 40089e0:	10800117 	ldw	r2,4(r2)
 40089e4:	10800204 	addi	r2,r2,8
 40089e8:	0007883a 	mov	r3,zero
 40089ec:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 40089f0:	e0bffb17 	ldw	r2,-20(fp)
 40089f4:	10800117 	ldw	r2,4(r2)
 40089f8:	10800304 	addi	r2,r2,12
 40089fc:	0007883a 	mov	r3,zero
 4008a00:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
  if ((alt_ic_isr_register(p->TOUCH_INT_CONTROLLER_ID,
 4008a04:	e0bffb17 	ldw	r2,-20(fp)
 4008a08:	10c00317 	ldw	r3,12(r2)
 4008a0c:	e0bffb17 	ldw	r2,-20(fp)
 4008a10:	10800217 	ldw	r2,8(r2)
 4008a14:	d8000015 	stw	zero,0(sp)
 4008a18:	e1fffb17 	ldw	r7,-20(fp)
 4008a1c:	01810074 	movhi	r6,1025
 4008a20:	31a23204 	addi	r6,r6,-30520
 4008a24:	100b883a 	mov	r5,r2
 4008a28:	1809883a 	mov	r4,r3
 4008a2c:	401ba400 	call	401ba40 <alt_ic_isr_register>
 4008a30:	1004c03a 	cmpne	r2,r2,zero
 4008a34:	10803fcc 	andi	r2,r2,255
 4008a38:	10000426 	beq	r2,zero,4008a4c <_Z9MTC2_Initmmmm+0xfc>
		                   mtc2_ISR,
		                   (void *)p,
		                   NULL
		                   ) != 0)){

	  printf(("[TOUCH]register IRQ fail\n"));
 4008a3c:	01010234 	movhi	r4,1032
 4008a40:	2114c404 	addi	r4,r4,21264
 4008a44:	400ea840 	call	400ea84 <puts>
 4008a48:	00000306 	br	4008a58 <_Z9MTC2_Initmmmm+0x108>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
 4008a4c:	01010234 	movhi	r4,1032
 4008a50:	2114cb04 	addi	r4,r4,21292
 4008a54:	400ea840 	call	400ea84 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
 4008a58:	e0bffb17 	ldw	r2,-20(fp)
 4008a5c:	10800117 	ldw	r2,4(r2)
 4008a60:	10800204 	addi	r2,r2,8
 4008a64:	1007883a 	mov	r3,r2
 4008a68:	00800044 	movi	r2,1
 4008a6c:	18800035 	stwio	r2,0(r3)
    return p;
 4008a70:	e0bffb17 	ldw	r2,-20(fp)
}
 4008a74:	e037883a 	mov	sp,fp
 4008a78:	dfc00117 	ldw	ra,4(sp)
 4008a7c:	df000017 	ldw	fp,0(sp)
 4008a80:	dec00204 	addi	sp,sp,8
 4008a84:	f800283a 	ret

04008a88 <_Z11MTC2_UnInitP9MTC2_INFO>:

void MTC2_UnInit(MTC2_INFO *p){
 4008a88:	defffd04 	addi	sp,sp,-12
 4008a8c:	dfc00215 	stw	ra,8(sp)
 4008a90:	df000115 	stw	fp,4(sp)
 4008a94:	df000104 	addi	fp,sp,4
 4008a98:	e13fff15 	stw	r4,-4(fp)
    if (p){
 4008a9c:	e0bfff17 	ldw	r2,-4(fp)
 4008aa0:	10000626 	beq	r2,zero,4008abc <_Z11MTC2_UnInitP9MTC2_INFO+0x34>
        QUEUE_Delete(p->pQueue);
 4008aa4:	e0bfff17 	ldw	r2,-4(fp)
 4008aa8:	10800417 	ldw	r2,16(r2)
 4008aac:	1009883a 	mov	r4,r2
 4008ab0:	4008cec0 	call	4008cec <_Z12QUEUE_DeleteP12QUEUE_STRUCT>
        free(p);
 4008ab4:	e13fff17 	ldw	r4,-4(fp)
 4008ab8:	400dec80 	call	400dec8 <free>
    }
}
 4008abc:	0001883a 	nop
 4008ac0:	e037883a 	mov	sp,fp
 4008ac4:	dfc00117 	ldw	ra,4(sp)
 4008ac8:	df000017 	ldw	fp,0(sp)
 4008acc:	dec00204 	addi	sp,sp,8
 4008ad0:	f800283a 	ret

04008ad4 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
 4008ad4:	defff804 	addi	sp,sp,-32
 4008ad8:	dfc00715 	stw	ra,28(sp)
 4008adc:	df000615 	stw	fp,24(sp)
 4008ae0:	df000604 	addi	fp,sp,24
 4008ae4:	e13ffc15 	stw	r4,-16(fp)
 4008ae8:	e17ffd15 	stw	r5,-12(fp)
 4008aec:	e1bffe15 	stw	r6,-8(fp)
 4008af0:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
 4008af4:	e0bffc17 	ldw	r2,-16(fp)
 4008af8:	10800417 	ldw	r2,16(r2)
 4008afc:	1009883a 	mov	r4,r2
 4008b00:	4008d200 	call	4008d20 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>
 4008b04:	10803fcc 	andi	r2,r2,255
 4008b08:	10000226 	beq	r2,zero,4008b14 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x40>
 4008b0c:	0005883a 	mov	r2,zero
 4008b10:	00000106 	br	4008b18 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x44>
 4008b14:	00800044 	movi	r2,1
 4008b18:	e0bffa05 	stb	r2,-24(fp)
    if (bFind){
 4008b1c:	e0bffa03 	ldbu	r2,-24(fp)
 4008b20:	10004126 	beq	r2,zero,4008c28 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x154>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 4008b24:	e0bffc17 	ldw	r2,-16(fp)
 4008b28:	10800417 	ldw	r2,16(r2)
 4008b2c:	1009883a 	mov	r4,r2
 4008b30:	4008e5c0 	call	4008e5c <_Z9QUEUE_PopP12QUEUE_STRUCT>
 4008b34:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
 4008b38:	e0bffb17 	ldw	r2,-20(fp)
 4008b3c:	10c00003 	ldbu	r3,0(r2)
 4008b40:	e0bffd17 	ldw	r2,-12(fp)
 4008b44:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
 4008b48:	e0bffb17 	ldw	r2,-20(fp)
 4008b4c:	10c00043 	ldbu	r3,1(r2)
 4008b50:	e0bffe17 	ldw	r2,-8(fp)
 4008b54:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
 4008b58:	e0bffb17 	ldw	r2,-20(fp)
 4008b5c:	1080008b 	ldhu	r2,2(r2)
 4008b60:	10ffffcc 	andi	r3,r2,65535
 4008b64:	e0bfff17 	ldw	r2,-4(fp)
 4008b68:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
 4008b6c:	e0bffb17 	ldw	r2,-20(fp)
 4008b70:	1080010b 	ldhu	r2,4(r2)
 4008b74:	10ffffcc 	andi	r3,r2,65535
 4008b78:	e0800217 	ldw	r2,8(fp)
 4008b7c:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
 4008b80:	e0bffb17 	ldw	r2,-20(fp)
 4008b84:	1080018b 	ldhu	r2,6(r2)
 4008b88:	10ffffcc 	andi	r3,r2,65535
 4008b8c:	e0800317 	ldw	r2,12(fp)
 4008b90:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
 4008b94:	e0bffb17 	ldw	r2,-20(fp)
 4008b98:	1080020b 	ldhu	r2,8(r2)
 4008b9c:	10ffffcc 	andi	r3,r2,65535
 4008ba0:	e0800417 	ldw	r2,16(fp)
 4008ba4:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
 4008ba8:	e0bffb17 	ldw	r2,-20(fp)
 4008bac:	1080028b 	ldhu	r2,10(r2)
 4008bb0:	10ffffcc 	andi	r3,r2,65535
 4008bb4:	e0800517 	ldw	r2,20(fp)
 4008bb8:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
 4008bbc:	e0bffb17 	ldw	r2,-20(fp)
 4008bc0:	1080030b 	ldhu	r2,12(r2)
 4008bc4:	10ffffcc 	andi	r3,r2,65535
 4008bc8:	e0800617 	ldw	r2,24(fp)
 4008bcc:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
 4008bd0:	e0bffb17 	ldw	r2,-20(fp)
 4008bd4:	1080038b 	ldhu	r2,14(r2)
 4008bd8:	10ffffcc 	andi	r3,r2,65535
 4008bdc:	e0800717 	ldw	r2,28(fp)
 4008be0:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
 4008be4:	e0bffb17 	ldw	r2,-20(fp)
 4008be8:	1080040b 	ldhu	r2,16(r2)
 4008bec:	10ffffcc 	andi	r3,r2,65535
 4008bf0:	e0800817 	ldw	r2,32(fp)
 4008bf4:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
 4008bf8:	e0bffb17 	ldw	r2,-20(fp)
 4008bfc:	1080048b 	ldhu	r2,18(r2)
 4008c00:	10ffffcc 	andi	r3,r2,65535
 4008c04:	e0800917 	ldw	r2,36(fp)
 4008c08:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
 4008c0c:	e0bffb17 	ldw	r2,-20(fp)
 4008c10:	1080050b 	ldhu	r2,20(r2)
 4008c14:	10ffffcc 	andi	r3,r2,65535
 4008c18:	e0800a17 	ldw	r2,40(fp)
 4008c1c:	10c00015 	stw	r3,0(r2)
        free(pEvent);
 4008c20:	e13ffb17 	ldw	r4,-20(fp)
 4008c24:	400dec80 	call	400dec8 <free>
    }
    return bFind;
 4008c28:	e0bffa03 	ldbu	r2,-24(fp)
}
 4008c2c:	e037883a 	mov	sp,fp
 4008c30:	dfc00117 	ldw	ra,4(sp)
 4008c34:	df000017 	ldw	fp,0(sp)
 4008c38:	dec00204 	addi	sp,sp,8
 4008c3c:	f800283a 	ret

04008c40 <_Z15MTC2_ClearEventP9MTC2_INFO>:


void MTC2_ClearEvent(MTC2_INFO *p){
 4008c40:	defffd04 	addi	sp,sp,-12
 4008c44:	dfc00215 	stw	ra,8(sp)
 4008c48:	df000115 	stw	fp,4(sp)
 4008c4c:	df000104 	addi	fp,sp,4
 4008c50:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
 4008c54:	e0bfff17 	ldw	r2,-4(fp)
 4008c58:	10800417 	ldw	r2,16(r2)
 4008c5c:	1009883a 	mov	r4,r2
 4008c60:	4008ef00 	call	4008ef0 <_Z11QUEUE_EmptyP12QUEUE_STRUCT>
}
 4008c64:	0001883a 	nop
 4008c68:	e037883a 	mov	sp,fp
 4008c6c:	dfc00117 	ldw	ra,4(sp)
 4008c70:	df000017 	ldw	fp,0(sp)
 4008c74:	dec00204 	addi	sp,sp,8
 4008c78:	f800283a 	ret

04008c7c <_Z9QUEUE_Newi>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 4008c7c:	defffb04 	addi	sp,sp,-20
 4008c80:	dfc00415 	stw	ra,16(sp)
 4008c84:	df000315 	stw	fp,12(sp)
 4008c88:	df000304 	addi	fp,sp,12
 4008c8c:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 4008c90:	e0bfff17 	ldw	r2,-4(fp)
 4008c94:	1085883a 	add	r2,r2,r2
 4008c98:	1085883a 	add	r2,r2,r2
 4008c9c:	10800504 	addi	r2,r2,20
 4008ca0:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 4008ca4:	e0bffd17 	ldw	r2,-12(fp)
 4008ca8:	1009883a 	mov	r4,r2
 4008cac:	400deb40 	call	400deb4 <malloc>
 4008cb0:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 4008cb4:	e0bffd17 	ldw	r2,-12(fp)
 4008cb8:	100d883a 	mov	r6,r2
 4008cbc:	000b883a 	mov	r5,zero
 4008cc0:	e13ffe17 	ldw	r4,-8(fp)
 4008cc4:	400e8300 	call	400e830 <memset>
    pQueue->num = nQueueNum;
 4008cc8:	e0ffff17 	ldw	r3,-4(fp)
 4008ccc:	e0bffe17 	ldw	r2,-8(fp)
 4008cd0:	10c00015 	stw	r3,0(r2)
    return pQueue;
 4008cd4:	e0bffe17 	ldw	r2,-8(fp)
}
 4008cd8:	e037883a 	mov	sp,fp
 4008cdc:	dfc00117 	ldw	ra,4(sp)
 4008ce0:	df000017 	ldw	fp,0(sp)
 4008ce4:	dec00204 	addi	sp,sp,8
 4008ce8:	f800283a 	ret

04008cec <_Z12QUEUE_DeleteP12QUEUE_STRUCT>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 4008cec:	defffd04 	addi	sp,sp,-12
 4008cf0:	dfc00215 	stw	ra,8(sp)
 4008cf4:	df000115 	stw	fp,4(sp)
 4008cf8:	df000104 	addi	fp,sp,4
 4008cfc:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 4008d00:	e13fff17 	ldw	r4,-4(fp)
 4008d04:	400dec80 	call	400dec8 <free>
}
 4008d08:	0001883a 	nop
 4008d0c:	e037883a 	mov	sp,fp
 4008d10:	dfc00117 	ldw	ra,4(sp)
 4008d14:	df000017 	ldw	fp,0(sp)
 4008d18:	dec00204 	addi	sp,sp,8
 4008d1c:	f800283a 	ret

04008d20 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 4008d20:	defffe04 	addi	sp,sp,-8
 4008d24:	df000115 	stw	fp,4(sp)
 4008d28:	df000104 	addi	fp,sp,4
 4008d2c:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 4008d30:	e0bfff17 	ldw	r2,-4(fp)
 4008d34:	10c00117 	ldw	r3,4(r2)
 4008d38:	e0bfff17 	ldw	r2,-4(fp)
 4008d3c:	10800217 	ldw	r2,8(r2)
 4008d40:	1880021e 	bne	r3,r2,4008d4c <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT+0x2c>
        return TRUE;
 4008d44:	00800044 	movi	r2,1
 4008d48:	00000106 	br	4008d50 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT+0x30>
    return FALSE;
 4008d4c:	0005883a 	mov	r2,zero
}
 4008d50:	e037883a 	mov	sp,fp
 4008d54:	df000017 	ldw	fp,0(sp)
 4008d58:	dec00104 	addi	sp,sp,4
 4008d5c:	f800283a 	ret

04008d60 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 4008d60:	defffd04 	addi	sp,sp,-12
 4008d64:	dfc00215 	stw	ra,8(sp)
 4008d68:	df000115 	stw	fp,4(sp)
 4008d6c:	df000104 	addi	fp,sp,4
 4008d70:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 4008d74:	e0bfff17 	ldw	r2,-4(fp)
 4008d78:	10800117 	ldw	r2,4(r2)
 4008d7c:	10c00044 	addi	r3,r2,1
 4008d80:	e0bfff17 	ldw	r2,-4(fp)
 4008d84:	10800017 	ldw	r2,0(r2)
 4008d88:	100b883a 	mov	r5,r2
 4008d8c:	1809883a 	mov	r4,r3
 4008d90:	400a1780 	call	400a178 <__umodsi3>
 4008d94:	1007883a 	mov	r3,r2
 4008d98:	e0bfff17 	ldw	r2,-4(fp)
 4008d9c:	10800217 	ldw	r2,8(r2)
 4008da0:	1880021e 	bne	r3,r2,4008dac <_Z12QUEUE_IsFullP12QUEUE_STRUCT+0x4c>
        return TRUE;
 4008da4:	00800044 	movi	r2,1
 4008da8:	00000106 	br	4008db0 <_Z12QUEUE_IsFullP12QUEUE_STRUCT+0x50>
    return FALSE;
 4008dac:	0005883a 	mov	r2,zero
}
 4008db0:	e037883a 	mov	sp,fp
 4008db4:	dfc00117 	ldw	ra,4(sp)
 4008db8:	df000017 	ldw	fp,0(sp)
 4008dbc:	dec00204 	addi	sp,sp,8
 4008dc0:	f800283a 	ret

04008dc4 <_Z10QUEUE_PushP12QUEUE_STRUCTm>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 4008dc4:	defffc04 	addi	sp,sp,-16
 4008dc8:	dfc00315 	stw	ra,12(sp)
 4008dcc:	df000215 	stw	fp,8(sp)
 4008dd0:	df000204 	addi	fp,sp,8
 4008dd4:	e13ffe15 	stw	r4,-8(fp)
 4008dd8:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 4008ddc:	e13ffe17 	ldw	r4,-8(fp)
 4008de0:	4008d600 	call	4008d60 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>
 4008de4:	10803fcc 	andi	r2,r2,255
 4008de8:	10000226 	beq	r2,zero,4008df4 <_Z10QUEUE_PushP12QUEUE_STRUCTm+0x30>
        return FALSE;
 4008dec:	0005883a 	mov	r2,zero
 4008df0:	00001506 	br	4008e48 <_Z10QUEUE_PushP12QUEUE_STRUCTm+0x84>
    pQueue->data[pQueue->front] = data32;
 4008df4:	e0bffe17 	ldw	r2,-8(fp)
 4008df8:	10800117 	ldw	r2,4(r2)
 4008dfc:	e0fffe17 	ldw	r3,-8(fp)
 4008e00:	108000c4 	addi	r2,r2,3
 4008e04:	1085883a 	add	r2,r2,r2
 4008e08:	1085883a 	add	r2,r2,r2
 4008e0c:	1885883a 	add	r2,r3,r2
 4008e10:	e0ffff17 	ldw	r3,-4(fp)
 4008e14:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 4008e18:	e0bffe17 	ldw	r2,-8(fp)
 4008e1c:	10800117 	ldw	r2,4(r2)
 4008e20:	10c00044 	addi	r3,r2,1
 4008e24:	e0bffe17 	ldw	r2,-8(fp)
 4008e28:	10800017 	ldw	r2,0(r2)
 4008e2c:	100b883a 	mov	r5,r2
 4008e30:	1809883a 	mov	r4,r3
 4008e34:	400a1780 	call	400a178 <__umodsi3>
 4008e38:	1007883a 	mov	r3,r2
 4008e3c:	e0bffe17 	ldw	r2,-8(fp)
 4008e40:	10c00115 	stw	r3,4(r2)
    return TRUE;
 4008e44:	00800044 	movi	r2,1
}
 4008e48:	e037883a 	mov	sp,fp
 4008e4c:	dfc00117 	ldw	ra,4(sp)
 4008e50:	df000017 	ldw	fp,0(sp)
 4008e54:	dec00204 	addi	sp,sp,8
 4008e58:	f800283a 	ret

04008e5c <_Z9QUEUE_PopP12QUEUE_STRUCT>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 4008e5c:	defffc04 	addi	sp,sp,-16
 4008e60:	dfc00315 	stw	ra,12(sp)
 4008e64:	df000215 	stw	fp,8(sp)
 4008e68:	df000204 	addi	fp,sp,8
 4008e6c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 4008e70:	e13fff17 	ldw	r4,-4(fp)
 4008e74:	4008d200 	call	4008d20 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>
 4008e78:	10803fcc 	andi	r2,r2,255
 4008e7c:	10000226 	beq	r2,zero,4008e88 <_Z9QUEUE_PopP12QUEUE_STRUCT+0x2c>
        return 0;
 4008e80:	0005883a 	mov	r2,zero
 4008e84:	00001506 	br	4008edc <_Z9QUEUE_PopP12QUEUE_STRUCT+0x80>
    data32 = pQueue->data[pQueue->rear];
 4008e88:	e0bfff17 	ldw	r2,-4(fp)
 4008e8c:	10800217 	ldw	r2,8(r2)
 4008e90:	e0ffff17 	ldw	r3,-4(fp)
 4008e94:	108000c4 	addi	r2,r2,3
 4008e98:	1085883a 	add	r2,r2,r2
 4008e9c:	1085883a 	add	r2,r2,r2
 4008ea0:	1885883a 	add	r2,r3,r2
 4008ea4:	10800017 	ldw	r2,0(r2)
 4008ea8:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 4008eac:	e0bfff17 	ldw	r2,-4(fp)
 4008eb0:	10800217 	ldw	r2,8(r2)
 4008eb4:	10c00044 	addi	r3,r2,1
 4008eb8:	e0bfff17 	ldw	r2,-4(fp)
 4008ebc:	10800017 	ldw	r2,0(r2)
 4008ec0:	100b883a 	mov	r5,r2
 4008ec4:	1809883a 	mov	r4,r3
 4008ec8:	400a1780 	call	400a178 <__umodsi3>
 4008ecc:	1007883a 	mov	r3,r2
 4008ed0:	e0bfff17 	ldw	r2,-4(fp)
 4008ed4:	10c00215 	stw	r3,8(r2)
    return data32;
 4008ed8:	e0bffe17 	ldw	r2,-8(fp)
}
 4008edc:	e037883a 	mov	sp,fp
 4008ee0:	dfc00117 	ldw	ra,4(sp)
 4008ee4:	df000017 	ldw	fp,0(sp)
 4008ee8:	dec00204 	addi	sp,sp,8
 4008eec:	f800283a 	ret

04008ef0 <_Z11QUEUE_EmptyP12QUEUE_STRUCT>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 4008ef0:	defffe04 	addi	sp,sp,-8
 4008ef4:	df000115 	stw	fp,4(sp)
 4008ef8:	df000104 	addi	fp,sp,4
 4008efc:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 4008f00:	e0bfff17 	ldw	r2,-4(fp)
 4008f04:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 4008f08:	e0bfff17 	ldw	r2,-4(fp)
 4008f0c:	10000215 	stw	zero,8(r2)
}
 4008f10:	0001883a 	nop
 4008f14:	e037883a 	mov	sp,fp
 4008f18:	df000017 	ldw	fp,0(sp)
 4008f1c:	dec00104 	addi	sp,sp,4
 4008f20:	f800283a 	ret

04008f24 <_Z10VIPFR_InitmPvS_mm>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
 4008f24:	defff904 	addi	sp,sp,-28
 4008f28:	dfc00615 	stw	ra,24(sp)
 4008f2c:	df000515 	stw	fp,20(sp)
 4008f30:	df000504 	addi	fp,sp,20
 4008f34:	e13ffc15 	stw	r4,-16(fp)
 4008f38:	e17ffd15 	stw	r5,-12(fp)
 4008f3c:	e1bffe15 	stw	r6,-8(fp)
 4008f40:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = (VIP_FRAME_READER *)malloc(sizeof(VIP_FRAME_READER));
 4008f44:	01000904 	movi	r4,36
 4008f48:	400deb40 	call	400deb4 <malloc>
 4008f4c:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
 4008f50:	e0bffb17 	ldw	r2,-20(fp)
 4008f54:	e0fffc17 	ldw	r3,-16(fp)
 4008f58:	10c00015 	stw	r3,0(r2)
    p->Frame0_Base = Frame0_Base;
 4008f5c:	e0bffb17 	ldw	r2,-20(fp)
 4008f60:	e0fffd17 	ldw	r3,-12(fp)
 4008f64:	10c00115 	stw	r3,4(r2)
    p->Frame1_Base = Frame1_Base;
 4008f68:	e0bffb17 	ldw	r2,-20(fp)
 4008f6c:	e0fffe17 	ldw	r3,-8(fp)
 4008f70:	10c00215 	stw	r3,8(r2)
    p->DisplayFrame = 0;
 4008f74:	e0bffb17 	ldw	r2,-20(fp)
 4008f78:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
 4008f7c:	e0bffb17 	ldw	r2,-20(fp)
 4008f80:	00c00104 	movi	r3,4
 4008f84:	10c00715 	stw	r3,28(r2)
    p->color_depth = 32;
 4008f88:	e0bffb17 	ldw	r2,-20(fp)
 4008f8c:	00c00804 	movi	r3,32
 4008f90:	10c00415 	stw	r3,16(r2)
    p->interlace = 0;
 4008f94:	e0bffb17 	ldw	r2,-20(fp)
 4008f98:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
 4008f9c:	000b883a 	mov	r5,zero
 4008fa0:	e13ffc17 	ldw	r4,-16(fp)
 4008fa4:	400946c0 	call	400946c <_Z14FrameReader_Gomb>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
 4008fa8:	e0bfff17 	ldw	r2,-4(fp)
 4008fac:	e0c00217 	ldw	r3,8(fp)
 4008fb0:	180d883a 	mov	r6,r3
 4008fb4:	100b883a 	mov	r5,r2
 4008fb8:	e13ffb17 	ldw	r4,-20(fp)
 4008fbc:	40090380 	call	4009038 <_Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
 4008fc0:	e0bffb17 	ldw	r2,-20(fp)
 4008fc4:	10800303 	ldbu	r2,12(r2)
 4008fc8:	10803fcc 	andi	r2,r2,255
 4008fcc:	100b883a 	mov	r5,r2
 4008fd0:	e13ffc17 	ldw	r4,-16(fp)
 4008fd4:	400942c0 	call	400942c <_Z23FrameReader_SelectFramemh>
    //
    FrameReader_Go(VipBase, TRUE); // go
 4008fd8:	01400044 	movi	r5,1
 4008fdc:	e13ffc17 	ldw	r4,-16(fp)
 4008fe0:	400946c0 	call	400946c <_Z14FrameReader_Gomb>
    
    return p;
 4008fe4:	e0bffb17 	ldw	r2,-20(fp)
}
 4008fe8:	e037883a 	mov	sp,fp
 4008fec:	dfc00117 	ldw	ra,4(sp)
 4008ff0:	df000017 	ldw	fp,0(sp)
 4008ff4:	dec00204 	addi	sp,sp,8
 4008ff8:	f800283a 	ret

04008ffc <_Z12VIPFR_UnInitP16VIP_FRAME_READER>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
 4008ffc:	defffd04 	addi	sp,sp,-12
 4009000:	dfc00215 	stw	ra,8(sp)
 4009004:	df000115 	stw	fp,4(sp)
 4009008:	df000104 	addi	fp,sp,4
 400900c:	e13fff15 	stw	r4,-4(fp)
    if (p)
 4009010:	e0bfff17 	ldw	r2,-4(fp)
 4009014:	10000226 	beq	r2,zero,4009020 <_Z12VIPFR_UnInitP16VIP_FRAME_READER+0x24>
        free(p);
 4009018:	e13fff17 	ldw	r4,-4(fp)
 400901c:	400dec80 	call	400dec8 <free>
}
 4009020:	0001883a 	nop
 4009024:	e037883a 	mov	sp,fp
 4009028:	dfc00117 	ldw	ra,4(sp)
 400902c:	df000017 	ldw	fp,0(sp)
 4009030:	dec00204 	addi	sp,sp,8
 4009034:	f800283a 	ret

04009038 <_Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
 4009038:	defff604 	addi	sp,sp,-40
 400903c:	dfc00915 	stw	ra,36(sp)
 4009040:	df000815 	stw	fp,32(sp)
 4009044:	df000804 	addi	fp,sp,32
 4009048:	e13ffd15 	stw	r4,-12(fp)
 400904c:	e17ffe15 	stw	r5,-8(fp)
 4009050:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
 4009054:	e0fffe17 	ldw	r3,-8(fp)
 4009058:	e0bfff17 	ldw	r2,-4(fp)
 400905c:	1885383a 	mul	r2,r3,r2
 4009060:	e0bffb15 	stw	r2,-20(fp)
    cycle = width*height;
 4009064:	e0fffe17 	ldw	r3,-8(fp)
 4009068:	e0bfff17 	ldw	r2,-4(fp)
 400906c:	1885383a 	mul	r2,r3,r2
 4009070:	e0bffc15 	stw	r2,-16(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
 4009074:	e0bffd17 	ldw	r2,-12(fp)
 4009078:	e0fffe17 	ldw	r3,-8(fp)
 400907c:	10c00515 	stw	r3,20(r2)
    p->height = height;
 4009080:	e0bffd17 	ldw	r2,-12(fp)
 4009084:	e0ffff17 	ldw	r3,-4(fp)
 4009088:	10c00615 	stw	r3,24(r2)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
 400908c:	e0bffd17 	ldw	r2,-12(fp)
 4009090:	10c00017 	ldw	r3,0(r2)
 4009094:	e0bffd17 	ldw	r2,-12(fp)
 4009098:	10800117 	ldw	r2,4(r2)
 400909c:	1011883a 	mov	r8,r2
 40090a0:	e0bffd17 	ldw	r2,-12(fp)
 40090a4:	10800517 	ldw	r2,20(r2)
 40090a8:	1009883a 	mov	r4,r2
 40090ac:	e0bffd17 	ldw	r2,-12(fp)
 40090b0:	10800617 	ldw	r2,24(r2)
 40090b4:	100b883a 	mov	r5,r2
 40090b8:	e0bffd17 	ldw	r2,-12(fp)
 40090bc:	10800817 	ldw	r2,32(r2)
 40090c0:	d8800215 	stw	r2,8(sp)
 40090c4:	d9400115 	stw	r5,4(sp)
 40090c8:	d9000015 	stw	r4,0(sp)
 40090cc:	e1fffc17 	ldw	r7,-16(fp)
 40090d0:	e1bffb17 	ldw	r6,-20(fp)
 40090d4:	400b883a 	mov	r5,r8
 40090d8:	1809883a 	mov	r4,r3
 40090dc:	40092dc0 	call	40092dc <_Z21FrameReader_SetFrame0mmmmmmm>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
 40090e0:	e0bffd17 	ldw	r2,-12(fp)
 40090e4:	10c00017 	ldw	r3,0(r2)
 40090e8:	e0bffd17 	ldw	r2,-12(fp)
 40090ec:	10800217 	ldw	r2,8(r2)
 40090f0:	1011883a 	mov	r8,r2
 40090f4:	e0bffd17 	ldw	r2,-12(fp)
 40090f8:	10800517 	ldw	r2,20(r2)
 40090fc:	1009883a 	mov	r4,r2
 4009100:	e0bffd17 	ldw	r2,-12(fp)
 4009104:	10800617 	ldw	r2,24(r2)
 4009108:	100b883a 	mov	r5,r2
 400910c:	e0bffd17 	ldw	r2,-12(fp)
 4009110:	10800817 	ldw	r2,32(r2)
 4009114:	d8800215 	stw	r2,8(sp)
 4009118:	d9400115 	stw	r5,4(sp)
 400911c:	d9000015 	stw	r4,0(sp)
 4009120:	e1fffc17 	ldw	r7,-16(fp)
 4009124:	e1bffb17 	ldw	r6,-20(fp)
 4009128:	400b883a 	mov	r5,r8
 400912c:	1809883a 	mov	r4,r3
 4009130:	40093840 	call	4009384 <_Z21FrameReader_SetFrame1mmmmmmm>
    
}
 4009134:	0001883a 	nop
 4009138:	e037883a 	mov	sp,fp
 400913c:	dfc00117 	ldw	ra,4(sp)
 4009140:	df000017 	ldw	fp,0(sp)
 4009144:	dec00204 	addi	sp,sp,8
 4009148:	f800283a 	ret

0400914c <_Z8VIPFR_GoP16VIP_FRAME_READERb>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
 400914c:	defffd04 	addi	sp,sp,-12
 4009150:	df000215 	stw	fp,8(sp)
 4009154:	df000204 	addi	fp,sp,8
 4009158:	e13ffe15 	stw	r4,-8(fp)
 400915c:	2805883a 	mov	r2,r5
 4009160:	e0bfff05 	stb	r2,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
 4009164:	e0bffe17 	ldw	r2,-8(fp)
 4009168:	10800017 	ldw	r2,0(r2)
 400916c:	1007883a 	mov	r3,r2
 4009170:	e0bfff03 	ldbu	r2,-4(fp)
 4009174:	10000226 	beq	r2,zero,4009180 <_Z8VIPFR_GoP16VIP_FRAME_READERb+0x34>
 4009178:	00800044 	movi	r2,1
 400917c:	00000106 	br	4009184 <_Z8VIPFR_GoP16VIP_FRAME_READERb+0x38>
 4009180:	0005883a 	mov	r2,zero
 4009184:	18800035 	stwio	r2,0(r3)
}
 4009188:	0001883a 	nop
 400918c:	e037883a 	mov	sp,fp
 4009190:	df000017 	ldw	fp,0(sp)
 4009194:	dec00104 	addi	sp,sp,4
 4009198:	f800283a 	ret

0400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
 400919c:	defffe04 	addi	sp,sp,-8
 40091a0:	df000115 	stw	fp,4(sp)
 40091a4:	df000104 	addi	fp,sp,4
 40091a8:	e13fff15 	stw	r4,-4(fp)
        if (p->DisplayFrame == 0)
 40091ac:	e0bfff17 	ldw	r2,-4(fp)
 40091b0:	10800303 	ldbu	r2,12(r2)
 40091b4:	10803fcc 	andi	r2,r2,255
 40091b8:	1000031e 	bne	r2,zero,40091c8 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER+0x2c>
            return p->Frame1_Base;
 40091bc:	e0bfff17 	ldw	r2,-4(fp)
 40091c0:	10800217 	ldw	r2,8(r2)
 40091c4:	00000206 	br	40091d0 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER+0x34>
        return p->Frame0_Base;
 40091c8:	e0bfff17 	ldw	r2,-4(fp)
 40091cc:	10800117 	ldw	r2,4(r2)
}
 40091d0:	e037883a 	mov	sp,fp
 40091d4:	df000017 	ldw	fp,0(sp)
 40091d8:	dec00104 	addi	sp,sp,4
 40091dc:	f800283a 	ret

040091e0 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
 40091e0:	defffd04 	addi	sp,sp,-12
 40091e4:	dfc00215 	stw	ra,8(sp)
 40091e8:	df000115 	stw	fp,4(sp)
 40091ec:	df000104 	addi	fp,sp,4
 40091f0:	e13fff15 	stw	r4,-4(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
 40091f4:	e0bfff17 	ldw	r2,-4(fp)
 40091f8:	10800303 	ldbu	r2,12(r2)
 40091fc:	10803fcc 	andi	r2,r2,255
 4009200:	10c00044 	addi	r3,r2,1
 4009204:	00a00034 	movhi	r2,32768
 4009208:	10800044 	addi	r2,r2,1
 400920c:	1884703a 	and	r2,r3,r2
 4009210:	1000040e 	bge	r2,zero,4009224 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER+0x44>
 4009214:	10bfffc4 	addi	r2,r2,-1
 4009218:	00ffff84 	movi	r3,-2
 400921c:	10c4b03a 	or	r2,r2,r3
 4009220:	10800044 	addi	r2,r2,1
 4009224:	1007883a 	mov	r3,r2
 4009228:	e0bfff17 	ldw	r2,-4(fp)
 400922c:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
 4009230:	e0bfff17 	ldw	r2,-4(fp)
 4009234:	10c00017 	ldw	r3,0(r2)
 4009238:	e0bfff17 	ldw	r2,-4(fp)
 400923c:	10800303 	ldbu	r2,12(r2)
 4009240:	10803fcc 	andi	r2,r2,255
 4009244:	100b883a 	mov	r5,r2
 4009248:	1809883a 	mov	r4,r3
 400924c:	400942c0 	call	400942c <_Z23FrameReader_SelectFramemh>
     alt_dcache_flush_all();
 4009250:	401b8e00 	call	401b8e0 <alt_dcache_flush_all>
}
 4009254:	0001883a 	nop
 4009258:	e037883a 	mov	sp,fp
 400925c:	dfc00117 	ldw	ra,4(sp)
 4009260:	df000017 	ldw	fp,0(sp)
 4009264:	dec00204 	addi	sp,sp,8
 4009268:	f800283a 	ret

0400926c <_Z16DRAW_EraseScreenP16VIP_FRAME_READERm>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
 400926c:	defffc04 	addi	sp,sp,-16
 4009270:	dfc00315 	stw	ra,12(sp)
 4009274:	df000215 	stw	fp,8(sp)
 4009278:	df000204 	addi	fp,sp,8
 400927c:	e13ffe15 	stw	r4,-8(fp)
 4009280:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
 4009284:	e13ffe17 	ldw	r4,-8(fp)
 4009288:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400928c:	100f883a 	mov	r7,r2
 4009290:	e13fff17 	ldw	r4,-4(fp)
 4009294:	e0bffe17 	ldw	r2,-8(fp)
 4009298:	10c00517 	ldw	r3,20(r2)
 400929c:	e0bffe17 	ldw	r2,-8(fp)
 40092a0:	10800617 	ldw	r2,24(r2)
 40092a4:	1887383a 	mul	r3,r3,r2
 40092a8:	e0bffe17 	ldw	r2,-8(fp)
 40092ac:	10800717 	ldw	r2,28(r2)
 40092b0:	1885383a 	mul	r2,r3,r2
 40092b4:	100d883a 	mov	r6,r2
 40092b8:	200b883a 	mov	r5,r4
 40092bc:	3809883a 	mov	r4,r7
 40092c0:	400e8300 	call	400e830 <memset>
}
 40092c4:	0001883a 	nop
 40092c8:	e037883a 	mov	sp,fp
 40092cc:	dfc00117 	ldw	ra,4(sp)
 40092d0:	df000017 	ldw	fp,0(sp)
 40092d4:	dec00204 	addi	sp,sp,8
 40092d8:	f800283a 	ret

040092dc <_Z21FrameReader_SetFrame0mmmmmmm>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 40092dc:	defffb04 	addi	sp,sp,-20
 40092e0:	df000415 	stw	fp,16(sp)
 40092e4:	df000404 	addi	fp,sp,16
 40092e8:	e13ffc15 	stw	r4,-16(fp)
 40092ec:	e17ffd15 	stw	r5,-12(fp)
 40092f0:	e1bffe15 	stw	r6,-8(fp)
 40092f4:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
 40092f8:	e0bffc17 	ldw	r2,-16(fp)
 40092fc:	10800404 	addi	r2,r2,16
 4009300:	1007883a 	mov	r3,r2
 4009304:	e0bffd17 	ldw	r2,-12(fp)
 4009308:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 5, words); // frame0 words
 400930c:	e0bffc17 	ldw	r2,-16(fp)
 4009310:	10800504 	addi	r2,r2,20
 4009314:	1007883a 	mov	r3,r2
 4009318:	e0bffe17 	ldw	r2,-8(fp)
 400931c:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
 4009320:	e0bffc17 	ldw	r2,-16(fp)
 4009324:	10800604 	addi	r2,r2,24
 4009328:	1007883a 	mov	r3,r2
 400932c:	e0bfff17 	ldw	r2,-4(fp)
 4009330:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 8, width); // frame0 width
 4009334:	e0bffc17 	ldw	r2,-16(fp)
 4009338:	10800804 	addi	r2,r2,32
 400933c:	1007883a 	mov	r3,r2
 4009340:	e0800117 	ldw	r2,4(fp)
 4009344:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 9, height); // frame0 height
 4009348:	e0bffc17 	ldw	r2,-16(fp)
 400934c:	10800904 	addi	r2,r2,36
 4009350:	1007883a 	mov	r3,r2
 4009354:	e0800217 	ldw	r2,8(fp)
 4009358:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
 400935c:	e0bffc17 	ldw	r2,-16(fp)
 4009360:	10800a04 	addi	r2,r2,40
 4009364:	1007883a 	mov	r3,r2
 4009368:	e0800317 	ldw	r2,12(fp)
 400936c:	18800035 	stwio	r2,0(r3)
}
 4009370:	0001883a 	nop
 4009374:	e037883a 	mov	sp,fp
 4009378:	df000017 	ldw	fp,0(sp)
 400937c:	dec00104 	addi	sp,sp,4
 4009380:	f800283a 	ret

04009384 <_Z21FrameReader_SetFrame1mmmmmmm>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 4009384:	defffb04 	addi	sp,sp,-20
 4009388:	df000415 	stw	fp,16(sp)
 400938c:	df000404 	addi	fp,sp,16
 4009390:	e13ffc15 	stw	r4,-16(fp)
 4009394:	e17ffd15 	stw	r5,-12(fp)
 4009398:	e1bffe15 	stw	r6,-8(fp)
 400939c:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
 40093a0:	e0bffc17 	ldw	r2,-16(fp)
 40093a4:	10800b04 	addi	r2,r2,44
 40093a8:	1007883a 	mov	r3,r2
 40093ac:	e0bffd17 	ldw	r2,-12(fp)
 40093b0:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 12, words); // frame0 words
 40093b4:	e0bffc17 	ldw	r2,-16(fp)
 40093b8:	10800c04 	addi	r2,r2,48
 40093bc:	1007883a 	mov	r3,r2
 40093c0:	e0bffe17 	ldw	r2,-8(fp)
 40093c4:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
 40093c8:	e0bffc17 	ldw	r2,-16(fp)
 40093cc:	10800d04 	addi	r2,r2,52
 40093d0:	1007883a 	mov	r3,r2
 40093d4:	e0bfff17 	ldw	r2,-4(fp)
 40093d8:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 15, width); // frame0 width
 40093dc:	e0bffc17 	ldw	r2,-16(fp)
 40093e0:	10800f04 	addi	r2,r2,60
 40093e4:	1007883a 	mov	r3,r2
 40093e8:	e0800117 	ldw	r2,4(fp)
 40093ec:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 16, height); // frame0 height
 40093f0:	e0bffc17 	ldw	r2,-16(fp)
 40093f4:	10801004 	addi	r2,r2,64
 40093f8:	1007883a 	mov	r3,r2
 40093fc:	e0800217 	ldw	r2,8(fp)
 4009400:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
 4009404:	e0bffc17 	ldw	r2,-16(fp)
 4009408:	10801104 	addi	r2,r2,68
 400940c:	1007883a 	mov	r3,r2
 4009410:	e0800317 	ldw	r2,12(fp)
 4009414:	18800035 	stwio	r2,0(r3)
}
 4009418:	0001883a 	nop
 400941c:	e037883a 	mov	sp,fp
 4009420:	df000017 	ldw	fp,0(sp)
 4009424:	dec00104 	addi	sp,sp,4
 4009428:	f800283a 	ret

0400942c <_Z23FrameReader_SelectFramemh>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
 400942c:	defffd04 	addi	sp,sp,-12
 4009430:	df000215 	stw	fp,8(sp)
 4009434:	df000204 	addi	fp,sp,8
 4009438:	e13ffe15 	stw	r4,-8(fp)
 400943c:	2805883a 	mov	r2,r5
 4009440:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
 4009444:	e0bffe17 	ldw	r2,-8(fp)
 4009448:	10800304 	addi	r2,r2,12
 400944c:	1007883a 	mov	r3,r2
 4009450:	e0bfff03 	ldbu	r2,-4(fp)
 4009454:	18800035 	stwio	r2,0(r3)
}        
 4009458:	0001883a 	nop
 400945c:	e037883a 	mov	sp,fp
 4009460:	df000017 	ldw	fp,0(sp)
 4009464:	dec00104 	addi	sp,sp,4
 4009468:	f800283a 	ret

0400946c <_Z14FrameReader_Gomb>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
 400946c:	defffd04 	addi	sp,sp,-12
 4009470:	df000215 	stw	fp,8(sp)
 4009474:	df000204 	addi	fp,sp,8
 4009478:	e13ffe15 	stw	r4,-8(fp)
 400947c:	2805883a 	mov	r2,r5
 4009480:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
 4009484:	e0fffe17 	ldw	r3,-8(fp)
 4009488:	e0bfff03 	ldbu	r2,-4(fp)
 400948c:	10000226 	beq	r2,zero,4009498 <_Z14FrameReader_Gomb+0x2c>
 4009490:	00800044 	movi	r2,1
 4009494:	00000106 	br	400949c <_Z14FrameReader_Gomb+0x30>
 4009498:	0005883a 	mov	r2,zero
 400949c:	18800035 	stwio	r2,0(r3)
}
 40094a0:	0001883a 	nop
 40094a4:	e037883a 	mov	sp,fp
 40094a8:	df000017 	ldw	fp,0(sp)
 40094ac:	dec00104 	addi	sp,sp,4
 40094b0:	f800283a 	ret

040094b4 <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>:


alt_u32 VIPFR_GetFrameSize(VIP_FRAME_READER* p){
 40094b4:	defffd04 	addi	sp,sp,-12
 40094b8:	df000215 	stw	fp,8(sp)
 40094bc:	df000204 	addi	fp,sp,8
 40094c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ByteLength;
	ByteLength = p->width * p->height * p->bytes_per_pixel;
 40094c4:	e0bfff17 	ldw	r2,-4(fp)
 40094c8:	10c00517 	ldw	r3,20(r2)
 40094cc:	e0bfff17 	ldw	r2,-4(fp)
 40094d0:	10800617 	ldw	r2,24(r2)
 40094d4:	1887383a 	mul	r3,r3,r2
 40094d8:	e0bfff17 	ldw	r2,-4(fp)
 40094dc:	10800717 	ldw	r2,28(r2)
 40094e0:	1885383a 	mul	r2,r3,r2
 40094e4:	e0bffe15 	stw	r2,-8(fp)
	return ByteLength;
 40094e8:	e0bffe17 	ldw	r2,-8(fp)
}
 40094ec:	e037883a 	mov	sp,fp
 40094f0:	df000017 	ldw	fp,0(sp)
 40094f4:	dec00104 	addi	sp,sp,4
 40094f8:	f800283a 	ret

040094fc <_Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv>:

void VIPFR_ReadDrawFrame(VIP_FRAME_READER* p, void *pFrame){
 40094fc:	defffb04 	addi	sp,sp,-20
 4009500:	dfc00415 	stw	ra,16(sp)
 4009504:	df000315 	stw	fp,12(sp)
 4009508:	df000304 	addi	fp,sp,12
 400950c:	e13ffe15 	stw	r4,-8(fp)
 4009510:	e17fff15 	stw	r5,-4(fp)
	alt_u32 FrameByteLength;
	FrameByteLength = VIPFR_GetFrameSize(p);
 4009514:	e13ffe17 	ldw	r4,-8(fp)
 4009518:	40094b40 	call	40094b4 <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>
 400951c:	e0bffd15 	stw	r2,-12(fp)
	memcpy(pFrame, VIPFR_GetDrawFrame(p), FrameByteLength);
 4009520:	e13ffe17 	ldw	r4,-8(fp)
 4009524:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4009528:	e1bffd17 	ldw	r6,-12(fp)
 400952c:	100b883a 	mov	r5,r2
 4009530:	e13fff17 	ldw	r4,-4(fp)
 4009534:	400e6e80 	call	400e6e8 <memcpy>
}
 4009538:	0001883a 	nop
 400953c:	e037883a 	mov	sp,fp
 4009540:	dfc00117 	ldw	ra,4(sp)
 4009544:	df000017 	ldw	fp,0(sp)
 4009548:	dec00204 	addi	sp,sp,8
 400954c:	f800283a 	ret

04009550 <_Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv>:

void VIPFR_WriteDrawFrame(VIP_FRAME_READER* p, void *pFrame){
 4009550:	defffb04 	addi	sp,sp,-20
 4009554:	dfc00415 	stw	ra,16(sp)
 4009558:	df000315 	stw	fp,12(sp)
 400955c:	df000304 	addi	fp,sp,12
 4009560:	e13ffe15 	stw	r4,-8(fp)
 4009564:	e17fff15 	stw	r5,-4(fp)
	alt_u32 FrameByteLength;
	FrameByteLength = VIPFR_GetFrameSize(p);
 4009568:	e13ffe17 	ldw	r4,-8(fp)
 400956c:	40094b40 	call	40094b4 <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>
 4009570:	e0bffd15 	stw	r2,-12(fp)
	memcpy(VIPFR_GetDrawFrame(p), pFrame, FrameByteLength);
 4009574:	e13ffe17 	ldw	r4,-8(fp)
 4009578:	400919c0 	call	400919c <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400957c:	e1bffd17 	ldw	r6,-12(fp)
 4009580:	e17fff17 	ldw	r5,-4(fp)
 4009584:	1009883a 	mov	r4,r2
 4009588:	400e6e80 	call	400e6e8 <memcpy>
}
 400958c:	0001883a 	nop
 4009590:	e037883a 	mov	sp,fp
 4009594:	dfc00117 	ldw	ra,4(sp)
 4009598:	df000017 	ldw	fp,0(sp)
 400959c:	dec00204 	addi	sp,sp,8
 40095a0:	f800283a 	ret

040095a4 <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
 40095a4:	defffa04 	addi	sp,sp,-24
 40095a8:	dfc00515 	stw	ra,20(sp)
 40095ac:	df000415 	stw	fp,16(sp)
 40095b0:	df000404 	addi	fp,sp,16
 40095b4:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
 40095b8:	e0bfff17 	ldw	r2,-4(fp)
 40095bc:	10c00517 	ldw	r3,20(r2)
 40095c0:	e0bfff17 	ldw	r2,-4(fp)
 40095c4:	10800617 	ldw	r2,24(r2)
 40095c8:	1887383a 	mul	r3,r3,r2
 40095cc:	e0bfff17 	ldw	r2,-4(fp)
 40095d0:	10800717 	ldw	r2,28(r2)
 40095d4:	1885383a 	mul	r2,r3,r2
 40095d8:	e0bffe15 	stw	r2,-8(fp)
        
    
    if (p->DisplayFrame == 0){
 40095dc:	e0bfff17 	ldw	r2,-4(fp)
 40095e0:	10800303 	ldbu	r2,12(r2)
 40095e4:	10803fcc 	andi	r2,r2,255
 40095e8:	1000071e 	bne	r2,zero,4009608 <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER+0x64>
        pSrc = (alt_u32*)p->Frame0_Base;
 40095ec:	e0bfff17 	ldw	r2,-4(fp)
 40095f0:	10800117 	ldw	r2,4(r2)
 40095f4:	e0bffc15 	stw	r2,-16(fp)
        pDes = (alt_u32*)p->Frame1_Base;
 40095f8:	e0bfff17 	ldw	r2,-4(fp)
 40095fc:	10800217 	ldw	r2,8(r2)
 4009600:	e0bffd15 	stw	r2,-12(fp)
 4009604:	00000606 	br	4009620 <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER+0x7c>
    }else{
        pDes = (alt_u32*)p->Frame0_Base;
 4009608:	e0bfff17 	ldw	r2,-4(fp)
 400960c:	10800117 	ldw	r2,4(r2)
 4009610:	e0bffd15 	stw	r2,-12(fp)
        pSrc = (alt_u32*)p->Frame1_Base;
 4009614:	e0bfff17 	ldw	r2,-4(fp)
 4009618:	10800217 	ldw	r2,8(r2)
 400961c:	e0bffc15 	stw	r2,-16(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
 4009620:	e0bffe17 	ldw	r2,-8(fp)
 4009624:	100d883a 	mov	r6,r2
 4009628:	e17ffc17 	ldw	r5,-16(fp)
 400962c:	e13ffd17 	ldw	r4,-12(fp)
 4009630:	400e6e80 	call	400e6e8 <memcpy>
#endif //ENABLE_DMA    
}
 4009634:	0001883a 	nop
 4009638:	e037883a 	mov	sp,fp
 400963c:	dfc00117 	ldw	ra,4(sp)
 4009640:	df000017 	ldw	fp,0(sp)
 4009644:	dec00204 	addi	sp,sp,8
 4009648:	f800283a 	ret

0400964c <atan>:
 400964c:	defff704 	addi	sp,sp,-36
 4009650:	dc400115 	stw	r17,4(sp)
 4009654:	04600034 	movhi	r17,32768
 4009658:	8c7fffc4 	addi	r17,r17,-1
 400965c:	00910434 	movhi	r2,17424
 4009660:	dc800215 	stw	r18,8(sp)
 4009664:	dc000015 	stw	r16,0(sp)
 4009668:	dfc00815 	stw	ra,32(sp)
 400966c:	ddc00715 	stw	r23,28(sp)
 4009670:	dd800615 	stw	r22,24(sp)
 4009674:	dd400515 	stw	r21,20(sp)
 4009678:	dd000415 	stw	r20,16(sp)
 400967c:	dcc00315 	stw	r19,12(sp)
 4009680:	2c62703a 	and	r17,r5,r17
 4009684:	10bfffc4 	addi	r2,r2,-1
 4009688:	2821883a 	mov	r16,r5
 400968c:	2025883a 	mov	r18,r4
 4009690:	1440090e 	bge	r2,r17,40096b8 <atan+0x6c>
 4009694:	009ffc34 	movhi	r2,32752
 4009698:	1440bf16 	blt	r2,r17,4009998 <atan+0x34c>
 400969c:	8880bd26 	beq	r17,r2,4009994 <atan+0x348>
 40096a0:	00951134 	movhi	r2,21572
 40096a4:	108b4604 	addi	r2,r2,11544
 40096a8:	0400fc0e 	bge	zero,r16,4009a9c <atan+0x450>
 40096ac:	00cffe74 	movhi	r3,16377
 40096b0:	18c87ec4 	addi	r3,r3,8699
 40096b4:	0000bd06 	br	40099ac <atan+0x360>
 40096b8:	008ff734 	movhi	r2,16348
 40096bc:	10bfffc4 	addi	r2,r2,-1
 40096c0:	282b883a 	mov	r21,r5
 40096c4:	1440d216 	blt	r2,r17,4009a10 <atan+0x3c4>
 40096c8:	008f8834 	movhi	r2,15904
 40096cc:	10bfffc4 	addi	r2,r2,-1
 40096d0:	1440c10e 	bge	r2,r17,40099d8 <atan+0x38c>
 40096d4:	053fffc4 	movi	r20,-1
 40096d8:	900d883a 	mov	r6,r18
 40096dc:	800f883a 	mov	r7,r16
 40096e0:	9009883a 	mov	r4,r18
 40096e4:	800b883a 	mov	r5,r16
 40096e8:	400ca180 	call	400ca18 <__muldf3>
 40096ec:	100d883a 	mov	r6,r2
 40096f0:	180f883a 	mov	r7,r3
 40096f4:	1009883a 	mov	r4,r2
 40096f8:	180b883a 	mov	r5,r3
 40096fc:	102f883a 	mov	r23,r2
 4009700:	182d883a 	mov	r22,r3
 4009704:	400ca180 	call	400ca18 <__muldf3>
 4009708:	01b8c8f4 	movhi	r6,58147
 400970c:	01cfe474 	movhi	r7,16273
 4009710:	31b68444 	addi	r6,r6,-9711
 4009714:	39eb4e84 	addi	r7,r7,-21190
 4009718:	1009883a 	mov	r4,r2
 400971c:	180b883a 	mov	r5,r3
 4009720:	1027883a 	mov	r19,r2
 4009724:	1823883a 	mov	r17,r3
 4009728:	400ca180 	call	400ca18 <__muldf3>
 400972c:	01891db4 	movhi	r6,9334
 4009730:	01cfea74 	movhi	r7,16297
 4009734:	31837ac4 	addi	r6,r6,3563
 4009738:	39ded2c4 	addi	r7,r7,31563
 400973c:	1009883a 	mov	r4,r2
 4009740:	180b883a 	mov	r5,r3
 4009744:	400b6b40 	call	400b6b4 <__adddf3>
 4009748:	980d883a 	mov	r6,r19
 400974c:	880f883a 	mov	r7,r17
 4009750:	1009883a 	mov	r4,r2
 4009754:	180b883a 	mov	r5,r3
 4009758:	400ca180 	call	400ca18 <__muldf3>
 400975c:	01a83434 	movhi	r6,41168
 4009760:	01cfec74 	movhi	r7,16305
 4009764:	318f5444 	addi	r6,r6,15697
 4009768:	39c35984 	addi	r7,r7,3430
 400976c:	1009883a 	mov	r4,r2
 4009770:	180b883a 	mov	r5,r3
 4009774:	400b6b40 	call	400b6b4 <__adddf3>
 4009778:	980d883a 	mov	r6,r19
 400977c:	880f883a 	mov	r7,r17
 4009780:	1009883a 	mov	r4,r2
 4009784:	180b883a 	mov	r5,r3
 4009788:	400ca180 	call	400ca18 <__muldf3>
 400978c:	01b15334 	movhi	r6,50508
 4009790:	01cfedf4 	movhi	r7,16311
 4009794:	31881b84 	addi	r6,r6,8302
 4009798:	39d17344 	addi	r7,r7,17869
 400979c:	1009883a 	mov	r4,r2
 40097a0:	180b883a 	mov	r5,r3
 40097a4:	400b6b40 	call	400b6b4 <__adddf3>
 40097a8:	980d883a 	mov	r6,r19
 40097ac:	880f883a 	mov	r7,r17
 40097b0:	1009883a 	mov	r4,r2
 40097b4:	180b883a 	mov	r5,r3
 40097b8:	400ca180 	call	400ca18 <__muldf3>
 40097bc:	01a48074 	movhi	r6,37377
 40097c0:	01cff0b4 	movhi	r7,16322
 40097c4:	31a0ffc4 	addi	r6,r6,-31745
 40097c8:	39d24904 	addi	r7,r7,18724
 40097cc:	1009883a 	mov	r4,r2
 40097d0:	180b883a 	mov	r5,r3
 40097d4:	400b6b40 	call	400b6b4 <__adddf3>
 40097d8:	980d883a 	mov	r6,r19
 40097dc:	880f883a 	mov	r7,r17
 40097e0:	1009883a 	mov	r4,r2
 40097e4:	180b883a 	mov	r5,r3
 40097e8:	400ca180 	call	400ca18 <__muldf3>
 40097ec:	01955574 	movhi	r6,21845
 40097f0:	01cff574 	movhi	r7,16341
 40097f4:	31954344 	addi	r6,r6,21773
 40097f8:	39d55544 	addi	r7,r7,21845
 40097fc:	1009883a 	mov	r4,r2
 4009800:	180b883a 	mov	r5,r3
 4009804:	400b6b40 	call	400b6b4 <__adddf3>
 4009808:	b80d883a 	mov	r6,r23
 400980c:	b00f883a 	mov	r7,r22
 4009810:	1009883a 	mov	r4,r2
 4009814:	180b883a 	mov	r5,r3
 4009818:	400ca180 	call	400ca18 <__muldf3>
 400981c:	018b1ab4 	movhi	r6,11370
 4009820:	01efe8f4 	movhi	r7,49059
 4009824:	319b0bc4 	addi	r6,r6,27695
 4009828:	39ed1104 	addi	r7,r7,-19388
 400982c:	9809883a 	mov	r4,r19
 4009830:	880b883a 	mov	r5,r17
 4009834:	102f883a 	mov	r23,r2
 4009838:	182d883a 	mov	r22,r3
 400983c:	400ca180 	call	400ca18 <__muldf3>
 4009840:	0194b7f4 	movhi	r6,21215
 4009844:	01cfebb4 	movhi	r7,16302
 4009848:	31bf6684 	addi	r6,r6,-614
 400984c:	39f78b44 	addi	r7,r7,-8659
 4009850:	1009883a 	mov	r4,r2
 4009854:	180b883a 	mov	r5,r3
 4009858:	400d1300 	call	400d130 <__subdf3>
 400985c:	980d883a 	mov	r6,r19
 4009860:	880f883a 	mov	r7,r17
 4009864:	1009883a 	mov	r4,r2
 4009868:	180b883a 	mov	r5,r3
 400986c:	400ca180 	call	400ca18 <__muldf3>
 4009870:	01abdd74 	movhi	r6,44917
 4009874:	01cfed34 	movhi	r7,16308
 4009878:	31a69b44 	addi	r6,r6,-26003
 400987c:	39ec3c84 	addi	r7,r7,-20238
 4009880:	1009883a 	mov	r4,r2
 4009884:	180b883a 	mov	r5,r3
 4009888:	400d1300 	call	400d130 <__subdf3>
 400988c:	980d883a 	mov	r6,r19
 4009890:	880f883a 	mov	r7,r17
 4009894:	1009883a 	mov	r4,r2
 4009898:	180b883a 	mov	r5,r3
 400989c:	400ca180 	call	400ca18 <__muldf3>
 40098a0:	01bf88f4 	movhi	r6,65059
 40098a4:	01cfef34 	movhi	r7,16316
 40098a8:	31859c44 	addi	r6,r6,5745
 40098ac:	39dc7184 	addi	r7,r7,29126
 40098b0:	1009883a 	mov	r4,r2
 40098b4:	180b883a 	mov	r5,r3
 40098b8:	400d1300 	call	400d130 <__subdf3>
 40098bc:	980d883a 	mov	r6,r19
 40098c0:	880f883a 	mov	r7,r17
 40098c4:	1009883a 	mov	r4,r2
 40098c8:	180b883a 	mov	r5,r3
 40098cc:	400ca180 	call	400ca18 <__muldf3>
 40098d0:	01a66674 	movhi	r6,39321
 40098d4:	01cff2b4 	movhi	r7,16330
 40098d8:	31baf104 	addi	r6,r6,-5180
 40098dc:	39e66644 	addi	r7,r7,-26215
 40098e0:	1009883a 	mov	r4,r2
 40098e4:	180b883a 	mov	r5,r3
 40098e8:	400d1300 	call	400d130 <__subdf3>
 40098ec:	1009883a 	mov	r4,r2
 40098f0:	980d883a 	mov	r6,r19
 40098f4:	880f883a 	mov	r7,r17
 40098f8:	180b883a 	mov	r5,r3
 40098fc:	400ca180 	call	400ca18 <__muldf3>
 4009900:	013fffc4 	movi	r4,-1
 4009904:	a1006826 	beq	r20,r4,4009aa8 <atan+0x45c>
 4009908:	100d883a 	mov	r6,r2
 400990c:	180f883a 	mov	r7,r3
 4009910:	b809883a 	mov	r4,r23
 4009914:	b00b883a 	mov	r5,r22
 4009918:	400b6b40 	call	400b6b4 <__adddf3>
 400991c:	900d883a 	mov	r6,r18
 4009920:	800f883a 	mov	r7,r16
 4009924:	1009883a 	mov	r4,r2
 4009928:	180b883a 	mov	r5,r3
 400992c:	400ca180 	call	400ca18 <__muldf3>
 4009930:	a02890fa 	slli	r20,r20,3
 4009934:	1009883a 	mov	r4,r2
 4009938:	04410234 	movhi	r17,1032
 400993c:	00810234 	movhi	r2,1032
 4009940:	1094d204 	addi	r2,r2,21320
 4009944:	8c54da04 	addi	r17,r17,21352
 4009948:	8d23883a 	add	r17,r17,r20
 400994c:	1529883a 	add	r20,r2,r20
 4009950:	a1800017 	ldw	r6,0(r20)
 4009954:	a1c00117 	ldw	r7,4(r20)
 4009958:	180b883a 	mov	r5,r3
 400995c:	400d1300 	call	400d130 <__subdf3>
 4009960:	900d883a 	mov	r6,r18
 4009964:	800f883a 	mov	r7,r16
 4009968:	1009883a 	mov	r4,r2
 400996c:	180b883a 	mov	r5,r3
 4009970:	400d1300 	call	400d130 <__subdf3>
 4009974:	89000017 	ldw	r4,0(r17)
 4009978:	89400117 	ldw	r5,4(r17)
 400997c:	100d883a 	mov	r6,r2
 4009980:	180f883a 	mov	r7,r3
 4009984:	400d1300 	call	400d130 <__subdf3>
 4009988:	a800080e 	bge	r21,zero,40099ac <atan+0x360>
 400998c:	18e0003c 	xorhi	r3,r3,32768
 4009990:	00000606 	br	40099ac <atan+0x360>
 4009994:	203f4226 	beq	r4,zero,40096a0 <__alt_mem_epcs_flash_controller_0+0xfb0086a0>
 4009998:	900d883a 	mov	r6,r18
 400999c:	800f883a 	mov	r7,r16
 40099a0:	9009883a 	mov	r4,r18
 40099a4:	800b883a 	mov	r5,r16
 40099a8:	400b6b40 	call	400b6b4 <__adddf3>
 40099ac:	dfc00817 	ldw	ra,32(sp)
 40099b0:	ddc00717 	ldw	r23,28(sp)
 40099b4:	dd800617 	ldw	r22,24(sp)
 40099b8:	dd400517 	ldw	r21,20(sp)
 40099bc:	dd000417 	ldw	r20,16(sp)
 40099c0:	dcc00317 	ldw	r19,12(sp)
 40099c4:	dc800217 	ldw	r18,8(sp)
 40099c8:	dc400117 	ldw	r17,4(sp)
 40099cc:	dc000017 	ldw	r16,0(sp)
 40099d0:	dec00904 	addi	sp,sp,36
 40099d4:	f800283a 	ret
 40099d8:	01a20034 	movhi	r6,34816
 40099dc:	01df8e34 	movhi	r7,32312
 40099e0:	319d6704 	addi	r6,r6,30108
 40099e4:	39f90f04 	addi	r7,r7,-7108
 40099e8:	400b6b40 	call	400b6b4 <__adddf3>
 40099ec:	000d883a 	mov	r6,zero
 40099f0:	01cffc34 	movhi	r7,16368
 40099f4:	1009883a 	mov	r4,r2
 40099f8:	180b883a 	mov	r5,r3
 40099fc:	400c8480 	call	400c848 <__gedf2>
 4009a00:	00bf340e 	bge	zero,r2,40096d4 <__alt_mem_epcs_flash_controller_0+0xfb0086d4>
 4009a04:	9005883a 	mov	r2,r18
 4009a08:	8007883a 	mov	r3,r16
 4009a0c:	003fe706 	br	40099ac <__alt_mem_epcs_flash_controller_0+0xfb0089ac>
 4009a10:	4009bd40 	call	4009bd4 <fabs>
 4009a14:	1025883a 	mov	r18,r2
 4009a18:	008ffcf4 	movhi	r2,16371
 4009a1c:	10bfffc4 	addi	r2,r2,-1
 4009a20:	1821883a 	mov	r16,r3
 4009a24:	14403016 	blt	r2,r17,4009ae8 <atan+0x49c>
 4009a28:	008ff9b4 	movhi	r2,16358
 4009a2c:	10bfffc4 	addi	r2,r2,-1
 4009a30:	14405316 	blt	r2,r17,4009b80 <atan+0x534>
 4009a34:	900d883a 	mov	r6,r18
 4009a38:	9009883a 	mov	r4,r18
 4009a3c:	180f883a 	mov	r7,r3
 4009a40:	180b883a 	mov	r5,r3
 4009a44:	400b6b40 	call	400b6b4 <__adddf3>
 4009a48:	000d883a 	mov	r6,zero
 4009a4c:	01cffc34 	movhi	r7,16368
 4009a50:	1009883a 	mov	r4,r2
 4009a54:	180b883a 	mov	r5,r3
 4009a58:	400d1300 	call	400d130 <__subdf3>
 4009a5c:	9009883a 	mov	r4,r18
 4009a60:	800b883a 	mov	r5,r16
 4009a64:	000d883a 	mov	r6,zero
 4009a68:	01d00034 	movhi	r7,16384
 4009a6c:	1027883a 	mov	r19,r2
 4009a70:	1823883a 	mov	r17,r3
 4009a74:	400b6b40 	call	400b6b4 <__adddf3>
 4009a78:	100d883a 	mov	r6,r2
 4009a7c:	180f883a 	mov	r7,r3
 4009a80:	9809883a 	mov	r4,r19
 4009a84:	880b883a 	mov	r5,r17
 4009a88:	400bf600 	call	400bf60 <__divdf3>
 4009a8c:	1025883a 	mov	r18,r2
 4009a90:	1821883a 	mov	r16,r3
 4009a94:	0029883a 	mov	r20,zero
 4009a98:	003f0f06 	br	40096d8 <__alt_mem_epcs_flash_controller_0+0xfb0086d8>
 4009a9c:	00effe74 	movhi	r3,49145
 4009aa0:	18c87ec4 	addi	r3,r3,8699
 4009aa4:	003fc106 	br	40099ac <__alt_mem_epcs_flash_controller_0+0xfb0089ac>
 4009aa8:	b809883a 	mov	r4,r23
 4009aac:	b00b883a 	mov	r5,r22
 4009ab0:	100d883a 	mov	r6,r2
 4009ab4:	180f883a 	mov	r7,r3
 4009ab8:	400b6b40 	call	400b6b4 <__adddf3>
 4009abc:	900d883a 	mov	r6,r18
 4009ac0:	800f883a 	mov	r7,r16
 4009ac4:	1009883a 	mov	r4,r2
 4009ac8:	180b883a 	mov	r5,r3
 4009acc:	400ca180 	call	400ca18 <__muldf3>
 4009ad0:	100d883a 	mov	r6,r2
 4009ad4:	180f883a 	mov	r7,r3
 4009ad8:	9009883a 	mov	r4,r18
 4009adc:	800b883a 	mov	r5,r16
 4009ae0:	400d1300 	call	400d130 <__subdf3>
 4009ae4:	003fb106 	br	40099ac <__alt_mem_epcs_flash_controller_0+0xfb0089ac>
 4009ae8:	009000f4 	movhi	r2,16387
 4009aec:	109fffc4 	addi	r2,r2,32767
 4009af0:	14401a16 	blt	r2,r17,4009b5c <atan+0x510>
 4009af4:	9009883a 	mov	r4,r18
 4009af8:	000d883a 	mov	r6,zero
 4009afc:	01cffe34 	movhi	r7,16376
 4009b00:	180b883a 	mov	r5,r3
 4009b04:	400d1300 	call	400d130 <__subdf3>
 4009b08:	9009883a 	mov	r4,r18
 4009b0c:	800b883a 	mov	r5,r16
 4009b10:	000d883a 	mov	r6,zero
 4009b14:	01cffe34 	movhi	r7,16376
 4009b18:	1027883a 	mov	r19,r2
 4009b1c:	1823883a 	mov	r17,r3
 4009b20:	400ca180 	call	400ca18 <__muldf3>
 4009b24:	000d883a 	mov	r6,zero
 4009b28:	01cffc34 	movhi	r7,16368
 4009b2c:	1009883a 	mov	r4,r2
 4009b30:	180b883a 	mov	r5,r3
 4009b34:	400b6b40 	call	400b6b4 <__adddf3>
 4009b38:	100d883a 	mov	r6,r2
 4009b3c:	180f883a 	mov	r7,r3
 4009b40:	9809883a 	mov	r4,r19
 4009b44:	880b883a 	mov	r5,r17
 4009b48:	400bf600 	call	400bf60 <__divdf3>
 4009b4c:	1025883a 	mov	r18,r2
 4009b50:	1821883a 	mov	r16,r3
 4009b54:	05000084 	movi	r20,2
 4009b58:	003edf06 	br	40096d8 <__alt_mem_epcs_flash_controller_0+0xfb0086d8>
 4009b5c:	900d883a 	mov	r6,r18
 4009b60:	180f883a 	mov	r7,r3
 4009b64:	0009883a 	mov	r4,zero
 4009b68:	016ffc34 	movhi	r5,49136
 4009b6c:	400bf600 	call	400bf60 <__divdf3>
 4009b70:	1025883a 	mov	r18,r2
 4009b74:	1821883a 	mov	r16,r3
 4009b78:	050000c4 	movi	r20,3
 4009b7c:	003ed606 	br	40096d8 <__alt_mem_epcs_flash_controller_0+0xfb0086d8>
 4009b80:	9009883a 	mov	r4,r18
 4009b84:	000d883a 	mov	r6,zero
 4009b88:	01cffc34 	movhi	r7,16368
 4009b8c:	180b883a 	mov	r5,r3
 4009b90:	400d1300 	call	400d130 <__subdf3>
 4009b94:	9009883a 	mov	r4,r18
 4009b98:	800b883a 	mov	r5,r16
 4009b9c:	000d883a 	mov	r6,zero
 4009ba0:	01cffc34 	movhi	r7,16368
 4009ba4:	1027883a 	mov	r19,r2
 4009ba8:	1823883a 	mov	r17,r3
 4009bac:	400b6b40 	call	400b6b4 <__adddf3>
 4009bb0:	100d883a 	mov	r6,r2
 4009bb4:	180f883a 	mov	r7,r3
 4009bb8:	9809883a 	mov	r4,r19
 4009bbc:	880b883a 	mov	r5,r17
 4009bc0:	400bf600 	call	400bf60 <__divdf3>
 4009bc4:	1025883a 	mov	r18,r2
 4009bc8:	1821883a 	mov	r16,r3
 4009bcc:	05000044 	movi	r20,1
 4009bd0:	003ec106 	br	40096d8 <__alt_mem_epcs_flash_controller_0+0xfb0086d8>

04009bd4 <fabs>:
 4009bd4:	00e00034 	movhi	r3,32768
 4009bd8:	18ffffc4 	addi	r3,r3,-1
 4009bdc:	2005883a 	mov	r2,r4
 4009be0:	28c6703a 	and	r3,r5,r3
 4009be4:	f800283a 	ret

04009be8 <sqrt>:
 4009be8:	defff104 	addi	sp,sp,-60
 4009bec:	dd000d15 	stw	r20,52(sp)
 4009bf0:	050103f4 	movhi	r20,1039
 4009bf4:	dcc00c15 	stw	r19,48(sp)
 4009bf8:	dc800b15 	stw	r18,44(sp)
 4009bfc:	dc400a15 	stw	r17,40(sp)
 4009c00:	dc000915 	stw	r16,36(sp)
 4009c04:	dfc00e15 	stw	ra,56(sp)
 4009c08:	a50bf404 	addi	r20,r20,12240
 4009c0c:	2027883a 	mov	r19,r4
 4009c10:	2825883a 	mov	r18,r5
 4009c14:	4009d180 	call	4009d18 <__ieee754_sqrt>
 4009c18:	1821883a 	mov	r16,r3
 4009c1c:	a0c00017 	ldw	r3,0(r20)
 4009c20:	1023883a 	mov	r17,r2
 4009c24:	00bfffc4 	movi	r2,-1
 4009c28:	18800a26 	beq	r3,r2,4009c54 <sqrt+0x6c>
 4009c2c:	9809883a 	mov	r4,r19
 4009c30:	900b883a 	mov	r5,r18
 4009c34:	4009fa00 	call	4009fa0 <__fpclassifyd>
 4009c38:	10000626 	beq	r2,zero,4009c54 <sqrt+0x6c>
 4009c3c:	000d883a 	mov	r6,zero
 4009c40:	000f883a 	mov	r7,zero
 4009c44:	9809883a 	mov	r4,r19
 4009c48:	900b883a 	mov	r5,r18
 4009c4c:	400c9240 	call	400c924 <__ledf2>
 4009c50:	10000a16 	blt	r2,zero,4009c7c <sqrt+0x94>
 4009c54:	8805883a 	mov	r2,r17
 4009c58:	8007883a 	mov	r3,r16
 4009c5c:	dfc00e17 	ldw	ra,56(sp)
 4009c60:	dd000d17 	ldw	r20,52(sp)
 4009c64:	dcc00c17 	ldw	r19,48(sp)
 4009c68:	dc800b17 	ldw	r18,44(sp)
 4009c6c:	dc400a17 	ldw	r17,40(sp)
 4009c70:	dc000917 	ldw	r16,36(sp)
 4009c74:	dec00f04 	addi	sp,sp,60
 4009c78:	f800283a 	ret
 4009c7c:	00800044 	movi	r2,1
 4009c80:	d8800015 	stw	r2,0(sp)
 4009c84:	a4000017 	ldw	r16,0(r20)
 4009c88:	00810234 	movhi	r2,1032
 4009c8c:	1094e204 	addi	r2,r2,21384
 4009c90:	d8800115 	stw	r2,4(sp)
 4009c94:	d8000815 	stw	zero,32(sp)
 4009c98:	dcc00415 	stw	r19,16(sp)
 4009c9c:	dc800515 	stw	r18,20(sp)
 4009ca0:	dcc00215 	stw	r19,8(sp)
 4009ca4:	dc800315 	stw	r18,12(sp)
 4009ca8:	80000a1e 	bne	r16,zero,4009cd4 <sqrt+0xec>
 4009cac:	d8000615 	stw	zero,24(sp)
 4009cb0:	d8000715 	stw	zero,28(sp)
 4009cb4:	d809883a 	mov	r4,sp
 4009cb8:	400a0140 	call	400a014 <matherr>
 4009cbc:	10000e26 	beq	r2,zero,4009cf8 <sqrt+0x110>
 4009cc0:	d8800817 	ldw	r2,32(sp)
 4009cc4:	1000101e 	bne	r2,zero,4009d08 <sqrt+0x120>
 4009cc8:	d8800617 	ldw	r2,24(sp)
 4009ccc:	d8c00717 	ldw	r3,28(sp)
 4009cd0:	003fe206 	br	4009c5c <__alt_mem_epcs_flash_controller_0+0xfb008c5c>
 4009cd4:	000d883a 	mov	r6,zero
 4009cd8:	000f883a 	mov	r7,zero
 4009cdc:	0009883a 	mov	r4,zero
 4009ce0:	000b883a 	mov	r5,zero
 4009ce4:	400bf600 	call	400bf60 <__divdf3>
 4009ce8:	d8800615 	stw	r2,24(sp)
 4009cec:	d8c00715 	stw	r3,28(sp)
 4009cf0:	00800084 	movi	r2,2
 4009cf4:	80bfef1e 	bne	r16,r2,4009cb4 <__alt_mem_epcs_flash_controller_0+0xfb008cb4>
 4009cf8:	400dea40 	call	400dea4 <__errno>
 4009cfc:	00c00844 	movi	r3,33
 4009d00:	10c00015 	stw	r3,0(r2)
 4009d04:	003fee06 	br	4009cc0 <__alt_mem_epcs_flash_controller_0+0xfb008cc0>
 4009d08:	400dea40 	call	400dea4 <__errno>
 4009d0c:	d8c00817 	ldw	r3,32(sp)
 4009d10:	10c00015 	stw	r3,0(r2)
 4009d14:	003fec06 	br	4009cc8 <__alt_mem_epcs_flash_controller_0+0xfb008cc8>

04009d18 <__ieee754_sqrt>:
 4009d18:	defffd04 	addi	sp,sp,-12
 4009d1c:	dc400115 	stw	r17,4(sp)
 4009d20:	dc000015 	stw	r16,0(sp)
 4009d24:	dfc00215 	stw	ra,8(sp)
 4009d28:	28dffc2c 	andhi	r3,r5,32752
 4009d2c:	009ffc34 	movhi	r2,32752
 4009d30:	2821883a 	mov	r16,r5
 4009d34:	2023883a 	mov	r17,r4
 4009d38:	200d883a 	mov	r6,r4
 4009d3c:	18807b26 	beq	r3,r2,4009f2c <__ieee754_sqrt+0x214>
 4009d40:	01405f0e 	bge	zero,r5,4009ec0 <__ieee754_sqrt+0x1a8>
 4009d44:	2815d53a 	srai	r10,r5,20
 4009d48:	50006a26 	beq	r10,zero,4009ef4 <__ieee754_sqrt+0x1dc>
 4009d4c:	00c00434 	movhi	r3,16
 4009d50:	52bf0044 	addi	r10,r10,-1023
 4009d54:	18ffffc4 	addi	r3,r3,-1
 4009d58:	80c6703a 	and	r3,r16,r3
 4009d5c:	5080004c 	andi	r2,r10,1
 4009d60:	18c00434 	orhi	r3,r3,16
 4009d64:	1000511e 	bne	r2,zero,4009eac <__ieee754_sqrt+0x194>
 4009d68:	3004d7fa 	srli	r2,r6,31
 4009d6c:	5015d07a 	srai	r10,r10,1
 4009d70:	18c7883a 	add	r3,r3,r3
 4009d74:	10c5883a 	add	r2,r2,r3
 4009d78:	01400584 	movi	r5,22
 4009d7c:	3187883a 	add	r3,r6,r6
 4009d80:	0013883a 	mov	r9,zero
 4009d84:	000f883a 	mov	r7,zero
 4009d88:	01000834 	movhi	r4,32
 4009d8c:	390d883a 	add	r6,r7,r4
 4009d90:	1810d7fa 	srli	r8,r3,31
 4009d94:	297fffc4 	addi	r5,r5,-1
 4009d98:	11800316 	blt	r2,r6,4009da8 <__ieee754_sqrt+0x90>
 4009d9c:	1185c83a 	sub	r2,r2,r6
 4009da0:	310f883a 	add	r7,r6,r4
 4009da4:	4913883a 	add	r9,r9,r4
 4009da8:	1085883a 	add	r2,r2,r2
 4009dac:	4085883a 	add	r2,r8,r2
 4009db0:	18c7883a 	add	r3,r3,r3
 4009db4:	2008d07a 	srli	r4,r4,1
 4009db8:	283ff41e 	bne	r5,zero,4009d8c <__alt_mem_epcs_flash_controller_0+0xfb008d8c>
 4009dbc:	01200034 	movhi	r4,32768
 4009dc0:	01800804 	movi	r6,32
 4009dc4:	0011883a 	mov	r8,zero
 4009dc8:	0019883a 	mov	r12,zero
 4009dcc:	201b883a 	mov	r13,r4
 4009dd0:	00000806 	br	4009df4 <__ieee754_sqrt+0xdc>
 4009dd4:	38801726 	beq	r7,r2,4009e34 <__ieee754_sqrt+0x11c>
 4009dd8:	180ad7fa 	srli	r5,r3,31
 4009ddc:	1085883a 	add	r2,r2,r2
 4009de0:	31bfffc4 	addi	r6,r6,-1
 4009de4:	2885883a 	add	r2,r5,r2
 4009de8:	18c7883a 	add	r3,r3,r3
 4009dec:	2008d07a 	srli	r4,r4,1
 4009df0:	30001726 	beq	r6,zero,4009e50 <__ieee754_sqrt+0x138>
 4009df4:	230b883a 	add	r5,r4,r12
 4009df8:	38bff60e 	bge	r7,r2,4009dd4 <__alt_mem_epcs_flash_controller_0+0xfb008dd4>
 4009dfc:	2ae0002c 	andhi	r11,r5,32768
 4009e00:	2919883a 	add	r12,r5,r4
 4009e04:	5b400826 	beq	r11,r13,4009e28 <__ieee754_sqrt+0x110>
 4009e08:	3817883a 	mov	r11,r7
 4009e0c:	11c5c83a 	sub	r2,r2,r7
 4009e10:	1940012e 	bgeu	r3,r5,4009e18 <__ieee754_sqrt+0x100>
 4009e14:	10bfffc4 	addi	r2,r2,-1
 4009e18:	1947c83a 	sub	r3,r3,r5
 4009e1c:	4111883a 	add	r8,r8,r4
 4009e20:	580f883a 	mov	r7,r11
 4009e24:	003fec06 	br	4009dd8 <__alt_mem_epcs_flash_controller_0+0xfb008dd8>
 4009e28:	603ff716 	blt	r12,zero,4009e08 <__alt_mem_epcs_flash_controller_0+0xfb008e08>
 4009e2c:	3ac00044 	addi	r11,r7,1
 4009e30:	003ff606 	br	4009e0c <__alt_mem_epcs_flash_controller_0+0xfb008e0c>
 4009e34:	19401936 	bltu	r3,r5,4009e9c <__ieee754_sqrt+0x184>
 4009e38:	2ae0002c 	andhi	r11,r5,32768
 4009e3c:	2919883a 	add	r12,r5,r4
 4009e40:	5b404526 	beq	r11,r13,4009f58 <__ieee754_sqrt+0x240>
 4009e44:	1017883a 	mov	r11,r2
 4009e48:	0005883a 	mov	r2,zero
 4009e4c:	003ff206 	br	4009e18 <__alt_mem_epcs_flash_controller_0+0xfb008e18>
 4009e50:	10c4b03a 	or	r2,r2,r3
 4009e54:	10000426 	beq	r2,zero,4009e68 <__ieee754_sqrt+0x150>
 4009e58:	00bfffc4 	movi	r2,-1
 4009e5c:	40804026 	beq	r8,r2,4009f60 <__ieee754_sqrt+0x248>
 4009e60:	4080004c 	andi	r2,r8,1
 4009e64:	4091883a 	add	r8,r8,r2
 4009e68:	4004d07a 	srli	r2,r8,1
 4009e6c:	4807d07a 	srai	r3,r9,1
 4009e70:	010ff834 	movhi	r4,16352
 4009e74:	4a40004c 	andi	r9,r9,1
 4009e78:	1909883a 	add	r4,r3,r4
 4009e7c:	4800091e 	bne	r9,zero,4009ea4 <__ieee754_sqrt+0x18c>
 4009e80:	5006953a 	slli	r3,r10,20
 4009e84:	1907883a 	add	r3,r3,r4
 4009e88:	dfc00217 	ldw	ra,8(sp)
 4009e8c:	dc400117 	ldw	r17,4(sp)
 4009e90:	dc000017 	ldw	r16,0(sp)
 4009e94:	dec00304 	addi	sp,sp,12
 4009e98:	f800283a 	ret
 4009e9c:	3805883a 	mov	r2,r7
 4009ea0:	003fcd06 	br	4009dd8 <__alt_mem_epcs_flash_controller_0+0xfb008dd8>
 4009ea4:	10a00034 	orhi	r2,r2,32768
 4009ea8:	003ff506 	br	4009e80 <__alt_mem_epcs_flash_controller_0+0xfb008e80>
 4009eac:	3004d7fa 	srli	r2,r6,31
 4009eb0:	18c7883a 	add	r3,r3,r3
 4009eb4:	318d883a 	add	r6,r6,r6
 4009eb8:	10c7883a 	add	r3,r2,r3
 4009ebc:	003faa06 	br	4009d68 <__alt_mem_epcs_flash_controller_0+0xfb008d68>
 4009ec0:	00a00034 	movhi	r2,32768
 4009ec4:	10bfffc4 	addi	r2,r2,-1
 4009ec8:	2884703a 	and	r2,r5,r2
 4009ecc:	1104b03a 	or	r2,r2,r4
 4009ed0:	10001e26 	beq	r2,zero,4009f4c <__ieee754_sqrt+0x234>
 4009ed4:	2800291e 	bne	r5,zero,4009f7c <__ieee754_sqrt+0x264>
 4009ed8:	0015883a 	mov	r10,zero
 4009edc:	3020d2fa 	srli	r16,r6,11
 4009ee0:	52bffac4 	addi	r10,r10,-21
 4009ee4:	300c957a 	slli	r6,r6,21
 4009ee8:	803ffc26 	beq	r16,zero,4009edc <__alt_mem_epcs_flash_controller_0+0xfb008edc>
 4009eec:	8080042c 	andhi	r2,r16,16
 4009ef0:	10001e1e 	bne	r2,zero,4009f6c <__ieee754_sqrt+0x254>
 4009ef4:	0005883a 	mov	r2,zero
 4009ef8:	00000106 	br	4009f00 <__ieee754_sqrt+0x1e8>
 4009efc:	1805883a 	mov	r2,r3
 4009f00:	8421883a 	add	r16,r16,r16
 4009f04:	8100042c 	andhi	r4,r16,16
 4009f08:	10c00044 	addi	r3,r2,1
 4009f0c:	203ffb26 	beq	r4,zero,4009efc <__alt_mem_epcs_flash_controller_0+0xfb008efc>
 4009f10:	01000804 	movi	r4,32
 4009f14:	20c9c83a 	sub	r4,r4,r3
 4009f18:	3108d83a 	srl	r4,r6,r4
 4009f1c:	5095c83a 	sub	r10,r10,r2
 4009f20:	30cc983a 	sll	r6,r6,r3
 4009f24:	2420b03a 	or	r16,r4,r16
 4009f28:	003f8806 	br	4009d4c <__alt_mem_epcs_flash_controller_0+0xfb008d4c>
 4009f2c:	280f883a 	mov	r7,r5
 4009f30:	400ca180 	call	400ca18 <__muldf3>
 4009f34:	880d883a 	mov	r6,r17
 4009f38:	800f883a 	mov	r7,r16
 4009f3c:	1009883a 	mov	r4,r2
 4009f40:	180b883a 	mov	r5,r3
 4009f44:	400b6b40 	call	400b6b4 <__adddf3>
 4009f48:	003fcf06 	br	4009e88 <__alt_mem_epcs_flash_controller_0+0xfb008e88>
 4009f4c:	2005883a 	mov	r2,r4
 4009f50:	2807883a 	mov	r3,r5
 4009f54:	003fcc06 	br	4009e88 <__alt_mem_epcs_flash_controller_0+0xfb008e88>
 4009f58:	603fba16 	blt	r12,zero,4009e44 <__alt_mem_epcs_flash_controller_0+0xfb008e44>
 4009f5c:	003fb306 	br	4009e2c <__alt_mem_epcs_flash_controller_0+0xfb008e2c>
 4009f60:	4a400044 	addi	r9,r9,1
 4009f64:	0005883a 	mov	r2,zero
 4009f68:	003fc006 	br	4009e6c <__alt_mem_epcs_flash_controller_0+0xfb008e6c>
 4009f6c:	01000804 	movi	r4,32
 4009f70:	00bfffc4 	movi	r2,-1
 4009f74:	0007883a 	mov	r3,zero
 4009f78:	003fe706 	br	4009f18 <__alt_mem_epcs_flash_controller_0+0xfb008f18>
 4009f7c:	200d883a 	mov	r6,r4
 4009f80:	280f883a 	mov	r7,r5
 4009f84:	400d1300 	call	400d130 <__subdf3>
 4009f88:	100d883a 	mov	r6,r2
 4009f8c:	180f883a 	mov	r7,r3
 4009f90:	1009883a 	mov	r4,r2
 4009f94:	180b883a 	mov	r5,r3
 4009f98:	400bf600 	call	400bf60 <__divdf3>
 4009f9c:	003fba06 	br	4009e88 <__alt_mem_epcs_flash_controller_0+0xfb008e88>

04009fa0 <__fpclassifyd>:
 4009fa0:	00a00034 	movhi	r2,32768
 4009fa4:	10bfffc4 	addi	r2,r2,-1
 4009fa8:	2884703a 	and	r2,r5,r2
 4009fac:	10000726 	beq	r2,zero,4009fcc <__fpclassifyd+0x2c>
 4009fb0:	00fffc34 	movhi	r3,65520
 4009fb4:	019ff834 	movhi	r6,32736
 4009fb8:	28c7883a 	add	r3,r5,r3
 4009fbc:	31bfffc4 	addi	r6,r6,-1
 4009fc0:	30c00536 	bltu	r6,r3,4009fd8 <__fpclassifyd+0x38>
 4009fc4:	00800104 	movi	r2,4
 4009fc8:	f800283a 	ret
 4009fcc:	2000021e 	bne	r4,zero,4009fd8 <__fpclassifyd+0x38>
 4009fd0:	00800084 	movi	r2,2
 4009fd4:	f800283a 	ret
 4009fd8:	00dffc34 	movhi	r3,32752
 4009fdc:	019ff834 	movhi	r6,32736
 4009fe0:	28cb883a 	add	r5,r5,r3
 4009fe4:	31bfffc4 	addi	r6,r6,-1
 4009fe8:	317ff62e 	bgeu	r6,r5,4009fc4 <__alt_mem_epcs_flash_controller_0+0xfb008fc4>
 4009fec:	01400434 	movhi	r5,16
 4009ff0:	297fffc4 	addi	r5,r5,-1
 4009ff4:	28800236 	bltu	r5,r2,400a000 <__fpclassifyd+0x60>
 4009ff8:	008000c4 	movi	r2,3
 4009ffc:	f800283a 	ret
 400a000:	10c00226 	beq	r2,r3,400a00c <__fpclassifyd+0x6c>
 400a004:	0005883a 	mov	r2,zero
 400a008:	f800283a 	ret
 400a00c:	2005003a 	cmpeq	r2,r4,zero
 400a010:	f800283a 	ret

0400a014 <matherr>:
 400a014:	0005883a 	mov	r2,zero
 400a018:	f800283a 	ret

0400a01c <__divsi3>:
 400a01c:	20001b16 	blt	r4,zero,400a08c <__divsi3+0x70>
 400a020:	000f883a 	mov	r7,zero
 400a024:	28001616 	blt	r5,zero,400a080 <__divsi3+0x64>
 400a028:	200d883a 	mov	r6,r4
 400a02c:	29001a2e 	bgeu	r5,r4,400a098 <__divsi3+0x7c>
 400a030:	00800804 	movi	r2,32
 400a034:	00c00044 	movi	r3,1
 400a038:	00000106 	br	400a040 <__divsi3+0x24>
 400a03c:	10000d26 	beq	r2,zero,400a074 <__divsi3+0x58>
 400a040:	294b883a 	add	r5,r5,r5
 400a044:	10bfffc4 	addi	r2,r2,-1
 400a048:	18c7883a 	add	r3,r3,r3
 400a04c:	293ffb36 	bltu	r5,r4,400a03c <__alt_mem_epcs_flash_controller_0+0xfb00903c>
 400a050:	0005883a 	mov	r2,zero
 400a054:	18000726 	beq	r3,zero,400a074 <__divsi3+0x58>
 400a058:	0005883a 	mov	r2,zero
 400a05c:	31400236 	bltu	r6,r5,400a068 <__divsi3+0x4c>
 400a060:	314dc83a 	sub	r6,r6,r5
 400a064:	10c4b03a 	or	r2,r2,r3
 400a068:	1806d07a 	srli	r3,r3,1
 400a06c:	280ad07a 	srli	r5,r5,1
 400a070:	183ffa1e 	bne	r3,zero,400a05c <__alt_mem_epcs_flash_controller_0+0xfb00905c>
 400a074:	38000126 	beq	r7,zero,400a07c <__divsi3+0x60>
 400a078:	0085c83a 	sub	r2,zero,r2
 400a07c:	f800283a 	ret
 400a080:	014bc83a 	sub	r5,zero,r5
 400a084:	39c0005c 	xori	r7,r7,1
 400a088:	003fe706 	br	400a028 <__alt_mem_epcs_flash_controller_0+0xfb009028>
 400a08c:	0109c83a 	sub	r4,zero,r4
 400a090:	01c00044 	movi	r7,1
 400a094:	003fe306 	br	400a024 <__alt_mem_epcs_flash_controller_0+0xfb009024>
 400a098:	00c00044 	movi	r3,1
 400a09c:	003fee06 	br	400a058 <__alt_mem_epcs_flash_controller_0+0xfb009058>

0400a0a0 <__modsi3>:
 400a0a0:	20001716 	blt	r4,zero,400a100 <__modsi3+0x60>
 400a0a4:	000f883a 	mov	r7,zero
 400a0a8:	2005883a 	mov	r2,r4
 400a0ac:	28001216 	blt	r5,zero,400a0f8 <__modsi3+0x58>
 400a0b0:	2900162e 	bgeu	r5,r4,400a10c <__modsi3+0x6c>
 400a0b4:	01800804 	movi	r6,32
 400a0b8:	00c00044 	movi	r3,1
 400a0bc:	00000106 	br	400a0c4 <__modsi3+0x24>
 400a0c0:	30000a26 	beq	r6,zero,400a0ec <__modsi3+0x4c>
 400a0c4:	294b883a 	add	r5,r5,r5
 400a0c8:	31bfffc4 	addi	r6,r6,-1
 400a0cc:	18c7883a 	add	r3,r3,r3
 400a0d0:	293ffb36 	bltu	r5,r4,400a0c0 <__alt_mem_epcs_flash_controller_0+0xfb0090c0>
 400a0d4:	18000526 	beq	r3,zero,400a0ec <__modsi3+0x4c>
 400a0d8:	1806d07a 	srli	r3,r3,1
 400a0dc:	11400136 	bltu	r2,r5,400a0e4 <__modsi3+0x44>
 400a0e0:	1145c83a 	sub	r2,r2,r5
 400a0e4:	280ad07a 	srli	r5,r5,1
 400a0e8:	183ffb1e 	bne	r3,zero,400a0d8 <__alt_mem_epcs_flash_controller_0+0xfb0090d8>
 400a0ec:	38000126 	beq	r7,zero,400a0f4 <__modsi3+0x54>
 400a0f0:	0085c83a 	sub	r2,zero,r2
 400a0f4:	f800283a 	ret
 400a0f8:	014bc83a 	sub	r5,zero,r5
 400a0fc:	003fec06 	br	400a0b0 <__alt_mem_epcs_flash_controller_0+0xfb0090b0>
 400a100:	0109c83a 	sub	r4,zero,r4
 400a104:	01c00044 	movi	r7,1
 400a108:	003fe706 	br	400a0a8 <__alt_mem_epcs_flash_controller_0+0xfb0090a8>
 400a10c:	00c00044 	movi	r3,1
 400a110:	003ff106 	br	400a0d8 <__alt_mem_epcs_flash_controller_0+0xfb0090d8>

0400a114 <__udivsi3>:
 400a114:	200d883a 	mov	r6,r4
 400a118:	2900152e 	bgeu	r5,r4,400a170 <__udivsi3+0x5c>
 400a11c:	28001416 	blt	r5,zero,400a170 <__udivsi3+0x5c>
 400a120:	00800804 	movi	r2,32
 400a124:	00c00044 	movi	r3,1
 400a128:	00000206 	br	400a134 <__udivsi3+0x20>
 400a12c:	10000e26 	beq	r2,zero,400a168 <__udivsi3+0x54>
 400a130:	28000516 	blt	r5,zero,400a148 <__udivsi3+0x34>
 400a134:	294b883a 	add	r5,r5,r5
 400a138:	10bfffc4 	addi	r2,r2,-1
 400a13c:	18c7883a 	add	r3,r3,r3
 400a140:	293ffa36 	bltu	r5,r4,400a12c <__alt_mem_epcs_flash_controller_0+0xfb00912c>
 400a144:	18000826 	beq	r3,zero,400a168 <__udivsi3+0x54>
 400a148:	0005883a 	mov	r2,zero
 400a14c:	31400236 	bltu	r6,r5,400a158 <__udivsi3+0x44>
 400a150:	314dc83a 	sub	r6,r6,r5
 400a154:	10c4b03a 	or	r2,r2,r3
 400a158:	1806d07a 	srli	r3,r3,1
 400a15c:	280ad07a 	srli	r5,r5,1
 400a160:	183ffa1e 	bne	r3,zero,400a14c <__alt_mem_epcs_flash_controller_0+0xfb00914c>
 400a164:	f800283a 	ret
 400a168:	0005883a 	mov	r2,zero
 400a16c:	f800283a 	ret
 400a170:	00c00044 	movi	r3,1
 400a174:	003ff406 	br	400a148 <__alt_mem_epcs_flash_controller_0+0xfb009148>

0400a178 <__umodsi3>:
 400a178:	2005883a 	mov	r2,r4
 400a17c:	2900122e 	bgeu	r5,r4,400a1c8 <__umodsi3+0x50>
 400a180:	28001116 	blt	r5,zero,400a1c8 <__umodsi3+0x50>
 400a184:	01800804 	movi	r6,32
 400a188:	00c00044 	movi	r3,1
 400a18c:	00000206 	br	400a198 <__umodsi3+0x20>
 400a190:	30000c26 	beq	r6,zero,400a1c4 <__umodsi3+0x4c>
 400a194:	28000516 	blt	r5,zero,400a1ac <__umodsi3+0x34>
 400a198:	294b883a 	add	r5,r5,r5
 400a19c:	31bfffc4 	addi	r6,r6,-1
 400a1a0:	18c7883a 	add	r3,r3,r3
 400a1a4:	293ffa36 	bltu	r5,r4,400a190 <__alt_mem_epcs_flash_controller_0+0xfb009190>
 400a1a8:	18000626 	beq	r3,zero,400a1c4 <__umodsi3+0x4c>
 400a1ac:	1806d07a 	srli	r3,r3,1
 400a1b0:	11400136 	bltu	r2,r5,400a1b8 <__umodsi3+0x40>
 400a1b4:	1145c83a 	sub	r2,r2,r5
 400a1b8:	280ad07a 	srli	r5,r5,1
 400a1bc:	183ffb1e 	bne	r3,zero,400a1ac <__alt_mem_epcs_flash_controller_0+0xfb0091ac>
 400a1c0:	f800283a 	ret
 400a1c4:	f800283a 	ret
 400a1c8:	00c00044 	movi	r3,1
 400a1cc:	003ff706 	br	400a1ac <__alt_mem_epcs_flash_controller_0+0xfb0091ac>

0400a1d0 <__addsf3>:
 400a1d0:	defffc04 	addi	sp,sp,-16
 400a1d4:	2004d7fa 	srli	r2,r4,31
 400a1d8:	280cd5fa 	srli	r6,r5,23
 400a1dc:	dc000015 	stw	r16,0(sp)
 400a1e0:	00c02034 	movhi	r3,128
 400a1e4:	2020d5fa 	srli	r16,r4,23
 400a1e8:	280ed7fa 	srli	r7,r5,31
 400a1ec:	18ffffc4 	addi	r3,r3,-1
 400a1f0:	dc400115 	stw	r17,4(sp)
 400a1f4:	1908703a 	and	r4,r3,r4
 400a1f8:	194a703a 	and	r5,r3,r5
 400a1fc:	dfc00315 	stw	ra,12(sp)
 400a200:	dc800215 	stw	r18,8(sp)
 400a204:	14403fcc 	andi	r17,r2,255
 400a208:	84003fcc 	andi	r16,r16,255
 400a20c:	200890fa 	slli	r4,r4,3
 400a210:	31803fcc 	andi	r6,r6,255
 400a214:	280a90fa 	slli	r5,r5,3
 400a218:	89c05026 	beq	r17,r7,400a35c <__addsf3+0x18c>
 400a21c:	8185c83a 	sub	r2,r16,r6
 400a220:	00807a0e 	bge	zero,r2,400a40c <__addsf3+0x23c>
 400a224:	30001e1e 	bne	r6,zero,400a2a0 <__addsf3+0xd0>
 400a228:	28006d1e 	bne	r5,zero,400a3e0 <__addsf3+0x210>
 400a22c:	208001cc 	andi	r2,r4,7
 400a230:	10000426 	beq	r2,zero,400a244 <__addsf3+0x74>
 400a234:	208003cc 	andi	r2,r4,15
 400a238:	00c00104 	movi	r3,4
 400a23c:	10c00126 	beq	r2,r3,400a244 <__addsf3+0x74>
 400a240:	20c9883a 	add	r4,r4,r3
 400a244:	2081002c 	andhi	r2,r4,1024
 400a248:	10003926 	beq	r2,zero,400a330 <__addsf3+0x160>
 400a24c:	84000044 	addi	r16,r16,1
 400a250:	00803fc4 	movi	r2,255
 400a254:	80807826 	beq	r16,r2,400a438 <__addsf3+0x268>
 400a258:	200891ba 	slli	r4,r4,6
 400a25c:	8805883a 	mov	r2,r17
 400a260:	2008d27a 	srli	r4,r4,9
 400a264:	84003fcc 	andi	r16,r16,255
 400a268:	800695fa 	slli	r3,r16,23
 400a26c:	10803fcc 	andi	r2,r2,255
 400a270:	04002034 	movhi	r16,128
 400a274:	843fffc4 	addi	r16,r16,-1
 400a278:	100497fa 	slli	r2,r2,31
 400a27c:	2408703a 	and	r4,r4,r16
 400a280:	20e0b03a 	or	r16,r4,r3
 400a284:	8084b03a 	or	r2,r16,r2
 400a288:	dfc00317 	ldw	ra,12(sp)
 400a28c:	dc800217 	ldw	r18,8(sp)
 400a290:	dc400117 	ldw	r17,4(sp)
 400a294:	dc000017 	ldw	r16,0(sp)
 400a298:	dec00404 	addi	sp,sp,16
 400a29c:	f800283a 	ret
 400a2a0:	00c03fc4 	movi	r3,255
 400a2a4:	80ffe126 	beq	r16,r3,400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a2a8:	29410034 	orhi	r5,r5,1024
 400a2ac:	00c006c4 	movi	r3,27
 400a2b0:	18807516 	blt	r3,r2,400a488 <__addsf3+0x2b8>
 400a2b4:	00c00804 	movi	r3,32
 400a2b8:	1887c83a 	sub	r3,r3,r2
 400a2bc:	28c6983a 	sll	r3,r5,r3
 400a2c0:	288ad83a 	srl	r5,r5,r2
 400a2c4:	1804c03a 	cmpne	r2,r3,zero
 400a2c8:	288ab03a 	or	r5,r5,r2
 400a2cc:	2149c83a 	sub	r4,r4,r5
 400a2d0:	2081002c 	andhi	r2,r4,1024
 400a2d4:	10001426 	beq	r2,zero,400a328 <__addsf3+0x158>
 400a2d8:	04810034 	movhi	r18,1024
 400a2dc:	94bfffc4 	addi	r18,r18,-1
 400a2e0:	24a4703a 	and	r18,r4,r18
 400a2e4:	9009883a 	mov	r4,r18
 400a2e8:	400de400 	call	400de40 <__clzsi2>
 400a2ec:	10bffec4 	addi	r2,r2,-5
 400a2f0:	90a4983a 	sll	r18,r18,r2
 400a2f4:	14005416 	blt	r2,r16,400a448 <__addsf3+0x278>
 400a2f8:	1405c83a 	sub	r2,r2,r16
 400a2fc:	11000044 	addi	r4,r2,1
 400a300:	00800804 	movi	r2,32
 400a304:	1105c83a 	sub	r2,r2,r4
 400a308:	9084983a 	sll	r2,r18,r2
 400a30c:	9124d83a 	srl	r18,r18,r4
 400a310:	0021883a 	mov	r16,zero
 400a314:	1008c03a 	cmpne	r4,r2,zero
 400a318:	9108b03a 	or	r4,r18,r4
 400a31c:	003fc306 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a320:	1000db26 	beq	r2,zero,400a690 <__addsf3+0x4c0>
 400a324:	1009883a 	mov	r4,r2
 400a328:	208001cc 	andi	r2,r4,7
 400a32c:	103fc11e 	bne	r2,zero,400a234 <__alt_mem_epcs_flash_controller_0+0xfb009234>
 400a330:	2006d0fa 	srli	r3,r4,3
 400a334:	01003fc4 	movi	r4,255
 400a338:	8805883a 	mov	r2,r17
 400a33c:	8100241e 	bne	r16,r4,400a3d0 <__addsf3+0x200>
 400a340:	18006e26 	beq	r3,zero,400a4fc <__addsf3+0x32c>
 400a344:	19001034 	orhi	r4,r3,64
 400a348:	00c02034 	movhi	r3,128
 400a34c:	18ffffc4 	addi	r3,r3,-1
 400a350:	043fffc4 	movi	r16,-1
 400a354:	20c8703a 	and	r4,r4,r3
 400a358:	003fc206 	br	400a264 <__alt_mem_epcs_flash_controller_0+0xfb009264>
 400a35c:	8187c83a 	sub	r3,r16,r6
 400a360:	00c03e0e 	bge	zero,r3,400a45c <__addsf3+0x28c>
 400a364:	30002326 	beq	r6,zero,400a3f4 <__addsf3+0x224>
 400a368:	01803fc4 	movi	r6,255
 400a36c:	81bfaf26 	beq	r16,r6,400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a370:	29410034 	orhi	r5,r5,1024
 400a374:	018006c4 	movi	r6,27
 400a378:	30c07416 	blt	r6,r3,400a54c <__addsf3+0x37c>
 400a37c:	01800804 	movi	r6,32
 400a380:	30cdc83a 	sub	r6,r6,r3
 400a384:	298c983a 	sll	r6,r5,r6
 400a388:	28cad83a 	srl	r5,r5,r3
 400a38c:	3006c03a 	cmpne	r3,r6,zero
 400a390:	28cab03a 	or	r5,r5,r3
 400a394:	2149883a 	add	r4,r4,r5
 400a398:	20c1002c 	andhi	r3,r4,1024
 400a39c:	183fe226 	beq	r3,zero,400a328 <__alt_mem_epcs_flash_controller_0+0xfb009328>
 400a3a0:	84000044 	addi	r16,r16,1
 400a3a4:	00c03fc4 	movi	r3,255
 400a3a8:	80c05426 	beq	r16,r3,400a4fc <__addsf3+0x32c>
 400a3ac:	00bf0034 	movhi	r2,64512
 400a3b0:	10bfffc4 	addi	r2,r2,-1
 400a3b4:	20c0004c 	andi	r3,r4,1
 400a3b8:	2088703a 	and	r4,r4,r2
 400a3bc:	2008d07a 	srli	r4,r4,1
 400a3c0:	20c8b03a 	or	r4,r4,r3
 400a3c4:	003f9906 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a3c8:	0007883a 	mov	r3,zero
 400a3cc:	0005883a 	mov	r2,zero
 400a3d0:	01002034 	movhi	r4,128
 400a3d4:	213fffc4 	addi	r4,r4,-1
 400a3d8:	1908703a 	and	r4,r3,r4
 400a3dc:	003fa106 	br	400a264 <__alt_mem_epcs_flash_controller_0+0xfb009264>
 400a3e0:	10bfffc4 	addi	r2,r2,-1
 400a3e4:	103fb926 	beq	r2,zero,400a2cc <__alt_mem_epcs_flash_controller_0+0xfb0092cc>
 400a3e8:	00c03fc4 	movi	r3,255
 400a3ec:	80ffaf1e 	bne	r16,r3,400a2ac <__alt_mem_epcs_flash_controller_0+0xfb0092ac>
 400a3f0:	003f8e06 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a3f4:	283f8d26 	beq	r5,zero,400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a3f8:	18ffffc4 	addi	r3,r3,-1
 400a3fc:	183fe526 	beq	r3,zero,400a394 <__alt_mem_epcs_flash_controller_0+0xfb009394>
 400a400:	01803fc4 	movi	r6,255
 400a404:	81bfdb1e 	bne	r16,r6,400a374 <__alt_mem_epcs_flash_controller_0+0xfb009374>
 400a408:	003f8806 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a40c:	1000201e 	bne	r2,zero,400a490 <__addsf3+0x2c0>
 400a410:	80800044 	addi	r2,r16,1
 400a414:	10803fcc 	andi	r2,r2,255
 400a418:	01800044 	movi	r6,1
 400a41c:	3080450e 	bge	r6,r2,400a534 <__addsf3+0x364>
 400a420:	2165c83a 	sub	r18,r4,r5
 400a424:	90c1002c 	andhi	r3,r18,1024
 400a428:	18002b26 	beq	r3,zero,400a4d8 <__addsf3+0x308>
 400a42c:	2925c83a 	sub	r18,r5,r4
 400a430:	3823883a 	mov	r17,r7
 400a434:	003fab06 	br	400a2e4 <__alt_mem_epcs_flash_controller_0+0xfb0092e4>
 400a438:	8805883a 	mov	r2,r17
 400a43c:	043fffc4 	movi	r16,-1
 400a440:	0009883a 	mov	r4,zero
 400a444:	003f8706 	br	400a264 <__alt_mem_epcs_flash_controller_0+0xfb009264>
 400a448:	013f0034 	movhi	r4,64512
 400a44c:	213fffc4 	addi	r4,r4,-1
 400a450:	80a1c83a 	sub	r16,r16,r2
 400a454:	9108703a 	and	r4,r18,r4
 400a458:	003f7406 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a45c:	1800411e 	bne	r3,zero,400a564 <__addsf3+0x394>
 400a460:	80c00044 	addi	r3,r16,1
 400a464:	19c03fcc 	andi	r7,r3,255
 400a468:	01800044 	movi	r6,1
 400a46c:	31c0260e 	bge	r6,r7,400a508 <__addsf3+0x338>
 400a470:	01803fc4 	movi	r6,255
 400a474:	19802126 	beq	r3,r6,400a4fc <__addsf3+0x32c>
 400a478:	2149883a 	add	r4,r4,r5
 400a47c:	2008d07a 	srli	r4,r4,1
 400a480:	1821883a 	mov	r16,r3
 400a484:	003f6906 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a488:	01400044 	movi	r5,1
 400a48c:	003f8f06 	br	400a2cc <__alt_mem_epcs_flash_controller_0+0xfb0092cc>
 400a490:	8000151e 	bne	r16,zero,400a4e8 <__addsf3+0x318>
 400a494:	20002f26 	beq	r4,zero,400a554 <__addsf3+0x384>
 400a498:	0084303a 	nor	r2,zero,r2
 400a49c:	10000a26 	beq	r2,zero,400a4c8 <__addsf3+0x2f8>
 400a4a0:	00c03fc4 	movi	r3,255
 400a4a4:	30c02b26 	beq	r6,r3,400a554 <__addsf3+0x384>
 400a4a8:	00c006c4 	movi	r3,27
 400a4ac:	18806d16 	blt	r3,r2,400a664 <__addsf3+0x494>
 400a4b0:	00c00804 	movi	r3,32
 400a4b4:	1887c83a 	sub	r3,r3,r2
 400a4b8:	20c6983a 	sll	r3,r4,r3
 400a4bc:	2084d83a 	srl	r2,r4,r2
 400a4c0:	1808c03a 	cmpne	r4,r3,zero
 400a4c4:	1108b03a 	or	r4,r2,r4
 400a4c8:	2909c83a 	sub	r4,r5,r4
 400a4cc:	3021883a 	mov	r16,r6
 400a4d0:	3823883a 	mov	r17,r7
 400a4d4:	003f7e06 	br	400a2d0 <__alt_mem_epcs_flash_controller_0+0xfb0092d0>
 400a4d8:	903f821e 	bne	r18,zero,400a2e4 <__alt_mem_epcs_flash_controller_0+0xfb0092e4>
 400a4dc:	0005883a 	mov	r2,zero
 400a4e0:	0021883a 	mov	r16,zero
 400a4e4:	003fba06 	br	400a3d0 <__alt_mem_epcs_flash_controller_0+0xfb0093d0>
 400a4e8:	00c03fc4 	movi	r3,255
 400a4ec:	30c01926 	beq	r6,r3,400a554 <__addsf3+0x384>
 400a4f0:	0085c83a 	sub	r2,zero,r2
 400a4f4:	21010034 	orhi	r4,r4,1024
 400a4f8:	003feb06 	br	400a4a8 <__alt_mem_epcs_flash_controller_0+0xfb0094a8>
 400a4fc:	043fffc4 	movi	r16,-1
 400a500:	0009883a 	mov	r4,zero
 400a504:	003f5706 	br	400a264 <__alt_mem_epcs_flash_controller_0+0xfb009264>
 400a508:	80004a1e 	bne	r16,zero,400a634 <__addsf3+0x464>
 400a50c:	20005926 	beq	r4,zero,400a674 <__addsf3+0x4a4>
 400a510:	283f4626 	beq	r5,zero,400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a514:	2149883a 	add	r4,r4,r5
 400a518:	2081002c 	andhi	r2,r4,1024
 400a51c:	103f8226 	beq	r2,zero,400a328 <__alt_mem_epcs_flash_controller_0+0xfb009328>
 400a520:	00bf0034 	movhi	r2,64512
 400a524:	10bfffc4 	addi	r2,r2,-1
 400a528:	3021883a 	mov	r16,r6
 400a52c:	2088703a 	and	r4,r4,r2
 400a530:	003f3e06 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a534:	8000121e 	bne	r16,zero,400a580 <__addsf3+0x3b0>
 400a538:	2000261e 	bne	r4,zero,400a5d4 <__addsf3+0x404>
 400a53c:	283fa226 	beq	r5,zero,400a3c8 <__alt_mem_epcs_flash_controller_0+0xfb0093c8>
 400a540:	2809883a 	mov	r4,r5
 400a544:	3823883a 	mov	r17,r7
 400a548:	003f3806 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a54c:	01400044 	movi	r5,1
 400a550:	003f9006 	br	400a394 <__alt_mem_epcs_flash_controller_0+0xfb009394>
 400a554:	2809883a 	mov	r4,r5
 400a558:	3021883a 	mov	r16,r6
 400a55c:	3823883a 	mov	r17,r7
 400a560:	003f3206 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a564:	80000c1e 	bne	r16,zero,400a598 <__addsf3+0x3c8>
 400a568:	20002f26 	beq	r4,zero,400a628 <__addsf3+0x458>
 400a56c:	00c6303a 	nor	r3,zero,r3
 400a570:	18002b1e 	bne	r3,zero,400a620 <__addsf3+0x450>
 400a574:	2149883a 	add	r4,r4,r5
 400a578:	3021883a 	mov	r16,r6
 400a57c:	003f8606 	br	400a398 <__alt_mem_epcs_flash_controller_0+0xfb009398>
 400a580:	20001b1e 	bne	r4,zero,400a5f0 <__addsf3+0x420>
 400a584:	28003926 	beq	r5,zero,400a66c <__addsf3+0x49c>
 400a588:	2809883a 	mov	r4,r5
 400a58c:	3823883a 	mov	r17,r7
 400a590:	04003fc4 	movi	r16,255
 400a594:	003f2506 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a598:	01c03fc4 	movi	r7,255
 400a59c:	31c02226 	beq	r6,r7,400a628 <__addsf3+0x458>
 400a5a0:	00c7c83a 	sub	r3,zero,r3
 400a5a4:	21010034 	orhi	r4,r4,1024
 400a5a8:	01c006c4 	movi	r7,27
 400a5ac:	38c03616 	blt	r7,r3,400a688 <__addsf3+0x4b8>
 400a5b0:	01c00804 	movi	r7,32
 400a5b4:	38cfc83a 	sub	r7,r7,r3
 400a5b8:	21ce983a 	sll	r7,r4,r7
 400a5bc:	20c6d83a 	srl	r3,r4,r3
 400a5c0:	3808c03a 	cmpne	r4,r7,zero
 400a5c4:	1906b03a 	or	r3,r3,r4
 400a5c8:	1949883a 	add	r4,r3,r5
 400a5cc:	3021883a 	mov	r16,r6
 400a5d0:	003f7106 	br	400a398 <__alt_mem_epcs_flash_controller_0+0xfb009398>
 400a5d4:	283f1526 	beq	r5,zero,400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a5d8:	2145c83a 	sub	r2,r4,r5
 400a5dc:	10c1002c 	andhi	r3,r2,1024
 400a5e0:	183f4f26 	beq	r3,zero,400a320 <__alt_mem_epcs_flash_controller_0+0xfb009320>
 400a5e4:	2909c83a 	sub	r4,r5,r4
 400a5e8:	3823883a 	mov	r17,r7
 400a5ec:	003f0f06 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a5f0:	28001a26 	beq	r5,zero,400a65c <__addsf3+0x48c>
 400a5f4:	2008d0fa 	srli	r4,r4,3
 400a5f8:	2080102c 	andhi	r2,r4,64
 400a5fc:	10000526 	beq	r2,zero,400a614 <__addsf3+0x444>
 400a600:	280ad0fa 	srli	r5,r5,3
 400a604:	2880102c 	andhi	r2,r5,64
 400a608:	1000021e 	bne	r2,zero,400a614 <__addsf3+0x444>
 400a60c:	2809883a 	mov	r4,r5
 400a610:	3823883a 	mov	r17,r7
 400a614:	200890fa 	slli	r4,r4,3
 400a618:	04003fc4 	movi	r16,255
 400a61c:	003f0306 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a620:	01c03fc4 	movi	r7,255
 400a624:	31ffe01e 	bne	r6,r7,400a5a8 <__alt_mem_epcs_flash_controller_0+0xfb0095a8>
 400a628:	2809883a 	mov	r4,r5
 400a62c:	3021883a 	mov	r16,r6
 400a630:	003efe06 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a634:	20001126 	beq	r4,zero,400a67c <__addsf3+0x4ac>
 400a638:	28000826 	beq	r5,zero,400a65c <__addsf3+0x48c>
 400a63c:	2008d0fa 	srli	r4,r4,3
 400a640:	2080102c 	andhi	r2,r4,64
 400a644:	103ff326 	beq	r2,zero,400a614 <__alt_mem_epcs_flash_controller_0+0xfb009614>
 400a648:	280ad0fa 	srli	r5,r5,3
 400a64c:	2880102c 	andhi	r2,r5,64
 400a650:	103ff01e 	bne	r2,zero,400a614 <__alt_mem_epcs_flash_controller_0+0xfb009614>
 400a654:	2809883a 	mov	r4,r5
 400a658:	003fee06 	br	400a614 <__alt_mem_epcs_flash_controller_0+0xfb009614>
 400a65c:	04003fc4 	movi	r16,255
 400a660:	003ef206 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a664:	01000044 	movi	r4,1
 400a668:	003f9706 	br	400a4c8 <__alt_mem_epcs_flash_controller_0+0xfb0094c8>
 400a66c:	0005883a 	mov	r2,zero
 400a670:	003f3406 	br	400a344 <__alt_mem_epcs_flash_controller_0+0xfb009344>
 400a674:	2809883a 	mov	r4,r5
 400a678:	003eec06 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a67c:	2809883a 	mov	r4,r5
 400a680:	04003fc4 	movi	r16,255
 400a684:	003ee906 	br	400a22c <__alt_mem_epcs_flash_controller_0+0xfb00922c>
 400a688:	00c00044 	movi	r3,1
 400a68c:	003fce06 	br	400a5c8 <__alt_mem_epcs_flash_controller_0+0xfb0095c8>
 400a690:	0005883a 	mov	r2,zero
 400a694:	003f4e06 	br	400a3d0 <__alt_mem_epcs_flash_controller_0+0xfb0093d0>

0400a698 <__divsf3>:
 400a698:	defff504 	addi	sp,sp,-44
 400a69c:	200cd5fa 	srli	r6,r4,23
 400a6a0:	dcc00415 	stw	r19,16(sp)
 400a6a4:	2026d7fa 	srli	r19,r4,31
 400a6a8:	00c02034 	movhi	r3,128
 400a6ac:	dd800715 	stw	r22,28(sp)
 400a6b0:	dd000515 	stw	r20,20(sp)
 400a6b4:	dc800315 	stw	r18,12(sp)
 400a6b8:	18ffffc4 	addi	r3,r3,-1
 400a6bc:	dfc00a15 	stw	ra,40(sp)
 400a6c0:	df000915 	stw	fp,36(sp)
 400a6c4:	ddc00815 	stw	r23,32(sp)
 400a6c8:	dd400615 	stw	r21,24(sp)
 400a6cc:	dc400215 	stw	r17,8(sp)
 400a6d0:	dc000115 	stw	r16,4(sp)
 400a6d4:	35003fcc 	andi	r20,r6,255
 400a6d8:	1924703a 	and	r18,r3,r4
 400a6dc:	9d803fcc 	andi	r22,r19,255
 400a6e0:	a0005226 	beq	r20,zero,400a82c <__divsf3+0x194>
 400a6e4:	00803fc4 	movi	r2,255
 400a6e8:	a0802e26 	beq	r20,r2,400a7a4 <__divsf3+0x10c>
 400a6ec:	91002034 	orhi	r4,r18,128
 400a6f0:	202490fa 	slli	r18,r4,3
 400a6f4:	a53fe044 	addi	r20,r20,-127
 400a6f8:	0021883a 	mov	r16,zero
 400a6fc:	002f883a 	mov	r23,zero
 400a700:	280cd5fa 	srli	r6,r5,23
 400a704:	282ad7fa 	srli	r21,r5,31
 400a708:	00c02034 	movhi	r3,128
 400a70c:	18ffffc4 	addi	r3,r3,-1
 400a710:	31803fcc 	andi	r6,r6,255
 400a714:	1962703a 	and	r17,r3,r5
 400a718:	af003fcc 	andi	fp,r21,255
 400a71c:	30004a26 	beq	r6,zero,400a848 <__divsf3+0x1b0>
 400a720:	00803fc4 	movi	r2,255
 400a724:	30804526 	beq	r6,r2,400a83c <__divsf3+0x1a4>
 400a728:	89402034 	orhi	r5,r17,128
 400a72c:	282290fa 	slli	r17,r5,3
 400a730:	31bfe044 	addi	r6,r6,-127
 400a734:	000b883a 	mov	r5,zero
 400a738:	2c20b03a 	or	r16,r5,r16
 400a73c:	802090ba 	slli	r16,r16,2
 400a740:	00810074 	movhi	r2,1025
 400a744:	10a9d904 	addi	r2,r2,-22684
 400a748:	80a1883a 	add	r16,r16,r2
 400a74c:	81000017 	ldw	r4,0(r16)
 400a750:	9d46f03a 	xor	r3,r19,r21
 400a754:	180f883a 	mov	r7,r3
 400a758:	18803fcc 	andi	r2,r3,255
 400a75c:	a18dc83a 	sub	r6,r20,r6
 400a760:	2000683a 	jmp	r4
 400a764:	0400a948 	cmpgei	r16,zero,677
 400a768:	0400a7cc 	andi	r16,zero,671
 400a76c:	0400a93c 	xorhi	r16,zero,676
 400a770:	0400a7b8 	rdprs	r16,zero,670
 400a774:	0400a93c 	xorhi	r16,zero,676
 400a778:	0400a914 	movui	r16,676
 400a77c:	0400a93c 	xorhi	r16,zero,676
 400a780:	0400a7b8 	rdprs	r16,zero,670
 400a784:	0400a7cc 	andi	r16,zero,671
 400a788:	0400a7cc 	andi	r16,zero,671
 400a78c:	0400a914 	movui	r16,676
 400a790:	0400a7b8 	rdprs	r16,zero,670
 400a794:	0400aa28 	cmpgeui	r16,zero,680
 400a798:	0400aa28 	cmpgeui	r16,zero,680
 400a79c:	0400aa28 	cmpgeui	r16,zero,680
 400a7a0:	0400a9dc 	xori	r16,zero,679
 400a7a4:	9000581e 	bne	r18,zero,400a908 <__divsf3+0x270>
 400a7a8:	04000204 	movi	r16,8
 400a7ac:	05c00084 	movi	r23,2
 400a7b0:	003fd306 	br	400a700 <__alt_mem_epcs_flash_controller_0+0xfb009700>
 400a7b4:	0023883a 	mov	r17,zero
 400a7b8:	e02d883a 	mov	r22,fp
 400a7bc:	282f883a 	mov	r23,r5
 400a7c0:	00800084 	movi	r2,2
 400a7c4:	b8808f1e 	bne	r23,r2,400aa04 <__divsf3+0x36c>
 400a7c8:	b005883a 	mov	r2,r22
 400a7cc:	11c0004c 	andi	r7,r2,1
 400a7d0:	013fffc4 	movi	r4,-1
 400a7d4:	000d883a 	mov	r6,zero
 400a7d8:	21003fcc 	andi	r4,r4,255
 400a7dc:	200895fa 	slli	r4,r4,23
 400a7e0:	38803fcc 	andi	r2,r7,255
 400a7e4:	00c02034 	movhi	r3,128
 400a7e8:	100497fa 	slli	r2,r2,31
 400a7ec:	18ffffc4 	addi	r3,r3,-1
 400a7f0:	30c6703a 	and	r3,r6,r3
 400a7f4:	1906b03a 	or	r3,r3,r4
 400a7f8:	1884b03a 	or	r2,r3,r2
 400a7fc:	dfc00a17 	ldw	ra,40(sp)
 400a800:	df000917 	ldw	fp,36(sp)
 400a804:	ddc00817 	ldw	r23,32(sp)
 400a808:	dd800717 	ldw	r22,28(sp)
 400a80c:	dd400617 	ldw	r21,24(sp)
 400a810:	dd000517 	ldw	r20,20(sp)
 400a814:	dcc00417 	ldw	r19,16(sp)
 400a818:	dc800317 	ldw	r18,12(sp)
 400a81c:	dc400217 	ldw	r17,8(sp)
 400a820:	dc000117 	ldw	r16,4(sp)
 400a824:	dec00b04 	addi	sp,sp,44
 400a828:	f800283a 	ret
 400a82c:	90002b1e 	bne	r18,zero,400a8dc <__divsf3+0x244>
 400a830:	04000104 	movi	r16,4
 400a834:	05c00044 	movi	r23,1
 400a838:	003fb106 	br	400a700 <__alt_mem_epcs_flash_controller_0+0xfb009700>
 400a83c:	8800251e 	bne	r17,zero,400a8d4 <__divsf3+0x23c>
 400a840:	01400084 	movi	r5,2
 400a844:	00000206 	br	400a850 <__divsf3+0x1b8>
 400a848:	88001a1e 	bne	r17,zero,400a8b4 <__divsf3+0x21c>
 400a84c:	01400044 	movi	r5,1
 400a850:	8160b03a 	or	r16,r16,r5
 400a854:	802090ba 	slli	r16,r16,2
 400a858:	00c10074 	movhi	r3,1025
 400a85c:	18ea1d04 	addi	r3,r3,-22412
 400a860:	80e1883a 	add	r16,r16,r3
 400a864:	80c00017 	ldw	r3,0(r16)
 400a868:	9d44f03a 	xor	r2,r19,r21
 400a86c:	a18dc83a 	sub	r6,r20,r6
 400a870:	1800683a 	jmp	r3
 400a874:	0400a7cc 	andi	r16,zero,671
 400a878:	0400a7cc 	andi	r16,zero,671
 400a87c:	0400aa18 	cmpnei	r16,zero,680
 400a880:	0400a7b4 	movhi	r16,670
 400a884:	0400aa18 	cmpnei	r16,zero,680
 400a888:	0400a914 	movui	r16,676
 400a88c:	0400aa18 	cmpnei	r16,zero,680
 400a890:	0400a7b4 	movhi	r16,670
 400a894:	0400a7cc 	andi	r16,zero,671
 400a898:	0400a7cc 	andi	r16,zero,671
 400a89c:	0400a914 	movui	r16,676
 400a8a0:	0400a7b4 	movhi	r16,670
 400a8a4:	0400aa28 	cmpgeui	r16,zero,680
 400a8a8:	0400aa28 	cmpgeui	r16,zero,680
 400a8ac:	0400aa28 	cmpgeui	r16,zero,680
 400a8b0:	0400aa40 	call	400aa4 <__alt_mem_sdram-0x3bff55c>
 400a8b4:	8809883a 	mov	r4,r17
 400a8b8:	400de400 	call	400de40 <__clzsi2>
 400a8bc:	10fffec4 	addi	r3,r2,-5
 400a8c0:	10801d84 	addi	r2,r2,118
 400a8c4:	88e2983a 	sll	r17,r17,r3
 400a8c8:	008dc83a 	sub	r6,zero,r2
 400a8cc:	000b883a 	mov	r5,zero
 400a8d0:	003f9906 	br	400a738 <__alt_mem_epcs_flash_controller_0+0xfb009738>
 400a8d4:	014000c4 	movi	r5,3
 400a8d8:	003f9706 	br	400a738 <__alt_mem_epcs_flash_controller_0+0xfb009738>
 400a8dc:	9009883a 	mov	r4,r18
 400a8e0:	d9400015 	stw	r5,0(sp)
 400a8e4:	400de400 	call	400de40 <__clzsi2>
 400a8e8:	10fffec4 	addi	r3,r2,-5
 400a8ec:	11801d84 	addi	r6,r2,118
 400a8f0:	90e4983a 	sll	r18,r18,r3
 400a8f4:	01a9c83a 	sub	r20,zero,r6
 400a8f8:	0021883a 	mov	r16,zero
 400a8fc:	002f883a 	mov	r23,zero
 400a900:	d9400017 	ldw	r5,0(sp)
 400a904:	003f7e06 	br	400a700 <__alt_mem_epcs_flash_controller_0+0xfb009700>
 400a908:	04000304 	movi	r16,12
 400a90c:	05c000c4 	movi	r23,3
 400a910:	003f7b06 	br	400a700 <__alt_mem_epcs_flash_controller_0+0xfb009700>
 400a914:	01802034 	movhi	r6,128
 400a918:	000f883a 	mov	r7,zero
 400a91c:	31bfffc4 	addi	r6,r6,-1
 400a920:	013fffc4 	movi	r4,-1
 400a924:	003fac06 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400a928:	01400044 	movi	r5,1
 400a92c:	2909c83a 	sub	r4,r5,r4
 400a930:	00c006c4 	movi	r3,27
 400a934:	19004b0e 	bge	r3,r4,400aa64 <__divsf3+0x3cc>
 400a938:	114e703a 	and	r7,r2,r5
 400a93c:	0009883a 	mov	r4,zero
 400a940:	000d883a 	mov	r6,zero
 400a944:	003fa406 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400a948:	9006917a 	slli	r3,r18,5
 400a94c:	8822917a 	slli	r17,r17,5
 400a950:	1c40372e 	bgeu	r3,r17,400aa30 <__divsf3+0x398>
 400a954:	31bfffc4 	addi	r6,r6,-1
 400a958:	010006c4 	movi	r4,27
 400a95c:	000b883a 	mov	r5,zero
 400a960:	180f883a 	mov	r7,r3
 400a964:	294b883a 	add	r5,r5,r5
 400a968:	18c7883a 	add	r3,r3,r3
 400a96c:	38000116 	blt	r7,zero,400a974 <__divsf3+0x2dc>
 400a970:	1c400236 	bltu	r3,r17,400a97c <__divsf3+0x2e4>
 400a974:	1c47c83a 	sub	r3,r3,r17
 400a978:	29400054 	ori	r5,r5,1
 400a97c:	213fffc4 	addi	r4,r4,-1
 400a980:	203ff71e 	bne	r4,zero,400a960 <__alt_mem_epcs_flash_controller_0+0xfb009960>
 400a984:	1806c03a 	cmpne	r3,r3,zero
 400a988:	1962b03a 	or	r17,r3,r5
 400a98c:	31001fc4 	addi	r4,r6,127
 400a990:	013fe50e 	bge	zero,r4,400a928 <__alt_mem_epcs_flash_controller_0+0xfb009928>
 400a994:	88c001cc 	andi	r3,r17,7
 400a998:	18000426 	beq	r3,zero,400a9ac <__divsf3+0x314>
 400a99c:	88c003cc 	andi	r3,r17,15
 400a9a0:	01400104 	movi	r5,4
 400a9a4:	19400126 	beq	r3,r5,400a9ac <__divsf3+0x314>
 400a9a8:	8963883a 	add	r17,r17,r5
 400a9ac:	88c2002c 	andhi	r3,r17,2048
 400a9b0:	18000426 	beq	r3,zero,400a9c4 <__divsf3+0x32c>
 400a9b4:	00fe0034 	movhi	r3,63488
 400a9b8:	18ffffc4 	addi	r3,r3,-1
 400a9bc:	31002004 	addi	r4,r6,128
 400a9c0:	88e2703a 	and	r17,r17,r3
 400a9c4:	00c03f84 	movi	r3,254
 400a9c8:	193f8016 	blt	r3,r4,400a7cc <__alt_mem_epcs_flash_controller_0+0xfb0097cc>
 400a9cc:	880c91ba 	slli	r6,r17,6
 400a9d0:	11c0004c 	andi	r7,r2,1
 400a9d4:	300cd27a 	srli	r6,r6,9
 400a9d8:	003f7f06 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400a9dc:	9080102c 	andhi	r2,r18,64
 400a9e0:	10000226 	beq	r2,zero,400a9ec <__divsf3+0x354>
 400a9e4:	8880102c 	andhi	r2,r17,64
 400a9e8:	10001826 	beq	r2,zero,400aa4c <__divsf3+0x3b4>
 400a9ec:	00802034 	movhi	r2,128
 400a9f0:	91801034 	orhi	r6,r18,64
 400a9f4:	10bfffc4 	addi	r2,r2,-1
 400a9f8:	980f883a 	mov	r7,r19
 400a9fc:	308c703a 	and	r6,r6,r2
 400aa00:	003fc706 	br	400a920 <__alt_mem_epcs_flash_controller_0+0xfb009920>
 400aa04:	008000c4 	movi	r2,3
 400aa08:	b8802d26 	beq	r23,r2,400aac0 <__divsf3+0x428>
 400aa0c:	00c00044 	movi	r3,1
 400aa10:	b005883a 	mov	r2,r22
 400aa14:	b8ffdd1e 	bne	r23,r3,400a98c <__alt_mem_epcs_flash_controller_0+0xfb00998c>
 400aa18:	11c0004c 	andi	r7,r2,1
 400aa1c:	0009883a 	mov	r4,zero
 400aa20:	000d883a 	mov	r6,zero
 400aa24:	003f6c06 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400aa28:	9023883a 	mov	r17,r18
 400aa2c:	003f6406 	br	400a7c0 <__alt_mem_epcs_flash_controller_0+0xfb0097c0>
 400aa30:	1c47c83a 	sub	r3,r3,r17
 400aa34:	01000684 	movi	r4,26
 400aa38:	01400044 	movi	r5,1
 400aa3c:	003fc806 	br	400a960 <__alt_mem_epcs_flash_controller_0+0xfb009960>
 400aa40:	9080102c 	andhi	r2,r18,64
 400aa44:	103fe926 	beq	r2,zero,400a9ec <__alt_mem_epcs_flash_controller_0+0xfb0099ec>
 400aa48:	0023883a 	mov	r17,zero
 400aa4c:	00802034 	movhi	r2,128
 400aa50:	89801034 	orhi	r6,r17,64
 400aa54:	10bfffc4 	addi	r2,r2,-1
 400aa58:	a80f883a 	mov	r7,r21
 400aa5c:	308c703a 	and	r6,r6,r2
 400aa60:	003faf06 	br	400a920 <__alt_mem_epcs_flash_controller_0+0xfb009920>
 400aa64:	01c00804 	movi	r7,32
 400aa68:	390fc83a 	sub	r7,r7,r4
 400aa6c:	89ce983a 	sll	r7,r17,r7
 400aa70:	890ad83a 	srl	r5,r17,r4
 400aa74:	380ec03a 	cmpne	r7,r7,zero
 400aa78:	29cab03a 	or	r5,r5,r7
 400aa7c:	28c001cc 	andi	r3,r5,7
 400aa80:	18000426 	beq	r3,zero,400aa94 <__divsf3+0x3fc>
 400aa84:	28c003cc 	andi	r3,r5,15
 400aa88:	01000104 	movi	r4,4
 400aa8c:	19000126 	beq	r3,r4,400aa94 <__divsf3+0x3fc>
 400aa90:	290b883a 	add	r5,r5,r4
 400aa94:	28c1002c 	andhi	r3,r5,1024
 400aa98:	18000426 	beq	r3,zero,400aaac <__divsf3+0x414>
 400aa9c:	11c0004c 	andi	r7,r2,1
 400aaa0:	01000044 	movi	r4,1
 400aaa4:	000d883a 	mov	r6,zero
 400aaa8:	003f4b06 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400aaac:	280a91ba 	slli	r5,r5,6
 400aab0:	11c0004c 	andi	r7,r2,1
 400aab4:	0009883a 	mov	r4,zero
 400aab8:	280cd27a 	srli	r6,r5,9
 400aabc:	003f4606 	br	400a7d8 <__alt_mem_epcs_flash_controller_0+0xfb0097d8>
 400aac0:	00802034 	movhi	r2,128
 400aac4:	89801034 	orhi	r6,r17,64
 400aac8:	10bfffc4 	addi	r2,r2,-1
 400aacc:	b00f883a 	mov	r7,r22
 400aad0:	308c703a 	and	r6,r6,r2
 400aad4:	003f9206 	br	400a920 <__alt_mem_epcs_flash_controller_0+0xfb009920>

0400aad8 <__eqsf2>:
 400aad8:	2006d5fa 	srli	r3,r4,23
 400aadc:	280cd5fa 	srli	r6,r5,23
 400aae0:	01c02034 	movhi	r7,128
 400aae4:	39ffffc4 	addi	r7,r7,-1
 400aae8:	18c03fcc 	andi	r3,r3,255
 400aaec:	02003fc4 	movi	r8,255
 400aaf0:	3904703a 	and	r2,r7,r4
 400aaf4:	31803fcc 	andi	r6,r6,255
 400aaf8:	394e703a 	and	r7,r7,r5
 400aafc:	2008d7fa 	srli	r4,r4,31
 400ab00:	280ad7fa 	srli	r5,r5,31
 400ab04:	1a000d26 	beq	r3,r8,400ab3c <__eqsf2+0x64>
 400ab08:	02003fc4 	movi	r8,255
 400ab0c:	32000826 	beq	r6,r8,400ab30 <__eqsf2+0x58>
 400ab10:	19800226 	beq	r3,r6,400ab1c <__eqsf2+0x44>
 400ab14:	00800044 	movi	r2,1
 400ab18:	f800283a 	ret
 400ab1c:	11fffd1e 	bne	r2,r7,400ab14 <__alt_mem_epcs_flash_controller_0+0xfb009b14>
 400ab20:	21400926 	beq	r4,r5,400ab48 <__eqsf2+0x70>
 400ab24:	183ffb1e 	bne	r3,zero,400ab14 <__alt_mem_epcs_flash_controller_0+0xfb009b14>
 400ab28:	1004c03a 	cmpne	r2,r2,zero
 400ab2c:	f800283a 	ret
 400ab30:	383ff726 	beq	r7,zero,400ab10 <__alt_mem_epcs_flash_controller_0+0xfb009b10>
 400ab34:	00800044 	movi	r2,1
 400ab38:	f800283a 	ret
 400ab3c:	103ff226 	beq	r2,zero,400ab08 <__alt_mem_epcs_flash_controller_0+0xfb009b08>
 400ab40:	00800044 	movi	r2,1
 400ab44:	f800283a 	ret
 400ab48:	0005883a 	mov	r2,zero
 400ab4c:	f800283a 	ret

0400ab50 <__mulsf3>:
 400ab50:	defff504 	addi	sp,sp,-44
 400ab54:	dc000115 	stw	r16,4(sp)
 400ab58:	2020d5fa 	srli	r16,r4,23
 400ab5c:	dd400615 	stw	r21,24(sp)
 400ab60:	202ad7fa 	srli	r21,r4,31
 400ab64:	dc800315 	stw	r18,12(sp)
 400ab68:	04802034 	movhi	r18,128
 400ab6c:	df000915 	stw	fp,36(sp)
 400ab70:	dd000515 	stw	r20,20(sp)
 400ab74:	94bfffc4 	addi	r18,r18,-1
 400ab78:	dfc00a15 	stw	ra,40(sp)
 400ab7c:	ddc00815 	stw	r23,32(sp)
 400ab80:	dd800715 	stw	r22,28(sp)
 400ab84:	dcc00415 	stw	r19,16(sp)
 400ab88:	dc400215 	stw	r17,8(sp)
 400ab8c:	84003fcc 	andi	r16,r16,255
 400ab90:	9124703a 	and	r18,r18,r4
 400ab94:	a829883a 	mov	r20,r21
 400ab98:	af003fcc 	andi	fp,r21,255
 400ab9c:	80005426 	beq	r16,zero,400acf0 <__mulsf3+0x1a0>
 400aba0:	00803fc4 	movi	r2,255
 400aba4:	80802f26 	beq	r16,r2,400ac64 <__mulsf3+0x114>
 400aba8:	91002034 	orhi	r4,r18,128
 400abac:	202490fa 	slli	r18,r4,3
 400abb0:	843fe044 	addi	r16,r16,-127
 400abb4:	0023883a 	mov	r17,zero
 400abb8:	002f883a 	mov	r23,zero
 400abbc:	2804d5fa 	srli	r2,r5,23
 400abc0:	282cd7fa 	srli	r22,r5,31
 400abc4:	01002034 	movhi	r4,128
 400abc8:	213fffc4 	addi	r4,r4,-1
 400abcc:	10803fcc 	andi	r2,r2,255
 400abd0:	2166703a 	and	r19,r4,r5
 400abd4:	b1803fcc 	andi	r6,r22,255
 400abd8:	10004c26 	beq	r2,zero,400ad0c <__mulsf3+0x1bc>
 400abdc:	00c03fc4 	movi	r3,255
 400abe0:	10c04726 	beq	r2,r3,400ad00 <__mulsf3+0x1b0>
 400abe4:	99002034 	orhi	r4,r19,128
 400abe8:	202690fa 	slli	r19,r4,3
 400abec:	10bfe044 	addi	r2,r2,-127
 400abf0:	0007883a 	mov	r3,zero
 400abf4:	80a1883a 	add	r16,r16,r2
 400abf8:	010003c4 	movi	r4,15
 400abfc:	1c44b03a 	or	r2,r3,r17
 400ac00:	b56af03a 	xor	r21,r22,r21
 400ac04:	81c00044 	addi	r7,r16,1
 400ac08:	20806b36 	bltu	r4,r2,400adb8 <__mulsf3+0x268>
 400ac0c:	100490ba 	slli	r2,r2,2
 400ac10:	01010074 	movhi	r4,1025
 400ac14:	212b0904 	addi	r4,r4,-21468
 400ac18:	1105883a 	add	r2,r2,r4
 400ac1c:	10800017 	ldw	r2,0(r2)
 400ac20:	1000683a 	jmp	r2
 400ac24:	0400adb8 	rdprs	r16,zero,694
 400ac28:	0400ac78 	rdprs	r16,zero,689
 400ac2c:	0400ac78 	rdprs	r16,zero,689
 400ac30:	0400ac74 	movhi	r16,689
 400ac34:	0400ad9c 	xori	r16,zero,694
 400ac38:	0400ad9c 	xori	r16,zero,694
 400ac3c:	0400ad88 	cmpgei	r16,zero,694
 400ac40:	0400ac74 	movhi	r16,689
 400ac44:	0400ad9c 	xori	r16,zero,694
 400ac48:	0400ad88 	cmpgei	r16,zero,694
 400ac4c:	0400ad9c 	xori	r16,zero,694
 400ac50:	0400ac74 	movhi	r16,689
 400ac54:	0400ada8 	cmpgeui	r16,zero,694
 400ac58:	0400ada8 	cmpgeui	r16,zero,694
 400ac5c:	0400ada8 	cmpgeui	r16,zero,694
 400ac60:	0400ae84 	movi	r16,698
 400ac64:	90003b1e 	bne	r18,zero,400ad54 <__mulsf3+0x204>
 400ac68:	04400204 	movi	r17,8
 400ac6c:	05c00084 	movi	r23,2
 400ac70:	003fd206 	br	400abbc <__alt_mem_epcs_flash_controller_0+0xfb009bbc>
 400ac74:	302b883a 	mov	r21,r6
 400ac78:	00800084 	movi	r2,2
 400ac7c:	18802626 	beq	r3,r2,400ad18 <__mulsf3+0x1c8>
 400ac80:	008000c4 	movi	r2,3
 400ac84:	1880ab26 	beq	r3,r2,400af34 <__mulsf3+0x3e4>
 400ac88:	00800044 	movi	r2,1
 400ac8c:	1880a21e 	bne	r3,r2,400af18 <__mulsf3+0x3c8>
 400ac90:	a829883a 	mov	r20,r21
 400ac94:	0007883a 	mov	r3,zero
 400ac98:	0009883a 	mov	r4,zero
 400ac9c:	18803fcc 	andi	r2,r3,255
 400aca0:	100695fa 	slli	r3,r2,23
 400aca4:	a0803fcc 	andi	r2,r20,255
 400aca8:	100a97fa 	slli	r5,r2,31
 400acac:	00802034 	movhi	r2,128
 400acb0:	10bfffc4 	addi	r2,r2,-1
 400acb4:	2084703a 	and	r2,r4,r2
 400acb8:	10c4b03a 	or	r2,r2,r3
 400acbc:	1144b03a 	or	r2,r2,r5
 400acc0:	dfc00a17 	ldw	ra,40(sp)
 400acc4:	df000917 	ldw	fp,36(sp)
 400acc8:	ddc00817 	ldw	r23,32(sp)
 400accc:	dd800717 	ldw	r22,28(sp)
 400acd0:	dd400617 	ldw	r21,24(sp)
 400acd4:	dd000517 	ldw	r20,20(sp)
 400acd8:	dcc00417 	ldw	r19,16(sp)
 400acdc:	dc800317 	ldw	r18,12(sp)
 400ace0:	dc400217 	ldw	r17,8(sp)
 400ace4:	dc000117 	ldw	r16,4(sp)
 400ace8:	dec00b04 	addi	sp,sp,44
 400acec:	f800283a 	ret
 400acf0:	90000d1e 	bne	r18,zero,400ad28 <__mulsf3+0x1d8>
 400acf4:	04400104 	movi	r17,4
 400acf8:	05c00044 	movi	r23,1
 400acfc:	003faf06 	br	400abbc <__alt_mem_epcs_flash_controller_0+0xfb009bbc>
 400ad00:	9806c03a 	cmpne	r3,r19,zero
 400ad04:	18c00084 	addi	r3,r3,2
 400ad08:	003fba06 	br	400abf4 <__alt_mem_epcs_flash_controller_0+0xfb009bf4>
 400ad0c:	9800141e 	bne	r19,zero,400ad60 <__mulsf3+0x210>
 400ad10:	00c00044 	movi	r3,1
 400ad14:	003fb706 	br	400abf4 <__alt_mem_epcs_flash_controller_0+0xfb009bf4>
 400ad18:	a829883a 	mov	r20,r21
 400ad1c:	00ffffc4 	movi	r3,-1
 400ad20:	0009883a 	mov	r4,zero
 400ad24:	003fdd06 	br	400ac9c <__alt_mem_epcs_flash_controller_0+0xfb009c9c>
 400ad28:	9009883a 	mov	r4,r18
 400ad2c:	d9400015 	stw	r5,0(sp)
 400ad30:	400de400 	call	400de40 <__clzsi2>
 400ad34:	10fffec4 	addi	r3,r2,-5
 400ad38:	10801d84 	addi	r2,r2,118
 400ad3c:	90e4983a 	sll	r18,r18,r3
 400ad40:	00a1c83a 	sub	r16,zero,r2
 400ad44:	0023883a 	mov	r17,zero
 400ad48:	002f883a 	mov	r23,zero
 400ad4c:	d9400017 	ldw	r5,0(sp)
 400ad50:	003f9a06 	br	400abbc <__alt_mem_epcs_flash_controller_0+0xfb009bbc>
 400ad54:	04400304 	movi	r17,12
 400ad58:	05c000c4 	movi	r23,3
 400ad5c:	003f9706 	br	400abbc <__alt_mem_epcs_flash_controller_0+0xfb009bbc>
 400ad60:	9809883a 	mov	r4,r19
 400ad64:	d9800015 	stw	r6,0(sp)
 400ad68:	400de400 	call	400de40 <__clzsi2>
 400ad6c:	10fffec4 	addi	r3,r2,-5
 400ad70:	10801d84 	addi	r2,r2,118
 400ad74:	98e6983a 	sll	r19,r19,r3
 400ad78:	0085c83a 	sub	r2,zero,r2
 400ad7c:	0007883a 	mov	r3,zero
 400ad80:	d9800017 	ldw	r6,0(sp)
 400ad84:	003f9b06 	br	400abf4 <__alt_mem_epcs_flash_controller_0+0xfb009bf4>
 400ad88:	01002034 	movhi	r4,128
 400ad8c:	0029883a 	mov	r20,zero
 400ad90:	213fffc4 	addi	r4,r4,-1
 400ad94:	00ffffc4 	movi	r3,-1
 400ad98:	003fc006 	br	400ac9c <__alt_mem_epcs_flash_controller_0+0xfb009c9c>
 400ad9c:	9027883a 	mov	r19,r18
 400ada0:	b807883a 	mov	r3,r23
 400ada4:	003fb406 	br	400ac78 <__alt_mem_epcs_flash_controller_0+0xfb009c78>
 400ada8:	9027883a 	mov	r19,r18
 400adac:	e02b883a 	mov	r21,fp
 400adb0:	b807883a 	mov	r3,r23
 400adb4:	003fb006 	br	400ac78 <__alt_mem_epcs_flash_controller_0+0xfb009c78>
 400adb8:	9004d43a 	srli	r2,r18,16
 400adbc:	9810d43a 	srli	r8,r19,16
 400adc0:	94bfffcc 	andi	r18,r18,65535
 400adc4:	993fffcc 	andi	r4,r19,65535
 400adc8:	910d383a 	mul	r6,r18,r4
 400adcc:	20a7383a 	mul	r19,r4,r2
 400add0:	9225383a 	mul	r18,r18,r8
 400add4:	3006d43a 	srli	r3,r6,16
 400add8:	1211383a 	mul	r8,r2,r8
 400addc:	94e5883a 	add	r18,r18,r19
 400ade0:	1c87883a 	add	r3,r3,r18
 400ade4:	1cc0022e 	bgeu	r3,r19,400adf0 <__mulsf3+0x2a0>
 400ade8:	00800074 	movhi	r2,1
 400adec:	4091883a 	add	r8,r8,r2
 400adf0:	1804943a 	slli	r2,r3,16
 400adf4:	31bfffcc 	andi	r6,r6,65535
 400adf8:	1806d43a 	srli	r3,r3,16
 400adfc:	1185883a 	add	r2,r2,r6
 400ae00:	102691ba 	slli	r19,r2,6
 400ae04:	1a07883a 	add	r3,r3,r8
 400ae08:	1004d6ba 	srli	r2,r2,26
 400ae0c:	180891ba 	slli	r4,r3,6
 400ae10:	9826c03a 	cmpne	r19,r19,zero
 400ae14:	9884b03a 	or	r2,r19,r2
 400ae18:	1126b03a 	or	r19,r2,r4
 400ae1c:	9882002c 	andhi	r2,r19,2048
 400ae20:	10000426 	beq	r2,zero,400ae34 <__mulsf3+0x2e4>
 400ae24:	9804d07a 	srli	r2,r19,1
 400ae28:	9900004c 	andi	r4,r19,1
 400ae2c:	3821883a 	mov	r16,r7
 400ae30:	1126b03a 	or	r19,r2,r4
 400ae34:	80c01fc4 	addi	r3,r16,127
 400ae38:	00c0210e 	bge	zero,r3,400aec0 <__mulsf3+0x370>
 400ae3c:	988001cc 	andi	r2,r19,7
 400ae40:	10000426 	beq	r2,zero,400ae54 <__mulsf3+0x304>
 400ae44:	988003cc 	andi	r2,r19,15
 400ae48:	01000104 	movi	r4,4
 400ae4c:	11000126 	beq	r2,r4,400ae54 <__mulsf3+0x304>
 400ae50:	9927883a 	add	r19,r19,r4
 400ae54:	9882002c 	andhi	r2,r19,2048
 400ae58:	10000426 	beq	r2,zero,400ae6c <__mulsf3+0x31c>
 400ae5c:	00be0034 	movhi	r2,63488
 400ae60:	10bfffc4 	addi	r2,r2,-1
 400ae64:	80c02004 	addi	r3,r16,128
 400ae68:	98a6703a 	and	r19,r19,r2
 400ae6c:	00803f84 	movi	r2,254
 400ae70:	10ffa916 	blt	r2,r3,400ad18 <__alt_mem_epcs_flash_controller_0+0xfb009d18>
 400ae74:	980891ba 	slli	r4,r19,6
 400ae78:	a829883a 	mov	r20,r21
 400ae7c:	2008d27a 	srli	r4,r4,9
 400ae80:	003f8606 	br	400ac9c <__alt_mem_epcs_flash_controller_0+0xfb009c9c>
 400ae84:	9080102c 	andhi	r2,r18,64
 400ae88:	10000826 	beq	r2,zero,400aeac <__mulsf3+0x35c>
 400ae8c:	9880102c 	andhi	r2,r19,64
 400ae90:	1000061e 	bne	r2,zero,400aeac <__mulsf3+0x35c>
 400ae94:	00802034 	movhi	r2,128
 400ae98:	99001034 	orhi	r4,r19,64
 400ae9c:	10bfffc4 	addi	r2,r2,-1
 400aea0:	b029883a 	mov	r20,r22
 400aea4:	2088703a 	and	r4,r4,r2
 400aea8:	003fba06 	br	400ad94 <__alt_mem_epcs_flash_controller_0+0xfb009d94>
 400aeac:	00802034 	movhi	r2,128
 400aeb0:	91001034 	orhi	r4,r18,64
 400aeb4:	10bfffc4 	addi	r2,r2,-1
 400aeb8:	2088703a 	and	r4,r4,r2
 400aebc:	003fb506 	br	400ad94 <__alt_mem_epcs_flash_controller_0+0xfb009d94>
 400aec0:	00800044 	movi	r2,1
 400aec4:	10c7c83a 	sub	r3,r2,r3
 400aec8:	008006c4 	movi	r2,27
 400aecc:	10ff7016 	blt	r2,r3,400ac90 <__alt_mem_epcs_flash_controller_0+0xfb009c90>
 400aed0:	00800804 	movi	r2,32
 400aed4:	10c5c83a 	sub	r2,r2,r3
 400aed8:	9884983a 	sll	r2,r19,r2
 400aedc:	98c6d83a 	srl	r3,r19,r3
 400aee0:	1004c03a 	cmpne	r2,r2,zero
 400aee4:	1884b03a 	or	r2,r3,r2
 400aee8:	10c001cc 	andi	r3,r2,7
 400aeec:	18000426 	beq	r3,zero,400af00 <__mulsf3+0x3b0>
 400aef0:	10c003cc 	andi	r3,r2,15
 400aef4:	01000104 	movi	r4,4
 400aef8:	19000126 	beq	r3,r4,400af00 <__mulsf3+0x3b0>
 400aefc:	1105883a 	add	r2,r2,r4
 400af00:	10c1002c 	andhi	r3,r2,1024
 400af04:	18000626 	beq	r3,zero,400af20 <__mulsf3+0x3d0>
 400af08:	a829883a 	mov	r20,r21
 400af0c:	00c00044 	movi	r3,1
 400af10:	0009883a 	mov	r4,zero
 400af14:	003f6106 	br	400ac9c <__alt_mem_epcs_flash_controller_0+0xfb009c9c>
 400af18:	3821883a 	mov	r16,r7
 400af1c:	003fc506 	br	400ae34 <__alt_mem_epcs_flash_controller_0+0xfb009e34>
 400af20:	100491ba 	slli	r2,r2,6
 400af24:	a829883a 	mov	r20,r21
 400af28:	0007883a 	mov	r3,zero
 400af2c:	1008d27a 	srli	r4,r2,9
 400af30:	003f5a06 	br	400ac9c <__alt_mem_epcs_flash_controller_0+0xfb009c9c>
 400af34:	00802034 	movhi	r2,128
 400af38:	99001034 	orhi	r4,r19,64
 400af3c:	10bfffc4 	addi	r2,r2,-1
 400af40:	a829883a 	mov	r20,r21
 400af44:	2088703a 	and	r4,r4,r2
 400af48:	003f9206 	br	400ad94 <__alt_mem_epcs_flash_controller_0+0xfb009d94>

0400af4c <__subsf3>:
 400af4c:	defffc04 	addi	sp,sp,-16
 400af50:	280cd5fa 	srli	r6,r5,23
 400af54:	dc000015 	stw	r16,0(sp)
 400af58:	01c02034 	movhi	r7,128
 400af5c:	2020d5fa 	srli	r16,r4,23
 400af60:	39ffffc4 	addi	r7,r7,-1
 400af64:	3906703a 	and	r3,r7,r4
 400af68:	dc400115 	stw	r17,4(sp)
 400af6c:	394e703a 	and	r7,r7,r5
 400af70:	2022d7fa 	srli	r17,r4,31
 400af74:	dfc00315 	stw	ra,12(sp)
 400af78:	dc800215 	stw	r18,8(sp)
 400af7c:	31803fcc 	andi	r6,r6,255
 400af80:	01003fc4 	movi	r4,255
 400af84:	84003fcc 	andi	r16,r16,255
 400af88:	180690fa 	slli	r3,r3,3
 400af8c:	2804d7fa 	srli	r2,r5,31
 400af90:	380e90fa 	slli	r7,r7,3
 400af94:	31006d26 	beq	r6,r4,400b14c <__subsf3+0x200>
 400af98:	1080005c 	xori	r2,r2,1
 400af9c:	8189c83a 	sub	r4,r16,r6
 400afa0:	14404f26 	beq	r2,r17,400b0e0 <__subsf3+0x194>
 400afa4:	0100770e 	bge	zero,r4,400b184 <__subsf3+0x238>
 400afa8:	30001e1e 	bne	r6,zero,400b024 <__subsf3+0xd8>
 400afac:	38006a1e 	bne	r7,zero,400b158 <__subsf3+0x20c>
 400afb0:	188001cc 	andi	r2,r3,7
 400afb4:	10000426 	beq	r2,zero,400afc8 <__subsf3+0x7c>
 400afb8:	188003cc 	andi	r2,r3,15
 400afbc:	01000104 	movi	r4,4
 400afc0:	11000126 	beq	r2,r4,400afc8 <__subsf3+0x7c>
 400afc4:	1907883a 	add	r3,r3,r4
 400afc8:	1881002c 	andhi	r2,r3,1024
 400afcc:	10003926 	beq	r2,zero,400b0b4 <__subsf3+0x168>
 400afd0:	84000044 	addi	r16,r16,1
 400afd4:	00803fc4 	movi	r2,255
 400afd8:	80807526 	beq	r16,r2,400b1b0 <__subsf3+0x264>
 400afdc:	180691ba 	slli	r3,r3,6
 400afe0:	8880004c 	andi	r2,r17,1
 400afe4:	180ad27a 	srli	r5,r3,9
 400afe8:	84003fcc 	andi	r16,r16,255
 400afec:	800695fa 	slli	r3,r16,23
 400aff0:	10803fcc 	andi	r2,r2,255
 400aff4:	01002034 	movhi	r4,128
 400aff8:	213fffc4 	addi	r4,r4,-1
 400affc:	100497fa 	slli	r2,r2,31
 400b000:	2920703a 	and	r16,r5,r4
 400b004:	80e0b03a 	or	r16,r16,r3
 400b008:	8084b03a 	or	r2,r16,r2
 400b00c:	dfc00317 	ldw	ra,12(sp)
 400b010:	dc800217 	ldw	r18,8(sp)
 400b014:	dc400117 	ldw	r17,4(sp)
 400b018:	dc000017 	ldw	r16,0(sp)
 400b01c:	dec00404 	addi	sp,sp,16
 400b020:	f800283a 	ret
 400b024:	00803fc4 	movi	r2,255
 400b028:	80bfe126 	beq	r16,r2,400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b02c:	39c10034 	orhi	r7,r7,1024
 400b030:	008006c4 	movi	r2,27
 400b034:	11007416 	blt	r2,r4,400b208 <__subsf3+0x2bc>
 400b038:	00800804 	movi	r2,32
 400b03c:	1105c83a 	sub	r2,r2,r4
 400b040:	3884983a 	sll	r2,r7,r2
 400b044:	390ed83a 	srl	r7,r7,r4
 400b048:	1008c03a 	cmpne	r4,r2,zero
 400b04c:	390eb03a 	or	r7,r7,r4
 400b050:	19c7c83a 	sub	r3,r3,r7
 400b054:	1881002c 	andhi	r2,r3,1024
 400b058:	10001426 	beq	r2,zero,400b0ac <__subsf3+0x160>
 400b05c:	04810034 	movhi	r18,1024
 400b060:	94bfffc4 	addi	r18,r18,-1
 400b064:	1ca4703a 	and	r18,r3,r18
 400b068:	9009883a 	mov	r4,r18
 400b06c:	400de400 	call	400de40 <__clzsi2>
 400b070:	10bffec4 	addi	r2,r2,-5
 400b074:	90a4983a 	sll	r18,r18,r2
 400b078:	14005116 	blt	r2,r16,400b1c0 <__subsf3+0x274>
 400b07c:	1405c83a 	sub	r2,r2,r16
 400b080:	10c00044 	addi	r3,r2,1
 400b084:	00800804 	movi	r2,32
 400b088:	10c5c83a 	sub	r2,r2,r3
 400b08c:	9084983a 	sll	r2,r18,r2
 400b090:	90e4d83a 	srl	r18,r18,r3
 400b094:	0021883a 	mov	r16,zero
 400b098:	1006c03a 	cmpne	r3,r2,zero
 400b09c:	90c6b03a 	or	r3,r18,r3
 400b0a0:	003fc306 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b0a4:	2000e026 	beq	r4,zero,400b428 <__subsf3+0x4dc>
 400b0a8:	2007883a 	mov	r3,r4
 400b0ac:	188001cc 	andi	r2,r3,7
 400b0b0:	103fc11e 	bne	r2,zero,400afb8 <__alt_mem_epcs_flash_controller_0+0xfb009fb8>
 400b0b4:	180ad0fa 	srli	r5,r3,3
 400b0b8:	00c03fc4 	movi	r3,255
 400b0bc:	8880004c 	andi	r2,r17,1
 400b0c0:	80c0031e 	bne	r16,r3,400b0d0 <__subsf3+0x184>
 400b0c4:	28006d26 	beq	r5,zero,400b27c <__subsf3+0x330>
 400b0c8:	29401034 	orhi	r5,r5,64
 400b0cc:	043fffc4 	movi	r16,-1
 400b0d0:	00c02034 	movhi	r3,128
 400b0d4:	18ffffc4 	addi	r3,r3,-1
 400b0d8:	28ca703a 	and	r5,r5,r3
 400b0dc:	003fc206 	br	400afe8 <__alt_mem_epcs_flash_controller_0+0xfb009fe8>
 400b0e0:	01003c0e 	bge	zero,r4,400b1d4 <__subsf3+0x288>
 400b0e4:	30002126 	beq	r6,zero,400b16c <__subsf3+0x220>
 400b0e8:	01403fc4 	movi	r5,255
 400b0ec:	817fb026 	beq	r16,r5,400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b0f0:	39c10034 	orhi	r7,r7,1024
 400b0f4:	014006c4 	movi	r5,27
 400b0f8:	29007416 	blt	r5,r4,400b2cc <__subsf3+0x380>
 400b0fc:	01400804 	movi	r5,32
 400b100:	290bc83a 	sub	r5,r5,r4
 400b104:	394a983a 	sll	r5,r7,r5
 400b108:	390ed83a 	srl	r7,r7,r4
 400b10c:	2808c03a 	cmpne	r4,r5,zero
 400b110:	390eb03a 	or	r7,r7,r4
 400b114:	19c7883a 	add	r3,r3,r7
 400b118:	1901002c 	andhi	r4,r3,1024
 400b11c:	20003826 	beq	r4,zero,400b200 <__subsf3+0x2b4>
 400b120:	84000044 	addi	r16,r16,1
 400b124:	01003fc4 	movi	r4,255
 400b128:	81005426 	beq	r16,r4,400b27c <__subsf3+0x330>
 400b12c:	1023883a 	mov	r17,r2
 400b130:	00bf0034 	movhi	r2,64512
 400b134:	10bfffc4 	addi	r2,r2,-1
 400b138:	1900004c 	andi	r4,r3,1
 400b13c:	1886703a 	and	r3,r3,r2
 400b140:	1806d07a 	srli	r3,r3,1
 400b144:	1906b03a 	or	r3,r3,r4
 400b148:	003f9906 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b14c:	383f9226 	beq	r7,zero,400af98 <__alt_mem_epcs_flash_controller_0+0xfb009f98>
 400b150:	10803fcc 	andi	r2,r2,255
 400b154:	003f9106 	br	400af9c <__alt_mem_epcs_flash_controller_0+0xfb009f9c>
 400b158:	213fffc4 	addi	r4,r4,-1
 400b15c:	203fbc26 	beq	r4,zero,400b050 <__alt_mem_epcs_flash_controller_0+0xfb00a050>
 400b160:	00803fc4 	movi	r2,255
 400b164:	80bfb21e 	bne	r16,r2,400b030 <__alt_mem_epcs_flash_controller_0+0xfb00a030>
 400b168:	003f9106 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b16c:	383f9026 	beq	r7,zero,400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b170:	213fffc4 	addi	r4,r4,-1
 400b174:	203fe726 	beq	r4,zero,400b114 <__alt_mem_epcs_flash_controller_0+0xfb00a114>
 400b178:	01403fc4 	movi	r5,255
 400b17c:	817fdd1e 	bne	r16,r5,400b0f4 <__alt_mem_epcs_flash_controller_0+0xfb00a0f4>
 400b180:	003f8b06 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b184:	2000221e 	bne	r4,zero,400b210 <__subsf3+0x2c4>
 400b188:	81000044 	addi	r4,r16,1
 400b18c:	21003fcc 	andi	r4,r4,255
 400b190:	01400044 	movi	r5,1
 400b194:	2900470e 	bge	r5,r4,400b2b4 <__subsf3+0x368>
 400b198:	19e5c83a 	sub	r18,r3,r7
 400b19c:	9141002c 	andhi	r5,r18,1024
 400b1a0:	28002d26 	beq	r5,zero,400b258 <__subsf3+0x30c>
 400b1a4:	38e5c83a 	sub	r18,r7,r3
 400b1a8:	1023883a 	mov	r17,r2
 400b1ac:	003fae06 	br	400b068 <__alt_mem_epcs_flash_controller_0+0xfb00a068>
 400b1b0:	8880004c 	andi	r2,r17,1
 400b1b4:	043fffc4 	movi	r16,-1
 400b1b8:	000b883a 	mov	r5,zero
 400b1bc:	003f8a06 	br	400afe8 <__alt_mem_epcs_flash_controller_0+0xfb009fe8>
 400b1c0:	00ff0034 	movhi	r3,64512
 400b1c4:	18ffffc4 	addi	r3,r3,-1
 400b1c8:	80a1c83a 	sub	r16,r16,r2
 400b1cc:	90c6703a 	and	r3,r18,r3
 400b1d0:	003f7706 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b1d4:	2000431e 	bne	r4,zero,400b2e4 <__subsf3+0x398>
 400b1d8:	81000044 	addi	r4,r16,1
 400b1dc:	21803fcc 	andi	r6,r4,255
 400b1e0:	01400044 	movi	r5,1
 400b1e4:	2980280e 	bge	r5,r6,400b288 <__subsf3+0x33c>
 400b1e8:	01403fc4 	movi	r5,255
 400b1ec:	21402326 	beq	r4,r5,400b27c <__subsf3+0x330>
 400b1f0:	19c7883a 	add	r3,r3,r7
 400b1f4:	1806d07a 	srli	r3,r3,1
 400b1f8:	2021883a 	mov	r16,r4
 400b1fc:	003f6c06 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b200:	1023883a 	mov	r17,r2
 400b204:	003fa906 	br	400b0ac <__alt_mem_epcs_flash_controller_0+0xfb00a0ac>
 400b208:	01c00044 	movi	r7,1
 400b20c:	003f9006 	br	400b050 <__alt_mem_epcs_flash_controller_0+0xfb00a050>
 400b210:	8000151e 	bne	r16,zero,400b268 <__subsf3+0x31c>
 400b214:	18002f26 	beq	r3,zero,400b2d4 <__subsf3+0x388>
 400b218:	0108303a 	nor	r4,zero,r4
 400b21c:	20000a26 	beq	r4,zero,400b248 <__subsf3+0x2fc>
 400b220:	01403fc4 	movi	r5,255
 400b224:	31402b26 	beq	r6,r5,400b2d4 <__subsf3+0x388>
 400b228:	014006c4 	movi	r5,27
 400b22c:	29006e16 	blt	r5,r4,400b3e8 <__subsf3+0x49c>
 400b230:	01400804 	movi	r5,32
 400b234:	290bc83a 	sub	r5,r5,r4
 400b238:	194a983a 	sll	r5,r3,r5
 400b23c:	1908d83a 	srl	r4,r3,r4
 400b240:	2806c03a 	cmpne	r3,r5,zero
 400b244:	20c6b03a 	or	r3,r4,r3
 400b248:	38c7c83a 	sub	r3,r7,r3
 400b24c:	3021883a 	mov	r16,r6
 400b250:	1023883a 	mov	r17,r2
 400b254:	003f7f06 	br	400b054 <__alt_mem_epcs_flash_controller_0+0xfb00a054>
 400b258:	903f831e 	bne	r18,zero,400b068 <__alt_mem_epcs_flash_controller_0+0xfb00a068>
 400b25c:	0005883a 	mov	r2,zero
 400b260:	0021883a 	mov	r16,zero
 400b264:	003f9a06 	br	400b0d0 <__alt_mem_epcs_flash_controller_0+0xfb00a0d0>
 400b268:	01403fc4 	movi	r5,255
 400b26c:	31401926 	beq	r6,r5,400b2d4 <__subsf3+0x388>
 400b270:	0109c83a 	sub	r4,zero,r4
 400b274:	18c10034 	orhi	r3,r3,1024
 400b278:	003feb06 	br	400b228 <__alt_mem_epcs_flash_controller_0+0xfb00a228>
 400b27c:	043fffc4 	movi	r16,-1
 400b280:	000b883a 	mov	r5,zero
 400b284:	003f5806 	br	400afe8 <__alt_mem_epcs_flash_controller_0+0xfb009fe8>
 400b288:	8000481e 	bne	r16,zero,400b3ac <__subsf3+0x460>
 400b28c:	18006226 	beq	r3,zero,400b418 <__subsf3+0x4cc>
 400b290:	383f4726 	beq	r7,zero,400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b294:	19c7883a 	add	r3,r3,r7
 400b298:	1881002c 	andhi	r2,r3,1024
 400b29c:	103f8326 	beq	r2,zero,400b0ac <__alt_mem_epcs_flash_controller_0+0xfb00a0ac>
 400b2a0:	00bf0034 	movhi	r2,64512
 400b2a4:	10bfffc4 	addi	r2,r2,-1
 400b2a8:	2821883a 	mov	r16,r5
 400b2ac:	1886703a 	and	r3,r3,r2
 400b2b0:	003f3f06 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b2b4:	80001c1e 	bne	r16,zero,400b328 <__subsf3+0x3dc>
 400b2b8:	1800261e 	bne	r3,zero,400b354 <__subsf3+0x408>
 400b2bc:	38004c26 	beq	r7,zero,400b3f0 <__subsf3+0x4a4>
 400b2c0:	3807883a 	mov	r3,r7
 400b2c4:	1023883a 	mov	r17,r2
 400b2c8:	003f3906 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b2cc:	01c00044 	movi	r7,1
 400b2d0:	003f9006 	br	400b114 <__alt_mem_epcs_flash_controller_0+0xfb00a114>
 400b2d4:	3807883a 	mov	r3,r7
 400b2d8:	3021883a 	mov	r16,r6
 400b2dc:	1023883a 	mov	r17,r2
 400b2e0:	003f3306 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b2e4:	8000161e 	bne	r16,zero,400b340 <__subsf3+0x3f4>
 400b2e8:	18002d26 	beq	r3,zero,400b3a0 <__subsf3+0x454>
 400b2ec:	0108303a 	nor	r4,zero,r4
 400b2f0:	20000a26 	beq	r4,zero,400b31c <__subsf3+0x3d0>
 400b2f4:	01403fc4 	movi	r5,255
 400b2f8:	31402926 	beq	r6,r5,400b3a0 <__subsf3+0x454>
 400b2fc:	014006c4 	movi	r5,27
 400b300:	29004716 	blt	r5,r4,400b420 <__subsf3+0x4d4>
 400b304:	01400804 	movi	r5,32
 400b308:	290bc83a 	sub	r5,r5,r4
 400b30c:	194a983a 	sll	r5,r3,r5
 400b310:	1908d83a 	srl	r4,r3,r4
 400b314:	2806c03a 	cmpne	r3,r5,zero
 400b318:	20c6b03a 	or	r3,r4,r3
 400b31c:	19c7883a 	add	r3,r3,r7
 400b320:	3021883a 	mov	r16,r6
 400b324:	003f7c06 	br	400b118 <__alt_mem_epcs_flash_controller_0+0xfb00a118>
 400b328:	1800111e 	bne	r3,zero,400b370 <__subsf3+0x424>
 400b32c:	38003326 	beq	r7,zero,400b3fc <__subsf3+0x4b0>
 400b330:	3807883a 	mov	r3,r7
 400b334:	1023883a 	mov	r17,r2
 400b338:	04003fc4 	movi	r16,255
 400b33c:	003f1c06 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b340:	01403fc4 	movi	r5,255
 400b344:	31401626 	beq	r6,r5,400b3a0 <__subsf3+0x454>
 400b348:	0109c83a 	sub	r4,zero,r4
 400b34c:	18c10034 	orhi	r3,r3,1024
 400b350:	003fea06 	br	400b2fc <__alt_mem_epcs_flash_controller_0+0xfb00a2fc>
 400b354:	383f1626 	beq	r7,zero,400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b358:	19c9c83a 	sub	r4,r3,r7
 400b35c:	2141002c 	andhi	r5,r4,1024
 400b360:	283f5026 	beq	r5,zero,400b0a4 <__alt_mem_epcs_flash_controller_0+0xfb00a0a4>
 400b364:	38c7c83a 	sub	r3,r7,r3
 400b368:	1023883a 	mov	r17,r2
 400b36c:	003f1006 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b370:	38001b26 	beq	r7,zero,400b3e0 <__subsf3+0x494>
 400b374:	1806d0fa 	srli	r3,r3,3
 400b378:	1900102c 	andhi	r4,r3,64
 400b37c:	20000526 	beq	r4,zero,400b394 <__subsf3+0x448>
 400b380:	380ed0fa 	srli	r7,r7,3
 400b384:	3900102c 	andhi	r4,r7,64
 400b388:	2000021e 	bne	r4,zero,400b394 <__subsf3+0x448>
 400b38c:	3807883a 	mov	r3,r7
 400b390:	1023883a 	mov	r17,r2
 400b394:	180690fa 	slli	r3,r3,3
 400b398:	04003fc4 	movi	r16,255
 400b39c:	003f0406 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b3a0:	3807883a 	mov	r3,r7
 400b3a4:	3021883a 	mov	r16,r6
 400b3a8:	003f0106 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b3ac:	18001726 	beq	r3,zero,400b40c <__subsf3+0x4c0>
 400b3b0:	38000b26 	beq	r7,zero,400b3e0 <__subsf3+0x494>
 400b3b4:	1806d0fa 	srli	r3,r3,3
 400b3b8:	1900102c 	andhi	r4,r3,64
 400b3bc:	20000426 	beq	r4,zero,400b3d0 <__subsf3+0x484>
 400b3c0:	380ed0fa 	srli	r7,r7,3
 400b3c4:	3900102c 	andhi	r4,r7,64
 400b3c8:	2000011e 	bne	r4,zero,400b3d0 <__subsf3+0x484>
 400b3cc:	3807883a 	mov	r3,r7
 400b3d0:	180690fa 	slli	r3,r3,3
 400b3d4:	1023883a 	mov	r17,r2
 400b3d8:	04003fc4 	movi	r16,255
 400b3dc:	003ef406 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b3e0:	04003fc4 	movi	r16,255
 400b3e4:	003ef206 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b3e8:	00c00044 	movi	r3,1
 400b3ec:	003f9606 	br	400b248 <__alt_mem_epcs_flash_controller_0+0xfb00a248>
 400b3f0:	000b883a 	mov	r5,zero
 400b3f4:	0005883a 	mov	r2,zero
 400b3f8:	003f3506 	br	400b0d0 <__alt_mem_epcs_flash_controller_0+0xfb00a0d0>
 400b3fc:	01402034 	movhi	r5,128
 400b400:	297fffc4 	addi	r5,r5,-1
 400b404:	0005883a 	mov	r2,zero
 400b408:	003f2f06 	br	400b0c8 <__alt_mem_epcs_flash_controller_0+0xfb00a0c8>
 400b40c:	3807883a 	mov	r3,r7
 400b410:	04003fc4 	movi	r16,255
 400b414:	003ee606 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b418:	3807883a 	mov	r3,r7
 400b41c:	003ee406 	br	400afb0 <__alt_mem_epcs_flash_controller_0+0xfb009fb0>
 400b420:	00c00044 	movi	r3,1
 400b424:	003fbd06 	br	400b31c <__alt_mem_epcs_flash_controller_0+0xfb00a31c>
 400b428:	0005883a 	mov	r2,zero
 400b42c:	003f2806 	br	400b0d0 <__alt_mem_epcs_flash_controller_0+0xfb00a0d0>

0400b430 <__fixsfsi>:
 400b430:	200ad5fa 	srli	r5,r4,23
 400b434:	00c02034 	movhi	r3,128
 400b438:	18ffffc4 	addi	r3,r3,-1
 400b43c:	29403fcc 	andi	r5,r5,255
 400b440:	00801f84 	movi	r2,126
 400b444:	1906703a 	and	r3,r3,r4
 400b448:	2008d7fa 	srli	r4,r4,31
 400b44c:	11400e0e 	bge	r2,r5,400b488 <__fixsfsi+0x58>
 400b450:	00802744 	movi	r2,157
 400b454:	11400816 	blt	r2,r5,400b478 <__fixsfsi+0x48>
 400b458:	00802544 	movi	r2,149
 400b45c:	18c02034 	orhi	r3,r3,128
 400b460:	11400b0e 	bge	r2,r5,400b490 <__fixsfsi+0x60>
 400b464:	28bfda84 	addi	r2,r5,-150
 400b468:	1884983a 	sll	r2,r3,r2
 400b46c:	20000726 	beq	r4,zero,400b48c <__fixsfsi+0x5c>
 400b470:	0085c83a 	sub	r2,zero,r2
 400b474:	f800283a 	ret
 400b478:	00a00034 	movhi	r2,32768
 400b47c:	10bfffc4 	addi	r2,r2,-1
 400b480:	2085883a 	add	r2,r4,r2
 400b484:	f800283a 	ret
 400b488:	0005883a 	mov	r2,zero
 400b48c:	f800283a 	ret
 400b490:	00802584 	movi	r2,150
 400b494:	1145c83a 	sub	r2,r2,r5
 400b498:	1884d83a 	srl	r2,r3,r2
 400b49c:	003ff306 	br	400b46c <__alt_mem_epcs_flash_controller_0+0xfb00a46c>

0400b4a0 <__floatsisf>:
 400b4a0:	defffd04 	addi	sp,sp,-12
 400b4a4:	dfc00215 	stw	ra,8(sp)
 400b4a8:	dc400115 	stw	r17,4(sp)
 400b4ac:	dc000015 	stw	r16,0(sp)
 400b4b0:	20003526 	beq	r4,zero,400b588 <__floatsisf+0xe8>
 400b4b4:	2021883a 	mov	r16,r4
 400b4b8:	2022d7fa 	srli	r17,r4,31
 400b4bc:	20003616 	blt	r4,zero,400b598 <__floatsisf+0xf8>
 400b4c0:	8009883a 	mov	r4,r16
 400b4c4:	400de400 	call	400de40 <__clzsi2>
 400b4c8:	00c02784 	movi	r3,158
 400b4cc:	1887c83a 	sub	r3,r3,r2
 400b4d0:	01002584 	movi	r4,150
 400b4d4:	20c01416 	blt	r4,r3,400b528 <__floatsisf+0x88>
 400b4d8:	20c9c83a 	sub	r4,r4,r3
 400b4dc:	8120983a 	sll	r16,r16,r4
 400b4e0:	00802034 	movhi	r2,128
 400b4e4:	10bfffc4 	addi	r2,r2,-1
 400b4e8:	8809883a 	mov	r4,r17
 400b4ec:	80a0703a 	and	r16,r16,r2
 400b4f0:	18803fcc 	andi	r2,r3,255
 400b4f4:	100695fa 	slli	r3,r2,23
 400b4f8:	20803fcc 	andi	r2,r4,255
 400b4fc:	100897fa 	slli	r4,r2,31
 400b500:	00802034 	movhi	r2,128
 400b504:	10bfffc4 	addi	r2,r2,-1
 400b508:	8084703a 	and	r2,r16,r2
 400b50c:	10c4b03a 	or	r2,r2,r3
 400b510:	1104b03a 	or	r2,r2,r4
 400b514:	dfc00217 	ldw	ra,8(sp)
 400b518:	dc400117 	ldw	r17,4(sp)
 400b51c:	dc000017 	ldw	r16,0(sp)
 400b520:	dec00304 	addi	sp,sp,12
 400b524:	f800283a 	ret
 400b528:	01002644 	movi	r4,153
 400b52c:	20c01c16 	blt	r4,r3,400b5a0 <__floatsisf+0x100>
 400b530:	20c9c83a 	sub	r4,r4,r3
 400b534:	8120983a 	sll	r16,r16,r4
 400b538:	013f0034 	movhi	r4,64512
 400b53c:	213fffc4 	addi	r4,r4,-1
 400b540:	814001cc 	andi	r5,r16,7
 400b544:	8108703a 	and	r4,r16,r4
 400b548:	28000426 	beq	r5,zero,400b55c <__floatsisf+0xbc>
 400b54c:	840003cc 	andi	r16,r16,15
 400b550:	01400104 	movi	r5,4
 400b554:	81400126 	beq	r16,r5,400b55c <__floatsisf+0xbc>
 400b558:	2149883a 	add	r4,r4,r5
 400b55c:	2141002c 	andhi	r5,r4,1024
 400b560:	28000526 	beq	r5,zero,400b578 <__floatsisf+0xd8>
 400b564:	00c027c4 	movi	r3,159
 400b568:	1887c83a 	sub	r3,r3,r2
 400b56c:	00bf0034 	movhi	r2,64512
 400b570:	10bfffc4 	addi	r2,r2,-1
 400b574:	2088703a 	and	r4,r4,r2
 400b578:	202091ba 	slli	r16,r4,6
 400b57c:	8809883a 	mov	r4,r17
 400b580:	8020d27a 	srli	r16,r16,9
 400b584:	003fda06 	br	400b4f0 <__alt_mem_epcs_flash_controller_0+0xfb00a4f0>
 400b588:	0009883a 	mov	r4,zero
 400b58c:	0007883a 	mov	r3,zero
 400b590:	0021883a 	mov	r16,zero
 400b594:	003fd606 	br	400b4f0 <__alt_mem_epcs_flash_controller_0+0xfb00a4f0>
 400b598:	0121c83a 	sub	r16,zero,r4
 400b59c:	003fc806 	br	400b4c0 <__alt_mem_epcs_flash_controller_0+0xfb00a4c0>
 400b5a0:	01002e44 	movi	r4,185
 400b5a4:	20c9c83a 	sub	r4,r4,r3
 400b5a8:	01400144 	movi	r5,5
 400b5ac:	8108983a 	sll	r4,r16,r4
 400b5b0:	288bc83a 	sub	r5,r5,r2
 400b5b4:	8160d83a 	srl	r16,r16,r5
 400b5b8:	2008c03a 	cmpne	r4,r4,zero
 400b5bc:	8120b03a 	or	r16,r16,r4
 400b5c0:	003fdd06 	br	400b538 <__alt_mem_epcs_flash_controller_0+0xfb00a538>

0400b5c4 <__floatunsisf>:
 400b5c4:	defffe04 	addi	sp,sp,-8
 400b5c8:	dfc00115 	stw	ra,4(sp)
 400b5cc:	dc000015 	stw	r16,0(sp)
 400b5d0:	20002c26 	beq	r4,zero,400b684 <__floatunsisf+0xc0>
 400b5d4:	2021883a 	mov	r16,r4
 400b5d8:	400de400 	call	400de40 <__clzsi2>
 400b5dc:	00c02784 	movi	r3,158
 400b5e0:	1887c83a 	sub	r3,r3,r2
 400b5e4:	01002584 	movi	r4,150
 400b5e8:	20c00f16 	blt	r4,r3,400b628 <__floatunsisf+0x64>
 400b5ec:	20c9c83a 	sub	r4,r4,r3
 400b5f0:	8108983a 	sll	r4,r16,r4
 400b5f4:	00802034 	movhi	r2,128
 400b5f8:	10bfffc4 	addi	r2,r2,-1
 400b5fc:	2088703a 	and	r4,r4,r2
 400b600:	18803fcc 	andi	r2,r3,255
 400b604:	100695fa 	slli	r3,r2,23
 400b608:	00802034 	movhi	r2,128
 400b60c:	10bfffc4 	addi	r2,r2,-1
 400b610:	2084703a 	and	r2,r4,r2
 400b614:	10c4b03a 	or	r2,r2,r3
 400b618:	dfc00117 	ldw	ra,4(sp)
 400b61c:	dc000017 	ldw	r16,0(sp)
 400b620:	dec00204 	addi	sp,sp,8
 400b624:	f800283a 	ret
 400b628:	01002644 	movi	r4,153
 400b62c:	20c01816 	blt	r4,r3,400b690 <__floatunsisf+0xcc>
 400b630:	20c9c83a 	sub	r4,r4,r3
 400b634:	8108983a 	sll	r4,r16,r4
 400b638:	017f0034 	movhi	r5,64512
 400b63c:	297fffc4 	addi	r5,r5,-1
 400b640:	218001cc 	andi	r6,r4,7
 400b644:	214a703a 	and	r5,r4,r5
 400b648:	30000426 	beq	r6,zero,400b65c <__floatunsisf+0x98>
 400b64c:	210003cc 	andi	r4,r4,15
 400b650:	01800104 	movi	r6,4
 400b654:	21800126 	beq	r4,r6,400b65c <__floatunsisf+0x98>
 400b658:	298b883a 	add	r5,r5,r6
 400b65c:	2901002c 	andhi	r4,r5,1024
 400b660:	20000526 	beq	r4,zero,400b678 <__floatunsisf+0xb4>
 400b664:	00c027c4 	movi	r3,159
 400b668:	1887c83a 	sub	r3,r3,r2
 400b66c:	00bf0034 	movhi	r2,64512
 400b670:	10bfffc4 	addi	r2,r2,-1
 400b674:	288a703a 	and	r5,r5,r2
 400b678:	280891ba 	slli	r4,r5,6
 400b67c:	2008d27a 	srli	r4,r4,9
 400b680:	003fdf06 	br	400b600 <__alt_mem_epcs_flash_controller_0+0xfb00a600>
 400b684:	0007883a 	mov	r3,zero
 400b688:	0009883a 	mov	r4,zero
 400b68c:	003fdc06 	br	400b600 <__alt_mem_epcs_flash_controller_0+0xfb00a600>
 400b690:	01402e44 	movi	r5,185
 400b694:	28cbc83a 	sub	r5,r5,r3
 400b698:	01000144 	movi	r4,5
 400b69c:	2089c83a 	sub	r4,r4,r2
 400b6a0:	814a983a 	sll	r5,r16,r5
 400b6a4:	8108d83a 	srl	r4,r16,r4
 400b6a8:	2820c03a 	cmpne	r16,r5,zero
 400b6ac:	2408b03a 	or	r4,r4,r16
 400b6b0:	003fe106 	br	400b638 <__alt_mem_epcs_flash_controller_0+0xfb00a638>

0400b6b4 <__adddf3>:
 400b6b4:	02c00434 	movhi	r11,16
 400b6b8:	5affffc4 	addi	r11,r11,-1
 400b6bc:	2806d7fa 	srli	r3,r5,31
 400b6c0:	2ad4703a 	and	r10,r5,r11
 400b6c4:	3ad2703a 	and	r9,r7,r11
 400b6c8:	3804d53a 	srli	r2,r7,20
 400b6cc:	3018d77a 	srli	r12,r6,29
 400b6d0:	280ad53a 	srli	r5,r5,20
 400b6d4:	501490fa 	slli	r10,r10,3
 400b6d8:	2010d77a 	srli	r8,r4,29
 400b6dc:	481290fa 	slli	r9,r9,3
 400b6e0:	380ed7fa 	srli	r7,r7,31
 400b6e4:	defffb04 	addi	sp,sp,-20
 400b6e8:	dc800215 	stw	r18,8(sp)
 400b6ec:	dc400115 	stw	r17,4(sp)
 400b6f0:	dc000015 	stw	r16,0(sp)
 400b6f4:	dfc00415 	stw	ra,16(sp)
 400b6f8:	dcc00315 	stw	r19,12(sp)
 400b6fc:	1c803fcc 	andi	r18,r3,255
 400b700:	2c01ffcc 	andi	r16,r5,2047
 400b704:	5210b03a 	or	r8,r10,r8
 400b708:	202290fa 	slli	r17,r4,3
 400b70c:	1081ffcc 	andi	r2,r2,2047
 400b710:	4b12b03a 	or	r9,r9,r12
 400b714:	300c90fa 	slli	r6,r6,3
 400b718:	91c07526 	beq	r18,r7,400b8f0 <__adddf3+0x23c>
 400b71c:	8087c83a 	sub	r3,r16,r2
 400b720:	00c0ab0e 	bge	zero,r3,400b9d0 <__adddf3+0x31c>
 400b724:	10002a1e 	bne	r2,zero,400b7d0 <__adddf3+0x11c>
 400b728:	4984b03a 	or	r2,r9,r6
 400b72c:	1000961e 	bne	r2,zero,400b988 <__adddf3+0x2d4>
 400b730:	888001cc 	andi	r2,r17,7
 400b734:	10000726 	beq	r2,zero,400b754 <__adddf3+0xa0>
 400b738:	888003cc 	andi	r2,r17,15
 400b73c:	00c00104 	movi	r3,4
 400b740:	10c00426 	beq	r2,r3,400b754 <__adddf3+0xa0>
 400b744:	88c7883a 	add	r3,r17,r3
 400b748:	1c63803a 	cmpltu	r17,r3,r17
 400b74c:	4451883a 	add	r8,r8,r17
 400b750:	1823883a 	mov	r17,r3
 400b754:	4080202c 	andhi	r2,r8,128
 400b758:	10005926 	beq	r2,zero,400b8c0 <__adddf3+0x20c>
 400b75c:	84000044 	addi	r16,r16,1
 400b760:	0081ffc4 	movi	r2,2047
 400b764:	8080ba26 	beq	r16,r2,400ba50 <__adddf3+0x39c>
 400b768:	00bfe034 	movhi	r2,65408
 400b76c:	10bfffc4 	addi	r2,r2,-1
 400b770:	4090703a 	and	r8,r8,r2
 400b774:	4004977a 	slli	r2,r8,29
 400b778:	4010927a 	slli	r8,r8,9
 400b77c:	8822d0fa 	srli	r17,r17,3
 400b780:	8401ffcc 	andi	r16,r16,2047
 400b784:	4010d33a 	srli	r8,r8,12
 400b788:	9007883a 	mov	r3,r18
 400b78c:	1444b03a 	or	r2,r2,r17
 400b790:	8401ffcc 	andi	r16,r16,2047
 400b794:	8020953a 	slli	r16,r16,20
 400b798:	18c03fcc 	andi	r3,r3,255
 400b79c:	01000434 	movhi	r4,16
 400b7a0:	213fffc4 	addi	r4,r4,-1
 400b7a4:	180697fa 	slli	r3,r3,31
 400b7a8:	4110703a 	and	r8,r8,r4
 400b7ac:	4410b03a 	or	r8,r8,r16
 400b7b0:	40c6b03a 	or	r3,r8,r3
 400b7b4:	dfc00417 	ldw	ra,16(sp)
 400b7b8:	dcc00317 	ldw	r19,12(sp)
 400b7bc:	dc800217 	ldw	r18,8(sp)
 400b7c0:	dc400117 	ldw	r17,4(sp)
 400b7c4:	dc000017 	ldw	r16,0(sp)
 400b7c8:	dec00504 	addi	sp,sp,20
 400b7cc:	f800283a 	ret
 400b7d0:	0081ffc4 	movi	r2,2047
 400b7d4:	80bfd626 	beq	r16,r2,400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400b7d8:	4a402034 	orhi	r9,r9,128
 400b7dc:	00800e04 	movi	r2,56
 400b7e0:	10c09f16 	blt	r2,r3,400ba60 <__adddf3+0x3ac>
 400b7e4:	008007c4 	movi	r2,31
 400b7e8:	10c0c216 	blt	r2,r3,400baf4 <__adddf3+0x440>
 400b7ec:	00800804 	movi	r2,32
 400b7f0:	10c5c83a 	sub	r2,r2,r3
 400b7f4:	488a983a 	sll	r5,r9,r2
 400b7f8:	30c8d83a 	srl	r4,r6,r3
 400b7fc:	3084983a 	sll	r2,r6,r2
 400b800:	48c6d83a 	srl	r3,r9,r3
 400b804:	290cb03a 	or	r6,r5,r4
 400b808:	1004c03a 	cmpne	r2,r2,zero
 400b80c:	308cb03a 	or	r6,r6,r2
 400b810:	898dc83a 	sub	r6,r17,r6
 400b814:	89a3803a 	cmpltu	r17,r17,r6
 400b818:	40d1c83a 	sub	r8,r8,r3
 400b81c:	4451c83a 	sub	r8,r8,r17
 400b820:	3023883a 	mov	r17,r6
 400b824:	4080202c 	andhi	r2,r8,128
 400b828:	10002326 	beq	r2,zero,400b8b8 <__adddf3+0x204>
 400b82c:	04c02034 	movhi	r19,128
 400b830:	9cffffc4 	addi	r19,r19,-1
 400b834:	44e6703a 	and	r19,r8,r19
 400b838:	98007626 	beq	r19,zero,400ba14 <__adddf3+0x360>
 400b83c:	9809883a 	mov	r4,r19
 400b840:	400de400 	call	400de40 <__clzsi2>
 400b844:	10fffe04 	addi	r3,r2,-8
 400b848:	010007c4 	movi	r4,31
 400b84c:	20c07716 	blt	r4,r3,400ba2c <__adddf3+0x378>
 400b850:	00800804 	movi	r2,32
 400b854:	10c5c83a 	sub	r2,r2,r3
 400b858:	8884d83a 	srl	r2,r17,r2
 400b85c:	98d0983a 	sll	r8,r19,r3
 400b860:	88e2983a 	sll	r17,r17,r3
 400b864:	1204b03a 	or	r2,r2,r8
 400b868:	1c007416 	blt	r3,r16,400ba3c <__adddf3+0x388>
 400b86c:	1c21c83a 	sub	r16,r3,r16
 400b870:	82000044 	addi	r8,r16,1
 400b874:	00c007c4 	movi	r3,31
 400b878:	1a009116 	blt	r3,r8,400bac0 <__adddf3+0x40c>
 400b87c:	00c00804 	movi	r3,32
 400b880:	1a07c83a 	sub	r3,r3,r8
 400b884:	8a08d83a 	srl	r4,r17,r8
 400b888:	88e2983a 	sll	r17,r17,r3
 400b88c:	10c6983a 	sll	r3,r2,r3
 400b890:	1210d83a 	srl	r8,r2,r8
 400b894:	8804c03a 	cmpne	r2,r17,zero
 400b898:	1906b03a 	or	r3,r3,r4
 400b89c:	18a2b03a 	or	r17,r3,r2
 400b8a0:	0021883a 	mov	r16,zero
 400b8a4:	003fa206 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400b8a8:	1890b03a 	or	r8,r3,r2
 400b8ac:	40017d26 	beq	r8,zero,400bea4 <__adddf3+0x7f0>
 400b8b0:	1011883a 	mov	r8,r2
 400b8b4:	1823883a 	mov	r17,r3
 400b8b8:	888001cc 	andi	r2,r17,7
 400b8bc:	103f9e1e 	bne	r2,zero,400b738 <__alt_mem_epcs_flash_controller_0+0xfb00a738>
 400b8c0:	4004977a 	slli	r2,r8,29
 400b8c4:	8822d0fa 	srli	r17,r17,3
 400b8c8:	4010d0fa 	srli	r8,r8,3
 400b8cc:	9007883a 	mov	r3,r18
 400b8d0:	1444b03a 	or	r2,r2,r17
 400b8d4:	0101ffc4 	movi	r4,2047
 400b8d8:	81002426 	beq	r16,r4,400b96c <__adddf3+0x2b8>
 400b8dc:	8120703a 	and	r16,r16,r4
 400b8e0:	01000434 	movhi	r4,16
 400b8e4:	213fffc4 	addi	r4,r4,-1
 400b8e8:	4110703a 	and	r8,r8,r4
 400b8ec:	003fa806 	br	400b790 <__alt_mem_epcs_flash_controller_0+0xfb00a790>
 400b8f0:	8089c83a 	sub	r4,r16,r2
 400b8f4:	01005e0e 	bge	zero,r4,400ba70 <__adddf3+0x3bc>
 400b8f8:	10002b26 	beq	r2,zero,400b9a8 <__adddf3+0x2f4>
 400b8fc:	0081ffc4 	movi	r2,2047
 400b900:	80bf8b26 	beq	r16,r2,400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400b904:	4a402034 	orhi	r9,r9,128
 400b908:	00800e04 	movi	r2,56
 400b90c:	1100a40e 	bge	r2,r4,400bba0 <__adddf3+0x4ec>
 400b910:	498cb03a 	or	r6,r9,r6
 400b914:	300ac03a 	cmpne	r5,r6,zero
 400b918:	0013883a 	mov	r9,zero
 400b91c:	2c4b883a 	add	r5,r5,r17
 400b920:	2c63803a 	cmpltu	r17,r5,r17
 400b924:	4a11883a 	add	r8,r9,r8
 400b928:	8a11883a 	add	r8,r17,r8
 400b92c:	2823883a 	mov	r17,r5
 400b930:	4080202c 	andhi	r2,r8,128
 400b934:	103fe026 	beq	r2,zero,400b8b8 <__alt_mem_epcs_flash_controller_0+0xfb00a8b8>
 400b938:	84000044 	addi	r16,r16,1
 400b93c:	0081ffc4 	movi	r2,2047
 400b940:	8080d226 	beq	r16,r2,400bc8c <__adddf3+0x5d8>
 400b944:	00bfe034 	movhi	r2,65408
 400b948:	10bfffc4 	addi	r2,r2,-1
 400b94c:	4090703a 	and	r8,r8,r2
 400b950:	880ad07a 	srli	r5,r17,1
 400b954:	400897fa 	slli	r4,r8,31
 400b958:	88c0004c 	andi	r3,r17,1
 400b95c:	28e2b03a 	or	r17,r5,r3
 400b960:	4010d07a 	srli	r8,r8,1
 400b964:	2462b03a 	or	r17,r4,r17
 400b968:	003f7106 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400b96c:	4088b03a 	or	r4,r8,r2
 400b970:	20014526 	beq	r4,zero,400be88 <__adddf3+0x7d4>
 400b974:	01000434 	movhi	r4,16
 400b978:	42000234 	orhi	r8,r8,8
 400b97c:	213fffc4 	addi	r4,r4,-1
 400b980:	4110703a 	and	r8,r8,r4
 400b984:	003f8206 	br	400b790 <__alt_mem_epcs_flash_controller_0+0xfb00a790>
 400b988:	18ffffc4 	addi	r3,r3,-1
 400b98c:	1800491e 	bne	r3,zero,400bab4 <__adddf3+0x400>
 400b990:	898bc83a 	sub	r5,r17,r6
 400b994:	8963803a 	cmpltu	r17,r17,r5
 400b998:	4251c83a 	sub	r8,r8,r9
 400b99c:	4451c83a 	sub	r8,r8,r17
 400b9a0:	2823883a 	mov	r17,r5
 400b9a4:	003f9f06 	br	400b824 <__alt_mem_epcs_flash_controller_0+0xfb00a824>
 400b9a8:	4984b03a 	or	r2,r9,r6
 400b9ac:	103f6026 	beq	r2,zero,400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400b9b0:	213fffc4 	addi	r4,r4,-1
 400b9b4:	2000931e 	bne	r4,zero,400bc04 <__adddf3+0x550>
 400b9b8:	898d883a 	add	r6,r17,r6
 400b9bc:	3463803a 	cmpltu	r17,r6,r17
 400b9c0:	4251883a 	add	r8,r8,r9
 400b9c4:	8a11883a 	add	r8,r17,r8
 400b9c8:	3023883a 	mov	r17,r6
 400b9cc:	003fd806 	br	400b930 <__alt_mem_epcs_flash_controller_0+0xfb00a930>
 400b9d0:	1800541e 	bne	r3,zero,400bb24 <__adddf3+0x470>
 400b9d4:	80800044 	addi	r2,r16,1
 400b9d8:	1081ffcc 	andi	r2,r2,2047
 400b9dc:	00c00044 	movi	r3,1
 400b9e0:	1880a00e 	bge	r3,r2,400bc64 <__adddf3+0x5b0>
 400b9e4:	8989c83a 	sub	r4,r17,r6
 400b9e8:	8905803a 	cmpltu	r2,r17,r4
 400b9ec:	4267c83a 	sub	r19,r8,r9
 400b9f0:	98a7c83a 	sub	r19,r19,r2
 400b9f4:	9880202c 	andhi	r2,r19,128
 400b9f8:	10006326 	beq	r2,zero,400bb88 <__adddf3+0x4d4>
 400b9fc:	3463c83a 	sub	r17,r6,r17
 400ba00:	4a07c83a 	sub	r3,r9,r8
 400ba04:	344d803a 	cmpltu	r6,r6,r17
 400ba08:	19a7c83a 	sub	r19,r3,r6
 400ba0c:	3825883a 	mov	r18,r7
 400ba10:	983f8a1e 	bne	r19,zero,400b83c <__alt_mem_epcs_flash_controller_0+0xfb00a83c>
 400ba14:	8809883a 	mov	r4,r17
 400ba18:	400de400 	call	400de40 <__clzsi2>
 400ba1c:	10800804 	addi	r2,r2,32
 400ba20:	10fffe04 	addi	r3,r2,-8
 400ba24:	010007c4 	movi	r4,31
 400ba28:	20ff890e 	bge	r4,r3,400b850 <__alt_mem_epcs_flash_controller_0+0xfb00a850>
 400ba2c:	10bff604 	addi	r2,r2,-40
 400ba30:	8884983a 	sll	r2,r17,r2
 400ba34:	0023883a 	mov	r17,zero
 400ba38:	1c3f8c0e 	bge	r3,r16,400b86c <__alt_mem_epcs_flash_controller_0+0xfb00a86c>
 400ba3c:	023fe034 	movhi	r8,65408
 400ba40:	423fffc4 	addi	r8,r8,-1
 400ba44:	80e1c83a 	sub	r16,r16,r3
 400ba48:	1210703a 	and	r8,r2,r8
 400ba4c:	003f3806 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400ba50:	9007883a 	mov	r3,r18
 400ba54:	0011883a 	mov	r8,zero
 400ba58:	0005883a 	mov	r2,zero
 400ba5c:	003f4c06 	br	400b790 <__alt_mem_epcs_flash_controller_0+0xfb00a790>
 400ba60:	498cb03a 	or	r6,r9,r6
 400ba64:	300cc03a 	cmpne	r6,r6,zero
 400ba68:	0007883a 	mov	r3,zero
 400ba6c:	003f6806 	br	400b810 <__alt_mem_epcs_flash_controller_0+0xfb00a810>
 400ba70:	20009c1e 	bne	r4,zero,400bce4 <__adddf3+0x630>
 400ba74:	80800044 	addi	r2,r16,1
 400ba78:	1141ffcc 	andi	r5,r2,2047
 400ba7c:	01000044 	movi	r4,1
 400ba80:	2140670e 	bge	r4,r5,400bc20 <__adddf3+0x56c>
 400ba84:	0101ffc4 	movi	r4,2047
 400ba88:	11007f26 	beq	r2,r4,400bc88 <__adddf3+0x5d4>
 400ba8c:	898d883a 	add	r6,r17,r6
 400ba90:	4247883a 	add	r3,r8,r9
 400ba94:	3451803a 	cmpltu	r8,r6,r17
 400ba98:	40d1883a 	add	r8,r8,r3
 400ba9c:	402297fa 	slli	r17,r8,31
 400baa0:	300cd07a 	srli	r6,r6,1
 400baa4:	4010d07a 	srli	r8,r8,1
 400baa8:	1021883a 	mov	r16,r2
 400baac:	89a2b03a 	or	r17,r17,r6
 400bab0:	003f1f06 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bab4:	0081ffc4 	movi	r2,2047
 400bab8:	80bf481e 	bne	r16,r2,400b7dc <__alt_mem_epcs_flash_controller_0+0xfb00a7dc>
 400babc:	003f1c06 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bac0:	843ff844 	addi	r16,r16,-31
 400bac4:	01000804 	movi	r4,32
 400bac8:	1406d83a 	srl	r3,r2,r16
 400bacc:	41005026 	beq	r8,r4,400bc10 <__adddf3+0x55c>
 400bad0:	01001004 	movi	r4,64
 400bad4:	2211c83a 	sub	r8,r4,r8
 400bad8:	1204983a 	sll	r2,r2,r8
 400badc:	88a2b03a 	or	r17,r17,r2
 400bae0:	8822c03a 	cmpne	r17,r17,zero
 400bae4:	1c62b03a 	or	r17,r3,r17
 400bae8:	0011883a 	mov	r8,zero
 400baec:	0021883a 	mov	r16,zero
 400baf0:	003f7106 	br	400b8b8 <__alt_mem_epcs_flash_controller_0+0xfb00a8b8>
 400baf4:	193ff804 	addi	r4,r3,-32
 400baf8:	00800804 	movi	r2,32
 400bafc:	4908d83a 	srl	r4,r9,r4
 400bb00:	18804526 	beq	r3,r2,400bc18 <__adddf3+0x564>
 400bb04:	00801004 	movi	r2,64
 400bb08:	10c5c83a 	sub	r2,r2,r3
 400bb0c:	4886983a 	sll	r3,r9,r2
 400bb10:	198cb03a 	or	r6,r3,r6
 400bb14:	300cc03a 	cmpne	r6,r6,zero
 400bb18:	218cb03a 	or	r6,r4,r6
 400bb1c:	0007883a 	mov	r3,zero
 400bb20:	003f3b06 	br	400b810 <__alt_mem_epcs_flash_controller_0+0xfb00a810>
 400bb24:	80002a26 	beq	r16,zero,400bbd0 <__adddf3+0x51c>
 400bb28:	0101ffc4 	movi	r4,2047
 400bb2c:	11006826 	beq	r2,r4,400bcd0 <__adddf3+0x61c>
 400bb30:	00c7c83a 	sub	r3,zero,r3
 400bb34:	42002034 	orhi	r8,r8,128
 400bb38:	01000e04 	movi	r4,56
 400bb3c:	20c07c16 	blt	r4,r3,400bd30 <__adddf3+0x67c>
 400bb40:	010007c4 	movi	r4,31
 400bb44:	20c0da16 	blt	r4,r3,400beb0 <__adddf3+0x7fc>
 400bb48:	01000804 	movi	r4,32
 400bb4c:	20c9c83a 	sub	r4,r4,r3
 400bb50:	4114983a 	sll	r10,r8,r4
 400bb54:	88cad83a 	srl	r5,r17,r3
 400bb58:	8908983a 	sll	r4,r17,r4
 400bb5c:	40c6d83a 	srl	r3,r8,r3
 400bb60:	5162b03a 	or	r17,r10,r5
 400bb64:	2008c03a 	cmpne	r4,r4,zero
 400bb68:	8922b03a 	or	r17,r17,r4
 400bb6c:	3463c83a 	sub	r17,r6,r17
 400bb70:	48c7c83a 	sub	r3,r9,r3
 400bb74:	344d803a 	cmpltu	r6,r6,r17
 400bb78:	1991c83a 	sub	r8,r3,r6
 400bb7c:	1021883a 	mov	r16,r2
 400bb80:	3825883a 	mov	r18,r7
 400bb84:	003f2706 	br	400b824 <__alt_mem_epcs_flash_controller_0+0xfb00a824>
 400bb88:	24d0b03a 	or	r8,r4,r19
 400bb8c:	40001b1e 	bne	r8,zero,400bbfc <__adddf3+0x548>
 400bb90:	0005883a 	mov	r2,zero
 400bb94:	0007883a 	mov	r3,zero
 400bb98:	0021883a 	mov	r16,zero
 400bb9c:	003f4d06 	br	400b8d4 <__alt_mem_epcs_flash_controller_0+0xfb00a8d4>
 400bba0:	008007c4 	movi	r2,31
 400bba4:	11003c16 	blt	r2,r4,400bc98 <__adddf3+0x5e4>
 400bba8:	00800804 	movi	r2,32
 400bbac:	1105c83a 	sub	r2,r2,r4
 400bbb0:	488e983a 	sll	r7,r9,r2
 400bbb4:	310ad83a 	srl	r5,r6,r4
 400bbb8:	3084983a 	sll	r2,r6,r2
 400bbbc:	4912d83a 	srl	r9,r9,r4
 400bbc0:	394ab03a 	or	r5,r7,r5
 400bbc4:	1004c03a 	cmpne	r2,r2,zero
 400bbc8:	288ab03a 	or	r5,r5,r2
 400bbcc:	003f5306 	br	400b91c <__alt_mem_epcs_flash_controller_0+0xfb00a91c>
 400bbd0:	4448b03a 	or	r4,r8,r17
 400bbd4:	20003e26 	beq	r4,zero,400bcd0 <__adddf3+0x61c>
 400bbd8:	00c6303a 	nor	r3,zero,r3
 400bbdc:	18003a1e 	bne	r3,zero,400bcc8 <__adddf3+0x614>
 400bbe0:	3463c83a 	sub	r17,r6,r17
 400bbe4:	4a07c83a 	sub	r3,r9,r8
 400bbe8:	344d803a 	cmpltu	r6,r6,r17
 400bbec:	1991c83a 	sub	r8,r3,r6
 400bbf0:	1021883a 	mov	r16,r2
 400bbf4:	3825883a 	mov	r18,r7
 400bbf8:	003f0a06 	br	400b824 <__alt_mem_epcs_flash_controller_0+0xfb00a824>
 400bbfc:	2023883a 	mov	r17,r4
 400bc00:	003f0d06 	br	400b838 <__alt_mem_epcs_flash_controller_0+0xfb00a838>
 400bc04:	0081ffc4 	movi	r2,2047
 400bc08:	80bf3f1e 	bne	r16,r2,400b908 <__alt_mem_epcs_flash_controller_0+0xfb00a908>
 400bc0c:	003ec806 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bc10:	0005883a 	mov	r2,zero
 400bc14:	003fb106 	br	400badc <__alt_mem_epcs_flash_controller_0+0xfb00aadc>
 400bc18:	0007883a 	mov	r3,zero
 400bc1c:	003fbc06 	br	400bb10 <__alt_mem_epcs_flash_controller_0+0xfb00ab10>
 400bc20:	4444b03a 	or	r2,r8,r17
 400bc24:	8000871e 	bne	r16,zero,400be44 <__adddf3+0x790>
 400bc28:	1000ba26 	beq	r2,zero,400bf14 <__adddf3+0x860>
 400bc2c:	4984b03a 	or	r2,r9,r6
 400bc30:	103ebf26 	beq	r2,zero,400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bc34:	8985883a 	add	r2,r17,r6
 400bc38:	4247883a 	add	r3,r8,r9
 400bc3c:	1451803a 	cmpltu	r8,r2,r17
 400bc40:	40d1883a 	add	r8,r8,r3
 400bc44:	40c0202c 	andhi	r3,r8,128
 400bc48:	1023883a 	mov	r17,r2
 400bc4c:	183f1a26 	beq	r3,zero,400b8b8 <__alt_mem_epcs_flash_controller_0+0xfb00a8b8>
 400bc50:	00bfe034 	movhi	r2,65408
 400bc54:	10bfffc4 	addi	r2,r2,-1
 400bc58:	2021883a 	mov	r16,r4
 400bc5c:	4090703a 	and	r8,r8,r2
 400bc60:	003eb306 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bc64:	4444b03a 	or	r2,r8,r17
 400bc68:	8000291e 	bne	r16,zero,400bd10 <__adddf3+0x65c>
 400bc6c:	10004b1e 	bne	r2,zero,400bd9c <__adddf3+0x6e8>
 400bc70:	4990b03a 	or	r8,r9,r6
 400bc74:	40008b26 	beq	r8,zero,400bea4 <__adddf3+0x7f0>
 400bc78:	4811883a 	mov	r8,r9
 400bc7c:	3023883a 	mov	r17,r6
 400bc80:	3825883a 	mov	r18,r7
 400bc84:	003eaa06 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bc88:	1021883a 	mov	r16,r2
 400bc8c:	0011883a 	mov	r8,zero
 400bc90:	0005883a 	mov	r2,zero
 400bc94:	003f0f06 	br	400b8d4 <__alt_mem_epcs_flash_controller_0+0xfb00a8d4>
 400bc98:	217ff804 	addi	r5,r4,-32
 400bc9c:	00800804 	movi	r2,32
 400bca0:	494ad83a 	srl	r5,r9,r5
 400bca4:	20807d26 	beq	r4,r2,400be9c <__adddf3+0x7e8>
 400bca8:	00801004 	movi	r2,64
 400bcac:	1109c83a 	sub	r4,r2,r4
 400bcb0:	4912983a 	sll	r9,r9,r4
 400bcb4:	498cb03a 	or	r6,r9,r6
 400bcb8:	300cc03a 	cmpne	r6,r6,zero
 400bcbc:	298ab03a 	or	r5,r5,r6
 400bcc0:	0013883a 	mov	r9,zero
 400bcc4:	003f1506 	br	400b91c <__alt_mem_epcs_flash_controller_0+0xfb00a91c>
 400bcc8:	0101ffc4 	movi	r4,2047
 400bccc:	113f9a1e 	bne	r2,r4,400bb38 <__alt_mem_epcs_flash_controller_0+0xfb00ab38>
 400bcd0:	4811883a 	mov	r8,r9
 400bcd4:	3023883a 	mov	r17,r6
 400bcd8:	1021883a 	mov	r16,r2
 400bcdc:	3825883a 	mov	r18,r7
 400bce0:	003e9306 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bce4:	8000161e 	bne	r16,zero,400bd40 <__adddf3+0x68c>
 400bce8:	444ab03a 	or	r5,r8,r17
 400bcec:	28005126 	beq	r5,zero,400be34 <__adddf3+0x780>
 400bcf0:	0108303a 	nor	r4,zero,r4
 400bcf4:	20004d1e 	bne	r4,zero,400be2c <__adddf3+0x778>
 400bcf8:	89a3883a 	add	r17,r17,r6
 400bcfc:	4253883a 	add	r9,r8,r9
 400bd00:	898d803a 	cmpltu	r6,r17,r6
 400bd04:	3251883a 	add	r8,r6,r9
 400bd08:	1021883a 	mov	r16,r2
 400bd0c:	003f0806 	br	400b930 <__alt_mem_epcs_flash_controller_0+0xfb00a930>
 400bd10:	1000301e 	bne	r2,zero,400bdd4 <__adddf3+0x720>
 400bd14:	4984b03a 	or	r2,r9,r6
 400bd18:	10007126 	beq	r2,zero,400bee0 <__adddf3+0x82c>
 400bd1c:	4811883a 	mov	r8,r9
 400bd20:	3023883a 	mov	r17,r6
 400bd24:	3825883a 	mov	r18,r7
 400bd28:	0401ffc4 	movi	r16,2047
 400bd2c:	003e8006 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bd30:	4462b03a 	or	r17,r8,r17
 400bd34:	8822c03a 	cmpne	r17,r17,zero
 400bd38:	0007883a 	mov	r3,zero
 400bd3c:	003f8b06 	br	400bb6c <__alt_mem_epcs_flash_controller_0+0xfb00ab6c>
 400bd40:	0141ffc4 	movi	r5,2047
 400bd44:	11403b26 	beq	r2,r5,400be34 <__adddf3+0x780>
 400bd48:	0109c83a 	sub	r4,zero,r4
 400bd4c:	42002034 	orhi	r8,r8,128
 400bd50:	01400e04 	movi	r5,56
 400bd54:	29006716 	blt	r5,r4,400bef4 <__adddf3+0x840>
 400bd58:	014007c4 	movi	r5,31
 400bd5c:	29007016 	blt	r5,r4,400bf20 <__adddf3+0x86c>
 400bd60:	01400804 	movi	r5,32
 400bd64:	290bc83a 	sub	r5,r5,r4
 400bd68:	4154983a 	sll	r10,r8,r5
 400bd6c:	890ed83a 	srl	r7,r17,r4
 400bd70:	894a983a 	sll	r5,r17,r5
 400bd74:	4108d83a 	srl	r4,r8,r4
 400bd78:	51e2b03a 	or	r17,r10,r7
 400bd7c:	280ac03a 	cmpne	r5,r5,zero
 400bd80:	8962b03a 	or	r17,r17,r5
 400bd84:	89a3883a 	add	r17,r17,r6
 400bd88:	2253883a 	add	r9,r4,r9
 400bd8c:	898d803a 	cmpltu	r6,r17,r6
 400bd90:	3251883a 	add	r8,r6,r9
 400bd94:	1021883a 	mov	r16,r2
 400bd98:	003ee506 	br	400b930 <__alt_mem_epcs_flash_controller_0+0xfb00a930>
 400bd9c:	4984b03a 	or	r2,r9,r6
 400bda0:	103e6326 	beq	r2,zero,400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bda4:	8987c83a 	sub	r3,r17,r6
 400bda8:	88c9803a 	cmpltu	r4,r17,r3
 400bdac:	4245c83a 	sub	r2,r8,r9
 400bdb0:	1105c83a 	sub	r2,r2,r4
 400bdb4:	1100202c 	andhi	r4,r2,128
 400bdb8:	203ebb26 	beq	r4,zero,400b8a8 <__alt_mem_epcs_flash_controller_0+0xfb00a8a8>
 400bdbc:	3463c83a 	sub	r17,r6,r17
 400bdc0:	4a07c83a 	sub	r3,r9,r8
 400bdc4:	344d803a 	cmpltu	r6,r6,r17
 400bdc8:	1991c83a 	sub	r8,r3,r6
 400bdcc:	3825883a 	mov	r18,r7
 400bdd0:	003e5706 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bdd4:	4984b03a 	or	r2,r9,r6
 400bdd8:	10002e26 	beq	r2,zero,400be94 <__adddf3+0x7e0>
 400bddc:	4004d0fa 	srli	r2,r8,3
 400bde0:	8822d0fa 	srli	r17,r17,3
 400bde4:	4010977a 	slli	r8,r8,29
 400bde8:	10c0022c 	andhi	r3,r2,8
 400bdec:	4462b03a 	or	r17,r8,r17
 400bdf0:	18000826 	beq	r3,zero,400be14 <__adddf3+0x760>
 400bdf4:	4808d0fa 	srli	r4,r9,3
 400bdf8:	20c0022c 	andhi	r3,r4,8
 400bdfc:	1800051e 	bne	r3,zero,400be14 <__adddf3+0x760>
 400be00:	300cd0fa 	srli	r6,r6,3
 400be04:	4806977a 	slli	r3,r9,29
 400be08:	2005883a 	mov	r2,r4
 400be0c:	3825883a 	mov	r18,r7
 400be10:	19a2b03a 	or	r17,r3,r6
 400be14:	8810d77a 	srli	r8,r17,29
 400be18:	100490fa 	slli	r2,r2,3
 400be1c:	882290fa 	slli	r17,r17,3
 400be20:	0401ffc4 	movi	r16,2047
 400be24:	4090b03a 	or	r8,r8,r2
 400be28:	003e4106 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400be2c:	0141ffc4 	movi	r5,2047
 400be30:	117fc71e 	bne	r2,r5,400bd50 <__alt_mem_epcs_flash_controller_0+0xfb00ad50>
 400be34:	4811883a 	mov	r8,r9
 400be38:	3023883a 	mov	r17,r6
 400be3c:	1021883a 	mov	r16,r2
 400be40:	003e3b06 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400be44:	10002f26 	beq	r2,zero,400bf04 <__adddf3+0x850>
 400be48:	4984b03a 	or	r2,r9,r6
 400be4c:	10001126 	beq	r2,zero,400be94 <__adddf3+0x7e0>
 400be50:	4004d0fa 	srli	r2,r8,3
 400be54:	8822d0fa 	srli	r17,r17,3
 400be58:	4010977a 	slli	r8,r8,29
 400be5c:	10c0022c 	andhi	r3,r2,8
 400be60:	4462b03a 	or	r17,r8,r17
 400be64:	183feb26 	beq	r3,zero,400be14 <__alt_mem_epcs_flash_controller_0+0xfb00ae14>
 400be68:	4808d0fa 	srli	r4,r9,3
 400be6c:	20c0022c 	andhi	r3,r4,8
 400be70:	183fe81e 	bne	r3,zero,400be14 <__alt_mem_epcs_flash_controller_0+0xfb00ae14>
 400be74:	300cd0fa 	srli	r6,r6,3
 400be78:	4806977a 	slli	r3,r9,29
 400be7c:	2005883a 	mov	r2,r4
 400be80:	19a2b03a 	or	r17,r3,r6
 400be84:	003fe306 	br	400be14 <__alt_mem_epcs_flash_controller_0+0xfb00ae14>
 400be88:	0011883a 	mov	r8,zero
 400be8c:	0005883a 	mov	r2,zero
 400be90:	003e3f06 	br	400b790 <__alt_mem_epcs_flash_controller_0+0xfb00a790>
 400be94:	0401ffc4 	movi	r16,2047
 400be98:	003e2506 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400be9c:	0013883a 	mov	r9,zero
 400bea0:	003f8406 	br	400bcb4 <__alt_mem_epcs_flash_controller_0+0xfb00acb4>
 400bea4:	0005883a 	mov	r2,zero
 400bea8:	0007883a 	mov	r3,zero
 400beac:	003e8906 	br	400b8d4 <__alt_mem_epcs_flash_controller_0+0xfb00a8d4>
 400beb0:	197ff804 	addi	r5,r3,-32
 400beb4:	01000804 	movi	r4,32
 400beb8:	414ad83a 	srl	r5,r8,r5
 400bebc:	19002426 	beq	r3,r4,400bf50 <__adddf3+0x89c>
 400bec0:	01001004 	movi	r4,64
 400bec4:	20c7c83a 	sub	r3,r4,r3
 400bec8:	40c6983a 	sll	r3,r8,r3
 400becc:	1c46b03a 	or	r3,r3,r17
 400bed0:	1806c03a 	cmpne	r3,r3,zero
 400bed4:	28e2b03a 	or	r17,r5,r3
 400bed8:	0007883a 	mov	r3,zero
 400bedc:	003f2306 	br	400bb6c <__alt_mem_epcs_flash_controller_0+0xfb00ab6c>
 400bee0:	0007883a 	mov	r3,zero
 400bee4:	5811883a 	mov	r8,r11
 400bee8:	00bfffc4 	movi	r2,-1
 400beec:	0401ffc4 	movi	r16,2047
 400bef0:	003e7806 	br	400b8d4 <__alt_mem_epcs_flash_controller_0+0xfb00a8d4>
 400bef4:	4462b03a 	or	r17,r8,r17
 400bef8:	8822c03a 	cmpne	r17,r17,zero
 400befc:	0009883a 	mov	r4,zero
 400bf00:	003fa006 	br	400bd84 <__alt_mem_epcs_flash_controller_0+0xfb00ad84>
 400bf04:	4811883a 	mov	r8,r9
 400bf08:	3023883a 	mov	r17,r6
 400bf0c:	0401ffc4 	movi	r16,2047
 400bf10:	003e0706 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bf14:	4811883a 	mov	r8,r9
 400bf18:	3023883a 	mov	r17,r6
 400bf1c:	003e0406 	br	400b730 <__alt_mem_epcs_flash_controller_0+0xfb00a730>
 400bf20:	21fff804 	addi	r7,r4,-32
 400bf24:	01400804 	movi	r5,32
 400bf28:	41ced83a 	srl	r7,r8,r7
 400bf2c:	21400a26 	beq	r4,r5,400bf58 <__adddf3+0x8a4>
 400bf30:	01401004 	movi	r5,64
 400bf34:	2909c83a 	sub	r4,r5,r4
 400bf38:	4108983a 	sll	r4,r8,r4
 400bf3c:	2448b03a 	or	r4,r4,r17
 400bf40:	2008c03a 	cmpne	r4,r4,zero
 400bf44:	3922b03a 	or	r17,r7,r4
 400bf48:	0009883a 	mov	r4,zero
 400bf4c:	003f8d06 	br	400bd84 <__alt_mem_epcs_flash_controller_0+0xfb00ad84>
 400bf50:	0007883a 	mov	r3,zero
 400bf54:	003fdd06 	br	400becc <__alt_mem_epcs_flash_controller_0+0xfb00aecc>
 400bf58:	0009883a 	mov	r4,zero
 400bf5c:	003ff706 	br	400bf3c <__alt_mem_epcs_flash_controller_0+0xfb00af3c>

0400bf60 <__divdf3>:
 400bf60:	defff204 	addi	sp,sp,-56
 400bf64:	dd400915 	stw	r21,36(sp)
 400bf68:	282ad53a 	srli	r21,r5,20
 400bf6c:	dd000815 	stw	r20,32(sp)
 400bf70:	2828d7fa 	srli	r20,r5,31
 400bf74:	dc000415 	stw	r16,16(sp)
 400bf78:	04000434 	movhi	r16,16
 400bf7c:	df000c15 	stw	fp,48(sp)
 400bf80:	843fffc4 	addi	r16,r16,-1
 400bf84:	dfc00d15 	stw	ra,52(sp)
 400bf88:	ddc00b15 	stw	r23,44(sp)
 400bf8c:	dd800a15 	stw	r22,40(sp)
 400bf90:	dcc00715 	stw	r19,28(sp)
 400bf94:	dc800615 	stw	r18,24(sp)
 400bf98:	dc400515 	stw	r17,20(sp)
 400bf9c:	ad41ffcc 	andi	r21,r21,2047
 400bfa0:	2c20703a 	and	r16,r5,r16
 400bfa4:	a7003fcc 	andi	fp,r20,255
 400bfa8:	a8006126 	beq	r21,zero,400c130 <__divdf3+0x1d0>
 400bfac:	0081ffc4 	movi	r2,2047
 400bfb0:	2025883a 	mov	r18,r4
 400bfb4:	a8803726 	beq	r21,r2,400c094 <__divdf3+0x134>
 400bfb8:	80800434 	orhi	r2,r16,16
 400bfbc:	100490fa 	slli	r2,r2,3
 400bfc0:	2020d77a 	srli	r16,r4,29
 400bfc4:	202490fa 	slli	r18,r4,3
 400bfc8:	ad7f0044 	addi	r21,r21,-1023
 400bfcc:	80a0b03a 	or	r16,r16,r2
 400bfd0:	0027883a 	mov	r19,zero
 400bfd4:	0013883a 	mov	r9,zero
 400bfd8:	3804d53a 	srli	r2,r7,20
 400bfdc:	382cd7fa 	srli	r22,r7,31
 400bfe0:	04400434 	movhi	r17,16
 400bfe4:	8c7fffc4 	addi	r17,r17,-1
 400bfe8:	1081ffcc 	andi	r2,r2,2047
 400bfec:	3011883a 	mov	r8,r6
 400bff0:	3c62703a 	and	r17,r7,r17
 400bff4:	b5c03fcc 	andi	r23,r22,255
 400bff8:	10006c26 	beq	r2,zero,400c1ac <__divdf3+0x24c>
 400bffc:	00c1ffc4 	movi	r3,2047
 400c000:	10c06426 	beq	r2,r3,400c194 <__divdf3+0x234>
 400c004:	88c00434 	orhi	r3,r17,16
 400c008:	180690fa 	slli	r3,r3,3
 400c00c:	3022d77a 	srli	r17,r6,29
 400c010:	301090fa 	slli	r8,r6,3
 400c014:	10bf0044 	addi	r2,r2,-1023
 400c018:	88e2b03a 	or	r17,r17,r3
 400c01c:	000f883a 	mov	r7,zero
 400c020:	a58cf03a 	xor	r6,r20,r22
 400c024:	3cc8b03a 	or	r4,r7,r19
 400c028:	a8abc83a 	sub	r21,r21,r2
 400c02c:	008003c4 	movi	r2,15
 400c030:	3007883a 	mov	r3,r6
 400c034:	34c03fcc 	andi	r19,r6,255
 400c038:	11009036 	bltu	r2,r4,400c27c <__divdf3+0x31c>
 400c03c:	200890ba 	slli	r4,r4,2
 400c040:	00810074 	movhi	r2,1025
 400c044:	10b01504 	addi	r2,r2,-16300
 400c048:	2089883a 	add	r4,r4,r2
 400c04c:	20800017 	ldw	r2,0(r4)
 400c050:	1000683a 	jmp	r2
 400c054:	0400c27c 	xorhi	r16,zero,777
 400c058:	0400c0cc 	andi	r16,zero,771
 400c05c:	0400c26c 	andhi	r16,zero,777
 400c060:	0400c0c0 	call	400c0c <__alt_mem_sdram-0x3bff3f4>
 400c064:	0400c26c 	andhi	r16,zero,777
 400c068:	0400c240 	call	400c24 <__alt_mem_sdram-0x3bff3dc>
 400c06c:	0400c26c 	andhi	r16,zero,777
 400c070:	0400c0c0 	call	400c0c <__alt_mem_sdram-0x3bff3f4>
 400c074:	0400c0cc 	andi	r16,zero,771
 400c078:	0400c0cc 	andi	r16,zero,771
 400c07c:	0400c240 	call	400c24 <__alt_mem_sdram-0x3bff3dc>
 400c080:	0400c0c0 	call	400c0c <__alt_mem_sdram-0x3bff3f4>
 400c084:	0400c0b0 	cmpltui	r16,zero,770
 400c088:	0400c0b0 	cmpltui	r16,zero,770
 400c08c:	0400c0b0 	cmpltui	r16,zero,770
 400c090:	0400c560 	cmpeqi	r16,zero,789
 400c094:	2404b03a 	or	r2,r4,r16
 400c098:	1000661e 	bne	r2,zero,400c234 <__divdf3+0x2d4>
 400c09c:	04c00204 	movi	r19,8
 400c0a0:	0021883a 	mov	r16,zero
 400c0a4:	0025883a 	mov	r18,zero
 400c0a8:	02400084 	movi	r9,2
 400c0ac:	003fca06 	br	400bfd8 <__alt_mem_epcs_flash_controller_0+0xfb00afd8>
 400c0b0:	8023883a 	mov	r17,r16
 400c0b4:	9011883a 	mov	r8,r18
 400c0b8:	e02f883a 	mov	r23,fp
 400c0bc:	480f883a 	mov	r7,r9
 400c0c0:	00800084 	movi	r2,2
 400c0c4:	3881311e 	bne	r7,r2,400c58c <__divdf3+0x62c>
 400c0c8:	b827883a 	mov	r19,r23
 400c0cc:	98c0004c 	andi	r3,r19,1
 400c0d0:	0081ffc4 	movi	r2,2047
 400c0d4:	000b883a 	mov	r5,zero
 400c0d8:	0025883a 	mov	r18,zero
 400c0dc:	1004953a 	slli	r2,r2,20
 400c0e0:	18c03fcc 	andi	r3,r3,255
 400c0e4:	04400434 	movhi	r17,16
 400c0e8:	8c7fffc4 	addi	r17,r17,-1
 400c0ec:	180697fa 	slli	r3,r3,31
 400c0f0:	2c4a703a 	and	r5,r5,r17
 400c0f4:	288ab03a 	or	r5,r5,r2
 400c0f8:	28c6b03a 	or	r3,r5,r3
 400c0fc:	9005883a 	mov	r2,r18
 400c100:	dfc00d17 	ldw	ra,52(sp)
 400c104:	df000c17 	ldw	fp,48(sp)
 400c108:	ddc00b17 	ldw	r23,44(sp)
 400c10c:	dd800a17 	ldw	r22,40(sp)
 400c110:	dd400917 	ldw	r21,36(sp)
 400c114:	dd000817 	ldw	r20,32(sp)
 400c118:	dcc00717 	ldw	r19,28(sp)
 400c11c:	dc800617 	ldw	r18,24(sp)
 400c120:	dc400517 	ldw	r17,20(sp)
 400c124:	dc000417 	ldw	r16,16(sp)
 400c128:	dec00e04 	addi	sp,sp,56
 400c12c:	f800283a 	ret
 400c130:	2404b03a 	or	r2,r4,r16
 400c134:	2027883a 	mov	r19,r4
 400c138:	10003926 	beq	r2,zero,400c220 <__divdf3+0x2c0>
 400c13c:	80012e26 	beq	r16,zero,400c5f8 <__divdf3+0x698>
 400c140:	8009883a 	mov	r4,r16
 400c144:	d9800315 	stw	r6,12(sp)
 400c148:	d9c00215 	stw	r7,8(sp)
 400c14c:	400de400 	call	400de40 <__clzsi2>
 400c150:	d9800317 	ldw	r6,12(sp)
 400c154:	d9c00217 	ldw	r7,8(sp)
 400c158:	113ffd44 	addi	r4,r2,-11
 400c15c:	00c00704 	movi	r3,28
 400c160:	19012116 	blt	r3,r4,400c5e8 <__divdf3+0x688>
 400c164:	00c00744 	movi	r3,29
 400c168:	147ffe04 	addi	r17,r2,-8
 400c16c:	1907c83a 	sub	r3,r3,r4
 400c170:	8460983a 	sll	r16,r16,r17
 400c174:	98c6d83a 	srl	r3,r19,r3
 400c178:	9c64983a 	sll	r18,r19,r17
 400c17c:	1c20b03a 	or	r16,r3,r16
 400c180:	1080fcc4 	addi	r2,r2,1011
 400c184:	00abc83a 	sub	r21,zero,r2
 400c188:	0027883a 	mov	r19,zero
 400c18c:	0013883a 	mov	r9,zero
 400c190:	003f9106 	br	400bfd8 <__alt_mem_epcs_flash_controller_0+0xfb00afd8>
 400c194:	3446b03a 	or	r3,r6,r17
 400c198:	18001f1e 	bne	r3,zero,400c218 <__divdf3+0x2b8>
 400c19c:	0023883a 	mov	r17,zero
 400c1a0:	0011883a 	mov	r8,zero
 400c1a4:	01c00084 	movi	r7,2
 400c1a8:	003f9d06 	br	400c020 <__alt_mem_epcs_flash_controller_0+0xfb00b020>
 400c1ac:	3446b03a 	or	r3,r6,r17
 400c1b0:	18001526 	beq	r3,zero,400c208 <__divdf3+0x2a8>
 400c1b4:	88011b26 	beq	r17,zero,400c624 <__divdf3+0x6c4>
 400c1b8:	8809883a 	mov	r4,r17
 400c1bc:	d9800315 	stw	r6,12(sp)
 400c1c0:	da400115 	stw	r9,4(sp)
 400c1c4:	400de400 	call	400de40 <__clzsi2>
 400c1c8:	d9800317 	ldw	r6,12(sp)
 400c1cc:	da400117 	ldw	r9,4(sp)
 400c1d0:	113ffd44 	addi	r4,r2,-11
 400c1d4:	00c00704 	movi	r3,28
 400c1d8:	19010e16 	blt	r3,r4,400c614 <__divdf3+0x6b4>
 400c1dc:	00c00744 	movi	r3,29
 400c1e0:	123ffe04 	addi	r8,r2,-8
 400c1e4:	1907c83a 	sub	r3,r3,r4
 400c1e8:	8a22983a 	sll	r17,r17,r8
 400c1ec:	30c6d83a 	srl	r3,r6,r3
 400c1f0:	3210983a 	sll	r8,r6,r8
 400c1f4:	1c62b03a 	or	r17,r3,r17
 400c1f8:	1080fcc4 	addi	r2,r2,1011
 400c1fc:	0085c83a 	sub	r2,zero,r2
 400c200:	000f883a 	mov	r7,zero
 400c204:	003f8606 	br	400c020 <__alt_mem_epcs_flash_controller_0+0xfb00b020>
 400c208:	0023883a 	mov	r17,zero
 400c20c:	0011883a 	mov	r8,zero
 400c210:	01c00044 	movi	r7,1
 400c214:	003f8206 	br	400c020 <__alt_mem_epcs_flash_controller_0+0xfb00b020>
 400c218:	01c000c4 	movi	r7,3
 400c21c:	003f8006 	br	400c020 <__alt_mem_epcs_flash_controller_0+0xfb00b020>
 400c220:	04c00104 	movi	r19,4
 400c224:	0021883a 	mov	r16,zero
 400c228:	0025883a 	mov	r18,zero
 400c22c:	02400044 	movi	r9,1
 400c230:	003f6906 	br	400bfd8 <__alt_mem_epcs_flash_controller_0+0xfb00afd8>
 400c234:	04c00304 	movi	r19,12
 400c238:	024000c4 	movi	r9,3
 400c23c:	003f6606 	br	400bfd8 <__alt_mem_epcs_flash_controller_0+0xfb00afd8>
 400c240:	01400434 	movhi	r5,16
 400c244:	0007883a 	mov	r3,zero
 400c248:	297fffc4 	addi	r5,r5,-1
 400c24c:	04bfffc4 	movi	r18,-1
 400c250:	0081ffc4 	movi	r2,2047
 400c254:	003fa106 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c258:	00c00044 	movi	r3,1
 400c25c:	1887c83a 	sub	r3,r3,r2
 400c260:	01000e04 	movi	r4,56
 400c264:	20c1210e 	bge	r4,r3,400c6ec <__divdf3+0x78c>
 400c268:	98c0004c 	andi	r3,r19,1
 400c26c:	0005883a 	mov	r2,zero
 400c270:	000b883a 	mov	r5,zero
 400c274:	0025883a 	mov	r18,zero
 400c278:	003f9806 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c27c:	8c00fd36 	bltu	r17,r16,400c674 <__divdf3+0x714>
 400c280:	8440fb26 	beq	r16,r17,400c670 <__divdf3+0x710>
 400c284:	8007883a 	mov	r3,r16
 400c288:	ad7fffc4 	addi	r21,r21,-1
 400c28c:	0021883a 	mov	r16,zero
 400c290:	4004d63a 	srli	r2,r8,24
 400c294:	8822923a 	slli	r17,r17,8
 400c298:	1809883a 	mov	r4,r3
 400c29c:	402c923a 	slli	r22,r8,8
 400c2a0:	88b8b03a 	or	fp,r17,r2
 400c2a4:	e028d43a 	srli	r20,fp,16
 400c2a8:	d8c00015 	stw	r3,0(sp)
 400c2ac:	e5ffffcc 	andi	r23,fp,65535
 400c2b0:	a00b883a 	mov	r5,r20
 400c2b4:	400a1140 	call	400a114 <__udivsi3>
 400c2b8:	d8c00017 	ldw	r3,0(sp)
 400c2bc:	a00b883a 	mov	r5,r20
 400c2c0:	d8800315 	stw	r2,12(sp)
 400c2c4:	1809883a 	mov	r4,r3
 400c2c8:	400a1780 	call	400a178 <__umodsi3>
 400c2cc:	d9800317 	ldw	r6,12(sp)
 400c2d0:	1006943a 	slli	r3,r2,16
 400c2d4:	9004d43a 	srli	r2,r18,16
 400c2d8:	b9a3383a 	mul	r17,r23,r6
 400c2dc:	10c4b03a 	or	r2,r2,r3
 400c2e0:	1440062e 	bgeu	r2,r17,400c2fc <__divdf3+0x39c>
 400c2e4:	1705883a 	add	r2,r2,fp
 400c2e8:	30ffffc4 	addi	r3,r6,-1
 400c2ec:	1700ee36 	bltu	r2,fp,400c6a8 <__divdf3+0x748>
 400c2f0:	1440ed2e 	bgeu	r2,r17,400c6a8 <__divdf3+0x748>
 400c2f4:	31bfff84 	addi	r6,r6,-2
 400c2f8:	1705883a 	add	r2,r2,fp
 400c2fc:	1463c83a 	sub	r17,r2,r17
 400c300:	a00b883a 	mov	r5,r20
 400c304:	8809883a 	mov	r4,r17
 400c308:	d9800315 	stw	r6,12(sp)
 400c30c:	400a1140 	call	400a114 <__udivsi3>
 400c310:	a00b883a 	mov	r5,r20
 400c314:	8809883a 	mov	r4,r17
 400c318:	d8800215 	stw	r2,8(sp)
 400c31c:	400a1780 	call	400a178 <__umodsi3>
 400c320:	d9c00217 	ldw	r7,8(sp)
 400c324:	1004943a 	slli	r2,r2,16
 400c328:	94bfffcc 	andi	r18,r18,65535
 400c32c:	b9d1383a 	mul	r8,r23,r7
 400c330:	90a4b03a 	or	r18,r18,r2
 400c334:	d9800317 	ldw	r6,12(sp)
 400c338:	9200062e 	bgeu	r18,r8,400c354 <__divdf3+0x3f4>
 400c33c:	9725883a 	add	r18,r18,fp
 400c340:	38bfffc4 	addi	r2,r7,-1
 400c344:	9700d636 	bltu	r18,fp,400c6a0 <__divdf3+0x740>
 400c348:	9200d52e 	bgeu	r18,r8,400c6a0 <__divdf3+0x740>
 400c34c:	39ffff84 	addi	r7,r7,-2
 400c350:	9725883a 	add	r18,r18,fp
 400c354:	3004943a 	slli	r2,r6,16
 400c358:	b012d43a 	srli	r9,r22,16
 400c35c:	b1bfffcc 	andi	r6,r22,65535
 400c360:	11e2b03a 	or	r17,r2,r7
 400c364:	8806d43a 	srli	r3,r17,16
 400c368:	893fffcc 	andi	r4,r17,65535
 400c36c:	218b383a 	mul	r5,r4,r6
 400c370:	30c5383a 	mul	r2,r6,r3
 400c374:	2249383a 	mul	r4,r4,r9
 400c378:	280ed43a 	srli	r7,r5,16
 400c37c:	9225c83a 	sub	r18,r18,r8
 400c380:	2089883a 	add	r4,r4,r2
 400c384:	3909883a 	add	r4,r7,r4
 400c388:	1a47383a 	mul	r3,r3,r9
 400c38c:	2080022e 	bgeu	r4,r2,400c398 <__divdf3+0x438>
 400c390:	00800074 	movhi	r2,1
 400c394:	1887883a 	add	r3,r3,r2
 400c398:	2004d43a 	srli	r2,r4,16
 400c39c:	2008943a 	slli	r4,r4,16
 400c3a0:	297fffcc 	andi	r5,r5,65535
 400c3a4:	10c7883a 	add	r3,r2,r3
 400c3a8:	2149883a 	add	r4,r4,r5
 400c3ac:	90c0a536 	bltu	r18,r3,400c644 <__divdf3+0x6e4>
 400c3b0:	90c0bf26 	beq	r18,r3,400c6b0 <__divdf3+0x750>
 400c3b4:	90c7c83a 	sub	r3,r18,r3
 400c3b8:	810fc83a 	sub	r7,r16,r4
 400c3bc:	81e5803a 	cmpltu	r18,r16,r7
 400c3c0:	1ca5c83a 	sub	r18,r3,r18
 400c3c4:	e480c126 	beq	fp,r18,400c6cc <__divdf3+0x76c>
 400c3c8:	a00b883a 	mov	r5,r20
 400c3cc:	9009883a 	mov	r4,r18
 400c3d0:	d9800315 	stw	r6,12(sp)
 400c3d4:	d9c00215 	stw	r7,8(sp)
 400c3d8:	da400115 	stw	r9,4(sp)
 400c3dc:	400a1140 	call	400a114 <__udivsi3>
 400c3e0:	a00b883a 	mov	r5,r20
 400c3e4:	9009883a 	mov	r4,r18
 400c3e8:	d8800015 	stw	r2,0(sp)
 400c3ec:	400a1780 	call	400a178 <__umodsi3>
 400c3f0:	d9c00217 	ldw	r7,8(sp)
 400c3f4:	da000017 	ldw	r8,0(sp)
 400c3f8:	1006943a 	slli	r3,r2,16
 400c3fc:	3804d43a 	srli	r2,r7,16
 400c400:	ba21383a 	mul	r16,r23,r8
 400c404:	d9800317 	ldw	r6,12(sp)
 400c408:	10c4b03a 	or	r2,r2,r3
 400c40c:	da400117 	ldw	r9,4(sp)
 400c410:	1400062e 	bgeu	r2,r16,400c42c <__divdf3+0x4cc>
 400c414:	1705883a 	add	r2,r2,fp
 400c418:	40ffffc4 	addi	r3,r8,-1
 400c41c:	1700ad36 	bltu	r2,fp,400c6d4 <__divdf3+0x774>
 400c420:	1400ac2e 	bgeu	r2,r16,400c6d4 <__divdf3+0x774>
 400c424:	423fff84 	addi	r8,r8,-2
 400c428:	1705883a 	add	r2,r2,fp
 400c42c:	1421c83a 	sub	r16,r2,r16
 400c430:	a00b883a 	mov	r5,r20
 400c434:	8009883a 	mov	r4,r16
 400c438:	d9800315 	stw	r6,12(sp)
 400c43c:	d9c00215 	stw	r7,8(sp)
 400c440:	da000015 	stw	r8,0(sp)
 400c444:	da400115 	stw	r9,4(sp)
 400c448:	400a1140 	call	400a114 <__udivsi3>
 400c44c:	8009883a 	mov	r4,r16
 400c450:	a00b883a 	mov	r5,r20
 400c454:	1025883a 	mov	r18,r2
 400c458:	400a1780 	call	400a178 <__umodsi3>
 400c45c:	d9c00217 	ldw	r7,8(sp)
 400c460:	1004943a 	slli	r2,r2,16
 400c464:	bcaf383a 	mul	r23,r23,r18
 400c468:	393fffcc 	andi	r4,r7,65535
 400c46c:	2088b03a 	or	r4,r4,r2
 400c470:	d9800317 	ldw	r6,12(sp)
 400c474:	da000017 	ldw	r8,0(sp)
 400c478:	da400117 	ldw	r9,4(sp)
 400c47c:	25c0062e 	bgeu	r4,r23,400c498 <__divdf3+0x538>
 400c480:	2709883a 	add	r4,r4,fp
 400c484:	90bfffc4 	addi	r2,r18,-1
 400c488:	27009436 	bltu	r4,fp,400c6dc <__divdf3+0x77c>
 400c48c:	25c0932e 	bgeu	r4,r23,400c6dc <__divdf3+0x77c>
 400c490:	94bfff84 	addi	r18,r18,-2
 400c494:	2709883a 	add	r4,r4,fp
 400c498:	4004943a 	slli	r2,r8,16
 400c49c:	25efc83a 	sub	r23,r4,r23
 400c4a0:	1490b03a 	or	r8,r2,r18
 400c4a4:	4008d43a 	srli	r4,r8,16
 400c4a8:	40ffffcc 	andi	r3,r8,65535
 400c4ac:	30c5383a 	mul	r2,r6,r3
 400c4b0:	1a47383a 	mul	r3,r3,r9
 400c4b4:	310d383a 	mul	r6,r6,r4
 400c4b8:	100ad43a 	srli	r5,r2,16
 400c4bc:	4913383a 	mul	r9,r9,r4
 400c4c0:	1987883a 	add	r3,r3,r6
 400c4c4:	28c7883a 	add	r3,r5,r3
 400c4c8:	1980022e 	bgeu	r3,r6,400c4d4 <__divdf3+0x574>
 400c4cc:	01000074 	movhi	r4,1
 400c4d0:	4913883a 	add	r9,r9,r4
 400c4d4:	1808d43a 	srli	r4,r3,16
 400c4d8:	1806943a 	slli	r3,r3,16
 400c4dc:	10bfffcc 	andi	r2,r2,65535
 400c4e0:	2253883a 	add	r9,r4,r9
 400c4e4:	1887883a 	add	r3,r3,r2
 400c4e8:	ba403836 	bltu	r23,r9,400c5cc <__divdf3+0x66c>
 400c4ec:	ba403626 	beq	r23,r9,400c5c8 <__divdf3+0x668>
 400c4f0:	42000054 	ori	r8,r8,1
 400c4f4:	a880ffc4 	addi	r2,r21,1023
 400c4f8:	00bf570e 	bge	zero,r2,400c258 <__alt_mem_epcs_flash_controller_0+0xfb00b258>
 400c4fc:	40c001cc 	andi	r3,r8,7
 400c500:	18000726 	beq	r3,zero,400c520 <__divdf3+0x5c0>
 400c504:	40c003cc 	andi	r3,r8,15
 400c508:	01000104 	movi	r4,4
 400c50c:	19000426 	beq	r3,r4,400c520 <__divdf3+0x5c0>
 400c510:	4107883a 	add	r3,r8,r4
 400c514:	1a11803a 	cmpltu	r8,r3,r8
 400c518:	8a23883a 	add	r17,r17,r8
 400c51c:	1811883a 	mov	r8,r3
 400c520:	88c0402c 	andhi	r3,r17,256
 400c524:	18000426 	beq	r3,zero,400c538 <__divdf3+0x5d8>
 400c528:	00ffc034 	movhi	r3,65280
 400c52c:	18ffffc4 	addi	r3,r3,-1
 400c530:	a8810004 	addi	r2,r21,1024
 400c534:	88e2703a 	and	r17,r17,r3
 400c538:	00c1ff84 	movi	r3,2046
 400c53c:	18bee316 	blt	r3,r2,400c0cc <__alt_mem_epcs_flash_controller_0+0xfb00b0cc>
 400c540:	8824977a 	slli	r18,r17,29
 400c544:	4010d0fa 	srli	r8,r8,3
 400c548:	8822927a 	slli	r17,r17,9
 400c54c:	1081ffcc 	andi	r2,r2,2047
 400c550:	9224b03a 	or	r18,r18,r8
 400c554:	880ad33a 	srli	r5,r17,12
 400c558:	98c0004c 	andi	r3,r19,1
 400c55c:	003edf06 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c560:	8080022c 	andhi	r2,r16,8
 400c564:	10001226 	beq	r2,zero,400c5b0 <__divdf3+0x650>
 400c568:	8880022c 	andhi	r2,r17,8
 400c56c:	1000101e 	bne	r2,zero,400c5b0 <__divdf3+0x650>
 400c570:	00800434 	movhi	r2,16
 400c574:	89400234 	orhi	r5,r17,8
 400c578:	10bfffc4 	addi	r2,r2,-1
 400c57c:	b007883a 	mov	r3,r22
 400c580:	288a703a 	and	r5,r5,r2
 400c584:	4025883a 	mov	r18,r8
 400c588:	003f3106 	br	400c250 <__alt_mem_epcs_flash_controller_0+0xfb00b250>
 400c58c:	008000c4 	movi	r2,3
 400c590:	3880a626 	beq	r7,r2,400c82c <__divdf3+0x8cc>
 400c594:	00800044 	movi	r2,1
 400c598:	3880521e 	bne	r7,r2,400c6e4 <__divdf3+0x784>
 400c59c:	b807883a 	mov	r3,r23
 400c5a0:	0005883a 	mov	r2,zero
 400c5a4:	000b883a 	mov	r5,zero
 400c5a8:	0025883a 	mov	r18,zero
 400c5ac:	003ecb06 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c5b0:	00800434 	movhi	r2,16
 400c5b4:	81400234 	orhi	r5,r16,8
 400c5b8:	10bfffc4 	addi	r2,r2,-1
 400c5bc:	a007883a 	mov	r3,r20
 400c5c0:	288a703a 	and	r5,r5,r2
 400c5c4:	003f2206 	br	400c250 <__alt_mem_epcs_flash_controller_0+0xfb00b250>
 400c5c8:	183fca26 	beq	r3,zero,400c4f4 <__alt_mem_epcs_flash_controller_0+0xfb00b4f4>
 400c5cc:	e5ef883a 	add	r23,fp,r23
 400c5d0:	40bfffc4 	addi	r2,r8,-1
 400c5d4:	bf00392e 	bgeu	r23,fp,400c6bc <__divdf3+0x75c>
 400c5d8:	1011883a 	mov	r8,r2
 400c5dc:	ba7fc41e 	bne	r23,r9,400c4f0 <__alt_mem_epcs_flash_controller_0+0xfb00b4f0>
 400c5e0:	b0ffc31e 	bne	r22,r3,400c4f0 <__alt_mem_epcs_flash_controller_0+0xfb00b4f0>
 400c5e4:	003fc306 	br	400c4f4 <__alt_mem_epcs_flash_controller_0+0xfb00b4f4>
 400c5e8:	143ff604 	addi	r16,r2,-40
 400c5ec:	9c20983a 	sll	r16,r19,r16
 400c5f0:	0025883a 	mov	r18,zero
 400c5f4:	003ee206 	br	400c180 <__alt_mem_epcs_flash_controller_0+0xfb00b180>
 400c5f8:	d9800315 	stw	r6,12(sp)
 400c5fc:	d9c00215 	stw	r7,8(sp)
 400c600:	400de400 	call	400de40 <__clzsi2>
 400c604:	10800804 	addi	r2,r2,32
 400c608:	d9c00217 	ldw	r7,8(sp)
 400c60c:	d9800317 	ldw	r6,12(sp)
 400c610:	003ed106 	br	400c158 <__alt_mem_epcs_flash_controller_0+0xfb00b158>
 400c614:	147ff604 	addi	r17,r2,-40
 400c618:	3462983a 	sll	r17,r6,r17
 400c61c:	0011883a 	mov	r8,zero
 400c620:	003ef506 	br	400c1f8 <__alt_mem_epcs_flash_controller_0+0xfb00b1f8>
 400c624:	3009883a 	mov	r4,r6
 400c628:	d9800315 	stw	r6,12(sp)
 400c62c:	da400115 	stw	r9,4(sp)
 400c630:	400de400 	call	400de40 <__clzsi2>
 400c634:	10800804 	addi	r2,r2,32
 400c638:	da400117 	ldw	r9,4(sp)
 400c63c:	d9800317 	ldw	r6,12(sp)
 400c640:	003ee306 	br	400c1d0 <__alt_mem_epcs_flash_controller_0+0xfb00b1d0>
 400c644:	85a1883a 	add	r16,r16,r22
 400c648:	8585803a 	cmpltu	r2,r16,r22
 400c64c:	1705883a 	add	r2,r2,fp
 400c650:	14a5883a 	add	r18,r2,r18
 400c654:	88bfffc4 	addi	r2,r17,-1
 400c658:	e4800c2e 	bgeu	fp,r18,400c68c <__divdf3+0x72c>
 400c65c:	90c03e36 	bltu	r18,r3,400c758 <__divdf3+0x7f8>
 400c660:	1c806926 	beq	r3,r18,400c808 <__divdf3+0x8a8>
 400c664:	90c7c83a 	sub	r3,r18,r3
 400c668:	1023883a 	mov	r17,r2
 400c66c:	003f5206 	br	400c3b8 <__alt_mem_epcs_flash_controller_0+0xfb00b3b8>
 400c670:	923f0436 	bltu	r18,r8,400c284 <__alt_mem_epcs_flash_controller_0+0xfb00b284>
 400c674:	800897fa 	slli	r4,r16,31
 400c678:	9004d07a 	srli	r2,r18,1
 400c67c:	8006d07a 	srli	r3,r16,1
 400c680:	902097fa 	slli	r16,r18,31
 400c684:	20a4b03a 	or	r18,r4,r2
 400c688:	003f0106 	br	400c290 <__alt_mem_epcs_flash_controller_0+0xfb00b290>
 400c68c:	e4bff51e 	bne	fp,r18,400c664 <__alt_mem_epcs_flash_controller_0+0xfb00b664>
 400c690:	85bff22e 	bgeu	r16,r22,400c65c <__alt_mem_epcs_flash_controller_0+0xfb00b65c>
 400c694:	e0c7c83a 	sub	r3,fp,r3
 400c698:	1023883a 	mov	r17,r2
 400c69c:	003f4606 	br	400c3b8 <__alt_mem_epcs_flash_controller_0+0xfb00b3b8>
 400c6a0:	100f883a 	mov	r7,r2
 400c6a4:	003f2b06 	br	400c354 <__alt_mem_epcs_flash_controller_0+0xfb00b354>
 400c6a8:	180d883a 	mov	r6,r3
 400c6ac:	003f1306 	br	400c2fc <__alt_mem_epcs_flash_controller_0+0xfb00b2fc>
 400c6b0:	813fe436 	bltu	r16,r4,400c644 <__alt_mem_epcs_flash_controller_0+0xfb00b644>
 400c6b4:	0007883a 	mov	r3,zero
 400c6b8:	003f3f06 	br	400c3b8 <__alt_mem_epcs_flash_controller_0+0xfb00b3b8>
 400c6bc:	ba402c36 	bltu	r23,r9,400c770 <__divdf3+0x810>
 400c6c0:	4dc05426 	beq	r9,r23,400c814 <__divdf3+0x8b4>
 400c6c4:	1011883a 	mov	r8,r2
 400c6c8:	003f8906 	br	400c4f0 <__alt_mem_epcs_flash_controller_0+0xfb00b4f0>
 400c6cc:	023fffc4 	movi	r8,-1
 400c6d0:	003f8806 	br	400c4f4 <__alt_mem_epcs_flash_controller_0+0xfb00b4f4>
 400c6d4:	1811883a 	mov	r8,r3
 400c6d8:	003f5406 	br	400c42c <__alt_mem_epcs_flash_controller_0+0xfb00b42c>
 400c6dc:	1025883a 	mov	r18,r2
 400c6e0:	003f6d06 	br	400c498 <__alt_mem_epcs_flash_controller_0+0xfb00b498>
 400c6e4:	b827883a 	mov	r19,r23
 400c6e8:	003f8206 	br	400c4f4 <__alt_mem_epcs_flash_controller_0+0xfb00b4f4>
 400c6ec:	010007c4 	movi	r4,31
 400c6f0:	20c02616 	blt	r4,r3,400c78c <__divdf3+0x82c>
 400c6f4:	00800804 	movi	r2,32
 400c6f8:	10c5c83a 	sub	r2,r2,r3
 400c6fc:	888a983a 	sll	r5,r17,r2
 400c700:	40c8d83a 	srl	r4,r8,r3
 400c704:	4084983a 	sll	r2,r8,r2
 400c708:	88e2d83a 	srl	r17,r17,r3
 400c70c:	2906b03a 	or	r3,r5,r4
 400c710:	1004c03a 	cmpne	r2,r2,zero
 400c714:	1886b03a 	or	r3,r3,r2
 400c718:	188001cc 	andi	r2,r3,7
 400c71c:	10000726 	beq	r2,zero,400c73c <__divdf3+0x7dc>
 400c720:	188003cc 	andi	r2,r3,15
 400c724:	01000104 	movi	r4,4
 400c728:	11000426 	beq	r2,r4,400c73c <__divdf3+0x7dc>
 400c72c:	1805883a 	mov	r2,r3
 400c730:	10c00104 	addi	r3,r2,4
 400c734:	1885803a 	cmpltu	r2,r3,r2
 400c738:	88a3883a 	add	r17,r17,r2
 400c73c:	8880202c 	andhi	r2,r17,128
 400c740:	10002726 	beq	r2,zero,400c7e0 <__divdf3+0x880>
 400c744:	98c0004c 	andi	r3,r19,1
 400c748:	00800044 	movi	r2,1
 400c74c:	000b883a 	mov	r5,zero
 400c750:	0025883a 	mov	r18,zero
 400c754:	003e6106 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c758:	85a1883a 	add	r16,r16,r22
 400c75c:	8585803a 	cmpltu	r2,r16,r22
 400c760:	1705883a 	add	r2,r2,fp
 400c764:	14a5883a 	add	r18,r2,r18
 400c768:	8c7fff84 	addi	r17,r17,-2
 400c76c:	003f1106 	br	400c3b4 <__alt_mem_epcs_flash_controller_0+0xfb00b3b4>
 400c770:	b589883a 	add	r4,r22,r22
 400c774:	25ad803a 	cmpltu	r22,r4,r22
 400c778:	b739883a 	add	fp,r22,fp
 400c77c:	40bfff84 	addi	r2,r8,-2
 400c780:	bf2f883a 	add	r23,r23,fp
 400c784:	202d883a 	mov	r22,r4
 400c788:	003f9306 	br	400c5d8 <__alt_mem_epcs_flash_controller_0+0xfb00b5d8>
 400c78c:	013ff844 	movi	r4,-31
 400c790:	2085c83a 	sub	r2,r4,r2
 400c794:	8888d83a 	srl	r4,r17,r2
 400c798:	00800804 	movi	r2,32
 400c79c:	18802126 	beq	r3,r2,400c824 <__divdf3+0x8c4>
 400c7a0:	00801004 	movi	r2,64
 400c7a4:	10c5c83a 	sub	r2,r2,r3
 400c7a8:	8884983a 	sll	r2,r17,r2
 400c7ac:	1204b03a 	or	r2,r2,r8
 400c7b0:	1004c03a 	cmpne	r2,r2,zero
 400c7b4:	2084b03a 	or	r2,r4,r2
 400c7b8:	144001cc 	andi	r17,r2,7
 400c7bc:	88000d1e 	bne	r17,zero,400c7f4 <__divdf3+0x894>
 400c7c0:	000b883a 	mov	r5,zero
 400c7c4:	1024d0fa 	srli	r18,r2,3
 400c7c8:	98c0004c 	andi	r3,r19,1
 400c7cc:	0005883a 	mov	r2,zero
 400c7d0:	9464b03a 	or	r18,r18,r17
 400c7d4:	003e4106 	br	400c0dc <__alt_mem_epcs_flash_controller_0+0xfb00b0dc>
 400c7d8:	1007883a 	mov	r3,r2
 400c7dc:	0023883a 	mov	r17,zero
 400c7e0:	880a927a 	slli	r5,r17,9
 400c7e4:	1805883a 	mov	r2,r3
 400c7e8:	8822977a 	slli	r17,r17,29
 400c7ec:	280ad33a 	srli	r5,r5,12
 400c7f0:	003ff406 	br	400c7c4 <__alt_mem_epcs_flash_controller_0+0xfb00b7c4>
 400c7f4:	10c003cc 	andi	r3,r2,15
 400c7f8:	01000104 	movi	r4,4
 400c7fc:	193ff626 	beq	r3,r4,400c7d8 <__alt_mem_epcs_flash_controller_0+0xfb00b7d8>
 400c800:	0023883a 	mov	r17,zero
 400c804:	003fca06 	br	400c730 <__alt_mem_epcs_flash_controller_0+0xfb00b730>
 400c808:	813fd336 	bltu	r16,r4,400c758 <__alt_mem_epcs_flash_controller_0+0xfb00b758>
 400c80c:	1023883a 	mov	r17,r2
 400c810:	003fa806 	br	400c6b4 <__alt_mem_epcs_flash_controller_0+0xfb00b6b4>
 400c814:	b0ffd636 	bltu	r22,r3,400c770 <__alt_mem_epcs_flash_controller_0+0xfb00b770>
 400c818:	1011883a 	mov	r8,r2
 400c81c:	b0ff341e 	bne	r22,r3,400c4f0 <__alt_mem_epcs_flash_controller_0+0xfb00b4f0>
 400c820:	003f3406 	br	400c4f4 <__alt_mem_epcs_flash_controller_0+0xfb00b4f4>
 400c824:	0005883a 	mov	r2,zero
 400c828:	003fe006 	br	400c7ac <__alt_mem_epcs_flash_controller_0+0xfb00b7ac>
 400c82c:	00800434 	movhi	r2,16
 400c830:	89400234 	orhi	r5,r17,8
 400c834:	10bfffc4 	addi	r2,r2,-1
 400c838:	b807883a 	mov	r3,r23
 400c83c:	288a703a 	and	r5,r5,r2
 400c840:	4025883a 	mov	r18,r8
 400c844:	003e8206 	br	400c250 <__alt_mem_epcs_flash_controller_0+0xfb00b250>

0400c848 <__gedf2>:
 400c848:	2804d53a 	srli	r2,r5,20
 400c84c:	3806d53a 	srli	r3,r7,20
 400c850:	02000434 	movhi	r8,16
 400c854:	423fffc4 	addi	r8,r8,-1
 400c858:	1081ffcc 	andi	r2,r2,2047
 400c85c:	0241ffc4 	movi	r9,2047
 400c860:	2a14703a 	and	r10,r5,r8
 400c864:	18c1ffcc 	andi	r3,r3,2047
 400c868:	3a10703a 	and	r8,r7,r8
 400c86c:	280ad7fa 	srli	r5,r5,31
 400c870:	380ed7fa 	srli	r7,r7,31
 400c874:	12401d26 	beq	r2,r9,400c8ec <__gedf2+0xa4>
 400c878:	0241ffc4 	movi	r9,2047
 400c87c:	1a401226 	beq	r3,r9,400c8c8 <__gedf2+0x80>
 400c880:	1000081e 	bne	r2,zero,400c8a4 <__gedf2+0x5c>
 400c884:	2296b03a 	or	r11,r4,r10
 400c888:	5813003a 	cmpeq	r9,r11,zero
 400c88c:	1800091e 	bne	r3,zero,400c8b4 <__gedf2+0x6c>
 400c890:	3218b03a 	or	r12,r6,r8
 400c894:	6000071e 	bne	r12,zero,400c8b4 <__gedf2+0x6c>
 400c898:	0005883a 	mov	r2,zero
 400c89c:	5800101e 	bne	r11,zero,400c8e0 <__gedf2+0x98>
 400c8a0:	f800283a 	ret
 400c8a4:	18000c1e 	bne	r3,zero,400c8d8 <__gedf2+0x90>
 400c8a8:	3212b03a 	or	r9,r6,r8
 400c8ac:	48000c26 	beq	r9,zero,400c8e0 <__gedf2+0x98>
 400c8b0:	0013883a 	mov	r9,zero
 400c8b4:	39c03fcc 	andi	r7,r7,255
 400c8b8:	48000826 	beq	r9,zero,400c8dc <__gedf2+0x94>
 400c8bc:	38000926 	beq	r7,zero,400c8e4 <__gedf2+0x9c>
 400c8c0:	00800044 	movi	r2,1
 400c8c4:	f800283a 	ret
 400c8c8:	3212b03a 	or	r9,r6,r8
 400c8cc:	483fec26 	beq	r9,zero,400c880 <__alt_mem_epcs_flash_controller_0+0xfb00b880>
 400c8d0:	00bfff84 	movi	r2,-2
 400c8d4:	f800283a 	ret
 400c8d8:	39c03fcc 	andi	r7,r7,255
 400c8dc:	29c00626 	beq	r5,r7,400c8f8 <__gedf2+0xb0>
 400c8e0:	283ff726 	beq	r5,zero,400c8c0 <__alt_mem_epcs_flash_controller_0+0xfb00b8c0>
 400c8e4:	00bfffc4 	movi	r2,-1
 400c8e8:	f800283a 	ret
 400c8ec:	2292b03a 	or	r9,r4,r10
 400c8f0:	483fe126 	beq	r9,zero,400c878 <__alt_mem_epcs_flash_controller_0+0xfb00b878>
 400c8f4:	003ff606 	br	400c8d0 <__alt_mem_epcs_flash_controller_0+0xfb00b8d0>
 400c8f8:	18bff916 	blt	r3,r2,400c8e0 <__alt_mem_epcs_flash_controller_0+0xfb00b8e0>
 400c8fc:	10c00316 	blt	r2,r3,400c90c <__gedf2+0xc4>
 400c900:	42bff736 	bltu	r8,r10,400c8e0 <__alt_mem_epcs_flash_controller_0+0xfb00b8e0>
 400c904:	52000326 	beq	r10,r8,400c914 <__gedf2+0xcc>
 400c908:	5200042e 	bgeu	r10,r8,400c91c <__gedf2+0xd4>
 400c90c:	283fec1e 	bne	r5,zero,400c8c0 <__alt_mem_epcs_flash_controller_0+0xfb00b8c0>
 400c910:	003ff406 	br	400c8e4 <__alt_mem_epcs_flash_controller_0+0xfb00b8e4>
 400c914:	313ff236 	bltu	r6,r4,400c8e0 <__alt_mem_epcs_flash_controller_0+0xfb00b8e0>
 400c918:	21bffc36 	bltu	r4,r6,400c90c <__alt_mem_epcs_flash_controller_0+0xfb00b90c>
 400c91c:	0005883a 	mov	r2,zero
 400c920:	f800283a 	ret

0400c924 <__ledf2>:
 400c924:	2804d53a 	srli	r2,r5,20
 400c928:	3810d53a 	srli	r8,r7,20
 400c92c:	00c00434 	movhi	r3,16
 400c930:	18ffffc4 	addi	r3,r3,-1
 400c934:	1081ffcc 	andi	r2,r2,2047
 400c938:	0241ffc4 	movi	r9,2047
 400c93c:	28d4703a 	and	r10,r5,r3
 400c940:	4201ffcc 	andi	r8,r8,2047
 400c944:	38c6703a 	and	r3,r7,r3
 400c948:	280ad7fa 	srli	r5,r5,31
 400c94c:	380ed7fa 	srli	r7,r7,31
 400c950:	12401f26 	beq	r2,r9,400c9d0 <__ledf2+0xac>
 400c954:	0241ffc4 	movi	r9,2047
 400c958:	42401426 	beq	r8,r9,400c9ac <__ledf2+0x88>
 400c95c:	1000091e 	bne	r2,zero,400c984 <__ledf2+0x60>
 400c960:	2296b03a 	or	r11,r4,r10
 400c964:	5813003a 	cmpeq	r9,r11,zero
 400c968:	29403fcc 	andi	r5,r5,255
 400c96c:	40000a1e 	bne	r8,zero,400c998 <__ledf2+0x74>
 400c970:	30d8b03a 	or	r12,r6,r3
 400c974:	6000081e 	bne	r12,zero,400c998 <__ledf2+0x74>
 400c978:	0005883a 	mov	r2,zero
 400c97c:	5800111e 	bne	r11,zero,400c9c4 <__ledf2+0xa0>
 400c980:	f800283a 	ret
 400c984:	29403fcc 	andi	r5,r5,255
 400c988:	40000c1e 	bne	r8,zero,400c9bc <__ledf2+0x98>
 400c98c:	30d2b03a 	or	r9,r6,r3
 400c990:	48000c26 	beq	r9,zero,400c9c4 <__ledf2+0xa0>
 400c994:	0013883a 	mov	r9,zero
 400c998:	39c03fcc 	andi	r7,r7,255
 400c99c:	48000826 	beq	r9,zero,400c9c0 <__ledf2+0x9c>
 400c9a0:	38001126 	beq	r7,zero,400c9e8 <__ledf2+0xc4>
 400c9a4:	00800044 	movi	r2,1
 400c9a8:	f800283a 	ret
 400c9ac:	30d2b03a 	or	r9,r6,r3
 400c9b0:	483fea26 	beq	r9,zero,400c95c <__alt_mem_epcs_flash_controller_0+0xfb00b95c>
 400c9b4:	00800084 	movi	r2,2
 400c9b8:	f800283a 	ret
 400c9bc:	39c03fcc 	andi	r7,r7,255
 400c9c0:	39400726 	beq	r7,r5,400c9e0 <__ledf2+0xbc>
 400c9c4:	2800081e 	bne	r5,zero,400c9e8 <__ledf2+0xc4>
 400c9c8:	00800044 	movi	r2,1
 400c9cc:	f800283a 	ret
 400c9d0:	2292b03a 	or	r9,r4,r10
 400c9d4:	483fdf26 	beq	r9,zero,400c954 <__alt_mem_epcs_flash_controller_0+0xfb00b954>
 400c9d8:	00800084 	movi	r2,2
 400c9dc:	f800283a 	ret
 400c9e0:	4080030e 	bge	r8,r2,400c9f0 <__ledf2+0xcc>
 400c9e4:	383fef26 	beq	r7,zero,400c9a4 <__alt_mem_epcs_flash_controller_0+0xfb00b9a4>
 400c9e8:	00bfffc4 	movi	r2,-1
 400c9ec:	f800283a 	ret
 400c9f0:	123feb16 	blt	r2,r8,400c9a0 <__alt_mem_epcs_flash_controller_0+0xfb00b9a0>
 400c9f4:	1abff336 	bltu	r3,r10,400c9c4 <__alt_mem_epcs_flash_controller_0+0xfb00b9c4>
 400c9f8:	50c00326 	beq	r10,r3,400ca08 <__ledf2+0xe4>
 400c9fc:	50c0042e 	bgeu	r10,r3,400ca10 <__ledf2+0xec>
 400ca00:	283fe81e 	bne	r5,zero,400c9a4 <__alt_mem_epcs_flash_controller_0+0xfb00b9a4>
 400ca04:	003ff806 	br	400c9e8 <__alt_mem_epcs_flash_controller_0+0xfb00b9e8>
 400ca08:	313fee36 	bltu	r6,r4,400c9c4 <__alt_mem_epcs_flash_controller_0+0xfb00b9c4>
 400ca0c:	21bffc36 	bltu	r4,r6,400ca00 <__alt_mem_epcs_flash_controller_0+0xfb00ba00>
 400ca10:	0005883a 	mov	r2,zero
 400ca14:	f800283a 	ret

0400ca18 <__muldf3>:
 400ca18:	defff304 	addi	sp,sp,-52
 400ca1c:	2804d53a 	srli	r2,r5,20
 400ca20:	dd800915 	stw	r22,36(sp)
 400ca24:	282cd7fa 	srli	r22,r5,31
 400ca28:	dc000315 	stw	r16,12(sp)
 400ca2c:	04000434 	movhi	r16,16
 400ca30:	dd400815 	stw	r21,32(sp)
 400ca34:	dc800515 	stw	r18,20(sp)
 400ca38:	843fffc4 	addi	r16,r16,-1
 400ca3c:	dfc00c15 	stw	ra,48(sp)
 400ca40:	df000b15 	stw	fp,44(sp)
 400ca44:	ddc00a15 	stw	r23,40(sp)
 400ca48:	dd000715 	stw	r20,28(sp)
 400ca4c:	dcc00615 	stw	r19,24(sp)
 400ca50:	dc400415 	stw	r17,16(sp)
 400ca54:	1481ffcc 	andi	r18,r2,2047
 400ca58:	2c20703a 	and	r16,r5,r16
 400ca5c:	b02b883a 	mov	r21,r22
 400ca60:	b2403fcc 	andi	r9,r22,255
 400ca64:	90006026 	beq	r18,zero,400cbe8 <__muldf3+0x1d0>
 400ca68:	0081ffc4 	movi	r2,2047
 400ca6c:	2029883a 	mov	r20,r4
 400ca70:	90803626 	beq	r18,r2,400cb4c <__muldf3+0x134>
 400ca74:	80800434 	orhi	r2,r16,16
 400ca78:	100490fa 	slli	r2,r2,3
 400ca7c:	2020d77a 	srli	r16,r4,29
 400ca80:	202890fa 	slli	r20,r4,3
 400ca84:	94bf0044 	addi	r18,r18,-1023
 400ca88:	80a0b03a 	or	r16,r16,r2
 400ca8c:	0027883a 	mov	r19,zero
 400ca90:	0039883a 	mov	fp,zero
 400ca94:	3804d53a 	srli	r2,r7,20
 400ca98:	382ed7fa 	srli	r23,r7,31
 400ca9c:	04400434 	movhi	r17,16
 400caa0:	8c7fffc4 	addi	r17,r17,-1
 400caa4:	1081ffcc 	andi	r2,r2,2047
 400caa8:	3011883a 	mov	r8,r6
 400caac:	3c62703a 	and	r17,r7,r17
 400cab0:	ba803fcc 	andi	r10,r23,255
 400cab4:	10006d26 	beq	r2,zero,400cc6c <__muldf3+0x254>
 400cab8:	00c1ffc4 	movi	r3,2047
 400cabc:	10c06526 	beq	r2,r3,400cc54 <__muldf3+0x23c>
 400cac0:	88c00434 	orhi	r3,r17,16
 400cac4:	180690fa 	slli	r3,r3,3
 400cac8:	3022d77a 	srli	r17,r6,29
 400cacc:	301090fa 	slli	r8,r6,3
 400cad0:	10bf0044 	addi	r2,r2,-1023
 400cad4:	88e2b03a 	or	r17,r17,r3
 400cad8:	000b883a 	mov	r5,zero
 400cadc:	9085883a 	add	r2,r18,r2
 400cae0:	2cc8b03a 	or	r4,r5,r19
 400cae4:	00c003c4 	movi	r3,15
 400cae8:	bdacf03a 	xor	r22,r23,r22
 400caec:	12c00044 	addi	r11,r2,1
 400caf0:	19009936 	bltu	r3,r4,400cd58 <__muldf3+0x340>
 400caf4:	200890ba 	slli	r4,r4,2
 400caf8:	00c10074 	movhi	r3,1025
 400cafc:	18f2c304 	addi	r3,r3,-13556
 400cb00:	20c9883a 	add	r4,r4,r3
 400cb04:	20c00017 	ldw	r3,0(r4)
 400cb08:	1800683a 	jmp	r3
 400cb0c:	0400cd58 	cmpnei	r16,zero,821
 400cb10:	0400cb6c 	andhi	r16,zero,813
 400cb14:	0400cb6c 	andhi	r16,zero,813
 400cb18:	0400cb68 	cmpgeui	r16,zero,813
 400cb1c:	0400cd34 	movhi	r16,820
 400cb20:	0400cd34 	movhi	r16,820
 400cb24:	0400cd1c 	xori	r16,zero,820
 400cb28:	0400cb68 	cmpgeui	r16,zero,813
 400cb2c:	0400cd34 	movhi	r16,820
 400cb30:	0400cd1c 	xori	r16,zero,820
 400cb34:	0400cd34 	movhi	r16,820
 400cb38:	0400cb68 	cmpgeui	r16,zero,813
 400cb3c:	0400cd44 	movi	r16,821
 400cb40:	0400cd44 	movi	r16,821
 400cb44:	0400cd44 	movi	r16,821
 400cb48:	0400cf60 	cmpeqi	r16,zero,829
 400cb4c:	2404b03a 	or	r2,r4,r16
 400cb50:	10006f1e 	bne	r2,zero,400cd10 <__muldf3+0x2f8>
 400cb54:	04c00204 	movi	r19,8
 400cb58:	0021883a 	mov	r16,zero
 400cb5c:	0029883a 	mov	r20,zero
 400cb60:	07000084 	movi	fp,2
 400cb64:	003fcb06 	br	400ca94 <__alt_mem_epcs_flash_controller_0+0xfb00ba94>
 400cb68:	502d883a 	mov	r22,r10
 400cb6c:	00800084 	movi	r2,2
 400cb70:	28805726 	beq	r5,r2,400ccd0 <__muldf3+0x2b8>
 400cb74:	008000c4 	movi	r2,3
 400cb78:	28816626 	beq	r5,r2,400d114 <__muldf3+0x6fc>
 400cb7c:	00800044 	movi	r2,1
 400cb80:	2881411e 	bne	r5,r2,400d088 <__muldf3+0x670>
 400cb84:	b02b883a 	mov	r21,r22
 400cb88:	0005883a 	mov	r2,zero
 400cb8c:	000b883a 	mov	r5,zero
 400cb90:	0029883a 	mov	r20,zero
 400cb94:	1004953a 	slli	r2,r2,20
 400cb98:	a8c03fcc 	andi	r3,r21,255
 400cb9c:	04400434 	movhi	r17,16
 400cba0:	8c7fffc4 	addi	r17,r17,-1
 400cba4:	180697fa 	slli	r3,r3,31
 400cba8:	2c4a703a 	and	r5,r5,r17
 400cbac:	288ab03a 	or	r5,r5,r2
 400cbb0:	28c6b03a 	or	r3,r5,r3
 400cbb4:	a005883a 	mov	r2,r20
 400cbb8:	dfc00c17 	ldw	ra,48(sp)
 400cbbc:	df000b17 	ldw	fp,44(sp)
 400cbc0:	ddc00a17 	ldw	r23,40(sp)
 400cbc4:	dd800917 	ldw	r22,36(sp)
 400cbc8:	dd400817 	ldw	r21,32(sp)
 400cbcc:	dd000717 	ldw	r20,28(sp)
 400cbd0:	dcc00617 	ldw	r19,24(sp)
 400cbd4:	dc800517 	ldw	r18,20(sp)
 400cbd8:	dc400417 	ldw	r17,16(sp)
 400cbdc:	dc000317 	ldw	r16,12(sp)
 400cbe0:	dec00d04 	addi	sp,sp,52
 400cbe4:	f800283a 	ret
 400cbe8:	2404b03a 	or	r2,r4,r16
 400cbec:	2027883a 	mov	r19,r4
 400cbf0:	10004226 	beq	r2,zero,400ccfc <__muldf3+0x2e4>
 400cbf4:	8000fc26 	beq	r16,zero,400cfe8 <__muldf3+0x5d0>
 400cbf8:	8009883a 	mov	r4,r16
 400cbfc:	d9800215 	stw	r6,8(sp)
 400cc00:	d9c00015 	stw	r7,0(sp)
 400cc04:	da400115 	stw	r9,4(sp)
 400cc08:	400de400 	call	400de40 <__clzsi2>
 400cc0c:	d9800217 	ldw	r6,8(sp)
 400cc10:	d9c00017 	ldw	r7,0(sp)
 400cc14:	da400117 	ldw	r9,4(sp)
 400cc18:	113ffd44 	addi	r4,r2,-11
 400cc1c:	00c00704 	movi	r3,28
 400cc20:	1900ed16 	blt	r3,r4,400cfd8 <__muldf3+0x5c0>
 400cc24:	00c00744 	movi	r3,29
 400cc28:	147ffe04 	addi	r17,r2,-8
 400cc2c:	1907c83a 	sub	r3,r3,r4
 400cc30:	8460983a 	sll	r16,r16,r17
 400cc34:	98c6d83a 	srl	r3,r19,r3
 400cc38:	9c68983a 	sll	r20,r19,r17
 400cc3c:	1c20b03a 	or	r16,r3,r16
 400cc40:	1080fcc4 	addi	r2,r2,1011
 400cc44:	00a5c83a 	sub	r18,zero,r2
 400cc48:	0027883a 	mov	r19,zero
 400cc4c:	0039883a 	mov	fp,zero
 400cc50:	003f9006 	br	400ca94 <__alt_mem_epcs_flash_controller_0+0xfb00ba94>
 400cc54:	3446b03a 	or	r3,r6,r17
 400cc58:	1800261e 	bne	r3,zero,400ccf4 <__muldf3+0x2dc>
 400cc5c:	0023883a 	mov	r17,zero
 400cc60:	0011883a 	mov	r8,zero
 400cc64:	01400084 	movi	r5,2
 400cc68:	003f9c06 	br	400cadc <__alt_mem_epcs_flash_controller_0+0xfb00badc>
 400cc6c:	3446b03a 	or	r3,r6,r17
 400cc70:	18001c26 	beq	r3,zero,400cce4 <__muldf3+0x2cc>
 400cc74:	8800ce26 	beq	r17,zero,400cfb0 <__muldf3+0x598>
 400cc78:	8809883a 	mov	r4,r17
 400cc7c:	d9800215 	stw	r6,8(sp)
 400cc80:	da400115 	stw	r9,4(sp)
 400cc84:	da800015 	stw	r10,0(sp)
 400cc88:	400de400 	call	400de40 <__clzsi2>
 400cc8c:	d9800217 	ldw	r6,8(sp)
 400cc90:	da400117 	ldw	r9,4(sp)
 400cc94:	da800017 	ldw	r10,0(sp)
 400cc98:	113ffd44 	addi	r4,r2,-11
 400cc9c:	00c00704 	movi	r3,28
 400cca0:	1900bf16 	blt	r3,r4,400cfa0 <__muldf3+0x588>
 400cca4:	00c00744 	movi	r3,29
 400cca8:	123ffe04 	addi	r8,r2,-8
 400ccac:	1907c83a 	sub	r3,r3,r4
 400ccb0:	8a22983a 	sll	r17,r17,r8
 400ccb4:	30c6d83a 	srl	r3,r6,r3
 400ccb8:	3210983a 	sll	r8,r6,r8
 400ccbc:	1c62b03a 	or	r17,r3,r17
 400ccc0:	1080fcc4 	addi	r2,r2,1011
 400ccc4:	0085c83a 	sub	r2,zero,r2
 400ccc8:	000b883a 	mov	r5,zero
 400cccc:	003f8306 	br	400cadc <__alt_mem_epcs_flash_controller_0+0xfb00badc>
 400ccd0:	b02b883a 	mov	r21,r22
 400ccd4:	0081ffc4 	movi	r2,2047
 400ccd8:	000b883a 	mov	r5,zero
 400ccdc:	0029883a 	mov	r20,zero
 400cce0:	003fac06 	br	400cb94 <__alt_mem_epcs_flash_controller_0+0xfb00bb94>
 400cce4:	0023883a 	mov	r17,zero
 400cce8:	0011883a 	mov	r8,zero
 400ccec:	01400044 	movi	r5,1
 400ccf0:	003f7a06 	br	400cadc <__alt_mem_epcs_flash_controller_0+0xfb00badc>
 400ccf4:	014000c4 	movi	r5,3
 400ccf8:	003f7806 	br	400cadc <__alt_mem_epcs_flash_controller_0+0xfb00badc>
 400ccfc:	04c00104 	movi	r19,4
 400cd00:	0021883a 	mov	r16,zero
 400cd04:	0029883a 	mov	r20,zero
 400cd08:	07000044 	movi	fp,1
 400cd0c:	003f6106 	br	400ca94 <__alt_mem_epcs_flash_controller_0+0xfb00ba94>
 400cd10:	04c00304 	movi	r19,12
 400cd14:	070000c4 	movi	fp,3
 400cd18:	003f5e06 	br	400ca94 <__alt_mem_epcs_flash_controller_0+0xfb00ba94>
 400cd1c:	01400434 	movhi	r5,16
 400cd20:	002b883a 	mov	r21,zero
 400cd24:	297fffc4 	addi	r5,r5,-1
 400cd28:	053fffc4 	movi	r20,-1
 400cd2c:	0081ffc4 	movi	r2,2047
 400cd30:	003f9806 	br	400cb94 <__alt_mem_epcs_flash_controller_0+0xfb00bb94>
 400cd34:	8023883a 	mov	r17,r16
 400cd38:	a011883a 	mov	r8,r20
 400cd3c:	e00b883a 	mov	r5,fp
 400cd40:	003f8a06 	br	400cb6c <__alt_mem_epcs_flash_controller_0+0xfb00bb6c>
 400cd44:	8023883a 	mov	r17,r16
 400cd48:	a011883a 	mov	r8,r20
 400cd4c:	482d883a 	mov	r22,r9
 400cd50:	e00b883a 	mov	r5,fp
 400cd54:	003f8506 	br	400cb6c <__alt_mem_epcs_flash_controller_0+0xfb00bb6c>
 400cd58:	a00ad43a 	srli	r5,r20,16
 400cd5c:	401ad43a 	srli	r13,r8,16
 400cd60:	a53fffcc 	andi	r20,r20,65535
 400cd64:	423fffcc 	andi	r8,r8,65535
 400cd68:	4519383a 	mul	r12,r8,r20
 400cd6c:	4147383a 	mul	r3,r8,r5
 400cd70:	6d09383a 	mul	r4,r13,r20
 400cd74:	600cd43a 	srli	r6,r12,16
 400cd78:	2b5d383a 	mul	r14,r5,r13
 400cd7c:	20c9883a 	add	r4,r4,r3
 400cd80:	310d883a 	add	r6,r6,r4
 400cd84:	30c0022e 	bgeu	r6,r3,400cd90 <__muldf3+0x378>
 400cd88:	00c00074 	movhi	r3,1
 400cd8c:	70dd883a 	add	r14,r14,r3
 400cd90:	8826d43a 	srli	r19,r17,16
 400cd94:	8bffffcc 	andi	r15,r17,65535
 400cd98:	7d23383a 	mul	r17,r15,r20
 400cd9c:	7949383a 	mul	r4,r15,r5
 400cda0:	9d29383a 	mul	r20,r19,r20
 400cda4:	8814d43a 	srli	r10,r17,16
 400cda8:	3012943a 	slli	r9,r6,16
 400cdac:	a129883a 	add	r20,r20,r4
 400cdb0:	633fffcc 	andi	r12,r12,65535
 400cdb4:	5515883a 	add	r10,r10,r20
 400cdb8:	3006d43a 	srli	r3,r6,16
 400cdbc:	4b13883a 	add	r9,r9,r12
 400cdc0:	2ccb383a 	mul	r5,r5,r19
 400cdc4:	5100022e 	bgeu	r10,r4,400cdd0 <__muldf3+0x3b8>
 400cdc8:	01000074 	movhi	r4,1
 400cdcc:	290b883a 	add	r5,r5,r4
 400cdd0:	802ad43a 	srli	r21,r16,16
 400cdd4:	843fffcc 	andi	r16,r16,65535
 400cdd8:	440d383a 	mul	r6,r8,r16
 400cddc:	4565383a 	mul	r18,r8,r21
 400cde0:	8349383a 	mul	r4,r16,r13
 400cde4:	500e943a 	slli	r7,r10,16
 400cde8:	3010d43a 	srli	r8,r6,16
 400cdec:	5028d43a 	srli	r20,r10,16
 400cdf0:	2489883a 	add	r4,r4,r18
 400cdf4:	8abfffcc 	andi	r10,r17,65535
 400cdf8:	3a95883a 	add	r10,r7,r10
 400cdfc:	4119883a 	add	r12,r8,r4
 400ce00:	a169883a 	add	r20,r20,r5
 400ce04:	1a87883a 	add	r3,r3,r10
 400ce08:	6d5b383a 	mul	r13,r13,r21
 400ce0c:	6480022e 	bgeu	r12,r18,400ce18 <__muldf3+0x400>
 400ce10:	01000074 	movhi	r4,1
 400ce14:	691b883a 	add	r13,r13,r4
 400ce18:	7c25383a 	mul	r18,r15,r16
 400ce1c:	7d4b383a 	mul	r5,r15,r21
 400ce20:	84cf383a 	mul	r7,r16,r19
 400ce24:	901ed43a 	srli	r15,r18,16
 400ce28:	6008d43a 	srli	r4,r12,16
 400ce2c:	6010943a 	slli	r8,r12,16
 400ce30:	394f883a 	add	r7,r7,r5
 400ce34:	333fffcc 	andi	r12,r6,65535
 400ce38:	79df883a 	add	r15,r15,r7
 400ce3c:	235b883a 	add	r13,r4,r13
 400ce40:	9d63383a 	mul	r17,r19,r21
 400ce44:	4309883a 	add	r4,r8,r12
 400ce48:	7940022e 	bgeu	r15,r5,400ce54 <__muldf3+0x43c>
 400ce4c:	01400074 	movhi	r5,1
 400ce50:	8963883a 	add	r17,r17,r5
 400ce54:	780a943a 	slli	r5,r15,16
 400ce58:	91bfffcc 	andi	r6,r18,65535
 400ce5c:	70c7883a 	add	r3,r14,r3
 400ce60:	298d883a 	add	r6,r5,r6
 400ce64:	1a8f803a 	cmpltu	r7,r3,r10
 400ce68:	350b883a 	add	r5,r6,r20
 400ce6c:	20c7883a 	add	r3,r4,r3
 400ce70:	3955883a 	add	r10,r7,r5
 400ce74:	1909803a 	cmpltu	r4,r3,r4
 400ce78:	6a91883a 	add	r8,r13,r10
 400ce7c:	780cd43a 	srli	r6,r15,16
 400ce80:	2219883a 	add	r12,r4,r8
 400ce84:	2d0b803a 	cmpltu	r5,r5,r20
 400ce88:	51cf803a 	cmpltu	r7,r10,r7
 400ce8c:	29ceb03a 	or	r7,r5,r7
 400ce90:	4351803a 	cmpltu	r8,r8,r13
 400ce94:	610b803a 	cmpltu	r5,r12,r4
 400ce98:	4148b03a 	or	r4,r8,r5
 400ce9c:	398f883a 	add	r7,r7,r6
 400cea0:	3909883a 	add	r4,r7,r4
 400cea4:	1810927a 	slli	r8,r3,9
 400cea8:	2449883a 	add	r4,r4,r17
 400ceac:	2008927a 	slli	r4,r4,9
 400ceb0:	6022d5fa 	srli	r17,r12,23
 400ceb4:	1806d5fa 	srli	r3,r3,23
 400ceb8:	4252b03a 	or	r9,r8,r9
 400cebc:	600a927a 	slli	r5,r12,9
 400cec0:	4810c03a 	cmpne	r8,r9,zero
 400cec4:	2462b03a 	or	r17,r4,r17
 400cec8:	40c6b03a 	or	r3,r8,r3
 400cecc:	8900402c 	andhi	r4,r17,256
 400ced0:	1950b03a 	or	r8,r3,r5
 400ced4:	20000726 	beq	r4,zero,400cef4 <__muldf3+0x4dc>
 400ced8:	4006d07a 	srli	r3,r8,1
 400cedc:	880497fa 	slli	r2,r17,31
 400cee0:	4200004c 	andi	r8,r8,1
 400cee4:	8822d07a 	srli	r17,r17,1
 400cee8:	1a10b03a 	or	r8,r3,r8
 400ceec:	1210b03a 	or	r8,r2,r8
 400cef0:	5805883a 	mov	r2,r11
 400cef4:	1140ffc4 	addi	r5,r2,1023
 400cef8:	0140440e 	bge	zero,r5,400d00c <__muldf3+0x5f4>
 400cefc:	40c001cc 	andi	r3,r8,7
 400cf00:	18000726 	beq	r3,zero,400cf20 <__muldf3+0x508>
 400cf04:	40c003cc 	andi	r3,r8,15
 400cf08:	01000104 	movi	r4,4
 400cf0c:	19000426 	beq	r3,r4,400cf20 <__muldf3+0x508>
 400cf10:	4107883a 	add	r3,r8,r4
 400cf14:	1a11803a 	cmpltu	r8,r3,r8
 400cf18:	8a23883a 	add	r17,r17,r8
 400cf1c:	1811883a 	mov	r8,r3
 400cf20:	88c0402c 	andhi	r3,r17,256
 400cf24:	18000426 	beq	r3,zero,400cf38 <__muldf3+0x520>
 400cf28:	11410004 	addi	r5,r2,1024
 400cf2c:	00bfc034 	movhi	r2,65280
 400cf30:	10bfffc4 	addi	r2,r2,-1
 400cf34:	88a2703a 	and	r17,r17,r2
 400cf38:	0081ff84 	movi	r2,2046
 400cf3c:	117f6416 	blt	r2,r5,400ccd0 <__alt_mem_epcs_flash_controller_0+0xfb00bcd0>
 400cf40:	8828977a 	slli	r20,r17,29
 400cf44:	4010d0fa 	srli	r8,r8,3
 400cf48:	8822927a 	slli	r17,r17,9
 400cf4c:	2881ffcc 	andi	r2,r5,2047
 400cf50:	a228b03a 	or	r20,r20,r8
 400cf54:	880ad33a 	srli	r5,r17,12
 400cf58:	b02b883a 	mov	r21,r22
 400cf5c:	003f0d06 	br	400cb94 <__alt_mem_epcs_flash_controller_0+0xfb00bb94>
 400cf60:	8080022c 	andhi	r2,r16,8
 400cf64:	10000926 	beq	r2,zero,400cf8c <__muldf3+0x574>
 400cf68:	8880022c 	andhi	r2,r17,8
 400cf6c:	1000071e 	bne	r2,zero,400cf8c <__muldf3+0x574>
 400cf70:	00800434 	movhi	r2,16
 400cf74:	89400234 	orhi	r5,r17,8
 400cf78:	10bfffc4 	addi	r2,r2,-1
 400cf7c:	b82b883a 	mov	r21,r23
 400cf80:	288a703a 	and	r5,r5,r2
 400cf84:	4029883a 	mov	r20,r8
 400cf88:	003f6806 	br	400cd2c <__alt_mem_epcs_flash_controller_0+0xfb00bd2c>
 400cf8c:	00800434 	movhi	r2,16
 400cf90:	81400234 	orhi	r5,r16,8
 400cf94:	10bfffc4 	addi	r2,r2,-1
 400cf98:	288a703a 	and	r5,r5,r2
 400cf9c:	003f6306 	br	400cd2c <__alt_mem_epcs_flash_controller_0+0xfb00bd2c>
 400cfa0:	147ff604 	addi	r17,r2,-40
 400cfa4:	3462983a 	sll	r17,r6,r17
 400cfa8:	0011883a 	mov	r8,zero
 400cfac:	003f4406 	br	400ccc0 <__alt_mem_epcs_flash_controller_0+0xfb00bcc0>
 400cfb0:	3009883a 	mov	r4,r6
 400cfb4:	d9800215 	stw	r6,8(sp)
 400cfb8:	da400115 	stw	r9,4(sp)
 400cfbc:	da800015 	stw	r10,0(sp)
 400cfc0:	400de400 	call	400de40 <__clzsi2>
 400cfc4:	10800804 	addi	r2,r2,32
 400cfc8:	da800017 	ldw	r10,0(sp)
 400cfcc:	da400117 	ldw	r9,4(sp)
 400cfd0:	d9800217 	ldw	r6,8(sp)
 400cfd4:	003f3006 	br	400cc98 <__alt_mem_epcs_flash_controller_0+0xfb00bc98>
 400cfd8:	143ff604 	addi	r16,r2,-40
 400cfdc:	9c20983a 	sll	r16,r19,r16
 400cfe0:	0029883a 	mov	r20,zero
 400cfe4:	003f1606 	br	400cc40 <__alt_mem_epcs_flash_controller_0+0xfb00bc40>
 400cfe8:	d9800215 	stw	r6,8(sp)
 400cfec:	d9c00015 	stw	r7,0(sp)
 400cff0:	da400115 	stw	r9,4(sp)
 400cff4:	400de400 	call	400de40 <__clzsi2>
 400cff8:	10800804 	addi	r2,r2,32
 400cffc:	da400117 	ldw	r9,4(sp)
 400d000:	d9c00017 	ldw	r7,0(sp)
 400d004:	d9800217 	ldw	r6,8(sp)
 400d008:	003f0306 	br	400cc18 <__alt_mem_epcs_flash_controller_0+0xfb00bc18>
 400d00c:	00c00044 	movi	r3,1
 400d010:	1947c83a 	sub	r3,r3,r5
 400d014:	00800e04 	movi	r2,56
 400d018:	10feda16 	blt	r2,r3,400cb84 <__alt_mem_epcs_flash_controller_0+0xfb00bb84>
 400d01c:	008007c4 	movi	r2,31
 400d020:	10c01b16 	blt	r2,r3,400d090 <__muldf3+0x678>
 400d024:	00800804 	movi	r2,32
 400d028:	10c5c83a 	sub	r2,r2,r3
 400d02c:	888a983a 	sll	r5,r17,r2
 400d030:	40c8d83a 	srl	r4,r8,r3
 400d034:	4084983a 	sll	r2,r8,r2
 400d038:	88e2d83a 	srl	r17,r17,r3
 400d03c:	2906b03a 	or	r3,r5,r4
 400d040:	1004c03a 	cmpne	r2,r2,zero
 400d044:	1886b03a 	or	r3,r3,r2
 400d048:	188001cc 	andi	r2,r3,7
 400d04c:	10000726 	beq	r2,zero,400d06c <__muldf3+0x654>
 400d050:	188003cc 	andi	r2,r3,15
 400d054:	01000104 	movi	r4,4
 400d058:	11000426 	beq	r2,r4,400d06c <__muldf3+0x654>
 400d05c:	1805883a 	mov	r2,r3
 400d060:	10c00104 	addi	r3,r2,4
 400d064:	1885803a 	cmpltu	r2,r3,r2
 400d068:	88a3883a 	add	r17,r17,r2
 400d06c:	8880202c 	andhi	r2,r17,128
 400d070:	10001c26 	beq	r2,zero,400d0e4 <__muldf3+0x6cc>
 400d074:	b02b883a 	mov	r21,r22
 400d078:	00800044 	movi	r2,1
 400d07c:	000b883a 	mov	r5,zero
 400d080:	0029883a 	mov	r20,zero
 400d084:	003ec306 	br	400cb94 <__alt_mem_epcs_flash_controller_0+0xfb00bb94>
 400d088:	5805883a 	mov	r2,r11
 400d08c:	003f9906 	br	400cef4 <__alt_mem_epcs_flash_controller_0+0xfb00bef4>
 400d090:	00bff844 	movi	r2,-31
 400d094:	1145c83a 	sub	r2,r2,r5
 400d098:	8888d83a 	srl	r4,r17,r2
 400d09c:	00800804 	movi	r2,32
 400d0a0:	18801a26 	beq	r3,r2,400d10c <__muldf3+0x6f4>
 400d0a4:	00801004 	movi	r2,64
 400d0a8:	10c5c83a 	sub	r2,r2,r3
 400d0ac:	8884983a 	sll	r2,r17,r2
 400d0b0:	1204b03a 	or	r2,r2,r8
 400d0b4:	1004c03a 	cmpne	r2,r2,zero
 400d0b8:	2084b03a 	or	r2,r4,r2
 400d0bc:	144001cc 	andi	r17,r2,7
 400d0c0:	88000d1e 	bne	r17,zero,400d0f8 <__muldf3+0x6e0>
 400d0c4:	000b883a 	mov	r5,zero
 400d0c8:	1028d0fa 	srli	r20,r2,3
 400d0cc:	b02b883a 	mov	r21,r22
 400d0d0:	0005883a 	mov	r2,zero
 400d0d4:	a468b03a 	or	r20,r20,r17
 400d0d8:	003eae06 	br	400cb94 <__alt_mem_epcs_flash_controller_0+0xfb00bb94>
 400d0dc:	1007883a 	mov	r3,r2
 400d0e0:	0023883a 	mov	r17,zero
 400d0e4:	880a927a 	slli	r5,r17,9
 400d0e8:	1805883a 	mov	r2,r3
 400d0ec:	8822977a 	slli	r17,r17,29
 400d0f0:	280ad33a 	srli	r5,r5,12
 400d0f4:	003ff406 	br	400d0c8 <__alt_mem_epcs_flash_controller_0+0xfb00c0c8>
 400d0f8:	10c003cc 	andi	r3,r2,15
 400d0fc:	01000104 	movi	r4,4
 400d100:	193ff626 	beq	r3,r4,400d0dc <__alt_mem_epcs_flash_controller_0+0xfb00c0dc>
 400d104:	0023883a 	mov	r17,zero
 400d108:	003fd506 	br	400d060 <__alt_mem_epcs_flash_controller_0+0xfb00c060>
 400d10c:	0005883a 	mov	r2,zero
 400d110:	003fe706 	br	400d0b0 <__alt_mem_epcs_flash_controller_0+0xfb00c0b0>
 400d114:	00800434 	movhi	r2,16
 400d118:	89400234 	orhi	r5,r17,8
 400d11c:	10bfffc4 	addi	r2,r2,-1
 400d120:	b02b883a 	mov	r21,r22
 400d124:	288a703a 	and	r5,r5,r2
 400d128:	4029883a 	mov	r20,r8
 400d12c:	003eff06 	br	400cd2c <__alt_mem_epcs_flash_controller_0+0xfb00bd2c>

0400d130 <__subdf3>:
 400d130:	02000434 	movhi	r8,16
 400d134:	423fffc4 	addi	r8,r8,-1
 400d138:	defffb04 	addi	sp,sp,-20
 400d13c:	2a14703a 	and	r10,r5,r8
 400d140:	3812d53a 	srli	r9,r7,20
 400d144:	3a10703a 	and	r8,r7,r8
 400d148:	2006d77a 	srli	r3,r4,29
 400d14c:	3004d77a 	srli	r2,r6,29
 400d150:	dc000015 	stw	r16,0(sp)
 400d154:	501490fa 	slli	r10,r10,3
 400d158:	2820d53a 	srli	r16,r5,20
 400d15c:	401090fa 	slli	r8,r8,3
 400d160:	dc800215 	stw	r18,8(sp)
 400d164:	dc400115 	stw	r17,4(sp)
 400d168:	dfc00415 	stw	ra,16(sp)
 400d16c:	202290fa 	slli	r17,r4,3
 400d170:	dcc00315 	stw	r19,12(sp)
 400d174:	4a41ffcc 	andi	r9,r9,2047
 400d178:	0101ffc4 	movi	r4,2047
 400d17c:	2824d7fa 	srli	r18,r5,31
 400d180:	8401ffcc 	andi	r16,r16,2047
 400d184:	50c6b03a 	or	r3,r10,r3
 400d188:	380ed7fa 	srli	r7,r7,31
 400d18c:	408ab03a 	or	r5,r8,r2
 400d190:	300c90fa 	slli	r6,r6,3
 400d194:	49009626 	beq	r9,r4,400d3f0 <__subdf3+0x2c0>
 400d198:	39c0005c 	xori	r7,r7,1
 400d19c:	8245c83a 	sub	r2,r16,r9
 400d1a0:	3c807426 	beq	r7,r18,400d374 <__subdf3+0x244>
 400d1a4:	0080af0e 	bge	zero,r2,400d464 <__subdf3+0x334>
 400d1a8:	48002a1e 	bne	r9,zero,400d254 <__subdf3+0x124>
 400d1ac:	2988b03a 	or	r4,r5,r6
 400d1b0:	20009a1e 	bne	r4,zero,400d41c <__subdf3+0x2ec>
 400d1b4:	888001cc 	andi	r2,r17,7
 400d1b8:	10000726 	beq	r2,zero,400d1d8 <__subdf3+0xa8>
 400d1bc:	888003cc 	andi	r2,r17,15
 400d1c0:	01000104 	movi	r4,4
 400d1c4:	11000426 	beq	r2,r4,400d1d8 <__subdf3+0xa8>
 400d1c8:	890b883a 	add	r5,r17,r4
 400d1cc:	2c63803a 	cmpltu	r17,r5,r17
 400d1d0:	1c47883a 	add	r3,r3,r17
 400d1d4:	2823883a 	mov	r17,r5
 400d1d8:	1880202c 	andhi	r2,r3,128
 400d1dc:	10005926 	beq	r2,zero,400d344 <__subdf3+0x214>
 400d1e0:	84000044 	addi	r16,r16,1
 400d1e4:	0081ffc4 	movi	r2,2047
 400d1e8:	8080be26 	beq	r16,r2,400d4e4 <__subdf3+0x3b4>
 400d1ec:	017fe034 	movhi	r5,65408
 400d1f0:	297fffc4 	addi	r5,r5,-1
 400d1f4:	1946703a 	and	r3,r3,r5
 400d1f8:	1804977a 	slli	r2,r3,29
 400d1fc:	1806927a 	slli	r3,r3,9
 400d200:	8822d0fa 	srli	r17,r17,3
 400d204:	8401ffcc 	andi	r16,r16,2047
 400d208:	180ad33a 	srli	r5,r3,12
 400d20c:	9100004c 	andi	r4,r18,1
 400d210:	1444b03a 	or	r2,r2,r17
 400d214:	80c1ffcc 	andi	r3,r16,2047
 400d218:	1820953a 	slli	r16,r3,20
 400d21c:	20c03fcc 	andi	r3,r4,255
 400d220:	180897fa 	slli	r4,r3,31
 400d224:	00c00434 	movhi	r3,16
 400d228:	18ffffc4 	addi	r3,r3,-1
 400d22c:	28c6703a 	and	r3,r5,r3
 400d230:	1c06b03a 	or	r3,r3,r16
 400d234:	1906b03a 	or	r3,r3,r4
 400d238:	dfc00417 	ldw	ra,16(sp)
 400d23c:	dcc00317 	ldw	r19,12(sp)
 400d240:	dc800217 	ldw	r18,8(sp)
 400d244:	dc400117 	ldw	r17,4(sp)
 400d248:	dc000017 	ldw	r16,0(sp)
 400d24c:	dec00504 	addi	sp,sp,20
 400d250:	f800283a 	ret
 400d254:	0101ffc4 	movi	r4,2047
 400d258:	813fd626 	beq	r16,r4,400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d25c:	29402034 	orhi	r5,r5,128
 400d260:	01000e04 	movi	r4,56
 400d264:	2080a316 	blt	r4,r2,400d4f4 <__subdf3+0x3c4>
 400d268:	010007c4 	movi	r4,31
 400d26c:	2080c616 	blt	r4,r2,400d588 <__subdf3+0x458>
 400d270:	01000804 	movi	r4,32
 400d274:	2089c83a 	sub	r4,r4,r2
 400d278:	2910983a 	sll	r8,r5,r4
 400d27c:	308ed83a 	srl	r7,r6,r2
 400d280:	3108983a 	sll	r4,r6,r4
 400d284:	2884d83a 	srl	r2,r5,r2
 400d288:	41ccb03a 	or	r6,r8,r7
 400d28c:	2008c03a 	cmpne	r4,r4,zero
 400d290:	310cb03a 	or	r6,r6,r4
 400d294:	898dc83a 	sub	r6,r17,r6
 400d298:	89a3803a 	cmpltu	r17,r17,r6
 400d29c:	1887c83a 	sub	r3,r3,r2
 400d2a0:	1c47c83a 	sub	r3,r3,r17
 400d2a4:	3023883a 	mov	r17,r6
 400d2a8:	1880202c 	andhi	r2,r3,128
 400d2ac:	10002326 	beq	r2,zero,400d33c <__subdf3+0x20c>
 400d2b0:	04c02034 	movhi	r19,128
 400d2b4:	9cffffc4 	addi	r19,r19,-1
 400d2b8:	1ce6703a 	and	r19,r3,r19
 400d2bc:	98007a26 	beq	r19,zero,400d4a8 <__subdf3+0x378>
 400d2c0:	9809883a 	mov	r4,r19
 400d2c4:	400de400 	call	400de40 <__clzsi2>
 400d2c8:	113ffe04 	addi	r4,r2,-8
 400d2cc:	00c007c4 	movi	r3,31
 400d2d0:	19007b16 	blt	r3,r4,400d4c0 <__subdf3+0x390>
 400d2d4:	00800804 	movi	r2,32
 400d2d8:	1105c83a 	sub	r2,r2,r4
 400d2dc:	8884d83a 	srl	r2,r17,r2
 400d2e0:	9906983a 	sll	r3,r19,r4
 400d2e4:	8922983a 	sll	r17,r17,r4
 400d2e8:	10c4b03a 	or	r2,r2,r3
 400d2ec:	24007816 	blt	r4,r16,400d4d0 <__subdf3+0x3a0>
 400d2f0:	2421c83a 	sub	r16,r4,r16
 400d2f4:	80c00044 	addi	r3,r16,1
 400d2f8:	010007c4 	movi	r4,31
 400d2fc:	20c09516 	blt	r4,r3,400d554 <__subdf3+0x424>
 400d300:	01400804 	movi	r5,32
 400d304:	28cbc83a 	sub	r5,r5,r3
 400d308:	88c8d83a 	srl	r4,r17,r3
 400d30c:	8962983a 	sll	r17,r17,r5
 400d310:	114a983a 	sll	r5,r2,r5
 400d314:	10c6d83a 	srl	r3,r2,r3
 400d318:	8804c03a 	cmpne	r2,r17,zero
 400d31c:	290ab03a 	or	r5,r5,r4
 400d320:	28a2b03a 	or	r17,r5,r2
 400d324:	0021883a 	mov	r16,zero
 400d328:	003fa206 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d32c:	2090b03a 	or	r8,r4,r2
 400d330:	40018e26 	beq	r8,zero,400d96c <__subdf3+0x83c>
 400d334:	1007883a 	mov	r3,r2
 400d338:	2023883a 	mov	r17,r4
 400d33c:	888001cc 	andi	r2,r17,7
 400d340:	103f9e1e 	bne	r2,zero,400d1bc <__alt_mem_epcs_flash_controller_0+0xfb00c1bc>
 400d344:	1804977a 	slli	r2,r3,29
 400d348:	8822d0fa 	srli	r17,r17,3
 400d34c:	1810d0fa 	srli	r8,r3,3
 400d350:	9100004c 	andi	r4,r18,1
 400d354:	1444b03a 	or	r2,r2,r17
 400d358:	00c1ffc4 	movi	r3,2047
 400d35c:	80c02826 	beq	r16,r3,400d400 <__subdf3+0x2d0>
 400d360:	01400434 	movhi	r5,16
 400d364:	297fffc4 	addi	r5,r5,-1
 400d368:	80e0703a 	and	r16,r16,r3
 400d36c:	414a703a 	and	r5,r8,r5
 400d370:	003fa806 	br	400d214 <__alt_mem_epcs_flash_controller_0+0xfb00c214>
 400d374:	0080630e 	bge	zero,r2,400d504 <__subdf3+0x3d4>
 400d378:	48003026 	beq	r9,zero,400d43c <__subdf3+0x30c>
 400d37c:	0101ffc4 	movi	r4,2047
 400d380:	813f8c26 	beq	r16,r4,400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d384:	29402034 	orhi	r5,r5,128
 400d388:	01000e04 	movi	r4,56
 400d38c:	2080a90e 	bge	r4,r2,400d634 <__subdf3+0x504>
 400d390:	298cb03a 	or	r6,r5,r6
 400d394:	3012c03a 	cmpne	r9,r6,zero
 400d398:	0005883a 	mov	r2,zero
 400d39c:	4c53883a 	add	r9,r9,r17
 400d3a0:	4c63803a 	cmpltu	r17,r9,r17
 400d3a4:	10c7883a 	add	r3,r2,r3
 400d3a8:	88c7883a 	add	r3,r17,r3
 400d3ac:	4823883a 	mov	r17,r9
 400d3b0:	1880202c 	andhi	r2,r3,128
 400d3b4:	1000d026 	beq	r2,zero,400d6f8 <__subdf3+0x5c8>
 400d3b8:	84000044 	addi	r16,r16,1
 400d3bc:	0081ffc4 	movi	r2,2047
 400d3c0:	8080fe26 	beq	r16,r2,400d7bc <__subdf3+0x68c>
 400d3c4:	00bfe034 	movhi	r2,65408
 400d3c8:	10bfffc4 	addi	r2,r2,-1
 400d3cc:	1886703a 	and	r3,r3,r2
 400d3d0:	880ad07a 	srli	r5,r17,1
 400d3d4:	180497fa 	slli	r2,r3,31
 400d3d8:	8900004c 	andi	r4,r17,1
 400d3dc:	2922b03a 	or	r17,r5,r4
 400d3e0:	1806d07a 	srli	r3,r3,1
 400d3e4:	1462b03a 	or	r17,r2,r17
 400d3e8:	3825883a 	mov	r18,r7
 400d3ec:	003f7106 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d3f0:	2984b03a 	or	r2,r5,r6
 400d3f4:	103f6826 	beq	r2,zero,400d198 <__alt_mem_epcs_flash_controller_0+0xfb00c198>
 400d3f8:	39c03fcc 	andi	r7,r7,255
 400d3fc:	003f6706 	br	400d19c <__alt_mem_epcs_flash_controller_0+0xfb00c19c>
 400d400:	4086b03a 	or	r3,r8,r2
 400d404:	18015226 	beq	r3,zero,400d950 <__subdf3+0x820>
 400d408:	00c00434 	movhi	r3,16
 400d40c:	41400234 	orhi	r5,r8,8
 400d410:	18ffffc4 	addi	r3,r3,-1
 400d414:	28ca703a 	and	r5,r5,r3
 400d418:	003f7e06 	br	400d214 <__alt_mem_epcs_flash_controller_0+0xfb00c214>
 400d41c:	10bfffc4 	addi	r2,r2,-1
 400d420:	1000491e 	bne	r2,zero,400d548 <__subdf3+0x418>
 400d424:	898fc83a 	sub	r7,r17,r6
 400d428:	89e3803a 	cmpltu	r17,r17,r7
 400d42c:	1947c83a 	sub	r3,r3,r5
 400d430:	1c47c83a 	sub	r3,r3,r17
 400d434:	3823883a 	mov	r17,r7
 400d438:	003f9b06 	br	400d2a8 <__alt_mem_epcs_flash_controller_0+0xfb00c2a8>
 400d43c:	2988b03a 	or	r4,r5,r6
 400d440:	203f5c26 	beq	r4,zero,400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d444:	10bfffc4 	addi	r2,r2,-1
 400d448:	1000931e 	bne	r2,zero,400d698 <__subdf3+0x568>
 400d44c:	898d883a 	add	r6,r17,r6
 400d450:	3463803a 	cmpltu	r17,r6,r17
 400d454:	1947883a 	add	r3,r3,r5
 400d458:	88c7883a 	add	r3,r17,r3
 400d45c:	3023883a 	mov	r17,r6
 400d460:	003fd306 	br	400d3b0 <__alt_mem_epcs_flash_controller_0+0xfb00c3b0>
 400d464:	1000541e 	bne	r2,zero,400d5b8 <__subdf3+0x488>
 400d468:	80800044 	addi	r2,r16,1
 400d46c:	1081ffcc 	andi	r2,r2,2047
 400d470:	01000044 	movi	r4,1
 400d474:	2080a20e 	bge	r4,r2,400d700 <__subdf3+0x5d0>
 400d478:	8989c83a 	sub	r4,r17,r6
 400d47c:	8905803a 	cmpltu	r2,r17,r4
 400d480:	1967c83a 	sub	r19,r3,r5
 400d484:	98a7c83a 	sub	r19,r19,r2
 400d488:	9880202c 	andhi	r2,r19,128
 400d48c:	10006326 	beq	r2,zero,400d61c <__subdf3+0x4ec>
 400d490:	3463c83a 	sub	r17,r6,r17
 400d494:	28c7c83a 	sub	r3,r5,r3
 400d498:	344d803a 	cmpltu	r6,r6,r17
 400d49c:	19a7c83a 	sub	r19,r3,r6
 400d4a0:	3825883a 	mov	r18,r7
 400d4a4:	983f861e 	bne	r19,zero,400d2c0 <__alt_mem_epcs_flash_controller_0+0xfb00c2c0>
 400d4a8:	8809883a 	mov	r4,r17
 400d4ac:	400de400 	call	400de40 <__clzsi2>
 400d4b0:	10800804 	addi	r2,r2,32
 400d4b4:	113ffe04 	addi	r4,r2,-8
 400d4b8:	00c007c4 	movi	r3,31
 400d4bc:	193f850e 	bge	r3,r4,400d2d4 <__alt_mem_epcs_flash_controller_0+0xfb00c2d4>
 400d4c0:	10bff604 	addi	r2,r2,-40
 400d4c4:	8884983a 	sll	r2,r17,r2
 400d4c8:	0023883a 	mov	r17,zero
 400d4cc:	243f880e 	bge	r4,r16,400d2f0 <__alt_mem_epcs_flash_controller_0+0xfb00c2f0>
 400d4d0:	00ffe034 	movhi	r3,65408
 400d4d4:	18ffffc4 	addi	r3,r3,-1
 400d4d8:	8121c83a 	sub	r16,r16,r4
 400d4dc:	10c6703a 	and	r3,r2,r3
 400d4e0:	003f3406 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d4e4:	9100004c 	andi	r4,r18,1
 400d4e8:	000b883a 	mov	r5,zero
 400d4ec:	0005883a 	mov	r2,zero
 400d4f0:	003f4806 	br	400d214 <__alt_mem_epcs_flash_controller_0+0xfb00c214>
 400d4f4:	298cb03a 	or	r6,r5,r6
 400d4f8:	300cc03a 	cmpne	r6,r6,zero
 400d4fc:	0005883a 	mov	r2,zero
 400d500:	003f6406 	br	400d294 <__alt_mem_epcs_flash_controller_0+0xfb00c294>
 400d504:	10009a1e 	bne	r2,zero,400d770 <__subdf3+0x640>
 400d508:	82400044 	addi	r9,r16,1
 400d50c:	4881ffcc 	andi	r2,r9,2047
 400d510:	02800044 	movi	r10,1
 400d514:	5080670e 	bge	r10,r2,400d6b4 <__subdf3+0x584>
 400d518:	0081ffc4 	movi	r2,2047
 400d51c:	4880af26 	beq	r9,r2,400d7dc <__subdf3+0x6ac>
 400d520:	898d883a 	add	r6,r17,r6
 400d524:	1945883a 	add	r2,r3,r5
 400d528:	3447803a 	cmpltu	r3,r6,r17
 400d52c:	1887883a 	add	r3,r3,r2
 400d530:	182297fa 	slli	r17,r3,31
 400d534:	300cd07a 	srli	r6,r6,1
 400d538:	1806d07a 	srli	r3,r3,1
 400d53c:	4821883a 	mov	r16,r9
 400d540:	89a2b03a 	or	r17,r17,r6
 400d544:	003f1b06 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d548:	0101ffc4 	movi	r4,2047
 400d54c:	813f441e 	bne	r16,r4,400d260 <__alt_mem_epcs_flash_controller_0+0xfb00c260>
 400d550:	003f1806 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d554:	843ff844 	addi	r16,r16,-31
 400d558:	01400804 	movi	r5,32
 400d55c:	1408d83a 	srl	r4,r2,r16
 400d560:	19405026 	beq	r3,r5,400d6a4 <__subdf3+0x574>
 400d564:	01401004 	movi	r5,64
 400d568:	28c7c83a 	sub	r3,r5,r3
 400d56c:	10c4983a 	sll	r2,r2,r3
 400d570:	88a2b03a 	or	r17,r17,r2
 400d574:	8822c03a 	cmpne	r17,r17,zero
 400d578:	2462b03a 	or	r17,r4,r17
 400d57c:	0007883a 	mov	r3,zero
 400d580:	0021883a 	mov	r16,zero
 400d584:	003f6d06 	br	400d33c <__alt_mem_epcs_flash_controller_0+0xfb00c33c>
 400d588:	11fff804 	addi	r7,r2,-32
 400d58c:	01000804 	movi	r4,32
 400d590:	29ced83a 	srl	r7,r5,r7
 400d594:	11004526 	beq	r2,r4,400d6ac <__subdf3+0x57c>
 400d598:	01001004 	movi	r4,64
 400d59c:	2089c83a 	sub	r4,r4,r2
 400d5a0:	2904983a 	sll	r2,r5,r4
 400d5a4:	118cb03a 	or	r6,r2,r6
 400d5a8:	300cc03a 	cmpne	r6,r6,zero
 400d5ac:	398cb03a 	or	r6,r7,r6
 400d5b0:	0005883a 	mov	r2,zero
 400d5b4:	003f3706 	br	400d294 <__alt_mem_epcs_flash_controller_0+0xfb00c294>
 400d5b8:	80002a26 	beq	r16,zero,400d664 <__subdf3+0x534>
 400d5bc:	0101ffc4 	movi	r4,2047
 400d5c0:	49006626 	beq	r9,r4,400d75c <__subdf3+0x62c>
 400d5c4:	0085c83a 	sub	r2,zero,r2
 400d5c8:	18c02034 	orhi	r3,r3,128
 400d5cc:	01000e04 	movi	r4,56
 400d5d0:	20807e16 	blt	r4,r2,400d7cc <__subdf3+0x69c>
 400d5d4:	010007c4 	movi	r4,31
 400d5d8:	2080e716 	blt	r4,r2,400d978 <__subdf3+0x848>
 400d5dc:	01000804 	movi	r4,32
 400d5e0:	2089c83a 	sub	r4,r4,r2
 400d5e4:	1914983a 	sll	r10,r3,r4
 400d5e8:	8890d83a 	srl	r8,r17,r2
 400d5ec:	8908983a 	sll	r4,r17,r4
 400d5f0:	1884d83a 	srl	r2,r3,r2
 400d5f4:	5222b03a 	or	r17,r10,r8
 400d5f8:	2006c03a 	cmpne	r3,r4,zero
 400d5fc:	88e2b03a 	or	r17,r17,r3
 400d600:	3463c83a 	sub	r17,r6,r17
 400d604:	2885c83a 	sub	r2,r5,r2
 400d608:	344d803a 	cmpltu	r6,r6,r17
 400d60c:	1187c83a 	sub	r3,r2,r6
 400d610:	4821883a 	mov	r16,r9
 400d614:	3825883a 	mov	r18,r7
 400d618:	003f2306 	br	400d2a8 <__alt_mem_epcs_flash_controller_0+0xfb00c2a8>
 400d61c:	24d0b03a 	or	r8,r4,r19
 400d620:	40001b1e 	bne	r8,zero,400d690 <__subdf3+0x560>
 400d624:	0005883a 	mov	r2,zero
 400d628:	0009883a 	mov	r4,zero
 400d62c:	0021883a 	mov	r16,zero
 400d630:	003f4906 	br	400d358 <__alt_mem_epcs_flash_controller_0+0xfb00c358>
 400d634:	010007c4 	movi	r4,31
 400d638:	20803a16 	blt	r4,r2,400d724 <__subdf3+0x5f4>
 400d63c:	01000804 	movi	r4,32
 400d640:	2089c83a 	sub	r4,r4,r2
 400d644:	2912983a 	sll	r9,r5,r4
 400d648:	3090d83a 	srl	r8,r6,r2
 400d64c:	3108983a 	sll	r4,r6,r4
 400d650:	2884d83a 	srl	r2,r5,r2
 400d654:	4a12b03a 	or	r9,r9,r8
 400d658:	2008c03a 	cmpne	r4,r4,zero
 400d65c:	4912b03a 	or	r9,r9,r4
 400d660:	003f4e06 	br	400d39c <__alt_mem_epcs_flash_controller_0+0xfb00c39c>
 400d664:	1c48b03a 	or	r4,r3,r17
 400d668:	20003c26 	beq	r4,zero,400d75c <__subdf3+0x62c>
 400d66c:	0084303a 	nor	r2,zero,r2
 400d670:	1000381e 	bne	r2,zero,400d754 <__subdf3+0x624>
 400d674:	3463c83a 	sub	r17,r6,r17
 400d678:	28c5c83a 	sub	r2,r5,r3
 400d67c:	344d803a 	cmpltu	r6,r6,r17
 400d680:	1187c83a 	sub	r3,r2,r6
 400d684:	4821883a 	mov	r16,r9
 400d688:	3825883a 	mov	r18,r7
 400d68c:	003f0606 	br	400d2a8 <__alt_mem_epcs_flash_controller_0+0xfb00c2a8>
 400d690:	2023883a 	mov	r17,r4
 400d694:	003f0906 	br	400d2bc <__alt_mem_epcs_flash_controller_0+0xfb00c2bc>
 400d698:	0101ffc4 	movi	r4,2047
 400d69c:	813f3a1e 	bne	r16,r4,400d388 <__alt_mem_epcs_flash_controller_0+0xfb00c388>
 400d6a0:	003ec406 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d6a4:	0005883a 	mov	r2,zero
 400d6a8:	003fb106 	br	400d570 <__alt_mem_epcs_flash_controller_0+0xfb00c570>
 400d6ac:	0005883a 	mov	r2,zero
 400d6b0:	003fbc06 	br	400d5a4 <__alt_mem_epcs_flash_controller_0+0xfb00c5a4>
 400d6b4:	1c44b03a 	or	r2,r3,r17
 400d6b8:	80008e1e 	bne	r16,zero,400d8f4 <__subdf3+0x7c4>
 400d6bc:	1000c826 	beq	r2,zero,400d9e0 <__subdf3+0x8b0>
 400d6c0:	2984b03a 	or	r2,r5,r6
 400d6c4:	103ebb26 	beq	r2,zero,400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d6c8:	8989883a 	add	r4,r17,r6
 400d6cc:	1945883a 	add	r2,r3,r5
 400d6d0:	2447803a 	cmpltu	r3,r4,r17
 400d6d4:	1887883a 	add	r3,r3,r2
 400d6d8:	1880202c 	andhi	r2,r3,128
 400d6dc:	2023883a 	mov	r17,r4
 400d6e0:	103f1626 	beq	r2,zero,400d33c <__alt_mem_epcs_flash_controller_0+0xfb00c33c>
 400d6e4:	00bfe034 	movhi	r2,65408
 400d6e8:	10bfffc4 	addi	r2,r2,-1
 400d6ec:	5021883a 	mov	r16,r10
 400d6f0:	1886703a 	and	r3,r3,r2
 400d6f4:	003eaf06 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d6f8:	3825883a 	mov	r18,r7
 400d6fc:	003f0f06 	br	400d33c <__alt_mem_epcs_flash_controller_0+0xfb00c33c>
 400d700:	1c44b03a 	or	r2,r3,r17
 400d704:	8000251e 	bne	r16,zero,400d79c <__subdf3+0x66c>
 400d708:	1000661e 	bne	r2,zero,400d8a4 <__subdf3+0x774>
 400d70c:	2990b03a 	or	r8,r5,r6
 400d710:	40009626 	beq	r8,zero,400d96c <__subdf3+0x83c>
 400d714:	2807883a 	mov	r3,r5
 400d718:	3023883a 	mov	r17,r6
 400d71c:	3825883a 	mov	r18,r7
 400d720:	003ea406 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d724:	127ff804 	addi	r9,r2,-32
 400d728:	01000804 	movi	r4,32
 400d72c:	2a52d83a 	srl	r9,r5,r9
 400d730:	11008c26 	beq	r2,r4,400d964 <__subdf3+0x834>
 400d734:	01001004 	movi	r4,64
 400d738:	2085c83a 	sub	r2,r4,r2
 400d73c:	2884983a 	sll	r2,r5,r2
 400d740:	118cb03a 	or	r6,r2,r6
 400d744:	300cc03a 	cmpne	r6,r6,zero
 400d748:	4992b03a 	or	r9,r9,r6
 400d74c:	0005883a 	mov	r2,zero
 400d750:	003f1206 	br	400d39c <__alt_mem_epcs_flash_controller_0+0xfb00c39c>
 400d754:	0101ffc4 	movi	r4,2047
 400d758:	493f9c1e 	bne	r9,r4,400d5cc <__alt_mem_epcs_flash_controller_0+0xfb00c5cc>
 400d75c:	2807883a 	mov	r3,r5
 400d760:	3023883a 	mov	r17,r6
 400d764:	4821883a 	mov	r16,r9
 400d768:	3825883a 	mov	r18,r7
 400d76c:	003e9106 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d770:	80001f1e 	bne	r16,zero,400d7f0 <__subdf3+0x6c0>
 400d774:	1c48b03a 	or	r4,r3,r17
 400d778:	20005a26 	beq	r4,zero,400d8e4 <__subdf3+0x7b4>
 400d77c:	0084303a 	nor	r2,zero,r2
 400d780:	1000561e 	bne	r2,zero,400d8dc <__subdf3+0x7ac>
 400d784:	89a3883a 	add	r17,r17,r6
 400d788:	1945883a 	add	r2,r3,r5
 400d78c:	898d803a 	cmpltu	r6,r17,r6
 400d790:	3087883a 	add	r3,r6,r2
 400d794:	4821883a 	mov	r16,r9
 400d798:	003f0506 	br	400d3b0 <__alt_mem_epcs_flash_controller_0+0xfb00c3b0>
 400d79c:	10002b1e 	bne	r2,zero,400d84c <__subdf3+0x71c>
 400d7a0:	2984b03a 	or	r2,r5,r6
 400d7a4:	10008026 	beq	r2,zero,400d9a8 <__subdf3+0x878>
 400d7a8:	2807883a 	mov	r3,r5
 400d7ac:	3023883a 	mov	r17,r6
 400d7b0:	3825883a 	mov	r18,r7
 400d7b4:	0401ffc4 	movi	r16,2047
 400d7b8:	003e7e06 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d7bc:	3809883a 	mov	r4,r7
 400d7c0:	0011883a 	mov	r8,zero
 400d7c4:	0005883a 	mov	r2,zero
 400d7c8:	003ee306 	br	400d358 <__alt_mem_epcs_flash_controller_0+0xfb00c358>
 400d7cc:	1c62b03a 	or	r17,r3,r17
 400d7d0:	8822c03a 	cmpne	r17,r17,zero
 400d7d4:	0005883a 	mov	r2,zero
 400d7d8:	003f8906 	br	400d600 <__alt_mem_epcs_flash_controller_0+0xfb00c600>
 400d7dc:	3809883a 	mov	r4,r7
 400d7e0:	4821883a 	mov	r16,r9
 400d7e4:	0011883a 	mov	r8,zero
 400d7e8:	0005883a 	mov	r2,zero
 400d7ec:	003eda06 	br	400d358 <__alt_mem_epcs_flash_controller_0+0xfb00c358>
 400d7f0:	0101ffc4 	movi	r4,2047
 400d7f4:	49003b26 	beq	r9,r4,400d8e4 <__subdf3+0x7b4>
 400d7f8:	0085c83a 	sub	r2,zero,r2
 400d7fc:	18c02034 	orhi	r3,r3,128
 400d800:	01000e04 	movi	r4,56
 400d804:	20806e16 	blt	r4,r2,400d9c0 <__subdf3+0x890>
 400d808:	010007c4 	movi	r4,31
 400d80c:	20807716 	blt	r4,r2,400d9ec <__subdf3+0x8bc>
 400d810:	01000804 	movi	r4,32
 400d814:	2089c83a 	sub	r4,r4,r2
 400d818:	1914983a 	sll	r10,r3,r4
 400d81c:	8890d83a 	srl	r8,r17,r2
 400d820:	8908983a 	sll	r4,r17,r4
 400d824:	1884d83a 	srl	r2,r3,r2
 400d828:	5222b03a 	or	r17,r10,r8
 400d82c:	2006c03a 	cmpne	r3,r4,zero
 400d830:	88e2b03a 	or	r17,r17,r3
 400d834:	89a3883a 	add	r17,r17,r6
 400d838:	1145883a 	add	r2,r2,r5
 400d83c:	898d803a 	cmpltu	r6,r17,r6
 400d840:	3087883a 	add	r3,r6,r2
 400d844:	4821883a 	mov	r16,r9
 400d848:	003ed906 	br	400d3b0 <__alt_mem_epcs_flash_controller_0+0xfb00c3b0>
 400d84c:	2984b03a 	or	r2,r5,r6
 400d850:	10004226 	beq	r2,zero,400d95c <__subdf3+0x82c>
 400d854:	1808d0fa 	srli	r4,r3,3
 400d858:	8822d0fa 	srli	r17,r17,3
 400d85c:	1806977a 	slli	r3,r3,29
 400d860:	2080022c 	andhi	r2,r4,8
 400d864:	1c62b03a 	or	r17,r3,r17
 400d868:	10000826 	beq	r2,zero,400d88c <__subdf3+0x75c>
 400d86c:	2812d0fa 	srli	r9,r5,3
 400d870:	4880022c 	andhi	r2,r9,8
 400d874:	1000051e 	bne	r2,zero,400d88c <__subdf3+0x75c>
 400d878:	300cd0fa 	srli	r6,r6,3
 400d87c:	2804977a 	slli	r2,r5,29
 400d880:	4809883a 	mov	r4,r9
 400d884:	3825883a 	mov	r18,r7
 400d888:	11a2b03a 	or	r17,r2,r6
 400d88c:	8806d77a 	srli	r3,r17,29
 400d890:	200890fa 	slli	r4,r4,3
 400d894:	882290fa 	slli	r17,r17,3
 400d898:	0401ffc4 	movi	r16,2047
 400d89c:	1906b03a 	or	r3,r3,r4
 400d8a0:	003e4406 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d8a4:	2984b03a 	or	r2,r5,r6
 400d8a8:	103e4226 	beq	r2,zero,400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d8ac:	8989c83a 	sub	r4,r17,r6
 400d8b0:	8911803a 	cmpltu	r8,r17,r4
 400d8b4:	1945c83a 	sub	r2,r3,r5
 400d8b8:	1205c83a 	sub	r2,r2,r8
 400d8bc:	1200202c 	andhi	r8,r2,128
 400d8c0:	403e9a26 	beq	r8,zero,400d32c <__alt_mem_epcs_flash_controller_0+0xfb00c32c>
 400d8c4:	3463c83a 	sub	r17,r6,r17
 400d8c8:	28c5c83a 	sub	r2,r5,r3
 400d8cc:	344d803a 	cmpltu	r6,r6,r17
 400d8d0:	1187c83a 	sub	r3,r2,r6
 400d8d4:	3825883a 	mov	r18,r7
 400d8d8:	003e3606 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d8dc:	0101ffc4 	movi	r4,2047
 400d8e0:	493fc71e 	bne	r9,r4,400d800 <__alt_mem_epcs_flash_controller_0+0xfb00c800>
 400d8e4:	2807883a 	mov	r3,r5
 400d8e8:	3023883a 	mov	r17,r6
 400d8ec:	4821883a 	mov	r16,r9
 400d8f0:	003e3006 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d8f4:	10003626 	beq	r2,zero,400d9d0 <__subdf3+0x8a0>
 400d8f8:	2984b03a 	or	r2,r5,r6
 400d8fc:	10001726 	beq	r2,zero,400d95c <__subdf3+0x82c>
 400d900:	1808d0fa 	srli	r4,r3,3
 400d904:	8822d0fa 	srli	r17,r17,3
 400d908:	1806977a 	slli	r3,r3,29
 400d90c:	2080022c 	andhi	r2,r4,8
 400d910:	1c62b03a 	or	r17,r3,r17
 400d914:	10000726 	beq	r2,zero,400d934 <__subdf3+0x804>
 400d918:	2812d0fa 	srli	r9,r5,3
 400d91c:	4880022c 	andhi	r2,r9,8
 400d920:	1000041e 	bne	r2,zero,400d934 <__subdf3+0x804>
 400d924:	300cd0fa 	srli	r6,r6,3
 400d928:	2804977a 	slli	r2,r5,29
 400d92c:	4809883a 	mov	r4,r9
 400d930:	11a2b03a 	or	r17,r2,r6
 400d934:	8806d77a 	srli	r3,r17,29
 400d938:	200890fa 	slli	r4,r4,3
 400d93c:	882290fa 	slli	r17,r17,3
 400d940:	3825883a 	mov	r18,r7
 400d944:	1906b03a 	or	r3,r3,r4
 400d948:	0401ffc4 	movi	r16,2047
 400d94c:	003e1906 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d950:	000b883a 	mov	r5,zero
 400d954:	0005883a 	mov	r2,zero
 400d958:	003e2e06 	br	400d214 <__alt_mem_epcs_flash_controller_0+0xfb00c214>
 400d95c:	0401ffc4 	movi	r16,2047
 400d960:	003e1406 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d964:	0005883a 	mov	r2,zero
 400d968:	003f7506 	br	400d740 <__alt_mem_epcs_flash_controller_0+0xfb00c740>
 400d96c:	0005883a 	mov	r2,zero
 400d970:	0009883a 	mov	r4,zero
 400d974:	003e7806 	br	400d358 <__alt_mem_epcs_flash_controller_0+0xfb00c358>
 400d978:	123ff804 	addi	r8,r2,-32
 400d97c:	01000804 	movi	r4,32
 400d980:	1a10d83a 	srl	r8,r3,r8
 400d984:	11002526 	beq	r2,r4,400da1c <__subdf3+0x8ec>
 400d988:	01001004 	movi	r4,64
 400d98c:	2085c83a 	sub	r2,r4,r2
 400d990:	1884983a 	sll	r2,r3,r2
 400d994:	1444b03a 	or	r2,r2,r17
 400d998:	1004c03a 	cmpne	r2,r2,zero
 400d99c:	40a2b03a 	or	r17,r8,r2
 400d9a0:	0005883a 	mov	r2,zero
 400d9a4:	003f1606 	br	400d600 <__alt_mem_epcs_flash_controller_0+0xfb00c600>
 400d9a8:	02000434 	movhi	r8,16
 400d9ac:	0009883a 	mov	r4,zero
 400d9b0:	423fffc4 	addi	r8,r8,-1
 400d9b4:	00bfffc4 	movi	r2,-1
 400d9b8:	0401ffc4 	movi	r16,2047
 400d9bc:	003e6606 	br	400d358 <__alt_mem_epcs_flash_controller_0+0xfb00c358>
 400d9c0:	1c62b03a 	or	r17,r3,r17
 400d9c4:	8822c03a 	cmpne	r17,r17,zero
 400d9c8:	0005883a 	mov	r2,zero
 400d9cc:	003f9906 	br	400d834 <__alt_mem_epcs_flash_controller_0+0xfb00c834>
 400d9d0:	2807883a 	mov	r3,r5
 400d9d4:	3023883a 	mov	r17,r6
 400d9d8:	0401ffc4 	movi	r16,2047
 400d9dc:	003df506 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d9e0:	2807883a 	mov	r3,r5
 400d9e4:	3023883a 	mov	r17,r6
 400d9e8:	003df206 	br	400d1b4 <__alt_mem_epcs_flash_controller_0+0xfb00c1b4>
 400d9ec:	123ff804 	addi	r8,r2,-32
 400d9f0:	01000804 	movi	r4,32
 400d9f4:	1a10d83a 	srl	r8,r3,r8
 400d9f8:	11000a26 	beq	r2,r4,400da24 <__subdf3+0x8f4>
 400d9fc:	01001004 	movi	r4,64
 400da00:	2085c83a 	sub	r2,r4,r2
 400da04:	1884983a 	sll	r2,r3,r2
 400da08:	1444b03a 	or	r2,r2,r17
 400da0c:	1004c03a 	cmpne	r2,r2,zero
 400da10:	40a2b03a 	or	r17,r8,r2
 400da14:	0005883a 	mov	r2,zero
 400da18:	003f8606 	br	400d834 <__alt_mem_epcs_flash_controller_0+0xfb00c834>
 400da1c:	0005883a 	mov	r2,zero
 400da20:	003fdc06 	br	400d994 <__alt_mem_epcs_flash_controller_0+0xfb00c994>
 400da24:	0005883a 	mov	r2,zero
 400da28:	003ff706 	br	400da08 <__alt_mem_epcs_flash_controller_0+0xfb00ca08>

0400da2c <__fixdfsi>:
 400da2c:	280cd53a 	srli	r6,r5,20
 400da30:	00c00434 	movhi	r3,16
 400da34:	18ffffc4 	addi	r3,r3,-1
 400da38:	3181ffcc 	andi	r6,r6,2047
 400da3c:	01c0ff84 	movi	r7,1022
 400da40:	28c6703a 	and	r3,r5,r3
 400da44:	280ad7fa 	srli	r5,r5,31
 400da48:	3980120e 	bge	r7,r6,400da94 <__fixdfsi+0x68>
 400da4c:	00810744 	movi	r2,1053
 400da50:	11800c16 	blt	r2,r6,400da84 <__fixdfsi+0x58>
 400da54:	00810cc4 	movi	r2,1075
 400da58:	1185c83a 	sub	r2,r2,r6
 400da5c:	01c007c4 	movi	r7,31
 400da60:	18c00434 	orhi	r3,r3,16
 400da64:	38800d16 	blt	r7,r2,400da9c <__fixdfsi+0x70>
 400da68:	31befb44 	addi	r6,r6,-1043
 400da6c:	2084d83a 	srl	r2,r4,r2
 400da70:	1986983a 	sll	r3,r3,r6
 400da74:	1884b03a 	or	r2,r3,r2
 400da78:	28000726 	beq	r5,zero,400da98 <__fixdfsi+0x6c>
 400da7c:	0085c83a 	sub	r2,zero,r2
 400da80:	f800283a 	ret
 400da84:	00a00034 	movhi	r2,32768
 400da88:	10bfffc4 	addi	r2,r2,-1
 400da8c:	2885883a 	add	r2,r5,r2
 400da90:	f800283a 	ret
 400da94:	0005883a 	mov	r2,zero
 400da98:	f800283a 	ret
 400da9c:	008104c4 	movi	r2,1043
 400daa0:	1185c83a 	sub	r2,r2,r6
 400daa4:	1884d83a 	srl	r2,r3,r2
 400daa8:	003ff306 	br	400da78 <__alt_mem_epcs_flash_controller_0+0xfb00ca78>

0400daac <__floatsidf>:
 400daac:	defffd04 	addi	sp,sp,-12
 400dab0:	dfc00215 	stw	ra,8(sp)
 400dab4:	dc400115 	stw	r17,4(sp)
 400dab8:	dc000015 	stw	r16,0(sp)
 400dabc:	20002b26 	beq	r4,zero,400db6c <__floatsidf+0xc0>
 400dac0:	2023883a 	mov	r17,r4
 400dac4:	2020d7fa 	srli	r16,r4,31
 400dac8:	20002d16 	blt	r4,zero,400db80 <__floatsidf+0xd4>
 400dacc:	8809883a 	mov	r4,r17
 400dad0:	400de400 	call	400de40 <__clzsi2>
 400dad4:	01410784 	movi	r5,1054
 400dad8:	288bc83a 	sub	r5,r5,r2
 400dadc:	01010cc4 	movi	r4,1075
 400dae0:	2149c83a 	sub	r4,r4,r5
 400dae4:	00c007c4 	movi	r3,31
 400dae8:	1900160e 	bge	r3,r4,400db44 <__floatsidf+0x98>
 400daec:	00c104c4 	movi	r3,1043
 400daf0:	1947c83a 	sub	r3,r3,r5
 400daf4:	88c6983a 	sll	r3,r17,r3
 400daf8:	00800434 	movhi	r2,16
 400dafc:	10bfffc4 	addi	r2,r2,-1
 400db00:	1886703a 	and	r3,r3,r2
 400db04:	2941ffcc 	andi	r5,r5,2047
 400db08:	800d883a 	mov	r6,r16
 400db0c:	0005883a 	mov	r2,zero
 400db10:	280a953a 	slli	r5,r5,20
 400db14:	31803fcc 	andi	r6,r6,255
 400db18:	01000434 	movhi	r4,16
 400db1c:	300c97fa 	slli	r6,r6,31
 400db20:	213fffc4 	addi	r4,r4,-1
 400db24:	1906703a 	and	r3,r3,r4
 400db28:	1946b03a 	or	r3,r3,r5
 400db2c:	1986b03a 	or	r3,r3,r6
 400db30:	dfc00217 	ldw	ra,8(sp)
 400db34:	dc400117 	ldw	r17,4(sp)
 400db38:	dc000017 	ldw	r16,0(sp)
 400db3c:	dec00304 	addi	sp,sp,12
 400db40:	f800283a 	ret
 400db44:	00c002c4 	movi	r3,11
 400db48:	1887c83a 	sub	r3,r3,r2
 400db4c:	88c6d83a 	srl	r3,r17,r3
 400db50:	8904983a 	sll	r2,r17,r4
 400db54:	01000434 	movhi	r4,16
 400db58:	213fffc4 	addi	r4,r4,-1
 400db5c:	2941ffcc 	andi	r5,r5,2047
 400db60:	1906703a 	and	r3,r3,r4
 400db64:	800d883a 	mov	r6,r16
 400db68:	003fe906 	br	400db10 <__alt_mem_epcs_flash_controller_0+0xfb00cb10>
 400db6c:	000d883a 	mov	r6,zero
 400db70:	000b883a 	mov	r5,zero
 400db74:	0007883a 	mov	r3,zero
 400db78:	0005883a 	mov	r2,zero
 400db7c:	003fe406 	br	400db10 <__alt_mem_epcs_flash_controller_0+0xfb00cb10>
 400db80:	0123c83a 	sub	r17,zero,r4
 400db84:	003fd106 	br	400dacc <__alt_mem_epcs_flash_controller_0+0xfb00cacc>

0400db88 <__extendsfdf2>:
 400db88:	200ad5fa 	srli	r5,r4,23
 400db8c:	defffd04 	addi	sp,sp,-12
 400db90:	dc400115 	stw	r17,4(sp)
 400db94:	29403fcc 	andi	r5,r5,255
 400db98:	29800044 	addi	r6,r5,1
 400db9c:	04402034 	movhi	r17,128
 400dba0:	dc000015 	stw	r16,0(sp)
 400dba4:	8c7fffc4 	addi	r17,r17,-1
 400dba8:	dfc00215 	stw	ra,8(sp)
 400dbac:	31803fcc 	andi	r6,r6,255
 400dbb0:	00800044 	movi	r2,1
 400dbb4:	8922703a 	and	r17,r17,r4
 400dbb8:	2020d7fa 	srli	r16,r4,31
 400dbbc:	1180110e 	bge	r2,r6,400dc04 <__extendsfdf2+0x7c>
 400dbc0:	880cd0fa 	srli	r6,r17,3
 400dbc4:	8822977a 	slli	r17,r17,29
 400dbc8:	2940e004 	addi	r5,r5,896
 400dbcc:	2941ffcc 	andi	r5,r5,2047
 400dbd0:	2804953a 	slli	r2,r5,20
 400dbd4:	01400434 	movhi	r5,16
 400dbd8:	800697fa 	slli	r3,r16,31
 400dbdc:	297fffc4 	addi	r5,r5,-1
 400dbe0:	314a703a 	and	r5,r6,r5
 400dbe4:	288ab03a 	or	r5,r5,r2
 400dbe8:	28c6b03a 	or	r3,r5,r3
 400dbec:	8805883a 	mov	r2,r17
 400dbf0:	dfc00217 	ldw	ra,8(sp)
 400dbf4:	dc400117 	ldw	r17,4(sp)
 400dbf8:	dc000017 	ldw	r16,0(sp)
 400dbfc:	dec00304 	addi	sp,sp,12
 400dc00:	f800283a 	ret
 400dc04:	2800111e 	bne	r5,zero,400dc4c <__extendsfdf2+0xc4>
 400dc08:	88001c26 	beq	r17,zero,400dc7c <__extendsfdf2+0xf4>
 400dc0c:	8809883a 	mov	r4,r17
 400dc10:	400de400 	call	400de40 <__clzsi2>
 400dc14:	00c00284 	movi	r3,10
 400dc18:	18801b16 	blt	r3,r2,400dc88 <__extendsfdf2+0x100>
 400dc1c:	018002c4 	movi	r6,11
 400dc20:	308dc83a 	sub	r6,r6,r2
 400dc24:	11000544 	addi	r4,r2,21
 400dc28:	8986d83a 	srl	r3,r17,r6
 400dc2c:	8922983a 	sll	r17,r17,r4
 400dc30:	0180e244 	movi	r6,905
 400dc34:	01400434 	movhi	r5,16
 400dc38:	3085c83a 	sub	r2,r6,r2
 400dc3c:	297fffc4 	addi	r5,r5,-1
 400dc40:	194c703a 	and	r6,r3,r5
 400dc44:	1141ffcc 	andi	r5,r2,2047
 400dc48:	003fe006 	br	400dbcc <__alt_mem_epcs_flash_controller_0+0xfb00cbcc>
 400dc4c:	88000826 	beq	r17,zero,400dc70 <__extendsfdf2+0xe8>
 400dc50:	880cd0fa 	srli	r6,r17,3
 400dc54:	00800434 	movhi	r2,16
 400dc58:	10bfffc4 	addi	r2,r2,-1
 400dc5c:	31800234 	orhi	r6,r6,8
 400dc60:	8822977a 	slli	r17,r17,29
 400dc64:	308c703a 	and	r6,r6,r2
 400dc68:	0141ffc4 	movi	r5,2047
 400dc6c:	003fd706 	br	400dbcc <__alt_mem_epcs_flash_controller_0+0xfb00cbcc>
 400dc70:	0141ffc4 	movi	r5,2047
 400dc74:	000d883a 	mov	r6,zero
 400dc78:	003fd406 	br	400dbcc <__alt_mem_epcs_flash_controller_0+0xfb00cbcc>
 400dc7c:	000b883a 	mov	r5,zero
 400dc80:	000d883a 	mov	r6,zero
 400dc84:	003fd106 	br	400dbcc <__alt_mem_epcs_flash_controller_0+0xfb00cbcc>
 400dc88:	11bffd44 	addi	r6,r2,-11
 400dc8c:	8986983a 	sll	r3,r17,r6
 400dc90:	0023883a 	mov	r17,zero
 400dc94:	003fe606 	br	400dc30 <__alt_mem_epcs_flash_controller_0+0xfb00cc30>

0400dc98 <__truncdfsf2>:
 400dc98:	2810d53a 	srli	r8,r5,20
 400dc9c:	01c00434 	movhi	r7,16
 400dca0:	39ffffc4 	addi	r7,r7,-1
 400dca4:	29ce703a 	and	r7,r5,r7
 400dca8:	4201ffcc 	andi	r8,r8,2047
 400dcac:	380e90fa 	slli	r7,r7,3
 400dcb0:	200cd77a 	srli	r6,r4,29
 400dcb4:	42400044 	addi	r9,r8,1
 400dcb8:	4a41ffcc 	andi	r9,r9,2047
 400dcbc:	00c00044 	movi	r3,1
 400dcc0:	280ad7fa 	srli	r5,r5,31
 400dcc4:	31ceb03a 	or	r7,r6,r7
 400dcc8:	200490fa 	slli	r2,r4,3
 400dccc:	1a40230e 	bge	r3,r9,400dd5c <__truncdfsf2+0xc4>
 400dcd0:	40ff2004 	addi	r3,r8,-896
 400dcd4:	01803f84 	movi	r6,254
 400dcd8:	30c01516 	blt	r6,r3,400dd30 <__truncdfsf2+0x98>
 400dcdc:	00c0380e 	bge	zero,r3,400ddc0 <__truncdfsf2+0x128>
 400dce0:	200c91ba 	slli	r6,r4,6
 400dce4:	380e90fa 	slli	r7,r7,3
 400dce8:	1004d77a 	srli	r2,r2,29
 400dcec:	300cc03a 	cmpne	r6,r6,zero
 400dcf0:	31ccb03a 	or	r6,r6,r7
 400dcf4:	308cb03a 	or	r6,r6,r2
 400dcf8:	308001cc 	andi	r2,r6,7
 400dcfc:	10000426 	beq	r2,zero,400dd10 <__truncdfsf2+0x78>
 400dd00:	308003cc 	andi	r2,r6,15
 400dd04:	01000104 	movi	r4,4
 400dd08:	11000126 	beq	r2,r4,400dd10 <__truncdfsf2+0x78>
 400dd0c:	31800104 	addi	r6,r6,4
 400dd10:	3081002c 	andhi	r2,r6,1024
 400dd14:	10001626 	beq	r2,zero,400dd70 <__truncdfsf2+0xd8>
 400dd18:	18c00044 	addi	r3,r3,1
 400dd1c:	00803fc4 	movi	r2,255
 400dd20:	18800326 	beq	r3,r2,400dd30 <__truncdfsf2+0x98>
 400dd24:	300c91ba 	slli	r6,r6,6
 400dd28:	300cd27a 	srli	r6,r6,9
 400dd2c:	00000206 	br	400dd38 <__truncdfsf2+0xa0>
 400dd30:	00ffffc4 	movi	r3,-1
 400dd34:	000d883a 	mov	r6,zero
 400dd38:	18c03fcc 	andi	r3,r3,255
 400dd3c:	180895fa 	slli	r4,r3,23
 400dd40:	00c02034 	movhi	r3,128
 400dd44:	280a97fa 	slli	r5,r5,31
 400dd48:	18ffffc4 	addi	r3,r3,-1
 400dd4c:	30c6703a 	and	r3,r6,r3
 400dd50:	1906b03a 	or	r3,r3,r4
 400dd54:	1944b03a 	or	r2,r3,r5
 400dd58:	f800283a 	ret
 400dd5c:	40000b1e 	bne	r8,zero,400dd8c <__truncdfsf2+0xf4>
 400dd60:	388cb03a 	or	r6,r7,r2
 400dd64:	0007883a 	mov	r3,zero
 400dd68:	30000426 	beq	r6,zero,400dd7c <__truncdfsf2+0xe4>
 400dd6c:	01800144 	movi	r6,5
 400dd70:	00803fc4 	movi	r2,255
 400dd74:	300cd0fa 	srli	r6,r6,3
 400dd78:	18800a26 	beq	r3,r2,400dda4 <__truncdfsf2+0x10c>
 400dd7c:	00802034 	movhi	r2,128
 400dd80:	10bfffc4 	addi	r2,r2,-1
 400dd84:	308c703a 	and	r6,r6,r2
 400dd88:	003feb06 	br	400dd38 <__alt_mem_epcs_flash_controller_0+0xfb00cd38>
 400dd8c:	3888b03a 	or	r4,r7,r2
 400dd90:	203fe726 	beq	r4,zero,400dd30 <__alt_mem_epcs_flash_controller_0+0xfb00cd30>
 400dd94:	380c90fa 	slli	r6,r7,3
 400dd98:	00c03fc4 	movi	r3,255
 400dd9c:	31808034 	orhi	r6,r6,512
 400dda0:	003fd506 	br	400dcf8 <__alt_mem_epcs_flash_controller_0+0xfb00ccf8>
 400dda4:	303fe226 	beq	r6,zero,400dd30 <__alt_mem_epcs_flash_controller_0+0xfb00cd30>
 400dda8:	00802034 	movhi	r2,128
 400ddac:	31801034 	orhi	r6,r6,64
 400ddb0:	10bfffc4 	addi	r2,r2,-1
 400ddb4:	00ffffc4 	movi	r3,-1
 400ddb8:	308c703a 	and	r6,r6,r2
 400ddbc:	003fde06 	br	400dd38 <__alt_mem_epcs_flash_controller_0+0xfb00cd38>
 400ddc0:	013ffa44 	movi	r4,-23
 400ddc4:	19000e16 	blt	r3,r4,400de00 <__truncdfsf2+0x168>
 400ddc8:	01000784 	movi	r4,30
 400ddcc:	20c9c83a 	sub	r4,r4,r3
 400ddd0:	018007c4 	movi	r6,31
 400ddd4:	39c02034 	orhi	r7,r7,128
 400ddd8:	31000b16 	blt	r6,r4,400de08 <__truncdfsf2+0x170>
 400dddc:	423f2084 	addi	r8,r8,-894
 400dde0:	120c983a 	sll	r6,r2,r8
 400dde4:	3a0e983a 	sll	r7,r7,r8
 400dde8:	1104d83a 	srl	r2,r2,r4
 400ddec:	300cc03a 	cmpne	r6,r6,zero
 400ddf0:	31ceb03a 	or	r7,r6,r7
 400ddf4:	388cb03a 	or	r6,r7,r2
 400ddf8:	0007883a 	mov	r3,zero
 400ddfc:	003fbe06 	br	400dcf8 <__alt_mem_epcs_flash_controller_0+0xfb00ccf8>
 400de00:	0007883a 	mov	r3,zero
 400de04:	003fd906 	br	400dd6c <__alt_mem_epcs_flash_controller_0+0xfb00cd6c>
 400de08:	01bfff84 	movi	r6,-2
 400de0c:	30cdc83a 	sub	r6,r6,r3
 400de10:	00c00804 	movi	r3,32
 400de14:	398cd83a 	srl	r6,r7,r6
 400de18:	20c00726 	beq	r4,r3,400de38 <__truncdfsf2+0x1a0>
 400de1c:	423f2884 	addi	r8,r8,-862
 400de20:	3a0e983a 	sll	r7,r7,r8
 400de24:	3884b03a 	or	r2,r7,r2
 400de28:	1004c03a 	cmpne	r2,r2,zero
 400de2c:	118cb03a 	or	r6,r2,r6
 400de30:	0007883a 	mov	r3,zero
 400de34:	003fb006 	br	400dcf8 <__alt_mem_epcs_flash_controller_0+0xfb00ccf8>
 400de38:	000f883a 	mov	r7,zero
 400de3c:	003ff906 	br	400de24 <__alt_mem_epcs_flash_controller_0+0xfb00ce24>

0400de40 <__clzsi2>:
 400de40:	00bfffd4 	movui	r2,65535
 400de44:	11000536 	bltu	r2,r4,400de5c <__clzsi2+0x1c>
 400de48:	00803fc4 	movi	r2,255
 400de4c:	11000f36 	bltu	r2,r4,400de8c <__clzsi2+0x4c>
 400de50:	00800804 	movi	r2,32
 400de54:	0007883a 	mov	r3,zero
 400de58:	00000506 	br	400de70 <__clzsi2+0x30>
 400de5c:	00804034 	movhi	r2,256
 400de60:	10bfffc4 	addi	r2,r2,-1
 400de64:	11000c2e 	bgeu	r2,r4,400de98 <__clzsi2+0x58>
 400de68:	00800204 	movi	r2,8
 400de6c:	00c00604 	movi	r3,24
 400de70:	20c8d83a 	srl	r4,r4,r3
 400de74:	00c10234 	movhi	r3,1032
 400de78:	18d4e344 	addi	r3,r3,21389
 400de7c:	1909883a 	add	r4,r3,r4
 400de80:	20c00003 	ldbu	r3,0(r4)
 400de84:	10c5c83a 	sub	r2,r2,r3
 400de88:	f800283a 	ret
 400de8c:	00800604 	movi	r2,24
 400de90:	00c00204 	movi	r3,8
 400de94:	003ff606 	br	400de70 <__alt_mem_epcs_flash_controller_0+0xfb00ce70>
 400de98:	00800404 	movi	r2,16
 400de9c:	1007883a 	mov	r3,r2
 400dea0:	003ff306 	br	400de70 <__alt_mem_epcs_flash_controller_0+0xfb00ce70>

0400dea4 <__errno>:
 400dea4:	008103f4 	movhi	r2,1039
 400dea8:	108bf604 	addi	r2,r2,12248
 400deac:	10800017 	ldw	r2,0(r2)
 400deb0:	f800283a 	ret

0400deb4 <malloc>:
 400deb4:	008103f4 	movhi	r2,1039
 400deb8:	108bf604 	addi	r2,r2,12248
 400debc:	200b883a 	mov	r5,r4
 400dec0:	11000017 	ldw	r4,0(r2)
 400dec4:	400dedc1 	jmpi	400dedc <_malloc_r>

0400dec8 <free>:
 400dec8:	008103f4 	movhi	r2,1039
 400decc:	108bf604 	addi	r2,r2,12248
 400ded0:	200b883a 	mov	r5,r4
 400ded4:	11000017 	ldw	r4,0(r2)
 400ded8:	40152c81 	jmpi	40152c8 <_free_r>

0400dedc <_malloc_r>:
 400dedc:	defff504 	addi	sp,sp,-44
 400dee0:	dc800315 	stw	r18,12(sp)
 400dee4:	dfc00a15 	stw	ra,40(sp)
 400dee8:	df000915 	stw	fp,36(sp)
 400deec:	ddc00815 	stw	r23,32(sp)
 400def0:	dd800715 	stw	r22,28(sp)
 400def4:	dd400615 	stw	r21,24(sp)
 400def8:	dd000515 	stw	r20,20(sp)
 400defc:	dcc00415 	stw	r19,16(sp)
 400df00:	dc400215 	stw	r17,8(sp)
 400df04:	dc000115 	stw	r16,4(sp)
 400df08:	288002c4 	addi	r2,r5,11
 400df0c:	00c00584 	movi	r3,22
 400df10:	2025883a 	mov	r18,r4
 400df14:	18807f2e 	bgeu	r3,r2,400e114 <_malloc_r+0x238>
 400df18:	047ffe04 	movi	r17,-8
 400df1c:	1462703a 	and	r17,r2,r17
 400df20:	8800a316 	blt	r17,zero,400e1b0 <_malloc_r+0x2d4>
 400df24:	8940a236 	bltu	r17,r5,400e1b0 <_malloc_r+0x2d4>
 400df28:	401bf4c0 	call	401bf4c <__malloc_lock>
 400df2c:	00807dc4 	movi	r2,503
 400df30:	1441e92e 	bgeu	r2,r17,400e6d8 <_malloc_r+0x7fc>
 400df34:	8804d27a 	srli	r2,r17,9
 400df38:	1000a126 	beq	r2,zero,400e1c0 <_malloc_r+0x2e4>
 400df3c:	00c00104 	movi	r3,4
 400df40:	18811e36 	bltu	r3,r2,400e3bc <_malloc_r+0x4e0>
 400df44:	8804d1ba 	srli	r2,r17,6
 400df48:	12000e44 	addi	r8,r2,57
 400df4c:	11c00e04 	addi	r7,r2,56
 400df50:	4209883a 	add	r4,r8,r8
 400df54:	04c103f4 	movhi	r19,1039
 400df58:	2109883a 	add	r4,r4,r4
 400df5c:	9cc61d04 	addi	r19,r19,6260
 400df60:	2109883a 	add	r4,r4,r4
 400df64:	9909883a 	add	r4,r19,r4
 400df68:	24000117 	ldw	r16,4(r4)
 400df6c:	213ffe04 	addi	r4,r4,-8
 400df70:	24009726 	beq	r4,r16,400e1d0 <_malloc_r+0x2f4>
 400df74:	80800117 	ldw	r2,4(r16)
 400df78:	01bfff04 	movi	r6,-4
 400df7c:	014003c4 	movi	r5,15
 400df80:	1184703a 	and	r2,r2,r6
 400df84:	1447c83a 	sub	r3,r2,r17
 400df88:	28c00716 	blt	r5,r3,400dfa8 <_malloc_r+0xcc>
 400df8c:	1800920e 	bge	r3,zero,400e1d8 <_malloc_r+0x2fc>
 400df90:	84000317 	ldw	r16,12(r16)
 400df94:	24008e26 	beq	r4,r16,400e1d0 <_malloc_r+0x2f4>
 400df98:	80800117 	ldw	r2,4(r16)
 400df9c:	1184703a 	and	r2,r2,r6
 400dfa0:	1447c83a 	sub	r3,r2,r17
 400dfa4:	28fff90e 	bge	r5,r3,400df8c <__alt_mem_epcs_flash_controller_0+0xfb00cf8c>
 400dfa8:	3809883a 	mov	r4,r7
 400dfac:	018103f4 	movhi	r6,1039
 400dfb0:	9c000417 	ldw	r16,16(r19)
 400dfb4:	31861d04 	addi	r6,r6,6260
 400dfb8:	32000204 	addi	r8,r6,8
 400dfbc:	82013426 	beq	r16,r8,400e490 <_malloc_r+0x5b4>
 400dfc0:	80c00117 	ldw	r3,4(r16)
 400dfc4:	00bfff04 	movi	r2,-4
 400dfc8:	188e703a 	and	r7,r3,r2
 400dfcc:	3c45c83a 	sub	r2,r7,r17
 400dfd0:	00c003c4 	movi	r3,15
 400dfd4:	18811f16 	blt	r3,r2,400e454 <_malloc_r+0x578>
 400dfd8:	32000515 	stw	r8,20(r6)
 400dfdc:	32000415 	stw	r8,16(r6)
 400dfe0:	10007f0e 	bge	r2,zero,400e1e0 <_malloc_r+0x304>
 400dfe4:	00807fc4 	movi	r2,511
 400dfe8:	11c0fd36 	bltu	r2,r7,400e3e0 <_malloc_r+0x504>
 400dfec:	3806d0fa 	srli	r3,r7,3
 400dff0:	01c00044 	movi	r7,1
 400dff4:	30800117 	ldw	r2,4(r6)
 400dff8:	19400044 	addi	r5,r3,1
 400dffc:	294b883a 	add	r5,r5,r5
 400e000:	1807d0ba 	srai	r3,r3,2
 400e004:	294b883a 	add	r5,r5,r5
 400e008:	294b883a 	add	r5,r5,r5
 400e00c:	298b883a 	add	r5,r5,r6
 400e010:	38c6983a 	sll	r3,r7,r3
 400e014:	29c00017 	ldw	r7,0(r5)
 400e018:	2a7ffe04 	addi	r9,r5,-8
 400e01c:	1886b03a 	or	r3,r3,r2
 400e020:	82400315 	stw	r9,12(r16)
 400e024:	81c00215 	stw	r7,8(r16)
 400e028:	30c00115 	stw	r3,4(r6)
 400e02c:	2c000015 	stw	r16,0(r5)
 400e030:	3c000315 	stw	r16,12(r7)
 400e034:	2005d0ba 	srai	r2,r4,2
 400e038:	01400044 	movi	r5,1
 400e03c:	288a983a 	sll	r5,r5,r2
 400e040:	19406f36 	bltu	r3,r5,400e200 <_malloc_r+0x324>
 400e044:	28c4703a 	and	r2,r5,r3
 400e048:	10000a1e 	bne	r2,zero,400e074 <_malloc_r+0x198>
 400e04c:	00bfff04 	movi	r2,-4
 400e050:	294b883a 	add	r5,r5,r5
 400e054:	2088703a 	and	r4,r4,r2
 400e058:	28c4703a 	and	r2,r5,r3
 400e05c:	21000104 	addi	r4,r4,4
 400e060:	1000041e 	bne	r2,zero,400e074 <_malloc_r+0x198>
 400e064:	294b883a 	add	r5,r5,r5
 400e068:	28c4703a 	and	r2,r5,r3
 400e06c:	21000104 	addi	r4,r4,4
 400e070:	103ffc26 	beq	r2,zero,400e064 <__alt_mem_epcs_flash_controller_0+0xfb00d064>
 400e074:	02bfff04 	movi	r10,-4
 400e078:	024003c4 	movi	r9,15
 400e07c:	21800044 	addi	r6,r4,1
 400e080:	318d883a 	add	r6,r6,r6
 400e084:	318d883a 	add	r6,r6,r6
 400e088:	318d883a 	add	r6,r6,r6
 400e08c:	998d883a 	add	r6,r19,r6
 400e090:	333ffe04 	addi	r12,r6,-8
 400e094:	2017883a 	mov	r11,r4
 400e098:	31800104 	addi	r6,r6,4
 400e09c:	34000017 	ldw	r16,0(r6)
 400e0a0:	31fffd04 	addi	r7,r6,-12
 400e0a4:	81c0041e 	bne	r16,r7,400e0b8 <_malloc_r+0x1dc>
 400e0a8:	0000fb06 	br	400e498 <_malloc_r+0x5bc>
 400e0ac:	1801030e 	bge	r3,zero,400e4bc <_malloc_r+0x5e0>
 400e0b0:	84000317 	ldw	r16,12(r16)
 400e0b4:	81c0f826 	beq	r16,r7,400e498 <_malloc_r+0x5bc>
 400e0b8:	80800117 	ldw	r2,4(r16)
 400e0bc:	1284703a 	and	r2,r2,r10
 400e0c0:	1447c83a 	sub	r3,r2,r17
 400e0c4:	48fff90e 	bge	r9,r3,400e0ac <__alt_mem_epcs_flash_controller_0+0xfb00d0ac>
 400e0c8:	80800317 	ldw	r2,12(r16)
 400e0cc:	81000217 	ldw	r4,8(r16)
 400e0d0:	89400054 	ori	r5,r17,1
 400e0d4:	81400115 	stw	r5,4(r16)
 400e0d8:	20800315 	stw	r2,12(r4)
 400e0dc:	11000215 	stw	r4,8(r2)
 400e0e0:	8463883a 	add	r17,r16,r17
 400e0e4:	9c400515 	stw	r17,20(r19)
 400e0e8:	9c400415 	stw	r17,16(r19)
 400e0ec:	18800054 	ori	r2,r3,1
 400e0f0:	88800115 	stw	r2,4(r17)
 400e0f4:	8a000315 	stw	r8,12(r17)
 400e0f8:	8a000215 	stw	r8,8(r17)
 400e0fc:	88e3883a 	add	r17,r17,r3
 400e100:	88c00015 	stw	r3,0(r17)
 400e104:	9009883a 	mov	r4,r18
 400e108:	401bf700 	call	401bf70 <__malloc_unlock>
 400e10c:	80800204 	addi	r2,r16,8
 400e110:	00001b06 	br	400e180 <_malloc_r+0x2a4>
 400e114:	04400404 	movi	r17,16
 400e118:	89402536 	bltu	r17,r5,400e1b0 <_malloc_r+0x2d4>
 400e11c:	401bf4c0 	call	401bf4c <__malloc_lock>
 400e120:	00800184 	movi	r2,6
 400e124:	01000084 	movi	r4,2
 400e128:	04c103f4 	movhi	r19,1039
 400e12c:	1085883a 	add	r2,r2,r2
 400e130:	9cc61d04 	addi	r19,r19,6260
 400e134:	1085883a 	add	r2,r2,r2
 400e138:	9885883a 	add	r2,r19,r2
 400e13c:	14000117 	ldw	r16,4(r2)
 400e140:	10fffe04 	addi	r3,r2,-8
 400e144:	80c0d926 	beq	r16,r3,400e4ac <_malloc_r+0x5d0>
 400e148:	80c00117 	ldw	r3,4(r16)
 400e14c:	81000317 	ldw	r4,12(r16)
 400e150:	00bfff04 	movi	r2,-4
 400e154:	1884703a 	and	r2,r3,r2
 400e158:	81400217 	ldw	r5,8(r16)
 400e15c:	8085883a 	add	r2,r16,r2
 400e160:	10c00117 	ldw	r3,4(r2)
 400e164:	29000315 	stw	r4,12(r5)
 400e168:	21400215 	stw	r5,8(r4)
 400e16c:	18c00054 	ori	r3,r3,1
 400e170:	10c00115 	stw	r3,4(r2)
 400e174:	9009883a 	mov	r4,r18
 400e178:	401bf700 	call	401bf70 <__malloc_unlock>
 400e17c:	80800204 	addi	r2,r16,8
 400e180:	dfc00a17 	ldw	ra,40(sp)
 400e184:	df000917 	ldw	fp,36(sp)
 400e188:	ddc00817 	ldw	r23,32(sp)
 400e18c:	dd800717 	ldw	r22,28(sp)
 400e190:	dd400617 	ldw	r21,24(sp)
 400e194:	dd000517 	ldw	r20,20(sp)
 400e198:	dcc00417 	ldw	r19,16(sp)
 400e19c:	dc800317 	ldw	r18,12(sp)
 400e1a0:	dc400217 	ldw	r17,8(sp)
 400e1a4:	dc000117 	ldw	r16,4(sp)
 400e1a8:	dec00b04 	addi	sp,sp,44
 400e1ac:	f800283a 	ret
 400e1b0:	00800304 	movi	r2,12
 400e1b4:	90800015 	stw	r2,0(r18)
 400e1b8:	0005883a 	mov	r2,zero
 400e1bc:	003ff006 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e1c0:	01002004 	movi	r4,128
 400e1c4:	02001004 	movi	r8,64
 400e1c8:	01c00fc4 	movi	r7,63
 400e1cc:	003f6106 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e1d0:	4009883a 	mov	r4,r8
 400e1d4:	003f7506 	br	400dfac <__alt_mem_epcs_flash_controller_0+0xfb00cfac>
 400e1d8:	81000317 	ldw	r4,12(r16)
 400e1dc:	003fde06 	br	400e158 <__alt_mem_epcs_flash_controller_0+0xfb00d158>
 400e1e0:	81c5883a 	add	r2,r16,r7
 400e1e4:	11400117 	ldw	r5,4(r2)
 400e1e8:	9009883a 	mov	r4,r18
 400e1ec:	29400054 	ori	r5,r5,1
 400e1f0:	11400115 	stw	r5,4(r2)
 400e1f4:	401bf700 	call	401bf70 <__malloc_unlock>
 400e1f8:	80800204 	addi	r2,r16,8
 400e1fc:	003fe006 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e200:	9c000217 	ldw	r16,8(r19)
 400e204:	00bfff04 	movi	r2,-4
 400e208:	85800117 	ldw	r22,4(r16)
 400e20c:	b0ac703a 	and	r22,r22,r2
 400e210:	b4400336 	bltu	r22,r17,400e220 <_malloc_r+0x344>
 400e214:	b445c83a 	sub	r2,r22,r17
 400e218:	00c003c4 	movi	r3,15
 400e21c:	18805d16 	blt	r3,r2,400e394 <_malloc_r+0x4b8>
 400e220:	05c103f4 	movhi	r23,1039
 400e224:	008103f4 	movhi	r2,1039
 400e228:	108c0904 	addi	r2,r2,12324
 400e22c:	bdcbf704 	addi	r23,r23,12252
 400e230:	15400017 	ldw	r21,0(r2)
 400e234:	b8c00017 	ldw	r3,0(r23)
 400e238:	00bfffc4 	movi	r2,-1
 400e23c:	858d883a 	add	r6,r16,r22
 400e240:	8d6b883a 	add	r21,r17,r21
 400e244:	1880ea26 	beq	r3,r2,400e5f0 <_malloc_r+0x714>
 400e248:	ad4403c4 	addi	r21,r21,4111
 400e24c:	00bc0004 	movi	r2,-4096
 400e250:	a8aa703a 	and	r21,r21,r2
 400e254:	a80b883a 	mov	r5,r21
 400e258:	9009883a 	mov	r4,r18
 400e25c:	d9800015 	stw	r6,0(sp)
 400e260:	400ea980 	call	400ea98 <_sbrk_r>
 400e264:	1029883a 	mov	r20,r2
 400e268:	00bfffc4 	movi	r2,-1
 400e26c:	d9800017 	ldw	r6,0(sp)
 400e270:	a080e826 	beq	r20,r2,400e614 <_malloc_r+0x738>
 400e274:	a180a636 	bltu	r20,r6,400e510 <_malloc_r+0x634>
 400e278:	070103f4 	movhi	fp,1039
 400e27c:	e70c1504 	addi	fp,fp,12372
 400e280:	e0800017 	ldw	r2,0(fp)
 400e284:	a887883a 	add	r3,r21,r2
 400e288:	e0c00015 	stw	r3,0(fp)
 400e28c:	3500e626 	beq	r6,r20,400e628 <_malloc_r+0x74c>
 400e290:	b9000017 	ldw	r4,0(r23)
 400e294:	00bfffc4 	movi	r2,-1
 400e298:	2080ee26 	beq	r4,r2,400e654 <_malloc_r+0x778>
 400e29c:	a185c83a 	sub	r2,r20,r6
 400e2a0:	10c5883a 	add	r2,r2,r3
 400e2a4:	e0800015 	stw	r2,0(fp)
 400e2a8:	a0c001cc 	andi	r3,r20,7
 400e2ac:	1800bc26 	beq	r3,zero,400e5a0 <_malloc_r+0x6c4>
 400e2b0:	a0e9c83a 	sub	r20,r20,r3
 400e2b4:	00840204 	movi	r2,4104
 400e2b8:	a5000204 	addi	r20,r20,8
 400e2bc:	10c7c83a 	sub	r3,r2,r3
 400e2c0:	a545883a 	add	r2,r20,r21
 400e2c4:	1083ffcc 	andi	r2,r2,4095
 400e2c8:	18abc83a 	sub	r21,r3,r2
 400e2cc:	a80b883a 	mov	r5,r21
 400e2d0:	9009883a 	mov	r4,r18
 400e2d4:	400ea980 	call	400ea98 <_sbrk_r>
 400e2d8:	00ffffc4 	movi	r3,-1
 400e2dc:	10c0e126 	beq	r2,r3,400e664 <_malloc_r+0x788>
 400e2e0:	1505c83a 	sub	r2,r2,r20
 400e2e4:	1545883a 	add	r2,r2,r21
 400e2e8:	10800054 	ori	r2,r2,1
 400e2ec:	e0c00017 	ldw	r3,0(fp)
 400e2f0:	9d000215 	stw	r20,8(r19)
 400e2f4:	a0800115 	stw	r2,4(r20)
 400e2f8:	a8c7883a 	add	r3,r21,r3
 400e2fc:	e0c00015 	stw	r3,0(fp)
 400e300:	84c00e26 	beq	r16,r19,400e33c <_malloc_r+0x460>
 400e304:	018003c4 	movi	r6,15
 400e308:	3580a72e 	bgeu	r6,r22,400e5a8 <_malloc_r+0x6cc>
 400e30c:	81400117 	ldw	r5,4(r16)
 400e310:	013ffe04 	movi	r4,-8
 400e314:	b0bffd04 	addi	r2,r22,-12
 400e318:	1104703a 	and	r2,r2,r4
 400e31c:	2900004c 	andi	r4,r5,1
 400e320:	2088b03a 	or	r4,r4,r2
 400e324:	81000115 	stw	r4,4(r16)
 400e328:	01400144 	movi	r5,5
 400e32c:	8089883a 	add	r4,r16,r2
 400e330:	21400115 	stw	r5,4(r4)
 400e334:	21400215 	stw	r5,8(r4)
 400e338:	3080cd36 	bltu	r6,r2,400e670 <_malloc_r+0x794>
 400e33c:	008103f4 	movhi	r2,1039
 400e340:	108c0804 	addi	r2,r2,12320
 400e344:	11000017 	ldw	r4,0(r2)
 400e348:	20c0012e 	bgeu	r4,r3,400e350 <_malloc_r+0x474>
 400e34c:	10c00015 	stw	r3,0(r2)
 400e350:	008103f4 	movhi	r2,1039
 400e354:	108c0704 	addi	r2,r2,12316
 400e358:	11000017 	ldw	r4,0(r2)
 400e35c:	9c000217 	ldw	r16,8(r19)
 400e360:	20c0012e 	bgeu	r4,r3,400e368 <_malloc_r+0x48c>
 400e364:	10c00015 	stw	r3,0(r2)
 400e368:	80c00117 	ldw	r3,4(r16)
 400e36c:	00bfff04 	movi	r2,-4
 400e370:	1886703a 	and	r3,r3,r2
 400e374:	1c45c83a 	sub	r2,r3,r17
 400e378:	1c400236 	bltu	r3,r17,400e384 <_malloc_r+0x4a8>
 400e37c:	00c003c4 	movi	r3,15
 400e380:	18800416 	blt	r3,r2,400e394 <_malloc_r+0x4b8>
 400e384:	9009883a 	mov	r4,r18
 400e388:	401bf700 	call	401bf70 <__malloc_unlock>
 400e38c:	0005883a 	mov	r2,zero
 400e390:	003f7b06 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e394:	88c00054 	ori	r3,r17,1
 400e398:	80c00115 	stw	r3,4(r16)
 400e39c:	8463883a 	add	r17,r16,r17
 400e3a0:	10800054 	ori	r2,r2,1
 400e3a4:	9c400215 	stw	r17,8(r19)
 400e3a8:	88800115 	stw	r2,4(r17)
 400e3ac:	9009883a 	mov	r4,r18
 400e3b0:	401bf700 	call	401bf70 <__malloc_unlock>
 400e3b4:	80800204 	addi	r2,r16,8
 400e3b8:	003f7106 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e3bc:	00c00504 	movi	r3,20
 400e3c0:	18804a2e 	bgeu	r3,r2,400e4ec <_malloc_r+0x610>
 400e3c4:	00c01504 	movi	r3,84
 400e3c8:	18806e36 	bltu	r3,r2,400e584 <_malloc_r+0x6a8>
 400e3cc:	8804d33a 	srli	r2,r17,12
 400e3d0:	12001bc4 	addi	r8,r2,111
 400e3d4:	11c01b84 	addi	r7,r2,110
 400e3d8:	4209883a 	add	r4,r8,r8
 400e3dc:	003edd06 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e3e0:	3804d27a 	srli	r2,r7,9
 400e3e4:	00c00104 	movi	r3,4
 400e3e8:	1880442e 	bgeu	r3,r2,400e4fc <_malloc_r+0x620>
 400e3ec:	00c00504 	movi	r3,20
 400e3f0:	18808136 	bltu	r3,r2,400e5f8 <_malloc_r+0x71c>
 400e3f4:	11401704 	addi	r5,r2,92
 400e3f8:	10c016c4 	addi	r3,r2,91
 400e3fc:	294b883a 	add	r5,r5,r5
 400e400:	294b883a 	add	r5,r5,r5
 400e404:	294b883a 	add	r5,r5,r5
 400e408:	994b883a 	add	r5,r19,r5
 400e40c:	28800017 	ldw	r2,0(r5)
 400e410:	018103f4 	movhi	r6,1039
 400e414:	297ffe04 	addi	r5,r5,-8
 400e418:	31861d04 	addi	r6,r6,6260
 400e41c:	28806526 	beq	r5,r2,400e5b4 <_malloc_r+0x6d8>
 400e420:	01bfff04 	movi	r6,-4
 400e424:	10c00117 	ldw	r3,4(r2)
 400e428:	1986703a 	and	r3,r3,r6
 400e42c:	38c0022e 	bgeu	r7,r3,400e438 <_malloc_r+0x55c>
 400e430:	10800217 	ldw	r2,8(r2)
 400e434:	28bffb1e 	bne	r5,r2,400e424 <__alt_mem_epcs_flash_controller_0+0xfb00d424>
 400e438:	11400317 	ldw	r5,12(r2)
 400e43c:	98c00117 	ldw	r3,4(r19)
 400e440:	81400315 	stw	r5,12(r16)
 400e444:	80800215 	stw	r2,8(r16)
 400e448:	2c000215 	stw	r16,8(r5)
 400e44c:	14000315 	stw	r16,12(r2)
 400e450:	003ef806 	br	400e034 <__alt_mem_epcs_flash_controller_0+0xfb00d034>
 400e454:	88c00054 	ori	r3,r17,1
 400e458:	80c00115 	stw	r3,4(r16)
 400e45c:	8463883a 	add	r17,r16,r17
 400e460:	34400515 	stw	r17,20(r6)
 400e464:	34400415 	stw	r17,16(r6)
 400e468:	10c00054 	ori	r3,r2,1
 400e46c:	8a000315 	stw	r8,12(r17)
 400e470:	8a000215 	stw	r8,8(r17)
 400e474:	88c00115 	stw	r3,4(r17)
 400e478:	88a3883a 	add	r17,r17,r2
 400e47c:	88800015 	stw	r2,0(r17)
 400e480:	9009883a 	mov	r4,r18
 400e484:	401bf700 	call	401bf70 <__malloc_unlock>
 400e488:	80800204 	addi	r2,r16,8
 400e48c:	003f3c06 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e490:	30c00117 	ldw	r3,4(r6)
 400e494:	003ee706 	br	400e034 <__alt_mem_epcs_flash_controller_0+0xfb00d034>
 400e498:	5ac00044 	addi	r11,r11,1
 400e49c:	588000cc 	andi	r2,r11,3
 400e4a0:	31800204 	addi	r6,r6,8
 400e4a4:	103efd1e 	bne	r2,zero,400e09c <__alt_mem_epcs_flash_controller_0+0xfb00d09c>
 400e4a8:	00002406 	br	400e53c <_malloc_r+0x660>
 400e4ac:	14000317 	ldw	r16,12(r2)
 400e4b0:	143f251e 	bne	r2,r16,400e148 <__alt_mem_epcs_flash_controller_0+0xfb00d148>
 400e4b4:	21000084 	addi	r4,r4,2
 400e4b8:	003ebc06 	br	400dfac <__alt_mem_epcs_flash_controller_0+0xfb00cfac>
 400e4bc:	8085883a 	add	r2,r16,r2
 400e4c0:	10c00117 	ldw	r3,4(r2)
 400e4c4:	81000317 	ldw	r4,12(r16)
 400e4c8:	81400217 	ldw	r5,8(r16)
 400e4cc:	18c00054 	ori	r3,r3,1
 400e4d0:	10c00115 	stw	r3,4(r2)
 400e4d4:	29000315 	stw	r4,12(r5)
 400e4d8:	21400215 	stw	r5,8(r4)
 400e4dc:	9009883a 	mov	r4,r18
 400e4e0:	401bf700 	call	401bf70 <__malloc_unlock>
 400e4e4:	80800204 	addi	r2,r16,8
 400e4e8:	003f2506 	br	400e180 <__alt_mem_epcs_flash_controller_0+0xfb00d180>
 400e4ec:	12001704 	addi	r8,r2,92
 400e4f0:	11c016c4 	addi	r7,r2,91
 400e4f4:	4209883a 	add	r4,r8,r8
 400e4f8:	003e9606 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e4fc:	3804d1ba 	srli	r2,r7,6
 400e500:	11400e44 	addi	r5,r2,57
 400e504:	10c00e04 	addi	r3,r2,56
 400e508:	294b883a 	add	r5,r5,r5
 400e50c:	003fbc06 	br	400e400 <__alt_mem_epcs_flash_controller_0+0xfb00d400>
 400e510:	84ff5926 	beq	r16,r19,400e278 <__alt_mem_epcs_flash_controller_0+0xfb00d278>
 400e514:	008103f4 	movhi	r2,1039
 400e518:	10861d04 	addi	r2,r2,6260
 400e51c:	14000217 	ldw	r16,8(r2)
 400e520:	00bfff04 	movi	r2,-4
 400e524:	80c00117 	ldw	r3,4(r16)
 400e528:	1886703a 	and	r3,r3,r2
 400e52c:	003f9106 	br	400e374 <__alt_mem_epcs_flash_controller_0+0xfb00d374>
 400e530:	60800217 	ldw	r2,8(r12)
 400e534:	213fffc4 	addi	r4,r4,-1
 400e538:	1300651e 	bne	r2,r12,400e6d0 <_malloc_r+0x7f4>
 400e53c:	208000cc 	andi	r2,r4,3
 400e540:	633ffe04 	addi	r12,r12,-8
 400e544:	103ffa1e 	bne	r2,zero,400e530 <__alt_mem_epcs_flash_controller_0+0xfb00d530>
 400e548:	98800117 	ldw	r2,4(r19)
 400e54c:	0146303a 	nor	r3,zero,r5
 400e550:	1884703a 	and	r2,r3,r2
 400e554:	98800115 	stw	r2,4(r19)
 400e558:	294b883a 	add	r5,r5,r5
 400e55c:	117f2836 	bltu	r2,r5,400e200 <__alt_mem_epcs_flash_controller_0+0xfb00d200>
 400e560:	283f2726 	beq	r5,zero,400e200 <__alt_mem_epcs_flash_controller_0+0xfb00d200>
 400e564:	2886703a 	and	r3,r5,r2
 400e568:	5809883a 	mov	r4,r11
 400e56c:	183ec31e 	bne	r3,zero,400e07c <__alt_mem_epcs_flash_controller_0+0xfb00d07c>
 400e570:	294b883a 	add	r5,r5,r5
 400e574:	2886703a 	and	r3,r5,r2
 400e578:	21000104 	addi	r4,r4,4
 400e57c:	183ffc26 	beq	r3,zero,400e570 <__alt_mem_epcs_flash_controller_0+0xfb00d570>
 400e580:	003ebe06 	br	400e07c <__alt_mem_epcs_flash_controller_0+0xfb00d07c>
 400e584:	00c05504 	movi	r3,340
 400e588:	18801236 	bltu	r3,r2,400e5d4 <_malloc_r+0x6f8>
 400e58c:	8804d3fa 	srli	r2,r17,15
 400e590:	12001e04 	addi	r8,r2,120
 400e594:	11c01dc4 	addi	r7,r2,119
 400e598:	4209883a 	add	r4,r8,r8
 400e59c:	003e6d06 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e5a0:	00c40004 	movi	r3,4096
 400e5a4:	003f4606 	br	400e2c0 <__alt_mem_epcs_flash_controller_0+0xfb00d2c0>
 400e5a8:	00800044 	movi	r2,1
 400e5ac:	a0800115 	stw	r2,4(r20)
 400e5b0:	003f7406 	br	400e384 <__alt_mem_epcs_flash_controller_0+0xfb00d384>
 400e5b4:	1805d0ba 	srai	r2,r3,2
 400e5b8:	01c00044 	movi	r7,1
 400e5bc:	30c00117 	ldw	r3,4(r6)
 400e5c0:	388e983a 	sll	r7,r7,r2
 400e5c4:	2805883a 	mov	r2,r5
 400e5c8:	38c6b03a 	or	r3,r7,r3
 400e5cc:	30c00115 	stw	r3,4(r6)
 400e5d0:	003f9b06 	br	400e440 <__alt_mem_epcs_flash_controller_0+0xfb00d440>
 400e5d4:	00c15504 	movi	r3,1364
 400e5d8:	18801a36 	bltu	r3,r2,400e644 <_malloc_r+0x768>
 400e5dc:	8804d4ba 	srli	r2,r17,18
 400e5e0:	12001f44 	addi	r8,r2,125
 400e5e4:	11c01f04 	addi	r7,r2,124
 400e5e8:	4209883a 	add	r4,r8,r8
 400e5ec:	003e5906 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e5f0:	ad400404 	addi	r21,r21,16
 400e5f4:	003f1706 	br	400e254 <__alt_mem_epcs_flash_controller_0+0xfb00d254>
 400e5f8:	00c01504 	movi	r3,84
 400e5fc:	18802336 	bltu	r3,r2,400e68c <_malloc_r+0x7b0>
 400e600:	3804d33a 	srli	r2,r7,12
 400e604:	11401bc4 	addi	r5,r2,111
 400e608:	10c01b84 	addi	r3,r2,110
 400e60c:	294b883a 	add	r5,r5,r5
 400e610:	003f7b06 	br	400e400 <__alt_mem_epcs_flash_controller_0+0xfb00d400>
 400e614:	9c000217 	ldw	r16,8(r19)
 400e618:	00bfff04 	movi	r2,-4
 400e61c:	80c00117 	ldw	r3,4(r16)
 400e620:	1886703a 	and	r3,r3,r2
 400e624:	003f5306 	br	400e374 <__alt_mem_epcs_flash_controller_0+0xfb00d374>
 400e628:	3083ffcc 	andi	r2,r6,4095
 400e62c:	103f181e 	bne	r2,zero,400e290 <__alt_mem_epcs_flash_controller_0+0xfb00d290>
 400e630:	99000217 	ldw	r4,8(r19)
 400e634:	b545883a 	add	r2,r22,r21
 400e638:	10800054 	ori	r2,r2,1
 400e63c:	20800115 	stw	r2,4(r4)
 400e640:	003f3e06 	br	400e33c <__alt_mem_epcs_flash_controller_0+0xfb00d33c>
 400e644:	01003f84 	movi	r4,254
 400e648:	02001fc4 	movi	r8,127
 400e64c:	01c01f84 	movi	r7,126
 400e650:	003e4006 	br	400df54 <__alt_mem_epcs_flash_controller_0+0xfb00cf54>
 400e654:	008103f4 	movhi	r2,1039
 400e658:	108bf704 	addi	r2,r2,12252
 400e65c:	15000015 	stw	r20,0(r2)
 400e660:	003f1106 	br	400e2a8 <__alt_mem_epcs_flash_controller_0+0xfb00d2a8>
 400e664:	00800044 	movi	r2,1
 400e668:	002b883a 	mov	r21,zero
 400e66c:	003f1f06 	br	400e2ec <__alt_mem_epcs_flash_controller_0+0xfb00d2ec>
 400e670:	81400204 	addi	r5,r16,8
 400e674:	9009883a 	mov	r4,r18
 400e678:	40152c80 	call	40152c8 <_free_r>
 400e67c:	008103f4 	movhi	r2,1039
 400e680:	108c1504 	addi	r2,r2,12372
 400e684:	10c00017 	ldw	r3,0(r2)
 400e688:	003f2c06 	br	400e33c <__alt_mem_epcs_flash_controller_0+0xfb00d33c>
 400e68c:	00c05504 	movi	r3,340
 400e690:	18800536 	bltu	r3,r2,400e6a8 <_malloc_r+0x7cc>
 400e694:	3804d3fa 	srli	r2,r7,15
 400e698:	11401e04 	addi	r5,r2,120
 400e69c:	10c01dc4 	addi	r3,r2,119
 400e6a0:	294b883a 	add	r5,r5,r5
 400e6a4:	003f5606 	br	400e400 <__alt_mem_epcs_flash_controller_0+0xfb00d400>
 400e6a8:	00c15504 	movi	r3,1364
 400e6ac:	18800536 	bltu	r3,r2,400e6c4 <_malloc_r+0x7e8>
 400e6b0:	3804d4ba 	srli	r2,r7,18
 400e6b4:	11401f44 	addi	r5,r2,125
 400e6b8:	10c01f04 	addi	r3,r2,124
 400e6bc:	294b883a 	add	r5,r5,r5
 400e6c0:	003f4f06 	br	400e400 <__alt_mem_epcs_flash_controller_0+0xfb00d400>
 400e6c4:	01403f84 	movi	r5,254
 400e6c8:	00c01f84 	movi	r3,126
 400e6cc:	003f4c06 	br	400e400 <__alt_mem_epcs_flash_controller_0+0xfb00d400>
 400e6d0:	98800117 	ldw	r2,4(r19)
 400e6d4:	003fa006 	br	400e558 <__alt_mem_epcs_flash_controller_0+0xfb00d558>
 400e6d8:	8808d0fa 	srli	r4,r17,3
 400e6dc:	20800044 	addi	r2,r4,1
 400e6e0:	1085883a 	add	r2,r2,r2
 400e6e4:	003e9006 	br	400e128 <__alt_mem_epcs_flash_controller_0+0xfb00d128>

0400e6e8 <memcpy>:
 400e6e8:	defffd04 	addi	sp,sp,-12
 400e6ec:	dfc00215 	stw	ra,8(sp)
 400e6f0:	dc400115 	stw	r17,4(sp)
 400e6f4:	dc000015 	stw	r16,0(sp)
 400e6f8:	00c003c4 	movi	r3,15
 400e6fc:	2005883a 	mov	r2,r4
 400e700:	1980452e 	bgeu	r3,r6,400e818 <memcpy+0x130>
 400e704:	2906b03a 	or	r3,r5,r4
 400e708:	18c000cc 	andi	r3,r3,3
 400e70c:	1800441e 	bne	r3,zero,400e820 <memcpy+0x138>
 400e710:	347ffc04 	addi	r17,r6,-16
 400e714:	8822d13a 	srli	r17,r17,4
 400e718:	28c00104 	addi	r3,r5,4
 400e71c:	23400104 	addi	r13,r4,4
 400e720:	8820913a 	slli	r16,r17,4
 400e724:	2b000204 	addi	r12,r5,8
 400e728:	22c00204 	addi	r11,r4,8
 400e72c:	84000504 	addi	r16,r16,20
 400e730:	2a800304 	addi	r10,r5,12
 400e734:	22400304 	addi	r9,r4,12
 400e738:	2c21883a 	add	r16,r5,r16
 400e73c:	2811883a 	mov	r8,r5
 400e740:	200f883a 	mov	r7,r4
 400e744:	41000017 	ldw	r4,0(r8)
 400e748:	1fc00017 	ldw	ra,0(r3)
 400e74c:	63c00017 	ldw	r15,0(r12)
 400e750:	39000015 	stw	r4,0(r7)
 400e754:	53800017 	ldw	r14,0(r10)
 400e758:	6fc00015 	stw	ra,0(r13)
 400e75c:	5bc00015 	stw	r15,0(r11)
 400e760:	4b800015 	stw	r14,0(r9)
 400e764:	18c00404 	addi	r3,r3,16
 400e768:	39c00404 	addi	r7,r7,16
 400e76c:	42000404 	addi	r8,r8,16
 400e770:	6b400404 	addi	r13,r13,16
 400e774:	63000404 	addi	r12,r12,16
 400e778:	5ac00404 	addi	r11,r11,16
 400e77c:	52800404 	addi	r10,r10,16
 400e780:	4a400404 	addi	r9,r9,16
 400e784:	1c3fef1e 	bne	r3,r16,400e744 <__alt_mem_epcs_flash_controller_0+0xfb00d744>
 400e788:	89c00044 	addi	r7,r17,1
 400e78c:	380e913a 	slli	r7,r7,4
 400e790:	310003cc 	andi	r4,r6,15
 400e794:	02c000c4 	movi	r11,3
 400e798:	11c7883a 	add	r3,r2,r7
 400e79c:	29cb883a 	add	r5,r5,r7
 400e7a0:	5900212e 	bgeu	r11,r4,400e828 <memcpy+0x140>
 400e7a4:	1813883a 	mov	r9,r3
 400e7a8:	2811883a 	mov	r8,r5
 400e7ac:	200f883a 	mov	r7,r4
 400e7b0:	42800017 	ldw	r10,0(r8)
 400e7b4:	4a400104 	addi	r9,r9,4
 400e7b8:	39ffff04 	addi	r7,r7,-4
 400e7bc:	4abfff15 	stw	r10,-4(r9)
 400e7c0:	42000104 	addi	r8,r8,4
 400e7c4:	59fffa36 	bltu	r11,r7,400e7b0 <__alt_mem_epcs_flash_controller_0+0xfb00d7b0>
 400e7c8:	213fff04 	addi	r4,r4,-4
 400e7cc:	2008d0ba 	srli	r4,r4,2
 400e7d0:	318000cc 	andi	r6,r6,3
 400e7d4:	21000044 	addi	r4,r4,1
 400e7d8:	2109883a 	add	r4,r4,r4
 400e7dc:	2109883a 	add	r4,r4,r4
 400e7e0:	1907883a 	add	r3,r3,r4
 400e7e4:	290b883a 	add	r5,r5,r4
 400e7e8:	30000626 	beq	r6,zero,400e804 <memcpy+0x11c>
 400e7ec:	198d883a 	add	r6,r3,r6
 400e7f0:	29c00003 	ldbu	r7,0(r5)
 400e7f4:	18c00044 	addi	r3,r3,1
 400e7f8:	29400044 	addi	r5,r5,1
 400e7fc:	19ffffc5 	stb	r7,-1(r3)
 400e800:	19bffb1e 	bne	r3,r6,400e7f0 <__alt_mem_epcs_flash_controller_0+0xfb00d7f0>
 400e804:	dfc00217 	ldw	ra,8(sp)
 400e808:	dc400117 	ldw	r17,4(sp)
 400e80c:	dc000017 	ldw	r16,0(sp)
 400e810:	dec00304 	addi	sp,sp,12
 400e814:	f800283a 	ret
 400e818:	2007883a 	mov	r3,r4
 400e81c:	003ff206 	br	400e7e8 <__alt_mem_epcs_flash_controller_0+0xfb00d7e8>
 400e820:	2007883a 	mov	r3,r4
 400e824:	003ff106 	br	400e7ec <__alt_mem_epcs_flash_controller_0+0xfb00d7ec>
 400e828:	200d883a 	mov	r6,r4
 400e82c:	003fee06 	br	400e7e8 <__alt_mem_epcs_flash_controller_0+0xfb00d7e8>

0400e830 <memset>:
 400e830:	20c000cc 	andi	r3,r4,3
 400e834:	2005883a 	mov	r2,r4
 400e838:	18004426 	beq	r3,zero,400e94c <memset+0x11c>
 400e83c:	31ffffc4 	addi	r7,r6,-1
 400e840:	30004026 	beq	r6,zero,400e944 <memset+0x114>
 400e844:	2813883a 	mov	r9,r5
 400e848:	200d883a 	mov	r6,r4
 400e84c:	2007883a 	mov	r3,r4
 400e850:	00000406 	br	400e864 <memset+0x34>
 400e854:	3a3fffc4 	addi	r8,r7,-1
 400e858:	31800044 	addi	r6,r6,1
 400e85c:	38003926 	beq	r7,zero,400e944 <memset+0x114>
 400e860:	400f883a 	mov	r7,r8
 400e864:	18c00044 	addi	r3,r3,1
 400e868:	32400005 	stb	r9,0(r6)
 400e86c:	1a0000cc 	andi	r8,r3,3
 400e870:	403ff81e 	bne	r8,zero,400e854 <__alt_mem_epcs_flash_controller_0+0xfb00d854>
 400e874:	010000c4 	movi	r4,3
 400e878:	21c02d2e 	bgeu	r4,r7,400e930 <memset+0x100>
 400e87c:	29003fcc 	andi	r4,r5,255
 400e880:	200c923a 	slli	r6,r4,8
 400e884:	3108b03a 	or	r4,r6,r4
 400e888:	200c943a 	slli	r6,r4,16
 400e88c:	218cb03a 	or	r6,r4,r6
 400e890:	010003c4 	movi	r4,15
 400e894:	21c0182e 	bgeu	r4,r7,400e8f8 <memset+0xc8>
 400e898:	3b3ffc04 	addi	r12,r7,-16
 400e89c:	6018d13a 	srli	r12,r12,4
 400e8a0:	1a000104 	addi	r8,r3,4
 400e8a4:	1ac00204 	addi	r11,r3,8
 400e8a8:	6008913a 	slli	r4,r12,4
 400e8ac:	1a800304 	addi	r10,r3,12
 400e8b0:	1813883a 	mov	r9,r3
 400e8b4:	21000504 	addi	r4,r4,20
 400e8b8:	1909883a 	add	r4,r3,r4
 400e8bc:	49800015 	stw	r6,0(r9)
 400e8c0:	41800015 	stw	r6,0(r8)
 400e8c4:	59800015 	stw	r6,0(r11)
 400e8c8:	51800015 	stw	r6,0(r10)
 400e8cc:	42000404 	addi	r8,r8,16
 400e8d0:	4a400404 	addi	r9,r9,16
 400e8d4:	5ac00404 	addi	r11,r11,16
 400e8d8:	52800404 	addi	r10,r10,16
 400e8dc:	413ff71e 	bne	r8,r4,400e8bc <__alt_mem_epcs_flash_controller_0+0xfb00d8bc>
 400e8e0:	63000044 	addi	r12,r12,1
 400e8e4:	6018913a 	slli	r12,r12,4
 400e8e8:	39c003cc 	andi	r7,r7,15
 400e8ec:	010000c4 	movi	r4,3
 400e8f0:	1b07883a 	add	r3,r3,r12
 400e8f4:	21c00e2e 	bgeu	r4,r7,400e930 <memset+0x100>
 400e8f8:	1813883a 	mov	r9,r3
 400e8fc:	3811883a 	mov	r8,r7
 400e900:	010000c4 	movi	r4,3
 400e904:	49800015 	stw	r6,0(r9)
 400e908:	423fff04 	addi	r8,r8,-4
 400e90c:	4a400104 	addi	r9,r9,4
 400e910:	223ffc36 	bltu	r4,r8,400e904 <__alt_mem_epcs_flash_controller_0+0xfb00d904>
 400e914:	393fff04 	addi	r4,r7,-4
 400e918:	2008d0ba 	srli	r4,r4,2
 400e91c:	39c000cc 	andi	r7,r7,3
 400e920:	21000044 	addi	r4,r4,1
 400e924:	2109883a 	add	r4,r4,r4
 400e928:	2109883a 	add	r4,r4,r4
 400e92c:	1907883a 	add	r3,r3,r4
 400e930:	38000526 	beq	r7,zero,400e948 <memset+0x118>
 400e934:	19cf883a 	add	r7,r3,r7
 400e938:	19400005 	stb	r5,0(r3)
 400e93c:	18c00044 	addi	r3,r3,1
 400e940:	38fffd1e 	bne	r7,r3,400e938 <__alt_mem_epcs_flash_controller_0+0xfb00d938>
 400e944:	f800283a 	ret
 400e948:	f800283a 	ret
 400e94c:	2007883a 	mov	r3,r4
 400e950:	300f883a 	mov	r7,r6
 400e954:	003fc706 	br	400e874 <__alt_mem_epcs_flash_controller_0+0xfb00d874>

0400e958 <_printf_r>:
 400e958:	defffd04 	addi	sp,sp,-12
 400e95c:	2805883a 	mov	r2,r5
 400e960:	dfc00015 	stw	ra,0(sp)
 400e964:	d9800115 	stw	r6,4(sp)
 400e968:	d9c00215 	stw	r7,8(sp)
 400e96c:	21400217 	ldw	r5,8(r4)
 400e970:	d9c00104 	addi	r7,sp,4
 400e974:	100d883a 	mov	r6,r2
 400e978:	4010eb00 	call	4010eb0 <___vfprintf_internal_r>
 400e97c:	dfc00017 	ldw	ra,0(sp)
 400e980:	dec00304 	addi	sp,sp,12
 400e984:	f800283a 	ret

0400e988 <printf>:
 400e988:	defffc04 	addi	sp,sp,-16
 400e98c:	dfc00015 	stw	ra,0(sp)
 400e990:	d9400115 	stw	r5,4(sp)
 400e994:	d9800215 	stw	r6,8(sp)
 400e998:	d9c00315 	stw	r7,12(sp)
 400e99c:	008103f4 	movhi	r2,1039
 400e9a0:	108bf604 	addi	r2,r2,12248
 400e9a4:	10800017 	ldw	r2,0(r2)
 400e9a8:	200b883a 	mov	r5,r4
 400e9ac:	d9800104 	addi	r6,sp,4
 400e9b0:	11000217 	ldw	r4,8(r2)
 400e9b4:	40130a80 	call	40130a8 <__vfprintf_internal>
 400e9b8:	dfc00017 	ldw	ra,0(sp)
 400e9bc:	dec00404 	addi	sp,sp,16
 400e9c0:	f800283a 	ret

0400e9c4 <_puts_r>:
 400e9c4:	defff604 	addi	sp,sp,-40
 400e9c8:	dc000715 	stw	r16,28(sp)
 400e9cc:	2021883a 	mov	r16,r4
 400e9d0:	2809883a 	mov	r4,r5
 400e9d4:	dc400815 	stw	r17,32(sp)
 400e9d8:	dfc00915 	stw	ra,36(sp)
 400e9dc:	2823883a 	mov	r17,r5
 400e9e0:	400ec400 	call	400ec40 <strlen>
 400e9e4:	10c00044 	addi	r3,r2,1
 400e9e8:	d8800115 	stw	r2,4(sp)
 400e9ec:	00810234 	movhi	r2,1032
 400e9f0:	10952504 	addi	r2,r2,21652
 400e9f4:	d8800215 	stw	r2,8(sp)
 400e9f8:	00800044 	movi	r2,1
 400e9fc:	d8800315 	stw	r2,12(sp)
 400ea00:	00800084 	movi	r2,2
 400ea04:	dc400015 	stw	r17,0(sp)
 400ea08:	d8c00615 	stw	r3,24(sp)
 400ea0c:	dec00415 	stw	sp,16(sp)
 400ea10:	d8800515 	stw	r2,20(sp)
 400ea14:	80000226 	beq	r16,zero,400ea20 <_puts_r+0x5c>
 400ea18:	80800e17 	ldw	r2,56(r16)
 400ea1c:	10001426 	beq	r2,zero,400ea70 <_puts_r+0xac>
 400ea20:	81400217 	ldw	r5,8(r16)
 400ea24:	2880030b 	ldhu	r2,12(r5)
 400ea28:	10c8000c 	andi	r3,r2,8192
 400ea2c:	1800061e 	bne	r3,zero,400ea48 <_puts_r+0x84>
 400ea30:	29001917 	ldw	r4,100(r5)
 400ea34:	00f7ffc4 	movi	r3,-8193
 400ea38:	10880014 	ori	r2,r2,8192
 400ea3c:	20c6703a 	and	r3,r4,r3
 400ea40:	2880030d 	sth	r2,12(r5)
 400ea44:	28c01915 	stw	r3,100(r5)
 400ea48:	d9800404 	addi	r6,sp,16
 400ea4c:	8009883a 	mov	r4,r16
 400ea50:	40155d80 	call	40155d8 <__sfvwrite_r>
 400ea54:	1000091e 	bne	r2,zero,400ea7c <_puts_r+0xb8>
 400ea58:	00800284 	movi	r2,10
 400ea5c:	dfc00917 	ldw	ra,36(sp)
 400ea60:	dc400817 	ldw	r17,32(sp)
 400ea64:	dc000717 	ldw	r16,28(sp)
 400ea68:	dec00a04 	addi	sp,sp,40
 400ea6c:	f800283a 	ret
 400ea70:	8009883a 	mov	r4,r16
 400ea74:	40151540 	call	4015154 <__sinit>
 400ea78:	003fe906 	br	400ea20 <__alt_mem_epcs_flash_controller_0+0xfb00da20>
 400ea7c:	00bfffc4 	movi	r2,-1
 400ea80:	003ff606 	br	400ea5c <__alt_mem_epcs_flash_controller_0+0xfb00da5c>

0400ea84 <puts>:
 400ea84:	008103f4 	movhi	r2,1039
 400ea88:	108bf604 	addi	r2,r2,12248
 400ea8c:	200b883a 	mov	r5,r4
 400ea90:	11000017 	ldw	r4,0(r2)
 400ea94:	400e9c41 	jmpi	400e9c4 <_puts_r>

0400ea98 <_sbrk_r>:
 400ea98:	defffd04 	addi	sp,sp,-12
 400ea9c:	dc000015 	stw	r16,0(sp)
 400eaa0:	040103f4 	movhi	r16,1039
 400eaa4:	dc400115 	stw	r17,4(sp)
 400eaa8:	840c0a04 	addi	r16,r16,12328
 400eaac:	2023883a 	mov	r17,r4
 400eab0:	2809883a 	mov	r4,r5
 400eab4:	dfc00215 	stw	ra,8(sp)
 400eab8:	80000015 	stw	zero,0(r16)
 400eabc:	401c1300 	call	401c130 <sbrk>
 400eac0:	00ffffc4 	movi	r3,-1
 400eac4:	10c00526 	beq	r2,r3,400eadc <_sbrk_r+0x44>
 400eac8:	dfc00217 	ldw	ra,8(sp)
 400eacc:	dc400117 	ldw	r17,4(sp)
 400ead0:	dc000017 	ldw	r16,0(sp)
 400ead4:	dec00304 	addi	sp,sp,12
 400ead8:	f800283a 	ret
 400eadc:	80c00017 	ldw	r3,0(r16)
 400eae0:	183ff926 	beq	r3,zero,400eac8 <__alt_mem_epcs_flash_controller_0+0xfb00dac8>
 400eae4:	88c00015 	stw	r3,0(r17)
 400eae8:	003ff706 	br	400eac8 <__alt_mem_epcs_flash_controller_0+0xfb00dac8>

0400eaec <_sprintf_r>:
 400eaec:	deffe404 	addi	sp,sp,-112
 400eaf0:	2807883a 	mov	r3,r5
 400eaf4:	dfc01a15 	stw	ra,104(sp)
 400eaf8:	d9c01b15 	stw	r7,108(sp)
 400eafc:	00a00034 	movhi	r2,32768
 400eb00:	10bfffc4 	addi	r2,r2,-1
 400eb04:	02008204 	movi	r8,520
 400eb08:	d8800215 	stw	r2,8(sp)
 400eb0c:	d8800515 	stw	r2,20(sp)
 400eb10:	d9c01b04 	addi	r7,sp,108
 400eb14:	d80b883a 	mov	r5,sp
 400eb18:	00bfffc4 	movi	r2,-1
 400eb1c:	d8c00015 	stw	r3,0(sp)
 400eb20:	d8c00415 	stw	r3,16(sp)
 400eb24:	da00030d 	sth	r8,12(sp)
 400eb28:	d880038d 	sth	r2,14(sp)
 400eb2c:	400ecd80 	call	400ecd8 <___svfprintf_internal_r>
 400eb30:	d8c00017 	ldw	r3,0(sp)
 400eb34:	18000005 	stb	zero,0(r3)
 400eb38:	dfc01a17 	ldw	ra,104(sp)
 400eb3c:	dec01c04 	addi	sp,sp,112
 400eb40:	f800283a 	ret

0400eb44 <sprintf>:
 400eb44:	deffe304 	addi	sp,sp,-116
 400eb48:	2007883a 	mov	r3,r4
 400eb4c:	dfc01a15 	stw	ra,104(sp)
 400eb50:	d9801b15 	stw	r6,108(sp)
 400eb54:	d9c01c15 	stw	r7,112(sp)
 400eb58:	010103f4 	movhi	r4,1039
 400eb5c:	210bf604 	addi	r4,r4,12248
 400eb60:	21000017 	ldw	r4,0(r4)
 400eb64:	00a00034 	movhi	r2,32768
 400eb68:	10bfffc4 	addi	r2,r2,-1
 400eb6c:	280d883a 	mov	r6,r5
 400eb70:	02008204 	movi	r8,520
 400eb74:	d8800215 	stw	r2,8(sp)
 400eb78:	d8800515 	stw	r2,20(sp)
 400eb7c:	d9c01b04 	addi	r7,sp,108
 400eb80:	d80b883a 	mov	r5,sp
 400eb84:	00bfffc4 	movi	r2,-1
 400eb88:	d8c00015 	stw	r3,0(sp)
 400eb8c:	d8c00415 	stw	r3,16(sp)
 400eb90:	da00030d 	sth	r8,12(sp)
 400eb94:	d880038d 	sth	r2,14(sp)
 400eb98:	400ecd80 	call	400ecd8 <___svfprintf_internal_r>
 400eb9c:	d8c00017 	ldw	r3,0(sp)
 400eba0:	18000005 	stb	zero,0(r3)
 400eba4:	dfc01a17 	ldw	ra,104(sp)
 400eba8:	dec01d04 	addi	sp,sp,116
 400ebac:	f800283a 	ret

0400ebb0 <strcpy>:
 400ebb0:	2906b03a 	or	r3,r5,r4
 400ebb4:	18c000cc 	andi	r3,r3,3
 400ebb8:	2005883a 	mov	r2,r4
 400ebbc:	1800161e 	bne	r3,zero,400ec18 <strcpy+0x68>
 400ebc0:	29c00017 	ldw	r7,0(r5)
 400ebc4:	02ffbff4 	movhi	r11,65279
 400ebc8:	5affbfc4 	addi	r11,r11,-257
 400ebcc:	02a02074 	movhi	r10,32897
 400ebd0:	01c6303a 	nor	r3,zero,r7
 400ebd4:	3ac9883a 	add	r4,r7,r11
 400ebd8:	52a02004 	addi	r10,r10,-32640
 400ebdc:	20c6703a 	and	r3,r4,r3
 400ebe0:	1a86703a 	and	r3,r3,r10
 400ebe4:	18000c1e 	bne	r3,zero,400ec18 <strcpy+0x68>
 400ebe8:	1011883a 	mov	r8,r2
 400ebec:	41c00015 	stw	r7,0(r8)
 400ebf0:	29400104 	addi	r5,r5,4
 400ebf4:	29c00017 	ldw	r7,0(r5)
 400ebf8:	41800104 	addi	r6,r8,4
 400ebfc:	3011883a 	mov	r8,r6
 400ec00:	3ad3883a 	add	r9,r7,r11
 400ec04:	01c6303a 	nor	r3,zero,r7
 400ec08:	48c6703a 	and	r3,r9,r3
 400ec0c:	1a86703a 	and	r3,r3,r10
 400ec10:	183ff626 	beq	r3,zero,400ebec <__alt_mem_epcs_flash_controller_0+0xfb00dbec>
 400ec14:	00000106 	br	400ec1c <strcpy+0x6c>
 400ec18:	100d883a 	mov	r6,r2
 400ec1c:	28c00003 	ldbu	r3,0(r5)
 400ec20:	31800044 	addi	r6,r6,1
 400ec24:	29400044 	addi	r5,r5,1
 400ec28:	30ffffc5 	stb	r3,-1(r6)
 400ec2c:	18c03fcc 	andi	r3,r3,255
 400ec30:	18c0201c 	xori	r3,r3,128
 400ec34:	18ffe004 	addi	r3,r3,-128
 400ec38:	183ff81e 	bne	r3,zero,400ec1c <__alt_mem_epcs_flash_controller_0+0xfb00dc1c>
 400ec3c:	f800283a 	ret

0400ec40 <strlen>:
 400ec40:	208000cc 	andi	r2,r4,3
 400ec44:	10002026 	beq	r2,zero,400ecc8 <strlen+0x88>
 400ec48:	20800007 	ldb	r2,0(r4)
 400ec4c:	10002026 	beq	r2,zero,400ecd0 <strlen+0x90>
 400ec50:	2005883a 	mov	r2,r4
 400ec54:	00000206 	br	400ec60 <strlen+0x20>
 400ec58:	10c00007 	ldb	r3,0(r2)
 400ec5c:	18001826 	beq	r3,zero,400ecc0 <strlen+0x80>
 400ec60:	10800044 	addi	r2,r2,1
 400ec64:	10c000cc 	andi	r3,r2,3
 400ec68:	183ffb1e 	bne	r3,zero,400ec58 <__alt_mem_epcs_flash_controller_0+0xfb00dc58>
 400ec6c:	10c00017 	ldw	r3,0(r2)
 400ec70:	01ffbff4 	movhi	r7,65279
 400ec74:	39ffbfc4 	addi	r7,r7,-257
 400ec78:	00ca303a 	nor	r5,zero,r3
 400ec7c:	01a02074 	movhi	r6,32897
 400ec80:	19c7883a 	add	r3,r3,r7
 400ec84:	31a02004 	addi	r6,r6,-32640
 400ec88:	1946703a 	and	r3,r3,r5
 400ec8c:	1986703a 	and	r3,r3,r6
 400ec90:	1800091e 	bne	r3,zero,400ecb8 <strlen+0x78>
 400ec94:	10800104 	addi	r2,r2,4
 400ec98:	10c00017 	ldw	r3,0(r2)
 400ec9c:	19cb883a 	add	r5,r3,r7
 400eca0:	00c6303a 	nor	r3,zero,r3
 400eca4:	28c6703a 	and	r3,r5,r3
 400eca8:	1986703a 	and	r3,r3,r6
 400ecac:	183ff926 	beq	r3,zero,400ec94 <__alt_mem_epcs_flash_controller_0+0xfb00dc94>
 400ecb0:	00000106 	br	400ecb8 <strlen+0x78>
 400ecb4:	10800044 	addi	r2,r2,1
 400ecb8:	10c00007 	ldb	r3,0(r2)
 400ecbc:	183ffd1e 	bne	r3,zero,400ecb4 <__alt_mem_epcs_flash_controller_0+0xfb00dcb4>
 400ecc0:	1105c83a 	sub	r2,r2,r4
 400ecc4:	f800283a 	ret
 400ecc8:	2005883a 	mov	r2,r4
 400eccc:	003fe706 	br	400ec6c <__alt_mem_epcs_flash_controller_0+0xfb00dc6c>
 400ecd0:	0005883a 	mov	r2,zero
 400ecd4:	f800283a 	ret

0400ecd8 <___svfprintf_internal_r>:
 400ecd8:	deffb704 	addi	sp,sp,-292
 400ecdc:	dfc04815 	stw	ra,288(sp)
 400ece0:	ddc04615 	stw	r23,280(sp)
 400ece4:	d9402c15 	stw	r5,176(sp)
 400ece8:	d9003915 	stw	r4,228(sp)
 400ecec:	302f883a 	mov	r23,r6
 400ecf0:	d9c02d15 	stw	r7,180(sp)
 400ecf4:	df004715 	stw	fp,284(sp)
 400ecf8:	dd804515 	stw	r22,276(sp)
 400ecfc:	dd404415 	stw	r21,272(sp)
 400ed00:	dd004315 	stw	r20,268(sp)
 400ed04:	dcc04215 	stw	r19,264(sp)
 400ed08:	dc804115 	stw	r18,260(sp)
 400ed0c:	dc404015 	stw	r17,256(sp)
 400ed10:	dc003f15 	stw	r16,252(sp)
 400ed14:	4015cc80 	call	4015cc8 <_localeconv_r>
 400ed18:	10800017 	ldw	r2,0(r2)
 400ed1c:	1009883a 	mov	r4,r2
 400ed20:	d8803415 	stw	r2,208(sp)
 400ed24:	400ec400 	call	400ec40 <strlen>
 400ed28:	d8c02c17 	ldw	r3,176(sp)
 400ed2c:	d8803815 	stw	r2,224(sp)
 400ed30:	1880030b 	ldhu	r2,12(r3)
 400ed34:	1080200c 	andi	r2,r2,128
 400ed38:	10000226 	beq	r2,zero,400ed44 <___svfprintf_internal_r+0x6c>
 400ed3c:	18800417 	ldw	r2,16(r3)
 400ed40:	10067f26 	beq	r2,zero,4010740 <___svfprintf_internal_r+0x1a68>
 400ed44:	dcc03917 	ldw	r19,228(sp)
 400ed48:	d8c00404 	addi	r3,sp,16
 400ed4c:	05410234 	movhi	r21,1032
 400ed50:	d9001e04 	addi	r4,sp,120
 400ed54:	ad553684 	addi	r21,r21,21722
 400ed58:	d8c01e15 	stw	r3,120(sp)
 400ed5c:	d8002015 	stw	zero,128(sp)
 400ed60:	d8001f15 	stw	zero,124(sp)
 400ed64:	d8003315 	stw	zero,204(sp)
 400ed68:	d8003615 	stw	zero,216(sp)
 400ed6c:	d8003715 	stw	zero,220(sp)
 400ed70:	1811883a 	mov	r8,r3
 400ed74:	d8003a15 	stw	zero,232(sp)
 400ed78:	d8003b15 	stw	zero,236(sp)
 400ed7c:	d8002f15 	stw	zero,188(sp)
 400ed80:	d9002815 	stw	r4,160(sp)
 400ed84:	b8800007 	ldb	r2,0(r23)
 400ed88:	10026726 	beq	r2,zero,400f728 <___svfprintf_internal_r+0xa50>
 400ed8c:	00c00944 	movi	r3,37
 400ed90:	b821883a 	mov	r16,r23
 400ed94:	10c0021e 	bne	r2,r3,400eda0 <___svfprintf_internal_r+0xc8>
 400ed98:	00001406 	br	400edec <___svfprintf_internal_r+0x114>
 400ed9c:	10c00326 	beq	r2,r3,400edac <___svfprintf_internal_r+0xd4>
 400eda0:	84000044 	addi	r16,r16,1
 400eda4:	80800007 	ldb	r2,0(r16)
 400eda8:	103ffc1e 	bne	r2,zero,400ed9c <__alt_mem_epcs_flash_controller_0+0xfb00dd9c>
 400edac:	85e3c83a 	sub	r17,r16,r23
 400edb0:	88000e26 	beq	r17,zero,400edec <___svfprintf_internal_r+0x114>
 400edb4:	d8c02017 	ldw	r3,128(sp)
 400edb8:	d8801f17 	ldw	r2,124(sp)
 400edbc:	45c00015 	stw	r23,0(r8)
 400edc0:	1c47883a 	add	r3,r3,r17
 400edc4:	10800044 	addi	r2,r2,1
 400edc8:	d8c02015 	stw	r3,128(sp)
 400edcc:	44400115 	stw	r17,4(r8)
 400edd0:	d8801f15 	stw	r2,124(sp)
 400edd4:	00c001c4 	movi	r3,7
 400edd8:	18809716 	blt	r3,r2,400f038 <___svfprintf_internal_r+0x360>
 400eddc:	42000204 	addi	r8,r8,8
 400ede0:	d9402f17 	ldw	r5,188(sp)
 400ede4:	2c4b883a 	add	r5,r5,r17
 400ede8:	d9402f15 	stw	r5,188(sp)
 400edec:	80800007 	ldb	r2,0(r16)
 400edf0:	10009826 	beq	r2,zero,400f054 <___svfprintf_internal_r+0x37c>
 400edf4:	84400047 	ldb	r17,1(r16)
 400edf8:	00bfffc4 	movi	r2,-1
 400edfc:	85c00044 	addi	r23,r16,1
 400ee00:	d8002785 	stb	zero,158(sp)
 400ee04:	0007883a 	mov	r3,zero
 400ee08:	000f883a 	mov	r7,zero
 400ee0c:	d8802915 	stw	r2,164(sp)
 400ee10:	d8003115 	stw	zero,196(sp)
 400ee14:	0025883a 	mov	r18,zero
 400ee18:	01401604 	movi	r5,88
 400ee1c:	01800244 	movi	r6,9
 400ee20:	02800a84 	movi	r10,42
 400ee24:	02401b04 	movi	r9,108
 400ee28:	bdc00044 	addi	r23,r23,1
 400ee2c:	88bff804 	addi	r2,r17,-32
 400ee30:	2882f036 	bltu	r5,r2,400f9f4 <___svfprintf_internal_r+0xd1c>
 400ee34:	100490ba 	slli	r2,r2,2
 400ee38:	01010074 	movhi	r4,1025
 400ee3c:	213b9304 	addi	r4,r4,-4532
 400ee40:	1105883a 	add	r2,r2,r4
 400ee44:	10800017 	ldw	r2,0(r2)
 400ee48:	1000683a 	jmp	r2
 400ee4c:	0400f95c 	xori	r16,zero,997
 400ee50:	0400f9f4 	movhi	r16,999
 400ee54:	0400f9f4 	movhi	r16,999
 400ee58:	0400f950 	cmplti	r16,zero,997
 400ee5c:	0400f9f4 	movhi	r16,999
 400ee60:	0400f9f4 	movhi	r16,999
 400ee64:	0400f9f4 	movhi	r16,999
 400ee68:	0400f9f4 	movhi	r16,999
 400ee6c:	0400f9f4 	movhi	r16,999
 400ee70:	0400f9f4 	movhi	r16,999
 400ee74:	0400f0b0 	cmpltui	r16,zero,962
 400ee78:	0400f88c 	andi	r16,zero,994
 400ee7c:	0400f9f4 	movhi	r16,999
 400ee80:	0400efc0 	call	400efc <__alt_mem_sdram-0x3bff104>
 400ee84:	0400f0d8 	cmpnei	r16,zero,963
 400ee88:	0400f9f4 	movhi	r16,999
 400ee8c:	0400f14c 	andi	r16,zero,965
 400ee90:	0400f118 	cmpnei	r16,zero,964
 400ee94:	0400f118 	cmpnei	r16,zero,964
 400ee98:	0400f118 	cmpnei	r16,zero,964
 400ee9c:	0400f118 	cmpnei	r16,zero,964
 400eea0:	0400f118 	cmpnei	r16,zero,964
 400eea4:	0400f118 	cmpnei	r16,zero,964
 400eea8:	0400f118 	cmpnei	r16,zero,964
 400eeac:	0400f118 	cmpnei	r16,zero,964
 400eeb0:	0400f118 	cmpnei	r16,zero,964
 400eeb4:	0400f9f4 	movhi	r16,999
 400eeb8:	0400f9f4 	movhi	r16,999
 400eebc:	0400f9f4 	movhi	r16,999
 400eec0:	0400f9f4 	movhi	r16,999
 400eec4:	0400f9f4 	movhi	r16,999
 400eec8:	0400f9f4 	movhi	r16,999
 400eecc:	0400f9f4 	movhi	r16,999
 400eed0:	0400f9f4 	movhi	r16,999
 400eed4:	0400f9f4 	movhi	r16,999
 400eed8:	0400f9f4 	movhi	r16,999
 400eedc:	0400f204 	movi	r16,968
 400eee0:	0400f158 	cmpnei	r16,zero,965
 400eee4:	0400f9f4 	movhi	r16,999
 400eee8:	0400f158 	cmpnei	r16,zero,965
 400eeec:	0400f9f4 	movhi	r16,999
 400eef0:	0400f9f4 	movhi	r16,999
 400eef4:	0400f9f4 	movhi	r16,999
 400eef8:	0400f9f4 	movhi	r16,999
 400eefc:	0400f1f8 	rdprs	r16,zero,967
 400ef00:	0400f9f4 	movhi	r16,999
 400ef04:	0400f9f4 	movhi	r16,999
 400ef08:	0400f2c0 	call	400f2c <__alt_mem_sdram-0x3bff0d4>
 400ef0c:	0400f9f4 	movhi	r16,999
 400ef10:	0400f9f4 	movhi	r16,999
 400ef14:	0400f9f4 	movhi	r16,999
 400ef18:	0400f9f4 	movhi	r16,999
 400ef1c:	0400f9f4 	movhi	r16,999
 400ef20:	0400f730 	cmpltui	r16,zero,988
 400ef24:	0400f9f4 	movhi	r16,999
 400ef28:	0400f9f4 	movhi	r16,999
 400ef2c:	0400f790 	cmplti	r16,zero,990
 400ef30:	0400f9f4 	movhi	r16,999
 400ef34:	0400f9f4 	movhi	r16,999
 400ef38:	0400f9f4 	movhi	r16,999
 400ef3c:	0400f9f4 	movhi	r16,999
 400ef40:	0400f9f4 	movhi	r16,999
 400ef44:	0400f9f4 	movhi	r16,999
 400ef48:	0400f9f4 	movhi	r16,999
 400ef4c:	0400f9f4 	movhi	r16,999
 400ef50:	0400f9f4 	movhi	r16,999
 400ef54:	0400f9f4 	movhi	r16,999
 400ef58:	0400f840 	call	400f84 <__alt_mem_sdram-0x3bff07c>
 400ef5c:	0400f97c 	xorhi	r16,zero,997
 400ef60:	0400f158 	cmpnei	r16,zero,965
 400ef64:	0400f158 	cmpnei	r16,zero,965
 400ef68:	0400f158 	cmpnei	r16,zero,965
 400ef6c:	0400f9d0 	cmplti	r16,zero,999
 400ef70:	0400f97c 	xorhi	r16,zero,997
 400ef74:	0400f9f4 	movhi	r16,999
 400ef78:	0400f9f4 	movhi	r16,999
 400ef7c:	0400f98c 	andi	r16,zero,998
 400ef80:	0400f9f4 	movhi	r16,999
 400ef84:	0400f99c 	xori	r16,zero,998
 400ef88:	0400f87c 	xorhi	r16,zero,993
 400ef8c:	0400efcc 	andi	r16,zero,959
 400ef90:	0400f89c 	xori	r16,zero,994
 400ef94:	0400f9f4 	movhi	r16,999
 400ef98:	0400f8a8 	cmpgeui	r16,zero,994
 400ef9c:	0400f9f4 	movhi	r16,999
 400efa0:	0400f904 	movi	r16,996
 400efa4:	0400f9f4 	movhi	r16,999
 400efa8:	0400f9f4 	movhi	r16,999
 400efac:	0400f914 	movui	r16,996
 400efb0:	d9003117 	ldw	r4,196(sp)
 400efb4:	d8802d15 	stw	r2,180(sp)
 400efb8:	0109c83a 	sub	r4,zero,r4
 400efbc:	d9003115 	stw	r4,196(sp)
 400efc0:	94800114 	ori	r18,r18,4
 400efc4:	bc400007 	ldb	r17,0(r23)
 400efc8:	003f9706 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400efcc:	00800c04 	movi	r2,48
 400efd0:	d9002d17 	ldw	r4,180(sp)
 400efd4:	d9402917 	ldw	r5,164(sp)
 400efd8:	d8802705 	stb	r2,156(sp)
 400efdc:	00801e04 	movi	r2,120
 400efe0:	d8802745 	stb	r2,157(sp)
 400efe4:	d8002785 	stb	zero,158(sp)
 400efe8:	20c00104 	addi	r3,r4,4
 400efec:	25000017 	ldw	r20,0(r4)
 400eff0:	002d883a 	mov	r22,zero
 400eff4:	90800094 	ori	r2,r18,2
 400eff8:	28028616 	blt	r5,zero,400fa14 <___svfprintf_internal_r+0xd3c>
 400effc:	00bfdfc4 	movi	r2,-129
 400f000:	90a4703a 	and	r18,r18,r2
 400f004:	d8c02d15 	stw	r3,180(sp)
 400f008:	94800094 	ori	r18,r18,2
 400f00c:	a002731e 	bne	r20,zero,400f9dc <___svfprintf_internal_r+0xd04>
 400f010:	00810234 	movhi	r2,1032
 400f014:	10952f04 	addi	r2,r2,21692
 400f018:	d8803a15 	stw	r2,232(sp)
 400f01c:	04401e04 	movi	r17,120
 400f020:	d8c02917 	ldw	r3,164(sp)
 400f024:	0039883a 	mov	fp,zero
 400f028:	1801d526 	beq	r3,zero,400f780 <___svfprintf_internal_r+0xaa8>
 400f02c:	0029883a 	mov	r20,zero
 400f030:	002d883a 	mov	r22,zero
 400f034:	0001f106 	br	400f7fc <___svfprintf_internal_r+0xb24>
 400f038:	d9402c17 	ldw	r5,176(sp)
 400f03c:	d9801e04 	addi	r6,sp,120
 400f040:	9809883a 	mov	r4,r19
 400f044:	401786c0 	call	401786c <__ssprint_r>
 400f048:	1000081e 	bne	r2,zero,400f06c <___svfprintf_internal_r+0x394>
 400f04c:	da000404 	addi	r8,sp,16
 400f050:	003f6306 	br	400ede0 <__alt_mem_epcs_flash_controller_0+0xfb00dde0>
 400f054:	d8802017 	ldw	r2,128(sp)
 400f058:	10000426 	beq	r2,zero,400f06c <___svfprintf_internal_r+0x394>
 400f05c:	d9402c17 	ldw	r5,176(sp)
 400f060:	d9003917 	ldw	r4,228(sp)
 400f064:	d9801e04 	addi	r6,sp,120
 400f068:	401786c0 	call	401786c <__ssprint_r>
 400f06c:	d8802c17 	ldw	r2,176(sp)
 400f070:	10c0030b 	ldhu	r3,12(r2)
 400f074:	d8802f17 	ldw	r2,188(sp)
 400f078:	18c0100c 	andi	r3,r3,64
 400f07c:	1805f51e 	bne	r3,zero,4010854 <___svfprintf_internal_r+0x1b7c>
 400f080:	dfc04817 	ldw	ra,288(sp)
 400f084:	df004717 	ldw	fp,284(sp)
 400f088:	ddc04617 	ldw	r23,280(sp)
 400f08c:	dd804517 	ldw	r22,276(sp)
 400f090:	dd404417 	ldw	r21,272(sp)
 400f094:	dd004317 	ldw	r20,268(sp)
 400f098:	dcc04217 	ldw	r19,264(sp)
 400f09c:	dc804117 	ldw	r18,260(sp)
 400f0a0:	dc404017 	ldw	r17,256(sp)
 400f0a4:	dc003f17 	ldw	r16,252(sp)
 400f0a8:	dec04904 	addi	sp,sp,292
 400f0ac:	f800283a 	ret
 400f0b0:	d8802d17 	ldw	r2,180(sp)
 400f0b4:	d9002d17 	ldw	r4,180(sp)
 400f0b8:	10800017 	ldw	r2,0(r2)
 400f0bc:	d8803115 	stw	r2,196(sp)
 400f0c0:	20800104 	addi	r2,r4,4
 400f0c4:	d9003117 	ldw	r4,196(sp)
 400f0c8:	203fb916 	blt	r4,zero,400efb0 <__alt_mem_epcs_flash_controller_0+0xfb00dfb0>
 400f0cc:	d8802d15 	stw	r2,180(sp)
 400f0d0:	bc400007 	ldb	r17,0(r23)
 400f0d4:	003f5406 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f0d8:	bc400007 	ldb	r17,0(r23)
 400f0dc:	bac00044 	addi	r11,r23,1
 400f0e0:	8a873926 	beq	r17,r10,4010dc8 <___svfprintf_internal_r+0x20f0>
 400f0e4:	88bff404 	addi	r2,r17,-48
 400f0e8:	0009883a 	mov	r4,zero
 400f0ec:	30868836 	bltu	r6,r2,4010b10 <___svfprintf_internal_r+0x1e38>
 400f0f0:	5c400007 	ldb	r17,0(r11)
 400f0f4:	210002a4 	muli	r4,r4,10
 400f0f8:	5dc00044 	addi	r23,r11,1
 400f0fc:	b817883a 	mov	r11,r23
 400f100:	2089883a 	add	r4,r4,r2
 400f104:	88bff404 	addi	r2,r17,-48
 400f108:	30bff92e 	bgeu	r6,r2,400f0f0 <__alt_mem_epcs_flash_controller_0+0xfb00e0f0>
 400f10c:	2005d716 	blt	r4,zero,401086c <___svfprintf_internal_r+0x1b94>
 400f110:	d9002915 	stw	r4,164(sp)
 400f114:	003f4506 	br	400ee2c <__alt_mem_epcs_flash_controller_0+0xfb00de2c>
 400f118:	b809883a 	mov	r4,r23
 400f11c:	d8003115 	stw	zero,196(sp)
 400f120:	88bff404 	addi	r2,r17,-48
 400f124:	0017883a 	mov	r11,zero
 400f128:	24400007 	ldb	r17,0(r4)
 400f12c:	5ac002a4 	muli	r11,r11,10
 400f130:	bdc00044 	addi	r23,r23,1
 400f134:	b809883a 	mov	r4,r23
 400f138:	12d7883a 	add	r11,r2,r11
 400f13c:	88bff404 	addi	r2,r17,-48
 400f140:	30bff92e 	bgeu	r6,r2,400f128 <__alt_mem_epcs_flash_controller_0+0xfb00e128>
 400f144:	dac03115 	stw	r11,196(sp)
 400f148:	003f3806 	br	400ee2c <__alt_mem_epcs_flash_controller_0+0xfb00de2c>
 400f14c:	94802014 	ori	r18,r18,128
 400f150:	bc400007 	ldb	r17,0(r23)
 400f154:	003f3406 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f158:	18c03fcc 	andi	r3,r3,255
 400f15c:	1807471e 	bne	r3,zero,4010e7c <___svfprintf_internal_r+0x21a4>
 400f160:	9080020c 	andi	r2,r18,8
 400f164:	10047d26 	beq	r2,zero,401035c <___svfprintf_internal_r+0x1684>
 400f168:	d8c02d17 	ldw	r3,180(sp)
 400f16c:	d9002d17 	ldw	r4,180(sp)
 400f170:	d9402d17 	ldw	r5,180(sp)
 400f174:	18c00017 	ldw	r3,0(r3)
 400f178:	21000117 	ldw	r4,4(r4)
 400f17c:	29400204 	addi	r5,r5,8
 400f180:	d8c03615 	stw	r3,216(sp)
 400f184:	d9003715 	stw	r4,220(sp)
 400f188:	d9402d15 	stw	r5,180(sp)
 400f18c:	d9003617 	ldw	r4,216(sp)
 400f190:	d9403717 	ldw	r5,220(sp)
 400f194:	da003e15 	stw	r8,248(sp)
 400f198:	04000044 	movi	r16,1
 400f19c:	4009fa00 	call	4009fa0 <__fpclassifyd>
 400f1a0:	da003e17 	ldw	r8,248(sp)
 400f1a4:	14044b1e 	bne	r2,r16,40102d4 <___svfprintf_internal_r+0x15fc>
 400f1a8:	d9003617 	ldw	r4,216(sp)
 400f1ac:	d9403717 	ldw	r5,220(sp)
 400f1b0:	000d883a 	mov	r6,zero
 400f1b4:	000f883a 	mov	r7,zero
 400f1b8:	400c9240 	call	400c924 <__ledf2>
 400f1bc:	da003e17 	ldw	r8,248(sp)
 400f1c0:	1005f316 	blt	r2,zero,4010990 <___svfprintf_internal_r+0x1cb8>
 400f1c4:	df002783 	ldbu	fp,158(sp)
 400f1c8:	008011c4 	movi	r2,71
 400f1cc:	1445590e 	bge	r2,r17,4010734 <___svfprintf_internal_r+0x1a5c>
 400f1d0:	04010234 	movhi	r16,1032
 400f1d4:	84152704 	addi	r16,r16,21660
 400f1d8:	00c000c4 	movi	r3,3
 400f1dc:	00bfdfc4 	movi	r2,-129
 400f1e0:	d8c02a15 	stw	r3,168(sp)
 400f1e4:	90a4703a 	and	r18,r18,r2
 400f1e8:	d8c02e15 	stw	r3,184(sp)
 400f1ec:	d8002915 	stw	zero,164(sp)
 400f1f0:	d8003215 	stw	zero,200(sp)
 400f1f4:	00006606 	br	400f390 <___svfprintf_internal_r+0x6b8>
 400f1f8:	94800214 	ori	r18,r18,8
 400f1fc:	bc400007 	ldb	r17,0(r23)
 400f200:	003f0906 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f204:	18c03fcc 	andi	r3,r3,255
 400f208:	1807181e 	bne	r3,zero,4010e6c <___svfprintf_internal_r+0x2194>
 400f20c:	94800414 	ori	r18,r18,16
 400f210:	9080080c 	andi	r2,r18,32
 400f214:	10039626 	beq	r2,zero,4010070 <___svfprintf_internal_r+0x1398>
 400f218:	d9402d17 	ldw	r5,180(sp)
 400f21c:	28800117 	ldw	r2,4(r5)
 400f220:	2d000017 	ldw	r20,0(r5)
 400f224:	29400204 	addi	r5,r5,8
 400f228:	d9402d15 	stw	r5,180(sp)
 400f22c:	102d883a 	mov	r22,r2
 400f230:	10039816 	blt	r2,zero,4010094 <___svfprintf_internal_r+0x13bc>
 400f234:	d9402917 	ldw	r5,164(sp)
 400f238:	df002783 	ldbu	fp,158(sp)
 400f23c:	2803ab16 	blt	r5,zero,40100ec <___svfprintf_internal_r+0x1414>
 400f240:	00ffdfc4 	movi	r3,-129
 400f244:	a584b03a 	or	r2,r20,r22
 400f248:	90e4703a 	and	r18,r18,r3
 400f24c:	10014a26 	beq	r2,zero,400f778 <___svfprintf_internal_r+0xaa0>
 400f250:	b0034b26 	beq	r22,zero,400ff80 <___svfprintf_internal_r+0x12a8>
 400f254:	dc402a15 	stw	r17,168(sp)
 400f258:	dc001e04 	addi	r16,sp,120
 400f25c:	b023883a 	mov	r17,r22
 400f260:	402d883a 	mov	r22,r8
 400f264:	a009883a 	mov	r4,r20
 400f268:	880b883a 	mov	r5,r17
 400f26c:	01800284 	movi	r6,10
 400f270:	000f883a 	mov	r7,zero
 400f274:	401b16c0 	call	401b16c <__umoddi3>
 400f278:	10800c04 	addi	r2,r2,48
 400f27c:	843fffc4 	addi	r16,r16,-1
 400f280:	a009883a 	mov	r4,r20
 400f284:	880b883a 	mov	r5,r17
 400f288:	80800005 	stb	r2,0(r16)
 400f28c:	01800284 	movi	r6,10
 400f290:	000f883a 	mov	r7,zero
 400f294:	401abf40 	call	401abf4 <__udivdi3>
 400f298:	1029883a 	mov	r20,r2
 400f29c:	10c4b03a 	or	r2,r2,r3
 400f2a0:	1823883a 	mov	r17,r3
 400f2a4:	103fef1e 	bne	r2,zero,400f264 <__alt_mem_epcs_flash_controller_0+0xfb00e264>
 400f2a8:	d8c02817 	ldw	r3,160(sp)
 400f2ac:	dc402a17 	ldw	r17,168(sp)
 400f2b0:	b011883a 	mov	r8,r22
 400f2b4:	1c07c83a 	sub	r3,r3,r16
 400f2b8:	d8c02e15 	stw	r3,184(sp)
 400f2bc:	00002e06 	br	400f378 <___svfprintf_internal_r+0x6a0>
 400f2c0:	18c03fcc 	andi	r3,r3,255
 400f2c4:	1806e71e 	bne	r3,zero,4010e64 <___svfprintf_internal_r+0x218c>
 400f2c8:	94800414 	ori	r18,r18,16
 400f2cc:	9080080c 	andi	r2,r18,32
 400f2d0:	1002d426 	beq	r2,zero,400fe24 <___svfprintf_internal_r+0x114c>
 400f2d4:	d9402d17 	ldw	r5,180(sp)
 400f2d8:	d8c02917 	ldw	r3,164(sp)
 400f2dc:	d8002785 	stb	zero,158(sp)
 400f2e0:	28800204 	addi	r2,r5,8
 400f2e4:	2d000017 	ldw	r20,0(r5)
 400f2e8:	2d800117 	ldw	r22,4(r5)
 400f2ec:	18041516 	blt	r3,zero,4010344 <___svfprintf_internal_r+0x166c>
 400f2f0:	013fdfc4 	movi	r4,-129
 400f2f4:	a586b03a 	or	r3,r20,r22
 400f2f8:	d8802d15 	stw	r2,180(sp)
 400f2fc:	9124703a 	and	r18,r18,r4
 400f300:	1802d51e 	bne	r3,zero,400fe58 <___svfprintf_internal_r+0x1180>
 400f304:	d9402917 	ldw	r5,164(sp)
 400f308:	0039883a 	mov	fp,zero
 400f30c:	2806be26 	beq	r5,zero,4010e08 <___svfprintf_internal_r+0x2130>
 400f310:	0029883a 	mov	r20,zero
 400f314:	002d883a 	mov	r22,zero
 400f318:	dc001e04 	addi	r16,sp,120
 400f31c:	a006d0fa 	srli	r3,r20,3
 400f320:	b008977a 	slli	r4,r22,29
 400f324:	b02cd0fa 	srli	r22,r22,3
 400f328:	a50001cc 	andi	r20,r20,7
 400f32c:	a0800c04 	addi	r2,r20,48
 400f330:	843fffc4 	addi	r16,r16,-1
 400f334:	20e8b03a 	or	r20,r4,r3
 400f338:	80800005 	stb	r2,0(r16)
 400f33c:	a586b03a 	or	r3,r20,r22
 400f340:	183ff61e 	bne	r3,zero,400f31c <__alt_mem_epcs_flash_controller_0+0xfb00e31c>
 400f344:	90c0004c 	andi	r3,r18,1
 400f348:	18013926 	beq	r3,zero,400f830 <___svfprintf_internal_r+0xb58>
 400f34c:	10803fcc 	andi	r2,r2,255
 400f350:	1080201c 	xori	r2,r2,128
 400f354:	10bfe004 	addi	r2,r2,-128
 400f358:	00c00c04 	movi	r3,48
 400f35c:	10c13426 	beq	r2,r3,400f830 <___svfprintf_internal_r+0xb58>
 400f360:	80ffffc5 	stb	r3,-1(r16)
 400f364:	d8c02817 	ldw	r3,160(sp)
 400f368:	80bfffc4 	addi	r2,r16,-1
 400f36c:	1021883a 	mov	r16,r2
 400f370:	1887c83a 	sub	r3,r3,r2
 400f374:	d8c02e15 	stw	r3,184(sp)
 400f378:	d8802e17 	ldw	r2,184(sp)
 400f37c:	d9002917 	ldw	r4,164(sp)
 400f380:	1100010e 	bge	r2,r4,400f388 <___svfprintf_internal_r+0x6b0>
 400f384:	2005883a 	mov	r2,r4
 400f388:	d8802a15 	stw	r2,168(sp)
 400f38c:	d8003215 	stw	zero,200(sp)
 400f390:	e7003fcc 	andi	fp,fp,255
 400f394:	e700201c 	xori	fp,fp,128
 400f398:	e73fe004 	addi	fp,fp,-128
 400f39c:	e0000326 	beq	fp,zero,400f3ac <___svfprintf_internal_r+0x6d4>
 400f3a0:	d8c02a17 	ldw	r3,168(sp)
 400f3a4:	18c00044 	addi	r3,r3,1
 400f3a8:	d8c02a15 	stw	r3,168(sp)
 400f3ac:	90c0008c 	andi	r3,r18,2
 400f3b0:	d8c02b15 	stw	r3,172(sp)
 400f3b4:	18000326 	beq	r3,zero,400f3c4 <___svfprintf_internal_r+0x6ec>
 400f3b8:	d8c02a17 	ldw	r3,168(sp)
 400f3bc:	18c00084 	addi	r3,r3,2
 400f3c0:	d8c02a15 	stw	r3,168(sp)
 400f3c4:	90c0210c 	andi	r3,r18,132
 400f3c8:	d8c03015 	stw	r3,192(sp)
 400f3cc:	1801a11e 	bne	r3,zero,400fa54 <___svfprintf_internal_r+0xd7c>
 400f3d0:	d9003117 	ldw	r4,196(sp)
 400f3d4:	d8c02a17 	ldw	r3,168(sp)
 400f3d8:	20e9c83a 	sub	r20,r4,r3
 400f3dc:	05019d0e 	bge	zero,r20,400fa54 <___svfprintf_internal_r+0xd7c>
 400f3e0:	02400404 	movi	r9,16
 400f3e4:	d8c02017 	ldw	r3,128(sp)
 400f3e8:	d8801f17 	ldw	r2,124(sp)
 400f3ec:	4d051b0e 	bge	r9,r20,401085c <___svfprintf_internal_r+0x1b84>
 400f3f0:	01410234 	movhi	r5,1032
 400f3f4:	29553a84 	addi	r5,r5,21738
 400f3f8:	dc403c15 	stw	r17,240(sp)
 400f3fc:	d9403515 	stw	r5,212(sp)
 400f400:	a023883a 	mov	r17,r20
 400f404:	482d883a 	mov	r22,r9
 400f408:	9029883a 	mov	r20,r18
 400f40c:	070001c4 	movi	fp,7
 400f410:	8025883a 	mov	r18,r16
 400f414:	dc002c17 	ldw	r16,176(sp)
 400f418:	00000306 	br	400f428 <___svfprintf_internal_r+0x750>
 400f41c:	8c7ffc04 	addi	r17,r17,-16
 400f420:	42000204 	addi	r8,r8,8
 400f424:	b440130e 	bge	r22,r17,400f474 <___svfprintf_internal_r+0x79c>
 400f428:	01010234 	movhi	r4,1032
 400f42c:	18c00404 	addi	r3,r3,16
 400f430:	10800044 	addi	r2,r2,1
 400f434:	21153a84 	addi	r4,r4,21738
 400f438:	41000015 	stw	r4,0(r8)
 400f43c:	45800115 	stw	r22,4(r8)
 400f440:	d8c02015 	stw	r3,128(sp)
 400f444:	d8801f15 	stw	r2,124(sp)
 400f448:	e0bff40e 	bge	fp,r2,400f41c <__alt_mem_epcs_flash_controller_0+0xfb00e41c>
 400f44c:	d9801e04 	addi	r6,sp,120
 400f450:	800b883a 	mov	r5,r16
 400f454:	9809883a 	mov	r4,r19
 400f458:	401786c0 	call	401786c <__ssprint_r>
 400f45c:	103f031e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400f460:	8c7ffc04 	addi	r17,r17,-16
 400f464:	d8c02017 	ldw	r3,128(sp)
 400f468:	d8801f17 	ldw	r2,124(sp)
 400f46c:	da000404 	addi	r8,sp,16
 400f470:	b47fed16 	blt	r22,r17,400f428 <__alt_mem_epcs_flash_controller_0+0xfb00e428>
 400f474:	9021883a 	mov	r16,r18
 400f478:	a025883a 	mov	r18,r20
 400f47c:	8829883a 	mov	r20,r17
 400f480:	dc403c17 	ldw	r17,240(sp)
 400f484:	d9403517 	ldw	r5,212(sp)
 400f488:	a0c7883a 	add	r3,r20,r3
 400f48c:	10800044 	addi	r2,r2,1
 400f490:	41400015 	stw	r5,0(r8)
 400f494:	45000115 	stw	r20,4(r8)
 400f498:	d8c02015 	stw	r3,128(sp)
 400f49c:	d8801f15 	stw	r2,124(sp)
 400f4a0:	010001c4 	movi	r4,7
 400f4a4:	20829f16 	blt	r4,r2,400ff24 <___svfprintf_internal_r+0x124c>
 400f4a8:	df002787 	ldb	fp,158(sp)
 400f4ac:	42000204 	addi	r8,r8,8
 400f4b0:	e0000c26 	beq	fp,zero,400f4e4 <___svfprintf_internal_r+0x80c>
 400f4b4:	d8801f17 	ldw	r2,124(sp)
 400f4b8:	d9002784 	addi	r4,sp,158
 400f4bc:	18c00044 	addi	r3,r3,1
 400f4c0:	10800044 	addi	r2,r2,1
 400f4c4:	41000015 	stw	r4,0(r8)
 400f4c8:	01000044 	movi	r4,1
 400f4cc:	41000115 	stw	r4,4(r8)
 400f4d0:	d8c02015 	stw	r3,128(sp)
 400f4d4:	d8801f15 	stw	r2,124(sp)
 400f4d8:	010001c4 	movi	r4,7
 400f4dc:	20823816 	blt	r4,r2,400fdc0 <___svfprintf_internal_r+0x10e8>
 400f4e0:	42000204 	addi	r8,r8,8
 400f4e4:	d8802b17 	ldw	r2,172(sp)
 400f4e8:	10000c26 	beq	r2,zero,400f51c <___svfprintf_internal_r+0x844>
 400f4ec:	d8801f17 	ldw	r2,124(sp)
 400f4f0:	d9002704 	addi	r4,sp,156
 400f4f4:	18c00084 	addi	r3,r3,2
 400f4f8:	10800044 	addi	r2,r2,1
 400f4fc:	41000015 	stw	r4,0(r8)
 400f500:	01000084 	movi	r4,2
 400f504:	41000115 	stw	r4,4(r8)
 400f508:	d8c02015 	stw	r3,128(sp)
 400f50c:	d8801f15 	stw	r2,124(sp)
 400f510:	010001c4 	movi	r4,7
 400f514:	20823216 	blt	r4,r2,400fde0 <___svfprintf_internal_r+0x1108>
 400f518:	42000204 	addi	r8,r8,8
 400f51c:	d9003017 	ldw	r4,192(sp)
 400f520:	00802004 	movi	r2,128
 400f524:	20819726 	beq	r4,r2,400fb84 <___svfprintf_internal_r+0xeac>
 400f528:	d9402917 	ldw	r5,164(sp)
 400f52c:	d8802e17 	ldw	r2,184(sp)
 400f530:	28adc83a 	sub	r22,r5,r2
 400f534:	05802f0e 	bge	zero,r22,400f5f4 <___svfprintf_internal_r+0x91c>
 400f538:	07000404 	movi	fp,16
 400f53c:	d8801f17 	ldw	r2,124(sp)
 400f540:	e583c00e 	bge	fp,r22,4010444 <___svfprintf_internal_r+0x176c>
 400f544:	01410234 	movhi	r5,1032
 400f548:	29553684 	addi	r5,r5,21722
 400f54c:	dc402915 	stw	r17,164(sp)
 400f550:	d9402b15 	stw	r5,172(sp)
 400f554:	b023883a 	mov	r17,r22
 400f558:	050001c4 	movi	r20,7
 400f55c:	902d883a 	mov	r22,r18
 400f560:	8025883a 	mov	r18,r16
 400f564:	dc002c17 	ldw	r16,176(sp)
 400f568:	00000306 	br	400f578 <___svfprintf_internal_r+0x8a0>
 400f56c:	8c7ffc04 	addi	r17,r17,-16
 400f570:	42000204 	addi	r8,r8,8
 400f574:	e440110e 	bge	fp,r17,400f5bc <___svfprintf_internal_r+0x8e4>
 400f578:	18c00404 	addi	r3,r3,16
 400f57c:	10800044 	addi	r2,r2,1
 400f580:	45400015 	stw	r21,0(r8)
 400f584:	47000115 	stw	fp,4(r8)
 400f588:	d8c02015 	stw	r3,128(sp)
 400f58c:	d8801f15 	stw	r2,124(sp)
 400f590:	a0bff60e 	bge	r20,r2,400f56c <__alt_mem_epcs_flash_controller_0+0xfb00e56c>
 400f594:	d9801e04 	addi	r6,sp,120
 400f598:	800b883a 	mov	r5,r16
 400f59c:	9809883a 	mov	r4,r19
 400f5a0:	401786c0 	call	401786c <__ssprint_r>
 400f5a4:	103eb11e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400f5a8:	8c7ffc04 	addi	r17,r17,-16
 400f5ac:	d8c02017 	ldw	r3,128(sp)
 400f5b0:	d8801f17 	ldw	r2,124(sp)
 400f5b4:	da000404 	addi	r8,sp,16
 400f5b8:	e47fef16 	blt	fp,r17,400f578 <__alt_mem_epcs_flash_controller_0+0xfb00e578>
 400f5bc:	9021883a 	mov	r16,r18
 400f5c0:	b025883a 	mov	r18,r22
 400f5c4:	882d883a 	mov	r22,r17
 400f5c8:	dc402917 	ldw	r17,164(sp)
 400f5cc:	d9002b17 	ldw	r4,172(sp)
 400f5d0:	1d87883a 	add	r3,r3,r22
 400f5d4:	10800044 	addi	r2,r2,1
 400f5d8:	41000015 	stw	r4,0(r8)
 400f5dc:	45800115 	stw	r22,4(r8)
 400f5e0:	d8c02015 	stw	r3,128(sp)
 400f5e4:	d8801f15 	stw	r2,124(sp)
 400f5e8:	010001c4 	movi	r4,7
 400f5ec:	2081ec16 	blt	r4,r2,400fda0 <___svfprintf_internal_r+0x10c8>
 400f5f0:	42000204 	addi	r8,r8,8
 400f5f4:	9080400c 	andi	r2,r18,256
 400f5f8:	1001181e 	bne	r2,zero,400fa5c <___svfprintf_internal_r+0xd84>
 400f5fc:	d9402e17 	ldw	r5,184(sp)
 400f600:	d8801f17 	ldw	r2,124(sp)
 400f604:	44000015 	stw	r16,0(r8)
 400f608:	1947883a 	add	r3,r3,r5
 400f60c:	10800044 	addi	r2,r2,1
 400f610:	41400115 	stw	r5,4(r8)
 400f614:	d8c02015 	stw	r3,128(sp)
 400f618:	d8801f15 	stw	r2,124(sp)
 400f61c:	010001c4 	movi	r4,7
 400f620:	2081d116 	blt	r4,r2,400fd68 <___svfprintf_internal_r+0x1090>
 400f624:	42000204 	addi	r8,r8,8
 400f628:	9480010c 	andi	r18,r18,4
 400f62c:	90003226 	beq	r18,zero,400f6f8 <___svfprintf_internal_r+0xa20>
 400f630:	d9403117 	ldw	r5,196(sp)
 400f634:	d8802a17 	ldw	r2,168(sp)
 400f638:	28a1c83a 	sub	r16,r5,r2
 400f63c:	04002e0e 	bge	zero,r16,400f6f8 <___svfprintf_internal_r+0xa20>
 400f640:	04400404 	movi	r17,16
 400f644:	d8801f17 	ldw	r2,124(sp)
 400f648:	8c04b90e 	bge	r17,r16,4010930 <___svfprintf_internal_r+0x1c58>
 400f64c:	01410234 	movhi	r5,1032
 400f650:	29553a84 	addi	r5,r5,21738
 400f654:	d9403515 	stw	r5,212(sp)
 400f658:	048001c4 	movi	r18,7
 400f65c:	dd002c17 	ldw	r20,176(sp)
 400f660:	00000306 	br	400f670 <___svfprintf_internal_r+0x998>
 400f664:	843ffc04 	addi	r16,r16,-16
 400f668:	42000204 	addi	r8,r8,8
 400f66c:	8c00130e 	bge	r17,r16,400f6bc <___svfprintf_internal_r+0x9e4>
 400f670:	01010234 	movhi	r4,1032
 400f674:	18c00404 	addi	r3,r3,16
 400f678:	10800044 	addi	r2,r2,1
 400f67c:	21153a84 	addi	r4,r4,21738
 400f680:	41000015 	stw	r4,0(r8)
 400f684:	44400115 	stw	r17,4(r8)
 400f688:	d8c02015 	stw	r3,128(sp)
 400f68c:	d8801f15 	stw	r2,124(sp)
 400f690:	90bff40e 	bge	r18,r2,400f664 <__alt_mem_epcs_flash_controller_0+0xfb00e664>
 400f694:	d9801e04 	addi	r6,sp,120
 400f698:	a00b883a 	mov	r5,r20
 400f69c:	9809883a 	mov	r4,r19
 400f6a0:	401786c0 	call	401786c <__ssprint_r>
 400f6a4:	103e711e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400f6a8:	843ffc04 	addi	r16,r16,-16
 400f6ac:	d8c02017 	ldw	r3,128(sp)
 400f6b0:	d8801f17 	ldw	r2,124(sp)
 400f6b4:	da000404 	addi	r8,sp,16
 400f6b8:	8c3fed16 	blt	r17,r16,400f670 <__alt_mem_epcs_flash_controller_0+0xfb00e670>
 400f6bc:	d9403517 	ldw	r5,212(sp)
 400f6c0:	1c07883a 	add	r3,r3,r16
 400f6c4:	10800044 	addi	r2,r2,1
 400f6c8:	41400015 	stw	r5,0(r8)
 400f6cc:	44000115 	stw	r16,4(r8)
 400f6d0:	d8c02015 	stw	r3,128(sp)
 400f6d4:	d8801f15 	stw	r2,124(sp)
 400f6d8:	010001c4 	movi	r4,7
 400f6dc:	2080060e 	bge	r4,r2,400f6f8 <___svfprintf_internal_r+0xa20>
 400f6e0:	d9402c17 	ldw	r5,176(sp)
 400f6e4:	d9801e04 	addi	r6,sp,120
 400f6e8:	9809883a 	mov	r4,r19
 400f6ec:	401786c0 	call	401786c <__ssprint_r>
 400f6f0:	103e5e1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400f6f4:	d8c02017 	ldw	r3,128(sp)
 400f6f8:	d8803117 	ldw	r2,196(sp)
 400f6fc:	d9002a17 	ldw	r4,168(sp)
 400f700:	1100010e 	bge	r2,r4,400f708 <___svfprintf_internal_r+0xa30>
 400f704:	2005883a 	mov	r2,r4
 400f708:	d9402f17 	ldw	r5,188(sp)
 400f70c:	288b883a 	add	r5,r5,r2
 400f710:	d9402f15 	stw	r5,188(sp)
 400f714:	18019c1e 	bne	r3,zero,400fd88 <___svfprintf_internal_r+0x10b0>
 400f718:	b8800007 	ldb	r2,0(r23)
 400f71c:	d8001f15 	stw	zero,124(sp)
 400f720:	da000404 	addi	r8,sp,16
 400f724:	103d991e 	bne	r2,zero,400ed8c <__alt_mem_epcs_flash_controller_0+0xfb00dd8c>
 400f728:	b821883a 	mov	r16,r23
 400f72c:	003daf06 	br	400edec <__alt_mem_epcs_flash_controller_0+0xfb00ddec>
 400f730:	18c03fcc 	andi	r3,r3,255
 400f734:	1805c71e 	bne	r3,zero,4010e54 <___svfprintf_internal_r+0x217c>
 400f738:	94800414 	ori	r18,r18,16
 400f73c:	9080080c 	andi	r2,r18,32
 400f740:	10020126 	beq	r2,zero,400ff48 <___svfprintf_internal_r+0x1270>
 400f744:	d8802d17 	ldw	r2,180(sp)
 400f748:	d9002917 	ldw	r4,164(sp)
 400f74c:	d8002785 	stb	zero,158(sp)
 400f750:	10c00204 	addi	r3,r2,8
 400f754:	15000017 	ldw	r20,0(r2)
 400f758:	15800117 	ldw	r22,4(r2)
 400f75c:	20038e16 	blt	r4,zero,4010598 <___svfprintf_internal_r+0x18c0>
 400f760:	013fdfc4 	movi	r4,-129
 400f764:	a584b03a 	or	r2,r20,r22
 400f768:	d8c02d15 	stw	r3,180(sp)
 400f76c:	9124703a 	and	r18,r18,r4
 400f770:	0039883a 	mov	fp,zero
 400f774:	103eb61e 	bne	r2,zero,400f250 <__alt_mem_epcs_flash_controller_0+0xfb00e250>
 400f778:	d8802917 	ldw	r2,164(sp)
 400f77c:	1002c81e 	bne	r2,zero,40102a0 <___svfprintf_internal_r+0x15c8>
 400f780:	d8002915 	stw	zero,164(sp)
 400f784:	d8002e15 	stw	zero,184(sp)
 400f788:	dc001e04 	addi	r16,sp,120
 400f78c:	003efa06 	br	400f378 <__alt_mem_epcs_flash_controller_0+0xfb00e378>
 400f790:	18c03fcc 	andi	r3,r3,255
 400f794:	1805ad1e 	bne	r3,zero,4010e4c <___svfprintf_internal_r+0x2174>
 400f798:	01410234 	movhi	r5,1032
 400f79c:	29552a04 	addi	r5,r5,21672
 400f7a0:	d9403a15 	stw	r5,232(sp)
 400f7a4:	9080080c 	andi	r2,r18,32
 400f7a8:	10006126 	beq	r2,zero,400f930 <___svfprintf_internal_r+0xc58>
 400f7ac:	d8802d17 	ldw	r2,180(sp)
 400f7b0:	15000017 	ldw	r20,0(r2)
 400f7b4:	15800117 	ldw	r22,4(r2)
 400f7b8:	10800204 	addi	r2,r2,8
 400f7bc:	d8802d15 	stw	r2,180(sp)
 400f7c0:	9080004c 	andi	r2,r18,1
 400f7c4:	10018e26 	beq	r2,zero,400fe00 <___svfprintf_internal_r+0x1128>
 400f7c8:	a584b03a 	or	r2,r20,r22
 400f7cc:	10030926 	beq	r2,zero,40103f4 <___svfprintf_internal_r+0x171c>
 400f7d0:	d8c02917 	ldw	r3,164(sp)
 400f7d4:	00800c04 	movi	r2,48
 400f7d8:	d8802705 	stb	r2,156(sp)
 400f7dc:	dc402745 	stb	r17,157(sp)
 400f7e0:	d8002785 	stb	zero,158(sp)
 400f7e4:	90800094 	ori	r2,r18,2
 400f7e8:	18048716 	blt	r3,zero,4010a08 <___svfprintf_internal_r+0x1d30>
 400f7ec:	00bfdfc4 	movi	r2,-129
 400f7f0:	90a4703a 	and	r18,r18,r2
 400f7f4:	94800094 	ori	r18,r18,2
 400f7f8:	0039883a 	mov	fp,zero
 400f7fc:	d9003a17 	ldw	r4,232(sp)
 400f800:	dc001e04 	addi	r16,sp,120
 400f804:	a08003cc 	andi	r2,r20,15
 400f808:	b006973a 	slli	r3,r22,28
 400f80c:	2085883a 	add	r2,r4,r2
 400f810:	a028d13a 	srli	r20,r20,4
 400f814:	10800003 	ldbu	r2,0(r2)
 400f818:	b02cd13a 	srli	r22,r22,4
 400f81c:	843fffc4 	addi	r16,r16,-1
 400f820:	1d28b03a 	or	r20,r3,r20
 400f824:	80800005 	stb	r2,0(r16)
 400f828:	a584b03a 	or	r2,r20,r22
 400f82c:	103ff51e 	bne	r2,zero,400f804 <__alt_mem_epcs_flash_controller_0+0xfb00e804>
 400f830:	d8c02817 	ldw	r3,160(sp)
 400f834:	1c07c83a 	sub	r3,r3,r16
 400f838:	d8c02e15 	stw	r3,184(sp)
 400f83c:	003ece06 	br	400f378 <__alt_mem_epcs_flash_controller_0+0xfb00e378>
 400f840:	d8c02d17 	ldw	r3,180(sp)
 400f844:	d9002d17 	ldw	r4,180(sp)
 400f848:	d8002785 	stb	zero,158(sp)
 400f84c:	18800017 	ldw	r2,0(r3)
 400f850:	21000104 	addi	r4,r4,4
 400f854:	00c00044 	movi	r3,1
 400f858:	d8c02a15 	stw	r3,168(sp)
 400f85c:	d8801405 	stb	r2,80(sp)
 400f860:	d9002d15 	stw	r4,180(sp)
 400f864:	d8c02e15 	stw	r3,184(sp)
 400f868:	d8002915 	stw	zero,164(sp)
 400f86c:	d8003215 	stw	zero,200(sp)
 400f870:	dc001404 	addi	r16,sp,80
 400f874:	0039883a 	mov	fp,zero
 400f878:	003ecc06 	br	400f3ac <__alt_mem_epcs_flash_controller_0+0xfb00e3ac>
 400f87c:	18c03fcc 	andi	r3,r3,255
 400f880:	183e9226 	beq	r3,zero,400f2cc <__alt_mem_epcs_flash_controller_0+0xfb00e2cc>
 400f884:	d9c02785 	stb	r7,158(sp)
 400f888:	003e9006 	br	400f2cc <__alt_mem_epcs_flash_controller_0+0xfb00e2cc>
 400f88c:	00c00044 	movi	r3,1
 400f890:	01c00ac4 	movi	r7,43
 400f894:	bc400007 	ldb	r17,0(r23)
 400f898:	003d6306 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f89c:	94800814 	ori	r18,r18,32
 400f8a0:	bc400007 	ldb	r17,0(r23)
 400f8a4:	003d6006 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f8a8:	d8c02d17 	ldw	r3,180(sp)
 400f8ac:	d8002785 	stb	zero,158(sp)
 400f8b0:	1c000017 	ldw	r16,0(r3)
 400f8b4:	1d000104 	addi	r20,r3,4
 400f8b8:	80040f26 	beq	r16,zero,40108f8 <___svfprintf_internal_r+0x1c20>
 400f8bc:	d9002917 	ldw	r4,164(sp)
 400f8c0:	2003dc16 	blt	r4,zero,4010834 <___svfprintf_internal_r+0x1b5c>
 400f8c4:	200d883a 	mov	r6,r4
 400f8c8:	000b883a 	mov	r5,zero
 400f8cc:	8009883a 	mov	r4,r16
 400f8d0:	da003e15 	stw	r8,248(sp)
 400f8d4:	4015eb40 	call	4015eb4 <memchr>
 400f8d8:	da003e17 	ldw	r8,248(sp)
 400f8dc:	10045826 	beq	r2,zero,4010a40 <___svfprintf_internal_r+0x1d68>
 400f8e0:	1405c83a 	sub	r2,r2,r16
 400f8e4:	d8802e15 	stw	r2,184(sp)
 400f8e8:	1003d816 	blt	r2,zero,401084c <___svfprintf_internal_r+0x1b74>
 400f8ec:	df002783 	ldbu	fp,158(sp)
 400f8f0:	d8802a15 	stw	r2,168(sp)
 400f8f4:	dd002d15 	stw	r20,180(sp)
 400f8f8:	d8002915 	stw	zero,164(sp)
 400f8fc:	d8003215 	stw	zero,200(sp)
 400f900:	003ea306 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 400f904:	18c03fcc 	andi	r3,r3,255
 400f908:	183f8c26 	beq	r3,zero,400f73c <__alt_mem_epcs_flash_controller_0+0xfb00e73c>
 400f90c:	d9c02785 	stb	r7,158(sp)
 400f910:	003f8a06 	br	400f73c <__alt_mem_epcs_flash_controller_0+0xfb00e73c>
 400f914:	18c03fcc 	andi	r3,r3,255
 400f918:	1805631e 	bne	r3,zero,4010ea8 <___svfprintf_internal_r+0x21d0>
 400f91c:	01410234 	movhi	r5,1032
 400f920:	29552f04 	addi	r5,r5,21692
 400f924:	d9403a15 	stw	r5,232(sp)
 400f928:	9080080c 	andi	r2,r18,32
 400f92c:	103f9f1e 	bne	r2,zero,400f7ac <__alt_mem_epcs_flash_controller_0+0xfb00e7ac>
 400f930:	9080040c 	andi	r2,r18,16
 400f934:	10029c26 	beq	r2,zero,40103a8 <___svfprintf_internal_r+0x16d0>
 400f938:	d8c02d17 	ldw	r3,180(sp)
 400f93c:	002d883a 	mov	r22,zero
 400f940:	1d000017 	ldw	r20,0(r3)
 400f944:	18c00104 	addi	r3,r3,4
 400f948:	d8c02d15 	stw	r3,180(sp)
 400f94c:	003f9c06 	br	400f7c0 <__alt_mem_epcs_flash_controller_0+0xfb00e7c0>
 400f950:	94800054 	ori	r18,r18,1
 400f954:	bc400007 	ldb	r17,0(r23)
 400f958:	003d3306 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f95c:	38803fcc 	andi	r2,r7,255
 400f960:	1080201c 	xori	r2,r2,128
 400f964:	10bfe004 	addi	r2,r2,-128
 400f968:	1002971e 	bne	r2,zero,40103c8 <___svfprintf_internal_r+0x16f0>
 400f96c:	00c00044 	movi	r3,1
 400f970:	01c00804 	movi	r7,32
 400f974:	bc400007 	ldb	r17,0(r23)
 400f978:	003d2b06 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f97c:	18c03fcc 	andi	r3,r3,255
 400f980:	183e2326 	beq	r3,zero,400f210 <__alt_mem_epcs_flash_controller_0+0xfb00e210>
 400f984:	d9c02785 	stb	r7,158(sp)
 400f988:	003e2106 	br	400f210 <__alt_mem_epcs_flash_controller_0+0xfb00e210>
 400f98c:	bc400007 	ldb	r17,0(r23)
 400f990:	8a430426 	beq	r17,r9,40105a4 <___svfprintf_internal_r+0x18cc>
 400f994:	94800414 	ori	r18,r18,16
 400f998:	003d2306 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f99c:	18c03fcc 	andi	r3,r3,255
 400f9a0:	18053f1e 	bne	r3,zero,4010ea0 <___svfprintf_internal_r+0x21c8>
 400f9a4:	9080080c 	andi	r2,r18,32
 400f9a8:	10028926 	beq	r2,zero,40103d0 <___svfprintf_internal_r+0x16f8>
 400f9ac:	d9402d17 	ldw	r5,180(sp)
 400f9b0:	d9002f17 	ldw	r4,188(sp)
 400f9b4:	28800017 	ldw	r2,0(r5)
 400f9b8:	2007d7fa 	srai	r3,r4,31
 400f9bc:	29400104 	addi	r5,r5,4
 400f9c0:	d9402d15 	stw	r5,180(sp)
 400f9c4:	11000015 	stw	r4,0(r2)
 400f9c8:	10c00115 	stw	r3,4(r2)
 400f9cc:	003ced06 	br	400ed84 <__alt_mem_epcs_flash_controller_0+0xfb00dd84>
 400f9d0:	94801014 	ori	r18,r18,64
 400f9d4:	bc400007 	ldb	r17,0(r23)
 400f9d8:	003d1306 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 400f9dc:	01010234 	movhi	r4,1032
 400f9e0:	21152f04 	addi	r4,r4,21692
 400f9e4:	0039883a 	mov	fp,zero
 400f9e8:	d9003a15 	stw	r4,232(sp)
 400f9ec:	04401e04 	movi	r17,120
 400f9f0:	003f8206 	br	400f7fc <__alt_mem_epcs_flash_controller_0+0xfb00e7fc>
 400f9f4:	18c03fcc 	andi	r3,r3,255
 400f9f8:	1805221e 	bne	r3,zero,4010e84 <___svfprintf_internal_r+0x21ac>
 400f9fc:	883d9526 	beq	r17,zero,400f054 <__alt_mem_epcs_flash_controller_0+0xfb00e054>
 400fa00:	00c00044 	movi	r3,1
 400fa04:	d8c02a15 	stw	r3,168(sp)
 400fa08:	dc401405 	stb	r17,80(sp)
 400fa0c:	d8002785 	stb	zero,158(sp)
 400fa10:	003f9406 	br	400f864 <__alt_mem_epcs_flash_controller_0+0xfb00e864>
 400fa14:	01010234 	movhi	r4,1032
 400fa18:	21152f04 	addi	r4,r4,21692
 400fa1c:	d9003a15 	stw	r4,232(sp)
 400fa20:	d8c02d15 	stw	r3,180(sp)
 400fa24:	1025883a 	mov	r18,r2
 400fa28:	04401e04 	movi	r17,120
 400fa2c:	a584b03a 	or	r2,r20,r22
 400fa30:	1000fa1e 	bne	r2,zero,400fe1c <___svfprintf_internal_r+0x1144>
 400fa34:	0039883a 	mov	fp,zero
 400fa38:	00800084 	movi	r2,2
 400fa3c:	10803fcc 	andi	r2,r2,255
 400fa40:	00c00044 	movi	r3,1
 400fa44:	10c21626 	beq	r2,r3,40102a0 <___svfprintf_internal_r+0x15c8>
 400fa48:	00c00084 	movi	r3,2
 400fa4c:	10fe301e 	bne	r2,r3,400f310 <__alt_mem_epcs_flash_controller_0+0xfb00e310>
 400fa50:	003d7606 	br	400f02c <__alt_mem_epcs_flash_controller_0+0xfb00e02c>
 400fa54:	d8c02017 	ldw	r3,128(sp)
 400fa58:	003e9506 	br	400f4b0 <__alt_mem_epcs_flash_controller_0+0xfb00e4b0>
 400fa5c:	00801944 	movi	r2,101
 400fa60:	14407c0e 	bge	r2,r17,400fc54 <___svfprintf_internal_r+0xf7c>
 400fa64:	d9003617 	ldw	r4,216(sp)
 400fa68:	d9403717 	ldw	r5,220(sp)
 400fa6c:	000d883a 	mov	r6,zero
 400fa70:	000f883a 	mov	r7,zero
 400fa74:	d8c03d15 	stw	r3,244(sp)
 400fa78:	da003e15 	stw	r8,248(sp)
 400fa7c:	401b6a40 	call	401b6a4 <__eqdf2>
 400fa80:	d8c03d17 	ldw	r3,244(sp)
 400fa84:	da003e17 	ldw	r8,248(sp)
 400fa88:	1000f51e 	bne	r2,zero,400fe60 <___svfprintf_internal_r+0x1188>
 400fa8c:	d8801f17 	ldw	r2,124(sp)
 400fa90:	01010234 	movhi	r4,1032
 400fa94:	21153604 	addi	r4,r4,21720
 400fa98:	18c00044 	addi	r3,r3,1
 400fa9c:	10800044 	addi	r2,r2,1
 400faa0:	41000015 	stw	r4,0(r8)
 400faa4:	01000044 	movi	r4,1
 400faa8:	41000115 	stw	r4,4(r8)
 400faac:	d8c02015 	stw	r3,128(sp)
 400fab0:	d8801f15 	stw	r2,124(sp)
 400fab4:	010001c4 	movi	r4,7
 400fab8:	20826616 	blt	r4,r2,4010454 <___svfprintf_internal_r+0x177c>
 400fabc:	42000204 	addi	r8,r8,8
 400fac0:	d8802617 	ldw	r2,152(sp)
 400fac4:	d9403317 	ldw	r5,204(sp)
 400fac8:	11400216 	blt	r2,r5,400fad4 <___svfprintf_internal_r+0xdfc>
 400facc:	9080004c 	andi	r2,r18,1
 400fad0:	103ed526 	beq	r2,zero,400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 400fad4:	d8803817 	ldw	r2,224(sp)
 400fad8:	d9003417 	ldw	r4,208(sp)
 400fadc:	d9403817 	ldw	r5,224(sp)
 400fae0:	1887883a 	add	r3,r3,r2
 400fae4:	d8801f17 	ldw	r2,124(sp)
 400fae8:	41000015 	stw	r4,0(r8)
 400faec:	41400115 	stw	r5,4(r8)
 400faf0:	10800044 	addi	r2,r2,1
 400faf4:	d8c02015 	stw	r3,128(sp)
 400faf8:	d8801f15 	stw	r2,124(sp)
 400fafc:	010001c4 	movi	r4,7
 400fb00:	2082af16 	blt	r4,r2,40105c0 <___svfprintf_internal_r+0x18e8>
 400fb04:	42000204 	addi	r8,r8,8
 400fb08:	d8803317 	ldw	r2,204(sp)
 400fb0c:	143fffc4 	addi	r16,r2,-1
 400fb10:	043ec50e 	bge	zero,r16,400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 400fb14:	04400404 	movi	r17,16
 400fb18:	d8801f17 	ldw	r2,124(sp)
 400fb1c:	8c00860e 	bge	r17,r16,400fd38 <___svfprintf_internal_r+0x1060>
 400fb20:	01410234 	movhi	r5,1032
 400fb24:	29553684 	addi	r5,r5,21722
 400fb28:	d9402b15 	stw	r5,172(sp)
 400fb2c:	058001c4 	movi	r22,7
 400fb30:	dd002c17 	ldw	r20,176(sp)
 400fb34:	00000306 	br	400fb44 <___svfprintf_internal_r+0xe6c>
 400fb38:	42000204 	addi	r8,r8,8
 400fb3c:	843ffc04 	addi	r16,r16,-16
 400fb40:	8c00800e 	bge	r17,r16,400fd44 <___svfprintf_internal_r+0x106c>
 400fb44:	18c00404 	addi	r3,r3,16
 400fb48:	10800044 	addi	r2,r2,1
 400fb4c:	45400015 	stw	r21,0(r8)
 400fb50:	44400115 	stw	r17,4(r8)
 400fb54:	d8c02015 	stw	r3,128(sp)
 400fb58:	d8801f15 	stw	r2,124(sp)
 400fb5c:	b0bff60e 	bge	r22,r2,400fb38 <__alt_mem_epcs_flash_controller_0+0xfb00eb38>
 400fb60:	d9801e04 	addi	r6,sp,120
 400fb64:	a00b883a 	mov	r5,r20
 400fb68:	9809883a 	mov	r4,r19
 400fb6c:	401786c0 	call	401786c <__ssprint_r>
 400fb70:	103d3e1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fb74:	d8c02017 	ldw	r3,128(sp)
 400fb78:	d8801f17 	ldw	r2,124(sp)
 400fb7c:	da000404 	addi	r8,sp,16
 400fb80:	003fee06 	br	400fb3c <__alt_mem_epcs_flash_controller_0+0xfb00eb3c>
 400fb84:	d9403117 	ldw	r5,196(sp)
 400fb88:	d8802a17 	ldw	r2,168(sp)
 400fb8c:	28adc83a 	sub	r22,r5,r2
 400fb90:	05be650e 	bge	zero,r22,400f528 <__alt_mem_epcs_flash_controller_0+0xfb00e528>
 400fb94:	07000404 	movi	fp,16
 400fb98:	d8801f17 	ldw	r2,124(sp)
 400fb9c:	e583a20e 	bge	fp,r22,4010a28 <___svfprintf_internal_r+0x1d50>
 400fba0:	01410234 	movhi	r5,1032
 400fba4:	29553684 	addi	r5,r5,21722
 400fba8:	dc403015 	stw	r17,192(sp)
 400fbac:	d9402b15 	stw	r5,172(sp)
 400fbb0:	b023883a 	mov	r17,r22
 400fbb4:	050001c4 	movi	r20,7
 400fbb8:	902d883a 	mov	r22,r18
 400fbbc:	8025883a 	mov	r18,r16
 400fbc0:	dc002c17 	ldw	r16,176(sp)
 400fbc4:	00000306 	br	400fbd4 <___svfprintf_internal_r+0xefc>
 400fbc8:	8c7ffc04 	addi	r17,r17,-16
 400fbcc:	42000204 	addi	r8,r8,8
 400fbd0:	e440110e 	bge	fp,r17,400fc18 <___svfprintf_internal_r+0xf40>
 400fbd4:	18c00404 	addi	r3,r3,16
 400fbd8:	10800044 	addi	r2,r2,1
 400fbdc:	45400015 	stw	r21,0(r8)
 400fbe0:	47000115 	stw	fp,4(r8)
 400fbe4:	d8c02015 	stw	r3,128(sp)
 400fbe8:	d8801f15 	stw	r2,124(sp)
 400fbec:	a0bff60e 	bge	r20,r2,400fbc8 <__alt_mem_epcs_flash_controller_0+0xfb00ebc8>
 400fbf0:	d9801e04 	addi	r6,sp,120
 400fbf4:	800b883a 	mov	r5,r16
 400fbf8:	9809883a 	mov	r4,r19
 400fbfc:	401786c0 	call	401786c <__ssprint_r>
 400fc00:	103d1a1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fc04:	8c7ffc04 	addi	r17,r17,-16
 400fc08:	d8c02017 	ldw	r3,128(sp)
 400fc0c:	d8801f17 	ldw	r2,124(sp)
 400fc10:	da000404 	addi	r8,sp,16
 400fc14:	e47fef16 	blt	fp,r17,400fbd4 <__alt_mem_epcs_flash_controller_0+0xfb00ebd4>
 400fc18:	9021883a 	mov	r16,r18
 400fc1c:	b025883a 	mov	r18,r22
 400fc20:	882d883a 	mov	r22,r17
 400fc24:	dc403017 	ldw	r17,192(sp)
 400fc28:	d9002b17 	ldw	r4,172(sp)
 400fc2c:	1d87883a 	add	r3,r3,r22
 400fc30:	10800044 	addi	r2,r2,1
 400fc34:	41000015 	stw	r4,0(r8)
 400fc38:	45800115 	stw	r22,4(r8)
 400fc3c:	d8c02015 	stw	r3,128(sp)
 400fc40:	d8801f15 	stw	r2,124(sp)
 400fc44:	010001c4 	movi	r4,7
 400fc48:	20819a16 	blt	r4,r2,40102b4 <___svfprintf_internal_r+0x15dc>
 400fc4c:	42000204 	addi	r8,r8,8
 400fc50:	003e3506 	br	400f528 <__alt_mem_epcs_flash_controller_0+0xfb00e528>
 400fc54:	d9403317 	ldw	r5,204(sp)
 400fc58:	00800044 	movi	r2,1
 400fc5c:	18c00044 	addi	r3,r3,1
 400fc60:	1141710e 	bge	r2,r5,4010228 <___svfprintf_internal_r+0x1550>
 400fc64:	dc401f17 	ldw	r17,124(sp)
 400fc68:	00800044 	movi	r2,1
 400fc6c:	40800115 	stw	r2,4(r8)
 400fc70:	8c400044 	addi	r17,r17,1
 400fc74:	44000015 	stw	r16,0(r8)
 400fc78:	d8c02015 	stw	r3,128(sp)
 400fc7c:	dc401f15 	stw	r17,124(sp)
 400fc80:	008001c4 	movi	r2,7
 400fc84:	14417416 	blt	r2,r17,4010258 <___svfprintf_internal_r+0x1580>
 400fc88:	42000204 	addi	r8,r8,8
 400fc8c:	d8803817 	ldw	r2,224(sp)
 400fc90:	d9003417 	ldw	r4,208(sp)
 400fc94:	8c400044 	addi	r17,r17,1
 400fc98:	10c7883a 	add	r3,r2,r3
 400fc9c:	40800115 	stw	r2,4(r8)
 400fca0:	41000015 	stw	r4,0(r8)
 400fca4:	d8c02015 	stw	r3,128(sp)
 400fca8:	dc401f15 	stw	r17,124(sp)
 400fcac:	008001c4 	movi	r2,7
 400fcb0:	14417216 	blt	r2,r17,401027c <___svfprintf_internal_r+0x15a4>
 400fcb4:	45800204 	addi	r22,r8,8
 400fcb8:	d9003617 	ldw	r4,216(sp)
 400fcbc:	d9403717 	ldw	r5,220(sp)
 400fcc0:	000d883a 	mov	r6,zero
 400fcc4:	000f883a 	mov	r7,zero
 400fcc8:	d8c03d15 	stw	r3,244(sp)
 400fccc:	401b6a40 	call	401b6a4 <__eqdf2>
 400fcd0:	d8c03d17 	ldw	r3,244(sp)
 400fcd4:	1000b326 	beq	r2,zero,400ffa4 <___svfprintf_internal_r+0x12cc>
 400fcd8:	d9403317 	ldw	r5,204(sp)
 400fcdc:	84000044 	addi	r16,r16,1
 400fce0:	8c400044 	addi	r17,r17,1
 400fce4:	28bfffc4 	addi	r2,r5,-1
 400fce8:	1887883a 	add	r3,r3,r2
 400fcec:	b0800115 	stw	r2,4(r22)
 400fcf0:	b4000015 	stw	r16,0(r22)
 400fcf4:	d8c02015 	stw	r3,128(sp)
 400fcf8:	dc401f15 	stw	r17,124(sp)
 400fcfc:	008001c4 	movi	r2,7
 400fd00:	1440d216 	blt	r2,r17,401004c <___svfprintf_internal_r+0x1374>
 400fd04:	b5800204 	addi	r22,r22,8
 400fd08:	d9003b17 	ldw	r4,236(sp)
 400fd0c:	df0022c4 	addi	fp,sp,139
 400fd10:	8c400044 	addi	r17,r17,1
 400fd14:	20c7883a 	add	r3,r4,r3
 400fd18:	b7000015 	stw	fp,0(r22)
 400fd1c:	b1000115 	stw	r4,4(r22)
 400fd20:	d8c02015 	stw	r3,128(sp)
 400fd24:	dc401f15 	stw	r17,124(sp)
 400fd28:	008001c4 	movi	r2,7
 400fd2c:	14400e16 	blt	r2,r17,400fd68 <___svfprintf_internal_r+0x1090>
 400fd30:	b2000204 	addi	r8,r22,8
 400fd34:	003e3c06 	br	400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 400fd38:	01010234 	movhi	r4,1032
 400fd3c:	21153684 	addi	r4,r4,21722
 400fd40:	d9002b15 	stw	r4,172(sp)
 400fd44:	d9002b17 	ldw	r4,172(sp)
 400fd48:	1c07883a 	add	r3,r3,r16
 400fd4c:	44000115 	stw	r16,4(r8)
 400fd50:	41000015 	stw	r4,0(r8)
 400fd54:	10800044 	addi	r2,r2,1
 400fd58:	d8c02015 	stw	r3,128(sp)
 400fd5c:	d8801f15 	stw	r2,124(sp)
 400fd60:	010001c4 	movi	r4,7
 400fd64:	20be2f0e 	bge	r4,r2,400f624 <__alt_mem_epcs_flash_controller_0+0xfb00e624>
 400fd68:	d9402c17 	ldw	r5,176(sp)
 400fd6c:	d9801e04 	addi	r6,sp,120
 400fd70:	9809883a 	mov	r4,r19
 400fd74:	401786c0 	call	401786c <__ssprint_r>
 400fd78:	103cbc1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fd7c:	d8c02017 	ldw	r3,128(sp)
 400fd80:	da000404 	addi	r8,sp,16
 400fd84:	003e2806 	br	400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 400fd88:	d9402c17 	ldw	r5,176(sp)
 400fd8c:	d9801e04 	addi	r6,sp,120
 400fd90:	9809883a 	mov	r4,r19
 400fd94:	401786c0 	call	401786c <__ssprint_r>
 400fd98:	103e5f26 	beq	r2,zero,400f718 <__alt_mem_epcs_flash_controller_0+0xfb00e718>
 400fd9c:	003cb306 	br	400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fda0:	d9402c17 	ldw	r5,176(sp)
 400fda4:	d9801e04 	addi	r6,sp,120
 400fda8:	9809883a 	mov	r4,r19
 400fdac:	401786c0 	call	401786c <__ssprint_r>
 400fdb0:	103cae1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fdb4:	d8c02017 	ldw	r3,128(sp)
 400fdb8:	da000404 	addi	r8,sp,16
 400fdbc:	003e0d06 	br	400f5f4 <__alt_mem_epcs_flash_controller_0+0xfb00e5f4>
 400fdc0:	d9402c17 	ldw	r5,176(sp)
 400fdc4:	d9801e04 	addi	r6,sp,120
 400fdc8:	9809883a 	mov	r4,r19
 400fdcc:	401786c0 	call	401786c <__ssprint_r>
 400fdd0:	103ca61e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fdd4:	d8c02017 	ldw	r3,128(sp)
 400fdd8:	da000404 	addi	r8,sp,16
 400fddc:	003dc106 	br	400f4e4 <__alt_mem_epcs_flash_controller_0+0xfb00e4e4>
 400fde0:	d9402c17 	ldw	r5,176(sp)
 400fde4:	d9801e04 	addi	r6,sp,120
 400fde8:	9809883a 	mov	r4,r19
 400fdec:	401786c0 	call	401786c <__ssprint_r>
 400fdf0:	103c9e1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400fdf4:	d8c02017 	ldw	r3,128(sp)
 400fdf8:	da000404 	addi	r8,sp,16
 400fdfc:	003dc706 	br	400f51c <__alt_mem_epcs_flash_controller_0+0xfb00e51c>
 400fe00:	d8802917 	ldw	r2,164(sp)
 400fe04:	d8002785 	stb	zero,158(sp)
 400fe08:	103f0816 	blt	r2,zero,400fa2c <__alt_mem_epcs_flash_controller_0+0xfb00ea2c>
 400fe0c:	00ffdfc4 	movi	r3,-129
 400fe10:	a584b03a 	or	r2,r20,r22
 400fe14:	90e4703a 	and	r18,r18,r3
 400fe18:	103c8126 	beq	r2,zero,400f020 <__alt_mem_epcs_flash_controller_0+0xfb00e020>
 400fe1c:	0039883a 	mov	fp,zero
 400fe20:	003e7606 	br	400f7fc <__alt_mem_epcs_flash_controller_0+0xfb00e7fc>
 400fe24:	9080040c 	andi	r2,r18,16
 400fe28:	10013d26 	beq	r2,zero,4010320 <___svfprintf_internal_r+0x1648>
 400fe2c:	d9002d17 	ldw	r4,180(sp)
 400fe30:	d9402917 	ldw	r5,164(sp)
 400fe34:	d8002785 	stb	zero,158(sp)
 400fe38:	20800104 	addi	r2,r4,4
 400fe3c:	25000017 	ldw	r20,0(r4)
 400fe40:	002d883a 	mov	r22,zero
 400fe44:	28013f16 	blt	r5,zero,4010344 <___svfprintf_internal_r+0x166c>
 400fe48:	00ffdfc4 	movi	r3,-129
 400fe4c:	d8802d15 	stw	r2,180(sp)
 400fe50:	90e4703a 	and	r18,r18,r3
 400fe54:	a03d2b26 	beq	r20,zero,400f304 <__alt_mem_epcs_flash_controller_0+0xfb00e304>
 400fe58:	0039883a 	mov	fp,zero
 400fe5c:	003d2e06 	br	400f318 <__alt_mem_epcs_flash_controller_0+0xfb00e318>
 400fe60:	dc402617 	ldw	r17,152(sp)
 400fe64:	0441830e 	bge	zero,r17,4010474 <___svfprintf_internal_r+0x179c>
 400fe68:	dc403217 	ldw	r17,200(sp)
 400fe6c:	d8803317 	ldw	r2,204(sp)
 400fe70:	1440010e 	bge	r2,r17,400fe78 <___svfprintf_internal_r+0x11a0>
 400fe74:	1023883a 	mov	r17,r2
 400fe78:	04400a0e 	bge	zero,r17,400fea4 <___svfprintf_internal_r+0x11cc>
 400fe7c:	d8801f17 	ldw	r2,124(sp)
 400fe80:	1c47883a 	add	r3,r3,r17
 400fe84:	44000015 	stw	r16,0(r8)
 400fe88:	10800044 	addi	r2,r2,1
 400fe8c:	44400115 	stw	r17,4(r8)
 400fe90:	d8c02015 	stw	r3,128(sp)
 400fe94:	d8801f15 	stw	r2,124(sp)
 400fe98:	010001c4 	movi	r4,7
 400fe9c:	20827516 	blt	r4,r2,4010874 <___svfprintf_internal_r+0x1b9c>
 400fea0:	42000204 	addi	r8,r8,8
 400fea4:	88027b16 	blt	r17,zero,4010894 <___svfprintf_internal_r+0x1bbc>
 400fea8:	d9003217 	ldw	r4,200(sp)
 400feac:	2463c83a 	sub	r17,r4,r17
 400feb0:	0440990e 	bge	zero,r17,4010118 <___svfprintf_internal_r+0x1440>
 400feb4:	05800404 	movi	r22,16
 400feb8:	d8801f17 	ldw	r2,124(sp)
 400febc:	b441530e 	bge	r22,r17,401040c <___svfprintf_internal_r+0x1734>
 400fec0:	01010234 	movhi	r4,1032
 400fec4:	21153684 	addi	r4,r4,21722
 400fec8:	d9002b15 	stw	r4,172(sp)
 400fecc:	070001c4 	movi	fp,7
 400fed0:	dd002c17 	ldw	r20,176(sp)
 400fed4:	00000306 	br	400fee4 <___svfprintf_internal_r+0x120c>
 400fed8:	42000204 	addi	r8,r8,8
 400fedc:	8c7ffc04 	addi	r17,r17,-16
 400fee0:	b4414d0e 	bge	r22,r17,4010418 <___svfprintf_internal_r+0x1740>
 400fee4:	18c00404 	addi	r3,r3,16
 400fee8:	10800044 	addi	r2,r2,1
 400feec:	45400015 	stw	r21,0(r8)
 400fef0:	45800115 	stw	r22,4(r8)
 400fef4:	d8c02015 	stw	r3,128(sp)
 400fef8:	d8801f15 	stw	r2,124(sp)
 400fefc:	e0bff60e 	bge	fp,r2,400fed8 <__alt_mem_epcs_flash_controller_0+0xfb00eed8>
 400ff00:	d9801e04 	addi	r6,sp,120
 400ff04:	a00b883a 	mov	r5,r20
 400ff08:	9809883a 	mov	r4,r19
 400ff0c:	401786c0 	call	401786c <__ssprint_r>
 400ff10:	103c561e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400ff14:	d8c02017 	ldw	r3,128(sp)
 400ff18:	d8801f17 	ldw	r2,124(sp)
 400ff1c:	da000404 	addi	r8,sp,16
 400ff20:	003fee06 	br	400fedc <__alt_mem_epcs_flash_controller_0+0xfb00eedc>
 400ff24:	d9402c17 	ldw	r5,176(sp)
 400ff28:	d9801e04 	addi	r6,sp,120
 400ff2c:	9809883a 	mov	r4,r19
 400ff30:	401786c0 	call	401786c <__ssprint_r>
 400ff34:	103c4d1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 400ff38:	d8c02017 	ldw	r3,128(sp)
 400ff3c:	df002787 	ldb	fp,158(sp)
 400ff40:	da000404 	addi	r8,sp,16
 400ff44:	003d5a06 	br	400f4b0 <__alt_mem_epcs_flash_controller_0+0xfb00e4b0>
 400ff48:	9080040c 	andi	r2,r18,16
 400ff4c:	10005c26 	beq	r2,zero,40100c0 <___svfprintf_internal_r+0x13e8>
 400ff50:	d9402d17 	ldw	r5,180(sp)
 400ff54:	d8c02917 	ldw	r3,164(sp)
 400ff58:	d8002785 	stb	zero,158(sp)
 400ff5c:	28800104 	addi	r2,r5,4
 400ff60:	2d000017 	ldw	r20,0(r5)
 400ff64:	002d883a 	mov	r22,zero
 400ff68:	18005e16 	blt	r3,zero,40100e4 <___svfprintf_internal_r+0x140c>
 400ff6c:	00ffdfc4 	movi	r3,-129
 400ff70:	d8802d15 	stw	r2,180(sp)
 400ff74:	90e4703a 	and	r18,r18,r3
 400ff78:	0039883a 	mov	fp,zero
 400ff7c:	a03dfe26 	beq	r20,zero,400f778 <__alt_mem_epcs_flash_controller_0+0xfb00e778>
 400ff80:	00800244 	movi	r2,9
 400ff84:	153cb336 	bltu	r2,r20,400f254 <__alt_mem_epcs_flash_controller_0+0xfb00e254>
 400ff88:	a5000c04 	addi	r20,r20,48
 400ff8c:	dc001dc4 	addi	r16,sp,119
 400ff90:	dd001dc5 	stb	r20,119(sp)
 400ff94:	d8c02817 	ldw	r3,160(sp)
 400ff98:	1c07c83a 	sub	r3,r3,r16
 400ff9c:	d8c02e15 	stw	r3,184(sp)
 400ffa0:	003cf506 	br	400f378 <__alt_mem_epcs_flash_controller_0+0xfb00e378>
 400ffa4:	d8803317 	ldw	r2,204(sp)
 400ffa8:	143fffc4 	addi	r16,r2,-1
 400ffac:	043f560e 	bge	zero,r16,400fd08 <__alt_mem_epcs_flash_controller_0+0xfb00ed08>
 400ffb0:	07000404 	movi	fp,16
 400ffb4:	e403530e 	bge	fp,r16,4010d04 <___svfprintf_internal_r+0x202c>
 400ffb8:	01410234 	movhi	r5,1032
 400ffbc:	29553684 	addi	r5,r5,21722
 400ffc0:	d9402b15 	stw	r5,172(sp)
 400ffc4:	01c001c4 	movi	r7,7
 400ffc8:	dd002c17 	ldw	r20,176(sp)
 400ffcc:	00000306 	br	400ffdc <___svfprintf_internal_r+0x1304>
 400ffd0:	843ffc04 	addi	r16,r16,-16
 400ffd4:	b5800204 	addi	r22,r22,8
 400ffd8:	e400130e 	bge	fp,r16,4010028 <___svfprintf_internal_r+0x1350>
 400ffdc:	18c00404 	addi	r3,r3,16
 400ffe0:	8c400044 	addi	r17,r17,1
 400ffe4:	b5400015 	stw	r21,0(r22)
 400ffe8:	b7000115 	stw	fp,4(r22)
 400ffec:	d8c02015 	stw	r3,128(sp)
 400fff0:	dc401f15 	stw	r17,124(sp)
 400fff4:	3c7ff60e 	bge	r7,r17,400ffd0 <__alt_mem_epcs_flash_controller_0+0xfb00efd0>
 400fff8:	d9801e04 	addi	r6,sp,120
 400fffc:	a00b883a 	mov	r5,r20
 4010000:	9809883a 	mov	r4,r19
 4010004:	d9c03d15 	stw	r7,244(sp)
 4010008:	401786c0 	call	401786c <__ssprint_r>
 401000c:	d9c03d17 	ldw	r7,244(sp)
 4010010:	103c161e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010014:	843ffc04 	addi	r16,r16,-16
 4010018:	d8c02017 	ldw	r3,128(sp)
 401001c:	dc401f17 	ldw	r17,124(sp)
 4010020:	dd800404 	addi	r22,sp,16
 4010024:	e43fed16 	blt	fp,r16,400ffdc <__alt_mem_epcs_flash_controller_0+0xfb00efdc>
 4010028:	d8802b17 	ldw	r2,172(sp)
 401002c:	1c07883a 	add	r3,r3,r16
 4010030:	8c400044 	addi	r17,r17,1
 4010034:	b0800015 	stw	r2,0(r22)
 4010038:	b4000115 	stw	r16,4(r22)
 401003c:	d8c02015 	stw	r3,128(sp)
 4010040:	dc401f15 	stw	r17,124(sp)
 4010044:	008001c4 	movi	r2,7
 4010048:	147f2e0e 	bge	r2,r17,400fd04 <__alt_mem_epcs_flash_controller_0+0xfb00ed04>
 401004c:	d9402c17 	ldw	r5,176(sp)
 4010050:	d9801e04 	addi	r6,sp,120
 4010054:	9809883a 	mov	r4,r19
 4010058:	401786c0 	call	401786c <__ssprint_r>
 401005c:	103c031e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010060:	d8c02017 	ldw	r3,128(sp)
 4010064:	dc401f17 	ldw	r17,124(sp)
 4010068:	dd800404 	addi	r22,sp,16
 401006c:	003f2606 	br	400fd08 <__alt_mem_epcs_flash_controller_0+0xfb00ed08>
 4010070:	9080040c 	andi	r2,r18,16
 4010074:	1000c326 	beq	r2,zero,4010384 <___svfprintf_internal_r+0x16ac>
 4010078:	d8802d17 	ldw	r2,180(sp)
 401007c:	15000017 	ldw	r20,0(r2)
 4010080:	10800104 	addi	r2,r2,4
 4010084:	d8802d15 	stw	r2,180(sp)
 4010088:	a02dd7fa 	srai	r22,r20,31
 401008c:	b005883a 	mov	r2,r22
 4010090:	103c680e 	bge	r2,zero,400f234 <__alt_mem_epcs_flash_controller_0+0xfb00e234>
 4010094:	0529c83a 	sub	r20,zero,r20
 4010098:	a004c03a 	cmpne	r2,r20,zero
 401009c:	05adc83a 	sub	r22,zero,r22
 40100a0:	b0adc83a 	sub	r22,r22,r2
 40100a4:	d8802917 	ldw	r2,164(sp)
 40100a8:	07000b44 	movi	fp,45
 40100ac:	df002785 	stb	fp,158(sp)
 40100b0:	10022e16 	blt	r2,zero,401096c <___svfprintf_internal_r+0x1c94>
 40100b4:	00bfdfc4 	movi	r2,-129
 40100b8:	90a4703a 	and	r18,r18,r2
 40100bc:	003c6406 	br	400f250 <__alt_mem_epcs_flash_controller_0+0xfb00e250>
 40100c0:	9080100c 	andi	r2,r18,64
 40100c4:	d8002785 	stb	zero,158(sp)
 40100c8:	10012526 	beq	r2,zero,4010560 <___svfprintf_internal_r+0x1888>
 40100cc:	d9002d17 	ldw	r4,180(sp)
 40100d0:	d9402917 	ldw	r5,164(sp)
 40100d4:	002d883a 	mov	r22,zero
 40100d8:	20800104 	addi	r2,r4,4
 40100dc:	2500000b 	ldhu	r20,0(r4)
 40100e0:	283fa20e 	bge	r5,zero,400ff6c <__alt_mem_epcs_flash_controller_0+0xfb00ef6c>
 40100e4:	d8802d15 	stw	r2,180(sp)
 40100e8:	0039883a 	mov	fp,zero
 40100ec:	a584b03a 	or	r2,r20,r22
 40100f0:	103c571e 	bne	r2,zero,400f250 <__alt_mem_epcs_flash_controller_0+0xfb00e250>
 40100f4:	00800044 	movi	r2,1
 40100f8:	003e5006 	br	400fa3c <__alt_mem_epcs_flash_controller_0+0xfb00ea3c>
 40100fc:	d9402c17 	ldw	r5,176(sp)
 4010100:	d9801e04 	addi	r6,sp,120
 4010104:	9809883a 	mov	r4,r19
 4010108:	401786c0 	call	401786c <__ssprint_r>
 401010c:	103bd71e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010110:	d8c02017 	ldw	r3,128(sp)
 4010114:	da000404 	addi	r8,sp,16
 4010118:	d9003217 	ldw	r4,200(sp)
 401011c:	d8802617 	ldw	r2,152(sp)
 4010120:	d9403317 	ldw	r5,204(sp)
 4010124:	8123883a 	add	r17,r16,r4
 4010128:	11400216 	blt	r2,r5,4010134 <___svfprintf_internal_r+0x145c>
 401012c:	9100004c 	andi	r4,r18,1
 4010130:	20000d26 	beq	r4,zero,4010168 <___svfprintf_internal_r+0x1490>
 4010134:	d9003817 	ldw	r4,224(sp)
 4010138:	d9403417 	ldw	r5,208(sp)
 401013c:	1907883a 	add	r3,r3,r4
 4010140:	d9001f17 	ldw	r4,124(sp)
 4010144:	41400015 	stw	r5,0(r8)
 4010148:	d9403817 	ldw	r5,224(sp)
 401014c:	21000044 	addi	r4,r4,1
 4010150:	d8c02015 	stw	r3,128(sp)
 4010154:	41400115 	stw	r5,4(r8)
 4010158:	d9001f15 	stw	r4,124(sp)
 401015c:	014001c4 	movi	r5,7
 4010160:	2901dc16 	blt	r5,r4,40108d4 <___svfprintf_internal_r+0x1bfc>
 4010164:	42000204 	addi	r8,r8,8
 4010168:	d9003317 	ldw	r4,204(sp)
 401016c:	8121883a 	add	r16,r16,r4
 4010170:	2085c83a 	sub	r2,r4,r2
 4010174:	8461c83a 	sub	r16,r16,r17
 4010178:	1400010e 	bge	r2,r16,4010180 <___svfprintf_internal_r+0x14a8>
 401017c:	1021883a 	mov	r16,r2
 4010180:	04000a0e 	bge	zero,r16,40101ac <___svfprintf_internal_r+0x14d4>
 4010184:	d9001f17 	ldw	r4,124(sp)
 4010188:	1c07883a 	add	r3,r3,r16
 401018c:	44400015 	stw	r17,0(r8)
 4010190:	21000044 	addi	r4,r4,1
 4010194:	44000115 	stw	r16,4(r8)
 4010198:	d8c02015 	stw	r3,128(sp)
 401019c:	d9001f15 	stw	r4,124(sp)
 40101a0:	014001c4 	movi	r5,7
 40101a4:	2901e616 	blt	r5,r4,4010940 <___svfprintf_internal_r+0x1c68>
 40101a8:	42000204 	addi	r8,r8,8
 40101ac:	8001f616 	blt	r16,zero,4010988 <___svfprintf_internal_r+0x1cb0>
 40101b0:	1421c83a 	sub	r16,r2,r16
 40101b4:	043d1c0e 	bge	zero,r16,400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 40101b8:	04400404 	movi	r17,16
 40101bc:	d8801f17 	ldw	r2,124(sp)
 40101c0:	8c3edd0e 	bge	r17,r16,400fd38 <__alt_mem_epcs_flash_controller_0+0xfb00ed38>
 40101c4:	01410234 	movhi	r5,1032
 40101c8:	29553684 	addi	r5,r5,21722
 40101cc:	d9402b15 	stw	r5,172(sp)
 40101d0:	058001c4 	movi	r22,7
 40101d4:	dd002c17 	ldw	r20,176(sp)
 40101d8:	00000306 	br	40101e8 <___svfprintf_internal_r+0x1510>
 40101dc:	42000204 	addi	r8,r8,8
 40101e0:	843ffc04 	addi	r16,r16,-16
 40101e4:	8c3ed70e 	bge	r17,r16,400fd44 <__alt_mem_epcs_flash_controller_0+0xfb00ed44>
 40101e8:	18c00404 	addi	r3,r3,16
 40101ec:	10800044 	addi	r2,r2,1
 40101f0:	45400015 	stw	r21,0(r8)
 40101f4:	44400115 	stw	r17,4(r8)
 40101f8:	d8c02015 	stw	r3,128(sp)
 40101fc:	d8801f15 	stw	r2,124(sp)
 4010200:	b0bff60e 	bge	r22,r2,40101dc <__alt_mem_epcs_flash_controller_0+0xfb00f1dc>
 4010204:	d9801e04 	addi	r6,sp,120
 4010208:	a00b883a 	mov	r5,r20
 401020c:	9809883a 	mov	r4,r19
 4010210:	401786c0 	call	401786c <__ssprint_r>
 4010214:	103b951e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010218:	d8c02017 	ldw	r3,128(sp)
 401021c:	d8801f17 	ldw	r2,124(sp)
 4010220:	da000404 	addi	r8,sp,16
 4010224:	003fee06 	br	40101e0 <__alt_mem_epcs_flash_controller_0+0xfb00f1e0>
 4010228:	9088703a 	and	r4,r18,r2
 401022c:	203e8d1e 	bne	r4,zero,400fc64 <__alt_mem_epcs_flash_controller_0+0xfb00ec64>
 4010230:	dc401f17 	ldw	r17,124(sp)
 4010234:	40800115 	stw	r2,4(r8)
 4010238:	44000015 	stw	r16,0(r8)
 401023c:	8c400044 	addi	r17,r17,1
 4010240:	d8c02015 	stw	r3,128(sp)
 4010244:	dc401f15 	stw	r17,124(sp)
 4010248:	008001c4 	movi	r2,7
 401024c:	147f7f16 	blt	r2,r17,401004c <__alt_mem_epcs_flash_controller_0+0xfb00f04c>
 4010250:	45800204 	addi	r22,r8,8
 4010254:	003eac06 	br	400fd08 <__alt_mem_epcs_flash_controller_0+0xfb00ed08>
 4010258:	d9402c17 	ldw	r5,176(sp)
 401025c:	d9801e04 	addi	r6,sp,120
 4010260:	9809883a 	mov	r4,r19
 4010264:	401786c0 	call	401786c <__ssprint_r>
 4010268:	103b801e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 401026c:	d8c02017 	ldw	r3,128(sp)
 4010270:	dc401f17 	ldw	r17,124(sp)
 4010274:	da000404 	addi	r8,sp,16
 4010278:	003e8406 	br	400fc8c <__alt_mem_epcs_flash_controller_0+0xfb00ec8c>
 401027c:	d9402c17 	ldw	r5,176(sp)
 4010280:	d9801e04 	addi	r6,sp,120
 4010284:	9809883a 	mov	r4,r19
 4010288:	401786c0 	call	401786c <__ssprint_r>
 401028c:	103b771e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010290:	d8c02017 	ldw	r3,128(sp)
 4010294:	dc401f17 	ldw	r17,124(sp)
 4010298:	dd800404 	addi	r22,sp,16
 401029c:	003e8606 	br	400fcb8 <__alt_mem_epcs_flash_controller_0+0xfb00ecb8>
 40102a0:	0029883a 	mov	r20,zero
 40102a4:	a5000c04 	addi	r20,r20,48
 40102a8:	dc001dc4 	addi	r16,sp,119
 40102ac:	dd001dc5 	stb	r20,119(sp)
 40102b0:	003f3806 	br	400ff94 <__alt_mem_epcs_flash_controller_0+0xfb00ef94>
 40102b4:	d9402c17 	ldw	r5,176(sp)
 40102b8:	d9801e04 	addi	r6,sp,120
 40102bc:	9809883a 	mov	r4,r19
 40102c0:	401786c0 	call	401786c <__ssprint_r>
 40102c4:	103b691e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 40102c8:	d8c02017 	ldw	r3,128(sp)
 40102cc:	da000404 	addi	r8,sp,16
 40102d0:	003c9506 	br	400f528 <__alt_mem_epcs_flash_controller_0+0xfb00e528>
 40102d4:	d9003617 	ldw	r4,216(sp)
 40102d8:	d9403717 	ldw	r5,220(sp)
 40102dc:	da003e15 	stw	r8,248(sp)
 40102e0:	4009fa00 	call	4009fa0 <__fpclassifyd>
 40102e4:	da003e17 	ldw	r8,248(sp)
 40102e8:	1000bd1e 	bne	r2,zero,40105e0 <___svfprintf_internal_r+0x1908>
 40102ec:	008011c4 	movi	r2,71
 40102f0:	14411e0e 	bge	r2,r17,401076c <___svfprintf_internal_r+0x1a94>
 40102f4:	04010234 	movhi	r16,1032
 40102f8:	84152904 	addi	r16,r16,21668
 40102fc:	00c000c4 	movi	r3,3
 4010300:	00bfdfc4 	movi	r2,-129
 4010304:	d8c02a15 	stw	r3,168(sp)
 4010308:	90a4703a 	and	r18,r18,r2
 401030c:	df002783 	ldbu	fp,158(sp)
 4010310:	d8c02e15 	stw	r3,184(sp)
 4010314:	d8002915 	stw	zero,164(sp)
 4010318:	d8003215 	stw	zero,200(sp)
 401031c:	003c1c06 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 4010320:	9080100c 	andi	r2,r18,64
 4010324:	d8002785 	stb	zero,158(sp)
 4010328:	10009426 	beq	r2,zero,401057c <___svfprintf_internal_r+0x18a4>
 401032c:	d8c02d17 	ldw	r3,180(sp)
 4010330:	d9002917 	ldw	r4,164(sp)
 4010334:	002d883a 	mov	r22,zero
 4010338:	18800104 	addi	r2,r3,4
 401033c:	1d00000b 	ldhu	r20,0(r3)
 4010340:	203ec10e 	bge	r4,zero,400fe48 <__alt_mem_epcs_flash_controller_0+0xfb00ee48>
 4010344:	a586b03a 	or	r3,r20,r22
 4010348:	d8802d15 	stw	r2,180(sp)
 401034c:	183ec21e 	bne	r3,zero,400fe58 <__alt_mem_epcs_flash_controller_0+0xfb00ee58>
 4010350:	0039883a 	mov	fp,zero
 4010354:	0005883a 	mov	r2,zero
 4010358:	003db806 	br	400fa3c <__alt_mem_epcs_flash_controller_0+0xfb00ea3c>
 401035c:	d8802d17 	ldw	r2,180(sp)
 4010360:	d8c02d17 	ldw	r3,180(sp)
 4010364:	d9002d17 	ldw	r4,180(sp)
 4010368:	10800017 	ldw	r2,0(r2)
 401036c:	18c00117 	ldw	r3,4(r3)
 4010370:	21000204 	addi	r4,r4,8
 4010374:	d8803615 	stw	r2,216(sp)
 4010378:	d8c03715 	stw	r3,220(sp)
 401037c:	d9002d15 	stw	r4,180(sp)
 4010380:	003b8206 	br	400f18c <__alt_mem_epcs_flash_controller_0+0xfb00e18c>
 4010384:	9080100c 	andi	r2,r18,64
 4010388:	10010726 	beq	r2,zero,40107a8 <___svfprintf_internal_r+0x1ad0>
 401038c:	d8c02d17 	ldw	r3,180(sp)
 4010390:	1d00000f 	ldh	r20,0(r3)
 4010394:	18c00104 	addi	r3,r3,4
 4010398:	d8c02d15 	stw	r3,180(sp)
 401039c:	a02dd7fa 	srai	r22,r20,31
 40103a0:	b005883a 	mov	r2,r22
 40103a4:	003ba206 	br	400f230 <__alt_mem_epcs_flash_controller_0+0xfb00e230>
 40103a8:	9080100c 	andi	r2,r18,64
 40103ac:	10010526 	beq	r2,zero,40107c4 <___svfprintf_internal_r+0x1aec>
 40103b0:	d9002d17 	ldw	r4,180(sp)
 40103b4:	002d883a 	mov	r22,zero
 40103b8:	2500000b 	ldhu	r20,0(r4)
 40103bc:	21000104 	addi	r4,r4,4
 40103c0:	d9002d15 	stw	r4,180(sp)
 40103c4:	003cfe06 	br	400f7c0 <__alt_mem_epcs_flash_controller_0+0xfb00e7c0>
 40103c8:	bc400007 	ldb	r17,0(r23)
 40103cc:	003a9606 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 40103d0:	9080040c 	andi	r2,r18,16
 40103d4:	10010126 	beq	r2,zero,40107dc <___svfprintf_internal_r+0x1b04>
 40103d8:	d9402d17 	ldw	r5,180(sp)
 40103dc:	d8c02f17 	ldw	r3,188(sp)
 40103e0:	28800017 	ldw	r2,0(r5)
 40103e4:	29400104 	addi	r5,r5,4
 40103e8:	d9402d15 	stw	r5,180(sp)
 40103ec:	10c00015 	stw	r3,0(r2)
 40103f0:	003a6406 	br	400ed84 <__alt_mem_epcs_flash_controller_0+0xfb00dd84>
 40103f4:	d9002917 	ldw	r4,164(sp)
 40103f8:	d8002785 	stb	zero,158(sp)
 40103fc:	203d8d16 	blt	r4,zero,400fa34 <__alt_mem_epcs_flash_controller_0+0xfb00ea34>
 4010400:	00bfdfc4 	movi	r2,-129
 4010404:	90a4703a 	and	r18,r18,r2
 4010408:	003b0506 	br	400f020 <__alt_mem_epcs_flash_controller_0+0xfb00e020>
 401040c:	01410234 	movhi	r5,1032
 4010410:	29553684 	addi	r5,r5,21722
 4010414:	d9402b15 	stw	r5,172(sp)
 4010418:	d9402b17 	ldw	r5,172(sp)
 401041c:	1c47883a 	add	r3,r3,r17
 4010420:	10800044 	addi	r2,r2,1
 4010424:	41400015 	stw	r5,0(r8)
 4010428:	44400115 	stw	r17,4(r8)
 401042c:	d8c02015 	stw	r3,128(sp)
 4010430:	d8801f15 	stw	r2,124(sp)
 4010434:	010001c4 	movi	r4,7
 4010438:	20bf3016 	blt	r4,r2,40100fc <__alt_mem_epcs_flash_controller_0+0xfb00f0fc>
 401043c:	42000204 	addi	r8,r8,8
 4010440:	003f3506 	br	4010118 <__alt_mem_epcs_flash_controller_0+0xfb00f118>
 4010444:	01010234 	movhi	r4,1032
 4010448:	21153684 	addi	r4,r4,21722
 401044c:	d9002b15 	stw	r4,172(sp)
 4010450:	003c5e06 	br	400f5cc <__alt_mem_epcs_flash_controller_0+0xfb00e5cc>
 4010454:	d9402c17 	ldw	r5,176(sp)
 4010458:	d9801e04 	addi	r6,sp,120
 401045c:	9809883a 	mov	r4,r19
 4010460:	401786c0 	call	401786c <__ssprint_r>
 4010464:	103b011e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010468:	d8c02017 	ldw	r3,128(sp)
 401046c:	da000404 	addi	r8,sp,16
 4010470:	003d9306 	br	400fac0 <__alt_mem_epcs_flash_controller_0+0xfb00eac0>
 4010474:	d8801f17 	ldw	r2,124(sp)
 4010478:	01410234 	movhi	r5,1032
 401047c:	01000044 	movi	r4,1
 4010480:	18c00044 	addi	r3,r3,1
 4010484:	10800044 	addi	r2,r2,1
 4010488:	29553604 	addi	r5,r5,21720
 401048c:	41000115 	stw	r4,4(r8)
 4010490:	41400015 	stw	r5,0(r8)
 4010494:	d8c02015 	stw	r3,128(sp)
 4010498:	d8801f15 	stw	r2,124(sp)
 401049c:	010001c4 	movi	r4,7
 40104a0:	2080b516 	blt	r4,r2,4010778 <___svfprintf_internal_r+0x1aa0>
 40104a4:	42000204 	addi	r8,r8,8
 40104a8:	8800041e 	bne	r17,zero,40104bc <___svfprintf_internal_r+0x17e4>
 40104ac:	d8803317 	ldw	r2,204(sp)
 40104b0:	1000021e 	bne	r2,zero,40104bc <___svfprintf_internal_r+0x17e4>
 40104b4:	9080004c 	andi	r2,r18,1
 40104b8:	103c5b26 	beq	r2,zero,400f628 <__alt_mem_epcs_flash_controller_0+0xfb00e628>
 40104bc:	d9003817 	ldw	r4,224(sp)
 40104c0:	d8801f17 	ldw	r2,124(sp)
 40104c4:	d9403417 	ldw	r5,208(sp)
 40104c8:	20c7883a 	add	r3,r4,r3
 40104cc:	10800044 	addi	r2,r2,1
 40104d0:	41000115 	stw	r4,4(r8)
 40104d4:	41400015 	stw	r5,0(r8)
 40104d8:	d8c02015 	stw	r3,128(sp)
 40104dc:	d8801f15 	stw	r2,124(sp)
 40104e0:	010001c4 	movi	r4,7
 40104e4:	20818016 	blt	r4,r2,4010ae8 <___svfprintf_internal_r+0x1e10>
 40104e8:	42000204 	addi	r8,r8,8
 40104ec:	0463c83a 	sub	r17,zero,r17
 40104f0:	0440cb0e 	bge	zero,r17,4010820 <___svfprintf_internal_r+0x1b48>
 40104f4:	05800404 	movi	r22,16
 40104f8:	b440e80e 	bge	r22,r17,401089c <___svfprintf_internal_r+0x1bc4>
 40104fc:	01410234 	movhi	r5,1032
 4010500:	29553684 	addi	r5,r5,21722
 4010504:	d9402b15 	stw	r5,172(sp)
 4010508:	070001c4 	movi	fp,7
 401050c:	dd002c17 	ldw	r20,176(sp)
 4010510:	00000306 	br	4010520 <___svfprintf_internal_r+0x1848>
 4010514:	42000204 	addi	r8,r8,8
 4010518:	8c7ffc04 	addi	r17,r17,-16
 401051c:	b440e20e 	bge	r22,r17,40108a8 <___svfprintf_internal_r+0x1bd0>
 4010520:	18c00404 	addi	r3,r3,16
 4010524:	10800044 	addi	r2,r2,1
 4010528:	45400015 	stw	r21,0(r8)
 401052c:	45800115 	stw	r22,4(r8)
 4010530:	d8c02015 	stw	r3,128(sp)
 4010534:	d8801f15 	stw	r2,124(sp)
 4010538:	e0bff60e 	bge	fp,r2,4010514 <__alt_mem_epcs_flash_controller_0+0xfb00f514>
 401053c:	d9801e04 	addi	r6,sp,120
 4010540:	a00b883a 	mov	r5,r20
 4010544:	9809883a 	mov	r4,r19
 4010548:	401786c0 	call	401786c <__ssprint_r>
 401054c:	103ac71e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010550:	d8c02017 	ldw	r3,128(sp)
 4010554:	d8801f17 	ldw	r2,124(sp)
 4010558:	da000404 	addi	r8,sp,16
 401055c:	003fee06 	br	4010518 <__alt_mem_epcs_flash_controller_0+0xfb00f518>
 4010560:	d8c02d17 	ldw	r3,180(sp)
 4010564:	d9002917 	ldw	r4,164(sp)
 4010568:	002d883a 	mov	r22,zero
 401056c:	18800104 	addi	r2,r3,4
 4010570:	1d000017 	ldw	r20,0(r3)
 4010574:	203e7d0e 	bge	r4,zero,400ff6c <__alt_mem_epcs_flash_controller_0+0xfb00ef6c>
 4010578:	003eda06 	br	40100e4 <__alt_mem_epcs_flash_controller_0+0xfb00f0e4>
 401057c:	d9402d17 	ldw	r5,180(sp)
 4010580:	d8c02917 	ldw	r3,164(sp)
 4010584:	002d883a 	mov	r22,zero
 4010588:	28800104 	addi	r2,r5,4
 401058c:	2d000017 	ldw	r20,0(r5)
 4010590:	183e2d0e 	bge	r3,zero,400fe48 <__alt_mem_epcs_flash_controller_0+0xfb00ee48>
 4010594:	003f6b06 	br	4010344 <__alt_mem_epcs_flash_controller_0+0xfb00f344>
 4010598:	d8c02d15 	stw	r3,180(sp)
 401059c:	0039883a 	mov	fp,zero
 40105a0:	003ed206 	br	40100ec <__alt_mem_epcs_flash_controller_0+0xfb00f0ec>
 40105a4:	bc400043 	ldbu	r17,1(r23)
 40105a8:	94800814 	ori	r18,r18,32
 40105ac:	bdc00044 	addi	r23,r23,1
 40105b0:	8c403fcc 	andi	r17,r17,255
 40105b4:	8c40201c 	xori	r17,r17,128
 40105b8:	8c7fe004 	addi	r17,r17,-128
 40105bc:	003a1a06 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 40105c0:	d9402c17 	ldw	r5,176(sp)
 40105c4:	d9801e04 	addi	r6,sp,120
 40105c8:	9809883a 	mov	r4,r19
 40105cc:	401786c0 	call	401786c <__ssprint_r>
 40105d0:	103aa61e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 40105d4:	d8c02017 	ldw	r3,128(sp)
 40105d8:	da000404 	addi	r8,sp,16
 40105dc:	003d4a06 	br	400fb08 <__alt_mem_epcs_flash_controller_0+0xfb00eb08>
 40105e0:	d9002917 	ldw	r4,164(sp)
 40105e4:	05bff7c4 	movi	r22,-33
 40105e8:	00bfffc4 	movi	r2,-1
 40105ec:	8dac703a 	and	r22,r17,r22
 40105f0:	20806a26 	beq	r4,r2,401079c <___svfprintf_internal_r+0x1ac4>
 40105f4:	008011c4 	movi	r2,71
 40105f8:	b0813726 	beq	r22,r2,4010ad8 <___svfprintf_internal_r+0x1e00>
 40105fc:	d9003717 	ldw	r4,220(sp)
 4010600:	90c04014 	ori	r3,r18,256
 4010604:	d8c02b15 	stw	r3,172(sp)
 4010608:	20015d16 	blt	r4,zero,4010b80 <___svfprintf_internal_r+0x1ea8>
 401060c:	dd003717 	ldw	r20,220(sp)
 4010610:	d8002a05 	stb	zero,168(sp)
 4010614:	00801984 	movi	r2,102
 4010618:	88814026 	beq	r17,r2,4010b1c <___svfprintf_internal_r+0x1e44>
 401061c:	00801184 	movi	r2,70
 4010620:	88817126 	beq	r17,r2,4010be8 <___svfprintf_internal_r+0x1f10>
 4010624:	00801144 	movi	r2,69
 4010628:	b0816226 	beq	r22,r2,4010bb4 <___svfprintf_internal_r+0x1edc>
 401062c:	d8c02917 	ldw	r3,164(sp)
 4010630:	d8802104 	addi	r2,sp,132
 4010634:	d8800315 	stw	r2,12(sp)
 4010638:	d9403617 	ldw	r5,216(sp)
 401063c:	d8802504 	addi	r2,sp,148
 4010640:	d8800215 	stw	r2,8(sp)
 4010644:	d8802604 	addi	r2,sp,152
 4010648:	d8c00015 	stw	r3,0(sp)
 401064c:	d8800115 	stw	r2,4(sp)
 4010650:	01c00084 	movi	r7,2
 4010654:	a00d883a 	mov	r6,r20
 4010658:	9809883a 	mov	r4,r19
 401065c:	d8c03d15 	stw	r3,244(sp)
 4010660:	da003e15 	stw	r8,248(sp)
 4010664:	40134d40 	call	40134d4 <_dtoa_r>
 4010668:	1021883a 	mov	r16,r2
 401066c:	008019c4 	movi	r2,103
 4010670:	d8c03d17 	ldw	r3,244(sp)
 4010674:	da003e17 	ldw	r8,248(sp)
 4010678:	8880e726 	beq	r17,r2,4010a18 <___svfprintf_internal_r+0x1d40>
 401067c:	008011c4 	movi	r2,71
 4010680:	8880d426 	beq	r17,r2,40109d4 <___svfprintf_internal_r+0x1cfc>
 4010684:	80f9883a 	add	fp,r16,r3
 4010688:	d9003617 	ldw	r4,216(sp)
 401068c:	000d883a 	mov	r6,zero
 4010690:	000f883a 	mov	r7,zero
 4010694:	a00b883a 	mov	r5,r20
 4010698:	da003e15 	stw	r8,248(sp)
 401069c:	401b6a40 	call	401b6a4 <__eqdf2>
 40106a0:	da003e17 	ldw	r8,248(sp)
 40106a4:	1000e426 	beq	r2,zero,4010a38 <___svfprintf_internal_r+0x1d60>
 40106a8:	d8802117 	ldw	r2,132(sp)
 40106ac:	1700062e 	bgeu	r2,fp,40106c8 <___svfprintf_internal_r+0x19f0>
 40106b0:	01000c04 	movi	r4,48
 40106b4:	10c00044 	addi	r3,r2,1
 40106b8:	d8c02115 	stw	r3,132(sp)
 40106bc:	11000005 	stb	r4,0(r2)
 40106c0:	d8802117 	ldw	r2,132(sp)
 40106c4:	173ffb36 	bltu	r2,fp,40106b4 <__alt_mem_epcs_flash_controller_0+0xfb00f6b4>
 40106c8:	1405c83a 	sub	r2,r2,r16
 40106cc:	d8803315 	stw	r2,204(sp)
 40106d0:	008011c4 	movi	r2,71
 40106d4:	b080c526 	beq	r22,r2,40109ec <___svfprintf_internal_r+0x1d14>
 40106d8:	00801944 	movi	r2,101
 40106dc:	1441d90e 	bge	r2,r17,4010e44 <___svfprintf_internal_r+0x216c>
 40106e0:	d8c02617 	ldw	r3,152(sp)
 40106e4:	00801984 	movi	r2,102
 40106e8:	d8c03215 	stw	r3,200(sp)
 40106ec:	88813426 	beq	r17,r2,4010bc0 <___svfprintf_internal_r+0x1ee8>
 40106f0:	d8c03217 	ldw	r3,200(sp)
 40106f4:	d9003317 	ldw	r4,204(sp)
 40106f8:	19012516 	blt	r3,r4,4010b90 <___svfprintf_internal_r+0x1eb8>
 40106fc:	9480004c 	andi	r18,r18,1
 4010700:	9001841e 	bne	r18,zero,4010d14 <___svfprintf_internal_r+0x203c>
 4010704:	1805883a 	mov	r2,r3
 4010708:	1801cc16 	blt	r3,zero,4010e3c <___svfprintf_internal_r+0x2164>
 401070c:	d8c03217 	ldw	r3,200(sp)
 4010710:	044019c4 	movi	r17,103
 4010714:	d8c02e15 	stw	r3,184(sp)
 4010718:	df002a07 	ldb	fp,168(sp)
 401071c:	e000a61e 	bne	fp,zero,40109b8 <___svfprintf_internal_r+0x1ce0>
 4010720:	df002783 	ldbu	fp,158(sp)
 4010724:	d8802a15 	stw	r2,168(sp)
 4010728:	dc802b17 	ldw	r18,172(sp)
 401072c:	d8002915 	stw	zero,164(sp)
 4010730:	003b1706 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 4010734:	04010234 	movhi	r16,1032
 4010738:	84152604 	addi	r16,r16,21656
 401073c:	003aa606 	br	400f1d8 <__alt_mem_epcs_flash_controller_0+0xfb00e1d8>
 4010740:	d9003917 	ldw	r4,228(sp)
 4010744:	04001004 	movi	r16,64
 4010748:	800b883a 	mov	r5,r16
 401074c:	400dedc0 	call	400dedc <_malloc_r>
 4010750:	d9002c17 	ldw	r4,176(sp)
 4010754:	20800015 	stw	r2,0(r4)
 4010758:	20800415 	stw	r2,16(r4)
 401075c:	1001cb26 	beq	r2,zero,4010e8c <___svfprintf_internal_r+0x21b4>
 4010760:	d8802c17 	ldw	r2,176(sp)
 4010764:	14000515 	stw	r16,20(r2)
 4010768:	00397606 	br	400ed44 <__alt_mem_epcs_flash_controller_0+0xfb00dd44>
 401076c:	04010234 	movhi	r16,1032
 4010770:	84152804 	addi	r16,r16,21664
 4010774:	003ee106 	br	40102fc <__alt_mem_epcs_flash_controller_0+0xfb00f2fc>
 4010778:	d9402c17 	ldw	r5,176(sp)
 401077c:	d9801e04 	addi	r6,sp,120
 4010780:	9809883a 	mov	r4,r19
 4010784:	401786c0 	call	401786c <__ssprint_r>
 4010788:	103a381e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 401078c:	dc402617 	ldw	r17,152(sp)
 4010790:	d8c02017 	ldw	r3,128(sp)
 4010794:	da000404 	addi	r8,sp,16
 4010798:	003f4306 	br	40104a8 <__alt_mem_epcs_flash_controller_0+0xfb00f4a8>
 401079c:	01400184 	movi	r5,6
 40107a0:	d9402915 	stw	r5,164(sp)
 40107a4:	003f9506 	br	40105fc <__alt_mem_epcs_flash_controller_0+0xfb00f5fc>
 40107a8:	d9002d17 	ldw	r4,180(sp)
 40107ac:	25000017 	ldw	r20,0(r4)
 40107b0:	21000104 	addi	r4,r4,4
 40107b4:	d9002d15 	stw	r4,180(sp)
 40107b8:	a02dd7fa 	srai	r22,r20,31
 40107bc:	b005883a 	mov	r2,r22
 40107c0:	003a9b06 	br	400f230 <__alt_mem_epcs_flash_controller_0+0xfb00e230>
 40107c4:	d9402d17 	ldw	r5,180(sp)
 40107c8:	002d883a 	mov	r22,zero
 40107cc:	2d000017 	ldw	r20,0(r5)
 40107d0:	29400104 	addi	r5,r5,4
 40107d4:	d9402d15 	stw	r5,180(sp)
 40107d8:	003bf906 	br	400f7c0 <__alt_mem_epcs_flash_controller_0+0xfb00e7c0>
 40107dc:	9480100c 	andi	r18,r18,64
 40107e0:	90006e26 	beq	r18,zero,401099c <___svfprintf_internal_r+0x1cc4>
 40107e4:	d9002d17 	ldw	r4,180(sp)
 40107e8:	d9402f17 	ldw	r5,188(sp)
 40107ec:	20800017 	ldw	r2,0(r4)
 40107f0:	21000104 	addi	r4,r4,4
 40107f4:	d9002d15 	stw	r4,180(sp)
 40107f8:	1140000d 	sth	r5,0(r2)
 40107fc:	00396106 	br	400ed84 <__alt_mem_epcs_flash_controller_0+0xfb00dd84>
 4010800:	d9402c17 	ldw	r5,176(sp)
 4010804:	d9801e04 	addi	r6,sp,120
 4010808:	9809883a 	mov	r4,r19
 401080c:	401786c0 	call	401786c <__ssprint_r>
 4010810:	103a161e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010814:	d8c02017 	ldw	r3,128(sp)
 4010818:	d8801f17 	ldw	r2,124(sp)
 401081c:	da000404 	addi	r8,sp,16
 4010820:	d9403317 	ldw	r5,204(sp)
 4010824:	10800044 	addi	r2,r2,1
 4010828:	44000015 	stw	r16,0(r8)
 401082c:	28c7883a 	add	r3,r5,r3
 4010830:	003b7706 	br	400f610 <__alt_mem_epcs_flash_controller_0+0xfb00e610>
 4010834:	8009883a 	mov	r4,r16
 4010838:	da003e15 	stw	r8,248(sp)
 401083c:	400ec400 	call	400ec40 <strlen>
 4010840:	d8802e15 	stw	r2,184(sp)
 4010844:	da003e17 	ldw	r8,248(sp)
 4010848:	103c280e 	bge	r2,zero,400f8ec <__alt_mem_epcs_flash_controller_0+0xfb00e8ec>
 401084c:	0005883a 	mov	r2,zero
 4010850:	003c2606 	br	400f8ec <__alt_mem_epcs_flash_controller_0+0xfb00e8ec>
 4010854:	00bfffc4 	movi	r2,-1
 4010858:	003a0906 	br	400f080 <__alt_mem_epcs_flash_controller_0+0xfb00e080>
 401085c:	01010234 	movhi	r4,1032
 4010860:	21153a84 	addi	r4,r4,21738
 4010864:	d9003515 	stw	r4,212(sp)
 4010868:	003b0606 	br	400f484 <__alt_mem_epcs_flash_controller_0+0xfb00e484>
 401086c:	013fffc4 	movi	r4,-1
 4010870:	003a2706 	br	400f110 <__alt_mem_epcs_flash_controller_0+0xfb00e110>
 4010874:	d9402c17 	ldw	r5,176(sp)
 4010878:	d9801e04 	addi	r6,sp,120
 401087c:	9809883a 	mov	r4,r19
 4010880:	401786c0 	call	401786c <__ssprint_r>
 4010884:	1039f91e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010888:	d8c02017 	ldw	r3,128(sp)
 401088c:	da000404 	addi	r8,sp,16
 4010890:	003d8406 	br	400fea4 <__alt_mem_epcs_flash_controller_0+0xfb00eea4>
 4010894:	0023883a 	mov	r17,zero
 4010898:	003d8306 	br	400fea8 <__alt_mem_epcs_flash_controller_0+0xfb00eea8>
 401089c:	01010234 	movhi	r4,1032
 40108a0:	21153684 	addi	r4,r4,21722
 40108a4:	d9002b15 	stw	r4,172(sp)
 40108a8:	d9002b17 	ldw	r4,172(sp)
 40108ac:	1c47883a 	add	r3,r3,r17
 40108b0:	10800044 	addi	r2,r2,1
 40108b4:	41000015 	stw	r4,0(r8)
 40108b8:	44400115 	stw	r17,4(r8)
 40108bc:	d8c02015 	stw	r3,128(sp)
 40108c0:	d8801f15 	stw	r2,124(sp)
 40108c4:	010001c4 	movi	r4,7
 40108c8:	20bfcd16 	blt	r4,r2,4010800 <__alt_mem_epcs_flash_controller_0+0xfb00f800>
 40108cc:	42000204 	addi	r8,r8,8
 40108d0:	003fd306 	br	4010820 <__alt_mem_epcs_flash_controller_0+0xfb00f820>
 40108d4:	d9402c17 	ldw	r5,176(sp)
 40108d8:	d9801e04 	addi	r6,sp,120
 40108dc:	9809883a 	mov	r4,r19
 40108e0:	401786c0 	call	401786c <__ssprint_r>
 40108e4:	1039e11e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 40108e8:	d8802617 	ldw	r2,152(sp)
 40108ec:	d8c02017 	ldw	r3,128(sp)
 40108f0:	da000404 	addi	r8,sp,16
 40108f4:	003e1c06 	br	4010168 <__alt_mem_epcs_flash_controller_0+0xfb00f168>
 40108f8:	d8802917 	ldw	r2,164(sp)
 40108fc:	00c00184 	movi	r3,6
 4010900:	1880012e 	bgeu	r3,r2,4010908 <___svfprintf_internal_r+0x1c30>
 4010904:	1805883a 	mov	r2,r3
 4010908:	d8802e15 	stw	r2,184(sp)
 401090c:	1000f316 	blt	r2,zero,4010cdc <___svfprintf_internal_r+0x2004>
 4010910:	04010234 	movhi	r16,1032
 4010914:	d8802a15 	stw	r2,168(sp)
 4010918:	dd002d15 	stw	r20,180(sp)
 401091c:	d8002915 	stw	zero,164(sp)
 4010920:	d8003215 	stw	zero,200(sp)
 4010924:	84153404 	addi	r16,r16,21712
 4010928:	0039883a 	mov	fp,zero
 401092c:	003a9f06 	br	400f3ac <__alt_mem_epcs_flash_controller_0+0xfb00e3ac>
 4010930:	01010234 	movhi	r4,1032
 4010934:	21153a84 	addi	r4,r4,21738
 4010938:	d9003515 	stw	r4,212(sp)
 401093c:	003b5f06 	br	400f6bc <__alt_mem_epcs_flash_controller_0+0xfb00e6bc>
 4010940:	d9402c17 	ldw	r5,176(sp)
 4010944:	d9801e04 	addi	r6,sp,120
 4010948:	9809883a 	mov	r4,r19
 401094c:	401786c0 	call	401786c <__ssprint_r>
 4010950:	1039c61e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010954:	d8802617 	ldw	r2,152(sp)
 4010958:	d9403317 	ldw	r5,204(sp)
 401095c:	d8c02017 	ldw	r3,128(sp)
 4010960:	da000404 	addi	r8,sp,16
 4010964:	2885c83a 	sub	r2,r5,r2
 4010968:	003e1006 	br	40101ac <__alt_mem_epcs_flash_controller_0+0xfb00f1ac>
 401096c:	00800044 	movi	r2,1
 4010970:	10803fcc 	andi	r2,r2,255
 4010974:	00c00044 	movi	r3,1
 4010978:	10fa3526 	beq	r2,r3,400f250 <__alt_mem_epcs_flash_controller_0+0xfb00e250>
 401097c:	00c00084 	movi	r3,2
 4010980:	10fb9e26 	beq	r2,r3,400f7fc <__alt_mem_epcs_flash_controller_0+0xfb00e7fc>
 4010984:	003a6406 	br	400f318 <__alt_mem_epcs_flash_controller_0+0xfb00e318>
 4010988:	0021883a 	mov	r16,zero
 401098c:	003e0806 	br	40101b0 <__alt_mem_epcs_flash_controller_0+0xfb00f1b0>
 4010990:	07000b44 	movi	fp,45
 4010994:	df002785 	stb	fp,158(sp)
 4010998:	003a0b06 	br	400f1c8 <__alt_mem_epcs_flash_controller_0+0xfb00e1c8>
 401099c:	d8c02d17 	ldw	r3,180(sp)
 40109a0:	d9002f17 	ldw	r4,188(sp)
 40109a4:	18800017 	ldw	r2,0(r3)
 40109a8:	18c00104 	addi	r3,r3,4
 40109ac:	d8c02d15 	stw	r3,180(sp)
 40109b0:	11000015 	stw	r4,0(r2)
 40109b4:	0038f306 	br	400ed84 <__alt_mem_epcs_flash_controller_0+0xfb00dd84>
 40109b8:	00c00b44 	movi	r3,45
 40109bc:	d8c02785 	stb	r3,158(sp)
 40109c0:	d8802a15 	stw	r2,168(sp)
 40109c4:	dc802b17 	ldw	r18,172(sp)
 40109c8:	d8002915 	stw	zero,164(sp)
 40109cc:	07000b44 	movi	fp,45
 40109d0:	003a7306 	br	400f3a0 <__alt_mem_epcs_flash_controller_0+0xfb00e3a0>
 40109d4:	9080004c 	andi	r2,r18,1
 40109d8:	1000941e 	bne	r2,zero,4010c2c <___svfprintf_internal_r+0x1f54>
 40109dc:	d8802117 	ldw	r2,132(sp)
 40109e0:	1405c83a 	sub	r2,r2,r16
 40109e4:	d8803315 	stw	r2,204(sp)
 40109e8:	b441161e 	bne	r22,r17,4010e44 <___svfprintf_internal_r+0x216c>
 40109ec:	dd802617 	ldw	r22,152(sp)
 40109f0:	00bfff44 	movi	r2,-3
 40109f4:	b0801a16 	blt	r22,r2,4010a60 <___svfprintf_internal_r+0x1d88>
 40109f8:	d9402917 	ldw	r5,164(sp)
 40109fc:	2d801816 	blt	r5,r22,4010a60 <___svfprintf_internal_r+0x1d88>
 4010a00:	dd803215 	stw	r22,200(sp)
 4010a04:	003f3a06 	br	40106f0 <__alt_mem_epcs_flash_controller_0+0xfb00f6f0>
 4010a08:	1025883a 	mov	r18,r2
 4010a0c:	0039883a 	mov	fp,zero
 4010a10:	00800084 	movi	r2,2
 4010a14:	003fd606 	br	4010970 <__alt_mem_epcs_flash_controller_0+0xfb00f970>
 4010a18:	9080004c 	andi	r2,r18,1
 4010a1c:	103f191e 	bne	r2,zero,4010684 <__alt_mem_epcs_flash_controller_0+0xfb00f684>
 4010a20:	d8802117 	ldw	r2,132(sp)
 4010a24:	003f2806 	br	40106c8 <__alt_mem_epcs_flash_controller_0+0xfb00f6c8>
 4010a28:	01010234 	movhi	r4,1032
 4010a2c:	21153684 	addi	r4,r4,21722
 4010a30:	d9002b15 	stw	r4,172(sp)
 4010a34:	003c7c06 	br	400fc28 <__alt_mem_epcs_flash_controller_0+0xfb00ec28>
 4010a38:	e005883a 	mov	r2,fp
 4010a3c:	003f2206 	br	40106c8 <__alt_mem_epcs_flash_controller_0+0xfb00f6c8>
 4010a40:	d9402917 	ldw	r5,164(sp)
 4010a44:	df002783 	ldbu	fp,158(sp)
 4010a48:	dd002d15 	stw	r20,180(sp)
 4010a4c:	d9402a15 	stw	r5,168(sp)
 4010a50:	d9402e15 	stw	r5,184(sp)
 4010a54:	d8002915 	stw	zero,164(sp)
 4010a58:	d8003215 	stw	zero,200(sp)
 4010a5c:	003a4c06 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 4010a60:	8c7fff84 	addi	r17,r17,-2
 4010a64:	b5bfffc4 	addi	r22,r22,-1
 4010a68:	dd802615 	stw	r22,152(sp)
 4010a6c:	dc4022c5 	stb	r17,139(sp)
 4010a70:	b000c316 	blt	r22,zero,4010d80 <___svfprintf_internal_r+0x20a8>
 4010a74:	00800ac4 	movi	r2,43
 4010a78:	d8802305 	stb	r2,140(sp)
 4010a7c:	00800244 	movi	r2,9
 4010a80:	15806e16 	blt	r2,r22,4010c3c <___svfprintf_internal_r+0x1f64>
 4010a84:	00800c04 	movi	r2,48
 4010a88:	b5800c04 	addi	r22,r22,48
 4010a8c:	d8802345 	stb	r2,141(sp)
 4010a90:	dd802385 	stb	r22,142(sp)
 4010a94:	d88023c4 	addi	r2,sp,143
 4010a98:	df0022c4 	addi	fp,sp,139
 4010a9c:	d8c03317 	ldw	r3,204(sp)
 4010aa0:	1739c83a 	sub	fp,r2,fp
 4010aa4:	d9003317 	ldw	r4,204(sp)
 4010aa8:	e0c7883a 	add	r3,fp,r3
 4010aac:	df003b15 	stw	fp,236(sp)
 4010ab0:	d8c02e15 	stw	r3,184(sp)
 4010ab4:	00800044 	movi	r2,1
 4010ab8:	1100b70e 	bge	r2,r4,4010d98 <___svfprintf_internal_r+0x20c0>
 4010abc:	d8c02e17 	ldw	r3,184(sp)
 4010ac0:	18c00044 	addi	r3,r3,1
 4010ac4:	d8c02e15 	stw	r3,184(sp)
 4010ac8:	1805883a 	mov	r2,r3
 4010acc:	1800b016 	blt	r3,zero,4010d90 <___svfprintf_internal_r+0x20b8>
 4010ad0:	d8003215 	stw	zero,200(sp)
 4010ad4:	003f1006 	br	4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010ad8:	d8802917 	ldw	r2,164(sp)
 4010adc:	103ec71e 	bne	r2,zero,40105fc <__alt_mem_epcs_flash_controller_0+0xfb00f5fc>
 4010ae0:	dc002915 	stw	r16,164(sp)
 4010ae4:	003ec506 	br	40105fc <__alt_mem_epcs_flash_controller_0+0xfb00f5fc>
 4010ae8:	d9402c17 	ldw	r5,176(sp)
 4010aec:	d9801e04 	addi	r6,sp,120
 4010af0:	9809883a 	mov	r4,r19
 4010af4:	401786c0 	call	401786c <__ssprint_r>
 4010af8:	10395c1e 	bne	r2,zero,400f06c <__alt_mem_epcs_flash_controller_0+0xfb00e06c>
 4010afc:	dc402617 	ldw	r17,152(sp)
 4010b00:	d8c02017 	ldw	r3,128(sp)
 4010b04:	d8801f17 	ldw	r2,124(sp)
 4010b08:	da000404 	addi	r8,sp,16
 4010b0c:	003e7706 	br	40104ec <__alt_mem_epcs_flash_controller_0+0xfb00f4ec>
 4010b10:	582f883a 	mov	r23,r11
 4010b14:	d8002915 	stw	zero,164(sp)
 4010b18:	0038c406 	br	400ee2c <__alt_mem_epcs_flash_controller_0+0xfb00de2c>
 4010b1c:	d8c02917 	ldw	r3,164(sp)
 4010b20:	d8802104 	addi	r2,sp,132
 4010b24:	d8800315 	stw	r2,12(sp)
 4010b28:	d9403617 	ldw	r5,216(sp)
 4010b2c:	d8802504 	addi	r2,sp,148
 4010b30:	d8800215 	stw	r2,8(sp)
 4010b34:	d8802604 	addi	r2,sp,152
 4010b38:	d8c00015 	stw	r3,0(sp)
 4010b3c:	9809883a 	mov	r4,r19
 4010b40:	d8800115 	stw	r2,4(sp)
 4010b44:	01c000c4 	movi	r7,3
 4010b48:	a00d883a 	mov	r6,r20
 4010b4c:	da003e15 	stw	r8,248(sp)
 4010b50:	40134d40 	call	40134d4 <_dtoa_r>
 4010b54:	d9002917 	ldw	r4,164(sp)
 4010b58:	da003e17 	ldw	r8,248(sp)
 4010b5c:	1021883a 	mov	r16,r2
 4010b60:	1139883a 	add	fp,r2,r4
 4010b64:	2007883a 	mov	r3,r4
 4010b68:	81000007 	ldb	r4,0(r16)
 4010b6c:	00800c04 	movi	r2,48
 4010b70:	20806f26 	beq	r4,r2,4010d30 <___svfprintf_internal_r+0x2058>
 4010b74:	d8c02617 	ldw	r3,152(sp)
 4010b78:	e0f9883a 	add	fp,fp,r3
 4010b7c:	003ec206 	br	4010688 <__alt_mem_epcs_flash_controller_0+0xfb00f688>
 4010b80:	00c00b44 	movi	r3,45
 4010b84:	2520003c 	xorhi	r20,r4,32768
 4010b88:	d8c02a05 	stb	r3,168(sp)
 4010b8c:	003ea106 	br	4010614 <__alt_mem_epcs_flash_controller_0+0xfb00f614>
 4010b90:	d8c03217 	ldw	r3,200(sp)
 4010b94:	00c0890e 	bge	zero,r3,4010dbc <___svfprintf_internal_r+0x20e4>
 4010b98:	00800044 	movi	r2,1
 4010b9c:	d9003317 	ldw	r4,204(sp)
 4010ba0:	1105883a 	add	r2,r2,r4
 4010ba4:	d8802e15 	stw	r2,184(sp)
 4010ba8:	10005f16 	blt	r2,zero,4010d28 <___svfprintf_internal_r+0x2050>
 4010bac:	044019c4 	movi	r17,103
 4010bb0:	003ed906 	br	4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010bb4:	d9002917 	ldw	r4,164(sp)
 4010bb8:	20c00044 	addi	r3,r4,1
 4010bbc:	003e9c06 	br	4010630 <__alt_mem_epcs_flash_controller_0+0xfb00f630>
 4010bc0:	d9002917 	ldw	r4,164(sp)
 4010bc4:	00c0680e 	bge	zero,r3,4010d68 <___svfprintf_internal_r+0x2090>
 4010bc8:	2000461e 	bne	r4,zero,4010ce4 <___svfprintf_internal_r+0x200c>
 4010bcc:	9480004c 	andi	r18,r18,1
 4010bd0:	9000441e 	bne	r18,zero,4010ce4 <___svfprintf_internal_r+0x200c>
 4010bd4:	1805883a 	mov	r2,r3
 4010bd8:	1800a016 	blt	r3,zero,4010e5c <___svfprintf_internal_r+0x2184>
 4010bdc:	d8c03217 	ldw	r3,200(sp)
 4010be0:	d8c02e15 	stw	r3,184(sp)
 4010be4:	003ecc06 	br	4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010be8:	d9402917 	ldw	r5,164(sp)
 4010bec:	d8802104 	addi	r2,sp,132
 4010bf0:	d8800315 	stw	r2,12(sp)
 4010bf4:	d9400015 	stw	r5,0(sp)
 4010bf8:	d8802504 	addi	r2,sp,148
 4010bfc:	d9403617 	ldw	r5,216(sp)
 4010c00:	d8800215 	stw	r2,8(sp)
 4010c04:	d8802604 	addi	r2,sp,152
 4010c08:	d8800115 	stw	r2,4(sp)
 4010c0c:	01c000c4 	movi	r7,3
 4010c10:	a00d883a 	mov	r6,r20
 4010c14:	9809883a 	mov	r4,r19
 4010c18:	da003e15 	stw	r8,248(sp)
 4010c1c:	40134d40 	call	40134d4 <_dtoa_r>
 4010c20:	d8c02917 	ldw	r3,164(sp)
 4010c24:	da003e17 	ldw	r8,248(sp)
 4010c28:	1021883a 	mov	r16,r2
 4010c2c:	00801184 	movi	r2,70
 4010c30:	80f9883a 	add	fp,r16,r3
 4010c34:	88bfcc26 	beq	r17,r2,4010b68 <__alt_mem_epcs_flash_controller_0+0xfb00fb68>
 4010c38:	003e9306 	br	4010688 <__alt_mem_epcs_flash_controller_0+0xfb00f688>
 4010c3c:	df0022c4 	addi	fp,sp,139
 4010c40:	dc002915 	stw	r16,164(sp)
 4010c44:	9829883a 	mov	r20,r19
 4010c48:	e021883a 	mov	r16,fp
 4010c4c:	4027883a 	mov	r19,r8
 4010c50:	b009883a 	mov	r4,r22
 4010c54:	01400284 	movi	r5,10
 4010c58:	400a0a00 	call	400a0a0 <__modsi3>
 4010c5c:	10800c04 	addi	r2,r2,48
 4010c60:	843fffc4 	addi	r16,r16,-1
 4010c64:	b009883a 	mov	r4,r22
 4010c68:	01400284 	movi	r5,10
 4010c6c:	80800005 	stb	r2,0(r16)
 4010c70:	400a01c0 	call	400a01c <__divsi3>
 4010c74:	102d883a 	mov	r22,r2
 4010c78:	00800244 	movi	r2,9
 4010c7c:	15bff416 	blt	r2,r22,4010c50 <__alt_mem_epcs_flash_controller_0+0xfb00fc50>
 4010c80:	9811883a 	mov	r8,r19
 4010c84:	b0800c04 	addi	r2,r22,48
 4010c88:	a027883a 	mov	r19,r20
 4010c8c:	8029883a 	mov	r20,r16
 4010c90:	a17fffc4 	addi	r5,r20,-1
 4010c94:	a0bfffc5 	stb	r2,-1(r20)
 4010c98:	dc002917 	ldw	r16,164(sp)
 4010c9c:	2f00752e 	bgeu	r5,fp,4010e74 <___svfprintf_internal_r+0x219c>
 4010ca0:	d9c02384 	addi	r7,sp,142
 4010ca4:	3d0fc83a 	sub	r7,r7,r20
 4010ca8:	d9002344 	addi	r4,sp,141
 4010cac:	e1cf883a 	add	r7,fp,r7
 4010cb0:	00000106 	br	4010cb8 <___svfprintf_internal_r+0x1fe0>
 4010cb4:	28800003 	ldbu	r2,0(r5)
 4010cb8:	20800005 	stb	r2,0(r4)
 4010cbc:	21000044 	addi	r4,r4,1
 4010cc0:	29400044 	addi	r5,r5,1
 4010cc4:	21fffb1e 	bne	r4,r7,4010cb4 <__alt_mem_epcs_flash_controller_0+0xfb00fcb4>
 4010cc8:	d8802304 	addi	r2,sp,140
 4010ccc:	1505c83a 	sub	r2,r2,r20
 4010cd0:	d8c02344 	addi	r3,sp,141
 4010cd4:	1885883a 	add	r2,r3,r2
 4010cd8:	003f7006 	br	4010a9c <__alt_mem_epcs_flash_controller_0+0xfb00fa9c>
 4010cdc:	0005883a 	mov	r2,zero
 4010ce0:	003f0b06 	br	4010910 <__alt_mem_epcs_flash_controller_0+0xfb00f910>
 4010ce4:	d9002917 	ldw	r4,164(sp)
 4010ce8:	d8c03217 	ldw	r3,200(sp)
 4010cec:	20800044 	addi	r2,r4,1
 4010cf0:	1885883a 	add	r2,r3,r2
 4010cf4:	d8802e15 	stw	r2,184(sp)
 4010cf8:	103e870e 	bge	r2,zero,4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010cfc:	0005883a 	mov	r2,zero
 4010d00:	003e8506 	br	4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010d04:	01010234 	movhi	r4,1032
 4010d08:	21153684 	addi	r4,r4,21722
 4010d0c:	d9002b15 	stw	r4,172(sp)
 4010d10:	003cc506 	br	4010028 <__alt_mem_epcs_flash_controller_0+0xfb00f028>
 4010d14:	d8c03217 	ldw	r3,200(sp)
 4010d18:	18c00044 	addi	r3,r3,1
 4010d1c:	d8c02e15 	stw	r3,184(sp)
 4010d20:	1805883a 	mov	r2,r3
 4010d24:	183fa10e 	bge	r3,zero,4010bac <__alt_mem_epcs_flash_controller_0+0xfb00fbac>
 4010d28:	0005883a 	mov	r2,zero
 4010d2c:	003f9f06 	br	4010bac <__alt_mem_epcs_flash_controller_0+0xfb00fbac>
 4010d30:	d9003617 	ldw	r4,216(sp)
 4010d34:	000d883a 	mov	r6,zero
 4010d38:	000f883a 	mov	r7,zero
 4010d3c:	a00b883a 	mov	r5,r20
 4010d40:	d8c03d15 	stw	r3,244(sp)
 4010d44:	da003e15 	stw	r8,248(sp)
 4010d48:	401b6a40 	call	401b6a4 <__eqdf2>
 4010d4c:	d8c03d17 	ldw	r3,244(sp)
 4010d50:	da003e17 	ldw	r8,248(sp)
 4010d54:	103f8726 	beq	r2,zero,4010b74 <__alt_mem_epcs_flash_controller_0+0xfb00fb74>
 4010d58:	00800044 	movi	r2,1
 4010d5c:	10c7c83a 	sub	r3,r2,r3
 4010d60:	d8c02615 	stw	r3,152(sp)
 4010d64:	003f8406 	br	4010b78 <__alt_mem_epcs_flash_controller_0+0xfb00fb78>
 4010d68:	20000e1e 	bne	r4,zero,4010da4 <___svfprintf_internal_r+0x20cc>
 4010d6c:	9480004c 	andi	r18,r18,1
 4010d70:	90000c1e 	bne	r18,zero,4010da4 <___svfprintf_internal_r+0x20cc>
 4010d74:	00800044 	movi	r2,1
 4010d78:	d8802e15 	stw	r2,184(sp)
 4010d7c:	003e6606 	br	4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010d80:	00800b44 	movi	r2,45
 4010d84:	05adc83a 	sub	r22,zero,r22
 4010d88:	d8802305 	stb	r2,140(sp)
 4010d8c:	003f3b06 	br	4010a7c <__alt_mem_epcs_flash_controller_0+0xfb00fa7c>
 4010d90:	0005883a 	mov	r2,zero
 4010d94:	003f4e06 	br	4010ad0 <__alt_mem_epcs_flash_controller_0+0xfb00fad0>
 4010d98:	90a4703a 	and	r18,r18,r2
 4010d9c:	903f4a26 	beq	r18,zero,4010ac8 <__alt_mem_epcs_flash_controller_0+0xfb00fac8>
 4010da0:	003f4606 	br	4010abc <__alt_mem_epcs_flash_controller_0+0xfb00fabc>
 4010da4:	d8c02917 	ldw	r3,164(sp)
 4010da8:	18c00084 	addi	r3,r3,2
 4010dac:	d8c02e15 	stw	r3,184(sp)
 4010db0:	1805883a 	mov	r2,r3
 4010db4:	183e580e 	bge	r3,zero,4010718 <__alt_mem_epcs_flash_controller_0+0xfb00f718>
 4010db8:	003fd006 	br	4010cfc <__alt_mem_epcs_flash_controller_0+0xfb00fcfc>
 4010dbc:	00800084 	movi	r2,2
 4010dc0:	10c5c83a 	sub	r2,r2,r3
 4010dc4:	003f7506 	br	4010b9c <__alt_mem_epcs_flash_controller_0+0xfb00fb9c>
 4010dc8:	d8802d17 	ldw	r2,180(sp)
 4010dcc:	d9002d17 	ldw	r4,180(sp)
 4010dd0:	bc400043 	ldbu	r17,1(r23)
 4010dd4:	10800017 	ldw	r2,0(r2)
 4010dd8:	582f883a 	mov	r23,r11
 4010ddc:	d8802915 	stw	r2,164(sp)
 4010de0:	20800104 	addi	r2,r4,4
 4010de4:	d9002917 	ldw	r4,164(sp)
 4010de8:	d8802d15 	stw	r2,180(sp)
 4010dec:	203df00e 	bge	r4,zero,40105b0 <__alt_mem_epcs_flash_controller_0+0xfb00f5b0>
 4010df0:	8c403fcc 	andi	r17,r17,255
 4010df4:	00bfffc4 	movi	r2,-1
 4010df8:	8c40201c 	xori	r17,r17,128
 4010dfc:	d8802915 	stw	r2,164(sp)
 4010e00:	8c7fe004 	addi	r17,r17,-128
 4010e04:	00380806 	br	400ee28 <__alt_mem_epcs_flash_controller_0+0xfb00de28>
 4010e08:	9080004c 	andi	r2,r18,1
 4010e0c:	0039883a 	mov	fp,zero
 4010e10:	10000726 	beq	r2,zero,4010e30 <___svfprintf_internal_r+0x2158>
 4010e14:	d8c02817 	ldw	r3,160(sp)
 4010e18:	dc001dc4 	addi	r16,sp,119
 4010e1c:	00800c04 	movi	r2,48
 4010e20:	1c07c83a 	sub	r3,r3,r16
 4010e24:	d8801dc5 	stb	r2,119(sp)
 4010e28:	d8c02e15 	stw	r3,184(sp)
 4010e2c:	00395206 	br	400f378 <__alt_mem_epcs_flash_controller_0+0xfb00e378>
 4010e30:	d8002e15 	stw	zero,184(sp)
 4010e34:	dc001e04 	addi	r16,sp,120
 4010e38:	00394f06 	br	400f378 <__alt_mem_epcs_flash_controller_0+0xfb00e378>
 4010e3c:	0005883a 	mov	r2,zero
 4010e40:	003e3206 	br	401070c <__alt_mem_epcs_flash_controller_0+0xfb00f70c>
 4010e44:	dd802617 	ldw	r22,152(sp)
 4010e48:	003f0606 	br	4010a64 <__alt_mem_epcs_flash_controller_0+0xfb00fa64>
 4010e4c:	d9c02785 	stb	r7,158(sp)
 4010e50:	003a5106 	br	400f798 <__alt_mem_epcs_flash_controller_0+0xfb00e798>
 4010e54:	d9c02785 	stb	r7,158(sp)
 4010e58:	003a3706 	br	400f738 <__alt_mem_epcs_flash_controller_0+0xfb00e738>
 4010e5c:	0005883a 	mov	r2,zero
 4010e60:	003f5e06 	br	4010bdc <__alt_mem_epcs_flash_controller_0+0xfb00fbdc>
 4010e64:	d9c02785 	stb	r7,158(sp)
 4010e68:	00391706 	br	400f2c8 <__alt_mem_epcs_flash_controller_0+0xfb00e2c8>
 4010e6c:	d9c02785 	stb	r7,158(sp)
 4010e70:	0038e606 	br	400f20c <__alt_mem_epcs_flash_controller_0+0xfb00e20c>
 4010e74:	d8802344 	addi	r2,sp,141
 4010e78:	003f0806 	br	4010a9c <__alt_mem_epcs_flash_controller_0+0xfb00fa9c>
 4010e7c:	d9c02785 	stb	r7,158(sp)
 4010e80:	0038b706 	br	400f160 <__alt_mem_epcs_flash_controller_0+0xfb00e160>
 4010e84:	d9c02785 	stb	r7,158(sp)
 4010e88:	003adc06 	br	400f9fc <__alt_mem_epcs_flash_controller_0+0xfb00e9fc>
 4010e8c:	d9403917 	ldw	r5,228(sp)
 4010e90:	00800304 	movi	r2,12
 4010e94:	28800015 	stw	r2,0(r5)
 4010e98:	00bfffc4 	movi	r2,-1
 4010e9c:	00387806 	br	400f080 <__alt_mem_epcs_flash_controller_0+0xfb00e080>
 4010ea0:	d9c02785 	stb	r7,158(sp)
 4010ea4:	003abf06 	br	400f9a4 <__alt_mem_epcs_flash_controller_0+0xfb00e9a4>
 4010ea8:	d9c02785 	stb	r7,158(sp)
 4010eac:	003a9b06 	br	400f91c <__alt_mem_epcs_flash_controller_0+0xfb00e91c>

04010eb0 <___vfprintf_internal_r>:
 4010eb0:	deffb804 	addi	sp,sp,-288
 4010eb4:	dfc04715 	stw	ra,284(sp)
 4010eb8:	ddc04515 	stw	r23,276(sp)
 4010ebc:	dd404315 	stw	r21,268(sp)
 4010ec0:	d9002c15 	stw	r4,176(sp)
 4010ec4:	282f883a 	mov	r23,r5
 4010ec8:	302b883a 	mov	r21,r6
 4010ecc:	d9c02d15 	stw	r7,180(sp)
 4010ed0:	df004615 	stw	fp,280(sp)
 4010ed4:	dd804415 	stw	r22,272(sp)
 4010ed8:	dd004215 	stw	r20,264(sp)
 4010edc:	dcc04115 	stw	r19,260(sp)
 4010ee0:	dc804015 	stw	r18,256(sp)
 4010ee4:	dc403f15 	stw	r17,252(sp)
 4010ee8:	dc003e15 	stw	r16,248(sp)
 4010eec:	4015cc80 	call	4015cc8 <_localeconv_r>
 4010ef0:	10800017 	ldw	r2,0(r2)
 4010ef4:	1009883a 	mov	r4,r2
 4010ef8:	d8803415 	stw	r2,208(sp)
 4010efc:	400ec400 	call	400ec40 <strlen>
 4010f00:	d8803715 	stw	r2,220(sp)
 4010f04:	d8802c17 	ldw	r2,176(sp)
 4010f08:	10000226 	beq	r2,zero,4010f14 <___vfprintf_internal_r+0x64>
 4010f0c:	10800e17 	ldw	r2,56(r2)
 4010f10:	1000f926 	beq	r2,zero,40112f8 <___vfprintf_internal_r+0x448>
 4010f14:	b880030b 	ldhu	r2,12(r23)
 4010f18:	10c8000c 	andi	r3,r2,8192
 4010f1c:	1800061e 	bne	r3,zero,4010f38 <___vfprintf_internal_r+0x88>
 4010f20:	b9001917 	ldw	r4,100(r23)
 4010f24:	00f7ffc4 	movi	r3,-8193
 4010f28:	10880014 	ori	r2,r2,8192
 4010f2c:	20c6703a 	and	r3,r4,r3
 4010f30:	b880030d 	sth	r2,12(r23)
 4010f34:	b8c01915 	stw	r3,100(r23)
 4010f38:	10c0020c 	andi	r3,r2,8
 4010f3c:	1800c126 	beq	r3,zero,4011244 <___vfprintf_internal_r+0x394>
 4010f40:	b8c00417 	ldw	r3,16(r23)
 4010f44:	1800bf26 	beq	r3,zero,4011244 <___vfprintf_internal_r+0x394>
 4010f48:	1080068c 	andi	r2,r2,26
 4010f4c:	00c00284 	movi	r3,10
 4010f50:	10c0c426 	beq	r2,r3,4011264 <___vfprintf_internal_r+0x3b4>
 4010f54:	d8c00404 	addi	r3,sp,16
 4010f58:	05010234 	movhi	r20,1032
 4010f5c:	d9001e04 	addi	r4,sp,120
 4010f60:	a5153e84 	addi	r20,r20,21754
 4010f64:	d8c01e15 	stw	r3,120(sp)
 4010f68:	d8002015 	stw	zero,128(sp)
 4010f6c:	d8001f15 	stw	zero,124(sp)
 4010f70:	d8003315 	stw	zero,204(sp)
 4010f74:	d8003615 	stw	zero,216(sp)
 4010f78:	d8003815 	stw	zero,224(sp)
 4010f7c:	1811883a 	mov	r8,r3
 4010f80:	d8003915 	stw	zero,228(sp)
 4010f84:	d8003a15 	stw	zero,232(sp)
 4010f88:	d8002f15 	stw	zero,188(sp)
 4010f8c:	d9002815 	stw	r4,160(sp)
 4010f90:	a8800007 	ldb	r2,0(r21)
 4010f94:	10027b26 	beq	r2,zero,4011984 <___vfprintf_internal_r+0xad4>
 4010f98:	00c00944 	movi	r3,37
 4010f9c:	a821883a 	mov	r16,r21
 4010fa0:	10c0021e 	bne	r2,r3,4010fac <___vfprintf_internal_r+0xfc>
 4010fa4:	00001406 	br	4010ff8 <___vfprintf_internal_r+0x148>
 4010fa8:	10c00326 	beq	r2,r3,4010fb8 <___vfprintf_internal_r+0x108>
 4010fac:	84000044 	addi	r16,r16,1
 4010fb0:	80800007 	ldb	r2,0(r16)
 4010fb4:	103ffc1e 	bne	r2,zero,4010fa8 <__alt_mem_epcs_flash_controller_0+0xfb00ffa8>
 4010fb8:	8563c83a 	sub	r17,r16,r21
 4010fbc:	88000e26 	beq	r17,zero,4010ff8 <___vfprintf_internal_r+0x148>
 4010fc0:	d8c02017 	ldw	r3,128(sp)
 4010fc4:	d8801f17 	ldw	r2,124(sp)
 4010fc8:	45400015 	stw	r21,0(r8)
 4010fcc:	1c47883a 	add	r3,r3,r17
 4010fd0:	10800044 	addi	r2,r2,1
 4010fd4:	d8c02015 	stw	r3,128(sp)
 4010fd8:	44400115 	stw	r17,4(r8)
 4010fdc:	d8801f15 	stw	r2,124(sp)
 4010fe0:	00c001c4 	movi	r3,7
 4010fe4:	1880a716 	blt	r3,r2,4011284 <___vfprintf_internal_r+0x3d4>
 4010fe8:	42000204 	addi	r8,r8,8
 4010fec:	d9402f17 	ldw	r5,188(sp)
 4010ff0:	2c4b883a 	add	r5,r5,r17
 4010ff4:	d9402f15 	stw	r5,188(sp)
 4010ff8:	80800007 	ldb	r2,0(r16)
 4010ffc:	1000a826 	beq	r2,zero,40112a0 <___vfprintf_internal_r+0x3f0>
 4011000:	84400047 	ldb	r17,1(r16)
 4011004:	00bfffc4 	movi	r2,-1
 4011008:	85400044 	addi	r21,r16,1
 401100c:	d8002785 	stb	zero,158(sp)
 4011010:	0007883a 	mov	r3,zero
 4011014:	000f883a 	mov	r7,zero
 4011018:	d8802915 	stw	r2,164(sp)
 401101c:	d8003115 	stw	zero,196(sp)
 4011020:	0025883a 	mov	r18,zero
 4011024:	01401604 	movi	r5,88
 4011028:	01800244 	movi	r6,9
 401102c:	02800a84 	movi	r10,42
 4011030:	02401b04 	movi	r9,108
 4011034:	ad400044 	addi	r21,r21,1
 4011038:	88bff804 	addi	r2,r17,-32
 401103c:	28830436 	bltu	r5,r2,4011c50 <___vfprintf_internal_r+0xda0>
 4011040:	100490ba 	slli	r2,r2,2
 4011044:	01010074 	movhi	r4,1025
 4011048:	21041604 	addi	r4,r4,4184
 401104c:	1105883a 	add	r2,r2,r4
 4011050:	10800017 	ldw	r2,0(r2)
 4011054:	1000683a 	jmp	r2
 4011058:	04011b70 	cmpltui	r16,zero,1133
 401105c:	04011c50 	cmplti	r16,zero,1137
 4011060:	04011c50 	cmplti	r16,zero,1137
 4011064:	04011b90 	cmplti	r16,zero,1134
 4011068:	04011c50 	cmplti	r16,zero,1137
 401106c:	04011c50 	cmplti	r16,zero,1137
 4011070:	04011c50 	cmplti	r16,zero,1137
 4011074:	04011c50 	cmplti	r16,zero,1137
 4011078:	04011c50 	cmplti	r16,zero,1137
 401107c:	04011c50 	cmplti	r16,zero,1137
 4011080:	04011304 	movi	r16,1100
 4011084:	04011aac 	andhi	r16,zero,1130
 4011088:	04011c50 	cmplti	r16,zero,1137
 401108c:	040111cc 	andi	r16,zero,1095
 4011090:	0401132c 	andhi	r16,zero,1100
 4011094:	04011c50 	cmplti	r16,zero,1137
 4011098:	0401136c 	andhi	r16,zero,1101
 401109c:	04011378 	rdprs	r16,zero,1101
 40110a0:	04011378 	rdprs	r16,zero,1101
 40110a4:	04011378 	rdprs	r16,zero,1101
 40110a8:	04011378 	rdprs	r16,zero,1101
 40110ac:	04011378 	rdprs	r16,zero,1101
 40110b0:	04011378 	rdprs	r16,zero,1101
 40110b4:	04011378 	rdprs	r16,zero,1101
 40110b8:	04011378 	rdprs	r16,zero,1101
 40110bc:	04011378 	rdprs	r16,zero,1101
 40110c0:	04011c50 	cmplti	r16,zero,1137
 40110c4:	04011c50 	cmplti	r16,zero,1137
 40110c8:	04011c50 	cmplti	r16,zero,1137
 40110cc:	04011c50 	cmplti	r16,zero,1137
 40110d0:	04011c50 	cmplti	r16,zero,1137
 40110d4:	04011c50 	cmplti	r16,zero,1137
 40110d8:	04011c50 	cmplti	r16,zero,1137
 40110dc:	04011c50 	cmplti	r16,zero,1137
 40110e0:	04011c50 	cmplti	r16,zero,1137
 40110e4:	04011c50 	cmplti	r16,zero,1137
 40110e8:	040113ac 	andhi	r16,zero,1102
 40110ec:	04011468 	cmpgeui	r16,zero,1105
 40110f0:	04011c50 	cmplti	r16,zero,1137
 40110f4:	04011468 	cmpgeui	r16,zero,1105
 40110f8:	04011c50 	cmplti	r16,zero,1137
 40110fc:	04011c50 	cmplti	r16,zero,1137
 4011100:	04011c50 	cmplti	r16,zero,1137
 4011104:	04011c50 	cmplti	r16,zero,1137
 4011108:	04011508 	cmpgei	r16,zero,1108
 401110c:	04011c50 	cmplti	r16,zero,1137
 4011110:	04011c50 	cmplti	r16,zero,1137
 4011114:	04011514 	movui	r16,1108
 4011118:	04011c50 	cmplti	r16,zero,1137
 401111c:	04011c50 	cmplti	r16,zero,1137
 4011120:	04011c50 	cmplti	r16,zero,1137
 4011124:	04011c50 	cmplti	r16,zero,1137
 4011128:	04011c50 	cmplti	r16,zero,1137
 401112c:	0401198c 	andi	r16,zero,1126
 4011130:	04011c50 	cmplti	r16,zero,1137
 4011134:	04011c50 	cmplti	r16,zero,1137
 4011138:	040119ec 	andhi	r16,zero,1127
 401113c:	04011c50 	cmplti	r16,zero,1137
 4011140:	04011c50 	cmplti	r16,zero,1137
 4011144:	04011c50 	cmplti	r16,zero,1137
 4011148:	04011c50 	cmplti	r16,zero,1137
 401114c:	04011c50 	cmplti	r16,zero,1137
 4011150:	04011c50 	cmplti	r16,zero,1137
 4011154:	04011c50 	cmplti	r16,zero,1137
 4011158:	04011c50 	cmplti	r16,zero,1137
 401115c:	04011c50 	cmplti	r16,zero,1137
 4011160:	04011c50 	cmplti	r16,zero,1137
 4011164:	04011bfc 	xorhi	r16,zero,1135
 4011168:	04011b9c 	xori	r16,zero,1134
 401116c:	04011468 	cmpgeui	r16,zero,1105
 4011170:	04011468 	cmpgeui	r16,zero,1105
 4011174:	04011468 	cmpgeui	r16,zero,1105
 4011178:	04011bac 	andhi	r16,zero,1134
 401117c:	04011b9c 	xori	r16,zero,1134
 4011180:	04011c50 	cmplti	r16,zero,1137
 4011184:	04011c50 	cmplti	r16,zero,1137
 4011188:	04011bb8 	rdprs	r16,zero,1134
 401118c:	04011c50 	cmplti	r16,zero,1137
 4011190:	04011bc8 	cmpgei	r16,zero,1135
 4011194:	04011a9c 	xori	r16,zero,1130
 4011198:	040111d8 	cmpnei	r16,zero,1095
 401119c:	04011abc 	xorhi	r16,zero,1130
 40111a0:	04011c50 	cmplti	r16,zero,1137
 40111a4:	04011ac8 	cmpgei	r16,zero,1131
 40111a8:	04011c50 	cmplti	r16,zero,1137
 40111ac:	04011b24 	muli	r16,zero,1132
 40111b0:	04011c50 	cmplti	r16,zero,1137
 40111b4:	04011c50 	cmplti	r16,zero,1137
 40111b8:	04011b34 	movhi	r16,1132
 40111bc:	d9003117 	ldw	r4,196(sp)
 40111c0:	d8802d15 	stw	r2,180(sp)
 40111c4:	0109c83a 	sub	r4,zero,r4
 40111c8:	d9003115 	stw	r4,196(sp)
 40111cc:	94800114 	ori	r18,r18,4
 40111d0:	ac400007 	ldb	r17,0(r21)
 40111d4:	003f9706 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 40111d8:	00800c04 	movi	r2,48
 40111dc:	d9002d17 	ldw	r4,180(sp)
 40111e0:	d9402917 	ldw	r5,164(sp)
 40111e4:	d8802705 	stb	r2,156(sp)
 40111e8:	00801e04 	movi	r2,120
 40111ec:	d8802745 	stb	r2,157(sp)
 40111f0:	d8002785 	stb	zero,158(sp)
 40111f4:	20c00104 	addi	r3,r4,4
 40111f8:	24c00017 	ldw	r19,0(r4)
 40111fc:	002d883a 	mov	r22,zero
 4011200:	90800094 	ori	r2,r18,2
 4011204:	28029a16 	blt	r5,zero,4011c70 <___vfprintf_internal_r+0xdc0>
 4011208:	00bfdfc4 	movi	r2,-129
 401120c:	90a4703a 	and	r18,r18,r2
 4011210:	d8c02d15 	stw	r3,180(sp)
 4011214:	94800094 	ori	r18,r18,2
 4011218:	9802871e 	bne	r19,zero,4011c38 <___vfprintf_internal_r+0xd88>
 401121c:	00810234 	movhi	r2,1032
 4011220:	10952f04 	addi	r2,r2,21692
 4011224:	d8803915 	stw	r2,228(sp)
 4011228:	04401e04 	movi	r17,120
 401122c:	d8802917 	ldw	r2,164(sp)
 4011230:	0039883a 	mov	fp,zero
 4011234:	1001e926 	beq	r2,zero,40119dc <___vfprintf_internal_r+0xb2c>
 4011238:	0027883a 	mov	r19,zero
 401123c:	002d883a 	mov	r22,zero
 4011240:	00020506 	br	4011a58 <___vfprintf_internal_r+0xba8>
 4011244:	d9002c17 	ldw	r4,176(sp)
 4011248:	b80b883a 	mov	r5,r23
 401124c:	40131800 	call	4013180 <__swsetup_r>
 4011250:	1005ac1e 	bne	r2,zero,4012904 <___vfprintf_internal_r+0x1a54>
 4011254:	b880030b 	ldhu	r2,12(r23)
 4011258:	00c00284 	movi	r3,10
 401125c:	1080068c 	andi	r2,r2,26
 4011260:	10ff3c1e 	bne	r2,r3,4010f54 <__alt_mem_epcs_flash_controller_0+0xfb00ff54>
 4011264:	b880038f 	ldh	r2,14(r23)
 4011268:	103f3a16 	blt	r2,zero,4010f54 <__alt_mem_epcs_flash_controller_0+0xfb00ff54>
 401126c:	d9c02d17 	ldw	r7,180(sp)
 4011270:	d9002c17 	ldw	r4,176(sp)
 4011274:	a80d883a 	mov	r6,r21
 4011278:	b80b883a 	mov	r5,r23
 401127c:	40130c40 	call	40130c4 <__sbprintf>
 4011280:	00001106 	br	40112c8 <___vfprintf_internal_r+0x418>
 4011284:	d9002c17 	ldw	r4,176(sp)
 4011288:	d9801e04 	addi	r6,sp,120
 401128c:	b80b883a 	mov	r5,r23
 4011290:	4018d740 	call	4018d74 <__sprint_r>
 4011294:	1000081e 	bne	r2,zero,40112b8 <___vfprintf_internal_r+0x408>
 4011298:	da000404 	addi	r8,sp,16
 401129c:	003f5306 	br	4010fec <__alt_mem_epcs_flash_controller_0+0xfb00ffec>
 40112a0:	d8802017 	ldw	r2,128(sp)
 40112a4:	10000426 	beq	r2,zero,40112b8 <___vfprintf_internal_r+0x408>
 40112a8:	d9002c17 	ldw	r4,176(sp)
 40112ac:	d9801e04 	addi	r6,sp,120
 40112b0:	b80b883a 	mov	r5,r23
 40112b4:	4018d740 	call	4018d74 <__sprint_r>
 40112b8:	b880030b 	ldhu	r2,12(r23)
 40112bc:	1080100c 	andi	r2,r2,64
 40112c0:	1005901e 	bne	r2,zero,4012904 <___vfprintf_internal_r+0x1a54>
 40112c4:	d8802f17 	ldw	r2,188(sp)
 40112c8:	dfc04717 	ldw	ra,284(sp)
 40112cc:	df004617 	ldw	fp,280(sp)
 40112d0:	ddc04517 	ldw	r23,276(sp)
 40112d4:	dd804417 	ldw	r22,272(sp)
 40112d8:	dd404317 	ldw	r21,268(sp)
 40112dc:	dd004217 	ldw	r20,264(sp)
 40112e0:	dcc04117 	ldw	r19,260(sp)
 40112e4:	dc804017 	ldw	r18,256(sp)
 40112e8:	dc403f17 	ldw	r17,252(sp)
 40112ec:	dc003e17 	ldw	r16,248(sp)
 40112f0:	dec04804 	addi	sp,sp,288
 40112f4:	f800283a 	ret
 40112f8:	d9002c17 	ldw	r4,176(sp)
 40112fc:	40151540 	call	4015154 <__sinit>
 4011300:	003f0406 	br	4010f14 <__alt_mem_epcs_flash_controller_0+0xfb00ff14>
 4011304:	d8802d17 	ldw	r2,180(sp)
 4011308:	d9002d17 	ldw	r4,180(sp)
 401130c:	10800017 	ldw	r2,0(r2)
 4011310:	d8803115 	stw	r2,196(sp)
 4011314:	20800104 	addi	r2,r4,4
 4011318:	d9003117 	ldw	r4,196(sp)
 401131c:	203fa716 	blt	r4,zero,40111bc <__alt_mem_epcs_flash_controller_0+0xfb0101bc>
 4011320:	d8802d15 	stw	r2,180(sp)
 4011324:	ac400007 	ldb	r17,0(r21)
 4011328:	003f4206 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 401132c:	ac400007 	ldb	r17,0(r21)
 4011330:	aac00044 	addi	r11,r21,1
 4011334:	8a872826 	beq	r17,r10,4012fd8 <___vfprintf_internal_r+0x2128>
 4011338:	88bff404 	addi	r2,r17,-48
 401133c:	0009883a 	mov	r4,zero
 4011340:	30867d36 	bltu	r6,r2,4012d38 <___vfprintf_internal_r+0x1e88>
 4011344:	5c400007 	ldb	r17,0(r11)
 4011348:	210002a4 	muli	r4,r4,10
 401134c:	5d400044 	addi	r21,r11,1
 4011350:	a817883a 	mov	r11,r21
 4011354:	2089883a 	add	r4,r4,r2
 4011358:	88bff404 	addi	r2,r17,-48
 401135c:	30bff92e 	bgeu	r6,r2,4011344 <__alt_mem_epcs_flash_controller_0+0xfb010344>
 4011360:	2005c916 	blt	r4,zero,4012a88 <___vfprintf_internal_r+0x1bd8>
 4011364:	d9002915 	stw	r4,164(sp)
 4011368:	003f3306 	br	4011038 <__alt_mem_epcs_flash_controller_0+0xfb010038>
 401136c:	94802014 	ori	r18,r18,128
 4011370:	ac400007 	ldb	r17,0(r21)
 4011374:	003f2f06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011378:	a809883a 	mov	r4,r21
 401137c:	d8003115 	stw	zero,196(sp)
 4011380:	88bff404 	addi	r2,r17,-48
 4011384:	0017883a 	mov	r11,zero
 4011388:	24400007 	ldb	r17,0(r4)
 401138c:	5ac002a4 	muli	r11,r11,10
 4011390:	ad400044 	addi	r21,r21,1
 4011394:	a809883a 	mov	r4,r21
 4011398:	12d7883a 	add	r11,r2,r11
 401139c:	88bff404 	addi	r2,r17,-48
 40113a0:	30bff92e 	bgeu	r6,r2,4011388 <__alt_mem_epcs_flash_controller_0+0xfb010388>
 40113a4:	dac03115 	stw	r11,196(sp)
 40113a8:	003f2306 	br	4011038 <__alt_mem_epcs_flash_controller_0+0xfb010038>
 40113ac:	18c03fcc 	andi	r3,r3,255
 40113b0:	18072b1e 	bne	r3,zero,4013060 <___vfprintf_internal_r+0x21b0>
 40113b4:	94800414 	ori	r18,r18,16
 40113b8:	9080080c 	andi	r2,r18,32
 40113bc:	10037b26 	beq	r2,zero,40121ac <___vfprintf_internal_r+0x12fc>
 40113c0:	d9402d17 	ldw	r5,180(sp)
 40113c4:	28800117 	ldw	r2,4(r5)
 40113c8:	2cc00017 	ldw	r19,0(r5)
 40113cc:	29400204 	addi	r5,r5,8
 40113d0:	d9402d15 	stw	r5,180(sp)
 40113d4:	102d883a 	mov	r22,r2
 40113d8:	10044b16 	blt	r2,zero,4012508 <___vfprintf_internal_r+0x1658>
 40113dc:	d9402917 	ldw	r5,164(sp)
 40113e0:	df002783 	ldbu	fp,158(sp)
 40113e4:	2803bc16 	blt	r5,zero,40122d8 <___vfprintf_internal_r+0x1428>
 40113e8:	00ffdfc4 	movi	r3,-129
 40113ec:	9d84b03a 	or	r2,r19,r22
 40113f0:	90e4703a 	and	r18,r18,r3
 40113f4:	10017726 	beq	r2,zero,40119d4 <___vfprintf_internal_r+0xb24>
 40113f8:	b0038326 	beq	r22,zero,4012208 <___vfprintf_internal_r+0x1358>
 40113fc:	dc402a15 	stw	r17,168(sp)
 4011400:	dc001e04 	addi	r16,sp,120
 4011404:	b023883a 	mov	r17,r22
 4011408:	402d883a 	mov	r22,r8
 401140c:	9809883a 	mov	r4,r19
 4011410:	880b883a 	mov	r5,r17
 4011414:	01800284 	movi	r6,10
 4011418:	000f883a 	mov	r7,zero
 401141c:	401b16c0 	call	401b16c <__umoddi3>
 4011420:	10800c04 	addi	r2,r2,48
 4011424:	843fffc4 	addi	r16,r16,-1
 4011428:	9809883a 	mov	r4,r19
 401142c:	880b883a 	mov	r5,r17
 4011430:	80800005 	stb	r2,0(r16)
 4011434:	01800284 	movi	r6,10
 4011438:	000f883a 	mov	r7,zero
 401143c:	401abf40 	call	401abf4 <__udivdi3>
 4011440:	1027883a 	mov	r19,r2
 4011444:	10c4b03a 	or	r2,r2,r3
 4011448:	1823883a 	mov	r17,r3
 401144c:	103fef1e 	bne	r2,zero,401140c <__alt_mem_epcs_flash_controller_0+0xfb01040c>
 4011450:	d8c02817 	ldw	r3,160(sp)
 4011454:	dc402a17 	ldw	r17,168(sp)
 4011458:	b011883a 	mov	r8,r22
 401145c:	1c07c83a 	sub	r3,r3,r16
 4011460:	d8c02e15 	stw	r3,184(sp)
 4011464:	00005906 	br	40115cc <___vfprintf_internal_r+0x71c>
 4011468:	18c03fcc 	andi	r3,r3,255
 401146c:	1806fa1e 	bne	r3,zero,4013058 <___vfprintf_internal_r+0x21a8>
 4011470:	9080020c 	andi	r2,r18,8
 4011474:	10048a26 	beq	r2,zero,40126a0 <___vfprintf_internal_r+0x17f0>
 4011478:	d8c02d17 	ldw	r3,180(sp)
 401147c:	d9002d17 	ldw	r4,180(sp)
 4011480:	d9402d17 	ldw	r5,180(sp)
 4011484:	18c00017 	ldw	r3,0(r3)
 4011488:	21000117 	ldw	r4,4(r4)
 401148c:	29400204 	addi	r5,r5,8
 4011490:	d8c03615 	stw	r3,216(sp)
 4011494:	d9003815 	stw	r4,224(sp)
 4011498:	d9402d15 	stw	r5,180(sp)
 401149c:	d9003617 	ldw	r4,216(sp)
 40114a0:	d9403817 	ldw	r5,224(sp)
 40114a4:	da003d15 	stw	r8,244(sp)
 40114a8:	04000044 	movi	r16,1
 40114ac:	4009fa00 	call	4009fa0 <__fpclassifyd>
 40114b0:	da003d17 	ldw	r8,244(sp)
 40114b4:	14041f1e 	bne	r2,r16,4012534 <___vfprintf_internal_r+0x1684>
 40114b8:	d9003617 	ldw	r4,216(sp)
 40114bc:	d9403817 	ldw	r5,224(sp)
 40114c0:	000d883a 	mov	r6,zero
 40114c4:	000f883a 	mov	r7,zero
 40114c8:	400c9240 	call	400c924 <__ledf2>
 40114cc:	da003d17 	ldw	r8,244(sp)
 40114d0:	1005be16 	blt	r2,zero,4012bcc <___vfprintf_internal_r+0x1d1c>
 40114d4:	df002783 	ldbu	fp,158(sp)
 40114d8:	008011c4 	movi	r2,71
 40114dc:	1445330e 	bge	r2,r17,40129ac <___vfprintf_internal_r+0x1afc>
 40114e0:	04010234 	movhi	r16,1032
 40114e4:	84152704 	addi	r16,r16,21660
 40114e8:	00c000c4 	movi	r3,3
 40114ec:	00bfdfc4 	movi	r2,-129
 40114f0:	d8c02a15 	stw	r3,168(sp)
 40114f4:	90a4703a 	and	r18,r18,r2
 40114f8:	d8c02e15 	stw	r3,184(sp)
 40114fc:	d8002915 	stw	zero,164(sp)
 4011500:	d8003215 	stw	zero,200(sp)
 4011504:	00003706 	br	40115e4 <___vfprintf_internal_r+0x734>
 4011508:	94800214 	ori	r18,r18,8
 401150c:	ac400007 	ldb	r17,0(r21)
 4011510:	003ec806 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011514:	18c03fcc 	andi	r3,r3,255
 4011518:	1806db1e 	bne	r3,zero,4013088 <___vfprintf_internal_r+0x21d8>
 401151c:	94800414 	ori	r18,r18,16
 4011520:	9080080c 	andi	r2,r18,32
 4011524:	1002d826 	beq	r2,zero,4012088 <___vfprintf_internal_r+0x11d8>
 4011528:	d9402d17 	ldw	r5,180(sp)
 401152c:	d8c02917 	ldw	r3,164(sp)
 4011530:	d8002785 	stb	zero,158(sp)
 4011534:	28800204 	addi	r2,r5,8
 4011538:	2cc00017 	ldw	r19,0(r5)
 401153c:	2d800117 	ldw	r22,4(r5)
 4011540:	18048f16 	blt	r3,zero,4012780 <___vfprintf_internal_r+0x18d0>
 4011544:	013fdfc4 	movi	r4,-129
 4011548:	9d86b03a 	or	r3,r19,r22
 401154c:	d8802d15 	stw	r2,180(sp)
 4011550:	9124703a 	and	r18,r18,r4
 4011554:	1802d91e 	bne	r3,zero,40120bc <___vfprintf_internal_r+0x120c>
 4011558:	d8c02917 	ldw	r3,164(sp)
 401155c:	0039883a 	mov	fp,zero
 4011560:	1805c326 	beq	r3,zero,4012c70 <___vfprintf_internal_r+0x1dc0>
 4011564:	0027883a 	mov	r19,zero
 4011568:	002d883a 	mov	r22,zero
 401156c:	dc001e04 	addi	r16,sp,120
 4011570:	9806d0fa 	srli	r3,r19,3
 4011574:	b008977a 	slli	r4,r22,29
 4011578:	b02cd0fa 	srli	r22,r22,3
 401157c:	9cc001cc 	andi	r19,r19,7
 4011580:	98800c04 	addi	r2,r19,48
 4011584:	843fffc4 	addi	r16,r16,-1
 4011588:	20e6b03a 	or	r19,r4,r3
 401158c:	80800005 	stb	r2,0(r16)
 4011590:	9d86b03a 	or	r3,r19,r22
 4011594:	183ff61e 	bne	r3,zero,4011570 <__alt_mem_epcs_flash_controller_0+0xfb010570>
 4011598:	90c0004c 	andi	r3,r18,1
 401159c:	18013b26 	beq	r3,zero,4011a8c <___vfprintf_internal_r+0xbdc>
 40115a0:	10803fcc 	andi	r2,r2,255
 40115a4:	1080201c 	xori	r2,r2,128
 40115a8:	10bfe004 	addi	r2,r2,-128
 40115ac:	00c00c04 	movi	r3,48
 40115b0:	10c13626 	beq	r2,r3,4011a8c <___vfprintf_internal_r+0xbdc>
 40115b4:	80ffffc5 	stb	r3,-1(r16)
 40115b8:	d8c02817 	ldw	r3,160(sp)
 40115bc:	80bfffc4 	addi	r2,r16,-1
 40115c0:	1021883a 	mov	r16,r2
 40115c4:	1887c83a 	sub	r3,r3,r2
 40115c8:	d8c02e15 	stw	r3,184(sp)
 40115cc:	d8802e17 	ldw	r2,184(sp)
 40115d0:	d9002917 	ldw	r4,164(sp)
 40115d4:	1100010e 	bge	r2,r4,40115dc <___vfprintf_internal_r+0x72c>
 40115d8:	2005883a 	mov	r2,r4
 40115dc:	d8802a15 	stw	r2,168(sp)
 40115e0:	d8003215 	stw	zero,200(sp)
 40115e4:	e7003fcc 	andi	fp,fp,255
 40115e8:	e700201c 	xori	fp,fp,128
 40115ec:	e73fe004 	addi	fp,fp,-128
 40115f0:	e0000326 	beq	fp,zero,4011600 <___vfprintf_internal_r+0x750>
 40115f4:	d8c02a17 	ldw	r3,168(sp)
 40115f8:	18c00044 	addi	r3,r3,1
 40115fc:	d8c02a15 	stw	r3,168(sp)
 4011600:	90c0008c 	andi	r3,r18,2
 4011604:	d8c02b15 	stw	r3,172(sp)
 4011608:	18000326 	beq	r3,zero,4011618 <___vfprintf_internal_r+0x768>
 401160c:	d8c02a17 	ldw	r3,168(sp)
 4011610:	18c00084 	addi	r3,r3,2
 4011614:	d8c02a15 	stw	r3,168(sp)
 4011618:	90c0210c 	andi	r3,r18,132
 401161c:	d8c03015 	stw	r3,192(sp)
 4011620:	1801a31e 	bne	r3,zero,4011cb0 <___vfprintf_internal_r+0xe00>
 4011624:	d9003117 	ldw	r4,196(sp)
 4011628:	d8c02a17 	ldw	r3,168(sp)
 401162c:	20e7c83a 	sub	r19,r4,r3
 4011630:	04c19f0e 	bge	zero,r19,4011cb0 <___vfprintf_internal_r+0xe00>
 4011634:	02400404 	movi	r9,16
 4011638:	d8c02017 	ldw	r3,128(sp)
 401163c:	d8801f17 	ldw	r2,124(sp)
 4011640:	4cc50d0e 	bge	r9,r19,4012a78 <___vfprintf_internal_r+0x1bc8>
 4011644:	01410234 	movhi	r5,1032
 4011648:	29554284 	addi	r5,r5,21770
 401164c:	dc403b15 	stw	r17,236(sp)
 4011650:	d9403515 	stw	r5,212(sp)
 4011654:	9823883a 	mov	r17,r19
 4011658:	482d883a 	mov	r22,r9
 401165c:	9027883a 	mov	r19,r18
 4011660:	070001c4 	movi	fp,7
 4011664:	8025883a 	mov	r18,r16
 4011668:	dc002c17 	ldw	r16,176(sp)
 401166c:	00000306 	br	401167c <___vfprintf_internal_r+0x7cc>
 4011670:	8c7ffc04 	addi	r17,r17,-16
 4011674:	42000204 	addi	r8,r8,8
 4011678:	b440130e 	bge	r22,r17,40116c8 <___vfprintf_internal_r+0x818>
 401167c:	01010234 	movhi	r4,1032
 4011680:	18c00404 	addi	r3,r3,16
 4011684:	10800044 	addi	r2,r2,1
 4011688:	21154284 	addi	r4,r4,21770
 401168c:	41000015 	stw	r4,0(r8)
 4011690:	45800115 	stw	r22,4(r8)
 4011694:	d8c02015 	stw	r3,128(sp)
 4011698:	d8801f15 	stw	r2,124(sp)
 401169c:	e0bff40e 	bge	fp,r2,4011670 <__alt_mem_epcs_flash_controller_0+0xfb010670>
 40116a0:	d9801e04 	addi	r6,sp,120
 40116a4:	b80b883a 	mov	r5,r23
 40116a8:	8009883a 	mov	r4,r16
 40116ac:	4018d740 	call	4018d74 <__sprint_r>
 40116b0:	103f011e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40116b4:	8c7ffc04 	addi	r17,r17,-16
 40116b8:	d8c02017 	ldw	r3,128(sp)
 40116bc:	d8801f17 	ldw	r2,124(sp)
 40116c0:	da000404 	addi	r8,sp,16
 40116c4:	b47fed16 	blt	r22,r17,401167c <__alt_mem_epcs_flash_controller_0+0xfb01067c>
 40116c8:	9021883a 	mov	r16,r18
 40116cc:	9825883a 	mov	r18,r19
 40116d0:	8827883a 	mov	r19,r17
 40116d4:	dc403b17 	ldw	r17,236(sp)
 40116d8:	d9403517 	ldw	r5,212(sp)
 40116dc:	98c7883a 	add	r3,r19,r3
 40116e0:	10800044 	addi	r2,r2,1
 40116e4:	41400015 	stw	r5,0(r8)
 40116e8:	44c00115 	stw	r19,4(r8)
 40116ec:	d8c02015 	stw	r3,128(sp)
 40116f0:	d8801f15 	stw	r2,124(sp)
 40116f4:	010001c4 	movi	r4,7
 40116f8:	2082a316 	blt	r4,r2,4012188 <___vfprintf_internal_r+0x12d8>
 40116fc:	df002787 	ldb	fp,158(sp)
 4011700:	42000204 	addi	r8,r8,8
 4011704:	e0000c26 	beq	fp,zero,4011738 <___vfprintf_internal_r+0x888>
 4011708:	d8801f17 	ldw	r2,124(sp)
 401170c:	d9002784 	addi	r4,sp,158
 4011710:	18c00044 	addi	r3,r3,1
 4011714:	10800044 	addi	r2,r2,1
 4011718:	41000015 	stw	r4,0(r8)
 401171c:	01000044 	movi	r4,1
 4011720:	41000115 	stw	r4,4(r8)
 4011724:	d8c02015 	stw	r3,128(sp)
 4011728:	d8801f15 	stw	r2,124(sp)
 401172c:	010001c4 	movi	r4,7
 4011730:	20823c16 	blt	r4,r2,4012024 <___vfprintf_internal_r+0x1174>
 4011734:	42000204 	addi	r8,r8,8
 4011738:	d8802b17 	ldw	r2,172(sp)
 401173c:	10000c26 	beq	r2,zero,4011770 <___vfprintf_internal_r+0x8c0>
 4011740:	d8801f17 	ldw	r2,124(sp)
 4011744:	d9002704 	addi	r4,sp,156
 4011748:	18c00084 	addi	r3,r3,2
 401174c:	10800044 	addi	r2,r2,1
 4011750:	41000015 	stw	r4,0(r8)
 4011754:	01000084 	movi	r4,2
 4011758:	41000115 	stw	r4,4(r8)
 401175c:	d8c02015 	stw	r3,128(sp)
 4011760:	d8801f15 	stw	r2,124(sp)
 4011764:	010001c4 	movi	r4,7
 4011768:	20823616 	blt	r4,r2,4012044 <___vfprintf_internal_r+0x1194>
 401176c:	42000204 	addi	r8,r8,8
 4011770:	d9003017 	ldw	r4,192(sp)
 4011774:	00802004 	movi	r2,128
 4011778:	20819926 	beq	r4,r2,4011de0 <___vfprintf_internal_r+0xf30>
 401177c:	d9402917 	ldw	r5,164(sp)
 4011780:	d8802e17 	ldw	r2,184(sp)
 4011784:	28adc83a 	sub	r22,r5,r2
 4011788:	0580310e 	bge	zero,r22,4011850 <___vfprintf_internal_r+0x9a0>
 401178c:	07000404 	movi	fp,16
 4011790:	d8801f17 	ldw	r2,124(sp)
 4011794:	e584140e 	bge	fp,r22,40127e8 <___vfprintf_internal_r+0x1938>
 4011798:	01410234 	movhi	r5,1032
 401179c:	29553e84 	addi	r5,r5,21754
 40117a0:	dc402915 	stw	r17,164(sp)
 40117a4:	d9402b15 	stw	r5,172(sp)
 40117a8:	b023883a 	mov	r17,r22
 40117ac:	04c001c4 	movi	r19,7
 40117b0:	a82d883a 	mov	r22,r21
 40117b4:	902b883a 	mov	r21,r18
 40117b8:	8025883a 	mov	r18,r16
 40117bc:	dc002c17 	ldw	r16,176(sp)
 40117c0:	00000306 	br	40117d0 <___vfprintf_internal_r+0x920>
 40117c4:	8c7ffc04 	addi	r17,r17,-16
 40117c8:	42000204 	addi	r8,r8,8
 40117cc:	e440110e 	bge	fp,r17,4011814 <___vfprintf_internal_r+0x964>
 40117d0:	18c00404 	addi	r3,r3,16
 40117d4:	10800044 	addi	r2,r2,1
 40117d8:	45000015 	stw	r20,0(r8)
 40117dc:	47000115 	stw	fp,4(r8)
 40117e0:	d8c02015 	stw	r3,128(sp)
 40117e4:	d8801f15 	stw	r2,124(sp)
 40117e8:	98bff60e 	bge	r19,r2,40117c4 <__alt_mem_epcs_flash_controller_0+0xfb0107c4>
 40117ec:	d9801e04 	addi	r6,sp,120
 40117f0:	b80b883a 	mov	r5,r23
 40117f4:	8009883a 	mov	r4,r16
 40117f8:	4018d740 	call	4018d74 <__sprint_r>
 40117fc:	103eae1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011800:	8c7ffc04 	addi	r17,r17,-16
 4011804:	d8c02017 	ldw	r3,128(sp)
 4011808:	d8801f17 	ldw	r2,124(sp)
 401180c:	da000404 	addi	r8,sp,16
 4011810:	e47fef16 	blt	fp,r17,40117d0 <__alt_mem_epcs_flash_controller_0+0xfb0107d0>
 4011814:	9021883a 	mov	r16,r18
 4011818:	a825883a 	mov	r18,r21
 401181c:	b02b883a 	mov	r21,r22
 4011820:	882d883a 	mov	r22,r17
 4011824:	dc402917 	ldw	r17,164(sp)
 4011828:	d9002b17 	ldw	r4,172(sp)
 401182c:	1d87883a 	add	r3,r3,r22
 4011830:	10800044 	addi	r2,r2,1
 4011834:	41000015 	stw	r4,0(r8)
 4011838:	45800115 	stw	r22,4(r8)
 401183c:	d8c02015 	stw	r3,128(sp)
 4011840:	d8801f15 	stw	r2,124(sp)
 4011844:	010001c4 	movi	r4,7
 4011848:	2081ee16 	blt	r4,r2,4012004 <___vfprintf_internal_r+0x1154>
 401184c:	42000204 	addi	r8,r8,8
 4011850:	9080400c 	andi	r2,r18,256
 4011854:	1001181e 	bne	r2,zero,4011cb8 <___vfprintf_internal_r+0xe08>
 4011858:	d9402e17 	ldw	r5,184(sp)
 401185c:	d8801f17 	ldw	r2,124(sp)
 4011860:	44000015 	stw	r16,0(r8)
 4011864:	1947883a 	add	r3,r3,r5
 4011868:	10800044 	addi	r2,r2,1
 401186c:	41400115 	stw	r5,4(r8)
 4011870:	d8c02015 	stw	r3,128(sp)
 4011874:	d8801f15 	stw	r2,124(sp)
 4011878:	010001c4 	movi	r4,7
 401187c:	2081d316 	blt	r4,r2,4011fcc <___vfprintf_internal_r+0x111c>
 4011880:	42000204 	addi	r8,r8,8
 4011884:	9480010c 	andi	r18,r18,4
 4011888:	90003226 	beq	r18,zero,4011954 <___vfprintf_internal_r+0xaa4>
 401188c:	d9403117 	ldw	r5,196(sp)
 4011890:	d8802a17 	ldw	r2,168(sp)
 4011894:	28a1c83a 	sub	r16,r5,r2
 4011898:	04002e0e 	bge	zero,r16,4011954 <___vfprintf_internal_r+0xaa4>
 401189c:	04400404 	movi	r17,16
 40118a0:	d8801f17 	ldw	r2,124(sp)
 40118a4:	8c04a20e 	bge	r17,r16,4012b30 <___vfprintf_internal_r+0x1c80>
 40118a8:	01410234 	movhi	r5,1032
 40118ac:	29554284 	addi	r5,r5,21770
 40118b0:	d9403515 	stw	r5,212(sp)
 40118b4:	048001c4 	movi	r18,7
 40118b8:	dcc02c17 	ldw	r19,176(sp)
 40118bc:	00000306 	br	40118cc <___vfprintf_internal_r+0xa1c>
 40118c0:	843ffc04 	addi	r16,r16,-16
 40118c4:	42000204 	addi	r8,r8,8
 40118c8:	8c00130e 	bge	r17,r16,4011918 <___vfprintf_internal_r+0xa68>
 40118cc:	01010234 	movhi	r4,1032
 40118d0:	18c00404 	addi	r3,r3,16
 40118d4:	10800044 	addi	r2,r2,1
 40118d8:	21154284 	addi	r4,r4,21770
 40118dc:	41000015 	stw	r4,0(r8)
 40118e0:	44400115 	stw	r17,4(r8)
 40118e4:	d8c02015 	stw	r3,128(sp)
 40118e8:	d8801f15 	stw	r2,124(sp)
 40118ec:	90bff40e 	bge	r18,r2,40118c0 <__alt_mem_epcs_flash_controller_0+0xfb0108c0>
 40118f0:	d9801e04 	addi	r6,sp,120
 40118f4:	b80b883a 	mov	r5,r23
 40118f8:	9809883a 	mov	r4,r19
 40118fc:	4018d740 	call	4018d74 <__sprint_r>
 4011900:	103e6d1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011904:	843ffc04 	addi	r16,r16,-16
 4011908:	d8c02017 	ldw	r3,128(sp)
 401190c:	d8801f17 	ldw	r2,124(sp)
 4011910:	da000404 	addi	r8,sp,16
 4011914:	8c3fed16 	blt	r17,r16,40118cc <__alt_mem_epcs_flash_controller_0+0xfb0108cc>
 4011918:	d9403517 	ldw	r5,212(sp)
 401191c:	1c07883a 	add	r3,r3,r16
 4011920:	10800044 	addi	r2,r2,1
 4011924:	41400015 	stw	r5,0(r8)
 4011928:	44000115 	stw	r16,4(r8)
 401192c:	d8c02015 	stw	r3,128(sp)
 4011930:	d8801f15 	stw	r2,124(sp)
 4011934:	010001c4 	movi	r4,7
 4011938:	2080060e 	bge	r4,r2,4011954 <___vfprintf_internal_r+0xaa4>
 401193c:	d9002c17 	ldw	r4,176(sp)
 4011940:	d9801e04 	addi	r6,sp,120
 4011944:	b80b883a 	mov	r5,r23
 4011948:	4018d740 	call	4018d74 <__sprint_r>
 401194c:	103e5a1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011950:	d8c02017 	ldw	r3,128(sp)
 4011954:	d8803117 	ldw	r2,196(sp)
 4011958:	d9002a17 	ldw	r4,168(sp)
 401195c:	1100010e 	bge	r2,r4,4011964 <___vfprintf_internal_r+0xab4>
 4011960:	2005883a 	mov	r2,r4
 4011964:	d9402f17 	ldw	r5,188(sp)
 4011968:	288b883a 	add	r5,r5,r2
 401196c:	d9402f15 	stw	r5,188(sp)
 4011970:	18019e1e 	bne	r3,zero,4011fec <___vfprintf_internal_r+0x113c>
 4011974:	a8800007 	ldb	r2,0(r21)
 4011978:	d8001f15 	stw	zero,124(sp)
 401197c:	da000404 	addi	r8,sp,16
 4011980:	103d851e 	bne	r2,zero,4010f98 <__alt_mem_epcs_flash_controller_0+0xfb00ff98>
 4011984:	a821883a 	mov	r16,r21
 4011988:	003d9b06 	br	4010ff8 <__alt_mem_epcs_flash_controller_0+0xfb00fff8>
 401198c:	18c03fcc 	andi	r3,r3,255
 4011990:	1805c11e 	bne	r3,zero,4013098 <___vfprintf_internal_r+0x21e8>
 4011994:	94800414 	ori	r18,r18,16
 4011998:	9080080c 	andi	r2,r18,32
 401199c:	10020c26 	beq	r2,zero,40121d0 <___vfprintf_internal_r+0x1320>
 40119a0:	d8802d17 	ldw	r2,180(sp)
 40119a4:	d9002917 	ldw	r4,164(sp)
 40119a8:	d8002785 	stb	zero,158(sp)
 40119ac:	10c00204 	addi	r3,r2,8
 40119b0:	14c00017 	ldw	r19,0(r2)
 40119b4:	15800117 	ldw	r22,4(r2)
 40119b8:	20040f16 	blt	r4,zero,40129f8 <___vfprintf_internal_r+0x1b48>
 40119bc:	013fdfc4 	movi	r4,-129
 40119c0:	9d84b03a 	or	r2,r19,r22
 40119c4:	d8c02d15 	stw	r3,180(sp)
 40119c8:	9124703a 	and	r18,r18,r4
 40119cc:	0039883a 	mov	fp,zero
 40119d0:	103e891e 	bne	r2,zero,40113f8 <__alt_mem_epcs_flash_controller_0+0xfb0103f8>
 40119d4:	d9002917 	ldw	r4,164(sp)
 40119d8:	2002c11e 	bne	r4,zero,40124e0 <___vfprintf_internal_r+0x1630>
 40119dc:	d8002915 	stw	zero,164(sp)
 40119e0:	d8002e15 	stw	zero,184(sp)
 40119e4:	dc001e04 	addi	r16,sp,120
 40119e8:	003ef806 	br	40115cc <__alt_mem_epcs_flash_controller_0+0xfb0105cc>
 40119ec:	18c03fcc 	andi	r3,r3,255
 40119f0:	18059d1e 	bne	r3,zero,4013068 <___vfprintf_internal_r+0x21b8>
 40119f4:	01410234 	movhi	r5,1032
 40119f8:	29552a04 	addi	r5,r5,21672
 40119fc:	d9403915 	stw	r5,228(sp)
 4011a00:	9080080c 	andi	r2,r18,32
 4011a04:	10005226 	beq	r2,zero,4011b50 <___vfprintf_internal_r+0xca0>
 4011a08:	d8802d17 	ldw	r2,180(sp)
 4011a0c:	14c00017 	ldw	r19,0(r2)
 4011a10:	15800117 	ldw	r22,4(r2)
 4011a14:	10800204 	addi	r2,r2,8
 4011a18:	d8802d15 	stw	r2,180(sp)
 4011a1c:	9080004c 	andi	r2,r18,1
 4011a20:	10019026 	beq	r2,zero,4012064 <___vfprintf_internal_r+0x11b4>
 4011a24:	9d84b03a 	or	r2,r19,r22
 4011a28:	10036926 	beq	r2,zero,40127d0 <___vfprintf_internal_r+0x1920>
 4011a2c:	d8c02917 	ldw	r3,164(sp)
 4011a30:	00800c04 	movi	r2,48
 4011a34:	d8802705 	stb	r2,156(sp)
 4011a38:	dc402745 	stb	r17,157(sp)
 4011a3c:	d8002785 	stb	zero,158(sp)
 4011a40:	90800094 	ori	r2,r18,2
 4011a44:	18045d16 	blt	r3,zero,4012bbc <___vfprintf_internal_r+0x1d0c>
 4011a48:	00bfdfc4 	movi	r2,-129
 4011a4c:	90a4703a 	and	r18,r18,r2
 4011a50:	94800094 	ori	r18,r18,2
 4011a54:	0039883a 	mov	fp,zero
 4011a58:	d9003917 	ldw	r4,228(sp)
 4011a5c:	dc001e04 	addi	r16,sp,120
 4011a60:	988003cc 	andi	r2,r19,15
 4011a64:	b006973a 	slli	r3,r22,28
 4011a68:	2085883a 	add	r2,r4,r2
 4011a6c:	9826d13a 	srli	r19,r19,4
 4011a70:	10800003 	ldbu	r2,0(r2)
 4011a74:	b02cd13a 	srli	r22,r22,4
 4011a78:	843fffc4 	addi	r16,r16,-1
 4011a7c:	1ce6b03a 	or	r19,r3,r19
 4011a80:	80800005 	stb	r2,0(r16)
 4011a84:	9d84b03a 	or	r2,r19,r22
 4011a88:	103ff51e 	bne	r2,zero,4011a60 <__alt_mem_epcs_flash_controller_0+0xfb010a60>
 4011a8c:	d8c02817 	ldw	r3,160(sp)
 4011a90:	1c07c83a 	sub	r3,r3,r16
 4011a94:	d8c02e15 	stw	r3,184(sp)
 4011a98:	003ecc06 	br	40115cc <__alt_mem_epcs_flash_controller_0+0xfb0105cc>
 4011a9c:	18c03fcc 	andi	r3,r3,255
 4011aa0:	183e9f26 	beq	r3,zero,4011520 <__alt_mem_epcs_flash_controller_0+0xfb010520>
 4011aa4:	d9c02785 	stb	r7,158(sp)
 4011aa8:	003e9d06 	br	4011520 <__alt_mem_epcs_flash_controller_0+0xfb010520>
 4011aac:	00c00044 	movi	r3,1
 4011ab0:	01c00ac4 	movi	r7,43
 4011ab4:	ac400007 	ldb	r17,0(r21)
 4011ab8:	003d5e06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011abc:	94800814 	ori	r18,r18,32
 4011ac0:	ac400007 	ldb	r17,0(r21)
 4011ac4:	003d5b06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011ac8:	d8c02d17 	ldw	r3,180(sp)
 4011acc:	d8002785 	stb	zero,158(sp)
 4011ad0:	1c000017 	ldw	r16,0(r3)
 4011ad4:	1cc00104 	addi	r19,r3,4
 4011ad8:	80041926 	beq	r16,zero,4012b40 <___vfprintf_internal_r+0x1c90>
 4011adc:	d9002917 	ldw	r4,164(sp)
 4011ae0:	2003d016 	blt	r4,zero,4012a24 <___vfprintf_internal_r+0x1b74>
 4011ae4:	200d883a 	mov	r6,r4
 4011ae8:	000b883a 	mov	r5,zero
 4011aec:	8009883a 	mov	r4,r16
 4011af0:	da003d15 	stw	r8,244(sp)
 4011af4:	4015eb40 	call	4015eb4 <memchr>
 4011af8:	da003d17 	ldw	r8,244(sp)
 4011afc:	10045426 	beq	r2,zero,4012c50 <___vfprintf_internal_r+0x1da0>
 4011b00:	1405c83a 	sub	r2,r2,r16
 4011b04:	d8802e15 	stw	r2,184(sp)
 4011b08:	1003cc16 	blt	r2,zero,4012a3c <___vfprintf_internal_r+0x1b8c>
 4011b0c:	df002783 	ldbu	fp,158(sp)
 4011b10:	d8802a15 	stw	r2,168(sp)
 4011b14:	dcc02d15 	stw	r19,180(sp)
 4011b18:	d8002915 	stw	zero,164(sp)
 4011b1c:	d8003215 	stw	zero,200(sp)
 4011b20:	003eb006 	br	40115e4 <__alt_mem_epcs_flash_controller_0+0xfb0105e4>
 4011b24:	18c03fcc 	andi	r3,r3,255
 4011b28:	183f9b26 	beq	r3,zero,4011998 <__alt_mem_epcs_flash_controller_0+0xfb010998>
 4011b2c:	d9c02785 	stb	r7,158(sp)
 4011b30:	003f9906 	br	4011998 <__alt_mem_epcs_flash_controller_0+0xfb010998>
 4011b34:	18c03fcc 	andi	r3,r3,255
 4011b38:	1805551e 	bne	r3,zero,4013090 <___vfprintf_internal_r+0x21e0>
 4011b3c:	01410234 	movhi	r5,1032
 4011b40:	29552f04 	addi	r5,r5,21692
 4011b44:	d9403915 	stw	r5,228(sp)
 4011b48:	9080080c 	andi	r2,r18,32
 4011b4c:	103fae1e 	bne	r2,zero,4011a08 <__alt_mem_epcs_flash_controller_0+0xfb010a08>
 4011b50:	9080040c 	andi	r2,r18,16
 4011b54:	1002de26 	beq	r2,zero,40126d0 <___vfprintf_internal_r+0x1820>
 4011b58:	d8c02d17 	ldw	r3,180(sp)
 4011b5c:	002d883a 	mov	r22,zero
 4011b60:	1cc00017 	ldw	r19,0(r3)
 4011b64:	18c00104 	addi	r3,r3,4
 4011b68:	d8c02d15 	stw	r3,180(sp)
 4011b6c:	003fab06 	br	4011a1c <__alt_mem_epcs_flash_controller_0+0xfb010a1c>
 4011b70:	38803fcc 	andi	r2,r7,255
 4011b74:	1080201c 	xori	r2,r2,128
 4011b78:	10bfe004 	addi	r2,r2,-128
 4011b7c:	1002d21e 	bne	r2,zero,40126c8 <___vfprintf_internal_r+0x1818>
 4011b80:	00c00044 	movi	r3,1
 4011b84:	01c00804 	movi	r7,32
 4011b88:	ac400007 	ldb	r17,0(r21)
 4011b8c:	003d2906 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011b90:	94800054 	ori	r18,r18,1
 4011b94:	ac400007 	ldb	r17,0(r21)
 4011b98:	003d2606 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011b9c:	18c03fcc 	andi	r3,r3,255
 4011ba0:	183e0526 	beq	r3,zero,40113b8 <__alt_mem_epcs_flash_controller_0+0xfb0103b8>
 4011ba4:	d9c02785 	stb	r7,158(sp)
 4011ba8:	003e0306 	br	40113b8 <__alt_mem_epcs_flash_controller_0+0xfb0103b8>
 4011bac:	94801014 	ori	r18,r18,64
 4011bb0:	ac400007 	ldb	r17,0(r21)
 4011bb4:	003d1f06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011bb8:	ac400007 	ldb	r17,0(r21)
 4011bbc:	8a438726 	beq	r17,r9,40129dc <___vfprintf_internal_r+0x1b2c>
 4011bc0:	94800414 	ori	r18,r18,16
 4011bc4:	003d1b06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4011bc8:	18c03fcc 	andi	r3,r3,255
 4011bcc:	1805341e 	bne	r3,zero,40130a0 <___vfprintf_internal_r+0x21f0>
 4011bd0:	9080080c 	andi	r2,r18,32
 4011bd4:	1002cd26 	beq	r2,zero,401270c <___vfprintf_internal_r+0x185c>
 4011bd8:	d9402d17 	ldw	r5,180(sp)
 4011bdc:	d9002f17 	ldw	r4,188(sp)
 4011be0:	28800017 	ldw	r2,0(r5)
 4011be4:	2007d7fa 	srai	r3,r4,31
 4011be8:	29400104 	addi	r5,r5,4
 4011bec:	d9402d15 	stw	r5,180(sp)
 4011bf0:	11000015 	stw	r4,0(r2)
 4011bf4:	10c00115 	stw	r3,4(r2)
 4011bf8:	003ce506 	br	4010f90 <__alt_mem_epcs_flash_controller_0+0xfb00ff90>
 4011bfc:	d8c02d17 	ldw	r3,180(sp)
 4011c00:	d9002d17 	ldw	r4,180(sp)
 4011c04:	d8002785 	stb	zero,158(sp)
 4011c08:	18800017 	ldw	r2,0(r3)
 4011c0c:	21000104 	addi	r4,r4,4
 4011c10:	00c00044 	movi	r3,1
 4011c14:	d8c02a15 	stw	r3,168(sp)
 4011c18:	d8801405 	stb	r2,80(sp)
 4011c1c:	d9002d15 	stw	r4,180(sp)
 4011c20:	d8c02e15 	stw	r3,184(sp)
 4011c24:	d8002915 	stw	zero,164(sp)
 4011c28:	d8003215 	stw	zero,200(sp)
 4011c2c:	dc001404 	addi	r16,sp,80
 4011c30:	0039883a 	mov	fp,zero
 4011c34:	003e7206 	br	4011600 <__alt_mem_epcs_flash_controller_0+0xfb010600>
 4011c38:	01010234 	movhi	r4,1032
 4011c3c:	21152f04 	addi	r4,r4,21692
 4011c40:	0039883a 	mov	fp,zero
 4011c44:	d9003915 	stw	r4,228(sp)
 4011c48:	04401e04 	movi	r17,120
 4011c4c:	003f8206 	br	4011a58 <__alt_mem_epcs_flash_controller_0+0xfb010a58>
 4011c50:	18c03fcc 	andi	r3,r3,255
 4011c54:	1805061e 	bne	r3,zero,4013070 <___vfprintf_internal_r+0x21c0>
 4011c58:	883d9126 	beq	r17,zero,40112a0 <__alt_mem_epcs_flash_controller_0+0xfb0102a0>
 4011c5c:	00c00044 	movi	r3,1
 4011c60:	d8c02a15 	stw	r3,168(sp)
 4011c64:	dc401405 	stb	r17,80(sp)
 4011c68:	d8002785 	stb	zero,158(sp)
 4011c6c:	003fec06 	br	4011c20 <__alt_mem_epcs_flash_controller_0+0xfb010c20>
 4011c70:	01410234 	movhi	r5,1032
 4011c74:	29552f04 	addi	r5,r5,21692
 4011c78:	d9403915 	stw	r5,228(sp)
 4011c7c:	d8c02d15 	stw	r3,180(sp)
 4011c80:	1025883a 	mov	r18,r2
 4011c84:	04401e04 	movi	r17,120
 4011c88:	9d84b03a 	or	r2,r19,r22
 4011c8c:	1000fc1e 	bne	r2,zero,4012080 <___vfprintf_internal_r+0x11d0>
 4011c90:	0039883a 	mov	fp,zero
 4011c94:	00800084 	movi	r2,2
 4011c98:	10803fcc 	andi	r2,r2,255
 4011c9c:	00c00044 	movi	r3,1
 4011ca0:	10c20f26 	beq	r2,r3,40124e0 <___vfprintf_internal_r+0x1630>
 4011ca4:	00c00084 	movi	r3,2
 4011ca8:	10fd6326 	beq	r2,r3,4011238 <__alt_mem_epcs_flash_controller_0+0xfb010238>
 4011cac:	003e2d06 	br	4011564 <__alt_mem_epcs_flash_controller_0+0xfb010564>
 4011cb0:	d8c02017 	ldw	r3,128(sp)
 4011cb4:	003e9306 	br	4011704 <__alt_mem_epcs_flash_controller_0+0xfb010704>
 4011cb8:	00801944 	movi	r2,101
 4011cbc:	14407e0e 	bge	r2,r17,4011eb8 <___vfprintf_internal_r+0x1008>
 4011cc0:	d9003617 	ldw	r4,216(sp)
 4011cc4:	d9403817 	ldw	r5,224(sp)
 4011cc8:	000d883a 	mov	r6,zero
 4011ccc:	000f883a 	mov	r7,zero
 4011cd0:	d8c03c15 	stw	r3,240(sp)
 4011cd4:	da003d15 	stw	r8,244(sp)
 4011cd8:	401b6a40 	call	401b6a4 <__eqdf2>
 4011cdc:	d8c03c17 	ldw	r3,240(sp)
 4011ce0:	da003d17 	ldw	r8,244(sp)
 4011ce4:	1000f71e 	bne	r2,zero,40120c4 <___vfprintf_internal_r+0x1214>
 4011ce8:	d8801f17 	ldw	r2,124(sp)
 4011cec:	01010234 	movhi	r4,1032
 4011cf0:	21153604 	addi	r4,r4,21720
 4011cf4:	18c00044 	addi	r3,r3,1
 4011cf8:	10800044 	addi	r2,r2,1
 4011cfc:	41000015 	stw	r4,0(r8)
 4011d00:	01000044 	movi	r4,1
 4011d04:	41000115 	stw	r4,4(r8)
 4011d08:	d8c02015 	stw	r3,128(sp)
 4011d0c:	d8801f15 	stw	r2,124(sp)
 4011d10:	010001c4 	movi	r4,7
 4011d14:	2082b816 	blt	r4,r2,40127f8 <___vfprintf_internal_r+0x1948>
 4011d18:	42000204 	addi	r8,r8,8
 4011d1c:	d8802617 	ldw	r2,152(sp)
 4011d20:	d9403317 	ldw	r5,204(sp)
 4011d24:	11400216 	blt	r2,r5,4011d30 <___vfprintf_internal_r+0xe80>
 4011d28:	9080004c 	andi	r2,r18,1
 4011d2c:	103ed526 	beq	r2,zero,4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 4011d30:	d8803717 	ldw	r2,220(sp)
 4011d34:	d9003417 	ldw	r4,208(sp)
 4011d38:	d9403717 	ldw	r5,220(sp)
 4011d3c:	1887883a 	add	r3,r3,r2
 4011d40:	d8801f17 	ldw	r2,124(sp)
 4011d44:	41000015 	stw	r4,0(r8)
 4011d48:	41400115 	stw	r5,4(r8)
 4011d4c:	10800044 	addi	r2,r2,1
 4011d50:	d8c02015 	stw	r3,128(sp)
 4011d54:	d8801f15 	stw	r2,124(sp)
 4011d58:	010001c4 	movi	r4,7
 4011d5c:	20832916 	blt	r4,r2,4012a04 <___vfprintf_internal_r+0x1b54>
 4011d60:	42000204 	addi	r8,r8,8
 4011d64:	d8803317 	ldw	r2,204(sp)
 4011d68:	143fffc4 	addi	r16,r2,-1
 4011d6c:	043ec50e 	bge	zero,r16,4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 4011d70:	04400404 	movi	r17,16
 4011d74:	d8801f17 	ldw	r2,124(sp)
 4011d78:	8c00880e 	bge	r17,r16,4011f9c <___vfprintf_internal_r+0x10ec>
 4011d7c:	01410234 	movhi	r5,1032
 4011d80:	29553e84 	addi	r5,r5,21754
 4011d84:	d9402b15 	stw	r5,172(sp)
 4011d88:	058001c4 	movi	r22,7
 4011d8c:	dcc02c17 	ldw	r19,176(sp)
 4011d90:	00000306 	br	4011da0 <___vfprintf_internal_r+0xef0>
 4011d94:	42000204 	addi	r8,r8,8
 4011d98:	843ffc04 	addi	r16,r16,-16
 4011d9c:	8c00820e 	bge	r17,r16,4011fa8 <___vfprintf_internal_r+0x10f8>
 4011da0:	18c00404 	addi	r3,r3,16
 4011da4:	10800044 	addi	r2,r2,1
 4011da8:	45000015 	stw	r20,0(r8)
 4011dac:	44400115 	stw	r17,4(r8)
 4011db0:	d8c02015 	stw	r3,128(sp)
 4011db4:	d8801f15 	stw	r2,124(sp)
 4011db8:	b0bff60e 	bge	r22,r2,4011d94 <__alt_mem_epcs_flash_controller_0+0xfb010d94>
 4011dbc:	d9801e04 	addi	r6,sp,120
 4011dc0:	b80b883a 	mov	r5,r23
 4011dc4:	9809883a 	mov	r4,r19
 4011dc8:	4018d740 	call	4018d74 <__sprint_r>
 4011dcc:	103d3a1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011dd0:	d8c02017 	ldw	r3,128(sp)
 4011dd4:	d8801f17 	ldw	r2,124(sp)
 4011dd8:	da000404 	addi	r8,sp,16
 4011ddc:	003fee06 	br	4011d98 <__alt_mem_epcs_flash_controller_0+0xfb010d98>
 4011de0:	d9403117 	ldw	r5,196(sp)
 4011de4:	d8802a17 	ldw	r2,168(sp)
 4011de8:	28adc83a 	sub	r22,r5,r2
 4011dec:	05be630e 	bge	zero,r22,401177c <__alt_mem_epcs_flash_controller_0+0xfb01077c>
 4011df0:	07000404 	movi	fp,16
 4011df4:	d8801f17 	ldw	r2,124(sp)
 4011df8:	e5838f0e 	bge	fp,r22,4012c38 <___vfprintf_internal_r+0x1d88>
 4011dfc:	01410234 	movhi	r5,1032
 4011e00:	29553e84 	addi	r5,r5,21754
 4011e04:	dc403015 	stw	r17,192(sp)
 4011e08:	d9402b15 	stw	r5,172(sp)
 4011e0c:	b023883a 	mov	r17,r22
 4011e10:	04c001c4 	movi	r19,7
 4011e14:	a82d883a 	mov	r22,r21
 4011e18:	902b883a 	mov	r21,r18
 4011e1c:	8025883a 	mov	r18,r16
 4011e20:	dc002c17 	ldw	r16,176(sp)
 4011e24:	00000306 	br	4011e34 <___vfprintf_internal_r+0xf84>
 4011e28:	8c7ffc04 	addi	r17,r17,-16
 4011e2c:	42000204 	addi	r8,r8,8
 4011e30:	e440110e 	bge	fp,r17,4011e78 <___vfprintf_internal_r+0xfc8>
 4011e34:	18c00404 	addi	r3,r3,16
 4011e38:	10800044 	addi	r2,r2,1
 4011e3c:	45000015 	stw	r20,0(r8)
 4011e40:	47000115 	stw	fp,4(r8)
 4011e44:	d8c02015 	stw	r3,128(sp)
 4011e48:	d8801f15 	stw	r2,124(sp)
 4011e4c:	98bff60e 	bge	r19,r2,4011e28 <__alt_mem_epcs_flash_controller_0+0xfb010e28>
 4011e50:	d9801e04 	addi	r6,sp,120
 4011e54:	b80b883a 	mov	r5,r23
 4011e58:	8009883a 	mov	r4,r16
 4011e5c:	4018d740 	call	4018d74 <__sprint_r>
 4011e60:	103d151e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011e64:	8c7ffc04 	addi	r17,r17,-16
 4011e68:	d8c02017 	ldw	r3,128(sp)
 4011e6c:	d8801f17 	ldw	r2,124(sp)
 4011e70:	da000404 	addi	r8,sp,16
 4011e74:	e47fef16 	blt	fp,r17,4011e34 <__alt_mem_epcs_flash_controller_0+0xfb010e34>
 4011e78:	9021883a 	mov	r16,r18
 4011e7c:	a825883a 	mov	r18,r21
 4011e80:	b02b883a 	mov	r21,r22
 4011e84:	882d883a 	mov	r22,r17
 4011e88:	dc403017 	ldw	r17,192(sp)
 4011e8c:	d9002b17 	ldw	r4,172(sp)
 4011e90:	1d87883a 	add	r3,r3,r22
 4011e94:	10800044 	addi	r2,r2,1
 4011e98:	41000015 	stw	r4,0(r8)
 4011e9c:	45800115 	stw	r22,4(r8)
 4011ea0:	d8c02015 	stw	r3,128(sp)
 4011ea4:	d8801f15 	stw	r2,124(sp)
 4011ea8:	010001c4 	movi	r4,7
 4011eac:	20818e16 	blt	r4,r2,40124e8 <___vfprintf_internal_r+0x1638>
 4011eb0:	42000204 	addi	r8,r8,8
 4011eb4:	003e3106 	br	401177c <__alt_mem_epcs_flash_controller_0+0xfb01077c>
 4011eb8:	d9403317 	ldw	r5,204(sp)
 4011ebc:	00800044 	movi	r2,1
 4011ec0:	18c00044 	addi	r3,r3,1
 4011ec4:	1141530e 	bge	r2,r5,4012414 <___vfprintf_internal_r+0x1564>
 4011ec8:	dc401f17 	ldw	r17,124(sp)
 4011ecc:	00800044 	movi	r2,1
 4011ed0:	40800115 	stw	r2,4(r8)
 4011ed4:	8c400044 	addi	r17,r17,1
 4011ed8:	44000015 	stw	r16,0(r8)
 4011edc:	d8c02015 	stw	r3,128(sp)
 4011ee0:	dc401f15 	stw	r17,124(sp)
 4011ee4:	008001c4 	movi	r2,7
 4011ee8:	14416b16 	blt	r2,r17,4012498 <___vfprintf_internal_r+0x15e8>
 4011eec:	42000204 	addi	r8,r8,8
 4011ef0:	d8803717 	ldw	r2,220(sp)
 4011ef4:	d9003417 	ldw	r4,208(sp)
 4011ef8:	8c400044 	addi	r17,r17,1
 4011efc:	10c7883a 	add	r3,r2,r3
 4011f00:	40800115 	stw	r2,4(r8)
 4011f04:	41000015 	stw	r4,0(r8)
 4011f08:	d8c02015 	stw	r3,128(sp)
 4011f0c:	dc401f15 	stw	r17,124(sp)
 4011f10:	008001c4 	movi	r2,7
 4011f14:	14416916 	blt	r2,r17,40124bc <___vfprintf_internal_r+0x160c>
 4011f18:	45800204 	addi	r22,r8,8
 4011f1c:	d9003617 	ldw	r4,216(sp)
 4011f20:	d9403817 	ldw	r5,224(sp)
 4011f24:	000d883a 	mov	r6,zero
 4011f28:	000f883a 	mov	r7,zero
 4011f2c:	d8c03c15 	stw	r3,240(sp)
 4011f30:	401b6a40 	call	401b6a4 <__eqdf2>
 4011f34:	d8c03c17 	ldw	r3,240(sp)
 4011f38:	1000bc26 	beq	r2,zero,401222c <___vfprintf_internal_r+0x137c>
 4011f3c:	d9403317 	ldw	r5,204(sp)
 4011f40:	84000044 	addi	r16,r16,1
 4011f44:	8c400044 	addi	r17,r17,1
 4011f48:	28bfffc4 	addi	r2,r5,-1
 4011f4c:	1887883a 	add	r3,r3,r2
 4011f50:	b0800115 	stw	r2,4(r22)
 4011f54:	b4000015 	stw	r16,0(r22)
 4011f58:	d8c02015 	stw	r3,128(sp)
 4011f5c:	dc401f15 	stw	r17,124(sp)
 4011f60:	008001c4 	movi	r2,7
 4011f64:	14414316 	blt	r2,r17,4012474 <___vfprintf_internal_r+0x15c4>
 4011f68:	b5800204 	addi	r22,r22,8
 4011f6c:	d9003a17 	ldw	r4,232(sp)
 4011f70:	df0022c4 	addi	fp,sp,139
 4011f74:	8c400044 	addi	r17,r17,1
 4011f78:	20c7883a 	add	r3,r4,r3
 4011f7c:	b7000015 	stw	fp,0(r22)
 4011f80:	b1000115 	stw	r4,4(r22)
 4011f84:	d8c02015 	stw	r3,128(sp)
 4011f88:	dc401f15 	stw	r17,124(sp)
 4011f8c:	008001c4 	movi	r2,7
 4011f90:	14400e16 	blt	r2,r17,4011fcc <___vfprintf_internal_r+0x111c>
 4011f94:	b2000204 	addi	r8,r22,8
 4011f98:	003e3a06 	br	4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 4011f9c:	01010234 	movhi	r4,1032
 4011fa0:	21153e84 	addi	r4,r4,21754
 4011fa4:	d9002b15 	stw	r4,172(sp)
 4011fa8:	d9002b17 	ldw	r4,172(sp)
 4011fac:	1c07883a 	add	r3,r3,r16
 4011fb0:	44000115 	stw	r16,4(r8)
 4011fb4:	41000015 	stw	r4,0(r8)
 4011fb8:	10800044 	addi	r2,r2,1
 4011fbc:	d8c02015 	stw	r3,128(sp)
 4011fc0:	d8801f15 	stw	r2,124(sp)
 4011fc4:	010001c4 	movi	r4,7
 4011fc8:	20be2d0e 	bge	r4,r2,4011880 <__alt_mem_epcs_flash_controller_0+0xfb010880>
 4011fcc:	d9002c17 	ldw	r4,176(sp)
 4011fd0:	d9801e04 	addi	r6,sp,120
 4011fd4:	b80b883a 	mov	r5,r23
 4011fd8:	4018d740 	call	4018d74 <__sprint_r>
 4011fdc:	103cb61e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4011fe0:	d8c02017 	ldw	r3,128(sp)
 4011fe4:	da000404 	addi	r8,sp,16
 4011fe8:	003e2606 	br	4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 4011fec:	d9002c17 	ldw	r4,176(sp)
 4011ff0:	d9801e04 	addi	r6,sp,120
 4011ff4:	b80b883a 	mov	r5,r23
 4011ff8:	4018d740 	call	4018d74 <__sprint_r>
 4011ffc:	103e5d26 	beq	r2,zero,4011974 <__alt_mem_epcs_flash_controller_0+0xfb010974>
 4012000:	003cad06 	br	40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012004:	d9002c17 	ldw	r4,176(sp)
 4012008:	d9801e04 	addi	r6,sp,120
 401200c:	b80b883a 	mov	r5,r23
 4012010:	4018d740 	call	4018d74 <__sprint_r>
 4012014:	103ca81e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012018:	d8c02017 	ldw	r3,128(sp)
 401201c:	da000404 	addi	r8,sp,16
 4012020:	003e0b06 	br	4011850 <__alt_mem_epcs_flash_controller_0+0xfb010850>
 4012024:	d9002c17 	ldw	r4,176(sp)
 4012028:	d9801e04 	addi	r6,sp,120
 401202c:	b80b883a 	mov	r5,r23
 4012030:	4018d740 	call	4018d74 <__sprint_r>
 4012034:	103ca01e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012038:	d8c02017 	ldw	r3,128(sp)
 401203c:	da000404 	addi	r8,sp,16
 4012040:	003dbd06 	br	4011738 <__alt_mem_epcs_flash_controller_0+0xfb010738>
 4012044:	d9002c17 	ldw	r4,176(sp)
 4012048:	d9801e04 	addi	r6,sp,120
 401204c:	b80b883a 	mov	r5,r23
 4012050:	4018d740 	call	4018d74 <__sprint_r>
 4012054:	103c981e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012058:	d8c02017 	ldw	r3,128(sp)
 401205c:	da000404 	addi	r8,sp,16
 4012060:	003dc306 	br	4011770 <__alt_mem_epcs_flash_controller_0+0xfb010770>
 4012064:	d8802917 	ldw	r2,164(sp)
 4012068:	d8002785 	stb	zero,158(sp)
 401206c:	103f0616 	blt	r2,zero,4011c88 <__alt_mem_epcs_flash_controller_0+0xfb010c88>
 4012070:	00ffdfc4 	movi	r3,-129
 4012074:	9d84b03a 	or	r2,r19,r22
 4012078:	90e4703a 	and	r18,r18,r3
 401207c:	103c6b26 	beq	r2,zero,401122c <__alt_mem_epcs_flash_controller_0+0xfb01022c>
 4012080:	0039883a 	mov	fp,zero
 4012084:	003e7406 	br	4011a58 <__alt_mem_epcs_flash_controller_0+0xfb010a58>
 4012088:	9080040c 	andi	r2,r18,16
 401208c:	1001b326 	beq	r2,zero,401275c <___vfprintf_internal_r+0x18ac>
 4012090:	d9002d17 	ldw	r4,180(sp)
 4012094:	d9402917 	ldw	r5,164(sp)
 4012098:	d8002785 	stb	zero,158(sp)
 401209c:	20800104 	addi	r2,r4,4
 40120a0:	24c00017 	ldw	r19,0(r4)
 40120a4:	002d883a 	mov	r22,zero
 40120a8:	2801b516 	blt	r5,zero,4012780 <___vfprintf_internal_r+0x18d0>
 40120ac:	00ffdfc4 	movi	r3,-129
 40120b0:	d8802d15 	stw	r2,180(sp)
 40120b4:	90e4703a 	and	r18,r18,r3
 40120b8:	983d2726 	beq	r19,zero,4011558 <__alt_mem_epcs_flash_controller_0+0xfb010558>
 40120bc:	0039883a 	mov	fp,zero
 40120c0:	003d2a06 	br	401156c <__alt_mem_epcs_flash_controller_0+0xfb01056c>
 40120c4:	dc402617 	ldw	r17,152(sp)
 40120c8:	0441d30e 	bge	zero,r17,4012818 <___vfprintf_internal_r+0x1968>
 40120cc:	dc403217 	ldw	r17,200(sp)
 40120d0:	d8803317 	ldw	r2,204(sp)
 40120d4:	1440010e 	bge	r2,r17,40120dc <___vfprintf_internal_r+0x122c>
 40120d8:	1023883a 	mov	r17,r2
 40120dc:	04400a0e 	bge	zero,r17,4012108 <___vfprintf_internal_r+0x1258>
 40120e0:	d8801f17 	ldw	r2,124(sp)
 40120e4:	1c47883a 	add	r3,r3,r17
 40120e8:	44000015 	stw	r16,0(r8)
 40120ec:	10800044 	addi	r2,r2,1
 40120f0:	44400115 	stw	r17,4(r8)
 40120f4:	d8c02015 	stw	r3,128(sp)
 40120f8:	d8801f15 	stw	r2,124(sp)
 40120fc:	010001c4 	movi	r4,7
 4012100:	20826516 	blt	r4,r2,4012a98 <___vfprintf_internal_r+0x1be8>
 4012104:	42000204 	addi	r8,r8,8
 4012108:	88026116 	blt	r17,zero,4012a90 <___vfprintf_internal_r+0x1be0>
 401210c:	d9003217 	ldw	r4,200(sp)
 4012110:	2463c83a 	sub	r17,r4,r17
 4012114:	04407b0e 	bge	zero,r17,4012304 <___vfprintf_internal_r+0x1454>
 4012118:	05800404 	movi	r22,16
 401211c:	d8801f17 	ldw	r2,124(sp)
 4012120:	b4419d0e 	bge	r22,r17,4012798 <___vfprintf_internal_r+0x18e8>
 4012124:	01010234 	movhi	r4,1032
 4012128:	21153e84 	addi	r4,r4,21754
 401212c:	d9002b15 	stw	r4,172(sp)
 4012130:	070001c4 	movi	fp,7
 4012134:	dcc02c17 	ldw	r19,176(sp)
 4012138:	00000306 	br	4012148 <___vfprintf_internal_r+0x1298>
 401213c:	42000204 	addi	r8,r8,8
 4012140:	8c7ffc04 	addi	r17,r17,-16
 4012144:	b441970e 	bge	r22,r17,40127a4 <___vfprintf_internal_r+0x18f4>
 4012148:	18c00404 	addi	r3,r3,16
 401214c:	10800044 	addi	r2,r2,1
 4012150:	45000015 	stw	r20,0(r8)
 4012154:	45800115 	stw	r22,4(r8)
 4012158:	d8c02015 	stw	r3,128(sp)
 401215c:	d8801f15 	stw	r2,124(sp)
 4012160:	e0bff60e 	bge	fp,r2,401213c <__alt_mem_epcs_flash_controller_0+0xfb01113c>
 4012164:	d9801e04 	addi	r6,sp,120
 4012168:	b80b883a 	mov	r5,r23
 401216c:	9809883a 	mov	r4,r19
 4012170:	4018d740 	call	4018d74 <__sprint_r>
 4012174:	103c501e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012178:	d8c02017 	ldw	r3,128(sp)
 401217c:	d8801f17 	ldw	r2,124(sp)
 4012180:	da000404 	addi	r8,sp,16
 4012184:	003fee06 	br	4012140 <__alt_mem_epcs_flash_controller_0+0xfb011140>
 4012188:	d9002c17 	ldw	r4,176(sp)
 401218c:	d9801e04 	addi	r6,sp,120
 4012190:	b80b883a 	mov	r5,r23
 4012194:	4018d740 	call	4018d74 <__sprint_r>
 4012198:	103c471e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 401219c:	d8c02017 	ldw	r3,128(sp)
 40121a0:	df002787 	ldb	fp,158(sp)
 40121a4:	da000404 	addi	r8,sp,16
 40121a8:	003d5606 	br	4011704 <__alt_mem_epcs_flash_controller_0+0xfb010704>
 40121ac:	9080040c 	andi	r2,r18,16
 40121b0:	10016126 	beq	r2,zero,4012738 <___vfprintf_internal_r+0x1888>
 40121b4:	d8802d17 	ldw	r2,180(sp)
 40121b8:	14c00017 	ldw	r19,0(r2)
 40121bc:	10800104 	addi	r2,r2,4
 40121c0:	d8802d15 	stw	r2,180(sp)
 40121c4:	982dd7fa 	srai	r22,r19,31
 40121c8:	b005883a 	mov	r2,r22
 40121cc:	003c8206 	br	40113d8 <__alt_mem_epcs_flash_controller_0+0xfb0103d8>
 40121d0:	9080040c 	andi	r2,r18,16
 40121d4:	10003526 	beq	r2,zero,40122ac <___vfprintf_internal_r+0x13fc>
 40121d8:	d9402d17 	ldw	r5,180(sp)
 40121dc:	d8c02917 	ldw	r3,164(sp)
 40121e0:	d8002785 	stb	zero,158(sp)
 40121e4:	28800104 	addi	r2,r5,4
 40121e8:	2cc00017 	ldw	r19,0(r5)
 40121ec:	002d883a 	mov	r22,zero
 40121f0:	18003716 	blt	r3,zero,40122d0 <___vfprintf_internal_r+0x1420>
 40121f4:	00ffdfc4 	movi	r3,-129
 40121f8:	d8802d15 	stw	r2,180(sp)
 40121fc:	90e4703a 	and	r18,r18,r3
 4012200:	0039883a 	mov	fp,zero
 4012204:	983df326 	beq	r19,zero,40119d4 <__alt_mem_epcs_flash_controller_0+0xfb0109d4>
 4012208:	00800244 	movi	r2,9
 401220c:	14fc7b36 	bltu	r2,r19,40113fc <__alt_mem_epcs_flash_controller_0+0xfb0103fc>
 4012210:	d8c02817 	ldw	r3,160(sp)
 4012214:	dc001dc4 	addi	r16,sp,119
 4012218:	9cc00c04 	addi	r19,r19,48
 401221c:	1c07c83a 	sub	r3,r3,r16
 4012220:	dcc01dc5 	stb	r19,119(sp)
 4012224:	d8c02e15 	stw	r3,184(sp)
 4012228:	003ce806 	br	40115cc <__alt_mem_epcs_flash_controller_0+0xfb0105cc>
 401222c:	d8803317 	ldw	r2,204(sp)
 4012230:	143fffc4 	addi	r16,r2,-1
 4012234:	043f4d0e 	bge	zero,r16,4011f6c <__alt_mem_epcs_flash_controller_0+0xfb010f6c>
 4012238:	07000404 	movi	fp,16
 401223c:	e400810e 	bge	fp,r16,4012444 <___vfprintf_internal_r+0x1594>
 4012240:	01410234 	movhi	r5,1032
 4012244:	29553e84 	addi	r5,r5,21754
 4012248:	d9402b15 	stw	r5,172(sp)
 401224c:	01c001c4 	movi	r7,7
 4012250:	dcc02c17 	ldw	r19,176(sp)
 4012254:	00000306 	br	4012264 <___vfprintf_internal_r+0x13b4>
 4012258:	b5800204 	addi	r22,r22,8
 401225c:	843ffc04 	addi	r16,r16,-16
 4012260:	e4007b0e 	bge	fp,r16,4012450 <___vfprintf_internal_r+0x15a0>
 4012264:	18c00404 	addi	r3,r3,16
 4012268:	8c400044 	addi	r17,r17,1
 401226c:	b5000015 	stw	r20,0(r22)
 4012270:	b7000115 	stw	fp,4(r22)
 4012274:	d8c02015 	stw	r3,128(sp)
 4012278:	dc401f15 	stw	r17,124(sp)
 401227c:	3c7ff60e 	bge	r7,r17,4012258 <__alt_mem_epcs_flash_controller_0+0xfb011258>
 4012280:	d9801e04 	addi	r6,sp,120
 4012284:	b80b883a 	mov	r5,r23
 4012288:	9809883a 	mov	r4,r19
 401228c:	d9c03c15 	stw	r7,240(sp)
 4012290:	4018d740 	call	4018d74 <__sprint_r>
 4012294:	d9c03c17 	ldw	r7,240(sp)
 4012298:	103c071e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 401229c:	d8c02017 	ldw	r3,128(sp)
 40122a0:	dc401f17 	ldw	r17,124(sp)
 40122a4:	dd800404 	addi	r22,sp,16
 40122a8:	003fec06 	br	401225c <__alt_mem_epcs_flash_controller_0+0xfb01125c>
 40122ac:	9080100c 	andi	r2,r18,64
 40122b0:	d8002785 	stb	zero,158(sp)
 40122b4:	10010e26 	beq	r2,zero,40126f0 <___vfprintf_internal_r+0x1840>
 40122b8:	d9002d17 	ldw	r4,180(sp)
 40122bc:	d9402917 	ldw	r5,164(sp)
 40122c0:	002d883a 	mov	r22,zero
 40122c4:	20800104 	addi	r2,r4,4
 40122c8:	24c0000b 	ldhu	r19,0(r4)
 40122cc:	283fc90e 	bge	r5,zero,40121f4 <__alt_mem_epcs_flash_controller_0+0xfb0111f4>
 40122d0:	d8802d15 	stw	r2,180(sp)
 40122d4:	0039883a 	mov	fp,zero
 40122d8:	9d84b03a 	or	r2,r19,r22
 40122dc:	103c461e 	bne	r2,zero,40113f8 <__alt_mem_epcs_flash_controller_0+0xfb0103f8>
 40122e0:	00800044 	movi	r2,1
 40122e4:	003e6c06 	br	4011c98 <__alt_mem_epcs_flash_controller_0+0xfb010c98>
 40122e8:	d9002c17 	ldw	r4,176(sp)
 40122ec:	d9801e04 	addi	r6,sp,120
 40122f0:	b80b883a 	mov	r5,r23
 40122f4:	4018d740 	call	4018d74 <__sprint_r>
 40122f8:	103bef1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40122fc:	d8c02017 	ldw	r3,128(sp)
 4012300:	da000404 	addi	r8,sp,16
 4012304:	d9003217 	ldw	r4,200(sp)
 4012308:	d8802617 	ldw	r2,152(sp)
 401230c:	d9403317 	ldw	r5,204(sp)
 4012310:	8123883a 	add	r17,r16,r4
 4012314:	11400216 	blt	r2,r5,4012320 <___vfprintf_internal_r+0x1470>
 4012318:	9100004c 	andi	r4,r18,1
 401231c:	20000d26 	beq	r4,zero,4012354 <___vfprintf_internal_r+0x14a4>
 4012320:	d9003717 	ldw	r4,220(sp)
 4012324:	d9403417 	ldw	r5,208(sp)
 4012328:	1907883a 	add	r3,r3,r4
 401232c:	d9001f17 	ldw	r4,124(sp)
 4012330:	41400015 	stw	r5,0(r8)
 4012334:	d9403717 	ldw	r5,220(sp)
 4012338:	21000044 	addi	r4,r4,1
 401233c:	d8c02015 	stw	r3,128(sp)
 4012340:	41400115 	stw	r5,4(r8)
 4012344:	d9001f15 	stw	r4,124(sp)
 4012348:	014001c4 	movi	r5,7
 401234c:	2901e816 	blt	r5,r4,4012af0 <___vfprintf_internal_r+0x1c40>
 4012350:	42000204 	addi	r8,r8,8
 4012354:	d9003317 	ldw	r4,204(sp)
 4012358:	8121883a 	add	r16,r16,r4
 401235c:	2085c83a 	sub	r2,r4,r2
 4012360:	8461c83a 	sub	r16,r16,r17
 4012364:	1400010e 	bge	r2,r16,401236c <___vfprintf_internal_r+0x14bc>
 4012368:	1021883a 	mov	r16,r2
 401236c:	04000a0e 	bge	zero,r16,4012398 <___vfprintf_internal_r+0x14e8>
 4012370:	d9001f17 	ldw	r4,124(sp)
 4012374:	1c07883a 	add	r3,r3,r16
 4012378:	44400015 	stw	r17,0(r8)
 401237c:	21000044 	addi	r4,r4,1
 4012380:	44000115 	stw	r16,4(r8)
 4012384:	d8c02015 	stw	r3,128(sp)
 4012388:	d9001f15 	stw	r4,124(sp)
 401238c:	014001c4 	movi	r5,7
 4012390:	2901fb16 	blt	r5,r4,4012b80 <___vfprintf_internal_r+0x1cd0>
 4012394:	42000204 	addi	r8,r8,8
 4012398:	8001f716 	blt	r16,zero,4012b78 <___vfprintf_internal_r+0x1cc8>
 401239c:	1421c83a 	sub	r16,r2,r16
 40123a0:	043d380e 	bge	zero,r16,4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 40123a4:	04400404 	movi	r17,16
 40123a8:	d8801f17 	ldw	r2,124(sp)
 40123ac:	8c3efb0e 	bge	r17,r16,4011f9c <__alt_mem_epcs_flash_controller_0+0xfb010f9c>
 40123b0:	01410234 	movhi	r5,1032
 40123b4:	29553e84 	addi	r5,r5,21754
 40123b8:	d9402b15 	stw	r5,172(sp)
 40123bc:	058001c4 	movi	r22,7
 40123c0:	dcc02c17 	ldw	r19,176(sp)
 40123c4:	00000306 	br	40123d4 <___vfprintf_internal_r+0x1524>
 40123c8:	42000204 	addi	r8,r8,8
 40123cc:	843ffc04 	addi	r16,r16,-16
 40123d0:	8c3ef50e 	bge	r17,r16,4011fa8 <__alt_mem_epcs_flash_controller_0+0xfb010fa8>
 40123d4:	18c00404 	addi	r3,r3,16
 40123d8:	10800044 	addi	r2,r2,1
 40123dc:	45000015 	stw	r20,0(r8)
 40123e0:	44400115 	stw	r17,4(r8)
 40123e4:	d8c02015 	stw	r3,128(sp)
 40123e8:	d8801f15 	stw	r2,124(sp)
 40123ec:	b0bff60e 	bge	r22,r2,40123c8 <__alt_mem_epcs_flash_controller_0+0xfb0113c8>
 40123f0:	d9801e04 	addi	r6,sp,120
 40123f4:	b80b883a 	mov	r5,r23
 40123f8:	9809883a 	mov	r4,r19
 40123fc:	4018d740 	call	4018d74 <__sprint_r>
 4012400:	103bad1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012404:	d8c02017 	ldw	r3,128(sp)
 4012408:	d8801f17 	ldw	r2,124(sp)
 401240c:	da000404 	addi	r8,sp,16
 4012410:	003fee06 	br	40123cc <__alt_mem_epcs_flash_controller_0+0xfb0113cc>
 4012414:	9088703a 	and	r4,r18,r2
 4012418:	203eab1e 	bne	r4,zero,4011ec8 <__alt_mem_epcs_flash_controller_0+0xfb010ec8>
 401241c:	dc401f17 	ldw	r17,124(sp)
 4012420:	40800115 	stw	r2,4(r8)
 4012424:	44000015 	stw	r16,0(r8)
 4012428:	8c400044 	addi	r17,r17,1
 401242c:	d8c02015 	stw	r3,128(sp)
 4012430:	dc401f15 	stw	r17,124(sp)
 4012434:	008001c4 	movi	r2,7
 4012438:	14400e16 	blt	r2,r17,4012474 <___vfprintf_internal_r+0x15c4>
 401243c:	45800204 	addi	r22,r8,8
 4012440:	003eca06 	br	4011f6c <__alt_mem_epcs_flash_controller_0+0xfb010f6c>
 4012444:	01010234 	movhi	r4,1032
 4012448:	21153e84 	addi	r4,r4,21754
 401244c:	d9002b15 	stw	r4,172(sp)
 4012450:	d8802b17 	ldw	r2,172(sp)
 4012454:	1c07883a 	add	r3,r3,r16
 4012458:	8c400044 	addi	r17,r17,1
 401245c:	b0800015 	stw	r2,0(r22)
 4012460:	b4000115 	stw	r16,4(r22)
 4012464:	d8c02015 	stw	r3,128(sp)
 4012468:	dc401f15 	stw	r17,124(sp)
 401246c:	008001c4 	movi	r2,7
 4012470:	147ebd0e 	bge	r2,r17,4011f68 <__alt_mem_epcs_flash_controller_0+0xfb010f68>
 4012474:	d9002c17 	ldw	r4,176(sp)
 4012478:	d9801e04 	addi	r6,sp,120
 401247c:	b80b883a 	mov	r5,r23
 4012480:	4018d740 	call	4018d74 <__sprint_r>
 4012484:	103b8c1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012488:	d8c02017 	ldw	r3,128(sp)
 401248c:	dc401f17 	ldw	r17,124(sp)
 4012490:	dd800404 	addi	r22,sp,16
 4012494:	003eb506 	br	4011f6c <__alt_mem_epcs_flash_controller_0+0xfb010f6c>
 4012498:	d9002c17 	ldw	r4,176(sp)
 401249c:	d9801e04 	addi	r6,sp,120
 40124a0:	b80b883a 	mov	r5,r23
 40124a4:	4018d740 	call	4018d74 <__sprint_r>
 40124a8:	103b831e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40124ac:	d8c02017 	ldw	r3,128(sp)
 40124b0:	dc401f17 	ldw	r17,124(sp)
 40124b4:	da000404 	addi	r8,sp,16
 40124b8:	003e8d06 	br	4011ef0 <__alt_mem_epcs_flash_controller_0+0xfb010ef0>
 40124bc:	d9002c17 	ldw	r4,176(sp)
 40124c0:	d9801e04 	addi	r6,sp,120
 40124c4:	b80b883a 	mov	r5,r23
 40124c8:	4018d740 	call	4018d74 <__sprint_r>
 40124cc:	103b7a1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40124d0:	d8c02017 	ldw	r3,128(sp)
 40124d4:	dc401f17 	ldw	r17,124(sp)
 40124d8:	dd800404 	addi	r22,sp,16
 40124dc:	003e8f06 	br	4011f1c <__alt_mem_epcs_flash_controller_0+0xfb010f1c>
 40124e0:	0027883a 	mov	r19,zero
 40124e4:	003f4a06 	br	4012210 <__alt_mem_epcs_flash_controller_0+0xfb011210>
 40124e8:	d9002c17 	ldw	r4,176(sp)
 40124ec:	d9801e04 	addi	r6,sp,120
 40124f0:	b80b883a 	mov	r5,r23
 40124f4:	4018d740 	call	4018d74 <__sprint_r>
 40124f8:	103b6f1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40124fc:	d8c02017 	ldw	r3,128(sp)
 4012500:	da000404 	addi	r8,sp,16
 4012504:	003c9d06 	br	401177c <__alt_mem_epcs_flash_controller_0+0xfb01077c>
 4012508:	04e7c83a 	sub	r19,zero,r19
 401250c:	9804c03a 	cmpne	r2,r19,zero
 4012510:	05adc83a 	sub	r22,zero,r22
 4012514:	b0adc83a 	sub	r22,r22,r2
 4012518:	d8802917 	ldw	r2,164(sp)
 401251c:	07000b44 	movi	fp,45
 4012520:	df002785 	stb	fp,158(sp)
 4012524:	10017b16 	blt	r2,zero,4012b14 <___vfprintf_internal_r+0x1c64>
 4012528:	00bfdfc4 	movi	r2,-129
 401252c:	90a4703a 	and	r18,r18,r2
 4012530:	003bb106 	br	40113f8 <__alt_mem_epcs_flash_controller_0+0xfb0103f8>
 4012534:	d9003617 	ldw	r4,216(sp)
 4012538:	d9403817 	ldw	r5,224(sp)
 401253c:	da003d15 	stw	r8,244(sp)
 4012540:	4009fa00 	call	4009fa0 <__fpclassifyd>
 4012544:	da003d17 	ldw	r8,244(sp)
 4012548:	1000f026 	beq	r2,zero,401290c <___vfprintf_internal_r+0x1a5c>
 401254c:	d9002917 	ldw	r4,164(sp)
 4012550:	05bff7c4 	movi	r22,-33
 4012554:	00bfffc4 	movi	r2,-1
 4012558:	8dac703a 	and	r22,r17,r22
 401255c:	20820026 	beq	r4,r2,4012d60 <___vfprintf_internal_r+0x1eb0>
 4012560:	008011c4 	movi	r2,71
 4012564:	b081f726 	beq	r22,r2,4012d44 <___vfprintf_internal_r+0x1e94>
 4012568:	d9003817 	ldw	r4,224(sp)
 401256c:	90c04014 	ori	r3,r18,256
 4012570:	d8c02b15 	stw	r3,172(sp)
 4012574:	20021516 	blt	r4,zero,4012dcc <___vfprintf_internal_r+0x1f1c>
 4012578:	dcc03817 	ldw	r19,224(sp)
 401257c:	d8002a05 	stb	zero,168(sp)
 4012580:	00801984 	movi	r2,102
 4012584:	8881f926 	beq	r17,r2,4012d6c <___vfprintf_internal_r+0x1ebc>
 4012588:	00801184 	movi	r2,70
 401258c:	88821c26 	beq	r17,r2,4012e00 <___vfprintf_internal_r+0x1f50>
 4012590:	00801144 	movi	r2,69
 4012594:	b081ef26 	beq	r22,r2,4012d54 <___vfprintf_internal_r+0x1ea4>
 4012598:	d8c02917 	ldw	r3,164(sp)
 401259c:	d8802104 	addi	r2,sp,132
 40125a0:	d8800315 	stw	r2,12(sp)
 40125a4:	d9403617 	ldw	r5,216(sp)
 40125a8:	d8802504 	addi	r2,sp,148
 40125ac:	d9002c17 	ldw	r4,176(sp)
 40125b0:	d8800215 	stw	r2,8(sp)
 40125b4:	d8802604 	addi	r2,sp,152
 40125b8:	d8c00015 	stw	r3,0(sp)
 40125bc:	d8800115 	stw	r2,4(sp)
 40125c0:	01c00084 	movi	r7,2
 40125c4:	980d883a 	mov	r6,r19
 40125c8:	d8c03c15 	stw	r3,240(sp)
 40125cc:	da003d15 	stw	r8,244(sp)
 40125d0:	40134d40 	call	40134d4 <_dtoa_r>
 40125d4:	1021883a 	mov	r16,r2
 40125d8:	008019c4 	movi	r2,103
 40125dc:	d8c03c17 	ldw	r3,240(sp)
 40125e0:	da003d17 	ldw	r8,244(sp)
 40125e4:	88817126 	beq	r17,r2,4012bac <___vfprintf_internal_r+0x1cfc>
 40125e8:	008011c4 	movi	r2,71
 40125ec:	88829226 	beq	r17,r2,4013038 <___vfprintf_internal_r+0x2188>
 40125f0:	80f9883a 	add	fp,r16,r3
 40125f4:	d9003617 	ldw	r4,216(sp)
 40125f8:	000d883a 	mov	r6,zero
 40125fc:	000f883a 	mov	r7,zero
 4012600:	980b883a 	mov	r5,r19
 4012604:	da003d15 	stw	r8,244(sp)
 4012608:	401b6a40 	call	401b6a4 <__eqdf2>
 401260c:	da003d17 	ldw	r8,244(sp)
 4012610:	10018d26 	beq	r2,zero,4012c48 <___vfprintf_internal_r+0x1d98>
 4012614:	d8802117 	ldw	r2,132(sp)
 4012618:	1700062e 	bgeu	r2,fp,4012634 <___vfprintf_internal_r+0x1784>
 401261c:	01000c04 	movi	r4,48
 4012620:	10c00044 	addi	r3,r2,1
 4012624:	d8c02115 	stw	r3,132(sp)
 4012628:	11000005 	stb	r4,0(r2)
 401262c:	d8802117 	ldw	r2,132(sp)
 4012630:	173ffb36 	bltu	r2,fp,4012620 <__alt_mem_epcs_flash_controller_0+0xfb011620>
 4012634:	1405c83a 	sub	r2,r2,r16
 4012638:	d8803315 	stw	r2,204(sp)
 401263c:	008011c4 	movi	r2,71
 4012640:	b0817626 	beq	r22,r2,4012c1c <___vfprintf_internal_r+0x1d6c>
 4012644:	00801944 	movi	r2,101
 4012648:	1442810e 	bge	r2,r17,4013050 <___vfprintf_internal_r+0x21a0>
 401264c:	d8c02617 	ldw	r3,152(sp)
 4012650:	00801984 	movi	r2,102
 4012654:	d8c03215 	stw	r3,200(sp)
 4012658:	8881fe26 	beq	r17,r2,4012e54 <___vfprintf_internal_r+0x1fa4>
 401265c:	d8c03217 	ldw	r3,200(sp)
 4012660:	d9003317 	ldw	r4,204(sp)
 4012664:	1901dd16 	blt	r3,r4,4012ddc <___vfprintf_internal_r+0x1f2c>
 4012668:	9480004c 	andi	r18,r18,1
 401266c:	90022b1e 	bne	r18,zero,4012f1c <___vfprintf_internal_r+0x206c>
 4012670:	1805883a 	mov	r2,r3
 4012674:	18028016 	blt	r3,zero,4013078 <___vfprintf_internal_r+0x21c8>
 4012678:	d8c03217 	ldw	r3,200(sp)
 401267c:	044019c4 	movi	r17,103
 4012680:	d8c02e15 	stw	r3,184(sp)
 4012684:	df002a07 	ldb	fp,168(sp)
 4012688:	e001531e 	bne	fp,zero,4012bd8 <___vfprintf_internal_r+0x1d28>
 401268c:	df002783 	ldbu	fp,158(sp)
 4012690:	d8802a15 	stw	r2,168(sp)
 4012694:	dc802b17 	ldw	r18,172(sp)
 4012698:	d8002915 	stw	zero,164(sp)
 401269c:	003bd106 	br	40115e4 <__alt_mem_epcs_flash_controller_0+0xfb0105e4>
 40126a0:	d8802d17 	ldw	r2,180(sp)
 40126a4:	d8c02d17 	ldw	r3,180(sp)
 40126a8:	d9002d17 	ldw	r4,180(sp)
 40126ac:	10800017 	ldw	r2,0(r2)
 40126b0:	18c00117 	ldw	r3,4(r3)
 40126b4:	21000204 	addi	r4,r4,8
 40126b8:	d8803615 	stw	r2,216(sp)
 40126bc:	d8c03815 	stw	r3,224(sp)
 40126c0:	d9002d15 	stw	r4,180(sp)
 40126c4:	003b7506 	br	401149c <__alt_mem_epcs_flash_controller_0+0xfb01049c>
 40126c8:	ac400007 	ldb	r17,0(r21)
 40126cc:	003a5906 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 40126d0:	9080100c 	andi	r2,r18,64
 40126d4:	1000a826 	beq	r2,zero,4012978 <___vfprintf_internal_r+0x1ac8>
 40126d8:	d9002d17 	ldw	r4,180(sp)
 40126dc:	002d883a 	mov	r22,zero
 40126e0:	24c0000b 	ldhu	r19,0(r4)
 40126e4:	21000104 	addi	r4,r4,4
 40126e8:	d9002d15 	stw	r4,180(sp)
 40126ec:	003ccb06 	br	4011a1c <__alt_mem_epcs_flash_controller_0+0xfb010a1c>
 40126f0:	d8c02d17 	ldw	r3,180(sp)
 40126f4:	d9002917 	ldw	r4,164(sp)
 40126f8:	002d883a 	mov	r22,zero
 40126fc:	18800104 	addi	r2,r3,4
 4012700:	1cc00017 	ldw	r19,0(r3)
 4012704:	203ebb0e 	bge	r4,zero,40121f4 <__alt_mem_epcs_flash_controller_0+0xfb0111f4>
 4012708:	003ef106 	br	40122d0 <__alt_mem_epcs_flash_controller_0+0xfb0112d0>
 401270c:	9080040c 	andi	r2,r18,16
 4012710:	1000921e 	bne	r2,zero,401295c <___vfprintf_internal_r+0x1aac>
 4012714:	9480100c 	andi	r18,r18,64
 4012718:	90013926 	beq	r18,zero,4012c00 <___vfprintf_internal_r+0x1d50>
 401271c:	d9002d17 	ldw	r4,180(sp)
 4012720:	d9402f17 	ldw	r5,188(sp)
 4012724:	20800017 	ldw	r2,0(r4)
 4012728:	21000104 	addi	r4,r4,4
 401272c:	d9002d15 	stw	r4,180(sp)
 4012730:	1140000d 	sth	r5,0(r2)
 4012734:	003a1606 	br	4010f90 <__alt_mem_epcs_flash_controller_0+0xfb00ff90>
 4012738:	9080100c 	andi	r2,r18,64
 401273c:	10008026 	beq	r2,zero,4012940 <___vfprintf_internal_r+0x1a90>
 4012740:	d8c02d17 	ldw	r3,180(sp)
 4012744:	1cc0000f 	ldh	r19,0(r3)
 4012748:	18c00104 	addi	r3,r3,4
 401274c:	d8c02d15 	stw	r3,180(sp)
 4012750:	982dd7fa 	srai	r22,r19,31
 4012754:	b005883a 	mov	r2,r22
 4012758:	003b1f06 	br	40113d8 <__alt_mem_epcs_flash_controller_0+0xfb0103d8>
 401275c:	9080100c 	andi	r2,r18,64
 4012760:	d8002785 	stb	zero,158(sp)
 4012764:	10008a1e 	bne	r2,zero,4012990 <___vfprintf_internal_r+0x1ae0>
 4012768:	d9402d17 	ldw	r5,180(sp)
 401276c:	d8c02917 	ldw	r3,164(sp)
 4012770:	002d883a 	mov	r22,zero
 4012774:	28800104 	addi	r2,r5,4
 4012778:	2cc00017 	ldw	r19,0(r5)
 401277c:	183e4b0e 	bge	r3,zero,40120ac <__alt_mem_epcs_flash_controller_0+0xfb0110ac>
 4012780:	9d86b03a 	or	r3,r19,r22
 4012784:	d8802d15 	stw	r2,180(sp)
 4012788:	183e4c1e 	bne	r3,zero,40120bc <__alt_mem_epcs_flash_controller_0+0xfb0110bc>
 401278c:	0039883a 	mov	fp,zero
 4012790:	0005883a 	mov	r2,zero
 4012794:	003d4006 	br	4011c98 <__alt_mem_epcs_flash_controller_0+0xfb010c98>
 4012798:	01410234 	movhi	r5,1032
 401279c:	29553e84 	addi	r5,r5,21754
 40127a0:	d9402b15 	stw	r5,172(sp)
 40127a4:	d9402b17 	ldw	r5,172(sp)
 40127a8:	1c47883a 	add	r3,r3,r17
 40127ac:	10800044 	addi	r2,r2,1
 40127b0:	41400015 	stw	r5,0(r8)
 40127b4:	44400115 	stw	r17,4(r8)
 40127b8:	d8c02015 	stw	r3,128(sp)
 40127bc:	d8801f15 	stw	r2,124(sp)
 40127c0:	010001c4 	movi	r4,7
 40127c4:	20bec816 	blt	r4,r2,40122e8 <__alt_mem_epcs_flash_controller_0+0xfb0112e8>
 40127c8:	42000204 	addi	r8,r8,8
 40127cc:	003ecd06 	br	4012304 <__alt_mem_epcs_flash_controller_0+0xfb011304>
 40127d0:	d9002917 	ldw	r4,164(sp)
 40127d4:	d8002785 	stb	zero,158(sp)
 40127d8:	203d2d16 	blt	r4,zero,4011c90 <__alt_mem_epcs_flash_controller_0+0xfb010c90>
 40127dc:	00bfdfc4 	movi	r2,-129
 40127e0:	90a4703a 	and	r18,r18,r2
 40127e4:	003a9106 	br	401122c <__alt_mem_epcs_flash_controller_0+0xfb01022c>
 40127e8:	01010234 	movhi	r4,1032
 40127ec:	21153e84 	addi	r4,r4,21754
 40127f0:	d9002b15 	stw	r4,172(sp)
 40127f4:	003c0c06 	br	4011828 <__alt_mem_epcs_flash_controller_0+0xfb010828>
 40127f8:	d9002c17 	ldw	r4,176(sp)
 40127fc:	d9801e04 	addi	r6,sp,120
 4012800:	b80b883a 	mov	r5,r23
 4012804:	4018d740 	call	4018d74 <__sprint_r>
 4012808:	103aab1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 401280c:	d8c02017 	ldw	r3,128(sp)
 4012810:	da000404 	addi	r8,sp,16
 4012814:	003d4106 	br	4011d1c <__alt_mem_epcs_flash_controller_0+0xfb010d1c>
 4012818:	d8801f17 	ldw	r2,124(sp)
 401281c:	01410234 	movhi	r5,1032
 4012820:	01000044 	movi	r4,1
 4012824:	18c00044 	addi	r3,r3,1
 4012828:	10800044 	addi	r2,r2,1
 401282c:	29553604 	addi	r5,r5,21720
 4012830:	41000115 	stw	r4,4(r8)
 4012834:	41400015 	stw	r5,0(r8)
 4012838:	d8c02015 	stw	r3,128(sp)
 401283c:	d8801f15 	stw	r2,124(sp)
 4012840:	010001c4 	movi	r4,7
 4012844:	20805c16 	blt	r4,r2,40129b8 <___vfprintf_internal_r+0x1b08>
 4012848:	42000204 	addi	r8,r8,8
 401284c:	8800041e 	bne	r17,zero,4012860 <___vfprintf_internal_r+0x19b0>
 4012850:	d8803317 	ldw	r2,204(sp)
 4012854:	1000021e 	bne	r2,zero,4012860 <___vfprintf_internal_r+0x19b0>
 4012858:	9080004c 	andi	r2,r18,1
 401285c:	103c0926 	beq	r2,zero,4011884 <__alt_mem_epcs_flash_controller_0+0xfb010884>
 4012860:	d9003717 	ldw	r4,220(sp)
 4012864:	d8801f17 	ldw	r2,124(sp)
 4012868:	d9403417 	ldw	r5,208(sp)
 401286c:	20c7883a 	add	r3,r4,r3
 4012870:	10800044 	addi	r2,r2,1
 4012874:	41000115 	stw	r4,4(r8)
 4012878:	41400015 	stw	r5,0(r8)
 401287c:	d8c02015 	stw	r3,128(sp)
 4012880:	d8801f15 	stw	r2,124(sp)
 4012884:	010001c4 	movi	r4,7
 4012888:	20812116 	blt	r4,r2,4012d10 <___vfprintf_internal_r+0x1e60>
 401288c:	42000204 	addi	r8,r8,8
 4012890:	0463c83a 	sub	r17,zero,r17
 4012894:	0440730e 	bge	zero,r17,4012a64 <___vfprintf_internal_r+0x1bb4>
 4012898:	05800404 	movi	r22,16
 401289c:	b440860e 	bge	r22,r17,4012ab8 <___vfprintf_internal_r+0x1c08>
 40128a0:	01410234 	movhi	r5,1032
 40128a4:	29553e84 	addi	r5,r5,21754
 40128a8:	d9402b15 	stw	r5,172(sp)
 40128ac:	070001c4 	movi	fp,7
 40128b0:	dcc02c17 	ldw	r19,176(sp)
 40128b4:	00000306 	br	40128c4 <___vfprintf_internal_r+0x1a14>
 40128b8:	42000204 	addi	r8,r8,8
 40128bc:	8c7ffc04 	addi	r17,r17,-16
 40128c0:	b440800e 	bge	r22,r17,4012ac4 <___vfprintf_internal_r+0x1c14>
 40128c4:	18c00404 	addi	r3,r3,16
 40128c8:	10800044 	addi	r2,r2,1
 40128cc:	45000015 	stw	r20,0(r8)
 40128d0:	45800115 	stw	r22,4(r8)
 40128d4:	d8c02015 	stw	r3,128(sp)
 40128d8:	d8801f15 	stw	r2,124(sp)
 40128dc:	e0bff60e 	bge	fp,r2,40128b8 <__alt_mem_epcs_flash_controller_0+0xfb0118b8>
 40128e0:	d9801e04 	addi	r6,sp,120
 40128e4:	b80b883a 	mov	r5,r23
 40128e8:	9809883a 	mov	r4,r19
 40128ec:	4018d740 	call	4018d74 <__sprint_r>
 40128f0:	103a711e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40128f4:	d8c02017 	ldw	r3,128(sp)
 40128f8:	d8801f17 	ldw	r2,124(sp)
 40128fc:	da000404 	addi	r8,sp,16
 4012900:	003fee06 	br	40128bc <__alt_mem_epcs_flash_controller_0+0xfb0118bc>
 4012904:	00bfffc4 	movi	r2,-1
 4012908:	003a6f06 	br	40112c8 <__alt_mem_epcs_flash_controller_0+0xfb0102c8>
 401290c:	008011c4 	movi	r2,71
 4012910:	1440b816 	blt	r2,r17,4012bf4 <___vfprintf_internal_r+0x1d44>
 4012914:	04010234 	movhi	r16,1032
 4012918:	84152804 	addi	r16,r16,21664
 401291c:	00c000c4 	movi	r3,3
 4012920:	00bfdfc4 	movi	r2,-129
 4012924:	d8c02a15 	stw	r3,168(sp)
 4012928:	90a4703a 	and	r18,r18,r2
 401292c:	df002783 	ldbu	fp,158(sp)
 4012930:	d8c02e15 	stw	r3,184(sp)
 4012934:	d8002915 	stw	zero,164(sp)
 4012938:	d8003215 	stw	zero,200(sp)
 401293c:	003b2906 	br	40115e4 <__alt_mem_epcs_flash_controller_0+0xfb0105e4>
 4012940:	d9002d17 	ldw	r4,180(sp)
 4012944:	24c00017 	ldw	r19,0(r4)
 4012948:	21000104 	addi	r4,r4,4
 401294c:	d9002d15 	stw	r4,180(sp)
 4012950:	982dd7fa 	srai	r22,r19,31
 4012954:	b005883a 	mov	r2,r22
 4012958:	003a9f06 	br	40113d8 <__alt_mem_epcs_flash_controller_0+0xfb0103d8>
 401295c:	d9402d17 	ldw	r5,180(sp)
 4012960:	d8c02f17 	ldw	r3,188(sp)
 4012964:	28800017 	ldw	r2,0(r5)
 4012968:	29400104 	addi	r5,r5,4
 401296c:	d9402d15 	stw	r5,180(sp)
 4012970:	10c00015 	stw	r3,0(r2)
 4012974:	00398606 	br	4010f90 <__alt_mem_epcs_flash_controller_0+0xfb00ff90>
 4012978:	d9402d17 	ldw	r5,180(sp)
 401297c:	002d883a 	mov	r22,zero
 4012980:	2cc00017 	ldw	r19,0(r5)
 4012984:	29400104 	addi	r5,r5,4
 4012988:	d9402d15 	stw	r5,180(sp)
 401298c:	003c2306 	br	4011a1c <__alt_mem_epcs_flash_controller_0+0xfb010a1c>
 4012990:	d8c02d17 	ldw	r3,180(sp)
 4012994:	d9002917 	ldw	r4,164(sp)
 4012998:	002d883a 	mov	r22,zero
 401299c:	18800104 	addi	r2,r3,4
 40129a0:	1cc0000b 	ldhu	r19,0(r3)
 40129a4:	203dc10e 	bge	r4,zero,40120ac <__alt_mem_epcs_flash_controller_0+0xfb0110ac>
 40129a8:	003f7506 	br	4012780 <__alt_mem_epcs_flash_controller_0+0xfb011780>
 40129ac:	04010234 	movhi	r16,1032
 40129b0:	84152604 	addi	r16,r16,21656
 40129b4:	003acc06 	br	40114e8 <__alt_mem_epcs_flash_controller_0+0xfb0104e8>
 40129b8:	d9002c17 	ldw	r4,176(sp)
 40129bc:	d9801e04 	addi	r6,sp,120
 40129c0:	b80b883a 	mov	r5,r23
 40129c4:	4018d740 	call	4018d74 <__sprint_r>
 40129c8:	103a3b1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 40129cc:	dc402617 	ldw	r17,152(sp)
 40129d0:	d8c02017 	ldw	r3,128(sp)
 40129d4:	da000404 	addi	r8,sp,16
 40129d8:	003f9c06 	br	401284c <__alt_mem_epcs_flash_controller_0+0xfb01184c>
 40129dc:	ac400043 	ldbu	r17,1(r21)
 40129e0:	94800814 	ori	r18,r18,32
 40129e4:	ad400044 	addi	r21,r21,1
 40129e8:	8c403fcc 	andi	r17,r17,255
 40129ec:	8c40201c 	xori	r17,r17,128
 40129f0:	8c7fe004 	addi	r17,r17,-128
 40129f4:	00398f06 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 40129f8:	d8c02d15 	stw	r3,180(sp)
 40129fc:	0039883a 	mov	fp,zero
 4012a00:	003e3506 	br	40122d8 <__alt_mem_epcs_flash_controller_0+0xfb0112d8>
 4012a04:	d9002c17 	ldw	r4,176(sp)
 4012a08:	d9801e04 	addi	r6,sp,120
 4012a0c:	b80b883a 	mov	r5,r23
 4012a10:	4018d740 	call	4018d74 <__sprint_r>
 4012a14:	103a281e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012a18:	d8c02017 	ldw	r3,128(sp)
 4012a1c:	da000404 	addi	r8,sp,16
 4012a20:	003cd006 	br	4011d64 <__alt_mem_epcs_flash_controller_0+0xfb010d64>
 4012a24:	8009883a 	mov	r4,r16
 4012a28:	da003d15 	stw	r8,244(sp)
 4012a2c:	400ec400 	call	400ec40 <strlen>
 4012a30:	d8802e15 	stw	r2,184(sp)
 4012a34:	da003d17 	ldw	r8,244(sp)
 4012a38:	103c340e 	bge	r2,zero,4011b0c <__alt_mem_epcs_flash_controller_0+0xfb010b0c>
 4012a3c:	0005883a 	mov	r2,zero
 4012a40:	003c3206 	br	4011b0c <__alt_mem_epcs_flash_controller_0+0xfb010b0c>
 4012a44:	d9002c17 	ldw	r4,176(sp)
 4012a48:	d9801e04 	addi	r6,sp,120
 4012a4c:	b80b883a 	mov	r5,r23
 4012a50:	4018d740 	call	4018d74 <__sprint_r>
 4012a54:	103a181e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012a58:	d8c02017 	ldw	r3,128(sp)
 4012a5c:	d8801f17 	ldw	r2,124(sp)
 4012a60:	da000404 	addi	r8,sp,16
 4012a64:	d9403317 	ldw	r5,204(sp)
 4012a68:	10800044 	addi	r2,r2,1
 4012a6c:	44000015 	stw	r16,0(r8)
 4012a70:	28c7883a 	add	r3,r5,r3
 4012a74:	003b7d06 	br	401186c <__alt_mem_epcs_flash_controller_0+0xfb01086c>
 4012a78:	01010234 	movhi	r4,1032
 4012a7c:	21154284 	addi	r4,r4,21770
 4012a80:	d9003515 	stw	r4,212(sp)
 4012a84:	003b1406 	br	40116d8 <__alt_mem_epcs_flash_controller_0+0xfb0106d8>
 4012a88:	013fffc4 	movi	r4,-1
 4012a8c:	003a3506 	br	4011364 <__alt_mem_epcs_flash_controller_0+0xfb010364>
 4012a90:	0023883a 	mov	r17,zero
 4012a94:	003d9d06 	br	401210c <__alt_mem_epcs_flash_controller_0+0xfb01110c>
 4012a98:	d9002c17 	ldw	r4,176(sp)
 4012a9c:	d9801e04 	addi	r6,sp,120
 4012aa0:	b80b883a 	mov	r5,r23
 4012aa4:	4018d740 	call	4018d74 <__sprint_r>
 4012aa8:	103a031e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012aac:	d8c02017 	ldw	r3,128(sp)
 4012ab0:	da000404 	addi	r8,sp,16
 4012ab4:	003d9406 	br	4012108 <__alt_mem_epcs_flash_controller_0+0xfb011108>
 4012ab8:	01010234 	movhi	r4,1032
 4012abc:	21153e84 	addi	r4,r4,21754
 4012ac0:	d9002b15 	stw	r4,172(sp)
 4012ac4:	d9002b17 	ldw	r4,172(sp)
 4012ac8:	1c47883a 	add	r3,r3,r17
 4012acc:	10800044 	addi	r2,r2,1
 4012ad0:	41000015 	stw	r4,0(r8)
 4012ad4:	44400115 	stw	r17,4(r8)
 4012ad8:	d8c02015 	stw	r3,128(sp)
 4012adc:	d8801f15 	stw	r2,124(sp)
 4012ae0:	010001c4 	movi	r4,7
 4012ae4:	20bfd716 	blt	r4,r2,4012a44 <__alt_mem_epcs_flash_controller_0+0xfb011a44>
 4012ae8:	42000204 	addi	r8,r8,8
 4012aec:	003fdd06 	br	4012a64 <__alt_mem_epcs_flash_controller_0+0xfb011a64>
 4012af0:	d9002c17 	ldw	r4,176(sp)
 4012af4:	d9801e04 	addi	r6,sp,120
 4012af8:	b80b883a 	mov	r5,r23
 4012afc:	4018d740 	call	4018d74 <__sprint_r>
 4012b00:	1039ed1e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012b04:	d8802617 	ldw	r2,152(sp)
 4012b08:	d8c02017 	ldw	r3,128(sp)
 4012b0c:	da000404 	addi	r8,sp,16
 4012b10:	003e1006 	br	4012354 <__alt_mem_epcs_flash_controller_0+0xfb011354>
 4012b14:	00800044 	movi	r2,1
 4012b18:	10803fcc 	andi	r2,r2,255
 4012b1c:	00c00044 	movi	r3,1
 4012b20:	10fa3526 	beq	r2,r3,40113f8 <__alt_mem_epcs_flash_controller_0+0xfb0103f8>
 4012b24:	00c00084 	movi	r3,2
 4012b28:	10fbcb26 	beq	r2,r3,4011a58 <__alt_mem_epcs_flash_controller_0+0xfb010a58>
 4012b2c:	003a8f06 	br	401156c <__alt_mem_epcs_flash_controller_0+0xfb01056c>
 4012b30:	01010234 	movhi	r4,1032
 4012b34:	21154284 	addi	r4,r4,21770
 4012b38:	d9003515 	stw	r4,212(sp)
 4012b3c:	003b7606 	br	4011918 <__alt_mem_epcs_flash_controller_0+0xfb010918>
 4012b40:	d8802917 	ldw	r2,164(sp)
 4012b44:	00c00184 	movi	r3,6
 4012b48:	1880012e 	bgeu	r3,r2,4012b50 <___vfprintf_internal_r+0x1ca0>
 4012b4c:	1805883a 	mov	r2,r3
 4012b50:	d8802e15 	stw	r2,184(sp)
 4012b54:	1000ef16 	blt	r2,zero,4012f14 <___vfprintf_internal_r+0x2064>
 4012b58:	04010234 	movhi	r16,1032
 4012b5c:	d8802a15 	stw	r2,168(sp)
 4012b60:	dcc02d15 	stw	r19,180(sp)
 4012b64:	d8002915 	stw	zero,164(sp)
 4012b68:	d8003215 	stw	zero,200(sp)
 4012b6c:	84153404 	addi	r16,r16,21712
 4012b70:	0039883a 	mov	fp,zero
 4012b74:	003aa206 	br	4011600 <__alt_mem_epcs_flash_controller_0+0xfb010600>
 4012b78:	0021883a 	mov	r16,zero
 4012b7c:	003e0706 	br	401239c <__alt_mem_epcs_flash_controller_0+0xfb01139c>
 4012b80:	d9002c17 	ldw	r4,176(sp)
 4012b84:	d9801e04 	addi	r6,sp,120
 4012b88:	b80b883a 	mov	r5,r23
 4012b8c:	4018d740 	call	4018d74 <__sprint_r>
 4012b90:	1039c91e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012b94:	d8802617 	ldw	r2,152(sp)
 4012b98:	d9403317 	ldw	r5,204(sp)
 4012b9c:	d8c02017 	ldw	r3,128(sp)
 4012ba0:	da000404 	addi	r8,sp,16
 4012ba4:	2885c83a 	sub	r2,r5,r2
 4012ba8:	003dfb06 	br	4012398 <__alt_mem_epcs_flash_controller_0+0xfb011398>
 4012bac:	9080004c 	andi	r2,r18,1
 4012bb0:	103e8f1e 	bne	r2,zero,40125f0 <__alt_mem_epcs_flash_controller_0+0xfb0115f0>
 4012bb4:	d8802117 	ldw	r2,132(sp)
 4012bb8:	003e9e06 	br	4012634 <__alt_mem_epcs_flash_controller_0+0xfb011634>
 4012bbc:	1025883a 	mov	r18,r2
 4012bc0:	0039883a 	mov	fp,zero
 4012bc4:	00800084 	movi	r2,2
 4012bc8:	003fd306 	br	4012b18 <__alt_mem_epcs_flash_controller_0+0xfb011b18>
 4012bcc:	07000b44 	movi	fp,45
 4012bd0:	df002785 	stb	fp,158(sp)
 4012bd4:	003a4006 	br	40114d8 <__alt_mem_epcs_flash_controller_0+0xfb0104d8>
 4012bd8:	00c00b44 	movi	r3,45
 4012bdc:	d8c02785 	stb	r3,158(sp)
 4012be0:	d8802a15 	stw	r2,168(sp)
 4012be4:	dc802b17 	ldw	r18,172(sp)
 4012be8:	d8002915 	stw	zero,164(sp)
 4012bec:	07000b44 	movi	fp,45
 4012bf0:	003a8006 	br	40115f4 <__alt_mem_epcs_flash_controller_0+0xfb0105f4>
 4012bf4:	04010234 	movhi	r16,1032
 4012bf8:	84152904 	addi	r16,r16,21668
 4012bfc:	003f4706 	br	401291c <__alt_mem_epcs_flash_controller_0+0xfb01191c>
 4012c00:	d8c02d17 	ldw	r3,180(sp)
 4012c04:	d9002f17 	ldw	r4,188(sp)
 4012c08:	18800017 	ldw	r2,0(r3)
 4012c0c:	18c00104 	addi	r3,r3,4
 4012c10:	d8c02d15 	stw	r3,180(sp)
 4012c14:	11000015 	stw	r4,0(r2)
 4012c18:	0038dd06 	br	4010f90 <__alt_mem_epcs_flash_controller_0+0xfb00ff90>
 4012c1c:	dd802617 	ldw	r22,152(sp)
 4012c20:	00bfff44 	movi	r2,-3
 4012c24:	b0801c16 	blt	r22,r2,4012c98 <___vfprintf_internal_r+0x1de8>
 4012c28:	d9402917 	ldw	r5,164(sp)
 4012c2c:	2d801a16 	blt	r5,r22,4012c98 <___vfprintf_internal_r+0x1de8>
 4012c30:	dd803215 	stw	r22,200(sp)
 4012c34:	003e8906 	br	401265c <__alt_mem_epcs_flash_controller_0+0xfb01165c>
 4012c38:	01010234 	movhi	r4,1032
 4012c3c:	21153e84 	addi	r4,r4,21754
 4012c40:	d9002b15 	stw	r4,172(sp)
 4012c44:	003c9106 	br	4011e8c <__alt_mem_epcs_flash_controller_0+0xfb010e8c>
 4012c48:	e005883a 	mov	r2,fp
 4012c4c:	003e7906 	br	4012634 <__alt_mem_epcs_flash_controller_0+0xfb011634>
 4012c50:	d9402917 	ldw	r5,164(sp)
 4012c54:	df002783 	ldbu	fp,158(sp)
 4012c58:	dcc02d15 	stw	r19,180(sp)
 4012c5c:	d9402a15 	stw	r5,168(sp)
 4012c60:	d9402e15 	stw	r5,184(sp)
 4012c64:	d8002915 	stw	zero,164(sp)
 4012c68:	d8003215 	stw	zero,200(sp)
 4012c6c:	003a5d06 	br	40115e4 <__alt_mem_epcs_flash_controller_0+0xfb0105e4>
 4012c70:	9080004c 	andi	r2,r18,1
 4012c74:	0039883a 	mov	fp,zero
 4012c78:	10000426 	beq	r2,zero,4012c8c <___vfprintf_internal_r+0x1ddc>
 4012c7c:	00800c04 	movi	r2,48
 4012c80:	dc001dc4 	addi	r16,sp,119
 4012c84:	d8801dc5 	stb	r2,119(sp)
 4012c88:	003b8006 	br	4011a8c <__alt_mem_epcs_flash_controller_0+0xfb010a8c>
 4012c8c:	d8002e15 	stw	zero,184(sp)
 4012c90:	dc001e04 	addi	r16,sp,120
 4012c94:	003a4d06 	br	40115cc <__alt_mem_epcs_flash_controller_0+0xfb0105cc>
 4012c98:	8c7fff84 	addi	r17,r17,-2
 4012c9c:	b5bfffc4 	addi	r22,r22,-1
 4012ca0:	dd802615 	stw	r22,152(sp)
 4012ca4:	dc4022c5 	stb	r17,139(sp)
 4012ca8:	b000bf16 	blt	r22,zero,4012fa8 <___vfprintf_internal_r+0x20f8>
 4012cac:	00800ac4 	movi	r2,43
 4012cb0:	d8802305 	stb	r2,140(sp)
 4012cb4:	00800244 	movi	r2,9
 4012cb8:	15807016 	blt	r2,r22,4012e7c <___vfprintf_internal_r+0x1fcc>
 4012cbc:	00800c04 	movi	r2,48
 4012cc0:	b5800c04 	addi	r22,r22,48
 4012cc4:	d8802345 	stb	r2,141(sp)
 4012cc8:	dd802385 	stb	r22,142(sp)
 4012ccc:	d88023c4 	addi	r2,sp,143
 4012cd0:	df0022c4 	addi	fp,sp,139
 4012cd4:	d8c03317 	ldw	r3,204(sp)
 4012cd8:	1739c83a 	sub	fp,r2,fp
 4012cdc:	d9003317 	ldw	r4,204(sp)
 4012ce0:	e0c7883a 	add	r3,fp,r3
 4012ce4:	df003a15 	stw	fp,232(sp)
 4012ce8:	d8c02e15 	stw	r3,184(sp)
 4012cec:	00800044 	movi	r2,1
 4012cf0:	1100b30e 	bge	r2,r4,4012fc0 <___vfprintf_internal_r+0x2110>
 4012cf4:	d8c02e17 	ldw	r3,184(sp)
 4012cf8:	18c00044 	addi	r3,r3,1
 4012cfc:	d8c02e15 	stw	r3,184(sp)
 4012d00:	1805883a 	mov	r2,r3
 4012d04:	1800ac16 	blt	r3,zero,4012fb8 <___vfprintf_internal_r+0x2108>
 4012d08:	d8003215 	stw	zero,200(sp)
 4012d0c:	003e5d06 	br	4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012d10:	d9002c17 	ldw	r4,176(sp)
 4012d14:	d9801e04 	addi	r6,sp,120
 4012d18:	b80b883a 	mov	r5,r23
 4012d1c:	4018d740 	call	4018d74 <__sprint_r>
 4012d20:	1039651e 	bne	r2,zero,40112b8 <__alt_mem_epcs_flash_controller_0+0xfb0102b8>
 4012d24:	dc402617 	ldw	r17,152(sp)
 4012d28:	d8c02017 	ldw	r3,128(sp)
 4012d2c:	d8801f17 	ldw	r2,124(sp)
 4012d30:	da000404 	addi	r8,sp,16
 4012d34:	003ed606 	br	4012890 <__alt_mem_epcs_flash_controller_0+0xfb011890>
 4012d38:	582b883a 	mov	r21,r11
 4012d3c:	d8002915 	stw	zero,164(sp)
 4012d40:	0038bd06 	br	4011038 <__alt_mem_epcs_flash_controller_0+0xfb010038>
 4012d44:	d8802917 	ldw	r2,164(sp)
 4012d48:	103e071e 	bne	r2,zero,4012568 <__alt_mem_epcs_flash_controller_0+0xfb011568>
 4012d4c:	dc002915 	stw	r16,164(sp)
 4012d50:	003e0506 	br	4012568 <__alt_mem_epcs_flash_controller_0+0xfb011568>
 4012d54:	d9002917 	ldw	r4,164(sp)
 4012d58:	20c00044 	addi	r3,r4,1
 4012d5c:	003e0f06 	br	401259c <__alt_mem_epcs_flash_controller_0+0xfb01159c>
 4012d60:	01400184 	movi	r5,6
 4012d64:	d9402915 	stw	r5,164(sp)
 4012d68:	003dff06 	br	4012568 <__alt_mem_epcs_flash_controller_0+0xfb011568>
 4012d6c:	d8802104 	addi	r2,sp,132
 4012d70:	d8800315 	stw	r2,12(sp)
 4012d74:	d8802504 	addi	r2,sp,148
 4012d78:	d8800215 	stw	r2,8(sp)
 4012d7c:	d8802604 	addi	r2,sp,152
 4012d80:	d8800115 	stw	r2,4(sp)
 4012d84:	d8802917 	ldw	r2,164(sp)
 4012d88:	d9403617 	ldw	r5,216(sp)
 4012d8c:	d9002c17 	ldw	r4,176(sp)
 4012d90:	d8800015 	stw	r2,0(sp)
 4012d94:	01c000c4 	movi	r7,3
 4012d98:	980d883a 	mov	r6,r19
 4012d9c:	da003d15 	stw	r8,244(sp)
 4012da0:	40134d40 	call	40134d4 <_dtoa_r>
 4012da4:	d8c02917 	ldw	r3,164(sp)
 4012da8:	da003d17 	ldw	r8,244(sp)
 4012dac:	1021883a 	mov	r16,r2
 4012db0:	10f9883a 	add	fp,r2,r3
 4012db4:	81000007 	ldb	r4,0(r16)
 4012db8:	00800c04 	movi	r2,48
 4012dbc:	20805e26 	beq	r4,r2,4012f38 <___vfprintf_internal_r+0x2088>
 4012dc0:	d8c02617 	ldw	r3,152(sp)
 4012dc4:	e0f9883a 	add	fp,fp,r3
 4012dc8:	003e0a06 	br	40125f4 <__alt_mem_epcs_flash_controller_0+0xfb0115f4>
 4012dcc:	00c00b44 	movi	r3,45
 4012dd0:	24e0003c 	xorhi	r19,r4,32768
 4012dd4:	d8c02a05 	stb	r3,168(sp)
 4012dd8:	003de906 	br	4012580 <__alt_mem_epcs_flash_controller_0+0xfb011580>
 4012ddc:	d8c03217 	ldw	r3,200(sp)
 4012de0:	00c07a0e 	bge	zero,r3,4012fcc <___vfprintf_internal_r+0x211c>
 4012de4:	00800044 	movi	r2,1
 4012de8:	d9003317 	ldw	r4,204(sp)
 4012dec:	1105883a 	add	r2,r2,r4
 4012df0:	d8802e15 	stw	r2,184(sp)
 4012df4:	10004e16 	blt	r2,zero,4012f30 <___vfprintf_internal_r+0x2080>
 4012df8:	044019c4 	movi	r17,103
 4012dfc:	003e2106 	br	4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012e00:	d9002917 	ldw	r4,164(sp)
 4012e04:	d8802104 	addi	r2,sp,132
 4012e08:	d8800315 	stw	r2,12(sp)
 4012e0c:	d9000015 	stw	r4,0(sp)
 4012e10:	d8802504 	addi	r2,sp,148
 4012e14:	d9403617 	ldw	r5,216(sp)
 4012e18:	d9002c17 	ldw	r4,176(sp)
 4012e1c:	d8800215 	stw	r2,8(sp)
 4012e20:	d8802604 	addi	r2,sp,152
 4012e24:	d8800115 	stw	r2,4(sp)
 4012e28:	01c000c4 	movi	r7,3
 4012e2c:	980d883a 	mov	r6,r19
 4012e30:	da003d15 	stw	r8,244(sp)
 4012e34:	40134d40 	call	40134d4 <_dtoa_r>
 4012e38:	d8c02917 	ldw	r3,164(sp)
 4012e3c:	da003d17 	ldw	r8,244(sp)
 4012e40:	1021883a 	mov	r16,r2
 4012e44:	00801184 	movi	r2,70
 4012e48:	80f9883a 	add	fp,r16,r3
 4012e4c:	88bfd926 	beq	r17,r2,4012db4 <__alt_mem_epcs_flash_controller_0+0xfb011db4>
 4012e50:	003de806 	br	40125f4 <__alt_mem_epcs_flash_controller_0+0xfb0115f4>
 4012e54:	d9002917 	ldw	r4,164(sp)
 4012e58:	00c04d0e 	bge	zero,r3,4012f90 <___vfprintf_internal_r+0x20e0>
 4012e5c:	2000441e 	bne	r4,zero,4012f70 <___vfprintf_internal_r+0x20c0>
 4012e60:	9480004c 	andi	r18,r18,1
 4012e64:	9000421e 	bne	r18,zero,4012f70 <___vfprintf_internal_r+0x20c0>
 4012e68:	1805883a 	mov	r2,r3
 4012e6c:	18007016 	blt	r3,zero,4013030 <___vfprintf_internal_r+0x2180>
 4012e70:	d8c03217 	ldw	r3,200(sp)
 4012e74:	d8c02e15 	stw	r3,184(sp)
 4012e78:	003e0206 	br	4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012e7c:	df0022c4 	addi	fp,sp,139
 4012e80:	dc002915 	stw	r16,164(sp)
 4012e84:	4027883a 	mov	r19,r8
 4012e88:	e021883a 	mov	r16,fp
 4012e8c:	b009883a 	mov	r4,r22
 4012e90:	01400284 	movi	r5,10
 4012e94:	400a0a00 	call	400a0a0 <__modsi3>
 4012e98:	10800c04 	addi	r2,r2,48
 4012e9c:	843fffc4 	addi	r16,r16,-1
 4012ea0:	b009883a 	mov	r4,r22
 4012ea4:	01400284 	movi	r5,10
 4012ea8:	80800005 	stb	r2,0(r16)
 4012eac:	400a01c0 	call	400a01c <__divsi3>
 4012eb0:	102d883a 	mov	r22,r2
 4012eb4:	00800244 	movi	r2,9
 4012eb8:	15bff416 	blt	r2,r22,4012e8c <__alt_mem_epcs_flash_controller_0+0xfb011e8c>
 4012ebc:	9811883a 	mov	r8,r19
 4012ec0:	b0800c04 	addi	r2,r22,48
 4012ec4:	8027883a 	mov	r19,r16
 4012ec8:	997fffc4 	addi	r5,r19,-1
 4012ecc:	98bfffc5 	stb	r2,-1(r19)
 4012ed0:	dc002917 	ldw	r16,164(sp)
 4012ed4:	2f006a2e 	bgeu	r5,fp,4013080 <___vfprintf_internal_r+0x21d0>
 4012ed8:	d9c02384 	addi	r7,sp,142
 4012edc:	3ccfc83a 	sub	r7,r7,r19
 4012ee0:	d9002344 	addi	r4,sp,141
 4012ee4:	e1cf883a 	add	r7,fp,r7
 4012ee8:	00000106 	br	4012ef0 <___vfprintf_internal_r+0x2040>
 4012eec:	28800003 	ldbu	r2,0(r5)
 4012ef0:	20800005 	stb	r2,0(r4)
 4012ef4:	21000044 	addi	r4,r4,1
 4012ef8:	29400044 	addi	r5,r5,1
 4012efc:	393ffb1e 	bne	r7,r4,4012eec <__alt_mem_epcs_flash_controller_0+0xfb011eec>
 4012f00:	d8802304 	addi	r2,sp,140
 4012f04:	14c5c83a 	sub	r2,r2,r19
 4012f08:	d8c02344 	addi	r3,sp,141
 4012f0c:	1885883a 	add	r2,r3,r2
 4012f10:	003f7006 	br	4012cd4 <__alt_mem_epcs_flash_controller_0+0xfb011cd4>
 4012f14:	0005883a 	mov	r2,zero
 4012f18:	003f0f06 	br	4012b58 <__alt_mem_epcs_flash_controller_0+0xfb011b58>
 4012f1c:	d8c03217 	ldw	r3,200(sp)
 4012f20:	18c00044 	addi	r3,r3,1
 4012f24:	d8c02e15 	stw	r3,184(sp)
 4012f28:	1805883a 	mov	r2,r3
 4012f2c:	183fb20e 	bge	r3,zero,4012df8 <__alt_mem_epcs_flash_controller_0+0xfb011df8>
 4012f30:	0005883a 	mov	r2,zero
 4012f34:	003fb006 	br	4012df8 <__alt_mem_epcs_flash_controller_0+0xfb011df8>
 4012f38:	d9003617 	ldw	r4,216(sp)
 4012f3c:	000d883a 	mov	r6,zero
 4012f40:	000f883a 	mov	r7,zero
 4012f44:	980b883a 	mov	r5,r19
 4012f48:	d8c03c15 	stw	r3,240(sp)
 4012f4c:	da003d15 	stw	r8,244(sp)
 4012f50:	401b6a40 	call	401b6a4 <__eqdf2>
 4012f54:	d8c03c17 	ldw	r3,240(sp)
 4012f58:	da003d17 	ldw	r8,244(sp)
 4012f5c:	103f9826 	beq	r2,zero,4012dc0 <__alt_mem_epcs_flash_controller_0+0xfb011dc0>
 4012f60:	00800044 	movi	r2,1
 4012f64:	10c7c83a 	sub	r3,r2,r3
 4012f68:	d8c02615 	stw	r3,152(sp)
 4012f6c:	003f9506 	br	4012dc4 <__alt_mem_epcs_flash_controller_0+0xfb011dc4>
 4012f70:	d9002917 	ldw	r4,164(sp)
 4012f74:	d8c03217 	ldw	r3,200(sp)
 4012f78:	20800044 	addi	r2,r4,1
 4012f7c:	1885883a 	add	r2,r3,r2
 4012f80:	d8802e15 	stw	r2,184(sp)
 4012f84:	103dbf0e 	bge	r2,zero,4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012f88:	0005883a 	mov	r2,zero
 4012f8c:	003dbd06 	br	4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012f90:	2000211e 	bne	r4,zero,4013018 <___vfprintf_internal_r+0x2168>
 4012f94:	9480004c 	andi	r18,r18,1
 4012f98:	90001f1e 	bne	r18,zero,4013018 <___vfprintf_internal_r+0x2168>
 4012f9c:	00800044 	movi	r2,1
 4012fa0:	d8802e15 	stw	r2,184(sp)
 4012fa4:	003db706 	br	4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 4012fa8:	00800b44 	movi	r2,45
 4012fac:	05adc83a 	sub	r22,zero,r22
 4012fb0:	d8802305 	stb	r2,140(sp)
 4012fb4:	003f3f06 	br	4012cb4 <__alt_mem_epcs_flash_controller_0+0xfb011cb4>
 4012fb8:	0005883a 	mov	r2,zero
 4012fbc:	003f5206 	br	4012d08 <__alt_mem_epcs_flash_controller_0+0xfb011d08>
 4012fc0:	90a4703a 	and	r18,r18,r2
 4012fc4:	903f4e26 	beq	r18,zero,4012d00 <__alt_mem_epcs_flash_controller_0+0xfb011d00>
 4012fc8:	003f4a06 	br	4012cf4 <__alt_mem_epcs_flash_controller_0+0xfb011cf4>
 4012fcc:	00800084 	movi	r2,2
 4012fd0:	10c5c83a 	sub	r2,r2,r3
 4012fd4:	003f8406 	br	4012de8 <__alt_mem_epcs_flash_controller_0+0xfb011de8>
 4012fd8:	d8802d17 	ldw	r2,180(sp)
 4012fdc:	d9002d17 	ldw	r4,180(sp)
 4012fe0:	ac400043 	ldbu	r17,1(r21)
 4012fe4:	10800017 	ldw	r2,0(r2)
 4012fe8:	582b883a 	mov	r21,r11
 4012fec:	d8802915 	stw	r2,164(sp)
 4012ff0:	20800104 	addi	r2,r4,4
 4012ff4:	d9002917 	ldw	r4,164(sp)
 4012ff8:	d8802d15 	stw	r2,180(sp)
 4012ffc:	203e7a0e 	bge	r4,zero,40129e8 <__alt_mem_epcs_flash_controller_0+0xfb0119e8>
 4013000:	8c403fcc 	andi	r17,r17,255
 4013004:	00bfffc4 	movi	r2,-1
 4013008:	8c40201c 	xori	r17,r17,128
 401300c:	d8802915 	stw	r2,164(sp)
 4013010:	8c7fe004 	addi	r17,r17,-128
 4013014:	00380706 	br	4011034 <__alt_mem_epcs_flash_controller_0+0xfb010034>
 4013018:	d8c02917 	ldw	r3,164(sp)
 401301c:	18c00084 	addi	r3,r3,2
 4013020:	d8c02e15 	stw	r3,184(sp)
 4013024:	1805883a 	mov	r2,r3
 4013028:	183d960e 	bge	r3,zero,4012684 <__alt_mem_epcs_flash_controller_0+0xfb011684>
 401302c:	003fd606 	br	4012f88 <__alt_mem_epcs_flash_controller_0+0xfb011f88>
 4013030:	0005883a 	mov	r2,zero
 4013034:	003f8e06 	br	4012e70 <__alt_mem_epcs_flash_controller_0+0xfb011e70>
 4013038:	9080004c 	andi	r2,r18,1
 401303c:	103f811e 	bne	r2,zero,4012e44 <__alt_mem_epcs_flash_controller_0+0xfb011e44>
 4013040:	d8802117 	ldw	r2,132(sp)
 4013044:	1405c83a 	sub	r2,r2,r16
 4013048:	d8803315 	stw	r2,204(sp)
 401304c:	b47ef326 	beq	r22,r17,4012c1c <__alt_mem_epcs_flash_controller_0+0xfb011c1c>
 4013050:	dd802617 	ldw	r22,152(sp)
 4013054:	003f1106 	br	4012c9c <__alt_mem_epcs_flash_controller_0+0xfb011c9c>
 4013058:	d9c02785 	stb	r7,158(sp)
 401305c:	00390406 	br	4011470 <__alt_mem_epcs_flash_controller_0+0xfb010470>
 4013060:	d9c02785 	stb	r7,158(sp)
 4013064:	0038d306 	br	40113b4 <__alt_mem_epcs_flash_controller_0+0xfb0103b4>
 4013068:	d9c02785 	stb	r7,158(sp)
 401306c:	003a6106 	br	40119f4 <__alt_mem_epcs_flash_controller_0+0xfb0109f4>
 4013070:	d9c02785 	stb	r7,158(sp)
 4013074:	003af806 	br	4011c58 <__alt_mem_epcs_flash_controller_0+0xfb010c58>
 4013078:	0005883a 	mov	r2,zero
 401307c:	003d7e06 	br	4012678 <__alt_mem_epcs_flash_controller_0+0xfb011678>
 4013080:	d8802344 	addi	r2,sp,141
 4013084:	003f1306 	br	4012cd4 <__alt_mem_epcs_flash_controller_0+0xfb011cd4>
 4013088:	d9c02785 	stb	r7,158(sp)
 401308c:	00392306 	br	401151c <__alt_mem_epcs_flash_controller_0+0xfb01051c>
 4013090:	d9c02785 	stb	r7,158(sp)
 4013094:	003aa906 	br	4011b3c <__alt_mem_epcs_flash_controller_0+0xfb010b3c>
 4013098:	d9c02785 	stb	r7,158(sp)
 401309c:	003a3d06 	br	4011994 <__alt_mem_epcs_flash_controller_0+0xfb010994>
 40130a0:	d9c02785 	stb	r7,158(sp)
 40130a4:	003aca06 	br	4011bd0 <__alt_mem_epcs_flash_controller_0+0xfb010bd0>

040130a8 <__vfprintf_internal>:
 40130a8:	008103f4 	movhi	r2,1039
 40130ac:	108bf604 	addi	r2,r2,12248
 40130b0:	300f883a 	mov	r7,r6
 40130b4:	280d883a 	mov	r6,r5
 40130b8:	200b883a 	mov	r5,r4
 40130bc:	11000017 	ldw	r4,0(r2)
 40130c0:	4010eb01 	jmpi	4010eb0 <___vfprintf_internal_r>

040130c4 <__sbprintf>:
 40130c4:	2880030b 	ldhu	r2,12(r5)
 40130c8:	2ac01917 	ldw	r11,100(r5)
 40130cc:	2a80038b 	ldhu	r10,14(r5)
 40130d0:	2a400717 	ldw	r9,28(r5)
 40130d4:	2a000917 	ldw	r8,36(r5)
 40130d8:	defee204 	addi	sp,sp,-1144
 40130dc:	00c10004 	movi	r3,1024
 40130e0:	dc011a15 	stw	r16,1128(sp)
 40130e4:	10bfff4c 	andi	r2,r2,65533
 40130e8:	2821883a 	mov	r16,r5
 40130ec:	d8cb883a 	add	r5,sp,r3
 40130f0:	dc811c15 	stw	r18,1136(sp)
 40130f4:	dc411b15 	stw	r17,1132(sp)
 40130f8:	dfc11d15 	stw	ra,1140(sp)
 40130fc:	2025883a 	mov	r18,r4
 4013100:	d881030d 	sth	r2,1036(sp)
 4013104:	dac11915 	stw	r11,1124(sp)
 4013108:	da81038d 	sth	r10,1038(sp)
 401310c:	da410715 	stw	r9,1052(sp)
 4013110:	da010915 	stw	r8,1060(sp)
 4013114:	dec10015 	stw	sp,1024(sp)
 4013118:	dec10415 	stw	sp,1040(sp)
 401311c:	d8c10215 	stw	r3,1032(sp)
 4013120:	d8c10515 	stw	r3,1044(sp)
 4013124:	d8010615 	stw	zero,1048(sp)
 4013128:	4010eb00 	call	4010eb0 <___vfprintf_internal_r>
 401312c:	1023883a 	mov	r17,r2
 4013130:	10000416 	blt	r2,zero,4013144 <__sbprintf+0x80>
 4013134:	d9410004 	addi	r5,sp,1024
 4013138:	9009883a 	mov	r4,r18
 401313c:	4014d780 	call	4014d78 <_fflush_r>
 4013140:	10000d1e 	bne	r2,zero,4013178 <__sbprintf+0xb4>
 4013144:	d881030b 	ldhu	r2,1036(sp)
 4013148:	1080100c 	andi	r2,r2,64
 401314c:	10000326 	beq	r2,zero,401315c <__sbprintf+0x98>
 4013150:	8080030b 	ldhu	r2,12(r16)
 4013154:	10801014 	ori	r2,r2,64
 4013158:	8080030d 	sth	r2,12(r16)
 401315c:	8805883a 	mov	r2,r17
 4013160:	dfc11d17 	ldw	ra,1140(sp)
 4013164:	dc811c17 	ldw	r18,1136(sp)
 4013168:	dc411b17 	ldw	r17,1132(sp)
 401316c:	dc011a17 	ldw	r16,1128(sp)
 4013170:	dec11e04 	addi	sp,sp,1144
 4013174:	f800283a 	ret
 4013178:	047fffc4 	movi	r17,-1
 401317c:	003ff106 	br	4013144 <__alt_mem_epcs_flash_controller_0+0xfb012144>

04013180 <__swsetup_r>:
 4013180:	008103f4 	movhi	r2,1039
 4013184:	defffd04 	addi	sp,sp,-12
 4013188:	108bf604 	addi	r2,r2,12248
 401318c:	dc400115 	stw	r17,4(sp)
 4013190:	2023883a 	mov	r17,r4
 4013194:	11000017 	ldw	r4,0(r2)
 4013198:	dc000015 	stw	r16,0(sp)
 401319c:	dfc00215 	stw	ra,8(sp)
 40131a0:	2821883a 	mov	r16,r5
 40131a4:	20000226 	beq	r4,zero,40131b0 <__swsetup_r+0x30>
 40131a8:	20800e17 	ldw	r2,56(r4)
 40131ac:	10003126 	beq	r2,zero,4013274 <__swsetup_r+0xf4>
 40131b0:	8080030b 	ldhu	r2,12(r16)
 40131b4:	10c0020c 	andi	r3,r2,8
 40131b8:	1009883a 	mov	r4,r2
 40131bc:	18000f26 	beq	r3,zero,40131fc <__swsetup_r+0x7c>
 40131c0:	80c00417 	ldw	r3,16(r16)
 40131c4:	18001526 	beq	r3,zero,401321c <__swsetup_r+0x9c>
 40131c8:	1100004c 	andi	r4,r2,1
 40131cc:	20001c1e 	bne	r4,zero,4013240 <__swsetup_r+0xc0>
 40131d0:	1080008c 	andi	r2,r2,2
 40131d4:	1000291e 	bne	r2,zero,401327c <__swsetup_r+0xfc>
 40131d8:	80800517 	ldw	r2,20(r16)
 40131dc:	80800215 	stw	r2,8(r16)
 40131e0:	18001c26 	beq	r3,zero,4013254 <__swsetup_r+0xd4>
 40131e4:	0005883a 	mov	r2,zero
 40131e8:	dfc00217 	ldw	ra,8(sp)
 40131ec:	dc400117 	ldw	r17,4(sp)
 40131f0:	dc000017 	ldw	r16,0(sp)
 40131f4:	dec00304 	addi	sp,sp,12
 40131f8:	f800283a 	ret
 40131fc:	2080040c 	andi	r2,r4,16
 4013200:	10002e26 	beq	r2,zero,40132bc <__swsetup_r+0x13c>
 4013204:	2080010c 	andi	r2,r4,4
 4013208:	10001e1e 	bne	r2,zero,4013284 <__swsetup_r+0x104>
 401320c:	80c00417 	ldw	r3,16(r16)
 4013210:	20800214 	ori	r2,r4,8
 4013214:	8080030d 	sth	r2,12(r16)
 4013218:	183feb1e 	bne	r3,zero,40131c8 <__alt_mem_epcs_flash_controller_0+0xfb0121c8>
 401321c:	1100a00c 	andi	r4,r2,640
 4013220:	01408004 	movi	r5,512
 4013224:	217fe826 	beq	r4,r5,40131c8 <__alt_mem_epcs_flash_controller_0+0xfb0121c8>
 4013228:	800b883a 	mov	r5,r16
 401322c:	8809883a 	mov	r4,r17
 4013230:	4015cf80 	call	4015cf8 <__smakebuf_r>
 4013234:	8080030b 	ldhu	r2,12(r16)
 4013238:	80c00417 	ldw	r3,16(r16)
 401323c:	003fe206 	br	40131c8 <__alt_mem_epcs_flash_controller_0+0xfb0121c8>
 4013240:	80800517 	ldw	r2,20(r16)
 4013244:	80000215 	stw	zero,8(r16)
 4013248:	0085c83a 	sub	r2,zero,r2
 401324c:	80800615 	stw	r2,24(r16)
 4013250:	183fe41e 	bne	r3,zero,40131e4 <__alt_mem_epcs_flash_controller_0+0xfb0121e4>
 4013254:	80c0030b 	ldhu	r3,12(r16)
 4013258:	0005883a 	mov	r2,zero
 401325c:	1900200c 	andi	r4,r3,128
 4013260:	203fe126 	beq	r4,zero,40131e8 <__alt_mem_epcs_flash_controller_0+0xfb0121e8>
 4013264:	18c01014 	ori	r3,r3,64
 4013268:	80c0030d 	sth	r3,12(r16)
 401326c:	00bfffc4 	movi	r2,-1
 4013270:	003fdd06 	br	40131e8 <__alt_mem_epcs_flash_controller_0+0xfb0121e8>
 4013274:	40151540 	call	4015154 <__sinit>
 4013278:	003fcd06 	br	40131b0 <__alt_mem_epcs_flash_controller_0+0xfb0121b0>
 401327c:	0005883a 	mov	r2,zero
 4013280:	003fd606 	br	40131dc <__alt_mem_epcs_flash_controller_0+0xfb0121dc>
 4013284:	81400c17 	ldw	r5,48(r16)
 4013288:	28000626 	beq	r5,zero,40132a4 <__swsetup_r+0x124>
 401328c:	80801004 	addi	r2,r16,64
 4013290:	28800326 	beq	r5,r2,40132a0 <__swsetup_r+0x120>
 4013294:	8809883a 	mov	r4,r17
 4013298:	40152c80 	call	40152c8 <_free_r>
 401329c:	8100030b 	ldhu	r4,12(r16)
 40132a0:	80000c15 	stw	zero,48(r16)
 40132a4:	80c00417 	ldw	r3,16(r16)
 40132a8:	00bff6c4 	movi	r2,-37
 40132ac:	1108703a 	and	r4,r2,r4
 40132b0:	80000115 	stw	zero,4(r16)
 40132b4:	80c00015 	stw	r3,0(r16)
 40132b8:	003fd506 	br	4013210 <__alt_mem_epcs_flash_controller_0+0xfb012210>
 40132bc:	00800244 	movi	r2,9
 40132c0:	88800015 	stw	r2,0(r17)
 40132c4:	20801014 	ori	r2,r4,64
 40132c8:	8080030d 	sth	r2,12(r16)
 40132cc:	00bfffc4 	movi	r2,-1
 40132d0:	003fc506 	br	40131e8 <__alt_mem_epcs_flash_controller_0+0xfb0121e8>

040132d4 <quorem>:
 40132d4:	defff704 	addi	sp,sp,-36
 40132d8:	dc800215 	stw	r18,8(sp)
 40132dc:	20800417 	ldw	r2,16(r4)
 40132e0:	2c800417 	ldw	r18,16(r5)
 40132e4:	dfc00815 	stw	ra,32(sp)
 40132e8:	ddc00715 	stw	r23,28(sp)
 40132ec:	dd800615 	stw	r22,24(sp)
 40132f0:	dd400515 	stw	r21,20(sp)
 40132f4:	dd000415 	stw	r20,16(sp)
 40132f8:	dcc00315 	stw	r19,12(sp)
 40132fc:	dc400115 	stw	r17,4(sp)
 4013300:	dc000015 	stw	r16,0(sp)
 4013304:	14807116 	blt	r2,r18,40134cc <quorem+0x1f8>
 4013308:	94bfffc4 	addi	r18,r18,-1
 401330c:	94ad883a 	add	r22,r18,r18
 4013310:	b5ad883a 	add	r22,r22,r22
 4013314:	2c400504 	addi	r17,r5,20
 4013318:	8da9883a 	add	r20,r17,r22
 401331c:	25400504 	addi	r21,r4,20
 4013320:	282f883a 	mov	r23,r5
 4013324:	adad883a 	add	r22,r21,r22
 4013328:	a1400017 	ldw	r5,0(r20)
 401332c:	2021883a 	mov	r16,r4
 4013330:	b1000017 	ldw	r4,0(r22)
 4013334:	29400044 	addi	r5,r5,1
 4013338:	400a1140 	call	400a114 <__udivsi3>
 401333c:	1027883a 	mov	r19,r2
 4013340:	10002c26 	beq	r2,zero,40133f4 <quorem+0x120>
 4013344:	a813883a 	mov	r9,r21
 4013348:	880b883a 	mov	r5,r17
 401334c:	0009883a 	mov	r4,zero
 4013350:	000d883a 	mov	r6,zero
 4013354:	2a000017 	ldw	r8,0(r5)
 4013358:	49c00017 	ldw	r7,0(r9)
 401335c:	29400104 	addi	r5,r5,4
 4013360:	40bfffcc 	andi	r2,r8,65535
 4013364:	14c5383a 	mul	r2,r2,r19
 4013368:	4010d43a 	srli	r8,r8,16
 401336c:	38ffffcc 	andi	r3,r7,65535
 4013370:	1105883a 	add	r2,r2,r4
 4013374:	1008d43a 	srli	r4,r2,16
 4013378:	44d1383a 	mul	r8,r8,r19
 401337c:	198d883a 	add	r6,r3,r6
 4013380:	10ffffcc 	andi	r3,r2,65535
 4013384:	30c7c83a 	sub	r3,r6,r3
 4013388:	380ed43a 	srli	r7,r7,16
 401338c:	4105883a 	add	r2,r8,r4
 4013390:	180dd43a 	srai	r6,r3,16
 4013394:	113fffcc 	andi	r4,r2,65535
 4013398:	390fc83a 	sub	r7,r7,r4
 401339c:	398d883a 	add	r6,r7,r6
 40133a0:	300e943a 	slli	r7,r6,16
 40133a4:	18ffffcc 	andi	r3,r3,65535
 40133a8:	1008d43a 	srli	r4,r2,16
 40133ac:	38ceb03a 	or	r7,r7,r3
 40133b0:	49c00015 	stw	r7,0(r9)
 40133b4:	300dd43a 	srai	r6,r6,16
 40133b8:	4a400104 	addi	r9,r9,4
 40133bc:	a17fe52e 	bgeu	r20,r5,4013354 <__alt_mem_epcs_flash_controller_0+0xfb012354>
 40133c0:	b0800017 	ldw	r2,0(r22)
 40133c4:	10000b1e 	bne	r2,zero,40133f4 <quorem+0x120>
 40133c8:	b0bfff04 	addi	r2,r22,-4
 40133cc:	a880082e 	bgeu	r21,r2,40133f0 <quorem+0x11c>
 40133d0:	b0ffff17 	ldw	r3,-4(r22)
 40133d4:	18000326 	beq	r3,zero,40133e4 <quorem+0x110>
 40133d8:	00000506 	br	40133f0 <quorem+0x11c>
 40133dc:	10c00017 	ldw	r3,0(r2)
 40133e0:	1800031e 	bne	r3,zero,40133f0 <quorem+0x11c>
 40133e4:	10bfff04 	addi	r2,r2,-4
 40133e8:	94bfffc4 	addi	r18,r18,-1
 40133ec:	a8bffb36 	bltu	r21,r2,40133dc <__alt_mem_epcs_flash_controller_0+0xfb0123dc>
 40133f0:	84800415 	stw	r18,16(r16)
 40133f4:	b80b883a 	mov	r5,r23
 40133f8:	8009883a 	mov	r4,r16
 40133fc:	40169bc0 	call	40169bc <__mcmp>
 4013400:	10002616 	blt	r2,zero,401349c <quorem+0x1c8>
 4013404:	9cc00044 	addi	r19,r19,1
 4013408:	a805883a 	mov	r2,r21
 401340c:	000b883a 	mov	r5,zero
 4013410:	11000017 	ldw	r4,0(r2)
 4013414:	89800017 	ldw	r6,0(r17)
 4013418:	10800104 	addi	r2,r2,4
 401341c:	20ffffcc 	andi	r3,r4,65535
 4013420:	194b883a 	add	r5,r3,r5
 4013424:	30ffffcc 	andi	r3,r6,65535
 4013428:	28c7c83a 	sub	r3,r5,r3
 401342c:	300cd43a 	srli	r6,r6,16
 4013430:	2008d43a 	srli	r4,r4,16
 4013434:	180bd43a 	srai	r5,r3,16
 4013438:	18ffffcc 	andi	r3,r3,65535
 401343c:	2189c83a 	sub	r4,r4,r6
 4013440:	2149883a 	add	r4,r4,r5
 4013444:	200c943a 	slli	r6,r4,16
 4013448:	8c400104 	addi	r17,r17,4
 401344c:	200bd43a 	srai	r5,r4,16
 4013450:	30c6b03a 	or	r3,r6,r3
 4013454:	10ffff15 	stw	r3,-4(r2)
 4013458:	a47fed2e 	bgeu	r20,r17,4013410 <__alt_mem_epcs_flash_controller_0+0xfb012410>
 401345c:	9485883a 	add	r2,r18,r18
 4013460:	1085883a 	add	r2,r2,r2
 4013464:	a887883a 	add	r3,r21,r2
 4013468:	18800017 	ldw	r2,0(r3)
 401346c:	10000b1e 	bne	r2,zero,401349c <quorem+0x1c8>
 4013470:	18bfff04 	addi	r2,r3,-4
 4013474:	a880082e 	bgeu	r21,r2,4013498 <quorem+0x1c4>
 4013478:	18ffff17 	ldw	r3,-4(r3)
 401347c:	18000326 	beq	r3,zero,401348c <quorem+0x1b8>
 4013480:	00000506 	br	4013498 <quorem+0x1c4>
 4013484:	10c00017 	ldw	r3,0(r2)
 4013488:	1800031e 	bne	r3,zero,4013498 <quorem+0x1c4>
 401348c:	10bfff04 	addi	r2,r2,-4
 4013490:	94bfffc4 	addi	r18,r18,-1
 4013494:	a8bffb36 	bltu	r21,r2,4013484 <__alt_mem_epcs_flash_controller_0+0xfb012484>
 4013498:	84800415 	stw	r18,16(r16)
 401349c:	9805883a 	mov	r2,r19
 40134a0:	dfc00817 	ldw	ra,32(sp)
 40134a4:	ddc00717 	ldw	r23,28(sp)
 40134a8:	dd800617 	ldw	r22,24(sp)
 40134ac:	dd400517 	ldw	r21,20(sp)
 40134b0:	dd000417 	ldw	r20,16(sp)
 40134b4:	dcc00317 	ldw	r19,12(sp)
 40134b8:	dc800217 	ldw	r18,8(sp)
 40134bc:	dc400117 	ldw	r17,4(sp)
 40134c0:	dc000017 	ldw	r16,0(sp)
 40134c4:	dec00904 	addi	sp,sp,36
 40134c8:	f800283a 	ret
 40134cc:	0005883a 	mov	r2,zero
 40134d0:	003ff306 	br	40134a0 <__alt_mem_epcs_flash_controller_0+0xfb0124a0>

040134d4 <_dtoa_r>:
 40134d4:	20801017 	ldw	r2,64(r4)
 40134d8:	deffde04 	addi	sp,sp,-136
 40134dc:	df002015 	stw	fp,128(sp)
 40134e0:	dcc01b15 	stw	r19,108(sp)
 40134e4:	dc801a15 	stw	r18,104(sp)
 40134e8:	dc401915 	stw	r17,100(sp)
 40134ec:	dc001815 	stw	r16,96(sp)
 40134f0:	dfc02115 	stw	ra,132(sp)
 40134f4:	ddc01f15 	stw	r23,124(sp)
 40134f8:	dd801e15 	stw	r22,120(sp)
 40134fc:	dd401d15 	stw	r21,116(sp)
 4013500:	dd001c15 	stw	r20,112(sp)
 4013504:	d9c00315 	stw	r7,12(sp)
 4013508:	2039883a 	mov	fp,r4
 401350c:	3023883a 	mov	r17,r6
 4013510:	2825883a 	mov	r18,r5
 4013514:	dc002417 	ldw	r16,144(sp)
 4013518:	3027883a 	mov	r19,r6
 401351c:	10000826 	beq	r2,zero,4013540 <_dtoa_r+0x6c>
 4013520:	21801117 	ldw	r6,68(r4)
 4013524:	00c00044 	movi	r3,1
 4013528:	100b883a 	mov	r5,r2
 401352c:	1986983a 	sll	r3,r3,r6
 4013530:	11800115 	stw	r6,4(r2)
 4013534:	10c00215 	stw	r3,8(r2)
 4013538:	401619c0 	call	401619c <_Bfree>
 401353c:	e0001015 	stw	zero,64(fp)
 4013540:	88002e16 	blt	r17,zero,40135fc <_dtoa_r+0x128>
 4013544:	80000015 	stw	zero,0(r16)
 4013548:	889ffc2c 	andhi	r2,r17,32752
 401354c:	00dffc34 	movhi	r3,32752
 4013550:	10c01c26 	beq	r2,r3,40135c4 <_dtoa_r+0xf0>
 4013554:	000d883a 	mov	r6,zero
 4013558:	000f883a 	mov	r7,zero
 401355c:	9009883a 	mov	r4,r18
 4013560:	980b883a 	mov	r5,r19
 4013564:	401b6a40 	call	401b6a4 <__eqdf2>
 4013568:	10002b1e 	bne	r2,zero,4013618 <_dtoa_r+0x144>
 401356c:	d9c02317 	ldw	r7,140(sp)
 4013570:	00800044 	movi	r2,1
 4013574:	38800015 	stw	r2,0(r7)
 4013578:	d8802517 	ldw	r2,148(sp)
 401357c:	10019e26 	beq	r2,zero,4013bf8 <_dtoa_r+0x724>
 4013580:	d8c02517 	ldw	r3,148(sp)
 4013584:	00810234 	movhi	r2,1032
 4013588:	10953644 	addi	r2,r2,21721
 401358c:	18800015 	stw	r2,0(r3)
 4013590:	10bfffc4 	addi	r2,r2,-1
 4013594:	dfc02117 	ldw	ra,132(sp)
 4013598:	df002017 	ldw	fp,128(sp)
 401359c:	ddc01f17 	ldw	r23,124(sp)
 40135a0:	dd801e17 	ldw	r22,120(sp)
 40135a4:	dd401d17 	ldw	r21,116(sp)
 40135a8:	dd001c17 	ldw	r20,112(sp)
 40135ac:	dcc01b17 	ldw	r19,108(sp)
 40135b0:	dc801a17 	ldw	r18,104(sp)
 40135b4:	dc401917 	ldw	r17,100(sp)
 40135b8:	dc001817 	ldw	r16,96(sp)
 40135bc:	dec02204 	addi	sp,sp,136
 40135c0:	f800283a 	ret
 40135c4:	d8c02317 	ldw	r3,140(sp)
 40135c8:	0089c3c4 	movi	r2,9999
 40135cc:	18800015 	stw	r2,0(r3)
 40135d0:	90017726 	beq	r18,zero,4013bb0 <_dtoa_r+0x6dc>
 40135d4:	00810234 	movhi	r2,1032
 40135d8:	10954a04 	addi	r2,r2,21800
 40135dc:	d9002517 	ldw	r4,148(sp)
 40135e0:	203fec26 	beq	r4,zero,4013594 <__alt_mem_epcs_flash_controller_0+0xfb012594>
 40135e4:	10c000c7 	ldb	r3,3(r2)
 40135e8:	1801781e 	bne	r3,zero,4013bcc <_dtoa_r+0x6f8>
 40135ec:	10c000c4 	addi	r3,r2,3
 40135f0:	d9802517 	ldw	r6,148(sp)
 40135f4:	30c00015 	stw	r3,0(r6)
 40135f8:	003fe606 	br	4013594 <__alt_mem_epcs_flash_controller_0+0xfb012594>
 40135fc:	04e00034 	movhi	r19,32768
 4013600:	9cffffc4 	addi	r19,r19,-1
 4013604:	00800044 	movi	r2,1
 4013608:	8ce6703a 	and	r19,r17,r19
 401360c:	80800015 	stw	r2,0(r16)
 4013610:	9823883a 	mov	r17,r19
 4013614:	003fcc06 	br	4013548 <__alt_mem_epcs_flash_controller_0+0xfb012548>
 4013618:	d8800204 	addi	r2,sp,8
 401361c:	d8800015 	stw	r2,0(sp)
 4013620:	d9c00104 	addi	r7,sp,4
 4013624:	900b883a 	mov	r5,r18
 4013628:	980d883a 	mov	r6,r19
 401362c:	e009883a 	mov	r4,fp
 4013630:	8820d53a 	srli	r16,r17,20
 4013634:	4016d880 	call	4016d88 <__d2b>
 4013638:	d8800915 	stw	r2,36(sp)
 401363c:	8001651e 	bne	r16,zero,4013bd4 <_dtoa_r+0x700>
 4013640:	dd800217 	ldw	r22,8(sp)
 4013644:	dc000117 	ldw	r16,4(sp)
 4013648:	00800804 	movi	r2,32
 401364c:	b421883a 	add	r16,r22,r16
 4013650:	80c10c84 	addi	r3,r16,1074
 4013654:	10c2d10e 	bge	r2,r3,401419c <_dtoa_r+0xcc8>
 4013658:	00801004 	movi	r2,64
 401365c:	81010484 	addi	r4,r16,1042
 4013660:	10c7c83a 	sub	r3,r2,r3
 4013664:	9108d83a 	srl	r4,r18,r4
 4013668:	88e2983a 	sll	r17,r17,r3
 401366c:	2448b03a 	or	r4,r4,r17
 4013670:	401b72c0 	call	401b72c <__floatunsidf>
 4013674:	017f8434 	movhi	r5,65040
 4013678:	01800044 	movi	r6,1
 401367c:	1009883a 	mov	r4,r2
 4013680:	194b883a 	add	r5,r3,r5
 4013684:	843fffc4 	addi	r16,r16,-1
 4013688:	d9801115 	stw	r6,68(sp)
 401368c:	000d883a 	mov	r6,zero
 4013690:	01cffe34 	movhi	r7,16376
 4013694:	400d1300 	call	400d130 <__subdf3>
 4013698:	0198dbf4 	movhi	r6,25455
 401369c:	01cff4f4 	movhi	r7,16339
 40136a0:	3190d844 	addi	r6,r6,17249
 40136a4:	39e1e9c4 	addi	r7,r7,-30809
 40136a8:	1009883a 	mov	r4,r2
 40136ac:	180b883a 	mov	r5,r3
 40136b0:	400ca180 	call	400ca18 <__muldf3>
 40136b4:	01a2d874 	movhi	r6,35681
 40136b8:	01cff1f4 	movhi	r7,16327
 40136bc:	31b22cc4 	addi	r6,r6,-14157
 40136c0:	39e28a04 	addi	r7,r7,-30168
 40136c4:	180b883a 	mov	r5,r3
 40136c8:	1009883a 	mov	r4,r2
 40136cc:	400b6b40 	call	400b6b4 <__adddf3>
 40136d0:	8009883a 	mov	r4,r16
 40136d4:	1029883a 	mov	r20,r2
 40136d8:	1823883a 	mov	r17,r3
 40136dc:	400daac0 	call	400daac <__floatsidf>
 40136e0:	019427f4 	movhi	r6,20639
 40136e4:	01cff4f4 	movhi	r7,16339
 40136e8:	319e7ec4 	addi	r6,r6,31227
 40136ec:	39d104c4 	addi	r7,r7,17427
 40136f0:	1009883a 	mov	r4,r2
 40136f4:	180b883a 	mov	r5,r3
 40136f8:	400ca180 	call	400ca18 <__muldf3>
 40136fc:	100d883a 	mov	r6,r2
 4013700:	180f883a 	mov	r7,r3
 4013704:	a009883a 	mov	r4,r20
 4013708:	880b883a 	mov	r5,r17
 401370c:	400b6b40 	call	400b6b4 <__adddf3>
 4013710:	1009883a 	mov	r4,r2
 4013714:	180b883a 	mov	r5,r3
 4013718:	1029883a 	mov	r20,r2
 401371c:	1823883a 	mov	r17,r3
 4013720:	400da2c0 	call	400da2c <__fixdfsi>
 4013724:	000d883a 	mov	r6,zero
 4013728:	000f883a 	mov	r7,zero
 401372c:	a009883a 	mov	r4,r20
 4013730:	880b883a 	mov	r5,r17
 4013734:	d8800515 	stw	r2,20(sp)
 4013738:	400c9240 	call	400c924 <__ledf2>
 401373c:	10028716 	blt	r2,zero,401415c <_dtoa_r+0xc88>
 4013740:	d8c00517 	ldw	r3,20(sp)
 4013744:	00800584 	movi	r2,22
 4013748:	10c27536 	bltu	r2,r3,4014120 <_dtoa_r+0xc4c>
 401374c:	180490fa 	slli	r2,r3,3
 4013750:	00c10234 	movhi	r3,1032
 4013754:	18d56504 	addi	r3,r3,21908
 4013758:	1885883a 	add	r2,r3,r2
 401375c:	11000017 	ldw	r4,0(r2)
 4013760:	11400117 	ldw	r5,4(r2)
 4013764:	900d883a 	mov	r6,r18
 4013768:	980f883a 	mov	r7,r19
 401376c:	400c8480 	call	400c848 <__gedf2>
 4013770:	00828d0e 	bge	zero,r2,40141a8 <_dtoa_r+0xcd4>
 4013774:	d9000517 	ldw	r4,20(sp)
 4013778:	d8000e15 	stw	zero,56(sp)
 401377c:	213fffc4 	addi	r4,r4,-1
 4013780:	d9000515 	stw	r4,20(sp)
 4013784:	b42dc83a 	sub	r22,r22,r16
 4013788:	b5bfffc4 	addi	r22,r22,-1
 401378c:	b0026f16 	blt	r22,zero,401414c <_dtoa_r+0xc78>
 4013790:	d8000815 	stw	zero,32(sp)
 4013794:	d9c00517 	ldw	r7,20(sp)
 4013798:	38026416 	blt	r7,zero,401412c <_dtoa_r+0xc58>
 401379c:	b1ed883a 	add	r22,r22,r7
 40137a0:	d9c00d15 	stw	r7,52(sp)
 40137a4:	d8000a15 	stw	zero,40(sp)
 40137a8:	d9800317 	ldw	r6,12(sp)
 40137ac:	00800244 	movi	r2,9
 40137b0:	11811436 	bltu	r2,r6,4013c04 <_dtoa_r+0x730>
 40137b4:	00800144 	movi	r2,5
 40137b8:	1184e10e 	bge	r2,r6,4014b40 <_dtoa_r+0x166c>
 40137bc:	31bfff04 	addi	r6,r6,-4
 40137c0:	d9800315 	stw	r6,12(sp)
 40137c4:	0023883a 	mov	r17,zero
 40137c8:	d9800317 	ldw	r6,12(sp)
 40137cc:	008000c4 	movi	r2,3
 40137d0:	30836726 	beq	r6,r2,4014570 <_dtoa_r+0x109c>
 40137d4:	1183410e 	bge	r2,r6,40144dc <_dtoa_r+0x1008>
 40137d8:	d9c00317 	ldw	r7,12(sp)
 40137dc:	00800104 	movi	r2,4
 40137e0:	38827c26 	beq	r7,r2,40141d4 <_dtoa_r+0xd00>
 40137e4:	00800144 	movi	r2,5
 40137e8:	3884c41e 	bne	r7,r2,4014afc <_dtoa_r+0x1628>
 40137ec:	00800044 	movi	r2,1
 40137f0:	d8800b15 	stw	r2,44(sp)
 40137f4:	d8c00517 	ldw	r3,20(sp)
 40137f8:	d9002217 	ldw	r4,136(sp)
 40137fc:	1907883a 	add	r3,r3,r4
 4013800:	19800044 	addi	r6,r3,1
 4013804:	d8c00c15 	stw	r3,48(sp)
 4013808:	d9800615 	stw	r6,24(sp)
 401380c:	0183a40e 	bge	zero,r6,40146a0 <_dtoa_r+0x11cc>
 4013810:	d9800617 	ldw	r6,24(sp)
 4013814:	3021883a 	mov	r16,r6
 4013818:	e0001115 	stw	zero,68(fp)
 401381c:	008005c4 	movi	r2,23
 4013820:	1184c92e 	bgeu	r2,r6,4014b48 <_dtoa_r+0x1674>
 4013824:	00c00044 	movi	r3,1
 4013828:	00800104 	movi	r2,4
 401382c:	1085883a 	add	r2,r2,r2
 4013830:	11000504 	addi	r4,r2,20
 4013834:	180b883a 	mov	r5,r3
 4013838:	18c00044 	addi	r3,r3,1
 401383c:	313ffb2e 	bgeu	r6,r4,401382c <__alt_mem_epcs_flash_controller_0+0xfb01282c>
 4013840:	e1401115 	stw	r5,68(fp)
 4013844:	e009883a 	mov	r4,fp
 4013848:	40160f40 	call	40160f4 <_Balloc>
 401384c:	d8800715 	stw	r2,28(sp)
 4013850:	e0801015 	stw	r2,64(fp)
 4013854:	00800384 	movi	r2,14
 4013858:	1400f736 	bltu	r2,r16,4013c38 <_dtoa_r+0x764>
 401385c:	8800f626 	beq	r17,zero,4013c38 <_dtoa_r+0x764>
 4013860:	d9c00517 	ldw	r7,20(sp)
 4013864:	01c39a0e 	bge	zero,r7,40146d0 <_dtoa_r+0x11fc>
 4013868:	388003cc 	andi	r2,r7,15
 401386c:	100490fa 	slli	r2,r2,3
 4013870:	382bd13a 	srai	r21,r7,4
 4013874:	00c10234 	movhi	r3,1032
 4013878:	18d56504 	addi	r3,r3,21908
 401387c:	1885883a 	add	r2,r3,r2
 4013880:	a8c0040c 	andi	r3,r21,16
 4013884:	12400017 	ldw	r9,0(r2)
 4013888:	12000117 	ldw	r8,4(r2)
 401388c:	18037926 	beq	r3,zero,4014674 <_dtoa_r+0x11a0>
 4013890:	00810234 	movhi	r2,1032
 4013894:	10955b04 	addi	r2,r2,21868
 4013898:	11800817 	ldw	r6,32(r2)
 401389c:	11c00917 	ldw	r7,36(r2)
 40138a0:	9009883a 	mov	r4,r18
 40138a4:	980b883a 	mov	r5,r19
 40138a8:	da001715 	stw	r8,92(sp)
 40138ac:	da401615 	stw	r9,88(sp)
 40138b0:	400bf600 	call	400bf60 <__divdf3>
 40138b4:	da001717 	ldw	r8,92(sp)
 40138b8:	da401617 	ldw	r9,88(sp)
 40138bc:	ad4003cc 	andi	r21,r21,15
 40138c0:	040000c4 	movi	r16,3
 40138c4:	1023883a 	mov	r17,r2
 40138c8:	1829883a 	mov	r20,r3
 40138cc:	a8001126 	beq	r21,zero,4013914 <_dtoa_r+0x440>
 40138d0:	05c10234 	movhi	r23,1032
 40138d4:	bdd55b04 	addi	r23,r23,21868
 40138d8:	4805883a 	mov	r2,r9
 40138dc:	4007883a 	mov	r3,r8
 40138e0:	a980004c 	andi	r6,r21,1
 40138e4:	1009883a 	mov	r4,r2
 40138e8:	a82bd07a 	srai	r21,r21,1
 40138ec:	180b883a 	mov	r5,r3
 40138f0:	30000426 	beq	r6,zero,4013904 <_dtoa_r+0x430>
 40138f4:	b9800017 	ldw	r6,0(r23)
 40138f8:	b9c00117 	ldw	r7,4(r23)
 40138fc:	84000044 	addi	r16,r16,1
 4013900:	400ca180 	call	400ca18 <__muldf3>
 4013904:	bdc00204 	addi	r23,r23,8
 4013908:	a83ff51e 	bne	r21,zero,40138e0 <__alt_mem_epcs_flash_controller_0+0xfb0128e0>
 401390c:	1013883a 	mov	r9,r2
 4013910:	1811883a 	mov	r8,r3
 4013914:	480d883a 	mov	r6,r9
 4013918:	400f883a 	mov	r7,r8
 401391c:	8809883a 	mov	r4,r17
 4013920:	a00b883a 	mov	r5,r20
 4013924:	400bf600 	call	400bf60 <__divdf3>
 4013928:	d8800f15 	stw	r2,60(sp)
 401392c:	d8c01015 	stw	r3,64(sp)
 4013930:	d8c00e17 	ldw	r3,56(sp)
 4013934:	18000626 	beq	r3,zero,4013950 <_dtoa_r+0x47c>
 4013938:	d9000f17 	ldw	r4,60(sp)
 401393c:	d9401017 	ldw	r5,64(sp)
 4013940:	000d883a 	mov	r6,zero
 4013944:	01cffc34 	movhi	r7,16368
 4013948:	400c9240 	call	400c924 <__ledf2>
 401394c:	10040b16 	blt	r2,zero,401497c <_dtoa_r+0x14a8>
 4013950:	8009883a 	mov	r4,r16
 4013954:	400daac0 	call	400daac <__floatsidf>
 4013958:	d9800f17 	ldw	r6,60(sp)
 401395c:	d9c01017 	ldw	r7,64(sp)
 4013960:	1009883a 	mov	r4,r2
 4013964:	180b883a 	mov	r5,r3
 4013968:	400ca180 	call	400ca18 <__muldf3>
 401396c:	000d883a 	mov	r6,zero
 4013970:	01d00734 	movhi	r7,16412
 4013974:	1009883a 	mov	r4,r2
 4013978:	180b883a 	mov	r5,r3
 401397c:	400b6b40 	call	400b6b4 <__adddf3>
 4013980:	1021883a 	mov	r16,r2
 4013984:	d8800617 	ldw	r2,24(sp)
 4013988:	047f3034 	movhi	r17,64704
 401398c:	1c63883a 	add	r17,r3,r17
 4013990:	10031826 	beq	r2,zero,40145f4 <_dtoa_r+0x1120>
 4013994:	d8c00517 	ldw	r3,20(sp)
 4013998:	db000617 	ldw	r12,24(sp)
 401399c:	d8c01315 	stw	r3,76(sp)
 40139a0:	d9000b17 	ldw	r4,44(sp)
 40139a4:	20038f26 	beq	r4,zero,40147e4 <_dtoa_r+0x1310>
 40139a8:	60bfffc4 	addi	r2,r12,-1
 40139ac:	100490fa 	slli	r2,r2,3
 40139b0:	00c10234 	movhi	r3,1032
 40139b4:	18d56504 	addi	r3,r3,21908
 40139b8:	1885883a 	add	r2,r3,r2
 40139bc:	11800017 	ldw	r6,0(r2)
 40139c0:	11c00117 	ldw	r7,4(r2)
 40139c4:	d8800717 	ldw	r2,28(sp)
 40139c8:	0009883a 	mov	r4,zero
 40139cc:	014ff834 	movhi	r5,16352
 40139d0:	db001615 	stw	r12,88(sp)
 40139d4:	15c00044 	addi	r23,r2,1
 40139d8:	400bf600 	call	400bf60 <__divdf3>
 40139dc:	800d883a 	mov	r6,r16
 40139e0:	880f883a 	mov	r7,r17
 40139e4:	1009883a 	mov	r4,r2
 40139e8:	180b883a 	mov	r5,r3
 40139ec:	400d1300 	call	400d130 <__subdf3>
 40139f0:	d9401017 	ldw	r5,64(sp)
 40139f4:	d9000f17 	ldw	r4,60(sp)
 40139f8:	102b883a 	mov	r21,r2
 40139fc:	d8c01215 	stw	r3,72(sp)
 4013a00:	400da2c0 	call	400da2c <__fixdfsi>
 4013a04:	1009883a 	mov	r4,r2
 4013a08:	1029883a 	mov	r20,r2
 4013a0c:	400daac0 	call	400daac <__floatsidf>
 4013a10:	d9000f17 	ldw	r4,60(sp)
 4013a14:	d9401017 	ldw	r5,64(sp)
 4013a18:	100d883a 	mov	r6,r2
 4013a1c:	180f883a 	mov	r7,r3
 4013a20:	400d1300 	call	400d130 <__subdf3>
 4013a24:	1823883a 	mov	r17,r3
 4013a28:	d8c00717 	ldw	r3,28(sp)
 4013a2c:	d9401217 	ldw	r5,72(sp)
 4013a30:	a2000c04 	addi	r8,r20,48
 4013a34:	1021883a 	mov	r16,r2
 4013a38:	1a000005 	stb	r8,0(r3)
 4013a3c:	800d883a 	mov	r6,r16
 4013a40:	880f883a 	mov	r7,r17
 4013a44:	a809883a 	mov	r4,r21
 4013a48:	4029883a 	mov	r20,r8
 4013a4c:	400c8480 	call	400c848 <__gedf2>
 4013a50:	00841d16 	blt	zero,r2,4014ac8 <_dtoa_r+0x15f4>
 4013a54:	800d883a 	mov	r6,r16
 4013a58:	880f883a 	mov	r7,r17
 4013a5c:	0009883a 	mov	r4,zero
 4013a60:	014ffc34 	movhi	r5,16368
 4013a64:	400d1300 	call	400d130 <__subdf3>
 4013a68:	d9401217 	ldw	r5,72(sp)
 4013a6c:	100d883a 	mov	r6,r2
 4013a70:	180f883a 	mov	r7,r3
 4013a74:	a809883a 	mov	r4,r21
 4013a78:	400c8480 	call	400c848 <__gedf2>
 4013a7c:	db001617 	ldw	r12,88(sp)
 4013a80:	00840e16 	blt	zero,r2,4014abc <_dtoa_r+0x15e8>
 4013a84:	00800044 	movi	r2,1
 4013a88:	13006b0e 	bge	r2,r12,4013c38 <_dtoa_r+0x764>
 4013a8c:	d9000717 	ldw	r4,28(sp)
 4013a90:	dd800f15 	stw	r22,60(sp)
 4013a94:	dcc01015 	stw	r19,64(sp)
 4013a98:	2319883a 	add	r12,r4,r12
 4013a9c:	dcc01217 	ldw	r19,72(sp)
 4013aa0:	602d883a 	mov	r22,r12
 4013aa4:	dc801215 	stw	r18,72(sp)
 4013aa8:	b825883a 	mov	r18,r23
 4013aac:	00000906 	br	4013ad4 <_dtoa_r+0x600>
 4013ab0:	400d1300 	call	400d130 <__subdf3>
 4013ab4:	a80d883a 	mov	r6,r21
 4013ab8:	980f883a 	mov	r7,r19
 4013abc:	1009883a 	mov	r4,r2
 4013ac0:	180b883a 	mov	r5,r3
 4013ac4:	400c9240 	call	400c924 <__ledf2>
 4013ac8:	1003e816 	blt	r2,zero,4014a6c <_dtoa_r+0x1598>
 4013acc:	b825883a 	mov	r18,r23
 4013ad0:	bd83e926 	beq	r23,r22,4014a78 <_dtoa_r+0x15a4>
 4013ad4:	a809883a 	mov	r4,r21
 4013ad8:	980b883a 	mov	r5,r19
 4013adc:	000d883a 	mov	r6,zero
 4013ae0:	01d00934 	movhi	r7,16420
 4013ae4:	400ca180 	call	400ca18 <__muldf3>
 4013ae8:	000d883a 	mov	r6,zero
 4013aec:	01d00934 	movhi	r7,16420
 4013af0:	8009883a 	mov	r4,r16
 4013af4:	880b883a 	mov	r5,r17
 4013af8:	102b883a 	mov	r21,r2
 4013afc:	1827883a 	mov	r19,r3
 4013b00:	400ca180 	call	400ca18 <__muldf3>
 4013b04:	180b883a 	mov	r5,r3
 4013b08:	1009883a 	mov	r4,r2
 4013b0c:	1821883a 	mov	r16,r3
 4013b10:	1023883a 	mov	r17,r2
 4013b14:	400da2c0 	call	400da2c <__fixdfsi>
 4013b18:	1009883a 	mov	r4,r2
 4013b1c:	1029883a 	mov	r20,r2
 4013b20:	400daac0 	call	400daac <__floatsidf>
 4013b24:	8809883a 	mov	r4,r17
 4013b28:	800b883a 	mov	r5,r16
 4013b2c:	100d883a 	mov	r6,r2
 4013b30:	180f883a 	mov	r7,r3
 4013b34:	400d1300 	call	400d130 <__subdf3>
 4013b38:	a5000c04 	addi	r20,r20,48
 4013b3c:	a80d883a 	mov	r6,r21
 4013b40:	980f883a 	mov	r7,r19
 4013b44:	1009883a 	mov	r4,r2
 4013b48:	180b883a 	mov	r5,r3
 4013b4c:	95000005 	stb	r20,0(r18)
 4013b50:	1021883a 	mov	r16,r2
 4013b54:	1823883a 	mov	r17,r3
 4013b58:	400c9240 	call	400c924 <__ledf2>
 4013b5c:	bdc00044 	addi	r23,r23,1
 4013b60:	800d883a 	mov	r6,r16
 4013b64:	880f883a 	mov	r7,r17
 4013b68:	0009883a 	mov	r4,zero
 4013b6c:	014ffc34 	movhi	r5,16368
 4013b70:	103fcf0e 	bge	r2,zero,4013ab0 <__alt_mem_epcs_flash_controller_0+0xfb012ab0>
 4013b74:	d8c01317 	ldw	r3,76(sp)
 4013b78:	d8c00515 	stw	r3,20(sp)
 4013b7c:	d9400917 	ldw	r5,36(sp)
 4013b80:	e009883a 	mov	r4,fp
 4013b84:	401619c0 	call	401619c <_Bfree>
 4013b88:	d9000517 	ldw	r4,20(sp)
 4013b8c:	d9802317 	ldw	r6,140(sp)
 4013b90:	d9c02517 	ldw	r7,148(sp)
 4013b94:	b8000005 	stb	zero,0(r23)
 4013b98:	20800044 	addi	r2,r4,1
 4013b9c:	30800015 	stw	r2,0(r6)
 4013ba0:	3802aa26 	beq	r7,zero,401464c <_dtoa_r+0x1178>
 4013ba4:	3dc00015 	stw	r23,0(r7)
 4013ba8:	d8800717 	ldw	r2,28(sp)
 4013bac:	003e7906 	br	4013594 <__alt_mem_epcs_flash_controller_0+0xfb012594>
 4013bb0:	00800434 	movhi	r2,16
 4013bb4:	10bfffc4 	addi	r2,r2,-1
 4013bb8:	88a2703a 	and	r17,r17,r2
 4013bbc:	883e851e 	bne	r17,zero,40135d4 <__alt_mem_epcs_flash_controller_0+0xfb0125d4>
 4013bc0:	00810234 	movhi	r2,1032
 4013bc4:	10954704 	addi	r2,r2,21788
 4013bc8:	003e8406 	br	40135dc <__alt_mem_epcs_flash_controller_0+0xfb0125dc>
 4013bcc:	10c00204 	addi	r3,r2,8
 4013bd0:	003e8706 	br	40135f0 <__alt_mem_epcs_flash_controller_0+0xfb0125f0>
 4013bd4:	01400434 	movhi	r5,16
 4013bd8:	297fffc4 	addi	r5,r5,-1
 4013bdc:	994a703a 	and	r5,r19,r5
 4013be0:	9009883a 	mov	r4,r18
 4013be4:	843f0044 	addi	r16,r16,-1023
 4013be8:	294ffc34 	orhi	r5,r5,16368
 4013bec:	dd800217 	ldw	r22,8(sp)
 4013bf0:	d8001115 	stw	zero,68(sp)
 4013bf4:	003ea506 	br	401368c <__alt_mem_epcs_flash_controller_0+0xfb01268c>
 4013bf8:	00810234 	movhi	r2,1032
 4013bfc:	10953604 	addi	r2,r2,21720
 4013c00:	003e6406 	br	4013594 <__alt_mem_epcs_flash_controller_0+0xfb012594>
 4013c04:	e0001115 	stw	zero,68(fp)
 4013c08:	000b883a 	mov	r5,zero
 4013c0c:	e009883a 	mov	r4,fp
 4013c10:	40160f40 	call	40160f4 <_Balloc>
 4013c14:	01bfffc4 	movi	r6,-1
 4013c18:	01c00044 	movi	r7,1
 4013c1c:	d8800715 	stw	r2,28(sp)
 4013c20:	d9800c15 	stw	r6,48(sp)
 4013c24:	e0801015 	stw	r2,64(fp)
 4013c28:	d8000315 	stw	zero,12(sp)
 4013c2c:	d9c00b15 	stw	r7,44(sp)
 4013c30:	d9800615 	stw	r6,24(sp)
 4013c34:	d8002215 	stw	zero,136(sp)
 4013c38:	d8800117 	ldw	r2,4(sp)
 4013c3c:	10008916 	blt	r2,zero,4013e64 <_dtoa_r+0x990>
 4013c40:	d9000517 	ldw	r4,20(sp)
 4013c44:	00c00384 	movi	r3,14
 4013c48:	19008616 	blt	r3,r4,4013e64 <_dtoa_r+0x990>
 4013c4c:	200490fa 	slli	r2,r4,3
 4013c50:	00c10234 	movhi	r3,1032
 4013c54:	d9802217 	ldw	r6,136(sp)
 4013c58:	18d56504 	addi	r3,r3,21908
 4013c5c:	1885883a 	add	r2,r3,r2
 4013c60:	14000017 	ldw	r16,0(r2)
 4013c64:	14400117 	ldw	r17,4(r2)
 4013c68:	30016316 	blt	r6,zero,40141f8 <_dtoa_r+0xd24>
 4013c6c:	800d883a 	mov	r6,r16
 4013c70:	880f883a 	mov	r7,r17
 4013c74:	9009883a 	mov	r4,r18
 4013c78:	980b883a 	mov	r5,r19
 4013c7c:	400bf600 	call	400bf60 <__divdf3>
 4013c80:	180b883a 	mov	r5,r3
 4013c84:	1009883a 	mov	r4,r2
 4013c88:	400da2c0 	call	400da2c <__fixdfsi>
 4013c8c:	1009883a 	mov	r4,r2
 4013c90:	102b883a 	mov	r21,r2
 4013c94:	400daac0 	call	400daac <__floatsidf>
 4013c98:	800d883a 	mov	r6,r16
 4013c9c:	880f883a 	mov	r7,r17
 4013ca0:	1009883a 	mov	r4,r2
 4013ca4:	180b883a 	mov	r5,r3
 4013ca8:	400ca180 	call	400ca18 <__muldf3>
 4013cac:	100d883a 	mov	r6,r2
 4013cb0:	180f883a 	mov	r7,r3
 4013cb4:	9009883a 	mov	r4,r18
 4013cb8:	980b883a 	mov	r5,r19
 4013cbc:	400d1300 	call	400d130 <__subdf3>
 4013cc0:	d9c00717 	ldw	r7,28(sp)
 4013cc4:	1009883a 	mov	r4,r2
 4013cc8:	a8800c04 	addi	r2,r21,48
 4013ccc:	38800005 	stb	r2,0(r7)
 4013cd0:	3dc00044 	addi	r23,r7,1
 4013cd4:	d9c00617 	ldw	r7,24(sp)
 4013cd8:	01800044 	movi	r6,1
 4013cdc:	180b883a 	mov	r5,r3
 4013ce0:	2005883a 	mov	r2,r4
 4013ce4:	39803826 	beq	r7,r6,4013dc8 <_dtoa_r+0x8f4>
 4013ce8:	000d883a 	mov	r6,zero
 4013cec:	01d00934 	movhi	r7,16420
 4013cf0:	400ca180 	call	400ca18 <__muldf3>
 4013cf4:	000d883a 	mov	r6,zero
 4013cf8:	000f883a 	mov	r7,zero
 4013cfc:	1009883a 	mov	r4,r2
 4013d00:	180b883a 	mov	r5,r3
 4013d04:	1025883a 	mov	r18,r2
 4013d08:	1827883a 	mov	r19,r3
 4013d0c:	401b6a40 	call	401b6a4 <__eqdf2>
 4013d10:	103f9a26 	beq	r2,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4013d14:	d9c00617 	ldw	r7,24(sp)
 4013d18:	d8c00717 	ldw	r3,28(sp)
 4013d1c:	b829883a 	mov	r20,r23
 4013d20:	38bfffc4 	addi	r2,r7,-1
 4013d24:	18ad883a 	add	r22,r3,r2
 4013d28:	00000a06 	br	4013d54 <_dtoa_r+0x880>
 4013d2c:	400ca180 	call	400ca18 <__muldf3>
 4013d30:	000d883a 	mov	r6,zero
 4013d34:	000f883a 	mov	r7,zero
 4013d38:	1009883a 	mov	r4,r2
 4013d3c:	180b883a 	mov	r5,r3
 4013d40:	1025883a 	mov	r18,r2
 4013d44:	1827883a 	mov	r19,r3
 4013d48:	b829883a 	mov	r20,r23
 4013d4c:	401b6a40 	call	401b6a4 <__eqdf2>
 4013d50:	103f8a26 	beq	r2,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4013d54:	800d883a 	mov	r6,r16
 4013d58:	880f883a 	mov	r7,r17
 4013d5c:	9009883a 	mov	r4,r18
 4013d60:	980b883a 	mov	r5,r19
 4013d64:	400bf600 	call	400bf60 <__divdf3>
 4013d68:	180b883a 	mov	r5,r3
 4013d6c:	1009883a 	mov	r4,r2
 4013d70:	400da2c0 	call	400da2c <__fixdfsi>
 4013d74:	1009883a 	mov	r4,r2
 4013d78:	102b883a 	mov	r21,r2
 4013d7c:	400daac0 	call	400daac <__floatsidf>
 4013d80:	800d883a 	mov	r6,r16
 4013d84:	880f883a 	mov	r7,r17
 4013d88:	1009883a 	mov	r4,r2
 4013d8c:	180b883a 	mov	r5,r3
 4013d90:	400ca180 	call	400ca18 <__muldf3>
 4013d94:	100d883a 	mov	r6,r2
 4013d98:	180f883a 	mov	r7,r3
 4013d9c:	9009883a 	mov	r4,r18
 4013da0:	980b883a 	mov	r5,r19
 4013da4:	400d1300 	call	400d130 <__subdf3>
 4013da8:	aa000c04 	addi	r8,r21,48
 4013dac:	a2000005 	stb	r8,0(r20)
 4013db0:	000d883a 	mov	r6,zero
 4013db4:	01d00934 	movhi	r7,16420
 4013db8:	1009883a 	mov	r4,r2
 4013dbc:	180b883a 	mov	r5,r3
 4013dc0:	a5c00044 	addi	r23,r20,1
 4013dc4:	b53fd91e 	bne	r22,r20,4013d2c <__alt_mem_epcs_flash_controller_0+0xfb012d2c>
 4013dc8:	100d883a 	mov	r6,r2
 4013dcc:	180f883a 	mov	r7,r3
 4013dd0:	1009883a 	mov	r4,r2
 4013dd4:	180b883a 	mov	r5,r3
 4013dd8:	400b6b40 	call	400b6b4 <__adddf3>
 4013ddc:	100d883a 	mov	r6,r2
 4013de0:	180f883a 	mov	r7,r3
 4013de4:	8009883a 	mov	r4,r16
 4013de8:	880b883a 	mov	r5,r17
 4013dec:	1027883a 	mov	r19,r2
 4013df0:	1825883a 	mov	r18,r3
 4013df4:	400c9240 	call	400c924 <__ledf2>
 4013df8:	10000816 	blt	r2,zero,4013e1c <_dtoa_r+0x948>
 4013dfc:	980d883a 	mov	r6,r19
 4013e00:	900f883a 	mov	r7,r18
 4013e04:	8009883a 	mov	r4,r16
 4013e08:	880b883a 	mov	r5,r17
 4013e0c:	401b6a40 	call	401b6a4 <__eqdf2>
 4013e10:	103f5a1e 	bne	r2,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4013e14:	ad40004c 	andi	r21,r21,1
 4013e18:	a83f5826 	beq	r21,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4013e1c:	bd3fffc3 	ldbu	r20,-1(r23)
 4013e20:	b8bfffc4 	addi	r2,r23,-1
 4013e24:	1007883a 	mov	r3,r2
 4013e28:	01400e44 	movi	r5,57
 4013e2c:	d9800717 	ldw	r6,28(sp)
 4013e30:	00000506 	br	4013e48 <_dtoa_r+0x974>
 4013e34:	18ffffc4 	addi	r3,r3,-1
 4013e38:	11824726 	beq	r2,r6,4014758 <_dtoa_r+0x1284>
 4013e3c:	1d000003 	ldbu	r20,0(r3)
 4013e40:	102f883a 	mov	r23,r2
 4013e44:	10bfffc4 	addi	r2,r2,-1
 4013e48:	a1003fcc 	andi	r4,r20,255
 4013e4c:	2100201c 	xori	r4,r4,128
 4013e50:	213fe004 	addi	r4,r4,-128
 4013e54:	217ff726 	beq	r4,r5,4013e34 <__alt_mem_epcs_flash_controller_0+0xfb012e34>
 4013e58:	a2000044 	addi	r8,r20,1
 4013e5c:	12000005 	stb	r8,0(r2)
 4013e60:	003f4606 	br	4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4013e64:	d9000b17 	ldw	r4,44(sp)
 4013e68:	2000c826 	beq	r4,zero,401418c <_dtoa_r+0xcb8>
 4013e6c:	d9800317 	ldw	r6,12(sp)
 4013e70:	00c00044 	movi	r3,1
 4013e74:	1980f90e 	bge	r3,r6,401425c <_dtoa_r+0xd88>
 4013e78:	d8800617 	ldw	r2,24(sp)
 4013e7c:	d8c00a17 	ldw	r3,40(sp)
 4013e80:	157fffc4 	addi	r21,r2,-1
 4013e84:	1d41f316 	blt	r3,r21,4014654 <_dtoa_r+0x1180>
 4013e88:	1d6bc83a 	sub	r21,r3,r21
 4013e8c:	d9c00617 	ldw	r7,24(sp)
 4013e90:	3802aa16 	blt	r7,zero,401493c <_dtoa_r+0x1468>
 4013e94:	dd000817 	ldw	r20,32(sp)
 4013e98:	d8800617 	ldw	r2,24(sp)
 4013e9c:	d8c00817 	ldw	r3,32(sp)
 4013ea0:	01400044 	movi	r5,1
 4013ea4:	e009883a 	mov	r4,fp
 4013ea8:	1887883a 	add	r3,r3,r2
 4013eac:	d8c00815 	stw	r3,32(sp)
 4013eb0:	b0ad883a 	add	r22,r22,r2
 4013eb4:	40165000 	call	4016500 <__i2b>
 4013eb8:	1023883a 	mov	r17,r2
 4013ebc:	a0000826 	beq	r20,zero,4013ee0 <_dtoa_r+0xa0c>
 4013ec0:	0580070e 	bge	zero,r22,4013ee0 <_dtoa_r+0xa0c>
 4013ec4:	a005883a 	mov	r2,r20
 4013ec8:	b500b916 	blt	r22,r20,40141b0 <_dtoa_r+0xcdc>
 4013ecc:	d9000817 	ldw	r4,32(sp)
 4013ed0:	a0a9c83a 	sub	r20,r20,r2
 4013ed4:	b0adc83a 	sub	r22,r22,r2
 4013ed8:	2089c83a 	sub	r4,r4,r2
 4013edc:	d9000815 	stw	r4,32(sp)
 4013ee0:	d9800a17 	ldw	r6,40(sp)
 4013ee4:	0181810e 	bge	zero,r6,40144ec <_dtoa_r+0x1018>
 4013ee8:	d9c00b17 	ldw	r7,44(sp)
 4013eec:	3800b326 	beq	r7,zero,40141bc <_dtoa_r+0xce8>
 4013ef0:	a800b226 	beq	r21,zero,40141bc <_dtoa_r+0xce8>
 4013ef4:	880b883a 	mov	r5,r17
 4013ef8:	a80d883a 	mov	r6,r21
 4013efc:	e009883a 	mov	r4,fp
 4013f00:	40167340 	call	4016734 <__pow5mult>
 4013f04:	d9800917 	ldw	r6,36(sp)
 4013f08:	100b883a 	mov	r5,r2
 4013f0c:	e009883a 	mov	r4,fp
 4013f10:	1023883a 	mov	r17,r2
 4013f14:	401653c0 	call	401653c <__multiply>
 4013f18:	1021883a 	mov	r16,r2
 4013f1c:	d8800a17 	ldw	r2,40(sp)
 4013f20:	d9400917 	ldw	r5,36(sp)
 4013f24:	e009883a 	mov	r4,fp
 4013f28:	1545c83a 	sub	r2,r2,r21
 4013f2c:	d8800a15 	stw	r2,40(sp)
 4013f30:	401619c0 	call	401619c <_Bfree>
 4013f34:	d8c00a17 	ldw	r3,40(sp)
 4013f38:	18009f1e 	bne	r3,zero,40141b8 <_dtoa_r+0xce4>
 4013f3c:	05c00044 	movi	r23,1
 4013f40:	e009883a 	mov	r4,fp
 4013f44:	b80b883a 	mov	r5,r23
 4013f48:	40165000 	call	4016500 <__i2b>
 4013f4c:	d9000d17 	ldw	r4,52(sp)
 4013f50:	102b883a 	mov	r21,r2
 4013f54:	2000ce26 	beq	r4,zero,4014290 <_dtoa_r+0xdbc>
 4013f58:	200d883a 	mov	r6,r4
 4013f5c:	100b883a 	mov	r5,r2
 4013f60:	e009883a 	mov	r4,fp
 4013f64:	40167340 	call	4016734 <__pow5mult>
 4013f68:	d9800317 	ldw	r6,12(sp)
 4013f6c:	102b883a 	mov	r21,r2
 4013f70:	b981810e 	bge	r23,r6,4014578 <_dtoa_r+0x10a4>
 4013f74:	0027883a 	mov	r19,zero
 4013f78:	a8800417 	ldw	r2,16(r21)
 4013f7c:	05c00804 	movi	r23,32
 4013f80:	10800104 	addi	r2,r2,4
 4013f84:	1085883a 	add	r2,r2,r2
 4013f88:	1085883a 	add	r2,r2,r2
 4013f8c:	a885883a 	add	r2,r21,r2
 4013f90:	11000017 	ldw	r4,0(r2)
 4013f94:	40163e80 	call	40163e8 <__hi0bits>
 4013f98:	b885c83a 	sub	r2,r23,r2
 4013f9c:	1585883a 	add	r2,r2,r22
 4013fa0:	108007cc 	andi	r2,r2,31
 4013fa4:	1000b326 	beq	r2,zero,4014274 <_dtoa_r+0xda0>
 4013fa8:	00c00804 	movi	r3,32
 4013fac:	1887c83a 	sub	r3,r3,r2
 4013fb0:	01000104 	movi	r4,4
 4013fb4:	20c2cd0e 	bge	r4,r3,4014aec <_dtoa_r+0x1618>
 4013fb8:	00c00704 	movi	r3,28
 4013fbc:	1885c83a 	sub	r2,r3,r2
 4013fc0:	d8c00817 	ldw	r3,32(sp)
 4013fc4:	a0a9883a 	add	r20,r20,r2
 4013fc8:	b0ad883a 	add	r22,r22,r2
 4013fcc:	1887883a 	add	r3,r3,r2
 4013fd0:	d8c00815 	stw	r3,32(sp)
 4013fd4:	d9800817 	ldw	r6,32(sp)
 4013fd8:	0180040e 	bge	zero,r6,4013fec <_dtoa_r+0xb18>
 4013fdc:	800b883a 	mov	r5,r16
 4013fe0:	e009883a 	mov	r4,fp
 4013fe4:	40168740 	call	4016874 <__lshift>
 4013fe8:	1021883a 	mov	r16,r2
 4013fec:	0580050e 	bge	zero,r22,4014004 <_dtoa_r+0xb30>
 4013ff0:	a80b883a 	mov	r5,r21
 4013ff4:	b00d883a 	mov	r6,r22
 4013ff8:	e009883a 	mov	r4,fp
 4013ffc:	40168740 	call	4016874 <__lshift>
 4014000:	102b883a 	mov	r21,r2
 4014004:	d9c00e17 	ldw	r7,56(sp)
 4014008:	3801211e 	bne	r7,zero,4014490 <_dtoa_r+0xfbc>
 401400c:	d9800617 	ldw	r6,24(sp)
 4014010:	0181380e 	bge	zero,r6,40144f4 <_dtoa_r+0x1020>
 4014014:	d8c00b17 	ldw	r3,44(sp)
 4014018:	1800ab1e 	bne	r3,zero,40142c8 <_dtoa_r+0xdf4>
 401401c:	dc800717 	ldw	r18,28(sp)
 4014020:	dcc00617 	ldw	r19,24(sp)
 4014024:	9029883a 	mov	r20,r18
 4014028:	00000206 	br	4014034 <_dtoa_r+0xb60>
 401402c:	40161c40 	call	40161c4 <__multadd>
 4014030:	1021883a 	mov	r16,r2
 4014034:	a80b883a 	mov	r5,r21
 4014038:	8009883a 	mov	r4,r16
 401403c:	40132d40 	call	40132d4 <quorem>
 4014040:	10800c04 	addi	r2,r2,48
 4014044:	90800005 	stb	r2,0(r18)
 4014048:	94800044 	addi	r18,r18,1
 401404c:	9507c83a 	sub	r3,r18,r20
 4014050:	000f883a 	mov	r7,zero
 4014054:	01800284 	movi	r6,10
 4014058:	800b883a 	mov	r5,r16
 401405c:	e009883a 	mov	r4,fp
 4014060:	1cfff216 	blt	r3,r19,401402c <__alt_mem_epcs_flash_controller_0+0xfb01302c>
 4014064:	1011883a 	mov	r8,r2
 4014068:	d8800617 	ldw	r2,24(sp)
 401406c:	0082370e 	bge	zero,r2,401494c <_dtoa_r+0x1478>
 4014070:	d9000717 	ldw	r4,28(sp)
 4014074:	0025883a 	mov	r18,zero
 4014078:	20af883a 	add	r23,r4,r2
 401407c:	01800044 	movi	r6,1
 4014080:	800b883a 	mov	r5,r16
 4014084:	e009883a 	mov	r4,fp
 4014088:	da001715 	stw	r8,92(sp)
 401408c:	40168740 	call	4016874 <__lshift>
 4014090:	a80b883a 	mov	r5,r21
 4014094:	1009883a 	mov	r4,r2
 4014098:	d8800915 	stw	r2,36(sp)
 401409c:	40169bc0 	call	40169bc <__mcmp>
 40140a0:	da001717 	ldw	r8,92(sp)
 40140a4:	0081800e 	bge	zero,r2,40146a8 <_dtoa_r+0x11d4>
 40140a8:	b93fffc3 	ldbu	r4,-1(r23)
 40140ac:	b8bfffc4 	addi	r2,r23,-1
 40140b0:	1007883a 	mov	r3,r2
 40140b4:	01800e44 	movi	r6,57
 40140b8:	d9c00717 	ldw	r7,28(sp)
 40140bc:	00000506 	br	40140d4 <_dtoa_r+0xc00>
 40140c0:	18ffffc4 	addi	r3,r3,-1
 40140c4:	11c12326 	beq	r2,r7,4014554 <_dtoa_r+0x1080>
 40140c8:	19000003 	ldbu	r4,0(r3)
 40140cc:	102f883a 	mov	r23,r2
 40140d0:	10bfffc4 	addi	r2,r2,-1
 40140d4:	21403fcc 	andi	r5,r4,255
 40140d8:	2940201c 	xori	r5,r5,128
 40140dc:	297fe004 	addi	r5,r5,-128
 40140e0:	29bff726 	beq	r5,r6,40140c0 <__alt_mem_epcs_flash_controller_0+0xfb0130c0>
 40140e4:	21000044 	addi	r4,r4,1
 40140e8:	11000005 	stb	r4,0(r2)
 40140ec:	a80b883a 	mov	r5,r21
 40140f0:	e009883a 	mov	r4,fp
 40140f4:	401619c0 	call	401619c <_Bfree>
 40140f8:	883ea026 	beq	r17,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 40140fc:	90000426 	beq	r18,zero,4014110 <_dtoa_r+0xc3c>
 4014100:	94400326 	beq	r18,r17,4014110 <_dtoa_r+0xc3c>
 4014104:	900b883a 	mov	r5,r18
 4014108:	e009883a 	mov	r4,fp
 401410c:	401619c0 	call	401619c <_Bfree>
 4014110:	880b883a 	mov	r5,r17
 4014114:	e009883a 	mov	r4,fp
 4014118:	401619c0 	call	401619c <_Bfree>
 401411c:	003e9706 	br	4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4014120:	01800044 	movi	r6,1
 4014124:	d9800e15 	stw	r6,56(sp)
 4014128:	003d9606 	br	4013784 <__alt_mem_epcs_flash_controller_0+0xfb012784>
 401412c:	d8800817 	ldw	r2,32(sp)
 4014130:	d8c00517 	ldw	r3,20(sp)
 4014134:	d8000d15 	stw	zero,52(sp)
 4014138:	10c5c83a 	sub	r2,r2,r3
 401413c:	00c9c83a 	sub	r4,zero,r3
 4014140:	d8800815 	stw	r2,32(sp)
 4014144:	d9000a15 	stw	r4,40(sp)
 4014148:	003d9706 	br	40137a8 <__alt_mem_epcs_flash_controller_0+0xfb0127a8>
 401414c:	05adc83a 	sub	r22,zero,r22
 4014150:	dd800815 	stw	r22,32(sp)
 4014154:	002d883a 	mov	r22,zero
 4014158:	003d8e06 	br	4013794 <__alt_mem_epcs_flash_controller_0+0xfb012794>
 401415c:	d9000517 	ldw	r4,20(sp)
 4014160:	400daac0 	call	400daac <__floatsidf>
 4014164:	100d883a 	mov	r6,r2
 4014168:	180f883a 	mov	r7,r3
 401416c:	a009883a 	mov	r4,r20
 4014170:	880b883a 	mov	r5,r17
 4014174:	401b6a40 	call	401b6a4 <__eqdf2>
 4014178:	103d7126 	beq	r2,zero,4013740 <__alt_mem_epcs_flash_controller_0+0xfb012740>
 401417c:	d9c00517 	ldw	r7,20(sp)
 4014180:	39ffffc4 	addi	r7,r7,-1
 4014184:	d9c00515 	stw	r7,20(sp)
 4014188:	003d6d06 	br	4013740 <__alt_mem_epcs_flash_controller_0+0xfb012740>
 401418c:	dd400a17 	ldw	r21,40(sp)
 4014190:	dd000817 	ldw	r20,32(sp)
 4014194:	0023883a 	mov	r17,zero
 4014198:	003f4806 	br	4013ebc <__alt_mem_epcs_flash_controller_0+0xfb012ebc>
 401419c:	10e3c83a 	sub	r17,r2,r3
 40141a0:	9448983a 	sll	r4,r18,r17
 40141a4:	003d3206 	br	4013670 <__alt_mem_epcs_flash_controller_0+0xfb012670>
 40141a8:	d8000e15 	stw	zero,56(sp)
 40141ac:	003d7506 	br	4013784 <__alt_mem_epcs_flash_controller_0+0xfb012784>
 40141b0:	b005883a 	mov	r2,r22
 40141b4:	003f4506 	br	4013ecc <__alt_mem_epcs_flash_controller_0+0xfb012ecc>
 40141b8:	dc000915 	stw	r16,36(sp)
 40141bc:	d9800a17 	ldw	r6,40(sp)
 40141c0:	d9400917 	ldw	r5,36(sp)
 40141c4:	e009883a 	mov	r4,fp
 40141c8:	40167340 	call	4016734 <__pow5mult>
 40141cc:	1021883a 	mov	r16,r2
 40141d0:	003f5a06 	br	4013f3c <__alt_mem_epcs_flash_controller_0+0xfb012f3c>
 40141d4:	01c00044 	movi	r7,1
 40141d8:	d9c00b15 	stw	r7,44(sp)
 40141dc:	d8802217 	ldw	r2,136(sp)
 40141e0:	0081280e 	bge	zero,r2,4014684 <_dtoa_r+0x11b0>
 40141e4:	100d883a 	mov	r6,r2
 40141e8:	1021883a 	mov	r16,r2
 40141ec:	d8800c15 	stw	r2,48(sp)
 40141f0:	d8800615 	stw	r2,24(sp)
 40141f4:	003d8806 	br	4013818 <__alt_mem_epcs_flash_controller_0+0xfb012818>
 40141f8:	d8800617 	ldw	r2,24(sp)
 40141fc:	00be9b16 	blt	zero,r2,4013c6c <__alt_mem_epcs_flash_controller_0+0xfb012c6c>
 4014200:	10010f1e 	bne	r2,zero,4014640 <_dtoa_r+0x116c>
 4014204:	880b883a 	mov	r5,r17
 4014208:	000d883a 	mov	r6,zero
 401420c:	01d00534 	movhi	r7,16404
 4014210:	8009883a 	mov	r4,r16
 4014214:	400ca180 	call	400ca18 <__muldf3>
 4014218:	900d883a 	mov	r6,r18
 401421c:	980f883a 	mov	r7,r19
 4014220:	1009883a 	mov	r4,r2
 4014224:	180b883a 	mov	r5,r3
 4014228:	400c8480 	call	400c848 <__gedf2>
 401422c:	002b883a 	mov	r21,zero
 4014230:	0023883a 	mov	r17,zero
 4014234:	1000bf16 	blt	r2,zero,4014534 <_dtoa_r+0x1060>
 4014238:	d9802217 	ldw	r6,136(sp)
 401423c:	ddc00717 	ldw	r23,28(sp)
 4014240:	018c303a 	nor	r6,zero,r6
 4014244:	d9800515 	stw	r6,20(sp)
 4014248:	a80b883a 	mov	r5,r21
 401424c:	e009883a 	mov	r4,fp
 4014250:	401619c0 	call	401619c <_Bfree>
 4014254:	883e4926 	beq	r17,zero,4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4014258:	003fad06 	br	4014110 <__alt_mem_epcs_flash_controller_0+0xfb013110>
 401425c:	d9c01117 	ldw	r7,68(sp)
 4014260:	3801bc26 	beq	r7,zero,4014954 <_dtoa_r+0x1480>
 4014264:	10810cc4 	addi	r2,r2,1075
 4014268:	dd400a17 	ldw	r21,40(sp)
 401426c:	dd000817 	ldw	r20,32(sp)
 4014270:	003f0a06 	br	4013e9c <__alt_mem_epcs_flash_controller_0+0xfb012e9c>
 4014274:	00800704 	movi	r2,28
 4014278:	d9000817 	ldw	r4,32(sp)
 401427c:	a0a9883a 	add	r20,r20,r2
 4014280:	b0ad883a 	add	r22,r22,r2
 4014284:	2089883a 	add	r4,r4,r2
 4014288:	d9000815 	stw	r4,32(sp)
 401428c:	003f5106 	br	4013fd4 <__alt_mem_epcs_flash_controller_0+0xfb012fd4>
 4014290:	d8c00317 	ldw	r3,12(sp)
 4014294:	b8c1fc0e 	bge	r23,r3,4014a88 <_dtoa_r+0x15b4>
 4014298:	0027883a 	mov	r19,zero
 401429c:	b805883a 	mov	r2,r23
 40142a0:	003f3e06 	br	4013f9c <__alt_mem_epcs_flash_controller_0+0xfb012f9c>
 40142a4:	880b883a 	mov	r5,r17
 40142a8:	e009883a 	mov	r4,fp
 40142ac:	000f883a 	mov	r7,zero
 40142b0:	01800284 	movi	r6,10
 40142b4:	40161c40 	call	40161c4 <__multadd>
 40142b8:	d9000c17 	ldw	r4,48(sp)
 40142bc:	1023883a 	mov	r17,r2
 40142c0:	0102040e 	bge	zero,r4,4014ad4 <_dtoa_r+0x1600>
 40142c4:	d9000615 	stw	r4,24(sp)
 40142c8:	0500050e 	bge	zero,r20,40142e0 <_dtoa_r+0xe0c>
 40142cc:	880b883a 	mov	r5,r17
 40142d0:	a00d883a 	mov	r6,r20
 40142d4:	e009883a 	mov	r4,fp
 40142d8:	40168740 	call	4016874 <__lshift>
 40142dc:	1023883a 	mov	r17,r2
 40142e0:	9801241e 	bne	r19,zero,4014774 <_dtoa_r+0x12a0>
 40142e4:	8829883a 	mov	r20,r17
 40142e8:	d9000617 	ldw	r4,24(sp)
 40142ec:	dcc00717 	ldw	r19,28(sp)
 40142f0:	9480004c 	andi	r18,r18,1
 40142f4:	20bfffc4 	addi	r2,r4,-1
 40142f8:	9885883a 	add	r2,r19,r2
 40142fc:	d8800415 	stw	r2,16(sp)
 4014300:	dc800615 	stw	r18,24(sp)
 4014304:	a80b883a 	mov	r5,r21
 4014308:	8009883a 	mov	r4,r16
 401430c:	40132d40 	call	40132d4 <quorem>
 4014310:	880b883a 	mov	r5,r17
 4014314:	8009883a 	mov	r4,r16
 4014318:	102f883a 	mov	r23,r2
 401431c:	40169bc0 	call	40169bc <__mcmp>
 4014320:	a80b883a 	mov	r5,r21
 4014324:	a00d883a 	mov	r6,r20
 4014328:	e009883a 	mov	r4,fp
 401432c:	102d883a 	mov	r22,r2
 4014330:	4016a1c0 	call	4016a1c <__mdiff>
 4014334:	1007883a 	mov	r3,r2
 4014338:	10800317 	ldw	r2,12(r2)
 401433c:	bc800c04 	addi	r18,r23,48
 4014340:	180b883a 	mov	r5,r3
 4014344:	10004e1e 	bne	r2,zero,4014480 <_dtoa_r+0xfac>
 4014348:	8009883a 	mov	r4,r16
 401434c:	d8c01615 	stw	r3,88(sp)
 4014350:	40169bc0 	call	40169bc <__mcmp>
 4014354:	d8c01617 	ldw	r3,88(sp)
 4014358:	e009883a 	mov	r4,fp
 401435c:	d8801615 	stw	r2,88(sp)
 4014360:	180b883a 	mov	r5,r3
 4014364:	401619c0 	call	401619c <_Bfree>
 4014368:	d8801617 	ldw	r2,88(sp)
 401436c:	1000041e 	bne	r2,zero,4014380 <_dtoa_r+0xeac>
 4014370:	d9800317 	ldw	r6,12(sp)
 4014374:	3000021e 	bne	r6,zero,4014380 <_dtoa_r+0xeac>
 4014378:	d8c00617 	ldw	r3,24(sp)
 401437c:	18003726 	beq	r3,zero,401445c <_dtoa_r+0xf88>
 4014380:	b0002016 	blt	r22,zero,4014404 <_dtoa_r+0xf30>
 4014384:	b000041e 	bne	r22,zero,4014398 <_dtoa_r+0xec4>
 4014388:	d9000317 	ldw	r4,12(sp)
 401438c:	2000021e 	bne	r4,zero,4014398 <_dtoa_r+0xec4>
 4014390:	d8c00617 	ldw	r3,24(sp)
 4014394:	18001b26 	beq	r3,zero,4014404 <_dtoa_r+0xf30>
 4014398:	00810716 	blt	zero,r2,40147b8 <_dtoa_r+0x12e4>
 401439c:	d8c00417 	ldw	r3,16(sp)
 40143a0:	9d800044 	addi	r22,r19,1
 40143a4:	9c800005 	stb	r18,0(r19)
 40143a8:	b02f883a 	mov	r23,r22
 40143ac:	98c10626 	beq	r19,r3,40147c8 <_dtoa_r+0x12f4>
 40143b0:	800b883a 	mov	r5,r16
 40143b4:	000f883a 	mov	r7,zero
 40143b8:	01800284 	movi	r6,10
 40143bc:	e009883a 	mov	r4,fp
 40143c0:	40161c40 	call	40161c4 <__multadd>
 40143c4:	1021883a 	mov	r16,r2
 40143c8:	000f883a 	mov	r7,zero
 40143cc:	01800284 	movi	r6,10
 40143d0:	880b883a 	mov	r5,r17
 40143d4:	e009883a 	mov	r4,fp
 40143d8:	8d002526 	beq	r17,r20,4014470 <_dtoa_r+0xf9c>
 40143dc:	40161c40 	call	40161c4 <__multadd>
 40143e0:	a00b883a 	mov	r5,r20
 40143e4:	000f883a 	mov	r7,zero
 40143e8:	01800284 	movi	r6,10
 40143ec:	e009883a 	mov	r4,fp
 40143f0:	1023883a 	mov	r17,r2
 40143f4:	40161c40 	call	40161c4 <__multadd>
 40143f8:	1029883a 	mov	r20,r2
 40143fc:	b027883a 	mov	r19,r22
 4014400:	003fc006 	br	4014304 <__alt_mem_epcs_flash_controller_0+0xfb013304>
 4014404:	9011883a 	mov	r8,r18
 4014408:	00800e0e 	bge	zero,r2,4014444 <_dtoa_r+0xf70>
 401440c:	800b883a 	mov	r5,r16
 4014410:	01800044 	movi	r6,1
 4014414:	e009883a 	mov	r4,fp
 4014418:	da001715 	stw	r8,92(sp)
 401441c:	40168740 	call	4016874 <__lshift>
 4014420:	a80b883a 	mov	r5,r21
 4014424:	1009883a 	mov	r4,r2
 4014428:	1021883a 	mov	r16,r2
 401442c:	40169bc0 	call	40169bc <__mcmp>
 4014430:	da001717 	ldw	r8,92(sp)
 4014434:	0081960e 	bge	zero,r2,4014a90 <_dtoa_r+0x15bc>
 4014438:	00800e44 	movi	r2,57
 401443c:	40817026 	beq	r8,r2,4014a00 <_dtoa_r+0x152c>
 4014440:	ba000c44 	addi	r8,r23,49
 4014444:	8825883a 	mov	r18,r17
 4014448:	9dc00044 	addi	r23,r19,1
 401444c:	9a000005 	stb	r8,0(r19)
 4014450:	a023883a 	mov	r17,r20
 4014454:	dc000915 	stw	r16,36(sp)
 4014458:	003f2406 	br	40140ec <__alt_mem_epcs_flash_controller_0+0xfb0130ec>
 401445c:	00800e44 	movi	r2,57
 4014460:	9011883a 	mov	r8,r18
 4014464:	90816626 	beq	r18,r2,4014a00 <_dtoa_r+0x152c>
 4014468:	05bff516 	blt	zero,r22,4014440 <__alt_mem_epcs_flash_controller_0+0xfb013440>
 401446c:	003ff506 	br	4014444 <__alt_mem_epcs_flash_controller_0+0xfb013444>
 4014470:	40161c40 	call	40161c4 <__multadd>
 4014474:	1023883a 	mov	r17,r2
 4014478:	1029883a 	mov	r20,r2
 401447c:	003fdf06 	br	40143fc <__alt_mem_epcs_flash_controller_0+0xfb0133fc>
 4014480:	e009883a 	mov	r4,fp
 4014484:	401619c0 	call	401619c <_Bfree>
 4014488:	00800044 	movi	r2,1
 401448c:	003fbc06 	br	4014380 <__alt_mem_epcs_flash_controller_0+0xfb013380>
 4014490:	a80b883a 	mov	r5,r21
 4014494:	8009883a 	mov	r4,r16
 4014498:	40169bc0 	call	40169bc <__mcmp>
 401449c:	103edb0e 	bge	r2,zero,401400c <__alt_mem_epcs_flash_controller_0+0xfb01300c>
 40144a0:	800b883a 	mov	r5,r16
 40144a4:	000f883a 	mov	r7,zero
 40144a8:	01800284 	movi	r6,10
 40144ac:	e009883a 	mov	r4,fp
 40144b0:	40161c40 	call	40161c4 <__multadd>
 40144b4:	1021883a 	mov	r16,r2
 40144b8:	d8800517 	ldw	r2,20(sp)
 40144bc:	d8c00b17 	ldw	r3,44(sp)
 40144c0:	10bfffc4 	addi	r2,r2,-1
 40144c4:	d8800515 	stw	r2,20(sp)
 40144c8:	183f761e 	bne	r3,zero,40142a4 <__alt_mem_epcs_flash_controller_0+0xfb0132a4>
 40144cc:	d9000c17 	ldw	r4,48(sp)
 40144d0:	0101730e 	bge	zero,r4,4014aa0 <_dtoa_r+0x15cc>
 40144d4:	d9000615 	stw	r4,24(sp)
 40144d8:	003ed006 	br	401401c <__alt_mem_epcs_flash_controller_0+0xfb01301c>
 40144dc:	00800084 	movi	r2,2
 40144e0:	3081861e 	bne	r6,r2,4014afc <_dtoa_r+0x1628>
 40144e4:	d8000b15 	stw	zero,44(sp)
 40144e8:	003f3c06 	br	40141dc <__alt_mem_epcs_flash_controller_0+0xfb0131dc>
 40144ec:	dc000917 	ldw	r16,36(sp)
 40144f0:	003e9206 	br	4013f3c <__alt_mem_epcs_flash_controller_0+0xfb012f3c>
 40144f4:	d9c00317 	ldw	r7,12(sp)
 40144f8:	00800084 	movi	r2,2
 40144fc:	11fec50e 	bge	r2,r7,4014014 <__alt_mem_epcs_flash_controller_0+0xfb013014>
 4014500:	d9000617 	ldw	r4,24(sp)
 4014504:	20013c1e 	bne	r4,zero,40149f8 <_dtoa_r+0x1524>
 4014508:	a80b883a 	mov	r5,r21
 401450c:	000f883a 	mov	r7,zero
 4014510:	01800144 	movi	r6,5
 4014514:	e009883a 	mov	r4,fp
 4014518:	40161c40 	call	40161c4 <__multadd>
 401451c:	100b883a 	mov	r5,r2
 4014520:	8009883a 	mov	r4,r16
 4014524:	102b883a 	mov	r21,r2
 4014528:	40169bc0 	call	40169bc <__mcmp>
 401452c:	dc000915 	stw	r16,36(sp)
 4014530:	00bf410e 	bge	zero,r2,4014238 <__alt_mem_epcs_flash_controller_0+0xfb013238>
 4014534:	d9c00717 	ldw	r7,28(sp)
 4014538:	00800c44 	movi	r2,49
 401453c:	38800005 	stb	r2,0(r7)
 4014540:	d8800517 	ldw	r2,20(sp)
 4014544:	3dc00044 	addi	r23,r7,1
 4014548:	10800044 	addi	r2,r2,1
 401454c:	d8800515 	stw	r2,20(sp)
 4014550:	003f3d06 	br	4014248 <__alt_mem_epcs_flash_controller_0+0xfb013248>
 4014554:	d9800517 	ldw	r6,20(sp)
 4014558:	d9c00717 	ldw	r7,28(sp)
 401455c:	00800c44 	movi	r2,49
 4014560:	31800044 	addi	r6,r6,1
 4014564:	d9800515 	stw	r6,20(sp)
 4014568:	38800005 	stb	r2,0(r7)
 401456c:	003edf06 	br	40140ec <__alt_mem_epcs_flash_controller_0+0xfb0130ec>
 4014570:	d8000b15 	stw	zero,44(sp)
 4014574:	003c9f06 	br	40137f4 <__alt_mem_epcs_flash_controller_0+0xfb0127f4>
 4014578:	903e7e1e 	bne	r18,zero,4013f74 <__alt_mem_epcs_flash_controller_0+0xfb012f74>
 401457c:	00800434 	movhi	r2,16
 4014580:	10bfffc4 	addi	r2,r2,-1
 4014584:	9884703a 	and	r2,r19,r2
 4014588:	1000ea1e 	bne	r2,zero,4014934 <_dtoa_r+0x1460>
 401458c:	9cdffc2c 	andhi	r19,r19,32752
 4014590:	9800e826 	beq	r19,zero,4014934 <_dtoa_r+0x1460>
 4014594:	d9c00817 	ldw	r7,32(sp)
 4014598:	b5800044 	addi	r22,r22,1
 401459c:	04c00044 	movi	r19,1
 40145a0:	39c00044 	addi	r7,r7,1
 40145a4:	d9c00815 	stw	r7,32(sp)
 40145a8:	d8800d17 	ldw	r2,52(sp)
 40145ac:	103e721e 	bne	r2,zero,4013f78 <__alt_mem_epcs_flash_controller_0+0xfb012f78>
 40145b0:	00800044 	movi	r2,1
 40145b4:	003e7906 	br	4013f9c <__alt_mem_epcs_flash_controller_0+0xfb012f9c>
 40145b8:	8009883a 	mov	r4,r16
 40145bc:	400daac0 	call	400daac <__floatsidf>
 40145c0:	d9800f17 	ldw	r6,60(sp)
 40145c4:	d9c01017 	ldw	r7,64(sp)
 40145c8:	1009883a 	mov	r4,r2
 40145cc:	180b883a 	mov	r5,r3
 40145d0:	400ca180 	call	400ca18 <__muldf3>
 40145d4:	000d883a 	mov	r6,zero
 40145d8:	01d00734 	movhi	r7,16412
 40145dc:	1009883a 	mov	r4,r2
 40145e0:	180b883a 	mov	r5,r3
 40145e4:	400b6b40 	call	400b6b4 <__adddf3>
 40145e8:	047f3034 	movhi	r17,64704
 40145ec:	1021883a 	mov	r16,r2
 40145f0:	1c63883a 	add	r17,r3,r17
 40145f4:	d9000f17 	ldw	r4,60(sp)
 40145f8:	d9401017 	ldw	r5,64(sp)
 40145fc:	000d883a 	mov	r6,zero
 4014600:	01d00534 	movhi	r7,16404
 4014604:	400d1300 	call	400d130 <__subdf3>
 4014608:	800d883a 	mov	r6,r16
 401460c:	880f883a 	mov	r7,r17
 4014610:	1009883a 	mov	r4,r2
 4014614:	180b883a 	mov	r5,r3
 4014618:	102b883a 	mov	r21,r2
 401461c:	1829883a 	mov	r20,r3
 4014620:	400c8480 	call	400c848 <__gedf2>
 4014624:	00806c16 	blt	zero,r2,40147d8 <_dtoa_r+0x1304>
 4014628:	89e0003c 	xorhi	r7,r17,32768
 401462c:	800d883a 	mov	r6,r16
 4014630:	a809883a 	mov	r4,r21
 4014634:	a00b883a 	mov	r5,r20
 4014638:	400c9240 	call	400c924 <__ledf2>
 401463c:	103d7e0e 	bge	r2,zero,4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 4014640:	002b883a 	mov	r21,zero
 4014644:	0023883a 	mov	r17,zero
 4014648:	003efb06 	br	4014238 <__alt_mem_epcs_flash_controller_0+0xfb013238>
 401464c:	d8800717 	ldw	r2,28(sp)
 4014650:	003bd006 	br	4013594 <__alt_mem_epcs_flash_controller_0+0xfb012594>
 4014654:	d9000a17 	ldw	r4,40(sp)
 4014658:	d9800d17 	ldw	r6,52(sp)
 401465c:	dd400a15 	stw	r21,40(sp)
 4014660:	a905c83a 	sub	r2,r21,r4
 4014664:	308d883a 	add	r6,r6,r2
 4014668:	d9800d15 	stw	r6,52(sp)
 401466c:	002b883a 	mov	r21,zero
 4014670:	003e0606 	br	4013e8c <__alt_mem_epcs_flash_controller_0+0xfb012e8c>
 4014674:	9023883a 	mov	r17,r18
 4014678:	9829883a 	mov	r20,r19
 401467c:	04000084 	movi	r16,2
 4014680:	003c9206 	br	40138cc <__alt_mem_epcs_flash_controller_0+0xfb0128cc>
 4014684:	04000044 	movi	r16,1
 4014688:	dc000c15 	stw	r16,48(sp)
 401468c:	dc000615 	stw	r16,24(sp)
 4014690:	dc002215 	stw	r16,136(sp)
 4014694:	e0001115 	stw	zero,68(fp)
 4014698:	000b883a 	mov	r5,zero
 401469c:	003c6906 	br	4013844 <__alt_mem_epcs_flash_controller_0+0xfb012844>
 40146a0:	3021883a 	mov	r16,r6
 40146a4:	003ffb06 	br	4014694 <__alt_mem_epcs_flash_controller_0+0xfb013694>
 40146a8:	1000021e 	bne	r2,zero,40146b4 <_dtoa_r+0x11e0>
 40146ac:	4200004c 	andi	r8,r8,1
 40146b0:	403e7d1e 	bne	r8,zero,40140a8 <__alt_mem_epcs_flash_controller_0+0xfb0130a8>
 40146b4:	01000c04 	movi	r4,48
 40146b8:	00000106 	br	40146c0 <_dtoa_r+0x11ec>
 40146bc:	102f883a 	mov	r23,r2
 40146c0:	b8bfffc4 	addi	r2,r23,-1
 40146c4:	10c00007 	ldb	r3,0(r2)
 40146c8:	193ffc26 	beq	r3,r4,40146bc <__alt_mem_epcs_flash_controller_0+0xfb0136bc>
 40146cc:	003e8706 	br	40140ec <__alt_mem_epcs_flash_controller_0+0xfb0130ec>
 40146d0:	d8800517 	ldw	r2,20(sp)
 40146d4:	00a3c83a 	sub	r17,zero,r2
 40146d8:	8800a426 	beq	r17,zero,401496c <_dtoa_r+0x1498>
 40146dc:	888003cc 	andi	r2,r17,15
 40146e0:	100490fa 	slli	r2,r2,3
 40146e4:	00c10234 	movhi	r3,1032
 40146e8:	18d56504 	addi	r3,r3,21908
 40146ec:	1885883a 	add	r2,r3,r2
 40146f0:	11800017 	ldw	r6,0(r2)
 40146f4:	11c00117 	ldw	r7,4(r2)
 40146f8:	9009883a 	mov	r4,r18
 40146fc:	980b883a 	mov	r5,r19
 4014700:	8823d13a 	srai	r17,r17,4
 4014704:	400ca180 	call	400ca18 <__muldf3>
 4014708:	d8800f15 	stw	r2,60(sp)
 401470c:	d8c01015 	stw	r3,64(sp)
 4014710:	8800e826 	beq	r17,zero,4014ab4 <_dtoa_r+0x15e0>
 4014714:	05010234 	movhi	r20,1032
 4014718:	a5155b04 	addi	r20,r20,21868
 401471c:	04000084 	movi	r16,2
 4014720:	8980004c 	andi	r6,r17,1
 4014724:	1009883a 	mov	r4,r2
 4014728:	8823d07a 	srai	r17,r17,1
 401472c:	180b883a 	mov	r5,r3
 4014730:	30000426 	beq	r6,zero,4014744 <_dtoa_r+0x1270>
 4014734:	a1800017 	ldw	r6,0(r20)
 4014738:	a1c00117 	ldw	r7,4(r20)
 401473c:	84000044 	addi	r16,r16,1
 4014740:	400ca180 	call	400ca18 <__muldf3>
 4014744:	a5000204 	addi	r20,r20,8
 4014748:	883ff51e 	bne	r17,zero,4014720 <__alt_mem_epcs_flash_controller_0+0xfb013720>
 401474c:	d8800f15 	stw	r2,60(sp)
 4014750:	d8c01015 	stw	r3,64(sp)
 4014754:	003c7606 	br	4013930 <__alt_mem_epcs_flash_controller_0+0xfb012930>
 4014758:	00c00c04 	movi	r3,48
 401475c:	10c00005 	stb	r3,0(r2)
 4014760:	d8c00517 	ldw	r3,20(sp)
 4014764:	bd3fffc3 	ldbu	r20,-1(r23)
 4014768:	18c00044 	addi	r3,r3,1
 401476c:	d8c00515 	stw	r3,20(sp)
 4014770:	003db906 	br	4013e58 <__alt_mem_epcs_flash_controller_0+0xfb012e58>
 4014774:	89400117 	ldw	r5,4(r17)
 4014778:	e009883a 	mov	r4,fp
 401477c:	40160f40 	call	40160f4 <_Balloc>
 4014780:	89800417 	ldw	r6,16(r17)
 4014784:	89400304 	addi	r5,r17,12
 4014788:	11000304 	addi	r4,r2,12
 401478c:	31800084 	addi	r6,r6,2
 4014790:	318d883a 	add	r6,r6,r6
 4014794:	318d883a 	add	r6,r6,r6
 4014798:	1027883a 	mov	r19,r2
 401479c:	400e6e80 	call	400e6e8 <memcpy>
 40147a0:	01800044 	movi	r6,1
 40147a4:	980b883a 	mov	r5,r19
 40147a8:	e009883a 	mov	r4,fp
 40147ac:	40168740 	call	4016874 <__lshift>
 40147b0:	1029883a 	mov	r20,r2
 40147b4:	003ecc06 	br	40142e8 <__alt_mem_epcs_flash_controller_0+0xfb0132e8>
 40147b8:	00800e44 	movi	r2,57
 40147bc:	90809026 	beq	r18,r2,4014a00 <_dtoa_r+0x152c>
 40147c0:	92000044 	addi	r8,r18,1
 40147c4:	003f1f06 	br	4014444 <__alt_mem_epcs_flash_controller_0+0xfb013444>
 40147c8:	9011883a 	mov	r8,r18
 40147cc:	8825883a 	mov	r18,r17
 40147d0:	a023883a 	mov	r17,r20
 40147d4:	003e2906 	br	401407c <__alt_mem_epcs_flash_controller_0+0xfb01307c>
 40147d8:	002b883a 	mov	r21,zero
 40147dc:	0023883a 	mov	r17,zero
 40147e0:	003f5406 	br	4014534 <__alt_mem_epcs_flash_controller_0+0xfb013534>
 40147e4:	61bfffc4 	addi	r6,r12,-1
 40147e8:	300490fa 	slli	r2,r6,3
 40147ec:	00c10234 	movhi	r3,1032
 40147f0:	18d56504 	addi	r3,r3,21908
 40147f4:	1885883a 	add	r2,r3,r2
 40147f8:	11000017 	ldw	r4,0(r2)
 40147fc:	11400117 	ldw	r5,4(r2)
 4014800:	d8800717 	ldw	r2,28(sp)
 4014804:	880f883a 	mov	r7,r17
 4014808:	d9801215 	stw	r6,72(sp)
 401480c:	800d883a 	mov	r6,r16
 4014810:	db001615 	stw	r12,88(sp)
 4014814:	15c00044 	addi	r23,r2,1
 4014818:	400ca180 	call	400ca18 <__muldf3>
 401481c:	d9401017 	ldw	r5,64(sp)
 4014820:	d9000f17 	ldw	r4,60(sp)
 4014824:	d8c01515 	stw	r3,84(sp)
 4014828:	d8801415 	stw	r2,80(sp)
 401482c:	400da2c0 	call	400da2c <__fixdfsi>
 4014830:	1009883a 	mov	r4,r2
 4014834:	1021883a 	mov	r16,r2
 4014838:	400daac0 	call	400daac <__floatsidf>
 401483c:	d9000f17 	ldw	r4,60(sp)
 4014840:	d9401017 	ldw	r5,64(sp)
 4014844:	100d883a 	mov	r6,r2
 4014848:	180f883a 	mov	r7,r3
 401484c:	400d1300 	call	400d130 <__subdf3>
 4014850:	1829883a 	mov	r20,r3
 4014854:	d8c00717 	ldw	r3,28(sp)
 4014858:	84000c04 	addi	r16,r16,48
 401485c:	1023883a 	mov	r17,r2
 4014860:	1c000005 	stb	r16,0(r3)
 4014864:	db001617 	ldw	r12,88(sp)
 4014868:	00800044 	movi	r2,1
 401486c:	60802226 	beq	r12,r2,40148f8 <_dtoa_r+0x1424>
 4014870:	d9c00717 	ldw	r7,28(sp)
 4014874:	8805883a 	mov	r2,r17
 4014878:	b82b883a 	mov	r21,r23
 401487c:	3b19883a 	add	r12,r7,r12
 4014880:	6023883a 	mov	r17,r12
 4014884:	a007883a 	mov	r3,r20
 4014888:	dc800f15 	stw	r18,60(sp)
 401488c:	000d883a 	mov	r6,zero
 4014890:	01d00934 	movhi	r7,16420
 4014894:	1009883a 	mov	r4,r2
 4014898:	180b883a 	mov	r5,r3
 401489c:	400ca180 	call	400ca18 <__muldf3>
 40148a0:	180b883a 	mov	r5,r3
 40148a4:	1009883a 	mov	r4,r2
 40148a8:	1829883a 	mov	r20,r3
 40148ac:	1025883a 	mov	r18,r2
 40148b0:	400da2c0 	call	400da2c <__fixdfsi>
 40148b4:	1009883a 	mov	r4,r2
 40148b8:	1021883a 	mov	r16,r2
 40148bc:	400daac0 	call	400daac <__floatsidf>
 40148c0:	100d883a 	mov	r6,r2
 40148c4:	180f883a 	mov	r7,r3
 40148c8:	9009883a 	mov	r4,r18
 40148cc:	a00b883a 	mov	r5,r20
 40148d0:	84000c04 	addi	r16,r16,48
 40148d4:	400d1300 	call	400d130 <__subdf3>
 40148d8:	ad400044 	addi	r21,r21,1
 40148dc:	ac3fffc5 	stb	r16,-1(r21)
 40148e0:	ac7fea1e 	bne	r21,r17,401488c <__alt_mem_epcs_flash_controller_0+0xfb01388c>
 40148e4:	1023883a 	mov	r17,r2
 40148e8:	d8801217 	ldw	r2,72(sp)
 40148ec:	dc800f17 	ldw	r18,60(sp)
 40148f0:	1829883a 	mov	r20,r3
 40148f4:	b8af883a 	add	r23,r23,r2
 40148f8:	d9001417 	ldw	r4,80(sp)
 40148fc:	d9401517 	ldw	r5,84(sp)
 4014900:	000d883a 	mov	r6,zero
 4014904:	01cff834 	movhi	r7,16352
 4014908:	400b6b40 	call	400b6b4 <__adddf3>
 401490c:	880d883a 	mov	r6,r17
 4014910:	a00f883a 	mov	r7,r20
 4014914:	1009883a 	mov	r4,r2
 4014918:	180b883a 	mov	r5,r3
 401491c:	400c9240 	call	400c924 <__ledf2>
 4014920:	10003e0e 	bge	r2,zero,4014a1c <_dtoa_r+0x1548>
 4014924:	d9001317 	ldw	r4,76(sp)
 4014928:	bd3fffc3 	ldbu	r20,-1(r23)
 401492c:	d9000515 	stw	r4,20(sp)
 4014930:	003d3b06 	br	4013e20 <__alt_mem_epcs_flash_controller_0+0xfb012e20>
 4014934:	0027883a 	mov	r19,zero
 4014938:	003f1b06 	br	40145a8 <__alt_mem_epcs_flash_controller_0+0xfb0135a8>
 401493c:	d8800817 	ldw	r2,32(sp)
 4014940:	11e9c83a 	sub	r20,r2,r7
 4014944:	0005883a 	mov	r2,zero
 4014948:	003d5406 	br	4013e9c <__alt_mem_epcs_flash_controller_0+0xfb012e9c>
 401494c:	00800044 	movi	r2,1
 4014950:	003dc706 	br	4014070 <__alt_mem_epcs_flash_controller_0+0xfb013070>
 4014954:	d8c00217 	ldw	r3,8(sp)
 4014958:	00800d84 	movi	r2,54
 401495c:	dd400a17 	ldw	r21,40(sp)
 4014960:	10c5c83a 	sub	r2,r2,r3
 4014964:	dd000817 	ldw	r20,32(sp)
 4014968:	003d4c06 	br	4013e9c <__alt_mem_epcs_flash_controller_0+0xfb012e9c>
 401496c:	dc800f15 	stw	r18,60(sp)
 4014970:	dcc01015 	stw	r19,64(sp)
 4014974:	04000084 	movi	r16,2
 4014978:	003bed06 	br	4013930 <__alt_mem_epcs_flash_controller_0+0xfb012930>
 401497c:	d9000617 	ldw	r4,24(sp)
 4014980:	203f0d26 	beq	r4,zero,40145b8 <__alt_mem_epcs_flash_controller_0+0xfb0135b8>
 4014984:	d9800c17 	ldw	r6,48(sp)
 4014988:	01bcab0e 	bge	zero,r6,4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 401498c:	d9401017 	ldw	r5,64(sp)
 4014990:	d9000f17 	ldw	r4,60(sp)
 4014994:	000d883a 	mov	r6,zero
 4014998:	01d00934 	movhi	r7,16420
 401499c:	400ca180 	call	400ca18 <__muldf3>
 40149a0:	81000044 	addi	r4,r16,1
 40149a4:	d8800f15 	stw	r2,60(sp)
 40149a8:	d8c01015 	stw	r3,64(sp)
 40149ac:	400daac0 	call	400daac <__floatsidf>
 40149b0:	d9800f17 	ldw	r6,60(sp)
 40149b4:	d9c01017 	ldw	r7,64(sp)
 40149b8:	1009883a 	mov	r4,r2
 40149bc:	180b883a 	mov	r5,r3
 40149c0:	400ca180 	call	400ca18 <__muldf3>
 40149c4:	01d00734 	movhi	r7,16412
 40149c8:	000d883a 	mov	r6,zero
 40149cc:	1009883a 	mov	r4,r2
 40149d0:	180b883a 	mov	r5,r3
 40149d4:	400b6b40 	call	400b6b4 <__adddf3>
 40149d8:	d9c00517 	ldw	r7,20(sp)
 40149dc:	047f3034 	movhi	r17,64704
 40149e0:	1021883a 	mov	r16,r2
 40149e4:	39ffffc4 	addi	r7,r7,-1
 40149e8:	d9c01315 	stw	r7,76(sp)
 40149ec:	1c63883a 	add	r17,r3,r17
 40149f0:	db000c17 	ldw	r12,48(sp)
 40149f4:	003bea06 	br	40139a0 <__alt_mem_epcs_flash_controller_0+0xfb0129a0>
 40149f8:	dc000915 	stw	r16,36(sp)
 40149fc:	003e0e06 	br	4014238 <__alt_mem_epcs_flash_controller_0+0xfb013238>
 4014a00:	01000e44 	movi	r4,57
 4014a04:	8825883a 	mov	r18,r17
 4014a08:	9dc00044 	addi	r23,r19,1
 4014a0c:	99000005 	stb	r4,0(r19)
 4014a10:	a023883a 	mov	r17,r20
 4014a14:	dc000915 	stw	r16,36(sp)
 4014a18:	003da406 	br	40140ac <__alt_mem_epcs_flash_controller_0+0xfb0130ac>
 4014a1c:	d9801417 	ldw	r6,80(sp)
 4014a20:	d9c01517 	ldw	r7,84(sp)
 4014a24:	0009883a 	mov	r4,zero
 4014a28:	014ff834 	movhi	r5,16352
 4014a2c:	400d1300 	call	400d130 <__subdf3>
 4014a30:	880d883a 	mov	r6,r17
 4014a34:	a00f883a 	mov	r7,r20
 4014a38:	1009883a 	mov	r4,r2
 4014a3c:	180b883a 	mov	r5,r3
 4014a40:	400c8480 	call	400c848 <__gedf2>
 4014a44:	00bc7c0e 	bge	zero,r2,4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 4014a48:	01000c04 	movi	r4,48
 4014a4c:	00000106 	br	4014a54 <_dtoa_r+0x1580>
 4014a50:	102f883a 	mov	r23,r2
 4014a54:	b8bfffc4 	addi	r2,r23,-1
 4014a58:	10c00007 	ldb	r3,0(r2)
 4014a5c:	193ffc26 	beq	r3,r4,4014a50 <__alt_mem_epcs_flash_controller_0+0xfb013a50>
 4014a60:	d9801317 	ldw	r6,76(sp)
 4014a64:	d9800515 	stw	r6,20(sp)
 4014a68:	003c4406 	br	4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4014a6c:	d9801317 	ldw	r6,76(sp)
 4014a70:	d9800515 	stw	r6,20(sp)
 4014a74:	003cea06 	br	4013e20 <__alt_mem_epcs_flash_controller_0+0xfb012e20>
 4014a78:	dd800f17 	ldw	r22,60(sp)
 4014a7c:	dcc01017 	ldw	r19,64(sp)
 4014a80:	dc801217 	ldw	r18,72(sp)
 4014a84:	003c6c06 	br	4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 4014a88:	903e031e 	bne	r18,zero,4014298 <__alt_mem_epcs_flash_controller_0+0xfb013298>
 4014a8c:	003ebb06 	br	401457c <__alt_mem_epcs_flash_controller_0+0xfb01357c>
 4014a90:	103e6c1e 	bne	r2,zero,4014444 <__alt_mem_epcs_flash_controller_0+0xfb013444>
 4014a94:	4080004c 	andi	r2,r8,1
 4014a98:	103e6a26 	beq	r2,zero,4014444 <__alt_mem_epcs_flash_controller_0+0xfb013444>
 4014a9c:	003e6606 	br	4014438 <__alt_mem_epcs_flash_controller_0+0xfb013438>
 4014aa0:	d8c00317 	ldw	r3,12(sp)
 4014aa4:	00800084 	movi	r2,2
 4014aa8:	10c02916 	blt	r2,r3,4014b50 <_dtoa_r+0x167c>
 4014aac:	d9000c17 	ldw	r4,48(sp)
 4014ab0:	003e8806 	br	40144d4 <__alt_mem_epcs_flash_controller_0+0xfb0134d4>
 4014ab4:	04000084 	movi	r16,2
 4014ab8:	003b9d06 	br	4013930 <__alt_mem_epcs_flash_controller_0+0xfb012930>
 4014abc:	d9001317 	ldw	r4,76(sp)
 4014ac0:	d9000515 	stw	r4,20(sp)
 4014ac4:	003cd606 	br	4013e20 <__alt_mem_epcs_flash_controller_0+0xfb012e20>
 4014ac8:	d8801317 	ldw	r2,76(sp)
 4014acc:	d8800515 	stw	r2,20(sp)
 4014ad0:	003c2a06 	br	4013b7c <__alt_mem_epcs_flash_controller_0+0xfb012b7c>
 4014ad4:	d9800317 	ldw	r6,12(sp)
 4014ad8:	00800084 	movi	r2,2
 4014adc:	11801516 	blt	r2,r6,4014b34 <_dtoa_r+0x1660>
 4014ae0:	d9c00c17 	ldw	r7,48(sp)
 4014ae4:	d9c00615 	stw	r7,24(sp)
 4014ae8:	003df706 	br	40142c8 <__alt_mem_epcs_flash_controller_0+0xfb0132c8>
 4014aec:	193d3926 	beq	r3,r4,4013fd4 <__alt_mem_epcs_flash_controller_0+0xfb012fd4>
 4014af0:	00c00f04 	movi	r3,60
 4014af4:	1885c83a 	sub	r2,r3,r2
 4014af8:	003ddf06 	br	4014278 <__alt_mem_epcs_flash_controller_0+0xfb013278>
 4014afc:	e009883a 	mov	r4,fp
 4014b00:	e0001115 	stw	zero,68(fp)
 4014b04:	000b883a 	mov	r5,zero
 4014b08:	40160f40 	call	40160f4 <_Balloc>
 4014b0c:	d8800715 	stw	r2,28(sp)
 4014b10:	d8c00717 	ldw	r3,28(sp)
 4014b14:	00bfffc4 	movi	r2,-1
 4014b18:	01000044 	movi	r4,1
 4014b1c:	d8800c15 	stw	r2,48(sp)
 4014b20:	e0c01015 	stw	r3,64(fp)
 4014b24:	d9000b15 	stw	r4,44(sp)
 4014b28:	d8800615 	stw	r2,24(sp)
 4014b2c:	d8002215 	stw	zero,136(sp)
 4014b30:	003c4106 	br	4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 4014b34:	d8c00c17 	ldw	r3,48(sp)
 4014b38:	d8c00615 	stw	r3,24(sp)
 4014b3c:	003e7006 	br	4014500 <__alt_mem_epcs_flash_controller_0+0xfb013500>
 4014b40:	04400044 	movi	r17,1
 4014b44:	003b2006 	br	40137c8 <__alt_mem_epcs_flash_controller_0+0xfb0127c8>
 4014b48:	000b883a 	mov	r5,zero
 4014b4c:	003b3d06 	br	4013844 <__alt_mem_epcs_flash_controller_0+0xfb012844>
 4014b50:	d8800c17 	ldw	r2,48(sp)
 4014b54:	d8800615 	stw	r2,24(sp)
 4014b58:	003e6906 	br	4014500 <__alt_mem_epcs_flash_controller_0+0xfb013500>

04014b5c <__sflush_r>:
 4014b5c:	2880030b 	ldhu	r2,12(r5)
 4014b60:	defffb04 	addi	sp,sp,-20
 4014b64:	dcc00315 	stw	r19,12(sp)
 4014b68:	dc400115 	stw	r17,4(sp)
 4014b6c:	dfc00415 	stw	ra,16(sp)
 4014b70:	dc800215 	stw	r18,8(sp)
 4014b74:	dc000015 	stw	r16,0(sp)
 4014b78:	10c0020c 	andi	r3,r2,8
 4014b7c:	2823883a 	mov	r17,r5
 4014b80:	2027883a 	mov	r19,r4
 4014b84:	1800311e 	bne	r3,zero,4014c4c <__sflush_r+0xf0>
 4014b88:	28c00117 	ldw	r3,4(r5)
 4014b8c:	10820014 	ori	r2,r2,2048
 4014b90:	2880030d 	sth	r2,12(r5)
 4014b94:	00c04b0e 	bge	zero,r3,4014cc4 <__sflush_r+0x168>
 4014b98:	8a000a17 	ldw	r8,40(r17)
 4014b9c:	40002326 	beq	r8,zero,4014c2c <__sflush_r+0xd0>
 4014ba0:	9c000017 	ldw	r16,0(r19)
 4014ba4:	10c4000c 	andi	r3,r2,4096
 4014ba8:	98000015 	stw	zero,0(r19)
 4014bac:	18004826 	beq	r3,zero,4014cd0 <__sflush_r+0x174>
 4014bb0:	89801417 	ldw	r6,80(r17)
 4014bb4:	10c0010c 	andi	r3,r2,4
 4014bb8:	18000626 	beq	r3,zero,4014bd4 <__sflush_r+0x78>
 4014bbc:	88c00117 	ldw	r3,4(r17)
 4014bc0:	88800c17 	ldw	r2,48(r17)
 4014bc4:	30cdc83a 	sub	r6,r6,r3
 4014bc8:	10000226 	beq	r2,zero,4014bd4 <__sflush_r+0x78>
 4014bcc:	88800f17 	ldw	r2,60(r17)
 4014bd0:	308dc83a 	sub	r6,r6,r2
 4014bd4:	89400717 	ldw	r5,28(r17)
 4014bd8:	000f883a 	mov	r7,zero
 4014bdc:	9809883a 	mov	r4,r19
 4014be0:	403ee83a 	callr	r8
 4014be4:	00ffffc4 	movi	r3,-1
 4014be8:	10c04426 	beq	r2,r3,4014cfc <__sflush_r+0x1a0>
 4014bec:	88c0030b 	ldhu	r3,12(r17)
 4014bf0:	89000417 	ldw	r4,16(r17)
 4014bf4:	88000115 	stw	zero,4(r17)
 4014bf8:	197dffcc 	andi	r5,r3,63487
 4014bfc:	8940030d 	sth	r5,12(r17)
 4014c00:	89000015 	stw	r4,0(r17)
 4014c04:	18c4000c 	andi	r3,r3,4096
 4014c08:	18002c1e 	bne	r3,zero,4014cbc <__sflush_r+0x160>
 4014c0c:	89400c17 	ldw	r5,48(r17)
 4014c10:	9c000015 	stw	r16,0(r19)
 4014c14:	28000526 	beq	r5,zero,4014c2c <__sflush_r+0xd0>
 4014c18:	88801004 	addi	r2,r17,64
 4014c1c:	28800226 	beq	r5,r2,4014c28 <__sflush_r+0xcc>
 4014c20:	9809883a 	mov	r4,r19
 4014c24:	40152c80 	call	40152c8 <_free_r>
 4014c28:	88000c15 	stw	zero,48(r17)
 4014c2c:	0005883a 	mov	r2,zero
 4014c30:	dfc00417 	ldw	ra,16(sp)
 4014c34:	dcc00317 	ldw	r19,12(sp)
 4014c38:	dc800217 	ldw	r18,8(sp)
 4014c3c:	dc400117 	ldw	r17,4(sp)
 4014c40:	dc000017 	ldw	r16,0(sp)
 4014c44:	dec00504 	addi	sp,sp,20
 4014c48:	f800283a 	ret
 4014c4c:	2c800417 	ldw	r18,16(r5)
 4014c50:	903ff626 	beq	r18,zero,4014c2c <__alt_mem_epcs_flash_controller_0+0xfb013c2c>
 4014c54:	2c000017 	ldw	r16,0(r5)
 4014c58:	108000cc 	andi	r2,r2,3
 4014c5c:	2c800015 	stw	r18,0(r5)
 4014c60:	84a1c83a 	sub	r16,r16,r18
 4014c64:	1000131e 	bne	r2,zero,4014cb4 <__sflush_r+0x158>
 4014c68:	28800517 	ldw	r2,20(r5)
 4014c6c:	88800215 	stw	r2,8(r17)
 4014c70:	04000316 	blt	zero,r16,4014c80 <__sflush_r+0x124>
 4014c74:	003fed06 	br	4014c2c <__alt_mem_epcs_flash_controller_0+0xfb013c2c>
 4014c78:	90a5883a 	add	r18,r18,r2
 4014c7c:	043feb0e 	bge	zero,r16,4014c2c <__alt_mem_epcs_flash_controller_0+0xfb013c2c>
 4014c80:	88800917 	ldw	r2,36(r17)
 4014c84:	89400717 	ldw	r5,28(r17)
 4014c88:	800f883a 	mov	r7,r16
 4014c8c:	900d883a 	mov	r6,r18
 4014c90:	9809883a 	mov	r4,r19
 4014c94:	103ee83a 	callr	r2
 4014c98:	80a1c83a 	sub	r16,r16,r2
 4014c9c:	00bff616 	blt	zero,r2,4014c78 <__alt_mem_epcs_flash_controller_0+0xfb013c78>
 4014ca0:	88c0030b 	ldhu	r3,12(r17)
 4014ca4:	00bfffc4 	movi	r2,-1
 4014ca8:	18c01014 	ori	r3,r3,64
 4014cac:	88c0030d 	sth	r3,12(r17)
 4014cb0:	003fdf06 	br	4014c30 <__alt_mem_epcs_flash_controller_0+0xfb013c30>
 4014cb4:	0005883a 	mov	r2,zero
 4014cb8:	003fec06 	br	4014c6c <__alt_mem_epcs_flash_controller_0+0xfb013c6c>
 4014cbc:	88801415 	stw	r2,80(r17)
 4014cc0:	003fd206 	br	4014c0c <__alt_mem_epcs_flash_controller_0+0xfb013c0c>
 4014cc4:	28c00f17 	ldw	r3,60(r5)
 4014cc8:	00ffb316 	blt	zero,r3,4014b98 <__alt_mem_epcs_flash_controller_0+0xfb013b98>
 4014ccc:	003fd706 	br	4014c2c <__alt_mem_epcs_flash_controller_0+0xfb013c2c>
 4014cd0:	89400717 	ldw	r5,28(r17)
 4014cd4:	000d883a 	mov	r6,zero
 4014cd8:	01c00044 	movi	r7,1
 4014cdc:	9809883a 	mov	r4,r19
 4014ce0:	403ee83a 	callr	r8
 4014ce4:	100d883a 	mov	r6,r2
 4014ce8:	00bfffc4 	movi	r2,-1
 4014cec:	30801426 	beq	r6,r2,4014d40 <__sflush_r+0x1e4>
 4014cf0:	8880030b 	ldhu	r2,12(r17)
 4014cf4:	8a000a17 	ldw	r8,40(r17)
 4014cf8:	003fae06 	br	4014bb4 <__alt_mem_epcs_flash_controller_0+0xfb013bb4>
 4014cfc:	98c00017 	ldw	r3,0(r19)
 4014d00:	183fba26 	beq	r3,zero,4014bec <__alt_mem_epcs_flash_controller_0+0xfb013bec>
 4014d04:	01000744 	movi	r4,29
 4014d08:	19000626 	beq	r3,r4,4014d24 <__sflush_r+0x1c8>
 4014d0c:	01000584 	movi	r4,22
 4014d10:	19000426 	beq	r3,r4,4014d24 <__sflush_r+0x1c8>
 4014d14:	88c0030b 	ldhu	r3,12(r17)
 4014d18:	18c01014 	ori	r3,r3,64
 4014d1c:	88c0030d 	sth	r3,12(r17)
 4014d20:	003fc306 	br	4014c30 <__alt_mem_epcs_flash_controller_0+0xfb013c30>
 4014d24:	8880030b 	ldhu	r2,12(r17)
 4014d28:	88c00417 	ldw	r3,16(r17)
 4014d2c:	88000115 	stw	zero,4(r17)
 4014d30:	10bdffcc 	andi	r2,r2,63487
 4014d34:	8880030d 	sth	r2,12(r17)
 4014d38:	88c00015 	stw	r3,0(r17)
 4014d3c:	003fb306 	br	4014c0c <__alt_mem_epcs_flash_controller_0+0xfb013c0c>
 4014d40:	98800017 	ldw	r2,0(r19)
 4014d44:	103fea26 	beq	r2,zero,4014cf0 <__alt_mem_epcs_flash_controller_0+0xfb013cf0>
 4014d48:	00c00744 	movi	r3,29
 4014d4c:	10c00226 	beq	r2,r3,4014d58 <__sflush_r+0x1fc>
 4014d50:	00c00584 	movi	r3,22
 4014d54:	10c0031e 	bne	r2,r3,4014d64 <__sflush_r+0x208>
 4014d58:	9c000015 	stw	r16,0(r19)
 4014d5c:	0005883a 	mov	r2,zero
 4014d60:	003fb306 	br	4014c30 <__alt_mem_epcs_flash_controller_0+0xfb013c30>
 4014d64:	88c0030b 	ldhu	r3,12(r17)
 4014d68:	3005883a 	mov	r2,r6
 4014d6c:	18c01014 	ori	r3,r3,64
 4014d70:	88c0030d 	sth	r3,12(r17)
 4014d74:	003fae06 	br	4014c30 <__alt_mem_epcs_flash_controller_0+0xfb013c30>

04014d78 <_fflush_r>:
 4014d78:	defffd04 	addi	sp,sp,-12
 4014d7c:	dc000115 	stw	r16,4(sp)
 4014d80:	dfc00215 	stw	ra,8(sp)
 4014d84:	2021883a 	mov	r16,r4
 4014d88:	20000226 	beq	r4,zero,4014d94 <_fflush_r+0x1c>
 4014d8c:	20800e17 	ldw	r2,56(r4)
 4014d90:	10000c26 	beq	r2,zero,4014dc4 <_fflush_r+0x4c>
 4014d94:	2880030f 	ldh	r2,12(r5)
 4014d98:	1000051e 	bne	r2,zero,4014db0 <_fflush_r+0x38>
 4014d9c:	0005883a 	mov	r2,zero
 4014da0:	dfc00217 	ldw	ra,8(sp)
 4014da4:	dc000117 	ldw	r16,4(sp)
 4014da8:	dec00304 	addi	sp,sp,12
 4014dac:	f800283a 	ret
 4014db0:	8009883a 	mov	r4,r16
 4014db4:	dfc00217 	ldw	ra,8(sp)
 4014db8:	dc000117 	ldw	r16,4(sp)
 4014dbc:	dec00304 	addi	sp,sp,12
 4014dc0:	4014b5c1 	jmpi	4014b5c <__sflush_r>
 4014dc4:	d9400015 	stw	r5,0(sp)
 4014dc8:	40151540 	call	4015154 <__sinit>
 4014dcc:	d9400017 	ldw	r5,0(sp)
 4014dd0:	003ff006 	br	4014d94 <__alt_mem_epcs_flash_controller_0+0xfb013d94>

04014dd4 <fflush>:
 4014dd4:	20000526 	beq	r4,zero,4014dec <fflush+0x18>
 4014dd8:	008103f4 	movhi	r2,1039
 4014ddc:	108bf604 	addi	r2,r2,12248
 4014de0:	200b883a 	mov	r5,r4
 4014de4:	11000017 	ldw	r4,0(r2)
 4014de8:	4014d781 	jmpi	4014d78 <_fflush_r>
 4014dec:	008103f4 	movhi	r2,1039
 4014df0:	108bf504 	addi	r2,r2,12244
 4014df4:	11000017 	ldw	r4,0(r2)
 4014df8:	01410074 	movhi	r5,1025
 4014dfc:	29535e04 	addi	r5,r5,19832
 4014e00:	4015b581 	jmpi	4015b58 <_fwalk_reent>

04014e04 <__fp_unlock>:
 4014e04:	0005883a 	mov	r2,zero
 4014e08:	f800283a 	ret

04014e0c <_cleanup_r>:
 4014e0c:	014100b4 	movhi	r5,1026
 4014e10:	29690e04 	addi	r5,r5,-23496
 4014e14:	4015b581 	jmpi	4015b58 <_fwalk_reent>

04014e18 <__sinit.part.1>:
 4014e18:	defff704 	addi	sp,sp,-36
 4014e1c:	00c10074 	movhi	r3,1025
 4014e20:	dfc00815 	stw	ra,32(sp)
 4014e24:	ddc00715 	stw	r23,28(sp)
 4014e28:	dd800615 	stw	r22,24(sp)
 4014e2c:	dd400515 	stw	r21,20(sp)
 4014e30:	dd000415 	stw	r20,16(sp)
 4014e34:	dcc00315 	stw	r19,12(sp)
 4014e38:	dc800215 	stw	r18,8(sp)
 4014e3c:	dc400115 	stw	r17,4(sp)
 4014e40:	dc000015 	stw	r16,0(sp)
 4014e44:	18d38304 	addi	r3,r3,19980
 4014e48:	24000117 	ldw	r16,4(r4)
 4014e4c:	20c00f15 	stw	r3,60(r4)
 4014e50:	2080bb04 	addi	r2,r4,748
 4014e54:	00c000c4 	movi	r3,3
 4014e58:	20c0b915 	stw	r3,740(r4)
 4014e5c:	2080ba15 	stw	r2,744(r4)
 4014e60:	2000b815 	stw	zero,736(r4)
 4014e64:	05c00204 	movi	r23,8
 4014e68:	00800104 	movi	r2,4
 4014e6c:	2025883a 	mov	r18,r4
 4014e70:	b80d883a 	mov	r6,r23
 4014e74:	81001704 	addi	r4,r16,92
 4014e78:	000b883a 	mov	r5,zero
 4014e7c:	80000015 	stw	zero,0(r16)
 4014e80:	80000115 	stw	zero,4(r16)
 4014e84:	80000215 	stw	zero,8(r16)
 4014e88:	8080030d 	sth	r2,12(r16)
 4014e8c:	80001915 	stw	zero,100(r16)
 4014e90:	8000038d 	sth	zero,14(r16)
 4014e94:	80000415 	stw	zero,16(r16)
 4014e98:	80000515 	stw	zero,20(r16)
 4014e9c:	80000615 	stw	zero,24(r16)
 4014ea0:	400e8300 	call	400e830 <memset>
 4014ea4:	05810074 	movhi	r22,1025
 4014ea8:	94400217 	ldw	r17,8(r18)
 4014eac:	05410074 	movhi	r21,1025
 4014eb0:	05010074 	movhi	r20,1025
 4014eb4:	04c10074 	movhi	r19,1025
 4014eb8:	b59d9504 	addi	r22,r22,30292
 4014ebc:	ad5dac04 	addi	r21,r21,30384
 4014ec0:	a51dcb04 	addi	r20,r20,30508
 4014ec4:	9cdde204 	addi	r19,r19,30600
 4014ec8:	85800815 	stw	r22,32(r16)
 4014ecc:	85400915 	stw	r21,36(r16)
 4014ed0:	85000a15 	stw	r20,40(r16)
 4014ed4:	84c00b15 	stw	r19,44(r16)
 4014ed8:	84000715 	stw	r16,28(r16)
 4014edc:	00800284 	movi	r2,10
 4014ee0:	8880030d 	sth	r2,12(r17)
 4014ee4:	00800044 	movi	r2,1
 4014ee8:	b80d883a 	mov	r6,r23
 4014eec:	89001704 	addi	r4,r17,92
 4014ef0:	000b883a 	mov	r5,zero
 4014ef4:	88000015 	stw	zero,0(r17)
 4014ef8:	88000115 	stw	zero,4(r17)
 4014efc:	88000215 	stw	zero,8(r17)
 4014f00:	88001915 	stw	zero,100(r17)
 4014f04:	8880038d 	sth	r2,14(r17)
 4014f08:	88000415 	stw	zero,16(r17)
 4014f0c:	88000515 	stw	zero,20(r17)
 4014f10:	88000615 	stw	zero,24(r17)
 4014f14:	400e8300 	call	400e830 <memset>
 4014f18:	94000317 	ldw	r16,12(r18)
 4014f1c:	00800484 	movi	r2,18
 4014f20:	8c400715 	stw	r17,28(r17)
 4014f24:	8d800815 	stw	r22,32(r17)
 4014f28:	8d400915 	stw	r21,36(r17)
 4014f2c:	8d000a15 	stw	r20,40(r17)
 4014f30:	8cc00b15 	stw	r19,44(r17)
 4014f34:	8080030d 	sth	r2,12(r16)
 4014f38:	00800084 	movi	r2,2
 4014f3c:	80000015 	stw	zero,0(r16)
 4014f40:	80000115 	stw	zero,4(r16)
 4014f44:	80000215 	stw	zero,8(r16)
 4014f48:	80001915 	stw	zero,100(r16)
 4014f4c:	8080038d 	sth	r2,14(r16)
 4014f50:	80000415 	stw	zero,16(r16)
 4014f54:	80000515 	stw	zero,20(r16)
 4014f58:	80000615 	stw	zero,24(r16)
 4014f5c:	b80d883a 	mov	r6,r23
 4014f60:	000b883a 	mov	r5,zero
 4014f64:	81001704 	addi	r4,r16,92
 4014f68:	400e8300 	call	400e830 <memset>
 4014f6c:	00800044 	movi	r2,1
 4014f70:	84000715 	stw	r16,28(r16)
 4014f74:	85800815 	stw	r22,32(r16)
 4014f78:	85400915 	stw	r21,36(r16)
 4014f7c:	85000a15 	stw	r20,40(r16)
 4014f80:	84c00b15 	stw	r19,44(r16)
 4014f84:	90800e15 	stw	r2,56(r18)
 4014f88:	dfc00817 	ldw	ra,32(sp)
 4014f8c:	ddc00717 	ldw	r23,28(sp)
 4014f90:	dd800617 	ldw	r22,24(sp)
 4014f94:	dd400517 	ldw	r21,20(sp)
 4014f98:	dd000417 	ldw	r20,16(sp)
 4014f9c:	dcc00317 	ldw	r19,12(sp)
 4014fa0:	dc800217 	ldw	r18,8(sp)
 4014fa4:	dc400117 	ldw	r17,4(sp)
 4014fa8:	dc000017 	ldw	r16,0(sp)
 4014fac:	dec00904 	addi	sp,sp,36
 4014fb0:	f800283a 	ret

04014fb4 <__fp_lock>:
 4014fb4:	0005883a 	mov	r2,zero
 4014fb8:	f800283a 	ret

04014fbc <__sfmoreglue>:
 4014fbc:	defffc04 	addi	sp,sp,-16
 4014fc0:	dc400115 	stw	r17,4(sp)
 4014fc4:	2c7fffc4 	addi	r17,r5,-1
 4014fc8:	8c401a24 	muli	r17,r17,104
 4014fcc:	dc800215 	stw	r18,8(sp)
 4014fd0:	2825883a 	mov	r18,r5
 4014fd4:	89401d04 	addi	r5,r17,116
 4014fd8:	dc000015 	stw	r16,0(sp)
 4014fdc:	dfc00315 	stw	ra,12(sp)
 4014fe0:	400dedc0 	call	400dedc <_malloc_r>
 4014fe4:	1021883a 	mov	r16,r2
 4014fe8:	10000726 	beq	r2,zero,4015008 <__sfmoreglue+0x4c>
 4014fec:	11000304 	addi	r4,r2,12
 4014ff0:	10000015 	stw	zero,0(r2)
 4014ff4:	14800115 	stw	r18,4(r2)
 4014ff8:	11000215 	stw	r4,8(r2)
 4014ffc:	89801a04 	addi	r6,r17,104
 4015000:	000b883a 	mov	r5,zero
 4015004:	400e8300 	call	400e830 <memset>
 4015008:	8005883a 	mov	r2,r16
 401500c:	dfc00317 	ldw	ra,12(sp)
 4015010:	dc800217 	ldw	r18,8(sp)
 4015014:	dc400117 	ldw	r17,4(sp)
 4015018:	dc000017 	ldw	r16,0(sp)
 401501c:	dec00404 	addi	sp,sp,16
 4015020:	f800283a 	ret

04015024 <__sfp>:
 4015024:	defffb04 	addi	sp,sp,-20
 4015028:	dc000015 	stw	r16,0(sp)
 401502c:	040103f4 	movhi	r16,1039
 4015030:	840bf504 	addi	r16,r16,12244
 4015034:	dcc00315 	stw	r19,12(sp)
 4015038:	2027883a 	mov	r19,r4
 401503c:	81000017 	ldw	r4,0(r16)
 4015040:	dfc00415 	stw	ra,16(sp)
 4015044:	dc800215 	stw	r18,8(sp)
 4015048:	20800e17 	ldw	r2,56(r4)
 401504c:	dc400115 	stw	r17,4(sp)
 4015050:	1000021e 	bne	r2,zero,401505c <__sfp+0x38>
 4015054:	4014e180 	call	4014e18 <__sinit.part.1>
 4015058:	81000017 	ldw	r4,0(r16)
 401505c:	2480b804 	addi	r18,r4,736
 4015060:	047fffc4 	movi	r17,-1
 4015064:	91000117 	ldw	r4,4(r18)
 4015068:	94000217 	ldw	r16,8(r18)
 401506c:	213fffc4 	addi	r4,r4,-1
 4015070:	20000a16 	blt	r4,zero,401509c <__sfp+0x78>
 4015074:	8080030f 	ldh	r2,12(r16)
 4015078:	10000c26 	beq	r2,zero,40150ac <__sfp+0x88>
 401507c:	80c01d04 	addi	r3,r16,116
 4015080:	00000206 	br	401508c <__sfp+0x68>
 4015084:	18bfe60f 	ldh	r2,-104(r3)
 4015088:	10000826 	beq	r2,zero,40150ac <__sfp+0x88>
 401508c:	213fffc4 	addi	r4,r4,-1
 4015090:	1c3ffd04 	addi	r16,r3,-12
 4015094:	18c01a04 	addi	r3,r3,104
 4015098:	247ffa1e 	bne	r4,r17,4015084 <__alt_mem_epcs_flash_controller_0+0xfb014084>
 401509c:	90800017 	ldw	r2,0(r18)
 40150a0:	10001d26 	beq	r2,zero,4015118 <__sfp+0xf4>
 40150a4:	1025883a 	mov	r18,r2
 40150a8:	003fee06 	br	4015064 <__alt_mem_epcs_flash_controller_0+0xfb014064>
 40150ac:	00bfffc4 	movi	r2,-1
 40150b0:	8080038d 	sth	r2,14(r16)
 40150b4:	00800044 	movi	r2,1
 40150b8:	8080030d 	sth	r2,12(r16)
 40150bc:	80001915 	stw	zero,100(r16)
 40150c0:	80000015 	stw	zero,0(r16)
 40150c4:	80000215 	stw	zero,8(r16)
 40150c8:	80000115 	stw	zero,4(r16)
 40150cc:	80000415 	stw	zero,16(r16)
 40150d0:	80000515 	stw	zero,20(r16)
 40150d4:	80000615 	stw	zero,24(r16)
 40150d8:	01800204 	movi	r6,8
 40150dc:	000b883a 	mov	r5,zero
 40150e0:	81001704 	addi	r4,r16,92
 40150e4:	400e8300 	call	400e830 <memset>
 40150e8:	8005883a 	mov	r2,r16
 40150ec:	80000c15 	stw	zero,48(r16)
 40150f0:	80000d15 	stw	zero,52(r16)
 40150f4:	80001115 	stw	zero,68(r16)
 40150f8:	80001215 	stw	zero,72(r16)
 40150fc:	dfc00417 	ldw	ra,16(sp)
 4015100:	dcc00317 	ldw	r19,12(sp)
 4015104:	dc800217 	ldw	r18,8(sp)
 4015108:	dc400117 	ldw	r17,4(sp)
 401510c:	dc000017 	ldw	r16,0(sp)
 4015110:	dec00504 	addi	sp,sp,20
 4015114:	f800283a 	ret
 4015118:	01400104 	movi	r5,4
 401511c:	9809883a 	mov	r4,r19
 4015120:	4014fbc0 	call	4014fbc <__sfmoreglue>
 4015124:	90800015 	stw	r2,0(r18)
 4015128:	103fde1e 	bne	r2,zero,40150a4 <__alt_mem_epcs_flash_controller_0+0xfb0140a4>
 401512c:	00800304 	movi	r2,12
 4015130:	98800015 	stw	r2,0(r19)
 4015134:	0005883a 	mov	r2,zero
 4015138:	003ff006 	br	40150fc <__alt_mem_epcs_flash_controller_0+0xfb0140fc>

0401513c <_cleanup>:
 401513c:	008103f4 	movhi	r2,1039
 4015140:	108bf504 	addi	r2,r2,12244
 4015144:	11000017 	ldw	r4,0(r2)
 4015148:	014100b4 	movhi	r5,1026
 401514c:	29690e04 	addi	r5,r5,-23496
 4015150:	4015b581 	jmpi	4015b58 <_fwalk_reent>

04015154 <__sinit>:
 4015154:	20800e17 	ldw	r2,56(r4)
 4015158:	10000126 	beq	r2,zero,4015160 <__sinit+0xc>
 401515c:	f800283a 	ret
 4015160:	4014e181 	jmpi	4014e18 <__sinit.part.1>

04015164 <__sfp_lock_acquire>:
 4015164:	f800283a 	ret

04015168 <__sfp_lock_release>:
 4015168:	f800283a 	ret

0401516c <__sinit_lock_acquire>:
 401516c:	f800283a 	ret

04015170 <__sinit_lock_release>:
 4015170:	f800283a 	ret

04015174 <__fp_lock_all>:
 4015174:	008103f4 	movhi	r2,1039
 4015178:	108bf604 	addi	r2,r2,12248
 401517c:	11000017 	ldw	r4,0(r2)
 4015180:	01410074 	movhi	r5,1025
 4015184:	2953ed04 	addi	r5,r5,20404
 4015188:	4015a941 	jmpi	4015a94 <_fwalk>

0401518c <__fp_unlock_all>:
 401518c:	008103f4 	movhi	r2,1039
 4015190:	108bf604 	addi	r2,r2,12248
 4015194:	11000017 	ldw	r4,0(r2)
 4015198:	01410074 	movhi	r5,1025
 401519c:	29538104 	addi	r5,r5,19972
 40151a0:	4015a941 	jmpi	4015a94 <_fwalk>

040151a4 <_malloc_trim_r>:
 40151a4:	defffb04 	addi	sp,sp,-20
 40151a8:	dcc00315 	stw	r19,12(sp)
 40151ac:	04c103f4 	movhi	r19,1039
 40151b0:	dc800215 	stw	r18,8(sp)
 40151b4:	dc400115 	stw	r17,4(sp)
 40151b8:	dc000015 	stw	r16,0(sp)
 40151bc:	dfc00415 	stw	ra,16(sp)
 40151c0:	2821883a 	mov	r16,r5
 40151c4:	9cc61d04 	addi	r19,r19,6260
 40151c8:	2025883a 	mov	r18,r4
 40151cc:	401bf4c0 	call	401bf4c <__malloc_lock>
 40151d0:	98800217 	ldw	r2,8(r19)
 40151d4:	14400117 	ldw	r17,4(r2)
 40151d8:	00bfff04 	movi	r2,-4
 40151dc:	88a2703a 	and	r17,r17,r2
 40151e0:	8c21c83a 	sub	r16,r17,r16
 40151e4:	8403fbc4 	addi	r16,r16,4079
 40151e8:	8020d33a 	srli	r16,r16,12
 40151ec:	0083ffc4 	movi	r2,4095
 40151f0:	843fffc4 	addi	r16,r16,-1
 40151f4:	8020933a 	slli	r16,r16,12
 40151f8:	1400060e 	bge	r2,r16,4015214 <_malloc_trim_r+0x70>
 40151fc:	000b883a 	mov	r5,zero
 4015200:	9009883a 	mov	r4,r18
 4015204:	400ea980 	call	400ea98 <_sbrk_r>
 4015208:	98c00217 	ldw	r3,8(r19)
 401520c:	1c47883a 	add	r3,r3,r17
 4015210:	10c00a26 	beq	r2,r3,401523c <_malloc_trim_r+0x98>
 4015214:	9009883a 	mov	r4,r18
 4015218:	401bf700 	call	401bf70 <__malloc_unlock>
 401521c:	0005883a 	mov	r2,zero
 4015220:	dfc00417 	ldw	ra,16(sp)
 4015224:	dcc00317 	ldw	r19,12(sp)
 4015228:	dc800217 	ldw	r18,8(sp)
 401522c:	dc400117 	ldw	r17,4(sp)
 4015230:	dc000017 	ldw	r16,0(sp)
 4015234:	dec00504 	addi	sp,sp,20
 4015238:	f800283a 	ret
 401523c:	040bc83a 	sub	r5,zero,r16
 4015240:	9009883a 	mov	r4,r18
 4015244:	400ea980 	call	400ea98 <_sbrk_r>
 4015248:	00ffffc4 	movi	r3,-1
 401524c:	10c00d26 	beq	r2,r3,4015284 <_malloc_trim_r+0xe0>
 4015250:	00c103f4 	movhi	r3,1039
 4015254:	18cc1504 	addi	r3,r3,12372
 4015258:	18800017 	ldw	r2,0(r3)
 401525c:	99000217 	ldw	r4,8(r19)
 4015260:	8c23c83a 	sub	r17,r17,r16
 4015264:	8c400054 	ori	r17,r17,1
 4015268:	1421c83a 	sub	r16,r2,r16
 401526c:	24400115 	stw	r17,4(r4)
 4015270:	9009883a 	mov	r4,r18
 4015274:	1c000015 	stw	r16,0(r3)
 4015278:	401bf700 	call	401bf70 <__malloc_unlock>
 401527c:	00800044 	movi	r2,1
 4015280:	003fe706 	br	4015220 <__alt_mem_epcs_flash_controller_0+0xfb014220>
 4015284:	000b883a 	mov	r5,zero
 4015288:	9009883a 	mov	r4,r18
 401528c:	400ea980 	call	400ea98 <_sbrk_r>
 4015290:	99000217 	ldw	r4,8(r19)
 4015294:	014003c4 	movi	r5,15
 4015298:	1107c83a 	sub	r3,r2,r4
 401529c:	28ffdd0e 	bge	r5,r3,4015214 <__alt_mem_epcs_flash_controller_0+0xfb014214>
 40152a0:	014103f4 	movhi	r5,1039
 40152a4:	294bf704 	addi	r5,r5,12252
 40152a8:	29400017 	ldw	r5,0(r5)
 40152ac:	18c00054 	ori	r3,r3,1
 40152b0:	20c00115 	stw	r3,4(r4)
 40152b4:	00c103f4 	movhi	r3,1039
 40152b8:	1145c83a 	sub	r2,r2,r5
 40152bc:	18cc1504 	addi	r3,r3,12372
 40152c0:	18800015 	stw	r2,0(r3)
 40152c4:	003fd306 	br	4015214 <__alt_mem_epcs_flash_controller_0+0xfb014214>

040152c8 <_free_r>:
 40152c8:	28004126 	beq	r5,zero,40153d0 <_free_r+0x108>
 40152cc:	defffd04 	addi	sp,sp,-12
 40152d0:	dc400115 	stw	r17,4(sp)
 40152d4:	dc000015 	stw	r16,0(sp)
 40152d8:	2023883a 	mov	r17,r4
 40152dc:	2821883a 	mov	r16,r5
 40152e0:	dfc00215 	stw	ra,8(sp)
 40152e4:	401bf4c0 	call	401bf4c <__malloc_lock>
 40152e8:	81ffff17 	ldw	r7,-4(r16)
 40152ec:	00bfff84 	movi	r2,-2
 40152f0:	010103f4 	movhi	r4,1039
 40152f4:	81bffe04 	addi	r6,r16,-8
 40152f8:	3884703a 	and	r2,r7,r2
 40152fc:	21061d04 	addi	r4,r4,6260
 4015300:	308b883a 	add	r5,r6,r2
 4015304:	2a400117 	ldw	r9,4(r5)
 4015308:	22000217 	ldw	r8,8(r4)
 401530c:	00ffff04 	movi	r3,-4
 4015310:	48c6703a 	and	r3,r9,r3
 4015314:	2a005726 	beq	r5,r8,4015474 <_free_r+0x1ac>
 4015318:	28c00115 	stw	r3,4(r5)
 401531c:	39c0004c 	andi	r7,r7,1
 4015320:	3800091e 	bne	r7,zero,4015348 <_free_r+0x80>
 4015324:	823ffe17 	ldw	r8,-8(r16)
 4015328:	22400204 	addi	r9,r4,8
 401532c:	320dc83a 	sub	r6,r6,r8
 4015330:	31c00217 	ldw	r7,8(r6)
 4015334:	1205883a 	add	r2,r2,r8
 4015338:	3a406526 	beq	r7,r9,40154d0 <_free_r+0x208>
 401533c:	32000317 	ldw	r8,12(r6)
 4015340:	3a000315 	stw	r8,12(r7)
 4015344:	41c00215 	stw	r7,8(r8)
 4015348:	28cf883a 	add	r7,r5,r3
 401534c:	39c00117 	ldw	r7,4(r7)
 4015350:	39c0004c 	andi	r7,r7,1
 4015354:	38003a26 	beq	r7,zero,4015440 <_free_r+0x178>
 4015358:	10c00054 	ori	r3,r2,1
 401535c:	30c00115 	stw	r3,4(r6)
 4015360:	3087883a 	add	r3,r6,r2
 4015364:	18800015 	stw	r2,0(r3)
 4015368:	00c07fc4 	movi	r3,511
 401536c:	18801936 	bltu	r3,r2,40153d4 <_free_r+0x10c>
 4015370:	1004d0fa 	srli	r2,r2,3
 4015374:	01c00044 	movi	r7,1
 4015378:	21400117 	ldw	r5,4(r4)
 401537c:	10c00044 	addi	r3,r2,1
 4015380:	18c7883a 	add	r3,r3,r3
 4015384:	1005d0ba 	srai	r2,r2,2
 4015388:	18c7883a 	add	r3,r3,r3
 401538c:	18c7883a 	add	r3,r3,r3
 4015390:	1907883a 	add	r3,r3,r4
 4015394:	3884983a 	sll	r2,r7,r2
 4015398:	19c00017 	ldw	r7,0(r3)
 401539c:	1a3ffe04 	addi	r8,r3,-8
 40153a0:	1144b03a 	or	r2,r2,r5
 40153a4:	32000315 	stw	r8,12(r6)
 40153a8:	31c00215 	stw	r7,8(r6)
 40153ac:	20800115 	stw	r2,4(r4)
 40153b0:	19800015 	stw	r6,0(r3)
 40153b4:	39800315 	stw	r6,12(r7)
 40153b8:	8809883a 	mov	r4,r17
 40153bc:	dfc00217 	ldw	ra,8(sp)
 40153c0:	dc400117 	ldw	r17,4(sp)
 40153c4:	dc000017 	ldw	r16,0(sp)
 40153c8:	dec00304 	addi	sp,sp,12
 40153cc:	401bf701 	jmpi	401bf70 <__malloc_unlock>
 40153d0:	f800283a 	ret
 40153d4:	100ad27a 	srli	r5,r2,9
 40153d8:	00c00104 	movi	r3,4
 40153dc:	19404a36 	bltu	r3,r5,4015508 <_free_r+0x240>
 40153e0:	100ad1ba 	srli	r5,r2,6
 40153e4:	28c00e44 	addi	r3,r5,57
 40153e8:	18c7883a 	add	r3,r3,r3
 40153ec:	29400e04 	addi	r5,r5,56
 40153f0:	18c7883a 	add	r3,r3,r3
 40153f4:	18c7883a 	add	r3,r3,r3
 40153f8:	1909883a 	add	r4,r3,r4
 40153fc:	20c00017 	ldw	r3,0(r4)
 4015400:	01c103f4 	movhi	r7,1039
 4015404:	213ffe04 	addi	r4,r4,-8
 4015408:	39c61d04 	addi	r7,r7,6260
 401540c:	20c04426 	beq	r4,r3,4015520 <_free_r+0x258>
 4015410:	01ffff04 	movi	r7,-4
 4015414:	19400117 	ldw	r5,4(r3)
 4015418:	29ca703a 	and	r5,r5,r7
 401541c:	1140022e 	bgeu	r2,r5,4015428 <_free_r+0x160>
 4015420:	18c00217 	ldw	r3,8(r3)
 4015424:	20fffb1e 	bne	r4,r3,4015414 <__alt_mem_epcs_flash_controller_0+0xfb014414>
 4015428:	19000317 	ldw	r4,12(r3)
 401542c:	31000315 	stw	r4,12(r6)
 4015430:	30c00215 	stw	r3,8(r6)
 4015434:	21800215 	stw	r6,8(r4)
 4015438:	19800315 	stw	r6,12(r3)
 401543c:	003fde06 	br	40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>
 4015440:	29c00217 	ldw	r7,8(r5)
 4015444:	10c5883a 	add	r2,r2,r3
 4015448:	00c103f4 	movhi	r3,1039
 401544c:	18c61f04 	addi	r3,r3,6268
 4015450:	38c03b26 	beq	r7,r3,4015540 <_free_r+0x278>
 4015454:	2a000317 	ldw	r8,12(r5)
 4015458:	11400054 	ori	r5,r2,1
 401545c:	3087883a 	add	r3,r6,r2
 4015460:	3a000315 	stw	r8,12(r7)
 4015464:	41c00215 	stw	r7,8(r8)
 4015468:	31400115 	stw	r5,4(r6)
 401546c:	18800015 	stw	r2,0(r3)
 4015470:	003fbd06 	br	4015368 <__alt_mem_epcs_flash_controller_0+0xfb014368>
 4015474:	39c0004c 	andi	r7,r7,1
 4015478:	10c5883a 	add	r2,r2,r3
 401547c:	3800071e 	bne	r7,zero,401549c <_free_r+0x1d4>
 4015480:	81fffe17 	ldw	r7,-8(r16)
 4015484:	31cdc83a 	sub	r6,r6,r7
 4015488:	30c00317 	ldw	r3,12(r6)
 401548c:	31400217 	ldw	r5,8(r6)
 4015490:	11c5883a 	add	r2,r2,r7
 4015494:	28c00315 	stw	r3,12(r5)
 4015498:	19400215 	stw	r5,8(r3)
 401549c:	10c00054 	ori	r3,r2,1
 40154a0:	30c00115 	stw	r3,4(r6)
 40154a4:	00c103f4 	movhi	r3,1039
 40154a8:	18cbf804 	addi	r3,r3,12256
 40154ac:	18c00017 	ldw	r3,0(r3)
 40154b0:	21800215 	stw	r6,8(r4)
 40154b4:	10ffc036 	bltu	r2,r3,40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>
 40154b8:	008103f4 	movhi	r2,1039
 40154bc:	108c0904 	addi	r2,r2,12324
 40154c0:	11400017 	ldw	r5,0(r2)
 40154c4:	8809883a 	mov	r4,r17
 40154c8:	40151a40 	call	40151a4 <_malloc_trim_r>
 40154cc:	003fba06 	br	40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>
 40154d0:	28c9883a 	add	r4,r5,r3
 40154d4:	21000117 	ldw	r4,4(r4)
 40154d8:	2100004c 	andi	r4,r4,1
 40154dc:	2000391e 	bne	r4,zero,40155c4 <_free_r+0x2fc>
 40154e0:	29c00217 	ldw	r7,8(r5)
 40154e4:	29000317 	ldw	r4,12(r5)
 40154e8:	1885883a 	add	r2,r3,r2
 40154ec:	10c00054 	ori	r3,r2,1
 40154f0:	39000315 	stw	r4,12(r7)
 40154f4:	21c00215 	stw	r7,8(r4)
 40154f8:	30c00115 	stw	r3,4(r6)
 40154fc:	308d883a 	add	r6,r6,r2
 4015500:	30800015 	stw	r2,0(r6)
 4015504:	003fac06 	br	40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>
 4015508:	00c00504 	movi	r3,20
 401550c:	19401536 	bltu	r3,r5,4015564 <_free_r+0x29c>
 4015510:	28c01704 	addi	r3,r5,92
 4015514:	18c7883a 	add	r3,r3,r3
 4015518:	294016c4 	addi	r5,r5,91
 401551c:	003fb406 	br	40153f0 <__alt_mem_epcs_flash_controller_0+0xfb0143f0>
 4015520:	280bd0ba 	srai	r5,r5,2
 4015524:	00c00044 	movi	r3,1
 4015528:	38800117 	ldw	r2,4(r7)
 401552c:	194a983a 	sll	r5,r3,r5
 4015530:	2007883a 	mov	r3,r4
 4015534:	2884b03a 	or	r2,r5,r2
 4015538:	38800115 	stw	r2,4(r7)
 401553c:	003fbb06 	br	401542c <__alt_mem_epcs_flash_controller_0+0xfb01442c>
 4015540:	21800515 	stw	r6,20(r4)
 4015544:	21800415 	stw	r6,16(r4)
 4015548:	10c00054 	ori	r3,r2,1
 401554c:	31c00315 	stw	r7,12(r6)
 4015550:	31c00215 	stw	r7,8(r6)
 4015554:	30c00115 	stw	r3,4(r6)
 4015558:	308d883a 	add	r6,r6,r2
 401555c:	30800015 	stw	r2,0(r6)
 4015560:	003f9506 	br	40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>
 4015564:	00c01504 	movi	r3,84
 4015568:	19400536 	bltu	r3,r5,4015580 <_free_r+0x2b8>
 401556c:	100ad33a 	srli	r5,r2,12
 4015570:	28c01bc4 	addi	r3,r5,111
 4015574:	18c7883a 	add	r3,r3,r3
 4015578:	29401b84 	addi	r5,r5,110
 401557c:	003f9c06 	br	40153f0 <__alt_mem_epcs_flash_controller_0+0xfb0143f0>
 4015580:	00c05504 	movi	r3,340
 4015584:	19400536 	bltu	r3,r5,401559c <_free_r+0x2d4>
 4015588:	100ad3fa 	srli	r5,r2,15
 401558c:	28c01e04 	addi	r3,r5,120
 4015590:	18c7883a 	add	r3,r3,r3
 4015594:	29401dc4 	addi	r5,r5,119
 4015598:	003f9506 	br	40153f0 <__alt_mem_epcs_flash_controller_0+0xfb0143f0>
 401559c:	00c15504 	movi	r3,1364
 40155a0:	19400536 	bltu	r3,r5,40155b8 <_free_r+0x2f0>
 40155a4:	100ad4ba 	srli	r5,r2,18
 40155a8:	28c01f44 	addi	r3,r5,125
 40155ac:	18c7883a 	add	r3,r3,r3
 40155b0:	29401f04 	addi	r5,r5,124
 40155b4:	003f8e06 	br	40153f0 <__alt_mem_epcs_flash_controller_0+0xfb0143f0>
 40155b8:	00c03f84 	movi	r3,254
 40155bc:	01401f84 	movi	r5,126
 40155c0:	003f8b06 	br	40153f0 <__alt_mem_epcs_flash_controller_0+0xfb0143f0>
 40155c4:	10c00054 	ori	r3,r2,1
 40155c8:	30c00115 	stw	r3,4(r6)
 40155cc:	308d883a 	add	r6,r6,r2
 40155d0:	30800015 	stw	r2,0(r6)
 40155d4:	003f7806 	br	40153b8 <__alt_mem_epcs_flash_controller_0+0xfb0143b8>

040155d8 <__sfvwrite_r>:
 40155d8:	30800217 	ldw	r2,8(r6)
 40155dc:	10006726 	beq	r2,zero,401577c <__sfvwrite_r+0x1a4>
 40155e0:	28c0030b 	ldhu	r3,12(r5)
 40155e4:	defff404 	addi	sp,sp,-48
 40155e8:	dd400715 	stw	r21,28(sp)
 40155ec:	dd000615 	stw	r20,24(sp)
 40155f0:	dc000215 	stw	r16,8(sp)
 40155f4:	dfc00b15 	stw	ra,44(sp)
 40155f8:	df000a15 	stw	fp,40(sp)
 40155fc:	ddc00915 	stw	r23,36(sp)
 4015600:	dd800815 	stw	r22,32(sp)
 4015604:	dcc00515 	stw	r19,20(sp)
 4015608:	dc800415 	stw	r18,16(sp)
 401560c:	dc400315 	stw	r17,12(sp)
 4015610:	1880020c 	andi	r2,r3,8
 4015614:	2821883a 	mov	r16,r5
 4015618:	202b883a 	mov	r21,r4
 401561c:	3029883a 	mov	r20,r6
 4015620:	10002726 	beq	r2,zero,40156c0 <__sfvwrite_r+0xe8>
 4015624:	28800417 	ldw	r2,16(r5)
 4015628:	10002526 	beq	r2,zero,40156c0 <__sfvwrite_r+0xe8>
 401562c:	1880008c 	andi	r2,r3,2
 4015630:	a4400017 	ldw	r17,0(r20)
 4015634:	10002a26 	beq	r2,zero,40156e0 <__sfvwrite_r+0x108>
 4015638:	05a00034 	movhi	r22,32768
 401563c:	0027883a 	mov	r19,zero
 4015640:	0025883a 	mov	r18,zero
 4015644:	b5bf0004 	addi	r22,r22,-1024
 4015648:	980d883a 	mov	r6,r19
 401564c:	a809883a 	mov	r4,r21
 4015650:	90004626 	beq	r18,zero,401576c <__sfvwrite_r+0x194>
 4015654:	900f883a 	mov	r7,r18
 4015658:	b480022e 	bgeu	r22,r18,4015664 <__sfvwrite_r+0x8c>
 401565c:	01e00034 	movhi	r7,32768
 4015660:	39ff0004 	addi	r7,r7,-1024
 4015664:	80800917 	ldw	r2,36(r16)
 4015668:	81400717 	ldw	r5,28(r16)
 401566c:	103ee83a 	callr	r2
 4015670:	0080570e 	bge	zero,r2,40157d0 <__sfvwrite_r+0x1f8>
 4015674:	a0c00217 	ldw	r3,8(r20)
 4015678:	98a7883a 	add	r19,r19,r2
 401567c:	90a5c83a 	sub	r18,r18,r2
 4015680:	1885c83a 	sub	r2,r3,r2
 4015684:	a0800215 	stw	r2,8(r20)
 4015688:	103fef1e 	bne	r2,zero,4015648 <__alt_mem_epcs_flash_controller_0+0xfb014648>
 401568c:	0005883a 	mov	r2,zero
 4015690:	dfc00b17 	ldw	ra,44(sp)
 4015694:	df000a17 	ldw	fp,40(sp)
 4015698:	ddc00917 	ldw	r23,36(sp)
 401569c:	dd800817 	ldw	r22,32(sp)
 40156a0:	dd400717 	ldw	r21,28(sp)
 40156a4:	dd000617 	ldw	r20,24(sp)
 40156a8:	dcc00517 	ldw	r19,20(sp)
 40156ac:	dc800417 	ldw	r18,16(sp)
 40156b0:	dc400317 	ldw	r17,12(sp)
 40156b4:	dc000217 	ldw	r16,8(sp)
 40156b8:	dec00c04 	addi	sp,sp,48
 40156bc:	f800283a 	ret
 40156c0:	800b883a 	mov	r5,r16
 40156c4:	a809883a 	mov	r4,r21
 40156c8:	40131800 	call	4013180 <__swsetup_r>
 40156cc:	1000eb1e 	bne	r2,zero,4015a7c <__sfvwrite_r+0x4a4>
 40156d0:	80c0030b 	ldhu	r3,12(r16)
 40156d4:	a4400017 	ldw	r17,0(r20)
 40156d8:	1880008c 	andi	r2,r3,2
 40156dc:	103fd61e 	bne	r2,zero,4015638 <__alt_mem_epcs_flash_controller_0+0xfb014638>
 40156e0:	1880004c 	andi	r2,r3,1
 40156e4:	10003f1e 	bne	r2,zero,40157e4 <__sfvwrite_r+0x20c>
 40156e8:	0039883a 	mov	fp,zero
 40156ec:	0025883a 	mov	r18,zero
 40156f0:	90001a26 	beq	r18,zero,401575c <__sfvwrite_r+0x184>
 40156f4:	1880800c 	andi	r2,r3,512
 40156f8:	84c00217 	ldw	r19,8(r16)
 40156fc:	10002126 	beq	r2,zero,4015784 <__sfvwrite_r+0x1ac>
 4015700:	982f883a 	mov	r23,r19
 4015704:	94c09336 	bltu	r18,r19,4015954 <__sfvwrite_r+0x37c>
 4015708:	1881200c 	andi	r2,r3,1152
 401570c:	10009e1e 	bne	r2,zero,4015988 <__sfvwrite_r+0x3b0>
 4015710:	81000017 	ldw	r4,0(r16)
 4015714:	b80d883a 	mov	r6,r23
 4015718:	e00b883a 	mov	r5,fp
 401571c:	4015f980 	call	4015f98 <memmove>
 4015720:	80c00217 	ldw	r3,8(r16)
 4015724:	81000017 	ldw	r4,0(r16)
 4015728:	9005883a 	mov	r2,r18
 401572c:	1ce7c83a 	sub	r19,r3,r19
 4015730:	25cf883a 	add	r7,r4,r23
 4015734:	84c00215 	stw	r19,8(r16)
 4015738:	81c00015 	stw	r7,0(r16)
 401573c:	a0c00217 	ldw	r3,8(r20)
 4015740:	e0b9883a 	add	fp,fp,r2
 4015744:	90a5c83a 	sub	r18,r18,r2
 4015748:	18a7c83a 	sub	r19,r3,r2
 401574c:	a4c00215 	stw	r19,8(r20)
 4015750:	983fce26 	beq	r19,zero,401568c <__alt_mem_epcs_flash_controller_0+0xfb01468c>
 4015754:	80c0030b 	ldhu	r3,12(r16)
 4015758:	903fe61e 	bne	r18,zero,40156f4 <__alt_mem_epcs_flash_controller_0+0xfb0146f4>
 401575c:	8f000017 	ldw	fp,0(r17)
 4015760:	8c800117 	ldw	r18,4(r17)
 4015764:	8c400204 	addi	r17,r17,8
 4015768:	003fe106 	br	40156f0 <__alt_mem_epcs_flash_controller_0+0xfb0146f0>
 401576c:	8cc00017 	ldw	r19,0(r17)
 4015770:	8c800117 	ldw	r18,4(r17)
 4015774:	8c400204 	addi	r17,r17,8
 4015778:	003fb306 	br	4015648 <__alt_mem_epcs_flash_controller_0+0xfb014648>
 401577c:	0005883a 	mov	r2,zero
 4015780:	f800283a 	ret
 4015784:	81000017 	ldw	r4,0(r16)
 4015788:	80800417 	ldw	r2,16(r16)
 401578c:	11005736 	bltu	r2,r4,40158ec <__sfvwrite_r+0x314>
 4015790:	85c00517 	ldw	r23,20(r16)
 4015794:	95c05536 	bltu	r18,r23,40158ec <__sfvwrite_r+0x314>
 4015798:	00a00034 	movhi	r2,32768
 401579c:	10bfffc4 	addi	r2,r2,-1
 40157a0:	9009883a 	mov	r4,r18
 40157a4:	1480012e 	bgeu	r2,r18,40157ac <__sfvwrite_r+0x1d4>
 40157a8:	1009883a 	mov	r4,r2
 40157ac:	b80b883a 	mov	r5,r23
 40157b0:	400a01c0 	call	400a01c <__divsi3>
 40157b4:	15cf383a 	mul	r7,r2,r23
 40157b8:	81400717 	ldw	r5,28(r16)
 40157bc:	80800917 	ldw	r2,36(r16)
 40157c0:	e00d883a 	mov	r6,fp
 40157c4:	a809883a 	mov	r4,r21
 40157c8:	103ee83a 	callr	r2
 40157cc:	00bfdb16 	blt	zero,r2,401573c <__alt_mem_epcs_flash_controller_0+0xfb01473c>
 40157d0:	8080030b 	ldhu	r2,12(r16)
 40157d4:	10801014 	ori	r2,r2,64
 40157d8:	8080030d 	sth	r2,12(r16)
 40157dc:	00bfffc4 	movi	r2,-1
 40157e0:	003fab06 	br	4015690 <__alt_mem_epcs_flash_controller_0+0xfb014690>
 40157e4:	0027883a 	mov	r19,zero
 40157e8:	0011883a 	mov	r8,zero
 40157ec:	0039883a 	mov	fp,zero
 40157f0:	0025883a 	mov	r18,zero
 40157f4:	90001f26 	beq	r18,zero,4015874 <__sfvwrite_r+0x29c>
 40157f8:	40005a26 	beq	r8,zero,4015964 <__sfvwrite_r+0x38c>
 40157fc:	982d883a 	mov	r22,r19
 4015800:	94c0012e 	bgeu	r18,r19,4015808 <__sfvwrite_r+0x230>
 4015804:	902d883a 	mov	r22,r18
 4015808:	81000017 	ldw	r4,0(r16)
 401580c:	80800417 	ldw	r2,16(r16)
 4015810:	b02f883a 	mov	r23,r22
 4015814:	81c00517 	ldw	r7,20(r16)
 4015818:	1100032e 	bgeu	r2,r4,4015828 <__sfvwrite_r+0x250>
 401581c:	80c00217 	ldw	r3,8(r16)
 4015820:	38c7883a 	add	r3,r7,r3
 4015824:	1d801816 	blt	r3,r22,4015888 <__sfvwrite_r+0x2b0>
 4015828:	b1c03e16 	blt	r22,r7,4015924 <__sfvwrite_r+0x34c>
 401582c:	80800917 	ldw	r2,36(r16)
 4015830:	81400717 	ldw	r5,28(r16)
 4015834:	e00d883a 	mov	r6,fp
 4015838:	da000115 	stw	r8,4(sp)
 401583c:	a809883a 	mov	r4,r21
 4015840:	103ee83a 	callr	r2
 4015844:	102f883a 	mov	r23,r2
 4015848:	da000117 	ldw	r8,4(sp)
 401584c:	00bfe00e 	bge	zero,r2,40157d0 <__alt_mem_epcs_flash_controller_0+0xfb0147d0>
 4015850:	9de7c83a 	sub	r19,r19,r23
 4015854:	98001f26 	beq	r19,zero,40158d4 <__sfvwrite_r+0x2fc>
 4015858:	a0800217 	ldw	r2,8(r20)
 401585c:	e5f9883a 	add	fp,fp,r23
 4015860:	95e5c83a 	sub	r18,r18,r23
 4015864:	15efc83a 	sub	r23,r2,r23
 4015868:	a5c00215 	stw	r23,8(r20)
 401586c:	b83f8726 	beq	r23,zero,401568c <__alt_mem_epcs_flash_controller_0+0xfb01468c>
 4015870:	903fe11e 	bne	r18,zero,40157f8 <__alt_mem_epcs_flash_controller_0+0xfb0147f8>
 4015874:	8f000017 	ldw	fp,0(r17)
 4015878:	8c800117 	ldw	r18,4(r17)
 401587c:	0011883a 	mov	r8,zero
 4015880:	8c400204 	addi	r17,r17,8
 4015884:	003fdb06 	br	40157f4 <__alt_mem_epcs_flash_controller_0+0xfb0147f4>
 4015888:	180d883a 	mov	r6,r3
 401588c:	e00b883a 	mov	r5,fp
 4015890:	da000115 	stw	r8,4(sp)
 4015894:	d8c00015 	stw	r3,0(sp)
 4015898:	4015f980 	call	4015f98 <memmove>
 401589c:	d8c00017 	ldw	r3,0(sp)
 40158a0:	80800017 	ldw	r2,0(r16)
 40158a4:	800b883a 	mov	r5,r16
 40158a8:	a809883a 	mov	r4,r21
 40158ac:	10c5883a 	add	r2,r2,r3
 40158b0:	80800015 	stw	r2,0(r16)
 40158b4:	d8c00015 	stw	r3,0(sp)
 40158b8:	4014d780 	call	4014d78 <_fflush_r>
 40158bc:	d8c00017 	ldw	r3,0(sp)
 40158c0:	da000117 	ldw	r8,4(sp)
 40158c4:	103fc21e 	bne	r2,zero,40157d0 <__alt_mem_epcs_flash_controller_0+0xfb0147d0>
 40158c8:	182f883a 	mov	r23,r3
 40158cc:	9de7c83a 	sub	r19,r19,r23
 40158d0:	983fe11e 	bne	r19,zero,4015858 <__alt_mem_epcs_flash_controller_0+0xfb014858>
 40158d4:	800b883a 	mov	r5,r16
 40158d8:	a809883a 	mov	r4,r21
 40158dc:	4014d780 	call	4014d78 <_fflush_r>
 40158e0:	103fbb1e 	bne	r2,zero,40157d0 <__alt_mem_epcs_flash_controller_0+0xfb0147d0>
 40158e4:	0011883a 	mov	r8,zero
 40158e8:	003fdb06 	br	4015858 <__alt_mem_epcs_flash_controller_0+0xfb014858>
 40158ec:	94c0012e 	bgeu	r18,r19,40158f4 <__sfvwrite_r+0x31c>
 40158f0:	9027883a 	mov	r19,r18
 40158f4:	980d883a 	mov	r6,r19
 40158f8:	e00b883a 	mov	r5,fp
 40158fc:	4015f980 	call	4015f98 <memmove>
 4015900:	80800217 	ldw	r2,8(r16)
 4015904:	80c00017 	ldw	r3,0(r16)
 4015908:	14c5c83a 	sub	r2,r2,r19
 401590c:	1cc7883a 	add	r3,r3,r19
 4015910:	80800215 	stw	r2,8(r16)
 4015914:	80c00015 	stw	r3,0(r16)
 4015918:	10004326 	beq	r2,zero,4015a28 <__sfvwrite_r+0x450>
 401591c:	9805883a 	mov	r2,r19
 4015920:	003f8606 	br	401573c <__alt_mem_epcs_flash_controller_0+0xfb01473c>
 4015924:	b00d883a 	mov	r6,r22
 4015928:	e00b883a 	mov	r5,fp
 401592c:	da000115 	stw	r8,4(sp)
 4015930:	4015f980 	call	4015f98 <memmove>
 4015934:	80800217 	ldw	r2,8(r16)
 4015938:	80c00017 	ldw	r3,0(r16)
 401593c:	da000117 	ldw	r8,4(sp)
 4015940:	1585c83a 	sub	r2,r2,r22
 4015944:	1dad883a 	add	r22,r3,r22
 4015948:	80800215 	stw	r2,8(r16)
 401594c:	85800015 	stw	r22,0(r16)
 4015950:	003fbf06 	br	4015850 <__alt_mem_epcs_flash_controller_0+0xfb014850>
 4015954:	81000017 	ldw	r4,0(r16)
 4015958:	9027883a 	mov	r19,r18
 401595c:	902f883a 	mov	r23,r18
 4015960:	003f6c06 	br	4015714 <__alt_mem_epcs_flash_controller_0+0xfb014714>
 4015964:	900d883a 	mov	r6,r18
 4015968:	01400284 	movi	r5,10
 401596c:	e009883a 	mov	r4,fp
 4015970:	4015eb40 	call	4015eb4 <memchr>
 4015974:	10003e26 	beq	r2,zero,4015a70 <__sfvwrite_r+0x498>
 4015978:	10800044 	addi	r2,r2,1
 401597c:	1727c83a 	sub	r19,r2,fp
 4015980:	02000044 	movi	r8,1
 4015984:	003f9d06 	br	40157fc <__alt_mem_epcs_flash_controller_0+0xfb0147fc>
 4015988:	80800517 	ldw	r2,20(r16)
 401598c:	81400417 	ldw	r5,16(r16)
 4015990:	81c00017 	ldw	r7,0(r16)
 4015994:	10a7883a 	add	r19,r2,r2
 4015998:	9885883a 	add	r2,r19,r2
 401599c:	1026d7fa 	srli	r19,r2,31
 40159a0:	396dc83a 	sub	r22,r7,r5
 40159a4:	b1000044 	addi	r4,r22,1
 40159a8:	9885883a 	add	r2,r19,r2
 40159ac:	1027d07a 	srai	r19,r2,1
 40159b0:	2485883a 	add	r2,r4,r18
 40159b4:	980d883a 	mov	r6,r19
 40159b8:	9880022e 	bgeu	r19,r2,40159c4 <__sfvwrite_r+0x3ec>
 40159bc:	1027883a 	mov	r19,r2
 40159c0:	100d883a 	mov	r6,r2
 40159c4:	18c1000c 	andi	r3,r3,1024
 40159c8:	18001c26 	beq	r3,zero,4015a3c <__sfvwrite_r+0x464>
 40159cc:	300b883a 	mov	r5,r6
 40159d0:	a809883a 	mov	r4,r21
 40159d4:	400dedc0 	call	400dedc <_malloc_r>
 40159d8:	102f883a 	mov	r23,r2
 40159dc:	10002926 	beq	r2,zero,4015a84 <__sfvwrite_r+0x4ac>
 40159e0:	81400417 	ldw	r5,16(r16)
 40159e4:	b00d883a 	mov	r6,r22
 40159e8:	1009883a 	mov	r4,r2
 40159ec:	400e6e80 	call	400e6e8 <memcpy>
 40159f0:	8080030b 	ldhu	r2,12(r16)
 40159f4:	00fedfc4 	movi	r3,-1153
 40159f8:	10c4703a 	and	r2,r2,r3
 40159fc:	10802014 	ori	r2,r2,128
 4015a00:	8080030d 	sth	r2,12(r16)
 4015a04:	bd89883a 	add	r4,r23,r22
 4015a08:	9d8fc83a 	sub	r7,r19,r22
 4015a0c:	85c00415 	stw	r23,16(r16)
 4015a10:	84c00515 	stw	r19,20(r16)
 4015a14:	81000015 	stw	r4,0(r16)
 4015a18:	9027883a 	mov	r19,r18
 4015a1c:	81c00215 	stw	r7,8(r16)
 4015a20:	902f883a 	mov	r23,r18
 4015a24:	003f3b06 	br	4015714 <__alt_mem_epcs_flash_controller_0+0xfb014714>
 4015a28:	800b883a 	mov	r5,r16
 4015a2c:	a809883a 	mov	r4,r21
 4015a30:	4014d780 	call	4014d78 <_fflush_r>
 4015a34:	103fb926 	beq	r2,zero,401591c <__alt_mem_epcs_flash_controller_0+0xfb01491c>
 4015a38:	003f6506 	br	40157d0 <__alt_mem_epcs_flash_controller_0+0xfb0147d0>
 4015a3c:	a809883a 	mov	r4,r21
 4015a40:	40170f00 	call	40170f0 <_realloc_r>
 4015a44:	102f883a 	mov	r23,r2
 4015a48:	103fee1e 	bne	r2,zero,4015a04 <__alt_mem_epcs_flash_controller_0+0xfb014a04>
 4015a4c:	81400417 	ldw	r5,16(r16)
 4015a50:	a809883a 	mov	r4,r21
 4015a54:	40152c80 	call	40152c8 <_free_r>
 4015a58:	8080030b 	ldhu	r2,12(r16)
 4015a5c:	00ffdfc4 	movi	r3,-129
 4015a60:	1884703a 	and	r2,r3,r2
 4015a64:	00c00304 	movi	r3,12
 4015a68:	a8c00015 	stw	r3,0(r21)
 4015a6c:	003f5906 	br	40157d4 <__alt_mem_epcs_flash_controller_0+0xfb0147d4>
 4015a70:	94c00044 	addi	r19,r18,1
 4015a74:	02000044 	movi	r8,1
 4015a78:	003f6006 	br	40157fc <__alt_mem_epcs_flash_controller_0+0xfb0147fc>
 4015a7c:	00bfffc4 	movi	r2,-1
 4015a80:	003f0306 	br	4015690 <__alt_mem_epcs_flash_controller_0+0xfb014690>
 4015a84:	00800304 	movi	r2,12
 4015a88:	a8800015 	stw	r2,0(r21)
 4015a8c:	8080030b 	ldhu	r2,12(r16)
 4015a90:	003f5006 	br	40157d4 <__alt_mem_epcs_flash_controller_0+0xfb0147d4>

04015a94 <_fwalk>:
 4015a94:	defff704 	addi	sp,sp,-36
 4015a98:	dd000415 	stw	r20,16(sp)
 4015a9c:	dfc00815 	stw	ra,32(sp)
 4015aa0:	ddc00715 	stw	r23,28(sp)
 4015aa4:	dd800615 	stw	r22,24(sp)
 4015aa8:	dd400515 	stw	r21,20(sp)
 4015aac:	dcc00315 	stw	r19,12(sp)
 4015ab0:	dc800215 	stw	r18,8(sp)
 4015ab4:	dc400115 	stw	r17,4(sp)
 4015ab8:	dc000015 	stw	r16,0(sp)
 4015abc:	2500b804 	addi	r20,r4,736
 4015ac0:	a0002326 	beq	r20,zero,4015b50 <_fwalk+0xbc>
 4015ac4:	282b883a 	mov	r21,r5
 4015ac8:	002f883a 	mov	r23,zero
 4015acc:	05800044 	movi	r22,1
 4015ad0:	04ffffc4 	movi	r19,-1
 4015ad4:	a4400117 	ldw	r17,4(r20)
 4015ad8:	a4800217 	ldw	r18,8(r20)
 4015adc:	8c7fffc4 	addi	r17,r17,-1
 4015ae0:	88000d16 	blt	r17,zero,4015b18 <_fwalk+0x84>
 4015ae4:	94000304 	addi	r16,r18,12
 4015ae8:	94800384 	addi	r18,r18,14
 4015aec:	8080000b 	ldhu	r2,0(r16)
 4015af0:	8c7fffc4 	addi	r17,r17,-1
 4015af4:	813ffd04 	addi	r4,r16,-12
 4015af8:	b080042e 	bgeu	r22,r2,4015b0c <_fwalk+0x78>
 4015afc:	9080000f 	ldh	r2,0(r18)
 4015b00:	14c00226 	beq	r2,r19,4015b0c <_fwalk+0x78>
 4015b04:	a83ee83a 	callr	r21
 4015b08:	b8aeb03a 	or	r23,r23,r2
 4015b0c:	84001a04 	addi	r16,r16,104
 4015b10:	94801a04 	addi	r18,r18,104
 4015b14:	8cfff51e 	bne	r17,r19,4015aec <__alt_mem_epcs_flash_controller_0+0xfb014aec>
 4015b18:	a5000017 	ldw	r20,0(r20)
 4015b1c:	a03fed1e 	bne	r20,zero,4015ad4 <__alt_mem_epcs_flash_controller_0+0xfb014ad4>
 4015b20:	b805883a 	mov	r2,r23
 4015b24:	dfc00817 	ldw	ra,32(sp)
 4015b28:	ddc00717 	ldw	r23,28(sp)
 4015b2c:	dd800617 	ldw	r22,24(sp)
 4015b30:	dd400517 	ldw	r21,20(sp)
 4015b34:	dd000417 	ldw	r20,16(sp)
 4015b38:	dcc00317 	ldw	r19,12(sp)
 4015b3c:	dc800217 	ldw	r18,8(sp)
 4015b40:	dc400117 	ldw	r17,4(sp)
 4015b44:	dc000017 	ldw	r16,0(sp)
 4015b48:	dec00904 	addi	sp,sp,36
 4015b4c:	f800283a 	ret
 4015b50:	002f883a 	mov	r23,zero
 4015b54:	003ff206 	br	4015b20 <__alt_mem_epcs_flash_controller_0+0xfb014b20>

04015b58 <_fwalk_reent>:
 4015b58:	defff704 	addi	sp,sp,-36
 4015b5c:	dd000415 	stw	r20,16(sp)
 4015b60:	dfc00815 	stw	ra,32(sp)
 4015b64:	ddc00715 	stw	r23,28(sp)
 4015b68:	dd800615 	stw	r22,24(sp)
 4015b6c:	dd400515 	stw	r21,20(sp)
 4015b70:	dcc00315 	stw	r19,12(sp)
 4015b74:	dc800215 	stw	r18,8(sp)
 4015b78:	dc400115 	stw	r17,4(sp)
 4015b7c:	dc000015 	stw	r16,0(sp)
 4015b80:	2500b804 	addi	r20,r4,736
 4015b84:	a0002326 	beq	r20,zero,4015c14 <_fwalk_reent+0xbc>
 4015b88:	282b883a 	mov	r21,r5
 4015b8c:	2027883a 	mov	r19,r4
 4015b90:	002f883a 	mov	r23,zero
 4015b94:	05800044 	movi	r22,1
 4015b98:	04bfffc4 	movi	r18,-1
 4015b9c:	a4400117 	ldw	r17,4(r20)
 4015ba0:	a4000217 	ldw	r16,8(r20)
 4015ba4:	8c7fffc4 	addi	r17,r17,-1
 4015ba8:	88000c16 	blt	r17,zero,4015bdc <_fwalk_reent+0x84>
 4015bac:	84000304 	addi	r16,r16,12
 4015bb0:	8080000b 	ldhu	r2,0(r16)
 4015bb4:	8c7fffc4 	addi	r17,r17,-1
 4015bb8:	817ffd04 	addi	r5,r16,-12
 4015bbc:	b080052e 	bgeu	r22,r2,4015bd4 <_fwalk_reent+0x7c>
 4015bc0:	8080008f 	ldh	r2,2(r16)
 4015bc4:	9809883a 	mov	r4,r19
 4015bc8:	14800226 	beq	r2,r18,4015bd4 <_fwalk_reent+0x7c>
 4015bcc:	a83ee83a 	callr	r21
 4015bd0:	b8aeb03a 	or	r23,r23,r2
 4015bd4:	84001a04 	addi	r16,r16,104
 4015bd8:	8cbff51e 	bne	r17,r18,4015bb0 <__alt_mem_epcs_flash_controller_0+0xfb014bb0>
 4015bdc:	a5000017 	ldw	r20,0(r20)
 4015be0:	a03fee1e 	bne	r20,zero,4015b9c <__alt_mem_epcs_flash_controller_0+0xfb014b9c>
 4015be4:	b805883a 	mov	r2,r23
 4015be8:	dfc00817 	ldw	ra,32(sp)
 4015bec:	ddc00717 	ldw	r23,28(sp)
 4015bf0:	dd800617 	ldw	r22,24(sp)
 4015bf4:	dd400517 	ldw	r21,20(sp)
 4015bf8:	dd000417 	ldw	r20,16(sp)
 4015bfc:	dcc00317 	ldw	r19,12(sp)
 4015c00:	dc800217 	ldw	r18,8(sp)
 4015c04:	dc400117 	ldw	r17,4(sp)
 4015c08:	dc000017 	ldw	r16,0(sp)
 4015c0c:	dec00904 	addi	sp,sp,36
 4015c10:	f800283a 	ret
 4015c14:	002f883a 	mov	r23,zero
 4015c18:	003ff206 	br	4015be4 <__alt_mem_epcs_flash_controller_0+0xfb014be4>

04015c1c <_setlocale_r>:
 4015c1c:	30001b26 	beq	r6,zero,4015c8c <_setlocale_r+0x70>
 4015c20:	01410234 	movhi	r5,1032
 4015c24:	defffe04 	addi	sp,sp,-8
 4015c28:	29554b04 	addi	r5,r5,21804
 4015c2c:	3009883a 	mov	r4,r6
 4015c30:	dc000015 	stw	r16,0(sp)
 4015c34:	dfc00115 	stw	ra,4(sp)
 4015c38:	3021883a 	mov	r16,r6
 4015c3c:	40177900 	call	4017790 <strcmp>
 4015c40:	1000061e 	bne	r2,zero,4015c5c <_setlocale_r+0x40>
 4015c44:	00810234 	movhi	r2,1032
 4015c48:	10952404 	addi	r2,r2,21648
 4015c4c:	dfc00117 	ldw	ra,4(sp)
 4015c50:	dc000017 	ldw	r16,0(sp)
 4015c54:	dec00204 	addi	sp,sp,8
 4015c58:	f800283a 	ret
 4015c5c:	01410234 	movhi	r5,1032
 4015c60:	29552404 	addi	r5,r5,21648
 4015c64:	8009883a 	mov	r4,r16
 4015c68:	40177900 	call	4017790 <strcmp>
 4015c6c:	103ff526 	beq	r2,zero,4015c44 <__alt_mem_epcs_flash_controller_0+0xfb014c44>
 4015c70:	01410234 	movhi	r5,1032
 4015c74:	29552e04 	addi	r5,r5,21688
 4015c78:	8009883a 	mov	r4,r16
 4015c7c:	40177900 	call	4017790 <strcmp>
 4015c80:	103ff026 	beq	r2,zero,4015c44 <__alt_mem_epcs_flash_controller_0+0xfb014c44>
 4015c84:	0005883a 	mov	r2,zero
 4015c88:	003ff006 	br	4015c4c <__alt_mem_epcs_flash_controller_0+0xfb014c4c>
 4015c8c:	00810234 	movhi	r2,1032
 4015c90:	10952404 	addi	r2,r2,21648
 4015c94:	f800283a 	ret

04015c98 <__locale_charset>:
 4015c98:	008103f4 	movhi	r2,1039
 4015c9c:	10872704 	addi	r2,r2,7324
 4015ca0:	f800283a 	ret

04015ca4 <__locale_mb_cur_max>:
 4015ca4:	008103f4 	movhi	r2,1039
 4015ca8:	108bf904 	addi	r2,r2,12260
 4015cac:	10800017 	ldw	r2,0(r2)
 4015cb0:	f800283a 	ret

04015cb4 <__locale_msgcharset>:
 4015cb4:	008103f4 	movhi	r2,1039
 4015cb8:	10871f04 	addi	r2,r2,7292
 4015cbc:	f800283a 	ret

04015cc0 <__locale_cjk_lang>:
 4015cc0:	0005883a 	mov	r2,zero
 4015cc4:	f800283a 	ret

04015cc8 <_localeconv_r>:
 4015cc8:	008103f4 	movhi	r2,1039
 4015ccc:	10872f04 	addi	r2,r2,7356
 4015cd0:	f800283a 	ret

04015cd4 <setlocale>:
 4015cd4:	008103f4 	movhi	r2,1039
 4015cd8:	108bf604 	addi	r2,r2,12248
 4015cdc:	280d883a 	mov	r6,r5
 4015ce0:	200b883a 	mov	r5,r4
 4015ce4:	11000017 	ldw	r4,0(r2)
 4015ce8:	4015c1c1 	jmpi	4015c1c <_setlocale_r>

04015cec <localeconv>:
 4015cec:	008103f4 	movhi	r2,1039
 4015cf0:	10872f04 	addi	r2,r2,7356
 4015cf4:	f800283a 	ret

04015cf8 <__smakebuf_r>:
 4015cf8:	2880030b 	ldhu	r2,12(r5)
 4015cfc:	10c0008c 	andi	r3,r2,2
 4015d00:	1800411e 	bne	r3,zero,4015e08 <__smakebuf_r+0x110>
 4015d04:	deffec04 	addi	sp,sp,-80
 4015d08:	dc000f15 	stw	r16,60(sp)
 4015d0c:	2821883a 	mov	r16,r5
 4015d10:	2940038f 	ldh	r5,14(r5)
 4015d14:	dc401015 	stw	r17,64(sp)
 4015d18:	dfc01315 	stw	ra,76(sp)
 4015d1c:	dcc01215 	stw	r19,72(sp)
 4015d20:	dc801115 	stw	r18,68(sp)
 4015d24:	2023883a 	mov	r17,r4
 4015d28:	28001c16 	blt	r5,zero,4015d9c <__smakebuf_r+0xa4>
 4015d2c:	d80d883a 	mov	r6,sp
 4015d30:	401a7440 	call	401a744 <_fstat_r>
 4015d34:	10001816 	blt	r2,zero,4015d98 <__smakebuf_r+0xa0>
 4015d38:	d8800117 	ldw	r2,4(sp)
 4015d3c:	00e00014 	movui	r3,32768
 4015d40:	10bc000c 	andi	r2,r2,61440
 4015d44:	14c80020 	cmpeqi	r19,r2,8192
 4015d48:	10c03726 	beq	r2,r3,4015e28 <__smakebuf_r+0x130>
 4015d4c:	80c0030b 	ldhu	r3,12(r16)
 4015d50:	18c20014 	ori	r3,r3,2048
 4015d54:	80c0030d 	sth	r3,12(r16)
 4015d58:	00c80004 	movi	r3,8192
 4015d5c:	10c0521e 	bne	r2,r3,4015ea8 <__smakebuf_r+0x1b0>
 4015d60:	8140038f 	ldh	r5,14(r16)
 4015d64:	8809883a 	mov	r4,r17
 4015d68:	401a7a00 	call	401a7a0 <_isatty_r>
 4015d6c:	10004c26 	beq	r2,zero,4015ea0 <__smakebuf_r+0x1a8>
 4015d70:	8080030b 	ldhu	r2,12(r16)
 4015d74:	80c010c4 	addi	r3,r16,67
 4015d78:	80c00015 	stw	r3,0(r16)
 4015d7c:	10800054 	ori	r2,r2,1
 4015d80:	8080030d 	sth	r2,12(r16)
 4015d84:	00800044 	movi	r2,1
 4015d88:	80c00415 	stw	r3,16(r16)
 4015d8c:	80800515 	stw	r2,20(r16)
 4015d90:	04810004 	movi	r18,1024
 4015d94:	00000706 	br	4015db4 <__smakebuf_r+0xbc>
 4015d98:	8080030b 	ldhu	r2,12(r16)
 4015d9c:	10c0200c 	andi	r3,r2,128
 4015da0:	18001f1e 	bne	r3,zero,4015e20 <__smakebuf_r+0x128>
 4015da4:	04810004 	movi	r18,1024
 4015da8:	10820014 	ori	r2,r2,2048
 4015dac:	8080030d 	sth	r2,12(r16)
 4015db0:	0027883a 	mov	r19,zero
 4015db4:	900b883a 	mov	r5,r18
 4015db8:	8809883a 	mov	r4,r17
 4015dbc:	400dedc0 	call	400dedc <_malloc_r>
 4015dc0:	10002c26 	beq	r2,zero,4015e74 <__smakebuf_r+0x17c>
 4015dc4:	80c0030b 	ldhu	r3,12(r16)
 4015dc8:	01010074 	movhi	r4,1025
 4015dcc:	21138304 	addi	r4,r4,19980
 4015dd0:	89000f15 	stw	r4,60(r17)
 4015dd4:	18c02014 	ori	r3,r3,128
 4015dd8:	80c0030d 	sth	r3,12(r16)
 4015ddc:	80800015 	stw	r2,0(r16)
 4015de0:	80800415 	stw	r2,16(r16)
 4015de4:	84800515 	stw	r18,20(r16)
 4015de8:	98001a1e 	bne	r19,zero,4015e54 <__smakebuf_r+0x15c>
 4015dec:	dfc01317 	ldw	ra,76(sp)
 4015df0:	dcc01217 	ldw	r19,72(sp)
 4015df4:	dc801117 	ldw	r18,68(sp)
 4015df8:	dc401017 	ldw	r17,64(sp)
 4015dfc:	dc000f17 	ldw	r16,60(sp)
 4015e00:	dec01404 	addi	sp,sp,80
 4015e04:	f800283a 	ret
 4015e08:	288010c4 	addi	r2,r5,67
 4015e0c:	28800015 	stw	r2,0(r5)
 4015e10:	28800415 	stw	r2,16(r5)
 4015e14:	00800044 	movi	r2,1
 4015e18:	28800515 	stw	r2,20(r5)
 4015e1c:	f800283a 	ret
 4015e20:	04801004 	movi	r18,64
 4015e24:	003fe006 	br	4015da8 <__alt_mem_epcs_flash_controller_0+0xfb014da8>
 4015e28:	81000a17 	ldw	r4,40(r16)
 4015e2c:	00c10074 	movhi	r3,1025
 4015e30:	18ddcb04 	addi	r3,r3,30508
 4015e34:	20ffc51e 	bne	r4,r3,4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 4015e38:	8080030b 	ldhu	r2,12(r16)
 4015e3c:	04810004 	movi	r18,1024
 4015e40:	84801315 	stw	r18,76(r16)
 4015e44:	1484b03a 	or	r2,r2,r18
 4015e48:	8080030d 	sth	r2,12(r16)
 4015e4c:	0027883a 	mov	r19,zero
 4015e50:	003fd806 	br	4015db4 <__alt_mem_epcs_flash_controller_0+0xfb014db4>
 4015e54:	8140038f 	ldh	r5,14(r16)
 4015e58:	8809883a 	mov	r4,r17
 4015e5c:	401a7a00 	call	401a7a0 <_isatty_r>
 4015e60:	103fe226 	beq	r2,zero,4015dec <__alt_mem_epcs_flash_controller_0+0xfb014dec>
 4015e64:	8080030b 	ldhu	r2,12(r16)
 4015e68:	10800054 	ori	r2,r2,1
 4015e6c:	8080030d 	sth	r2,12(r16)
 4015e70:	003fde06 	br	4015dec <__alt_mem_epcs_flash_controller_0+0xfb014dec>
 4015e74:	8080030b 	ldhu	r2,12(r16)
 4015e78:	10c0800c 	andi	r3,r2,512
 4015e7c:	183fdb1e 	bne	r3,zero,4015dec <__alt_mem_epcs_flash_controller_0+0xfb014dec>
 4015e80:	10800094 	ori	r2,r2,2
 4015e84:	80c010c4 	addi	r3,r16,67
 4015e88:	8080030d 	sth	r2,12(r16)
 4015e8c:	00800044 	movi	r2,1
 4015e90:	80c00015 	stw	r3,0(r16)
 4015e94:	80c00415 	stw	r3,16(r16)
 4015e98:	80800515 	stw	r2,20(r16)
 4015e9c:	003fd306 	br	4015dec <__alt_mem_epcs_flash_controller_0+0xfb014dec>
 4015ea0:	04810004 	movi	r18,1024
 4015ea4:	003fc306 	br	4015db4 <__alt_mem_epcs_flash_controller_0+0xfb014db4>
 4015ea8:	0027883a 	mov	r19,zero
 4015eac:	04810004 	movi	r18,1024
 4015eb0:	003fc006 	br	4015db4 <__alt_mem_epcs_flash_controller_0+0xfb014db4>

04015eb4 <memchr>:
 4015eb4:	208000cc 	andi	r2,r4,3
 4015eb8:	280f883a 	mov	r7,r5
 4015ebc:	10003426 	beq	r2,zero,4015f90 <memchr+0xdc>
 4015ec0:	30bfffc4 	addi	r2,r6,-1
 4015ec4:	30001a26 	beq	r6,zero,4015f30 <memchr+0x7c>
 4015ec8:	20c00003 	ldbu	r3,0(r4)
 4015ecc:	29803fcc 	andi	r6,r5,255
 4015ed0:	30c0051e 	bne	r6,r3,4015ee8 <memchr+0x34>
 4015ed4:	00001806 	br	4015f38 <memchr+0x84>
 4015ed8:	10001526 	beq	r2,zero,4015f30 <memchr+0x7c>
 4015edc:	20c00003 	ldbu	r3,0(r4)
 4015ee0:	10bfffc4 	addi	r2,r2,-1
 4015ee4:	30c01426 	beq	r6,r3,4015f38 <memchr+0x84>
 4015ee8:	21000044 	addi	r4,r4,1
 4015eec:	20c000cc 	andi	r3,r4,3
 4015ef0:	183ff91e 	bne	r3,zero,4015ed8 <__alt_mem_epcs_flash_controller_0+0xfb014ed8>
 4015ef4:	020000c4 	movi	r8,3
 4015ef8:	40801136 	bltu	r8,r2,4015f40 <memchr+0x8c>
 4015efc:	10000c26 	beq	r2,zero,4015f30 <memchr+0x7c>
 4015f00:	20c00003 	ldbu	r3,0(r4)
 4015f04:	29403fcc 	andi	r5,r5,255
 4015f08:	28c00b26 	beq	r5,r3,4015f38 <memchr+0x84>
 4015f0c:	20c00044 	addi	r3,r4,1
 4015f10:	39803fcc 	andi	r6,r7,255
 4015f14:	2089883a 	add	r4,r4,r2
 4015f18:	00000306 	br	4015f28 <memchr+0x74>
 4015f1c:	18c00044 	addi	r3,r3,1
 4015f20:	197fffc3 	ldbu	r5,-1(r3)
 4015f24:	31400526 	beq	r6,r5,4015f3c <memchr+0x88>
 4015f28:	1805883a 	mov	r2,r3
 4015f2c:	20fffb1e 	bne	r4,r3,4015f1c <__alt_mem_epcs_flash_controller_0+0xfb014f1c>
 4015f30:	0005883a 	mov	r2,zero
 4015f34:	f800283a 	ret
 4015f38:	2005883a 	mov	r2,r4
 4015f3c:	f800283a 	ret
 4015f40:	28c03fcc 	andi	r3,r5,255
 4015f44:	1812923a 	slli	r9,r3,8
 4015f48:	02ffbff4 	movhi	r11,65279
 4015f4c:	02a02074 	movhi	r10,32897
 4015f50:	48d2b03a 	or	r9,r9,r3
 4015f54:	4806943a 	slli	r3,r9,16
 4015f58:	5affbfc4 	addi	r11,r11,-257
 4015f5c:	52a02004 	addi	r10,r10,-32640
 4015f60:	48d2b03a 	or	r9,r9,r3
 4015f64:	20c00017 	ldw	r3,0(r4)
 4015f68:	48c6f03a 	xor	r3,r9,r3
 4015f6c:	1acd883a 	add	r6,r3,r11
 4015f70:	00c6303a 	nor	r3,zero,r3
 4015f74:	30c6703a 	and	r3,r6,r3
 4015f78:	1a86703a 	and	r3,r3,r10
 4015f7c:	183fe01e 	bne	r3,zero,4015f00 <__alt_mem_epcs_flash_controller_0+0xfb014f00>
 4015f80:	10bfff04 	addi	r2,r2,-4
 4015f84:	21000104 	addi	r4,r4,4
 4015f88:	40bff636 	bltu	r8,r2,4015f64 <__alt_mem_epcs_flash_controller_0+0xfb014f64>
 4015f8c:	003fdb06 	br	4015efc <__alt_mem_epcs_flash_controller_0+0xfb014efc>
 4015f90:	3005883a 	mov	r2,r6
 4015f94:	003fd706 	br	4015ef4 <__alt_mem_epcs_flash_controller_0+0xfb014ef4>

04015f98 <memmove>:
 4015f98:	2005883a 	mov	r2,r4
 4015f9c:	29000b2e 	bgeu	r5,r4,4015fcc <memmove+0x34>
 4015fa0:	298f883a 	add	r7,r5,r6
 4015fa4:	21c0092e 	bgeu	r4,r7,4015fcc <memmove+0x34>
 4015fa8:	2187883a 	add	r3,r4,r6
 4015fac:	198bc83a 	sub	r5,r3,r6
 4015fb0:	30004826 	beq	r6,zero,40160d4 <memmove+0x13c>
 4015fb4:	39ffffc4 	addi	r7,r7,-1
 4015fb8:	39000003 	ldbu	r4,0(r7)
 4015fbc:	18ffffc4 	addi	r3,r3,-1
 4015fc0:	19000005 	stb	r4,0(r3)
 4015fc4:	28fffb1e 	bne	r5,r3,4015fb4 <__alt_mem_epcs_flash_controller_0+0xfb014fb4>
 4015fc8:	f800283a 	ret
 4015fcc:	00c003c4 	movi	r3,15
 4015fd0:	1980412e 	bgeu	r3,r6,40160d8 <memmove+0x140>
 4015fd4:	2886b03a 	or	r3,r5,r2
 4015fd8:	18c000cc 	andi	r3,r3,3
 4015fdc:	1800401e 	bne	r3,zero,40160e0 <memmove+0x148>
 4015fe0:	33fffc04 	addi	r15,r6,-16
 4015fe4:	781ed13a 	srli	r15,r15,4
 4015fe8:	28c00104 	addi	r3,r5,4
 4015fec:	13400104 	addi	r13,r2,4
 4015ff0:	781c913a 	slli	r14,r15,4
 4015ff4:	2b000204 	addi	r12,r5,8
 4015ff8:	12c00204 	addi	r11,r2,8
 4015ffc:	73800504 	addi	r14,r14,20
 4016000:	2a800304 	addi	r10,r5,12
 4016004:	12400304 	addi	r9,r2,12
 4016008:	2b9d883a 	add	r14,r5,r14
 401600c:	2811883a 	mov	r8,r5
 4016010:	100f883a 	mov	r7,r2
 4016014:	41000017 	ldw	r4,0(r8)
 4016018:	39c00404 	addi	r7,r7,16
 401601c:	18c00404 	addi	r3,r3,16
 4016020:	393ffc15 	stw	r4,-16(r7)
 4016024:	193ffc17 	ldw	r4,-16(r3)
 4016028:	6b400404 	addi	r13,r13,16
 401602c:	5ac00404 	addi	r11,r11,16
 4016030:	693ffc15 	stw	r4,-16(r13)
 4016034:	61000017 	ldw	r4,0(r12)
 4016038:	4a400404 	addi	r9,r9,16
 401603c:	42000404 	addi	r8,r8,16
 4016040:	593ffc15 	stw	r4,-16(r11)
 4016044:	51000017 	ldw	r4,0(r10)
 4016048:	63000404 	addi	r12,r12,16
 401604c:	52800404 	addi	r10,r10,16
 4016050:	493ffc15 	stw	r4,-16(r9)
 4016054:	1bbfef1e 	bne	r3,r14,4016014 <__alt_mem_epcs_flash_controller_0+0xfb015014>
 4016058:	79000044 	addi	r4,r15,1
 401605c:	2008913a 	slli	r4,r4,4
 4016060:	328003cc 	andi	r10,r6,15
 4016064:	02c000c4 	movi	r11,3
 4016068:	1107883a 	add	r3,r2,r4
 401606c:	290b883a 	add	r5,r5,r4
 4016070:	5a801e2e 	bgeu	r11,r10,40160ec <memmove+0x154>
 4016074:	1813883a 	mov	r9,r3
 4016078:	2811883a 	mov	r8,r5
 401607c:	500f883a 	mov	r7,r10
 4016080:	41000017 	ldw	r4,0(r8)
 4016084:	4a400104 	addi	r9,r9,4
 4016088:	39ffff04 	addi	r7,r7,-4
 401608c:	493fff15 	stw	r4,-4(r9)
 4016090:	42000104 	addi	r8,r8,4
 4016094:	59fffa36 	bltu	r11,r7,4016080 <__alt_mem_epcs_flash_controller_0+0xfb015080>
 4016098:	513fff04 	addi	r4,r10,-4
 401609c:	2008d0ba 	srli	r4,r4,2
 40160a0:	318000cc 	andi	r6,r6,3
 40160a4:	21000044 	addi	r4,r4,1
 40160a8:	2109883a 	add	r4,r4,r4
 40160ac:	2109883a 	add	r4,r4,r4
 40160b0:	1907883a 	add	r3,r3,r4
 40160b4:	290b883a 	add	r5,r5,r4
 40160b8:	30000b26 	beq	r6,zero,40160e8 <memmove+0x150>
 40160bc:	198d883a 	add	r6,r3,r6
 40160c0:	29c00003 	ldbu	r7,0(r5)
 40160c4:	18c00044 	addi	r3,r3,1
 40160c8:	29400044 	addi	r5,r5,1
 40160cc:	19ffffc5 	stb	r7,-1(r3)
 40160d0:	19bffb1e 	bne	r3,r6,40160c0 <__alt_mem_epcs_flash_controller_0+0xfb0150c0>
 40160d4:	f800283a 	ret
 40160d8:	1007883a 	mov	r3,r2
 40160dc:	003ff606 	br	40160b8 <__alt_mem_epcs_flash_controller_0+0xfb0150b8>
 40160e0:	1007883a 	mov	r3,r2
 40160e4:	003ff506 	br	40160bc <__alt_mem_epcs_flash_controller_0+0xfb0150bc>
 40160e8:	f800283a 	ret
 40160ec:	500d883a 	mov	r6,r10
 40160f0:	003ff106 	br	40160b8 <__alt_mem_epcs_flash_controller_0+0xfb0150b8>

040160f4 <_Balloc>:
 40160f4:	20801317 	ldw	r2,76(r4)
 40160f8:	defffc04 	addi	sp,sp,-16
 40160fc:	dc400115 	stw	r17,4(sp)
 4016100:	dc000015 	stw	r16,0(sp)
 4016104:	dfc00315 	stw	ra,12(sp)
 4016108:	dc800215 	stw	r18,8(sp)
 401610c:	2023883a 	mov	r17,r4
 4016110:	2821883a 	mov	r16,r5
 4016114:	10000f26 	beq	r2,zero,4016154 <_Balloc+0x60>
 4016118:	8407883a 	add	r3,r16,r16
 401611c:	18c7883a 	add	r3,r3,r3
 4016120:	10c7883a 	add	r3,r2,r3
 4016124:	18800017 	ldw	r2,0(r3)
 4016128:	10001126 	beq	r2,zero,4016170 <_Balloc+0x7c>
 401612c:	11000017 	ldw	r4,0(r2)
 4016130:	19000015 	stw	r4,0(r3)
 4016134:	10000415 	stw	zero,16(r2)
 4016138:	10000315 	stw	zero,12(r2)
 401613c:	dfc00317 	ldw	ra,12(sp)
 4016140:	dc800217 	ldw	r18,8(sp)
 4016144:	dc400117 	ldw	r17,4(sp)
 4016148:	dc000017 	ldw	r16,0(sp)
 401614c:	dec00404 	addi	sp,sp,16
 4016150:	f800283a 	ret
 4016154:	01800844 	movi	r6,33
 4016158:	01400104 	movi	r5,4
 401615c:	401a3740 	call	401a374 <_calloc_r>
 4016160:	88801315 	stw	r2,76(r17)
 4016164:	103fec1e 	bne	r2,zero,4016118 <__alt_mem_epcs_flash_controller_0+0xfb015118>
 4016168:	0005883a 	mov	r2,zero
 401616c:	003ff306 	br	401613c <__alt_mem_epcs_flash_controller_0+0xfb01513c>
 4016170:	01400044 	movi	r5,1
 4016174:	2c24983a 	sll	r18,r5,r16
 4016178:	8809883a 	mov	r4,r17
 401617c:	91800144 	addi	r6,r18,5
 4016180:	318d883a 	add	r6,r6,r6
 4016184:	318d883a 	add	r6,r6,r6
 4016188:	401a3740 	call	401a374 <_calloc_r>
 401618c:	103ff626 	beq	r2,zero,4016168 <__alt_mem_epcs_flash_controller_0+0xfb015168>
 4016190:	14000115 	stw	r16,4(r2)
 4016194:	14800215 	stw	r18,8(r2)
 4016198:	003fe606 	br	4016134 <__alt_mem_epcs_flash_controller_0+0xfb015134>

0401619c <_Bfree>:
 401619c:	28000826 	beq	r5,zero,40161c0 <_Bfree+0x24>
 40161a0:	28c00117 	ldw	r3,4(r5)
 40161a4:	20801317 	ldw	r2,76(r4)
 40161a8:	18c7883a 	add	r3,r3,r3
 40161ac:	18c7883a 	add	r3,r3,r3
 40161b0:	10c5883a 	add	r2,r2,r3
 40161b4:	10c00017 	ldw	r3,0(r2)
 40161b8:	28c00015 	stw	r3,0(r5)
 40161bc:	11400015 	stw	r5,0(r2)
 40161c0:	f800283a 	ret

040161c4 <__multadd>:
 40161c4:	defffa04 	addi	sp,sp,-24
 40161c8:	dc800315 	stw	r18,12(sp)
 40161cc:	dc400215 	stw	r17,8(sp)
 40161d0:	dc000115 	stw	r16,4(sp)
 40161d4:	2823883a 	mov	r17,r5
 40161d8:	2c000417 	ldw	r16,16(r5)
 40161dc:	dfc00515 	stw	ra,20(sp)
 40161e0:	dcc00415 	stw	r19,16(sp)
 40161e4:	2025883a 	mov	r18,r4
 40161e8:	29400504 	addi	r5,r5,20
 40161ec:	0011883a 	mov	r8,zero
 40161f0:	28c00017 	ldw	r3,0(r5)
 40161f4:	29400104 	addi	r5,r5,4
 40161f8:	42000044 	addi	r8,r8,1
 40161fc:	18bfffcc 	andi	r2,r3,65535
 4016200:	1185383a 	mul	r2,r2,r6
 4016204:	1806d43a 	srli	r3,r3,16
 4016208:	11cf883a 	add	r7,r2,r7
 401620c:	3808d43a 	srli	r4,r7,16
 4016210:	1987383a 	mul	r3,r3,r6
 4016214:	38bfffcc 	andi	r2,r7,65535
 4016218:	1907883a 	add	r3,r3,r4
 401621c:	1808943a 	slli	r4,r3,16
 4016220:	180ed43a 	srli	r7,r3,16
 4016224:	2085883a 	add	r2,r4,r2
 4016228:	28bfff15 	stw	r2,-4(r5)
 401622c:	443ff016 	blt	r8,r16,40161f0 <__alt_mem_epcs_flash_controller_0+0xfb0151f0>
 4016230:	38000926 	beq	r7,zero,4016258 <__multadd+0x94>
 4016234:	88800217 	ldw	r2,8(r17)
 4016238:	80800f0e 	bge	r16,r2,4016278 <__multadd+0xb4>
 401623c:	80800144 	addi	r2,r16,5
 4016240:	1085883a 	add	r2,r2,r2
 4016244:	1085883a 	add	r2,r2,r2
 4016248:	8885883a 	add	r2,r17,r2
 401624c:	11c00015 	stw	r7,0(r2)
 4016250:	84000044 	addi	r16,r16,1
 4016254:	8c000415 	stw	r16,16(r17)
 4016258:	8805883a 	mov	r2,r17
 401625c:	dfc00517 	ldw	ra,20(sp)
 4016260:	dcc00417 	ldw	r19,16(sp)
 4016264:	dc800317 	ldw	r18,12(sp)
 4016268:	dc400217 	ldw	r17,8(sp)
 401626c:	dc000117 	ldw	r16,4(sp)
 4016270:	dec00604 	addi	sp,sp,24
 4016274:	f800283a 	ret
 4016278:	89400117 	ldw	r5,4(r17)
 401627c:	9009883a 	mov	r4,r18
 4016280:	d9c00015 	stw	r7,0(sp)
 4016284:	29400044 	addi	r5,r5,1
 4016288:	40160f40 	call	40160f4 <_Balloc>
 401628c:	89800417 	ldw	r6,16(r17)
 4016290:	89400304 	addi	r5,r17,12
 4016294:	11000304 	addi	r4,r2,12
 4016298:	31800084 	addi	r6,r6,2
 401629c:	318d883a 	add	r6,r6,r6
 40162a0:	318d883a 	add	r6,r6,r6
 40162a4:	1027883a 	mov	r19,r2
 40162a8:	400e6e80 	call	400e6e8 <memcpy>
 40162ac:	d9c00017 	ldw	r7,0(sp)
 40162b0:	88000a26 	beq	r17,zero,40162dc <__multadd+0x118>
 40162b4:	88c00117 	ldw	r3,4(r17)
 40162b8:	90801317 	ldw	r2,76(r18)
 40162bc:	18c7883a 	add	r3,r3,r3
 40162c0:	18c7883a 	add	r3,r3,r3
 40162c4:	10c5883a 	add	r2,r2,r3
 40162c8:	10c00017 	ldw	r3,0(r2)
 40162cc:	88c00015 	stw	r3,0(r17)
 40162d0:	14400015 	stw	r17,0(r2)
 40162d4:	9823883a 	mov	r17,r19
 40162d8:	003fd806 	br	401623c <__alt_mem_epcs_flash_controller_0+0xfb01523c>
 40162dc:	9823883a 	mov	r17,r19
 40162e0:	003fd606 	br	401623c <__alt_mem_epcs_flash_controller_0+0xfb01523c>

040162e4 <__s2b>:
 40162e4:	defff904 	addi	sp,sp,-28
 40162e8:	dc400115 	stw	r17,4(sp)
 40162ec:	dc000015 	stw	r16,0(sp)
 40162f0:	2023883a 	mov	r17,r4
 40162f4:	2821883a 	mov	r16,r5
 40162f8:	39000204 	addi	r4,r7,8
 40162fc:	01400244 	movi	r5,9
 4016300:	dcc00315 	stw	r19,12(sp)
 4016304:	dc800215 	stw	r18,8(sp)
 4016308:	dfc00615 	stw	ra,24(sp)
 401630c:	dd400515 	stw	r21,20(sp)
 4016310:	dd000415 	stw	r20,16(sp)
 4016314:	3825883a 	mov	r18,r7
 4016318:	3027883a 	mov	r19,r6
 401631c:	400a01c0 	call	400a01c <__divsi3>
 4016320:	00c00044 	movi	r3,1
 4016324:	000b883a 	mov	r5,zero
 4016328:	1880030e 	bge	r3,r2,4016338 <__s2b+0x54>
 401632c:	18c7883a 	add	r3,r3,r3
 4016330:	29400044 	addi	r5,r5,1
 4016334:	18bffd16 	blt	r3,r2,401632c <__alt_mem_epcs_flash_controller_0+0xfb01532c>
 4016338:	8809883a 	mov	r4,r17
 401633c:	40160f40 	call	40160f4 <_Balloc>
 4016340:	d8c00717 	ldw	r3,28(sp)
 4016344:	10c00515 	stw	r3,20(r2)
 4016348:	00c00044 	movi	r3,1
 401634c:	10c00415 	stw	r3,16(r2)
 4016350:	00c00244 	movi	r3,9
 4016354:	1cc0210e 	bge	r3,r19,40163dc <__s2b+0xf8>
 4016358:	80eb883a 	add	r21,r16,r3
 401635c:	a829883a 	mov	r20,r21
 4016360:	84e1883a 	add	r16,r16,r19
 4016364:	a1c00007 	ldb	r7,0(r20)
 4016368:	01800284 	movi	r6,10
 401636c:	a5000044 	addi	r20,r20,1
 4016370:	100b883a 	mov	r5,r2
 4016374:	39fff404 	addi	r7,r7,-48
 4016378:	8809883a 	mov	r4,r17
 401637c:	40161c40 	call	40161c4 <__multadd>
 4016380:	a43ff81e 	bne	r20,r16,4016364 <__alt_mem_epcs_flash_controller_0+0xfb015364>
 4016384:	ace1883a 	add	r16,r21,r19
 4016388:	843ffe04 	addi	r16,r16,-8
 401638c:	9c800a0e 	bge	r19,r18,40163b8 <__s2b+0xd4>
 4016390:	94e5c83a 	sub	r18,r18,r19
 4016394:	84a5883a 	add	r18,r16,r18
 4016398:	81c00007 	ldb	r7,0(r16)
 401639c:	01800284 	movi	r6,10
 40163a0:	84000044 	addi	r16,r16,1
 40163a4:	100b883a 	mov	r5,r2
 40163a8:	39fff404 	addi	r7,r7,-48
 40163ac:	8809883a 	mov	r4,r17
 40163b0:	40161c40 	call	40161c4 <__multadd>
 40163b4:	84bff81e 	bne	r16,r18,4016398 <__alt_mem_epcs_flash_controller_0+0xfb015398>
 40163b8:	dfc00617 	ldw	ra,24(sp)
 40163bc:	dd400517 	ldw	r21,20(sp)
 40163c0:	dd000417 	ldw	r20,16(sp)
 40163c4:	dcc00317 	ldw	r19,12(sp)
 40163c8:	dc800217 	ldw	r18,8(sp)
 40163cc:	dc400117 	ldw	r17,4(sp)
 40163d0:	dc000017 	ldw	r16,0(sp)
 40163d4:	dec00704 	addi	sp,sp,28
 40163d8:	f800283a 	ret
 40163dc:	84000284 	addi	r16,r16,10
 40163e0:	1827883a 	mov	r19,r3
 40163e4:	003fe906 	br	401638c <__alt_mem_epcs_flash_controller_0+0xfb01538c>

040163e8 <__hi0bits>:
 40163e8:	20bfffec 	andhi	r2,r4,65535
 40163ec:	1000141e 	bne	r2,zero,4016440 <__hi0bits+0x58>
 40163f0:	2008943a 	slli	r4,r4,16
 40163f4:	00800404 	movi	r2,16
 40163f8:	20ffc02c 	andhi	r3,r4,65280
 40163fc:	1800021e 	bne	r3,zero,4016408 <__hi0bits+0x20>
 4016400:	2008923a 	slli	r4,r4,8
 4016404:	10800204 	addi	r2,r2,8
 4016408:	20fc002c 	andhi	r3,r4,61440
 401640c:	1800021e 	bne	r3,zero,4016418 <__hi0bits+0x30>
 4016410:	2008913a 	slli	r4,r4,4
 4016414:	10800104 	addi	r2,r2,4
 4016418:	20f0002c 	andhi	r3,r4,49152
 401641c:	1800031e 	bne	r3,zero,401642c <__hi0bits+0x44>
 4016420:	2109883a 	add	r4,r4,r4
 4016424:	10800084 	addi	r2,r2,2
 4016428:	2109883a 	add	r4,r4,r4
 401642c:	20000316 	blt	r4,zero,401643c <__hi0bits+0x54>
 4016430:	2110002c 	andhi	r4,r4,16384
 4016434:	2000041e 	bne	r4,zero,4016448 <__hi0bits+0x60>
 4016438:	00800804 	movi	r2,32
 401643c:	f800283a 	ret
 4016440:	0005883a 	mov	r2,zero
 4016444:	003fec06 	br	40163f8 <__alt_mem_epcs_flash_controller_0+0xfb0153f8>
 4016448:	10800044 	addi	r2,r2,1
 401644c:	f800283a 	ret

04016450 <__lo0bits>:
 4016450:	20c00017 	ldw	r3,0(r4)
 4016454:	188001cc 	andi	r2,r3,7
 4016458:	10000826 	beq	r2,zero,401647c <__lo0bits+0x2c>
 401645c:	1880004c 	andi	r2,r3,1
 4016460:	1000211e 	bne	r2,zero,40164e8 <__lo0bits+0x98>
 4016464:	1880008c 	andi	r2,r3,2
 4016468:	1000211e 	bne	r2,zero,40164f0 <__lo0bits+0xa0>
 401646c:	1806d0ba 	srli	r3,r3,2
 4016470:	00800084 	movi	r2,2
 4016474:	20c00015 	stw	r3,0(r4)
 4016478:	f800283a 	ret
 401647c:	18bfffcc 	andi	r2,r3,65535
 4016480:	10001326 	beq	r2,zero,40164d0 <__lo0bits+0x80>
 4016484:	0005883a 	mov	r2,zero
 4016488:	19403fcc 	andi	r5,r3,255
 401648c:	2800021e 	bne	r5,zero,4016498 <__lo0bits+0x48>
 4016490:	1806d23a 	srli	r3,r3,8
 4016494:	10800204 	addi	r2,r2,8
 4016498:	194003cc 	andi	r5,r3,15
 401649c:	2800021e 	bne	r5,zero,40164a8 <__lo0bits+0x58>
 40164a0:	1806d13a 	srli	r3,r3,4
 40164a4:	10800104 	addi	r2,r2,4
 40164a8:	194000cc 	andi	r5,r3,3
 40164ac:	2800021e 	bne	r5,zero,40164b8 <__lo0bits+0x68>
 40164b0:	1806d0ba 	srli	r3,r3,2
 40164b4:	10800084 	addi	r2,r2,2
 40164b8:	1940004c 	andi	r5,r3,1
 40164bc:	2800081e 	bne	r5,zero,40164e0 <__lo0bits+0x90>
 40164c0:	1806d07a 	srli	r3,r3,1
 40164c4:	1800051e 	bne	r3,zero,40164dc <__lo0bits+0x8c>
 40164c8:	00800804 	movi	r2,32
 40164cc:	f800283a 	ret
 40164d0:	1806d43a 	srli	r3,r3,16
 40164d4:	00800404 	movi	r2,16
 40164d8:	003feb06 	br	4016488 <__alt_mem_epcs_flash_controller_0+0xfb015488>
 40164dc:	10800044 	addi	r2,r2,1
 40164e0:	20c00015 	stw	r3,0(r4)
 40164e4:	f800283a 	ret
 40164e8:	0005883a 	mov	r2,zero
 40164ec:	f800283a 	ret
 40164f0:	1806d07a 	srli	r3,r3,1
 40164f4:	00800044 	movi	r2,1
 40164f8:	20c00015 	stw	r3,0(r4)
 40164fc:	f800283a 	ret

04016500 <__i2b>:
 4016500:	defffd04 	addi	sp,sp,-12
 4016504:	dc000015 	stw	r16,0(sp)
 4016508:	04000044 	movi	r16,1
 401650c:	dc400115 	stw	r17,4(sp)
 4016510:	2823883a 	mov	r17,r5
 4016514:	800b883a 	mov	r5,r16
 4016518:	dfc00215 	stw	ra,8(sp)
 401651c:	40160f40 	call	40160f4 <_Balloc>
 4016520:	14400515 	stw	r17,20(r2)
 4016524:	14000415 	stw	r16,16(r2)
 4016528:	dfc00217 	ldw	ra,8(sp)
 401652c:	dc400117 	ldw	r17,4(sp)
 4016530:	dc000017 	ldw	r16,0(sp)
 4016534:	dec00304 	addi	sp,sp,12
 4016538:	f800283a 	ret

0401653c <__multiply>:
 401653c:	defffa04 	addi	sp,sp,-24
 4016540:	dcc00315 	stw	r19,12(sp)
 4016544:	dc800215 	stw	r18,8(sp)
 4016548:	34c00417 	ldw	r19,16(r6)
 401654c:	2c800417 	ldw	r18,16(r5)
 4016550:	dd000415 	stw	r20,16(sp)
 4016554:	dc400115 	stw	r17,4(sp)
 4016558:	dfc00515 	stw	ra,20(sp)
 401655c:	dc000015 	stw	r16,0(sp)
 4016560:	2829883a 	mov	r20,r5
 4016564:	3023883a 	mov	r17,r6
 4016568:	94c0050e 	bge	r18,r19,4016580 <__multiply+0x44>
 401656c:	9007883a 	mov	r3,r18
 4016570:	3029883a 	mov	r20,r6
 4016574:	9825883a 	mov	r18,r19
 4016578:	2823883a 	mov	r17,r5
 401657c:	1827883a 	mov	r19,r3
 4016580:	a0800217 	ldw	r2,8(r20)
 4016584:	94e1883a 	add	r16,r18,r19
 4016588:	a1400117 	ldw	r5,4(r20)
 401658c:	1400010e 	bge	r2,r16,4016594 <__multiply+0x58>
 4016590:	29400044 	addi	r5,r5,1
 4016594:	40160f40 	call	40160f4 <_Balloc>
 4016598:	8415883a 	add	r10,r16,r16
 401659c:	12c00504 	addi	r11,r2,20
 40165a0:	5295883a 	add	r10,r10,r10
 40165a4:	5a95883a 	add	r10,r11,r10
 40165a8:	5807883a 	mov	r3,r11
 40165ac:	5a80032e 	bgeu	r11,r10,40165bc <__multiply+0x80>
 40165b0:	18000015 	stw	zero,0(r3)
 40165b4:	18c00104 	addi	r3,r3,4
 40165b8:	1abffd36 	bltu	r3,r10,40165b0 <__alt_mem_epcs_flash_controller_0+0xfb0155b0>
 40165bc:	9ce7883a 	add	r19,r19,r19
 40165c0:	94a5883a 	add	r18,r18,r18
 40165c4:	89800504 	addi	r6,r17,20
 40165c8:	9ce7883a 	add	r19,r19,r19
 40165cc:	a3400504 	addi	r13,r20,20
 40165d0:	94a5883a 	add	r18,r18,r18
 40165d4:	34d9883a 	add	r12,r6,r19
 40165d8:	6c93883a 	add	r9,r13,r18
 40165dc:	3300422e 	bgeu	r6,r12,40166e8 <__multiply+0x1ac>
 40165e0:	37c00017 	ldw	ra,0(r6)
 40165e4:	fbffffcc 	andi	r15,ra,65535
 40165e8:	78001b26 	beq	r15,zero,4016658 <__multiply+0x11c>
 40165ec:	5811883a 	mov	r8,r11
 40165f0:	681d883a 	mov	r14,r13
 40165f4:	000f883a 	mov	r7,zero
 40165f8:	71000017 	ldw	r4,0(r14)
 40165fc:	40c00017 	ldw	r3,0(r8)
 4016600:	73800104 	addi	r14,r14,4
 4016604:	217fffcc 	andi	r5,r4,65535
 4016608:	2bcb383a 	mul	r5,r5,r15
 401660c:	2008d43a 	srli	r4,r4,16
 4016610:	1c7fffcc 	andi	r17,r3,65535
 4016614:	2c4b883a 	add	r5,r5,r17
 4016618:	29cb883a 	add	r5,r5,r7
 401661c:	23c9383a 	mul	r4,r4,r15
 4016620:	1806d43a 	srli	r3,r3,16
 4016624:	280ed43a 	srli	r7,r5,16
 4016628:	297fffcc 	andi	r5,r5,65535
 401662c:	20c7883a 	add	r3,r4,r3
 4016630:	19c7883a 	add	r3,r3,r7
 4016634:	1808943a 	slli	r4,r3,16
 4016638:	4023883a 	mov	r17,r8
 401663c:	180ed43a 	srli	r7,r3,16
 4016640:	214ab03a 	or	r5,r4,r5
 4016644:	41400015 	stw	r5,0(r8)
 4016648:	42000104 	addi	r8,r8,4
 401664c:	727fea36 	bltu	r14,r9,40165f8 <__alt_mem_epcs_flash_controller_0+0xfb0155f8>
 4016650:	89c00115 	stw	r7,4(r17)
 4016654:	37c00017 	ldw	ra,0(r6)
 4016658:	f83ed43a 	srli	ra,ra,16
 401665c:	f8001f26 	beq	ra,zero,40166dc <__multiply+0x1a0>
 4016660:	58c00017 	ldw	r3,0(r11)
 4016664:	681d883a 	mov	r14,r13
 4016668:	581f883a 	mov	r15,r11
 401666c:	1811883a 	mov	r8,r3
 4016670:	5825883a 	mov	r18,r11
 4016674:	000f883a 	mov	r7,zero
 4016678:	00000106 	br	4016680 <__multiply+0x144>
 401667c:	8825883a 	mov	r18,r17
 4016680:	7140000b 	ldhu	r5,0(r14)
 4016684:	4010d43a 	srli	r8,r8,16
 4016688:	193fffcc 	andi	r4,r3,65535
 401668c:	2fcb383a 	mul	r5,r5,ra
 4016690:	7bc00104 	addi	r15,r15,4
 4016694:	73800104 	addi	r14,r14,4
 4016698:	2a0b883a 	add	r5,r5,r8
 401669c:	29cb883a 	add	r5,r5,r7
 40166a0:	2806943a 	slli	r3,r5,16
 40166a4:	94400104 	addi	r17,r18,4
 40166a8:	280ad43a 	srli	r5,r5,16
 40166ac:	1908b03a 	or	r4,r3,r4
 40166b0:	793fff15 	stw	r4,-4(r15)
 40166b4:	70ffff17 	ldw	r3,-4(r14)
 40166b8:	8a000017 	ldw	r8,0(r17)
 40166bc:	1806d43a 	srli	r3,r3,16
 40166c0:	413fffcc 	andi	r4,r8,65535
 40166c4:	1fc7383a 	mul	r3,r3,ra
 40166c8:	1907883a 	add	r3,r3,r4
 40166cc:	1947883a 	add	r3,r3,r5
 40166d0:	180ed43a 	srli	r7,r3,16
 40166d4:	727fe936 	bltu	r14,r9,401667c <__alt_mem_epcs_flash_controller_0+0xfb01567c>
 40166d8:	90c00115 	stw	r3,4(r18)
 40166dc:	31800104 	addi	r6,r6,4
 40166e0:	5ac00104 	addi	r11,r11,4
 40166e4:	333fbe36 	bltu	r6,r12,40165e0 <__alt_mem_epcs_flash_controller_0+0xfb0155e0>
 40166e8:	0400090e 	bge	zero,r16,4016710 <__multiply+0x1d4>
 40166ec:	50ffff17 	ldw	r3,-4(r10)
 40166f0:	52bfff04 	addi	r10,r10,-4
 40166f4:	18000326 	beq	r3,zero,4016704 <__multiply+0x1c8>
 40166f8:	00000506 	br	4016710 <__multiply+0x1d4>
 40166fc:	50c00017 	ldw	r3,0(r10)
 4016700:	1800031e 	bne	r3,zero,4016710 <__multiply+0x1d4>
 4016704:	843fffc4 	addi	r16,r16,-1
 4016708:	52bfff04 	addi	r10,r10,-4
 401670c:	803ffb1e 	bne	r16,zero,40166fc <__alt_mem_epcs_flash_controller_0+0xfb0156fc>
 4016710:	14000415 	stw	r16,16(r2)
 4016714:	dfc00517 	ldw	ra,20(sp)
 4016718:	dd000417 	ldw	r20,16(sp)
 401671c:	dcc00317 	ldw	r19,12(sp)
 4016720:	dc800217 	ldw	r18,8(sp)
 4016724:	dc400117 	ldw	r17,4(sp)
 4016728:	dc000017 	ldw	r16,0(sp)
 401672c:	dec00604 	addi	sp,sp,24
 4016730:	f800283a 	ret

04016734 <__pow5mult>:
 4016734:	defffa04 	addi	sp,sp,-24
 4016738:	dcc00315 	stw	r19,12(sp)
 401673c:	dc000015 	stw	r16,0(sp)
 4016740:	dfc00515 	stw	ra,20(sp)
 4016744:	dd000415 	stw	r20,16(sp)
 4016748:	dc800215 	stw	r18,8(sp)
 401674c:	dc400115 	stw	r17,4(sp)
 4016750:	308000cc 	andi	r2,r6,3
 4016754:	3021883a 	mov	r16,r6
 4016758:	2027883a 	mov	r19,r4
 401675c:	10002f1e 	bne	r2,zero,401681c <__pow5mult+0xe8>
 4016760:	2825883a 	mov	r18,r5
 4016764:	8021d0ba 	srai	r16,r16,2
 4016768:	80001a26 	beq	r16,zero,40167d4 <__pow5mult+0xa0>
 401676c:	9c401217 	ldw	r17,72(r19)
 4016770:	8800061e 	bne	r17,zero,401678c <__pow5mult+0x58>
 4016774:	00003406 	br	4016848 <__pow5mult+0x114>
 4016778:	8021d07a 	srai	r16,r16,1
 401677c:	80001526 	beq	r16,zero,40167d4 <__pow5mult+0xa0>
 4016780:	88800017 	ldw	r2,0(r17)
 4016784:	10001c26 	beq	r2,zero,40167f8 <__pow5mult+0xc4>
 4016788:	1023883a 	mov	r17,r2
 401678c:	8080004c 	andi	r2,r16,1
 4016790:	103ff926 	beq	r2,zero,4016778 <__alt_mem_epcs_flash_controller_0+0xfb015778>
 4016794:	880d883a 	mov	r6,r17
 4016798:	900b883a 	mov	r5,r18
 401679c:	9809883a 	mov	r4,r19
 40167a0:	401653c0 	call	401653c <__multiply>
 40167a4:	90001b26 	beq	r18,zero,4016814 <__pow5mult+0xe0>
 40167a8:	91000117 	ldw	r4,4(r18)
 40167ac:	98c01317 	ldw	r3,76(r19)
 40167b0:	8021d07a 	srai	r16,r16,1
 40167b4:	2109883a 	add	r4,r4,r4
 40167b8:	2109883a 	add	r4,r4,r4
 40167bc:	1907883a 	add	r3,r3,r4
 40167c0:	19000017 	ldw	r4,0(r3)
 40167c4:	91000015 	stw	r4,0(r18)
 40167c8:	1c800015 	stw	r18,0(r3)
 40167cc:	1025883a 	mov	r18,r2
 40167d0:	803feb1e 	bne	r16,zero,4016780 <__alt_mem_epcs_flash_controller_0+0xfb015780>
 40167d4:	9005883a 	mov	r2,r18
 40167d8:	dfc00517 	ldw	ra,20(sp)
 40167dc:	dd000417 	ldw	r20,16(sp)
 40167e0:	dcc00317 	ldw	r19,12(sp)
 40167e4:	dc800217 	ldw	r18,8(sp)
 40167e8:	dc400117 	ldw	r17,4(sp)
 40167ec:	dc000017 	ldw	r16,0(sp)
 40167f0:	dec00604 	addi	sp,sp,24
 40167f4:	f800283a 	ret
 40167f8:	880d883a 	mov	r6,r17
 40167fc:	880b883a 	mov	r5,r17
 4016800:	9809883a 	mov	r4,r19
 4016804:	401653c0 	call	401653c <__multiply>
 4016808:	88800015 	stw	r2,0(r17)
 401680c:	10000015 	stw	zero,0(r2)
 4016810:	003fdd06 	br	4016788 <__alt_mem_epcs_flash_controller_0+0xfb015788>
 4016814:	1025883a 	mov	r18,r2
 4016818:	003fd706 	br	4016778 <__alt_mem_epcs_flash_controller_0+0xfb015778>
 401681c:	10bfffc4 	addi	r2,r2,-1
 4016820:	1085883a 	add	r2,r2,r2
 4016824:	00c10234 	movhi	r3,1032
 4016828:	18d54e04 	addi	r3,r3,21816
 401682c:	1085883a 	add	r2,r2,r2
 4016830:	1885883a 	add	r2,r3,r2
 4016834:	11800017 	ldw	r6,0(r2)
 4016838:	000f883a 	mov	r7,zero
 401683c:	40161c40 	call	40161c4 <__multadd>
 4016840:	1025883a 	mov	r18,r2
 4016844:	003fc706 	br	4016764 <__alt_mem_epcs_flash_controller_0+0xfb015764>
 4016848:	05000044 	movi	r20,1
 401684c:	a00b883a 	mov	r5,r20
 4016850:	9809883a 	mov	r4,r19
 4016854:	40160f40 	call	40160f4 <_Balloc>
 4016858:	1023883a 	mov	r17,r2
 401685c:	00809c44 	movi	r2,625
 4016860:	88800515 	stw	r2,20(r17)
 4016864:	8d000415 	stw	r20,16(r17)
 4016868:	9c401215 	stw	r17,72(r19)
 401686c:	88000015 	stw	zero,0(r17)
 4016870:	003fc606 	br	401678c <__alt_mem_epcs_flash_controller_0+0xfb01578c>

04016874 <__lshift>:
 4016874:	defff904 	addi	sp,sp,-28
 4016878:	dd400515 	stw	r21,20(sp)
 401687c:	dcc00315 	stw	r19,12(sp)
 4016880:	302bd17a 	srai	r21,r6,5
 4016884:	2cc00417 	ldw	r19,16(r5)
 4016888:	28800217 	ldw	r2,8(r5)
 401688c:	dd000415 	stw	r20,16(sp)
 4016890:	ace7883a 	add	r19,r21,r19
 4016894:	dc800215 	stw	r18,8(sp)
 4016898:	dc400115 	stw	r17,4(sp)
 401689c:	dc000015 	stw	r16,0(sp)
 40168a0:	dfc00615 	stw	ra,24(sp)
 40168a4:	9c000044 	addi	r16,r19,1
 40168a8:	2823883a 	mov	r17,r5
 40168ac:	3029883a 	mov	r20,r6
 40168b0:	2025883a 	mov	r18,r4
 40168b4:	29400117 	ldw	r5,4(r5)
 40168b8:	1400030e 	bge	r2,r16,40168c8 <__lshift+0x54>
 40168bc:	1085883a 	add	r2,r2,r2
 40168c0:	29400044 	addi	r5,r5,1
 40168c4:	143ffd16 	blt	r2,r16,40168bc <__alt_mem_epcs_flash_controller_0+0xfb0158bc>
 40168c8:	9009883a 	mov	r4,r18
 40168cc:	40160f40 	call	40160f4 <_Balloc>
 40168d0:	10c00504 	addi	r3,r2,20
 40168d4:	0540070e 	bge	zero,r21,40168f4 <__lshift+0x80>
 40168d8:	ad6b883a 	add	r21,r21,r21
 40168dc:	ad6b883a 	add	r21,r21,r21
 40168e0:	1809883a 	mov	r4,r3
 40168e4:	1d47883a 	add	r3,r3,r21
 40168e8:	20000015 	stw	zero,0(r4)
 40168ec:	21000104 	addi	r4,r4,4
 40168f0:	193ffd1e 	bne	r3,r4,40168e8 <__alt_mem_epcs_flash_controller_0+0xfb0158e8>
 40168f4:	8a000417 	ldw	r8,16(r17)
 40168f8:	89000504 	addi	r4,r17,20
 40168fc:	a18007cc 	andi	r6,r20,31
 4016900:	4211883a 	add	r8,r8,r8
 4016904:	4211883a 	add	r8,r8,r8
 4016908:	2211883a 	add	r8,r4,r8
 401690c:	30002326 	beq	r6,zero,401699c <__lshift+0x128>
 4016910:	02400804 	movi	r9,32
 4016914:	4993c83a 	sub	r9,r9,r6
 4016918:	000b883a 	mov	r5,zero
 401691c:	21c00017 	ldw	r7,0(r4)
 4016920:	1815883a 	mov	r10,r3
 4016924:	18c00104 	addi	r3,r3,4
 4016928:	398e983a 	sll	r7,r7,r6
 401692c:	21000104 	addi	r4,r4,4
 4016930:	394ab03a 	or	r5,r7,r5
 4016934:	197fff15 	stw	r5,-4(r3)
 4016938:	217fff17 	ldw	r5,-4(r4)
 401693c:	2a4ad83a 	srl	r5,r5,r9
 4016940:	223ff636 	bltu	r4,r8,401691c <__alt_mem_epcs_flash_controller_0+0xfb01591c>
 4016944:	51400115 	stw	r5,4(r10)
 4016948:	28001a1e 	bne	r5,zero,40169b4 <__lshift+0x140>
 401694c:	843fffc4 	addi	r16,r16,-1
 4016950:	14000415 	stw	r16,16(r2)
 4016954:	88000826 	beq	r17,zero,4016978 <__lshift+0x104>
 4016958:	89000117 	ldw	r4,4(r17)
 401695c:	90c01317 	ldw	r3,76(r18)
 4016960:	2109883a 	add	r4,r4,r4
 4016964:	2109883a 	add	r4,r4,r4
 4016968:	1907883a 	add	r3,r3,r4
 401696c:	19000017 	ldw	r4,0(r3)
 4016970:	89000015 	stw	r4,0(r17)
 4016974:	1c400015 	stw	r17,0(r3)
 4016978:	dfc00617 	ldw	ra,24(sp)
 401697c:	dd400517 	ldw	r21,20(sp)
 4016980:	dd000417 	ldw	r20,16(sp)
 4016984:	dcc00317 	ldw	r19,12(sp)
 4016988:	dc800217 	ldw	r18,8(sp)
 401698c:	dc400117 	ldw	r17,4(sp)
 4016990:	dc000017 	ldw	r16,0(sp)
 4016994:	dec00704 	addi	sp,sp,28
 4016998:	f800283a 	ret
 401699c:	21400017 	ldw	r5,0(r4)
 40169a0:	18c00104 	addi	r3,r3,4
 40169a4:	21000104 	addi	r4,r4,4
 40169a8:	197fff15 	stw	r5,-4(r3)
 40169ac:	223ffb36 	bltu	r4,r8,401699c <__alt_mem_epcs_flash_controller_0+0xfb01599c>
 40169b0:	003fe606 	br	401694c <__alt_mem_epcs_flash_controller_0+0xfb01594c>
 40169b4:	9c000084 	addi	r16,r19,2
 40169b8:	003fe406 	br	401694c <__alt_mem_epcs_flash_controller_0+0xfb01594c>

040169bc <__mcmp>:
 40169bc:	20800417 	ldw	r2,16(r4)
 40169c0:	28c00417 	ldw	r3,16(r5)
 40169c4:	10c5c83a 	sub	r2,r2,r3
 40169c8:	1000111e 	bne	r2,zero,4016a10 <__mcmp+0x54>
 40169cc:	18c7883a 	add	r3,r3,r3
 40169d0:	18c7883a 	add	r3,r3,r3
 40169d4:	21000504 	addi	r4,r4,20
 40169d8:	29400504 	addi	r5,r5,20
 40169dc:	20c5883a 	add	r2,r4,r3
 40169e0:	28cb883a 	add	r5,r5,r3
 40169e4:	00000106 	br	40169ec <__mcmp+0x30>
 40169e8:	20800a2e 	bgeu	r4,r2,4016a14 <__mcmp+0x58>
 40169ec:	10bfff04 	addi	r2,r2,-4
 40169f0:	297fff04 	addi	r5,r5,-4
 40169f4:	11800017 	ldw	r6,0(r2)
 40169f8:	28c00017 	ldw	r3,0(r5)
 40169fc:	30fffa26 	beq	r6,r3,40169e8 <__alt_mem_epcs_flash_controller_0+0xfb0159e8>
 4016a00:	30c00236 	bltu	r6,r3,4016a0c <__mcmp+0x50>
 4016a04:	00800044 	movi	r2,1
 4016a08:	f800283a 	ret
 4016a0c:	00bfffc4 	movi	r2,-1
 4016a10:	f800283a 	ret
 4016a14:	0005883a 	mov	r2,zero
 4016a18:	f800283a 	ret

04016a1c <__mdiff>:
 4016a1c:	28c00417 	ldw	r3,16(r5)
 4016a20:	30800417 	ldw	r2,16(r6)
 4016a24:	defffa04 	addi	sp,sp,-24
 4016a28:	dcc00315 	stw	r19,12(sp)
 4016a2c:	dc800215 	stw	r18,8(sp)
 4016a30:	dfc00515 	stw	ra,20(sp)
 4016a34:	dd000415 	stw	r20,16(sp)
 4016a38:	dc400115 	stw	r17,4(sp)
 4016a3c:	dc000015 	stw	r16,0(sp)
 4016a40:	1887c83a 	sub	r3,r3,r2
 4016a44:	2825883a 	mov	r18,r5
 4016a48:	3027883a 	mov	r19,r6
 4016a4c:	1800141e 	bne	r3,zero,4016aa0 <__mdiff+0x84>
 4016a50:	1085883a 	add	r2,r2,r2
 4016a54:	1085883a 	add	r2,r2,r2
 4016a58:	2a000504 	addi	r8,r5,20
 4016a5c:	34000504 	addi	r16,r6,20
 4016a60:	4087883a 	add	r3,r8,r2
 4016a64:	8085883a 	add	r2,r16,r2
 4016a68:	00000106 	br	4016a70 <__mdiff+0x54>
 4016a6c:	40c0592e 	bgeu	r8,r3,4016bd4 <__mdiff+0x1b8>
 4016a70:	18ffff04 	addi	r3,r3,-4
 4016a74:	10bfff04 	addi	r2,r2,-4
 4016a78:	19c00017 	ldw	r7,0(r3)
 4016a7c:	11400017 	ldw	r5,0(r2)
 4016a80:	397ffa26 	beq	r7,r5,4016a6c <__alt_mem_epcs_flash_controller_0+0xfb015a6c>
 4016a84:	3940592e 	bgeu	r7,r5,4016bec <__mdiff+0x1d0>
 4016a88:	9005883a 	mov	r2,r18
 4016a8c:	4023883a 	mov	r17,r8
 4016a90:	9825883a 	mov	r18,r19
 4016a94:	05000044 	movi	r20,1
 4016a98:	1027883a 	mov	r19,r2
 4016a9c:	00000406 	br	4016ab0 <__mdiff+0x94>
 4016aa0:	18005616 	blt	r3,zero,4016bfc <__mdiff+0x1e0>
 4016aa4:	34400504 	addi	r17,r6,20
 4016aa8:	2c000504 	addi	r16,r5,20
 4016aac:	0029883a 	mov	r20,zero
 4016ab0:	91400117 	ldw	r5,4(r18)
 4016ab4:	40160f40 	call	40160f4 <_Balloc>
 4016ab8:	92400417 	ldw	r9,16(r18)
 4016abc:	9b000417 	ldw	r12,16(r19)
 4016ac0:	12c00504 	addi	r11,r2,20
 4016ac4:	4a51883a 	add	r8,r9,r9
 4016ac8:	6319883a 	add	r12,r12,r12
 4016acc:	4211883a 	add	r8,r8,r8
 4016ad0:	6319883a 	add	r12,r12,r12
 4016ad4:	15000315 	stw	r20,12(r2)
 4016ad8:	8211883a 	add	r8,r16,r8
 4016adc:	8b19883a 	add	r12,r17,r12
 4016ae0:	0007883a 	mov	r3,zero
 4016ae4:	81400017 	ldw	r5,0(r16)
 4016ae8:	89c00017 	ldw	r7,0(r17)
 4016aec:	59800104 	addi	r6,r11,4
 4016af0:	293fffcc 	andi	r4,r5,65535
 4016af4:	20c7883a 	add	r3,r4,r3
 4016af8:	393fffcc 	andi	r4,r7,65535
 4016afc:	1909c83a 	sub	r4,r3,r4
 4016b00:	280ad43a 	srli	r5,r5,16
 4016b04:	380ed43a 	srli	r7,r7,16
 4016b08:	2007d43a 	srai	r3,r4,16
 4016b0c:	213fffcc 	andi	r4,r4,65535
 4016b10:	29cbc83a 	sub	r5,r5,r7
 4016b14:	28c7883a 	add	r3,r5,r3
 4016b18:	180a943a 	slli	r5,r3,16
 4016b1c:	8c400104 	addi	r17,r17,4
 4016b20:	84000104 	addi	r16,r16,4
 4016b24:	2908b03a 	or	r4,r5,r4
 4016b28:	59000015 	stw	r4,0(r11)
 4016b2c:	1807d43a 	srai	r3,r3,16
 4016b30:	3015883a 	mov	r10,r6
 4016b34:	3017883a 	mov	r11,r6
 4016b38:	8b3fea36 	bltu	r17,r12,4016ae4 <__alt_mem_epcs_flash_controller_0+0xfb015ae4>
 4016b3c:	8200162e 	bgeu	r16,r8,4016b98 <__mdiff+0x17c>
 4016b40:	8017883a 	mov	r11,r16
 4016b44:	59400017 	ldw	r5,0(r11)
 4016b48:	31800104 	addi	r6,r6,4
 4016b4c:	5ac00104 	addi	r11,r11,4
 4016b50:	293fffcc 	andi	r4,r5,65535
 4016b54:	20c7883a 	add	r3,r4,r3
 4016b58:	280ed43a 	srli	r7,r5,16
 4016b5c:	180bd43a 	srai	r5,r3,16
 4016b60:	193fffcc 	andi	r4,r3,65535
 4016b64:	3947883a 	add	r3,r7,r5
 4016b68:	180a943a 	slli	r5,r3,16
 4016b6c:	1807d43a 	srai	r3,r3,16
 4016b70:	2908b03a 	or	r4,r5,r4
 4016b74:	313fff15 	stw	r4,-4(r6)
 4016b78:	5a3ff236 	bltu	r11,r8,4016b44 <__alt_mem_epcs_flash_controller_0+0xfb015b44>
 4016b7c:	0406303a 	nor	r3,zero,r16
 4016b80:	1a07883a 	add	r3,r3,r8
 4016b84:	1806d0ba 	srli	r3,r3,2
 4016b88:	18c00044 	addi	r3,r3,1
 4016b8c:	18c7883a 	add	r3,r3,r3
 4016b90:	18c7883a 	add	r3,r3,r3
 4016b94:	50d5883a 	add	r10,r10,r3
 4016b98:	50ffff04 	addi	r3,r10,-4
 4016b9c:	2000041e 	bne	r4,zero,4016bb0 <__mdiff+0x194>
 4016ba0:	18ffff04 	addi	r3,r3,-4
 4016ba4:	19000017 	ldw	r4,0(r3)
 4016ba8:	4a7fffc4 	addi	r9,r9,-1
 4016bac:	203ffc26 	beq	r4,zero,4016ba0 <__alt_mem_epcs_flash_controller_0+0xfb015ba0>
 4016bb0:	12400415 	stw	r9,16(r2)
 4016bb4:	dfc00517 	ldw	ra,20(sp)
 4016bb8:	dd000417 	ldw	r20,16(sp)
 4016bbc:	dcc00317 	ldw	r19,12(sp)
 4016bc0:	dc800217 	ldw	r18,8(sp)
 4016bc4:	dc400117 	ldw	r17,4(sp)
 4016bc8:	dc000017 	ldw	r16,0(sp)
 4016bcc:	dec00604 	addi	sp,sp,24
 4016bd0:	f800283a 	ret
 4016bd4:	000b883a 	mov	r5,zero
 4016bd8:	40160f40 	call	40160f4 <_Balloc>
 4016bdc:	00c00044 	movi	r3,1
 4016be0:	10c00415 	stw	r3,16(r2)
 4016be4:	10000515 	stw	zero,20(r2)
 4016be8:	003ff206 	br	4016bb4 <__alt_mem_epcs_flash_controller_0+0xfb015bb4>
 4016bec:	8023883a 	mov	r17,r16
 4016bf0:	0029883a 	mov	r20,zero
 4016bf4:	4021883a 	mov	r16,r8
 4016bf8:	003fad06 	br	4016ab0 <__alt_mem_epcs_flash_controller_0+0xfb015ab0>
 4016bfc:	9005883a 	mov	r2,r18
 4016c00:	94400504 	addi	r17,r18,20
 4016c04:	9c000504 	addi	r16,r19,20
 4016c08:	9825883a 	mov	r18,r19
 4016c0c:	05000044 	movi	r20,1
 4016c10:	1027883a 	mov	r19,r2
 4016c14:	003fa606 	br	4016ab0 <__alt_mem_epcs_flash_controller_0+0xfb015ab0>

04016c18 <__ulp>:
 4016c18:	295ffc2c 	andhi	r5,r5,32752
 4016c1c:	00bf3034 	movhi	r2,64704
 4016c20:	2887883a 	add	r3,r5,r2
 4016c24:	00c0020e 	bge	zero,r3,4016c30 <__ulp+0x18>
 4016c28:	0005883a 	mov	r2,zero
 4016c2c:	f800283a 	ret
 4016c30:	00c7c83a 	sub	r3,zero,r3
 4016c34:	1807d53a 	srai	r3,r3,20
 4016c38:	008004c4 	movi	r2,19
 4016c3c:	10c00b0e 	bge	r2,r3,4016c6c <__ulp+0x54>
 4016c40:	18bffb04 	addi	r2,r3,-20
 4016c44:	01000784 	movi	r4,30
 4016c48:	0007883a 	mov	r3,zero
 4016c4c:	20800516 	blt	r4,r2,4016c64 <__ulp+0x4c>
 4016c50:	010007c4 	movi	r4,31
 4016c54:	2089c83a 	sub	r4,r4,r2
 4016c58:	00800044 	movi	r2,1
 4016c5c:	1104983a 	sll	r2,r2,r4
 4016c60:	f800283a 	ret
 4016c64:	00800044 	movi	r2,1
 4016c68:	f800283a 	ret
 4016c6c:	01400234 	movhi	r5,8
 4016c70:	28c7d83a 	sra	r3,r5,r3
 4016c74:	0005883a 	mov	r2,zero
 4016c78:	f800283a 	ret

04016c7c <__b2d>:
 4016c7c:	defffa04 	addi	sp,sp,-24
 4016c80:	dc000015 	stw	r16,0(sp)
 4016c84:	24000417 	ldw	r16,16(r4)
 4016c88:	dc400115 	stw	r17,4(sp)
 4016c8c:	24400504 	addi	r17,r4,20
 4016c90:	8421883a 	add	r16,r16,r16
 4016c94:	8421883a 	add	r16,r16,r16
 4016c98:	8c21883a 	add	r16,r17,r16
 4016c9c:	dc800215 	stw	r18,8(sp)
 4016ca0:	84bfff17 	ldw	r18,-4(r16)
 4016ca4:	dd000415 	stw	r20,16(sp)
 4016ca8:	dcc00315 	stw	r19,12(sp)
 4016cac:	9009883a 	mov	r4,r18
 4016cb0:	2829883a 	mov	r20,r5
 4016cb4:	dfc00515 	stw	ra,20(sp)
 4016cb8:	40163e80 	call	40163e8 <__hi0bits>
 4016cbc:	00c00804 	movi	r3,32
 4016cc0:	1889c83a 	sub	r4,r3,r2
 4016cc4:	a1000015 	stw	r4,0(r20)
 4016cc8:	01000284 	movi	r4,10
 4016ccc:	84ffff04 	addi	r19,r16,-4
 4016cd0:	20801216 	blt	r4,r2,4016d1c <__b2d+0xa0>
 4016cd4:	018002c4 	movi	r6,11
 4016cd8:	308dc83a 	sub	r6,r6,r2
 4016cdc:	9186d83a 	srl	r3,r18,r6
 4016ce0:	18cffc34 	orhi	r3,r3,16368
 4016ce4:	8cc0212e 	bgeu	r17,r19,4016d6c <__b2d+0xf0>
 4016ce8:	813ffe17 	ldw	r4,-8(r16)
 4016cec:	218cd83a 	srl	r6,r4,r6
 4016cf0:	10800544 	addi	r2,r2,21
 4016cf4:	9084983a 	sll	r2,r18,r2
 4016cf8:	1184b03a 	or	r2,r2,r6
 4016cfc:	dfc00517 	ldw	ra,20(sp)
 4016d00:	dd000417 	ldw	r20,16(sp)
 4016d04:	dcc00317 	ldw	r19,12(sp)
 4016d08:	dc800217 	ldw	r18,8(sp)
 4016d0c:	dc400117 	ldw	r17,4(sp)
 4016d10:	dc000017 	ldw	r16,0(sp)
 4016d14:	dec00604 	addi	sp,sp,24
 4016d18:	f800283a 	ret
 4016d1c:	8cc00f2e 	bgeu	r17,r19,4016d5c <__b2d+0xe0>
 4016d20:	117ffd44 	addi	r5,r2,-11
 4016d24:	80bffe17 	ldw	r2,-8(r16)
 4016d28:	28000e26 	beq	r5,zero,4016d64 <__b2d+0xe8>
 4016d2c:	1949c83a 	sub	r4,r3,r5
 4016d30:	9164983a 	sll	r18,r18,r5
 4016d34:	1106d83a 	srl	r3,r2,r4
 4016d38:	81bffe04 	addi	r6,r16,-8
 4016d3c:	948ffc34 	orhi	r18,r18,16368
 4016d40:	90c6b03a 	or	r3,r18,r3
 4016d44:	89800e2e 	bgeu	r17,r6,4016d80 <__b2d+0x104>
 4016d48:	81bffd17 	ldw	r6,-12(r16)
 4016d4c:	1144983a 	sll	r2,r2,r5
 4016d50:	310ad83a 	srl	r5,r6,r4
 4016d54:	2884b03a 	or	r2,r5,r2
 4016d58:	003fe806 	br	4016cfc <__alt_mem_epcs_flash_controller_0+0xfb015cfc>
 4016d5c:	10bffd44 	addi	r2,r2,-11
 4016d60:	1000041e 	bne	r2,zero,4016d74 <__b2d+0xf8>
 4016d64:	90cffc34 	orhi	r3,r18,16368
 4016d68:	003fe406 	br	4016cfc <__alt_mem_epcs_flash_controller_0+0xfb015cfc>
 4016d6c:	000d883a 	mov	r6,zero
 4016d70:	003fdf06 	br	4016cf0 <__alt_mem_epcs_flash_controller_0+0xfb015cf0>
 4016d74:	90a4983a 	sll	r18,r18,r2
 4016d78:	0005883a 	mov	r2,zero
 4016d7c:	003ff906 	br	4016d64 <__alt_mem_epcs_flash_controller_0+0xfb015d64>
 4016d80:	1144983a 	sll	r2,r2,r5
 4016d84:	003fdd06 	br	4016cfc <__alt_mem_epcs_flash_controller_0+0xfb015cfc>

04016d88 <__d2b>:
 4016d88:	defff804 	addi	sp,sp,-32
 4016d8c:	dc000215 	stw	r16,8(sp)
 4016d90:	3021883a 	mov	r16,r6
 4016d94:	dc400315 	stw	r17,12(sp)
 4016d98:	8022907a 	slli	r17,r16,1
 4016d9c:	dd000615 	stw	r20,24(sp)
 4016da0:	2829883a 	mov	r20,r5
 4016da4:	01400044 	movi	r5,1
 4016da8:	dcc00515 	stw	r19,20(sp)
 4016dac:	dc800415 	stw	r18,16(sp)
 4016db0:	dfc00715 	stw	ra,28(sp)
 4016db4:	3825883a 	mov	r18,r7
 4016db8:	8822d57a 	srli	r17,r17,21
 4016dbc:	40160f40 	call	40160f4 <_Balloc>
 4016dc0:	1027883a 	mov	r19,r2
 4016dc4:	00800434 	movhi	r2,16
 4016dc8:	10bfffc4 	addi	r2,r2,-1
 4016dcc:	808c703a 	and	r6,r16,r2
 4016dd0:	88000126 	beq	r17,zero,4016dd8 <__d2b+0x50>
 4016dd4:	31800434 	orhi	r6,r6,16
 4016dd8:	d9800015 	stw	r6,0(sp)
 4016ddc:	a0002426 	beq	r20,zero,4016e70 <__d2b+0xe8>
 4016de0:	d9000104 	addi	r4,sp,4
 4016de4:	dd000115 	stw	r20,4(sp)
 4016de8:	40164500 	call	4016450 <__lo0bits>
 4016dec:	d8c00017 	ldw	r3,0(sp)
 4016df0:	10002f1e 	bne	r2,zero,4016eb0 <__d2b+0x128>
 4016df4:	d9000117 	ldw	r4,4(sp)
 4016df8:	99000515 	stw	r4,20(r19)
 4016dfc:	1821003a 	cmpeq	r16,r3,zero
 4016e00:	01000084 	movi	r4,2
 4016e04:	2421c83a 	sub	r16,r4,r16
 4016e08:	98c00615 	stw	r3,24(r19)
 4016e0c:	9c000415 	stw	r16,16(r19)
 4016e10:	88001f1e 	bne	r17,zero,4016e90 <__d2b+0x108>
 4016e14:	10bef384 	addi	r2,r2,-1074
 4016e18:	90800015 	stw	r2,0(r18)
 4016e1c:	00900034 	movhi	r2,16384
 4016e20:	10bfffc4 	addi	r2,r2,-1
 4016e24:	8085883a 	add	r2,r16,r2
 4016e28:	1085883a 	add	r2,r2,r2
 4016e2c:	1085883a 	add	r2,r2,r2
 4016e30:	9885883a 	add	r2,r19,r2
 4016e34:	11000517 	ldw	r4,20(r2)
 4016e38:	8020917a 	slli	r16,r16,5
 4016e3c:	40163e80 	call	40163e8 <__hi0bits>
 4016e40:	d8c00817 	ldw	r3,32(sp)
 4016e44:	8085c83a 	sub	r2,r16,r2
 4016e48:	18800015 	stw	r2,0(r3)
 4016e4c:	9805883a 	mov	r2,r19
 4016e50:	dfc00717 	ldw	ra,28(sp)
 4016e54:	dd000617 	ldw	r20,24(sp)
 4016e58:	dcc00517 	ldw	r19,20(sp)
 4016e5c:	dc800417 	ldw	r18,16(sp)
 4016e60:	dc400317 	ldw	r17,12(sp)
 4016e64:	dc000217 	ldw	r16,8(sp)
 4016e68:	dec00804 	addi	sp,sp,32
 4016e6c:	f800283a 	ret
 4016e70:	d809883a 	mov	r4,sp
 4016e74:	40164500 	call	4016450 <__lo0bits>
 4016e78:	d8c00017 	ldw	r3,0(sp)
 4016e7c:	04000044 	movi	r16,1
 4016e80:	9c000415 	stw	r16,16(r19)
 4016e84:	98c00515 	stw	r3,20(r19)
 4016e88:	10800804 	addi	r2,r2,32
 4016e8c:	883fe126 	beq	r17,zero,4016e14 <__alt_mem_epcs_flash_controller_0+0xfb015e14>
 4016e90:	00c00d44 	movi	r3,53
 4016e94:	8c7ef344 	addi	r17,r17,-1075
 4016e98:	88a3883a 	add	r17,r17,r2
 4016e9c:	1885c83a 	sub	r2,r3,r2
 4016ea0:	d8c00817 	ldw	r3,32(sp)
 4016ea4:	94400015 	stw	r17,0(r18)
 4016ea8:	18800015 	stw	r2,0(r3)
 4016eac:	003fe706 	br	4016e4c <__alt_mem_epcs_flash_controller_0+0xfb015e4c>
 4016eb0:	01000804 	movi	r4,32
 4016eb4:	2089c83a 	sub	r4,r4,r2
 4016eb8:	1908983a 	sll	r4,r3,r4
 4016ebc:	d9400117 	ldw	r5,4(sp)
 4016ec0:	1886d83a 	srl	r3,r3,r2
 4016ec4:	2148b03a 	or	r4,r4,r5
 4016ec8:	99000515 	stw	r4,20(r19)
 4016ecc:	d8c00015 	stw	r3,0(sp)
 4016ed0:	003fca06 	br	4016dfc <__alt_mem_epcs_flash_controller_0+0xfb015dfc>

04016ed4 <__ratio>:
 4016ed4:	defff904 	addi	sp,sp,-28
 4016ed8:	dc400315 	stw	r17,12(sp)
 4016edc:	2823883a 	mov	r17,r5
 4016ee0:	d9400104 	addi	r5,sp,4
 4016ee4:	dfc00615 	stw	ra,24(sp)
 4016ee8:	dcc00515 	stw	r19,20(sp)
 4016eec:	dc800415 	stw	r18,16(sp)
 4016ef0:	2027883a 	mov	r19,r4
 4016ef4:	dc000215 	stw	r16,8(sp)
 4016ef8:	4016c7c0 	call	4016c7c <__b2d>
 4016efc:	d80b883a 	mov	r5,sp
 4016f00:	8809883a 	mov	r4,r17
 4016f04:	1025883a 	mov	r18,r2
 4016f08:	1821883a 	mov	r16,r3
 4016f0c:	4016c7c0 	call	4016c7c <__b2d>
 4016f10:	8a000417 	ldw	r8,16(r17)
 4016f14:	99000417 	ldw	r4,16(r19)
 4016f18:	d9400117 	ldw	r5,4(sp)
 4016f1c:	2209c83a 	sub	r4,r4,r8
 4016f20:	2010917a 	slli	r8,r4,5
 4016f24:	d9000017 	ldw	r4,0(sp)
 4016f28:	2909c83a 	sub	r4,r5,r4
 4016f2c:	4109883a 	add	r4,r8,r4
 4016f30:	01000e0e 	bge	zero,r4,4016f6c <__ratio+0x98>
 4016f34:	2008953a 	slli	r4,r4,20
 4016f38:	2421883a 	add	r16,r4,r16
 4016f3c:	100d883a 	mov	r6,r2
 4016f40:	180f883a 	mov	r7,r3
 4016f44:	9009883a 	mov	r4,r18
 4016f48:	800b883a 	mov	r5,r16
 4016f4c:	400bf600 	call	400bf60 <__divdf3>
 4016f50:	dfc00617 	ldw	ra,24(sp)
 4016f54:	dcc00517 	ldw	r19,20(sp)
 4016f58:	dc800417 	ldw	r18,16(sp)
 4016f5c:	dc400317 	ldw	r17,12(sp)
 4016f60:	dc000217 	ldw	r16,8(sp)
 4016f64:	dec00704 	addi	sp,sp,28
 4016f68:	f800283a 	ret
 4016f6c:	2008953a 	slli	r4,r4,20
 4016f70:	1907c83a 	sub	r3,r3,r4
 4016f74:	003ff106 	br	4016f3c <__alt_mem_epcs_flash_controller_0+0xfb015f3c>

04016f78 <_mprec_log10>:
 4016f78:	defffe04 	addi	sp,sp,-8
 4016f7c:	dc000015 	stw	r16,0(sp)
 4016f80:	dfc00115 	stw	ra,4(sp)
 4016f84:	008005c4 	movi	r2,23
 4016f88:	2021883a 	mov	r16,r4
 4016f8c:	11000d0e 	bge	r2,r4,4016fc4 <_mprec_log10+0x4c>
 4016f90:	0005883a 	mov	r2,zero
 4016f94:	00cffc34 	movhi	r3,16368
 4016f98:	843fffc4 	addi	r16,r16,-1
 4016f9c:	000d883a 	mov	r6,zero
 4016fa0:	01d00934 	movhi	r7,16420
 4016fa4:	1009883a 	mov	r4,r2
 4016fa8:	180b883a 	mov	r5,r3
 4016fac:	400ca180 	call	400ca18 <__muldf3>
 4016fb0:	803ff91e 	bne	r16,zero,4016f98 <__alt_mem_epcs_flash_controller_0+0xfb015f98>
 4016fb4:	dfc00117 	ldw	ra,4(sp)
 4016fb8:	dc000017 	ldw	r16,0(sp)
 4016fbc:	dec00204 	addi	sp,sp,8
 4016fc0:	f800283a 	ret
 4016fc4:	202090fa 	slli	r16,r4,3
 4016fc8:	00810234 	movhi	r2,1032
 4016fcc:	10956504 	addi	r2,r2,21908
 4016fd0:	1421883a 	add	r16,r2,r16
 4016fd4:	80800017 	ldw	r2,0(r16)
 4016fd8:	80c00117 	ldw	r3,4(r16)
 4016fdc:	dfc00117 	ldw	ra,4(sp)
 4016fe0:	dc000017 	ldw	r16,0(sp)
 4016fe4:	dec00204 	addi	sp,sp,8
 4016fe8:	f800283a 	ret

04016fec <__copybits>:
 4016fec:	297fffc4 	addi	r5,r5,-1
 4016ff0:	280fd17a 	srai	r7,r5,5
 4016ff4:	30c00417 	ldw	r3,16(r6)
 4016ff8:	30800504 	addi	r2,r6,20
 4016ffc:	39c00044 	addi	r7,r7,1
 4017000:	18c7883a 	add	r3,r3,r3
 4017004:	39cf883a 	add	r7,r7,r7
 4017008:	18c7883a 	add	r3,r3,r3
 401700c:	39cf883a 	add	r7,r7,r7
 4017010:	10c7883a 	add	r3,r2,r3
 4017014:	21cf883a 	add	r7,r4,r7
 4017018:	10c00d2e 	bgeu	r2,r3,4017050 <__copybits+0x64>
 401701c:	200b883a 	mov	r5,r4
 4017020:	12000017 	ldw	r8,0(r2)
 4017024:	29400104 	addi	r5,r5,4
 4017028:	10800104 	addi	r2,r2,4
 401702c:	2a3fff15 	stw	r8,-4(r5)
 4017030:	10fffb36 	bltu	r2,r3,4017020 <__alt_mem_epcs_flash_controller_0+0xfb016020>
 4017034:	1985c83a 	sub	r2,r3,r6
 4017038:	10bffac4 	addi	r2,r2,-21
 401703c:	1004d0ba 	srli	r2,r2,2
 4017040:	10800044 	addi	r2,r2,1
 4017044:	1085883a 	add	r2,r2,r2
 4017048:	1085883a 	add	r2,r2,r2
 401704c:	2089883a 	add	r4,r4,r2
 4017050:	21c0032e 	bgeu	r4,r7,4017060 <__copybits+0x74>
 4017054:	20000015 	stw	zero,0(r4)
 4017058:	21000104 	addi	r4,r4,4
 401705c:	21fffd36 	bltu	r4,r7,4017054 <__alt_mem_epcs_flash_controller_0+0xfb016054>
 4017060:	f800283a 	ret

04017064 <__any_on>:
 4017064:	20c00417 	ldw	r3,16(r4)
 4017068:	2805d17a 	srai	r2,r5,5
 401706c:	21000504 	addi	r4,r4,20
 4017070:	18800d0e 	bge	r3,r2,40170a8 <__any_on+0x44>
 4017074:	18c7883a 	add	r3,r3,r3
 4017078:	18c7883a 	add	r3,r3,r3
 401707c:	20c7883a 	add	r3,r4,r3
 4017080:	20c0192e 	bgeu	r4,r3,40170e8 <__any_on+0x84>
 4017084:	18bfff17 	ldw	r2,-4(r3)
 4017088:	18ffff04 	addi	r3,r3,-4
 401708c:	1000041e 	bne	r2,zero,40170a0 <__any_on+0x3c>
 4017090:	20c0142e 	bgeu	r4,r3,40170e4 <__any_on+0x80>
 4017094:	18ffff04 	addi	r3,r3,-4
 4017098:	19400017 	ldw	r5,0(r3)
 401709c:	283ffc26 	beq	r5,zero,4017090 <__alt_mem_epcs_flash_controller_0+0xfb016090>
 40170a0:	00800044 	movi	r2,1
 40170a4:	f800283a 	ret
 40170a8:	10c00a0e 	bge	r2,r3,40170d4 <__any_on+0x70>
 40170ac:	1085883a 	add	r2,r2,r2
 40170b0:	1085883a 	add	r2,r2,r2
 40170b4:	294007cc 	andi	r5,r5,31
 40170b8:	2087883a 	add	r3,r4,r2
 40170bc:	283ff026 	beq	r5,zero,4017080 <__alt_mem_epcs_flash_controller_0+0xfb016080>
 40170c0:	19800017 	ldw	r6,0(r3)
 40170c4:	3144d83a 	srl	r2,r6,r5
 40170c8:	114a983a 	sll	r5,r2,r5
 40170cc:	317ff41e 	bne	r6,r5,40170a0 <__alt_mem_epcs_flash_controller_0+0xfb0160a0>
 40170d0:	003feb06 	br	4017080 <__alt_mem_epcs_flash_controller_0+0xfb016080>
 40170d4:	1085883a 	add	r2,r2,r2
 40170d8:	1085883a 	add	r2,r2,r2
 40170dc:	2087883a 	add	r3,r4,r2
 40170e0:	003fe706 	br	4017080 <__alt_mem_epcs_flash_controller_0+0xfb016080>
 40170e4:	f800283a 	ret
 40170e8:	0005883a 	mov	r2,zero
 40170ec:	f800283a 	ret

040170f0 <_realloc_r>:
 40170f0:	defff604 	addi	sp,sp,-40
 40170f4:	dc800215 	stw	r18,8(sp)
 40170f8:	dfc00915 	stw	ra,36(sp)
 40170fc:	df000815 	stw	fp,32(sp)
 4017100:	ddc00715 	stw	r23,28(sp)
 4017104:	dd800615 	stw	r22,24(sp)
 4017108:	dd400515 	stw	r21,20(sp)
 401710c:	dd000415 	stw	r20,16(sp)
 4017110:	dcc00315 	stw	r19,12(sp)
 4017114:	dc400115 	stw	r17,4(sp)
 4017118:	dc000015 	stw	r16,0(sp)
 401711c:	3025883a 	mov	r18,r6
 4017120:	2800b726 	beq	r5,zero,4017400 <_realloc_r+0x310>
 4017124:	282b883a 	mov	r21,r5
 4017128:	2029883a 	mov	r20,r4
 401712c:	401bf4c0 	call	401bf4c <__malloc_lock>
 4017130:	a8bfff17 	ldw	r2,-4(r21)
 4017134:	043fff04 	movi	r16,-4
 4017138:	90c002c4 	addi	r3,r18,11
 401713c:	01000584 	movi	r4,22
 4017140:	acfffe04 	addi	r19,r21,-8
 4017144:	1420703a 	and	r16,r2,r16
 4017148:	20c0332e 	bgeu	r4,r3,4017218 <_realloc_r+0x128>
 401714c:	047ffe04 	movi	r17,-8
 4017150:	1c62703a 	and	r17,r3,r17
 4017154:	8807883a 	mov	r3,r17
 4017158:	88005816 	blt	r17,zero,40172bc <_realloc_r+0x1cc>
 401715c:	8c805736 	bltu	r17,r18,40172bc <_realloc_r+0x1cc>
 4017160:	80c0300e 	bge	r16,r3,4017224 <_realloc_r+0x134>
 4017164:	070103f4 	movhi	fp,1039
 4017168:	e7061d04 	addi	fp,fp,6260
 401716c:	e1c00217 	ldw	r7,8(fp)
 4017170:	9c09883a 	add	r4,r19,r16
 4017174:	22000117 	ldw	r8,4(r4)
 4017178:	21c06326 	beq	r4,r7,4017308 <_realloc_r+0x218>
 401717c:	017fff84 	movi	r5,-2
 4017180:	414a703a 	and	r5,r8,r5
 4017184:	214b883a 	add	r5,r4,r5
 4017188:	29800117 	ldw	r6,4(r5)
 401718c:	3180004c 	andi	r6,r6,1
 4017190:	30003f26 	beq	r6,zero,4017290 <_realloc_r+0x1a0>
 4017194:	1080004c 	andi	r2,r2,1
 4017198:	10008326 	beq	r2,zero,40173a8 <_realloc_r+0x2b8>
 401719c:	900b883a 	mov	r5,r18
 40171a0:	a009883a 	mov	r4,r20
 40171a4:	400dedc0 	call	400dedc <_malloc_r>
 40171a8:	1025883a 	mov	r18,r2
 40171ac:	10011e26 	beq	r2,zero,4017628 <_realloc_r+0x538>
 40171b0:	a93fff17 	ldw	r4,-4(r21)
 40171b4:	10fffe04 	addi	r3,r2,-8
 40171b8:	00bfff84 	movi	r2,-2
 40171bc:	2084703a 	and	r2,r4,r2
 40171c0:	9885883a 	add	r2,r19,r2
 40171c4:	1880ee26 	beq	r3,r2,4017580 <_realloc_r+0x490>
 40171c8:	81bfff04 	addi	r6,r16,-4
 40171cc:	00800904 	movi	r2,36
 40171d0:	1180b836 	bltu	r2,r6,40174b4 <_realloc_r+0x3c4>
 40171d4:	00c004c4 	movi	r3,19
 40171d8:	19809636 	bltu	r3,r6,4017434 <_realloc_r+0x344>
 40171dc:	9005883a 	mov	r2,r18
 40171e0:	a807883a 	mov	r3,r21
 40171e4:	19000017 	ldw	r4,0(r3)
 40171e8:	11000015 	stw	r4,0(r2)
 40171ec:	19000117 	ldw	r4,4(r3)
 40171f0:	11000115 	stw	r4,4(r2)
 40171f4:	18c00217 	ldw	r3,8(r3)
 40171f8:	10c00215 	stw	r3,8(r2)
 40171fc:	a80b883a 	mov	r5,r21
 4017200:	a009883a 	mov	r4,r20
 4017204:	40152c80 	call	40152c8 <_free_r>
 4017208:	a009883a 	mov	r4,r20
 401720c:	401bf700 	call	401bf70 <__malloc_unlock>
 4017210:	9005883a 	mov	r2,r18
 4017214:	00001206 	br	4017260 <_realloc_r+0x170>
 4017218:	00c00404 	movi	r3,16
 401721c:	1823883a 	mov	r17,r3
 4017220:	003fce06 	br	401715c <__alt_mem_epcs_flash_controller_0+0xfb01615c>
 4017224:	a825883a 	mov	r18,r21
 4017228:	8445c83a 	sub	r2,r16,r17
 401722c:	00c003c4 	movi	r3,15
 4017230:	18802636 	bltu	r3,r2,40172cc <_realloc_r+0x1dc>
 4017234:	99800117 	ldw	r6,4(r19)
 4017238:	9c07883a 	add	r3,r19,r16
 401723c:	3180004c 	andi	r6,r6,1
 4017240:	3420b03a 	or	r16,r6,r16
 4017244:	9c000115 	stw	r16,4(r19)
 4017248:	18800117 	ldw	r2,4(r3)
 401724c:	10800054 	ori	r2,r2,1
 4017250:	18800115 	stw	r2,4(r3)
 4017254:	a009883a 	mov	r4,r20
 4017258:	401bf700 	call	401bf70 <__malloc_unlock>
 401725c:	9005883a 	mov	r2,r18
 4017260:	dfc00917 	ldw	ra,36(sp)
 4017264:	df000817 	ldw	fp,32(sp)
 4017268:	ddc00717 	ldw	r23,28(sp)
 401726c:	dd800617 	ldw	r22,24(sp)
 4017270:	dd400517 	ldw	r21,20(sp)
 4017274:	dd000417 	ldw	r20,16(sp)
 4017278:	dcc00317 	ldw	r19,12(sp)
 401727c:	dc800217 	ldw	r18,8(sp)
 4017280:	dc400117 	ldw	r17,4(sp)
 4017284:	dc000017 	ldw	r16,0(sp)
 4017288:	dec00a04 	addi	sp,sp,40
 401728c:	f800283a 	ret
 4017290:	017fff04 	movi	r5,-4
 4017294:	414a703a 	and	r5,r8,r5
 4017298:	814d883a 	add	r6,r16,r5
 401729c:	30c01f16 	blt	r6,r3,401731c <_realloc_r+0x22c>
 40172a0:	20800317 	ldw	r2,12(r4)
 40172a4:	20c00217 	ldw	r3,8(r4)
 40172a8:	a825883a 	mov	r18,r21
 40172ac:	3021883a 	mov	r16,r6
 40172b0:	18800315 	stw	r2,12(r3)
 40172b4:	10c00215 	stw	r3,8(r2)
 40172b8:	003fdb06 	br	4017228 <__alt_mem_epcs_flash_controller_0+0xfb016228>
 40172bc:	00800304 	movi	r2,12
 40172c0:	a0800015 	stw	r2,0(r20)
 40172c4:	0005883a 	mov	r2,zero
 40172c8:	003fe506 	br	4017260 <__alt_mem_epcs_flash_controller_0+0xfb016260>
 40172cc:	98c00117 	ldw	r3,4(r19)
 40172d0:	9c4b883a 	add	r5,r19,r17
 40172d4:	11000054 	ori	r4,r2,1
 40172d8:	18c0004c 	andi	r3,r3,1
 40172dc:	1c62b03a 	or	r17,r3,r17
 40172e0:	9c400115 	stw	r17,4(r19)
 40172e4:	29000115 	stw	r4,4(r5)
 40172e8:	2885883a 	add	r2,r5,r2
 40172ec:	10c00117 	ldw	r3,4(r2)
 40172f0:	29400204 	addi	r5,r5,8
 40172f4:	a009883a 	mov	r4,r20
 40172f8:	18c00054 	ori	r3,r3,1
 40172fc:	10c00115 	stw	r3,4(r2)
 4017300:	40152c80 	call	40152c8 <_free_r>
 4017304:	003fd306 	br	4017254 <__alt_mem_epcs_flash_controller_0+0xfb016254>
 4017308:	017fff04 	movi	r5,-4
 401730c:	414a703a 	and	r5,r8,r5
 4017310:	89800404 	addi	r6,r17,16
 4017314:	8151883a 	add	r8,r16,r5
 4017318:	4180590e 	bge	r8,r6,4017480 <_realloc_r+0x390>
 401731c:	1080004c 	andi	r2,r2,1
 4017320:	103f9e1e 	bne	r2,zero,401719c <__alt_mem_epcs_flash_controller_0+0xfb01619c>
 4017324:	adbffe17 	ldw	r22,-8(r21)
 4017328:	00bfff04 	movi	r2,-4
 401732c:	9dadc83a 	sub	r22,r19,r22
 4017330:	b1800117 	ldw	r6,4(r22)
 4017334:	3084703a 	and	r2,r6,r2
 4017338:	20002026 	beq	r4,zero,40173bc <_realloc_r+0x2cc>
 401733c:	80af883a 	add	r23,r16,r2
 4017340:	b96f883a 	add	r23,r23,r5
 4017344:	21c05f26 	beq	r4,r7,40174c4 <_realloc_r+0x3d4>
 4017348:	b8c01c16 	blt	r23,r3,40173bc <_realloc_r+0x2cc>
 401734c:	20800317 	ldw	r2,12(r4)
 4017350:	20c00217 	ldw	r3,8(r4)
 4017354:	81bfff04 	addi	r6,r16,-4
 4017358:	01000904 	movi	r4,36
 401735c:	18800315 	stw	r2,12(r3)
 4017360:	10c00215 	stw	r3,8(r2)
 4017364:	b0c00217 	ldw	r3,8(r22)
 4017368:	b0800317 	ldw	r2,12(r22)
 401736c:	b4800204 	addi	r18,r22,8
 4017370:	18800315 	stw	r2,12(r3)
 4017374:	10c00215 	stw	r3,8(r2)
 4017378:	21801b36 	bltu	r4,r6,40173e8 <_realloc_r+0x2f8>
 401737c:	008004c4 	movi	r2,19
 4017380:	1180352e 	bgeu	r2,r6,4017458 <_realloc_r+0x368>
 4017384:	a8800017 	ldw	r2,0(r21)
 4017388:	b0800215 	stw	r2,8(r22)
 401738c:	a8800117 	ldw	r2,4(r21)
 4017390:	b0800315 	stw	r2,12(r22)
 4017394:	008006c4 	movi	r2,27
 4017398:	11807f36 	bltu	r2,r6,4017598 <_realloc_r+0x4a8>
 401739c:	b0800404 	addi	r2,r22,16
 40173a0:	ad400204 	addi	r21,r21,8
 40173a4:	00002d06 	br	401745c <_realloc_r+0x36c>
 40173a8:	adbffe17 	ldw	r22,-8(r21)
 40173ac:	00bfff04 	movi	r2,-4
 40173b0:	9dadc83a 	sub	r22,r19,r22
 40173b4:	b1000117 	ldw	r4,4(r22)
 40173b8:	2084703a 	and	r2,r4,r2
 40173bc:	b03f7726 	beq	r22,zero,401719c <__alt_mem_epcs_flash_controller_0+0xfb01619c>
 40173c0:	80af883a 	add	r23,r16,r2
 40173c4:	b8ff7516 	blt	r23,r3,401719c <__alt_mem_epcs_flash_controller_0+0xfb01619c>
 40173c8:	b0800317 	ldw	r2,12(r22)
 40173cc:	b0c00217 	ldw	r3,8(r22)
 40173d0:	81bfff04 	addi	r6,r16,-4
 40173d4:	01000904 	movi	r4,36
 40173d8:	18800315 	stw	r2,12(r3)
 40173dc:	10c00215 	stw	r3,8(r2)
 40173e0:	b4800204 	addi	r18,r22,8
 40173e4:	21bfe52e 	bgeu	r4,r6,401737c <__alt_mem_epcs_flash_controller_0+0xfb01637c>
 40173e8:	a80b883a 	mov	r5,r21
 40173ec:	9009883a 	mov	r4,r18
 40173f0:	4015f980 	call	4015f98 <memmove>
 40173f4:	b821883a 	mov	r16,r23
 40173f8:	b027883a 	mov	r19,r22
 40173fc:	003f8a06 	br	4017228 <__alt_mem_epcs_flash_controller_0+0xfb016228>
 4017400:	300b883a 	mov	r5,r6
 4017404:	dfc00917 	ldw	ra,36(sp)
 4017408:	df000817 	ldw	fp,32(sp)
 401740c:	ddc00717 	ldw	r23,28(sp)
 4017410:	dd800617 	ldw	r22,24(sp)
 4017414:	dd400517 	ldw	r21,20(sp)
 4017418:	dd000417 	ldw	r20,16(sp)
 401741c:	dcc00317 	ldw	r19,12(sp)
 4017420:	dc800217 	ldw	r18,8(sp)
 4017424:	dc400117 	ldw	r17,4(sp)
 4017428:	dc000017 	ldw	r16,0(sp)
 401742c:	dec00a04 	addi	sp,sp,40
 4017430:	400dedc1 	jmpi	400dedc <_malloc_r>
 4017434:	a8c00017 	ldw	r3,0(r21)
 4017438:	90c00015 	stw	r3,0(r18)
 401743c:	a8c00117 	ldw	r3,4(r21)
 4017440:	90c00115 	stw	r3,4(r18)
 4017444:	00c006c4 	movi	r3,27
 4017448:	19804536 	bltu	r3,r6,4017560 <_realloc_r+0x470>
 401744c:	90800204 	addi	r2,r18,8
 4017450:	a8c00204 	addi	r3,r21,8
 4017454:	003f6306 	br	40171e4 <__alt_mem_epcs_flash_controller_0+0xfb0161e4>
 4017458:	9005883a 	mov	r2,r18
 401745c:	a8c00017 	ldw	r3,0(r21)
 4017460:	b821883a 	mov	r16,r23
 4017464:	b027883a 	mov	r19,r22
 4017468:	10c00015 	stw	r3,0(r2)
 401746c:	a8c00117 	ldw	r3,4(r21)
 4017470:	10c00115 	stw	r3,4(r2)
 4017474:	a8c00217 	ldw	r3,8(r21)
 4017478:	10c00215 	stw	r3,8(r2)
 401747c:	003f6a06 	br	4017228 <__alt_mem_epcs_flash_controller_0+0xfb016228>
 4017480:	9c67883a 	add	r19,r19,r17
 4017484:	4445c83a 	sub	r2,r8,r17
 4017488:	e4c00215 	stw	r19,8(fp)
 401748c:	10800054 	ori	r2,r2,1
 4017490:	98800115 	stw	r2,4(r19)
 4017494:	a8bfff17 	ldw	r2,-4(r21)
 4017498:	a009883a 	mov	r4,r20
 401749c:	1080004c 	andi	r2,r2,1
 40174a0:	1462b03a 	or	r17,r2,r17
 40174a4:	ac7fff15 	stw	r17,-4(r21)
 40174a8:	401bf700 	call	401bf70 <__malloc_unlock>
 40174ac:	a805883a 	mov	r2,r21
 40174b0:	003f6b06 	br	4017260 <__alt_mem_epcs_flash_controller_0+0xfb016260>
 40174b4:	a80b883a 	mov	r5,r21
 40174b8:	9009883a 	mov	r4,r18
 40174bc:	4015f980 	call	4015f98 <memmove>
 40174c0:	003f4e06 	br	40171fc <__alt_mem_epcs_flash_controller_0+0xfb0161fc>
 40174c4:	89000404 	addi	r4,r17,16
 40174c8:	b93fbc16 	blt	r23,r4,40173bc <__alt_mem_epcs_flash_controller_0+0xfb0163bc>
 40174cc:	b0800317 	ldw	r2,12(r22)
 40174d0:	b0c00217 	ldw	r3,8(r22)
 40174d4:	81bfff04 	addi	r6,r16,-4
 40174d8:	01000904 	movi	r4,36
 40174dc:	18800315 	stw	r2,12(r3)
 40174e0:	10c00215 	stw	r3,8(r2)
 40174e4:	b4800204 	addi	r18,r22,8
 40174e8:	21804336 	bltu	r4,r6,40175f8 <_realloc_r+0x508>
 40174ec:	008004c4 	movi	r2,19
 40174f0:	11803f2e 	bgeu	r2,r6,40175f0 <_realloc_r+0x500>
 40174f4:	a8800017 	ldw	r2,0(r21)
 40174f8:	b0800215 	stw	r2,8(r22)
 40174fc:	a8800117 	ldw	r2,4(r21)
 4017500:	b0800315 	stw	r2,12(r22)
 4017504:	008006c4 	movi	r2,27
 4017508:	11803f36 	bltu	r2,r6,4017608 <_realloc_r+0x518>
 401750c:	b0800404 	addi	r2,r22,16
 4017510:	ad400204 	addi	r21,r21,8
 4017514:	a8c00017 	ldw	r3,0(r21)
 4017518:	10c00015 	stw	r3,0(r2)
 401751c:	a8c00117 	ldw	r3,4(r21)
 4017520:	10c00115 	stw	r3,4(r2)
 4017524:	a8c00217 	ldw	r3,8(r21)
 4017528:	10c00215 	stw	r3,8(r2)
 401752c:	b447883a 	add	r3,r22,r17
 4017530:	bc45c83a 	sub	r2,r23,r17
 4017534:	e0c00215 	stw	r3,8(fp)
 4017538:	10800054 	ori	r2,r2,1
 401753c:	18800115 	stw	r2,4(r3)
 4017540:	b0800117 	ldw	r2,4(r22)
 4017544:	a009883a 	mov	r4,r20
 4017548:	1080004c 	andi	r2,r2,1
 401754c:	1462b03a 	or	r17,r2,r17
 4017550:	b4400115 	stw	r17,4(r22)
 4017554:	401bf700 	call	401bf70 <__malloc_unlock>
 4017558:	9005883a 	mov	r2,r18
 401755c:	003f4006 	br	4017260 <__alt_mem_epcs_flash_controller_0+0xfb016260>
 4017560:	a8c00217 	ldw	r3,8(r21)
 4017564:	90c00215 	stw	r3,8(r18)
 4017568:	a8c00317 	ldw	r3,12(r21)
 401756c:	90c00315 	stw	r3,12(r18)
 4017570:	30801126 	beq	r6,r2,40175b8 <_realloc_r+0x4c8>
 4017574:	90800404 	addi	r2,r18,16
 4017578:	a8c00404 	addi	r3,r21,16
 401757c:	003f1906 	br	40171e4 <__alt_mem_epcs_flash_controller_0+0xfb0161e4>
 4017580:	90ffff17 	ldw	r3,-4(r18)
 4017584:	00bfff04 	movi	r2,-4
 4017588:	a825883a 	mov	r18,r21
 401758c:	1884703a 	and	r2,r3,r2
 4017590:	80a1883a 	add	r16,r16,r2
 4017594:	003f2406 	br	4017228 <__alt_mem_epcs_flash_controller_0+0xfb016228>
 4017598:	a8800217 	ldw	r2,8(r21)
 401759c:	b0800415 	stw	r2,16(r22)
 40175a0:	a8800317 	ldw	r2,12(r21)
 40175a4:	b0800515 	stw	r2,20(r22)
 40175a8:	31000a26 	beq	r6,r4,40175d4 <_realloc_r+0x4e4>
 40175ac:	b0800604 	addi	r2,r22,24
 40175b0:	ad400404 	addi	r21,r21,16
 40175b4:	003fa906 	br	401745c <__alt_mem_epcs_flash_controller_0+0xfb01645c>
 40175b8:	a9000417 	ldw	r4,16(r21)
 40175bc:	90800604 	addi	r2,r18,24
 40175c0:	a8c00604 	addi	r3,r21,24
 40175c4:	91000415 	stw	r4,16(r18)
 40175c8:	a9000517 	ldw	r4,20(r21)
 40175cc:	91000515 	stw	r4,20(r18)
 40175d0:	003f0406 	br	40171e4 <__alt_mem_epcs_flash_controller_0+0xfb0161e4>
 40175d4:	a8c00417 	ldw	r3,16(r21)
 40175d8:	ad400604 	addi	r21,r21,24
 40175dc:	b0800804 	addi	r2,r22,32
 40175e0:	b0c00615 	stw	r3,24(r22)
 40175e4:	a8ffff17 	ldw	r3,-4(r21)
 40175e8:	b0c00715 	stw	r3,28(r22)
 40175ec:	003f9b06 	br	401745c <__alt_mem_epcs_flash_controller_0+0xfb01645c>
 40175f0:	9005883a 	mov	r2,r18
 40175f4:	003fc706 	br	4017514 <__alt_mem_epcs_flash_controller_0+0xfb016514>
 40175f8:	a80b883a 	mov	r5,r21
 40175fc:	9009883a 	mov	r4,r18
 4017600:	4015f980 	call	4015f98 <memmove>
 4017604:	003fc906 	br	401752c <__alt_mem_epcs_flash_controller_0+0xfb01652c>
 4017608:	a8800217 	ldw	r2,8(r21)
 401760c:	b0800415 	stw	r2,16(r22)
 4017610:	a8800317 	ldw	r2,12(r21)
 4017614:	b0800515 	stw	r2,20(r22)
 4017618:	31000726 	beq	r6,r4,4017638 <_realloc_r+0x548>
 401761c:	b0800604 	addi	r2,r22,24
 4017620:	ad400404 	addi	r21,r21,16
 4017624:	003fbb06 	br	4017514 <__alt_mem_epcs_flash_controller_0+0xfb016514>
 4017628:	a009883a 	mov	r4,r20
 401762c:	401bf700 	call	401bf70 <__malloc_unlock>
 4017630:	0005883a 	mov	r2,zero
 4017634:	003f0a06 	br	4017260 <__alt_mem_epcs_flash_controller_0+0xfb016260>
 4017638:	a8c00417 	ldw	r3,16(r21)
 401763c:	ad400604 	addi	r21,r21,24
 4017640:	b0800804 	addi	r2,r22,32
 4017644:	b0c00615 	stw	r3,24(r22)
 4017648:	a8ffff17 	ldw	r3,-4(r21)
 401764c:	b0c00715 	stw	r3,28(r22)
 4017650:	003fb006 	br	4017514 <__alt_mem_epcs_flash_controller_0+0xfb016514>

04017654 <__sread>:
 4017654:	defffe04 	addi	sp,sp,-8
 4017658:	dc000015 	stw	r16,0(sp)
 401765c:	2821883a 	mov	r16,r5
 4017660:	2940038f 	ldh	r5,14(r5)
 4017664:	dfc00115 	stw	ra,4(sp)
 4017668:	401a8540 	call	401a854 <_read_r>
 401766c:	10000716 	blt	r2,zero,401768c <__sread+0x38>
 4017670:	80c01417 	ldw	r3,80(r16)
 4017674:	1887883a 	add	r3,r3,r2
 4017678:	80c01415 	stw	r3,80(r16)
 401767c:	dfc00117 	ldw	ra,4(sp)
 4017680:	dc000017 	ldw	r16,0(sp)
 4017684:	dec00204 	addi	sp,sp,8
 4017688:	f800283a 	ret
 401768c:	80c0030b 	ldhu	r3,12(r16)
 4017690:	18fbffcc 	andi	r3,r3,61439
 4017694:	80c0030d 	sth	r3,12(r16)
 4017698:	dfc00117 	ldw	ra,4(sp)
 401769c:	dc000017 	ldw	r16,0(sp)
 40176a0:	dec00204 	addi	sp,sp,8
 40176a4:	f800283a 	ret

040176a8 <__seofread>:
 40176a8:	0005883a 	mov	r2,zero
 40176ac:	f800283a 	ret

040176b0 <__swrite>:
 40176b0:	2880030b 	ldhu	r2,12(r5)
 40176b4:	defffb04 	addi	sp,sp,-20
 40176b8:	dcc00315 	stw	r19,12(sp)
 40176bc:	dc800215 	stw	r18,8(sp)
 40176c0:	dc400115 	stw	r17,4(sp)
 40176c4:	dc000015 	stw	r16,0(sp)
 40176c8:	dfc00415 	stw	ra,16(sp)
 40176cc:	10c0400c 	andi	r3,r2,256
 40176d0:	2821883a 	mov	r16,r5
 40176d4:	2023883a 	mov	r17,r4
 40176d8:	3025883a 	mov	r18,r6
 40176dc:	3827883a 	mov	r19,r7
 40176e0:	18000526 	beq	r3,zero,40176f8 <__swrite+0x48>
 40176e4:	2940038f 	ldh	r5,14(r5)
 40176e8:	01c00084 	movi	r7,2
 40176ec:	000d883a 	mov	r6,zero
 40176f0:	401a7f40 	call	401a7f4 <_lseek_r>
 40176f4:	8080030b 	ldhu	r2,12(r16)
 40176f8:	8140038f 	ldh	r5,14(r16)
 40176fc:	10bbffcc 	andi	r2,r2,61439
 4017700:	980f883a 	mov	r7,r19
 4017704:	900d883a 	mov	r6,r18
 4017708:	8809883a 	mov	r4,r17
 401770c:	8080030d 	sth	r2,12(r16)
 4017710:	dfc00417 	ldw	ra,16(sp)
 4017714:	dcc00317 	ldw	r19,12(sp)
 4017718:	dc800217 	ldw	r18,8(sp)
 401771c:	dc400117 	ldw	r17,4(sp)
 4017720:	dc000017 	ldw	r16,0(sp)
 4017724:	dec00504 	addi	sp,sp,20
 4017728:	401a2c01 	jmpi	401a2c0 <_write_r>

0401772c <__sseek>:
 401772c:	defffe04 	addi	sp,sp,-8
 4017730:	dc000015 	stw	r16,0(sp)
 4017734:	2821883a 	mov	r16,r5
 4017738:	2940038f 	ldh	r5,14(r5)
 401773c:	dfc00115 	stw	ra,4(sp)
 4017740:	401a7f40 	call	401a7f4 <_lseek_r>
 4017744:	00ffffc4 	movi	r3,-1
 4017748:	10c00826 	beq	r2,r3,401776c <__sseek+0x40>
 401774c:	80c0030b 	ldhu	r3,12(r16)
 4017750:	80801415 	stw	r2,80(r16)
 4017754:	18c40014 	ori	r3,r3,4096
 4017758:	80c0030d 	sth	r3,12(r16)
 401775c:	dfc00117 	ldw	ra,4(sp)
 4017760:	dc000017 	ldw	r16,0(sp)
 4017764:	dec00204 	addi	sp,sp,8
 4017768:	f800283a 	ret
 401776c:	80c0030b 	ldhu	r3,12(r16)
 4017770:	18fbffcc 	andi	r3,r3,61439
 4017774:	80c0030d 	sth	r3,12(r16)
 4017778:	dfc00117 	ldw	ra,4(sp)
 401777c:	dc000017 	ldw	r16,0(sp)
 4017780:	dec00204 	addi	sp,sp,8
 4017784:	f800283a 	ret

04017788 <__sclose>:
 4017788:	2940038f 	ldh	r5,14(r5)
 401778c:	401a3201 	jmpi	401a320 <_close_r>

04017790 <strcmp>:
 4017790:	2144b03a 	or	r2,r4,r5
 4017794:	108000cc 	andi	r2,r2,3
 4017798:	1000171e 	bne	r2,zero,40177f8 <strcmp+0x68>
 401779c:	20800017 	ldw	r2,0(r4)
 40177a0:	28c00017 	ldw	r3,0(r5)
 40177a4:	10c0141e 	bne	r2,r3,40177f8 <strcmp+0x68>
 40177a8:	027fbff4 	movhi	r9,65279
 40177ac:	4a7fbfc4 	addi	r9,r9,-257
 40177b0:	0086303a 	nor	r3,zero,r2
 40177b4:	02202074 	movhi	r8,32897
 40177b8:	1245883a 	add	r2,r2,r9
 40177bc:	42202004 	addi	r8,r8,-32640
 40177c0:	10c4703a 	and	r2,r2,r3
 40177c4:	1204703a 	and	r2,r2,r8
 40177c8:	10000226 	beq	r2,zero,40177d4 <strcmp+0x44>
 40177cc:	00002306 	br	401785c <strcmp+0xcc>
 40177d0:	1000221e 	bne	r2,zero,401785c <strcmp+0xcc>
 40177d4:	21000104 	addi	r4,r4,4
 40177d8:	20c00017 	ldw	r3,0(r4)
 40177dc:	29400104 	addi	r5,r5,4
 40177e0:	29800017 	ldw	r6,0(r5)
 40177e4:	1a4f883a 	add	r7,r3,r9
 40177e8:	00c4303a 	nor	r2,zero,r3
 40177ec:	3884703a 	and	r2,r7,r2
 40177f0:	1204703a 	and	r2,r2,r8
 40177f4:	19bff626 	beq	r3,r6,40177d0 <__alt_mem_epcs_flash_controller_0+0xfb0167d0>
 40177f8:	20800003 	ldbu	r2,0(r4)
 40177fc:	10c03fcc 	andi	r3,r2,255
 4017800:	18c0201c 	xori	r3,r3,128
 4017804:	18ffe004 	addi	r3,r3,-128
 4017808:	18000c26 	beq	r3,zero,401783c <strcmp+0xac>
 401780c:	29800007 	ldb	r6,0(r5)
 4017810:	19800326 	beq	r3,r6,4017820 <strcmp+0x90>
 4017814:	00001306 	br	4017864 <strcmp+0xd4>
 4017818:	29800007 	ldb	r6,0(r5)
 401781c:	11800b1e 	bne	r2,r6,401784c <strcmp+0xbc>
 4017820:	21000044 	addi	r4,r4,1
 4017824:	20c00003 	ldbu	r3,0(r4)
 4017828:	29400044 	addi	r5,r5,1
 401782c:	18803fcc 	andi	r2,r3,255
 4017830:	1080201c 	xori	r2,r2,128
 4017834:	10bfe004 	addi	r2,r2,-128
 4017838:	103ff71e 	bne	r2,zero,4017818 <__alt_mem_epcs_flash_controller_0+0xfb016818>
 401783c:	0007883a 	mov	r3,zero
 4017840:	28800003 	ldbu	r2,0(r5)
 4017844:	1885c83a 	sub	r2,r3,r2
 4017848:	f800283a 	ret
 401784c:	28800003 	ldbu	r2,0(r5)
 4017850:	18c03fcc 	andi	r3,r3,255
 4017854:	1885c83a 	sub	r2,r3,r2
 4017858:	f800283a 	ret
 401785c:	0005883a 	mov	r2,zero
 4017860:	f800283a 	ret
 4017864:	10c03fcc 	andi	r3,r2,255
 4017868:	003ff506 	br	4017840 <__alt_mem_epcs_flash_controller_0+0xfb016840>

0401786c <__ssprint_r>:
 401786c:	30800217 	ldw	r2,8(r6)
 4017870:	defff604 	addi	sp,sp,-40
 4017874:	dc800215 	stw	r18,8(sp)
 4017878:	dfc00915 	stw	ra,36(sp)
 401787c:	df000815 	stw	fp,32(sp)
 4017880:	ddc00715 	stw	r23,28(sp)
 4017884:	dd800615 	stw	r22,24(sp)
 4017888:	dd400515 	stw	r21,20(sp)
 401788c:	dd000415 	stw	r20,16(sp)
 4017890:	dcc00315 	stw	r19,12(sp)
 4017894:	dc400115 	stw	r17,4(sp)
 4017898:	dc000015 	stw	r16,0(sp)
 401789c:	3025883a 	mov	r18,r6
 40178a0:	10005826 	beq	r2,zero,4017a04 <__ssprint_r+0x198>
 40178a4:	2027883a 	mov	r19,r4
 40178a8:	35c00017 	ldw	r23,0(r6)
 40178ac:	29000017 	ldw	r4,0(r5)
 40178b0:	28800217 	ldw	r2,8(r5)
 40178b4:	2823883a 	mov	r17,r5
 40178b8:	0039883a 	mov	fp,zero
 40178bc:	0021883a 	mov	r16,zero
 40178c0:	80003926 	beq	r16,zero,40179a8 <__ssprint_r+0x13c>
 40178c4:	102b883a 	mov	r21,r2
 40178c8:	102d883a 	mov	r22,r2
 40178cc:	80803a36 	bltu	r16,r2,40179b8 <__ssprint_r+0x14c>
 40178d0:	88c0030b 	ldhu	r3,12(r17)
 40178d4:	1881200c 	andi	r2,r3,1152
 40178d8:	10002626 	beq	r2,zero,4017974 <__ssprint_r+0x108>
 40178dc:	88800517 	ldw	r2,20(r17)
 40178e0:	89400417 	ldw	r5,16(r17)
 40178e4:	81800044 	addi	r6,r16,1
 40178e8:	108f883a 	add	r7,r2,r2
 40178ec:	3885883a 	add	r2,r7,r2
 40178f0:	100ed7fa 	srli	r7,r2,31
 40178f4:	216dc83a 	sub	r22,r4,r5
 40178f8:	3589883a 	add	r4,r6,r22
 40178fc:	3885883a 	add	r2,r7,r2
 4017900:	102bd07a 	srai	r21,r2,1
 4017904:	a80d883a 	mov	r6,r21
 4017908:	a900022e 	bgeu	r21,r4,4017914 <__ssprint_r+0xa8>
 401790c:	202b883a 	mov	r21,r4
 4017910:	200d883a 	mov	r6,r4
 4017914:	18c1000c 	andi	r3,r3,1024
 4017918:	18002a26 	beq	r3,zero,40179c4 <__ssprint_r+0x158>
 401791c:	300b883a 	mov	r5,r6
 4017920:	9809883a 	mov	r4,r19
 4017924:	400dedc0 	call	400dedc <_malloc_r>
 4017928:	1029883a 	mov	r20,r2
 401792c:	10002c26 	beq	r2,zero,40179e0 <__ssprint_r+0x174>
 4017930:	89400417 	ldw	r5,16(r17)
 4017934:	b00d883a 	mov	r6,r22
 4017938:	1009883a 	mov	r4,r2
 401793c:	400e6e80 	call	400e6e8 <memcpy>
 4017940:	8880030b 	ldhu	r2,12(r17)
 4017944:	00fedfc4 	movi	r3,-1153
 4017948:	10c4703a 	and	r2,r2,r3
 401794c:	10802014 	ori	r2,r2,128
 4017950:	8880030d 	sth	r2,12(r17)
 4017954:	a589883a 	add	r4,r20,r22
 4017958:	adadc83a 	sub	r22,r21,r22
 401795c:	8d400515 	stw	r21,20(r17)
 4017960:	8d800215 	stw	r22,8(r17)
 4017964:	8d000415 	stw	r20,16(r17)
 4017968:	89000015 	stw	r4,0(r17)
 401796c:	802b883a 	mov	r21,r16
 4017970:	802d883a 	mov	r22,r16
 4017974:	b00d883a 	mov	r6,r22
 4017978:	e00b883a 	mov	r5,fp
 401797c:	4015f980 	call	4015f98 <memmove>
 4017980:	88800217 	ldw	r2,8(r17)
 4017984:	89000017 	ldw	r4,0(r17)
 4017988:	90c00217 	ldw	r3,8(r18)
 401798c:	1545c83a 	sub	r2,r2,r21
 4017990:	2589883a 	add	r4,r4,r22
 4017994:	88800215 	stw	r2,8(r17)
 4017998:	89000015 	stw	r4,0(r17)
 401799c:	1c21c83a 	sub	r16,r3,r16
 40179a0:	94000215 	stw	r16,8(r18)
 40179a4:	80001726 	beq	r16,zero,4017a04 <__ssprint_r+0x198>
 40179a8:	bf000017 	ldw	fp,0(r23)
 40179ac:	bc000117 	ldw	r16,4(r23)
 40179b0:	bdc00204 	addi	r23,r23,8
 40179b4:	003fc206 	br	40178c0 <__alt_mem_epcs_flash_controller_0+0xfb0168c0>
 40179b8:	802b883a 	mov	r21,r16
 40179bc:	802d883a 	mov	r22,r16
 40179c0:	003fec06 	br	4017974 <__alt_mem_epcs_flash_controller_0+0xfb016974>
 40179c4:	9809883a 	mov	r4,r19
 40179c8:	40170f00 	call	40170f0 <_realloc_r>
 40179cc:	1029883a 	mov	r20,r2
 40179d0:	103fe01e 	bne	r2,zero,4017954 <__alt_mem_epcs_flash_controller_0+0xfb016954>
 40179d4:	89400417 	ldw	r5,16(r17)
 40179d8:	9809883a 	mov	r4,r19
 40179dc:	40152c80 	call	40152c8 <_free_r>
 40179e0:	88c0030b 	ldhu	r3,12(r17)
 40179e4:	00800304 	movi	r2,12
 40179e8:	98800015 	stw	r2,0(r19)
 40179ec:	18c01014 	ori	r3,r3,64
 40179f0:	88c0030d 	sth	r3,12(r17)
 40179f4:	00bfffc4 	movi	r2,-1
 40179f8:	90000215 	stw	zero,8(r18)
 40179fc:	90000115 	stw	zero,4(r18)
 4017a00:	00000206 	br	4017a0c <__ssprint_r+0x1a0>
 4017a04:	90000115 	stw	zero,4(r18)
 4017a08:	0005883a 	mov	r2,zero
 4017a0c:	dfc00917 	ldw	ra,36(sp)
 4017a10:	df000817 	ldw	fp,32(sp)
 4017a14:	ddc00717 	ldw	r23,28(sp)
 4017a18:	dd800617 	ldw	r22,24(sp)
 4017a1c:	dd400517 	ldw	r21,20(sp)
 4017a20:	dd000417 	ldw	r20,16(sp)
 4017a24:	dcc00317 	ldw	r19,12(sp)
 4017a28:	dc800217 	ldw	r18,8(sp)
 4017a2c:	dc400117 	ldw	r17,4(sp)
 4017a30:	dc000017 	ldw	r16,0(sp)
 4017a34:	dec00a04 	addi	sp,sp,40
 4017a38:	f800283a 	ret

04017a3c <___svfiprintf_internal_r>:
 4017a3c:	2880030b 	ldhu	r2,12(r5)
 4017a40:	deffc804 	addi	sp,sp,-224
 4017a44:	dcc03115 	stw	r19,196(sp)
 4017a48:	dfc03715 	stw	ra,220(sp)
 4017a4c:	df003615 	stw	fp,216(sp)
 4017a50:	ddc03515 	stw	r23,212(sp)
 4017a54:	dd803415 	stw	r22,208(sp)
 4017a58:	dd403315 	stw	r21,204(sp)
 4017a5c:	dd003215 	stw	r20,200(sp)
 4017a60:	dc803015 	stw	r18,192(sp)
 4017a64:	dc402f15 	stw	r17,188(sp)
 4017a68:	dc002e15 	stw	r16,184(sp)
 4017a6c:	d9402715 	stw	r5,156(sp)
 4017a70:	d9002a15 	stw	r4,168(sp)
 4017a74:	1080200c 	andi	r2,r2,128
 4017a78:	d9c02315 	stw	r7,140(sp)
 4017a7c:	3027883a 	mov	r19,r6
 4017a80:	10000226 	beq	r2,zero,4017a8c <___svfiprintf_internal_r+0x50>
 4017a84:	28800417 	ldw	r2,16(r5)
 4017a88:	10041d26 	beq	r2,zero,4018b00 <___svfiprintf_internal_r+0x10c4>
 4017a8c:	dac01a04 	addi	r11,sp,104
 4017a90:	dac01e15 	stw	r11,120(sp)
 4017a94:	d8801e17 	ldw	r2,120(sp)
 4017a98:	dac019c4 	addi	r11,sp,103
 4017a9c:	dd402a17 	ldw	r21,168(sp)
 4017aa0:	ddc02717 	ldw	r23,156(sp)
 4017aa4:	05810234 	movhi	r22,1032
 4017aa8:	05010234 	movhi	r20,1032
 4017aac:	dac01f15 	stw	r11,124(sp)
 4017ab0:	12d7c83a 	sub	r11,r2,r11
 4017ab4:	b5959b04 	addi	r22,r22,22124
 4017ab8:	a5159704 	addi	r20,r20,22108
 4017abc:	dec01a15 	stw	sp,104(sp)
 4017ac0:	d8001c15 	stw	zero,112(sp)
 4017ac4:	d8001b15 	stw	zero,108(sp)
 4017ac8:	d811883a 	mov	r8,sp
 4017acc:	d8002915 	stw	zero,164(sp)
 4017ad0:	d8002515 	stw	zero,148(sp)
 4017ad4:	dac02b15 	stw	r11,172(sp)
 4017ad8:	98800007 	ldb	r2,0(r19)
 4017adc:	1002dd26 	beq	r2,zero,4018654 <___svfiprintf_internal_r+0xc18>
 4017ae0:	00c00944 	movi	r3,37
 4017ae4:	9823883a 	mov	r17,r19
 4017ae8:	10c0021e 	bne	r2,r3,4017af4 <___svfiprintf_internal_r+0xb8>
 4017aec:	00001406 	br	4017b40 <___svfiprintf_internal_r+0x104>
 4017af0:	10c00326 	beq	r2,r3,4017b00 <___svfiprintf_internal_r+0xc4>
 4017af4:	8c400044 	addi	r17,r17,1
 4017af8:	88800007 	ldb	r2,0(r17)
 4017afc:	103ffc1e 	bne	r2,zero,4017af0 <__alt_mem_epcs_flash_controller_0+0xfb016af0>
 4017b00:	8ce1c83a 	sub	r16,r17,r19
 4017b04:	80000e26 	beq	r16,zero,4017b40 <___svfiprintf_internal_r+0x104>
 4017b08:	d8c01c17 	ldw	r3,112(sp)
 4017b0c:	d8801b17 	ldw	r2,108(sp)
 4017b10:	44c00015 	stw	r19,0(r8)
 4017b14:	1c07883a 	add	r3,r3,r16
 4017b18:	10800044 	addi	r2,r2,1
 4017b1c:	d8c01c15 	stw	r3,112(sp)
 4017b20:	44000115 	stw	r16,4(r8)
 4017b24:	d8801b15 	stw	r2,108(sp)
 4017b28:	00c001c4 	movi	r3,7
 4017b2c:	18831e16 	blt	r3,r2,40187a8 <___svfiprintf_internal_r+0xd6c>
 4017b30:	42000204 	addi	r8,r8,8
 4017b34:	dac02517 	ldw	r11,148(sp)
 4017b38:	5c17883a 	add	r11,r11,r16
 4017b3c:	dac02515 	stw	r11,148(sp)
 4017b40:	88800007 	ldb	r2,0(r17)
 4017b44:	1002c526 	beq	r2,zero,401865c <___svfiprintf_internal_r+0xc20>
 4017b48:	88c00047 	ldb	r3,1(r17)
 4017b4c:	8cc00044 	addi	r19,r17,1
 4017b50:	d8001d85 	stb	zero,118(sp)
 4017b54:	0009883a 	mov	r4,zero
 4017b58:	000f883a 	mov	r7,zero
 4017b5c:	043fffc4 	movi	r16,-1
 4017b60:	d8002415 	stw	zero,144(sp)
 4017b64:	0025883a 	mov	r18,zero
 4017b68:	01401604 	movi	r5,88
 4017b6c:	01800244 	movi	r6,9
 4017b70:	02800a84 	movi	r10,42
 4017b74:	02401b04 	movi	r9,108
 4017b78:	9cc00044 	addi	r19,r19,1
 4017b7c:	18bff804 	addi	r2,r3,-32
 4017b80:	2881dd36 	bltu	r5,r2,40182f8 <___svfiprintf_internal_r+0x8bc>
 4017b84:	100490ba 	slli	r2,r2,2
 4017b88:	02c10074 	movhi	r11,1025
 4017b8c:	5adee704 	addi	r11,r11,31644
 4017b90:	12c5883a 	add	r2,r2,r11
 4017b94:	10800017 	ldw	r2,0(r2)
 4017b98:	1000683a 	jmp	r2
 4017b9c:	04017d98 	cmpnei	r16,zero,1526
 4017ba0:	040182f8 	rdprs	r16,zero,1547
 4017ba4:	040182f8 	rdprs	r16,zero,1547
 4017ba8:	04017d8c 	andi	r16,zero,1526
 4017bac:	040182f8 	rdprs	r16,zero,1547
 4017bb0:	040182f8 	rdprs	r16,zero,1547
 4017bb4:	040182f8 	rdprs	r16,zero,1547
 4017bb8:	040182f8 	rdprs	r16,zero,1547
 4017bbc:	040182f8 	rdprs	r16,zero,1547
 4017bc0:	040182f8 	rdprs	r16,zero,1547
 4017bc4:	04017d00 	call	4017d0 <__alt_mem_sdram-0x3bfe830>
 4017bc8:	04017edc 	xori	r16,zero,1531
 4017bcc:	040182f8 	rdprs	r16,zero,1547
 4017bd0:	04017d2c 	andhi	r16,zero,1524
 4017bd4:	0401832c 	andhi	r16,zero,1548
 4017bd8:	040182f8 	rdprs	r16,zero,1547
 4017bdc:	04018320 	cmpeqi	r16,zero,1548
 4017be0:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017be4:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017be8:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017bec:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017bf0:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017bf4:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017bf8:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017bfc:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017c00:	040182c0 	call	40182c <__alt_mem_sdram-0x3bfe7d4>
 4017c04:	040182f8 	rdprs	r16,zero,1547
 4017c08:	040182f8 	rdprs	r16,zero,1547
 4017c0c:	040182f8 	rdprs	r16,zero,1547
 4017c10:	040182f8 	rdprs	r16,zero,1547
 4017c14:	040182f8 	rdprs	r16,zero,1547
 4017c18:	040182f8 	rdprs	r16,zero,1547
 4017c1c:	040182f8 	rdprs	r16,zero,1547
 4017c20:	040182f8 	rdprs	r16,zero,1547
 4017c24:	040182f8 	rdprs	r16,zero,1547
 4017c28:	040182f8 	rdprs	r16,zero,1547
 4017c2c:	0401825c 	xori	r16,zero,1545
 4017c30:	040182f8 	rdprs	r16,zero,1547
 4017c34:	040182f8 	rdprs	r16,zero,1547
 4017c38:	040182f8 	rdprs	r16,zero,1547
 4017c3c:	040182f8 	rdprs	r16,zero,1547
 4017c40:	040182f8 	rdprs	r16,zero,1547
 4017c44:	040182f8 	rdprs	r16,zero,1547
 4017c48:	040182f8 	rdprs	r16,zero,1547
 4017c4c:	040182f8 	rdprs	r16,zero,1547
 4017c50:	040182f8 	rdprs	r16,zero,1547
 4017c54:	040182f8 	rdprs	r16,zero,1547
 4017c58:	040183d4 	movui	r16,1551
 4017c5c:	040182f8 	rdprs	r16,zero,1547
 4017c60:	040182f8 	rdprs	r16,zero,1547
 4017c64:	040182f8 	rdprs	r16,zero,1547
 4017c68:	040182f8 	rdprs	r16,zero,1547
 4017c6c:	040182f8 	rdprs	r16,zero,1547
 4017c70:	0401836c 	andhi	r16,zero,1549
 4017c74:	040182f8 	rdprs	r16,zero,1547
 4017c78:	040182f8 	rdprs	r16,zero,1547
 4017c7c:	040180a0 	cmpeqi	r16,zero,1538
 4017c80:	040182f8 	rdprs	r16,zero,1547
 4017c84:	040182f8 	rdprs	r16,zero,1547
 4017c88:	040182f8 	rdprs	r16,zero,1547
 4017c8c:	040182f8 	rdprs	r16,zero,1547
 4017c90:	040182f8 	rdprs	r16,zero,1547
 4017c94:	040182f8 	rdprs	r16,zero,1547
 4017c98:	040182f8 	rdprs	r16,zero,1547
 4017c9c:	040182f8 	rdprs	r16,zero,1547
 4017ca0:	040182f8 	rdprs	r16,zero,1547
 4017ca4:	040182f8 	rdprs	r16,zero,1547
 4017ca8:	04017f90 	cmplti	r16,zero,1534
 4017cac:	0401813c 	xorhi	r16,zero,1540
 4017cb0:	040182f8 	rdprs	r16,zero,1547
 4017cb4:	040182f8 	rdprs	r16,zero,1547
 4017cb8:	040182f8 	rdprs	r16,zero,1547
 4017cbc:	04018130 	cmpltui	r16,zero,1540
 4017cc0:	0401813c 	xorhi	r16,zero,1540
 4017cc4:	040182f8 	rdprs	r16,zero,1547
 4017cc8:	040182f8 	rdprs	r16,zero,1547
 4017ccc:	04018120 	cmpeqi	r16,zero,1540
 4017cd0:	040182f8 	rdprs	r16,zero,1547
 4017cd4:	040180e4 	muli	r16,zero,1539
 4017cd8:	04017eec 	andhi	r16,zero,1531
 4017cdc:	04017d38 	rdprs	r16,zero,1524
 4017ce0:	04018250 	cmplti	r16,zero,1545
 4017ce4:	040182f8 	rdprs	r16,zero,1547
 4017ce8:	04018204 	movi	r16,1544
 4017cec:	040182f8 	rdprs	r16,zero,1547
 4017cf0:	04017e5c 	xori	r16,zero,1529
 4017cf4:	040182f8 	rdprs	r16,zero,1547
 4017cf8:	040182f8 	rdprs	r16,zero,1547
 4017cfc:	04017db8 	rdprs	r16,zero,1526
 4017d00:	dac02317 	ldw	r11,140(sp)
 4017d04:	5ac00017 	ldw	r11,0(r11)
 4017d08:	dac02415 	stw	r11,144(sp)
 4017d0c:	dac02317 	ldw	r11,140(sp)
 4017d10:	58800104 	addi	r2,r11,4
 4017d14:	dac02417 	ldw	r11,144(sp)
 4017d18:	5802e90e 	bge	r11,zero,40188c0 <___svfiprintf_internal_r+0xe84>
 4017d1c:	dac02417 	ldw	r11,144(sp)
 4017d20:	d8802315 	stw	r2,140(sp)
 4017d24:	02d7c83a 	sub	r11,zero,r11
 4017d28:	dac02415 	stw	r11,144(sp)
 4017d2c:	94800114 	ori	r18,r18,4
 4017d30:	98c00007 	ldb	r3,0(r19)
 4017d34:	003f9006 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4017d38:	00800c04 	movi	r2,48
 4017d3c:	dac02317 	ldw	r11,140(sp)
 4017d40:	d8801d05 	stb	r2,116(sp)
 4017d44:	00801e04 	movi	r2,120
 4017d48:	d8801d45 	stb	r2,117(sp)
 4017d4c:	d8001d85 	stb	zero,118(sp)
 4017d50:	58c00104 	addi	r3,r11,4
 4017d54:	5f000017 	ldw	fp,0(r11)
 4017d58:	0013883a 	mov	r9,zero
 4017d5c:	90800094 	ori	r2,r18,2
 4017d60:	80032b16 	blt	r16,zero,4018a10 <___svfiprintf_internal_r+0xfd4>
 4017d64:	00bfdfc4 	movi	r2,-129
 4017d68:	90a4703a 	and	r18,r18,r2
 4017d6c:	d8c02315 	stw	r3,140(sp)
 4017d70:	94800094 	ori	r18,r18,2
 4017d74:	e002dc26 	beq	fp,zero,40188e8 <___svfiprintf_internal_r+0xeac>
 4017d78:	01010234 	movhi	r4,1032
 4017d7c:	21152f04 	addi	r4,r4,21692
 4017d80:	0015883a 	mov	r10,zero
 4017d84:	d9002915 	stw	r4,164(sp)
 4017d88:	00002306 	br	4017e18 <___svfiprintf_internal_r+0x3dc>
 4017d8c:	94800054 	ori	r18,r18,1
 4017d90:	98c00007 	ldb	r3,0(r19)
 4017d94:	003f7806 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4017d98:	38803fcc 	andi	r2,r7,255
 4017d9c:	1080201c 	xori	r2,r2,128
 4017da0:	10bfe004 	addi	r2,r2,-128
 4017da4:	1002f31e 	bne	r2,zero,4018974 <___svfiprintf_internal_r+0xf38>
 4017da8:	01000044 	movi	r4,1
 4017dac:	01c00804 	movi	r7,32
 4017db0:	98c00007 	ldb	r3,0(r19)
 4017db4:	003f7006 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4017db8:	21003fcc 	andi	r4,r4,255
 4017dbc:	2003aa1e 	bne	r4,zero,4018c68 <___svfiprintf_internal_r+0x122c>
 4017dc0:	00810234 	movhi	r2,1032
 4017dc4:	10952f04 	addi	r2,r2,21692
 4017dc8:	d8802915 	stw	r2,164(sp)
 4017dcc:	9080080c 	andi	r2,r18,32
 4017dd0:	1000ba26 	beq	r2,zero,40180bc <___svfiprintf_internal_r+0x680>
 4017dd4:	dac02317 	ldw	r11,140(sp)
 4017dd8:	5f000017 	ldw	fp,0(r11)
 4017ddc:	5a400117 	ldw	r9,4(r11)
 4017de0:	5ac00204 	addi	r11,r11,8
 4017de4:	dac02315 	stw	r11,140(sp)
 4017de8:	9080004c 	andi	r2,r18,1
 4017dec:	10029026 	beq	r2,zero,4018830 <___svfiprintf_internal_r+0xdf4>
 4017df0:	e244b03a 	or	r2,fp,r9
 4017df4:	1002d41e 	bne	r2,zero,4018948 <___svfiprintf_internal_r+0xf0c>
 4017df8:	d8001d85 	stb	zero,118(sp)
 4017dfc:	80030b16 	blt	r16,zero,4018a2c <___svfiprintf_internal_r+0xff0>
 4017e00:	00bfdfc4 	movi	r2,-129
 4017e04:	90a4703a 	and	r18,r18,r2
 4017e08:	0015883a 	mov	r10,zero
 4017e0c:	80002426 	beq	r16,zero,4017ea0 <___svfiprintf_internal_r+0x464>
 4017e10:	0039883a 	mov	fp,zero
 4017e14:	0013883a 	mov	r9,zero
 4017e18:	d9002917 	ldw	r4,164(sp)
 4017e1c:	dc401a04 	addi	r17,sp,104
 4017e20:	e08003cc 	andi	r2,fp,15
 4017e24:	4806973a 	slli	r3,r9,28
 4017e28:	2085883a 	add	r2,r4,r2
 4017e2c:	e038d13a 	srli	fp,fp,4
 4017e30:	10800003 	ldbu	r2,0(r2)
 4017e34:	4812d13a 	srli	r9,r9,4
 4017e38:	8c7fffc4 	addi	r17,r17,-1
 4017e3c:	1f38b03a 	or	fp,r3,fp
 4017e40:	88800005 	stb	r2,0(r17)
 4017e44:	e244b03a 	or	r2,fp,r9
 4017e48:	103ff51e 	bne	r2,zero,4017e20 <__alt_mem_epcs_flash_controller_0+0xfb016e20>
 4017e4c:	dac01e17 	ldw	r11,120(sp)
 4017e50:	5c57c83a 	sub	r11,r11,r17
 4017e54:	dac02115 	stw	r11,132(sp)
 4017e58:	00001406 	br	4017eac <___svfiprintf_internal_r+0x470>
 4017e5c:	21003fcc 	andi	r4,r4,255
 4017e60:	2003741e 	bne	r4,zero,4018c34 <___svfiprintf_internal_r+0x11f8>
 4017e64:	9080080c 	andi	r2,r18,32
 4017e68:	10014526 	beq	r2,zero,4018380 <___svfiprintf_internal_r+0x944>
 4017e6c:	dac02317 	ldw	r11,140(sp)
 4017e70:	d8001d85 	stb	zero,118(sp)
 4017e74:	58c00204 	addi	r3,r11,8
 4017e78:	5f000017 	ldw	fp,0(r11)
 4017e7c:	5a400117 	ldw	r9,4(r11)
 4017e80:	8002d916 	blt	r16,zero,40189e8 <___svfiprintf_internal_r+0xfac>
 4017e84:	013fdfc4 	movi	r4,-129
 4017e88:	e244b03a 	or	r2,fp,r9
 4017e8c:	d8c02315 	stw	r3,140(sp)
 4017e90:	9124703a 	and	r18,r18,r4
 4017e94:	0015883a 	mov	r10,zero
 4017e98:	1000b91e 	bne	r2,zero,4018180 <___svfiprintf_internal_r+0x744>
 4017e9c:	8002e61e 	bne	r16,zero,4018a38 <___svfiprintf_internal_r+0xffc>
 4017ea0:	0021883a 	mov	r16,zero
 4017ea4:	d8002115 	stw	zero,132(sp)
 4017ea8:	dc401a04 	addi	r17,sp,104
 4017eac:	d8c02117 	ldw	r3,132(sp)
 4017eb0:	dc002015 	stw	r16,128(sp)
 4017eb4:	80c0010e 	bge	r16,r3,4017ebc <___svfiprintf_internal_r+0x480>
 4017eb8:	d8c02015 	stw	r3,128(sp)
 4017ebc:	52803fcc 	andi	r10,r10,255
 4017ec0:	5280201c 	xori	r10,r10,128
 4017ec4:	52bfe004 	addi	r10,r10,-128
 4017ec8:	50003c26 	beq	r10,zero,4017fbc <___svfiprintf_internal_r+0x580>
 4017ecc:	dac02017 	ldw	r11,128(sp)
 4017ed0:	5ac00044 	addi	r11,r11,1
 4017ed4:	dac02015 	stw	r11,128(sp)
 4017ed8:	00003806 	br	4017fbc <___svfiprintf_internal_r+0x580>
 4017edc:	01000044 	movi	r4,1
 4017ee0:	01c00ac4 	movi	r7,43
 4017ee4:	98c00007 	ldb	r3,0(r19)
 4017ee8:	003f2306 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4017eec:	21003fcc 	andi	r4,r4,255
 4017ef0:	2003481e 	bne	r4,zero,4018c14 <___svfiprintf_internal_r+0x11d8>
 4017ef4:	9080080c 	andi	r2,r18,32
 4017ef8:	10013b26 	beq	r2,zero,40183e8 <___svfiprintf_internal_r+0x9ac>
 4017efc:	dac02317 	ldw	r11,140(sp)
 4017f00:	d8001d85 	stb	zero,118(sp)
 4017f04:	58800204 	addi	r2,r11,8
 4017f08:	5f000017 	ldw	fp,0(r11)
 4017f0c:	5a400117 	ldw	r9,4(r11)
 4017f10:	8002a816 	blt	r16,zero,40189b4 <___svfiprintf_internal_r+0xf78>
 4017f14:	013fdfc4 	movi	r4,-129
 4017f18:	e246b03a 	or	r3,fp,r9
 4017f1c:	d8802315 	stw	r2,140(sp)
 4017f20:	9124703a 	and	r18,r18,r4
 4017f24:	18013c26 	beq	r3,zero,4018418 <___svfiprintf_internal_r+0x9dc>
 4017f28:	0015883a 	mov	r10,zero
 4017f2c:	dc401a04 	addi	r17,sp,104
 4017f30:	e006d0fa 	srli	r3,fp,3
 4017f34:	4808977a 	slli	r4,r9,29
 4017f38:	4812d0fa 	srli	r9,r9,3
 4017f3c:	e70001cc 	andi	fp,fp,7
 4017f40:	e0800c04 	addi	r2,fp,48
 4017f44:	8c7fffc4 	addi	r17,r17,-1
 4017f48:	20f8b03a 	or	fp,r4,r3
 4017f4c:	88800005 	stb	r2,0(r17)
 4017f50:	e246b03a 	or	r3,fp,r9
 4017f54:	183ff61e 	bne	r3,zero,4017f30 <__alt_mem_epcs_flash_controller_0+0xfb016f30>
 4017f58:	90c0004c 	andi	r3,r18,1
 4017f5c:	1800a526 	beq	r3,zero,40181f4 <___svfiprintf_internal_r+0x7b8>
 4017f60:	10803fcc 	andi	r2,r2,255
 4017f64:	1080201c 	xori	r2,r2,128
 4017f68:	10bfe004 	addi	r2,r2,-128
 4017f6c:	00c00c04 	movi	r3,48
 4017f70:	10ffb626 	beq	r2,r3,4017e4c <__alt_mem_epcs_flash_controller_0+0xfb016e4c>
 4017f74:	88ffffc5 	stb	r3,-1(r17)
 4017f78:	d8c01e17 	ldw	r3,120(sp)
 4017f7c:	88bfffc4 	addi	r2,r17,-1
 4017f80:	1023883a 	mov	r17,r2
 4017f84:	1887c83a 	sub	r3,r3,r2
 4017f88:	d8c02115 	stw	r3,132(sp)
 4017f8c:	003fc706 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4017f90:	dac02317 	ldw	r11,140(sp)
 4017f94:	00c00044 	movi	r3,1
 4017f98:	d8c02015 	stw	r3,128(sp)
 4017f9c:	58800017 	ldw	r2,0(r11)
 4017fa0:	5ac00104 	addi	r11,r11,4
 4017fa4:	d8001d85 	stb	zero,118(sp)
 4017fa8:	d8801005 	stb	r2,64(sp)
 4017fac:	dac02315 	stw	r11,140(sp)
 4017fb0:	d8c02115 	stw	r3,132(sp)
 4017fb4:	dc401004 	addi	r17,sp,64
 4017fb8:	0021883a 	mov	r16,zero
 4017fbc:	90c0008c 	andi	r3,r18,2
 4017fc0:	d8c02215 	stw	r3,136(sp)
 4017fc4:	18000326 	beq	r3,zero,4017fd4 <___svfiprintf_internal_r+0x598>
 4017fc8:	dac02017 	ldw	r11,128(sp)
 4017fcc:	5ac00084 	addi	r11,r11,2
 4017fd0:	dac02015 	stw	r11,128(sp)
 4017fd4:	90c0210c 	andi	r3,r18,132
 4017fd8:	d8c02615 	stw	r3,152(sp)
 4017fdc:	1801131e 	bne	r3,zero,401842c <___svfiprintf_internal_r+0x9f0>
 4017fe0:	dac02417 	ldw	r11,144(sp)
 4017fe4:	d8c02017 	ldw	r3,128(sp)
 4017fe8:	58f9c83a 	sub	fp,r11,r3
 4017fec:	07010f0e 	bge	zero,fp,401842c <___svfiprintf_internal_r+0x9f0>
 4017ff0:	02400404 	movi	r9,16
 4017ff4:	d8c01c17 	ldw	r3,112(sp)
 4017ff8:	d8801b17 	ldw	r2,108(sp)
 4017ffc:	4f02d60e 	bge	r9,fp,4018b58 <___svfiprintf_internal_r+0x111c>
 4018000:	01410234 	movhi	r5,1032
 4018004:	29559b04 	addi	r5,r5,22124
 4018008:	d9402815 	stw	r5,160(sp)
 401800c:	028001c4 	movi	r10,7
 4018010:	00000306 	br	4018020 <___svfiprintf_internal_r+0x5e4>
 4018014:	e73ffc04 	addi	fp,fp,-16
 4018018:	42000204 	addi	r8,r8,8
 401801c:	4f00150e 	bge	r9,fp,4018074 <___svfiprintf_internal_r+0x638>
 4018020:	18c00404 	addi	r3,r3,16
 4018024:	10800044 	addi	r2,r2,1
 4018028:	45800015 	stw	r22,0(r8)
 401802c:	42400115 	stw	r9,4(r8)
 4018030:	d8c01c15 	stw	r3,112(sp)
 4018034:	d8801b15 	stw	r2,108(sp)
 4018038:	50bff60e 	bge	r10,r2,4018014 <__alt_mem_epcs_flash_controller_0+0xfb017014>
 401803c:	d9801a04 	addi	r6,sp,104
 4018040:	b80b883a 	mov	r5,r23
 4018044:	a809883a 	mov	r4,r21
 4018048:	da402c15 	stw	r9,176(sp)
 401804c:	da802d15 	stw	r10,180(sp)
 4018050:	401786c0 	call	401786c <__ssprint_r>
 4018054:	da402c17 	ldw	r9,176(sp)
 4018058:	da802d17 	ldw	r10,180(sp)
 401805c:	1001851e 	bne	r2,zero,4018674 <___svfiprintf_internal_r+0xc38>
 4018060:	e73ffc04 	addi	fp,fp,-16
 4018064:	d8c01c17 	ldw	r3,112(sp)
 4018068:	d8801b17 	ldw	r2,108(sp)
 401806c:	d811883a 	mov	r8,sp
 4018070:	4f3feb16 	blt	r9,fp,4018020 <__alt_mem_epcs_flash_controller_0+0xfb017020>
 4018074:	dac02817 	ldw	r11,160(sp)
 4018078:	e0c7883a 	add	r3,fp,r3
 401807c:	10800044 	addi	r2,r2,1
 4018080:	42c00015 	stw	r11,0(r8)
 4018084:	47000115 	stw	fp,4(r8)
 4018088:	d8c01c15 	stw	r3,112(sp)
 401808c:	d8801b15 	stw	r2,108(sp)
 4018090:	010001c4 	movi	r4,7
 4018094:	2081ee16 	blt	r4,r2,4018850 <___svfiprintf_internal_r+0xe14>
 4018098:	42000204 	addi	r8,r8,8
 401809c:	0000e506 	br	4018434 <___svfiprintf_internal_r+0x9f8>
 40180a0:	21003fcc 	andi	r4,r4,255
 40180a4:	2002dd1e 	bne	r4,zero,4018c1c <___svfiprintf_internal_r+0x11e0>
 40180a8:	00810234 	movhi	r2,1032
 40180ac:	10952a04 	addi	r2,r2,21672
 40180b0:	d8802915 	stw	r2,164(sp)
 40180b4:	9080080c 	andi	r2,r18,32
 40180b8:	103f461e 	bne	r2,zero,4017dd4 <__alt_mem_epcs_flash_controller_0+0xfb016dd4>
 40180bc:	9080040c 	andi	r2,r18,16
 40180c0:	10022e1e 	bne	r2,zero,401897c <___svfiprintf_internal_r+0xf40>
 40180c4:	9080100c 	andi	r2,r18,64
 40180c8:	dac02317 	ldw	r11,140(sp)
 40180cc:	10027326 	beq	r2,zero,4018a9c <___svfiprintf_internal_r+0x1060>
 40180d0:	5f00000b 	ldhu	fp,0(r11)
 40180d4:	5ac00104 	addi	r11,r11,4
 40180d8:	0013883a 	mov	r9,zero
 40180dc:	dac02315 	stw	r11,140(sp)
 40180e0:	003f4106 	br	4017de8 <__alt_mem_epcs_flash_controller_0+0xfb016de8>
 40180e4:	21003fcc 	andi	r4,r4,255
 40180e8:	2002e11e 	bne	r4,zero,4018c70 <___svfiprintf_internal_r+0x1234>
 40180ec:	9080080c 	andi	r2,r18,32
 40180f0:	1002011e 	bne	r2,zero,40188f8 <___svfiprintf_internal_r+0xebc>
 40180f4:	9080040c 	andi	r2,r18,16
 40180f8:	10023e1e 	bne	r2,zero,40189f4 <___svfiprintf_internal_r+0xfb8>
 40180fc:	9480100c 	andi	r18,r18,64
 4018100:	90023c26 	beq	r18,zero,40189f4 <___svfiprintf_internal_r+0xfb8>
 4018104:	dac02317 	ldw	r11,140(sp)
 4018108:	58800017 	ldw	r2,0(r11)
 401810c:	5ac00104 	addi	r11,r11,4
 4018110:	dac02315 	stw	r11,140(sp)
 4018114:	dac02517 	ldw	r11,148(sp)
 4018118:	12c0000d 	sth	r11,0(r2)
 401811c:	003e6e06 	br	4017ad8 <__alt_mem_epcs_flash_controller_0+0xfb016ad8>
 4018120:	98c00007 	ldb	r3,0(r19)
 4018124:	1a422926 	beq	r3,r9,40189cc <___svfiprintf_internal_r+0xf90>
 4018128:	94800414 	ori	r18,r18,16
 401812c:	003e9206 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4018130:	94801014 	ori	r18,r18,64
 4018134:	98c00007 	ldb	r3,0(r19)
 4018138:	003e8f06 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 401813c:	21003fcc 	andi	r4,r4,255
 4018140:	2002c71e 	bne	r4,zero,4018c60 <___svfiprintf_internal_r+0x1224>
 4018144:	9080080c 	andi	r2,r18,32
 4018148:	10004926 	beq	r2,zero,4018270 <___svfiprintf_internal_r+0x834>
 401814c:	dac02317 	ldw	r11,140(sp)
 4018150:	58800117 	ldw	r2,4(r11)
 4018154:	5f000017 	ldw	fp,0(r11)
 4018158:	5ac00204 	addi	r11,r11,8
 401815c:	dac02315 	stw	r11,140(sp)
 4018160:	1013883a 	mov	r9,r2
 4018164:	10004b16 	blt	r2,zero,4018294 <___svfiprintf_internal_r+0x858>
 4018168:	da801d83 	ldbu	r10,118(sp)
 401816c:	8001cb16 	blt	r16,zero,401889c <___svfiprintf_internal_r+0xe60>
 4018170:	00ffdfc4 	movi	r3,-129
 4018174:	e244b03a 	or	r2,fp,r9
 4018178:	90e4703a 	and	r18,r18,r3
 401817c:	103f4726 	beq	r2,zero,4017e9c <__alt_mem_epcs_flash_controller_0+0xfb016e9c>
 4018180:	48008c26 	beq	r9,zero,40183b4 <___svfiprintf_internal_r+0x978>
 4018184:	dc802015 	stw	r18,128(sp)
 4018188:	dc002115 	stw	r16,132(sp)
 401818c:	dc401a04 	addi	r17,sp,104
 4018190:	e021883a 	mov	r16,fp
 4018194:	da002215 	stw	r8,136(sp)
 4018198:	5039883a 	mov	fp,r10
 401819c:	4825883a 	mov	r18,r9
 40181a0:	8009883a 	mov	r4,r16
 40181a4:	900b883a 	mov	r5,r18
 40181a8:	01800284 	movi	r6,10
 40181ac:	000f883a 	mov	r7,zero
 40181b0:	401b16c0 	call	401b16c <__umoddi3>
 40181b4:	10800c04 	addi	r2,r2,48
 40181b8:	8c7fffc4 	addi	r17,r17,-1
 40181bc:	8009883a 	mov	r4,r16
 40181c0:	900b883a 	mov	r5,r18
 40181c4:	88800005 	stb	r2,0(r17)
 40181c8:	01800284 	movi	r6,10
 40181cc:	000f883a 	mov	r7,zero
 40181d0:	401abf40 	call	401abf4 <__udivdi3>
 40181d4:	1021883a 	mov	r16,r2
 40181d8:	10c4b03a 	or	r2,r2,r3
 40181dc:	1825883a 	mov	r18,r3
 40181e0:	103fef1e 	bne	r2,zero,40181a0 <__alt_mem_epcs_flash_controller_0+0xfb0171a0>
 40181e4:	dc802017 	ldw	r18,128(sp)
 40181e8:	dc002117 	ldw	r16,132(sp)
 40181ec:	da002217 	ldw	r8,136(sp)
 40181f0:	e015883a 	mov	r10,fp
 40181f4:	d8c01e17 	ldw	r3,120(sp)
 40181f8:	1c47c83a 	sub	r3,r3,r17
 40181fc:	d8c02115 	stw	r3,132(sp)
 4018200:	003f2a06 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018204:	dac02317 	ldw	r11,140(sp)
 4018208:	d8001d85 	stb	zero,118(sp)
 401820c:	5c400017 	ldw	r17,0(r11)
 4018210:	5f000104 	addi	fp,r11,4
 4018214:	88022f26 	beq	r17,zero,4018ad4 <___svfiprintf_internal_r+0x1098>
 4018218:	80022516 	blt	r16,zero,4018ab0 <___svfiprintf_internal_r+0x1074>
 401821c:	800d883a 	mov	r6,r16
 4018220:	000b883a 	mov	r5,zero
 4018224:	8809883a 	mov	r4,r17
 4018228:	da002c15 	stw	r8,176(sp)
 401822c:	4015eb40 	call	4015eb4 <memchr>
 4018230:	da002c17 	ldw	r8,176(sp)
 4018234:	10026426 	beq	r2,zero,4018bc8 <___svfiprintf_internal_r+0x118c>
 4018238:	1445c83a 	sub	r2,r2,r17
 401823c:	d8802115 	stw	r2,132(sp)
 4018240:	da801d83 	ldbu	r10,118(sp)
 4018244:	df002315 	stw	fp,140(sp)
 4018248:	0021883a 	mov	r16,zero
 401824c:	003f1706 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018250:	94800814 	ori	r18,r18,32
 4018254:	98c00007 	ldb	r3,0(r19)
 4018258:	003e4706 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 401825c:	21003fcc 	andi	r4,r4,255
 4018260:	2002701e 	bne	r4,zero,4018c24 <___svfiprintf_internal_r+0x11e8>
 4018264:	94800414 	ori	r18,r18,16
 4018268:	9080080c 	andi	r2,r18,32
 401826c:	103fb71e 	bne	r2,zero,401814c <__alt_mem_epcs_flash_controller_0+0xfb01714c>
 4018270:	9080040c 	andi	r2,r18,16
 4018274:	1001ab26 	beq	r2,zero,4018924 <___svfiprintf_internal_r+0xee8>
 4018278:	dac02317 	ldw	r11,140(sp)
 401827c:	5f000017 	ldw	fp,0(r11)
 4018280:	5ac00104 	addi	r11,r11,4
 4018284:	dac02315 	stw	r11,140(sp)
 4018288:	e013d7fa 	srai	r9,fp,31
 401828c:	4805883a 	mov	r2,r9
 4018290:	103fb50e 	bge	r2,zero,4018168 <__alt_mem_epcs_flash_controller_0+0xfb017168>
 4018294:	0739c83a 	sub	fp,zero,fp
 4018298:	02800b44 	movi	r10,45
 401829c:	e004c03a 	cmpne	r2,fp,zero
 40182a0:	0253c83a 	sub	r9,zero,r9
 40182a4:	da801d85 	stb	r10,118(sp)
 40182a8:	4893c83a 	sub	r9,r9,r2
 40182ac:	80023016 	blt	r16,zero,4018b70 <___svfiprintf_internal_r+0x1134>
 40182b0:	00bfdfc4 	movi	r2,-129
 40182b4:	90a4703a 	and	r18,r18,r2
 40182b8:	483fb21e 	bne	r9,zero,4018184 <__alt_mem_epcs_flash_controller_0+0xfb017184>
 40182bc:	00003d06 	br	40183b4 <___svfiprintf_internal_r+0x978>
 40182c0:	9817883a 	mov	r11,r19
 40182c4:	d8002415 	stw	zero,144(sp)
 40182c8:	18bff404 	addi	r2,r3,-48
 40182cc:	0019883a 	mov	r12,zero
 40182d0:	58c00007 	ldb	r3,0(r11)
 40182d4:	630002a4 	muli	r12,r12,10
 40182d8:	9cc00044 	addi	r19,r19,1
 40182dc:	9817883a 	mov	r11,r19
 40182e0:	1319883a 	add	r12,r2,r12
 40182e4:	18bff404 	addi	r2,r3,-48
 40182e8:	30bff92e 	bgeu	r6,r2,40182d0 <__alt_mem_epcs_flash_controller_0+0xfb0172d0>
 40182ec:	db002415 	stw	r12,144(sp)
 40182f0:	18bff804 	addi	r2,r3,-32
 40182f4:	28be232e 	bgeu	r5,r2,4017b84 <__alt_mem_epcs_flash_controller_0+0xfb016b84>
 40182f8:	21003fcc 	andi	r4,r4,255
 40182fc:	20024b1e 	bne	r4,zero,4018c2c <___svfiprintf_internal_r+0x11f0>
 4018300:	1800d626 	beq	r3,zero,401865c <___svfiprintf_internal_r+0xc20>
 4018304:	02c00044 	movi	r11,1
 4018308:	dac02015 	stw	r11,128(sp)
 401830c:	d8c01005 	stb	r3,64(sp)
 4018310:	d8001d85 	stb	zero,118(sp)
 4018314:	dac02115 	stw	r11,132(sp)
 4018318:	dc401004 	addi	r17,sp,64
 401831c:	003f2606 	br	4017fb8 <__alt_mem_epcs_flash_controller_0+0xfb016fb8>
 4018320:	94802014 	ori	r18,r18,128
 4018324:	98c00007 	ldb	r3,0(r19)
 4018328:	003e1306 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 401832c:	98c00007 	ldb	r3,0(r19)
 4018330:	9ac00044 	addi	r11,r19,1
 4018334:	1a822b26 	beq	r3,r10,4018be4 <___svfiprintf_internal_r+0x11a8>
 4018338:	18bff404 	addi	r2,r3,-48
 401833c:	0021883a 	mov	r16,zero
 4018340:	30821e36 	bltu	r6,r2,4018bbc <___svfiprintf_internal_r+0x1180>
 4018344:	58c00007 	ldb	r3,0(r11)
 4018348:	840002a4 	muli	r16,r16,10
 401834c:	5cc00044 	addi	r19,r11,1
 4018350:	9817883a 	mov	r11,r19
 4018354:	80a1883a 	add	r16,r16,r2
 4018358:	18bff404 	addi	r2,r3,-48
 401835c:	30bff92e 	bgeu	r6,r2,4018344 <__alt_mem_epcs_flash_controller_0+0xfb017344>
 4018360:	803e060e 	bge	r16,zero,4017b7c <__alt_mem_epcs_flash_controller_0+0xfb016b7c>
 4018364:	043fffc4 	movi	r16,-1
 4018368:	003e0406 	br	4017b7c <__alt_mem_epcs_flash_controller_0+0xfb016b7c>
 401836c:	21003fcc 	andi	r4,r4,255
 4018370:	2002371e 	bne	r4,zero,4018c50 <___svfiprintf_internal_r+0x1214>
 4018374:	94800414 	ori	r18,r18,16
 4018378:	9080080c 	andi	r2,r18,32
 401837c:	103ebb1e 	bne	r2,zero,4017e6c <__alt_mem_epcs_flash_controller_0+0xfb016e6c>
 4018380:	9080040c 	andi	r2,r18,16
 4018384:	10013b26 	beq	r2,zero,4018874 <___svfiprintf_internal_r+0xe38>
 4018388:	dac02317 	ldw	r11,140(sp)
 401838c:	d8001d85 	stb	zero,118(sp)
 4018390:	0013883a 	mov	r9,zero
 4018394:	58800104 	addi	r2,r11,4
 4018398:	5f000017 	ldw	fp,0(r11)
 401839c:	80013d16 	blt	r16,zero,4018894 <___svfiprintf_internal_r+0xe58>
 40183a0:	00ffdfc4 	movi	r3,-129
 40183a4:	d8802315 	stw	r2,140(sp)
 40183a8:	90e4703a 	and	r18,r18,r3
 40183ac:	0015883a 	mov	r10,zero
 40183b0:	e03eba26 	beq	fp,zero,4017e9c <__alt_mem_epcs_flash_controller_0+0xfb016e9c>
 40183b4:	00800244 	movi	r2,9
 40183b8:	173f7236 	bltu	r2,fp,4018184 <__alt_mem_epcs_flash_controller_0+0xfb017184>
 40183bc:	dac02b17 	ldw	r11,172(sp)
 40183c0:	e7000c04 	addi	fp,fp,48
 40183c4:	df0019c5 	stb	fp,103(sp)
 40183c8:	dac02115 	stw	r11,132(sp)
 40183cc:	dc4019c4 	addi	r17,sp,103
 40183d0:	003eb606 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 40183d4:	21003fcc 	andi	r4,r4,255
 40183d8:	20021f1e 	bne	r4,zero,4018c58 <___svfiprintf_internal_r+0x121c>
 40183dc:	94800414 	ori	r18,r18,16
 40183e0:	9080080c 	andi	r2,r18,32
 40183e4:	103ec51e 	bne	r2,zero,4017efc <__alt_mem_epcs_flash_controller_0+0xfb016efc>
 40183e8:	9080040c 	andi	r2,r18,16
 40183ec:	10016926 	beq	r2,zero,4018994 <___svfiprintf_internal_r+0xf58>
 40183f0:	dac02317 	ldw	r11,140(sp)
 40183f4:	d8001d85 	stb	zero,118(sp)
 40183f8:	0013883a 	mov	r9,zero
 40183fc:	58800104 	addi	r2,r11,4
 4018400:	5f000017 	ldw	fp,0(r11)
 4018404:	80016b16 	blt	r16,zero,40189b4 <___svfiprintf_internal_r+0xf78>
 4018408:	00ffdfc4 	movi	r3,-129
 401840c:	d8802315 	stw	r2,140(sp)
 4018410:	90e4703a 	and	r18,r18,r3
 4018414:	e03ec41e 	bne	fp,zero,4017f28 <__alt_mem_epcs_flash_controller_0+0xfb016f28>
 4018418:	0015883a 	mov	r10,zero
 401841c:	8001c226 	beq	r16,zero,4018b28 <___svfiprintf_internal_r+0x10ec>
 4018420:	0039883a 	mov	fp,zero
 4018424:	0013883a 	mov	r9,zero
 4018428:	003ec006 	br	4017f2c <__alt_mem_epcs_flash_controller_0+0xfb016f2c>
 401842c:	d8c01c17 	ldw	r3,112(sp)
 4018430:	d8801b17 	ldw	r2,108(sp)
 4018434:	d9001d87 	ldb	r4,118(sp)
 4018438:	20000b26 	beq	r4,zero,4018468 <___svfiprintf_internal_r+0xa2c>
 401843c:	d9001d84 	addi	r4,sp,118
 4018440:	18c00044 	addi	r3,r3,1
 4018444:	10800044 	addi	r2,r2,1
 4018448:	41000015 	stw	r4,0(r8)
 401844c:	01000044 	movi	r4,1
 4018450:	41000115 	stw	r4,4(r8)
 4018454:	d8c01c15 	stw	r3,112(sp)
 4018458:	d8801b15 	stw	r2,108(sp)
 401845c:	010001c4 	movi	r4,7
 4018460:	2080e116 	blt	r4,r2,40187e8 <___svfiprintf_internal_r+0xdac>
 4018464:	42000204 	addi	r8,r8,8
 4018468:	dac02217 	ldw	r11,136(sp)
 401846c:	58000b26 	beq	r11,zero,401849c <___svfiprintf_internal_r+0xa60>
 4018470:	d9001d04 	addi	r4,sp,116
 4018474:	18c00084 	addi	r3,r3,2
 4018478:	10800044 	addi	r2,r2,1
 401847c:	41000015 	stw	r4,0(r8)
 4018480:	01000084 	movi	r4,2
 4018484:	41000115 	stw	r4,4(r8)
 4018488:	d8c01c15 	stw	r3,112(sp)
 401848c:	d8801b15 	stw	r2,108(sp)
 4018490:	010001c4 	movi	r4,7
 4018494:	2080dd16 	blt	r4,r2,401880c <___svfiprintf_internal_r+0xdd0>
 4018498:	42000204 	addi	r8,r8,8
 401849c:	dac02617 	ldw	r11,152(sp)
 40184a0:	01002004 	movi	r4,128
 40184a4:	59008426 	beq	r11,r4,40186b8 <___svfiprintf_internal_r+0xc7c>
 40184a8:	dac02117 	ldw	r11,132(sp)
 40184ac:	82e1c83a 	sub	r16,r16,r11
 40184b0:	0400270e 	bge	zero,r16,4018550 <___svfiprintf_internal_r+0xb14>
 40184b4:	01c00404 	movi	r7,16
 40184b8:	3c016a0e 	bge	r7,r16,4018a64 <___svfiprintf_internal_r+0x1028>
 40184bc:	01410234 	movhi	r5,1032
 40184c0:	29559704 	addi	r5,r5,22108
 40184c4:	d9402215 	stw	r5,136(sp)
 40184c8:	070001c4 	movi	fp,7
 40184cc:	00000306 	br	40184dc <___svfiprintf_internal_r+0xaa0>
 40184d0:	843ffc04 	addi	r16,r16,-16
 40184d4:	42000204 	addi	r8,r8,8
 40184d8:	3c00130e 	bge	r7,r16,4018528 <___svfiprintf_internal_r+0xaec>
 40184dc:	18c00404 	addi	r3,r3,16
 40184e0:	10800044 	addi	r2,r2,1
 40184e4:	45000015 	stw	r20,0(r8)
 40184e8:	41c00115 	stw	r7,4(r8)
 40184ec:	d8c01c15 	stw	r3,112(sp)
 40184f0:	d8801b15 	stw	r2,108(sp)
 40184f4:	e0bff60e 	bge	fp,r2,40184d0 <__alt_mem_epcs_flash_controller_0+0xfb0174d0>
 40184f8:	d9801a04 	addi	r6,sp,104
 40184fc:	b80b883a 	mov	r5,r23
 4018500:	a809883a 	mov	r4,r21
 4018504:	d9c02c15 	stw	r7,176(sp)
 4018508:	401786c0 	call	401786c <__ssprint_r>
 401850c:	d9c02c17 	ldw	r7,176(sp)
 4018510:	1000581e 	bne	r2,zero,4018674 <___svfiprintf_internal_r+0xc38>
 4018514:	843ffc04 	addi	r16,r16,-16
 4018518:	d8c01c17 	ldw	r3,112(sp)
 401851c:	d8801b17 	ldw	r2,108(sp)
 4018520:	d811883a 	mov	r8,sp
 4018524:	3c3fed16 	blt	r7,r16,40184dc <__alt_mem_epcs_flash_controller_0+0xfb0174dc>
 4018528:	dac02217 	ldw	r11,136(sp)
 401852c:	1c07883a 	add	r3,r3,r16
 4018530:	10800044 	addi	r2,r2,1
 4018534:	42c00015 	stw	r11,0(r8)
 4018538:	44000115 	stw	r16,4(r8)
 401853c:	d8c01c15 	stw	r3,112(sp)
 4018540:	d8801b15 	stw	r2,108(sp)
 4018544:	010001c4 	movi	r4,7
 4018548:	20809e16 	blt	r4,r2,40187c4 <___svfiprintf_internal_r+0xd88>
 401854c:	42000204 	addi	r8,r8,8
 4018550:	dac02117 	ldw	r11,132(sp)
 4018554:	10800044 	addi	r2,r2,1
 4018558:	44400015 	stw	r17,0(r8)
 401855c:	58c7883a 	add	r3,r11,r3
 4018560:	42c00115 	stw	r11,4(r8)
 4018564:	d8c01c15 	stw	r3,112(sp)
 4018568:	d8801b15 	stw	r2,108(sp)
 401856c:	010001c4 	movi	r4,7
 4018570:	20807f16 	blt	r4,r2,4018770 <___svfiprintf_internal_r+0xd34>
 4018574:	42000204 	addi	r8,r8,8
 4018578:	9480010c 	andi	r18,r18,4
 401857c:	90002926 	beq	r18,zero,4018624 <___svfiprintf_internal_r+0xbe8>
 4018580:	dac02417 	ldw	r11,144(sp)
 4018584:	d8802017 	ldw	r2,128(sp)
 4018588:	58a1c83a 	sub	r16,r11,r2
 401858c:	0400250e 	bge	zero,r16,4018624 <___svfiprintf_internal_r+0xbe8>
 4018590:	04400404 	movi	r17,16
 4018594:	d8801b17 	ldw	r2,108(sp)
 4018598:	8c017c0e 	bge	r17,r16,4018b8c <___svfiprintf_internal_r+0x1150>
 401859c:	01410234 	movhi	r5,1032
 40185a0:	29559b04 	addi	r5,r5,22124
 40185a4:	d9402815 	stw	r5,160(sp)
 40185a8:	048001c4 	movi	r18,7
 40185ac:	00000306 	br	40185bc <___svfiprintf_internal_r+0xb80>
 40185b0:	843ffc04 	addi	r16,r16,-16
 40185b4:	42000204 	addi	r8,r8,8
 40185b8:	8c00110e 	bge	r17,r16,4018600 <___svfiprintf_internal_r+0xbc4>
 40185bc:	18c00404 	addi	r3,r3,16
 40185c0:	10800044 	addi	r2,r2,1
 40185c4:	45800015 	stw	r22,0(r8)
 40185c8:	44400115 	stw	r17,4(r8)
 40185cc:	d8c01c15 	stw	r3,112(sp)
 40185d0:	d8801b15 	stw	r2,108(sp)
 40185d4:	90bff60e 	bge	r18,r2,40185b0 <__alt_mem_epcs_flash_controller_0+0xfb0175b0>
 40185d8:	d9801a04 	addi	r6,sp,104
 40185dc:	b80b883a 	mov	r5,r23
 40185e0:	a809883a 	mov	r4,r21
 40185e4:	401786c0 	call	401786c <__ssprint_r>
 40185e8:	1000221e 	bne	r2,zero,4018674 <___svfiprintf_internal_r+0xc38>
 40185ec:	843ffc04 	addi	r16,r16,-16
 40185f0:	d8c01c17 	ldw	r3,112(sp)
 40185f4:	d8801b17 	ldw	r2,108(sp)
 40185f8:	d811883a 	mov	r8,sp
 40185fc:	8c3fef16 	blt	r17,r16,40185bc <__alt_mem_epcs_flash_controller_0+0xfb0175bc>
 4018600:	dac02817 	ldw	r11,160(sp)
 4018604:	1c07883a 	add	r3,r3,r16
 4018608:	10800044 	addi	r2,r2,1
 401860c:	42c00015 	stw	r11,0(r8)
 4018610:	44000115 	stw	r16,4(r8)
 4018614:	d8c01c15 	stw	r3,112(sp)
 4018618:	d8801b15 	stw	r2,108(sp)
 401861c:	010001c4 	movi	r4,7
 4018620:	2080aa16 	blt	r4,r2,40188cc <___svfiprintf_internal_r+0xe90>
 4018624:	d8802417 	ldw	r2,144(sp)
 4018628:	dac02017 	ldw	r11,128(sp)
 401862c:	12c0010e 	bge	r2,r11,4018634 <___svfiprintf_internal_r+0xbf8>
 4018630:	5805883a 	mov	r2,r11
 4018634:	dac02517 	ldw	r11,148(sp)
 4018638:	5897883a 	add	r11,r11,r2
 401863c:	dac02515 	stw	r11,148(sp)
 4018640:	1800531e 	bne	r3,zero,4018790 <___svfiprintf_internal_r+0xd54>
 4018644:	98800007 	ldb	r2,0(r19)
 4018648:	d8001b15 	stw	zero,108(sp)
 401864c:	d811883a 	mov	r8,sp
 4018650:	103d231e 	bne	r2,zero,4017ae0 <__alt_mem_epcs_flash_controller_0+0xfb016ae0>
 4018654:	9823883a 	mov	r17,r19
 4018658:	003d3906 	br	4017b40 <__alt_mem_epcs_flash_controller_0+0xfb016b40>
 401865c:	d8801c17 	ldw	r2,112(sp)
 4018660:	10000426 	beq	r2,zero,4018674 <___svfiprintf_internal_r+0xc38>
 4018664:	d9402717 	ldw	r5,156(sp)
 4018668:	d9002a17 	ldw	r4,168(sp)
 401866c:	d9801a04 	addi	r6,sp,104
 4018670:	401786c0 	call	401786c <__ssprint_r>
 4018674:	dac02717 	ldw	r11,156(sp)
 4018678:	d8802517 	ldw	r2,148(sp)
 401867c:	58c0030b 	ldhu	r3,12(r11)
 4018680:	18c0100c 	andi	r3,r3,64
 4018684:	1801381e 	bne	r3,zero,4018b68 <___svfiprintf_internal_r+0x112c>
 4018688:	dfc03717 	ldw	ra,220(sp)
 401868c:	df003617 	ldw	fp,216(sp)
 4018690:	ddc03517 	ldw	r23,212(sp)
 4018694:	dd803417 	ldw	r22,208(sp)
 4018698:	dd403317 	ldw	r21,204(sp)
 401869c:	dd003217 	ldw	r20,200(sp)
 40186a0:	dcc03117 	ldw	r19,196(sp)
 40186a4:	dc803017 	ldw	r18,192(sp)
 40186a8:	dc402f17 	ldw	r17,188(sp)
 40186ac:	dc002e17 	ldw	r16,184(sp)
 40186b0:	dec03804 	addi	sp,sp,224
 40186b4:	f800283a 	ret
 40186b8:	dac02417 	ldw	r11,144(sp)
 40186bc:	d9002017 	ldw	r4,128(sp)
 40186c0:	5939c83a 	sub	fp,r11,r4
 40186c4:	073f780e 	bge	zero,fp,40184a8 <__alt_mem_epcs_flash_controller_0+0xfb0174a8>
 40186c8:	02400404 	movi	r9,16
 40186cc:	4f01370e 	bge	r9,fp,4018bac <___svfiprintf_internal_r+0x1170>
 40186d0:	02c10234 	movhi	r11,1032
 40186d4:	5ad59704 	addi	r11,r11,22108
 40186d8:	dac02215 	stw	r11,136(sp)
 40186dc:	028001c4 	movi	r10,7
 40186e0:	00000306 	br	40186f0 <___svfiprintf_internal_r+0xcb4>
 40186e4:	e73ffc04 	addi	fp,fp,-16
 40186e8:	42000204 	addi	r8,r8,8
 40186ec:	4f00150e 	bge	r9,fp,4018744 <___svfiprintf_internal_r+0xd08>
 40186f0:	18c00404 	addi	r3,r3,16
 40186f4:	10800044 	addi	r2,r2,1
 40186f8:	45000015 	stw	r20,0(r8)
 40186fc:	42400115 	stw	r9,4(r8)
 4018700:	d8c01c15 	stw	r3,112(sp)
 4018704:	d8801b15 	stw	r2,108(sp)
 4018708:	50bff60e 	bge	r10,r2,40186e4 <__alt_mem_epcs_flash_controller_0+0xfb0176e4>
 401870c:	d9801a04 	addi	r6,sp,104
 4018710:	b80b883a 	mov	r5,r23
 4018714:	a809883a 	mov	r4,r21
 4018718:	da402c15 	stw	r9,176(sp)
 401871c:	da802d15 	stw	r10,180(sp)
 4018720:	401786c0 	call	401786c <__ssprint_r>
 4018724:	da402c17 	ldw	r9,176(sp)
 4018728:	da802d17 	ldw	r10,180(sp)
 401872c:	103fd11e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 4018730:	e73ffc04 	addi	fp,fp,-16
 4018734:	d8c01c17 	ldw	r3,112(sp)
 4018738:	d8801b17 	ldw	r2,108(sp)
 401873c:	d811883a 	mov	r8,sp
 4018740:	4f3feb16 	blt	r9,fp,40186f0 <__alt_mem_epcs_flash_controller_0+0xfb0176f0>
 4018744:	dac02217 	ldw	r11,136(sp)
 4018748:	1f07883a 	add	r3,r3,fp
 401874c:	10800044 	addi	r2,r2,1
 4018750:	42c00015 	stw	r11,0(r8)
 4018754:	47000115 	stw	fp,4(r8)
 4018758:	d8c01c15 	stw	r3,112(sp)
 401875c:	d8801b15 	stw	r2,108(sp)
 4018760:	010001c4 	movi	r4,7
 4018764:	2080b616 	blt	r4,r2,4018a40 <___svfiprintf_internal_r+0x1004>
 4018768:	42000204 	addi	r8,r8,8
 401876c:	003f4e06 	br	40184a8 <__alt_mem_epcs_flash_controller_0+0xfb0174a8>
 4018770:	d9801a04 	addi	r6,sp,104
 4018774:	b80b883a 	mov	r5,r23
 4018778:	a809883a 	mov	r4,r21
 401877c:	401786c0 	call	401786c <__ssprint_r>
 4018780:	103fbc1e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 4018784:	d8c01c17 	ldw	r3,112(sp)
 4018788:	d811883a 	mov	r8,sp
 401878c:	003f7a06 	br	4018578 <__alt_mem_epcs_flash_controller_0+0xfb017578>
 4018790:	d9801a04 	addi	r6,sp,104
 4018794:	b80b883a 	mov	r5,r23
 4018798:	a809883a 	mov	r4,r21
 401879c:	401786c0 	call	401786c <__ssprint_r>
 40187a0:	103fa826 	beq	r2,zero,4018644 <__alt_mem_epcs_flash_controller_0+0xfb017644>
 40187a4:	003fb306 	br	4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 40187a8:	d9801a04 	addi	r6,sp,104
 40187ac:	b80b883a 	mov	r5,r23
 40187b0:	a809883a 	mov	r4,r21
 40187b4:	401786c0 	call	401786c <__ssprint_r>
 40187b8:	103fae1e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 40187bc:	d811883a 	mov	r8,sp
 40187c0:	003cdc06 	br	4017b34 <__alt_mem_epcs_flash_controller_0+0xfb016b34>
 40187c4:	d9801a04 	addi	r6,sp,104
 40187c8:	b80b883a 	mov	r5,r23
 40187cc:	a809883a 	mov	r4,r21
 40187d0:	401786c0 	call	401786c <__ssprint_r>
 40187d4:	103fa71e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 40187d8:	d8c01c17 	ldw	r3,112(sp)
 40187dc:	d8801b17 	ldw	r2,108(sp)
 40187e0:	d811883a 	mov	r8,sp
 40187e4:	003f5a06 	br	4018550 <__alt_mem_epcs_flash_controller_0+0xfb017550>
 40187e8:	d9801a04 	addi	r6,sp,104
 40187ec:	b80b883a 	mov	r5,r23
 40187f0:	a809883a 	mov	r4,r21
 40187f4:	401786c0 	call	401786c <__ssprint_r>
 40187f8:	103f9e1e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 40187fc:	d8c01c17 	ldw	r3,112(sp)
 4018800:	d8801b17 	ldw	r2,108(sp)
 4018804:	d811883a 	mov	r8,sp
 4018808:	003f1706 	br	4018468 <__alt_mem_epcs_flash_controller_0+0xfb017468>
 401880c:	d9801a04 	addi	r6,sp,104
 4018810:	b80b883a 	mov	r5,r23
 4018814:	a809883a 	mov	r4,r21
 4018818:	401786c0 	call	401786c <__ssprint_r>
 401881c:	103f951e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 4018820:	d8c01c17 	ldw	r3,112(sp)
 4018824:	d8801b17 	ldw	r2,108(sp)
 4018828:	d811883a 	mov	r8,sp
 401882c:	003f1b06 	br	401849c <__alt_mem_epcs_flash_controller_0+0xfb01749c>
 4018830:	d8001d85 	stb	zero,118(sp)
 4018834:	80007b16 	blt	r16,zero,4018a24 <___svfiprintf_internal_r+0xfe8>
 4018838:	00ffdfc4 	movi	r3,-129
 401883c:	e244b03a 	or	r2,fp,r9
 4018840:	90e4703a 	and	r18,r18,r3
 4018844:	103d7026 	beq	r2,zero,4017e08 <__alt_mem_epcs_flash_controller_0+0xfb016e08>
 4018848:	0015883a 	mov	r10,zero
 401884c:	003d7206 	br	4017e18 <__alt_mem_epcs_flash_controller_0+0xfb016e18>
 4018850:	d9801a04 	addi	r6,sp,104
 4018854:	b80b883a 	mov	r5,r23
 4018858:	a809883a 	mov	r4,r21
 401885c:	401786c0 	call	401786c <__ssprint_r>
 4018860:	103f841e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 4018864:	d8c01c17 	ldw	r3,112(sp)
 4018868:	d8801b17 	ldw	r2,108(sp)
 401886c:	d811883a 	mov	r8,sp
 4018870:	003ef006 	br	4018434 <__alt_mem_epcs_flash_controller_0+0xfb017434>
 4018874:	9080100c 	andi	r2,r18,64
 4018878:	d8001d85 	stb	zero,118(sp)
 401887c:	dac02317 	ldw	r11,140(sp)
 4018880:	10008126 	beq	r2,zero,4018a88 <___svfiprintf_internal_r+0x104c>
 4018884:	58800104 	addi	r2,r11,4
 4018888:	5f00000b 	ldhu	fp,0(r11)
 401888c:	0013883a 	mov	r9,zero
 4018890:	803ec30e 	bge	r16,zero,40183a0 <__alt_mem_epcs_flash_controller_0+0xfb0173a0>
 4018894:	d8802315 	stw	r2,140(sp)
 4018898:	0015883a 	mov	r10,zero
 401889c:	e244b03a 	or	r2,fp,r9
 40188a0:	103e371e 	bne	r2,zero,4018180 <__alt_mem_epcs_flash_controller_0+0xfb017180>
 40188a4:	00800044 	movi	r2,1
 40188a8:	10803fcc 	andi	r2,r2,255
 40188ac:	00c00044 	movi	r3,1
 40188b0:	10c06126 	beq	r2,r3,4018a38 <___svfiprintf_internal_r+0xffc>
 40188b4:	00c00084 	movi	r3,2
 40188b8:	10fd5526 	beq	r2,r3,4017e10 <__alt_mem_epcs_flash_controller_0+0xfb016e10>
 40188bc:	003ed806 	br	4018420 <__alt_mem_epcs_flash_controller_0+0xfb017420>
 40188c0:	d8802315 	stw	r2,140(sp)
 40188c4:	98c00007 	ldb	r3,0(r19)
 40188c8:	003cab06 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 40188cc:	d9801a04 	addi	r6,sp,104
 40188d0:	b80b883a 	mov	r5,r23
 40188d4:	a809883a 	mov	r4,r21
 40188d8:	401786c0 	call	401786c <__ssprint_r>
 40188dc:	103f651e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 40188e0:	d8c01c17 	ldw	r3,112(sp)
 40188e4:	003f4f06 	br	4018624 <__alt_mem_epcs_flash_controller_0+0xfb017624>
 40188e8:	00810234 	movhi	r2,1032
 40188ec:	10952f04 	addi	r2,r2,21692
 40188f0:	d8802915 	stw	r2,164(sp)
 40188f4:	003d4406 	br	4017e08 <__alt_mem_epcs_flash_controller_0+0xfb016e08>
 40188f8:	dac02317 	ldw	r11,140(sp)
 40188fc:	58800017 	ldw	r2,0(r11)
 4018900:	dac02517 	ldw	r11,148(sp)
 4018904:	5807d7fa 	srai	r3,r11,31
 4018908:	dac02317 	ldw	r11,140(sp)
 401890c:	10c00115 	stw	r3,4(r2)
 4018910:	5ac00104 	addi	r11,r11,4
 4018914:	dac02315 	stw	r11,140(sp)
 4018918:	dac02517 	ldw	r11,148(sp)
 401891c:	12c00015 	stw	r11,0(r2)
 4018920:	003c6d06 	br	4017ad8 <__alt_mem_epcs_flash_controller_0+0xfb016ad8>
 4018924:	9080100c 	andi	r2,r18,64
 4018928:	dac02317 	ldw	r11,140(sp)
 401892c:	103e5326 	beq	r2,zero,401827c <__alt_mem_epcs_flash_controller_0+0xfb01727c>
 4018930:	5f00000f 	ldh	fp,0(r11)
 4018934:	5ac00104 	addi	r11,r11,4
 4018938:	dac02315 	stw	r11,140(sp)
 401893c:	e013d7fa 	srai	r9,fp,31
 4018940:	4805883a 	mov	r2,r9
 4018944:	003e0706 	br	4018164 <__alt_mem_epcs_flash_controller_0+0xfb017164>
 4018948:	00800c04 	movi	r2,48
 401894c:	d8801d05 	stb	r2,116(sp)
 4018950:	d8c01d45 	stb	r3,117(sp)
 4018954:	d8001d85 	stb	zero,118(sp)
 4018958:	90800094 	ori	r2,r18,2
 401895c:	80008f16 	blt	r16,zero,4018b9c <___svfiprintf_internal_r+0x1160>
 4018960:	00bfdfc4 	movi	r2,-129
 4018964:	90a4703a 	and	r18,r18,r2
 4018968:	94800094 	ori	r18,r18,2
 401896c:	0015883a 	mov	r10,zero
 4018970:	003d2906 	br	4017e18 <__alt_mem_epcs_flash_controller_0+0xfb016e18>
 4018974:	98c00007 	ldb	r3,0(r19)
 4018978:	003c7f06 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 401897c:	dac02317 	ldw	r11,140(sp)
 4018980:	0013883a 	mov	r9,zero
 4018984:	5f000017 	ldw	fp,0(r11)
 4018988:	5ac00104 	addi	r11,r11,4
 401898c:	dac02315 	stw	r11,140(sp)
 4018990:	003d1506 	br	4017de8 <__alt_mem_epcs_flash_controller_0+0xfb016de8>
 4018994:	9080100c 	andi	r2,r18,64
 4018998:	d8001d85 	stb	zero,118(sp)
 401899c:	dac02317 	ldw	r11,140(sp)
 40189a0:	10003426 	beq	r2,zero,4018a74 <___svfiprintf_internal_r+0x1038>
 40189a4:	58800104 	addi	r2,r11,4
 40189a8:	5f00000b 	ldhu	fp,0(r11)
 40189ac:	0013883a 	mov	r9,zero
 40189b0:	803e950e 	bge	r16,zero,4018408 <__alt_mem_epcs_flash_controller_0+0xfb017408>
 40189b4:	e246b03a 	or	r3,fp,r9
 40189b8:	d8802315 	stw	r2,140(sp)
 40189bc:	183d5a1e 	bne	r3,zero,4017f28 <__alt_mem_epcs_flash_controller_0+0xfb016f28>
 40189c0:	0015883a 	mov	r10,zero
 40189c4:	0005883a 	mov	r2,zero
 40189c8:	003fb706 	br	40188a8 <__alt_mem_epcs_flash_controller_0+0xfb0178a8>
 40189cc:	98c00043 	ldbu	r3,1(r19)
 40189d0:	94800814 	ori	r18,r18,32
 40189d4:	9cc00044 	addi	r19,r19,1
 40189d8:	18c03fcc 	andi	r3,r3,255
 40189dc:	18c0201c 	xori	r3,r3,128
 40189e0:	18ffe004 	addi	r3,r3,-128
 40189e4:	003c6406 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 40189e8:	d8c02315 	stw	r3,140(sp)
 40189ec:	0015883a 	mov	r10,zero
 40189f0:	003faa06 	br	401889c <__alt_mem_epcs_flash_controller_0+0xfb01789c>
 40189f4:	dac02317 	ldw	r11,140(sp)
 40189f8:	58800017 	ldw	r2,0(r11)
 40189fc:	5ac00104 	addi	r11,r11,4
 4018a00:	dac02315 	stw	r11,140(sp)
 4018a04:	dac02517 	ldw	r11,148(sp)
 4018a08:	12c00015 	stw	r11,0(r2)
 4018a0c:	003c3206 	br	4017ad8 <__alt_mem_epcs_flash_controller_0+0xfb016ad8>
 4018a10:	01010234 	movhi	r4,1032
 4018a14:	21152f04 	addi	r4,r4,21692
 4018a18:	d9002915 	stw	r4,164(sp)
 4018a1c:	d8c02315 	stw	r3,140(sp)
 4018a20:	1025883a 	mov	r18,r2
 4018a24:	e244b03a 	or	r2,fp,r9
 4018a28:	103f871e 	bne	r2,zero,4018848 <__alt_mem_epcs_flash_controller_0+0xfb017848>
 4018a2c:	0015883a 	mov	r10,zero
 4018a30:	00800084 	movi	r2,2
 4018a34:	003f9c06 	br	40188a8 <__alt_mem_epcs_flash_controller_0+0xfb0178a8>
 4018a38:	0039883a 	mov	fp,zero
 4018a3c:	003e5f06 	br	40183bc <__alt_mem_epcs_flash_controller_0+0xfb0173bc>
 4018a40:	d9801a04 	addi	r6,sp,104
 4018a44:	b80b883a 	mov	r5,r23
 4018a48:	a809883a 	mov	r4,r21
 4018a4c:	401786c0 	call	401786c <__ssprint_r>
 4018a50:	103f081e 	bne	r2,zero,4018674 <__alt_mem_epcs_flash_controller_0+0xfb017674>
 4018a54:	d8c01c17 	ldw	r3,112(sp)
 4018a58:	d8801b17 	ldw	r2,108(sp)
 4018a5c:	d811883a 	mov	r8,sp
 4018a60:	003e9106 	br	40184a8 <__alt_mem_epcs_flash_controller_0+0xfb0174a8>
 4018a64:	01010234 	movhi	r4,1032
 4018a68:	21159704 	addi	r4,r4,22108
 4018a6c:	d9002215 	stw	r4,136(sp)
 4018a70:	003ead06 	br	4018528 <__alt_mem_epcs_flash_controller_0+0xfb017528>
 4018a74:	58800104 	addi	r2,r11,4
 4018a78:	5f000017 	ldw	fp,0(r11)
 4018a7c:	0013883a 	mov	r9,zero
 4018a80:	803e610e 	bge	r16,zero,4018408 <__alt_mem_epcs_flash_controller_0+0xfb017408>
 4018a84:	003fcb06 	br	40189b4 <__alt_mem_epcs_flash_controller_0+0xfb0179b4>
 4018a88:	58800104 	addi	r2,r11,4
 4018a8c:	5f000017 	ldw	fp,0(r11)
 4018a90:	0013883a 	mov	r9,zero
 4018a94:	803e420e 	bge	r16,zero,40183a0 <__alt_mem_epcs_flash_controller_0+0xfb0173a0>
 4018a98:	003f7e06 	br	4018894 <__alt_mem_epcs_flash_controller_0+0xfb017894>
 4018a9c:	5f000017 	ldw	fp,0(r11)
 4018aa0:	5ac00104 	addi	r11,r11,4
 4018aa4:	0013883a 	mov	r9,zero
 4018aa8:	dac02315 	stw	r11,140(sp)
 4018aac:	003cce06 	br	4017de8 <__alt_mem_epcs_flash_controller_0+0xfb016de8>
 4018ab0:	8809883a 	mov	r4,r17
 4018ab4:	da002c15 	stw	r8,176(sp)
 4018ab8:	400ec400 	call	400ec40 <strlen>
 4018abc:	d8802115 	stw	r2,132(sp)
 4018ac0:	da801d83 	ldbu	r10,118(sp)
 4018ac4:	df002315 	stw	fp,140(sp)
 4018ac8:	0021883a 	mov	r16,zero
 4018acc:	da002c17 	ldw	r8,176(sp)
 4018ad0:	003cf606 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018ad4:	00800184 	movi	r2,6
 4018ad8:	1400012e 	bgeu	r2,r16,4018ae0 <___svfiprintf_internal_r+0x10a4>
 4018adc:	1021883a 	mov	r16,r2
 4018ae0:	dc002115 	stw	r16,132(sp)
 4018ae4:	8005883a 	mov	r2,r16
 4018ae8:	80003c16 	blt	r16,zero,4018bdc <___svfiprintf_internal_r+0x11a0>
 4018aec:	04410234 	movhi	r17,1032
 4018af0:	d8802015 	stw	r2,128(sp)
 4018af4:	df002315 	stw	fp,140(sp)
 4018af8:	8c553404 	addi	r17,r17,21712
 4018afc:	003d2e06 	br	4017fb8 <__alt_mem_epcs_flash_controller_0+0xfb016fb8>
 4018b00:	04001004 	movi	r16,64
 4018b04:	800b883a 	mov	r5,r16
 4018b08:	400dedc0 	call	400dedc <_malloc_r>
 4018b0c:	dac02717 	ldw	r11,156(sp)
 4018b10:	58800015 	stw	r2,0(r11)
 4018b14:	58800415 	stw	r2,16(r11)
 4018b18:	10004826 	beq	r2,zero,4018c3c <___svfiprintf_internal_r+0x1200>
 4018b1c:	dac02717 	ldw	r11,156(sp)
 4018b20:	5c000515 	stw	r16,20(r11)
 4018b24:	003bd906 	br	4017a8c <__alt_mem_epcs_flash_controller_0+0xfb016a8c>
 4018b28:	9080004c 	andi	r2,r18,1
 4018b2c:	0015883a 	mov	r10,zero
 4018b30:	10000626 	beq	r2,zero,4018b4c <___svfiprintf_internal_r+0x1110>
 4018b34:	dac02b17 	ldw	r11,172(sp)
 4018b38:	00800c04 	movi	r2,48
 4018b3c:	d88019c5 	stb	r2,103(sp)
 4018b40:	dac02115 	stw	r11,132(sp)
 4018b44:	dc4019c4 	addi	r17,sp,103
 4018b48:	003cd806 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018b4c:	d8002115 	stw	zero,132(sp)
 4018b50:	dc401a04 	addi	r17,sp,104
 4018b54:	003cd506 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018b58:	01010234 	movhi	r4,1032
 4018b5c:	21159b04 	addi	r4,r4,22124
 4018b60:	d9002815 	stw	r4,160(sp)
 4018b64:	003d4306 	br	4018074 <__alt_mem_epcs_flash_controller_0+0xfb017074>
 4018b68:	00bfffc4 	movi	r2,-1
 4018b6c:	003ec606 	br	4018688 <__alt_mem_epcs_flash_controller_0+0xfb017688>
 4018b70:	00800044 	movi	r2,1
 4018b74:	10803fcc 	andi	r2,r2,255
 4018b78:	00c00044 	movi	r3,1
 4018b7c:	10fd8026 	beq	r2,r3,4018180 <__alt_mem_epcs_flash_controller_0+0xfb017180>
 4018b80:	00c00084 	movi	r3,2
 4018b84:	10fca426 	beq	r2,r3,4017e18 <__alt_mem_epcs_flash_controller_0+0xfb016e18>
 4018b88:	003ce806 	br	4017f2c <__alt_mem_epcs_flash_controller_0+0xfb016f2c>
 4018b8c:	01010234 	movhi	r4,1032
 4018b90:	21159b04 	addi	r4,r4,22124
 4018b94:	d9002815 	stw	r4,160(sp)
 4018b98:	003e9906 	br	4018600 <__alt_mem_epcs_flash_controller_0+0xfb017600>
 4018b9c:	1025883a 	mov	r18,r2
 4018ba0:	0015883a 	mov	r10,zero
 4018ba4:	00800084 	movi	r2,2
 4018ba8:	003ff206 	br	4018b74 <__alt_mem_epcs_flash_controller_0+0xfb017b74>
 4018bac:	01410234 	movhi	r5,1032
 4018bb0:	29559704 	addi	r5,r5,22108
 4018bb4:	d9402215 	stw	r5,136(sp)
 4018bb8:	003ee206 	br	4018744 <__alt_mem_epcs_flash_controller_0+0xfb017744>
 4018bbc:	5827883a 	mov	r19,r11
 4018bc0:	0021883a 	mov	r16,zero
 4018bc4:	003bed06 	br	4017b7c <__alt_mem_epcs_flash_controller_0+0xfb016b7c>
 4018bc8:	dc002115 	stw	r16,132(sp)
 4018bcc:	da801d83 	ldbu	r10,118(sp)
 4018bd0:	df002315 	stw	fp,140(sp)
 4018bd4:	0021883a 	mov	r16,zero
 4018bd8:	003cb406 	br	4017eac <__alt_mem_epcs_flash_controller_0+0xfb016eac>
 4018bdc:	0005883a 	mov	r2,zero
 4018be0:	003fc206 	br	4018aec <__alt_mem_epcs_flash_controller_0+0xfb017aec>
 4018be4:	d8802317 	ldw	r2,140(sp)
 4018be8:	98c00043 	ldbu	r3,1(r19)
 4018bec:	5827883a 	mov	r19,r11
 4018bf0:	14000017 	ldw	r16,0(r2)
 4018bf4:	10800104 	addi	r2,r2,4
 4018bf8:	d8802315 	stw	r2,140(sp)
 4018bfc:	803f760e 	bge	r16,zero,40189d8 <__alt_mem_epcs_flash_controller_0+0xfb0179d8>
 4018c00:	18c03fcc 	andi	r3,r3,255
 4018c04:	18c0201c 	xori	r3,r3,128
 4018c08:	043fffc4 	movi	r16,-1
 4018c0c:	18ffe004 	addi	r3,r3,-128
 4018c10:	003bd906 	br	4017b78 <__alt_mem_epcs_flash_controller_0+0xfb016b78>
 4018c14:	d9c01d85 	stb	r7,118(sp)
 4018c18:	003cb606 	br	4017ef4 <__alt_mem_epcs_flash_controller_0+0xfb016ef4>
 4018c1c:	d9c01d85 	stb	r7,118(sp)
 4018c20:	003d2106 	br	40180a8 <__alt_mem_epcs_flash_controller_0+0xfb0170a8>
 4018c24:	d9c01d85 	stb	r7,118(sp)
 4018c28:	003d8e06 	br	4018264 <__alt_mem_epcs_flash_controller_0+0xfb017264>
 4018c2c:	d9c01d85 	stb	r7,118(sp)
 4018c30:	003db306 	br	4018300 <__alt_mem_epcs_flash_controller_0+0xfb017300>
 4018c34:	d9c01d85 	stb	r7,118(sp)
 4018c38:	003c8a06 	br	4017e64 <__alt_mem_epcs_flash_controller_0+0xfb016e64>
 4018c3c:	dac02a17 	ldw	r11,168(sp)
 4018c40:	00800304 	movi	r2,12
 4018c44:	58800015 	stw	r2,0(r11)
 4018c48:	00bfffc4 	movi	r2,-1
 4018c4c:	003e8e06 	br	4018688 <__alt_mem_epcs_flash_controller_0+0xfb017688>
 4018c50:	d9c01d85 	stb	r7,118(sp)
 4018c54:	003dc706 	br	4018374 <__alt_mem_epcs_flash_controller_0+0xfb017374>
 4018c58:	d9c01d85 	stb	r7,118(sp)
 4018c5c:	003ddf06 	br	40183dc <__alt_mem_epcs_flash_controller_0+0xfb0173dc>
 4018c60:	d9c01d85 	stb	r7,118(sp)
 4018c64:	003d3706 	br	4018144 <__alt_mem_epcs_flash_controller_0+0xfb017144>
 4018c68:	d9c01d85 	stb	r7,118(sp)
 4018c6c:	003c5406 	br	4017dc0 <__alt_mem_epcs_flash_controller_0+0xfb016dc0>
 4018c70:	d9c01d85 	stb	r7,118(sp)
 4018c74:	003d1d06 	br	40180ec <__alt_mem_epcs_flash_controller_0+0xfb0170ec>

04018c78 <__sprint_r.part.0>:
 4018c78:	28801917 	ldw	r2,100(r5)
 4018c7c:	defff604 	addi	sp,sp,-40
 4018c80:	dd400515 	stw	r21,20(sp)
 4018c84:	dfc00915 	stw	ra,36(sp)
 4018c88:	df000815 	stw	fp,32(sp)
 4018c8c:	ddc00715 	stw	r23,28(sp)
 4018c90:	dd800615 	stw	r22,24(sp)
 4018c94:	dd000415 	stw	r20,16(sp)
 4018c98:	dcc00315 	stw	r19,12(sp)
 4018c9c:	dc800215 	stw	r18,8(sp)
 4018ca0:	dc400115 	stw	r17,4(sp)
 4018ca4:	dc000015 	stw	r16,0(sp)
 4018ca8:	1088000c 	andi	r2,r2,8192
 4018cac:	302b883a 	mov	r21,r6
 4018cb0:	10002e26 	beq	r2,zero,4018d6c <__sprint_r.part.0+0xf4>
 4018cb4:	30800217 	ldw	r2,8(r6)
 4018cb8:	35800017 	ldw	r22,0(r6)
 4018cbc:	10002926 	beq	r2,zero,4018d64 <__sprint_r.part.0+0xec>
 4018cc0:	2827883a 	mov	r19,r5
 4018cc4:	2029883a 	mov	r20,r4
 4018cc8:	b5c00104 	addi	r23,r22,4
 4018ccc:	04bfffc4 	movi	r18,-1
 4018cd0:	bc400017 	ldw	r17,0(r23)
 4018cd4:	b4000017 	ldw	r16,0(r22)
 4018cd8:	0039883a 	mov	fp,zero
 4018cdc:	8822d0ba 	srli	r17,r17,2
 4018ce0:	8800031e 	bne	r17,zero,4018cf0 <__sprint_r.part.0+0x78>
 4018ce4:	00001806 	br	4018d48 <__sprint_r.part.0+0xd0>
 4018ce8:	84000104 	addi	r16,r16,4
 4018cec:	8f001526 	beq	r17,fp,4018d44 <__sprint_r.part.0+0xcc>
 4018cf0:	81400017 	ldw	r5,0(r16)
 4018cf4:	980d883a 	mov	r6,r19
 4018cf8:	a009883a 	mov	r4,r20
 4018cfc:	401a6a00 	call	401a6a0 <_fputwc_r>
 4018d00:	e7000044 	addi	fp,fp,1
 4018d04:	14bff81e 	bne	r2,r18,4018ce8 <__alt_mem_epcs_flash_controller_0+0xfb017ce8>
 4018d08:	9005883a 	mov	r2,r18
 4018d0c:	a8000215 	stw	zero,8(r21)
 4018d10:	a8000115 	stw	zero,4(r21)
 4018d14:	dfc00917 	ldw	ra,36(sp)
 4018d18:	df000817 	ldw	fp,32(sp)
 4018d1c:	ddc00717 	ldw	r23,28(sp)
 4018d20:	dd800617 	ldw	r22,24(sp)
 4018d24:	dd400517 	ldw	r21,20(sp)
 4018d28:	dd000417 	ldw	r20,16(sp)
 4018d2c:	dcc00317 	ldw	r19,12(sp)
 4018d30:	dc800217 	ldw	r18,8(sp)
 4018d34:	dc400117 	ldw	r17,4(sp)
 4018d38:	dc000017 	ldw	r16,0(sp)
 4018d3c:	dec00a04 	addi	sp,sp,40
 4018d40:	f800283a 	ret
 4018d44:	a8800217 	ldw	r2,8(r21)
 4018d48:	8c63883a 	add	r17,r17,r17
 4018d4c:	8c63883a 	add	r17,r17,r17
 4018d50:	1445c83a 	sub	r2,r2,r17
 4018d54:	a8800215 	stw	r2,8(r21)
 4018d58:	b5800204 	addi	r22,r22,8
 4018d5c:	bdc00204 	addi	r23,r23,8
 4018d60:	103fdb1e 	bne	r2,zero,4018cd0 <__alt_mem_epcs_flash_controller_0+0xfb017cd0>
 4018d64:	0005883a 	mov	r2,zero
 4018d68:	003fe806 	br	4018d0c <__alt_mem_epcs_flash_controller_0+0xfb017d0c>
 4018d6c:	40155d80 	call	40155d8 <__sfvwrite_r>
 4018d70:	003fe606 	br	4018d0c <__alt_mem_epcs_flash_controller_0+0xfb017d0c>

04018d74 <__sprint_r>:
 4018d74:	30c00217 	ldw	r3,8(r6)
 4018d78:	18000126 	beq	r3,zero,4018d80 <__sprint_r+0xc>
 4018d7c:	4018c781 	jmpi	4018c78 <__sprint_r.part.0>
 4018d80:	30000115 	stw	zero,4(r6)
 4018d84:	0005883a 	mov	r2,zero
 4018d88:	f800283a 	ret

04018d8c <___vfiprintf_internal_r>:
 4018d8c:	deffc904 	addi	sp,sp,-220
 4018d90:	df003515 	stw	fp,212(sp)
 4018d94:	dd003115 	stw	r20,196(sp)
 4018d98:	dfc03615 	stw	ra,216(sp)
 4018d9c:	ddc03415 	stw	r23,208(sp)
 4018da0:	dd803315 	stw	r22,204(sp)
 4018da4:	dd403215 	stw	r21,200(sp)
 4018da8:	dcc03015 	stw	r19,192(sp)
 4018dac:	dc802f15 	stw	r18,188(sp)
 4018db0:	dc402e15 	stw	r17,184(sp)
 4018db4:	dc002d15 	stw	r16,180(sp)
 4018db8:	d9002015 	stw	r4,128(sp)
 4018dbc:	d9c02215 	stw	r7,136(sp)
 4018dc0:	2829883a 	mov	r20,r5
 4018dc4:	3039883a 	mov	fp,r6
 4018dc8:	20000226 	beq	r4,zero,4018dd4 <___vfiprintf_internal_r+0x48>
 4018dcc:	20800e17 	ldw	r2,56(r4)
 4018dd0:	1000cf26 	beq	r2,zero,4019110 <___vfiprintf_internal_r+0x384>
 4018dd4:	a080030b 	ldhu	r2,12(r20)
 4018dd8:	10c8000c 	andi	r3,r2,8192
 4018ddc:	1800061e 	bne	r3,zero,4018df8 <___vfiprintf_internal_r+0x6c>
 4018de0:	a1001917 	ldw	r4,100(r20)
 4018de4:	00f7ffc4 	movi	r3,-8193
 4018de8:	10880014 	ori	r2,r2,8192
 4018dec:	20c6703a 	and	r3,r4,r3
 4018df0:	a080030d 	sth	r2,12(r20)
 4018df4:	a0c01915 	stw	r3,100(r20)
 4018df8:	10c0020c 	andi	r3,r2,8
 4018dfc:	1800a926 	beq	r3,zero,40190a4 <___vfiprintf_internal_r+0x318>
 4018e00:	a0c00417 	ldw	r3,16(r20)
 4018e04:	1800a726 	beq	r3,zero,40190a4 <___vfiprintf_internal_r+0x318>
 4018e08:	1080068c 	andi	r2,r2,26
 4018e0c:	00c00284 	movi	r3,10
 4018e10:	10c0ac26 	beq	r2,r3,40190c4 <___vfiprintf_internal_r+0x338>
 4018e14:	da801a04 	addi	r10,sp,104
 4018e18:	da801e15 	stw	r10,120(sp)
 4018e1c:	d8801e17 	ldw	r2,120(sp)
 4018e20:	da8019c4 	addi	r10,sp,103
 4018e24:	05810234 	movhi	r22,1032
 4018e28:	05c10234 	movhi	r23,1032
 4018e2c:	da801f15 	stw	r10,124(sp)
 4018e30:	1295c83a 	sub	r10,r2,r10
 4018e34:	b595a304 	addi	r22,r22,22156
 4018e38:	bdd59f04 	addi	r23,r23,22140
 4018e3c:	dec01a15 	stw	sp,104(sp)
 4018e40:	d8001c15 	stw	zero,112(sp)
 4018e44:	d8001b15 	stw	zero,108(sp)
 4018e48:	d8002615 	stw	zero,152(sp)
 4018e4c:	d8002315 	stw	zero,140(sp)
 4018e50:	da802715 	stw	r10,156(sp)
 4018e54:	d811883a 	mov	r8,sp
 4018e58:	dd002115 	stw	r20,132(sp)
 4018e5c:	e021883a 	mov	r16,fp
 4018e60:	80800007 	ldb	r2,0(r16)
 4018e64:	1003ea26 	beq	r2,zero,4019e10 <___vfiprintf_internal_r+0x1084>
 4018e68:	00c00944 	movi	r3,37
 4018e6c:	8025883a 	mov	r18,r16
 4018e70:	10c0021e 	bne	r2,r3,4018e7c <___vfiprintf_internal_r+0xf0>
 4018e74:	00001606 	br	4018ed0 <___vfiprintf_internal_r+0x144>
 4018e78:	10c00326 	beq	r2,r3,4018e88 <___vfiprintf_internal_r+0xfc>
 4018e7c:	94800044 	addi	r18,r18,1
 4018e80:	90800007 	ldb	r2,0(r18)
 4018e84:	103ffc1e 	bne	r2,zero,4018e78 <__alt_mem_epcs_flash_controller_0+0xfb017e78>
 4018e88:	9423c83a 	sub	r17,r18,r16
 4018e8c:	88001026 	beq	r17,zero,4018ed0 <___vfiprintf_internal_r+0x144>
 4018e90:	d8c01c17 	ldw	r3,112(sp)
 4018e94:	d8801b17 	ldw	r2,108(sp)
 4018e98:	44000015 	stw	r16,0(r8)
 4018e9c:	88c7883a 	add	r3,r17,r3
 4018ea0:	10800044 	addi	r2,r2,1
 4018ea4:	44400115 	stw	r17,4(r8)
 4018ea8:	d8c01c15 	stw	r3,112(sp)
 4018eac:	d8801b15 	stw	r2,108(sp)
 4018eb0:	010001c4 	movi	r4,7
 4018eb4:	2080760e 	bge	r4,r2,4019090 <___vfiprintf_internal_r+0x304>
 4018eb8:	1803821e 	bne	r3,zero,4019cc4 <___vfiprintf_internal_r+0xf38>
 4018ebc:	da802317 	ldw	r10,140(sp)
 4018ec0:	d8001b15 	stw	zero,108(sp)
 4018ec4:	d811883a 	mov	r8,sp
 4018ec8:	5455883a 	add	r10,r10,r17
 4018ecc:	da802315 	stw	r10,140(sp)
 4018ed0:	90800007 	ldb	r2,0(r18)
 4018ed4:	10044626 	beq	r2,zero,4019ff0 <___vfiprintf_internal_r+0x1264>
 4018ed8:	90c00047 	ldb	r3,1(r18)
 4018edc:	94000044 	addi	r16,r18,1
 4018ee0:	d8001d85 	stb	zero,118(sp)
 4018ee4:	0009883a 	mov	r4,zero
 4018ee8:	000f883a 	mov	r7,zero
 4018eec:	027fffc4 	movi	r9,-1
 4018ef0:	0023883a 	mov	r17,zero
 4018ef4:	0029883a 	mov	r20,zero
 4018ef8:	01401604 	movi	r5,88
 4018efc:	01800244 	movi	r6,9
 4018f00:	03400a84 	movi	r13,42
 4018f04:	03001b04 	movi	r12,108
 4018f08:	84000044 	addi	r16,r16,1
 4018f0c:	18bff804 	addi	r2,r3,-32
 4018f10:	28827336 	bltu	r5,r2,40198e0 <___vfiprintf_internal_r+0xb54>
 4018f14:	100490ba 	slli	r2,r2,2
 4018f18:	028100b4 	movhi	r10,1026
 4018f1c:	52a3cb04 	addi	r10,r10,-28884
 4018f20:	1285883a 	add	r2,r2,r10
 4018f24:	10800017 	ldw	r2,0(r2)
 4018f28:	1000683a 	jmp	r2
 4018f2c:	04019614 	movui	r16,1624
 4018f30:	040198e0 	cmpeqi	r16,zero,1635
 4018f34:	040198e0 	cmpeqi	r16,zero,1635
 4018f38:	04019634 	movhi	r16,1624
 4018f3c:	040198e0 	cmpeqi	r16,zero,1635
 4018f40:	040198e0 	cmpeqi	r16,zero,1635
 4018f44:	040198e0 	cmpeqi	r16,zero,1635
 4018f48:	040198e0 	cmpeqi	r16,zero,1635
 4018f4c:	040198e0 	cmpeqi	r16,zero,1635
 4018f50:	040198e0 	cmpeqi	r16,zero,1635
 4018f54:	0401981c 	xori	r16,zero,1632
 4018f58:	04019838 	rdprs	r16,zero,1632
 4018f5c:	040198e0 	cmpeqi	r16,zero,1635
 4018f60:	04019120 	cmpeqi	r16,zero,1604
 4018f64:	04019848 	cmpgei	r16,zero,1633
 4018f68:	040198e0 	cmpeqi	r16,zero,1635
 4018f6c:	04019640 	call	401964 <__alt_mem_sdram-0x3bfe69c>
 4018f70:	0401964c 	andi	r16,zero,1625
 4018f74:	0401964c 	andi	r16,zero,1625
 4018f78:	0401964c 	andi	r16,zero,1625
 4018f7c:	0401964c 	andi	r16,zero,1625
 4018f80:	0401964c 	andi	r16,zero,1625
 4018f84:	0401964c 	andi	r16,zero,1625
 4018f88:	0401964c 	andi	r16,zero,1625
 4018f8c:	0401964c 	andi	r16,zero,1625
 4018f90:	0401964c 	andi	r16,zero,1625
 4018f94:	040198e0 	cmpeqi	r16,zero,1635
 4018f98:	040198e0 	cmpeqi	r16,zero,1635
 4018f9c:	040198e0 	cmpeqi	r16,zero,1635
 4018fa0:	040198e0 	cmpeqi	r16,zero,1635
 4018fa4:	040198e0 	cmpeqi	r16,zero,1635
 4018fa8:	040198e0 	cmpeqi	r16,zero,1635
 4018fac:	040198e0 	cmpeqi	r16,zero,1635
 4018fb0:	040198e0 	cmpeqi	r16,zero,1635
 4018fb4:	040198e0 	cmpeqi	r16,zero,1635
 4018fb8:	040198e0 	cmpeqi	r16,zero,1635
 4018fbc:	04019678 	rdprs	r16,zero,1625
 4018fc0:	040198e0 	cmpeqi	r16,zero,1635
 4018fc4:	040198e0 	cmpeqi	r16,zero,1635
 4018fc8:	040198e0 	cmpeqi	r16,zero,1635
 4018fcc:	040198e0 	cmpeqi	r16,zero,1635
 4018fd0:	040198e0 	cmpeqi	r16,zero,1635
 4018fd4:	040198e0 	cmpeqi	r16,zero,1635
 4018fd8:	040198e0 	cmpeqi	r16,zero,1635
 4018fdc:	040198e0 	cmpeqi	r16,zero,1635
 4018fe0:	040198e0 	cmpeqi	r16,zero,1635
 4018fe4:	040198e0 	cmpeqi	r16,zero,1635
 4018fe8:	040196b0 	cmpltui	r16,zero,1626
 4018fec:	040198e0 	cmpeqi	r16,zero,1635
 4018ff0:	040198e0 	cmpeqi	r16,zero,1635
 4018ff4:	040198e0 	cmpeqi	r16,zero,1635
 4018ff8:	040198e0 	cmpeqi	r16,zero,1635
 4018ffc:	040198e0 	cmpeqi	r16,zero,1635
 4019000:	04019708 	cmpgei	r16,zero,1628
 4019004:	040198e0 	cmpeqi	r16,zero,1635
 4019008:	040198e0 	cmpeqi	r16,zero,1635
 401900c:	04019778 	rdprs	r16,zero,1629
 4019010:	040198e0 	cmpeqi	r16,zero,1635
 4019014:	040198e0 	cmpeqi	r16,zero,1635
 4019018:	040198e0 	cmpeqi	r16,zero,1635
 401901c:	040198e0 	cmpeqi	r16,zero,1635
 4019020:	040198e0 	cmpeqi	r16,zero,1635
 4019024:	040198e0 	cmpeqi	r16,zero,1635
 4019028:	040198e0 	cmpeqi	r16,zero,1635
 401902c:	040198e0 	cmpeqi	r16,zero,1635
 4019030:	040198e0 	cmpeqi	r16,zero,1635
 4019034:	040198e0 	cmpeqi	r16,zero,1635
 4019038:	04019524 	muli	r16,zero,1620
 401903c:	04019550 	cmplti	r16,zero,1621
 4019040:	040198e0 	cmpeqi	r16,zero,1635
 4019044:	040198e0 	cmpeqi	r16,zero,1635
 4019048:	040198e0 	cmpeqi	r16,zero,1635
 401904c:	04019888 	cmpgei	r16,zero,1634
 4019050:	04019550 	cmplti	r16,zero,1621
 4019054:	040198e0 	cmpeqi	r16,zero,1635
 4019058:	040198e0 	cmpeqi	r16,zero,1635
 401905c:	040193e4 	muli	r16,zero,1615
 4019060:	040198e0 	cmpeqi	r16,zero,1635
 4019064:	040193f4 	movhi	r16,1615
 4019068:	04019430 	cmpltui	r16,zero,1616
 401906c:	0401912c 	andhi	r16,zero,1604
 4019070:	040193d8 	cmpnei	r16,zero,1615
 4019074:	040198e0 	cmpeqi	r16,zero,1635
 4019078:	040197b4 	movhi	r16,1630
 401907c:	040198e0 	cmpeqi	r16,zero,1635
 4019080:	0401980c 	andi	r16,zero,1632
 4019084:	040198e0 	cmpeqi	r16,zero,1635
 4019088:	040198e0 	cmpeqi	r16,zero,1635
 401908c:	040194d0 	cmplti	r16,zero,1619
 4019090:	42000204 	addi	r8,r8,8
 4019094:	da802317 	ldw	r10,140(sp)
 4019098:	5455883a 	add	r10,r10,r17
 401909c:	da802315 	stw	r10,140(sp)
 40190a0:	003f8b06 	br	4018ed0 <__alt_mem_epcs_flash_controller_0+0xfb017ed0>
 40190a4:	d9002017 	ldw	r4,128(sp)
 40190a8:	a00b883a 	mov	r5,r20
 40190ac:	40131800 	call	4013180 <__swsetup_r>
 40190b0:	1003b11e 	bne	r2,zero,4019f78 <___vfiprintf_internal_r+0x11ec>
 40190b4:	a080030b 	ldhu	r2,12(r20)
 40190b8:	00c00284 	movi	r3,10
 40190bc:	1080068c 	andi	r2,r2,26
 40190c0:	10ff541e 	bne	r2,r3,4018e14 <__alt_mem_epcs_flash_controller_0+0xfb017e14>
 40190c4:	a080038f 	ldh	r2,14(r20)
 40190c8:	103f5216 	blt	r2,zero,4018e14 <__alt_mem_epcs_flash_controller_0+0xfb017e14>
 40190cc:	d9c02217 	ldw	r7,136(sp)
 40190d0:	d9002017 	ldw	r4,128(sp)
 40190d4:	e00d883a 	mov	r6,fp
 40190d8:	a00b883a 	mov	r5,r20
 40190dc:	401a2040 	call	401a204 <__sbprintf>
 40190e0:	dfc03617 	ldw	ra,216(sp)
 40190e4:	df003517 	ldw	fp,212(sp)
 40190e8:	ddc03417 	ldw	r23,208(sp)
 40190ec:	dd803317 	ldw	r22,204(sp)
 40190f0:	dd403217 	ldw	r21,200(sp)
 40190f4:	dd003117 	ldw	r20,196(sp)
 40190f8:	dcc03017 	ldw	r19,192(sp)
 40190fc:	dc802f17 	ldw	r18,188(sp)
 4019100:	dc402e17 	ldw	r17,184(sp)
 4019104:	dc002d17 	ldw	r16,180(sp)
 4019108:	dec03704 	addi	sp,sp,220
 401910c:	f800283a 	ret
 4019110:	40151540 	call	4015154 <__sinit>
 4019114:	003f2f06 	br	4018dd4 <__alt_mem_epcs_flash_controller_0+0xfb017dd4>
 4019118:	0463c83a 	sub	r17,zero,r17
 401911c:	d8802215 	stw	r2,136(sp)
 4019120:	a5000114 	ori	r20,r20,4
 4019124:	80c00007 	ldb	r3,0(r16)
 4019128:	003f7706 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 401912c:	00800c04 	movi	r2,48
 4019130:	da802217 	ldw	r10,136(sp)
 4019134:	d8801d05 	stb	r2,116(sp)
 4019138:	00801e04 	movi	r2,120
 401913c:	d8801d45 	stb	r2,117(sp)
 4019140:	d8001d85 	stb	zero,118(sp)
 4019144:	50c00104 	addi	r3,r10,4
 4019148:	54800017 	ldw	r18,0(r10)
 401914c:	0027883a 	mov	r19,zero
 4019150:	a0800094 	ori	r2,r20,2
 4019154:	48030b16 	blt	r9,zero,4019d84 <___vfiprintf_internal_r+0xff8>
 4019158:	00bfdfc4 	movi	r2,-129
 401915c:	a096703a 	and	r11,r20,r2
 4019160:	d8c02215 	stw	r3,136(sp)
 4019164:	5d000094 	ori	r20,r11,2
 4019168:	90032b1e 	bne	r18,zero,4019e18 <___vfiprintf_internal_r+0x108c>
 401916c:	00810234 	movhi	r2,1032
 4019170:	10952f04 	addi	r2,r2,21692
 4019174:	d8802615 	stw	r2,152(sp)
 4019178:	0039883a 	mov	fp,zero
 401917c:	48017b1e 	bne	r9,zero,401976c <___vfiprintf_internal_r+0x9e0>
 4019180:	0013883a 	mov	r9,zero
 4019184:	0027883a 	mov	r19,zero
 4019188:	dd401a04 	addi	r21,sp,104
 401918c:	4825883a 	mov	r18,r9
 4019190:	4cc0010e 	bge	r9,r19,4019198 <___vfiprintf_internal_r+0x40c>
 4019194:	9825883a 	mov	r18,r19
 4019198:	e7003fcc 	andi	fp,fp,255
 401919c:	e700201c 	xori	fp,fp,128
 40191a0:	e73fe004 	addi	fp,fp,-128
 40191a4:	e0000126 	beq	fp,zero,40191ac <___vfiprintf_internal_r+0x420>
 40191a8:	94800044 	addi	r18,r18,1
 40191ac:	a380008c 	andi	r14,r20,2
 40191b0:	70000126 	beq	r14,zero,40191b8 <___vfiprintf_internal_r+0x42c>
 40191b4:	94800084 	addi	r18,r18,2
 40191b8:	a700210c 	andi	fp,r20,132
 40191bc:	e001df1e 	bne	fp,zero,401993c <___vfiprintf_internal_r+0xbb0>
 40191c0:	8c87c83a 	sub	r3,r17,r18
 40191c4:	00c1dd0e 	bge	zero,r3,401993c <___vfiprintf_internal_r+0xbb0>
 40191c8:	01c00404 	movi	r7,16
 40191cc:	d8801c17 	ldw	r2,112(sp)
 40191d0:	38c3ad0e 	bge	r7,r3,401a088 <___vfiprintf_internal_r+0x12fc>
 40191d4:	02810234 	movhi	r10,1032
 40191d8:	5295a304 	addi	r10,r10,22156
 40191dc:	dc002915 	stw	r16,164(sp)
 40191e0:	d9801b17 	ldw	r6,108(sp)
 40191e4:	da802415 	stw	r10,144(sp)
 40191e8:	03c001c4 	movi	r15,7
 40191ec:	da402515 	stw	r9,148(sp)
 40191f0:	db802815 	stw	r14,160(sp)
 40191f4:	1821883a 	mov	r16,r3
 40191f8:	00000506 	br	4019210 <___vfiprintf_internal_r+0x484>
 40191fc:	31400084 	addi	r5,r6,2
 4019200:	42000204 	addi	r8,r8,8
 4019204:	200d883a 	mov	r6,r4
 4019208:	843ffc04 	addi	r16,r16,-16
 401920c:	3c000d0e 	bge	r7,r16,4019244 <___vfiprintf_internal_r+0x4b8>
 4019210:	10800404 	addi	r2,r2,16
 4019214:	31000044 	addi	r4,r6,1
 4019218:	45800015 	stw	r22,0(r8)
 401921c:	41c00115 	stw	r7,4(r8)
 4019220:	d8801c15 	stw	r2,112(sp)
 4019224:	d9001b15 	stw	r4,108(sp)
 4019228:	793ff40e 	bge	r15,r4,40191fc <__alt_mem_epcs_flash_controller_0+0xfb0181fc>
 401922c:	1001b51e 	bne	r2,zero,4019904 <___vfiprintf_internal_r+0xb78>
 4019230:	843ffc04 	addi	r16,r16,-16
 4019234:	000d883a 	mov	r6,zero
 4019238:	01400044 	movi	r5,1
 401923c:	d811883a 	mov	r8,sp
 4019240:	3c3ff316 	blt	r7,r16,4019210 <__alt_mem_epcs_flash_controller_0+0xfb018210>
 4019244:	8007883a 	mov	r3,r16
 4019248:	da402517 	ldw	r9,148(sp)
 401924c:	db802817 	ldw	r14,160(sp)
 4019250:	dc002917 	ldw	r16,164(sp)
 4019254:	da802417 	ldw	r10,144(sp)
 4019258:	1885883a 	add	r2,r3,r2
 401925c:	40c00115 	stw	r3,4(r8)
 4019260:	42800015 	stw	r10,0(r8)
 4019264:	d8801c15 	stw	r2,112(sp)
 4019268:	d9401b15 	stw	r5,108(sp)
 401926c:	00c001c4 	movi	r3,7
 4019270:	19426016 	blt	r3,r5,4019bf4 <___vfiprintf_internal_r+0xe68>
 4019274:	d8c01d87 	ldb	r3,118(sp)
 4019278:	42000204 	addi	r8,r8,8
 401927c:	29000044 	addi	r4,r5,1
 4019280:	1801b31e 	bne	r3,zero,4019950 <___vfiprintf_internal_r+0xbc4>
 4019284:	7001c026 	beq	r14,zero,4019988 <___vfiprintf_internal_r+0xbfc>
 4019288:	d8c01d04 	addi	r3,sp,116
 401928c:	10800084 	addi	r2,r2,2
 4019290:	40c00015 	stw	r3,0(r8)
 4019294:	00c00084 	movi	r3,2
 4019298:	40c00115 	stw	r3,4(r8)
 401929c:	d8801c15 	stw	r2,112(sp)
 40192a0:	d9001b15 	stw	r4,108(sp)
 40192a4:	00c001c4 	movi	r3,7
 40192a8:	1902650e 	bge	r3,r4,4019c40 <___vfiprintf_internal_r+0xeb4>
 40192ac:	10029a1e 	bne	r2,zero,4019d18 <___vfiprintf_internal_r+0xf8c>
 40192b0:	00c02004 	movi	r3,128
 40192b4:	01000044 	movi	r4,1
 40192b8:	000b883a 	mov	r5,zero
 40192bc:	d811883a 	mov	r8,sp
 40192c0:	e0c1b31e 	bne	fp,r3,4019990 <___vfiprintf_internal_r+0xc04>
 40192c4:	8cb9c83a 	sub	fp,r17,r18
 40192c8:	0701b10e 	bge	zero,fp,4019990 <___vfiprintf_internal_r+0xc04>
 40192cc:	01c00404 	movi	r7,16
 40192d0:	3f03890e 	bge	r7,fp,401a0f8 <___vfiprintf_internal_r+0x136c>
 40192d4:	00c10234 	movhi	r3,1032
 40192d8:	18d59f04 	addi	r3,r3,22140
 40192dc:	d8c02415 	stw	r3,144(sp)
 40192e0:	8007883a 	mov	r3,r16
 40192e4:	034001c4 	movi	r13,7
 40192e8:	e021883a 	mov	r16,fp
 40192ec:	da402515 	stw	r9,148(sp)
 40192f0:	1839883a 	mov	fp,r3
 40192f4:	00000506 	br	401930c <___vfiprintf_internal_r+0x580>
 40192f8:	29800084 	addi	r6,r5,2
 40192fc:	42000204 	addi	r8,r8,8
 4019300:	180b883a 	mov	r5,r3
 4019304:	843ffc04 	addi	r16,r16,-16
 4019308:	3c000d0e 	bge	r7,r16,4019340 <___vfiprintf_internal_r+0x5b4>
 401930c:	10800404 	addi	r2,r2,16
 4019310:	28c00044 	addi	r3,r5,1
 4019314:	45c00015 	stw	r23,0(r8)
 4019318:	41c00115 	stw	r7,4(r8)
 401931c:	d8801c15 	stw	r2,112(sp)
 4019320:	d8c01b15 	stw	r3,108(sp)
 4019324:	68fff40e 	bge	r13,r3,40192f8 <__alt_mem_epcs_flash_controller_0+0xfb0182f8>
 4019328:	1002241e 	bne	r2,zero,4019bbc <___vfiprintf_internal_r+0xe30>
 401932c:	843ffc04 	addi	r16,r16,-16
 4019330:	01800044 	movi	r6,1
 4019334:	000b883a 	mov	r5,zero
 4019338:	d811883a 	mov	r8,sp
 401933c:	3c3ff316 	blt	r7,r16,401930c <__alt_mem_epcs_flash_controller_0+0xfb01830c>
 4019340:	da402517 	ldw	r9,148(sp)
 4019344:	e007883a 	mov	r3,fp
 4019348:	8039883a 	mov	fp,r16
 401934c:	1821883a 	mov	r16,r3
 4019350:	d8c02417 	ldw	r3,144(sp)
 4019354:	1705883a 	add	r2,r2,fp
 4019358:	47000115 	stw	fp,4(r8)
 401935c:	40c00015 	stw	r3,0(r8)
 4019360:	d8801c15 	stw	r2,112(sp)
 4019364:	d9801b15 	stw	r6,108(sp)
 4019368:	00c001c4 	movi	r3,7
 401936c:	19827616 	blt	r3,r6,4019d48 <___vfiprintf_internal_r+0xfbc>
 4019370:	4cf9c83a 	sub	fp,r9,r19
 4019374:	42000204 	addi	r8,r8,8
 4019378:	31000044 	addi	r4,r6,1
 401937c:	300b883a 	mov	r5,r6
 4019380:	07018516 	blt	zero,fp,4019998 <___vfiprintf_internal_r+0xc0c>
 4019384:	9885883a 	add	r2,r19,r2
 4019388:	45400015 	stw	r21,0(r8)
 401938c:	44c00115 	stw	r19,4(r8)
 4019390:	d8801c15 	stw	r2,112(sp)
 4019394:	d9001b15 	stw	r4,108(sp)
 4019398:	00c001c4 	movi	r3,7
 401939c:	1901dd0e 	bge	r3,r4,4019b14 <___vfiprintf_internal_r+0xd88>
 40193a0:	1002401e 	bne	r2,zero,4019ca4 <___vfiprintf_internal_r+0xf18>
 40193a4:	d8001b15 	stw	zero,108(sp)
 40193a8:	a2c0010c 	andi	r11,r20,4
 40193ac:	58000226 	beq	r11,zero,40193b8 <___vfiprintf_internal_r+0x62c>
 40193b0:	8ca7c83a 	sub	r19,r17,r18
 40193b4:	04c2f216 	blt	zero,r19,4019f80 <___vfiprintf_internal_r+0x11f4>
 40193b8:	8c80010e 	bge	r17,r18,40193c0 <___vfiprintf_internal_r+0x634>
 40193bc:	9023883a 	mov	r17,r18
 40193c0:	da802317 	ldw	r10,140(sp)
 40193c4:	5455883a 	add	r10,r10,r17
 40193c8:	da802315 	stw	r10,140(sp)
 40193cc:	d8001b15 	stw	zero,108(sp)
 40193d0:	d811883a 	mov	r8,sp
 40193d4:	003ea206 	br	4018e60 <__alt_mem_epcs_flash_controller_0+0xfb017e60>
 40193d8:	a5000814 	ori	r20,r20,32
 40193dc:	80c00007 	ldb	r3,0(r16)
 40193e0:	003ec906 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 40193e4:	80c00007 	ldb	r3,0(r16)
 40193e8:	1b030926 	beq	r3,r12,401a010 <___vfiprintf_internal_r+0x1284>
 40193ec:	a5000414 	ori	r20,r20,16
 40193f0:	003ec506 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 40193f4:	21003fcc 	andi	r4,r4,255
 40193f8:	20035e1e 	bne	r4,zero,401a174 <___vfiprintf_internal_r+0x13e8>
 40193fc:	a080080c 	andi	r2,r20,32
 4019400:	1002a526 	beq	r2,zero,4019e98 <___vfiprintf_internal_r+0x110c>
 4019404:	da802217 	ldw	r10,136(sp)
 4019408:	50800017 	ldw	r2,0(r10)
 401940c:	da802317 	ldw	r10,140(sp)
 4019410:	5007d7fa 	srai	r3,r10,31
 4019414:	da802217 	ldw	r10,136(sp)
 4019418:	10c00115 	stw	r3,4(r2)
 401941c:	52800104 	addi	r10,r10,4
 4019420:	da802215 	stw	r10,136(sp)
 4019424:	da802317 	ldw	r10,140(sp)
 4019428:	12800015 	stw	r10,0(r2)
 401942c:	003e8c06 	br	4018e60 <__alt_mem_epcs_flash_controller_0+0xfb017e60>
 4019430:	21003fcc 	andi	r4,r4,255
 4019434:	2003511e 	bne	r4,zero,401a17c <___vfiprintf_internal_r+0x13f0>
 4019438:	a080080c 	andi	r2,r20,32
 401943c:	1000a126 	beq	r2,zero,40196c4 <___vfiprintf_internal_r+0x938>
 4019440:	da802217 	ldw	r10,136(sp)
 4019444:	d8001d85 	stb	zero,118(sp)
 4019448:	50800204 	addi	r2,r10,8
 401944c:	54800017 	ldw	r18,0(r10)
 4019450:	54c00117 	ldw	r19,4(r10)
 4019454:	4802b416 	blt	r9,zero,4019f28 <___vfiprintf_internal_r+0x119c>
 4019458:	013fdfc4 	movi	r4,-129
 401945c:	94c6b03a 	or	r3,r18,r19
 4019460:	d8802215 	stw	r2,136(sp)
 4019464:	a128703a 	and	r20,r20,r4
 4019468:	1800a226 	beq	r3,zero,40196f4 <___vfiprintf_internal_r+0x968>
 401946c:	0039883a 	mov	fp,zero
 4019470:	dd401a04 	addi	r21,sp,104
 4019474:	9006d0fa 	srli	r3,r18,3
 4019478:	9808977a 	slli	r4,r19,29
 401947c:	9826d0fa 	srli	r19,r19,3
 4019480:	948001cc 	andi	r18,r18,7
 4019484:	90800c04 	addi	r2,r18,48
 4019488:	ad7fffc4 	addi	r21,r21,-1
 401948c:	20e4b03a 	or	r18,r4,r3
 4019490:	a8800005 	stb	r2,0(r21)
 4019494:	94c6b03a 	or	r3,r18,r19
 4019498:	183ff61e 	bne	r3,zero,4019474 <__alt_mem_epcs_flash_controller_0+0xfb018474>
 401949c:	a0c0004c 	andi	r3,r20,1
 40194a0:	18005926 	beq	r3,zero,4019608 <___vfiprintf_internal_r+0x87c>
 40194a4:	10803fcc 	andi	r2,r2,255
 40194a8:	1080201c 	xori	r2,r2,128
 40194ac:	10bfe004 	addi	r2,r2,-128
 40194b0:	00c00c04 	movi	r3,48
 40194b4:	10c05426 	beq	r2,r3,4019608 <___vfiprintf_internal_r+0x87c>
 40194b8:	da801e17 	ldw	r10,120(sp)
 40194bc:	a8bfffc4 	addi	r2,r21,-1
 40194c0:	a8ffffc5 	stb	r3,-1(r21)
 40194c4:	50a7c83a 	sub	r19,r10,r2
 40194c8:	102b883a 	mov	r21,r2
 40194cc:	003f2f06 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 40194d0:	21003fcc 	andi	r4,r4,255
 40194d4:	2003421e 	bne	r4,zero,401a1e0 <___vfiprintf_internal_r+0x1454>
 40194d8:	00810234 	movhi	r2,1032
 40194dc:	10952f04 	addi	r2,r2,21692
 40194e0:	d8802615 	stw	r2,152(sp)
 40194e4:	a080080c 	andi	r2,r20,32
 40194e8:	1000aa26 	beq	r2,zero,4019794 <___vfiprintf_internal_r+0xa08>
 40194ec:	da802217 	ldw	r10,136(sp)
 40194f0:	54800017 	ldw	r18,0(r10)
 40194f4:	54c00117 	ldw	r19,4(r10)
 40194f8:	52800204 	addi	r10,r10,8
 40194fc:	da802215 	stw	r10,136(sp)
 4019500:	a080004c 	andi	r2,r20,1
 4019504:	1001d226 	beq	r2,zero,4019c50 <___vfiprintf_internal_r+0xec4>
 4019508:	94c4b03a 	or	r2,r18,r19
 401950c:	1002351e 	bne	r2,zero,4019de4 <___vfiprintf_internal_r+0x1058>
 4019510:	d8001d85 	stb	zero,118(sp)
 4019514:	48022216 	blt	r9,zero,4019da0 <___vfiprintf_internal_r+0x1014>
 4019518:	00bfdfc4 	movi	r2,-129
 401951c:	a0a8703a 	and	r20,r20,r2
 4019520:	003f1506 	br	4019178 <__alt_mem_epcs_flash_controller_0+0xfb018178>
 4019524:	da802217 	ldw	r10,136(sp)
 4019528:	04800044 	movi	r18,1
 401952c:	d8001d85 	stb	zero,118(sp)
 4019530:	50800017 	ldw	r2,0(r10)
 4019534:	52800104 	addi	r10,r10,4
 4019538:	da802215 	stw	r10,136(sp)
 401953c:	d8801005 	stb	r2,64(sp)
 4019540:	9027883a 	mov	r19,r18
 4019544:	dd401004 	addi	r21,sp,64
 4019548:	0013883a 	mov	r9,zero
 401954c:	003f1706 	br	40191ac <__alt_mem_epcs_flash_controller_0+0xfb0181ac>
 4019550:	21003fcc 	andi	r4,r4,255
 4019554:	2003201e 	bne	r4,zero,401a1d8 <___vfiprintf_internal_r+0x144c>
 4019558:	a080080c 	andi	r2,r20,32
 401955c:	10004b26 	beq	r2,zero,401968c <___vfiprintf_internal_r+0x900>
 4019560:	da802217 	ldw	r10,136(sp)
 4019564:	50800117 	ldw	r2,4(r10)
 4019568:	54800017 	ldw	r18,0(r10)
 401956c:	52800204 	addi	r10,r10,8
 4019570:	da802215 	stw	r10,136(sp)
 4019574:	1027883a 	mov	r19,r2
 4019578:	10022c16 	blt	r2,zero,4019e2c <___vfiprintf_internal_r+0x10a0>
 401957c:	df001d83 	ldbu	fp,118(sp)
 4019580:	48007216 	blt	r9,zero,401974c <___vfiprintf_internal_r+0x9c0>
 4019584:	00ffdfc4 	movi	r3,-129
 4019588:	94c4b03a 	or	r2,r18,r19
 401958c:	a0e8703a 	and	r20,r20,r3
 4019590:	1000cc26 	beq	r2,zero,40198c4 <___vfiprintf_internal_r+0xb38>
 4019594:	98021026 	beq	r19,zero,4019dd8 <___vfiprintf_internal_r+0x104c>
 4019598:	dc402415 	stw	r17,144(sp)
 401959c:	dc002515 	stw	r16,148(sp)
 40195a0:	9823883a 	mov	r17,r19
 40195a4:	9021883a 	mov	r16,r18
 40195a8:	dd401a04 	addi	r21,sp,104
 40195ac:	4825883a 	mov	r18,r9
 40195b0:	4027883a 	mov	r19,r8
 40195b4:	8009883a 	mov	r4,r16
 40195b8:	880b883a 	mov	r5,r17
 40195bc:	01800284 	movi	r6,10
 40195c0:	000f883a 	mov	r7,zero
 40195c4:	401b16c0 	call	401b16c <__umoddi3>
 40195c8:	10800c04 	addi	r2,r2,48
 40195cc:	ad7fffc4 	addi	r21,r21,-1
 40195d0:	8009883a 	mov	r4,r16
 40195d4:	880b883a 	mov	r5,r17
 40195d8:	a8800005 	stb	r2,0(r21)
 40195dc:	01800284 	movi	r6,10
 40195e0:	000f883a 	mov	r7,zero
 40195e4:	401abf40 	call	401abf4 <__udivdi3>
 40195e8:	1021883a 	mov	r16,r2
 40195ec:	10c4b03a 	or	r2,r2,r3
 40195f0:	1823883a 	mov	r17,r3
 40195f4:	103fef1e 	bne	r2,zero,40195b4 <__alt_mem_epcs_flash_controller_0+0xfb0185b4>
 40195f8:	dc402417 	ldw	r17,144(sp)
 40195fc:	dc002517 	ldw	r16,148(sp)
 4019600:	9013883a 	mov	r9,r18
 4019604:	9811883a 	mov	r8,r19
 4019608:	da801e17 	ldw	r10,120(sp)
 401960c:	5567c83a 	sub	r19,r10,r21
 4019610:	003ede06 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 4019614:	38803fcc 	andi	r2,r7,255
 4019618:	1080201c 	xori	r2,r2,128
 401961c:	10bfe004 	addi	r2,r2,-128
 4019620:	1002371e 	bne	r2,zero,4019f00 <___vfiprintf_internal_r+0x1174>
 4019624:	01000044 	movi	r4,1
 4019628:	01c00804 	movi	r7,32
 401962c:	80c00007 	ldb	r3,0(r16)
 4019630:	003e3506 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019634:	a5000054 	ori	r20,r20,1
 4019638:	80c00007 	ldb	r3,0(r16)
 401963c:	003e3206 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019640:	a5002014 	ori	r20,r20,128
 4019644:	80c00007 	ldb	r3,0(r16)
 4019648:	003e2f06 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 401964c:	8015883a 	mov	r10,r16
 4019650:	0023883a 	mov	r17,zero
 4019654:	18bff404 	addi	r2,r3,-48
 4019658:	50c00007 	ldb	r3,0(r10)
 401965c:	8c4002a4 	muli	r17,r17,10
 4019660:	84000044 	addi	r16,r16,1
 4019664:	8015883a 	mov	r10,r16
 4019668:	1463883a 	add	r17,r2,r17
 401966c:	18bff404 	addi	r2,r3,-48
 4019670:	30bff92e 	bgeu	r6,r2,4019658 <__alt_mem_epcs_flash_controller_0+0xfb018658>
 4019674:	003e2506 	br	4018f0c <__alt_mem_epcs_flash_controller_0+0xfb017f0c>
 4019678:	21003fcc 	andi	r4,r4,255
 401967c:	2002d41e 	bne	r4,zero,401a1d0 <___vfiprintf_internal_r+0x1444>
 4019680:	a5000414 	ori	r20,r20,16
 4019684:	a080080c 	andi	r2,r20,32
 4019688:	103fb51e 	bne	r2,zero,4019560 <__alt_mem_epcs_flash_controller_0+0xfb018560>
 401968c:	a080040c 	andi	r2,r20,16
 4019690:	1001f826 	beq	r2,zero,4019e74 <___vfiprintf_internal_r+0x10e8>
 4019694:	da802217 	ldw	r10,136(sp)
 4019698:	54800017 	ldw	r18,0(r10)
 401969c:	52800104 	addi	r10,r10,4
 40196a0:	da802215 	stw	r10,136(sp)
 40196a4:	9027d7fa 	srai	r19,r18,31
 40196a8:	9805883a 	mov	r2,r19
 40196ac:	003fb206 	br	4019578 <__alt_mem_epcs_flash_controller_0+0xfb018578>
 40196b0:	21003fcc 	andi	r4,r4,255
 40196b4:	2002c41e 	bne	r4,zero,401a1c8 <___vfiprintf_internal_r+0x143c>
 40196b8:	a5000414 	ori	r20,r20,16
 40196bc:	a080080c 	andi	r2,r20,32
 40196c0:	103f5f1e 	bne	r2,zero,4019440 <__alt_mem_epcs_flash_controller_0+0xfb018440>
 40196c4:	a080040c 	andi	r2,r20,16
 40196c8:	10020f26 	beq	r2,zero,4019f08 <___vfiprintf_internal_r+0x117c>
 40196cc:	da802217 	ldw	r10,136(sp)
 40196d0:	d8001d85 	stb	zero,118(sp)
 40196d4:	0027883a 	mov	r19,zero
 40196d8:	50800104 	addi	r2,r10,4
 40196dc:	54800017 	ldw	r18,0(r10)
 40196e0:	48021116 	blt	r9,zero,4019f28 <___vfiprintf_internal_r+0x119c>
 40196e4:	00ffdfc4 	movi	r3,-129
 40196e8:	d8802215 	stw	r2,136(sp)
 40196ec:	a0e8703a 	and	r20,r20,r3
 40196f0:	903f5e1e 	bne	r18,zero,401946c <__alt_mem_epcs_flash_controller_0+0xfb01846c>
 40196f4:	0039883a 	mov	fp,zero
 40196f8:	4802a626 	beq	r9,zero,401a194 <___vfiprintf_internal_r+0x1408>
 40196fc:	0025883a 	mov	r18,zero
 4019700:	0027883a 	mov	r19,zero
 4019704:	003f5a06 	br	4019470 <__alt_mem_epcs_flash_controller_0+0xfb018470>
 4019708:	21003fcc 	andi	r4,r4,255
 401970c:	20029f1e 	bne	r4,zero,401a18c <___vfiprintf_internal_r+0x1400>
 4019710:	a5000414 	ori	r20,r20,16
 4019714:	a080080c 	andi	r2,r20,32
 4019718:	10005e1e 	bne	r2,zero,4019894 <___vfiprintf_internal_r+0xb08>
 401971c:	a080040c 	andi	r2,r20,16
 4019720:	1001a21e 	bne	r2,zero,4019dac <___vfiprintf_internal_r+0x1020>
 4019724:	a080100c 	andi	r2,r20,64
 4019728:	d8001d85 	stb	zero,118(sp)
 401972c:	da802217 	ldw	r10,136(sp)
 4019730:	1002231e 	bne	r2,zero,4019fc0 <___vfiprintf_internal_r+0x1234>
 4019734:	50800104 	addi	r2,r10,4
 4019738:	54800017 	ldw	r18,0(r10)
 401973c:	0027883a 	mov	r19,zero
 4019740:	4801a00e 	bge	r9,zero,4019dc4 <___vfiprintf_internal_r+0x1038>
 4019744:	d8802215 	stw	r2,136(sp)
 4019748:	0039883a 	mov	fp,zero
 401974c:	94c4b03a 	or	r2,r18,r19
 4019750:	103f901e 	bne	r2,zero,4019594 <__alt_mem_epcs_flash_controller_0+0xfb018594>
 4019754:	00800044 	movi	r2,1
 4019758:	10803fcc 	andi	r2,r2,255
 401975c:	00c00044 	movi	r3,1
 4019760:	10c05926 	beq	r2,r3,40198c8 <___vfiprintf_internal_r+0xb3c>
 4019764:	00c00084 	movi	r3,2
 4019768:	10ffe41e 	bne	r2,r3,40196fc <__alt_mem_epcs_flash_controller_0+0xfb0186fc>
 401976c:	0025883a 	mov	r18,zero
 4019770:	0027883a 	mov	r19,zero
 4019774:	00013d06 	br	4019c6c <___vfiprintf_internal_r+0xee0>
 4019778:	21003fcc 	andi	r4,r4,255
 401977c:	2002811e 	bne	r4,zero,401a184 <___vfiprintf_internal_r+0x13f8>
 4019780:	00810234 	movhi	r2,1032
 4019784:	10952a04 	addi	r2,r2,21672
 4019788:	d8802615 	stw	r2,152(sp)
 401978c:	a080080c 	andi	r2,r20,32
 4019790:	103f561e 	bne	r2,zero,40194ec <__alt_mem_epcs_flash_controller_0+0xfb0184ec>
 4019794:	a080040c 	andi	r2,r20,16
 4019798:	1001d126 	beq	r2,zero,4019ee0 <___vfiprintf_internal_r+0x1154>
 401979c:	da802217 	ldw	r10,136(sp)
 40197a0:	0027883a 	mov	r19,zero
 40197a4:	54800017 	ldw	r18,0(r10)
 40197a8:	52800104 	addi	r10,r10,4
 40197ac:	da802215 	stw	r10,136(sp)
 40197b0:	003f5306 	br	4019500 <__alt_mem_epcs_flash_controller_0+0xfb018500>
 40197b4:	da802217 	ldw	r10,136(sp)
 40197b8:	d8001d85 	stb	zero,118(sp)
 40197bc:	55400017 	ldw	r21,0(r10)
 40197c0:	50c00104 	addi	r3,r10,4
 40197c4:	a8024226 	beq	r21,zero,401a0d0 <___vfiprintf_internal_r+0x1344>
 40197c8:	48021816 	blt	r9,zero,401a02c <___vfiprintf_internal_r+0x12a0>
 40197cc:	480d883a 	mov	r6,r9
 40197d0:	000b883a 	mov	r5,zero
 40197d4:	a809883a 	mov	r4,r21
 40197d8:	d8c02a15 	stw	r3,168(sp)
 40197dc:	da002b15 	stw	r8,172(sp)
 40197e0:	da402c15 	stw	r9,176(sp)
 40197e4:	4015eb40 	call	4015eb4 <memchr>
 40197e8:	d8c02a17 	ldw	r3,168(sp)
 40197ec:	da002b17 	ldw	r8,172(sp)
 40197f0:	da402c17 	ldw	r9,176(sp)
 40197f4:	10024826 	beq	r2,zero,401a118 <___vfiprintf_internal_r+0x138c>
 40197f8:	1567c83a 	sub	r19,r2,r21
 40197fc:	df001d83 	ldbu	fp,118(sp)
 4019800:	d8c02215 	stw	r3,136(sp)
 4019804:	0013883a 	mov	r9,zero
 4019808:	003e6006 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 401980c:	21003fcc 	andi	r4,r4,255
 4019810:	203fc026 	beq	r4,zero,4019714 <__alt_mem_epcs_flash_controller_0+0xfb018714>
 4019814:	d9c01d85 	stb	r7,118(sp)
 4019818:	003fbe06 	br	4019714 <__alt_mem_epcs_flash_controller_0+0xfb018714>
 401981c:	da802217 	ldw	r10,136(sp)
 4019820:	54400017 	ldw	r17,0(r10)
 4019824:	50800104 	addi	r2,r10,4
 4019828:	883e3b16 	blt	r17,zero,4019118 <__alt_mem_epcs_flash_controller_0+0xfb018118>
 401982c:	d8802215 	stw	r2,136(sp)
 4019830:	80c00007 	ldb	r3,0(r16)
 4019834:	003db406 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019838:	01000044 	movi	r4,1
 401983c:	01c00ac4 	movi	r7,43
 4019840:	80c00007 	ldb	r3,0(r16)
 4019844:	003db006 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019848:	80c00007 	ldb	r3,0(r16)
 401984c:	82800044 	addi	r10,r16,1
 4019850:	1b423c26 	beq	r3,r13,401a144 <___vfiprintf_internal_r+0x13b8>
 4019854:	18bff404 	addi	r2,r3,-48
 4019858:	0013883a 	mov	r9,zero
 401985c:	30822b36 	bltu	r6,r2,401a10c <___vfiprintf_internal_r+0x1380>
 4019860:	50c00007 	ldb	r3,0(r10)
 4019864:	4a4002a4 	muli	r9,r9,10
 4019868:	54000044 	addi	r16,r10,1
 401986c:	8015883a 	mov	r10,r16
 4019870:	4893883a 	add	r9,r9,r2
 4019874:	18bff404 	addi	r2,r3,-48
 4019878:	30bff92e 	bgeu	r6,r2,4019860 <__alt_mem_epcs_flash_controller_0+0xfb018860>
 401987c:	483da30e 	bge	r9,zero,4018f0c <__alt_mem_epcs_flash_controller_0+0xfb017f0c>
 4019880:	027fffc4 	movi	r9,-1
 4019884:	003da106 	br	4018f0c <__alt_mem_epcs_flash_controller_0+0xfb017f0c>
 4019888:	a5001014 	ori	r20,r20,64
 401988c:	80c00007 	ldb	r3,0(r16)
 4019890:	003d9d06 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019894:	da802217 	ldw	r10,136(sp)
 4019898:	d8001d85 	stb	zero,118(sp)
 401989c:	50c00204 	addi	r3,r10,8
 40198a0:	54800017 	ldw	r18,0(r10)
 40198a4:	54c00117 	ldw	r19,4(r10)
 40198a8:	4801ca16 	blt	r9,zero,4019fd4 <___vfiprintf_internal_r+0x1248>
 40198ac:	013fdfc4 	movi	r4,-129
 40198b0:	94c4b03a 	or	r2,r18,r19
 40198b4:	d8c02215 	stw	r3,136(sp)
 40198b8:	a128703a 	and	r20,r20,r4
 40198bc:	0039883a 	mov	fp,zero
 40198c0:	103f341e 	bne	r2,zero,4019594 <__alt_mem_epcs_flash_controller_0+0xfb018594>
 40198c4:	483e2e26 	beq	r9,zero,4019180 <__alt_mem_epcs_flash_controller_0+0xfb018180>
 40198c8:	0025883a 	mov	r18,zero
 40198cc:	94800c04 	addi	r18,r18,48
 40198d0:	dc8019c5 	stb	r18,103(sp)
 40198d4:	dcc02717 	ldw	r19,156(sp)
 40198d8:	dd4019c4 	addi	r21,sp,103
 40198dc:	003e2b06 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 40198e0:	21003fcc 	andi	r4,r4,255
 40198e4:	2002361e 	bne	r4,zero,401a1c0 <___vfiprintf_internal_r+0x1434>
 40198e8:	1801c126 	beq	r3,zero,4019ff0 <___vfiprintf_internal_r+0x1264>
 40198ec:	04800044 	movi	r18,1
 40198f0:	d8c01005 	stb	r3,64(sp)
 40198f4:	d8001d85 	stb	zero,118(sp)
 40198f8:	9027883a 	mov	r19,r18
 40198fc:	dd401004 	addi	r21,sp,64
 4019900:	003f1106 	br	4019548 <__alt_mem_epcs_flash_controller_0+0xfb018548>
 4019904:	d9402117 	ldw	r5,132(sp)
 4019908:	d9002017 	ldw	r4,128(sp)
 401990c:	d9801a04 	addi	r6,sp,104
 4019910:	d9c02b15 	stw	r7,172(sp)
 4019914:	dbc02a15 	stw	r15,168(sp)
 4019918:	4018c780 	call	4018c78 <__sprint_r.part.0>
 401991c:	d9c02b17 	ldw	r7,172(sp)
 4019920:	dbc02a17 	ldw	r15,168(sp)
 4019924:	10006d1e 	bne	r2,zero,4019adc <___vfiprintf_internal_r+0xd50>
 4019928:	d9801b17 	ldw	r6,108(sp)
 401992c:	d8801c17 	ldw	r2,112(sp)
 4019930:	d811883a 	mov	r8,sp
 4019934:	31400044 	addi	r5,r6,1
 4019938:	003e3306 	br	4019208 <__alt_mem_epcs_flash_controller_0+0xfb018208>
 401993c:	d9401b17 	ldw	r5,108(sp)
 4019940:	d8801c17 	ldw	r2,112(sp)
 4019944:	29000044 	addi	r4,r5,1
 4019948:	d8c01d87 	ldb	r3,118(sp)
 401994c:	183e4d26 	beq	r3,zero,4019284 <__alt_mem_epcs_flash_controller_0+0xfb018284>
 4019950:	00c00044 	movi	r3,1
 4019954:	d9401d84 	addi	r5,sp,118
 4019958:	10c5883a 	add	r2,r2,r3
 401995c:	41400015 	stw	r5,0(r8)
 4019960:	40c00115 	stw	r3,4(r8)
 4019964:	d8801c15 	stw	r2,112(sp)
 4019968:	d9001b15 	stw	r4,108(sp)
 401996c:	014001c4 	movi	r5,7
 4019970:	2900a90e 	bge	r5,r4,4019c18 <___vfiprintf_internal_r+0xe8c>
 4019974:	1000da1e 	bne	r2,zero,4019ce0 <___vfiprintf_internal_r+0xf54>
 4019978:	7000ab1e 	bne	r14,zero,4019c28 <___vfiprintf_internal_r+0xe9c>
 401997c:	000b883a 	mov	r5,zero
 4019980:	1809883a 	mov	r4,r3
 4019984:	d811883a 	mov	r8,sp
 4019988:	00c02004 	movi	r3,128
 401998c:	e0fe4d26 	beq	fp,r3,40192c4 <__alt_mem_epcs_flash_controller_0+0xfb0182c4>
 4019990:	4cf9c83a 	sub	fp,r9,r19
 4019994:	073e7b0e 	bge	zero,fp,4019384 <__alt_mem_epcs_flash_controller_0+0xfb018384>
 4019998:	01c00404 	movi	r7,16
 401999c:	3f01900e 	bge	r7,fp,4019fe0 <___vfiprintf_internal_r+0x1254>
 40199a0:	00c10234 	movhi	r3,1032
 40199a4:	18d59f04 	addi	r3,r3,22140
 40199a8:	d8c02415 	stw	r3,144(sp)
 40199ac:	034001c4 	movi	r13,7
 40199b0:	00000506 	br	40199c8 <___vfiprintf_internal_r+0xc3c>
 40199b4:	29000084 	addi	r4,r5,2
 40199b8:	42000204 	addi	r8,r8,8
 40199bc:	180b883a 	mov	r5,r3
 40199c0:	e73ffc04 	addi	fp,fp,-16
 40199c4:	3f000d0e 	bge	r7,fp,40199fc <___vfiprintf_internal_r+0xc70>
 40199c8:	10800404 	addi	r2,r2,16
 40199cc:	28c00044 	addi	r3,r5,1
 40199d0:	45c00015 	stw	r23,0(r8)
 40199d4:	41c00115 	stw	r7,4(r8)
 40199d8:	d8801c15 	stw	r2,112(sp)
 40199dc:	d8c01b15 	stw	r3,108(sp)
 40199e0:	68fff40e 	bge	r13,r3,40199b4 <__alt_mem_epcs_flash_controller_0+0xfb0189b4>
 40199e4:	1000101e 	bne	r2,zero,4019a28 <___vfiprintf_internal_r+0xc9c>
 40199e8:	e73ffc04 	addi	fp,fp,-16
 40199ec:	01000044 	movi	r4,1
 40199f0:	000b883a 	mov	r5,zero
 40199f4:	d811883a 	mov	r8,sp
 40199f8:	3f3ff316 	blt	r7,fp,40199c8 <__alt_mem_epcs_flash_controller_0+0xfb0189c8>
 40199fc:	da802417 	ldw	r10,144(sp)
 4019a00:	1705883a 	add	r2,r2,fp
 4019a04:	47000115 	stw	fp,4(r8)
 4019a08:	42800015 	stw	r10,0(r8)
 4019a0c:	d8801c15 	stw	r2,112(sp)
 4019a10:	d9001b15 	stw	r4,108(sp)
 4019a14:	00c001c4 	movi	r3,7
 4019a18:	19003616 	blt	r3,r4,4019af4 <___vfiprintf_internal_r+0xd68>
 4019a1c:	42000204 	addi	r8,r8,8
 4019a20:	21000044 	addi	r4,r4,1
 4019a24:	003e5706 	br	4019384 <__alt_mem_epcs_flash_controller_0+0xfb018384>
 4019a28:	d9402117 	ldw	r5,132(sp)
 4019a2c:	d9002017 	ldw	r4,128(sp)
 4019a30:	d9801a04 	addi	r6,sp,104
 4019a34:	d9c02b15 	stw	r7,172(sp)
 4019a38:	db402a15 	stw	r13,168(sp)
 4019a3c:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019a40:	d9c02b17 	ldw	r7,172(sp)
 4019a44:	db402a17 	ldw	r13,168(sp)
 4019a48:	1000241e 	bne	r2,zero,4019adc <___vfiprintf_internal_r+0xd50>
 4019a4c:	d9401b17 	ldw	r5,108(sp)
 4019a50:	d8801c17 	ldw	r2,112(sp)
 4019a54:	d811883a 	mov	r8,sp
 4019a58:	29000044 	addi	r4,r5,1
 4019a5c:	003fd806 	br	40199c0 <__alt_mem_epcs_flash_controller_0+0xfb0189c0>
 4019a60:	d9401b17 	ldw	r5,108(sp)
 4019a64:	00c10234 	movhi	r3,1032
 4019a68:	18d5a304 	addi	r3,r3,22156
 4019a6c:	d8c02415 	stw	r3,144(sp)
 4019a70:	29400044 	addi	r5,r5,1
 4019a74:	d8c02417 	ldw	r3,144(sp)
 4019a78:	14c5883a 	add	r2,r2,r19
 4019a7c:	44c00115 	stw	r19,4(r8)
 4019a80:	40c00015 	stw	r3,0(r8)
 4019a84:	d8801c15 	stw	r2,112(sp)
 4019a88:	d9401b15 	stw	r5,108(sp)
 4019a8c:	00c001c4 	movi	r3,7
 4019a90:	1940070e 	bge	r3,r5,4019ab0 <___vfiprintf_internal_r+0xd24>
 4019a94:	103e4826 	beq	r2,zero,40193b8 <__alt_mem_epcs_flash_controller_0+0xfb0183b8>
 4019a98:	d9402117 	ldw	r5,132(sp)
 4019a9c:	d9002017 	ldw	r4,128(sp)
 4019aa0:	d9801a04 	addi	r6,sp,104
 4019aa4:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019aa8:	10000c1e 	bne	r2,zero,4019adc <___vfiprintf_internal_r+0xd50>
 4019aac:	d8801c17 	ldw	r2,112(sp)
 4019ab0:	8c80010e 	bge	r17,r18,4019ab8 <___vfiprintf_internal_r+0xd2c>
 4019ab4:	9023883a 	mov	r17,r18
 4019ab8:	da802317 	ldw	r10,140(sp)
 4019abc:	5455883a 	add	r10,r10,r17
 4019ac0:	da802315 	stw	r10,140(sp)
 4019ac4:	103e4126 	beq	r2,zero,40193cc <__alt_mem_epcs_flash_controller_0+0xfb0183cc>
 4019ac8:	d9402117 	ldw	r5,132(sp)
 4019acc:	d9002017 	ldw	r4,128(sp)
 4019ad0:	d9801a04 	addi	r6,sp,104
 4019ad4:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019ad8:	103e3c26 	beq	r2,zero,40193cc <__alt_mem_epcs_flash_controller_0+0xfb0183cc>
 4019adc:	dd002117 	ldw	r20,132(sp)
 4019ae0:	a080030b 	ldhu	r2,12(r20)
 4019ae4:	1080100c 	andi	r2,r2,64
 4019ae8:	1001231e 	bne	r2,zero,4019f78 <___vfiprintf_internal_r+0x11ec>
 4019aec:	d8802317 	ldw	r2,140(sp)
 4019af0:	003d7b06 	br	40190e0 <__alt_mem_epcs_flash_controller_0+0xfb0180e0>
 4019af4:	1000991e 	bne	r2,zero,4019d5c <___vfiprintf_internal_r+0xfd0>
 4019af8:	00c00044 	movi	r3,1
 4019afc:	9805883a 	mov	r2,r19
 4019b00:	dd400015 	stw	r21,0(sp)
 4019b04:	dcc00115 	stw	r19,4(sp)
 4019b08:	dcc01c15 	stw	r19,112(sp)
 4019b0c:	d8c01b15 	stw	r3,108(sp)
 4019b10:	d811883a 	mov	r8,sp
 4019b14:	42000204 	addi	r8,r8,8
 4019b18:	a2c0010c 	andi	r11,r20,4
 4019b1c:	583fe426 	beq	r11,zero,4019ab0 <__alt_mem_epcs_flash_controller_0+0xfb018ab0>
 4019b20:	8ca7c83a 	sub	r19,r17,r18
 4019b24:	04ffe20e 	bge	zero,r19,4019ab0 <__alt_mem_epcs_flash_controller_0+0xfb018ab0>
 4019b28:	01c00404 	movi	r7,16
 4019b2c:	3cffcc0e 	bge	r7,r19,4019a60 <__alt_mem_epcs_flash_controller_0+0xfb018a60>
 4019b30:	02810234 	movhi	r10,1032
 4019b34:	5295a304 	addi	r10,r10,22156
 4019b38:	d9001b17 	ldw	r4,108(sp)
 4019b3c:	da802415 	stw	r10,144(sp)
 4019b40:	382b883a 	mov	r21,r7
 4019b44:	050001c4 	movi	r20,7
 4019b48:	df002017 	ldw	fp,128(sp)
 4019b4c:	00000506 	br	4019b64 <___vfiprintf_internal_r+0xdd8>
 4019b50:	21400084 	addi	r5,r4,2
 4019b54:	42000204 	addi	r8,r8,8
 4019b58:	1809883a 	mov	r4,r3
 4019b5c:	9cfffc04 	addi	r19,r19,-16
 4019b60:	acffc40e 	bge	r21,r19,4019a74 <__alt_mem_epcs_flash_controller_0+0xfb018a74>
 4019b64:	10800404 	addi	r2,r2,16
 4019b68:	20c00044 	addi	r3,r4,1
 4019b6c:	45800015 	stw	r22,0(r8)
 4019b70:	45400115 	stw	r21,4(r8)
 4019b74:	d8801c15 	stw	r2,112(sp)
 4019b78:	d8c01b15 	stw	r3,108(sp)
 4019b7c:	a0fff40e 	bge	r20,r3,4019b50 <__alt_mem_epcs_flash_controller_0+0xfb018b50>
 4019b80:	1000041e 	bne	r2,zero,4019b94 <___vfiprintf_internal_r+0xe08>
 4019b84:	01400044 	movi	r5,1
 4019b88:	0009883a 	mov	r4,zero
 4019b8c:	d811883a 	mov	r8,sp
 4019b90:	003ff206 	br	4019b5c <__alt_mem_epcs_flash_controller_0+0xfb018b5c>
 4019b94:	d9402117 	ldw	r5,132(sp)
 4019b98:	d9801a04 	addi	r6,sp,104
 4019b9c:	e009883a 	mov	r4,fp
 4019ba0:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019ba4:	103fcd1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019ba8:	d9001b17 	ldw	r4,108(sp)
 4019bac:	d8801c17 	ldw	r2,112(sp)
 4019bb0:	d811883a 	mov	r8,sp
 4019bb4:	21400044 	addi	r5,r4,1
 4019bb8:	003fe806 	br	4019b5c <__alt_mem_epcs_flash_controller_0+0xfb018b5c>
 4019bbc:	d9402117 	ldw	r5,132(sp)
 4019bc0:	d9002017 	ldw	r4,128(sp)
 4019bc4:	d9801a04 	addi	r6,sp,104
 4019bc8:	d9c02b15 	stw	r7,172(sp)
 4019bcc:	db402a15 	stw	r13,168(sp)
 4019bd0:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019bd4:	d9c02b17 	ldw	r7,172(sp)
 4019bd8:	db402a17 	ldw	r13,168(sp)
 4019bdc:	103fbf1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019be0:	d9401b17 	ldw	r5,108(sp)
 4019be4:	d8801c17 	ldw	r2,112(sp)
 4019be8:	d811883a 	mov	r8,sp
 4019bec:	29800044 	addi	r6,r5,1
 4019bf0:	003dc406 	br	4019304 <__alt_mem_epcs_flash_controller_0+0xfb018304>
 4019bf4:	1000d21e 	bne	r2,zero,4019f40 <___vfiprintf_internal_r+0x11b4>
 4019bf8:	d8c01d87 	ldb	r3,118(sp)
 4019bfc:	18009526 	beq	r3,zero,4019e54 <___vfiprintf_internal_r+0x10c8>
 4019c00:	00800044 	movi	r2,1
 4019c04:	d8c01d84 	addi	r3,sp,118
 4019c08:	1009883a 	mov	r4,r2
 4019c0c:	d8c00015 	stw	r3,0(sp)
 4019c10:	d8800115 	stw	r2,4(sp)
 4019c14:	d811883a 	mov	r8,sp
 4019c18:	200b883a 	mov	r5,r4
 4019c1c:	42000204 	addi	r8,r8,8
 4019c20:	21000044 	addi	r4,r4,1
 4019c24:	003d9706 	br	4019284 <__alt_mem_epcs_flash_controller_0+0xfb018284>
 4019c28:	d9001d04 	addi	r4,sp,116
 4019c2c:	00800084 	movi	r2,2
 4019c30:	d9000015 	stw	r4,0(sp)
 4019c34:	d8800115 	stw	r2,4(sp)
 4019c38:	1809883a 	mov	r4,r3
 4019c3c:	d811883a 	mov	r8,sp
 4019c40:	200b883a 	mov	r5,r4
 4019c44:	42000204 	addi	r8,r8,8
 4019c48:	21000044 	addi	r4,r4,1
 4019c4c:	003f4e06 	br	4019988 <__alt_mem_epcs_flash_controller_0+0xfb018988>
 4019c50:	d8001d85 	stb	zero,118(sp)
 4019c54:	48005016 	blt	r9,zero,4019d98 <___vfiprintf_internal_r+0x100c>
 4019c58:	00ffdfc4 	movi	r3,-129
 4019c5c:	94c4b03a 	or	r2,r18,r19
 4019c60:	a0e8703a 	and	r20,r20,r3
 4019c64:	103d4426 	beq	r2,zero,4019178 <__alt_mem_epcs_flash_controller_0+0xfb018178>
 4019c68:	0039883a 	mov	fp,zero
 4019c6c:	d9002617 	ldw	r4,152(sp)
 4019c70:	dd401a04 	addi	r21,sp,104
 4019c74:	908003cc 	andi	r2,r18,15
 4019c78:	9806973a 	slli	r3,r19,28
 4019c7c:	2085883a 	add	r2,r4,r2
 4019c80:	9024d13a 	srli	r18,r18,4
 4019c84:	10800003 	ldbu	r2,0(r2)
 4019c88:	9826d13a 	srli	r19,r19,4
 4019c8c:	ad7fffc4 	addi	r21,r21,-1
 4019c90:	1ca4b03a 	or	r18,r3,r18
 4019c94:	a8800005 	stb	r2,0(r21)
 4019c98:	94c4b03a 	or	r2,r18,r19
 4019c9c:	103ff51e 	bne	r2,zero,4019c74 <__alt_mem_epcs_flash_controller_0+0xfb018c74>
 4019ca0:	003e5906 	br	4019608 <__alt_mem_epcs_flash_controller_0+0xfb018608>
 4019ca4:	d9402117 	ldw	r5,132(sp)
 4019ca8:	d9002017 	ldw	r4,128(sp)
 4019cac:	d9801a04 	addi	r6,sp,104
 4019cb0:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019cb4:	103f891e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019cb8:	d8801c17 	ldw	r2,112(sp)
 4019cbc:	d811883a 	mov	r8,sp
 4019cc0:	003f9506 	br	4019b18 <__alt_mem_epcs_flash_controller_0+0xfb018b18>
 4019cc4:	d9402117 	ldw	r5,132(sp)
 4019cc8:	d9002017 	ldw	r4,128(sp)
 4019ccc:	d9801a04 	addi	r6,sp,104
 4019cd0:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019cd4:	103f811e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019cd8:	d811883a 	mov	r8,sp
 4019cdc:	003ced06 	br	4019094 <__alt_mem_epcs_flash_controller_0+0xfb018094>
 4019ce0:	d9402117 	ldw	r5,132(sp)
 4019ce4:	d9002017 	ldw	r4,128(sp)
 4019ce8:	d9801a04 	addi	r6,sp,104
 4019cec:	da402c15 	stw	r9,176(sp)
 4019cf0:	db802a15 	stw	r14,168(sp)
 4019cf4:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019cf8:	da402c17 	ldw	r9,176(sp)
 4019cfc:	db802a17 	ldw	r14,168(sp)
 4019d00:	103f761e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019d04:	d9401b17 	ldw	r5,108(sp)
 4019d08:	d8801c17 	ldw	r2,112(sp)
 4019d0c:	d811883a 	mov	r8,sp
 4019d10:	29000044 	addi	r4,r5,1
 4019d14:	003d5b06 	br	4019284 <__alt_mem_epcs_flash_controller_0+0xfb018284>
 4019d18:	d9402117 	ldw	r5,132(sp)
 4019d1c:	d9002017 	ldw	r4,128(sp)
 4019d20:	d9801a04 	addi	r6,sp,104
 4019d24:	da402c15 	stw	r9,176(sp)
 4019d28:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019d2c:	da402c17 	ldw	r9,176(sp)
 4019d30:	103f6a1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019d34:	d9401b17 	ldw	r5,108(sp)
 4019d38:	d8801c17 	ldw	r2,112(sp)
 4019d3c:	d811883a 	mov	r8,sp
 4019d40:	29000044 	addi	r4,r5,1
 4019d44:	003f1006 	br	4019988 <__alt_mem_epcs_flash_controller_0+0xfb018988>
 4019d48:	1000c31e 	bne	r2,zero,401a058 <___vfiprintf_internal_r+0x12cc>
 4019d4c:	01000044 	movi	r4,1
 4019d50:	000b883a 	mov	r5,zero
 4019d54:	d811883a 	mov	r8,sp
 4019d58:	003f0d06 	br	4019990 <__alt_mem_epcs_flash_controller_0+0xfb018990>
 4019d5c:	d9402117 	ldw	r5,132(sp)
 4019d60:	d9002017 	ldw	r4,128(sp)
 4019d64:	d9801a04 	addi	r6,sp,104
 4019d68:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019d6c:	103f5b1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019d70:	d9001b17 	ldw	r4,108(sp)
 4019d74:	d8801c17 	ldw	r2,112(sp)
 4019d78:	d811883a 	mov	r8,sp
 4019d7c:	21000044 	addi	r4,r4,1
 4019d80:	003d8006 	br	4019384 <__alt_mem_epcs_flash_controller_0+0xfb018384>
 4019d84:	01010234 	movhi	r4,1032
 4019d88:	21152f04 	addi	r4,r4,21692
 4019d8c:	d9002615 	stw	r4,152(sp)
 4019d90:	d8c02215 	stw	r3,136(sp)
 4019d94:	1029883a 	mov	r20,r2
 4019d98:	94c4b03a 	or	r2,r18,r19
 4019d9c:	103fb21e 	bne	r2,zero,4019c68 <__alt_mem_epcs_flash_controller_0+0xfb018c68>
 4019da0:	0039883a 	mov	fp,zero
 4019da4:	00800084 	movi	r2,2
 4019da8:	003e6b06 	br	4019758 <__alt_mem_epcs_flash_controller_0+0xfb018758>
 4019dac:	da802217 	ldw	r10,136(sp)
 4019db0:	d8001d85 	stb	zero,118(sp)
 4019db4:	0027883a 	mov	r19,zero
 4019db8:	50800104 	addi	r2,r10,4
 4019dbc:	54800017 	ldw	r18,0(r10)
 4019dc0:	483e6016 	blt	r9,zero,4019744 <__alt_mem_epcs_flash_controller_0+0xfb018744>
 4019dc4:	00ffdfc4 	movi	r3,-129
 4019dc8:	d8802215 	stw	r2,136(sp)
 4019dcc:	a0e8703a 	and	r20,r20,r3
 4019dd0:	0039883a 	mov	fp,zero
 4019dd4:	903ebb26 	beq	r18,zero,40198c4 <__alt_mem_epcs_flash_controller_0+0xfb0188c4>
 4019dd8:	00800244 	movi	r2,9
 4019ddc:	14bdee36 	bltu	r2,r18,4019598 <__alt_mem_epcs_flash_controller_0+0xfb018598>
 4019de0:	003eba06 	br	40198cc <__alt_mem_epcs_flash_controller_0+0xfb0188cc>
 4019de4:	00800c04 	movi	r2,48
 4019de8:	d8c01d45 	stb	r3,117(sp)
 4019dec:	d8801d05 	stb	r2,116(sp)
 4019df0:	d8001d85 	stb	zero,118(sp)
 4019df4:	a0c00094 	ori	r3,r20,2
 4019df8:	4800a916 	blt	r9,zero,401a0a0 <___vfiprintf_internal_r+0x1314>
 4019dfc:	00bfdfc4 	movi	r2,-129
 4019e00:	a096703a 	and	r11,r20,r2
 4019e04:	5d000094 	ori	r20,r11,2
 4019e08:	0039883a 	mov	fp,zero
 4019e0c:	003f9706 	br	4019c6c <__alt_mem_epcs_flash_controller_0+0xfb018c6c>
 4019e10:	8025883a 	mov	r18,r16
 4019e14:	003c2e06 	br	4018ed0 <__alt_mem_epcs_flash_controller_0+0xfb017ed0>
 4019e18:	00810234 	movhi	r2,1032
 4019e1c:	10952f04 	addi	r2,r2,21692
 4019e20:	0039883a 	mov	fp,zero
 4019e24:	d8802615 	stw	r2,152(sp)
 4019e28:	003f9006 	br	4019c6c <__alt_mem_epcs_flash_controller_0+0xfb018c6c>
 4019e2c:	04a5c83a 	sub	r18,zero,r18
 4019e30:	07000b44 	movi	fp,45
 4019e34:	9004c03a 	cmpne	r2,r18,zero
 4019e38:	04e7c83a 	sub	r19,zero,r19
 4019e3c:	df001d85 	stb	fp,118(sp)
 4019e40:	98a7c83a 	sub	r19,r19,r2
 4019e44:	48009f16 	blt	r9,zero,401a0c4 <___vfiprintf_internal_r+0x1338>
 4019e48:	00bfdfc4 	movi	r2,-129
 4019e4c:	a0a8703a 	and	r20,r20,r2
 4019e50:	003dd006 	br	4019594 <__alt_mem_epcs_flash_controller_0+0xfb018594>
 4019e54:	70004c26 	beq	r14,zero,4019f88 <___vfiprintf_internal_r+0x11fc>
 4019e58:	00800084 	movi	r2,2
 4019e5c:	d8c01d04 	addi	r3,sp,116
 4019e60:	d8c00015 	stw	r3,0(sp)
 4019e64:	d8800115 	stw	r2,4(sp)
 4019e68:	01000044 	movi	r4,1
 4019e6c:	d811883a 	mov	r8,sp
 4019e70:	003f7306 	br	4019c40 <__alt_mem_epcs_flash_controller_0+0xfb018c40>
 4019e74:	a080100c 	andi	r2,r20,64
 4019e78:	da802217 	ldw	r10,136(sp)
 4019e7c:	103e0626 	beq	r2,zero,4019698 <__alt_mem_epcs_flash_controller_0+0xfb018698>
 4019e80:	5480000f 	ldh	r18,0(r10)
 4019e84:	52800104 	addi	r10,r10,4
 4019e88:	da802215 	stw	r10,136(sp)
 4019e8c:	9027d7fa 	srai	r19,r18,31
 4019e90:	9805883a 	mov	r2,r19
 4019e94:	003db806 	br	4019578 <__alt_mem_epcs_flash_controller_0+0xfb018578>
 4019e98:	a080040c 	andi	r2,r20,16
 4019e9c:	1000091e 	bne	r2,zero,4019ec4 <___vfiprintf_internal_r+0x1138>
 4019ea0:	a2c0100c 	andi	r11,r20,64
 4019ea4:	58000726 	beq	r11,zero,4019ec4 <___vfiprintf_internal_r+0x1138>
 4019ea8:	da802217 	ldw	r10,136(sp)
 4019eac:	50800017 	ldw	r2,0(r10)
 4019eb0:	52800104 	addi	r10,r10,4
 4019eb4:	da802215 	stw	r10,136(sp)
 4019eb8:	da802317 	ldw	r10,140(sp)
 4019ebc:	1280000d 	sth	r10,0(r2)
 4019ec0:	003be706 	br	4018e60 <__alt_mem_epcs_flash_controller_0+0xfb017e60>
 4019ec4:	da802217 	ldw	r10,136(sp)
 4019ec8:	50800017 	ldw	r2,0(r10)
 4019ecc:	52800104 	addi	r10,r10,4
 4019ed0:	da802215 	stw	r10,136(sp)
 4019ed4:	da802317 	ldw	r10,140(sp)
 4019ed8:	12800015 	stw	r10,0(r2)
 4019edc:	003be006 	br	4018e60 <__alt_mem_epcs_flash_controller_0+0xfb017e60>
 4019ee0:	a080100c 	andi	r2,r20,64
 4019ee4:	da802217 	ldw	r10,136(sp)
 4019ee8:	10003026 	beq	r2,zero,4019fac <___vfiprintf_internal_r+0x1220>
 4019eec:	5480000b 	ldhu	r18,0(r10)
 4019ef0:	52800104 	addi	r10,r10,4
 4019ef4:	0027883a 	mov	r19,zero
 4019ef8:	da802215 	stw	r10,136(sp)
 4019efc:	003d8006 	br	4019500 <__alt_mem_epcs_flash_controller_0+0xfb018500>
 4019f00:	80c00007 	ldb	r3,0(r16)
 4019f04:	003c0006 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 4019f08:	a080100c 	andi	r2,r20,64
 4019f0c:	d8001d85 	stb	zero,118(sp)
 4019f10:	da802217 	ldw	r10,136(sp)
 4019f14:	1000201e 	bne	r2,zero,4019f98 <___vfiprintf_internal_r+0x120c>
 4019f18:	50800104 	addi	r2,r10,4
 4019f1c:	54800017 	ldw	r18,0(r10)
 4019f20:	0027883a 	mov	r19,zero
 4019f24:	483def0e 	bge	r9,zero,40196e4 <__alt_mem_epcs_flash_controller_0+0xfb0186e4>
 4019f28:	94c6b03a 	or	r3,r18,r19
 4019f2c:	d8802215 	stw	r2,136(sp)
 4019f30:	183d4e1e 	bne	r3,zero,401946c <__alt_mem_epcs_flash_controller_0+0xfb01846c>
 4019f34:	0039883a 	mov	fp,zero
 4019f38:	0005883a 	mov	r2,zero
 4019f3c:	003e0606 	br	4019758 <__alt_mem_epcs_flash_controller_0+0xfb018758>
 4019f40:	d9402117 	ldw	r5,132(sp)
 4019f44:	d9002017 	ldw	r4,128(sp)
 4019f48:	d9801a04 	addi	r6,sp,104
 4019f4c:	da402c15 	stw	r9,176(sp)
 4019f50:	db802a15 	stw	r14,168(sp)
 4019f54:	4018c780 	call	4018c78 <__sprint_r.part.0>
 4019f58:	da402c17 	ldw	r9,176(sp)
 4019f5c:	db802a17 	ldw	r14,168(sp)
 4019f60:	103ede1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 4019f64:	d9401b17 	ldw	r5,108(sp)
 4019f68:	d8801c17 	ldw	r2,112(sp)
 4019f6c:	d811883a 	mov	r8,sp
 4019f70:	29000044 	addi	r4,r5,1
 4019f74:	003e7406 	br	4019948 <__alt_mem_epcs_flash_controller_0+0xfb018948>
 4019f78:	00bfffc4 	movi	r2,-1
 4019f7c:	003c5806 	br	40190e0 <__alt_mem_epcs_flash_controller_0+0xfb0180e0>
 4019f80:	d811883a 	mov	r8,sp
 4019f84:	003ee806 	br	4019b28 <__alt_mem_epcs_flash_controller_0+0xfb018b28>
 4019f88:	000b883a 	mov	r5,zero
 4019f8c:	01000044 	movi	r4,1
 4019f90:	d811883a 	mov	r8,sp
 4019f94:	003e7c06 	br	4019988 <__alt_mem_epcs_flash_controller_0+0xfb018988>
 4019f98:	50800104 	addi	r2,r10,4
 4019f9c:	5480000b 	ldhu	r18,0(r10)
 4019fa0:	0027883a 	mov	r19,zero
 4019fa4:	483dcf0e 	bge	r9,zero,40196e4 <__alt_mem_epcs_flash_controller_0+0xfb0186e4>
 4019fa8:	003fdf06 	br	4019f28 <__alt_mem_epcs_flash_controller_0+0xfb018f28>
 4019fac:	54800017 	ldw	r18,0(r10)
 4019fb0:	52800104 	addi	r10,r10,4
 4019fb4:	0027883a 	mov	r19,zero
 4019fb8:	da802215 	stw	r10,136(sp)
 4019fbc:	003d5006 	br	4019500 <__alt_mem_epcs_flash_controller_0+0xfb018500>
 4019fc0:	50800104 	addi	r2,r10,4
 4019fc4:	5480000b 	ldhu	r18,0(r10)
 4019fc8:	0027883a 	mov	r19,zero
 4019fcc:	483f7d0e 	bge	r9,zero,4019dc4 <__alt_mem_epcs_flash_controller_0+0xfb018dc4>
 4019fd0:	003ddc06 	br	4019744 <__alt_mem_epcs_flash_controller_0+0xfb018744>
 4019fd4:	d8c02215 	stw	r3,136(sp)
 4019fd8:	0039883a 	mov	fp,zero
 4019fdc:	003ddb06 	br	401974c <__alt_mem_epcs_flash_controller_0+0xfb01874c>
 4019fe0:	02810234 	movhi	r10,1032
 4019fe4:	52959f04 	addi	r10,r10,22140
 4019fe8:	da802415 	stw	r10,144(sp)
 4019fec:	003e8306 	br	40199fc <__alt_mem_epcs_flash_controller_0+0xfb0189fc>
 4019ff0:	d8801c17 	ldw	r2,112(sp)
 4019ff4:	dd002117 	ldw	r20,132(sp)
 4019ff8:	103eb926 	beq	r2,zero,4019ae0 <__alt_mem_epcs_flash_controller_0+0xfb018ae0>
 4019ffc:	d9002017 	ldw	r4,128(sp)
 401a000:	d9801a04 	addi	r6,sp,104
 401a004:	a00b883a 	mov	r5,r20
 401a008:	4018c780 	call	4018c78 <__sprint_r.part.0>
 401a00c:	003eb406 	br	4019ae0 <__alt_mem_epcs_flash_controller_0+0xfb018ae0>
 401a010:	80c00043 	ldbu	r3,1(r16)
 401a014:	a5000814 	ori	r20,r20,32
 401a018:	84000044 	addi	r16,r16,1
 401a01c:	18c03fcc 	andi	r3,r3,255
 401a020:	18c0201c 	xori	r3,r3,128
 401a024:	18ffe004 	addi	r3,r3,-128
 401a028:	003bb706 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 401a02c:	a809883a 	mov	r4,r21
 401a030:	d8c02a15 	stw	r3,168(sp)
 401a034:	da002b15 	stw	r8,172(sp)
 401a038:	400ec400 	call	400ec40 <strlen>
 401a03c:	d8c02a17 	ldw	r3,168(sp)
 401a040:	1027883a 	mov	r19,r2
 401a044:	df001d83 	ldbu	fp,118(sp)
 401a048:	d8c02215 	stw	r3,136(sp)
 401a04c:	0013883a 	mov	r9,zero
 401a050:	da002b17 	ldw	r8,172(sp)
 401a054:	003c4d06 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 401a058:	d9402117 	ldw	r5,132(sp)
 401a05c:	d9002017 	ldw	r4,128(sp)
 401a060:	d9801a04 	addi	r6,sp,104
 401a064:	da402c15 	stw	r9,176(sp)
 401a068:	4018c780 	call	4018c78 <__sprint_r.part.0>
 401a06c:	da402c17 	ldw	r9,176(sp)
 401a070:	103e9a1e 	bne	r2,zero,4019adc <__alt_mem_epcs_flash_controller_0+0xfb018adc>
 401a074:	d9401b17 	ldw	r5,108(sp)
 401a078:	d8801c17 	ldw	r2,112(sp)
 401a07c:	d811883a 	mov	r8,sp
 401a080:	29000044 	addi	r4,r5,1
 401a084:	003e4206 	br	4019990 <__alt_mem_epcs_flash_controller_0+0xfb018990>
 401a088:	d9401b17 	ldw	r5,108(sp)
 401a08c:	01010234 	movhi	r4,1032
 401a090:	2115a304 	addi	r4,r4,22156
 401a094:	d9002415 	stw	r4,144(sp)
 401a098:	29400044 	addi	r5,r5,1
 401a09c:	003c6d06 	br	4019254 <__alt_mem_epcs_flash_controller_0+0xfb018254>
 401a0a0:	0039883a 	mov	fp,zero
 401a0a4:	00800084 	movi	r2,2
 401a0a8:	10803fcc 	andi	r2,r2,255
 401a0ac:	01000044 	movi	r4,1
 401a0b0:	11001e26 	beq	r2,r4,401a12c <___vfiprintf_internal_r+0x13a0>
 401a0b4:	01000084 	movi	r4,2
 401a0b8:	11001e1e 	bne	r2,r4,401a134 <___vfiprintf_internal_r+0x13a8>
 401a0bc:	1829883a 	mov	r20,r3
 401a0c0:	003eea06 	br	4019c6c <__alt_mem_epcs_flash_controller_0+0xfb018c6c>
 401a0c4:	a007883a 	mov	r3,r20
 401a0c8:	00800044 	movi	r2,1
 401a0cc:	003ff606 	br	401a0a8 <__alt_mem_epcs_flash_controller_0+0xfb0190a8>
 401a0d0:	00800184 	movi	r2,6
 401a0d4:	1240012e 	bgeu	r2,r9,401a0dc <___vfiprintf_internal_r+0x1350>
 401a0d8:	1013883a 	mov	r9,r2
 401a0dc:	4827883a 	mov	r19,r9
 401a0e0:	4825883a 	mov	r18,r9
 401a0e4:	48001516 	blt	r9,zero,401a13c <___vfiprintf_internal_r+0x13b0>
 401a0e8:	05410234 	movhi	r21,1032
 401a0ec:	d8c02215 	stw	r3,136(sp)
 401a0f0:	ad553404 	addi	r21,r21,21712
 401a0f4:	003d1406 	br	4019548 <__alt_mem_epcs_flash_controller_0+0xfb018548>
 401a0f8:	02810234 	movhi	r10,1032
 401a0fc:	52959f04 	addi	r10,r10,22140
 401a100:	da802415 	stw	r10,144(sp)
 401a104:	200d883a 	mov	r6,r4
 401a108:	003c9106 	br	4019350 <__alt_mem_epcs_flash_controller_0+0xfb018350>
 401a10c:	5021883a 	mov	r16,r10
 401a110:	0013883a 	mov	r9,zero
 401a114:	003b7d06 	br	4018f0c <__alt_mem_epcs_flash_controller_0+0xfb017f0c>
 401a118:	4827883a 	mov	r19,r9
 401a11c:	df001d83 	ldbu	fp,118(sp)
 401a120:	d8c02215 	stw	r3,136(sp)
 401a124:	0013883a 	mov	r9,zero
 401a128:	003c1806 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 401a12c:	1829883a 	mov	r20,r3
 401a130:	003d1806 	br	4019594 <__alt_mem_epcs_flash_controller_0+0xfb018594>
 401a134:	1829883a 	mov	r20,r3
 401a138:	003ccd06 	br	4019470 <__alt_mem_epcs_flash_controller_0+0xfb018470>
 401a13c:	0025883a 	mov	r18,zero
 401a140:	003fe906 	br	401a0e8 <__alt_mem_epcs_flash_controller_0+0xfb0190e8>
 401a144:	d8802217 	ldw	r2,136(sp)
 401a148:	80c00043 	ldbu	r3,1(r16)
 401a14c:	5021883a 	mov	r16,r10
 401a150:	12400017 	ldw	r9,0(r2)
 401a154:	10800104 	addi	r2,r2,4
 401a158:	d8802215 	stw	r2,136(sp)
 401a15c:	483faf0e 	bge	r9,zero,401a01c <__alt_mem_epcs_flash_controller_0+0xfb01901c>
 401a160:	18c03fcc 	andi	r3,r3,255
 401a164:	18c0201c 	xori	r3,r3,128
 401a168:	027fffc4 	movi	r9,-1
 401a16c:	18ffe004 	addi	r3,r3,-128
 401a170:	003b6506 	br	4018f08 <__alt_mem_epcs_flash_controller_0+0xfb017f08>
 401a174:	d9c01d85 	stb	r7,118(sp)
 401a178:	003ca006 	br	40193fc <__alt_mem_epcs_flash_controller_0+0xfb0183fc>
 401a17c:	d9c01d85 	stb	r7,118(sp)
 401a180:	003cad06 	br	4019438 <__alt_mem_epcs_flash_controller_0+0xfb018438>
 401a184:	d9c01d85 	stb	r7,118(sp)
 401a188:	003d7d06 	br	4019780 <__alt_mem_epcs_flash_controller_0+0xfb018780>
 401a18c:	d9c01d85 	stb	r7,118(sp)
 401a190:	003d5f06 	br	4019710 <__alt_mem_epcs_flash_controller_0+0xfb018710>
 401a194:	a080004c 	andi	r2,r20,1
 401a198:	0039883a 	mov	fp,zero
 401a19c:	10000526 	beq	r2,zero,401a1b4 <___vfiprintf_internal_r+0x1428>
 401a1a0:	00800c04 	movi	r2,48
 401a1a4:	d88019c5 	stb	r2,103(sp)
 401a1a8:	dcc02717 	ldw	r19,156(sp)
 401a1ac:	dd4019c4 	addi	r21,sp,103
 401a1b0:	003bf606 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 401a1b4:	0027883a 	mov	r19,zero
 401a1b8:	dd401a04 	addi	r21,sp,104
 401a1bc:	003bf306 	br	401918c <__alt_mem_epcs_flash_controller_0+0xfb01818c>
 401a1c0:	d9c01d85 	stb	r7,118(sp)
 401a1c4:	003dc806 	br	40198e8 <__alt_mem_epcs_flash_controller_0+0xfb0188e8>
 401a1c8:	d9c01d85 	stb	r7,118(sp)
 401a1cc:	003d3a06 	br	40196b8 <__alt_mem_epcs_flash_controller_0+0xfb0186b8>
 401a1d0:	d9c01d85 	stb	r7,118(sp)
 401a1d4:	003d2a06 	br	4019680 <__alt_mem_epcs_flash_controller_0+0xfb018680>
 401a1d8:	d9c01d85 	stb	r7,118(sp)
 401a1dc:	003cde06 	br	4019558 <__alt_mem_epcs_flash_controller_0+0xfb018558>
 401a1e0:	d9c01d85 	stb	r7,118(sp)
 401a1e4:	003cbc06 	br	40194d8 <__alt_mem_epcs_flash_controller_0+0xfb0184d8>

0401a1e8 <__vfiprintf_internal>:
 401a1e8:	008103f4 	movhi	r2,1039
 401a1ec:	108bf604 	addi	r2,r2,12248
 401a1f0:	300f883a 	mov	r7,r6
 401a1f4:	280d883a 	mov	r6,r5
 401a1f8:	200b883a 	mov	r5,r4
 401a1fc:	11000017 	ldw	r4,0(r2)
 401a200:	4018d8c1 	jmpi	4018d8c <___vfiprintf_internal_r>

0401a204 <__sbprintf>:
 401a204:	2880030b 	ldhu	r2,12(r5)
 401a208:	2ac01917 	ldw	r11,100(r5)
 401a20c:	2a80038b 	ldhu	r10,14(r5)
 401a210:	2a400717 	ldw	r9,28(r5)
 401a214:	2a000917 	ldw	r8,36(r5)
 401a218:	defee204 	addi	sp,sp,-1144
 401a21c:	00c10004 	movi	r3,1024
 401a220:	dc011a15 	stw	r16,1128(sp)
 401a224:	10bfff4c 	andi	r2,r2,65533
 401a228:	2821883a 	mov	r16,r5
 401a22c:	d8cb883a 	add	r5,sp,r3
 401a230:	dc811c15 	stw	r18,1136(sp)
 401a234:	dc411b15 	stw	r17,1132(sp)
 401a238:	dfc11d15 	stw	ra,1140(sp)
 401a23c:	2025883a 	mov	r18,r4
 401a240:	d881030d 	sth	r2,1036(sp)
 401a244:	dac11915 	stw	r11,1124(sp)
 401a248:	da81038d 	sth	r10,1038(sp)
 401a24c:	da410715 	stw	r9,1052(sp)
 401a250:	da010915 	stw	r8,1060(sp)
 401a254:	dec10015 	stw	sp,1024(sp)
 401a258:	dec10415 	stw	sp,1040(sp)
 401a25c:	d8c10215 	stw	r3,1032(sp)
 401a260:	d8c10515 	stw	r3,1044(sp)
 401a264:	d8010615 	stw	zero,1048(sp)
 401a268:	4018d8c0 	call	4018d8c <___vfiprintf_internal_r>
 401a26c:	1023883a 	mov	r17,r2
 401a270:	10000416 	blt	r2,zero,401a284 <__sbprintf+0x80>
 401a274:	d9410004 	addi	r5,sp,1024
 401a278:	9009883a 	mov	r4,r18
 401a27c:	4014d780 	call	4014d78 <_fflush_r>
 401a280:	10000d1e 	bne	r2,zero,401a2b8 <__sbprintf+0xb4>
 401a284:	d881030b 	ldhu	r2,1036(sp)
 401a288:	1080100c 	andi	r2,r2,64
 401a28c:	10000326 	beq	r2,zero,401a29c <__sbprintf+0x98>
 401a290:	8080030b 	ldhu	r2,12(r16)
 401a294:	10801014 	ori	r2,r2,64
 401a298:	8080030d 	sth	r2,12(r16)
 401a29c:	8805883a 	mov	r2,r17
 401a2a0:	dfc11d17 	ldw	ra,1140(sp)
 401a2a4:	dc811c17 	ldw	r18,1136(sp)
 401a2a8:	dc411b17 	ldw	r17,1132(sp)
 401a2ac:	dc011a17 	ldw	r16,1128(sp)
 401a2b0:	dec11e04 	addi	sp,sp,1144
 401a2b4:	f800283a 	ret
 401a2b8:	047fffc4 	movi	r17,-1
 401a2bc:	003ff106 	br	401a284 <__alt_mem_epcs_flash_controller_0+0xfb019284>

0401a2c0 <_write_r>:
 401a2c0:	defffd04 	addi	sp,sp,-12
 401a2c4:	2805883a 	mov	r2,r5
 401a2c8:	dc000015 	stw	r16,0(sp)
 401a2cc:	040103f4 	movhi	r16,1039
 401a2d0:	dc400115 	stw	r17,4(sp)
 401a2d4:	300b883a 	mov	r5,r6
 401a2d8:	840c0a04 	addi	r16,r16,12328
 401a2dc:	2023883a 	mov	r17,r4
 401a2e0:	380d883a 	mov	r6,r7
 401a2e4:	1009883a 	mov	r4,r2
 401a2e8:	dfc00215 	stw	ra,8(sp)
 401a2ec:	80000015 	stw	zero,0(r16)
 401a2f0:	401c3f00 	call	401c3f0 <write>
 401a2f4:	00ffffc4 	movi	r3,-1
 401a2f8:	10c00526 	beq	r2,r3,401a310 <_write_r+0x50>
 401a2fc:	dfc00217 	ldw	ra,8(sp)
 401a300:	dc400117 	ldw	r17,4(sp)
 401a304:	dc000017 	ldw	r16,0(sp)
 401a308:	dec00304 	addi	sp,sp,12
 401a30c:	f800283a 	ret
 401a310:	80c00017 	ldw	r3,0(r16)
 401a314:	183ff926 	beq	r3,zero,401a2fc <__alt_mem_epcs_flash_controller_0+0xfb0192fc>
 401a318:	88c00015 	stw	r3,0(r17)
 401a31c:	003ff706 	br	401a2fc <__alt_mem_epcs_flash_controller_0+0xfb0192fc>

0401a320 <_close_r>:
 401a320:	defffd04 	addi	sp,sp,-12
 401a324:	dc000015 	stw	r16,0(sp)
 401a328:	040103f4 	movhi	r16,1039
 401a32c:	dc400115 	stw	r17,4(sp)
 401a330:	840c0a04 	addi	r16,r16,12328
 401a334:	2023883a 	mov	r17,r4
 401a338:	2809883a 	mov	r4,r5
 401a33c:	dfc00215 	stw	ra,8(sp)
 401a340:	80000015 	stw	zero,0(r16)
 401a344:	401b8100 	call	401b810 <close>
 401a348:	00ffffc4 	movi	r3,-1
 401a34c:	10c00526 	beq	r2,r3,401a364 <_close_r+0x44>
 401a350:	dfc00217 	ldw	ra,8(sp)
 401a354:	dc400117 	ldw	r17,4(sp)
 401a358:	dc000017 	ldw	r16,0(sp)
 401a35c:	dec00304 	addi	sp,sp,12
 401a360:	f800283a 	ret
 401a364:	80c00017 	ldw	r3,0(r16)
 401a368:	183ff926 	beq	r3,zero,401a350 <__alt_mem_epcs_flash_controller_0+0xfb019350>
 401a36c:	88c00015 	stw	r3,0(r17)
 401a370:	003ff706 	br	401a350 <__alt_mem_epcs_flash_controller_0+0xfb019350>

0401a374 <_calloc_r>:
 401a374:	298b383a 	mul	r5,r5,r6
 401a378:	defffe04 	addi	sp,sp,-8
 401a37c:	dfc00115 	stw	ra,4(sp)
 401a380:	dc000015 	stw	r16,0(sp)
 401a384:	400dedc0 	call	400dedc <_malloc_r>
 401a388:	10002926 	beq	r2,zero,401a430 <_calloc_r+0xbc>
 401a38c:	11bfff17 	ldw	r6,-4(r2)
 401a390:	1021883a 	mov	r16,r2
 401a394:	00bfff04 	movi	r2,-4
 401a398:	308c703a 	and	r6,r6,r2
 401a39c:	00c00904 	movi	r3,36
 401a3a0:	308d883a 	add	r6,r6,r2
 401a3a4:	19801636 	bltu	r3,r6,401a400 <_calloc_r+0x8c>
 401a3a8:	008004c4 	movi	r2,19
 401a3ac:	11800b2e 	bgeu	r2,r6,401a3dc <_calloc_r+0x68>
 401a3b0:	80000015 	stw	zero,0(r16)
 401a3b4:	80000115 	stw	zero,4(r16)
 401a3b8:	008006c4 	movi	r2,27
 401a3bc:	11801a2e 	bgeu	r2,r6,401a428 <_calloc_r+0xb4>
 401a3c0:	80000215 	stw	zero,8(r16)
 401a3c4:	80000315 	stw	zero,12(r16)
 401a3c8:	30c0151e 	bne	r6,r3,401a420 <_calloc_r+0xac>
 401a3cc:	80000415 	stw	zero,16(r16)
 401a3d0:	80800604 	addi	r2,r16,24
 401a3d4:	80000515 	stw	zero,20(r16)
 401a3d8:	00000106 	br	401a3e0 <_calloc_r+0x6c>
 401a3dc:	8005883a 	mov	r2,r16
 401a3e0:	10000015 	stw	zero,0(r2)
 401a3e4:	10000115 	stw	zero,4(r2)
 401a3e8:	10000215 	stw	zero,8(r2)
 401a3ec:	8005883a 	mov	r2,r16
 401a3f0:	dfc00117 	ldw	ra,4(sp)
 401a3f4:	dc000017 	ldw	r16,0(sp)
 401a3f8:	dec00204 	addi	sp,sp,8
 401a3fc:	f800283a 	ret
 401a400:	000b883a 	mov	r5,zero
 401a404:	8009883a 	mov	r4,r16
 401a408:	400e8300 	call	400e830 <memset>
 401a40c:	8005883a 	mov	r2,r16
 401a410:	dfc00117 	ldw	ra,4(sp)
 401a414:	dc000017 	ldw	r16,0(sp)
 401a418:	dec00204 	addi	sp,sp,8
 401a41c:	f800283a 	ret
 401a420:	80800404 	addi	r2,r16,16
 401a424:	003fee06 	br	401a3e0 <__alt_mem_epcs_flash_controller_0+0xfb0193e0>
 401a428:	80800204 	addi	r2,r16,8
 401a42c:	003fec06 	br	401a3e0 <__alt_mem_epcs_flash_controller_0+0xfb0193e0>
 401a430:	0005883a 	mov	r2,zero
 401a434:	003fee06 	br	401a3f0 <__alt_mem_epcs_flash_controller_0+0xfb0193f0>

0401a438 <_fclose_r>:
 401a438:	28003926 	beq	r5,zero,401a520 <_fclose_r+0xe8>
 401a43c:	defffc04 	addi	sp,sp,-16
 401a440:	dc400115 	stw	r17,4(sp)
 401a444:	dc000015 	stw	r16,0(sp)
 401a448:	dfc00315 	stw	ra,12(sp)
 401a44c:	dc800215 	stw	r18,8(sp)
 401a450:	2023883a 	mov	r17,r4
 401a454:	2821883a 	mov	r16,r5
 401a458:	20000226 	beq	r4,zero,401a464 <_fclose_r+0x2c>
 401a45c:	20800e17 	ldw	r2,56(r4)
 401a460:	10002726 	beq	r2,zero,401a500 <_fclose_r+0xc8>
 401a464:	8080030f 	ldh	r2,12(r16)
 401a468:	1000071e 	bne	r2,zero,401a488 <_fclose_r+0x50>
 401a46c:	0005883a 	mov	r2,zero
 401a470:	dfc00317 	ldw	ra,12(sp)
 401a474:	dc800217 	ldw	r18,8(sp)
 401a478:	dc400117 	ldw	r17,4(sp)
 401a47c:	dc000017 	ldw	r16,0(sp)
 401a480:	dec00404 	addi	sp,sp,16
 401a484:	f800283a 	ret
 401a488:	800b883a 	mov	r5,r16
 401a48c:	8809883a 	mov	r4,r17
 401a490:	4014b5c0 	call	4014b5c <__sflush_r>
 401a494:	1025883a 	mov	r18,r2
 401a498:	80800b17 	ldw	r2,44(r16)
 401a49c:	10000426 	beq	r2,zero,401a4b0 <_fclose_r+0x78>
 401a4a0:	81400717 	ldw	r5,28(r16)
 401a4a4:	8809883a 	mov	r4,r17
 401a4a8:	103ee83a 	callr	r2
 401a4ac:	10001616 	blt	r2,zero,401a508 <_fclose_r+0xd0>
 401a4b0:	8080030b 	ldhu	r2,12(r16)
 401a4b4:	1080200c 	andi	r2,r2,128
 401a4b8:	1000151e 	bne	r2,zero,401a510 <_fclose_r+0xd8>
 401a4bc:	81400c17 	ldw	r5,48(r16)
 401a4c0:	28000526 	beq	r5,zero,401a4d8 <_fclose_r+0xa0>
 401a4c4:	80801004 	addi	r2,r16,64
 401a4c8:	28800226 	beq	r5,r2,401a4d4 <_fclose_r+0x9c>
 401a4cc:	8809883a 	mov	r4,r17
 401a4d0:	40152c80 	call	40152c8 <_free_r>
 401a4d4:	80000c15 	stw	zero,48(r16)
 401a4d8:	81401117 	ldw	r5,68(r16)
 401a4dc:	28000326 	beq	r5,zero,401a4ec <_fclose_r+0xb4>
 401a4e0:	8809883a 	mov	r4,r17
 401a4e4:	40152c80 	call	40152c8 <_free_r>
 401a4e8:	80001115 	stw	zero,68(r16)
 401a4ec:	40151640 	call	4015164 <__sfp_lock_acquire>
 401a4f0:	8000030d 	sth	zero,12(r16)
 401a4f4:	40151680 	call	4015168 <__sfp_lock_release>
 401a4f8:	9005883a 	mov	r2,r18
 401a4fc:	003fdc06 	br	401a470 <__alt_mem_epcs_flash_controller_0+0xfb019470>
 401a500:	40151540 	call	4015154 <__sinit>
 401a504:	003fd706 	br	401a464 <__alt_mem_epcs_flash_controller_0+0xfb019464>
 401a508:	04bfffc4 	movi	r18,-1
 401a50c:	003fe806 	br	401a4b0 <__alt_mem_epcs_flash_controller_0+0xfb0194b0>
 401a510:	81400417 	ldw	r5,16(r16)
 401a514:	8809883a 	mov	r4,r17
 401a518:	40152c80 	call	40152c8 <_free_r>
 401a51c:	003fe706 	br	401a4bc <__alt_mem_epcs_flash_controller_0+0xfb0194bc>
 401a520:	0005883a 	mov	r2,zero
 401a524:	f800283a 	ret

0401a528 <fclose>:
 401a528:	008103f4 	movhi	r2,1039
 401a52c:	108bf604 	addi	r2,r2,12248
 401a530:	200b883a 	mov	r5,r4
 401a534:	11000017 	ldw	r4,0(r2)
 401a538:	401a4381 	jmpi	401a438 <_fclose_r>

0401a53c <__fputwc>:
 401a53c:	defff804 	addi	sp,sp,-32
 401a540:	dcc00415 	stw	r19,16(sp)
 401a544:	dc800315 	stw	r18,12(sp)
 401a548:	dc000115 	stw	r16,4(sp)
 401a54c:	dfc00715 	stw	ra,28(sp)
 401a550:	dd400615 	stw	r21,24(sp)
 401a554:	dd000515 	stw	r20,20(sp)
 401a558:	dc400215 	stw	r17,8(sp)
 401a55c:	2027883a 	mov	r19,r4
 401a560:	2825883a 	mov	r18,r5
 401a564:	3021883a 	mov	r16,r6
 401a568:	4015ca40 	call	4015ca4 <__locale_mb_cur_max>
 401a56c:	00c00044 	movi	r3,1
 401a570:	10c03e26 	beq	r2,r3,401a66c <__fputwc+0x130>
 401a574:	81c01704 	addi	r7,r16,92
 401a578:	900d883a 	mov	r6,r18
 401a57c:	d80b883a 	mov	r5,sp
 401a580:	9809883a 	mov	r4,r19
 401a584:	401aa0c0 	call	401aa0c <_wcrtomb_r>
 401a588:	1029883a 	mov	r20,r2
 401a58c:	00bfffc4 	movi	r2,-1
 401a590:	a0802026 	beq	r20,r2,401a614 <__fputwc+0xd8>
 401a594:	d9400003 	ldbu	r5,0(sp)
 401a598:	a0001c26 	beq	r20,zero,401a60c <__fputwc+0xd0>
 401a59c:	0023883a 	mov	r17,zero
 401a5a0:	05400284 	movi	r21,10
 401a5a4:	00000906 	br	401a5cc <__fputwc+0x90>
 401a5a8:	80800017 	ldw	r2,0(r16)
 401a5ac:	11400005 	stb	r5,0(r2)
 401a5b0:	80c00017 	ldw	r3,0(r16)
 401a5b4:	18c00044 	addi	r3,r3,1
 401a5b8:	80c00015 	stw	r3,0(r16)
 401a5bc:	8c400044 	addi	r17,r17,1
 401a5c0:	dc45883a 	add	r2,sp,r17
 401a5c4:	8d00112e 	bgeu	r17,r20,401a60c <__fputwc+0xd0>
 401a5c8:	11400003 	ldbu	r5,0(r2)
 401a5cc:	80c00217 	ldw	r3,8(r16)
 401a5d0:	18ffffc4 	addi	r3,r3,-1
 401a5d4:	80c00215 	stw	r3,8(r16)
 401a5d8:	183ff30e 	bge	r3,zero,401a5a8 <__alt_mem_epcs_flash_controller_0+0xfb0195a8>
 401a5dc:	80800617 	ldw	r2,24(r16)
 401a5e0:	18801916 	blt	r3,r2,401a648 <__fputwc+0x10c>
 401a5e4:	80800017 	ldw	r2,0(r16)
 401a5e8:	11400005 	stb	r5,0(r2)
 401a5ec:	80800017 	ldw	r2,0(r16)
 401a5f0:	10c00003 	ldbu	r3,0(r2)
 401a5f4:	10800044 	addi	r2,r2,1
 401a5f8:	1d402326 	beq	r3,r21,401a688 <__fputwc+0x14c>
 401a5fc:	80800015 	stw	r2,0(r16)
 401a600:	8c400044 	addi	r17,r17,1
 401a604:	dc45883a 	add	r2,sp,r17
 401a608:	8d3fef36 	bltu	r17,r20,401a5c8 <__alt_mem_epcs_flash_controller_0+0xfb0195c8>
 401a60c:	9005883a 	mov	r2,r18
 401a610:	00000406 	br	401a624 <__fputwc+0xe8>
 401a614:	80c0030b 	ldhu	r3,12(r16)
 401a618:	a005883a 	mov	r2,r20
 401a61c:	18c01014 	ori	r3,r3,64
 401a620:	80c0030d 	sth	r3,12(r16)
 401a624:	dfc00717 	ldw	ra,28(sp)
 401a628:	dd400617 	ldw	r21,24(sp)
 401a62c:	dd000517 	ldw	r20,20(sp)
 401a630:	dcc00417 	ldw	r19,16(sp)
 401a634:	dc800317 	ldw	r18,12(sp)
 401a638:	dc400217 	ldw	r17,8(sp)
 401a63c:	dc000117 	ldw	r16,4(sp)
 401a640:	dec00804 	addi	sp,sp,32
 401a644:	f800283a 	ret
 401a648:	800d883a 	mov	r6,r16
 401a64c:	29403fcc 	andi	r5,r5,255
 401a650:	9809883a 	mov	r4,r19
 401a654:	401a8b40 	call	401a8b4 <__swbuf_r>
 401a658:	10bfffe0 	cmpeqi	r2,r2,-1
 401a65c:	10803fcc 	andi	r2,r2,255
 401a660:	103fd626 	beq	r2,zero,401a5bc <__alt_mem_epcs_flash_controller_0+0xfb0195bc>
 401a664:	00bfffc4 	movi	r2,-1
 401a668:	003fee06 	br	401a624 <__alt_mem_epcs_flash_controller_0+0xfb019624>
 401a66c:	90ffffc4 	addi	r3,r18,-1
 401a670:	01003f84 	movi	r4,254
 401a674:	20ffbf36 	bltu	r4,r3,401a574 <__alt_mem_epcs_flash_controller_0+0xfb019574>
 401a678:	900b883a 	mov	r5,r18
 401a67c:	dc800005 	stb	r18,0(sp)
 401a680:	1029883a 	mov	r20,r2
 401a684:	003fc506 	br	401a59c <__alt_mem_epcs_flash_controller_0+0xfb01959c>
 401a688:	800d883a 	mov	r6,r16
 401a68c:	a80b883a 	mov	r5,r21
 401a690:	9809883a 	mov	r4,r19
 401a694:	401a8b40 	call	401a8b4 <__swbuf_r>
 401a698:	10bfffe0 	cmpeqi	r2,r2,-1
 401a69c:	003fef06 	br	401a65c <__alt_mem_epcs_flash_controller_0+0xfb01965c>

0401a6a0 <_fputwc_r>:
 401a6a0:	3080030b 	ldhu	r2,12(r6)
 401a6a4:	10c8000c 	andi	r3,r2,8192
 401a6a8:	1800051e 	bne	r3,zero,401a6c0 <_fputwc_r+0x20>
 401a6ac:	30c01917 	ldw	r3,100(r6)
 401a6b0:	10880014 	ori	r2,r2,8192
 401a6b4:	3080030d 	sth	r2,12(r6)
 401a6b8:	18880014 	ori	r2,r3,8192
 401a6bc:	30801915 	stw	r2,100(r6)
 401a6c0:	401a53c1 	jmpi	401a53c <__fputwc>

0401a6c4 <fputwc>:
 401a6c4:	008103f4 	movhi	r2,1039
 401a6c8:	defffc04 	addi	sp,sp,-16
 401a6cc:	108bf604 	addi	r2,r2,12248
 401a6d0:	dc000115 	stw	r16,4(sp)
 401a6d4:	14000017 	ldw	r16,0(r2)
 401a6d8:	dc400215 	stw	r17,8(sp)
 401a6dc:	dfc00315 	stw	ra,12(sp)
 401a6e0:	2023883a 	mov	r17,r4
 401a6e4:	80000226 	beq	r16,zero,401a6f0 <fputwc+0x2c>
 401a6e8:	80800e17 	ldw	r2,56(r16)
 401a6ec:	10001026 	beq	r2,zero,401a730 <fputwc+0x6c>
 401a6f0:	2880030b 	ldhu	r2,12(r5)
 401a6f4:	10c8000c 	andi	r3,r2,8192
 401a6f8:	1800051e 	bne	r3,zero,401a710 <fputwc+0x4c>
 401a6fc:	28c01917 	ldw	r3,100(r5)
 401a700:	10880014 	ori	r2,r2,8192
 401a704:	2880030d 	sth	r2,12(r5)
 401a708:	18880014 	ori	r2,r3,8192
 401a70c:	28801915 	stw	r2,100(r5)
 401a710:	280d883a 	mov	r6,r5
 401a714:	8009883a 	mov	r4,r16
 401a718:	880b883a 	mov	r5,r17
 401a71c:	dfc00317 	ldw	ra,12(sp)
 401a720:	dc400217 	ldw	r17,8(sp)
 401a724:	dc000117 	ldw	r16,4(sp)
 401a728:	dec00404 	addi	sp,sp,16
 401a72c:	401a53c1 	jmpi	401a53c <__fputwc>
 401a730:	8009883a 	mov	r4,r16
 401a734:	d9400015 	stw	r5,0(sp)
 401a738:	40151540 	call	4015154 <__sinit>
 401a73c:	d9400017 	ldw	r5,0(sp)
 401a740:	003feb06 	br	401a6f0 <__alt_mem_epcs_flash_controller_0+0xfb0196f0>

0401a744 <_fstat_r>:
 401a744:	defffd04 	addi	sp,sp,-12
 401a748:	2805883a 	mov	r2,r5
 401a74c:	dc000015 	stw	r16,0(sp)
 401a750:	040103f4 	movhi	r16,1039
 401a754:	dc400115 	stw	r17,4(sp)
 401a758:	840c0a04 	addi	r16,r16,12328
 401a75c:	2023883a 	mov	r17,r4
 401a760:	300b883a 	mov	r5,r6
 401a764:	1009883a 	mov	r4,r2
 401a768:	dfc00215 	stw	ra,8(sp)
 401a76c:	80000015 	stw	zero,0(r16)
 401a770:	401b9900 	call	401b990 <fstat>
 401a774:	00ffffc4 	movi	r3,-1
 401a778:	10c00526 	beq	r2,r3,401a790 <_fstat_r+0x4c>
 401a77c:	dfc00217 	ldw	ra,8(sp)
 401a780:	dc400117 	ldw	r17,4(sp)
 401a784:	dc000017 	ldw	r16,0(sp)
 401a788:	dec00304 	addi	sp,sp,12
 401a78c:	f800283a 	ret
 401a790:	80c00017 	ldw	r3,0(r16)
 401a794:	183ff926 	beq	r3,zero,401a77c <__alt_mem_epcs_flash_controller_0+0xfb01977c>
 401a798:	88c00015 	stw	r3,0(r17)
 401a79c:	003ff706 	br	401a77c <__alt_mem_epcs_flash_controller_0+0xfb01977c>

0401a7a0 <_isatty_r>:
 401a7a0:	defffd04 	addi	sp,sp,-12
 401a7a4:	dc000015 	stw	r16,0(sp)
 401a7a8:	040103f4 	movhi	r16,1039
 401a7ac:	dc400115 	stw	r17,4(sp)
 401a7b0:	840c0a04 	addi	r16,r16,12328
 401a7b4:	2023883a 	mov	r17,r4
 401a7b8:	2809883a 	mov	r4,r5
 401a7bc:	dfc00215 	stw	ra,8(sp)
 401a7c0:	80000015 	stw	zero,0(r16)
 401a7c4:	401bd1c0 	call	401bd1c <isatty>
 401a7c8:	00ffffc4 	movi	r3,-1
 401a7cc:	10c00526 	beq	r2,r3,401a7e4 <_isatty_r+0x44>
 401a7d0:	dfc00217 	ldw	ra,8(sp)
 401a7d4:	dc400117 	ldw	r17,4(sp)
 401a7d8:	dc000017 	ldw	r16,0(sp)
 401a7dc:	dec00304 	addi	sp,sp,12
 401a7e0:	f800283a 	ret
 401a7e4:	80c00017 	ldw	r3,0(r16)
 401a7e8:	183ff926 	beq	r3,zero,401a7d0 <__alt_mem_epcs_flash_controller_0+0xfb0197d0>
 401a7ec:	88c00015 	stw	r3,0(r17)
 401a7f0:	003ff706 	br	401a7d0 <__alt_mem_epcs_flash_controller_0+0xfb0197d0>

0401a7f4 <_lseek_r>:
 401a7f4:	defffd04 	addi	sp,sp,-12
 401a7f8:	2805883a 	mov	r2,r5
 401a7fc:	dc000015 	stw	r16,0(sp)
 401a800:	040103f4 	movhi	r16,1039
 401a804:	dc400115 	stw	r17,4(sp)
 401a808:	300b883a 	mov	r5,r6
 401a80c:	840c0a04 	addi	r16,r16,12328
 401a810:	2023883a 	mov	r17,r4
 401a814:	380d883a 	mov	r6,r7
 401a818:	1009883a 	mov	r4,r2
 401a81c:	dfc00215 	stw	ra,8(sp)
 401a820:	80000015 	stw	zero,0(r16)
 401a824:	401bdfc0 	call	401bdfc <lseek>
 401a828:	00ffffc4 	movi	r3,-1
 401a82c:	10c00526 	beq	r2,r3,401a844 <_lseek_r+0x50>
 401a830:	dfc00217 	ldw	ra,8(sp)
 401a834:	dc400117 	ldw	r17,4(sp)
 401a838:	dc000017 	ldw	r16,0(sp)
 401a83c:	dec00304 	addi	sp,sp,12
 401a840:	f800283a 	ret
 401a844:	80c00017 	ldw	r3,0(r16)
 401a848:	183ff926 	beq	r3,zero,401a830 <__alt_mem_epcs_flash_controller_0+0xfb019830>
 401a84c:	88c00015 	stw	r3,0(r17)
 401a850:	003ff706 	br	401a830 <__alt_mem_epcs_flash_controller_0+0xfb019830>

0401a854 <_read_r>:
 401a854:	defffd04 	addi	sp,sp,-12
 401a858:	2805883a 	mov	r2,r5
 401a85c:	dc000015 	stw	r16,0(sp)
 401a860:	040103f4 	movhi	r16,1039
 401a864:	dc400115 	stw	r17,4(sp)
 401a868:	300b883a 	mov	r5,r6
 401a86c:	840c0a04 	addi	r16,r16,12328
 401a870:	2023883a 	mov	r17,r4
 401a874:	380d883a 	mov	r6,r7
 401a878:	1009883a 	mov	r4,r2
 401a87c:	dfc00215 	stw	ra,8(sp)
 401a880:	80000015 	stw	zero,0(r16)
 401a884:	401bfd00 	call	401bfd0 <read>
 401a888:	00ffffc4 	movi	r3,-1
 401a88c:	10c00526 	beq	r2,r3,401a8a4 <_read_r+0x50>
 401a890:	dfc00217 	ldw	ra,8(sp)
 401a894:	dc400117 	ldw	r17,4(sp)
 401a898:	dc000017 	ldw	r16,0(sp)
 401a89c:	dec00304 	addi	sp,sp,12
 401a8a0:	f800283a 	ret
 401a8a4:	80c00017 	ldw	r3,0(r16)
 401a8a8:	183ff926 	beq	r3,zero,401a890 <__alt_mem_epcs_flash_controller_0+0xfb019890>
 401a8ac:	88c00015 	stw	r3,0(r17)
 401a8b0:	003ff706 	br	401a890 <__alt_mem_epcs_flash_controller_0+0xfb019890>

0401a8b4 <__swbuf_r>:
 401a8b4:	defffb04 	addi	sp,sp,-20
 401a8b8:	dcc00315 	stw	r19,12(sp)
 401a8bc:	dc800215 	stw	r18,8(sp)
 401a8c0:	dc000015 	stw	r16,0(sp)
 401a8c4:	dfc00415 	stw	ra,16(sp)
 401a8c8:	dc400115 	stw	r17,4(sp)
 401a8cc:	2025883a 	mov	r18,r4
 401a8d0:	2827883a 	mov	r19,r5
 401a8d4:	3021883a 	mov	r16,r6
 401a8d8:	20000226 	beq	r4,zero,401a8e4 <__swbuf_r+0x30>
 401a8dc:	20800e17 	ldw	r2,56(r4)
 401a8e0:	10004226 	beq	r2,zero,401a9ec <__swbuf_r+0x138>
 401a8e4:	80800617 	ldw	r2,24(r16)
 401a8e8:	8100030b 	ldhu	r4,12(r16)
 401a8ec:	80800215 	stw	r2,8(r16)
 401a8f0:	2080020c 	andi	r2,r4,8
 401a8f4:	10003626 	beq	r2,zero,401a9d0 <__swbuf_r+0x11c>
 401a8f8:	80c00417 	ldw	r3,16(r16)
 401a8fc:	18003426 	beq	r3,zero,401a9d0 <__swbuf_r+0x11c>
 401a900:	2088000c 	andi	r2,r4,8192
 401a904:	9c403fcc 	andi	r17,r19,255
 401a908:	10001a26 	beq	r2,zero,401a974 <__swbuf_r+0xc0>
 401a90c:	80800017 	ldw	r2,0(r16)
 401a910:	81000517 	ldw	r4,20(r16)
 401a914:	10c7c83a 	sub	r3,r2,r3
 401a918:	1900200e 	bge	r3,r4,401a99c <__swbuf_r+0xe8>
 401a91c:	18c00044 	addi	r3,r3,1
 401a920:	81000217 	ldw	r4,8(r16)
 401a924:	11400044 	addi	r5,r2,1
 401a928:	81400015 	stw	r5,0(r16)
 401a92c:	213fffc4 	addi	r4,r4,-1
 401a930:	81000215 	stw	r4,8(r16)
 401a934:	14c00005 	stb	r19,0(r2)
 401a938:	80800517 	ldw	r2,20(r16)
 401a93c:	10c01e26 	beq	r2,r3,401a9b8 <__swbuf_r+0x104>
 401a940:	8080030b 	ldhu	r2,12(r16)
 401a944:	1080004c 	andi	r2,r2,1
 401a948:	10000226 	beq	r2,zero,401a954 <__swbuf_r+0xa0>
 401a94c:	00800284 	movi	r2,10
 401a950:	88801926 	beq	r17,r2,401a9b8 <__swbuf_r+0x104>
 401a954:	8805883a 	mov	r2,r17
 401a958:	dfc00417 	ldw	ra,16(sp)
 401a95c:	dcc00317 	ldw	r19,12(sp)
 401a960:	dc800217 	ldw	r18,8(sp)
 401a964:	dc400117 	ldw	r17,4(sp)
 401a968:	dc000017 	ldw	r16,0(sp)
 401a96c:	dec00504 	addi	sp,sp,20
 401a970:	f800283a 	ret
 401a974:	81401917 	ldw	r5,100(r16)
 401a978:	00b7ffc4 	movi	r2,-8193
 401a97c:	21080014 	ori	r4,r4,8192
 401a980:	2884703a 	and	r2,r5,r2
 401a984:	80801915 	stw	r2,100(r16)
 401a988:	80800017 	ldw	r2,0(r16)
 401a98c:	8100030d 	sth	r4,12(r16)
 401a990:	81000517 	ldw	r4,20(r16)
 401a994:	10c7c83a 	sub	r3,r2,r3
 401a998:	193fe016 	blt	r3,r4,401a91c <__alt_mem_epcs_flash_controller_0+0xfb01991c>
 401a99c:	800b883a 	mov	r5,r16
 401a9a0:	9009883a 	mov	r4,r18
 401a9a4:	4014d780 	call	4014d78 <_fflush_r>
 401a9a8:	1000071e 	bne	r2,zero,401a9c8 <__swbuf_r+0x114>
 401a9ac:	80800017 	ldw	r2,0(r16)
 401a9b0:	00c00044 	movi	r3,1
 401a9b4:	003fda06 	br	401a920 <__alt_mem_epcs_flash_controller_0+0xfb019920>
 401a9b8:	800b883a 	mov	r5,r16
 401a9bc:	9009883a 	mov	r4,r18
 401a9c0:	4014d780 	call	4014d78 <_fflush_r>
 401a9c4:	103fe326 	beq	r2,zero,401a954 <__alt_mem_epcs_flash_controller_0+0xfb019954>
 401a9c8:	00bfffc4 	movi	r2,-1
 401a9cc:	003fe206 	br	401a958 <__alt_mem_epcs_flash_controller_0+0xfb019958>
 401a9d0:	800b883a 	mov	r5,r16
 401a9d4:	9009883a 	mov	r4,r18
 401a9d8:	40131800 	call	4013180 <__swsetup_r>
 401a9dc:	103ffa1e 	bne	r2,zero,401a9c8 <__alt_mem_epcs_flash_controller_0+0xfb0199c8>
 401a9e0:	8100030b 	ldhu	r4,12(r16)
 401a9e4:	80c00417 	ldw	r3,16(r16)
 401a9e8:	003fc506 	br	401a900 <__alt_mem_epcs_flash_controller_0+0xfb019900>
 401a9ec:	40151540 	call	4015154 <__sinit>
 401a9f0:	003fbc06 	br	401a8e4 <__alt_mem_epcs_flash_controller_0+0xfb0198e4>

0401a9f4 <__swbuf>:
 401a9f4:	008103f4 	movhi	r2,1039
 401a9f8:	108bf604 	addi	r2,r2,12248
 401a9fc:	280d883a 	mov	r6,r5
 401aa00:	200b883a 	mov	r5,r4
 401aa04:	11000017 	ldw	r4,0(r2)
 401aa08:	401a8b41 	jmpi	401a8b4 <__swbuf_r>

0401aa0c <_wcrtomb_r>:
 401aa0c:	defff604 	addi	sp,sp,-40
 401aa10:	008103f4 	movhi	r2,1039
 401aa14:	dc800815 	stw	r18,32(sp)
 401aa18:	dc400715 	stw	r17,28(sp)
 401aa1c:	dc000615 	stw	r16,24(sp)
 401aa20:	108bfa04 	addi	r2,r2,12264
 401aa24:	dfc00915 	stw	ra,36(sp)
 401aa28:	2021883a 	mov	r16,r4
 401aa2c:	3823883a 	mov	r17,r7
 401aa30:	14800017 	ldw	r18,0(r2)
 401aa34:	28001426 	beq	r5,zero,401aa88 <_wcrtomb_r+0x7c>
 401aa38:	d9400415 	stw	r5,16(sp)
 401aa3c:	d9800515 	stw	r6,20(sp)
 401aa40:	4015c980 	call	4015c98 <__locale_charset>
 401aa44:	d9800517 	ldw	r6,20(sp)
 401aa48:	d9400417 	ldw	r5,16(sp)
 401aa4c:	100f883a 	mov	r7,r2
 401aa50:	dc400015 	stw	r17,0(sp)
 401aa54:	8009883a 	mov	r4,r16
 401aa58:	903ee83a 	callr	r18
 401aa5c:	00ffffc4 	movi	r3,-1
 401aa60:	10c0031e 	bne	r2,r3,401aa70 <_wcrtomb_r+0x64>
 401aa64:	88000015 	stw	zero,0(r17)
 401aa68:	00c02284 	movi	r3,138
 401aa6c:	80c00015 	stw	r3,0(r16)
 401aa70:	dfc00917 	ldw	ra,36(sp)
 401aa74:	dc800817 	ldw	r18,32(sp)
 401aa78:	dc400717 	ldw	r17,28(sp)
 401aa7c:	dc000617 	ldw	r16,24(sp)
 401aa80:	dec00a04 	addi	sp,sp,40
 401aa84:	f800283a 	ret
 401aa88:	4015c980 	call	4015c98 <__locale_charset>
 401aa8c:	100f883a 	mov	r7,r2
 401aa90:	dc400015 	stw	r17,0(sp)
 401aa94:	000d883a 	mov	r6,zero
 401aa98:	d9400104 	addi	r5,sp,4
 401aa9c:	8009883a 	mov	r4,r16
 401aaa0:	903ee83a 	callr	r18
 401aaa4:	003fed06 	br	401aa5c <__alt_mem_epcs_flash_controller_0+0xfb019a5c>

0401aaa8 <wcrtomb>:
 401aaa8:	defff604 	addi	sp,sp,-40
 401aaac:	008103f4 	movhi	r2,1039
 401aab0:	dc800615 	stw	r18,24(sp)
 401aab4:	dc400515 	stw	r17,20(sp)
 401aab8:	108bf604 	addi	r2,r2,12248
 401aabc:	dfc00915 	stw	ra,36(sp)
 401aac0:	dd000815 	stw	r20,32(sp)
 401aac4:	dcc00715 	stw	r19,28(sp)
 401aac8:	dc000415 	stw	r16,16(sp)
 401aacc:	3025883a 	mov	r18,r6
 401aad0:	14400017 	ldw	r17,0(r2)
 401aad4:	20001926 	beq	r4,zero,401ab3c <wcrtomb+0x94>
 401aad8:	008103f4 	movhi	r2,1039
 401aadc:	108bfa04 	addi	r2,r2,12264
 401aae0:	15000017 	ldw	r20,0(r2)
 401aae4:	2021883a 	mov	r16,r4
 401aae8:	2827883a 	mov	r19,r5
 401aaec:	4015c980 	call	4015c98 <__locale_charset>
 401aaf0:	100f883a 	mov	r7,r2
 401aaf4:	dc800015 	stw	r18,0(sp)
 401aaf8:	980d883a 	mov	r6,r19
 401aafc:	800b883a 	mov	r5,r16
 401ab00:	8809883a 	mov	r4,r17
 401ab04:	a03ee83a 	callr	r20
 401ab08:	00ffffc4 	movi	r3,-1
 401ab0c:	10c0031e 	bne	r2,r3,401ab1c <wcrtomb+0x74>
 401ab10:	90000015 	stw	zero,0(r18)
 401ab14:	00c02284 	movi	r3,138
 401ab18:	88c00015 	stw	r3,0(r17)
 401ab1c:	dfc00917 	ldw	ra,36(sp)
 401ab20:	dd000817 	ldw	r20,32(sp)
 401ab24:	dcc00717 	ldw	r19,28(sp)
 401ab28:	dc800617 	ldw	r18,24(sp)
 401ab2c:	dc400517 	ldw	r17,20(sp)
 401ab30:	dc000417 	ldw	r16,16(sp)
 401ab34:	dec00a04 	addi	sp,sp,40
 401ab38:	f800283a 	ret
 401ab3c:	008103f4 	movhi	r2,1039
 401ab40:	108bfa04 	addi	r2,r2,12264
 401ab44:	14000017 	ldw	r16,0(r2)
 401ab48:	4015c980 	call	4015c98 <__locale_charset>
 401ab4c:	100f883a 	mov	r7,r2
 401ab50:	dc800015 	stw	r18,0(sp)
 401ab54:	000d883a 	mov	r6,zero
 401ab58:	d9400104 	addi	r5,sp,4
 401ab5c:	8809883a 	mov	r4,r17
 401ab60:	803ee83a 	callr	r16
 401ab64:	003fe806 	br	401ab08 <__alt_mem_epcs_flash_controller_0+0xfb019b08>

0401ab68 <__ascii_wctomb>:
 401ab68:	28000526 	beq	r5,zero,401ab80 <__ascii_wctomb+0x18>
 401ab6c:	00803fc4 	movi	r2,255
 401ab70:	11800536 	bltu	r2,r6,401ab88 <__ascii_wctomb+0x20>
 401ab74:	29800005 	stb	r6,0(r5)
 401ab78:	00800044 	movi	r2,1
 401ab7c:	f800283a 	ret
 401ab80:	0005883a 	mov	r2,zero
 401ab84:	f800283a 	ret
 401ab88:	00802284 	movi	r2,138
 401ab8c:	20800015 	stw	r2,0(r4)
 401ab90:	00bfffc4 	movi	r2,-1
 401ab94:	f800283a 	ret

0401ab98 <_wctomb_r>:
 401ab98:	008103f4 	movhi	r2,1039
 401ab9c:	defff904 	addi	sp,sp,-28
 401aba0:	108bfa04 	addi	r2,r2,12264
 401aba4:	dfc00615 	stw	ra,24(sp)
 401aba8:	dc400515 	stw	r17,20(sp)
 401abac:	dc000415 	stw	r16,16(sp)
 401abb0:	3823883a 	mov	r17,r7
 401abb4:	14000017 	ldw	r16,0(r2)
 401abb8:	d9000115 	stw	r4,4(sp)
 401abbc:	d9400215 	stw	r5,8(sp)
 401abc0:	d9800315 	stw	r6,12(sp)
 401abc4:	4015c980 	call	4015c98 <__locale_charset>
 401abc8:	d9800317 	ldw	r6,12(sp)
 401abcc:	d9400217 	ldw	r5,8(sp)
 401abd0:	d9000117 	ldw	r4,4(sp)
 401abd4:	100f883a 	mov	r7,r2
 401abd8:	dc400015 	stw	r17,0(sp)
 401abdc:	803ee83a 	callr	r16
 401abe0:	dfc00617 	ldw	ra,24(sp)
 401abe4:	dc400517 	ldw	r17,20(sp)
 401abe8:	dc000417 	ldw	r16,16(sp)
 401abec:	dec00704 	addi	sp,sp,28
 401abf0:	f800283a 	ret

0401abf4 <__udivdi3>:
 401abf4:	defff504 	addi	sp,sp,-44
 401abf8:	dcc00415 	stw	r19,16(sp)
 401abfc:	dc000115 	stw	r16,4(sp)
 401ac00:	dfc00a15 	stw	ra,40(sp)
 401ac04:	df000915 	stw	fp,36(sp)
 401ac08:	ddc00815 	stw	r23,32(sp)
 401ac0c:	dd800715 	stw	r22,28(sp)
 401ac10:	dd400615 	stw	r21,24(sp)
 401ac14:	dd000515 	stw	r20,20(sp)
 401ac18:	dc800315 	stw	r18,12(sp)
 401ac1c:	dc400215 	stw	r17,8(sp)
 401ac20:	2027883a 	mov	r19,r4
 401ac24:	2821883a 	mov	r16,r5
 401ac28:	3800411e 	bne	r7,zero,401ad30 <__udivdi3+0x13c>
 401ac2c:	3023883a 	mov	r17,r6
 401ac30:	2025883a 	mov	r18,r4
 401ac34:	2980522e 	bgeu	r5,r6,401ad80 <__udivdi3+0x18c>
 401ac38:	00bfffd4 	movui	r2,65535
 401ac3c:	282d883a 	mov	r22,r5
 401ac40:	1180a836 	bltu	r2,r6,401aee4 <__udivdi3+0x2f0>
 401ac44:	00803fc4 	movi	r2,255
 401ac48:	1185803a 	cmpltu	r2,r2,r6
 401ac4c:	100490fa 	slli	r2,r2,3
 401ac50:	3086d83a 	srl	r3,r6,r2
 401ac54:	01010234 	movhi	r4,1032
 401ac58:	2114e344 	addi	r4,r4,21389
 401ac5c:	20c7883a 	add	r3,r4,r3
 401ac60:	18c00003 	ldbu	r3,0(r3)
 401ac64:	1885883a 	add	r2,r3,r2
 401ac68:	00c00804 	movi	r3,32
 401ac6c:	1887c83a 	sub	r3,r3,r2
 401ac70:	18000526 	beq	r3,zero,401ac88 <__udivdi3+0x94>
 401ac74:	80e0983a 	sll	r16,r16,r3
 401ac78:	9884d83a 	srl	r2,r19,r2
 401ac7c:	30e2983a 	sll	r17,r6,r3
 401ac80:	98e4983a 	sll	r18,r19,r3
 401ac84:	142cb03a 	or	r22,r2,r16
 401ac88:	882ad43a 	srli	r21,r17,16
 401ac8c:	b009883a 	mov	r4,r22
 401ac90:	8d3fffcc 	andi	r20,r17,65535
 401ac94:	a80b883a 	mov	r5,r21
 401ac98:	400a1780 	call	400a178 <__umodsi3>
 401ac9c:	b009883a 	mov	r4,r22
 401aca0:	a80b883a 	mov	r5,r21
 401aca4:	1027883a 	mov	r19,r2
 401aca8:	400a1140 	call	400a114 <__udivsi3>
 401acac:	102d883a 	mov	r22,r2
 401acb0:	9826943a 	slli	r19,r19,16
 401acb4:	9004d43a 	srli	r2,r18,16
 401acb8:	a5a1383a 	mul	r16,r20,r22
 401acbc:	14c4b03a 	or	r2,r2,r19
 401acc0:	1400052e 	bgeu	r2,r16,401acd8 <__udivdi3+0xe4>
 401acc4:	1445883a 	add	r2,r2,r17
 401acc8:	b0ffffc4 	addi	r3,r22,-1
 401accc:	14400136 	bltu	r2,r17,401acd4 <__udivdi3+0xe0>
 401acd0:	14012336 	bltu	r2,r16,401b160 <__udivdi3+0x56c>
 401acd4:	182d883a 	mov	r22,r3
 401acd8:	1421c83a 	sub	r16,r2,r16
 401acdc:	a80b883a 	mov	r5,r21
 401ace0:	8009883a 	mov	r4,r16
 401ace4:	400a1780 	call	400a178 <__umodsi3>
 401ace8:	1027883a 	mov	r19,r2
 401acec:	a80b883a 	mov	r5,r21
 401acf0:	8009883a 	mov	r4,r16
 401acf4:	400a1140 	call	400a114 <__udivsi3>
 401acf8:	9826943a 	slli	r19,r19,16
 401acfc:	a0a9383a 	mul	r20,r20,r2
 401ad00:	94bfffcc 	andi	r18,r18,65535
 401ad04:	94e4b03a 	or	r18,r18,r19
 401ad08:	9500052e 	bgeu	r18,r20,401ad20 <__udivdi3+0x12c>
 401ad0c:	8ca5883a 	add	r18,r17,r18
 401ad10:	10ffffc4 	addi	r3,r2,-1
 401ad14:	9440f136 	bltu	r18,r17,401b0dc <__udivdi3+0x4e8>
 401ad18:	9500f02e 	bgeu	r18,r20,401b0dc <__udivdi3+0x4e8>
 401ad1c:	10bfff84 	addi	r2,r2,-2
 401ad20:	b00c943a 	slli	r6,r22,16
 401ad24:	0007883a 	mov	r3,zero
 401ad28:	3084b03a 	or	r2,r6,r2
 401ad2c:	00005906 	br	401ae94 <__udivdi3+0x2a0>
 401ad30:	29c05636 	bltu	r5,r7,401ae8c <__udivdi3+0x298>
 401ad34:	00bfffd4 	movui	r2,65535
 401ad38:	11c0622e 	bgeu	r2,r7,401aec4 <__udivdi3+0x2d0>
 401ad3c:	00804034 	movhi	r2,256
 401ad40:	10bfffc4 	addi	r2,r2,-1
 401ad44:	11c0ee36 	bltu	r2,r7,401b100 <__udivdi3+0x50c>
 401ad48:	00800404 	movi	r2,16
 401ad4c:	3886d83a 	srl	r3,r7,r2
 401ad50:	01010234 	movhi	r4,1032
 401ad54:	2114e344 	addi	r4,r4,21389
 401ad58:	20c7883a 	add	r3,r4,r3
 401ad5c:	18c00003 	ldbu	r3,0(r3)
 401ad60:	05400804 	movi	r21,32
 401ad64:	1885883a 	add	r2,r3,r2
 401ad68:	a8abc83a 	sub	r21,r21,r2
 401ad6c:	a800621e 	bne	r21,zero,401aef8 <__udivdi3+0x304>
 401ad70:	3c00e936 	bltu	r7,r16,401b118 <__udivdi3+0x524>
 401ad74:	9985403a 	cmpgeu	r2,r19,r6
 401ad78:	0007883a 	mov	r3,zero
 401ad7c:	00004506 	br	401ae94 <__udivdi3+0x2a0>
 401ad80:	3000041e 	bne	r6,zero,401ad94 <__udivdi3+0x1a0>
 401ad84:	000b883a 	mov	r5,zero
 401ad88:	01000044 	movi	r4,1
 401ad8c:	400a1140 	call	400a114 <__udivsi3>
 401ad90:	1023883a 	mov	r17,r2
 401ad94:	00bfffd4 	movui	r2,65535
 401ad98:	14404e2e 	bgeu	r2,r17,401aed4 <__udivdi3+0x2e0>
 401ad9c:	00804034 	movhi	r2,256
 401ada0:	10bfffc4 	addi	r2,r2,-1
 401ada4:	1440d836 	bltu	r2,r17,401b108 <__udivdi3+0x514>
 401ada8:	00800404 	movi	r2,16
 401adac:	8886d83a 	srl	r3,r17,r2
 401adb0:	01010234 	movhi	r4,1032
 401adb4:	2114e344 	addi	r4,r4,21389
 401adb8:	20c7883a 	add	r3,r4,r3
 401adbc:	18c00003 	ldbu	r3,0(r3)
 401adc0:	1885883a 	add	r2,r3,r2
 401adc4:	00c00804 	movi	r3,32
 401adc8:	1887c83a 	sub	r3,r3,r2
 401adcc:	18008f1e 	bne	r3,zero,401b00c <__udivdi3+0x418>
 401add0:	882ad43a 	srli	r21,r17,16
 401add4:	8461c83a 	sub	r16,r16,r17
 401add8:	8d3fffcc 	andi	r20,r17,65535
 401addc:	00c00044 	movi	r3,1
 401ade0:	8009883a 	mov	r4,r16
 401ade4:	a80b883a 	mov	r5,r21
 401ade8:	d8c00015 	stw	r3,0(sp)
 401adec:	400a1780 	call	400a178 <__umodsi3>
 401adf0:	8009883a 	mov	r4,r16
 401adf4:	a80b883a 	mov	r5,r21
 401adf8:	1027883a 	mov	r19,r2
 401adfc:	400a1140 	call	400a114 <__udivsi3>
 401ae00:	9826943a 	slli	r19,r19,16
 401ae04:	9008d43a 	srli	r4,r18,16
 401ae08:	1521383a 	mul	r16,r2,r20
 401ae0c:	102d883a 	mov	r22,r2
 401ae10:	24c8b03a 	or	r4,r4,r19
 401ae14:	d8c00017 	ldw	r3,0(sp)
 401ae18:	2400052e 	bgeu	r4,r16,401ae30 <__udivdi3+0x23c>
 401ae1c:	2449883a 	add	r4,r4,r17
 401ae20:	b0bfffc4 	addi	r2,r22,-1
 401ae24:	24400136 	bltu	r4,r17,401ae2c <__udivdi3+0x238>
 401ae28:	2400ca36 	bltu	r4,r16,401b154 <__udivdi3+0x560>
 401ae2c:	102d883a 	mov	r22,r2
 401ae30:	2421c83a 	sub	r16,r4,r16
 401ae34:	a80b883a 	mov	r5,r21
 401ae38:	8009883a 	mov	r4,r16
 401ae3c:	d8c00015 	stw	r3,0(sp)
 401ae40:	400a1780 	call	400a178 <__umodsi3>
 401ae44:	1027883a 	mov	r19,r2
 401ae48:	a80b883a 	mov	r5,r21
 401ae4c:	8009883a 	mov	r4,r16
 401ae50:	400a1140 	call	400a114 <__udivsi3>
 401ae54:	9826943a 	slli	r19,r19,16
 401ae58:	1529383a 	mul	r20,r2,r20
 401ae5c:	94bfffcc 	andi	r18,r18,65535
 401ae60:	94e4b03a 	or	r18,r18,r19
 401ae64:	d8c00017 	ldw	r3,0(sp)
 401ae68:	9500052e 	bgeu	r18,r20,401ae80 <__udivdi3+0x28c>
 401ae6c:	8ca5883a 	add	r18,r17,r18
 401ae70:	113fffc4 	addi	r4,r2,-1
 401ae74:	94409736 	bltu	r18,r17,401b0d4 <__udivdi3+0x4e0>
 401ae78:	9500962e 	bgeu	r18,r20,401b0d4 <__udivdi3+0x4e0>
 401ae7c:	10bfff84 	addi	r2,r2,-2
 401ae80:	b00c943a 	slli	r6,r22,16
 401ae84:	3084b03a 	or	r2,r6,r2
 401ae88:	00000206 	br	401ae94 <__udivdi3+0x2a0>
 401ae8c:	0007883a 	mov	r3,zero
 401ae90:	0005883a 	mov	r2,zero
 401ae94:	dfc00a17 	ldw	ra,40(sp)
 401ae98:	df000917 	ldw	fp,36(sp)
 401ae9c:	ddc00817 	ldw	r23,32(sp)
 401aea0:	dd800717 	ldw	r22,28(sp)
 401aea4:	dd400617 	ldw	r21,24(sp)
 401aea8:	dd000517 	ldw	r20,20(sp)
 401aeac:	dcc00417 	ldw	r19,16(sp)
 401aeb0:	dc800317 	ldw	r18,12(sp)
 401aeb4:	dc400217 	ldw	r17,8(sp)
 401aeb8:	dc000117 	ldw	r16,4(sp)
 401aebc:	dec00b04 	addi	sp,sp,44
 401aec0:	f800283a 	ret
 401aec4:	00803fc4 	movi	r2,255
 401aec8:	11c5803a 	cmpltu	r2,r2,r7
 401aecc:	100490fa 	slli	r2,r2,3
 401aed0:	003f9e06 	br	401ad4c <__alt_mem_epcs_flash_controller_0+0xfb019d4c>
 401aed4:	00803fc4 	movi	r2,255
 401aed8:	1445803a 	cmpltu	r2,r2,r17
 401aedc:	100490fa 	slli	r2,r2,3
 401aee0:	003fb206 	br	401adac <__alt_mem_epcs_flash_controller_0+0xfb019dac>
 401aee4:	00804034 	movhi	r2,256
 401aee8:	10bfffc4 	addi	r2,r2,-1
 401aeec:	11808836 	bltu	r2,r6,401b110 <__udivdi3+0x51c>
 401aef0:	00800404 	movi	r2,16
 401aef4:	003f5606 	br	401ac50 <__alt_mem_epcs_flash_controller_0+0xfb019c50>
 401aef8:	30aed83a 	srl	r23,r6,r2
 401aefc:	3d4e983a 	sll	r7,r7,r21
 401af00:	80acd83a 	srl	r22,r16,r2
 401af04:	9884d83a 	srl	r2,r19,r2
 401af08:	3deeb03a 	or	r23,r7,r23
 401af0c:	b824d43a 	srli	r18,r23,16
 401af10:	8560983a 	sll	r16,r16,r21
 401af14:	b009883a 	mov	r4,r22
 401af18:	900b883a 	mov	r5,r18
 401af1c:	3568983a 	sll	r20,r6,r21
 401af20:	1420b03a 	or	r16,r2,r16
 401af24:	400a1780 	call	400a178 <__umodsi3>
 401af28:	b009883a 	mov	r4,r22
 401af2c:	900b883a 	mov	r5,r18
 401af30:	1023883a 	mov	r17,r2
 401af34:	400a1140 	call	400a114 <__udivsi3>
 401af38:	8808943a 	slli	r4,r17,16
 401af3c:	bf3fffcc 	andi	fp,r23,65535
 401af40:	8006d43a 	srli	r3,r16,16
 401af44:	e0a3383a 	mul	r17,fp,r2
 401af48:	100d883a 	mov	r6,r2
 401af4c:	1906b03a 	or	r3,r3,r4
 401af50:	1c40042e 	bgeu	r3,r17,401af64 <__udivdi3+0x370>
 401af54:	1dc7883a 	add	r3,r3,r23
 401af58:	10bfffc4 	addi	r2,r2,-1
 401af5c:	1dc0752e 	bgeu	r3,r23,401b134 <__udivdi3+0x540>
 401af60:	100d883a 	mov	r6,r2
 401af64:	1c63c83a 	sub	r17,r3,r17
 401af68:	900b883a 	mov	r5,r18
 401af6c:	8809883a 	mov	r4,r17
 401af70:	d9800015 	stw	r6,0(sp)
 401af74:	400a1780 	call	400a178 <__umodsi3>
 401af78:	102d883a 	mov	r22,r2
 401af7c:	8809883a 	mov	r4,r17
 401af80:	900b883a 	mov	r5,r18
 401af84:	400a1140 	call	400a114 <__udivsi3>
 401af88:	b02c943a 	slli	r22,r22,16
 401af8c:	e089383a 	mul	r4,fp,r2
 401af90:	843fffcc 	andi	r16,r16,65535
 401af94:	85a0b03a 	or	r16,r16,r22
 401af98:	d9800017 	ldw	r6,0(sp)
 401af9c:	8100042e 	bgeu	r16,r4,401afb0 <__udivdi3+0x3bc>
 401afa0:	85e1883a 	add	r16,r16,r23
 401afa4:	10ffffc4 	addi	r3,r2,-1
 401afa8:	85c05e2e 	bgeu	r16,r23,401b124 <__udivdi3+0x530>
 401afac:	1805883a 	mov	r2,r3
 401afb0:	300c943a 	slli	r6,r6,16
 401afb4:	a17fffcc 	andi	r5,r20,65535
 401afb8:	a028d43a 	srli	r20,r20,16
 401afbc:	3084b03a 	or	r2,r6,r2
 401afc0:	10ffffcc 	andi	r3,r2,65535
 401afc4:	100cd43a 	srli	r6,r2,16
 401afc8:	194f383a 	mul	r7,r3,r5
 401afcc:	1d07383a 	mul	r3,r3,r20
 401afd0:	314b383a 	mul	r5,r6,r5
 401afd4:	3810d43a 	srli	r8,r7,16
 401afd8:	8121c83a 	sub	r16,r16,r4
 401afdc:	1947883a 	add	r3,r3,r5
 401afe0:	40c7883a 	add	r3,r8,r3
 401afe4:	350d383a 	mul	r6,r6,r20
 401afe8:	1940022e 	bgeu	r3,r5,401aff4 <__udivdi3+0x400>
 401afec:	01000074 	movhi	r4,1
 401aff0:	310d883a 	add	r6,r6,r4
 401aff4:	1828d43a 	srli	r20,r3,16
 401aff8:	a18d883a 	add	r6,r20,r6
 401affc:	81803e36 	bltu	r16,r6,401b0f8 <__udivdi3+0x504>
 401b000:	81803826 	beq	r16,r6,401b0e4 <__udivdi3+0x4f0>
 401b004:	0007883a 	mov	r3,zero
 401b008:	003fa206 	br	401ae94 <__alt_mem_epcs_flash_controller_0+0xfb019e94>
 401b00c:	88e2983a 	sll	r17,r17,r3
 401b010:	80a8d83a 	srl	r20,r16,r2
 401b014:	80e0983a 	sll	r16,r16,r3
 401b018:	882ad43a 	srli	r21,r17,16
 401b01c:	9884d83a 	srl	r2,r19,r2
 401b020:	a009883a 	mov	r4,r20
 401b024:	a80b883a 	mov	r5,r21
 401b028:	142eb03a 	or	r23,r2,r16
 401b02c:	98e4983a 	sll	r18,r19,r3
 401b030:	400a1780 	call	400a178 <__umodsi3>
 401b034:	a009883a 	mov	r4,r20
 401b038:	a80b883a 	mov	r5,r21
 401b03c:	1021883a 	mov	r16,r2
 401b040:	400a1140 	call	400a114 <__udivsi3>
 401b044:	1039883a 	mov	fp,r2
 401b048:	8d3fffcc 	andi	r20,r17,65535
 401b04c:	8020943a 	slli	r16,r16,16
 401b050:	b804d43a 	srli	r2,r23,16
 401b054:	a72d383a 	mul	r22,r20,fp
 401b058:	1404b03a 	or	r2,r2,r16
 401b05c:	1580062e 	bgeu	r2,r22,401b078 <__udivdi3+0x484>
 401b060:	1445883a 	add	r2,r2,r17
 401b064:	e0ffffc4 	addi	r3,fp,-1
 401b068:	14403836 	bltu	r2,r17,401b14c <__udivdi3+0x558>
 401b06c:	1580372e 	bgeu	r2,r22,401b14c <__udivdi3+0x558>
 401b070:	e73fff84 	addi	fp,fp,-2
 401b074:	1445883a 	add	r2,r2,r17
 401b078:	15adc83a 	sub	r22,r2,r22
 401b07c:	a80b883a 	mov	r5,r21
 401b080:	b009883a 	mov	r4,r22
 401b084:	400a1780 	call	400a178 <__umodsi3>
 401b088:	1027883a 	mov	r19,r2
 401b08c:	b009883a 	mov	r4,r22
 401b090:	a80b883a 	mov	r5,r21
 401b094:	400a1140 	call	400a114 <__udivsi3>
 401b098:	9826943a 	slli	r19,r19,16
 401b09c:	a0a1383a 	mul	r16,r20,r2
 401b0a0:	b93fffcc 	andi	r4,r23,65535
 401b0a4:	24c8b03a 	or	r4,r4,r19
 401b0a8:	2400062e 	bgeu	r4,r16,401b0c4 <__udivdi3+0x4d0>
 401b0ac:	2449883a 	add	r4,r4,r17
 401b0b0:	10ffffc4 	addi	r3,r2,-1
 401b0b4:	24402336 	bltu	r4,r17,401b144 <__udivdi3+0x550>
 401b0b8:	2400222e 	bgeu	r4,r16,401b144 <__udivdi3+0x550>
 401b0bc:	10bfff84 	addi	r2,r2,-2
 401b0c0:	2449883a 	add	r4,r4,r17
 401b0c4:	e038943a 	slli	fp,fp,16
 401b0c8:	2421c83a 	sub	r16,r4,r16
 401b0cc:	e086b03a 	or	r3,fp,r2
 401b0d0:	003f4306 	br	401ade0 <__alt_mem_epcs_flash_controller_0+0xfb019de0>
 401b0d4:	2005883a 	mov	r2,r4
 401b0d8:	003f6906 	br	401ae80 <__alt_mem_epcs_flash_controller_0+0xfb019e80>
 401b0dc:	1805883a 	mov	r2,r3
 401b0e0:	003f0f06 	br	401ad20 <__alt_mem_epcs_flash_controller_0+0xfb019d20>
 401b0e4:	1806943a 	slli	r3,r3,16
 401b0e8:	9d66983a 	sll	r19,r19,r21
 401b0ec:	39ffffcc 	andi	r7,r7,65535
 401b0f0:	19c7883a 	add	r3,r3,r7
 401b0f4:	98ffc32e 	bgeu	r19,r3,401b004 <__alt_mem_epcs_flash_controller_0+0xfb01a004>
 401b0f8:	10bfffc4 	addi	r2,r2,-1
 401b0fc:	003fc106 	br	401b004 <__alt_mem_epcs_flash_controller_0+0xfb01a004>
 401b100:	00800604 	movi	r2,24
 401b104:	003f1106 	br	401ad4c <__alt_mem_epcs_flash_controller_0+0xfb019d4c>
 401b108:	00800604 	movi	r2,24
 401b10c:	003f2706 	br	401adac <__alt_mem_epcs_flash_controller_0+0xfb019dac>
 401b110:	00800604 	movi	r2,24
 401b114:	003ece06 	br	401ac50 <__alt_mem_epcs_flash_controller_0+0xfb019c50>
 401b118:	0007883a 	mov	r3,zero
 401b11c:	00800044 	movi	r2,1
 401b120:	003f5c06 	br	401ae94 <__alt_mem_epcs_flash_controller_0+0xfb019e94>
 401b124:	813fa12e 	bgeu	r16,r4,401afac <__alt_mem_epcs_flash_controller_0+0xfb019fac>
 401b128:	10bfff84 	addi	r2,r2,-2
 401b12c:	85e1883a 	add	r16,r16,r23
 401b130:	003f9f06 	br	401afb0 <__alt_mem_epcs_flash_controller_0+0xfb019fb0>
 401b134:	1c7f8a2e 	bgeu	r3,r17,401af60 <__alt_mem_epcs_flash_controller_0+0xfb019f60>
 401b138:	31bfff84 	addi	r6,r6,-2
 401b13c:	1dc7883a 	add	r3,r3,r23
 401b140:	003f8806 	br	401af64 <__alt_mem_epcs_flash_controller_0+0xfb019f64>
 401b144:	1805883a 	mov	r2,r3
 401b148:	003fde06 	br	401b0c4 <__alt_mem_epcs_flash_controller_0+0xfb01a0c4>
 401b14c:	1839883a 	mov	fp,r3
 401b150:	003fc906 	br	401b078 <__alt_mem_epcs_flash_controller_0+0xfb01a078>
 401b154:	b5bfff84 	addi	r22,r22,-2
 401b158:	2449883a 	add	r4,r4,r17
 401b15c:	003f3406 	br	401ae30 <__alt_mem_epcs_flash_controller_0+0xfb019e30>
 401b160:	b5bfff84 	addi	r22,r22,-2
 401b164:	1445883a 	add	r2,r2,r17
 401b168:	003edb06 	br	401acd8 <__alt_mem_epcs_flash_controller_0+0xfb019cd8>

0401b16c <__umoddi3>:
 401b16c:	defff404 	addi	sp,sp,-48
 401b170:	df000a15 	stw	fp,40(sp)
 401b174:	dc400315 	stw	r17,12(sp)
 401b178:	dc000215 	stw	r16,8(sp)
 401b17c:	dfc00b15 	stw	ra,44(sp)
 401b180:	ddc00915 	stw	r23,36(sp)
 401b184:	dd800815 	stw	r22,32(sp)
 401b188:	dd400715 	stw	r21,28(sp)
 401b18c:	dd000615 	stw	r20,24(sp)
 401b190:	dcc00515 	stw	r19,20(sp)
 401b194:	dc800415 	stw	r18,16(sp)
 401b198:	2021883a 	mov	r16,r4
 401b19c:	2823883a 	mov	r17,r5
 401b1a0:	2839883a 	mov	fp,r5
 401b1a4:	38003c1e 	bne	r7,zero,401b298 <__umoddi3+0x12c>
 401b1a8:	3027883a 	mov	r19,r6
 401b1ac:	2029883a 	mov	r20,r4
 401b1b0:	2980512e 	bgeu	r5,r6,401b2f8 <__umoddi3+0x18c>
 401b1b4:	00bfffd4 	movui	r2,65535
 401b1b8:	11809a36 	bltu	r2,r6,401b424 <__umoddi3+0x2b8>
 401b1bc:	01003fc4 	movi	r4,255
 401b1c0:	2189803a 	cmpltu	r4,r4,r6
 401b1c4:	200890fa 	slli	r4,r4,3
 401b1c8:	3104d83a 	srl	r2,r6,r4
 401b1cc:	00c10234 	movhi	r3,1032
 401b1d0:	18d4e344 	addi	r3,r3,21389
 401b1d4:	1885883a 	add	r2,r3,r2
 401b1d8:	10c00003 	ldbu	r3,0(r2)
 401b1dc:	00800804 	movi	r2,32
 401b1e0:	1909883a 	add	r4,r3,r4
 401b1e4:	1125c83a 	sub	r18,r2,r4
 401b1e8:	90000526 	beq	r18,zero,401b200 <__umoddi3+0x94>
 401b1ec:	8ca2983a 	sll	r17,r17,r18
 401b1f0:	8108d83a 	srl	r4,r16,r4
 401b1f4:	34a6983a 	sll	r19,r6,r18
 401b1f8:	84a8983a 	sll	r20,r16,r18
 401b1fc:	2478b03a 	or	fp,r4,r17
 401b200:	982ed43a 	srli	r23,r19,16
 401b204:	e009883a 	mov	r4,fp
 401b208:	9dbfffcc 	andi	r22,r19,65535
 401b20c:	b80b883a 	mov	r5,r23
 401b210:	400a1780 	call	400a178 <__umodsi3>
 401b214:	e009883a 	mov	r4,fp
 401b218:	b80b883a 	mov	r5,r23
 401b21c:	102b883a 	mov	r21,r2
 401b220:	400a1140 	call	400a114 <__udivsi3>
 401b224:	a806943a 	slli	r3,r21,16
 401b228:	a008d43a 	srli	r4,r20,16
 401b22c:	b085383a 	mul	r2,r22,r2
 401b230:	20c8b03a 	or	r4,r4,r3
 401b234:	2080032e 	bgeu	r4,r2,401b244 <__umoddi3+0xd8>
 401b238:	24c9883a 	add	r4,r4,r19
 401b23c:	24c00136 	bltu	r4,r19,401b244 <__umoddi3+0xd8>
 401b240:	20811036 	bltu	r4,r2,401b684 <__umoddi3+0x518>
 401b244:	20abc83a 	sub	r21,r4,r2
 401b248:	b80b883a 	mov	r5,r23
 401b24c:	a809883a 	mov	r4,r21
 401b250:	400a1780 	call	400a178 <__umodsi3>
 401b254:	1023883a 	mov	r17,r2
 401b258:	b80b883a 	mov	r5,r23
 401b25c:	a809883a 	mov	r4,r21
 401b260:	400a1140 	call	400a114 <__udivsi3>
 401b264:	8822943a 	slli	r17,r17,16
 401b268:	b085383a 	mul	r2,r22,r2
 401b26c:	a0ffffcc 	andi	r3,r20,65535
 401b270:	1c46b03a 	or	r3,r3,r17
 401b274:	1880042e 	bgeu	r3,r2,401b288 <__umoddi3+0x11c>
 401b278:	1cc7883a 	add	r3,r3,r19
 401b27c:	1cc00236 	bltu	r3,r19,401b288 <__umoddi3+0x11c>
 401b280:	1880012e 	bgeu	r3,r2,401b288 <__umoddi3+0x11c>
 401b284:	1cc7883a 	add	r3,r3,r19
 401b288:	1885c83a 	sub	r2,r3,r2
 401b28c:	1484d83a 	srl	r2,r2,r18
 401b290:	0007883a 	mov	r3,zero
 401b294:	00004f06 	br	401b3d4 <__umoddi3+0x268>
 401b298:	29c04c36 	bltu	r5,r7,401b3cc <__umoddi3+0x260>
 401b29c:	00bfffd4 	movui	r2,65535
 401b2a0:	11c0582e 	bgeu	r2,r7,401b404 <__umoddi3+0x298>
 401b2a4:	00804034 	movhi	r2,256
 401b2a8:	10bfffc4 	addi	r2,r2,-1
 401b2ac:	11c0e736 	bltu	r2,r7,401b64c <__umoddi3+0x4e0>
 401b2b0:	01000404 	movi	r4,16
 401b2b4:	3904d83a 	srl	r2,r7,r4
 401b2b8:	00c10234 	movhi	r3,1032
 401b2bc:	18d4e344 	addi	r3,r3,21389
 401b2c0:	1885883a 	add	r2,r3,r2
 401b2c4:	14c00003 	ldbu	r19,0(r2)
 401b2c8:	00c00804 	movi	r3,32
 401b2cc:	9927883a 	add	r19,r19,r4
 401b2d0:	1ce9c83a 	sub	r20,r3,r19
 401b2d4:	a000581e 	bne	r20,zero,401b438 <__umoddi3+0x2cc>
 401b2d8:	3c400136 	bltu	r7,r17,401b2e0 <__umoddi3+0x174>
 401b2dc:	8180eb36 	bltu	r16,r6,401b68c <__umoddi3+0x520>
 401b2e0:	8185c83a 	sub	r2,r16,r6
 401b2e4:	89e3c83a 	sub	r17,r17,r7
 401b2e8:	8089803a 	cmpltu	r4,r16,r2
 401b2ec:	8939c83a 	sub	fp,r17,r4
 401b2f0:	e007883a 	mov	r3,fp
 401b2f4:	00003706 	br	401b3d4 <__umoddi3+0x268>
 401b2f8:	3000041e 	bne	r6,zero,401b30c <__umoddi3+0x1a0>
 401b2fc:	000b883a 	mov	r5,zero
 401b300:	01000044 	movi	r4,1
 401b304:	400a1140 	call	400a114 <__udivsi3>
 401b308:	1027883a 	mov	r19,r2
 401b30c:	00bfffd4 	movui	r2,65535
 401b310:	14c0402e 	bgeu	r2,r19,401b414 <__umoddi3+0x2a8>
 401b314:	00804034 	movhi	r2,256
 401b318:	10bfffc4 	addi	r2,r2,-1
 401b31c:	14c0cd36 	bltu	r2,r19,401b654 <__umoddi3+0x4e8>
 401b320:	00800404 	movi	r2,16
 401b324:	9886d83a 	srl	r3,r19,r2
 401b328:	01010234 	movhi	r4,1032
 401b32c:	2114e344 	addi	r4,r4,21389
 401b330:	20c7883a 	add	r3,r4,r3
 401b334:	18c00003 	ldbu	r3,0(r3)
 401b338:	1887883a 	add	r3,r3,r2
 401b33c:	00800804 	movi	r2,32
 401b340:	10e5c83a 	sub	r18,r2,r3
 401b344:	9000901e 	bne	r18,zero,401b588 <__umoddi3+0x41c>
 401b348:	982cd43a 	srli	r22,r19,16
 401b34c:	8ce3c83a 	sub	r17,r17,r19
 401b350:	9d7fffcc 	andi	r21,r19,65535
 401b354:	b00b883a 	mov	r5,r22
 401b358:	8809883a 	mov	r4,r17
 401b35c:	400a1780 	call	400a178 <__umodsi3>
 401b360:	8809883a 	mov	r4,r17
 401b364:	b00b883a 	mov	r5,r22
 401b368:	1021883a 	mov	r16,r2
 401b36c:	400a1140 	call	400a114 <__udivsi3>
 401b370:	8006943a 	slli	r3,r16,16
 401b374:	a008d43a 	srli	r4,r20,16
 401b378:	1545383a 	mul	r2,r2,r21
 401b37c:	20c8b03a 	or	r4,r4,r3
 401b380:	2080042e 	bgeu	r4,r2,401b394 <__umoddi3+0x228>
 401b384:	24c9883a 	add	r4,r4,r19
 401b388:	24c00236 	bltu	r4,r19,401b394 <__umoddi3+0x228>
 401b38c:	2080012e 	bgeu	r4,r2,401b394 <__umoddi3+0x228>
 401b390:	24c9883a 	add	r4,r4,r19
 401b394:	20a1c83a 	sub	r16,r4,r2
 401b398:	b00b883a 	mov	r5,r22
 401b39c:	8009883a 	mov	r4,r16
 401b3a0:	400a1780 	call	400a178 <__umodsi3>
 401b3a4:	1023883a 	mov	r17,r2
 401b3a8:	b00b883a 	mov	r5,r22
 401b3ac:	8009883a 	mov	r4,r16
 401b3b0:	400a1140 	call	400a114 <__udivsi3>
 401b3b4:	8822943a 	slli	r17,r17,16
 401b3b8:	1545383a 	mul	r2,r2,r21
 401b3bc:	a53fffcc 	andi	r20,r20,65535
 401b3c0:	a446b03a 	or	r3,r20,r17
 401b3c4:	18bfb02e 	bgeu	r3,r2,401b288 <__alt_mem_epcs_flash_controller_0+0xfb01a288>
 401b3c8:	003fab06 	br	401b278 <__alt_mem_epcs_flash_controller_0+0xfb01a278>
 401b3cc:	2005883a 	mov	r2,r4
 401b3d0:	2807883a 	mov	r3,r5
 401b3d4:	dfc00b17 	ldw	ra,44(sp)
 401b3d8:	df000a17 	ldw	fp,40(sp)
 401b3dc:	ddc00917 	ldw	r23,36(sp)
 401b3e0:	dd800817 	ldw	r22,32(sp)
 401b3e4:	dd400717 	ldw	r21,28(sp)
 401b3e8:	dd000617 	ldw	r20,24(sp)
 401b3ec:	dcc00517 	ldw	r19,20(sp)
 401b3f0:	dc800417 	ldw	r18,16(sp)
 401b3f4:	dc400317 	ldw	r17,12(sp)
 401b3f8:	dc000217 	ldw	r16,8(sp)
 401b3fc:	dec00c04 	addi	sp,sp,48
 401b400:	f800283a 	ret
 401b404:	04c03fc4 	movi	r19,255
 401b408:	99c9803a 	cmpltu	r4,r19,r7
 401b40c:	200890fa 	slli	r4,r4,3
 401b410:	003fa806 	br	401b2b4 <__alt_mem_epcs_flash_controller_0+0xfb01a2b4>
 401b414:	00803fc4 	movi	r2,255
 401b418:	14c5803a 	cmpltu	r2,r2,r19
 401b41c:	100490fa 	slli	r2,r2,3
 401b420:	003fc006 	br	401b324 <__alt_mem_epcs_flash_controller_0+0xfb01a324>
 401b424:	00804034 	movhi	r2,256
 401b428:	10bfffc4 	addi	r2,r2,-1
 401b42c:	11808b36 	bltu	r2,r6,401b65c <__umoddi3+0x4f0>
 401b430:	01000404 	movi	r4,16
 401b434:	003f6406 	br	401b1c8 <__alt_mem_epcs_flash_controller_0+0xfb01a1c8>
 401b438:	34c4d83a 	srl	r2,r6,r19
 401b43c:	3d0e983a 	sll	r7,r7,r20
 401b440:	8cf8d83a 	srl	fp,r17,r19
 401b444:	8d10983a 	sll	r8,r17,r20
 401b448:	38aab03a 	or	r21,r7,r2
 401b44c:	a82cd43a 	srli	r22,r21,16
 401b450:	84e2d83a 	srl	r17,r16,r19
 401b454:	e009883a 	mov	r4,fp
 401b458:	b00b883a 	mov	r5,r22
 401b45c:	8a22b03a 	or	r17,r17,r8
 401b460:	3524983a 	sll	r18,r6,r20
 401b464:	400a1780 	call	400a178 <__umodsi3>
 401b468:	e009883a 	mov	r4,fp
 401b46c:	b00b883a 	mov	r5,r22
 401b470:	102f883a 	mov	r23,r2
 401b474:	400a1140 	call	400a114 <__udivsi3>
 401b478:	100d883a 	mov	r6,r2
 401b47c:	b808943a 	slli	r4,r23,16
 401b480:	aa3fffcc 	andi	r8,r21,65535
 401b484:	8804d43a 	srli	r2,r17,16
 401b488:	41af383a 	mul	r23,r8,r6
 401b48c:	8520983a 	sll	r16,r16,r20
 401b490:	1104b03a 	or	r2,r2,r4
 401b494:	15c0042e 	bgeu	r2,r23,401b4a8 <__umoddi3+0x33c>
 401b498:	1545883a 	add	r2,r2,r21
 401b49c:	30ffffc4 	addi	r3,r6,-1
 401b4a0:	1540742e 	bgeu	r2,r21,401b674 <__umoddi3+0x508>
 401b4a4:	180d883a 	mov	r6,r3
 401b4a8:	15efc83a 	sub	r23,r2,r23
 401b4ac:	b00b883a 	mov	r5,r22
 401b4b0:	b809883a 	mov	r4,r23
 401b4b4:	d9800115 	stw	r6,4(sp)
 401b4b8:	da000015 	stw	r8,0(sp)
 401b4bc:	400a1780 	call	400a178 <__umodsi3>
 401b4c0:	b00b883a 	mov	r5,r22
 401b4c4:	b809883a 	mov	r4,r23
 401b4c8:	1039883a 	mov	fp,r2
 401b4cc:	400a1140 	call	400a114 <__udivsi3>
 401b4d0:	da000017 	ldw	r8,0(sp)
 401b4d4:	e038943a 	slli	fp,fp,16
 401b4d8:	100b883a 	mov	r5,r2
 401b4dc:	4089383a 	mul	r4,r8,r2
 401b4e0:	8a3fffcc 	andi	r8,r17,65535
 401b4e4:	4710b03a 	or	r8,r8,fp
 401b4e8:	d9800117 	ldw	r6,4(sp)
 401b4ec:	4100042e 	bgeu	r8,r4,401b500 <__umoddi3+0x394>
 401b4f0:	4551883a 	add	r8,r8,r21
 401b4f4:	10bfffc4 	addi	r2,r2,-1
 401b4f8:	45405a2e 	bgeu	r8,r21,401b664 <__umoddi3+0x4f8>
 401b4fc:	100b883a 	mov	r5,r2
 401b500:	300c943a 	slli	r6,r6,16
 401b504:	91ffffcc 	andi	r7,r18,65535
 401b508:	9004d43a 	srli	r2,r18,16
 401b50c:	314cb03a 	or	r6,r6,r5
 401b510:	317fffcc 	andi	r5,r6,65535
 401b514:	300cd43a 	srli	r6,r6,16
 401b518:	29d3383a 	mul	r9,r5,r7
 401b51c:	288b383a 	mul	r5,r5,r2
 401b520:	31cf383a 	mul	r7,r6,r7
 401b524:	4806d43a 	srli	r3,r9,16
 401b528:	4111c83a 	sub	r8,r8,r4
 401b52c:	29cb883a 	add	r5,r5,r7
 401b530:	194b883a 	add	r5,r3,r5
 401b534:	3085383a 	mul	r2,r6,r2
 401b538:	29c0022e 	bgeu	r5,r7,401b544 <__umoddi3+0x3d8>
 401b53c:	00c00074 	movhi	r3,1
 401b540:	10c5883a 	add	r2,r2,r3
 401b544:	2808d43a 	srli	r4,r5,16
 401b548:	280a943a 	slli	r5,r5,16
 401b54c:	4a7fffcc 	andi	r9,r9,65535
 401b550:	2085883a 	add	r2,r4,r2
 401b554:	2a4b883a 	add	r5,r5,r9
 401b558:	40803636 	bltu	r8,r2,401b634 <__umoddi3+0x4c8>
 401b55c:	40804d26 	beq	r8,r2,401b694 <__umoddi3+0x528>
 401b560:	4089c83a 	sub	r4,r8,r2
 401b564:	280f883a 	mov	r7,r5
 401b568:	81cfc83a 	sub	r7,r16,r7
 401b56c:	81c7803a 	cmpltu	r3,r16,r7
 401b570:	20c7c83a 	sub	r3,r4,r3
 401b574:	1cc4983a 	sll	r2,r3,r19
 401b578:	3d0ed83a 	srl	r7,r7,r20
 401b57c:	1d06d83a 	srl	r3,r3,r20
 401b580:	11c4b03a 	or	r2,r2,r7
 401b584:	003f9306 	br	401b3d4 <__alt_mem_epcs_flash_controller_0+0xfb01a3d4>
 401b588:	9ca6983a 	sll	r19,r19,r18
 401b58c:	88e8d83a 	srl	r20,r17,r3
 401b590:	80c4d83a 	srl	r2,r16,r3
 401b594:	982cd43a 	srli	r22,r19,16
 401b598:	8ca2983a 	sll	r17,r17,r18
 401b59c:	a009883a 	mov	r4,r20
 401b5a0:	b00b883a 	mov	r5,r22
 401b5a4:	1478b03a 	or	fp,r2,r17
 401b5a8:	400a1780 	call	400a178 <__umodsi3>
 401b5ac:	a009883a 	mov	r4,r20
 401b5b0:	b00b883a 	mov	r5,r22
 401b5b4:	1023883a 	mov	r17,r2
 401b5b8:	400a1140 	call	400a114 <__udivsi3>
 401b5bc:	9d7fffcc 	andi	r21,r19,65535
 401b5c0:	880a943a 	slli	r5,r17,16
 401b5c4:	e008d43a 	srli	r4,fp,16
 401b5c8:	a885383a 	mul	r2,r21,r2
 401b5cc:	84a8983a 	sll	r20,r16,r18
 401b5d0:	2148b03a 	or	r4,r4,r5
 401b5d4:	2080042e 	bgeu	r4,r2,401b5e8 <__umoddi3+0x47c>
 401b5d8:	24c9883a 	add	r4,r4,r19
 401b5dc:	24c00236 	bltu	r4,r19,401b5e8 <__umoddi3+0x47c>
 401b5e0:	2080012e 	bgeu	r4,r2,401b5e8 <__umoddi3+0x47c>
 401b5e4:	24c9883a 	add	r4,r4,r19
 401b5e8:	20a3c83a 	sub	r17,r4,r2
 401b5ec:	b00b883a 	mov	r5,r22
 401b5f0:	8809883a 	mov	r4,r17
 401b5f4:	400a1780 	call	400a178 <__umodsi3>
 401b5f8:	102f883a 	mov	r23,r2
 401b5fc:	8809883a 	mov	r4,r17
 401b600:	b00b883a 	mov	r5,r22
 401b604:	400a1140 	call	400a114 <__udivsi3>
 401b608:	b82e943a 	slli	r23,r23,16
 401b60c:	a885383a 	mul	r2,r21,r2
 401b610:	e13fffcc 	andi	r4,fp,65535
 401b614:	25c8b03a 	or	r4,r4,r23
 401b618:	2080042e 	bgeu	r4,r2,401b62c <__umoddi3+0x4c0>
 401b61c:	24c9883a 	add	r4,r4,r19
 401b620:	24c00236 	bltu	r4,r19,401b62c <__umoddi3+0x4c0>
 401b624:	2080012e 	bgeu	r4,r2,401b62c <__umoddi3+0x4c0>
 401b628:	24c9883a 	add	r4,r4,r19
 401b62c:	20a3c83a 	sub	r17,r4,r2
 401b630:	003f4806 	br	401b354 <__alt_mem_epcs_flash_controller_0+0xfb01a354>
 401b634:	2c8fc83a 	sub	r7,r5,r18
 401b638:	1545c83a 	sub	r2,r2,r21
 401b63c:	29cb803a 	cmpltu	r5,r5,r7
 401b640:	1145c83a 	sub	r2,r2,r5
 401b644:	4089c83a 	sub	r4,r8,r2
 401b648:	003fc706 	br	401b568 <__alt_mem_epcs_flash_controller_0+0xfb01a568>
 401b64c:	01000604 	movi	r4,24
 401b650:	003f1806 	br	401b2b4 <__alt_mem_epcs_flash_controller_0+0xfb01a2b4>
 401b654:	00800604 	movi	r2,24
 401b658:	003f3206 	br	401b324 <__alt_mem_epcs_flash_controller_0+0xfb01a324>
 401b65c:	01000604 	movi	r4,24
 401b660:	003ed906 	br	401b1c8 <__alt_mem_epcs_flash_controller_0+0xfb01a1c8>
 401b664:	413fa52e 	bgeu	r8,r4,401b4fc <__alt_mem_epcs_flash_controller_0+0xfb01a4fc>
 401b668:	297fff84 	addi	r5,r5,-2
 401b66c:	4551883a 	add	r8,r8,r21
 401b670:	003fa306 	br	401b500 <__alt_mem_epcs_flash_controller_0+0xfb01a500>
 401b674:	15ff8b2e 	bgeu	r2,r23,401b4a4 <__alt_mem_epcs_flash_controller_0+0xfb01a4a4>
 401b678:	31bfff84 	addi	r6,r6,-2
 401b67c:	1545883a 	add	r2,r2,r21
 401b680:	003f8906 	br	401b4a8 <__alt_mem_epcs_flash_controller_0+0xfb01a4a8>
 401b684:	24c9883a 	add	r4,r4,r19
 401b688:	003eee06 	br	401b244 <__alt_mem_epcs_flash_controller_0+0xfb01a244>
 401b68c:	8005883a 	mov	r2,r16
 401b690:	003f1706 	br	401b2f0 <__alt_mem_epcs_flash_controller_0+0xfb01a2f0>
 401b694:	817fe736 	bltu	r16,r5,401b634 <__alt_mem_epcs_flash_controller_0+0xfb01a634>
 401b698:	280f883a 	mov	r7,r5
 401b69c:	0009883a 	mov	r4,zero
 401b6a0:	003fb106 	br	401b568 <__alt_mem_epcs_flash_controller_0+0xfb01a568>

0401b6a4 <__eqdf2>:
 401b6a4:	2804d53a 	srli	r2,r5,20
 401b6a8:	3806d53a 	srli	r3,r7,20
 401b6ac:	02000434 	movhi	r8,16
 401b6b0:	423fffc4 	addi	r8,r8,-1
 401b6b4:	1081ffcc 	andi	r2,r2,2047
 401b6b8:	0281ffc4 	movi	r10,2047
 401b6bc:	2a12703a 	and	r9,r5,r8
 401b6c0:	18c1ffcc 	andi	r3,r3,2047
 401b6c4:	3a10703a 	and	r8,r7,r8
 401b6c8:	280ad7fa 	srli	r5,r5,31
 401b6cc:	380ed7fa 	srli	r7,r7,31
 401b6d0:	12801026 	beq	r2,r10,401b714 <__eqdf2+0x70>
 401b6d4:	0281ffc4 	movi	r10,2047
 401b6d8:	1a800a26 	beq	r3,r10,401b704 <__eqdf2+0x60>
 401b6dc:	10c00226 	beq	r2,r3,401b6e8 <__eqdf2+0x44>
 401b6e0:	00800044 	movi	r2,1
 401b6e4:	f800283a 	ret
 401b6e8:	4a3ffd1e 	bne	r9,r8,401b6e0 <__alt_mem_epcs_flash_controller_0+0xfb01a6e0>
 401b6ec:	21bffc1e 	bne	r4,r6,401b6e0 <__alt_mem_epcs_flash_controller_0+0xfb01a6e0>
 401b6f0:	29c00c26 	beq	r5,r7,401b724 <__eqdf2+0x80>
 401b6f4:	103ffa1e 	bne	r2,zero,401b6e0 <__alt_mem_epcs_flash_controller_0+0xfb01a6e0>
 401b6f8:	2244b03a 	or	r2,r4,r9
 401b6fc:	1004c03a 	cmpne	r2,r2,zero
 401b700:	f800283a 	ret
 401b704:	3214b03a 	or	r10,r6,r8
 401b708:	503ff426 	beq	r10,zero,401b6dc <__alt_mem_epcs_flash_controller_0+0xfb01a6dc>
 401b70c:	00800044 	movi	r2,1
 401b710:	f800283a 	ret
 401b714:	2254b03a 	or	r10,r4,r9
 401b718:	503fee26 	beq	r10,zero,401b6d4 <__alt_mem_epcs_flash_controller_0+0xfb01a6d4>
 401b71c:	00800044 	movi	r2,1
 401b720:	f800283a 	ret
 401b724:	0005883a 	mov	r2,zero
 401b728:	f800283a 	ret

0401b72c <__floatunsidf>:
 401b72c:	defffe04 	addi	sp,sp,-8
 401b730:	dc000015 	stw	r16,0(sp)
 401b734:	dfc00115 	stw	ra,4(sp)
 401b738:	2021883a 	mov	r16,r4
 401b73c:	20002226 	beq	r4,zero,401b7c8 <__floatunsidf+0x9c>
 401b740:	400de400 	call	400de40 <__clzsi2>
 401b744:	01010784 	movi	r4,1054
 401b748:	2089c83a 	sub	r4,r4,r2
 401b74c:	01810cc4 	movi	r6,1075
 401b750:	310dc83a 	sub	r6,r6,r4
 401b754:	00c007c4 	movi	r3,31
 401b758:	1980120e 	bge	r3,r6,401b7a4 <__floatunsidf+0x78>
 401b75c:	00c104c4 	movi	r3,1043
 401b760:	1907c83a 	sub	r3,r3,r4
 401b764:	80ca983a 	sll	r5,r16,r3
 401b768:	00800434 	movhi	r2,16
 401b76c:	10bfffc4 	addi	r2,r2,-1
 401b770:	2101ffcc 	andi	r4,r4,2047
 401b774:	0021883a 	mov	r16,zero
 401b778:	288a703a 	and	r5,r5,r2
 401b77c:	2008953a 	slli	r4,r4,20
 401b780:	00c00434 	movhi	r3,16
 401b784:	18ffffc4 	addi	r3,r3,-1
 401b788:	28c6703a 	and	r3,r5,r3
 401b78c:	8005883a 	mov	r2,r16
 401b790:	1906b03a 	or	r3,r3,r4
 401b794:	dfc00117 	ldw	ra,4(sp)
 401b798:	dc000017 	ldw	r16,0(sp)
 401b79c:	dec00204 	addi	sp,sp,8
 401b7a0:	f800283a 	ret
 401b7a4:	00c002c4 	movi	r3,11
 401b7a8:	188bc83a 	sub	r5,r3,r2
 401b7ac:	814ad83a 	srl	r5,r16,r5
 401b7b0:	00c00434 	movhi	r3,16
 401b7b4:	18ffffc4 	addi	r3,r3,-1
 401b7b8:	81a0983a 	sll	r16,r16,r6
 401b7bc:	2101ffcc 	andi	r4,r4,2047
 401b7c0:	28ca703a 	and	r5,r5,r3
 401b7c4:	003fed06 	br	401b77c <__alt_mem_epcs_flash_controller_0+0xfb01a77c>
 401b7c8:	0009883a 	mov	r4,zero
 401b7cc:	000b883a 	mov	r5,zero
 401b7d0:	003fea06 	br	401b77c <__alt_mem_epcs_flash_controller_0+0xfb01a77c>

0401b7d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b7d4:	defffe04 	addi	sp,sp,-8
 401b7d8:	dfc00115 	stw	ra,4(sp)
 401b7dc:	df000015 	stw	fp,0(sp)
 401b7e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b7e4:	d0a00e17 	ldw	r2,-32712(gp)
 401b7e8:	10000326 	beq	r2,zero,401b7f8 <alt_get_errno+0x24>
 401b7ec:	d0a00e17 	ldw	r2,-32712(gp)
 401b7f0:	103ee83a 	callr	r2
 401b7f4:	00000106 	br	401b7fc <alt_get_errno+0x28>
 401b7f8:	d0a01804 	addi	r2,gp,-32672
}
 401b7fc:	e037883a 	mov	sp,fp
 401b800:	dfc00117 	ldw	ra,4(sp)
 401b804:	df000017 	ldw	fp,0(sp)
 401b808:	dec00204 	addi	sp,sp,8
 401b80c:	f800283a 	ret

0401b810 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401b810:	defffb04 	addi	sp,sp,-20
 401b814:	dfc00415 	stw	ra,16(sp)
 401b818:	df000315 	stw	fp,12(sp)
 401b81c:	df000304 	addi	fp,sp,12
 401b820:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401b824:	e0bfff17 	ldw	r2,-4(fp)
 401b828:	10000616 	blt	r2,zero,401b844 <close+0x34>
 401b82c:	e0bfff17 	ldw	r2,-4(fp)
 401b830:	10c00324 	muli	r3,r2,12
 401b834:	008103f4 	movhi	r2,1039
 401b838:	10874704 	addi	r2,r2,7452
 401b83c:	1885883a 	add	r2,r3,r2
 401b840:	00000106 	br	401b848 <close+0x38>
 401b844:	0005883a 	mov	r2,zero
 401b848:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401b84c:	e0bffd17 	ldw	r2,-12(fp)
 401b850:	10001926 	beq	r2,zero,401b8b8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401b854:	e0bffd17 	ldw	r2,-12(fp)
 401b858:	10800017 	ldw	r2,0(r2)
 401b85c:	10800417 	ldw	r2,16(r2)
 401b860:	10000626 	beq	r2,zero,401b87c <close+0x6c>
 401b864:	e0bffd17 	ldw	r2,-12(fp)
 401b868:	10800017 	ldw	r2,0(r2)
 401b86c:	10800417 	ldw	r2,16(r2)
 401b870:	e13ffd17 	ldw	r4,-12(fp)
 401b874:	103ee83a 	callr	r2
 401b878:	00000106 	br	401b880 <close+0x70>
 401b87c:	0005883a 	mov	r2,zero
 401b880:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401b884:	e13fff17 	ldw	r4,-4(fp)
 401b888:	401c0cc0 	call	401c0cc <alt_release_fd>
    if (rval < 0)
 401b88c:	e0bffe17 	ldw	r2,-8(fp)
 401b890:	1000070e 	bge	r2,zero,401b8b0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 401b894:	401b7d40 	call	401b7d4 <alt_get_errno>
 401b898:	1007883a 	mov	r3,r2
 401b89c:	e0bffe17 	ldw	r2,-8(fp)
 401b8a0:	0085c83a 	sub	r2,zero,r2
 401b8a4:	18800015 	stw	r2,0(r3)
      return -1;
 401b8a8:	00bfffc4 	movi	r2,-1
 401b8ac:	00000706 	br	401b8cc <close+0xbc>
    }
    return 0;
 401b8b0:	0005883a 	mov	r2,zero
 401b8b4:	00000506 	br	401b8cc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b8b8:	401b7d40 	call	401b7d4 <alt_get_errno>
 401b8bc:	1007883a 	mov	r3,r2
 401b8c0:	00801444 	movi	r2,81
 401b8c4:	18800015 	stw	r2,0(r3)
    return -1;
 401b8c8:	00bfffc4 	movi	r2,-1
  }
}
 401b8cc:	e037883a 	mov	sp,fp
 401b8d0:	dfc00117 	ldw	ra,4(sp)
 401b8d4:	df000017 	ldw	fp,0(sp)
 401b8d8:	dec00204 	addi	sp,sp,8
 401b8dc:	f800283a 	ret

0401b8e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401b8e0:	defffe04 	addi	sp,sp,-8
 401b8e4:	df000115 	stw	fp,4(sp)
 401b8e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401b8ec:	e03fff15 	stw	zero,-4(fp)
 401b8f0:	00000506 	br	401b908 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 401b8f4:	e0bfff17 	ldw	r2,-4(fp)
 401b8f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401b8fc:	e0bfff17 	ldw	r2,-4(fp)
 401b900:	10800804 	addi	r2,r2,32
 401b904:	e0bfff15 	stw	r2,-4(fp)
 401b908:	e0bfff17 	ldw	r2,-4(fp)
 401b90c:	10820030 	cmpltui	r2,r2,2048
 401b910:	103ff81e 	bne	r2,zero,401b8f4 <__alt_mem_epcs_flash_controller_0+0xfb01a8f4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401b914:	0001883a 	nop
 401b918:	e037883a 	mov	sp,fp
 401b91c:	df000017 	ldw	fp,0(sp)
 401b920:	dec00104 	addi	sp,sp,4
 401b924:	f800283a 	ret

0401b928 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401b928:	defffc04 	addi	sp,sp,-16
 401b92c:	df000315 	stw	fp,12(sp)
 401b930:	df000304 	addi	fp,sp,12
 401b934:	e13ffd15 	stw	r4,-12(fp)
 401b938:	e17ffe15 	stw	r5,-8(fp)
 401b93c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401b940:	e0bfff17 	ldw	r2,-4(fp)
}
 401b944:	e037883a 	mov	sp,fp
 401b948:	df000017 	ldw	fp,0(sp)
 401b94c:	dec00104 	addi	sp,sp,4
 401b950:	f800283a 	ret

0401b954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b954:	defffe04 	addi	sp,sp,-8
 401b958:	dfc00115 	stw	ra,4(sp)
 401b95c:	df000015 	stw	fp,0(sp)
 401b960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b964:	d0a00e17 	ldw	r2,-32712(gp)
 401b968:	10000326 	beq	r2,zero,401b978 <alt_get_errno+0x24>
 401b96c:	d0a00e17 	ldw	r2,-32712(gp)
 401b970:	103ee83a 	callr	r2
 401b974:	00000106 	br	401b97c <alt_get_errno+0x28>
 401b978:	d0a01804 	addi	r2,gp,-32672
}
 401b97c:	e037883a 	mov	sp,fp
 401b980:	dfc00117 	ldw	ra,4(sp)
 401b984:	df000017 	ldw	fp,0(sp)
 401b988:	dec00204 	addi	sp,sp,8
 401b98c:	f800283a 	ret

0401b990 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401b990:	defffb04 	addi	sp,sp,-20
 401b994:	dfc00415 	stw	ra,16(sp)
 401b998:	df000315 	stw	fp,12(sp)
 401b99c:	df000304 	addi	fp,sp,12
 401b9a0:	e13ffe15 	stw	r4,-8(fp)
 401b9a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b9a8:	e0bffe17 	ldw	r2,-8(fp)
 401b9ac:	10000616 	blt	r2,zero,401b9c8 <fstat+0x38>
 401b9b0:	e0bffe17 	ldw	r2,-8(fp)
 401b9b4:	10c00324 	muli	r3,r2,12
 401b9b8:	008103f4 	movhi	r2,1039
 401b9bc:	10874704 	addi	r2,r2,7452
 401b9c0:	1885883a 	add	r2,r3,r2
 401b9c4:	00000106 	br	401b9cc <fstat+0x3c>
 401b9c8:	0005883a 	mov	r2,zero
 401b9cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401b9d0:	e0bffd17 	ldw	r2,-12(fp)
 401b9d4:	10001026 	beq	r2,zero,401ba18 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401b9d8:	e0bffd17 	ldw	r2,-12(fp)
 401b9dc:	10800017 	ldw	r2,0(r2)
 401b9e0:	10800817 	ldw	r2,32(r2)
 401b9e4:	10000726 	beq	r2,zero,401ba04 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 401b9e8:	e0bffd17 	ldw	r2,-12(fp)
 401b9ec:	10800017 	ldw	r2,0(r2)
 401b9f0:	10800817 	ldw	r2,32(r2)
 401b9f4:	e17fff17 	ldw	r5,-4(fp)
 401b9f8:	e13ffd17 	ldw	r4,-12(fp)
 401b9fc:	103ee83a 	callr	r2
 401ba00:	00000a06 	br	401ba2c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401ba04:	e0bfff17 	ldw	r2,-4(fp)
 401ba08:	00c80004 	movi	r3,8192
 401ba0c:	10c00115 	stw	r3,4(r2)
      return 0;
 401ba10:	0005883a 	mov	r2,zero
 401ba14:	00000506 	br	401ba2c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401ba18:	401b9540 	call	401b954 <alt_get_errno>
 401ba1c:	1007883a 	mov	r3,r2
 401ba20:	00801444 	movi	r2,81
 401ba24:	18800015 	stw	r2,0(r3)
    return -1;
 401ba28:	00bfffc4 	movi	r2,-1
  }
}
 401ba2c:	e037883a 	mov	sp,fp
 401ba30:	dfc00117 	ldw	ra,4(sp)
 401ba34:	df000017 	ldw	fp,0(sp)
 401ba38:	dec00204 	addi	sp,sp,8
 401ba3c:	f800283a 	ret

0401ba40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401ba40:	defff904 	addi	sp,sp,-28
 401ba44:	dfc00615 	stw	ra,24(sp)
 401ba48:	df000515 	stw	fp,20(sp)
 401ba4c:	df000504 	addi	fp,sp,20
 401ba50:	e13ffc15 	stw	r4,-16(fp)
 401ba54:	e17ffd15 	stw	r5,-12(fp)
 401ba58:	e1bffe15 	stw	r6,-8(fp)
 401ba5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401ba60:	e0800217 	ldw	r2,8(fp)
 401ba64:	d8800015 	stw	r2,0(sp)
 401ba68:	e1ffff17 	ldw	r7,-4(fp)
 401ba6c:	e1bffe17 	ldw	r6,-8(fp)
 401ba70:	e17ffd17 	ldw	r5,-12(fp)
 401ba74:	e13ffc17 	ldw	r4,-16(fp)
 401ba78:	401bbf00 	call	401bbf0 <alt_iic_isr_register>
}  
 401ba7c:	e037883a 	mov	sp,fp
 401ba80:	dfc00117 	ldw	ra,4(sp)
 401ba84:	df000017 	ldw	fp,0(sp)
 401ba88:	dec00204 	addi	sp,sp,8
 401ba8c:	f800283a 	ret

0401ba90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401ba90:	defff904 	addi	sp,sp,-28
 401ba94:	df000615 	stw	fp,24(sp)
 401ba98:	df000604 	addi	fp,sp,24
 401ba9c:	e13ffe15 	stw	r4,-8(fp)
 401baa0:	e17fff15 	stw	r5,-4(fp)
 401baa4:	e0bfff17 	ldw	r2,-4(fp)
 401baa8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401baac:	0005303a 	rdctl	r2,status
 401bab0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bab4:	e0fffb17 	ldw	r3,-20(fp)
 401bab8:	00bfff84 	movi	r2,-2
 401babc:	1884703a 	and	r2,r3,r2
 401bac0:	1001703a 	wrctl	status,r2
  
  return context;
 401bac4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401bac8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401bacc:	00c00044 	movi	r3,1
 401bad0:	e0bffa17 	ldw	r2,-24(fp)
 401bad4:	1884983a 	sll	r2,r3,r2
 401bad8:	1007883a 	mov	r3,r2
 401badc:	d0a01c17 	ldw	r2,-32656(gp)
 401bae0:	1884b03a 	or	r2,r3,r2
 401bae4:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401bae8:	d0a01c17 	ldw	r2,-32656(gp)
 401baec:	100170fa 	wrctl	ienable,r2
 401baf0:	e0bffc17 	ldw	r2,-16(fp)
 401baf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401baf8:	e0bffd17 	ldw	r2,-12(fp)
 401bafc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401bb00:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401bb04:	0001883a 	nop
}
 401bb08:	e037883a 	mov	sp,fp
 401bb0c:	df000017 	ldw	fp,0(sp)
 401bb10:	dec00104 	addi	sp,sp,4
 401bb14:	f800283a 	ret

0401bb18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401bb18:	defff904 	addi	sp,sp,-28
 401bb1c:	df000615 	stw	fp,24(sp)
 401bb20:	df000604 	addi	fp,sp,24
 401bb24:	e13ffe15 	stw	r4,-8(fp)
 401bb28:	e17fff15 	stw	r5,-4(fp)
 401bb2c:	e0bfff17 	ldw	r2,-4(fp)
 401bb30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bb34:	0005303a 	rdctl	r2,status
 401bb38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bb3c:	e0fffb17 	ldw	r3,-20(fp)
 401bb40:	00bfff84 	movi	r2,-2
 401bb44:	1884703a 	and	r2,r3,r2
 401bb48:	1001703a 	wrctl	status,r2
  
  return context;
 401bb4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401bb50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401bb54:	00c00044 	movi	r3,1
 401bb58:	e0bffa17 	ldw	r2,-24(fp)
 401bb5c:	1884983a 	sll	r2,r3,r2
 401bb60:	0084303a 	nor	r2,zero,r2
 401bb64:	1007883a 	mov	r3,r2
 401bb68:	d0a01c17 	ldw	r2,-32656(gp)
 401bb6c:	1884703a 	and	r2,r3,r2
 401bb70:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401bb74:	d0a01c17 	ldw	r2,-32656(gp)
 401bb78:	100170fa 	wrctl	ienable,r2
 401bb7c:	e0bffc17 	ldw	r2,-16(fp)
 401bb80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bb84:	e0bffd17 	ldw	r2,-12(fp)
 401bb88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401bb8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401bb90:	0001883a 	nop
}
 401bb94:	e037883a 	mov	sp,fp
 401bb98:	df000017 	ldw	fp,0(sp)
 401bb9c:	dec00104 	addi	sp,sp,4
 401bba0:	f800283a 	ret

0401bba4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401bba4:	defffc04 	addi	sp,sp,-16
 401bba8:	df000315 	stw	fp,12(sp)
 401bbac:	df000304 	addi	fp,sp,12
 401bbb0:	e13ffe15 	stw	r4,-8(fp)
 401bbb4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401bbb8:	000530fa 	rdctl	r2,ienable
 401bbbc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401bbc0:	00c00044 	movi	r3,1
 401bbc4:	e0bfff17 	ldw	r2,-4(fp)
 401bbc8:	1884983a 	sll	r2,r3,r2
 401bbcc:	1007883a 	mov	r3,r2
 401bbd0:	e0bffd17 	ldw	r2,-12(fp)
 401bbd4:	1884703a 	and	r2,r3,r2
 401bbd8:	1004c03a 	cmpne	r2,r2,zero
 401bbdc:	10803fcc 	andi	r2,r2,255
}
 401bbe0:	e037883a 	mov	sp,fp
 401bbe4:	df000017 	ldw	fp,0(sp)
 401bbe8:	dec00104 	addi	sp,sp,4
 401bbec:	f800283a 	ret

0401bbf0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401bbf0:	defff504 	addi	sp,sp,-44
 401bbf4:	dfc00a15 	stw	ra,40(sp)
 401bbf8:	df000915 	stw	fp,36(sp)
 401bbfc:	df000904 	addi	fp,sp,36
 401bc00:	e13ffc15 	stw	r4,-16(fp)
 401bc04:	e17ffd15 	stw	r5,-12(fp)
 401bc08:	e1bffe15 	stw	r6,-8(fp)
 401bc0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401bc10:	00bffa84 	movi	r2,-22
 401bc14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401bc18:	e0bffd17 	ldw	r2,-12(fp)
 401bc1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401bc20:	e0bff817 	ldw	r2,-32(fp)
 401bc24:	10800808 	cmpgei	r2,r2,32
 401bc28:	1000271e 	bne	r2,zero,401bcc8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bc2c:	0005303a 	rdctl	r2,status
 401bc30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bc34:	e0fffb17 	ldw	r3,-20(fp)
 401bc38:	00bfff84 	movi	r2,-2
 401bc3c:	1884703a 	and	r2,r3,r2
 401bc40:	1001703a 	wrctl	status,r2
  
  return context;
 401bc44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401bc48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401bc4c:	008103f4 	movhi	r2,1039
 401bc50:	108c1f04 	addi	r2,r2,12412
 401bc54:	e0fff817 	ldw	r3,-32(fp)
 401bc58:	180690fa 	slli	r3,r3,3
 401bc5c:	10c5883a 	add	r2,r2,r3
 401bc60:	e0fffe17 	ldw	r3,-8(fp)
 401bc64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401bc68:	008103f4 	movhi	r2,1039
 401bc6c:	108c1f04 	addi	r2,r2,12412
 401bc70:	e0fff817 	ldw	r3,-32(fp)
 401bc74:	180690fa 	slli	r3,r3,3
 401bc78:	10c5883a 	add	r2,r2,r3
 401bc7c:	10800104 	addi	r2,r2,4
 401bc80:	e0ffff17 	ldw	r3,-4(fp)
 401bc84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401bc88:	e0bffe17 	ldw	r2,-8(fp)
 401bc8c:	10000526 	beq	r2,zero,401bca4 <alt_iic_isr_register+0xb4>
 401bc90:	e0bff817 	ldw	r2,-32(fp)
 401bc94:	100b883a 	mov	r5,r2
 401bc98:	e13ffc17 	ldw	r4,-16(fp)
 401bc9c:	401ba900 	call	401ba90 <alt_ic_irq_enable>
 401bca0:	00000406 	br	401bcb4 <alt_iic_isr_register+0xc4>
 401bca4:	e0bff817 	ldw	r2,-32(fp)
 401bca8:	100b883a 	mov	r5,r2
 401bcac:	e13ffc17 	ldw	r4,-16(fp)
 401bcb0:	401bb180 	call	401bb18 <alt_ic_irq_disable>
 401bcb4:	e0bff715 	stw	r2,-36(fp)
 401bcb8:	e0bffa17 	ldw	r2,-24(fp)
 401bcbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401bcc0:	e0bff917 	ldw	r2,-28(fp)
 401bcc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401bcc8:	e0bff717 	ldw	r2,-36(fp)
}
 401bccc:	e037883a 	mov	sp,fp
 401bcd0:	dfc00117 	ldw	ra,4(sp)
 401bcd4:	df000017 	ldw	fp,0(sp)
 401bcd8:	dec00204 	addi	sp,sp,8
 401bcdc:	f800283a 	ret

0401bce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bce0:	defffe04 	addi	sp,sp,-8
 401bce4:	dfc00115 	stw	ra,4(sp)
 401bce8:	df000015 	stw	fp,0(sp)
 401bcec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bcf0:	d0a00e17 	ldw	r2,-32712(gp)
 401bcf4:	10000326 	beq	r2,zero,401bd04 <alt_get_errno+0x24>
 401bcf8:	d0a00e17 	ldw	r2,-32712(gp)
 401bcfc:	103ee83a 	callr	r2
 401bd00:	00000106 	br	401bd08 <alt_get_errno+0x28>
 401bd04:	d0a01804 	addi	r2,gp,-32672
}
 401bd08:	e037883a 	mov	sp,fp
 401bd0c:	dfc00117 	ldw	ra,4(sp)
 401bd10:	df000017 	ldw	fp,0(sp)
 401bd14:	dec00204 	addi	sp,sp,8
 401bd18:	f800283a 	ret

0401bd1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401bd1c:	deffed04 	addi	sp,sp,-76
 401bd20:	dfc01215 	stw	ra,72(sp)
 401bd24:	df001115 	stw	fp,68(sp)
 401bd28:	df001104 	addi	fp,sp,68
 401bd2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bd30:	e0bfff17 	ldw	r2,-4(fp)
 401bd34:	10000616 	blt	r2,zero,401bd50 <isatty+0x34>
 401bd38:	e0bfff17 	ldw	r2,-4(fp)
 401bd3c:	10c00324 	muli	r3,r2,12
 401bd40:	008103f4 	movhi	r2,1039
 401bd44:	10874704 	addi	r2,r2,7452
 401bd48:	1885883a 	add	r2,r3,r2
 401bd4c:	00000106 	br	401bd54 <isatty+0x38>
 401bd50:	0005883a 	mov	r2,zero
 401bd54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401bd58:	e0bfef17 	ldw	r2,-68(fp)
 401bd5c:	10000e26 	beq	r2,zero,401bd98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401bd60:	e0bfef17 	ldw	r2,-68(fp)
 401bd64:	10800017 	ldw	r2,0(r2)
 401bd68:	10800817 	ldw	r2,32(r2)
 401bd6c:	1000021e 	bne	r2,zero,401bd78 <isatty+0x5c>
    {
      return 1;
 401bd70:	00800044 	movi	r2,1
 401bd74:	00000d06 	br	401bdac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401bd78:	e0bff004 	addi	r2,fp,-64
 401bd7c:	100b883a 	mov	r5,r2
 401bd80:	e13fff17 	ldw	r4,-4(fp)
 401bd84:	401b9900 	call	401b990 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401bd88:	e0bff117 	ldw	r2,-60(fp)
 401bd8c:	10880020 	cmpeqi	r2,r2,8192
 401bd90:	10803fcc 	andi	r2,r2,255
 401bd94:	00000506 	br	401bdac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401bd98:	401bce00 	call	401bce0 <alt_get_errno>
 401bd9c:	1007883a 	mov	r3,r2
 401bda0:	00801444 	movi	r2,81
 401bda4:	18800015 	stw	r2,0(r3)
    return 0;
 401bda8:	0005883a 	mov	r2,zero
  }
}
 401bdac:	e037883a 	mov	sp,fp
 401bdb0:	dfc00117 	ldw	ra,4(sp)
 401bdb4:	df000017 	ldw	fp,0(sp)
 401bdb8:	dec00204 	addi	sp,sp,8
 401bdbc:	f800283a 	ret

0401bdc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bdc0:	defffe04 	addi	sp,sp,-8
 401bdc4:	dfc00115 	stw	ra,4(sp)
 401bdc8:	df000015 	stw	fp,0(sp)
 401bdcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bdd0:	d0a00e17 	ldw	r2,-32712(gp)
 401bdd4:	10000326 	beq	r2,zero,401bde4 <alt_get_errno+0x24>
 401bdd8:	d0a00e17 	ldw	r2,-32712(gp)
 401bddc:	103ee83a 	callr	r2
 401bde0:	00000106 	br	401bde8 <alt_get_errno+0x28>
 401bde4:	d0a01804 	addi	r2,gp,-32672
}
 401bde8:	e037883a 	mov	sp,fp
 401bdec:	dfc00117 	ldw	ra,4(sp)
 401bdf0:	df000017 	ldw	fp,0(sp)
 401bdf4:	dec00204 	addi	sp,sp,8
 401bdf8:	f800283a 	ret

0401bdfc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401bdfc:	defff904 	addi	sp,sp,-28
 401be00:	dfc00615 	stw	ra,24(sp)
 401be04:	df000515 	stw	fp,20(sp)
 401be08:	df000504 	addi	fp,sp,20
 401be0c:	e13ffd15 	stw	r4,-12(fp)
 401be10:	e17ffe15 	stw	r5,-8(fp)
 401be14:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401be18:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401be1c:	e0bffd17 	ldw	r2,-12(fp)
 401be20:	10000616 	blt	r2,zero,401be3c <lseek+0x40>
 401be24:	e0bffd17 	ldw	r2,-12(fp)
 401be28:	10c00324 	muli	r3,r2,12
 401be2c:	008103f4 	movhi	r2,1039
 401be30:	10874704 	addi	r2,r2,7452
 401be34:	1885883a 	add	r2,r3,r2
 401be38:	00000106 	br	401be40 <lseek+0x44>
 401be3c:	0005883a 	mov	r2,zero
 401be40:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401be44:	e0bffc17 	ldw	r2,-16(fp)
 401be48:	10001026 	beq	r2,zero,401be8c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401be4c:	e0bffc17 	ldw	r2,-16(fp)
 401be50:	10800017 	ldw	r2,0(r2)
 401be54:	10800717 	ldw	r2,28(r2)
 401be58:	10000926 	beq	r2,zero,401be80 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401be5c:	e0bffc17 	ldw	r2,-16(fp)
 401be60:	10800017 	ldw	r2,0(r2)
 401be64:	10800717 	ldw	r2,28(r2)
 401be68:	e1bfff17 	ldw	r6,-4(fp)
 401be6c:	e17ffe17 	ldw	r5,-8(fp)
 401be70:	e13ffc17 	ldw	r4,-16(fp)
 401be74:	103ee83a 	callr	r2
 401be78:	e0bffb15 	stw	r2,-20(fp)
 401be7c:	00000506 	br	401be94 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401be80:	00bfde84 	movi	r2,-134
 401be84:	e0bffb15 	stw	r2,-20(fp)
 401be88:	00000206 	br	401be94 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 401be8c:	00bfebc4 	movi	r2,-81
 401be90:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401be94:	e0bffb17 	ldw	r2,-20(fp)
 401be98:	1000070e 	bge	r2,zero,401beb8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 401be9c:	401bdc00 	call	401bdc0 <alt_get_errno>
 401bea0:	1007883a 	mov	r3,r2
 401bea4:	e0bffb17 	ldw	r2,-20(fp)
 401bea8:	0085c83a 	sub	r2,zero,r2
 401beac:	18800015 	stw	r2,0(r3)
    rc = -1;
 401beb0:	00bfffc4 	movi	r2,-1
 401beb4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401beb8:	e0bffb17 	ldw	r2,-20(fp)
}
 401bebc:	e037883a 	mov	sp,fp
 401bec0:	dfc00117 	ldw	ra,4(sp)
 401bec4:	df000017 	ldw	fp,0(sp)
 401bec8:	dec00204 	addi	sp,sp,8
 401becc:	f800283a 	ret

0401bed0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401bed0:	defffd04 	addi	sp,sp,-12
 401bed4:	dfc00215 	stw	ra,8(sp)
 401bed8:	df000115 	stw	fp,4(sp)
 401bedc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401bee0:	0009883a 	mov	r4,zero
 401bee4:	401c51c0 	call	401c51c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401bee8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401beec:	401c5540 	call	401c554 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401bef0:	01810234 	movhi	r6,1032
 401bef4:	3195aa04 	addi	r6,r6,22184
 401bef8:	01410234 	movhi	r5,1032
 401befc:	2955aa04 	addi	r5,r5,22184
 401bf00:	01010234 	movhi	r4,1032
 401bf04:	2115aa04 	addi	r4,r4,22184
 401bf08:	401e8940 	call	401e894 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401bf0c:	401e5b80 	call	401e5b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401bf10:	010100b4 	movhi	r4,1026
 401bf14:	21398604 	addi	r4,r4,-6632
 401bf18:	401efc00 	call	401efc0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401bf1c:	d0a01d17 	ldw	r2,-32652(gp)
 401bf20:	d0e01e17 	ldw	r3,-32648(gp)
 401bf24:	d1201f17 	ldw	r4,-32644(gp)
 401bf28:	200d883a 	mov	r6,r4
 401bf2c:	180b883a 	mov	r5,r3
 401bf30:	1009883a 	mov	r4,r2
 401bf34:	4005a580 	call	4005a58 <main>
 401bf38:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401bf3c:	01000044 	movi	r4,1
 401bf40:	401b8100 	call	401b810 <close>
  exit (result);
 401bf44:	e13fff17 	ldw	r4,-4(fp)
 401bf48:	401efd40 	call	401efd4 <exit>

0401bf4c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401bf4c:	defffe04 	addi	sp,sp,-8
 401bf50:	df000115 	stw	fp,4(sp)
 401bf54:	df000104 	addi	fp,sp,4
 401bf58:	e13fff15 	stw	r4,-4(fp)
}
 401bf5c:	0001883a 	nop
 401bf60:	e037883a 	mov	sp,fp
 401bf64:	df000017 	ldw	fp,0(sp)
 401bf68:	dec00104 	addi	sp,sp,4
 401bf6c:	f800283a 	ret

0401bf70 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401bf70:	defffe04 	addi	sp,sp,-8
 401bf74:	df000115 	stw	fp,4(sp)
 401bf78:	df000104 	addi	fp,sp,4
 401bf7c:	e13fff15 	stw	r4,-4(fp)
}
 401bf80:	0001883a 	nop
 401bf84:	e037883a 	mov	sp,fp
 401bf88:	df000017 	ldw	fp,0(sp)
 401bf8c:	dec00104 	addi	sp,sp,4
 401bf90:	f800283a 	ret

0401bf94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bf94:	defffe04 	addi	sp,sp,-8
 401bf98:	dfc00115 	stw	ra,4(sp)
 401bf9c:	df000015 	stw	fp,0(sp)
 401bfa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bfa4:	d0a00e17 	ldw	r2,-32712(gp)
 401bfa8:	10000326 	beq	r2,zero,401bfb8 <alt_get_errno+0x24>
 401bfac:	d0a00e17 	ldw	r2,-32712(gp)
 401bfb0:	103ee83a 	callr	r2
 401bfb4:	00000106 	br	401bfbc <alt_get_errno+0x28>
 401bfb8:	d0a01804 	addi	r2,gp,-32672
}
 401bfbc:	e037883a 	mov	sp,fp
 401bfc0:	dfc00117 	ldw	ra,4(sp)
 401bfc4:	df000017 	ldw	fp,0(sp)
 401bfc8:	dec00204 	addi	sp,sp,8
 401bfcc:	f800283a 	ret

0401bfd0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401bfd0:	defff904 	addi	sp,sp,-28
 401bfd4:	dfc00615 	stw	ra,24(sp)
 401bfd8:	df000515 	stw	fp,20(sp)
 401bfdc:	df000504 	addi	fp,sp,20
 401bfe0:	e13ffd15 	stw	r4,-12(fp)
 401bfe4:	e17ffe15 	stw	r5,-8(fp)
 401bfe8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bfec:	e0bffd17 	ldw	r2,-12(fp)
 401bff0:	10000616 	blt	r2,zero,401c00c <read+0x3c>
 401bff4:	e0bffd17 	ldw	r2,-12(fp)
 401bff8:	10c00324 	muli	r3,r2,12
 401bffc:	008103f4 	movhi	r2,1039
 401c000:	10874704 	addi	r2,r2,7452
 401c004:	1885883a 	add	r2,r3,r2
 401c008:	00000106 	br	401c010 <read+0x40>
 401c00c:	0005883a 	mov	r2,zero
 401c010:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c014:	e0bffb17 	ldw	r2,-20(fp)
 401c018:	10002226 	beq	r2,zero,401c0a4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c01c:	e0bffb17 	ldw	r2,-20(fp)
 401c020:	10800217 	ldw	r2,8(r2)
 401c024:	108000cc 	andi	r2,r2,3
 401c028:	10800060 	cmpeqi	r2,r2,1
 401c02c:	1000181e 	bne	r2,zero,401c090 <read+0xc0>
        (fd->dev->read))
 401c030:	e0bffb17 	ldw	r2,-20(fp)
 401c034:	10800017 	ldw	r2,0(r2)
 401c038:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401c03c:	10001426 	beq	r2,zero,401c090 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401c040:	e0bffb17 	ldw	r2,-20(fp)
 401c044:	10800017 	ldw	r2,0(r2)
 401c048:	10800517 	ldw	r2,20(r2)
 401c04c:	e0ffff17 	ldw	r3,-4(fp)
 401c050:	180d883a 	mov	r6,r3
 401c054:	e17ffe17 	ldw	r5,-8(fp)
 401c058:	e13ffb17 	ldw	r4,-20(fp)
 401c05c:	103ee83a 	callr	r2
 401c060:	e0bffc15 	stw	r2,-16(fp)
 401c064:	e0bffc17 	ldw	r2,-16(fp)
 401c068:	1000070e 	bge	r2,zero,401c088 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 401c06c:	401bf940 	call	401bf94 <alt_get_errno>
 401c070:	1007883a 	mov	r3,r2
 401c074:	e0bffc17 	ldw	r2,-16(fp)
 401c078:	0085c83a 	sub	r2,zero,r2
 401c07c:	18800015 	stw	r2,0(r3)
          return -1;
 401c080:	00bfffc4 	movi	r2,-1
 401c084:	00000c06 	br	401c0b8 <read+0xe8>
        }
        return rval;
 401c088:	e0bffc17 	ldw	r2,-16(fp)
 401c08c:	00000a06 	br	401c0b8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401c090:	401bf940 	call	401bf94 <alt_get_errno>
 401c094:	1007883a 	mov	r3,r2
 401c098:	00800344 	movi	r2,13
 401c09c:	18800015 	stw	r2,0(r3)
 401c0a0:	00000406 	br	401c0b4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401c0a4:	401bf940 	call	401bf94 <alt_get_errno>
 401c0a8:	1007883a 	mov	r3,r2
 401c0ac:	00801444 	movi	r2,81
 401c0b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c0b4:	00bfffc4 	movi	r2,-1
}
 401c0b8:	e037883a 	mov	sp,fp
 401c0bc:	dfc00117 	ldw	ra,4(sp)
 401c0c0:	df000017 	ldw	fp,0(sp)
 401c0c4:	dec00204 	addi	sp,sp,8
 401c0c8:	f800283a 	ret

0401c0cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401c0cc:	defffe04 	addi	sp,sp,-8
 401c0d0:	df000115 	stw	fp,4(sp)
 401c0d4:	df000104 	addi	fp,sp,4
 401c0d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 401c0dc:	e0bfff17 	ldw	r2,-4(fp)
 401c0e0:	108000d0 	cmplti	r2,r2,3
 401c0e4:	10000d1e 	bne	r2,zero,401c11c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 401c0e8:	008103f4 	movhi	r2,1039
 401c0ec:	10874704 	addi	r2,r2,7452
 401c0f0:	e0ffff17 	ldw	r3,-4(fp)
 401c0f4:	18c00324 	muli	r3,r3,12
 401c0f8:	10c5883a 	add	r2,r2,r3
 401c0fc:	10800204 	addi	r2,r2,8
 401c100:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401c104:	008103f4 	movhi	r2,1039
 401c108:	10874704 	addi	r2,r2,7452
 401c10c:	e0ffff17 	ldw	r3,-4(fp)
 401c110:	18c00324 	muli	r3,r3,12
 401c114:	10c5883a 	add	r2,r2,r3
 401c118:	10000015 	stw	zero,0(r2)
  }
}
 401c11c:	0001883a 	nop
 401c120:	e037883a 	mov	sp,fp
 401c124:	df000017 	ldw	fp,0(sp)
 401c128:	dec00104 	addi	sp,sp,4
 401c12c:	f800283a 	ret

0401c130 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401c130:	defff904 	addi	sp,sp,-28
 401c134:	df000615 	stw	fp,24(sp)
 401c138:	df000604 	addi	fp,sp,24
 401c13c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c140:	0005303a 	rdctl	r2,status
 401c144:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c148:	e0fffe17 	ldw	r3,-8(fp)
 401c14c:	00bfff84 	movi	r2,-2
 401c150:	1884703a 	and	r2,r3,r2
 401c154:	1001703a 	wrctl	status,r2
  
  return context;
 401c158:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401c15c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401c160:	d0a01017 	ldw	r2,-32704(gp)
 401c164:	10c000c4 	addi	r3,r2,3
 401c168:	00bfff04 	movi	r2,-4
 401c16c:	1884703a 	and	r2,r3,r2
 401c170:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401c174:	d0e01017 	ldw	r3,-32704(gp)
 401c178:	e0bfff17 	ldw	r2,-4(fp)
 401c17c:	1887883a 	add	r3,r3,r2
 401c180:	00820034 	movhi	r2,2048
 401c184:	10800004 	addi	r2,r2,0
 401c188:	10c0062e 	bgeu	r2,r3,401c1a4 <sbrk+0x74>
 401c18c:	e0bffb17 	ldw	r2,-20(fp)
 401c190:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c194:	e0bffa17 	ldw	r2,-24(fp)
 401c198:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401c19c:	00bfffc4 	movi	r2,-1
 401c1a0:	00000b06 	br	401c1d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401c1a4:	d0a01017 	ldw	r2,-32704(gp)
 401c1a8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401c1ac:	d0e01017 	ldw	r3,-32704(gp)
 401c1b0:	e0bfff17 	ldw	r2,-4(fp)
 401c1b4:	1885883a 	add	r2,r3,r2
 401c1b8:	d0a01015 	stw	r2,-32704(gp)
 401c1bc:	e0bffb17 	ldw	r2,-20(fp)
 401c1c0:	e0bffc15 	stw	r2,-16(fp)
 401c1c4:	e0bffc17 	ldw	r2,-16(fp)
 401c1c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401c1cc:	e0bffd17 	ldw	r2,-12(fp)
} 
 401c1d0:	e037883a 	mov	sp,fp
 401c1d4:	df000017 	ldw	fp,0(sp)
 401c1d8:	dec00104 	addi	sp,sp,4
 401c1dc:	f800283a 	ret

0401c1e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401c1e0:	defffa04 	addi	sp,sp,-24
 401c1e4:	df000515 	stw	fp,20(sp)
 401c1e8:	df000504 	addi	fp,sp,20
 401c1ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c1f0:	0005303a 	rdctl	r2,status
 401c1f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c1f8:	e0fffc17 	ldw	r3,-16(fp)
 401c1fc:	00bfff84 	movi	r2,-2
 401c200:	1884703a 	and	r2,r3,r2
 401c204:	1001703a 	wrctl	status,r2
  
  return context;
 401c208:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401c20c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401c210:	e0bfff17 	ldw	r2,-4(fp)
 401c214:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401c218:	e0bffd17 	ldw	r2,-12(fp)
 401c21c:	10800017 	ldw	r2,0(r2)
 401c220:	e0fffd17 	ldw	r3,-12(fp)
 401c224:	18c00117 	ldw	r3,4(r3)
 401c228:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401c22c:	e0bffd17 	ldw	r2,-12(fp)
 401c230:	10800117 	ldw	r2,4(r2)
 401c234:	e0fffd17 	ldw	r3,-12(fp)
 401c238:	18c00017 	ldw	r3,0(r3)
 401c23c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401c240:	e0bffd17 	ldw	r2,-12(fp)
 401c244:	e0fffd17 	ldw	r3,-12(fp)
 401c248:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401c24c:	e0bffd17 	ldw	r2,-12(fp)
 401c250:	e0fffd17 	ldw	r3,-12(fp)
 401c254:	10c00015 	stw	r3,0(r2)
 401c258:	e0bffb17 	ldw	r2,-20(fp)
 401c25c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c260:	e0bffe17 	ldw	r2,-8(fp)
 401c264:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401c268:	0001883a 	nop
 401c26c:	e037883a 	mov	sp,fp
 401c270:	df000017 	ldw	fp,0(sp)
 401c274:	dec00104 	addi	sp,sp,4
 401c278:	f800283a 	ret

0401c27c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401c27c:	defffb04 	addi	sp,sp,-20
 401c280:	dfc00415 	stw	ra,16(sp)
 401c284:	df000315 	stw	fp,12(sp)
 401c288:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401c28c:	d0a01117 	ldw	r2,-32700(gp)
 401c290:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401c294:	d0a02117 	ldw	r2,-32636(gp)
 401c298:	10800044 	addi	r2,r2,1
 401c29c:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401c2a0:	00002e06 	br	401c35c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401c2a4:	e0bffd17 	ldw	r2,-12(fp)
 401c2a8:	10800017 	ldw	r2,0(r2)
 401c2ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401c2b0:	e0bffd17 	ldw	r2,-12(fp)
 401c2b4:	10800403 	ldbu	r2,16(r2)
 401c2b8:	10803fcc 	andi	r2,r2,255
 401c2bc:	10000426 	beq	r2,zero,401c2d0 <alt_tick+0x54>
 401c2c0:	d0a02117 	ldw	r2,-32636(gp)
 401c2c4:	1000021e 	bne	r2,zero,401c2d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401c2c8:	e0bffd17 	ldw	r2,-12(fp)
 401c2cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401c2d0:	e0bffd17 	ldw	r2,-12(fp)
 401c2d4:	10800217 	ldw	r2,8(r2)
 401c2d8:	d0e02117 	ldw	r3,-32636(gp)
 401c2dc:	18801d36 	bltu	r3,r2,401c354 <alt_tick+0xd8>
 401c2e0:	e0bffd17 	ldw	r2,-12(fp)
 401c2e4:	10800403 	ldbu	r2,16(r2)
 401c2e8:	10803fcc 	andi	r2,r2,255
 401c2ec:	1000191e 	bne	r2,zero,401c354 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401c2f0:	e0bffd17 	ldw	r2,-12(fp)
 401c2f4:	10800317 	ldw	r2,12(r2)
 401c2f8:	e0fffd17 	ldw	r3,-12(fp)
 401c2fc:	18c00517 	ldw	r3,20(r3)
 401c300:	1809883a 	mov	r4,r3
 401c304:	103ee83a 	callr	r2
 401c308:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401c30c:	e0bfff17 	ldw	r2,-4(fp)
 401c310:	1000031e 	bne	r2,zero,401c320 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401c314:	e13ffd17 	ldw	r4,-12(fp)
 401c318:	401c1e00 	call	401c1e0 <alt_alarm_stop>
 401c31c:	00000d06 	br	401c354 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401c320:	e0bffd17 	ldw	r2,-12(fp)
 401c324:	10c00217 	ldw	r3,8(r2)
 401c328:	e0bfff17 	ldw	r2,-4(fp)
 401c32c:	1887883a 	add	r3,r3,r2
 401c330:	e0bffd17 	ldw	r2,-12(fp)
 401c334:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401c338:	e0bffd17 	ldw	r2,-12(fp)
 401c33c:	10c00217 	ldw	r3,8(r2)
 401c340:	d0a02117 	ldw	r2,-32636(gp)
 401c344:	1880032e 	bgeu	r3,r2,401c354 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401c348:	e0bffd17 	ldw	r2,-12(fp)
 401c34c:	00c00044 	movi	r3,1
 401c350:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401c354:	e0bffe17 	ldw	r2,-8(fp)
 401c358:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401c35c:	e0fffd17 	ldw	r3,-12(fp)
 401c360:	d0a01104 	addi	r2,gp,-32700
 401c364:	18bfcf1e 	bne	r3,r2,401c2a4 <__alt_mem_epcs_flash_controller_0+0xfb01b2a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401c368:	0001883a 	nop
}
 401c36c:	0001883a 	nop
 401c370:	e037883a 	mov	sp,fp
 401c374:	dfc00117 	ldw	ra,4(sp)
 401c378:	df000017 	ldw	fp,0(sp)
 401c37c:	dec00204 	addi	sp,sp,8
 401c380:	f800283a 	ret

0401c384 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401c384:	defffd04 	addi	sp,sp,-12
 401c388:	dfc00215 	stw	ra,8(sp)
 401c38c:	df000115 	stw	fp,4(sp)
 401c390:	df000104 	addi	fp,sp,4
 401c394:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401c398:	e13fff17 	ldw	r4,-4(fp)
 401c39c:	401e3800 	call	401e380 <alt_busy_sleep>
}
 401c3a0:	e037883a 	mov	sp,fp
 401c3a4:	dfc00117 	ldw	ra,4(sp)
 401c3a8:	df000017 	ldw	fp,0(sp)
 401c3ac:	dec00204 	addi	sp,sp,8
 401c3b0:	f800283a 	ret

0401c3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c3b4:	defffe04 	addi	sp,sp,-8
 401c3b8:	dfc00115 	stw	ra,4(sp)
 401c3bc:	df000015 	stw	fp,0(sp)
 401c3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c3c4:	d0a00e17 	ldw	r2,-32712(gp)
 401c3c8:	10000326 	beq	r2,zero,401c3d8 <alt_get_errno+0x24>
 401c3cc:	d0a00e17 	ldw	r2,-32712(gp)
 401c3d0:	103ee83a 	callr	r2
 401c3d4:	00000106 	br	401c3dc <alt_get_errno+0x28>
 401c3d8:	d0a01804 	addi	r2,gp,-32672
}
 401c3dc:	e037883a 	mov	sp,fp
 401c3e0:	dfc00117 	ldw	ra,4(sp)
 401c3e4:	df000017 	ldw	fp,0(sp)
 401c3e8:	dec00204 	addi	sp,sp,8
 401c3ec:	f800283a 	ret

0401c3f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401c3f0:	defff904 	addi	sp,sp,-28
 401c3f4:	dfc00615 	stw	ra,24(sp)
 401c3f8:	df000515 	stw	fp,20(sp)
 401c3fc:	df000504 	addi	fp,sp,20
 401c400:	e13ffd15 	stw	r4,-12(fp)
 401c404:	e17ffe15 	stw	r5,-8(fp)
 401c408:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c40c:	e0bffd17 	ldw	r2,-12(fp)
 401c410:	10000616 	blt	r2,zero,401c42c <write+0x3c>
 401c414:	e0bffd17 	ldw	r2,-12(fp)
 401c418:	10c00324 	muli	r3,r2,12
 401c41c:	008103f4 	movhi	r2,1039
 401c420:	10874704 	addi	r2,r2,7452
 401c424:	1885883a 	add	r2,r3,r2
 401c428:	00000106 	br	401c430 <write+0x40>
 401c42c:	0005883a 	mov	r2,zero
 401c430:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c434:	e0bffb17 	ldw	r2,-20(fp)
 401c438:	10002126 	beq	r2,zero,401c4c0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401c43c:	e0bffb17 	ldw	r2,-20(fp)
 401c440:	10800217 	ldw	r2,8(r2)
 401c444:	108000cc 	andi	r2,r2,3
 401c448:	10001826 	beq	r2,zero,401c4ac <write+0xbc>
 401c44c:	e0bffb17 	ldw	r2,-20(fp)
 401c450:	10800017 	ldw	r2,0(r2)
 401c454:	10800617 	ldw	r2,24(r2)
 401c458:	10001426 	beq	r2,zero,401c4ac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401c45c:	e0bffb17 	ldw	r2,-20(fp)
 401c460:	10800017 	ldw	r2,0(r2)
 401c464:	10800617 	ldw	r2,24(r2)
 401c468:	e0ffff17 	ldw	r3,-4(fp)
 401c46c:	180d883a 	mov	r6,r3
 401c470:	e17ffe17 	ldw	r5,-8(fp)
 401c474:	e13ffb17 	ldw	r4,-20(fp)
 401c478:	103ee83a 	callr	r2
 401c47c:	e0bffc15 	stw	r2,-16(fp)
 401c480:	e0bffc17 	ldw	r2,-16(fp)
 401c484:	1000070e 	bge	r2,zero,401c4a4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 401c488:	401c3b40 	call	401c3b4 <alt_get_errno>
 401c48c:	1007883a 	mov	r3,r2
 401c490:	e0bffc17 	ldw	r2,-16(fp)
 401c494:	0085c83a 	sub	r2,zero,r2
 401c498:	18800015 	stw	r2,0(r3)
        return -1;
 401c49c:	00bfffc4 	movi	r2,-1
 401c4a0:	00000c06 	br	401c4d4 <write+0xe4>
      }
      return rval;
 401c4a4:	e0bffc17 	ldw	r2,-16(fp)
 401c4a8:	00000a06 	br	401c4d4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401c4ac:	401c3b40 	call	401c3b4 <alt_get_errno>
 401c4b0:	1007883a 	mov	r3,r2
 401c4b4:	00800344 	movi	r2,13
 401c4b8:	18800015 	stw	r2,0(r3)
 401c4bc:	00000406 	br	401c4d0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401c4c0:	401c3b40 	call	401c3b4 <alt_get_errno>
 401c4c4:	1007883a 	mov	r3,r2
 401c4c8:	00801444 	movi	r2,81
 401c4cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c4d0:	00bfffc4 	movi	r2,-1
}
 401c4d4:	e037883a 	mov	sp,fp
 401c4d8:	dfc00117 	ldw	ra,4(sp)
 401c4dc:	df000017 	ldw	fp,0(sp)
 401c4e0:	dec00204 	addi	sp,sp,8
 401c4e4:	f800283a 	ret

0401c4e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401c4e8:	defffd04 	addi	sp,sp,-12
 401c4ec:	dfc00215 	stw	ra,8(sp)
 401c4f0:	df000115 	stw	fp,4(sp)
 401c4f4:	df000104 	addi	fp,sp,4
 401c4f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401c4fc:	d1600b04 	addi	r5,gp,-32724
 401c500:	e13fff17 	ldw	r4,-4(fp)
 401c504:	401e5140 	call	401e514 <alt_dev_llist_insert>
}
 401c508:	e037883a 	mov	sp,fp
 401c50c:	dfc00117 	ldw	ra,4(sp)
 401c510:	df000017 	ldw	fp,0(sp)
 401c514:	dec00204 	addi	sp,sp,8
 401c518:	f800283a 	ret

0401c51c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401c51c:	defffd04 	addi	sp,sp,-12
 401c520:	dfc00215 	stw	ra,8(sp)
 401c524:	df000115 	stw	fp,4(sp)
 401c528:	df000104 	addi	fp,sp,4
 401c52c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 401c530:	401eb640 	call	401eb64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401c534:	00800044 	movi	r2,1
 401c538:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401c53c:	0001883a 	nop
 401c540:	e037883a 	mov	sp,fp
 401c544:	dfc00117 	ldw	ra,4(sp)
 401c548:	df000017 	ldw	fp,0(sp)
 401c54c:	dec00204 	addi	sp,sp,8
 401c550:	f800283a 	ret

0401c554 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401c554:	defffe04 	addi	sp,sp,-8
 401c558:	dfc00115 	stw	ra,4(sp)
 401c55c:	df000015 	stw	fp,0(sp)
 401c560:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 401c564:	01c0fa04 	movi	r7,1000
 401c568:	018000c4 	movi	r6,3
 401c56c:	000b883a 	mov	r5,zero
 401c570:	01020034 	movhi	r4,2048
 401c574:	401db9c0 	call	401db9c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 401c578:	010103f4 	movhi	r4,1039
 401c57c:	2107a704 	addi	r4,r4,7836
 401c580:	401c5f40 	call	401c5f4 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401c584:	01800184 	movi	r6,6
 401c588:	000b883a 	mov	r5,zero
 401c58c:	010103f4 	movhi	r4,1039
 401c590:	2107e404 	addi	r4,r4,8080
 401c594:	401d2200 	call	401d220 <altera_avalon_jtag_uart_init>
 401c598:	010103f4 	movhi	r4,1039
 401c59c:	2107da04 	addi	r4,r4,8040
 401c5a0:	401c4e80 	call	401c4e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 401c5a4:	0001883a 	nop
}
 401c5a8:	0001883a 	nop
 401c5ac:	e037883a 	mov	sp,fp
 401c5b0:	dfc00117 	ldw	ra,4(sp)
 401c5b4:	df000017 	ldw	fp,0(sp)
 401c5b8:	dec00204 	addi	sp,sp,8
 401c5bc:	f800283a 	ret

0401c5c0 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 401c5c0:	defffd04 	addi	sp,sp,-12
 401c5c4:	dfc00215 	stw	ra,8(sp)
 401c5c8:	df000115 	stw	fp,4(sp)
 401c5cc:	df000104 	addi	fp,sp,4
 401c5d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 401c5d4:	d1601304 	addi	r5,gp,-32692
 401c5d8:	e13fff17 	ldw	r4,-4(fp)
 401c5dc:	401e5140 	call	401e514 <alt_dev_llist_insert>
}
 401c5e0:	e037883a 	mov	sp,fp
 401c5e4:	dfc00117 	ldw	ra,4(sp)
 401c5e8:	df000017 	ldw	fp,0(sp)
 401c5ec:	dec00204 	addi	sp,sp,8
 401c5f0:	f800283a 	ret

0401c5f4 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 401c5f4:	defffc04 	addi	sp,sp,-16
 401c5f8:	dfc00315 	stw	ra,12(sp)
 401c5fc:	df000215 	stw	fp,8(sp)
 401c600:	df000204 	addi	fp,sp,8
 401c604:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 401c608:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 401c60c:	e13fff17 	ldw	r4,-4(fp)
 401c610:	401c6480 	call	401c648 <alt_epcs_flash_query>
 401c614:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 401c618:	e0bffe17 	ldw	r2,-8(fp)
 401c61c:	1000041e 	bne	r2,zero,401c630 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 401c620:	e0bfff17 	ldw	r2,-4(fp)
 401c624:	1009883a 	mov	r4,r2
 401c628:	401c5c00 	call	401c5c0 <alt_flash_device_register>
 401c62c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 401c630:	e0bffe17 	ldw	r2,-8(fp)
}
 401c634:	e037883a 	mov	sp,fp
 401c638:	dfc00117 	ldw	ra,4(sp)
 401c63c:	df000017 	ldw	fp,0(sp)
 401c640:	dec00204 	addi	sp,sp,8
 401c644:	f800283a 	ret

0401c648 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 401c648:	defffc04 	addi	sp,sp,-16
 401c64c:	dfc00315 	stw	ra,12(sp)
 401c650:	df000215 	stw	fp,8(sp)
 401c654:	df000204 	addi	fp,sp,8
 401c658:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 401c65c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 401c660:	e0bfff17 	ldw	r2,-4(fp)
 401c664:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 401c668:	e0bfff17 	ldw	r2,-4(fp)
 401c66c:	10802e17 	ldw	r2,184(r2)
 401c670:	1009883a 	mov	r4,r2
 401c674:	401e0b40 	call	401e0b4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 401c678:	10c03fcc 	andi	r3,r2,255
 401c67c:	e0bfff17 	ldw	r2,-4(fp)
 401c680:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 401c684:	e0bfff17 	ldw	r2,-4(fp)
 401c688:	10803017 	ldw	r2,192(r2)
 401c68c:	10800598 	cmpnei	r2,r2,22
 401c690:	10000a1e 	bne	r2,zero,401c6bc <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 401c694:	e0bfff17 	ldw	r2,-4(fp)
 401c698:	00c02034 	movhi	r3,128
 401c69c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 401c6a0:	e0bfff17 	ldw	r2,-4(fp)
 401c6a4:	00c02004 	movi	r3,128
 401c6a8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401c6ac:	e0bfff17 	ldw	r2,-4(fp)
 401c6b0:	00c00074 	movhi	r3,1
 401c6b4:	10c01015 	stw	r3,64(r2)
 401c6b8:	0000ce06 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 401c6bc:	e0bfff17 	ldw	r2,-4(fp)
 401c6c0:	10803017 	ldw	r2,192(r2)
 401c6c4:	10800518 	cmpnei	r2,r2,20
 401c6c8:	10000a1e 	bne	r2,zero,401c6f4 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 401c6cc:	e0bfff17 	ldw	r2,-4(fp)
 401c6d0:	00c00834 	movhi	r3,32
 401c6d4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 401c6d8:	e0bfff17 	ldw	r2,-4(fp)
 401c6dc:	00c00804 	movi	r3,32
 401c6e0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401c6e4:	e0bfff17 	ldw	r2,-4(fp)
 401c6e8:	00c00074 	movhi	r3,1
 401c6ec:	10c01015 	stw	r3,64(r2)
 401c6f0:	0000c006 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 401c6f4:	e0bfff17 	ldw	r2,-4(fp)
 401c6f8:	10803017 	ldw	r2,192(r2)
 401c6fc:	108004d8 	cmpnei	r2,r2,19
 401c700:	10000a1e 	bne	r2,zero,401c72c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 401c704:	e0bfff17 	ldw	r2,-4(fp)
 401c708:	00c00434 	movhi	r3,16
 401c70c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 401c710:	e0bfff17 	ldw	r2,-4(fp)
 401c714:	00c00404 	movi	r3,16
 401c718:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401c71c:	e0bfff17 	ldw	r2,-4(fp)
 401c720:	00c00074 	movhi	r3,1
 401c724:	10c01015 	stw	r3,64(r2)
 401c728:	0000b206 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 401c72c:	e0bfff17 	ldw	r2,-4(fp)
 401c730:	10803017 	ldw	r2,192(r2)
 401c734:	10800498 	cmpnei	r2,r2,18
 401c738:	10000a1e 	bne	r2,zero,401c764 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 401c73c:	e0bfff17 	ldw	r2,-4(fp)
 401c740:	00c00234 	movhi	r3,8
 401c744:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 401c748:	e0bfff17 	ldw	r2,-4(fp)
 401c74c:	00c00204 	movi	r3,8
 401c750:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401c754:	e0bfff17 	ldw	r2,-4(fp)
 401c758:	00c00074 	movhi	r3,1
 401c75c:	10c01015 	stw	r3,64(r2)
 401c760:	0000a406 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 401c764:	e0bfff17 	ldw	r2,-4(fp)
 401c768:	10803017 	ldw	r2,192(r2)
 401c76c:	10800418 	cmpnei	r2,r2,16
 401c770:	10000a1e 	bne	r2,zero,401c79c <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 401c774:	e0bfff17 	ldw	r2,-4(fp)
 401c778:	00c000b4 	movhi	r3,2
 401c77c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 401c780:	e0bfff17 	ldw	r2,-4(fp)
 401c784:	00c00104 	movi	r3,4
 401c788:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 401c78c:	e0bfff17 	ldw	r2,-4(fp)
 401c790:	00e00014 	movui	r3,32768
 401c794:	10c01015 	stw	r3,64(r2)
 401c798:	00009606 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 401c79c:	e0bfff17 	ldw	r2,-4(fp)
 401c7a0:	10802e17 	ldw	r2,184(r2)
 401c7a4:	1009883a 	mov	r4,r2
 401c7a8:	401e11c0 	call	401e11c <epcs_read_device_id>
 401c7ac:	1007883a 	mov	r3,r2
 401c7b0:	e0bfff17 	ldw	r2,-4(fp)
 401c7b4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 401c7b8:	e0bfff17 	ldw	r2,-4(fp)
 401c7bc:	10c03017 	ldw	r3,192(r2)
 401c7c0:	00804034 	movhi	r2,256
 401c7c4:	10bfffc4 	addi	r2,r2,-1
 401c7c8:	1886703a 	and	r3,r3,r2
 401c7cc:	00800874 	movhi	r2,33
 401c7d0:	10ae8544 	addi	r2,r2,-17899
 401c7d4:	18800a1e 	bne	r3,r2,401c800 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 401c7d8:	e0bfff17 	ldw	r2,-4(fp)
 401c7dc:	00c00834 	movhi	r3,32
 401c7e0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 401c7e4:	e0bfff17 	ldw	r2,-4(fp)
 401c7e8:	00c00804 	movi	r3,32
 401c7ec:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c7f0:	e0bfff17 	ldw	r2,-4(fp)
 401c7f4:	00c00074 	movhi	r3,1
 401c7f8:	10c01015 	stw	r3,64(r2)
 401c7fc:	00007d06 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 401c800:	e0bfff17 	ldw	r2,-4(fp)
 401c804:	10c03017 	ldw	r3,192(r2)
 401c808:	00804034 	movhi	r2,256
 401c80c:	10bfffc4 	addi	r2,r2,-1
 401c810:	1886703a 	and	r3,r3,r2
 401c814:	00800874 	movhi	r2,33
 401c818:	10ae8584 	addi	r2,r2,-17898
 401c81c:	18800a1e 	bne	r3,r2,401c848 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 401c820:	e0bfff17 	ldw	r2,-4(fp)
 401c824:	00c01034 	movhi	r3,64
 401c828:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 401c82c:	e0bfff17 	ldw	r2,-4(fp)
 401c830:	00c01004 	movi	r3,64
 401c834:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c838:	e0bfff17 	ldw	r2,-4(fp)
 401c83c:	00c00074 	movhi	r3,1
 401c840:	10c01015 	stw	r3,64(r2)
 401c844:	00006b06 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 401c848:	e0bfff17 	ldw	r2,-4(fp)
 401c84c:	10c03017 	ldw	r3,192(r2)
 401c850:	00804034 	movhi	r2,256
 401c854:	10bfffc4 	addi	r2,r2,-1
 401c858:	1886703a 	and	r3,r3,r2
 401c85c:	00800874 	movhi	r2,33
 401c860:	10ae85c4 	addi	r2,r2,-17897
 401c864:	18800a1e 	bne	r3,r2,401c890 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 401c868:	e0bfff17 	ldw	r2,-4(fp)
 401c86c:	00c02034 	movhi	r3,128
 401c870:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 401c874:	e0bfff17 	ldw	r2,-4(fp)
 401c878:	00c02004 	movi	r3,128
 401c87c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c880:	e0bfff17 	ldw	r2,-4(fp)
 401c884:	00c00074 	movhi	r3,1
 401c888:	10c01015 	stw	r3,64(r2)
 401c88c:	00005906 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 401c890:	e0bfff17 	ldw	r2,-4(fp)
 401c894:	10c03017 	ldw	r3,192(r2)
 401c898:	00804034 	movhi	r2,256
 401c89c:	10bfffc4 	addi	r2,r2,-1
 401c8a0:	1886703a 	and	r3,r3,r2
 401c8a4:	00800874 	movhi	r2,33
 401c8a8:	10ae8604 	addi	r2,r2,-17896
 401c8ac:	18800a1e 	bne	r3,r2,401c8d8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 401c8b0:	e0bfff17 	ldw	r2,-4(fp)
 401c8b4:	00c04034 	movhi	r3,256
 401c8b8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 401c8bc:	e0bfff17 	ldw	r2,-4(fp)
 401c8c0:	00c04004 	movi	r3,256
 401c8c4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c8c8:	e0bfff17 	ldw	r2,-4(fp)
 401c8cc:	00c00074 	movhi	r3,1
 401c8d0:	10c01015 	stw	r3,64(r2)
 401c8d4:	00004706 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 401c8d8:	e0bfff17 	ldw	r2,-4(fp)
 401c8dc:	10803017 	ldw	r2,192(r2)
 401c8e0:	10803fcc 	andi	r2,r2,255
 401c8e4:	10800618 	cmpnei	r2,r2,24
 401c8e8:	10000a1e 	bne	r2,zero,401c914 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 401c8ec:	e0bfff17 	ldw	r2,-4(fp)
 401c8f0:	00c04034 	movhi	r3,256
 401c8f4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 401c8f8:	e0bfff17 	ldw	r2,-4(fp)
 401c8fc:	00c01004 	movi	r3,64
 401c900:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 401c904:	e0bfff17 	ldw	r2,-4(fp)
 401c908:	00c00134 	movhi	r3,4
 401c90c:	10c01015 	stw	r3,64(r2)
 401c910:	00003806 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 401c914:	e0bfff17 	ldw	r2,-4(fp)
 401c918:	10803017 	ldw	r2,192(r2)
 401c91c:	10803fcc 	andi	r2,r2,255
 401c920:	10800658 	cmpnei	r2,r2,25
 401c924:	10000d1e 	bne	r2,zero,401c95c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 401c928:	e0bfff17 	ldw	r2,-4(fp)
 401c92c:	00c08034 	movhi	r3,512
 401c930:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 401c934:	e0bfff17 	ldw	r2,-4(fp)
 401c938:	00c08004 	movi	r3,512
 401c93c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c940:	e0bfff17 	ldw	r2,-4(fp)
 401c944:	00c00074 	movhi	r3,1
 401c948:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 401c94c:	e0bfff17 	ldw	r2,-4(fp)
 401c950:	00c00044 	movi	r3,1
 401c954:	10c03215 	stw	r3,200(r2)
 401c958:	00002606 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 401c95c:	e0bfff17 	ldw	r2,-4(fp)
 401c960:	10803017 	ldw	r2,192(r2)
 401c964:	10803fcc 	andi	r2,r2,255
 401c968:	10800818 	cmpnei	r2,r2,32
 401c96c:	10000d1e 	bne	r2,zero,401c9a4 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 401c970:	e0bfff17 	ldw	r2,-4(fp)
 401c974:	00c10034 	movhi	r3,1024
 401c978:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 401c97c:	e0bfff17 	ldw	r2,-4(fp)
 401c980:	00c10004 	movi	r3,1024
 401c984:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c988:	e0bfff17 	ldw	r2,-4(fp)
 401c98c:	00c00074 	movhi	r3,1
 401c990:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 401c994:	e0bfff17 	ldw	r2,-4(fp)
 401c998:	00c00044 	movi	r3,1
 401c99c:	10c03215 	stw	r3,200(r2)
 401c9a0:	00001406 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 401c9a4:	e0bfff17 	ldw	r2,-4(fp)
 401c9a8:	10803017 	ldw	r2,192(r2)
 401c9ac:	10803fcc 	andi	r2,r2,255
 401c9b0:	10800858 	cmpnei	r2,r2,33
 401c9b4:	10000d1e 	bne	r2,zero,401c9ec <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 401c9b8:	e0bfff17 	ldw	r2,-4(fp)
 401c9bc:	00c20034 	movhi	r3,2048
 401c9c0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 401c9c4:	e0bfff17 	ldw	r2,-4(fp)
 401c9c8:	00c20004 	movi	r3,2048
 401c9cc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401c9d0:	e0bfff17 	ldw	r2,-4(fp)
 401c9d4:	00c00074 	movhi	r3,1
 401c9d8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 401c9dc:	e0bfff17 	ldw	r2,-4(fp)
 401c9e0:	00c00044 	movi	r3,1
 401c9e4:	10c03215 	stw	r3,200(r2)
 401c9e8:	00000206 	br	401c9f4 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 401c9ec:	00bffb44 	movi	r2,-19
 401c9f0:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 401c9f4:	e0bfff17 	ldw	r2,-4(fp)
 401c9f8:	10800e17 	ldw	r2,56(r2)
 401c9fc:	1007883a 	mov	r3,r2
 401ca00:	e0bfff17 	ldw	r2,-4(fp)
 401ca04:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 401ca08:	e0bfff17 	ldw	r2,-4(fp)
 401ca0c:	00c00044 	movi	r3,1
 401ca10:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 401ca14:	e0bfff17 	ldw	r2,-4(fp)
 401ca18:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 401ca1c:	e0bfff17 	ldw	r2,-4(fp)
 401ca20:	00c04004 	movi	r3,256
 401ca24:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 401ca28:	e0bffe17 	ldw	r2,-8(fp)
}
 401ca2c:	e037883a 	mov	sp,fp
 401ca30:	dfc00117 	ldw	ra,4(sp)
 401ca34:	df000017 	ldw	fp,0(sp)
 401ca38:	dec00204 	addi	sp,sp,8
 401ca3c:	f800283a 	ret

0401ca40 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 401ca40:	deffee04 	addi	sp,sp,-72
 401ca44:	dfc01115 	stw	ra,68(sp)
 401ca48:	df001015 	stw	fp,64(sp)
 401ca4c:	df001004 	addi	fp,sp,64
 401ca50:	e13ffc15 	stw	r4,-16(fp)
 401ca54:	e17ffd15 	stw	r5,-12(fp)
 401ca58:	e1bffe15 	stw	r6,-8(fp)
 401ca5c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 401ca60:	00800804 	movi	r2,32
 401ca64:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 401ca68:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 401ca6c:	00002706 	br	401cb0c <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 401ca70:	e0fff117 	ldw	r3,-60(fp)
 401ca74:	e0bfff17 	ldw	r2,-4(fp)
 401ca78:	1880012e 	bgeu	r3,r2,401ca80 <alt_epcs_flash_memcmp+0x40>
 401ca7c:	1805883a 	mov	r2,r3
 401ca80:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 401ca84:	e0fffe17 	ldw	r3,-8(fp)
 401ca88:	e0bff017 	ldw	r2,-64(fp)
 401ca8c:	1885883a 	add	r2,r3,r2
 401ca90:	e0fff404 	addi	r3,fp,-48
 401ca94:	e1fff217 	ldw	r7,-56(fp)
 401ca98:	180d883a 	mov	r6,r3
 401ca9c:	100b883a 	mov	r5,r2
 401caa0:	e13ffc17 	ldw	r4,-16(fp)
 401caa4:	401d0240 	call	401d024 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 401caa8:	1000020e 	bge	r2,zero,401cab4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 401caac:	00bfffc4 	movi	r2,-1
 401cab0:	00001906 	br	401cb18 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 401cab4:	e0bff017 	ldw	r2,-64(fp)
 401cab8:	e0fffd17 	ldw	r3,-12(fp)
 401cabc:	1885883a 	add	r2,r3,r2
 401cac0:	e13ff217 	ldw	r4,-56(fp)
 401cac4:	e0fff404 	addi	r3,fp,-48
 401cac8:	200d883a 	mov	r6,r4
 401cacc:	180b883a 	mov	r5,r3
 401cad0:	1009883a 	mov	r4,r2
 401cad4:	401f00c0 	call	401f00c <memcmp>
 401cad8:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 401cadc:	e0bff317 	ldw	r2,-52(fp)
 401cae0:	10000226 	beq	r2,zero,401caec <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 401cae4:	e0bff317 	ldw	r2,-52(fp)
 401cae8:	00000b06 	br	401cb18 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 401caec:	e0bff217 	ldw	r2,-56(fp)
 401caf0:	e0ffff17 	ldw	r3,-4(fp)
 401caf4:	1885c83a 	sub	r2,r3,r2
 401caf8:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 401cafc:	e0fff017 	ldw	r3,-64(fp)
 401cb00:	e0bff217 	ldw	r2,-56(fp)
 401cb04:	1885883a 	add	r2,r3,r2
 401cb08:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 401cb0c:	e0bfff17 	ldw	r2,-4(fp)
 401cb10:	103fd71e 	bne	r2,zero,401ca70 <__alt_mem_epcs_flash_controller_0+0xfb01ba70>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 401cb14:	0005883a 	mov	r2,zero
}
 401cb18:	e037883a 	mov	sp,fp
 401cb1c:	dfc00117 	ldw	ra,4(sp)
 401cb20:	df000017 	ldw	fp,0(sp)
 401cb24:	dec00204 	addi	sp,sp,8
 401cb28:	f800283a 	ret

0401cb2c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 401cb2c:	defff404 	addi	sp,sp,-48
 401cb30:	dfc00b15 	stw	ra,44(sp)
 401cb34:	df000a15 	stw	fp,40(sp)
 401cb38:	df000a04 	addi	fp,sp,40
 401cb3c:	e13ffc15 	stw	r4,-16(fp)
 401cb40:	e17ffd15 	stw	r5,-12(fp)
 401cb44:	e1bffe15 	stw	r6,-8(fp)
 401cb48:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 401cb4c:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401cb50:	e03ff815 	stw	zero,-32(fp)
 401cb54:	00008306 	br	401cd64 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401cb58:	e0fffc17 	ldw	r3,-16(fp)
 401cb5c:	e0bff817 	ldw	r2,-32(fp)
 401cb60:	1004913a 	slli	r2,r2,4
 401cb64:	1885883a 	add	r2,r3,r2
 401cb68:	10800d04 	addi	r2,r2,52
 401cb6c:	10800017 	ldw	r2,0(r2)
 401cb70:	e0fffd17 	ldw	r3,-12(fp)
 401cb74:	18807816 	blt	r3,r2,401cd58 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 401cb78:	e0fffc17 	ldw	r3,-16(fp)
 401cb7c:	e0bff817 	ldw	r2,-32(fp)
 401cb80:	1004913a 	slli	r2,r2,4
 401cb84:	1885883a 	add	r2,r3,r2
 401cb88:	10800d04 	addi	r2,r2,52
 401cb8c:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 401cb90:	e13ffc17 	ldw	r4,-16(fp)
 401cb94:	e0bff817 	ldw	r2,-32(fp)
 401cb98:	1004913a 	slli	r2,r2,4
 401cb9c:	2085883a 	add	r2,r4,r2
 401cba0:	10800e04 	addi	r2,r2,56
 401cba4:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 401cba8:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401cbac:	e0fffd17 	ldw	r3,-12(fp)
 401cbb0:	1880690e 	bge	r3,r2,401cd58 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 401cbb4:	e0fffc17 	ldw	r3,-16(fp)
 401cbb8:	e0bff817 	ldw	r2,-32(fp)
 401cbbc:	1004913a 	slli	r2,r2,4
 401cbc0:	1885883a 	add	r2,r3,r2
 401cbc4:	10800d04 	addi	r2,r2,52
 401cbc8:	10800017 	ldw	r2,0(r2)
 401cbcc:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 401cbd0:	e03ff915 	stw	zero,-28(fp)
 401cbd4:	00005806 	br	401cd38 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 401cbd8:	e0fffd17 	ldw	r3,-12(fp)
 401cbdc:	e0bffa17 	ldw	r2,-24(fp)
 401cbe0:	18804916 	blt	r3,r2,401cd08 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 401cbe4:	e0fffc17 	ldw	r3,-16(fp)
 401cbe8:	e0bff817 	ldw	r2,-32(fp)
 401cbec:	10800104 	addi	r2,r2,4
 401cbf0:	1004913a 	slli	r2,r2,4
 401cbf4:	1885883a 	add	r2,r3,r2
 401cbf8:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 401cbfc:	e0bffa17 	ldw	r2,-24(fp)
 401cc00:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 401cc04:	e0fffd17 	ldw	r3,-12(fp)
 401cc08:	18803f0e 	bge	r3,r2,401cd08 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 401cc0c:	e0fffc17 	ldw	r3,-16(fp)
 401cc10:	e0bff817 	ldw	r2,-32(fp)
 401cc14:	10800104 	addi	r2,r2,4
 401cc18:	1004913a 	slli	r2,r2,4
 401cc1c:	1885883a 	add	r2,r3,r2
 401cc20:	10c00017 	ldw	r3,0(r2)
 401cc24:	e0bffa17 	ldw	r2,-24(fp)
 401cc28:	1887883a 	add	r3,r3,r2
 401cc2c:	e0bffd17 	ldw	r2,-12(fp)
 401cc30:	1885c83a 	sub	r2,r3,r2
 401cc34:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 401cc38:	e0fffb17 	ldw	r3,-20(fp)
 401cc3c:	e0bfff17 	ldw	r2,-4(fp)
 401cc40:	1880010e 	bge	r3,r2,401cc48 <alt_epcs_flash_write+0x11c>
 401cc44:	1805883a 	mov	r2,r3
 401cc48:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 401cc4c:	e0bffb17 	ldw	r2,-20(fp)
 401cc50:	100f883a 	mov	r7,r2
 401cc54:	e1bffd17 	ldw	r6,-12(fp)
 401cc58:	e17ffe17 	ldw	r5,-8(fp)
 401cc5c:	e13ffc17 	ldw	r4,-16(fp)
 401cc60:	401ca400 	call	401ca40 <alt_epcs_flash_memcmp>
 401cc64:	10001226 	beq	r2,zero,401ccb0 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 401cc68:	e0bffc17 	ldw	r2,-16(fp)
 401cc6c:	10800817 	ldw	r2,32(r2)
 401cc70:	e17ffa17 	ldw	r5,-24(fp)
 401cc74:	e13ffc17 	ldw	r4,-16(fp)
 401cc78:	103ee83a 	callr	r2
 401cc7c:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 401cc80:	e0bff717 	ldw	r2,-36(fp)
 401cc84:	10000a1e 	bne	r2,zero,401ccb0 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 401cc88:	e0bffc17 	ldw	r2,-16(fp)
 401cc8c:	10800917 	ldw	r2,36(r2)
 401cc90:	e0fffb17 	ldw	r3,-20(fp)
 401cc94:	d8c00015 	stw	r3,0(sp)
 401cc98:	e1fffe17 	ldw	r7,-8(fp)
 401cc9c:	e1bffd17 	ldw	r6,-12(fp)
 401cca0:	e17ffa17 	ldw	r5,-24(fp)
 401cca4:	e13ffc17 	ldw	r4,-16(fp)
 401cca8:	103ee83a 	callr	r2
 401ccac:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 401ccb0:	e0ffff17 	ldw	r3,-4(fp)
 401ccb4:	e0bffb17 	ldw	r2,-20(fp)
 401ccb8:	18802e26 	beq	r3,r2,401cd74 <alt_epcs_flash_write+0x248>
 401ccbc:	e0bff717 	ldw	r2,-36(fp)
 401ccc0:	10002c1e 	bne	r2,zero,401cd74 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 401ccc4:	e0ffff17 	ldw	r3,-4(fp)
 401ccc8:	e0bffb17 	ldw	r2,-20(fp)
 401cccc:	1885c83a 	sub	r2,r3,r2
 401ccd0:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 401ccd4:	e0fffc17 	ldw	r3,-16(fp)
 401ccd8:	e0bff817 	ldw	r2,-32(fp)
 401ccdc:	10800104 	addi	r2,r2,4
 401cce0:	1004913a 	slli	r2,r2,4
 401cce4:	1885883a 	add	r2,r3,r2
 401cce8:	10c00017 	ldw	r3,0(r2)
 401ccec:	e0bffa17 	ldw	r2,-24(fp)
 401ccf0:	1885883a 	add	r2,r3,r2
 401ccf4:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 401ccf8:	e0bffb17 	ldw	r2,-20(fp)
 401ccfc:	e0fffe17 	ldw	r3,-8(fp)
 401cd00:	1885883a 	add	r2,r3,r2
 401cd04:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 401cd08:	e0fffc17 	ldw	r3,-16(fp)
 401cd0c:	e0bff817 	ldw	r2,-32(fp)
 401cd10:	10800104 	addi	r2,r2,4
 401cd14:	1004913a 	slli	r2,r2,4
 401cd18:	1885883a 	add	r2,r3,r2
 401cd1c:	10800017 	ldw	r2,0(r2)
 401cd20:	e0fffa17 	ldw	r3,-24(fp)
 401cd24:	1885883a 	add	r2,r3,r2
 401cd28:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 401cd2c:	e0bff917 	ldw	r2,-28(fp)
 401cd30:	10800044 	addi	r2,r2,1
 401cd34:	e0bff915 	stw	r2,-28(fp)
 401cd38:	e0fffc17 	ldw	r3,-16(fp)
 401cd3c:	e0bff817 	ldw	r2,-32(fp)
 401cd40:	1004913a 	slli	r2,r2,4
 401cd44:	1885883a 	add	r2,r3,r2
 401cd48:	10800f04 	addi	r2,r2,60
 401cd4c:	10800017 	ldw	r2,0(r2)
 401cd50:	e0fff917 	ldw	r3,-28(fp)
 401cd54:	18bfa016 	blt	r3,r2,401cbd8 <__alt_mem_epcs_flash_controller_0+0xfb01bbd8>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401cd58:	e0bff817 	ldw	r2,-32(fp)
 401cd5c:	10800044 	addi	r2,r2,1
 401cd60:	e0bff815 	stw	r2,-32(fp)
 401cd64:	e0bffc17 	ldw	r2,-16(fp)
 401cd68:	10800c17 	ldw	r2,48(r2)
 401cd6c:	e0fff817 	ldw	r3,-32(fp)
 401cd70:	18bf7916 	blt	r3,r2,401cb58 <__alt_mem_epcs_flash_controller_0+0xfb01bb58>
      }
    }
  }

finished:
  return ret_code;
 401cd74:	e0bff717 	ldw	r2,-36(fp)
}
 401cd78:	e037883a 	mov	sp,fp
 401cd7c:	dfc00117 	ldw	ra,4(sp)
 401cd80:	df000017 	ldw	fp,0(sp)
 401cd84:	dec00204 	addi	sp,sp,8
 401cd88:	f800283a 	ret

0401cd8c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 401cd8c:	defffa04 	addi	sp,sp,-24
 401cd90:	df000515 	stw	fp,20(sp)
 401cd94:	df000504 	addi	fp,sp,20
 401cd98:	e13ffd15 	stw	r4,-12(fp)
 401cd9c:	e17ffe15 	stw	r5,-8(fp)
 401cda0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 401cda4:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 401cda8:	e0bffd17 	ldw	r2,-12(fp)
 401cdac:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 401cdb0:	e0bffc17 	ldw	r2,-16(fp)
 401cdb4:	10c00c17 	ldw	r3,48(r2)
 401cdb8:	e0bfff17 	ldw	r2,-4(fp)
 401cdbc:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 401cdc0:	e0bffc17 	ldw	r2,-16(fp)
 401cdc4:	10800c17 	ldw	r2,48(r2)
 401cdc8:	1000031e 	bne	r2,zero,401cdd8 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 401cdcc:	00bffec4 	movi	r2,-5
 401cdd0:	e0bffb15 	stw	r2,-20(fp)
 401cdd4:	00000b06 	br	401ce04 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 401cdd8:	e0bffc17 	ldw	r2,-16(fp)
 401cddc:	10800c17 	ldw	r2,48(r2)
 401cde0:	10800250 	cmplti	r2,r2,9
 401cde4:	1000031e 	bne	r2,zero,401cdf4 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 401cde8:	00bffd04 	movi	r2,-12
 401cdec:	e0bffb15 	stw	r2,-20(fp)
 401cdf0:	00000406 	br	401ce04 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 401cdf4:	e0bffc17 	ldw	r2,-16(fp)
 401cdf8:	10c00d04 	addi	r3,r2,52
 401cdfc:	e0bffe17 	ldw	r2,-8(fp)
 401ce00:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 401ce04:	e0bffb17 	ldw	r2,-20(fp)
}
 401ce08:	e037883a 	mov	sp,fp
 401ce0c:	df000017 	ldw	fp,0(sp)
 401ce10:	dec00104 	addi	sp,sp,4
 401ce14:	f800283a 	ret

0401ce18 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 401ce18:	defff904 	addi	sp,sp,-28
 401ce1c:	df000615 	stw	fp,24(sp)
 401ce20:	df000604 	addi	fp,sp,24
 401ce24:	e13ffe15 	stw	r4,-8(fp)
 401ce28:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 401ce2c:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401ce30:	e0bffe17 	ldw	r2,-8(fp)
 401ce34:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 401ce38:	e0bffb17 	ldw	r2,-20(fp)
 401ce3c:	10800c17 	ldw	r2,48(r2)
 401ce40:	10bfffc4 	addi	r2,r2,-1
 401ce44:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 401ce48:	e0fffb17 	ldw	r3,-20(fp)
 401ce4c:	e0bffc17 	ldw	r2,-16(fp)
 401ce50:	1004913a 	slli	r2,r2,4
 401ce54:	1885883a 	add	r2,r3,r2
 401ce58:	10800d04 	addi	r2,r2,52
 401ce5c:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 401ce60:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 401ce64:	e13ffb17 	ldw	r4,-20(fp)
 401ce68:	e0bffc17 	ldw	r2,-16(fp)
 401ce6c:	1004913a 	slli	r2,r2,4
 401ce70:	2085883a 	add	r2,r4,r2
 401ce74:	10800e04 	addi	r2,r2,56
 401ce78:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 401ce7c:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 401ce80:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 401ce84:	e0bfff17 	ldw	r2,-4(fp)
 401ce88:	e0fffd17 	ldw	r3,-12(fp)
 401ce8c:	1880022e 	bgeu	r3,r2,401ce98 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 401ce90:	00bffec4 	movi	r2,-5
 401ce94:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 401ce98:	e0bffa17 	ldw	r2,-24(fp)
}
 401ce9c:	e037883a 	mov	sp,fp
 401cea0:	df000017 	ldw	fp,0(sp)
 401cea4:	dec00104 	addi	sp,sp,4
 401cea8:	f800283a 	ret

0401ceac <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 401ceac:	defffa04 	addi	sp,sp,-24
 401ceb0:	dfc00515 	stw	ra,20(sp)
 401ceb4:	df000415 	stw	fp,16(sp)
 401ceb8:	df000404 	addi	fp,sp,16
 401cebc:	e13ffe15 	stw	r4,-8(fp)
 401cec0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 401cec4:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401cec8:	e0bffe17 	ldw	r2,-8(fp)
 401cecc:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 401ced0:	e17fff17 	ldw	r5,-4(fp)
 401ced4:	e13ffe17 	ldw	r4,-8(fp)
 401ced8:	401ce180 	call	401ce18 <alt_epcs_test_address>
 401cedc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 401cee0:	e0bffc17 	ldw	r2,-16(fp)
 401cee4:	10000916 	blt	r2,zero,401cf0c <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 401cee8:	e0bffd17 	ldw	r2,-12(fp)
 401ceec:	10c02e17 	ldw	r3,184(r2)
 401cef0:	e13fff17 	ldw	r4,-4(fp)
 401cef4:	e0bffd17 	ldw	r2,-12(fp)
 401cef8:	10803217 	ldw	r2,200(r2)
 401cefc:	100d883a 	mov	r6,r2
 401cf00:	200b883a 	mov	r5,r4
 401cf04:	1809883a 	mov	r4,r3
 401cf08:	401dce80 	call	401dce8 <epcs_sector_erase>
  }
  return ret_code;
 401cf0c:	e0bffc17 	ldw	r2,-16(fp)
}
 401cf10:	e037883a 	mov	sp,fp
 401cf14:	dfc00117 	ldw	ra,4(sp)
 401cf18:	df000017 	ldw	fp,0(sp)
 401cf1c:	dec00204 	addi	sp,sp,8
 401cf20:	f800283a 	ret

0401cf24 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 401cf24:	defff404 	addi	sp,sp,-48
 401cf28:	dfc00b15 	stw	ra,44(sp)
 401cf2c:	df000a15 	stw	fp,40(sp)
 401cf30:	df000a04 	addi	fp,sp,40
 401cf34:	e13ffc15 	stw	r4,-16(fp)
 401cf38:	e17ffd15 	stw	r5,-12(fp)
 401cf3c:	e1bffe15 	stw	r6,-8(fp)
 401cf40:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401cf44:	e0bffc17 	ldw	r2,-16(fp)
 401cf48:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 401cf4c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 401cf50:	e17ffe17 	ldw	r5,-8(fp)
 401cf54:	e13ffc17 	ldw	r4,-16(fp)
 401cf58:	401ce180 	call	401ce18 <alt_epcs_test_address>
 401cf5c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 401cf60:	e0bff917 	ldw	r2,-28(fp)
 401cf64:	10002916 	blt	r2,zero,401d00c <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 401cf68:	00002606 	br	401d004 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 401cf6c:	e0bff817 	ldw	r2,-32(fp)
 401cf70:	10c03117 	ldw	r3,196(r2)
 401cf74:	e0bffe17 	ldw	r2,-8(fp)
 401cf78:	1887883a 	add	r3,r3,r2
 401cf7c:	e0bff817 	ldw	r2,-32(fp)
 401cf80:	10803117 	ldw	r2,196(r2)
 401cf84:	0085c83a 	sub	r2,zero,r2
 401cf88:	1884703a 	and	r2,r3,r2
 401cf8c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 401cf90:	e0fffa17 	ldw	r3,-24(fp)
 401cf94:	e0bffe17 	ldw	r2,-8(fp)
 401cf98:	1885c83a 	sub	r2,r3,r2
 401cf9c:	e0c00217 	ldw	r3,8(fp)
 401cfa0:	1880010e 	bge	r3,r2,401cfa8 <alt_epcs_flash_write_block+0x84>
 401cfa4:	1805883a 	mov	r2,r3
 401cfa8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 401cfac:	e0bff817 	ldw	r2,-32(fp)
 401cfb0:	11002e17 	ldw	r4,184(r2)
 401cfb4:	e0bff717 	ldw	r2,-36(fp)
 401cfb8:	e0ffff17 	ldw	r3,-4(fp)
 401cfbc:	1887883a 	add	r3,r3,r2
 401cfc0:	e0bff817 	ldw	r2,-32(fp)
 401cfc4:	10803217 	ldw	r2,200(r2)
 401cfc8:	d8800015 	stw	r2,0(sp)
 401cfcc:	e1fffb17 	ldw	r7,-20(fp)
 401cfd0:	180d883a 	mov	r6,r3
 401cfd4:	e17ffe17 	ldw	r5,-8(fp)
 401cfd8:	401df980 	call	401df98 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 401cfdc:	e0c00217 	ldw	r3,8(fp)
 401cfe0:	e0bffb17 	ldw	r2,-20(fp)
 401cfe4:	1885c83a 	sub	r2,r3,r2
 401cfe8:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 401cfec:	e0fff717 	ldw	r3,-36(fp)
 401cff0:	e0bffb17 	ldw	r2,-20(fp)
 401cff4:	1885883a 	add	r2,r3,r2
 401cff8:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 401cffc:	e0bffa17 	ldw	r2,-24(fp)
 401d000:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 401d004:	e0800217 	ldw	r2,8(fp)
 401d008:	103fd81e 	bne	r2,zero,401cf6c <__alt_mem_epcs_flash_controller_0+0xfb01bf6c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 401d00c:	e0bff917 	ldw	r2,-28(fp)
}
 401d010:	e037883a 	mov	sp,fp
 401d014:	dfc00117 	ldw	ra,4(sp)
 401d018:	df000017 	ldw	fp,0(sp)
 401d01c:	dec00204 	addi	sp,sp,8
 401d020:	f800283a 	ret

0401d024 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 401d024:	defff704 	addi	sp,sp,-36
 401d028:	dfc00815 	stw	ra,32(sp)
 401d02c:	df000715 	stw	fp,28(sp)
 401d030:	df000704 	addi	fp,sp,28
 401d034:	e13ffc15 	stw	r4,-16(fp)
 401d038:	e17ffd15 	stw	r5,-12(fp)
 401d03c:	e1bffe15 	stw	r6,-8(fp)
 401d040:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 401d044:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401d048:	e0bffc17 	ldw	r2,-16(fp)
 401d04c:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 401d050:	e17ffd17 	ldw	r5,-12(fp)
 401d054:	e13ffc17 	ldw	r4,-16(fp)
 401d058:	401ce180 	call	401ce18 <alt_epcs_test_address>
 401d05c:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 401d060:	e0bffa17 	ldw	r2,-24(fp)
 401d064:	10000f16 	blt	r2,zero,401d0a4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 401d068:	e0bffb17 	ldw	r2,-20(fp)
 401d06c:	10c02e17 	ldw	r3,184(r2)
 401d070:	e0bffb17 	ldw	r2,-20(fp)
 401d074:	10803217 	ldw	r2,200(r2)
 401d078:	d8800015 	stw	r2,0(sp)
 401d07c:	e1ffff17 	ldw	r7,-4(fp)
 401d080:	e1bffe17 	ldw	r6,-8(fp)
 401d084:	e17ffd17 	ldw	r5,-12(fp)
 401d088:	1809883a 	mov	r4,r3
 401d08c:	401dde40 	call	401dde4 <epcs_read_buffer>
 401d090:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 401d094:	e0fffa17 	ldw	r3,-24(fp)
 401d098:	e0bfff17 	ldw	r2,-4(fp)
 401d09c:	1880011e 	bne	r3,r2,401d0a4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 401d0a0:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 401d0a4:	e0bffa17 	ldw	r2,-24(fp)
}
 401d0a8:	e037883a 	mov	sp,fp
 401d0ac:	dfc00117 	ldw	ra,4(sp)
 401d0b0:	df000017 	ldw	fp,0(sp)
 401d0b4:	dec00204 	addi	sp,sp,8
 401d0b8:	f800283a 	ret

0401d0bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401d0bc:	defffa04 	addi	sp,sp,-24
 401d0c0:	dfc00515 	stw	ra,20(sp)
 401d0c4:	df000415 	stw	fp,16(sp)
 401d0c8:	df000404 	addi	fp,sp,16
 401d0cc:	e13ffd15 	stw	r4,-12(fp)
 401d0d0:	e17ffe15 	stw	r5,-8(fp)
 401d0d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401d0d8:	e0bffd17 	ldw	r2,-12(fp)
 401d0dc:	10800017 	ldw	r2,0(r2)
 401d0e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401d0e4:	e0bffc17 	ldw	r2,-16(fp)
 401d0e8:	10c00a04 	addi	r3,r2,40
 401d0ec:	e0bffd17 	ldw	r2,-12(fp)
 401d0f0:	10800217 	ldw	r2,8(r2)
 401d0f4:	100f883a 	mov	r7,r2
 401d0f8:	e1bfff17 	ldw	r6,-4(fp)
 401d0fc:	e17ffe17 	ldw	r5,-8(fp)
 401d100:	1809883a 	mov	r4,r3
 401d104:	401d6e40 	call	401d6e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401d108:	e037883a 	mov	sp,fp
 401d10c:	dfc00117 	ldw	ra,4(sp)
 401d110:	df000017 	ldw	fp,0(sp)
 401d114:	dec00204 	addi	sp,sp,8
 401d118:	f800283a 	ret

0401d11c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401d11c:	defffa04 	addi	sp,sp,-24
 401d120:	dfc00515 	stw	ra,20(sp)
 401d124:	df000415 	stw	fp,16(sp)
 401d128:	df000404 	addi	fp,sp,16
 401d12c:	e13ffd15 	stw	r4,-12(fp)
 401d130:	e17ffe15 	stw	r5,-8(fp)
 401d134:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401d138:	e0bffd17 	ldw	r2,-12(fp)
 401d13c:	10800017 	ldw	r2,0(r2)
 401d140:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401d144:	e0bffc17 	ldw	r2,-16(fp)
 401d148:	10c00a04 	addi	r3,r2,40
 401d14c:	e0bffd17 	ldw	r2,-12(fp)
 401d150:	10800217 	ldw	r2,8(r2)
 401d154:	100f883a 	mov	r7,r2
 401d158:	e1bfff17 	ldw	r6,-4(fp)
 401d15c:	e17ffe17 	ldw	r5,-8(fp)
 401d160:	1809883a 	mov	r4,r3
 401d164:	401d9000 	call	401d900 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401d168:	e037883a 	mov	sp,fp
 401d16c:	dfc00117 	ldw	ra,4(sp)
 401d170:	df000017 	ldw	fp,0(sp)
 401d174:	dec00204 	addi	sp,sp,8
 401d178:	f800283a 	ret

0401d17c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401d17c:	defffc04 	addi	sp,sp,-16
 401d180:	dfc00315 	stw	ra,12(sp)
 401d184:	df000215 	stw	fp,8(sp)
 401d188:	df000204 	addi	fp,sp,8
 401d18c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401d190:	e0bfff17 	ldw	r2,-4(fp)
 401d194:	10800017 	ldw	r2,0(r2)
 401d198:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401d19c:	e0bffe17 	ldw	r2,-8(fp)
 401d1a0:	10c00a04 	addi	r3,r2,40
 401d1a4:	e0bfff17 	ldw	r2,-4(fp)
 401d1a8:	10800217 	ldw	r2,8(r2)
 401d1ac:	100b883a 	mov	r5,r2
 401d1b0:	1809883a 	mov	r4,r3
 401d1b4:	401d58c0 	call	401d58c <altera_avalon_jtag_uart_close>
}
 401d1b8:	e037883a 	mov	sp,fp
 401d1bc:	dfc00117 	ldw	ra,4(sp)
 401d1c0:	df000017 	ldw	fp,0(sp)
 401d1c4:	dec00204 	addi	sp,sp,8
 401d1c8:	f800283a 	ret

0401d1cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401d1cc:	defffa04 	addi	sp,sp,-24
 401d1d0:	dfc00515 	stw	ra,20(sp)
 401d1d4:	df000415 	stw	fp,16(sp)
 401d1d8:	df000404 	addi	fp,sp,16
 401d1dc:	e13ffd15 	stw	r4,-12(fp)
 401d1e0:	e17ffe15 	stw	r5,-8(fp)
 401d1e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401d1e8:	e0bffd17 	ldw	r2,-12(fp)
 401d1ec:	10800017 	ldw	r2,0(r2)
 401d1f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401d1f4:	e0bffc17 	ldw	r2,-16(fp)
 401d1f8:	10800a04 	addi	r2,r2,40
 401d1fc:	e1bfff17 	ldw	r6,-4(fp)
 401d200:	e17ffe17 	ldw	r5,-8(fp)
 401d204:	1009883a 	mov	r4,r2
 401d208:	401d5f40 	call	401d5f4 <altera_avalon_jtag_uart_ioctl>
}
 401d20c:	e037883a 	mov	sp,fp
 401d210:	dfc00117 	ldw	ra,4(sp)
 401d214:	df000017 	ldw	fp,0(sp)
 401d218:	dec00204 	addi	sp,sp,8
 401d21c:	f800283a 	ret

0401d220 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401d220:	defffa04 	addi	sp,sp,-24
 401d224:	dfc00515 	stw	ra,20(sp)
 401d228:	df000415 	stw	fp,16(sp)
 401d22c:	df000404 	addi	fp,sp,16
 401d230:	e13ffd15 	stw	r4,-12(fp)
 401d234:	e17ffe15 	stw	r5,-8(fp)
 401d238:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d23c:	e0bffd17 	ldw	r2,-12(fp)
 401d240:	00c00044 	movi	r3,1
 401d244:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401d248:	e0bffd17 	ldw	r2,-12(fp)
 401d24c:	10800017 	ldw	r2,0(r2)
 401d250:	10800104 	addi	r2,r2,4
 401d254:	1007883a 	mov	r3,r2
 401d258:	e0bffd17 	ldw	r2,-12(fp)
 401d25c:	10800817 	ldw	r2,32(r2)
 401d260:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401d264:	e0bffe17 	ldw	r2,-8(fp)
 401d268:	e0ffff17 	ldw	r3,-4(fp)
 401d26c:	d8000015 	stw	zero,0(sp)
 401d270:	e1fffd17 	ldw	r7,-12(fp)
 401d274:	018100b4 	movhi	r6,1026
 401d278:	31b4b804 	addi	r6,r6,-11552
 401d27c:	180b883a 	mov	r5,r3
 401d280:	1009883a 	mov	r4,r2
 401d284:	401ba400 	call	401ba40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401d288:	e0bffd17 	ldw	r2,-12(fp)
 401d28c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401d290:	e0bffd17 	ldw	r2,-12(fp)
 401d294:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401d298:	d0e02017 	ldw	r3,-32640(gp)
 401d29c:	e1fffd17 	ldw	r7,-12(fp)
 401d2a0:	018100b4 	movhi	r6,1026
 401d2a4:	31b53b04 	addi	r6,r6,-11028
 401d2a8:	180b883a 	mov	r5,r3
 401d2ac:	1009883a 	mov	r4,r2
 401d2b0:	401e2540 	call	401e254 <alt_alarm_start>
 401d2b4:	1000040e 	bge	r2,zero,401d2c8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401d2b8:	e0fffd17 	ldw	r3,-12(fp)
 401d2bc:	00a00034 	movhi	r2,32768
 401d2c0:	10bfffc4 	addi	r2,r2,-1
 401d2c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401d2c8:	0001883a 	nop
 401d2cc:	e037883a 	mov	sp,fp
 401d2d0:	dfc00117 	ldw	ra,4(sp)
 401d2d4:	df000017 	ldw	fp,0(sp)
 401d2d8:	dec00204 	addi	sp,sp,8
 401d2dc:	f800283a 	ret

0401d2e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401d2e0:	defff804 	addi	sp,sp,-32
 401d2e4:	df000715 	stw	fp,28(sp)
 401d2e8:	df000704 	addi	fp,sp,28
 401d2ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401d2f0:	e0bfff17 	ldw	r2,-4(fp)
 401d2f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401d2f8:	e0bffb17 	ldw	r2,-20(fp)
 401d2fc:	10800017 	ldw	r2,0(r2)
 401d300:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d304:	e0bffc17 	ldw	r2,-16(fp)
 401d308:	10800104 	addi	r2,r2,4
 401d30c:	10800037 	ldwio	r2,0(r2)
 401d310:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401d314:	e0bffd17 	ldw	r2,-12(fp)
 401d318:	1080c00c 	andi	r2,r2,768
 401d31c:	10006d26 	beq	r2,zero,401d4d4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401d320:	e0bffd17 	ldw	r2,-12(fp)
 401d324:	1080400c 	andi	r2,r2,256
 401d328:	10003526 	beq	r2,zero,401d400 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401d32c:	00800074 	movhi	r2,1
 401d330:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d334:	e0bffb17 	ldw	r2,-20(fp)
 401d338:	10800a17 	ldw	r2,40(r2)
 401d33c:	10800044 	addi	r2,r2,1
 401d340:	1081ffcc 	andi	r2,r2,2047
 401d344:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401d348:	e0bffb17 	ldw	r2,-20(fp)
 401d34c:	10c00b17 	ldw	r3,44(r2)
 401d350:	e0bffe17 	ldw	r2,-8(fp)
 401d354:	18801526 	beq	r3,r2,401d3ac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401d358:	e0bffc17 	ldw	r2,-16(fp)
 401d35c:	10800037 	ldwio	r2,0(r2)
 401d360:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401d364:	e0bff917 	ldw	r2,-28(fp)
 401d368:	10a0000c 	andi	r2,r2,32768
 401d36c:	10001126 	beq	r2,zero,401d3b4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401d370:	e0bffb17 	ldw	r2,-20(fp)
 401d374:	10800a17 	ldw	r2,40(r2)
 401d378:	e0fff917 	ldw	r3,-28(fp)
 401d37c:	1809883a 	mov	r4,r3
 401d380:	e0fffb17 	ldw	r3,-20(fp)
 401d384:	1885883a 	add	r2,r3,r2
 401d388:	10800e04 	addi	r2,r2,56
 401d38c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d390:	e0bffb17 	ldw	r2,-20(fp)
 401d394:	10800a17 	ldw	r2,40(r2)
 401d398:	10800044 	addi	r2,r2,1
 401d39c:	10c1ffcc 	andi	r3,r2,2047
 401d3a0:	e0bffb17 	ldw	r2,-20(fp)
 401d3a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401d3a8:	003fe206 	br	401d334 <__alt_mem_epcs_flash_controller_0+0xfb01c334>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401d3ac:	0001883a 	nop
 401d3b0:	00000106 	br	401d3b8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401d3b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401d3b8:	e0bff917 	ldw	r2,-28(fp)
 401d3bc:	10bfffec 	andhi	r2,r2,65535
 401d3c0:	10000f26 	beq	r2,zero,401d400 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d3c4:	e0bffb17 	ldw	r2,-20(fp)
 401d3c8:	10c00817 	ldw	r3,32(r2)
 401d3cc:	00bfff84 	movi	r2,-2
 401d3d0:	1886703a 	and	r3,r3,r2
 401d3d4:	e0bffb17 	ldw	r2,-20(fp)
 401d3d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401d3dc:	e0bffc17 	ldw	r2,-16(fp)
 401d3e0:	10800104 	addi	r2,r2,4
 401d3e4:	1007883a 	mov	r3,r2
 401d3e8:	e0bffb17 	ldw	r2,-20(fp)
 401d3ec:	10800817 	ldw	r2,32(r2)
 401d3f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d3f4:	e0bffc17 	ldw	r2,-16(fp)
 401d3f8:	10800104 	addi	r2,r2,4
 401d3fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401d400:	e0bffd17 	ldw	r2,-12(fp)
 401d404:	1080800c 	andi	r2,r2,512
 401d408:	103fbe26 	beq	r2,zero,401d304 <__alt_mem_epcs_flash_controller_0+0xfb01c304>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401d40c:	e0bffd17 	ldw	r2,-12(fp)
 401d410:	1004d43a 	srli	r2,r2,16
 401d414:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401d418:	00001406 	br	401d46c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401d41c:	e0bffc17 	ldw	r2,-16(fp)
 401d420:	e0fffb17 	ldw	r3,-20(fp)
 401d424:	18c00d17 	ldw	r3,52(r3)
 401d428:	e13ffb17 	ldw	r4,-20(fp)
 401d42c:	20c7883a 	add	r3,r4,r3
 401d430:	18c20e04 	addi	r3,r3,2104
 401d434:	18c00003 	ldbu	r3,0(r3)
 401d438:	18c03fcc 	andi	r3,r3,255
 401d43c:	18c0201c 	xori	r3,r3,128
 401d440:	18ffe004 	addi	r3,r3,-128
 401d444:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d448:	e0bffb17 	ldw	r2,-20(fp)
 401d44c:	10800d17 	ldw	r2,52(r2)
 401d450:	10800044 	addi	r2,r2,1
 401d454:	10c1ffcc 	andi	r3,r2,2047
 401d458:	e0bffb17 	ldw	r2,-20(fp)
 401d45c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401d460:	e0bffa17 	ldw	r2,-24(fp)
 401d464:	10bfffc4 	addi	r2,r2,-1
 401d468:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401d46c:	e0bffa17 	ldw	r2,-24(fp)
 401d470:	10000526 	beq	r2,zero,401d488 <altera_avalon_jtag_uart_irq+0x1a8>
 401d474:	e0bffb17 	ldw	r2,-20(fp)
 401d478:	10c00d17 	ldw	r3,52(r2)
 401d47c:	e0bffb17 	ldw	r2,-20(fp)
 401d480:	10800c17 	ldw	r2,48(r2)
 401d484:	18bfe51e 	bne	r3,r2,401d41c <__alt_mem_epcs_flash_controller_0+0xfb01c41c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401d488:	e0bffa17 	ldw	r2,-24(fp)
 401d48c:	103f9d26 	beq	r2,zero,401d304 <__alt_mem_epcs_flash_controller_0+0xfb01c304>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401d490:	e0bffb17 	ldw	r2,-20(fp)
 401d494:	10c00817 	ldw	r3,32(r2)
 401d498:	00bfff44 	movi	r2,-3
 401d49c:	1886703a 	and	r3,r3,r2
 401d4a0:	e0bffb17 	ldw	r2,-20(fp)
 401d4a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401d4a8:	e0bffb17 	ldw	r2,-20(fp)
 401d4ac:	10800017 	ldw	r2,0(r2)
 401d4b0:	10800104 	addi	r2,r2,4
 401d4b4:	1007883a 	mov	r3,r2
 401d4b8:	e0bffb17 	ldw	r2,-20(fp)
 401d4bc:	10800817 	ldw	r2,32(r2)
 401d4c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401d4c4:	e0bffc17 	ldw	r2,-16(fp)
 401d4c8:	10800104 	addi	r2,r2,4
 401d4cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401d4d0:	003f8c06 	br	401d304 <__alt_mem_epcs_flash_controller_0+0xfb01c304>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401d4d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401d4d8:	0001883a 	nop
 401d4dc:	e037883a 	mov	sp,fp
 401d4e0:	df000017 	ldw	fp,0(sp)
 401d4e4:	dec00104 	addi	sp,sp,4
 401d4e8:	f800283a 	ret

0401d4ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401d4ec:	defff804 	addi	sp,sp,-32
 401d4f0:	df000715 	stw	fp,28(sp)
 401d4f4:	df000704 	addi	fp,sp,28
 401d4f8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401d4fc:	e0bffb17 	ldw	r2,-20(fp)
 401d500:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401d504:	e0bff917 	ldw	r2,-28(fp)
 401d508:	10800017 	ldw	r2,0(r2)
 401d50c:	10800104 	addi	r2,r2,4
 401d510:	10800037 	ldwio	r2,0(r2)
 401d514:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401d518:	e0bffa17 	ldw	r2,-24(fp)
 401d51c:	1081000c 	andi	r2,r2,1024
 401d520:	10000b26 	beq	r2,zero,401d550 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401d524:	e0bff917 	ldw	r2,-28(fp)
 401d528:	10800017 	ldw	r2,0(r2)
 401d52c:	10800104 	addi	r2,r2,4
 401d530:	1007883a 	mov	r3,r2
 401d534:	e0bff917 	ldw	r2,-28(fp)
 401d538:	10800817 	ldw	r2,32(r2)
 401d53c:	10810014 	ori	r2,r2,1024
 401d540:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401d544:	e0bff917 	ldw	r2,-28(fp)
 401d548:	10000915 	stw	zero,36(r2)
 401d54c:	00000a06 	br	401d578 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401d550:	e0bff917 	ldw	r2,-28(fp)
 401d554:	10c00917 	ldw	r3,36(r2)
 401d558:	00a00034 	movhi	r2,32768
 401d55c:	10bfff04 	addi	r2,r2,-4
 401d560:	10c00536 	bltu	r2,r3,401d578 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401d564:	e0bff917 	ldw	r2,-28(fp)
 401d568:	10800917 	ldw	r2,36(r2)
 401d56c:	10c00044 	addi	r3,r2,1
 401d570:	e0bff917 	ldw	r2,-28(fp)
 401d574:	10c00915 	stw	r3,36(r2)
 401d578:	d0a02017 	ldw	r2,-32640(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401d57c:	e037883a 	mov	sp,fp
 401d580:	df000017 	ldw	fp,0(sp)
 401d584:	dec00104 	addi	sp,sp,4
 401d588:	f800283a 	ret

0401d58c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401d58c:	defffd04 	addi	sp,sp,-12
 401d590:	df000215 	stw	fp,8(sp)
 401d594:	df000204 	addi	fp,sp,8
 401d598:	e13ffe15 	stw	r4,-8(fp)
 401d59c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401d5a0:	00000506 	br	401d5b8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401d5a4:	e0bfff17 	ldw	r2,-4(fp)
 401d5a8:	1090000c 	andi	r2,r2,16384
 401d5ac:	10000226 	beq	r2,zero,401d5b8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401d5b0:	00bffd44 	movi	r2,-11
 401d5b4:	00000b06 	br	401d5e4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401d5b8:	e0bffe17 	ldw	r2,-8(fp)
 401d5bc:	10c00d17 	ldw	r3,52(r2)
 401d5c0:	e0bffe17 	ldw	r2,-8(fp)
 401d5c4:	10800c17 	ldw	r2,48(r2)
 401d5c8:	18800526 	beq	r3,r2,401d5e0 <altera_avalon_jtag_uart_close+0x54>
 401d5cc:	e0bffe17 	ldw	r2,-8(fp)
 401d5d0:	10c00917 	ldw	r3,36(r2)
 401d5d4:	e0bffe17 	ldw	r2,-8(fp)
 401d5d8:	10800117 	ldw	r2,4(r2)
 401d5dc:	18bff136 	bltu	r3,r2,401d5a4 <__alt_mem_epcs_flash_controller_0+0xfb01c5a4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401d5e0:	0005883a 	mov	r2,zero
}
 401d5e4:	e037883a 	mov	sp,fp
 401d5e8:	df000017 	ldw	fp,0(sp)
 401d5ec:	dec00104 	addi	sp,sp,4
 401d5f0:	f800283a 	ret

0401d5f4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401d5f4:	defffa04 	addi	sp,sp,-24
 401d5f8:	df000515 	stw	fp,20(sp)
 401d5fc:	df000504 	addi	fp,sp,20
 401d600:	e13ffd15 	stw	r4,-12(fp)
 401d604:	e17ffe15 	stw	r5,-8(fp)
 401d608:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401d60c:	00bff9c4 	movi	r2,-25
 401d610:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401d614:	e0bffe17 	ldw	r2,-8(fp)
 401d618:	10da8060 	cmpeqi	r3,r2,27137
 401d61c:	1800031e 	bne	r3,zero,401d62c <altera_avalon_jtag_uart_ioctl+0x38>
 401d620:	109a80a0 	cmpeqi	r2,r2,27138
 401d624:	1000181e 	bne	r2,zero,401d688 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401d628:	00002906 	br	401d6d0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401d62c:	e0bffd17 	ldw	r2,-12(fp)
 401d630:	10c00117 	ldw	r3,4(r2)
 401d634:	00a00034 	movhi	r2,32768
 401d638:	10bfffc4 	addi	r2,r2,-1
 401d63c:	18802126 	beq	r3,r2,401d6c4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401d640:	e0bfff17 	ldw	r2,-4(fp)
 401d644:	10800017 	ldw	r2,0(r2)
 401d648:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401d64c:	e0bffc17 	ldw	r2,-16(fp)
 401d650:	10800090 	cmplti	r2,r2,2
 401d654:	1000061e 	bne	r2,zero,401d670 <altera_avalon_jtag_uart_ioctl+0x7c>
 401d658:	e0fffc17 	ldw	r3,-16(fp)
 401d65c:	00a00034 	movhi	r2,32768
 401d660:	10bfffc4 	addi	r2,r2,-1
 401d664:	18800226 	beq	r3,r2,401d670 <altera_avalon_jtag_uart_ioctl+0x7c>
 401d668:	e0bffc17 	ldw	r2,-16(fp)
 401d66c:	00000206 	br	401d678 <altera_avalon_jtag_uart_ioctl+0x84>
 401d670:	00a00034 	movhi	r2,32768
 401d674:	10bfff84 	addi	r2,r2,-2
 401d678:	e0fffd17 	ldw	r3,-12(fp)
 401d67c:	18800115 	stw	r2,4(r3)
      rc = 0;
 401d680:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401d684:	00000f06 	br	401d6c4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401d688:	e0bffd17 	ldw	r2,-12(fp)
 401d68c:	10c00117 	ldw	r3,4(r2)
 401d690:	00a00034 	movhi	r2,32768
 401d694:	10bfffc4 	addi	r2,r2,-1
 401d698:	18800c26 	beq	r3,r2,401d6cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401d69c:	e0bffd17 	ldw	r2,-12(fp)
 401d6a0:	10c00917 	ldw	r3,36(r2)
 401d6a4:	e0bffd17 	ldw	r2,-12(fp)
 401d6a8:	10800117 	ldw	r2,4(r2)
 401d6ac:	1885803a 	cmpltu	r2,r3,r2
 401d6b0:	10c03fcc 	andi	r3,r2,255
 401d6b4:	e0bfff17 	ldw	r2,-4(fp)
 401d6b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401d6bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401d6c0:	00000206 	br	401d6cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401d6c4:	0001883a 	nop
 401d6c8:	00000106 	br	401d6d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401d6cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401d6d0:	e0bffb17 	ldw	r2,-20(fp)
}
 401d6d4:	e037883a 	mov	sp,fp
 401d6d8:	df000017 	ldw	fp,0(sp)
 401d6dc:	dec00104 	addi	sp,sp,4
 401d6e0:	f800283a 	ret

0401d6e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401d6e4:	defff304 	addi	sp,sp,-52
 401d6e8:	dfc00c15 	stw	ra,48(sp)
 401d6ec:	df000b15 	stw	fp,44(sp)
 401d6f0:	df000b04 	addi	fp,sp,44
 401d6f4:	e13ffc15 	stw	r4,-16(fp)
 401d6f8:	e17ffd15 	stw	r5,-12(fp)
 401d6fc:	e1bffe15 	stw	r6,-8(fp)
 401d700:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401d704:	e0bffd17 	ldw	r2,-12(fp)
 401d708:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401d70c:	00004706 	br	401d82c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401d710:	e0bffc17 	ldw	r2,-16(fp)
 401d714:	10800a17 	ldw	r2,40(r2)
 401d718:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401d71c:	e0bffc17 	ldw	r2,-16(fp)
 401d720:	10800b17 	ldw	r2,44(r2)
 401d724:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401d728:	e0fff717 	ldw	r3,-36(fp)
 401d72c:	e0bff817 	ldw	r2,-32(fp)
 401d730:	18800536 	bltu	r3,r2,401d748 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401d734:	e0fff717 	ldw	r3,-36(fp)
 401d738:	e0bff817 	ldw	r2,-32(fp)
 401d73c:	1885c83a 	sub	r2,r3,r2
 401d740:	e0bff615 	stw	r2,-40(fp)
 401d744:	00000406 	br	401d758 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401d748:	00c20004 	movi	r3,2048
 401d74c:	e0bff817 	ldw	r2,-32(fp)
 401d750:	1885c83a 	sub	r2,r3,r2
 401d754:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401d758:	e0bff617 	ldw	r2,-40(fp)
 401d75c:	10001e26 	beq	r2,zero,401d7d8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401d760:	e0fffe17 	ldw	r3,-8(fp)
 401d764:	e0bff617 	ldw	r2,-40(fp)
 401d768:	1880022e 	bgeu	r3,r2,401d774 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401d76c:	e0bffe17 	ldw	r2,-8(fp)
 401d770:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401d774:	e0bffc17 	ldw	r2,-16(fp)
 401d778:	10c00e04 	addi	r3,r2,56
 401d77c:	e0bff817 	ldw	r2,-32(fp)
 401d780:	1885883a 	add	r2,r3,r2
 401d784:	e1bff617 	ldw	r6,-40(fp)
 401d788:	100b883a 	mov	r5,r2
 401d78c:	e13ff517 	ldw	r4,-44(fp)
 401d790:	400e6e80 	call	400e6e8 <memcpy>
      ptr   += n;
 401d794:	e0fff517 	ldw	r3,-44(fp)
 401d798:	e0bff617 	ldw	r2,-40(fp)
 401d79c:	1885883a 	add	r2,r3,r2
 401d7a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401d7a4:	e0fffe17 	ldw	r3,-8(fp)
 401d7a8:	e0bff617 	ldw	r2,-40(fp)
 401d7ac:	1885c83a 	sub	r2,r3,r2
 401d7b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d7b4:	e0fff817 	ldw	r3,-32(fp)
 401d7b8:	e0bff617 	ldw	r2,-40(fp)
 401d7bc:	1885883a 	add	r2,r3,r2
 401d7c0:	10c1ffcc 	andi	r3,r2,2047
 401d7c4:	e0bffc17 	ldw	r2,-16(fp)
 401d7c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401d7cc:	e0bffe17 	ldw	r2,-8(fp)
 401d7d0:	00bfcf16 	blt	zero,r2,401d710 <__alt_mem_epcs_flash_controller_0+0xfb01c710>
 401d7d4:	00000106 	br	401d7dc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401d7d8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401d7dc:	e0fff517 	ldw	r3,-44(fp)
 401d7e0:	e0bffd17 	ldw	r2,-12(fp)
 401d7e4:	1880141e 	bne	r3,r2,401d838 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401d7e8:	e0bfff17 	ldw	r2,-4(fp)
 401d7ec:	1090000c 	andi	r2,r2,16384
 401d7f0:	1000131e 	bne	r2,zero,401d840 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401d7f4:	0001883a 	nop
 401d7f8:	e0bffc17 	ldw	r2,-16(fp)
 401d7fc:	10c00a17 	ldw	r3,40(r2)
 401d800:	e0bff717 	ldw	r2,-36(fp)
 401d804:	1880051e 	bne	r3,r2,401d81c <altera_avalon_jtag_uart_read+0x138>
 401d808:	e0bffc17 	ldw	r2,-16(fp)
 401d80c:	10c00917 	ldw	r3,36(r2)
 401d810:	e0bffc17 	ldw	r2,-16(fp)
 401d814:	10800117 	ldw	r2,4(r2)
 401d818:	18bff736 	bltu	r3,r2,401d7f8 <__alt_mem_epcs_flash_controller_0+0xfb01c7f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401d81c:	e0bffc17 	ldw	r2,-16(fp)
 401d820:	10c00a17 	ldw	r3,40(r2)
 401d824:	e0bff717 	ldw	r2,-36(fp)
 401d828:	18800726 	beq	r3,r2,401d848 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401d82c:	e0bffe17 	ldw	r2,-8(fp)
 401d830:	00bfb716 	blt	zero,r2,401d710 <__alt_mem_epcs_flash_controller_0+0xfb01c710>
 401d834:	00000506 	br	401d84c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401d838:	0001883a 	nop
 401d83c:	00000306 	br	401d84c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401d840:	0001883a 	nop
 401d844:	00000106 	br	401d84c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401d848:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401d84c:	e0fff517 	ldw	r3,-44(fp)
 401d850:	e0bffd17 	ldw	r2,-12(fp)
 401d854:	18801826 	beq	r3,r2,401d8b8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401d858:	0005303a 	rdctl	r2,status
 401d85c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401d860:	e0fffb17 	ldw	r3,-20(fp)
 401d864:	00bfff84 	movi	r2,-2
 401d868:	1884703a 	and	r2,r3,r2
 401d86c:	1001703a 	wrctl	status,r2
  
  return context;
 401d870:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401d874:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401d878:	e0bffc17 	ldw	r2,-16(fp)
 401d87c:	10800817 	ldw	r2,32(r2)
 401d880:	10c00054 	ori	r3,r2,1
 401d884:	e0bffc17 	ldw	r2,-16(fp)
 401d888:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401d88c:	e0bffc17 	ldw	r2,-16(fp)
 401d890:	10800017 	ldw	r2,0(r2)
 401d894:	10800104 	addi	r2,r2,4
 401d898:	1007883a 	mov	r3,r2
 401d89c:	e0bffc17 	ldw	r2,-16(fp)
 401d8a0:	10800817 	ldw	r2,32(r2)
 401d8a4:	18800035 	stwio	r2,0(r3)
 401d8a8:	e0bffa17 	ldw	r2,-24(fp)
 401d8ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d8b0:	e0bff917 	ldw	r2,-28(fp)
 401d8b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401d8b8:	e0fff517 	ldw	r3,-44(fp)
 401d8bc:	e0bffd17 	ldw	r2,-12(fp)
 401d8c0:	18800426 	beq	r3,r2,401d8d4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401d8c4:	e0fff517 	ldw	r3,-44(fp)
 401d8c8:	e0bffd17 	ldw	r2,-12(fp)
 401d8cc:	1885c83a 	sub	r2,r3,r2
 401d8d0:	00000606 	br	401d8ec <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401d8d4:	e0bfff17 	ldw	r2,-4(fp)
 401d8d8:	1090000c 	andi	r2,r2,16384
 401d8dc:	10000226 	beq	r2,zero,401d8e8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401d8e0:	00bffd44 	movi	r2,-11
 401d8e4:	00000106 	br	401d8ec <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401d8e8:	00bffec4 	movi	r2,-5
}
 401d8ec:	e037883a 	mov	sp,fp
 401d8f0:	dfc00117 	ldw	ra,4(sp)
 401d8f4:	df000017 	ldw	fp,0(sp)
 401d8f8:	dec00204 	addi	sp,sp,8
 401d8fc:	f800283a 	ret

0401d900 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401d900:	defff304 	addi	sp,sp,-52
 401d904:	dfc00c15 	stw	ra,48(sp)
 401d908:	df000b15 	stw	fp,44(sp)
 401d90c:	df000b04 	addi	fp,sp,44
 401d910:	e13ffc15 	stw	r4,-16(fp)
 401d914:	e17ffd15 	stw	r5,-12(fp)
 401d918:	e1bffe15 	stw	r6,-8(fp)
 401d91c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401d920:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401d924:	e0bffd17 	ldw	r2,-12(fp)
 401d928:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401d92c:	00003706 	br	401da0c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401d930:	e0bffc17 	ldw	r2,-16(fp)
 401d934:	10800c17 	ldw	r2,48(r2)
 401d938:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401d93c:	e0bffc17 	ldw	r2,-16(fp)
 401d940:	10800d17 	ldw	r2,52(r2)
 401d944:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401d948:	e0fff917 	ldw	r3,-28(fp)
 401d94c:	e0bff517 	ldw	r2,-44(fp)
 401d950:	1880062e 	bgeu	r3,r2,401d96c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401d954:	e0fff517 	ldw	r3,-44(fp)
 401d958:	e0bff917 	ldw	r2,-28(fp)
 401d95c:	1885c83a 	sub	r2,r3,r2
 401d960:	10bfffc4 	addi	r2,r2,-1
 401d964:	e0bff615 	stw	r2,-40(fp)
 401d968:	00000b06 	br	401d998 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401d96c:	e0bff517 	ldw	r2,-44(fp)
 401d970:	10000526 	beq	r2,zero,401d988 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401d974:	00c20004 	movi	r3,2048
 401d978:	e0bff917 	ldw	r2,-28(fp)
 401d97c:	1885c83a 	sub	r2,r3,r2
 401d980:	e0bff615 	stw	r2,-40(fp)
 401d984:	00000406 	br	401d998 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401d988:	00c1ffc4 	movi	r3,2047
 401d98c:	e0bff917 	ldw	r2,-28(fp)
 401d990:	1885c83a 	sub	r2,r3,r2
 401d994:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401d998:	e0bff617 	ldw	r2,-40(fp)
 401d99c:	10001e26 	beq	r2,zero,401da18 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401d9a0:	e0fffe17 	ldw	r3,-8(fp)
 401d9a4:	e0bff617 	ldw	r2,-40(fp)
 401d9a8:	1880022e 	bgeu	r3,r2,401d9b4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401d9ac:	e0bffe17 	ldw	r2,-8(fp)
 401d9b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401d9b4:	e0bffc17 	ldw	r2,-16(fp)
 401d9b8:	10c20e04 	addi	r3,r2,2104
 401d9bc:	e0bff917 	ldw	r2,-28(fp)
 401d9c0:	1885883a 	add	r2,r3,r2
 401d9c4:	e1bff617 	ldw	r6,-40(fp)
 401d9c8:	e17ffd17 	ldw	r5,-12(fp)
 401d9cc:	1009883a 	mov	r4,r2
 401d9d0:	400e6e80 	call	400e6e8 <memcpy>
      ptr   += n;
 401d9d4:	e0fffd17 	ldw	r3,-12(fp)
 401d9d8:	e0bff617 	ldw	r2,-40(fp)
 401d9dc:	1885883a 	add	r2,r3,r2
 401d9e0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401d9e4:	e0fffe17 	ldw	r3,-8(fp)
 401d9e8:	e0bff617 	ldw	r2,-40(fp)
 401d9ec:	1885c83a 	sub	r2,r3,r2
 401d9f0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401d9f4:	e0fff917 	ldw	r3,-28(fp)
 401d9f8:	e0bff617 	ldw	r2,-40(fp)
 401d9fc:	1885883a 	add	r2,r3,r2
 401da00:	10c1ffcc 	andi	r3,r2,2047
 401da04:	e0bffc17 	ldw	r2,-16(fp)
 401da08:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401da0c:	e0bffe17 	ldw	r2,-8(fp)
 401da10:	00bfc716 	blt	zero,r2,401d930 <__alt_mem_epcs_flash_controller_0+0xfb01c930>
 401da14:	00000106 	br	401da1c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401da18:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401da1c:	0005303a 	rdctl	r2,status
 401da20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401da24:	e0fffb17 	ldw	r3,-20(fp)
 401da28:	00bfff84 	movi	r2,-2
 401da2c:	1884703a 	and	r2,r3,r2
 401da30:	1001703a 	wrctl	status,r2
  
  return context;
 401da34:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401da38:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401da3c:	e0bffc17 	ldw	r2,-16(fp)
 401da40:	10800817 	ldw	r2,32(r2)
 401da44:	10c00094 	ori	r3,r2,2
 401da48:	e0bffc17 	ldw	r2,-16(fp)
 401da4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401da50:	e0bffc17 	ldw	r2,-16(fp)
 401da54:	10800017 	ldw	r2,0(r2)
 401da58:	10800104 	addi	r2,r2,4
 401da5c:	1007883a 	mov	r3,r2
 401da60:	e0bffc17 	ldw	r2,-16(fp)
 401da64:	10800817 	ldw	r2,32(r2)
 401da68:	18800035 	stwio	r2,0(r3)
 401da6c:	e0bffa17 	ldw	r2,-24(fp)
 401da70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401da74:	e0bff817 	ldw	r2,-32(fp)
 401da78:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401da7c:	e0bffe17 	ldw	r2,-8(fp)
 401da80:	0080100e 	bge	zero,r2,401dac4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401da84:	e0bfff17 	ldw	r2,-4(fp)
 401da88:	1090000c 	andi	r2,r2,16384
 401da8c:	1000101e 	bne	r2,zero,401dad0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401da90:	0001883a 	nop
 401da94:	e0bffc17 	ldw	r2,-16(fp)
 401da98:	10c00d17 	ldw	r3,52(r2)
 401da9c:	e0bff517 	ldw	r2,-44(fp)
 401daa0:	1880051e 	bne	r3,r2,401dab8 <altera_avalon_jtag_uart_write+0x1b8>
 401daa4:	e0bffc17 	ldw	r2,-16(fp)
 401daa8:	10c00917 	ldw	r3,36(r2)
 401daac:	e0bffc17 	ldw	r2,-16(fp)
 401dab0:	10800117 	ldw	r2,4(r2)
 401dab4:	18bff736 	bltu	r3,r2,401da94 <__alt_mem_epcs_flash_controller_0+0xfb01ca94>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401dab8:	e0bffc17 	ldw	r2,-16(fp)
 401dabc:	10800917 	ldw	r2,36(r2)
 401dac0:	1000051e 	bne	r2,zero,401dad8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401dac4:	e0bffe17 	ldw	r2,-8(fp)
 401dac8:	00bfd016 	blt	zero,r2,401da0c <__alt_mem_epcs_flash_controller_0+0xfb01ca0c>
 401dacc:	00000306 	br	401dadc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401dad0:	0001883a 	nop
 401dad4:	00000106 	br	401dadc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401dad8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401dadc:	e0fffd17 	ldw	r3,-12(fp)
 401dae0:	e0bff717 	ldw	r2,-36(fp)
 401dae4:	18800426 	beq	r3,r2,401daf8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401dae8:	e0fffd17 	ldw	r3,-12(fp)
 401daec:	e0bff717 	ldw	r2,-36(fp)
 401daf0:	1885c83a 	sub	r2,r3,r2
 401daf4:	00000606 	br	401db10 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401daf8:	e0bfff17 	ldw	r2,-4(fp)
 401dafc:	1090000c 	andi	r2,r2,16384
 401db00:	10000226 	beq	r2,zero,401db0c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401db04:	00bffd44 	movi	r2,-11
 401db08:	00000106 	br	401db10 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401db0c:	00bffec4 	movi	r2,-5
}
 401db10:	e037883a 	mov	sp,fp
 401db14:	dfc00117 	ldw	ra,4(sp)
 401db18:	df000017 	ldw	fp,0(sp)
 401db1c:	dec00204 	addi	sp,sp,8
 401db20:	f800283a 	ret

0401db24 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401db24:	defffa04 	addi	sp,sp,-24
 401db28:	dfc00515 	stw	ra,20(sp)
 401db2c:	df000415 	stw	fp,16(sp)
 401db30:	df000404 	addi	fp,sp,16
 401db34:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401db38:	0007883a 	mov	r3,zero
 401db3c:	e0bfff17 	ldw	r2,-4(fp)
 401db40:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401db44:	e0bfff17 	ldw	r2,-4(fp)
 401db48:	10800104 	addi	r2,r2,4
 401db4c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401db50:	0005303a 	rdctl	r2,status
 401db54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401db58:	e0fffd17 	ldw	r3,-12(fp)
 401db5c:	00bfff84 	movi	r2,-2
 401db60:	1884703a 	and	r2,r3,r2
 401db64:	1001703a 	wrctl	status,r2
  
  return context;
 401db68:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401db6c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401db70:	401c27c0 	call	401c27c <alt_tick>
 401db74:	e0bffc17 	ldw	r2,-16(fp)
 401db78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401db7c:	e0bffe17 	ldw	r2,-8(fp)
 401db80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401db84:	0001883a 	nop
 401db88:	e037883a 	mov	sp,fp
 401db8c:	dfc00117 	ldw	ra,4(sp)
 401db90:	df000017 	ldw	fp,0(sp)
 401db94:	dec00204 	addi	sp,sp,8
 401db98:	f800283a 	ret

0401db9c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401db9c:	defff804 	addi	sp,sp,-32
 401dba0:	dfc00715 	stw	ra,28(sp)
 401dba4:	df000615 	stw	fp,24(sp)
 401dba8:	df000604 	addi	fp,sp,24
 401dbac:	e13ffc15 	stw	r4,-16(fp)
 401dbb0:	e17ffd15 	stw	r5,-12(fp)
 401dbb4:	e1bffe15 	stw	r6,-8(fp)
 401dbb8:	e1ffff15 	stw	r7,-4(fp)
 401dbbc:	e0bfff17 	ldw	r2,-4(fp)
 401dbc0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401dbc4:	d0a02017 	ldw	r2,-32640(gp)
 401dbc8:	1000021e 	bne	r2,zero,401dbd4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401dbcc:	e0bffb17 	ldw	r2,-20(fp)
 401dbd0:	d0a02015 	stw	r2,-32640(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401dbd4:	e0bffc17 	ldw	r2,-16(fp)
 401dbd8:	10800104 	addi	r2,r2,4
 401dbdc:	00c001c4 	movi	r3,7
 401dbe0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401dbe4:	d8000015 	stw	zero,0(sp)
 401dbe8:	e1fffc17 	ldw	r7,-16(fp)
 401dbec:	018100b4 	movhi	r6,1026
 401dbf0:	31b6c904 	addi	r6,r6,-9436
 401dbf4:	e17ffe17 	ldw	r5,-8(fp)
 401dbf8:	e13ffd17 	ldw	r4,-12(fp)
 401dbfc:	401ba400 	call	401ba40 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401dc00:	0001883a 	nop
 401dc04:	e037883a 	mov	sp,fp
 401dc08:	dfc00117 	ldw	ra,4(sp)
 401dc0c:	df000017 	ldw	fp,0(sp)
 401dc10:	dec00204 	addi	sp,sp,8
 401dc14:	f800283a 	ret

0401dc18 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 401dc18:	defff904 	addi	sp,sp,-28
 401dc1c:	dfc00615 	stw	ra,24(sp)
 401dc20:	df000515 	stw	fp,20(sp)
 401dc24:	df000504 	addi	fp,sp,20
 401dc28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 401dc2c:	00800144 	movi	r2,5
 401dc30:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 401dc34:	d8000215 	stw	zero,8(sp)
 401dc38:	e0bffe44 	addi	r2,fp,-7
 401dc3c:	d8800115 	stw	r2,4(sp)
 401dc40:	00800044 	movi	r2,1
 401dc44:	d8800015 	stw	r2,0(sp)
 401dc48:	e1fffe04 	addi	r7,fp,-8
 401dc4c:	01800044 	movi	r6,1
 401dc50:	000b883a 	mov	r5,zero
 401dc54:	e13fff17 	ldw	r4,-4(fp)
 401dc58:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 401dc5c:	e0bffe43 	ldbu	r2,-7(fp)
}
 401dc60:	e037883a 	mov	sp,fp
 401dc64:	dfc00117 	ldw	ra,4(sp)
 401dc68:	df000017 	ldw	fp,0(sp)
 401dc6c:	dec00204 	addi	sp,sp,8
 401dc70:	f800283a 	ret

0401dc74 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 401dc74:	defffd04 	addi	sp,sp,-12
 401dc78:	dfc00215 	stw	ra,8(sp)
 401dc7c:	df000115 	stw	fp,4(sp)
 401dc80:	df000104 	addi	fp,sp,4
 401dc84:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 401dc88:	e13fff17 	ldw	r4,-4(fp)
 401dc8c:	401dc180 	call	401dc18 <epcs_read_status_register>
 401dc90:	10803fcc 	andi	r2,r2,255
 401dc94:	1080004c 	andi	r2,r2,1
}
 401dc98:	e037883a 	mov	sp,fp
 401dc9c:	dfc00117 	ldw	ra,4(sp)
 401dca0:	df000017 	ldw	fp,0(sp)
 401dca4:	dec00204 	addi	sp,sp,8
 401dca8:	f800283a 	ret

0401dcac <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 401dcac:	defffd04 	addi	sp,sp,-12
 401dcb0:	dfc00215 	stw	ra,8(sp)
 401dcb4:	df000115 	stw	fp,4(sp)
 401dcb8:	df000104 	addi	fp,sp,4
 401dcbc:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 401dcc0:	0001883a 	nop
 401dcc4:	e13fff17 	ldw	r4,-4(fp)
 401dcc8:	401dc740 	call	401dc74 <epcs_test_wip>
 401dccc:	103ffd1e 	bne	r2,zero,401dcc4 <__alt_mem_epcs_flash_controller_0+0xfb01ccc4>
  {
  }
}
 401dcd0:	0001883a 	nop
 401dcd4:	e037883a 	mov	sp,fp
 401dcd8:	dfc00117 	ldw	ra,4(sp)
 401dcdc:	df000017 	ldw	fp,0(sp)
 401dce0:	dec00204 	addi	sp,sp,8
 401dce4:	f800283a 	ret

0401dce8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 401dce8:	defff604 	addi	sp,sp,-40
 401dcec:	dfc00915 	stw	ra,36(sp)
 401dcf0:	df000815 	stw	fp,32(sp)
 401dcf4:	df000804 	addi	fp,sp,32
 401dcf8:	e13ffd15 	stw	r4,-12(fp)
 401dcfc:	e17ffe15 	stw	r5,-8(fp)
 401dd00:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 401dd04:	e0bfff17 	ldw	r2,-4(fp)
 401dd08:	10001226 	beq	r2,zero,401dd54 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 401dd0c:	00bff604 	movi	r2,-40
 401dd10:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 401dd14:	e0bffe17 	ldw	r2,-8(fp)
 401dd18:	1004d63a 	srli	r2,r2,24
 401dd1c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 401dd20:	e0bffe17 	ldw	r2,-8(fp)
 401dd24:	1004d43a 	srli	r2,r2,16
 401dd28:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 401dd2c:	e0bffe17 	ldw	r2,-8(fp)
 401dd30:	1004d23a 	srli	r2,r2,8
 401dd34:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 401dd38:	e0bffe17 	ldw	r2,-8(fp)
 401dd3c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 401dd40:	00800144 	movi	r2,5
 401dd44:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 401dd48:	e13ffd17 	ldw	r4,-12(fp)
 401dd4c:	401e19c0 	call	401e19c <epcs_enter_4_bytes_mode>
 401dd50:	00000c06 	br	401dd84 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 401dd54:	00bff604 	movi	r2,-40
 401dd58:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 401dd5c:	e0bffe17 	ldw	r2,-8(fp)
 401dd60:	1004d43a 	srli	r2,r2,16
 401dd64:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 401dd68:	e0bffe17 	ldw	r2,-8(fp)
 401dd6c:	1004d23a 	srli	r2,r2,8
 401dd70:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 401dd74:	e0bffe17 	ldw	r2,-8(fp)
 401dd78:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 401dd7c:	00800104 	movi	r2,4
 401dd80:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 401dd84:	e13ffd17 	ldw	r4,-12(fp)
 401dd88:	401ded80 	call	401ded8 <epcs_write_enable>

  alt_avalon_spi_command(
 401dd8c:	e0bffb03 	ldbu	r2,-20(fp)
 401dd90:	e0fffb44 	addi	r3,fp,-19
 401dd94:	d8000215 	stw	zero,8(sp)
 401dd98:	d8000115 	stw	zero,4(sp)
 401dd9c:	d8000015 	stw	zero,0(sp)
 401dda0:	180f883a 	mov	r7,r3
 401dda4:	100d883a 	mov	r6,r2
 401dda8:	000b883a 	mov	r5,zero
 401ddac:	e13ffd17 	ldw	r4,-12(fp)
 401ddb0:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 401ddb4:	e13ffd17 	ldw	r4,-12(fp)
 401ddb8:	401dcac0 	call	401dcac <epcs_await_wip_released>

  if(four_bytes_mode)
 401ddbc:	e0bfff17 	ldw	r2,-4(fp)
 401ddc0:	10000226 	beq	r2,zero,401ddcc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 401ddc4:	e13ffd17 	ldw	r4,-12(fp)
 401ddc8:	401e1f80 	call	401e1f8 <epcs_exit_4_bytes_mode>
  }
}
 401ddcc:	0001883a 	nop
 401ddd0:	e037883a 	mov	sp,fp
 401ddd4:	dfc00117 	ldw	ra,4(sp)
 401ddd8:	df000017 	ldw	fp,0(sp)
 401dddc:	dec00204 	addi	sp,sp,8
 401dde0:	f800283a 	ret

0401dde4 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 401dde4:	defff404 	addi	sp,sp,-48
 401dde8:	dfc00b15 	stw	ra,44(sp)
 401ddec:	df000a15 	stw	fp,40(sp)
 401ddf0:	df000a04 	addi	fp,sp,40
 401ddf4:	e13ffc15 	stw	r4,-16(fp)
 401ddf8:	e17ffd15 	stw	r5,-12(fp)
 401ddfc:	e1bffe15 	stw	r6,-8(fp)
 401de00:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 401de04:	008000c4 	movi	r2,3
 401de08:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 401de0c:	e0800217 	ldw	r2,8(fp)
 401de10:	10001026 	beq	r2,zero,401de54 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 401de14:	e0bffd17 	ldw	r2,-12(fp)
 401de18:	1004d63a 	srli	r2,r2,24
 401de1c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 401de20:	e0bffd17 	ldw	r2,-12(fp)
 401de24:	1005d43a 	srai	r2,r2,16
 401de28:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 401de2c:	e0bffd17 	ldw	r2,-12(fp)
 401de30:	1005d23a 	srai	r2,r2,8
 401de34:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 401de38:	e0bffd17 	ldw	r2,-12(fp)
 401de3c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 401de40:	00800144 	movi	r2,5
 401de44:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 401de48:	e13ffc17 	ldw	r4,-16(fp)
 401de4c:	401e19c0 	call	401e19c <epcs_enter_4_bytes_mode>
 401de50:	00000a06 	br	401de7c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 401de54:	e0bffd17 	ldw	r2,-12(fp)
 401de58:	1005d43a 	srai	r2,r2,16
 401de5c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 401de60:	e0bffd17 	ldw	r2,-12(fp)
 401de64:	1005d23a 	srai	r2,r2,8
 401de68:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 401de6c:	e0bffd17 	ldw	r2,-12(fp)
 401de70:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 401de74:	00800104 	movi	r2,4
 401de78:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 401de7c:	e13ffc17 	ldw	r4,-16(fp)
 401de80:	401dcac0 	call	401dcac <epcs_await_wip_released>

  alt_avalon_spi_command(
 401de84:	e0bfff17 	ldw	r2,-4(fp)
 401de88:	e13ffa04 	addi	r4,fp,-24
 401de8c:	d8000215 	stw	zero,8(sp)
 401de90:	e0fffe17 	ldw	r3,-8(fp)
 401de94:	d8c00115 	stw	r3,4(sp)
 401de98:	d8800015 	stw	r2,0(sp)
 401de9c:	200f883a 	mov	r7,r4
 401dea0:	e1bff917 	ldw	r6,-28(fp)
 401dea4:	000b883a 	mov	r5,zero
 401dea8:	e13ffc17 	ldw	r4,-16(fp)
 401deac:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 401deb0:	e0800217 	ldw	r2,8(fp)
 401deb4:	10000226 	beq	r2,zero,401dec0 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 401deb8:	e13ffc17 	ldw	r4,-16(fp)
 401debc:	401e1f80 	call	401e1f8 <epcs_exit_4_bytes_mode>
  }

  return length;
 401dec0:	e0bfff17 	ldw	r2,-4(fp)
}
 401dec4:	e037883a 	mov	sp,fp
 401dec8:	dfc00117 	ldw	ra,4(sp)
 401decc:	df000017 	ldw	fp,0(sp)
 401ded0:	dec00204 	addi	sp,sp,8
 401ded4:	f800283a 	ret

0401ded8 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 401ded8:	defff904 	addi	sp,sp,-28
 401dedc:	dfc00615 	stw	ra,24(sp)
 401dee0:	df000515 	stw	fp,20(sp)
 401dee4:	df000504 	addi	fp,sp,20
 401dee8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 401deec:	00800184 	movi	r2,6
 401def0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 401def4:	d8000215 	stw	zero,8(sp)
 401def8:	d8000115 	stw	zero,4(sp)
 401defc:	d8000015 	stw	zero,0(sp)
 401df00:	e1fffe04 	addi	r7,fp,-8
 401df04:	01800044 	movi	r6,1
 401df08:	000b883a 	mov	r5,zero
 401df0c:	e13fff17 	ldw	r4,-4(fp)
 401df10:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 401df14:	0001883a 	nop
 401df18:	e037883a 	mov	sp,fp
 401df1c:	dfc00117 	ldw	ra,4(sp)
 401df20:	df000017 	ldw	fp,0(sp)
 401df24:	dec00204 	addi	sp,sp,8
 401df28:	f800283a 	ret

0401df2c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 401df2c:	defff804 	addi	sp,sp,-32
 401df30:	dfc00715 	stw	ra,28(sp)
 401df34:	df000615 	stw	fp,24(sp)
 401df38:	df000604 	addi	fp,sp,24
 401df3c:	e13ffe15 	stw	r4,-8(fp)
 401df40:	2805883a 	mov	r2,r5
 401df44:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 401df48:	00800044 	movi	r2,1
 401df4c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 401df50:	e0bfff03 	ldbu	r2,-4(fp)
 401df54:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 401df58:	d8000215 	stw	zero,8(sp)
 401df5c:	d8000115 	stw	zero,4(sp)
 401df60:	d8000015 	stw	zero,0(sp)
 401df64:	e1fffd04 	addi	r7,fp,-12
 401df68:	01800084 	movi	r6,2
 401df6c:	000b883a 	mov	r5,zero
 401df70:	e13ffe17 	ldw	r4,-8(fp)
 401df74:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 401df78:	e13ffe17 	ldw	r4,-8(fp)
 401df7c:	401dcac0 	call	401dcac <epcs_await_wip_released>
}
 401df80:	0001883a 	nop
 401df84:	e037883a 	mov	sp,fp
 401df88:	dfc00117 	ldw	ra,4(sp)
 401df8c:	df000017 	ldw	fp,0(sp)
 401df90:	dec00204 	addi	sp,sp,8
 401df94:	f800283a 	ret

0401df98 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 401df98:	defff404 	addi	sp,sp,-48
 401df9c:	dfc00b15 	stw	ra,44(sp)
 401dfa0:	df000a15 	stw	fp,40(sp)
 401dfa4:	df000a04 	addi	fp,sp,40
 401dfa8:	e13ffc15 	stw	r4,-16(fp)
 401dfac:	e17ffd15 	stw	r5,-12(fp)
 401dfb0:	e1bffe15 	stw	r6,-8(fp)
 401dfb4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 401dfb8:	00800084 	movi	r2,2
 401dfbc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 401dfc0:	e0800217 	ldw	r2,8(fp)
 401dfc4:	10001026 	beq	r2,zero,401e008 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 401dfc8:	e0bffd17 	ldw	r2,-12(fp)
 401dfcc:	1004d63a 	srli	r2,r2,24
 401dfd0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 401dfd4:	e0bffd17 	ldw	r2,-12(fp)
 401dfd8:	1005d43a 	srai	r2,r2,16
 401dfdc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 401dfe0:	e0bffd17 	ldw	r2,-12(fp)
 401dfe4:	1005d23a 	srai	r2,r2,8
 401dfe8:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 401dfec:	e0bffd17 	ldw	r2,-12(fp)
 401dff0:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 401dff4:	00800144 	movi	r2,5
 401dff8:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 401dffc:	e13ffc17 	ldw	r4,-16(fp)
 401e000:	401e19c0 	call	401e19c <epcs_enter_4_bytes_mode>
 401e004:	00000a06 	br	401e030 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 401e008:	e0bffd17 	ldw	r2,-12(fp)
 401e00c:	1005d43a 	srai	r2,r2,16
 401e010:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 401e014:	e0bffd17 	ldw	r2,-12(fp)
 401e018:	1005d23a 	srai	r2,r2,8
 401e01c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 401e020:	e0bffd17 	ldw	r2,-12(fp)
 401e024:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 401e028:	00800104 	movi	r2,4
 401e02c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 401e030:	e13ffc17 	ldw	r4,-16(fp)
 401e034:	401ded80 	call	401ded8 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 401e038:	e0fffa04 	addi	r3,fp,-24
 401e03c:	00800044 	movi	r2,1
 401e040:	d8800215 	stw	r2,8(sp)
 401e044:	d8000115 	stw	zero,4(sp)
 401e048:	d8000015 	stw	zero,0(sp)
 401e04c:	180f883a 	mov	r7,r3
 401e050:	e1bff917 	ldw	r6,-28(fp)
 401e054:	000b883a 	mov	r5,zero
 401e058:	e13ffc17 	ldw	r4,-16(fp)
 401e05c:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 401e060:	e0bfff17 	ldw	r2,-4(fp)
 401e064:	d8000215 	stw	zero,8(sp)
 401e068:	d8000115 	stw	zero,4(sp)
 401e06c:	d8000015 	stw	zero,0(sp)
 401e070:	e1fffe17 	ldw	r7,-8(fp)
 401e074:	100d883a 	mov	r6,r2
 401e078:	000b883a 	mov	r5,zero
 401e07c:	e13ffc17 	ldw	r4,-16(fp)
 401e080:	401eb880 	call	401eb88 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 401e084:	e13ffc17 	ldw	r4,-16(fp)
 401e088:	401dcac0 	call	401dcac <epcs_await_wip_released>

  if(four_bytes_mode)
 401e08c:	e0800217 	ldw	r2,8(fp)
 401e090:	10000226 	beq	r2,zero,401e09c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 401e094:	e13ffc17 	ldw	r4,-16(fp)
 401e098:	401e1f80 	call	401e1f8 <epcs_exit_4_bytes_mode>
  }

  return length;
 401e09c:	e0bfff17 	ldw	r2,-4(fp)
}
 401e0a0:	e037883a 	mov	sp,fp
 401e0a4:	dfc00117 	ldw	ra,4(sp)
 401e0a8:	df000017 	ldw	fp,0(sp)
 401e0ac:	dec00204 	addi	sp,sp,8
 401e0b0:	f800283a 	ret

0401e0b4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 401e0b4:	defff804 	addi	sp,sp,-32
 401e0b8:	dfc00715 	stw	ra,28(sp)
 401e0bc:	df000615 	stw	fp,24(sp)
 401e0c0:	df000604 	addi	fp,sp,24
 401e0c4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 401e0c8:	00bfeac4 	movi	r2,-85
 401e0cc:	e0bffd05 	stb	r2,-12(fp)
 401e0d0:	e03ffd45 	stb	zero,-11(fp)
 401e0d4:	e03ffd85 	stb	zero,-10(fp)
 401e0d8:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 401e0dc:	d8000215 	stw	zero,8(sp)
 401e0e0:	e0bffe04 	addi	r2,fp,-8
 401e0e4:	d8800115 	stw	r2,4(sp)
 401e0e8:	00800044 	movi	r2,1
 401e0ec:	d8800015 	stw	r2,0(sp)
 401e0f0:	e1fffd04 	addi	r7,fp,-12
 401e0f4:	01800104 	movi	r6,4
 401e0f8:	000b883a 	mov	r5,zero
 401e0fc:	e13fff17 	ldw	r4,-4(fp)
 401e100:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 401e104:	e0bffe03 	ldbu	r2,-8(fp)
}
 401e108:	e037883a 	mov	sp,fp
 401e10c:	dfc00117 	ldw	ra,4(sp)
 401e110:	df000017 	ldw	fp,0(sp)
 401e114:	dec00204 	addi	sp,sp,8
 401e118:	f800283a 	ret

0401e11c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 401e11c:	defff904 	addi	sp,sp,-28
 401e120:	dfc00615 	stw	ra,24(sp)
 401e124:	df000515 	stw	fp,20(sp)
 401e128:	df000504 	addi	fp,sp,20
 401e12c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 401e130:	00bfe7c4 	movi	r2,-97
 401e134:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 401e138:	d8000215 	stw	zero,8(sp)
 401e13c:	e0bffe44 	addi	r2,fp,-7
 401e140:	d8800115 	stw	r2,4(sp)
 401e144:	008000c4 	movi	r2,3
 401e148:	d8800015 	stw	r2,0(sp)
 401e14c:	e1fffe04 	addi	r7,fp,-8
 401e150:	01800044 	movi	r6,1
 401e154:	000b883a 	mov	r5,zero
 401e158:	e13fff17 	ldw	r4,-4(fp)
 401e15c:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 401e160:	e0bffe43 	ldbu	r2,-7(fp)
 401e164:	10803fcc 	andi	r2,r2,255
 401e168:	1006943a 	slli	r3,r2,16
 401e16c:	e0bffe83 	ldbu	r2,-6(fp)
 401e170:	10803fcc 	andi	r2,r2,255
 401e174:	1004923a 	slli	r2,r2,8
 401e178:	1886b03a 	or	r3,r3,r2
 401e17c:	e0bffec3 	ldbu	r2,-5(fp)
 401e180:	10803fcc 	andi	r2,r2,255
 401e184:	1884b03a 	or	r2,r3,r2
}
 401e188:	e037883a 	mov	sp,fp
 401e18c:	dfc00117 	ldw	ra,4(sp)
 401e190:	df000017 	ldw	fp,0(sp)
 401e194:	dec00204 	addi	sp,sp,8
 401e198:	f800283a 	ret

0401e19c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 401e19c:	defff904 	addi	sp,sp,-28
 401e1a0:	dfc00615 	stw	ra,24(sp)
 401e1a4:	df000515 	stw	fp,20(sp)
 401e1a8:	df000504 	addi	fp,sp,20
 401e1ac:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 401e1b0:	00bfedc4 	movi	r2,-73
 401e1b4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 401e1b8:	e13fff17 	ldw	r4,-4(fp)
 401e1bc:	401ded80 	call	401ded8 <epcs_write_enable>

  alt_avalon_spi_command(
 401e1c0:	d8000215 	stw	zero,8(sp)
 401e1c4:	d8000115 	stw	zero,4(sp)
 401e1c8:	d8000015 	stw	zero,0(sp)
 401e1cc:	e1fffe04 	addi	r7,fp,-8
 401e1d0:	01800044 	movi	r6,1
 401e1d4:	000b883a 	mov	r5,zero
 401e1d8:	e13fff17 	ldw	r4,-4(fp)
 401e1dc:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 401e1e0:	0001883a 	nop
}
 401e1e4:	e037883a 	mov	sp,fp
 401e1e8:	dfc00117 	ldw	ra,4(sp)
 401e1ec:	df000017 	ldw	fp,0(sp)
 401e1f0:	dec00204 	addi	sp,sp,8
 401e1f4:	f800283a 	ret

0401e1f8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 401e1f8:	defff904 	addi	sp,sp,-28
 401e1fc:	dfc00615 	stw	ra,24(sp)
 401e200:	df000515 	stw	fp,20(sp)
 401e204:	df000504 	addi	fp,sp,20
 401e208:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 401e20c:	00bffa44 	movi	r2,-23
 401e210:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 401e214:	e13fff17 	ldw	r4,-4(fp)
 401e218:	401ded80 	call	401ded8 <epcs_write_enable>

  alt_avalon_spi_command(
 401e21c:	d8000215 	stw	zero,8(sp)
 401e220:	d8000115 	stw	zero,4(sp)
 401e224:	d8000015 	stw	zero,0(sp)
 401e228:	e1fffe04 	addi	r7,fp,-8
 401e22c:	01800044 	movi	r6,1
 401e230:	000b883a 	mov	r5,zero
 401e234:	e13fff17 	ldw	r4,-4(fp)
 401e238:	401eb880 	call	401eb88 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 401e23c:	0001883a 	nop
}
 401e240:	e037883a 	mov	sp,fp
 401e244:	dfc00117 	ldw	ra,4(sp)
 401e248:	df000017 	ldw	fp,0(sp)
 401e24c:	dec00204 	addi	sp,sp,8
 401e250:	f800283a 	ret

0401e254 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401e254:	defff504 	addi	sp,sp,-44
 401e258:	df000a15 	stw	fp,40(sp)
 401e25c:	df000a04 	addi	fp,sp,40
 401e260:	e13ffc15 	stw	r4,-16(fp)
 401e264:	e17ffd15 	stw	r5,-12(fp)
 401e268:	e1bffe15 	stw	r6,-8(fp)
 401e26c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401e270:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401e274:	d0a02017 	ldw	r2,-32640(gp)
  
  if (alt_ticks_per_second ())
 401e278:	10003c26 	beq	r2,zero,401e36c <alt_alarm_start+0x118>
  {
    if (alarm)
 401e27c:	e0bffc17 	ldw	r2,-16(fp)
 401e280:	10003826 	beq	r2,zero,401e364 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401e284:	e0bffc17 	ldw	r2,-16(fp)
 401e288:	e0fffe17 	ldw	r3,-8(fp)
 401e28c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401e290:	e0bffc17 	ldw	r2,-16(fp)
 401e294:	e0ffff17 	ldw	r3,-4(fp)
 401e298:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e29c:	0005303a 	rdctl	r2,status
 401e2a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e2a4:	e0fff917 	ldw	r3,-28(fp)
 401e2a8:	00bfff84 	movi	r2,-2
 401e2ac:	1884703a 	and	r2,r3,r2
 401e2b0:	1001703a 	wrctl	status,r2
  
  return context;
 401e2b4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401e2b8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401e2bc:	d0a02117 	ldw	r2,-32636(gp)
      
      current_nticks = alt_nticks();
 401e2c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401e2c4:	e0fffd17 	ldw	r3,-12(fp)
 401e2c8:	e0bff617 	ldw	r2,-40(fp)
 401e2cc:	1885883a 	add	r2,r3,r2
 401e2d0:	10c00044 	addi	r3,r2,1
 401e2d4:	e0bffc17 	ldw	r2,-16(fp)
 401e2d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401e2dc:	e0bffc17 	ldw	r2,-16(fp)
 401e2e0:	10c00217 	ldw	r3,8(r2)
 401e2e4:	e0bff617 	ldw	r2,-40(fp)
 401e2e8:	1880042e 	bgeu	r3,r2,401e2fc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401e2ec:	e0bffc17 	ldw	r2,-16(fp)
 401e2f0:	00c00044 	movi	r3,1
 401e2f4:	10c00405 	stb	r3,16(r2)
 401e2f8:	00000206 	br	401e304 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401e2fc:	e0bffc17 	ldw	r2,-16(fp)
 401e300:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401e304:	e0bffc17 	ldw	r2,-16(fp)
 401e308:	d0e01104 	addi	r3,gp,-32700
 401e30c:	e0fffa15 	stw	r3,-24(fp)
 401e310:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401e314:	e0bffb17 	ldw	r2,-20(fp)
 401e318:	e0fffa17 	ldw	r3,-24(fp)
 401e31c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401e320:	e0bffa17 	ldw	r2,-24(fp)
 401e324:	10c00017 	ldw	r3,0(r2)
 401e328:	e0bffb17 	ldw	r2,-20(fp)
 401e32c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401e330:	e0bffa17 	ldw	r2,-24(fp)
 401e334:	10800017 	ldw	r2,0(r2)
 401e338:	e0fffb17 	ldw	r3,-20(fp)
 401e33c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401e340:	e0bffa17 	ldw	r2,-24(fp)
 401e344:	e0fffb17 	ldw	r3,-20(fp)
 401e348:	10c00015 	stw	r3,0(r2)
 401e34c:	e0bff817 	ldw	r2,-32(fp)
 401e350:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e354:	e0bff717 	ldw	r2,-36(fp)
 401e358:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401e35c:	0005883a 	mov	r2,zero
 401e360:	00000306 	br	401e370 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401e364:	00bffa84 	movi	r2,-22
 401e368:	00000106 	br	401e370 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401e36c:	00bfde84 	movi	r2,-134
  }
}
 401e370:	e037883a 	mov	sp,fp
 401e374:	df000017 	ldw	fp,0(sp)
 401e378:	dec00104 	addi	sp,sp,4
 401e37c:	f800283a 	ret

0401e380 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401e380:	defffa04 	addi	sp,sp,-24
 401e384:	dfc00515 	stw	ra,20(sp)
 401e388:	df000415 	stw	fp,16(sp)
 401e38c:	df000404 	addi	fp,sp,16
 401e390:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 401e394:	008000c4 	movi	r2,3
 401e398:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401e39c:	e0fffd17 	ldw	r3,-12(fp)
 401e3a0:	008003f4 	movhi	r2,15
 401e3a4:	10909004 	addi	r2,r2,16960
 401e3a8:	1885383a 	mul	r2,r3,r2
 401e3ac:	100b883a 	mov	r5,r2
 401e3b0:	0101c9f4 	movhi	r4,1831
 401e3b4:	21038004 	addi	r4,r4,3584
 401e3b8:	400a1140 	call	400a114 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401e3bc:	100b883a 	mov	r5,r2
 401e3c0:	01200034 	movhi	r4,32768
 401e3c4:	213fffc4 	addi	r4,r4,-1
 401e3c8:	400a1140 	call	400a114 <__udivsi3>
 401e3cc:	100b883a 	mov	r5,r2
 401e3d0:	e13fff17 	ldw	r4,-4(fp)
 401e3d4:	400a1140 	call	400a114 <__udivsi3>
 401e3d8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401e3dc:	e0bffe17 	ldw	r2,-8(fp)
 401e3e0:	10002a26 	beq	r2,zero,401e48c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401e3e4:	e03ffc15 	stw	zero,-16(fp)
 401e3e8:	00001706 	br	401e448 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401e3ec:	00a00034 	movhi	r2,32768
 401e3f0:	10bfffc4 	addi	r2,r2,-1
 401e3f4:	10bfffc4 	addi	r2,r2,-1
 401e3f8:	103ffe1e 	bne	r2,zero,401e3f4 <__alt_mem_epcs_flash_controller_0+0xfb01d3f4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401e3fc:	e0fffd17 	ldw	r3,-12(fp)
 401e400:	008003f4 	movhi	r2,15
 401e404:	10909004 	addi	r2,r2,16960
 401e408:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401e40c:	100b883a 	mov	r5,r2
 401e410:	0101c9f4 	movhi	r4,1831
 401e414:	21038004 	addi	r4,r4,3584
 401e418:	400a1140 	call	400a114 <__udivsi3>
 401e41c:	100b883a 	mov	r5,r2
 401e420:	01200034 	movhi	r4,32768
 401e424:	213fffc4 	addi	r4,r4,-1
 401e428:	400a1140 	call	400a114 <__udivsi3>
 401e42c:	1007883a 	mov	r3,r2
 401e430:	e0bfff17 	ldw	r2,-4(fp)
 401e434:	10c5c83a 	sub	r2,r2,r3
 401e438:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401e43c:	e0bffc17 	ldw	r2,-16(fp)
 401e440:	10800044 	addi	r2,r2,1
 401e444:	e0bffc15 	stw	r2,-16(fp)
 401e448:	e0fffc17 	ldw	r3,-16(fp)
 401e44c:	e0bffe17 	ldw	r2,-8(fp)
 401e450:	18bfe616 	blt	r3,r2,401e3ec <__alt_mem_epcs_flash_controller_0+0xfb01d3ec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401e454:	e0fffd17 	ldw	r3,-12(fp)
 401e458:	008003f4 	movhi	r2,15
 401e45c:	10909004 	addi	r2,r2,16960
 401e460:	1885383a 	mul	r2,r3,r2
 401e464:	100b883a 	mov	r5,r2
 401e468:	0101c9f4 	movhi	r4,1831
 401e46c:	21038004 	addi	r4,r4,3584
 401e470:	400a1140 	call	400a114 <__udivsi3>
 401e474:	1007883a 	mov	r3,r2
 401e478:	e0bfff17 	ldw	r2,-4(fp)
 401e47c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401e480:	10bfffc4 	addi	r2,r2,-1
 401e484:	103ffe1e 	bne	r2,zero,401e480 <__alt_mem_epcs_flash_controller_0+0xfb01d480>
 401e488:	00000d06 	br	401e4c0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401e48c:	e0fffd17 	ldw	r3,-12(fp)
 401e490:	008003f4 	movhi	r2,15
 401e494:	10909004 	addi	r2,r2,16960
 401e498:	1885383a 	mul	r2,r3,r2
 401e49c:	100b883a 	mov	r5,r2
 401e4a0:	0101c9f4 	movhi	r4,1831
 401e4a4:	21038004 	addi	r4,r4,3584
 401e4a8:	400a1140 	call	400a114 <__udivsi3>
 401e4ac:	1007883a 	mov	r3,r2
 401e4b0:	e0bfff17 	ldw	r2,-4(fp)
 401e4b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401e4b8:	10bfffc4 	addi	r2,r2,-1
 401e4bc:	00bffe16 	blt	zero,r2,401e4b8 <__alt_mem_epcs_flash_controller_0+0xfb01d4b8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401e4c0:	0005883a 	mov	r2,zero
}
 401e4c4:	e037883a 	mov	sp,fp
 401e4c8:	dfc00117 	ldw	ra,4(sp)
 401e4cc:	df000017 	ldw	fp,0(sp)
 401e4d0:	dec00204 	addi	sp,sp,8
 401e4d4:	f800283a 	ret

0401e4d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401e4d8:	defffe04 	addi	sp,sp,-8
 401e4dc:	dfc00115 	stw	ra,4(sp)
 401e4e0:	df000015 	stw	fp,0(sp)
 401e4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401e4e8:	d0a00e17 	ldw	r2,-32712(gp)
 401e4ec:	10000326 	beq	r2,zero,401e4fc <alt_get_errno+0x24>
 401e4f0:	d0a00e17 	ldw	r2,-32712(gp)
 401e4f4:	103ee83a 	callr	r2
 401e4f8:	00000106 	br	401e500 <alt_get_errno+0x28>
 401e4fc:	d0a01804 	addi	r2,gp,-32672
}
 401e500:	e037883a 	mov	sp,fp
 401e504:	dfc00117 	ldw	ra,4(sp)
 401e508:	df000017 	ldw	fp,0(sp)
 401e50c:	dec00204 	addi	sp,sp,8
 401e510:	f800283a 	ret

0401e514 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401e514:	defffa04 	addi	sp,sp,-24
 401e518:	dfc00515 	stw	ra,20(sp)
 401e51c:	df000415 	stw	fp,16(sp)
 401e520:	df000404 	addi	fp,sp,16
 401e524:	e13ffe15 	stw	r4,-8(fp)
 401e528:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401e52c:	e0bffe17 	ldw	r2,-8(fp)
 401e530:	10000326 	beq	r2,zero,401e540 <alt_dev_llist_insert+0x2c>
 401e534:	e0bffe17 	ldw	r2,-8(fp)
 401e538:	10800217 	ldw	r2,8(r2)
 401e53c:	1000061e 	bne	r2,zero,401e558 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401e540:	401e4d80 	call	401e4d8 <alt_get_errno>
 401e544:	1007883a 	mov	r3,r2
 401e548:	00800584 	movi	r2,22
 401e54c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401e550:	00bffa84 	movi	r2,-22
 401e554:	00001306 	br	401e5a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401e558:	e0bffe17 	ldw	r2,-8(fp)
 401e55c:	e0ffff17 	ldw	r3,-4(fp)
 401e560:	e0fffc15 	stw	r3,-16(fp)
 401e564:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401e568:	e0bffd17 	ldw	r2,-12(fp)
 401e56c:	e0fffc17 	ldw	r3,-16(fp)
 401e570:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401e574:	e0bffc17 	ldw	r2,-16(fp)
 401e578:	10c00017 	ldw	r3,0(r2)
 401e57c:	e0bffd17 	ldw	r2,-12(fp)
 401e580:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401e584:	e0bffc17 	ldw	r2,-16(fp)
 401e588:	10800017 	ldw	r2,0(r2)
 401e58c:	e0fffd17 	ldw	r3,-12(fp)
 401e590:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401e594:	e0bffc17 	ldw	r2,-16(fp)
 401e598:	e0fffd17 	ldw	r3,-12(fp)
 401e59c:	10c00015 	stw	r3,0(r2)

  return 0;  
 401e5a0:	0005883a 	mov	r2,zero
}
 401e5a4:	e037883a 	mov	sp,fp
 401e5a8:	dfc00117 	ldw	ra,4(sp)
 401e5ac:	df000017 	ldw	fp,0(sp)
 401e5b0:	dec00204 	addi	sp,sp,8
 401e5b4:	f800283a 	ret

0401e5b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401e5b8:	defffd04 	addi	sp,sp,-12
 401e5bc:	dfc00215 	stw	ra,8(sp)
 401e5c0:	df000115 	stw	fp,4(sp)
 401e5c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401e5c8:	008100b4 	movhi	r2,1026
 401e5cc:	10bcd404 	addi	r2,r2,-3248
 401e5d0:	e0bfff15 	stw	r2,-4(fp)
 401e5d4:	00000606 	br	401e5f0 <_do_ctors+0x38>
        (*ctor) (); 
 401e5d8:	e0bfff17 	ldw	r2,-4(fp)
 401e5dc:	10800017 	ldw	r2,0(r2)
 401e5e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401e5e4:	e0bfff17 	ldw	r2,-4(fp)
 401e5e8:	10bfff04 	addi	r2,r2,-4
 401e5ec:	e0bfff15 	stw	r2,-4(fp)
 401e5f0:	e0ffff17 	ldw	r3,-4(fp)
 401e5f4:	008100b4 	movhi	r2,1026
 401e5f8:	10bcd504 	addi	r2,r2,-3244
 401e5fc:	18bff62e 	bgeu	r3,r2,401e5d8 <__alt_mem_epcs_flash_controller_0+0xfb01d5d8>
        (*ctor) (); 
}
 401e600:	0001883a 	nop
 401e604:	e037883a 	mov	sp,fp
 401e608:	dfc00117 	ldw	ra,4(sp)
 401e60c:	df000017 	ldw	fp,0(sp)
 401e610:	dec00204 	addi	sp,sp,8
 401e614:	f800283a 	ret

0401e618 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401e618:	defffd04 	addi	sp,sp,-12
 401e61c:	dfc00215 	stw	ra,8(sp)
 401e620:	df000115 	stw	fp,4(sp)
 401e624:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401e628:	008100b4 	movhi	r2,1026
 401e62c:	10bcd404 	addi	r2,r2,-3248
 401e630:	e0bfff15 	stw	r2,-4(fp)
 401e634:	00000606 	br	401e650 <_do_dtors+0x38>
        (*dtor) (); 
 401e638:	e0bfff17 	ldw	r2,-4(fp)
 401e63c:	10800017 	ldw	r2,0(r2)
 401e640:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401e644:	e0bfff17 	ldw	r2,-4(fp)
 401e648:	10bfff04 	addi	r2,r2,-4
 401e64c:	e0bfff15 	stw	r2,-4(fp)
 401e650:	e0ffff17 	ldw	r3,-4(fp)
 401e654:	008100b4 	movhi	r2,1026
 401e658:	10bcd504 	addi	r2,r2,-3244
 401e65c:	18bff62e 	bgeu	r3,r2,401e638 <__alt_mem_epcs_flash_controller_0+0xfb01d638>
        (*dtor) (); 
}
 401e660:	0001883a 	nop
 401e664:	e037883a 	mov	sp,fp
 401e668:	dfc00117 	ldw	ra,4(sp)
 401e66c:	df000017 	ldw	fp,0(sp)
 401e670:	dec00204 	addi	sp,sp,8
 401e674:	f800283a 	ret

0401e678 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 401e678:	defffc04 	addi	sp,sp,-16
 401e67c:	dfc00315 	stw	ra,12(sp)
 401e680:	df000215 	stw	fp,8(sp)
 401e684:	df000204 	addi	fp,sp,8
 401e688:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 401e68c:	d1601304 	addi	r5,gp,-32692
 401e690:	e13fff17 	ldw	r4,-4(fp)
 401e694:	401ed840 	call	401ed84 <alt_find_dev>
 401e698:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 401e69c:	e0bffe17 	ldw	r2,-8(fp)
 401e6a0:	10000926 	beq	r2,zero,401e6c8 <alt_flash_open_dev+0x50>
 401e6a4:	e0bffe17 	ldw	r2,-8(fp)
 401e6a8:	10800317 	ldw	r2,12(r2)
 401e6ac:	10000626 	beq	r2,zero,401e6c8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 401e6b0:	e0bffe17 	ldw	r2,-8(fp)
 401e6b4:	10800317 	ldw	r2,12(r2)
 401e6b8:	e17fff17 	ldw	r5,-4(fp)
 401e6bc:	e13ffe17 	ldw	r4,-8(fp)
 401e6c0:	103ee83a 	callr	r2
 401e6c4:	00000106 	br	401e6cc <alt_flash_open_dev+0x54>
  }

  return dev;
 401e6c8:	e0bffe17 	ldw	r2,-8(fp)
}
 401e6cc:	e037883a 	mov	sp,fp
 401e6d0:	dfc00117 	ldw	ra,4(sp)
 401e6d4:	df000017 	ldw	fp,0(sp)
 401e6d8:	dec00204 	addi	sp,sp,8
 401e6dc:	f800283a 	ret

0401e6e0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 401e6e0:	defffd04 	addi	sp,sp,-12
 401e6e4:	dfc00215 	stw	ra,8(sp)
 401e6e8:	df000115 	stw	fp,4(sp)
 401e6ec:	df000104 	addi	fp,sp,4
 401e6f0:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 401e6f4:	e0bfff17 	ldw	r2,-4(fp)
 401e6f8:	10000826 	beq	r2,zero,401e71c <alt_flash_close_dev+0x3c>
 401e6fc:	e0bfff17 	ldw	r2,-4(fp)
 401e700:	10800417 	ldw	r2,16(r2)
 401e704:	10000526 	beq	r2,zero,401e71c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 401e708:	e0bfff17 	ldw	r2,-4(fp)
 401e70c:	10800417 	ldw	r2,16(r2)
 401e710:	e13fff17 	ldw	r4,-4(fp)
 401e714:	103ee83a 	callr	r2
  }
  return;
 401e718:	0001883a 	nop
 401e71c:	0001883a 	nop
}
 401e720:	e037883a 	mov	sp,fp
 401e724:	dfc00117 	ldw	ra,4(sp)
 401e728:	df000017 	ldw	fp,0(sp)
 401e72c:	dec00204 	addi	sp,sp,8
 401e730:	f800283a 	ret

0401e734 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401e734:	defffe04 	addi	sp,sp,-8
 401e738:	df000115 	stw	fp,4(sp)
 401e73c:	df000104 	addi	fp,sp,4
 401e740:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401e744:	e0bfff17 	ldw	r2,-4(fp)
 401e748:	10bffe84 	addi	r2,r2,-6
 401e74c:	10c00428 	cmpgeui	r3,r2,16
 401e750:	18001a1e 	bne	r3,zero,401e7bc <alt_exception_cause_generated_bad_addr+0x88>
 401e754:	100690ba 	slli	r3,r2,2
 401e758:	008100b4 	movhi	r2,1026
 401e75c:	10b9db04 	addi	r2,r2,-6292
 401e760:	1885883a 	add	r2,r3,r2
 401e764:	10800017 	ldw	r2,0(r2)
 401e768:	1000683a 	jmp	r2
 401e76c:	0401e7ac 	andhi	r16,zero,1950
 401e770:	0401e7ac 	andhi	r16,zero,1950
 401e774:	0401e7bc 	xorhi	r16,zero,1950
 401e778:	0401e7bc 	xorhi	r16,zero,1950
 401e77c:	0401e7bc 	xorhi	r16,zero,1950
 401e780:	0401e7ac 	andhi	r16,zero,1950
 401e784:	0401e7b4 	movhi	r16,1950
 401e788:	0401e7bc 	xorhi	r16,zero,1950
 401e78c:	0401e7ac 	andhi	r16,zero,1950
 401e790:	0401e7ac 	andhi	r16,zero,1950
 401e794:	0401e7bc 	xorhi	r16,zero,1950
 401e798:	0401e7ac 	andhi	r16,zero,1950
 401e79c:	0401e7b4 	movhi	r16,1950
 401e7a0:	0401e7bc 	xorhi	r16,zero,1950
 401e7a4:	0401e7bc 	xorhi	r16,zero,1950
 401e7a8:	0401e7ac 	andhi	r16,zero,1950
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401e7ac:	00800044 	movi	r2,1
 401e7b0:	00000306 	br	401e7c0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401e7b4:	0005883a 	mov	r2,zero
 401e7b8:	00000106 	br	401e7c0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401e7bc:	0005883a 	mov	r2,zero
  }
}
 401e7c0:	e037883a 	mov	sp,fp
 401e7c4:	df000017 	ldw	fp,0(sp)
 401e7c8:	dec00104 	addi	sp,sp,4
 401e7cc:	f800283a 	ret

0401e7d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401e7d0:	defff904 	addi	sp,sp,-28
 401e7d4:	dfc00615 	stw	ra,24(sp)
 401e7d8:	df000515 	stw	fp,20(sp)
 401e7dc:	df000504 	addi	fp,sp,20
 401e7e0:	e13ffc15 	stw	r4,-16(fp)
 401e7e4:	e17ffd15 	stw	r5,-12(fp)
 401e7e8:	e1bffe15 	stw	r6,-8(fp)
 401e7ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401e7f0:	e1bfff17 	ldw	r6,-4(fp)
 401e7f4:	e17ffe17 	ldw	r5,-8(fp)
 401e7f8:	e13ffd17 	ldw	r4,-12(fp)
 401e7fc:	401ea100 	call	401ea10 <open>
 401e800:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401e804:	e0bffb17 	ldw	r2,-20(fp)
 401e808:	10001c16 	blt	r2,zero,401e87c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 401e80c:	008103f4 	movhi	r2,1039
 401e810:	10874704 	addi	r2,r2,7452
 401e814:	e0fffb17 	ldw	r3,-20(fp)
 401e818:	18c00324 	muli	r3,r3,12
 401e81c:	10c5883a 	add	r2,r2,r3
 401e820:	10c00017 	ldw	r3,0(r2)
 401e824:	e0bffc17 	ldw	r2,-16(fp)
 401e828:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401e82c:	008103f4 	movhi	r2,1039
 401e830:	10874704 	addi	r2,r2,7452
 401e834:	e0fffb17 	ldw	r3,-20(fp)
 401e838:	18c00324 	muli	r3,r3,12
 401e83c:	10c5883a 	add	r2,r2,r3
 401e840:	10800104 	addi	r2,r2,4
 401e844:	10c00017 	ldw	r3,0(r2)
 401e848:	e0bffc17 	ldw	r2,-16(fp)
 401e84c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401e850:	008103f4 	movhi	r2,1039
 401e854:	10874704 	addi	r2,r2,7452
 401e858:	e0fffb17 	ldw	r3,-20(fp)
 401e85c:	18c00324 	muli	r3,r3,12
 401e860:	10c5883a 	add	r2,r2,r3
 401e864:	10800204 	addi	r2,r2,8
 401e868:	10c00017 	ldw	r3,0(r2)
 401e86c:	e0bffc17 	ldw	r2,-16(fp)
 401e870:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401e874:	e13ffb17 	ldw	r4,-20(fp)
 401e878:	401c0cc0 	call	401c0cc <alt_release_fd>
  }
} 
 401e87c:	0001883a 	nop
 401e880:	e037883a 	mov	sp,fp
 401e884:	dfc00117 	ldw	ra,4(sp)
 401e888:	df000017 	ldw	fp,0(sp)
 401e88c:	dec00204 	addi	sp,sp,8
 401e890:	f800283a 	ret

0401e894 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401e894:	defffb04 	addi	sp,sp,-20
 401e898:	dfc00415 	stw	ra,16(sp)
 401e89c:	df000315 	stw	fp,12(sp)
 401e8a0:	df000304 	addi	fp,sp,12
 401e8a4:	e13ffd15 	stw	r4,-12(fp)
 401e8a8:	e17ffe15 	stw	r5,-8(fp)
 401e8ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401e8b0:	01c07fc4 	movi	r7,511
 401e8b4:	01800044 	movi	r6,1
 401e8b8:	e17ffd17 	ldw	r5,-12(fp)
 401e8bc:	010103f4 	movhi	r4,1039
 401e8c0:	21074a04 	addi	r4,r4,7464
 401e8c4:	401e7d00 	call	401e7d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401e8c8:	01c07fc4 	movi	r7,511
 401e8cc:	000d883a 	mov	r6,zero
 401e8d0:	e17ffe17 	ldw	r5,-8(fp)
 401e8d4:	010103f4 	movhi	r4,1039
 401e8d8:	21074704 	addi	r4,r4,7452
 401e8dc:	401e7d00 	call	401e7d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401e8e0:	01c07fc4 	movi	r7,511
 401e8e4:	01800044 	movi	r6,1
 401e8e8:	e17fff17 	ldw	r5,-4(fp)
 401e8ec:	010103f4 	movhi	r4,1039
 401e8f0:	21074d04 	addi	r4,r4,7476
 401e8f4:	401e7d00 	call	401e7d0 <alt_open_fd>
}  
 401e8f8:	0001883a 	nop
 401e8fc:	e037883a 	mov	sp,fp
 401e900:	dfc00117 	ldw	ra,4(sp)
 401e904:	df000017 	ldw	fp,0(sp)
 401e908:	dec00204 	addi	sp,sp,8
 401e90c:	f800283a 	ret

0401e910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401e910:	defffe04 	addi	sp,sp,-8
 401e914:	dfc00115 	stw	ra,4(sp)
 401e918:	df000015 	stw	fp,0(sp)
 401e91c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401e920:	d0a00e17 	ldw	r2,-32712(gp)
 401e924:	10000326 	beq	r2,zero,401e934 <alt_get_errno+0x24>
 401e928:	d0a00e17 	ldw	r2,-32712(gp)
 401e92c:	103ee83a 	callr	r2
 401e930:	00000106 	br	401e938 <alt_get_errno+0x28>
 401e934:	d0a01804 	addi	r2,gp,-32672
}
 401e938:	e037883a 	mov	sp,fp
 401e93c:	dfc00117 	ldw	ra,4(sp)
 401e940:	df000017 	ldw	fp,0(sp)
 401e944:	dec00204 	addi	sp,sp,8
 401e948:	f800283a 	ret

0401e94c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401e94c:	defffd04 	addi	sp,sp,-12
 401e950:	df000215 	stw	fp,8(sp)
 401e954:	df000204 	addi	fp,sp,8
 401e958:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401e95c:	e0bfff17 	ldw	r2,-4(fp)
 401e960:	10800217 	ldw	r2,8(r2)
 401e964:	10d00034 	orhi	r3,r2,16384
 401e968:	e0bfff17 	ldw	r2,-4(fp)
 401e96c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401e970:	e03ffe15 	stw	zero,-8(fp)
 401e974:	00001d06 	br	401e9ec <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401e978:	008103f4 	movhi	r2,1039
 401e97c:	10874704 	addi	r2,r2,7452
 401e980:	e0fffe17 	ldw	r3,-8(fp)
 401e984:	18c00324 	muli	r3,r3,12
 401e988:	10c5883a 	add	r2,r2,r3
 401e98c:	10c00017 	ldw	r3,0(r2)
 401e990:	e0bfff17 	ldw	r2,-4(fp)
 401e994:	10800017 	ldw	r2,0(r2)
 401e998:	1880111e 	bne	r3,r2,401e9e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401e99c:	008103f4 	movhi	r2,1039
 401e9a0:	10874704 	addi	r2,r2,7452
 401e9a4:	e0fffe17 	ldw	r3,-8(fp)
 401e9a8:	18c00324 	muli	r3,r3,12
 401e9ac:	10c5883a 	add	r2,r2,r3
 401e9b0:	10800204 	addi	r2,r2,8
 401e9b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401e9b8:	1000090e 	bge	r2,zero,401e9e0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401e9bc:	e0bffe17 	ldw	r2,-8(fp)
 401e9c0:	10c00324 	muli	r3,r2,12
 401e9c4:	008103f4 	movhi	r2,1039
 401e9c8:	10874704 	addi	r2,r2,7452
 401e9cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401e9d0:	e0bfff17 	ldw	r2,-4(fp)
 401e9d4:	18800226 	beq	r3,r2,401e9e0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401e9d8:	00bffcc4 	movi	r2,-13
 401e9dc:	00000806 	br	401ea00 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401e9e0:	e0bffe17 	ldw	r2,-8(fp)
 401e9e4:	10800044 	addi	r2,r2,1
 401e9e8:	e0bffe15 	stw	r2,-8(fp)
 401e9ec:	d0a00d17 	ldw	r2,-32716(gp)
 401e9f0:	1007883a 	mov	r3,r2
 401e9f4:	e0bffe17 	ldw	r2,-8(fp)
 401e9f8:	18bfdf2e 	bgeu	r3,r2,401e978 <__alt_mem_epcs_flash_controller_0+0xfb01d978>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401e9fc:	0005883a 	mov	r2,zero
}
 401ea00:	e037883a 	mov	sp,fp
 401ea04:	df000017 	ldw	fp,0(sp)
 401ea08:	dec00104 	addi	sp,sp,4
 401ea0c:	f800283a 	ret

0401ea10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401ea10:	defff604 	addi	sp,sp,-40
 401ea14:	dfc00915 	stw	ra,36(sp)
 401ea18:	df000815 	stw	fp,32(sp)
 401ea1c:	df000804 	addi	fp,sp,32
 401ea20:	e13ffd15 	stw	r4,-12(fp)
 401ea24:	e17ffe15 	stw	r5,-8(fp)
 401ea28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401ea2c:	00bfffc4 	movi	r2,-1
 401ea30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401ea34:	00bffb44 	movi	r2,-19
 401ea38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401ea3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401ea40:	d1600b04 	addi	r5,gp,-32724
 401ea44:	e13ffd17 	ldw	r4,-12(fp)
 401ea48:	401ed840 	call	401ed84 <alt_find_dev>
 401ea4c:	e0bff815 	stw	r2,-32(fp)
 401ea50:	e0bff817 	ldw	r2,-32(fp)
 401ea54:	1000051e 	bne	r2,zero,401ea6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401ea58:	e13ffd17 	ldw	r4,-12(fp)
 401ea5c:	401ee140 	call	401ee14 <alt_find_file>
 401ea60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401ea64:	00800044 	movi	r2,1
 401ea68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401ea6c:	e0bff817 	ldw	r2,-32(fp)
 401ea70:	10002926 	beq	r2,zero,401eb18 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401ea74:	e13ff817 	ldw	r4,-32(fp)
 401ea78:	401ef1c0 	call	401ef1c <alt_get_fd>
 401ea7c:	e0bff915 	stw	r2,-28(fp)
 401ea80:	e0bff917 	ldw	r2,-28(fp)
 401ea84:	1000030e 	bge	r2,zero,401ea94 <open+0x84>
    {
      status = index;
 401ea88:	e0bff917 	ldw	r2,-28(fp)
 401ea8c:	e0bffa15 	stw	r2,-24(fp)
 401ea90:	00002306 	br	401eb20 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401ea94:	e0bff917 	ldw	r2,-28(fp)
 401ea98:	10c00324 	muli	r3,r2,12
 401ea9c:	008103f4 	movhi	r2,1039
 401eaa0:	10874704 	addi	r2,r2,7452
 401eaa4:	1885883a 	add	r2,r3,r2
 401eaa8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401eaac:	e0fffe17 	ldw	r3,-8(fp)
 401eab0:	00900034 	movhi	r2,16384
 401eab4:	10bfffc4 	addi	r2,r2,-1
 401eab8:	1886703a 	and	r3,r3,r2
 401eabc:	e0bffc17 	ldw	r2,-16(fp)
 401eac0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401eac4:	e0bffb17 	ldw	r2,-20(fp)
 401eac8:	1000051e 	bne	r2,zero,401eae0 <open+0xd0>
 401eacc:	e13ffc17 	ldw	r4,-16(fp)
 401ead0:	401e94c0 	call	401e94c <alt_file_locked>
 401ead4:	e0bffa15 	stw	r2,-24(fp)
 401ead8:	e0bffa17 	ldw	r2,-24(fp)
 401eadc:	10001016 	blt	r2,zero,401eb20 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401eae0:	e0bff817 	ldw	r2,-32(fp)
 401eae4:	10800317 	ldw	r2,12(r2)
 401eae8:	10000826 	beq	r2,zero,401eb0c <open+0xfc>
 401eaec:	e0bff817 	ldw	r2,-32(fp)
 401eaf0:	10800317 	ldw	r2,12(r2)
 401eaf4:	e1ffff17 	ldw	r7,-4(fp)
 401eaf8:	e1bffe17 	ldw	r6,-8(fp)
 401eafc:	e17ffd17 	ldw	r5,-12(fp)
 401eb00:	e13ffc17 	ldw	r4,-16(fp)
 401eb04:	103ee83a 	callr	r2
 401eb08:	00000106 	br	401eb10 <open+0x100>
 401eb0c:	0005883a 	mov	r2,zero
 401eb10:	e0bffa15 	stw	r2,-24(fp)
 401eb14:	00000206 	br	401eb20 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401eb18:	00bffb44 	movi	r2,-19
 401eb1c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401eb20:	e0bffa17 	ldw	r2,-24(fp)
 401eb24:	1000090e 	bge	r2,zero,401eb4c <open+0x13c>
  {
    alt_release_fd (index);  
 401eb28:	e13ff917 	ldw	r4,-28(fp)
 401eb2c:	401c0cc0 	call	401c0cc <alt_release_fd>
    ALT_ERRNO = -status;
 401eb30:	401e9100 	call	401e910 <alt_get_errno>
 401eb34:	1007883a 	mov	r3,r2
 401eb38:	e0bffa17 	ldw	r2,-24(fp)
 401eb3c:	0085c83a 	sub	r2,zero,r2
 401eb40:	18800015 	stw	r2,0(r3)
    return -1;
 401eb44:	00bfffc4 	movi	r2,-1
 401eb48:	00000106 	br	401eb50 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401eb4c:	e0bff917 	ldw	r2,-28(fp)
}
 401eb50:	e037883a 	mov	sp,fp
 401eb54:	dfc00117 	ldw	ra,4(sp)
 401eb58:	df000017 	ldw	fp,0(sp)
 401eb5c:	dec00204 	addi	sp,sp,8
 401eb60:	f800283a 	ret

0401eb64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401eb64:	deffff04 	addi	sp,sp,-4
 401eb68:	df000015 	stw	fp,0(sp)
 401eb6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401eb70:	000170fa 	wrctl	ienable,zero
}
 401eb74:	0001883a 	nop
 401eb78:	e037883a 	mov	sp,fp
 401eb7c:	df000017 	ldw	fp,0(sp)
 401eb80:	dec00104 	addi	sp,sp,4
 401eb84:	f800283a 	ret

0401eb88 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401eb88:	defff404 	addi	sp,sp,-48
 401eb8c:	df000b15 	stw	fp,44(sp)
 401eb90:	df000b04 	addi	fp,sp,44
 401eb94:	e13ffc15 	stw	r4,-16(fp)
 401eb98:	e17ffd15 	stw	r5,-12(fp)
 401eb9c:	e1bffe15 	stw	r6,-8(fp)
 401eba0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401eba4:	e0ffff17 	ldw	r3,-4(fp)
 401eba8:	e0bffe17 	ldw	r2,-8(fp)
 401ebac:	1885883a 	add	r2,r3,r2
 401ebb0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401ebb4:	e0c00217 	ldw	r3,8(fp)
 401ebb8:	e0800117 	ldw	r2,4(fp)
 401ebbc:	1885883a 	add	r2,r3,r2
 401ebc0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401ebc4:	e0800117 	ldw	r2,4(fp)
 401ebc8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401ebcc:	e0bffe17 	ldw	r2,-8(fp)
 401ebd0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401ebd4:	00800044 	movi	r2,1
 401ebd8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401ebdc:	e0bffc17 	ldw	r2,-16(fp)
 401ebe0:	10800504 	addi	r2,r2,20
 401ebe4:	1009883a 	mov	r4,r2
 401ebe8:	00c00044 	movi	r3,1
 401ebec:	e0bffd17 	ldw	r2,-12(fp)
 401ebf0:	1884983a 	sll	r2,r3,r2
 401ebf4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401ebf8:	e0800317 	ldw	r2,12(fp)
 401ebfc:	1080008c 	andi	r2,r2,2
 401ec00:	1000051e 	bne	r2,zero,401ec18 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401ec04:	e0bffc17 	ldw	r2,-16(fp)
 401ec08:	10800304 	addi	r2,r2,12
 401ec0c:	1007883a 	mov	r3,r2
 401ec10:	00810004 	movi	r2,1024
 401ec14:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401ec18:	e0bffc17 	ldw	r2,-16(fp)
 401ec1c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401ec20:	e0bffc17 	ldw	r2,-16(fp)
 401ec24:	10800204 	addi	r2,r2,8
 401ec28:	10800037 	ldwio	r2,0(r2)
 401ec2c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401ec30:	e0bffa17 	ldw	r2,-24(fp)
 401ec34:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401ec38:	10000226 	beq	r2,zero,401ec44 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401ec3c:	e0bff717 	ldw	r2,-36(fp)
 401ec40:	1000031e 	bne	r2,zero,401ec50 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401ec44:	e0bffa17 	ldw	r2,-24(fp)
 401ec48:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401ec4c:	103ff426 	beq	r2,zero,401ec20 <__alt_mem_epcs_flash_controller_0+0xfb01dc20>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401ec50:	e0bffa17 	ldw	r2,-24(fp)
 401ec54:	1080100c 	andi	r2,r2,64
 401ec58:	10001e26 	beq	r2,zero,401ecd4 <alt_avalon_spi_command+0x14c>
 401ec5c:	e0bff717 	ldw	r2,-36(fp)
 401ec60:	00801c0e 	bge	zero,r2,401ecd4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401ec64:	e0bff717 	ldw	r2,-36(fp)
 401ec68:	10bfffc4 	addi	r2,r2,-1
 401ec6c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401ec70:	e0ffff17 	ldw	r3,-4(fp)
 401ec74:	e0bff817 	ldw	r2,-32(fp)
 401ec78:	18800a2e 	bgeu	r3,r2,401eca4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401ec7c:	e0bffc17 	ldw	r2,-16(fp)
 401ec80:	10800104 	addi	r2,r2,4
 401ec84:	1009883a 	mov	r4,r2
 401ec88:	e0bfff17 	ldw	r2,-4(fp)
 401ec8c:	10c00044 	addi	r3,r2,1
 401ec90:	e0ffff15 	stw	r3,-4(fp)
 401ec94:	10800003 	ldbu	r2,0(r2)
 401ec98:	10803fcc 	andi	r2,r2,255
 401ec9c:	20800035 	stwio	r2,0(r4)
 401eca0:	00000c06 	br	401ecd4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401eca4:	e0bff517 	ldw	r2,-44(fp)
 401eca8:	10000826 	beq	r2,zero,401eccc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401ecac:	e0bff517 	ldw	r2,-44(fp)
 401ecb0:	10bfffc4 	addi	r2,r2,-1
 401ecb4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401ecb8:	e0bffc17 	ldw	r2,-16(fp)
 401ecbc:	10800104 	addi	r2,r2,4
 401ecc0:	0007883a 	mov	r3,zero
 401ecc4:	10c00035 	stwio	r3,0(r2)
 401ecc8:	00000206 	br	401ecd4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401eccc:	00bf0004 	movi	r2,-1024
 401ecd0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401ecd4:	e0bffa17 	ldw	r2,-24(fp)
 401ecd8:	1080200c 	andi	r2,r2,128
 401ecdc:	103fd026 	beq	r2,zero,401ec20 <__alt_mem_epcs_flash_controller_0+0xfb01dc20>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401ece0:	e0bffc17 	ldw	r2,-16(fp)
 401ece4:	10800037 	ldwio	r2,0(r2)
 401ece8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401ecec:	e0bff617 	ldw	r2,-40(fp)
 401ecf0:	10000426 	beq	r2,zero,401ed04 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401ecf4:	e0bff617 	ldw	r2,-40(fp)
 401ecf8:	10bfffc4 	addi	r2,r2,-1
 401ecfc:	e0bff615 	stw	r2,-40(fp)
 401ed00:	00000506 	br	401ed18 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401ed04:	e0800217 	ldw	r2,8(fp)
 401ed08:	10c00044 	addi	r3,r2,1
 401ed0c:	e0c00215 	stw	r3,8(fp)
 401ed10:	e0fffb17 	ldw	r3,-20(fp)
 401ed14:	10c00005 	stb	r3,0(r2)
      credits++;
 401ed18:	e0bff717 	ldw	r2,-36(fp)
 401ed1c:	10800044 	addi	r2,r2,1
 401ed20:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401ed24:	e0bff617 	ldw	r2,-40(fp)
 401ed28:	103fbd1e 	bne	r2,zero,401ec20 <__alt_mem_epcs_flash_controller_0+0xfb01dc20>
 401ed2c:	e0c00217 	ldw	r3,8(fp)
 401ed30:	e0bff917 	ldw	r2,-28(fp)
 401ed34:	18bfba1e 	bne	r3,r2,401ec20 <__alt_mem_epcs_flash_controller_0+0xfb01dc20>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401ed38:	e0bffc17 	ldw	r2,-16(fp)
 401ed3c:	10800204 	addi	r2,r2,8
 401ed40:	10800037 	ldwio	r2,0(r2)
 401ed44:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401ed48:	e0bffa17 	ldw	r2,-24(fp)
 401ed4c:	1080080c 	andi	r2,r2,32
 401ed50:	103ff926 	beq	r2,zero,401ed38 <__alt_mem_epcs_flash_controller_0+0xfb01dd38>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401ed54:	e0800317 	ldw	r2,12(fp)
 401ed58:	1080004c 	andi	r2,r2,1
 401ed5c:	1000041e 	bne	r2,zero,401ed70 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401ed60:	e0bffc17 	ldw	r2,-16(fp)
 401ed64:	10800304 	addi	r2,r2,12
 401ed68:	0007883a 	mov	r3,zero
 401ed6c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401ed70:	e0800117 	ldw	r2,4(fp)
}
 401ed74:	e037883a 	mov	sp,fp
 401ed78:	df000017 	ldw	fp,0(sp)
 401ed7c:	dec00104 	addi	sp,sp,4
 401ed80:	f800283a 	ret

0401ed84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401ed84:	defffa04 	addi	sp,sp,-24
 401ed88:	dfc00515 	stw	ra,20(sp)
 401ed8c:	df000415 	stw	fp,16(sp)
 401ed90:	df000404 	addi	fp,sp,16
 401ed94:	e13ffe15 	stw	r4,-8(fp)
 401ed98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401ed9c:	e0bfff17 	ldw	r2,-4(fp)
 401eda0:	10800017 	ldw	r2,0(r2)
 401eda4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401eda8:	e13ffe17 	ldw	r4,-8(fp)
 401edac:	400ec400 	call	400ec40 <strlen>
 401edb0:	10800044 	addi	r2,r2,1
 401edb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401edb8:	00000d06 	br	401edf0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401edbc:	e0bffc17 	ldw	r2,-16(fp)
 401edc0:	10800217 	ldw	r2,8(r2)
 401edc4:	e0fffd17 	ldw	r3,-12(fp)
 401edc8:	180d883a 	mov	r6,r3
 401edcc:	e17ffe17 	ldw	r5,-8(fp)
 401edd0:	1009883a 	mov	r4,r2
 401edd4:	401f00c0 	call	401f00c <memcmp>
 401edd8:	1000021e 	bne	r2,zero,401ede4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401eddc:	e0bffc17 	ldw	r2,-16(fp)
 401ede0:	00000706 	br	401ee00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401ede4:	e0bffc17 	ldw	r2,-16(fp)
 401ede8:	10800017 	ldw	r2,0(r2)
 401edec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401edf0:	e0fffc17 	ldw	r3,-16(fp)
 401edf4:	e0bfff17 	ldw	r2,-4(fp)
 401edf8:	18bff01e 	bne	r3,r2,401edbc <__alt_mem_epcs_flash_controller_0+0xfb01ddbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401edfc:	0005883a 	mov	r2,zero
}
 401ee00:	e037883a 	mov	sp,fp
 401ee04:	dfc00117 	ldw	ra,4(sp)
 401ee08:	df000017 	ldw	fp,0(sp)
 401ee0c:	dec00204 	addi	sp,sp,8
 401ee10:	f800283a 	ret

0401ee14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401ee14:	defffb04 	addi	sp,sp,-20
 401ee18:	dfc00415 	stw	ra,16(sp)
 401ee1c:	df000315 	stw	fp,12(sp)
 401ee20:	df000304 	addi	fp,sp,12
 401ee24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401ee28:	d0a00917 	ldw	r2,-32732(gp)
 401ee2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401ee30:	00003106 	br	401eef8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401ee34:	e0bffd17 	ldw	r2,-12(fp)
 401ee38:	10800217 	ldw	r2,8(r2)
 401ee3c:	1009883a 	mov	r4,r2
 401ee40:	400ec400 	call	400ec40 <strlen>
 401ee44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401ee48:	e0bffd17 	ldw	r2,-12(fp)
 401ee4c:	10c00217 	ldw	r3,8(r2)
 401ee50:	e0bffe17 	ldw	r2,-8(fp)
 401ee54:	10bfffc4 	addi	r2,r2,-1
 401ee58:	1885883a 	add	r2,r3,r2
 401ee5c:	10800003 	ldbu	r2,0(r2)
 401ee60:	10803fcc 	andi	r2,r2,255
 401ee64:	1080201c 	xori	r2,r2,128
 401ee68:	10bfe004 	addi	r2,r2,-128
 401ee6c:	10800bd8 	cmpnei	r2,r2,47
 401ee70:	1000031e 	bne	r2,zero,401ee80 <alt_find_file+0x6c>
    {
      len -= 1;
 401ee74:	e0bffe17 	ldw	r2,-8(fp)
 401ee78:	10bfffc4 	addi	r2,r2,-1
 401ee7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401ee80:	e0bffe17 	ldw	r2,-8(fp)
 401ee84:	e0ffff17 	ldw	r3,-4(fp)
 401ee88:	1885883a 	add	r2,r3,r2
 401ee8c:	10800003 	ldbu	r2,0(r2)
 401ee90:	10803fcc 	andi	r2,r2,255
 401ee94:	1080201c 	xori	r2,r2,128
 401ee98:	10bfe004 	addi	r2,r2,-128
 401ee9c:	10800be0 	cmpeqi	r2,r2,47
 401eea0:	1000081e 	bne	r2,zero,401eec4 <alt_find_file+0xb0>
 401eea4:	e0bffe17 	ldw	r2,-8(fp)
 401eea8:	e0ffff17 	ldw	r3,-4(fp)
 401eeac:	1885883a 	add	r2,r3,r2
 401eeb0:	10800003 	ldbu	r2,0(r2)
 401eeb4:	10803fcc 	andi	r2,r2,255
 401eeb8:	1080201c 	xori	r2,r2,128
 401eebc:	10bfe004 	addi	r2,r2,-128
 401eec0:	10000a1e 	bne	r2,zero,401eeec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401eec4:	e0bffd17 	ldw	r2,-12(fp)
 401eec8:	10800217 	ldw	r2,8(r2)
 401eecc:	e0fffe17 	ldw	r3,-8(fp)
 401eed0:	180d883a 	mov	r6,r3
 401eed4:	e17fff17 	ldw	r5,-4(fp)
 401eed8:	1009883a 	mov	r4,r2
 401eedc:	401f00c0 	call	401f00c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401eee0:	1000021e 	bne	r2,zero,401eeec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401eee4:	e0bffd17 	ldw	r2,-12(fp)
 401eee8:	00000706 	br	401ef08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401eeec:	e0bffd17 	ldw	r2,-12(fp)
 401eef0:	10800017 	ldw	r2,0(r2)
 401eef4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401eef8:	e0fffd17 	ldw	r3,-12(fp)
 401eefc:	d0a00904 	addi	r2,gp,-32732
 401ef00:	18bfcc1e 	bne	r3,r2,401ee34 <__alt_mem_epcs_flash_controller_0+0xfb01de34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401ef04:	0005883a 	mov	r2,zero
}
 401ef08:	e037883a 	mov	sp,fp
 401ef0c:	dfc00117 	ldw	ra,4(sp)
 401ef10:	df000017 	ldw	fp,0(sp)
 401ef14:	dec00204 	addi	sp,sp,8
 401ef18:	f800283a 	ret

0401ef1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401ef1c:	defffc04 	addi	sp,sp,-16
 401ef20:	df000315 	stw	fp,12(sp)
 401ef24:	df000304 	addi	fp,sp,12
 401ef28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401ef2c:	00bffa04 	movi	r2,-24
 401ef30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401ef34:	e03ffd15 	stw	zero,-12(fp)
 401ef38:	00001906 	br	401efa0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 401ef3c:	008103f4 	movhi	r2,1039
 401ef40:	10874704 	addi	r2,r2,7452
 401ef44:	e0fffd17 	ldw	r3,-12(fp)
 401ef48:	18c00324 	muli	r3,r3,12
 401ef4c:	10c5883a 	add	r2,r2,r3
 401ef50:	10800017 	ldw	r2,0(r2)
 401ef54:	10000f1e 	bne	r2,zero,401ef94 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 401ef58:	008103f4 	movhi	r2,1039
 401ef5c:	10874704 	addi	r2,r2,7452
 401ef60:	e0fffd17 	ldw	r3,-12(fp)
 401ef64:	18c00324 	muli	r3,r3,12
 401ef68:	10c5883a 	add	r2,r2,r3
 401ef6c:	e0ffff17 	ldw	r3,-4(fp)
 401ef70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401ef74:	d0e00d17 	ldw	r3,-32716(gp)
 401ef78:	e0bffd17 	ldw	r2,-12(fp)
 401ef7c:	1880020e 	bge	r3,r2,401ef88 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 401ef80:	e0bffd17 	ldw	r2,-12(fp)
 401ef84:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 401ef88:	e0bffd17 	ldw	r2,-12(fp)
 401ef8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401ef90:	00000606 	br	401efac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401ef94:	e0bffd17 	ldw	r2,-12(fp)
 401ef98:	10800044 	addi	r2,r2,1
 401ef9c:	e0bffd15 	stw	r2,-12(fp)
 401efa0:	e0bffd17 	ldw	r2,-12(fp)
 401efa4:	10800810 	cmplti	r2,r2,32
 401efa8:	103fe41e 	bne	r2,zero,401ef3c <__alt_mem_epcs_flash_controller_0+0xfb01df3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401efac:	e0bffe17 	ldw	r2,-8(fp)
}
 401efb0:	e037883a 	mov	sp,fp
 401efb4:	df000017 	ldw	fp,0(sp)
 401efb8:	dec00104 	addi	sp,sp,4
 401efbc:	f800283a 	ret

0401efc0 <atexit>:
 401efc0:	200b883a 	mov	r5,r4
 401efc4:	000f883a 	mov	r7,zero
 401efc8:	000d883a 	mov	r6,zero
 401efcc:	0009883a 	mov	r4,zero
 401efd0:	401f0881 	jmpi	401f088 <__register_exitproc>

0401efd4 <exit>:
 401efd4:	defffe04 	addi	sp,sp,-8
 401efd8:	000b883a 	mov	r5,zero
 401efdc:	dc000015 	stw	r16,0(sp)
 401efe0:	dfc00115 	stw	ra,4(sp)
 401efe4:	2021883a 	mov	r16,r4
 401efe8:	401f1a00 	call	401f1a0 <__call_exitprocs>
 401efec:	008103f4 	movhi	r2,1039
 401eff0:	108bf504 	addi	r2,r2,12244
 401eff4:	11000017 	ldw	r4,0(r2)
 401eff8:	20800f17 	ldw	r2,60(r4)
 401effc:	10000126 	beq	r2,zero,401f004 <exit+0x30>
 401f000:	103ee83a 	callr	r2
 401f004:	8009883a 	mov	r4,r16
 401f008:	401f3200 	call	401f320 <_exit>

0401f00c <memcmp>:
 401f00c:	01c000c4 	movi	r7,3
 401f010:	3980192e 	bgeu	r7,r6,401f078 <memcmp+0x6c>
 401f014:	2144b03a 	or	r2,r4,r5
 401f018:	11c4703a 	and	r2,r2,r7
 401f01c:	10000f26 	beq	r2,zero,401f05c <memcmp+0x50>
 401f020:	20800003 	ldbu	r2,0(r4)
 401f024:	28c00003 	ldbu	r3,0(r5)
 401f028:	10c0151e 	bne	r2,r3,401f080 <memcmp+0x74>
 401f02c:	31bfff84 	addi	r6,r6,-2
 401f030:	01ffffc4 	movi	r7,-1
 401f034:	00000406 	br	401f048 <memcmp+0x3c>
 401f038:	20800003 	ldbu	r2,0(r4)
 401f03c:	28c00003 	ldbu	r3,0(r5)
 401f040:	31bfffc4 	addi	r6,r6,-1
 401f044:	10c00e1e 	bne	r2,r3,401f080 <memcmp+0x74>
 401f048:	21000044 	addi	r4,r4,1
 401f04c:	29400044 	addi	r5,r5,1
 401f050:	31fff91e 	bne	r6,r7,401f038 <__alt_mem_epcs_flash_controller_0+0xfb01e038>
 401f054:	0005883a 	mov	r2,zero
 401f058:	f800283a 	ret
 401f05c:	20c00017 	ldw	r3,0(r4)
 401f060:	28800017 	ldw	r2,0(r5)
 401f064:	18bfee1e 	bne	r3,r2,401f020 <__alt_mem_epcs_flash_controller_0+0xfb01e020>
 401f068:	31bfff04 	addi	r6,r6,-4
 401f06c:	21000104 	addi	r4,r4,4
 401f070:	29400104 	addi	r5,r5,4
 401f074:	39bff936 	bltu	r7,r6,401f05c <__alt_mem_epcs_flash_controller_0+0xfb01e05c>
 401f078:	303fe91e 	bne	r6,zero,401f020 <__alt_mem_epcs_flash_controller_0+0xfb01e020>
 401f07c:	003ff506 	br	401f054 <__alt_mem_epcs_flash_controller_0+0xfb01e054>
 401f080:	10c5c83a 	sub	r2,r2,r3
 401f084:	f800283a 	ret

0401f088 <__register_exitproc>:
 401f088:	defffa04 	addi	sp,sp,-24
 401f08c:	dc000315 	stw	r16,12(sp)
 401f090:	040103f4 	movhi	r16,1039
 401f094:	840bf504 	addi	r16,r16,12244
 401f098:	80c00017 	ldw	r3,0(r16)
 401f09c:	dc400415 	stw	r17,16(sp)
 401f0a0:	dfc00515 	stw	ra,20(sp)
 401f0a4:	18805217 	ldw	r2,328(r3)
 401f0a8:	2023883a 	mov	r17,r4
 401f0ac:	10003726 	beq	r2,zero,401f18c <__register_exitproc+0x104>
 401f0b0:	10c00117 	ldw	r3,4(r2)
 401f0b4:	010007c4 	movi	r4,31
 401f0b8:	20c00e16 	blt	r4,r3,401f0f4 <__register_exitproc+0x6c>
 401f0bc:	1a000044 	addi	r8,r3,1
 401f0c0:	8800221e 	bne	r17,zero,401f14c <__register_exitproc+0xc4>
 401f0c4:	18c00084 	addi	r3,r3,2
 401f0c8:	18c7883a 	add	r3,r3,r3
 401f0cc:	18c7883a 	add	r3,r3,r3
 401f0d0:	12000115 	stw	r8,4(r2)
 401f0d4:	10c7883a 	add	r3,r2,r3
 401f0d8:	19400015 	stw	r5,0(r3)
 401f0dc:	0005883a 	mov	r2,zero
 401f0e0:	dfc00517 	ldw	ra,20(sp)
 401f0e4:	dc400417 	ldw	r17,16(sp)
 401f0e8:	dc000317 	ldw	r16,12(sp)
 401f0ec:	dec00604 	addi	sp,sp,24
 401f0f0:	f800283a 	ret
 401f0f4:	00810074 	movhi	r2,1025
 401f0f8:	10b7ad04 	addi	r2,r2,-8524
 401f0fc:	10002626 	beq	r2,zero,401f198 <__register_exitproc+0x110>
 401f100:	01006404 	movi	r4,400
 401f104:	d9400015 	stw	r5,0(sp)
 401f108:	d9800115 	stw	r6,4(sp)
 401f10c:	d9c00215 	stw	r7,8(sp)
 401f110:	400deb40 	call	400deb4 <malloc>
 401f114:	d9400017 	ldw	r5,0(sp)
 401f118:	d9800117 	ldw	r6,4(sp)
 401f11c:	d9c00217 	ldw	r7,8(sp)
 401f120:	10001d26 	beq	r2,zero,401f198 <__register_exitproc+0x110>
 401f124:	81000017 	ldw	r4,0(r16)
 401f128:	10000115 	stw	zero,4(r2)
 401f12c:	02000044 	movi	r8,1
 401f130:	22405217 	ldw	r9,328(r4)
 401f134:	0007883a 	mov	r3,zero
 401f138:	12400015 	stw	r9,0(r2)
 401f13c:	20805215 	stw	r2,328(r4)
 401f140:	10006215 	stw	zero,392(r2)
 401f144:	10006315 	stw	zero,396(r2)
 401f148:	883fde26 	beq	r17,zero,401f0c4 <__alt_mem_epcs_flash_controller_0+0xfb01e0c4>
 401f14c:	18c9883a 	add	r4,r3,r3
 401f150:	2109883a 	add	r4,r4,r4
 401f154:	1109883a 	add	r4,r2,r4
 401f158:	21802215 	stw	r6,136(r4)
 401f15c:	01800044 	movi	r6,1
 401f160:	12406217 	ldw	r9,392(r2)
 401f164:	30cc983a 	sll	r6,r6,r3
 401f168:	4992b03a 	or	r9,r9,r6
 401f16c:	12406215 	stw	r9,392(r2)
 401f170:	21c04215 	stw	r7,264(r4)
 401f174:	01000084 	movi	r4,2
 401f178:	893fd21e 	bne	r17,r4,401f0c4 <__alt_mem_epcs_flash_controller_0+0xfb01e0c4>
 401f17c:	11006317 	ldw	r4,396(r2)
 401f180:	218cb03a 	or	r6,r4,r6
 401f184:	11806315 	stw	r6,396(r2)
 401f188:	003fce06 	br	401f0c4 <__alt_mem_epcs_flash_controller_0+0xfb01e0c4>
 401f18c:	18805304 	addi	r2,r3,332
 401f190:	18805215 	stw	r2,328(r3)
 401f194:	003fc606 	br	401f0b0 <__alt_mem_epcs_flash_controller_0+0xfb01e0b0>
 401f198:	00bfffc4 	movi	r2,-1
 401f19c:	003fd006 	br	401f0e0 <__alt_mem_epcs_flash_controller_0+0xfb01e0e0>

0401f1a0 <__call_exitprocs>:
 401f1a0:	defff504 	addi	sp,sp,-44
 401f1a4:	df000915 	stw	fp,36(sp)
 401f1a8:	dd400615 	stw	r21,24(sp)
 401f1ac:	dc800315 	stw	r18,12(sp)
 401f1b0:	dfc00a15 	stw	ra,40(sp)
 401f1b4:	ddc00815 	stw	r23,32(sp)
 401f1b8:	dd800715 	stw	r22,28(sp)
 401f1bc:	dd000515 	stw	r20,20(sp)
 401f1c0:	dcc00415 	stw	r19,16(sp)
 401f1c4:	dc400215 	stw	r17,8(sp)
 401f1c8:	dc000115 	stw	r16,4(sp)
 401f1cc:	d9000015 	stw	r4,0(sp)
 401f1d0:	2839883a 	mov	fp,r5
 401f1d4:	04800044 	movi	r18,1
 401f1d8:	057fffc4 	movi	r21,-1
 401f1dc:	008103f4 	movhi	r2,1039
 401f1e0:	108bf504 	addi	r2,r2,12244
 401f1e4:	12000017 	ldw	r8,0(r2)
 401f1e8:	45005217 	ldw	r20,328(r8)
 401f1ec:	44c05204 	addi	r19,r8,328
 401f1f0:	a0001c26 	beq	r20,zero,401f264 <__call_exitprocs+0xc4>
 401f1f4:	a0800117 	ldw	r2,4(r20)
 401f1f8:	15ffffc4 	addi	r23,r2,-1
 401f1fc:	b8000d16 	blt	r23,zero,401f234 <__call_exitprocs+0x94>
 401f200:	14000044 	addi	r16,r2,1
 401f204:	8421883a 	add	r16,r16,r16
 401f208:	8421883a 	add	r16,r16,r16
 401f20c:	84402004 	addi	r17,r16,128
 401f210:	a463883a 	add	r17,r20,r17
 401f214:	a421883a 	add	r16,r20,r16
 401f218:	e0001e26 	beq	fp,zero,401f294 <__call_exitprocs+0xf4>
 401f21c:	80804017 	ldw	r2,256(r16)
 401f220:	e0801c26 	beq	fp,r2,401f294 <__call_exitprocs+0xf4>
 401f224:	bdffffc4 	addi	r23,r23,-1
 401f228:	843fff04 	addi	r16,r16,-4
 401f22c:	8c7fff04 	addi	r17,r17,-4
 401f230:	bd7ff91e 	bne	r23,r21,401f218 <__alt_mem_epcs_flash_controller_0+0xfb01e218>
 401f234:	00810074 	movhi	r2,1025
 401f238:	10b7b204 	addi	r2,r2,-8504
 401f23c:	10000926 	beq	r2,zero,401f264 <__call_exitprocs+0xc4>
 401f240:	a0800117 	ldw	r2,4(r20)
 401f244:	1000301e 	bne	r2,zero,401f308 <__call_exitprocs+0x168>
 401f248:	a0800017 	ldw	r2,0(r20)
 401f24c:	10003226 	beq	r2,zero,401f318 <__call_exitprocs+0x178>
 401f250:	a009883a 	mov	r4,r20
 401f254:	98800015 	stw	r2,0(r19)
 401f258:	400dec80 	call	400dec8 <free>
 401f25c:	9d000017 	ldw	r20,0(r19)
 401f260:	a03fe41e 	bne	r20,zero,401f1f4 <__alt_mem_epcs_flash_controller_0+0xfb01e1f4>
 401f264:	dfc00a17 	ldw	ra,40(sp)
 401f268:	df000917 	ldw	fp,36(sp)
 401f26c:	ddc00817 	ldw	r23,32(sp)
 401f270:	dd800717 	ldw	r22,28(sp)
 401f274:	dd400617 	ldw	r21,24(sp)
 401f278:	dd000517 	ldw	r20,20(sp)
 401f27c:	dcc00417 	ldw	r19,16(sp)
 401f280:	dc800317 	ldw	r18,12(sp)
 401f284:	dc400217 	ldw	r17,8(sp)
 401f288:	dc000117 	ldw	r16,4(sp)
 401f28c:	dec00b04 	addi	sp,sp,44
 401f290:	f800283a 	ret
 401f294:	a0800117 	ldw	r2,4(r20)
 401f298:	80c00017 	ldw	r3,0(r16)
 401f29c:	10bfffc4 	addi	r2,r2,-1
 401f2a0:	15c01426 	beq	r2,r23,401f2f4 <__call_exitprocs+0x154>
 401f2a4:	80000015 	stw	zero,0(r16)
 401f2a8:	183fde26 	beq	r3,zero,401f224 <__alt_mem_epcs_flash_controller_0+0xfb01e224>
 401f2ac:	95c8983a 	sll	r4,r18,r23
 401f2b0:	a0806217 	ldw	r2,392(r20)
 401f2b4:	a5800117 	ldw	r22,4(r20)
 401f2b8:	2084703a 	and	r2,r4,r2
 401f2bc:	10000b26 	beq	r2,zero,401f2ec <__call_exitprocs+0x14c>
 401f2c0:	a0806317 	ldw	r2,396(r20)
 401f2c4:	2088703a 	and	r4,r4,r2
 401f2c8:	20000c1e 	bne	r4,zero,401f2fc <__call_exitprocs+0x15c>
 401f2cc:	89400017 	ldw	r5,0(r17)
 401f2d0:	d9000017 	ldw	r4,0(sp)
 401f2d4:	183ee83a 	callr	r3
 401f2d8:	a0800117 	ldw	r2,4(r20)
 401f2dc:	15bfbf1e 	bne	r2,r22,401f1dc <__alt_mem_epcs_flash_controller_0+0xfb01e1dc>
 401f2e0:	98800017 	ldw	r2,0(r19)
 401f2e4:	153fcf26 	beq	r2,r20,401f224 <__alt_mem_epcs_flash_controller_0+0xfb01e224>
 401f2e8:	003fbc06 	br	401f1dc <__alt_mem_epcs_flash_controller_0+0xfb01e1dc>
 401f2ec:	183ee83a 	callr	r3
 401f2f0:	003ff906 	br	401f2d8 <__alt_mem_epcs_flash_controller_0+0xfb01e2d8>
 401f2f4:	a5c00115 	stw	r23,4(r20)
 401f2f8:	003feb06 	br	401f2a8 <__alt_mem_epcs_flash_controller_0+0xfb01e2a8>
 401f2fc:	89000017 	ldw	r4,0(r17)
 401f300:	183ee83a 	callr	r3
 401f304:	003ff406 	br	401f2d8 <__alt_mem_epcs_flash_controller_0+0xfb01e2d8>
 401f308:	a0800017 	ldw	r2,0(r20)
 401f30c:	a027883a 	mov	r19,r20
 401f310:	1029883a 	mov	r20,r2
 401f314:	003fb606 	br	401f1f0 <__alt_mem_epcs_flash_controller_0+0xfb01e1f0>
 401f318:	0005883a 	mov	r2,zero
 401f31c:	003ffb06 	br	401f30c <__alt_mem_epcs_flash_controller_0+0xfb01e30c>

0401f320 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401f320:	defffd04 	addi	sp,sp,-12
 401f324:	df000215 	stw	fp,8(sp)
 401f328:	df000204 	addi	fp,sp,8
 401f32c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401f330:	0001883a 	nop
 401f334:	e0bfff17 	ldw	r2,-4(fp)
 401f338:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401f33c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401f340:	10000226 	beq	r2,zero,401f34c <_exit+0x2c>
    ALT_SIM_FAIL();
 401f344:	002af070 	cmpltui	zero,zero,43969
 401f348:	00000106 	br	401f350 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401f34c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401f350:	003fff06 	br	401f350 <__alt_mem_epcs_flash_controller_0+0xfb01e350>
