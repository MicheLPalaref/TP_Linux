
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module G_Sensor(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// HSMC, HSMC connect to MTLC2 -Multi-Touch/LCD/Camera //////////
	inout 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	output		     [7:0]		LCD_B,
	output		          		LCD_DCLK,
	output		          		LCD_DE,
	output		          		LCD_DIM,
	output		          		LCD_DITH,
	output		     [7:0]		LCD_G,
	output		          		LCD_HSD,
	output		          		LCD_MODE,
	output		          		LCD_POWER_CTL,
	output		          		LCD_RSTB,
	output		     [7:0]		LCD_R,
	output		          		LCD_SHLR,
	output		          		LCD_UPDN,
	output		          		LCD_VSD,
	output		          		LSENSOR_ADDR_SEL,
	input 		          		LSENSOR_INT,
	inout 		          		LSENSOR_SCL,
	inout 		          		LSENSOR_SDA,
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		    [13:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n,
	output		          		MPU_AD0_SDO,
	output		          		MPU_CS_n,
	output		          		MPU_FSYNC,
	input 		          		MPU_INT,
	inout 		          		MPU_SCL_SCLK,
	inout 		          		MPU_SDA_SDI,
	inout 		          		TOUCH_I2C_SCL,
	inout 		          		TOUCH_I2C_SDA,
	input 		          		TOUCH_INT_n
);


//=======================================================
//  REG/WIRE declarations
//=======================================================


wire reset_n;
wire video_hs;
wire video_vs;
wire video_clk;
wire video_de;
wire [7:0] video_r;
wire [7:0] video_g;
wire [7:0] video_b;

//=======================================================
//  Structural coding
//=======================================================


vga_pll vga_pll_inst(
	.rst(~KEY[0]),
	.refclk(CLOCK2_50),
	.outclk_0(video_clk), // 33.3MHz
	.locked(reset_n)
	);
	

	


    qsys u0 (
        .reset_n                                  (reset_n),                                  //               clk_50_clk_in_reset.reset_n
        .clk_50                                   (CLOCK_50),                                   //                     clk_50_clk_in.clk

        .out_port_from_the_led                    (LEDR),                    //           led_external_connection.export
        .in_port_to_the_sw                        (SW),                        //            sw_external_connection.export
        .in_port_to_the_key                       (KEY),                       //           key_external_connection.export
		  
			// sdram 
        .pll_sdram_clk                            (DRAM_CLK),                             //                         pll_sdram.clk
        .zs_addr_from_the_sdram                   (DRAM_ADDR),                   //                        sdram_wire.addr
        .zs_ba_from_the_sdram                     (DRAM_BA),                     //                                  .ba
        .zs_cas_n_from_the_sdram                  (DRAM_CAS_N),                  //                                  .cas_n
        .zs_cke_from_the_sdram                    (DRAM_CKE),                    //                                  .cke
        .zs_cs_n_from_the_sdram                   (DRAM_CS_N),                   //                                  .cs_n
        .zs_dq_to_and_from_the_sdram              (DRAM_DQ),              //                                  .dq
        .zs_dqm_from_the_sdram                    ({DRAM_UDQM,DRAM_LDQM}),                    //                                  .dqm
        .zs_ras_n_from_the_sdram                  (DRAM_RAS_N),                  //                                  .ras_n
        .zs_we_n_from_the_sdram                   (DRAM_WE_N),                   //                                  .we_n
		  
		  // display
        .vid_clk_to_the_alt_vip_itc_0             (video_clk),             //       alt_vip_itc_0_clocked_video.vid_clk
        .vid_data_from_the_alt_vip_itc_0          ({video_r, video_g, video_b}),          //                                  .vid_data
        .underflow_from_the_alt_vip_itc_0         (),         //                                  .underflow
        .vid_datavalid_from_the_alt_vip_itc_0     (video_de),     //                                  .vid_datavalid
        .vid_v_sync_from_the_alt_vip_itc_0        (video_vs),        //                                  .vid_v_sync
        .vid_h_sync_from_the_alt_vip_itc_0        (video_hs),        //                                  .vid_h_sync
        .vid_f_from_the_alt_vip_itc_0             (),             //                                  .vid_f
        .vid_h_from_the_alt_vip_itc_0             (),             //                                  .vid_h
        .vid_v_from_the_alt_vip_itc_0             (),             //                                  .vid_v
		  
		  // mpu
        .mpu_int_external_connection_export       (MPU_INT ),       //       mpu_int_external_connection.export
        .mpu_i2c_opencores_export_scl_pad_io      (MPU_SCL_SCLK),      //          mpu_i2c_opencores_export.scl_pad_io
        .mpu_i2c_opencores_export_sda_pad_io      (MPU_SDA_SDI ),      //                                  .sda_pad_io
		  //light
		  .light_int_external_connection_export     (LSENSOR_INT),     //     light_int_external_connection.export
        .light_i2c_opencores_export_scl_pad_io    (LSENSOR_SCL),    //        light_i2c_opencores_export.scl_pad_io
        .light_i2c_opencores_export_sda_pad_io    (LSENSOR_SDA),     //                                  .sda_pad_io

		  // touch
        .touch_i2c_opencores_export_scl_pad_io        (TOUCH_I2C_SCL),        //            i2c_opencores_0_export.scl_pad_io
        .touch_i2c_opencores_export_sda_pad_io        (TOUCH_I2C_SDA),        //                                  .sda_pad_io
        .touch_int_n_external_connection_export	      (TOUCH_INT_n) // lcd_touch_int_external_connection.export
		  
    );

		
// vga on baord
assign {VGA_R, VGA_G, VGA_B} = {video_r, video_g, video_b};
assign VGA_BLANK_N = 1'b1;
assign VGA_SYNC_N = 1'b0;
assign VGA_HS = ~video_hs;
assign VGA_VS = ~video_vs;
assign VGA_CLK = video_clk;


// MTL - display
assign {LCD_R,LCD_G,LCD_B} = {video_r, video_g, video_b};
assign LCD_DCLK = video_clk;
assign LCD_HSD = ~video_hs;
assign LCD_VSD = ~video_vs;
//assign LCD_DE = video_de;

// lcd config
assign LCD_BLON = 1'b1;
assign LCD_ON = 1'b1;
assign LCD_MODE = 1'b0;  //HSD/VSD mode
assign LCD_RSTB = 1'b1; //NO RESET
assign LCD_DIM  = 1'b1;
assign LCD_POWER_CTL = 1'b1;
assign LCD_SHLR         = 1'b1;
assign LCD_UPDN         = 1'b0;
//assign LCD_DITH = ;

// mtlc2: mpu9250
assign MPU_AD0_SDO = 1'b0;
assign MPU_CS_n = 1'b1; // pull-high for I2C
assign MPU_FSYNC = 1'b0; 

// mtlc2: light sensor
assign LSENSOR_ADDR_SEL = 1'b0;

		

endmodule
