// DE10_Standard_Qsys_alt_vip_cl_cps_1.v

// This file was auto-generated from alt_vip_cl_cps_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.1 200

`timescale 1 ps / 1 ps
module DE10_Standard_Qsys_alt_vip_cl_cps_1 #(
		parameter BITS_PER_SYMBOL     = 8,
		parameter USER_PACKET_SUPPORT = "PASSTHROUGH"
	) (
		input  wire        main_clock,           // main_clock.clk
		input  wire        main_reset,           // main_reset.reset
		input  wire [23:0] din_0_data,           //      din_0.data
		input  wire        din_0_valid,          //           .valid
		input  wire        din_0_startofpacket,  //           .startofpacket
		input  wire        din_0_endofpacket,    //           .endofpacket
		output wire        din_0_ready,          //           .ready
		output wire [23:0] dout_0_data,          //     dout_0.data
		output wire        dout_0_valid,         //           .valid
		output wire        dout_0_startofpacket, //           .startofpacket
		output wire        dout_0_endofpacket,   //           .endofpacket
		input  wire        dout_0_ready,         //           .ready
		output wire [23:0] dout_1_data,          //     dout_1.data
		output wire        dout_1_valid,         //           .valid
		output wire        dout_1_startofpacket, //           .startofpacket
		output wire        dout_1_endofpacket,   //           .endofpacket
		input  wire        dout_1_ready          //           .ready
	);

	wire          video_in_resp_0_av_st_dout_valid;                  // video_in_resp_0:av_st_dout_valid -> video_in_cmd_0:av_st_din_valid
	wire   [55:0] video_in_resp_0_av_st_dout_data;                   // video_in_resp_0:av_st_dout_data -> video_in_cmd_0:av_st_din_data
	wire          video_in_resp_0_av_st_dout_ready;                  // video_in_cmd_0:av_st_din_ready -> video_in_resp_0:av_st_dout_ready
	wire          video_in_resp_0_av_st_dout_startofpacket;          // video_in_resp_0:av_st_dout_startofpacket -> video_in_cmd_0:av_st_din_startofpacket
	wire          video_in_resp_0_av_st_dout_endofpacket;            // video_in_resp_0:av_st_dout_endofpacket -> video_in_cmd_0:av_st_din_endofpacket
	wire          video_in_cmd_0_av_st_dout_valid;                   // video_in_cmd_0:av_st_dout_valid -> input_0_sc_fifo:in_valid
	wire   [55:0] video_in_cmd_0_av_st_dout_data;                    // video_in_cmd_0:av_st_dout_data -> input_0_sc_fifo:in_data
	wire          video_in_cmd_0_av_st_dout_ready;                   // input_0_sc_fifo:in_ready -> video_in_cmd_0:av_st_dout_ready
	wire          video_in_cmd_0_av_st_dout_startofpacket;           // video_in_cmd_0:av_st_dout_startofpacket -> input_0_sc_fifo:in_startofpacket
	wire          video_in_cmd_0_av_st_dout_endofpacket;             // video_in_cmd_0:av_st_dout_endofpacket -> input_0_sc_fifo:in_endofpacket
	wire          input_0_sc_fifo_out_valid;                         // input_0_sc_fifo:out_valid -> input_0_demux:av_st_din_valid
	wire   [55:0] input_0_sc_fifo_out_data;                          // input_0_sc_fifo:out_data -> input_0_demux:av_st_din_data
	wire          input_0_sc_fifo_out_ready;                         // input_0_demux:av_st_din_ready -> input_0_sc_fifo:out_ready
	wire          input_0_sc_fifo_out_startofpacket;                 // input_0_sc_fifo:out_startofpacket -> input_0_demux:av_st_din_startofpacket
	wire          input_0_sc_fifo_out_endofpacket;                   // input_0_sc_fifo:out_endofpacket -> input_0_demux:av_st_din_endofpacket
	wire          output_0_sc_fifo_out_valid;                        // output_0_sc_fifo:out_valid -> video_out_0:av_st_din_valid
	wire   [55:0] output_0_sc_fifo_out_data;                         // output_0_sc_fifo:out_data -> video_out_0:av_st_din_data
	wire          output_0_sc_fifo_out_ready;                        // video_out_0:av_st_din_ready -> output_0_sc_fifo:out_ready
	wire          output_0_sc_fifo_out_startofpacket;                // output_0_sc_fifo:out_startofpacket -> video_out_0:av_st_din_startofpacket
	wire          output_0_sc_fifo_out_endofpacket;                  // output_0_sc_fifo:out_endofpacket -> video_out_0:av_st_din_endofpacket
	wire          output_0_mux_av_st_dout_valid;                     // output_0_mux:av_st_dout_valid -> output_0_sc_fifo:in_valid
	wire   [55:0] output_0_mux_av_st_dout_data;                      // output_0_mux:av_st_dout_data -> output_0_sc_fifo:in_data
	wire          output_0_mux_av_st_dout_ready;                     // output_0_sc_fifo:in_ready -> output_0_mux:av_st_dout_ready
	wire          output_0_mux_av_st_dout_startofpacket;             // output_0_mux:av_st_dout_startofpacket -> output_0_sc_fifo:in_startofpacket
	wire          output_0_mux_av_st_dout_endofpacket;               // output_0_mux:av_st_dout_endofpacket -> output_0_sc_fifo:in_endofpacket
	wire          output_1_sc_fifo_out_valid;                        // output_1_sc_fifo:out_valid -> video_out_1:av_st_din_valid
	wire   [55:0] output_1_sc_fifo_out_data;                         // output_1_sc_fifo:out_data -> video_out_1:av_st_din_data
	wire          output_1_sc_fifo_out_ready;                        // video_out_1:av_st_din_ready -> output_1_sc_fifo:out_ready
	wire          output_1_sc_fifo_out_startofpacket;                // output_1_sc_fifo:out_startofpacket -> video_out_1:av_st_din_startofpacket
	wire          output_1_sc_fifo_out_endofpacket;                  // output_1_sc_fifo:out_endofpacket -> video_out_1:av_st_din_endofpacket
	wire          output_1_mux_av_st_dout_valid;                     // output_1_mux:av_st_dout_valid -> output_1_sc_fifo:in_valid
	wire   [55:0] output_1_mux_av_st_dout_data;                      // output_1_mux:av_st_dout_data -> output_1_sc_fifo:in_data
	wire          output_1_mux_av_st_dout_ready;                     // output_1_sc_fifo:in_ready -> output_1_mux:av_st_dout_ready
	wire          output_1_mux_av_st_dout_startofpacket;             // output_1_mux:av_st_dout_startofpacket -> output_1_sc_fifo:in_startofpacket
	wire          output_1_mux_av_st_dout_endofpacket;               // output_1_mux:av_st_dout_endofpacket -> output_1_sc_fifo:in_endofpacket
	wire          input_0_demux_av_st_dout_0_valid;                  // input_0_demux:av_st_dout_valid_0 -> cps_core:av_st_din_0_valid
	wire   [55:0] input_0_demux_av_st_dout_0_data;                   // input_0_demux:av_st_dout_data_0 -> cps_core:av_st_din_0_data
	wire          input_0_demux_av_st_dout_0_ready;                  // cps_core:av_st_din_0_ready -> input_0_demux:av_st_dout_ready_0
	wire          input_0_demux_av_st_dout_0_startofpacket;          // input_0_demux:av_st_dout_startofpacket_0 -> cps_core:av_st_din_0_startofpacket
	wire          input_0_demux_av_st_dout_0_endofpacket;            // input_0_demux:av_st_dout_endofpacket_0 -> cps_core:av_st_din_0_endofpacket
	wire          cps_core_av_st_dout_0_valid;                       // cps_core:av_st_dout_0_valid -> output_0_mux:av_st_din_valid_0
	wire   [55:0] cps_core_av_st_dout_0_data;                        // cps_core:av_st_dout_0_data -> output_0_mux:av_st_din_data_0
	wire          cps_core_av_st_dout_0_ready;                       // output_0_mux:av_st_din_ready_0 -> cps_core:av_st_dout_0_ready
	wire          cps_core_av_st_dout_0_startofpacket;               // cps_core:av_st_dout_0_startofpacket -> output_0_mux:av_st_din_startofpacket_0
	wire          cps_core_av_st_dout_0_endofpacket;                 // cps_core:av_st_dout_0_endofpacket -> output_0_mux:av_st_din_endofpacket_0
	wire          cps_core_av_st_dout_1_valid;                       // cps_core:av_st_dout_1_valid -> output_1_mux:av_st_din_valid_0
	wire   [55:0] cps_core_av_st_dout_1_data;                        // cps_core:av_st_dout_1_data -> output_1_mux:av_st_din_data_0
	wire          cps_core_av_st_dout_1_ready;                       // output_1_mux:av_st_din_ready_0 -> cps_core:av_st_dout_1_ready
	wire          cps_core_av_st_dout_1_startofpacket;               // cps_core:av_st_dout_1_startofpacket -> output_1_mux:av_st_din_startofpacket_0
	wire          cps_core_av_st_dout_1_endofpacket;                 // cps_core:av_st_dout_1_endofpacket -> output_1_mux:av_st_din_endofpacket_0
	wire          input_0_demux_av_st_dout_1_valid;                  // input_0_demux:av_st_dout_valid_1 -> user_packet_duplicator:av_st_din_valid
	wire   [55:0] input_0_demux_av_st_dout_1_data;                   // input_0_demux:av_st_dout_data_1 -> user_packet_duplicator:av_st_din_data
	wire          input_0_demux_av_st_dout_1_ready;                  // user_packet_duplicator:av_st_din_ready -> input_0_demux:av_st_dout_ready_1
	wire          input_0_demux_av_st_dout_1_startofpacket;          // input_0_demux:av_st_dout_startofpacket_1 -> user_packet_duplicator:av_st_din_startofpacket
	wire          input_0_demux_av_st_dout_1_endofpacket;            // input_0_demux:av_st_dout_endofpacket_1 -> user_packet_duplicator:av_st_din_endofpacket
	wire          user_packet_duplicator_av_st_dout_0_valid;         // user_packet_duplicator:av_st_dout_valid_0 -> output_0_mux:av_st_din_valid_1
	wire   [55:0] user_packet_duplicator_av_st_dout_0_data;          // user_packet_duplicator:av_st_dout_data_0 -> output_0_mux:av_st_din_data_1
	wire          user_packet_duplicator_av_st_dout_0_ready;         // output_0_mux:av_st_din_ready_1 -> user_packet_duplicator:av_st_dout_ready_0
	wire          user_packet_duplicator_av_st_dout_0_startofpacket; // user_packet_duplicator:av_st_dout_startofpacket_0 -> output_0_mux:av_st_din_startofpacket_1
	wire          user_packet_duplicator_av_st_dout_0_endofpacket;   // user_packet_duplicator:av_st_dout_endofpacket_0 -> output_0_mux:av_st_din_endofpacket_1
	wire          user_packet_duplicator_av_st_dout_1_valid;         // user_packet_duplicator:av_st_dout_valid_1 -> output_1_mux:av_st_din_valid_1
	wire   [55:0] user_packet_duplicator_av_st_dout_1_data;          // user_packet_duplicator:av_st_dout_data_1 -> output_1_mux:av_st_din_data_1
	wire          user_packet_duplicator_av_st_dout_1_ready;         // output_1_mux:av_st_din_ready_1 -> user_packet_duplicator:av_st_dout_ready_1
	wire          user_packet_duplicator_av_st_dout_1_startofpacket; // user_packet_duplicator:av_st_dout_startofpacket_1 -> output_1_mux:av_st_din_startofpacket_1
	wire          user_packet_duplicator_av_st_dout_1_endofpacket;   // user_packet_duplicator:av_st_dout_endofpacket_1 -> output_1_mux:av_st_din_endofpacket_1
	wire          video_in_resp_0_av_st_resp_valid;                  // video_in_resp_0:av_st_resp_valid -> cps_scheduler:av_st_resp_vib_0_valid
	wire   [63:0] video_in_resp_0_av_st_resp_data;                   // video_in_resp_0:av_st_resp_data -> cps_scheduler:av_st_resp_vib_0_data
	wire          video_in_resp_0_av_st_resp_ready;                  // cps_scheduler:av_st_resp_vib_0_ready -> video_in_resp_0:av_st_resp_ready
	wire          video_in_resp_0_av_st_resp_startofpacket;          // video_in_resp_0:av_st_resp_startofpacket -> cps_scheduler:av_st_resp_vib_0_startofpacket
	wire          video_in_resp_0_av_st_resp_endofpacket;            // video_in_resp_0:av_st_resp_endofpacket -> cps_scheduler:av_st_resp_vib_0_endofpacket
	wire          cps_scheduler_av_st_cmd_vib_0_valid;               // cps_scheduler:av_st_cmd_vib_0_valid -> video_in_cmd_0:av_st_cmd_valid
	wire   [63:0] cps_scheduler_av_st_cmd_vib_0_data;                // cps_scheduler:av_st_cmd_vib_0_data -> video_in_cmd_0:av_st_cmd_data
	wire          cps_scheduler_av_st_cmd_vib_0_ready;               // video_in_cmd_0:av_st_cmd_ready -> cps_scheduler:av_st_cmd_vib_0_ready
	wire          cps_scheduler_av_st_cmd_vib_0_startofpacket;       // cps_scheduler:av_st_cmd_vib_0_startofpacket -> video_in_cmd_0:av_st_cmd_startofpacket
	wire          cps_scheduler_av_st_cmd_vib_0_endofpacket;         // cps_scheduler:av_st_cmd_vib_0_endofpacket -> video_in_cmd_0:av_st_cmd_endofpacket
	wire          cps_scheduler_av_st_cmd_vob_0_valid;               // cps_scheduler:av_st_cmd_vob_0_valid -> video_out_0:av_st_cmd_valid
	wire   [63:0] cps_scheduler_av_st_cmd_vob_0_data;                // cps_scheduler:av_st_cmd_vob_0_data -> video_out_0:av_st_cmd_data
	wire          cps_scheduler_av_st_cmd_vob_0_ready;               // video_out_0:av_st_cmd_ready -> cps_scheduler:av_st_cmd_vob_0_ready
	wire          cps_scheduler_av_st_cmd_vob_0_startofpacket;       // cps_scheduler:av_st_cmd_vob_0_startofpacket -> video_out_0:av_st_cmd_startofpacket
	wire          cps_scheduler_av_st_cmd_vob_0_endofpacket;         // cps_scheduler:av_st_cmd_vob_0_endofpacket -> video_out_0:av_st_cmd_endofpacket
	wire          cps_scheduler_av_st_cmd_mux_0_valid;               // cps_scheduler:av_st_cmd_mux_0_valid -> output_0_mux:av_st_cmd_valid
	wire   [63:0] cps_scheduler_av_st_cmd_mux_0_data;                // cps_scheduler:av_st_cmd_mux_0_data -> output_0_mux:av_st_cmd_data
	wire          cps_scheduler_av_st_cmd_mux_0_ready;               // output_0_mux:av_st_cmd_ready -> cps_scheduler:av_st_cmd_mux_0_ready
	wire          cps_scheduler_av_st_cmd_mux_0_startofpacket;       // cps_scheduler:av_st_cmd_mux_0_startofpacket -> output_0_mux:av_st_cmd_startofpacket
	wire          cps_scheduler_av_st_cmd_mux_0_endofpacket;         // cps_scheduler:av_st_cmd_mux_0_endofpacket -> output_0_mux:av_st_cmd_endofpacket
	wire          cps_scheduler_av_st_cmd_vob_1_valid;               // cps_scheduler:av_st_cmd_vob_1_valid -> video_out_1:av_st_cmd_valid
	wire   [63:0] cps_scheduler_av_st_cmd_vob_1_data;                // cps_scheduler:av_st_cmd_vob_1_data -> video_out_1:av_st_cmd_data
	wire          cps_scheduler_av_st_cmd_vob_1_ready;               // video_out_1:av_st_cmd_ready -> cps_scheduler:av_st_cmd_vob_1_ready
	wire          cps_scheduler_av_st_cmd_vob_1_startofpacket;       // cps_scheduler:av_st_cmd_vob_1_startofpacket -> video_out_1:av_st_cmd_startofpacket
	wire          cps_scheduler_av_st_cmd_vob_1_endofpacket;         // cps_scheduler:av_st_cmd_vob_1_endofpacket -> video_out_1:av_st_cmd_endofpacket
	wire          cps_scheduler_av_st_cmd_mux_1_valid;               // cps_scheduler:av_st_cmd_mux_1_valid -> output_1_mux:av_st_cmd_valid
	wire   [63:0] cps_scheduler_av_st_cmd_mux_1_data;                // cps_scheduler:av_st_cmd_mux_1_data -> output_1_mux:av_st_cmd_data
	wire          cps_scheduler_av_st_cmd_mux_1_ready;               // output_1_mux:av_st_cmd_ready -> cps_scheduler:av_st_cmd_mux_1_ready
	wire          cps_scheduler_av_st_cmd_mux_1_startofpacket;       // cps_scheduler:av_st_cmd_mux_1_startofpacket -> output_1_mux:av_st_cmd_startofpacket
	wire          cps_scheduler_av_st_cmd_mux_1_endofpacket;         // cps_scheduler:av_st_cmd_mux_1_endofpacket -> output_1_mux:av_st_cmd_endofpacket
	wire  [111:0] user_packet_duplicator_av_st_dout_data;            // port fragment
	wire    [1:0] user_packet_duplicator_av_st_dout_valid;           // port fragment
	wire    [1:0] user_packet_duplicator_av_st_dout_startofpacket;   // port fragment
	wire    [1:0] user_packet_duplicator_av_st_dout_endofpacket;     // port fragment
	wire  [111:0] input_0_demux_av_st_dout_data;                     // port fragment
	wire    [1:0] input_0_demux_av_st_dout_valid;                    // port fragment
	wire    [1:0] input_0_demux_av_st_dout_startofpacket;            // port fragment
	wire    [1:0] input_0_demux_av_st_dout_endofpacket;              // port fragment
	wire    [1:0] output_0_mux_av_st_din_ready;                      // port fragment
	wire    [1:0] output_1_mux_av_st_din_ready;                      // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (BITS_PER_SYMBOL != 8)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					bits_per_symbol_check ( .error(1'b1) );
		end
		if (USER_PACKET_SUPPORT != "PASSTHROUGH")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					user_packet_support_check ( .error(1'b1) );
		end
	endgenerate

	DE10_Standard_Qsys_alt_vip_cl_cps_1_cps_core #(
		.BITS_PER_SYMBOL                       (8),
		.NUMBER_OF_INPUTS                      (1),
		.NUMBER_OF_OUTPUTS                     (2),
		.INPUT_0_NUMBER_OF_COLOR_PLANES        (3),
		.INPUT_0_COLOR_PLANES_ARE_IN_PARALLEL  (1),
		.INPUT_0_PIXELS_IN_PARALLEL            (1),
		.INPUT_0_TWO_PIXELS_PATTERN            (0),
		.INPUT_1_NUMBER_OF_COLOR_PLANES        (3),
		.INPUT_1_COLOR_PLANES_ARE_IN_PARALLEL  (1),
		.INPUT_1_PIXELS_IN_PARALLEL            (1),
		.INPUT_1_TWO_PIXELS_PATTERN            (0),
		.OUTPUT_0_NUMBER_OF_COLOR_PLANES       (3),
		.OUTPUT_0_COLOR_PLANES_ARE_IN_PARALLEL (1),
		.OUTPUT_0_PIXELS_IN_PARALLEL           (1),
		.OUTPUT_0_TWO_PIXELS_PATTERN           (0),
		.OUTPUT_1_NUMBER_OF_COLOR_PLANES       (3),
		.OUTPUT_1_COLOR_PLANES_ARE_IN_PARALLEL (1),
		.OUTPUT_1_PIXELS_IN_PARALLEL           (1),
		.OUTPUT_1_TWO_PIXELS_PATTERN           (0),
		.PIPELINE_READY                        (1),
		.NUMBER_ROUTING_ENGINES                (1),
		.SRC_WIDTH                             (8),
		.DST_WIDTH                             (8),
		.CONTEXT_WIDTH                         (8),
		.TASK_WIDTH                            (8)
	) cps_core (
		.clock                      (main_clock),                               //   main_clock.clk
		.reset                      (main_reset),                               //   main_reset.reset
		.av_st_din_0_valid          (input_0_demux_av_st_dout_0_valid),         //  av_st_din_0.valid
		.av_st_din_0_startofpacket  (input_0_demux_av_st_dout_0_startofpacket), //             .startofpacket
		.av_st_din_0_endofpacket    (input_0_demux_av_st_dout_0_endofpacket),   //             .endofpacket
		.av_st_din_0_data           (input_0_demux_av_st_dout_0_data),          //             .data
		.av_st_din_0_ready          (input_0_demux_av_st_dout_0_ready),         //             .ready
		.av_st_dout_0_valid         (cps_core_av_st_dout_0_valid),              // av_st_dout_0.valid
		.av_st_dout_0_startofpacket (cps_core_av_st_dout_0_startofpacket),      //             .startofpacket
		.av_st_dout_0_endofpacket   (cps_core_av_st_dout_0_endofpacket),        //             .endofpacket
		.av_st_dout_0_data          (cps_core_av_st_dout_0_data),               //             .data
		.av_st_dout_0_ready         (cps_core_av_st_dout_0_ready),              //             .ready
		.av_st_dout_1_valid         (cps_core_av_st_dout_1_valid),              // av_st_dout_1.valid
		.av_st_dout_1_startofpacket (cps_core_av_st_dout_1_startofpacket),      //             .startofpacket
		.av_st_dout_1_endofpacket   (cps_core_av_st_dout_1_endofpacket),        //             .endofpacket
		.av_st_dout_1_data          (cps_core_av_st_dout_1_data),               //             .data
		.av_st_dout_1_ready         (cps_core_av_st_dout_1_ready)               //             .ready
	);

	alt_vip_cps_scheduler #(
		.NUMBER_OF_INPUTS       (1),
		.NUMBER_OF_OUTPUTS      (2),
		.OUTPUT_0_WIDTH_MOD     (0),
		.OUTPUT_1_WIDTH_MOD     (0),
		.LINE_SPLITTING_ALLOWED (0),
		.USER_PACKET_SUPPORT    ("PASSTHROUGH"),
		.USER_PKT_0_TO_0        (1),
		.USER_PKT_1_TO_0        (0),
		.USER_PKT_0_TO_1        (1),
		.USER_PKT_1_TO_1        (0),
		.PIPELINE_READY         (0),
		.SRC_WIDTH              (8),
		.DST_WIDTH              (8),
		.CONTEXT_WIDTH          (8),
		.TASK_WIDTH             (8)
	) cps_scheduler (
		.clock                          (main_clock),                                  //       main_clock.clk
		.reset                          (main_reset),                                  //       main_reset.reset
		.av_st_resp_vib_0_valid         (video_in_resp_0_av_st_resp_valid),            // av_st_resp_vib_0.valid
		.av_st_resp_vib_0_startofpacket (video_in_resp_0_av_st_resp_startofpacket),    //                 .startofpacket
		.av_st_resp_vib_0_endofpacket   (video_in_resp_0_av_st_resp_endofpacket),      //                 .endofpacket
		.av_st_resp_vib_0_data          (video_in_resp_0_av_st_resp_data),             //                 .data
		.av_st_resp_vib_0_ready         (video_in_resp_0_av_st_resp_ready),            //                 .ready
		.av_st_cmd_vib_0_valid          (cps_scheduler_av_st_cmd_vib_0_valid),         //  av_st_cmd_vib_0.valid
		.av_st_cmd_vib_0_startofpacket  (cps_scheduler_av_st_cmd_vib_0_startofpacket), //                 .startofpacket
		.av_st_cmd_vib_0_endofpacket    (cps_scheduler_av_st_cmd_vib_0_endofpacket),   //                 .endofpacket
		.av_st_cmd_vib_0_data           (cps_scheduler_av_st_cmd_vib_0_data),          //                 .data
		.av_st_cmd_vib_0_ready          (cps_scheduler_av_st_cmd_vib_0_ready),         //                 .ready
		.av_st_cmd_vob_0_valid          (cps_scheduler_av_st_cmd_vob_0_valid),         //  av_st_cmd_vob_0.valid
		.av_st_cmd_vob_0_startofpacket  (cps_scheduler_av_st_cmd_vob_0_startofpacket), //                 .startofpacket
		.av_st_cmd_vob_0_endofpacket    (cps_scheduler_av_st_cmd_vob_0_endofpacket),   //                 .endofpacket
		.av_st_cmd_vob_0_data           (cps_scheduler_av_st_cmd_vob_0_data),          //                 .data
		.av_st_cmd_vob_0_ready          (cps_scheduler_av_st_cmd_vob_0_ready),         //                 .ready
		.av_st_cmd_mux_0_valid          (cps_scheduler_av_st_cmd_mux_0_valid),         //  av_st_cmd_mux_0.valid
		.av_st_cmd_mux_0_startofpacket  (cps_scheduler_av_st_cmd_mux_0_startofpacket), //                 .startofpacket
		.av_st_cmd_mux_0_endofpacket    (cps_scheduler_av_st_cmd_mux_0_endofpacket),   //                 .endofpacket
		.av_st_cmd_mux_0_data           (cps_scheduler_av_st_cmd_mux_0_data),          //                 .data
		.av_st_cmd_mux_0_ready          (cps_scheduler_av_st_cmd_mux_0_ready),         //                 .ready
		.av_st_cmd_vob_1_valid          (cps_scheduler_av_st_cmd_vob_1_valid),         //  av_st_cmd_vob_1.valid
		.av_st_cmd_vob_1_startofpacket  (cps_scheduler_av_st_cmd_vob_1_startofpacket), //                 .startofpacket
		.av_st_cmd_vob_1_endofpacket    (cps_scheduler_av_st_cmd_vob_1_endofpacket),   //                 .endofpacket
		.av_st_cmd_vob_1_data           (cps_scheduler_av_st_cmd_vob_1_data),          //                 .data
		.av_st_cmd_vob_1_ready          (cps_scheduler_av_st_cmd_vob_1_ready),         //                 .ready
		.av_st_cmd_mux_1_valid          (cps_scheduler_av_st_cmd_mux_1_valid),         //  av_st_cmd_mux_1.valid
		.av_st_cmd_mux_1_startofpacket  (cps_scheduler_av_st_cmd_mux_1_startofpacket), //                 .startofpacket
		.av_st_cmd_mux_1_endofpacket    (cps_scheduler_av_st_cmd_mux_1_endofpacket),   //                 .endofpacket
		.av_st_cmd_mux_1_data           (cps_scheduler_av_st_cmd_mux_1_data),          //                 .data
		.av_st_cmd_mux_1_ready          (cps_scheduler_av_st_cmd_mux_1_ready)          //                 .ready
	);

	alt_vip_packet_duplicator #(
		.DUPLICATOR_FANOUT    (2),
		.ALWAYS_DUPLICATE_ALL (0),
		.USE_COMMAND          (0),
		.DST_ID_0             (0),
		.DST_ID_1             (0),
		.DST_ID_2             (0),
		.DST_ID_3             (0),
		.DST_ID_4             (0),
		.DST_ID_5             (0),
		.DST_ID_6             (0),
		.DST_ID_7             (0),
		.DST_ID_8             (0),
		.DST_ID_9             (0),
		.DST_ID_10            (0),
		.DST_ID_11            (0),
		.DST_ID_12            (0),
		.DST_ID_13            (0),
		.DST_ID_14            (0),
		.DST_ID_15            (0),
		.DEPTH                (0),
		.REGISTER_OUTPUT      (1),
		.PIPELINE_READY       (0),
		.NAME                 ("undefined"),
		.SRC_WIDTH            (8),
		.DST_WIDTH            (8),
		.CONTEXT_WIDTH        (8),
		.TASK_WIDTH           (8),
		.DATA_WIDTH_INT       (24),
		.USER_WIDTH_INT       (0)
	) user_packet_duplicator (
		.clock                    (main_clock),                                                                                              //   main_clock.clk
		.reset                    (main_reset),                                                                                              //   main_reset.reset
		.av_st_din_valid          (input_0_demux_av_st_dout_1_valid),                                                                        //    av_st_din.valid
		.av_st_din_startofpacket  (input_0_demux_av_st_dout_1_startofpacket),                                                                //             .startofpacket
		.av_st_din_endofpacket    (input_0_demux_av_st_dout_1_endofpacket),                                                                  //             .endofpacket
		.av_st_din_data           (input_0_demux_av_st_dout_1_data),                                                                         //             .data
		.av_st_din_ready          (input_0_demux_av_st_dout_1_ready),                                                                        //             .ready
		.av_st_dout_valid         ({user_packet_duplicator_av_st_dout_valid[1],user_packet_duplicator_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({user_packet_duplicator_av_st_dout_startofpacket[1],user_packet_duplicator_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({user_packet_duplicator_av_st_dout_endofpacket[1],user_packet_duplicator_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({user_packet_duplicator_av_st_dout_data[111:56],user_packet_duplicator_av_st_dout_data[55:0]}),           //             .data
		.av_st_dout_ready         ({user_packet_duplicator_av_st_dout_1_ready,user_packet_duplicator_av_st_dout_0_ready})                    //             .ready
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (56),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_0_sc_fifo (
		.clk               (main_clock),                              //       clk.clk
		.reset             (main_reset),                              // clk_reset.reset
		.in_data           (video_in_cmd_0_av_st_dout_data),          //        in.data
		.in_valid          (video_in_cmd_0_av_st_dout_valid),         //          .valid
		.in_ready          (video_in_cmd_0_av_st_dout_ready),         //          .ready
		.in_startofpacket  (video_in_cmd_0_av_st_dout_startofpacket), //          .startofpacket
		.in_endofpacket    (video_in_cmd_0_av_st_dout_endofpacket),   //          .endofpacket
		.out_data          (input_0_sc_fifo_out_data),                //       out.data
		.out_valid         (input_0_sc_fifo_out_valid),               //          .valid
		.out_ready         (input_0_sc_fifo_out_ready),               //          .ready
		.out_startofpacket (input_0_sc_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (input_0_sc_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (56),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) output_0_sc_fifo (
		.clk               (main_clock),                            //       clk.clk
		.reset             (main_reset),                            // clk_reset.reset
		.in_data           (output_0_mux_av_st_dout_data),          //        in.data
		.in_valid          (output_0_mux_av_st_dout_valid),         //          .valid
		.in_ready          (output_0_mux_av_st_dout_ready),         //          .ready
		.in_startofpacket  (output_0_mux_av_st_dout_startofpacket), //          .startofpacket
		.in_endofpacket    (output_0_mux_av_st_dout_endofpacket),   //          .endofpacket
		.out_data          (output_0_sc_fifo_out_data),             //       out.data
		.out_valid         (output_0_sc_fifo_out_valid),            //          .valid
		.out_ready         (output_0_sc_fifo_out_ready),            //          .ready
		.out_startofpacket (output_0_sc_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (output_0_sc_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (56),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) output_1_sc_fifo (
		.clk               (main_clock),                            //       clk.clk
		.reset             (main_reset),                            // clk_reset.reset
		.in_data           (output_1_mux_av_st_dout_data),          //        in.data
		.in_valid          (output_1_mux_av_st_dout_valid),         //          .valid
		.in_ready          (output_1_mux_av_st_dout_ready),         //          .ready
		.in_startofpacket  (output_1_mux_av_st_dout_startofpacket), //          .startofpacket
		.in_endofpacket    (output_1_mux_av_st_dout_endofpacket),   //          .endofpacket
		.out_data          (output_1_sc_fifo_out_data),             //       out.data
		.out_valid         (output_1_sc_fifo_out_valid),            //          .valid
		.out_ready         (output_1_sc_fifo_out_ready),            //          .ready
		.out_startofpacket (output_1_sc_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (output_1_sc_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                 // (terminated)
		.csr_read          (1'b0),                                  // (terminated)
		.csr_write         (1'b0),                                  // (terminated)
		.csr_readdata      (),                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),  // (terminated)
		.almost_full_data  (),                                      // (terminated)
		.almost_empty_data (),                                      // (terminated)
		.in_empty          (1'b0),                                  // (terminated)
		.out_empty         (),                                      // (terminated)
		.in_error          (1'b0),                                  // (terminated)
		.out_error         (),                                      // (terminated)
		.in_channel        (1'b0),                                  // (terminated)
		.out_channel       ()                                       // (terminated)
	);

	alt_vip_video_input_bridge_resp #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.DEFAULT_LINE_LENGTH          (1920),
		.VIB_MODE                     ("LITE"),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.MAX_WIDTH                    (1920),
		.MAX_HEIGHT                   (1080),
		.ENABLE_RESOLUTION_CHECK      (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.PIPELINE_READY               (0),
		.RESP_SRC_ADDRESS             (0),
		.RESP_DST_ADDRESS             (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in_resp_0 (
		.clock                       (main_clock),                               //    main_clock.clk
		.reset                       (main_reset),                               //    main_reset.reset
		.av_st_vid_din_data          (din_0_data),                               // av_st_vid_din.data
		.av_st_vid_din_valid         (din_0_valid),                              //              .valid
		.av_st_vid_din_startofpacket (din_0_startofpacket),                      //              .startofpacket
		.av_st_vid_din_endofpacket   (din_0_endofpacket),                        //              .endofpacket
		.av_st_vid_din_ready         (din_0_ready),                              //              .ready
		.av_st_resp_valid            (video_in_resp_0_av_st_resp_valid),         //    av_st_resp.valid
		.av_st_resp_startofpacket    (video_in_resp_0_av_st_resp_startofpacket), //              .startofpacket
		.av_st_resp_endofpacket      (video_in_resp_0_av_st_resp_endofpacket),   //              .endofpacket
		.av_st_resp_data             (video_in_resp_0_av_st_resp_data),          //              .data
		.av_st_resp_ready            (video_in_resp_0_av_st_resp_ready),         //              .ready
		.av_st_dout_valid            (video_in_resp_0_av_st_dout_valid),         //    av_st_dout.valid
		.av_st_dout_startofpacket    (video_in_resp_0_av_st_dout_startofpacket), //              .startofpacket
		.av_st_dout_endofpacket      (video_in_resp_0_av_st_dout_endofpacket),   //              .endofpacket
		.av_st_dout_data             (video_in_resp_0_av_st_dout_data),          //              .data
		.av_st_dout_ready            (video_in_resp_0_av_st_dout_ready)          //              .ready
	);

	alt_vip_video_input_bridge_cmd #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.PIPELINE_READY               (0),
		.DATA_SRC_ADDRESS             (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8)
	) video_in_cmd_0 (
		.clock                    (main_clock),                                  // main_clock.clk
		.reset                    (main_reset),                                  // main_reset.reset
		.av_st_cmd_valid          (cps_scheduler_av_st_cmd_vib_0_valid),         //  av_st_cmd.valid
		.av_st_cmd_startofpacket  (cps_scheduler_av_st_cmd_vib_0_startofpacket), //           .startofpacket
		.av_st_cmd_endofpacket    (cps_scheduler_av_st_cmd_vib_0_endofpacket),   //           .endofpacket
		.av_st_cmd_data           (cps_scheduler_av_st_cmd_vib_0_data),          //           .data
		.av_st_cmd_ready          (cps_scheduler_av_st_cmd_vib_0_ready),         //           .ready
		.av_st_din_valid          (video_in_resp_0_av_st_dout_valid),            //  av_st_din.valid
		.av_st_din_startofpacket  (video_in_resp_0_av_st_dout_startofpacket),    //           .startofpacket
		.av_st_din_endofpacket    (video_in_resp_0_av_st_dout_endofpacket),      //           .endofpacket
		.av_st_din_data           (video_in_resp_0_av_st_dout_data),             //           .data
		.av_st_din_ready          (video_in_resp_0_av_st_dout_ready),            //           .ready
		.av_st_dout_valid         (video_in_cmd_0_av_st_dout_valid),             // av_st_dout.valid
		.av_st_dout_startofpacket (video_in_cmd_0_av_st_dout_startofpacket),     //           .startofpacket
		.av_st_dout_endofpacket   (video_in_cmd_0_av_st_dout_endofpacket),       //           .endofpacket
		.av_st_dout_data          (video_in_cmd_0_av_st_dout_data),              //           .data
		.av_st_dout_ready         (video_in_cmd_0_av_st_dout_ready)              //           .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.NO_CONCATENATION             (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) video_out_0 (
		.clock                        (main_clock),                                  //     main_clock.clk
		.reset                        (main_reset),                                  //     main_reset.reset
		.av_st_cmd_valid              (cps_scheduler_av_st_cmd_vob_0_valid),         //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (cps_scheduler_av_st_cmd_vob_0_startofpacket), //               .startofpacket
		.av_st_cmd_endofpacket        (cps_scheduler_av_st_cmd_vob_0_endofpacket),   //               .endofpacket
		.av_st_cmd_data               (cps_scheduler_av_st_cmd_vob_0_data),          //               .data
		.av_st_cmd_ready              (cps_scheduler_av_st_cmd_vob_0_ready),         //               .ready
		.av_st_din_valid              (output_0_sc_fifo_out_valid),                  //      av_st_din.valid
		.av_st_din_startofpacket      (output_0_sc_fifo_out_startofpacket),          //               .startofpacket
		.av_st_din_endofpacket        (output_0_sc_fifo_out_endofpacket),            //               .endofpacket
		.av_st_din_data               (output_0_sc_fifo_out_data),                   //               .data
		.av_st_din_ready              (output_0_sc_fifo_out_ready),                  //               .ready
		.av_st_vid_dout_data          (dout_0_data),                                 // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_0_valid),                                //               .valid
		.av_st_vid_dout_startofpacket (dout_0_startofpacket),                        //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_0_endofpacket),                          //               .endofpacket
		.av_st_vid_dout_ready         (dout_0_ready)                                 //               .ready
	);

	alt_vip_video_output_bridge #(
		.BITS_PER_SYMBOL              (8),
		.NUMBER_OF_COLOR_PLANES       (3),
		.COLOR_PLANES_ARE_IN_PARALLEL (1),
		.PIXELS_IN_PARALLEL           (1),
		.VIDEO_PROTOCOL_NO            (1),
		.READY_LATENCY_1              (1),
		.SOP_PRE_ALIGNED              (0),
		.MULTI_CONTEXT_SUPPORT        (0),
		.NO_CONCATENATION             (0),
		.PIPELINE_READY               (0),
		.SRC_WIDTH                    (8),
		.DST_WIDTH                    (8),
		.CONTEXT_WIDTH                (8),
		.TASK_WIDTH                   (8),
		.LOW_LATENCY_COMMAND_MODE     (0)
	) video_out_1 (
		.clock                        (main_clock),                                  //     main_clock.clk
		.reset                        (main_reset),                                  //     main_reset.reset
		.av_st_cmd_valid              (cps_scheduler_av_st_cmd_vob_1_valid),         //      av_st_cmd.valid
		.av_st_cmd_startofpacket      (cps_scheduler_av_st_cmd_vob_1_startofpacket), //               .startofpacket
		.av_st_cmd_endofpacket        (cps_scheduler_av_st_cmd_vob_1_endofpacket),   //               .endofpacket
		.av_st_cmd_data               (cps_scheduler_av_st_cmd_vob_1_data),          //               .data
		.av_st_cmd_ready              (cps_scheduler_av_st_cmd_vob_1_ready),         //               .ready
		.av_st_din_valid              (output_1_sc_fifo_out_valid),                  //      av_st_din.valid
		.av_st_din_startofpacket      (output_1_sc_fifo_out_startofpacket),          //               .startofpacket
		.av_st_din_endofpacket        (output_1_sc_fifo_out_endofpacket),            //               .endofpacket
		.av_st_din_data               (output_1_sc_fifo_out_data),                   //               .data
		.av_st_din_ready              (output_1_sc_fifo_out_ready),                  //               .ready
		.av_st_vid_dout_data          (dout_1_data),                                 // av_st_vid_dout.data
		.av_st_vid_dout_valid         (dout_1_valid),                                //               .valid
		.av_st_vid_dout_startofpacket (dout_1_startofpacket),                        //               .startofpacket
		.av_st_vid_dout_endofpacket   (dout_1_endofpacket),                          //               .endofpacket
		.av_st_vid_dout_ready         (dout_1_ready)                                 //               .ready
	);

	alt_vip_packet_demux #(
		.NUM_OUTPUTS        (2),
		.CLIP_ADDRESS_BITS  (0),
		.SHIFT_ADDRESS_BITS (1),
		.REGISTER_OUTPUT    (1),
		.PIPELINE_READY     (0),
		.SRC_WIDTH          (8),
		.DST_WIDTH          (8),
		.CONTEXT_WIDTH      (8),
		.TASK_WIDTH         (8),
		.DATA_WIDTH_INT     (24),
		.USER_WIDTH_INT     (0)
	) input_0_demux (
		.clock                    (main_clock),                                                                            //   main_clock.clk
		.reset                    (main_reset),                                                                            //   main_reset.reset
		.av_st_din_valid          (input_0_sc_fifo_out_valid),                                                             //    av_st_din.valid
		.av_st_din_startofpacket  (input_0_sc_fifo_out_startofpacket),                                                     //             .startofpacket
		.av_st_din_endofpacket    (input_0_sc_fifo_out_endofpacket),                                                       //             .endofpacket
		.av_st_din_data           (input_0_sc_fifo_out_data),                                                              //             .data
		.av_st_din_ready          (input_0_sc_fifo_out_ready),                                                             //             .ready
		.av_st_dout_valid         ({input_0_demux_av_st_dout_valid[1],input_0_demux_av_st_dout_valid[0]}),                 // av_st_dout_0.valid
		.av_st_dout_startofpacket ({input_0_demux_av_st_dout_startofpacket[1],input_0_demux_av_st_dout_startofpacket[0]}), //             .startofpacket
		.av_st_dout_endofpacket   ({input_0_demux_av_st_dout_endofpacket[1],input_0_demux_av_st_dout_endofpacket[0]}),     //             .endofpacket
		.av_st_dout_data          ({input_0_demux_av_st_dout_data[111:56],input_0_demux_av_st_dout_data[55:0]}),           //             .data
		.av_st_dout_ready         ({input_0_demux_av_st_dout_1_ready,input_0_demux_av_st_dout_0_ready})                    //             .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (2),
		.REGISTER_OUTPUT (1),
		.PIPELINE_READY  (0),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (24),
		.USER_WIDTH_INT  (0)
	) output_0_mux (
		.clock                    (main_clock),                                                                              //  main_clock.clk
		.reset                    (main_reset),                                                                              //  main_reset.reset
		.av_st_cmd_valid          (cps_scheduler_av_st_cmd_mux_0_valid),                                                     //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (cps_scheduler_av_st_cmd_mux_0_startofpacket),                                             //            .startofpacket
		.av_st_cmd_endofpacket    (cps_scheduler_av_st_cmd_mux_0_endofpacket),                                               //            .endofpacket
		.av_st_cmd_data           (cps_scheduler_av_st_cmd_mux_0_data),                                                      //            .data
		.av_st_cmd_ready          (cps_scheduler_av_st_cmd_mux_0_ready),                                                     //            .ready
		.av_st_din_valid          ({user_packet_duplicator_av_st_dout_0_valid,cps_core_av_st_dout_0_valid}),                 // av_st_din_0.valid
		.av_st_din_startofpacket  ({user_packet_duplicator_av_st_dout_0_startofpacket,cps_core_av_st_dout_0_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({user_packet_duplicator_av_st_dout_0_endofpacket,cps_core_av_st_dout_0_endofpacket}),     //            .endofpacket
		.av_st_din_data           ({user_packet_duplicator_av_st_dout_0_data[55:0],cps_core_av_st_dout_0_data[55:0]}),       //            .data
		.av_st_din_ready          ({output_0_mux_av_st_din_ready[1],output_0_mux_av_st_din_ready[0]}),                       //            .ready
		.av_st_dout_valid         (output_0_mux_av_st_dout_valid),                                                           //  av_st_dout.valid
		.av_st_dout_startofpacket (output_0_mux_av_st_dout_startofpacket),                                                   //            .startofpacket
		.av_st_dout_endofpacket   (output_0_mux_av_st_dout_endofpacket),                                                     //            .endofpacket
		.av_st_dout_data          (output_0_mux_av_st_dout_data),                                                            //            .data
		.av_st_dout_ready         (output_0_mux_av_st_dout_ready)                                                            //            .ready
	);

	alt_vip_packet_mux #(
		.NUM_INPUTS      (2),
		.REGISTER_OUTPUT (1),
		.PIPELINE_READY  (0),
		.NAME            ("undefined"),
		.SRC_WIDTH       (8),
		.DST_WIDTH       (8),
		.CONTEXT_WIDTH   (8),
		.TASK_WIDTH      (8),
		.DATA_WIDTH_INT  (24),
		.USER_WIDTH_INT  (0)
	) output_1_mux (
		.clock                    (main_clock),                                                                              //  main_clock.clk
		.reset                    (main_reset),                                                                              //  main_reset.reset
		.av_st_cmd_valid          (cps_scheduler_av_st_cmd_mux_1_valid),                                                     //   av_st_cmd.valid
		.av_st_cmd_startofpacket  (cps_scheduler_av_st_cmd_mux_1_startofpacket),                                             //            .startofpacket
		.av_st_cmd_endofpacket    (cps_scheduler_av_st_cmd_mux_1_endofpacket),                                               //            .endofpacket
		.av_st_cmd_data           (cps_scheduler_av_st_cmd_mux_1_data),                                                      //            .data
		.av_st_cmd_ready          (cps_scheduler_av_st_cmd_mux_1_ready),                                                     //            .ready
		.av_st_din_valid          ({user_packet_duplicator_av_st_dout_1_valid,cps_core_av_st_dout_1_valid}),                 // av_st_din_0.valid
		.av_st_din_startofpacket  ({user_packet_duplicator_av_st_dout_1_startofpacket,cps_core_av_st_dout_1_startofpacket}), //            .startofpacket
		.av_st_din_endofpacket    ({user_packet_duplicator_av_st_dout_1_endofpacket,cps_core_av_st_dout_1_endofpacket}),     //            .endofpacket
		.av_st_din_data           ({user_packet_duplicator_av_st_dout_1_data[55:0],cps_core_av_st_dout_1_data[55:0]}),       //            .data
		.av_st_din_ready          ({output_1_mux_av_st_din_ready[1],output_1_mux_av_st_din_ready[0]}),                       //            .ready
		.av_st_dout_valid         (output_1_mux_av_st_dout_valid),                                                           //  av_st_dout.valid
		.av_st_dout_startofpacket (output_1_mux_av_st_dout_startofpacket),                                                   //            .startofpacket
		.av_st_dout_endofpacket   (output_1_mux_av_st_dout_endofpacket),                                                     //            .endofpacket
		.av_st_dout_data          (output_1_mux_av_st_dout_data),                                                            //            .data
		.av_st_dout_ready         (output_1_mux_av_st_dout_ready)                                                            //            .ready
	);

	assign input_0_demux_av_st_dout_0_valid = { input_0_demux_av_st_dout_valid[0] };

	assign input_0_demux_av_st_dout_0_data = { input_0_demux_av_st_dout_data[55:0] };

	assign input_0_demux_av_st_dout_0_startofpacket = { input_0_demux_av_st_dout_startofpacket[0] };

	assign input_0_demux_av_st_dout_0_endofpacket = { input_0_demux_av_st_dout_endofpacket[0] };

	assign cps_core_av_st_dout_0_ready = { output_0_mux_av_st_din_ready[0] };

	assign cps_core_av_st_dout_1_ready = { output_1_mux_av_st_din_ready[0] };

	assign input_0_demux_av_st_dout_1_valid = { input_0_demux_av_st_dout_valid[1] };

	assign input_0_demux_av_st_dout_1_data = { input_0_demux_av_st_dout_data[111:56] };

	assign input_0_demux_av_st_dout_1_startofpacket = { input_0_demux_av_st_dout_startofpacket[1] };

	assign input_0_demux_av_st_dout_1_endofpacket = { input_0_demux_av_st_dout_endofpacket[1] };

	assign user_packet_duplicator_av_st_dout_0_valid = { user_packet_duplicator_av_st_dout_valid[0] };

	assign user_packet_duplicator_av_st_dout_0_data = { user_packet_duplicator_av_st_dout_data[55:0] };

	assign user_packet_duplicator_av_st_dout_0_ready = { output_0_mux_av_st_din_ready[1] };

	assign user_packet_duplicator_av_st_dout_0_startofpacket = { user_packet_duplicator_av_st_dout_startofpacket[0] };

	assign user_packet_duplicator_av_st_dout_0_endofpacket = { user_packet_duplicator_av_st_dout_endofpacket[0] };

	assign user_packet_duplicator_av_st_dout_1_valid = { user_packet_duplicator_av_st_dout_valid[1] };

	assign user_packet_duplicator_av_st_dout_1_data = { user_packet_duplicator_av_st_dout_data[111:56] };

	assign user_packet_duplicator_av_st_dout_1_ready = { output_1_mux_av_st_din_ready[1] };

	assign user_packet_duplicator_av_st_dout_1_startofpacket = { user_packet_duplicator_av_st_dout_startofpacket[1] };

	assign user_packet_duplicator_av_st_dout_1_endofpacket = { user_packet_duplicator_av_st_dout_endofpacket[1] };

endmodule
