
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Camera(
//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,



	//////////// HSMC, HSMC connect to MTLC2 -Multi-Touch/LCD/Camera //////////
	inout 		          		CAMERA_I2C_SCL,
	inout 		          		CAMERA_I2C_SDA,
	output		          		CAMERA_PWDN_n,
	
	output		     [7:0]		LCD_B,
	output		          		LCD_DCLK,
	output		          		LCD_DE,
	output		          		LCD_DIM,
	output		          		LCD_DITH,
	output		     [7:0]		LCD_G,
	output		          		LCD_HSD,
	output		          		LCD_MODE,
	output		          		LCD_POWER_CTL,
	output		          		LCD_RSTB,
	output		     [7:0]		LCD_R,
	output		          		LCD_SHLR,
	output		          		LCD_UPDN,
	output		          		LCD_VSD,
	
	
	output		          		LSENSOR_ADDR_SEL,
	input 		          		LSENSOR_INT,
	inout 		          		LSENSOR_SCL,
	inout 		          		LSENSOR_SDA,
	
	output		          		MIPI_CS_n,
	inout 		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	output		          		MIPI_MCLK,
	input 		          		MIPI_PIXEL_CLK,
	input 		    [13:0]		MIPI_PIXEL_D,
	input 		          		MIPI_PIXEL_HS,
	input 		          		MIPI_PIXEL_VS,
	output		          		MIPI_REFCLK,
	output		          		MIPI_RESET_n,
	
	output		          		MPU_AD0_SDO,
	output		          		MPU_CS_n,
	output		          		MPU_FSYNC,
	input 		          		MPU_INT,
	inout 		          		MPU_SCL_SCLK,
	inout 		          		MPU_SDA_SDI,
	
	inout 		          		TOUCH_I2C_SCL,
	inout 		          		TOUCH_I2C_SDA,
	input 		          		TOUCH_INT_n
);



//=============================================================================
// REG/WIRE declarations
//=============================================================================
	//////////// VGA //////////
wire 	[7:0] VGA_B;
wire 	      VGA_CLK;
wire 	[7:0] VGA_G;
wire 	      VGA_HS;
wire 	[7:0] VGA_R;
wire 		   VGA_VS;
wire        READ_Request ;
wire 	[7:0] BLUE;
wire 	[7:0] GREEN;
wire 	[7:0] RED;
wire        RESET_N  ; 
wire        RESET_N_DELAY  ; 

wire        I2C_RELEASE ;  
wire        CAMERA_I2C_SCL_MIPI ; 
wire        CAMERA_I2C_SCL_AF;
wire        CAMERA_MIPI_RELAESE ;
wire        MIPI_BRIDGE_RELEASE ;  
wire        VCM_RELAESE ; 
wire        AUTO_FOC ;
wire        VGA_CK_HZ ;
wire        D8M_REF_HZ;
wire        D8M_PIX_HZ;
wire [9:0]  RD_DATA ; 
wire			SDRAM_CTRL_CLK;

wire        DLY_RST_0	;	
wire        DLY_RST_1	;
wire        DLY_RST_2	;
wire 	[12:0]V_Cont  ; 
wire 	[12:0]H_Cont ; 

//=============================================================================
// Structural coding
//=============================================================================

//--No use HEX 
assign HEX2           = 7'h7F;
assign HEX3           = 7'h7F;
assign HEX4           = 7'h7F;
assign HEX5           = 7'h7F;


//--MTLC2 bus
assign {LCD_R,LCD_G,LCD_B} = { VGA_R ,VGA_G, VGA_B};
assign LCD_DCLK            =  VGA_CLK;
assign LCD_HSD             =  VGA_HS;
assign LCD_VSD             =  VGA_VS;
assign LCD_DE              =  READ_Request ; 
	
assign LCD_MODE      = 1'b0;  //HSD/VSD mode
assign LCD_RSTB      = 1'b1;  
assign LCD_DIM       = 1'b1;
assign LCD_POWER_CTL = 1'b1;
assign LCD_SHLR  	   = 1'b1;
assign LCD_UPDN 	   = 1'b0;


//------ MIPI BRIGE & CAMERA RESET  --
assign CAMERA_PWDN_n  = 1; 
assign MIPI_CS_n      = 0 ; 
assign MIPI_RESET_n   = RESET_N ;


//------ CAMERA MODULE I2C SWITCH  --
assign I2C_RELEASE    =  CAMERA_MIPI_RELAESE & MIPI_BRIDGE_RELEASE; 
assign CAMERA_I2C_SCL = ( I2C_RELEASE  )?  CAMERA_I2C_SCL_AF  : CAMERA_I2C_SCL_MIPI ;   

//-- RESET  --
RESET_DELAY  dl(
           .RESET_N      ( KEY[0] ) ,
           .CLK          ( CLOCK3_50) , 
           .READY0       ( RESET_N),
			  .READY1       ( RESET_N_DELAY ) 
); 
  
//------MIPI-AUDIO-VGA REF CLOCK
MIPI_PLL pll_ref(
	       .refclk    ( CLOCK_50),
	       .rst       ( 0 ),
	       .outclk_0  ( MIPI_REFCLK ),  //20M
	       .outclk_1  ( VGA_CLK  ),     //33.33MHZ
		    .outclk_4  ( ) 
			 		
);

SDRAM_PLL  PLL2(
		.refclk (CLOCK2_50),   
		.rst     (0),      
		.outclk_1(DRAM_CLK       ),
		.outclk_0(SDRAM_CTRL_CLK ), 
		.locked  () 
	);


 //------ MIPI BRIGE & CAMERA SETTING  --   
MIPI_BRIDGE_CAMERA_Config    cfin(
          .RESET_N           ( DLY_RST_0 ) ,
          .CLK_50            ( CLOCK_50 ), 
          .MIPI_I2C_SCL      ( MIPI_I2C_SCL ), 
          .MIPI_I2C_SDA      ( MIPI_I2C_SDA ), 
          .MIPI_I2C_RELEASE  ( MIPI_BRIDGE_RELEASE ),  
          .CAMERA_I2C_SCL    ( CAMERA_I2C_SCL_MIPI ),
          .CAMERA_I2C_SDA    ( CAMERA_I2C_SDA ),
          .CAMERA_I2C_RELAESE( CAMERA_MIPI_RELAESE ),
			 .VCM_RELAESE       ( VCM_RELAESE )
 );
//------AOTO FOCUS ENABLE  --
AUTO_FOCUS_ON  u9( 
          .CLK_50      ( CLOCK_50 ), 
          .I2C_RELEASE ( I2C_RELEASE ), 
          .AUTO_FOC    ( AUTO_FOC )
               ) ; 


 //------AOTO FOCUS ADJ  --
FOCUS_ADJ adl(
          .CLK_50        ( CLOCK_50) , 
          .RESET_N       ( I2C_RELEASE ), 

          .RESET_SUB_N   ( I2C_RELEASE ), 
          .AUTO_FOC      ( KEY[3] & AUTO_FOC ),
          .SW_Y          ( 0 ),
          .SW_H_FREQ     ( 0 ),   
          .SW_FUC_LINE   ( SW[3] ),   
          .SW_FUC_ALL_CEN( SW[3] ),   
          .VIDEO_HS      ( VGA_HS),
          .VIDEO_VS      ( VGA_VS),
	       .VIDEO_DE      (READ_Request) ,
          .VIDEO_CLK     ( VGA_CLK),
          .iR            ( RED  [7:0]),
          .iG            ( GREEN[7:0]),
          .iB            ( BLUE [7:0]),
          .oR            ( VGA_R[7:0]), 
          .oG            ( VGA_G[7:0]), 
          .oB            ( VGA_B[7:0]),    
          .READY         ( READY),
          .SCL           ( CAMERA_I2C_SCL_AF ), 
          .SDA           ( CAMERA_I2C_SDA )
   
);
 				
		
Reset_Delay_DRAM		u2	(	
                     .iCLK(CLOCK_50),
							.iRST  (KEY[0]),
							.oRST_0(DLY_RST_0),
							.oRST_1(DLY_RST_1),
							.oRST_2(DLY_RST_2)
						);
	
//------SDRAM CONTROLLER --

Sdram_Control	   u7	(	//	HOST Side						
						   .RESET_N     ( KEY[0] ),
							.CLK         ( SDRAM_CTRL_CLK ) , 
							//	FIFO Write Side 1
							.WR1_DATA    ( MIPI_PIXEL_D[9:0] ),
							.WR1         ( MIPI_PIXEL_HS & MIPI_PIXEL_VS ) ,
							
							.WR1_ADDR    ( 0 ),
                     .WR1_MAX_ADDR( 800*480 ),
						   .WR1_LENGTH  ( 256 ) , 
		               .WR1_LOAD    ( ~I2C_RELEASE ) ,
							.WR1_CLK     ( MIPI_PIXEL_CLK ),

                     //	FIFO Read Side 1
						   .RD1_DATA    ( RD_DATA[9:0] ),
				        	.RD1         ( READ_Request ),
				        	.RD1_ADDR    (0 ),
                     .RD1_MAX_ADDR( 800*480 ),
							.RD1_LENGTH  ( 256  ),
							.RD1_LOAD    ( ~I2C_RELEASE ),
							.RD1_CLK     ( VGA_CLK ),
											
							//	SDRAM Side
						   .SA          ( DRAM_ADDR ),
							.BA          ( DRAM_BA ),
							.CS_N        ( DRAM_CS_N ),
							.CKE         ( DRAM_CKE ),
							.RAS_N       ( DRAM_RAS_N ),
							.CAS_N       ( DRAM_CAS_N ),
							.WE_N        ( DRAM_WE_N ),
							.DQ          ( DRAM_DQ ),
							.DQM         ( {DRAM_UDQM,DRAM_LDQM} )
						   );
		
													
//-- RAW TO RGB ---
RAW2RGB_J				u4	(	
	      .RST          ( VGA_VS  ),
         .CCD_PIXCLK   ( VGA_CLK ),
	      .mCCD_DATA    ( RD_DATA[9:0] ),
         .VGA_CLK      ( VGA_CLK      ),
         .READ_Request ( READ_Request ),
         .VGA_VS       ( VGA_VS ),	
	      .VGA_HS       ( VGA_HS ) , 	      			
	      .oRed         ( RED  [7:0] ),
	      .oGreen       ( GREEN[7:0] ),
	      .oBlue        ( BLUE [7:0] ),
	      .oDVAL        ( )
			);							
							
							
					
   
//----- VGA Controller ---
VGA_Controller u1(
	       .iCLK        ( VGA_CLK     ),		 				 
	       .oVGA_H_SYNC ( VGA_HS      ),
	       .oVGA_V_SYNC ( VGA_VS      ),	       
	       .oRequest    ( READ_Request),			 
	       .iRST_N      ( I2C_RELEASE ),
			 .oVGA_SYNC   ( VGA_SYNC_N  ) ,
		    .oVGA_BLANK  ( VGA_BLANK_N )	,
          .H_Cont      (H_Cont ) 	,
			 .V_Cont      (V_Cont )
			 
);	


//------VS FREQUENCY TEST = 60HZ --
							
FpsMonitor uFps( 
	.clk50     ( CLOCK_50    ),
	.resetn    ( I2C_RELEASE ) ,
	.vs        ( MIPI_PIXEL_VS ),
	
	.fps      (),
	.hex_fps_h( HEX1 ),
	.hex_fps_l( HEX0 )
);


//--LED DISPLAY--
CLOCKMEM  ck1 ( .CLK(VGA_CLK)   ,.CLK_FREQ         (33330000  ) , . CK_1HZ  (VGA_CK_HZ   )  ) ;//33MHZ
CLOCKMEM  ck2 ( .CLK(MIPI_REFCLK   )   ,.CLK_FREQ  (20000000   ) , . CK_1HZ (D8M_REF_HZ  )  ) ;//20MHZ
CLOCKMEM  ck3 ( .CLK(MIPI_PIXEL_CLK)   ,.CLK_FREQ  (50000000  ) , . CK_1HZ  (D8M_PIX_HZ  )  ) ;//50MHZ



//--LED Display 
assign LEDR[9:0] = {  VGA_CK_HZ ,D8M_REF_HZ ,D8M_PIX_HZ  ,5'h0,  CAMERA_MIPI_RELAESE  ,  MIPI_BRIDGE_RELEASE } ; 



endmodule

