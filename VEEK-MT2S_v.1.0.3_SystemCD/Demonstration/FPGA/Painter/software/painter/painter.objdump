
painter.elf:     file format elf32-littlenios2
painter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0007f934 memsz 0x0007fa98 flags rwx
    LOAD off    0x00081000 vaddr 0x09001000 paddr 0x09001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  09001000  09001000  00081000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d08c  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0005eefc  0401d2d0  0401d2d0  0001e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003788  0407c1cc  0407c1cc  0007d1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0407f954  0407f954  00080954  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0407fab8  0407fab8  00081000  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  09001020  09001020  00081000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00081000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001280  00000000  00000000  00081028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000310c0  00000000  00000000  000822a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bb28  00000000  00000000  000b3368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fdc4  00000000  00000000  000bee90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003af4  00000000  00000000  000cec54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006081  00000000  00000000  000d2748  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d162  00000000  00000000  000d87c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  000f592c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b48  00000000  00000000  000f5980  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000fd5be  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  000fd5c1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000fd5cb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000fd5cc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000fd5cd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000fd5d1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000fd5d5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000fd5d9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000fd5e2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000fd5eb  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  000fd5f4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002f  00000000  00000000  000fd600  2**0
                  CONTENTS, READONLY
 30 .jdi          00004131  00000000  00000000  000fd62f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000904e5  00000000  00000000  00101760  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09001000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0401d2d0 l    d  .rodata	00000000 .rodata
0407c1cc l    d  .rwdata	00000000 .rwdata
0407f954 l    d  .bss	00000000 .bss
0407fab8 l    d  .sdram	00000000 .sdram
09001020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../painter_bsp//obj/HAL/src/crt0.o
04000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
0401d2d0 l     O .rodata	000000b6 tahomabold_20_33
0401d386 l     O .rodata	00000104 tahomabold_20_34
0401d48a l     O .rodata	000001a0 tahomabold_20_35
0401d62a l     O .rodata	00000152 tahomabold_20_36
0401d77c l     O .rodata	00000270 tahomabold_20_37
0401d9ec l     O .rodata	000001ba tahomabold_20_38
0401dba6 l     O .rodata	0000009c tahomabold_20_39
0401dc42 l     O .rodata	000000ea tahomabold_20_40
0401dd2c l     O .rodata	000000ea tahomabold_20_41
0401de16 l     O .rodata	00000152 tahomabold_20_42
0401df68 l     O .rodata	000001a0 tahomabold_20_43
0401e108 l     O .rodata	0000009c tahomabold_20_44
0401e1a4 l     O .rodata	000000ea tahomabold_20_45
0401e28e l     O .rodata	0000009c tahomabold_20_46
0401e32a l     O .rodata	00000138 tahomabold_20_47
0401e462 l     O .rodata	00000152 tahomabold_20_48
0401e5b4 l     O .rodata	00000152 tahomabold_20_49
0401e706 l     O .rodata	00000152 tahomabold_20_50
0401e858 l     O .rodata	00000152 tahomabold_20_51
0401e9aa l     O .rodata	00000152 tahomabold_20_52
0401eafc l     O .rodata	00000152 tahomabold_20_53
0401ec4e l     O .rodata	00000152 tahomabold_20_54
0401eda0 l     O .rodata	00000152 tahomabold_20_55
0401eef2 l     O .rodata	00000152 tahomabold_20_56
0401f044 l     O .rodata	00000152 tahomabold_20_57
0401f196 l     O .rodata	000000b6 tahomabold_20_58
0401f24c l     O .rodata	000000b6 tahomabold_20_59
0401f302 l     O .rodata	000001a0 tahomabold_20_60
0401f4a2 l     O .rodata	000001a0 tahomabold_20_61
0401f642 l     O .rodata	000001a0 tahomabold_20_62
0401f7e2 l     O .rodata	0000011e tahomabold_20_63
0401f900 l     O .rodata	000001d4 tahomabold_20_64
0401fad4 l     O .rodata	0000016c tahomabold_20_65
0401fc40 l     O .rodata	0000016c tahomabold_20_66
0401fdac l     O .rodata	00000152 tahomabold_20_67
0401fefe l     O .rodata	00000186 tahomabold_20_68
04020084 l     O .rodata	00000138 tahomabold_20_69
040201bc l     O .rodata	00000138 tahomabold_20_70
040202f4 l     O .rodata	00000186 tahomabold_20_71
0402047a l     O .rodata	00000186 tahomabold_20_72
04020600 l     O .rodata	00000104 tahomabold_20_73
04020704 l     O .rodata	00000104 tahomabold_20_74
04020808 l     O .rodata	0000016c tahomabold_20_75
04020974 l     O .rodata	0000011e tahomabold_20_76
04020a92 l     O .rodata	000001d4 tahomabold_20_77
04020c66 l     O .rodata	00000186 tahomabold_20_78
04020dec l     O .rodata	00000186 tahomabold_20_79
04020f72 l     O .rodata	00000152 tahomabold_20_80
040210c4 l     O .rodata	00000186 tahomabold_20_81
0402124a l     O .rodata	00000186 tahomabold_20_82
040213d0 l     O .rodata	00000152 tahomabold_20_83
04021522 l     O .rodata	00000138 tahomabold_20_84
0402165a l     O .rodata	00000186 tahomabold_20_85
040217e0 l     O .rodata	0000016c tahomabold_20_86
0402194c l     O .rodata	00000222 tahomabold_20_87
04021b6e l     O .rodata	0000016c tahomabold_20_88
04021cda l     O .rodata	0000016c tahomabold_20_89
04021e46 l     O .rodata	00000138 tahomabold_20_90
04021f7e l     O .rodata	000000ea tahomabold_20_91
04022068 l     O .rodata	00000138 tahomabold_20_92
040221a0 l     O .rodata	000000ea tahomabold_20_93
0402228a l     O .rodata	000001a0 tahomabold_20_94
0402242a l     O .rodata	00000152 tahomabold_20_95
0402257c l     O .rodata	0000011e tahomabold_20_96
0402269a l     O .rodata	00000138 tahomabold_20_97
040227d2 l     O .rodata	00000152 tahomabold_20_98
04022924 l     O .rodata	0000011e tahomabold_20_99
04022a42 l     O .rodata	00000152 tahomabold_20_100
04022b94 l     O .rodata	00000138 tahomabold_20_101
04022ccc l     O .rodata	000000d0 tahomabold_20_102
04022d9c l     O .rodata	00000152 tahomabold_20_103
04022eee l     O .rodata	00000152 tahomabold_20_104
04023040 l     O .rodata	0000009c tahomabold_20_105
040230dc l     O .rodata	000000ea tahomabold_20_106
040231c6 l     O .rodata	00000138 tahomabold_20_107
040232fe l     O .rodata	0000009c tahomabold_20_108
0402339a l     O .rodata	000001ee tahomabold_20_109
04023588 l     O .rodata	00000152 tahomabold_20_110
040236da l     O .rodata	00000138 tahomabold_20_111
04023812 l     O .rodata	00000152 tahomabold_20_112
04023964 l     O .rodata	00000152 tahomabold_20_113
04023ab6 l     O .rodata	000000ea tahomabold_20_114
04023ba0 l     O .rodata	00000104 tahomabold_20_115
04023ca4 l     O .rodata	000000d0 tahomabold_20_116
04023d74 l     O .rodata	00000152 tahomabold_20_117
04023ec6 l     O .rodata	00000138 tahomabold_20_118
04023ffe l     O .rodata	000001d4 tahomabold_20_119
040241d2 l     O .rodata	00000138 tahomabold_20_120
0402430a l     O .rodata	00000138 tahomabold_20_121
04024442 l     O .rodata	0000011e tahomabold_20_122
04024560 l     O .rodata	00000138 tahomabold_20_123
04024698 l     O .rodata	00000152 tahomabold_20_124
040247ea l     O .rodata	00000138 tahomabold_20_125
04024922 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
04024ac2 l     O .rodata	000001b8 tahomabold_32_33
04024c7a l     O .rodata	00000280 tahomabold_32_34
04024efa l     O .rodata	00000410 tahomabold_32_35
0402530a l     O .rodata	00000320 tahomabold_32_36
0402562a l     O .rodata	000005f0 tahomabold_32_37
04025c1a l     O .rodata	00000410 tahomabold_32_38
0402602a l     O .rodata	00000168 tahomabold_32_39
04026192 l     O .rodata	00000258 tahomabold_32_40
040263ea l     O .rodata	00000258 tahomabold_32_41
04026642 l     O .rodata	00000320 tahomabold_32_42
04026962 l     O .rodata	00000410 tahomabold_32_43
04026d72 l     O .rodata	00000190 tahomabold_32_44
04026f02 l     O .rodata	00000230 tahomabold_32_45
04027132 l     O .rodata	00000190 tahomabold_32_46
040272c2 l     O .rodata	000002d0 tahomabold_32_47
04027592 l     O .rodata	00000320 tahomabold_32_48
040278b2 l     O .rodata	00000320 tahomabold_32_49
04027bd2 l     O .rodata	00000320 tahomabold_32_50
04027ef2 l     O .rodata	00000320 tahomabold_32_51
04028212 l     O .rodata	00000320 tahomabold_32_52
04028532 l     O .rodata	00000320 tahomabold_32_53
04028852 l     O .rodata	00000320 tahomabold_32_54
04028b72 l     O .rodata	00000320 tahomabold_32_55
04028e92 l     O .rodata	00000320 tahomabold_32_56
040291b2 l     O .rodata	00000320 tahomabold_32_57
040294d2 l     O .rodata	000001e0 tahomabold_32_58
040296b2 l     O .rodata	000001e0 tahomabold_32_59
04029892 l     O .rodata	00000410 tahomabold_32_60
04029ca2 l     O .rodata	00000410 tahomabold_32_61
0402a0b2 l     O .rodata	00000410 tahomabold_32_62
0402a4c2 l     O .rodata	000002d0 tahomabold_32_63
0402a792 l     O .rodata	00000488 tahomabold_32_64
0402ac1a l     O .rodata	00000370 tahomabold_32_65
0402af8a l     O .rodata	00000370 tahomabold_32_66
0402b2fa l     O .rodata	00000348 tahomabold_32_67
0402b642 l     O .rodata	000003c0 tahomabold_32_68
0402ba02 l     O .rodata	00000320 tahomabold_32_69
0402bd22 l     O .rodata	000002f8 tahomabold_32_70
0402c01a l     O .rodata	000003c0 tahomabold_32_71
0402c3da l     O .rodata	000003c0 tahomabold_32_72
0402c79a l     O .rodata	00000258 tahomabold_32_73
0402c9f2 l     O .rodata	00000280 tahomabold_32_74
0402cc72 l     O .rodata	00000398 tahomabold_32_75
0402d00a l     O .rodata	000002d0 tahomabold_32_76
0402d2da l     O .rodata	00000488 tahomabold_32_77
0402d762 l     O .rodata	000003e8 tahomabold_32_78
0402db4a l     O .rodata	000003e8 tahomabold_32_79
0402df32 l     O .rodata	00000348 tahomabold_32_80
0402e27a l     O .rodata	000003e8 tahomabold_32_81
0402e662 l     O .rodata	000003c0 tahomabold_32_82
0402ea22 l     O .rodata	00000320 tahomabold_32_83
0402ed42 l     O .rodata	00000320 tahomabold_32_84
0402f062 l     O .rodata	000003c0 tahomabold_32_85
0402f422 l     O .rodata	00000370 tahomabold_32_86
0402f792 l     O .rodata	00000528 tahomabold_32_87
0402fcba l     O .rodata	00000370 tahomabold_32_88
0403002a l     O .rodata	00000370 tahomabold_32_89
0403039a l     O .rodata	00000320 tahomabold_32_90
040306ba l     O .rodata	00000258 tahomabold_32_91
04030912 l     O .rodata	000002d0 tahomabold_32_92
04030be2 l     O .rodata	00000258 tahomabold_32_93
04030e3a l     O .rodata	00000410 tahomabold_32_94
0403124a l     O .rodata	00000320 tahomabold_32_95
0403156a l     O .rodata	000002a8 tahomabold_32_96
04031812 l     O .rodata	000002f8 tahomabold_32_97
04031b0a l     O .rodata	00000320 tahomabold_32_98
04031e2a l     O .rodata	000002a8 tahomabold_32_99
040320d2 l     O .rodata	00000320 tahomabold_32_100
040323f2 l     O .rodata	000002f8 tahomabold_32_101
040326ea l     O .rodata	00000230 tahomabold_32_102
0403291a l     O .rodata	00000320 tahomabold_32_103
04032c3a l     O .rodata	00000320 tahomabold_32_104
04032f5a l     O .rodata	00000190 tahomabold_32_105
040330ea l     O .rodata	00000208 tahomabold_32_106
040332f2 l     O .rodata	000002f8 tahomabold_32_107
040335ea l     O .rodata	00000190 tahomabold_32_108
0403377a l     O .rodata	000004d8 tahomabold_32_109
04033c52 l     O .rodata	00000320 tahomabold_32_110
04033f72 l     O .rodata	00000320 tahomabold_32_111
04034292 l     O .rodata	00000320 tahomabold_32_112
040345b2 l     O .rodata	00000320 tahomabold_32_113
040348d2 l     O .rodata	00000230 tahomabold_32_114
04034b02 l     O .rodata	00000280 tahomabold_32_115
04034d82 l     O .rodata	00000208 tahomabold_32_116
04034f8a l     O .rodata	00000320 tahomabold_32_117
040352aa l     O .rodata	000002f8 tahomabold_32_118
040355a2 l     O .rodata	00000460 tahomabold_32_119
04035a02 l     O .rodata	000002f8 tahomabold_32_120
04035cfa l     O .rodata	000002d0 tahomabold_32_121
04035fca l     O .rodata	000002a8 tahomabold_32_122
04036272 l     O .rodata	00000320 tahomabold_32_123
04036592 l     O .rodata	00000320 tahomabold_32_124
040368b2 l     O .rodata	00000320 tahomabold_32_125
04036bd2 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
0407f954 l     O .bss	00000004 x.4376
0407f904 l     O .rwdata	00000004 y.4377
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 multi_touch2.c
040080ec l     F .text	0000034c mtc2_QueryData
04008438 l     F .text	00000078 mtc2_ISR
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 vip_fr.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0407dd88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0407bfbe l     O .rodata	00000010 zeroes.4389
0407bfce l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0407bfde l     O .rodata	00000010 zeroes.4404
04010cd8 l     F .text	000000bc __sbprintf
0407bfee l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0401100c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04012b3c l     F .text	00000008 __fp_unlock
04012b50 l     F .text	0000019c __sinit.part.1
04012cec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0407e5d4 l     O .rwdata	00000020 lc_ctype_charset
0407e5b4 l     O .rwdata	00000020 lc_message_charset
0407e5f4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0407c01c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0407c150 l     O .rodata	00000010 blanks.4332
0407c140 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
04016b18 l     F .text	000000fc __sprint_r.part.0
0407c170 l     O .rodata	00000010 blanks.4348
0407c160 l     O .rodata	00000010 zeroes.4349
040180a4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
04019750 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040198a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
040198d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04019c5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
04019d3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04019f10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0407f940 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401a330 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401a464 l     F .text	00000034 alt_dev_reg
0407e7d4 l     O .rwdata	000000cc epcs_flash_controller_0
0407e8a0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0401a53c l     F .text	00000034 alt_flash_device_register
0401a5c4 l     F .text	000003f8 alt_epcs_flash_query
0401a9bc l     F .text	000000ec alt_epcs_flash_memcmp
0401ad94 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401b25c l     F .text	0000020c altera_avalon_jtag_uart_irq
0401b468 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401baa0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0401bbf0 l     F .text	00000038 epcs_test_wip
0401bc28 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401c454 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401c74c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0401c88c l     F .text	0000003c alt_get_errno
0401c8c8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0407f98c g     O .bss	00000004 alt_instruction_exception_handler
0400c5c0 g     F .text	00000018 putchar
04001568 g     F .text	000002e8 vid_draw_horiz_line
04014cb0 g     F .text	00000074 _mprec_log10
040062a8 g     F .text	00000118 I2C_Read
0401ad08 g     F .text	0000008c alt_epcs_flash_get_info
04014d9c g     F .text	0000008c __any_on
04018798 g     F .text	00000054 _isatty_r
0407c028 g     O .rodata	00000028 __mprec_tinytens
04019e4c g     F .text	0000007c alt_main
0400c7c4 g     F .text	00000090 strcpy
0400c5d8 g     F .text	000000c0 _puts_r
0407f9b8 g     O .bss	00000100 alt_irq
040187ec g     F .text	00000060 _lseek_r
040074e4 g     F .text	00000060 ACK_check
0400193c g     F .text	0000006c vid_color_convert16_24
04009054 g     F .text	00000130 sqrt
04007044 g     F .text	000000a0 I2CL_Read16
04007458 g     F .text	0000008c ACK_single_check
04019544 g     F .text	00000088 .hidden __eqdf2
0407fab8 g       *ABS*	00000000 __alt_heap_start
04008878 g     F .text	00000064 QUEUE_IsFull
0400c57c g     F .text	0000003c printf
040188ac g     F .text	0000009c _wcrtomb_r
04004158 g     F .text	000001e0 GUI_DeskInit
040155cc g     F .text	0000005c __sseek
04012e8c g     F .text	00000010 __sinit
04018160 g     F .text	00000140 __swbuf_r
04013954 g     F .text	0000007c _setlocale_r
04012cf4 g     F .text	00000068 __sfmoreglue
04019eec g     F .text	00000024 __malloc_unlock
04000edc g     F .text	00000158 vid_draw_box
04000650 g     F .text	00000048 PtCopy
04003524 g     F .text	00000264 vid_print_string_alpha
04013cd0 g     F .text	0000015c memmove
04007544 g     F .text	000001fc OC_I2C_Write
04004958 g     F .text	000002cc GUI_ShowGesture
04012e74 g     F .text	00000018 _cleanup
04013e2c g     F .text	000000a8 _Balloc
0407d94c g     O .rwdata	00000415 cour10_font_array
040195cc g     F .text	000000dc .hidden __gtdf2
04000cb8 g     F .text	0000011c vid_move_block
0401cae0 g     F .text	00000024 altera_nios2_gen2_irq_init
0400ba98 g     F .text	00000010 __errno
0401bc64 g     F .text	000000fc epcs_sector_erase
04006ec8 g     F .text	0000017c I2CL_MultipleWrite
04004070 g     F .text	000000e8 vid_string_pixel_length_alpha
040067c0 g     F .text	00000148 i2c_write
09001000 g     F .entry	00000000 __reset
04008d70 g     F .text	00000070 DRAW_EraseScreen
04006028 g     F .text	00000044 my_wait
0401873c g     F .text	0000005c _fstat_r
0407f964 g     O .bss	00000004 errno
040063c0 g     F .text	00000178 I2C_Read16
04015548 g     F .text	00000008 __seofread
040158dc g     F .text	0000123c ___svfiprintf_internal_r
0407f97c g     O .bss	00000004 alt_argv
04087900 g       *ABS*	00000000 _gp
0401a300 g     F .text	00000030 usleep
040057ac g     F .text	000000a4 VPG_ColorPanel
04003788 g     F .text	00000148 seperate_color_channels
0407e654 g     O .rwdata	00000180 alt_fd_list
04008f70 g     F .text	0000003c FrameReader_Go
0400c5b8 g     F .text	00000008 _putchar_r
0401bea8 g     F .text	0000006c epcs_write_status_register
0401cd00 g     F .text	00000090 alt_find_dev
0400c2dc g     F .text	00000148 memcpy
04007278 g     F .text	0000014c oc_i2c_init_ex
04012b44 g     F .text	0000000c _cleanup_r
0400b958 g     F .text	000000dc .hidden __floatsidf
040023c0 g     F .text	0000073c vid_round_corner_points
0401c810 g     F .text	0000007c alt_io_redirect
0400a7d0 g     F .text	000000f4 .hidden __ltdf2
04008758 g     F .text	0000003c MTC2_ClearEvent
0401d2d0 g       *ABS*	00000000 __DTOR_END__
04004338 g     F .text	00000090 GUI_CheckButton
0400c698 g     F .text	00000014 puts
0401c6b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04000698 g     F .text	00000064 vid_clean_screen
0401aea0 g     F .text	00000100 alt_epcs_flash_write_block
0400940c g     F .text	00000074 __fpclassifyd
04014c0c g     F .text	000000a4 __ratio
04018088 g     F .text	0000001c __vfiprintf_internal
04008838 g     F .text	00000040 QUEUE_IsEmpty
0400080c g     F .text	0000014c vid_scroll_string_init
0401b660 g     F .text	0000021c altera_avalon_jtag_uart_read
0400baa8 g     F .text	00000014 malloc
0400c54c g     F .text	00000030 _printf_r
04009580 g     F .text	00000064 .hidden __udivsi3
04019c98 g     F .text	000000a4 isatty
0407c078 g     O .rodata	000000c8 __mprec_tens
040085f8 g     F .text	00000160 MTC2_GetStatus
040139d0 g     F .text	0000000c __locale_charset
04010e84 g     F .text	00000034 vsnprintf
040043c8 g     F .text	000004fc GUI_DeskDraw
04006538 g     F .text	0000017c I2C_MultipleRead
0407f960 g     O .bss	00000004 __malloc_top_pad
04008a00 g     F .text	00000034 QUEUE_Empty
0407f91c g     O .rwdata	00000004 __mb_cur_max
04013a00 g     F .text	0000000c _localeconv_r
04014238 g     F .text	0000003c __i2b
04013310 g     F .text	000004bc __sfvwrite_r
04008970 g     F .text	00000090 QUEUE_Pop
0400c6ac g     F .text	00000054 _sbrk_r
04000568 g     F .text	00000034 RectHeight
04008ce4 g     F .text	0000008c VIPFR_ActiveDrawFrame
04008de0 g     F .text	000000a8 FrameReader_SetFrame0
0401884c g     F .text	00000060 _read_r
0407f934 g     O .rwdata	00000004 alt_max_fd
040056f0 g     F .text	000000bc VPG_XLine
04018430 g     F .text	000000f0 _fclose_r
04012b0c g     F .text	00000030 fflush
0407f95c g     O .bss	00000004 __malloc_max_sbrked_mem
04006ba0 g     F .text	00000168 I2CL_Read
0407cd8c g     O .rwdata	00000bc0 tahomabold_32
0400963c g     F .text	000008ac .hidden __adddf3
04004c70 g     F .text	000000d8 GUI_ClearPaintArea
0401ae28 g     F .text	00000078 alt_epcs_flash_erase_block
04000310 g     F .text	00000044 PtSet
040149b4 g     F .text	0000010c __b2d
0401900c g     F .text	00000538 .hidden __umoddi3
04019d78 g     F .text	000000d4 lseek
0407f908 g     O .rwdata	00000004 __fdlib_version
0407f90c g     O .rwdata	00000004 _global_impure_ptr
04001ebc g     F .text	00000148 vid_draw_circle
0401c174 g     F .text	0000005c epcs_exit_4_bytes_mode
04014f90 g     F .text	00000564 _realloc_r
0407fab8 g       *ABS*	00000000 __bss_end
04019b6c g     F .text	000000f0 alt_iic_isr_register
0401a1f8 g     F .text	00000108 alt_tick
04006168 g     F .text	00000140 I2C_Write16
04000440 g     F .text	0000008c RectOffset
040084b0 g     F .text	000000fc MTC2_Init
04018a94 g     F .text	00000578 .hidden __udivdi3
04018698 g     F .text	00000024 _fputwc_r
0407c050 g     O .rodata	00000028 __mprec_bigtens
0401401c g     F .text	00000104 __s2b
04001c48 g     F .text	00000274 vid_draw_sloped_line
040196a8 g     F .text	000000a8 .hidden __floatunsidf
040146f4 g     F .text	00000060 __mcmp
0400595c g     F .text	000000f4 VPG_VGrid
04012eac g     F .text	00000018 __fp_lock_all
04019b20 g     F .text	0000004c alt_ic_irq_enabled
0400606c g     F .text	000000fc I2C_Write
04002004 g     F .text	000003bc vid_draw_round_corner_box
04007aa8 g     F .text	0000020c OC_I2CL_Write
0401a15c g     F .text	0000009c alt_alarm_stop
0407f974 g     O .bss	00000004 alt_irq_active
04007740 g     F .text	00000064 ACK_judge_for_read
040000fc g     F .exceptions	000000d4 alt_irq_handler
0407e62c g     O .rwdata	00000028 alt_dev_null
04007170 g     F .text	00000058 Write32_Data
040070e4 g     F .text	0000008c I2CL_Write16
040066b4 g     F .text	0000008c i2c_start
0401985c g     F .text	00000048 alt_dcache_flush_all
04014120 g     F .text	00000068 __hi0bits
0400b8d8 g     F .text	00000080 .hidden __fixdfsi
04002f50 g     F .text	000003b4 vid_draw_triangle
0407f92c g     O .rwdata	00000008 alt_dev_list
0401a36c g     F .text	000000f8 write
04014e28 g     F .text	000000a0 _putc_r
0407dd64 g     O .rwdata	00000024 szPallete
040033f0 g     F .text	00000134 CropImage16
0401990c g     F .text	000000b0 fstat
0400a7d0 g     F .text	000000f4 .hidden __ledf2
04000958 g     F .text	00000360 vid_scroll_string
04007f68 g     F .text	0000006c myprintf
0401446c g     F .text	00000140 __pow5mult
04016c2c g     F .text	0000145c ___vfiprintf_internal_r
0407f970 g     O .bss	00000004 __nlocale_changed
040095e4 g     F .text	00000058 .hidden __umodsi3
04000534 g     F .text	00000034 RectWidth
0401c030 g     F .text	00000068 epcs_read_electronic_signature
04003304 g     F .text	000000ec CopyImage16
0407fab8 g       *ABS*	00000000 end
04005e2c g     F .text	00000130 GUI_VPG
04008c5c g     F .text	00000044 VIPFR_Go
040055b8 g     F .text	00000070 GUI_ShowInfo
0401b19c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04001034 g     F .text	000000f0 vid_print_char
0401d2d0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401bb18 g     F .text	0000007c alt_avalon_timer_sc_init
0400ba34 g     F .text	00000064 .hidden __clzsi2
0401b87c g     F .text	00000224 altera_avalon_jtag_uart_write
04005cac g     F .text	00000180 GUI_ShowPAT
04002b50 g     F .text	00000054 min3
040006fc g     F .text	000000cc vid_draw_line
04008a34 g     F .text	000000d8 VIPFR_Init
04012e9c g     F .text	00000004 __sfp_lock_acquire
04013bec g     F .text	000000e4 memchr
0400eac4 g     F .text	000021f8 ___vfprintf_internal_r
0400c700 g     F .text	00000058 _sprintf_r
04013000 g     F .text	00000310 _free_r
040139dc g     F .text	00000010 __locale_mb_cur_max
0401d11c g     F .text	00000180 __call_exitprocs
0407f96c g     O .bss	00000004 __mlocale_changed
04005850 g     F .text	0000010c VPG_Grid
0407f914 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	00000048 _start
0407f984 g     O .bss	00000004 _alt_tick_rate
040085ac g     F .text	0000004c MTC2_UnInit
040145ac g     F .text	00000148 __lshift
0401cb04 g     F .text	000001fc alt_avalon_spi_command
040088dc g     F .text	00000094 QUEUE_Push
0407f988 g     O .bss	00000004 _alt_nticks
04002c08 g     F .text	00000104 vid_put_pixel_in_span_map
04019f4c g     F .text	000000fc read
04008b0c g     F .text	0000003c VIPFR_UnInit
04005b44 g     F .text	00000168 VPG_ColorBar
0401a4d0 g     F .text	0000006c alt_sys_init
0401570c g     F .text	000001d0 __ssprint_r
0401d004 g     F .text	00000118 __register_exitproc
04014274 g     F .text	000001f8 __multiply
04001324 g     F .text	00000244 vid_paint_block
0401b508 g     F .text	00000068 altera_avalon_jtag_uart_close
0407f990 g     O .bss	00000028 __malloc_current_mallinfo
04014ac0 g     F .text	0000014c __d2b
04005a50 g     F .text	000000f4 VPG_HGrid
0401bb94 g     F .text	0000005c epcs_read_status_register
0400189c g     F .text	000000a0 vid_color_convert24_16
0401b038 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401ce98 g     F .text	000000a4 alt_get_fd
0401c2fc g     F .text	00000158 alt_busy_sleep
04018318 g     F .text	00000054 _close_r
04004d48 g     F .text	00000870 GUI
04003c2c g     F .text	0000025c alpha_blending
0401c098 g     F .text	00000080 epcs_read_device_id
0401cf88 g     F .text	0000007c memcmp
0401b0f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0407fab8 g       *ABS*	00000000 __alt_stack_base
0401b148 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
09001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
04036fe4 g     O .rodata	000448f0 gesture_bmp
04010eb8 g     F .text	00000154 __swsetup_r
04007220 g     F .text	00000058 oc_i2c_init
04009ee8 g     F .text	000008e8 .hidden __divdf3
04012d5c g     F .text	00000118 __sfp
04014d24 g     F .text	00000078 __copybits
0407e1ac g     O .rwdata	00000408 __malloc_av_
04012ea8 g     F .text	00000004 __sinit_lock_release
04010d94 g     F .text	000000f0 _vsnprintf_r
04006740 g     F .text	00000080 i2c_stop
0400a8c4 g     F .text	00000718 .hidden __muldf3
040154f4 g     F .text	00000054 __sread
0401cd90 g     F .text	00000108 alt_find_file
0401c490 g     F .text	000000a4 alt_dev_llist_insert
04019ec8 g     F .text	00000024 __malloc_lock
040019a8 g     F .text	000002a0 vid_copy_line_to_frame_buffer
0401a0ac g     F .text	000000b0 sbrk
0400c8ec g     F .text	000021d8 ___svfprintf_internal_r
04012ab0 g     F .text	0000005c _fflush_r
0401836c g     F .text	000000c4 _calloc_r
0407f94c g     O .rwdata	00000008 alt_flash_dev_list
04008794 g     F .text	00000070 QUEUE_New
0407f954 g       *ABS*	00000000 __bss_start
0400c424 g     F .text	00000128 memset
04005f5c g     F .text	000000cc main
0407f980 g     O .bss	00000004 alt_envp
0407f958 g     O .bss	00000004 __malloc_max_total_mem
04007fd4 g     F .text	00000088 myprintf_hexarray
0401b098 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04005628 g     F .text	00000064 GUI_ShowTouchPoint
04006908 g     F .text	00000158 i2c_read
040182a0 g     F .text	00000018 __swbuf
04008f30 g     F .text	00000040 FrameReader_SelectFrame
0407c1cc g     O .rwdata	00000bc0 tahomabold_20
04015628 g     F .text	00000008 __sclose
04009480 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04003e88 g     F .text	000001e8 vid_print_char_alpha
04018520 g     F .text	00000014 fclose
0407f900 g     O .rwdata	00000004 cour10_font
0401120c g     F .text	00001688 _dtoa_r
0400bad0 g     F .text	0000080c _malloc_r
04018a08 g     F .text	00000030 __ascii_wctomb
0407f938 g     O .rwdata	00000004 alt_errno
040137cc g     F .text	000000c4 _fwalk
0400059c g     F .text	000000b4 PtDistance
04000354 g     F .text	00000060 RectSet
04014ec8 g     F .text	000000c8 putc
04009488 g     F .text	00000084 .hidden __divsi3
040073c4 g     F .text	00000094 oc_i2c_uninit
040004cc g     F .text	00000068 RectCopy
04012edc g     F .text	00000124 _malloc_trim_r
0401d2d0 g       *ABS*	00000000 __CTOR_END__
04008ca0 g     F .text	00000044 VIPFR_GetDrawFrame
0401aaa8 g     F .text	00000260 alt_epcs_flash_write
04015630 g     F .text	000000dc strcmp
04003a00 g     F .text	0000022c read_from_frame
0401d2d0 g       *ABS*	00000000 __DTOR_LIST__
040012b0 g     F .text	00000074 vid_get_pixel
04019544 g     F .text	00000088 .hidden __nedf2
0401a498 g     F .text	00000038 alt_irq_init
0401a048 g     F .text	00000064 alt_release_fd
0400c758 g     F .text	0000006c sprintf
0407be71 g     O .rodata	00000100 .hidden __clz_tab
04007f34 g     F .text	00000034 debug_output
0407f968 g     O .bss	00000004 _PathLocale
0401cf3c g     F .text	00000014 atexit
040182b8 g     F .text	00000060 _write_r
0400028c g     F .text	00000084 IsPtInRect
04013a0c g     F .text	00000018 setlocale
0407f910 g     O .rwdata	00000004 _impure_ptr
0407f978 g     O .bss	00000004 alt_argc
04012894 g     F .text	0000021c __sflush_r
0401c594 g     F .text	00000060 _do_dtors
040139f8 g     F .text	00000008 __locale_cjk_lang
0400805c g     F .text	00000090 myprintf_dwordarray
04006d08 g     F .text	000001c0 I2CL_MultipleRead
04000020 g       .exceptions	00000000 alt_irq_entry
04014950 g     F .text	00000064 __ulp
04012ec4 g     F .text	00000018 __fp_unlock_all
0407f924 g     O .rwdata	00000008 alt_fs_list
040071c8 g     F .text	00000058 Read32_Data
04000dd4 g     F .text	00000108 vid_print_string
040077a4 g     F .text	000001cc OC_I2C_Read
04008e88 g     F .text	000000a8 FrameReader_SetFrame1
04013a24 g     F .text	0000000c localeconv
0401bd60 g     F .text	000000f4 epcs_read_buffer
04009184 g     F .text	00000288 __ieee754_sqrt
0401a570 g     F .text	00000054 alt_epcs_flash_init
040199bc g     F .text	00000050 alt_ic_isr_register
0407f954 g       *ABS*	00000000 _edata
04004c24 g     F .text	0000004c GUI_TraceGesture
0407fab8 g       *ABS*	00000000 _end
0401c5f4 g     F .text	00000068 alt_flash_open_dev
0400568c g     F .text	00000064 ShowInfo
04002afc g     F .text	00000054 max3
04018534 g     F .text	00000164 __fputwc
0401b570 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04008fac g     F .text	000000a8 VIPFR_ReserveBackground
04019a94 g     F .text	0000008c alt_ic_irq_disable
0401c118 g     F .text	0000005c epcs_enter_4_bytes_mode
04001850 g     F .text	0000004c vid_merge_colors
04015550 g     F .text	0000007c __swrite
0407f918 g     O .rwdata	00000004 __malloc_trim_threshold
04007970 g     F .text	00000138 OC_I2C_Read_Continue
040139ec g     F .text	0000000c __locale_msgcharset
0401cf50 g     F .text	00000038 exit
04013890 g     F .text	000000c4 _fwalk_reent
04014754 g     F .text	000001fc __mdiff
0401c65c g     F .text	00000054 alt_flash_close_dev
040048c4 g     F .text	00000094 IsContinuedPoint
0400950c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04012ea0 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04008804 g     F .text	00000034 QUEUE_Delete
04001124 g     F .text	0000018c vid_set_pixel
04008b48 g     F .text	00000114 VIPFR_SetFrameSize
04007cb4 g     F .text	00000280 OC_I2CL_Read
0401d29c g     F .text	00000034 _exit
0401c1d0 g     F .text	0000012c alt_alarm_start
040007c8 g     F .text	00000044 vid_scroll_string_quit
04013a30 g     F .text	000001bc __smakebuf_r
0400c854 g     F .text	00000098 strlen
0401be54 g     F .text	00000054 epcs_write_enable
0401c98c g     F .text	00000154 open
040195cc g     F .text	000000dc .hidden __gedf2
040003b4 g     F .text	0000008c RectInflate
0407f920 g     O .rwdata	00000004 __wctomb
04016c14 g     F .text	00000018 __sprint_r
0407f93c g     O .rwdata	00000004 alt_priority_mask
04019a0c g     F .text	00000088 alt_ic_irq_enable
04010cbc g     F .text	0000001c __vfprintf_internal
04018a38 g     F .text	0000005c _wctomb_r
0400afdc g     F .text	000008fc .hidden __subdf3
04002d0c g     F .text	00000244 vid_bres_scan_edges
0401afa0 g     F .text	00000098 alt_epcs_flash_read
04014188 g     F .text	000000b0 __lo0bits
0407f944 g     O .rwdata	00000008 alt_alarm_list
04002ba4 g     F .text	00000064 max_diff3
0401c534 g     F .text	00000060 _do_ctors
04006a60 g     F .text	00000140 I2CL_Write
040038d0 g     F .text	00000130 merge_color_channels
04018948 g     F .text	000000c0 wcrtomb
0401978c g     F .text	000000d0 close
040186bc g     F .text	00000080 fputwc
0400babc g     F .text	00000014 free
04012ea4 g     F .text	00000004 __sinit_lock_acquire
0401bf14 g     F .text	0000011c epcs_write_buffer
04013efc g     F .text	00000120 __multadd
04013ed4 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810234 	movhi	r2,1032
 4000140:	10be6e04 	addi	r2,r2,-1608
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810234 	movhi	r2,1032
 4000158:	10be6e04 	addi	r2,r2,-1608
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_epcs_flash_controller_0+0xfafff12c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_epcs_flash_controller_0+0xfafff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a02317 	ldw	r2,-32628(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a02317 	ldw	r2,-32628(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_epcs_flash_controller_0+0xfafff248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810234 	movhi	gp,1032
    ori gp, gp, %lo(_gp)
 4000260:	d69e4014 	ori	gp,gp,30976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	008101f4 	movhi	r2,1031
    ori r2, r2, %lo(__bss_start)
 4000268:	10be5514 	ori	r2,r2,63828

    movhi r3, %hi(__bss_end)
 400026c:	00c101f4 	movhi	r3,1031
    ori r3, r3, %lo(__bss_end)
 4000270:	18feae14 	ori	r3,r3,64184

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_epcs_flash_controller_0+0xfafff278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000284:	4019e4c0 	call	4019e4c <alt_main>

04000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000288:	003fff06 	br	4000288 <__alt_mem_epcs_flash_controller_0+0xfafff288>

0400028c <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 400028c:	defffc04 	addi	sp,sp,-16
 4000290:	df000315 	stw	fp,12(sp)
 4000294:	df000304 	addi	fp,sp,12
 4000298:	e13ffe15 	stw	r4,-8(fp)
 400029c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 40002a0:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 40002a4:	e0bffe17 	ldw	r2,-8(fp)
 40002a8:	10c00017 	ldw	r3,0(r2)
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	10800017 	ldw	r2,0(r2)
 40002b4:	18801116 	blt	r3,r2,40002fc <IsPtInRect+0x70>
 40002b8:	e0bffe17 	ldw	r2,-8(fp)
 40002bc:	10800017 	ldw	r2,0(r2)
 40002c0:	e0ffff17 	ldw	r3,-4(fp)
 40002c4:	18c00117 	ldw	r3,4(r3)
 40002c8:	18800c16 	blt	r3,r2,40002fc <IsPtInRect+0x70>
 40002cc:	e0bffe17 	ldw	r2,-8(fp)
 40002d0:	10c00117 	ldw	r3,4(r2)
 40002d4:	e0bfff17 	ldw	r2,-4(fp)
 40002d8:	10800217 	ldw	r2,8(r2)
 40002dc:	18800716 	blt	r3,r2,40002fc <IsPtInRect+0x70>
 40002e0:	e0bffe17 	ldw	r2,-8(fp)
 40002e4:	10800117 	ldw	r2,4(r2)
 40002e8:	e0ffff17 	ldw	r3,-4(fp)
 40002ec:	18c00317 	ldw	r3,12(r3)
 40002f0:	18800216 	blt	r3,r2,40002fc <IsPtInRect+0x70>
        bYes = TRUE;
 40002f4:	00800044 	movi	r2,1
 40002f8:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 40002fc:	e0bffd17 	ldw	r2,-12(fp)
}
 4000300:	e037883a 	mov	sp,fp
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00104 	addi	sp,sp,4
 400030c:	f800283a 	ret

04000310 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 4000310:	defffc04 	addi	sp,sp,-16
 4000314:	df000315 	stw	fp,12(sp)
 4000318:	df000304 	addi	fp,sp,12
 400031c:	e13ffd15 	stw	r4,-12(fp)
 4000320:	e17ffe15 	stw	r5,-8(fp)
 4000324:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 4000328:	e0bffd17 	ldw	r2,-12(fp)
 400032c:	e0fffe17 	ldw	r3,-8(fp)
 4000330:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 4000334:	e0bffd17 	ldw	r2,-12(fp)
 4000338:	e0ffff17 	ldw	r3,-4(fp)
 400033c:	10c00115 	stw	r3,4(r2)
}
 4000340:	0001883a 	nop
 4000344:	e037883a 	mov	sp,fp
 4000348:	df000017 	ldw	fp,0(sp)
 400034c:	dec00104 	addi	sp,sp,4
 4000350:	f800283a 	ret

04000354 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 4000354:	defffb04 	addi	sp,sp,-20
 4000358:	df000415 	stw	fp,16(sp)
 400035c:	df000404 	addi	fp,sp,16
 4000360:	e13ffc15 	stw	r4,-16(fp)
 4000364:	e17ffd15 	stw	r5,-12(fp)
 4000368:	e1bffe15 	stw	r6,-8(fp)
 400036c:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 4000370:	e0bffc17 	ldw	r2,-16(fp)
 4000374:	e0fffd17 	ldw	r3,-12(fp)
 4000378:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 400037c:	e0bffc17 	ldw	r2,-16(fp)
 4000380:	e0fffe17 	ldw	r3,-8(fp)
 4000384:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	e0ffff17 	ldw	r3,-4(fp)
 4000390:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4000394:	e0bffc17 	ldw	r2,-16(fp)
 4000398:	e0c00117 	ldw	r3,4(fp)
 400039c:	10c00315 	stw	r3,12(r2)
}
 40003a0:	0001883a 	nop
 40003a4:	e037883a 	mov	sp,fp
 40003a8:	df000017 	ldw	fp,0(sp)
 40003ac:	dec00104 	addi	sp,sp,4
 40003b0:	f800283a 	ret

040003b4 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 40003b4:	defffc04 	addi	sp,sp,-16
 40003b8:	df000315 	stw	fp,12(sp)
 40003bc:	df000304 	addi	fp,sp,12
 40003c0:	e13ffd15 	stw	r4,-12(fp)
 40003c4:	e17ffe15 	stw	r5,-8(fp)
 40003c8:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 40003cc:	e0bffd17 	ldw	r2,-12(fp)
 40003d0:	10c00017 	ldw	r3,0(r2)
 40003d4:	e0bffe17 	ldw	r2,-8(fp)
 40003d8:	1887c83a 	sub	r3,r3,r2
 40003dc:	e0bffd17 	ldw	r2,-12(fp)
 40003e0:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003e4:	e0bffd17 	ldw	r2,-12(fp)
 40003e8:	10c00117 	ldw	r3,4(r2)
 40003ec:	e0bffe17 	ldw	r2,-8(fp)
 40003f0:	1887883a 	add	r3,r3,r2
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 40003fc:	e0bffd17 	ldw	r2,-12(fp)
 4000400:	10c00217 	ldw	r3,8(r2)
 4000404:	e0bfff17 	ldw	r2,-4(fp)
 4000408:	1887c83a 	sub	r3,r3,r2
 400040c:	e0bffd17 	ldw	r2,-12(fp)
 4000410:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000414:	e0bffd17 	ldw	r2,-12(fp)
 4000418:	10c00317 	ldw	r3,12(r2)
 400041c:	e0bfff17 	ldw	r2,-4(fp)
 4000420:	1887883a 	add	r3,r3,r2
 4000424:	e0bffd17 	ldw	r2,-12(fp)
 4000428:	10c00315 	stw	r3,12(r2)
}
 400042c:	0001883a 	nop
 4000430:	e037883a 	mov	sp,fp
 4000434:	df000017 	ldw	fp,0(sp)
 4000438:	dec00104 	addi	sp,sp,4
 400043c:	f800283a 	ret

04000440 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 4000440:	defffc04 	addi	sp,sp,-16
 4000444:	df000315 	stw	fp,12(sp)
 4000448:	df000304 	addi	fp,sp,12
 400044c:	e13ffd15 	stw	r4,-12(fp)
 4000450:	e17ffe15 	stw	r5,-8(fp)
 4000454:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 4000458:	e0bffd17 	ldw	r2,-12(fp)
 400045c:	10c00017 	ldw	r3,0(r2)
 4000460:	e0bffe17 	ldw	r2,-8(fp)
 4000464:	1887883a 	add	r3,r3,r2
 4000468:	e0bffd17 	ldw	r2,-12(fp)
 400046c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000470:	e0bffd17 	ldw	r2,-12(fp)
 4000474:	10c00117 	ldw	r3,4(r2)
 4000478:	e0bffe17 	ldw	r2,-8(fp)
 400047c:	1887883a 	add	r3,r3,r2
 4000480:	e0bffd17 	ldw	r2,-12(fp)
 4000484:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 4000488:	e0bffd17 	ldw	r2,-12(fp)
 400048c:	10c00217 	ldw	r3,8(r2)
 4000490:	e0bfff17 	ldw	r2,-4(fp)
 4000494:	1887883a 	add	r3,r3,r2
 4000498:	e0bffd17 	ldw	r2,-12(fp)
 400049c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 40004a0:	e0bffd17 	ldw	r2,-12(fp)
 40004a4:	10c00317 	ldw	r3,12(r2)
 40004a8:	e0bfff17 	ldw	r2,-4(fp)
 40004ac:	1887883a 	add	r3,r3,r2
 40004b0:	e0bffd17 	ldw	r2,-12(fp)
 40004b4:	10c00315 	stw	r3,12(r2)
}
 40004b8:	0001883a 	nop
 40004bc:	e037883a 	mov	sp,fp
 40004c0:	df000017 	ldw	fp,0(sp)
 40004c4:	dec00104 	addi	sp,sp,4
 40004c8:	f800283a 	ret

040004cc <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 40004cc:	defffd04 	addi	sp,sp,-12
 40004d0:	df000215 	stw	fp,8(sp)
 40004d4:	df000204 	addi	fp,sp,8
 40004d8:	e13ffe15 	stw	r4,-8(fp)
 40004dc:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 40004e0:	e0bfff17 	ldw	r2,-4(fp)
 40004e4:	10c00017 	ldw	r3,0(r2)
 40004e8:	e0bffe17 	ldw	r2,-8(fp)
 40004ec:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 40004f0:	e0bfff17 	ldw	r2,-4(fp)
 40004f4:	10c00117 	ldw	r3,4(r2)
 40004f8:	e0bffe17 	ldw	r2,-8(fp)
 40004fc:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000500:	e0bfff17 	ldw	r2,-4(fp)
 4000504:	10c00217 	ldw	r3,8(r2)
 4000508:	e0bffe17 	ldw	r2,-8(fp)
 400050c:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000510:	e0bfff17 	ldw	r2,-4(fp)
 4000514:	10c00317 	ldw	r3,12(r2)
 4000518:	e0bffe17 	ldw	r2,-8(fp)
 400051c:	10c00315 	stw	r3,12(r2)
}
 4000520:	0001883a 	nop
 4000524:	e037883a 	mov	sp,fp
 4000528:	df000017 	ldw	fp,0(sp)
 400052c:	dec00104 	addi	sp,sp,4
 4000530:	f800283a 	ret

04000534 <RectWidth>:

int RectWidth(RECT *rc){
 4000534:	defffe04 	addi	sp,sp,-8
 4000538:	df000115 	stw	fp,4(sp)
 400053c:	df000104 	addi	fp,sp,4
 4000540:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 4000544:	e0bfff17 	ldw	r2,-4(fp)
 4000548:	10c00117 	ldw	r3,4(r2)
 400054c:	e0bfff17 	ldw	r2,-4(fp)
 4000550:	10800017 	ldw	r2,0(r2)
 4000554:	1885c83a 	sub	r2,r3,r2
}
 4000558:	e037883a 	mov	sp,fp
 400055c:	df000017 	ldw	fp,0(sp)
 4000560:	dec00104 	addi	sp,sp,4
 4000564:	f800283a 	ret

04000568 <RectHeight>:

int RectHeight(RECT *rc){
 4000568:	defffe04 	addi	sp,sp,-8
 400056c:	df000115 	stw	fp,4(sp)
 4000570:	df000104 	addi	fp,sp,4
 4000574:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 4000578:	e0bfff17 	ldw	r2,-4(fp)
 400057c:	10c00317 	ldw	r3,12(r2)
 4000580:	e0bfff17 	ldw	r2,-4(fp)
 4000584:	10800217 	ldw	r2,8(r2)
 4000588:	1885c83a 	sub	r2,r3,r2
}
 400058c:	e037883a 	mov	sp,fp
 4000590:	df000017 	ldw	fp,0(sp)
 4000594:	dec00104 	addi	sp,sp,4
 4000598:	f800283a 	ret

0400059c <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 400059c:	defff904 	addi	sp,sp,-28
 40005a0:	dfc00615 	stw	ra,24(sp)
 40005a4:	df000515 	stw	fp,20(sp)
 40005a8:	df000504 	addi	fp,sp,20
 40005ac:	e13ffe15 	stw	r4,-8(fp)
 40005b0:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 40005b4:	e0bffe17 	ldw	r2,-8(fp)
 40005b8:	10c00017 	ldw	r3,0(r2)
 40005bc:	e0bfff17 	ldw	r2,-4(fp)
 40005c0:	10800017 	ldw	r2,0(r2)
 40005c4:	1885c83a 	sub	r2,r3,r2
 40005c8:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10c00117 	ldw	r3,4(r2)
 40005d4:	e0bfff17 	ldw	r2,-4(fp)
 40005d8:	10800117 	ldw	r2,4(r2)
 40005dc:	1885c83a 	sub	r2,r3,r2
 40005e0:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 40005e4:	e0fffb17 	ldw	r3,-20(fp)
 40005e8:	e0bffb17 	ldw	r2,-20(fp)
 40005ec:	1887383a 	mul	r3,r3,r2
 40005f0:	e13ffc17 	ldw	r4,-16(fp)
 40005f4:	e0bffc17 	ldw	r2,-16(fp)
 40005f8:	2085383a 	mul	r2,r4,r2
 40005fc:	1885883a 	add	r2,r3,r2
 4000600:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 4000604:	e13ffd17 	ldw	r4,-12(fp)
 4000608:	400b9580 	call	400b958 <__floatsidf>
 400060c:	100b883a 	mov	r5,r2
 4000610:	180d883a 	mov	r6,r3
 4000614:	2809883a 	mov	r4,r5
 4000618:	300b883a 	mov	r5,r6
 400061c:	40090540 	call	4009054 <sqrt>
 4000620:	100b883a 	mov	r5,r2
 4000624:	180d883a 	mov	r6,r3
 4000628:	2809883a 	mov	r4,r5
 400062c:	300b883a 	mov	r5,r6
 4000630:	400b8d80 	call	400b8d8 <__fixdfsi>
 4000634:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 4000638:	e0bffd17 	ldw	r2,-12(fp)
}
 400063c:	e037883a 	mov	sp,fp
 4000640:	dfc00117 	ldw	ra,4(sp)
 4000644:	df000017 	ldw	fp,0(sp)
 4000648:	dec00204 	addi	sp,sp,8
 400064c:	f800283a 	ret

04000650 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 4000650:	defffd04 	addi	sp,sp,-12
 4000654:	df000215 	stw	fp,8(sp)
 4000658:	df000204 	addi	fp,sp,8
 400065c:	e13ffe15 	stw	r4,-8(fp)
 4000660:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 4000664:	e0bfff17 	ldw	r2,-4(fp)
 4000668:	10c00017 	ldw	r3,0(r2)
 400066c:	e0bffe17 	ldw	r2,-8(fp)
 4000670:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10c00117 	ldw	r3,4(r2)
 400067c:	e0bffe17 	ldw	r2,-8(fp)
 4000680:	10c00115 	stw	r3,4(r2)
}
 4000684:	0001883a 	nop
 4000688:	e037883a 	mov	sp,fp
 400068c:	df000017 	ldw	fp,0(sp)
 4000690:	dec00104 	addi	sp,sp,4
 4000694:	f800283a 	ret

04000698 <vid_clean_screen>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4000698:	defffa04 	addi	sp,sp,-24
 400069c:	dfc00515 	stw	ra,20(sp)
 40006a0:	df000415 	stw	fp,16(sp)
 40006a4:	df000404 	addi	fp,sp,16
 40006a8:	e13ffe15 	stw	r4,-8(fp)
 40006ac:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 40006b0:	e0bffe17 	ldw	r2,-8(fp)
 40006b4:	10c00517 	ldw	r3,20(r2)
 40006b8:	e0bffe17 	ldw	r2,-8(fp)
 40006bc:	11000617 	ldw	r4,24(r2)
 40006c0:	e0bffe17 	ldw	r2,-8(fp)
 40006c4:	d8800115 	stw	r2,4(sp)
 40006c8:	e0bfff17 	ldw	r2,-4(fp)
 40006cc:	d8800015 	stw	r2,0(sp)
 40006d0:	200f883a 	mov	r7,r4
 40006d4:	180d883a 	mov	r6,r3
 40006d8:	000b883a 	mov	r5,zero
 40006dc:	0009883a 	mov	r4,zero
 40006e0:	40013240 	call	4001324 <vid_paint_block>
}
 40006e4:	0001883a 	nop
 40006e8:	e037883a 	mov	sp,fp
 40006ec:	dfc00117 	ldw	ra,4(sp)
 40006f0:	df000017 	ldw	fp,0(sp)
 40006f4:	dec00204 	addi	sp,sp,8
 40006f8:	f800283a 	ret

040006fc <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 40006fc:	defff704 	addi	sp,sp,-36
 4000700:	dfc00815 	stw	ra,32(sp)
 4000704:	df000715 	stw	fp,28(sp)
 4000708:	df000704 	addi	fp,sp,28
 400070c:	e13ffc15 	stw	r4,-16(fp)
 4000710:	e17ffd15 	stw	r5,-12(fp)
 4000714:	e1bffe15 	stw	r6,-8(fp)
 4000718:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 400071c:	e0fffd17 	ldw	r3,-12(fp)
 4000720:	e0bfff17 	ldw	r2,-4(fp)
 4000724:	1880121e 	bne	r3,r2,4000770 <vid_draw_line+0x74>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4000728:	e0bffc17 	ldw	r2,-16(fp)
 400072c:	10ffffcc 	andi	r3,r2,65535
 4000730:	18e0001c 	xori	r3,r3,32768
 4000734:	18e00004 	addi	r3,r3,-32768
 4000738:	e0bffe17 	ldw	r2,-8(fp)
 400073c:	113fffcc 	andi	r4,r2,65535
 4000740:	2120001c 	xori	r4,r4,32768
 4000744:	21200004 	addi	r4,r4,-32768
 4000748:	e0bffd17 	ldw	r2,-12(fp)
 400074c:	117fffcc 	andi	r5,r2,65535
 4000750:	e0800417 	ldw	r2,16(fp)
 4000754:	d8800015 	stw	r2,0(sp)
 4000758:	e1c00317 	ldw	r7,12(fp)
 400075c:	280d883a 	mov	r6,r5
 4000760:	200b883a 	mov	r5,r4
 4000764:	1809883a 	mov	r4,r3
 4000768:	40015680 	call	4001568 <vid_draw_horiz_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 400076c:	00001006 	br	40007b0 <vid_draw_line+0xb4>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4000770:	e0bffc17 	ldw	r2,-16(fp)
 4000774:	113fffcc 	andi	r4,r2,65535
 4000778:	e0bffd17 	ldw	r2,-12(fp)
 400077c:	117fffcc 	andi	r5,r2,65535
 4000780:	e0bffe17 	ldw	r2,-8(fp)
 4000784:	11bfffcc 	andi	r6,r2,65535
 4000788:	e0bfff17 	ldw	r2,-4(fp)
 400078c:	11ffffcc 	andi	r7,r2,65535
 4000790:	e0800217 	ldw	r2,8(fp)
 4000794:	10bfffcc 	andi	r2,r2,65535
 4000798:	e0c00417 	ldw	r3,16(fp)
 400079c:	d8c00215 	stw	r3,8(sp)
 40007a0:	e0c00317 	ldw	r3,12(fp)
 40007a4:	d8c00115 	stw	r3,4(sp)
 40007a8:	d8800015 	stw	r2,0(sp)
 40007ac:	4001c480 	call	4001c48 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 40007b0:	0001883a 	nop
 40007b4:	e037883a 	mov	sp,fp
 40007b8:	dfc00117 	ldw	ra,4(sp)
 40007bc:	df000017 	ldw	fp,0(sp)
 40007c0:	dec00204 	addi	sp,sp,8
 40007c4:	f800283a 	ret

040007c8 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 40007c8:	defffd04 	addi	sp,sp,-12
 40007cc:	dfc00215 	stw	ra,8(sp)
 40007d0:	df000115 	stw	fp,4(sp)
 40007d4:	df000104 	addi	fp,sp,4
 40007d8:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 40007dc:	e0bfff17 	ldw	r2,-4(fp)
 40007e0:	10800517 	ldw	r2,20(r2)
 40007e4:	1009883a 	mov	r4,r2
 40007e8:	400babc0 	call	400babc <free>
  free(scroll);
 40007ec:	e13fff17 	ldw	r4,-4(fp)
 40007f0:	400babc0 	call	400babc <free>
}
 40007f4:	0001883a 	nop
 40007f8:	e037883a 	mov	sp,fp
 40007fc:	dfc00117 	ldw	ra,4(sp)
 4000800:	df000017 	ldw	fp,0(sp)
 4000804:	dec00204 	addi	sp,sp,8
 4000808:	f800283a 	ret

0400080c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 400080c:	defff904 	addi	sp,sp,-28
 4000810:	dfc00615 	stw	ra,24(sp)
 4000814:	df000515 	stw	fp,20(sp)
 4000818:	df000504 	addi	fp,sp,20
 400081c:	e13ffc15 	stw	r4,-16(fp)
 4000820:	e17ffd15 	stw	r5,-12(fp)
 4000824:	e1bffe15 	stw	r6,-8(fp)
 4000828:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 400082c:	01000f04 	movi	r4,60
 4000830:	400baa80 	call	400baa8 <malloc>
 4000834:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 4000838:	e0bffb17 	ldw	r2,-20(fp)
 400083c:	e0fffc17 	ldw	r3,-16(fp)
 4000840:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 4000844:	e0bffb17 	ldw	r2,-20(fp)
 4000848:	e0fffd17 	ldw	r3,-12(fp)
 400084c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 4000850:	e0bffb17 	ldw	r2,-20(fp)
 4000854:	e0fffe17 	ldw	r3,-8(fp)
 4000858:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 400085c:	e0bffb17 	ldw	r2,-20(fp)
 4000860:	e0ffff17 	ldw	r3,-4(fp)
 4000864:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 4000868:	e0bffb17 	ldw	r2,-20(fp)
 400086c:	e0c00217 	ldw	r3,8(fp)
 4000870:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 4000874:	e1000517 	ldw	r4,20(fp)
 4000878:	400c8540 	call	400c854 <strlen>
 400087c:	10800084 	addi	r2,r2,2
 4000880:	1009883a 	mov	r4,r2
 4000884:	400baa80 	call	400baa8 <malloc>
 4000888:	1007883a 	mov	r3,r2
 400088c:	e0bffb17 	ldw	r2,-20(fp)
 4000890:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4000894:	e0bffb17 	ldw	r2,-20(fp)
 4000898:	10800517 	ldw	r2,20(r2)
 400089c:	e1400517 	ldw	r5,20(fp)
 40008a0:	1009883a 	mov	r4,r2
 40008a4:	400c7c40 	call	400c7c4 <strcpy>
  scroll->font = font;
 40008a8:	e0bffb17 	ldw	r2,-20(fp)
 40008ac:	e0c00317 	ldw	r3,12(fp)
 40008b0:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 40008b4:	e0bffb17 	ldw	r2,-20(fp)
 40008b8:	e0c00417 	ldw	r3,16(fp)
 40008bc:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40008c0:	d0a02217 	ldw	r2,-32632(gp)
  scroll->ticks_at_last_move = alt_nticks();
 40008c4:	1007883a 	mov	r3,r2
 40008c8:	e0bffb17 	ldw	r2,-20(fp)
 40008cc:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 40008d0:	e0bffb17 	ldw	r2,-20(fp)
 40008d4:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 40008d8:	e0bffb17 	ldw	r2,-20(fp)
 40008dc:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 40008e0:	e0bffb17 	ldw	r2,-20(fp)
 40008e4:	10c00217 	ldw	r3,8(r2)
 40008e8:	e0bffb17 	ldw	r2,-20(fp)
 40008ec:	10800017 	ldw	r2,0(r2)
 40008f0:	1887c83a 	sub	r3,r3,r2
 40008f4:	e0bffb17 	ldw	r2,-20(fp)
 40008f8:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 40008fc:	e1000517 	ldw	r4,20(fp)
 4000900:	400c8540 	call	400c854 <strlen>
 4000904:	1007883a 	mov	r3,r2
 4000908:	e0bffb17 	ldw	r2,-20(fp)
 400090c:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 4000910:	e0bffb17 	ldw	r2,-20(fp)
 4000914:	10800c17 	ldw	r2,48(r2)
 4000918:	100690fa 	slli	r3,r2,3
 400091c:	e0bffb17 	ldw	r2,-20(fp)
 4000920:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 4000924:	e0bffb17 	ldw	r2,-20(fp)
 4000928:	10c00b17 	ldw	r3,44(r2)
 400092c:	e0bffb17 	ldw	r2,-20(fp)
 4000930:	10800e17 	ldw	r2,56(r2)
 4000934:	1887883a 	add	r3,r3,r2
 4000938:	e0bffb17 	ldw	r2,-20(fp)
 400093c:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 4000940:	e0bffb17 	ldw	r2,-20(fp)
  
}
 4000944:	e037883a 	mov	sp,fp
 4000948:	dfc00117 	ldw	ra,4(sp)
 400094c:	df000017 	ldw	fp,0(sp)
 4000950:	dec00204 	addi	sp,sp,8
 4000954:	f800283a 	ret

04000958 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 4000958:	deffec04 	addi	sp,sp,-80
 400095c:	dfc01315 	stw	ra,76(sp)
 4000960:	df001215 	stw	fp,72(sp)
 4000964:	dc401115 	stw	r17,68(sp)
 4000968:	dc001015 	stw	r16,64(sp)
 400096c:	df001204 	addi	fp,sp,72
 4000970:	e13ffc15 	stw	r4,-16(fp)
 4000974:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 4000978:	00800044 	movi	r2,1
 400097c:	e0bff605 	stb	r2,-40(fp)
 4000980:	d4202217 	ldw	r16,-32632(gp)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4000984:	e0bffc17 	ldw	r2,-16(fp)
 4000988:	10800817 	ldw	r2,32(r2)
 400098c:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4000990:	d0a02117 	ldw	r2,-32636(gp)
 4000994:	e0fffc17 	ldw	r3,-16(fp)
 4000998:	18c00717 	ldw	r3,28(r3)
 400099c:	10c5383a 	mul	r2,r2,r3
 40009a0:	0140fa04 	movi	r5,1000
 40009a4:	1009883a 	mov	r4,r2
 40009a8:	40095800 	call	4009580 <__udivsi3>
 40009ac:	8885883a 	add	r2,r17,r2
 40009b0:	8080b936 	bltu	r16,r2,4000c98 <vid_scroll_string+0x340>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40009b4:	d0a02217 	ldw	r2,-32632(gp)
    scroll->ticks_at_last_move = alt_nticks();
 40009b8:	1007883a 	mov	r3,r2
 40009bc:	e0bffc17 	ldw	r2,-16(fp)
 40009c0:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 40009c4:	e0bffc17 	ldw	r2,-16(fp)
 40009c8:	10800a03 	ldbu	r2,40(r2)
 40009cc:	10803fcc 	andi	r2,r2,255
 40009d0:	1080201c 	xori	r2,r2,128
 40009d4:	10bfe004 	addi	r2,r2,-128
 40009d8:	1000061e 	bne	r2,zero,40009f4 <vid_scroll_string+0x9c>
      scroll->text_scroll_index = 0;
 40009dc:	e0bffc17 	ldw	r2,-16(fp)
 40009e0:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 40009e4:	e0bffc17 	ldw	r2,-16(fp)
 40009e8:	00c00044 	movi	r3,1
 40009ec:	10c00a05 	stb	r3,40(r2)
 40009f0:	00000e06 	br	4000a2c <vid_scroll_string+0xd4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 40009f4:	e0bffc17 	ldw	r2,-16(fp)
 40009f8:	10c00917 	ldw	r3,36(r2)
 40009fc:	e0bffc17 	ldw	r2,-16(fp)
 4000a00:	10800d17 	ldw	r2,52(r2)
 4000a04:	18800316 	blt	r3,r2,4000a14 <vid_scroll_string+0xbc>
      scroll->text_scroll_started = 0;
 4000a08:	e0bffc17 	ldw	r2,-16(fp)
 4000a0c:	10000a05 	stb	zero,40(r2)
 4000a10:	00000606 	br	4000a2c <vid_scroll_string+0xd4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 4000a14:	e0bffc17 	ldw	r2,-16(fp)
 4000a18:	10c00917 	ldw	r3,36(r2)
 4000a1c:	e0bff607 	ldb	r2,-40(fp)
 4000a20:	1887883a 	add	r3,r3,r2
 4000a24:	e0bffc17 	ldw	r2,-16(fp)
 4000a28:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 4000a2c:	e0bffc17 	ldw	r2,-16(fp)
 4000a30:	10c00917 	ldw	r3,36(r2)
 4000a34:	e0bffc17 	ldw	r2,-16(fp)
 4000a38:	10800b17 	ldw	r2,44(r2)
 4000a3c:	18800a0e 	bge	r3,r2,4000a68 <vid_scroll_string+0x110>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 4000a40:	e0bffc17 	ldw	r2,-16(fp)
 4000a44:	10c00017 	ldw	r3,0(r2)
 4000a48:	e0bffc17 	ldw	r2,-16(fp)
 4000a4c:	10800b17 	ldw	r2,44(r2)
 4000a50:	1887883a 	add	r3,r3,r2
 4000a54:	e0bffc17 	ldw	r2,-16(fp)
 4000a58:	10800917 	ldw	r2,36(r2)
 4000a5c:	1885c83a 	sub	r2,r3,r2
 4000a60:	e0bff115 	stw	r2,-60(fp)
 4000a64:	00000306 	br	4000a74 <vid_scroll_string+0x11c>
    } else {
      x_start = scroll->hbegin;
 4000a68:	e0bffc17 	ldw	r2,-16(fp)
 4000a6c:	10800017 	ldw	r2,0(r2)
 4000a70:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4000a74:	e0bffc17 	ldw	r2,-16(fp)
 4000a78:	10800e17 	ldw	r2,56(r2)
 4000a7c:	e0fffc17 	ldw	r3,-16(fp)
 4000a80:	18c00917 	ldw	r3,36(r3)
 4000a84:	1880040e 	bge	r3,r2,4000a98 <vid_scroll_string+0x140>
      x_end = scroll->hend;
 4000a88:	e0bffc17 	ldw	r2,-16(fp)
 4000a8c:	10800217 	ldw	r2,8(r2)
 4000a90:	e0bff215 	stw	r2,-56(fp)
 4000a94:	00000906 	br	4000abc <vid_scroll_string+0x164>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 4000a98:	e0bffc17 	ldw	r2,-16(fp)
 4000a9c:	10c00217 	ldw	r3,8(r2)
 4000aa0:	e0bffc17 	ldw	r2,-16(fp)
 4000aa4:	10800917 	ldw	r2,36(r2)
 4000aa8:	1887c83a 	sub	r3,r3,r2
 4000aac:	e0bffc17 	ldw	r2,-16(fp)
 4000ab0:	10800e17 	ldw	r2,56(r2)
 4000ab4:	1885883a 	add	r2,r3,r2
 4000ab8:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4000abc:	e0bff117 	ldw	r2,-60(fp)
 4000ac0:	e0bff315 	stw	r2,-52(fp)
 4000ac4:	00006006 	br	4000c48 <vid_scroll_string+0x2f0>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 4000ac8:	e0bffc17 	ldw	r2,-16(fp)
 4000acc:	10c00917 	ldw	r3,36(r2)
 4000ad0:	e0bffc17 	ldw	r2,-16(fp)
 4000ad4:	10800b17 	ldw	r2,44(r2)
 4000ad8:	1880050e 	bge	r3,r2,4000af0 <vid_scroll_string+0x198>
        string_x_index = (x_index - x_start);
 4000adc:	e0fff317 	ldw	r3,-52(fp)
 4000ae0:	e0bff117 	ldw	r2,-60(fp)
 4000ae4:	1885c83a 	sub	r2,r3,r2
 4000ae8:	e0bff415 	stw	r2,-48(fp)
 4000aec:	00000a06 	br	4000b18 <vid_scroll_string+0x1c0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 4000af0:	e0bffc17 	ldw	r2,-16(fp)
 4000af4:	10c00917 	ldw	r3,36(r2)
 4000af8:	e0bffc17 	ldw	r2,-16(fp)
 4000afc:	10800b17 	ldw	r2,44(r2)
 4000b00:	1887c83a 	sub	r3,r3,r2
 4000b04:	e0bff317 	ldw	r2,-52(fp)
 4000b08:	1887883a 	add	r3,r3,r2
 4000b0c:	e0bff117 	ldw	r2,-60(fp)
 4000b10:	1885c83a 	sub	r2,r3,r2
 4000b14:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 4000b18:	e0bff417 	ldw	r2,-48(fp)
 4000b1c:	1000010e 	bge	r2,zero,4000b24 <vid_scroll_string+0x1cc>
 4000b20:	108001c4 	addi	r2,r2,7
 4000b24:	1005d0fa 	srai	r2,r2,3
 4000b28:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 4000b2c:	e0bffc17 	ldw	r2,-16(fp)
 4000b30:	10c00517 	ldw	r3,20(r2)
 4000b34:	e0bff717 	ldw	r2,-36(fp)
 4000b38:	1885883a 	add	r2,r3,r2
 4000b3c:	10800003 	ldbu	r2,0(r2)
 4000b40:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 4000b44:	e0fff417 	ldw	r3,-48(fp)
 4000b48:	00a00034 	movhi	r2,32768
 4000b4c:	108001c4 	addi	r2,r2,7
 4000b50:	1884703a 	and	r2,r3,r2
 4000b54:	1000040e 	bge	r2,zero,4000b68 <vid_scroll_string+0x210>
 4000b58:	10bfffc4 	addi	r2,r2,-1
 4000b5c:	00fffe04 	movi	r3,-8
 4000b60:	10c4b03a 	or	r2,r2,r3
 4000b64:	10800044 	addi	r2,r2,1
 4000b68:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 4000b6c:	00c02004 	movi	r3,128
 4000b70:	e0bff917 	ldw	r2,-28(fp)
 4000b74:	1884d83a 	srl	r2,r3,r2
 4000b78:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 4000b7c:	e0bffc17 	ldw	r2,-16(fp)
 4000b80:	10800617 	ldw	r2,24(r2)
 4000b84:	e0fff807 	ldb	r3,-32(fp)
 4000b88:	18fff804 	addi	r3,r3,-32
 4000b8c:	18c002e4 	muli	r3,r3,11
 4000b90:	10c5883a 	add	r2,r2,r3
 4000b94:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4000b98:	e03ff515 	stw	zero,-44(fp)
 4000b9c:	00002406 	br	4000c30 <vid_scroll_string+0x2d8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 4000ba0:	e0bff517 	ldw	r2,-44(fp)
 4000ba4:	e0fffb17 	ldw	r3,-20(fp)
 4000ba8:	1885883a 	add	r2,r3,r2
 4000bac:	10c00003 	ldbu	r3,0(r2)
 4000bb0:	e0bffa03 	ldbu	r2,-24(fp)
 4000bb4:	1884703a 	and	r2,r3,r2
 4000bb8:	10803fcc 	andi	r2,r2,255
 4000bbc:	1080201c 	xori	r2,r2,128
 4000bc0:	10bfe004 	addi	r2,r2,-128
 4000bc4:	10000c26 	beq	r2,zero,4000bf8 <vid_scroll_string+0x2a0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 4000bc8:	e0bffc17 	ldw	r2,-16(fp)
 4000bcc:	10c00117 	ldw	r3,4(r2)
 4000bd0:	e0bff517 	ldw	r2,-44(fp)
 4000bd4:	1887883a 	add	r3,r3,r2
 4000bd8:	e0bffc17 	ldw	r2,-16(fp)
 4000bdc:	10800317 	ldw	r2,12(r2)
 4000be0:	e1fffd17 	ldw	r7,-12(fp)
 4000be4:	100d883a 	mov	r6,r2
 4000be8:	180b883a 	mov	r5,r3
 4000bec:	e13ff317 	ldw	r4,-52(fp)
 4000bf0:	40011240 	call	4001124 <vid_set_pixel>
 4000bf4:	00000b06 	br	4000c24 <vid_scroll_string+0x2cc>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 4000bf8:	e0bffc17 	ldw	r2,-16(fp)
 4000bfc:	10c00117 	ldw	r3,4(r2)
 4000c00:	e0bff517 	ldw	r2,-44(fp)
 4000c04:	1887883a 	add	r3,r3,r2
 4000c08:	e0bffc17 	ldw	r2,-16(fp)
 4000c0c:	10800417 	ldw	r2,16(r2)
 4000c10:	e1fffd17 	ldw	r7,-12(fp)
 4000c14:	100d883a 	mov	r6,r2
 4000c18:	180b883a 	mov	r5,r3
 4000c1c:	e13ff317 	ldw	r4,-52(fp)
 4000c20:	40011240 	call	4001124 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4000c24:	e0bff517 	ldw	r2,-44(fp)
 4000c28:	10800044 	addi	r2,r2,1
 4000c2c:	e0bff515 	stw	r2,-44(fp)
 4000c30:	e0bff517 	ldw	r2,-44(fp)
 4000c34:	108002d0 	cmplti	r2,r2,11
 4000c38:	103fd91e 	bne	r2,zero,4000ba0 <__alt_mem_epcs_flash_controller_0+0xfafffba0>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4000c3c:	e0bff317 	ldw	r2,-52(fp)
 4000c40:	10800044 	addi	r2,r2,1
 4000c44:	e0bff315 	stw	r2,-52(fp)
 4000c48:	e0fff317 	ldw	r3,-52(fp)
 4000c4c:	e0bff217 	ldw	r2,-56(fp)
 4000c50:	18bf9d16 	blt	r3,r2,4000ac8 <__alt_mem_epcs_flash_controller_0+0xfafffac8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 4000c54:	e0bffc17 	ldw	r2,-16(fp)
 4000c58:	11000117 	ldw	r4,4(r2)
 4000c5c:	e0bffc17 	ldw	r2,-16(fp)
 4000c60:	10800117 	ldw	r2,4(r2)
 4000c64:	11400284 	addi	r5,r2,10
 4000c68:	e0bffc17 	ldw	r2,-16(fp)
 4000c6c:	10800417 	ldw	r2,16(r2)
 4000c70:	e0fffd17 	ldw	r3,-12(fp)
 4000c74:	d8c00215 	stw	r3,8(sp)
 4000c78:	d8800115 	stw	r2,4(sp)
 4000c7c:	00800044 	movi	r2,1
 4000c80:	d8800015 	stw	r2,0(sp)
 4000c84:	280f883a 	mov	r7,r5
 4000c88:	e1bff217 	ldw	r6,-56(fp)
 4000c8c:	200b883a 	mov	r5,r4
 4000c90:	e13ff217 	ldw	r4,-56(fp)
 4000c94:	40006fc0 	call	40006fc <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 4000c98:	0005883a 	mov	r2,zero
}
 4000c9c:	e6fffe04 	addi	sp,fp,-8
 4000ca0:	dfc00317 	ldw	ra,12(sp)
 4000ca4:	df000217 	ldw	fp,8(sp)
 4000ca8:	dc400117 	ldw	r17,4(sp)
 4000cac:	dc000017 	ldw	r16,0(sp)
 4000cb0:	dec00404 	addi	sp,sp,16
 4000cb4:	f800283a 	ret

04000cb8 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 4000cb8:	defff504 	addi	sp,sp,-44
 4000cbc:	dfc00a15 	stw	ra,40(sp)
 4000cc0:	df000915 	stw	fp,36(sp)
 4000cc4:	df000904 	addi	fp,sp,36
 4000cc8:	e13ffc15 	stw	r4,-16(fp)
 4000ccc:	e17ffd15 	stw	r5,-12(fp)
 4000cd0:	e1bffe15 	stw	r6,-8(fp)
 4000cd4:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 4000cd8:	e0800217 	ldw	r2,8(fp)
 4000cdc:	00803716 	blt	zero,r2,4000dbc <vid_move_block+0x104>
 4000ce0:	e0800317 	ldw	r2,12(fp)
 4000ce4:	00803516 	blt	zero,r2,4000dbc <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4000ce8:	e0bffd17 	ldw	r2,-12(fp)
 4000cec:	e0bff815 	stw	r2,-32(fp)
 4000cf0:	00002f06 	br	4000db0 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 4000cf4:	e0fff817 	ldw	r3,-32(fp)
 4000cf8:	e0800317 	ldw	r2,12(fp)
 4000cfc:	1885883a 	add	r2,r3,r2
 4000d00:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 4000d04:	e0bffc17 	ldw	r2,-16(fp)
 4000d08:	e0bff715 	stw	r2,-36(fp)
 4000d0c:	00002206 	br	4000d98 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 4000d10:	e0fff717 	ldw	r3,-36(fp)
 4000d14:	e0800217 	ldw	r2,8(fp)
 4000d18:	1885883a 	add	r2,r3,r2
 4000d1c:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 4000d20:	e1800517 	ldw	r6,20(fp)
 4000d24:	e17ff817 	ldw	r5,-32(fp)
 4000d28:	e13ff717 	ldw	r4,-36(fp)
 4000d2c:	40012b00 	call	40012b0 <vid_get_pixel>
 4000d30:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 4000d34:	e0bffb0f 	ldh	r2,-20(fp)
 4000d38:	e1c00517 	ldw	r7,20(fp)
 4000d3c:	100d883a 	mov	r6,r2
 4000d40:	e17ff917 	ldw	r5,-28(fp)
 4000d44:	e13ffa17 	ldw	r4,-24(fp)
 4000d48:	40011240 	call	4001124 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4000d4c:	e0fffe17 	ldw	r3,-8(fp)
 4000d50:	e0800217 	ldw	r2,8(fp)
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	e0fff717 	ldw	r3,-36(fp)
 4000d5c:	1880050e 	bge	r3,r2,4000d74 <vid_move_block+0xbc>
 4000d60:	e0ffff17 	ldw	r3,-4(fp)
 4000d64:	e0800317 	ldw	r2,12(fp)
 4000d68:	1885883a 	add	r2,r3,r2
 4000d6c:	e0fff817 	ldw	r3,-32(fp)
 4000d70:	18800616 	blt	r3,r2,4000d8c <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4000d74:	e0800417 	ldw	r2,16(fp)
 4000d78:	e1c00517 	ldw	r7,20(fp)
 4000d7c:	100d883a 	mov	r6,r2
 4000d80:	e17ff817 	ldw	r5,-32(fp)
 4000d84:	e13ff717 	ldw	r4,-36(fp)
 4000d88:	40011240 	call	4001124 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 4000d8c:	e0bff717 	ldw	r2,-36(fp)
 4000d90:	10800044 	addi	r2,r2,1
 4000d94:	e0bff715 	stw	r2,-36(fp)
 4000d98:	e0fff717 	ldw	r3,-36(fp)
 4000d9c:	e0bffe17 	ldw	r2,-8(fp)
 4000da0:	18bfdb16 	blt	r3,r2,4000d10 <__alt_mem_epcs_flash_controller_0+0xfafffd10>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 4000da4:	e0bff817 	ldw	r2,-32(fp)
 4000da8:	10800044 	addi	r2,r2,1
 4000dac:	e0bff815 	stw	r2,-32(fp)
 4000db0:	e0fff817 	ldw	r3,-32(fp)
 4000db4:	e0bfff17 	ldw	r2,-4(fp)
 4000db8:	18bfce16 	blt	r3,r2,4000cf4 <__alt_mem_epcs_flash_controller_0+0xfafffcf4>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 4000dbc:	0005883a 	mov	r2,zero
}
 4000dc0:	e037883a 	mov	sp,fp
 4000dc4:	dfc00117 	ldw	ra,4(sp)
 4000dc8:	df000017 	ldw	fp,0(sp)
 4000dcc:	dec00204 	addi	sp,sp,8
 4000dd0:	f800283a 	ret

04000dd4 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 4000dd4:	defff604 	addi	sp,sp,-40
 4000dd8:	dfc00915 	stw	ra,36(sp)
 4000ddc:	df000815 	stw	fp,32(sp)
 4000de0:	df000804 	addi	fp,sp,32
 4000de4:	e13ffc15 	stw	r4,-16(fp)
 4000de8:	e17ffd15 	stw	r5,-12(fp)
 4000dec:	e1bffe15 	stw	r6,-8(fp)
 4000df0:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4000df4:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4000df8:	e0bffc17 	ldw	r2,-16(fp)
 4000dfc:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000e00:	00002806 	br	4000ea4 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 4000e04:	e0bffa17 	ldw	r2,-24(fp)
 4000e08:	e0c00317 	ldw	r3,12(fp)
 4000e0c:	1885883a 	add	r2,r3,r2
 4000e10:	10800003 	ldbu	r2,0(r2)
 4000e14:	10803fcc 	andi	r2,r2,255
 4000e18:	1080201c 	xori	r2,r2,128
 4000e1c:	10bfe004 	addi	r2,r2,-128
 4000e20:	10800298 	cmpnei	r2,r2,10
 4000e24:	1000091e 	bne	r2,zero,4000e4c <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 4000e28:	e0bffb17 	ldw	r2,-20(fp)
 4000e2c:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 4000e30:	e0bffd17 	ldw	r2,-12(fp)
 4000e34:	10800304 	addi	r2,r2,12
 4000e38:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4000e3c:	e0bffa17 	ldw	r2,-24(fp)
 4000e40:	10800044 	addi	r2,r2,1
 4000e44:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4000e48:	00001606 	br	4000ea4 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4000e4c:	e0bffa17 	ldw	r2,-24(fp)
 4000e50:	e0c00317 	ldw	r3,12(fp)
 4000e54:	1885883a 	add	r2,r3,r2
 4000e58:	10800003 	ldbu	r2,0(r2)
 4000e5c:	10c03fcc 	andi	r3,r2,255
 4000e60:	18c0201c 	xori	r3,r3,128
 4000e64:	18ffe004 	addi	r3,r3,-128
 4000e68:	e0800217 	ldw	r2,8(fp)
 4000e6c:	d8800115 	stw	r2,4(sp)
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	d8800015 	stw	r2,0(sp)
 4000e78:	180f883a 	mov	r7,r3
 4000e7c:	e1bffe17 	ldw	r6,-8(fp)
 4000e80:	e17ffd17 	ldw	r5,-12(fp)
 4000e84:	e13ffc17 	ldw	r4,-16(fp)
 4000e88:	40010340 	call	4001034 <vid_print_char>
    i++;
 4000e8c:	e0bffa17 	ldw	r2,-24(fp)
 4000e90:	10800044 	addi	r2,r2,1
 4000e94:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 4000e98:	e0bffc17 	ldw	r2,-16(fp)
 4000e9c:	10800204 	addi	r2,r2,8
 4000ea0:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4000ea4:	e0bffa17 	ldw	r2,-24(fp)
 4000ea8:	e0c00317 	ldw	r3,12(fp)
 4000eac:	1885883a 	add	r2,r3,r2
 4000eb0:	10800003 	ldbu	r2,0(r2)
 4000eb4:	10803fcc 	andi	r2,r2,255
 4000eb8:	1080201c 	xori	r2,r2,128
 4000ebc:	10bfe004 	addi	r2,r2,-128
 4000ec0:	103fd01e 	bne	r2,zero,4000e04 <__alt_mem_epcs_flash_controller_0+0xfafffe04>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 4000ec4:	0005883a 	mov	r2,zero
}
 4000ec8:	e037883a 	mov	sp,fp
 4000ecc:	dfc00117 	ldw	ra,4(sp)
 4000ed0:	df000017 	ldw	fp,0(sp)
 4000ed4:	dec00204 	addi	sp,sp,8
 4000ed8:	f800283a 	ret

04000edc <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 4000edc:	defff704 	addi	sp,sp,-36
 4000ee0:	dfc00815 	stw	ra,32(sp)
 4000ee4:	df000715 	stw	fp,28(sp)
 4000ee8:	df000704 	addi	fp,sp,28
 4000eec:	e13ffc15 	stw	r4,-16(fp)
 4000ef0:	e17ffd15 	stw	r5,-12(fp)
 4000ef4:	e1bffe15 	stw	r6,-8(fp)
 4000ef8:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4000efc:	e0800317 	ldw	r2,12(fp)
 4000f00:	10000a26 	beq	r2,zero,4000f2c <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 4000f04:	e0800417 	ldw	r2,16(fp)
 4000f08:	d8800115 	stw	r2,4(sp)
 4000f0c:	e0800217 	ldw	r2,8(fp)
 4000f10:	d8800015 	stw	r2,0(sp)
 4000f14:	e1ffff17 	ldw	r7,-4(fp)
 4000f18:	e1bffe17 	ldw	r6,-8(fp)
 4000f1c:	e17ffd17 	ldw	r5,-12(fp)
 4000f20:	e13ffc17 	ldw	r4,-16(fp)
 4000f24:	40013240 	call	4001324 <vid_paint_block>
 4000f28:	00003c06 	br	400101c <vid_draw_box+0x140>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4000f2c:	e0bfff17 	ldw	r2,-4(fp)
 4000f30:	10ffffc4 	addi	r3,r2,-1
 4000f34:	e0800417 	ldw	r2,16(fp)
 4000f38:	d8800215 	stw	r2,8(sp)
 4000f3c:	e0800217 	ldw	r2,8(fp)
 4000f40:	d8800115 	stw	r2,4(sp)
 4000f44:	00800044 	movi	r2,1
 4000f48:	d8800015 	stw	r2,0(sp)
 4000f4c:	180f883a 	mov	r7,r3
 4000f50:	e1bffc17 	ldw	r6,-16(fp)
 4000f54:	e17ffd17 	ldw	r5,-12(fp)
 4000f58:	e13ffc17 	ldw	r4,-16(fp)
 4000f5c:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4000f60:	e0bffe17 	ldw	r2,-8(fp)
 4000f64:	10ffffc4 	addi	r3,r2,-1
 4000f68:	e0bffe17 	ldw	r2,-8(fp)
 4000f6c:	113fffc4 	addi	r4,r2,-1
 4000f70:	e0bfff17 	ldw	r2,-4(fp)
 4000f74:	117fffc4 	addi	r5,r2,-1
 4000f78:	e0800417 	ldw	r2,16(fp)
 4000f7c:	d8800215 	stw	r2,8(sp)
 4000f80:	e0800217 	ldw	r2,8(fp)
 4000f84:	d8800115 	stw	r2,4(sp)
 4000f88:	00800044 	movi	r2,1
 4000f8c:	d8800015 	stw	r2,0(sp)
 4000f90:	280f883a 	mov	r7,r5
 4000f94:	200d883a 	mov	r6,r4
 4000f98:	e17ffd17 	ldw	r5,-12(fp)
 4000f9c:	1809883a 	mov	r4,r3
 4000fa0:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4000fa4:	e0bffe17 	ldw	r2,-8(fp)
 4000fa8:	10ffffc4 	addi	r3,r2,-1
 4000fac:	e0800417 	ldw	r2,16(fp)
 4000fb0:	d8800215 	stw	r2,8(sp)
 4000fb4:	e0800217 	ldw	r2,8(fp)
 4000fb8:	d8800115 	stw	r2,4(sp)
 4000fbc:	00800044 	movi	r2,1
 4000fc0:	d8800015 	stw	r2,0(sp)
 4000fc4:	e1fffd17 	ldw	r7,-12(fp)
 4000fc8:	180d883a 	mov	r6,r3
 4000fcc:	e17ffd17 	ldw	r5,-12(fp)
 4000fd0:	e13ffc17 	ldw	r4,-16(fp)
 4000fd4:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 4000fd8:	e0bfff17 	ldw	r2,-4(fp)
 4000fdc:	10ffffc4 	addi	r3,r2,-1
 4000fe0:	e0bffe17 	ldw	r2,-8(fp)
 4000fe4:	113fffc4 	addi	r4,r2,-1
 4000fe8:	e0bfff17 	ldw	r2,-4(fp)
 4000fec:	117fffc4 	addi	r5,r2,-1
 4000ff0:	e0800417 	ldw	r2,16(fp)
 4000ff4:	d8800215 	stw	r2,8(sp)
 4000ff8:	e0800217 	ldw	r2,8(fp)
 4000ffc:	d8800115 	stw	r2,4(sp)
 4001000:	00800044 	movi	r2,1
 4001004:	d8800015 	stw	r2,0(sp)
 4001008:	280f883a 	mov	r7,r5
 400100c:	200d883a 	mov	r6,r4
 4001010:	180b883a 	mov	r5,r3
 4001014:	e13ffc17 	ldw	r4,-16(fp)
 4001018:	40006fc0 	call	40006fc <vid_draw_line>
  }

  return (0);
 400101c:	0005883a 	mov	r2,zero
}
 4001020:	e037883a 	mov	sp,fp
 4001024:	dfc00117 	ldw	ra,4(sp)
 4001028:	df000017 	ldw	fp,0(sp)
 400102c:	dec00204 	addi	sp,sp,8
 4001030:	f800283a 	ret

04001034 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4001034:	defff704 	addi	sp,sp,-36
 4001038:	dfc00815 	stw	ra,32(sp)
 400103c:	df000715 	stw	fp,28(sp)
 4001040:	df000704 	addi	fp,sp,28
 4001044:	e13ffc15 	stw	r4,-16(fp)
 4001048:	e17ffd15 	stw	r5,-12(fp)
 400104c:	e1bffe15 	stw	r6,-8(fp)
 4001050:	3805883a 	mov	r2,r7
 4001054:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4001058:	e0bfff03 	ldbu	r2,-4(fp)
 400105c:	10bff804 	addi	r2,r2,-32
 4001060:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001064:	e03ff915 	stw	zero,-28(fp)
 4001068:	00002506 	br	4001100 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 400106c:	e0bffb07 	ldb	r2,-20(fp)
 4001070:	108002e4 	muli	r2,r2,11
 4001074:	1007883a 	mov	r3,r2
 4001078:	e0bff917 	ldw	r2,-28(fp)
 400107c:	1885883a 	add	r2,r3,r2
 4001080:	e0c00217 	ldw	r3,8(fp)
 4001084:	1885883a 	add	r2,r3,r2
 4001088:	10800003 	ldbu	r2,0(r2)
 400108c:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4001090:	e03ffa15 	stw	zero,-24(fp)
 4001094:	00001406 	br	40010e8 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4001098:	e0fffb47 	ldb	r3,-19(fp)
 400109c:	01002004 	movi	r4,128
 40010a0:	e0bffa17 	ldw	r2,-24(fp)
 40010a4:	2085d83a 	sra	r2,r4,r2
 40010a8:	1884703a 	and	r2,r3,r2
 40010ac:	10000b26 	beq	r2,zero,40010dc <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 40010b0:	e0fffc17 	ldw	r3,-16(fp)
 40010b4:	e0bffa17 	ldw	r2,-24(fp)
 40010b8:	1889883a 	add	r4,r3,r2
 40010bc:	e0fffd17 	ldw	r3,-12(fp)
 40010c0:	e0bff917 	ldw	r2,-28(fp)
 40010c4:	1885883a 	add	r2,r3,r2
 40010c8:	e0fffe17 	ldw	r3,-8(fp)
 40010cc:	e1c00317 	ldw	r7,12(fp)
 40010d0:	180d883a 	mov	r6,r3
 40010d4:	100b883a 	mov	r5,r2
 40010d8:	40011240 	call	4001124 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 40010dc:	e0bffa17 	ldw	r2,-24(fp)
 40010e0:	10800044 	addi	r2,r2,1
 40010e4:	e0bffa15 	stw	r2,-24(fp)
 40010e8:	e0bffa17 	ldw	r2,-24(fp)
 40010ec:	10800210 	cmplti	r2,r2,8
 40010f0:	103fe91e 	bne	r2,zero,4001098 <__alt_mem_epcs_flash_controller_0+0xfb000098>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 40010f4:	e0bff917 	ldw	r2,-28(fp)
 40010f8:	10800044 	addi	r2,r2,1
 40010fc:	e0bff915 	stw	r2,-28(fp)
 4001100:	e0bff917 	ldw	r2,-28(fp)
 4001104:	108002d0 	cmplti	r2,r2,11
 4001108:	103fd81e 	bne	r2,zero,400106c <__alt_mem_epcs_flash_controller_0+0xfb00006c>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 400110c:	0005883a 	mov	r2,zero
}
 4001110:	e037883a 	mov	sp,fp
 4001114:	dfc00117 	ldw	ra,4(sp)
 4001118:	df000017 	ldw	fp,0(sp)
 400111c:	dec00204 	addi	sp,sp,8
 4001120:	f800283a 	ret

04001124 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 4001124:	defff904 	addi	sp,sp,-28
 4001128:	dfc00615 	stw	ra,24(sp)
 400112c:	df000515 	stw	fp,20(sp)
 4001130:	df000504 	addi	fp,sp,20
 4001134:	e13ffc15 	stw	r4,-16(fp)
 4001138:	e17ffd15 	stw	r5,-12(fp)
 400113c:	e1bffe15 	stw	r6,-8(fp)
 4001140:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 4001144:	e0bfff17 	ldw	r2,-4(fp)
 4001148:	10800417 	ldw	r2,16(r2)
 400114c:	10800818 	cmpnei	r2,r2,32
 4001150:	1000141e 	bne	r2,zero,40011a4 <vid_set_pixel+0x80>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
 4001154:	e13fff17 	ldw	r4,-4(fp)
 4001158:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 400115c:	1007883a 	mov	r3,r2
 4001160:	e0bfff17 	ldw	r2,-4(fp)
 4001164:	10800517 	ldw	r2,20(r2)
 4001168:	1085883a 	add	r2,r2,r2
 400116c:	1085883a 	add	r2,r2,r2
 4001170:	1009883a 	mov	r4,r2
 4001174:	e0bffd17 	ldw	r2,-12(fp)
 4001178:	2085383a 	mul	r2,r4,r2
 400117c:	1887883a 	add	r3,r3,r2
 4001180:	e0bffc17 	ldw	r2,-16(fp)
 4001184:	1085883a 	add	r2,r2,r2
 4001188:	1085883a 	add	r2,r2,r2
 400118c:	1885883a 	add	r2,r3,r2
 4001190:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 4001194:	e0bffb17 	ldw	r2,-20(fp)
 4001198:	e0fffe17 	ldw	r3,-8(fp)
 400119c:	10c00035 	stwio	r3,0(r2)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 40011a0:	00003d06 	br	4001298 <vid_set_pixel+0x174>
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
  }
  
  else if( display->color_depth == 24 )
 40011a4:	e0bfff17 	ldw	r2,-4(fp)
 40011a8:	10800417 	ldw	r2,16(r2)
 40011ac:	10800618 	cmpnei	r2,r2,24
 40011b0:	1000241e 	bne	r2,zero,4001244 <vid_set_pixel+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
 40011b4:	e13fff17 	ldw	r4,-4(fp)
 40011b8:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40011bc:	1009883a 	mov	r4,r2
 40011c0:	e0bfff17 	ldw	r2,-4(fp)
 40011c4:	10c00517 	ldw	r3,20(r2)
 40011c8:	1805883a 	mov	r2,r3
 40011cc:	1085883a 	add	r2,r2,r2
 40011d0:	10c7883a 	add	r3,r2,r3
 40011d4:	e0bffd17 	ldw	r2,-12(fp)
 40011d8:	1885383a 	mul	r2,r3,r2
 40011dc:	2089883a 	add	r4,r4,r2
 40011e0:	e0fffc17 	ldw	r3,-16(fp)
 40011e4:	1805883a 	mov	r2,r3
 40011e8:	1085883a 	add	r2,r2,r2
 40011ec:	10c5883a 	add	r2,r2,r3
 40011f0:	2085883a 	add	r2,r4,r2
 40011f4:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 40011f8:	e0bffb17 	ldw	r2,-20(fp)
 40011fc:	e0fffe17 	ldw	r3,-8(fp)
 4001200:	18c03fcc 	andi	r3,r3,255
 4001204:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 4001208:	e0bffb17 	ldw	r2,-20(fp)
 400120c:	10800044 	addi	r2,r2,1
 4001210:	1007883a 	mov	r3,r2
 4001214:	e0bffe17 	ldw	r2,-8(fp)
 4001218:	1004d23a 	srli	r2,r2,8
 400121c:	10803fcc 	andi	r2,r2,255
 4001220:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 4001224:	e0bffb17 	ldw	r2,-20(fp)
 4001228:	10800084 	addi	r2,r2,2
 400122c:	1007883a 	mov	r3,r2
 4001230:	e0bffe17 	ldw	r2,-8(fp)
 4001234:	1004d43a 	srli	r2,r2,16
 4001238:	10803fcc 	andi	r2,r2,255
 400123c:	18800025 	stbio	r2,0(r3)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 4001240:	00001506 	br	4001298 <vid_set_pixel+0x174>
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
  }
  
  else if( display->color_depth == 16 )
 4001244:	e0bfff17 	ldw	r2,-4(fp)
 4001248:	10800417 	ldw	r2,16(r2)
 400124c:	10800418 	cmpnei	r2,r2,16
 4001250:	1000111e 	bne	r2,zero,4001298 <vid_set_pixel+0x174>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001254:	e13fff17 	ldw	r4,-4(fp)
 4001258:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 400125c:	1007883a 	mov	r3,r2
 4001260:	e0bfff17 	ldw	r2,-4(fp)
 4001264:	10800517 	ldw	r2,20(r2)
 4001268:	1085883a 	add	r2,r2,r2
 400126c:	1009883a 	mov	r4,r2
 4001270:	e0bffd17 	ldw	r2,-12(fp)
 4001274:	2085383a 	mul	r2,r4,r2
 4001278:	1887883a 	add	r3,r3,r2
 400127c:	e0bffc17 	ldw	r2,-16(fp)
 4001280:	1085883a 	add	r2,r2,r2
 4001284:	1885883a 	add	r2,r3,r2
 4001288:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
 400128c:	e0bffb17 	ldw	r2,-20(fp)
 4001290:	e0fffe17 	ldw	r3,-8(fp)
 4001294:	10c0002d 	sthio	r3,0(r2)
	}


}
 4001298:	0001883a 	nop
 400129c:	e037883a 	mov	sp,fp
 40012a0:	dfc00117 	ldw	ra,4(sp)
 40012a4:	df000017 	ldw	fp,0(sp)
 40012a8:	dec00204 	addi	sp,sp,8
 40012ac:	f800283a 	ret

040012b0 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 40012b0:	defffa04 	addi	sp,sp,-24
 40012b4:	dfc00515 	stw	ra,20(sp)
 40012b8:	df000415 	stw	fp,16(sp)
 40012bc:	df000404 	addi	fp,sp,16
 40012c0:	e13ffd15 	stw	r4,-12(fp)
 40012c4:	e17ffe15 	stw	r5,-8(fp)
 40012c8:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 40012cc:	e13fff17 	ldw	r4,-4(fp)
 40012d0:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40012d4:	1007883a 	mov	r3,r2
 40012d8:	e0bfff17 	ldw	r2,-4(fp)
 40012dc:	10800517 	ldw	r2,20(r2)
 40012e0:	1085883a 	add	r2,r2,r2
 40012e4:	1009883a 	mov	r4,r2
 40012e8:	e0bffe17 	ldw	r2,-8(fp)
 40012ec:	2085383a 	mul	r2,r4,r2
 40012f0:	1887883a 	add	r3,r3,r2
 40012f4:	e0bffd17 	ldw	r2,-12(fp)
 40012f8:	1085883a 	add	r2,r2,r2
 40012fc:	1885883a 	add	r2,r3,r2
 4001300:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
 4001304:	e0bffc17 	ldw	r2,-16(fp)
 4001308:	1080002b 	ldhuio	r2,0(r2)
 400130c:	10bfffcc 	andi	r2,r2,65535

}
 4001310:	e037883a 	mov	sp,fp
 4001314:	dfc00117 	ldw	ra,4(sp)
 4001318:	df000017 	ldw	fp,0(sp)
 400131c:	dec00204 	addi	sp,sp,8
 4001320:	f800283a 	ret

04001324 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 4001324:	defff504 	addi	sp,sp,-44
 4001328:	dfc00a15 	stw	ra,40(sp)
 400132c:	df000915 	stw	fp,36(sp)
 4001330:	df000904 	addi	fp,sp,36
 4001334:	e13ffc15 	stw	r4,-16(fp)
 4001338:	e17ffd15 	stw	r5,-12(fp)
 400133c:	e1bffe15 	stw	r6,-8(fp)
 4001340:	e1ffff15 	stw	r7,-4(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
 4001344:	e0800317 	ldw	r2,12(fp)
 4001348:	10800417 	ldw	r2,16(r2)
 400134c:	1000010e 	bge	r2,zero,4001354 <vid_paint_block+0x30>
 4001350:	108001c4 	addi	r2,r2,7
 4001354:	1005d0fa 	srai	r2,r2,3
 4001358:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
 400135c:	e0fffe17 	ldw	r3,-8(fp)
 4001360:	e0bffc17 	ldw	r2,-16(fp)
 4001364:	1887c83a 	sub	r3,r3,r2
 4001368:	e0bff917 	ldw	r2,-28(fp)
 400136c:	1885383a 	mul	r2,r3,r2
 4001370:	e0bffa15 	stw	r2,-24(fp)

  line = malloc(bytes_per_line + 12);
 4001374:	e0bffa17 	ldw	r2,-24(fp)
 4001378:	10800304 	addi	r2,r2,12
 400137c:	1009883a 	mov	r4,r2
 4001380:	400baa80 	call	400baa8 <malloc>
 4001384:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
 4001388:	e0800317 	ldw	r2,12(fp)
 400138c:	10800417 	ldw	r2,16(r2)
 4001390:	10800418 	cmpnei	r2,r2,16
 4001394:	1000151e 	bne	r2,zero,40013ec <vid_paint_block+0xc8>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001398:	e03ff715 	stw	zero,-36(fp)
 400139c:	00000f06 	br	40013dc <vid_paint_block+0xb8>
    {
      *(line + i) = (unsigned char)color;
 40013a0:	e0bff717 	ldw	r2,-36(fp)
 40013a4:	e0fffb17 	ldw	r3,-20(fp)
 40013a8:	1885883a 	add	r2,r3,r2
 40013ac:	e0c00217 	ldw	r3,8(fp)
 40013b0:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 40013b4:	e0bff717 	ldw	r2,-36(fp)
 40013b8:	10800044 	addi	r2,r2,1
 40013bc:	e0fffb17 	ldw	r3,-20(fp)
 40013c0:	1885883a 	add	r2,r3,r2
 40013c4:	e0c00217 	ldw	r3,8(fp)
 40013c8:	1807d23a 	srai	r3,r3,8
 40013cc:	10c00005 	stb	r3,0(r2)

  line = malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 40013d0:	e0bff717 	ldw	r2,-36(fp)
 40013d4:	10800084 	addi	r2,r2,2
 40013d8:	e0bff715 	stw	r2,-36(fp)
 40013dc:	e0fff717 	ldw	r3,-36(fp)
 40013e0:	e0bffa17 	ldw	r2,-24(fp)
 40013e4:	18bfee16 	blt	r3,r2,40013a0 <__alt_mem_epcs_flash_controller_0+0xfb0003a0>
 40013e8:	00003106 	br	40014b0 <vid_paint_block+0x18c>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
 40013ec:	e0800317 	ldw	r2,12(fp)
 40013f0:	10800417 	ldw	r2,16(r2)
 40013f4:	10800618 	cmpnei	r2,r2,24
 40013f8:	10001c1e 	bne	r2,zero,400146c <vid_paint_block+0x148>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 40013fc:	e03ff715 	stw	zero,-36(fp)
 4001400:	00001606 	br	400145c <vid_paint_block+0x138>
    {
      *(line + i) = (unsigned char)color;
 4001404:	e0bff717 	ldw	r2,-36(fp)
 4001408:	e0fffb17 	ldw	r3,-20(fp)
 400140c:	1885883a 	add	r2,r3,r2
 4001410:	e0c00217 	ldw	r3,8(fp)
 4001414:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001418:	e0bff717 	ldw	r2,-36(fp)
 400141c:	10800044 	addi	r2,r2,1
 4001420:	e0fffb17 	ldw	r3,-20(fp)
 4001424:	1885883a 	add	r2,r3,r2
 4001428:	e0c00217 	ldw	r3,8(fp)
 400142c:	1807d23a 	srai	r3,r3,8
 4001430:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
 4001434:	e0bff717 	ldw	r2,-36(fp)
 4001438:	10800084 	addi	r2,r2,2
 400143c:	e0fffb17 	ldw	r3,-20(fp)
 4001440:	1885883a 	add	r2,r3,r2
 4001444:	e0c00217 	ldw	r3,8(fp)
 4001448:	1807d43a 	srai	r3,r3,16
 400144c:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 4001450:	e0bff717 	ldw	r2,-36(fp)
 4001454:	108000c4 	addi	r2,r2,3
 4001458:	e0bff715 	stw	r2,-36(fp)
 400145c:	e0fff717 	ldw	r3,-36(fp)
 4001460:	e0bffa17 	ldw	r2,-24(fp)
 4001464:	18bfe716 	blt	r3,r2,4001404 <__alt_mem_epcs_flash_controller_0+0xfb000404>
 4001468:	00001106 	br	40014b0 <vid_paint_block+0x18c>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
 400146c:	e0800317 	ldw	r2,12(fp)
 4001470:	10800417 	ldw	r2,16(r2)
 4001474:	10800818 	cmpnei	r2,r2,32
 4001478:	10000d1e 	bne	r2,zero,40014b0 <vid_paint_block+0x18c>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 400147c:	e03ff715 	stw	zero,-36(fp)
 4001480:	00000806 	br	40014a4 <vid_paint_block+0x180>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
 4001484:	e0bff717 	ldw	r2,-36(fp)
 4001488:	e0fffb17 	ldw	r3,-20(fp)
 400148c:	1885883a 	add	r2,r3,r2
 4001490:	e0c00217 	ldw	r3,8(fp)
 4001494:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001498:	e0bff717 	ldw	r2,-36(fp)
 400149c:	10800104 	addi	r2,r2,4
 40014a0:	e0bff715 	stw	r2,-36(fp)
 40014a4:	e0fff717 	ldw	r3,-36(fp)
 40014a8:	e0bffa17 	ldw	r2,-24(fp)
 40014ac:	18bff516 	blt	r3,r2,4001484 <__alt_mem_epcs_flash_controller_0+0xfb000484>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
 40014b0:	e1000317 	ldw	r4,12(fp)
 40014b4:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40014b8:	100b883a 	mov	r5,r2
 40014bc:	e0800317 	ldw	r2,12(fp)
 40014c0:	10c00517 	ldw	r3,20(r2)
 40014c4:	e0bff917 	ldw	r2,-28(fp)
 40014c8:	1887383a 	mul	r3,r3,r2
 40014cc:	e0bffd17 	ldw	r2,-12(fp)
 40014d0:	1887383a 	mul	r3,r3,r2
 40014d4:	e13ffc17 	ldw	r4,-16(fp)
 40014d8:	e0bff917 	ldw	r2,-28(fp)
 40014dc:	2085383a 	mul	r2,r4,r2
 40014e0:	1885883a 	add	r2,r3,r2
 40014e4:	2885883a 	add	r2,r5,r2
 40014e8:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
 40014ec:	e0bffd17 	ldw	r2,-12(fp)
 40014f0:	e0bff715 	stw	r2,-36(fp)
 40014f4:	00001106 	br	400153c <vid_paint_block+0x218>
  {
    memcpy( (void*)addr, line, bytes_per_line );
 40014f8:	e0bff817 	ldw	r2,-32(fp)
 40014fc:	e0fffa17 	ldw	r3,-24(fp)
 4001500:	180d883a 	mov	r6,r3
 4001504:	e17ffb17 	ldw	r5,-20(fp)
 4001508:	1009883a 	mov	r4,r2
 400150c:	400c2dc0 	call	400c2dc <memcpy>
    addr += (display->width * bytes_per_pixel);
 4001510:	e0800317 	ldw	r2,12(fp)
 4001514:	10c00517 	ldw	r3,20(r2)
 4001518:	e0bff917 	ldw	r2,-28(fp)
 400151c:	1885383a 	mul	r2,r3,r2
 4001520:	1007883a 	mov	r3,r2
 4001524:	e0bff817 	ldw	r2,-32(fp)
 4001528:	10c5883a 	add	r2,r2,r3
 400152c:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
 4001530:	e0bff717 	ldw	r2,-36(fp)
 4001534:	10800044 	addi	r2,r2,1
 4001538:	e0bff715 	stw	r2,-36(fp)
 400153c:	e0fff717 	ldw	r3,-36(fp)
 4001540:	e0bfff17 	ldw	r2,-4(fp)
 4001544:	18bfec16 	blt	r3,r2,40014f8 <__alt_mem_epcs_flash_controller_0+0xfb0004f8>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
 4001548:	e13ffb17 	ldw	r4,-20(fp)
 400154c:	400babc0 	call	400babc <free>
}
 4001550:	0001883a 	nop
 4001554:	e037883a 	mov	sp,fp
 4001558:	dfc00117 	ldw	ra,4(sp)
 400155c:	df000017 	ldw	fp,0(sp)
 4001560:	dec00204 	addi	sp,sp,8
 4001564:	f800283a 	ret

04001568 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 4001568:	defff504 	addi	sp,sp,-44
 400156c:	dfc00a15 	stw	ra,40(sp)
 4001570:	df000915 	stw	fp,36(sp)
 4001574:	df000904 	addi	fp,sp,36
 4001578:	2007883a 	mov	r3,r4
 400157c:	2805883a 	mov	r2,r5
 4001580:	e1bffe15 	stw	r6,-8(fp)
 4001584:	e1ffff15 	stw	r7,-4(fp)
 4001588:	e0fffc0d 	sth	r3,-16(fp)
 400158c:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
 4001590:	01030004 	movi	r4,3072
 4001594:	400baa80 	call	400baa8 <malloc>
 4001598:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 400159c:	e0bffc0f 	ldh	r2,-16(fp)
 40015a0:	e0fffd0f 	ldh	r3,-12(fp)
 40015a4:	1880060e 	bge	r3,r2,40015c0 <vid_draw_horiz_line+0x58>
  {
    short temp = Hstart;
 40015a8:	e0bffc0b 	ldhu	r2,-16(fp)
 40015ac:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 40015b0:	e0bffd0b 	ldhu	r2,-12(fp)
 40015b4:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 40015b8:	e0bff90b 	ldhu	r2,-28(fp)
 40015bc:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 40015c0:	e0800217 	ldw	r2,8(fp)
 40015c4:	10800417 	ldw	r2,16(r2)
 40015c8:	10800818 	cmpnei	r2,r2,32
 40015cc:	1000291e 	bne	r2,zero,4001674 <vid_draw_horiz_line+0x10c>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
 40015d0:	e1000217 	ldw	r4,8(fp)
 40015d4:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40015d8:	1009883a 	mov	r4,r2
 40015dc:	e0800217 	ldw	r2,8(fp)
 40015e0:	10800517 	ldw	r2,20(r2)
 40015e4:	1085883a 	add	r2,r2,r2
 40015e8:	1085883a 	add	r2,r2,r2
 40015ec:	1007883a 	mov	r3,r2
 40015f0:	e0bffe17 	ldw	r2,-8(fp)
 40015f4:	1887383a 	mul	r3,r3,r2
 40015f8:	e0bffc0f 	ldh	r2,-16(fp)
 40015fc:	1085883a 	add	r2,r2,r2
 4001600:	1085883a 	add	r2,r2,r2
 4001604:	1885883a 	add	r2,r3,r2
 4001608:	2085883a 	add	r2,r4,r2
 400160c:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 4001610:	e0fffd0f 	ldh	r3,-12(fp)
 4001614:	e0bffc0f 	ldh	r2,-16(fp)
 4001618:	1885c83a 	sub	r2,r3,r2
 400161c:	1085883a 	add	r2,r2,r2
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 4001628:	e03ff715 	stw	zero,-36(fp)
 400162c:	00000806 	br	4001650 <vid_draw_horiz_line+0xe8>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 4001630:	e0bff717 	ldw	r2,-36(fp)
 4001634:	e0fff817 	ldw	r3,-32(fp)
 4001638:	1885883a 	add	r2,r3,r2
 400163c:	e0ffff17 	ldw	r3,-4(fp)
 4001640:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 4001644:	e0bff717 	ldw	r2,-36(fp)
 4001648:	10800104 	addi	r2,r2,4
 400164c:	e0bff715 	stw	r2,-36(fp)
 4001650:	e0fff717 	ldw	r3,-36(fp)
 4001654:	e0bffb17 	ldw	r2,-20(fp)
 4001658:	18bff516 	blt	r3,r2,4001630 <__alt_mem_epcs_flash_controller_0+0xfb000630>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 400165c:	e0bffa17 	ldw	r2,-24(fp)
 4001660:	e0fffb17 	ldw	r3,-20(fp)
 4001664:	180d883a 	mov	r6,r3
 4001668:	e17ff817 	ldw	r5,-32(fp)
 400166c:	1009883a 	mov	r4,r2
 4001670:	400c2dc0 	call	400c2dc <memcpy>
  }
  if(display->color_depth == 24)
 4001674:	e0800217 	ldw	r2,8(fp)
 4001678:	10800417 	ldw	r2,16(r2)
 400167c:	10800618 	cmpnei	r2,r2,24
 4001680:	10003a1e 	bne	r2,zero,400176c <vid_draw_horiz_line+0x204>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
 4001684:	e1000217 	ldw	r4,8(fp)
 4001688:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 400168c:	100b883a 	mov	r5,r2
 4001690:	e0800217 	ldw	r2,8(fp)
 4001694:	10c00517 	ldw	r3,20(r2)
 4001698:	1805883a 	mov	r2,r3
 400169c:	1085883a 	add	r2,r2,r2
 40016a0:	10c7883a 	add	r3,r2,r3
 40016a4:	e0bffe17 	ldw	r2,-8(fp)
 40016a8:	1889383a 	mul	r4,r3,r2
 40016ac:	e0fffc0f 	ldh	r3,-16(fp)
 40016b0:	1805883a 	mov	r2,r3
 40016b4:	1085883a 	add	r2,r2,r2
 40016b8:	10c5883a 	add	r2,r2,r3
 40016bc:	2085883a 	add	r2,r4,r2
 40016c0:	2885883a 	add	r2,r5,r2
 40016c4:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 40016c8:	e0fffd0f 	ldh	r3,-12(fp)
 40016cc:	e0bffc0f 	ldh	r2,-16(fp)
 40016d0:	1887c83a 	sub	r3,r3,r2
 40016d4:	1805883a 	mov	r2,r3
 40016d8:	1085883a 	add	r2,r2,r2
 40016dc:	10c5883a 	add	r2,r2,r3
 40016e0:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 40016e4:	e03ff715 	stw	zero,-36(fp)
 40016e8:	00001606 	br	4001744 <vid_draw_horiz_line+0x1dc>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40016ec:	e0bff717 	ldw	r2,-36(fp)
 40016f0:	e0fff817 	ldw	r3,-32(fp)
 40016f4:	1885883a 	add	r2,r3,r2
 40016f8:	e0ffff17 	ldw	r3,-4(fp)
 40016fc:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 4001700:	e0bff717 	ldw	r2,-36(fp)
 4001704:	10800044 	addi	r2,r2,1
 4001708:	e0fff817 	ldw	r3,-32(fp)
 400170c:	1885883a 	add	r2,r3,r2
 4001710:	e0ffff17 	ldw	r3,-4(fp)
 4001714:	1807d23a 	srai	r3,r3,8
 4001718:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 400171c:	e0bff717 	ldw	r2,-36(fp)
 4001720:	10800084 	addi	r2,r2,2
 4001724:	e0fff817 	ldw	r3,-32(fp)
 4001728:	1885883a 	add	r2,r3,r2
 400172c:	e0ffff17 	ldw	r3,-4(fp)
 4001730:	1807d43a 	srai	r3,r3,16
 4001734:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 4001738:	e0bff717 	ldw	r2,-36(fp)
 400173c:	108000c4 	addi	r2,r2,3
 4001740:	e0bff715 	stw	r2,-36(fp)
 4001744:	e0fff717 	ldw	r3,-36(fp)
 4001748:	e0bffb17 	ldw	r2,-20(fp)
 400174c:	18bfe716 	blt	r3,r2,40016ec <__alt_mem_epcs_flash_controller_0+0xfb0006ec>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4001750:	e0bffa17 	ldw	r2,-24(fp)
 4001754:	e0fffb17 	ldw	r3,-20(fp)
 4001758:	180d883a 	mov	r6,r3
 400175c:	e17ff817 	ldw	r5,-32(fp)
 4001760:	1009883a 	mov	r4,r2
 4001764:	400c2dc0 	call	400c2dc <memcpy>
 4001768:	00003106 	br	4001830 <vid_draw_horiz_line+0x2c8>
  }
  else if(display->color_depth == 16)
 400176c:	e0800217 	ldw	r2,8(fp)
 4001770:	10800417 	ldw	r2,16(r2)
 4001774:	10800418 	cmpnei	r2,r2,16
 4001778:	10002d1e 	bne	r2,zero,4001830 <vid_draw_horiz_line+0x2c8>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
 400177c:	e1000217 	ldw	r4,8(fp)
 4001780:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4001784:	1009883a 	mov	r4,r2
 4001788:	e0800217 	ldw	r2,8(fp)
 400178c:	10800517 	ldw	r2,20(r2)
 4001790:	1085883a 	add	r2,r2,r2
 4001794:	1007883a 	mov	r3,r2
 4001798:	e0bffe17 	ldw	r2,-8(fp)
 400179c:	1887383a 	mul	r3,r3,r2
 40017a0:	e0bffc0f 	ldh	r2,-16(fp)
 40017a4:	1085883a 	add	r2,r2,r2
 40017a8:	1885883a 	add	r2,r3,r2
 40017ac:	2085883a 	add	r2,r4,r2
 40017b0:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 40017b4:	e0fffd0f 	ldh	r3,-12(fp)
 40017b8:	e0bffc0f 	ldh	r2,-16(fp)
 40017bc:	1885c83a 	sub	r2,r3,r2
 40017c0:	1085883a 	add	r2,r2,r2
 40017c4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 40017c8:	e03ff715 	stw	zero,-36(fp)
 40017cc:	00000f06 	br	400180c <vid_draw_horiz_line+0x2a4>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40017d0:	e0bff717 	ldw	r2,-36(fp)
 40017d4:	e0fff817 	ldw	r3,-32(fp)
 40017d8:	1885883a 	add	r2,r3,r2
 40017dc:	e0ffff17 	ldw	r3,-4(fp)
 40017e0:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 40017e4:	e0bff717 	ldw	r2,-36(fp)
 40017e8:	10800044 	addi	r2,r2,1
 40017ec:	e0fff817 	ldw	r3,-32(fp)
 40017f0:	1885883a 	add	r2,r3,r2
 40017f4:	e0ffff17 	ldw	r3,-4(fp)
 40017f8:	1807d23a 	srai	r3,r3,8
 40017fc:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 4001800:	e0bff717 	ldw	r2,-36(fp)
 4001804:	10800084 	addi	r2,r2,2
 4001808:	e0bff715 	stw	r2,-36(fp)
 400180c:	e0fff717 	ldw	r3,-36(fp)
 4001810:	e0bffb17 	ldw	r2,-20(fp)
 4001814:	18bfee16 	blt	r3,r2,40017d0 <__alt_mem_epcs_flash_controller_0+0xfb0007d0>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4001818:	e0bffa17 	ldw	r2,-24(fp)
 400181c:	e0fffb17 	ldw	r3,-20(fp)
 4001820:	180d883a 	mov	r6,r3
 4001824:	e17ff817 	ldw	r5,-32(fp)
 4001828:	1009883a 	mov	r4,r2
 400182c:	400c2dc0 	call	400c2dc <memcpy>
  }
  free(fast_buffer);
 4001830:	e13ff817 	ldw	r4,-32(fp)
 4001834:	400babc0 	call	400babc <free>
}
 4001838:	0001883a 	nop
 400183c:	e037883a 	mov	sp,fp
 4001840:	dfc00117 	ldw	ra,4(sp)
 4001844:	df000017 	ldw	fp,0(sp)
 4001848:	dec00204 	addi	sp,sp,8
 400184c:	f800283a 	ret

04001850 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4001850:	defffc04 	addi	sp,sp,-16
 4001854:	df000315 	stw	fp,12(sp)
 4001858:	df000304 	addi	fp,sp,12
 400185c:	e13ffd15 	stw	r4,-12(fp)
 4001860:	e17ffe15 	stw	r5,-8(fp)
 4001864:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 4001868:	e0bffe17 	ldw	r2,-8(fp)
 400186c:	1085883a 	add	r2,r2,r2
 4001870:	10800054 	ori	r2,r2,1
 4001874:	1006917a 	slli	r3,r2,5
 4001878:	e0bfff17 	ldw	r2,-4(fp)
 400187c:	1886b03a 	or	r3,r3,r2
 4001880:	e0bffd17 	ldw	r2,-12(fp)
 4001884:	100492fa 	slli	r2,r2,11
 4001888:	1884b03a 	or	r2,r3,r2
}
 400188c:	e037883a 	mov	sp,fp
 4001890:	df000017 	ldw	fp,0(sp)
 4001894:	dec00104 	addi	sp,sp,4
 4001898:	f800283a 	ret

0400189c <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 400189c:	defffc04 	addi	sp,sp,-16
 40018a0:	df000315 	stw	fp,12(sp)
 40018a4:	df000304 	addi	fp,sp,12
 40018a8:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 40018ac:	e0bfff17 	ldw	r2,-4(fp)
 40018b0:	10800003 	ldbu	r2,0(r2)
 40018b4:	1007883a 	mov	r3,r2
 40018b8:	00bffe04 	movi	r2,-8
 40018bc:	1884703a 	and	r2,r3,r2
 40018c0:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 40018c4:	e0bfff17 	ldw	r2,-4(fp)
 40018c8:	10800044 	addi	r2,r2,1
 40018cc:	10800003 	ldbu	r2,0(r2)
 40018d0:	1007883a 	mov	r3,r2
 40018d4:	00bfff04 	movi	r2,-4
 40018d8:	1884703a 	and	r2,r3,r2
 40018dc:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 40018e0:	e0bfff17 	ldw	r2,-4(fp)
 40018e4:	10800084 	addi	r2,r2,2
 40018e8:	10800003 	ldbu	r2,0(r2)
 40018ec:	1007883a 	mov	r3,r2
 40018f0:	00bffe04 	movi	r2,-8
 40018f4:	1884703a 	and	r2,r3,r2
 40018f8:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 40018fc:	e0bffd83 	ldbu	r2,-10(fp)
 4001900:	1004d0fa 	srli	r2,r2,3
 4001904:	10803fcc 	andi	r2,r2,255
 4001908:	e0fffd43 	ldbu	r3,-11(fp)
 400190c:	180690fa 	slli	r3,r3,3
 4001910:	10c4b03a 	or	r2,r2,r3
 4001914:	1007883a 	mov	r3,r2
 4001918:	e0bffd03 	ldbu	r2,-12(fp)
 400191c:	1004923a 	slli	r2,r2,8
 4001920:	1884b03a 	or	r2,r3,r2
 4001924:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 4001928:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400192c:	e037883a 	mov	sp,fp
 4001930:	df000017 	ldw	fp,0(sp)
 4001934:	dec00104 	addi	sp,sp,4
 4001938:	f800283a 	ret

0400193c <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 400193c:	defffd04 	addi	sp,sp,-12
 4001940:	df000215 	stw	fp,8(sp)
 4001944:	df000204 	addi	fp,sp,8
 4001948:	2005883a 	mov	r2,r4
 400194c:	e17fff15 	stw	r5,-4(fp)
 4001950:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4001954:	e0bffe0b 	ldhu	r2,-8(fp)
 4001958:	1004d2fa 	srli	r2,r2,11
 400195c:	1007883a 	mov	r3,r2
 4001960:	e0bfff17 	ldw	r2,-4(fp)
 4001964:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 4001968:	e0bfff17 	ldw	r2,-4(fp)
 400196c:	10800044 	addi	r2,r2,1
 4001970:	e0fffe0b 	ldhu	r3,-8(fp)
 4001974:	18c00f8c 	andi	r3,r3,62
 4001978:	1807d17a 	srai	r3,r3,5
 400197c:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4001980:	e0bfff17 	ldw	r2,-4(fp)
 4001984:	10800084 	addi	r2,r2,2
 4001988:	e0fffe0b 	ldhu	r3,-8(fp)
 400198c:	18c007cc 	andi	r3,r3,31
 4001990:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4001994:	0005883a 	mov	r2,zero
}
 4001998:	e037883a 	mov	sp,fp
 400199c:	df000017 	ldw	fp,0(sp)
 40019a0:	dec00104 	addi	sp,sp,4
 40019a4:	f800283a 	ret

040019a8 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 40019a8:	defff504 	addi	sp,sp,-44
 40019ac:	dfc00a15 	stw	ra,40(sp)
 40019b0:	df000915 	stw	fp,36(sp)
 40019b4:	df000904 	addi	fp,sp,36
 40019b8:	e13ffc15 	stw	r4,-16(fp)
 40019bc:	e17ffd15 	stw	r5,-12(fp)
 40019c0:	e1bffe15 	stw	r6,-8(fp)
 40019c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
 40019c8:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
 40019cc:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 40019d0:	e1000317 	ldw	r4,12(fp)
 40019d4:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40019d8:	100b883a 	mov	r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
 40019dc:	e0800317 	ldw	r2,12(fp)
 40019e0:	10c00517 	ldw	r3,20(r2)
 40019e4:	e0800317 	ldw	r2,12(fp)
 40019e8:	10800717 	ldw	r2,28(r2)
 40019ec:	1887383a 	mul	r3,r3,r2
 40019f0:	e0bffd17 	ldw	r2,-12(fp)
 40019f4:	1887383a 	mul	r3,r3,r2
    (x * (display->bytes_per_pixel)));
 40019f8:	e0800317 	ldw	r2,12(fp)
 40019fc:	11000717 	ldw	r4,28(r2)
 4001a00:	e0bffc17 	ldw	r2,-16(fp)
 4001a04:	2085383a 	mul	r2,r4,r2
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
 4001a08:	1885883a 	add	r2,r3,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 4001a0c:	2885883a 	add	r2,r5,r2
 4001a10:	e0bff915 	stw	r2,-28(fp)
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
 4001a14:	e0800317 	ldw	r2,12(fp)
 4001a18:	10c00717 	ldw	r3,28(r2)
 4001a1c:	e0bfff17 	ldw	r2,-4(fp)
 4001a20:	1885383a 	mul	r2,r3,r2
 4001a24:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
 4001a28:	e0800217 	ldw	r2,8(fp)
 4001a2c:	10800618 	cmpnei	r2,r2,24
 4001a30:	10004a1e 	bne	r2,zero,4001b5c <vid_copy_line_to_frame_buffer+0x1b4>
  {
    if(display->color_depth == 16)
 4001a34:	e0800317 	ldw	r2,12(fp)
 4001a38:	10800417 	ldw	r2,16(r2)
 4001a3c:	10800418 	cmpnei	r2,r2,16
 4001a40:	10003c1e 	bne	r2,zero,4001b34 <vid_copy_line_to_frame_buffer+0x18c>
    {
      temp_line = malloc(bytes_in_line);
 4001a44:	e13ffa17 	ldw	r4,-24(fp)
 4001a48:	400baa80 	call	400baa8 <malloc>
 4001a4c:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
 4001a50:	00002d06 	br	4001b08 <vid_copy_line_to_frame_buffer+0x160>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
 4001a54:	e0bff817 	ldw	r2,-32(fp)
 4001a58:	1085883a 	add	r2,r2,r2
 4001a5c:	1007883a 	mov	r3,r2
 4001a60:	e0bffb17 	ldw	r2,-20(fp)
 4001a64:	10c5883a 	add	r2,r2,r3
 4001a68:	e0fff717 	ldw	r3,-36(fp)
 4001a6c:	18c00084 	addi	r3,r3,2
 4001a70:	e13ffe17 	ldw	r4,-8(fp)
 4001a74:	20c7883a 	add	r3,r4,r3
 4001a78:	18c00003 	ldbu	r3,0(r3)
 4001a7c:	18c03fcc 	andi	r3,r3,255
 4001a80:	18c0201c 	xori	r3,r3,128
 4001a84:	18ffe004 	addi	r3,r3,-128
 4001a88:	18c03e0c 	andi	r3,r3,248
 4001a8c:	1807d0fa 	srai	r3,r3,3
 4001a90:	180b883a 	mov	r5,r3
 4001a94:	e0fff717 	ldw	r3,-36(fp)
 4001a98:	18c00044 	addi	r3,r3,1
 4001a9c:	e13ffe17 	ldw	r4,-8(fp)
 4001aa0:	20c7883a 	add	r3,r4,r3
 4001aa4:	18c00003 	ldbu	r3,0(r3)
 4001aa8:	18c03fcc 	andi	r3,r3,255
 4001aac:	18c0201c 	xori	r3,r3,128
 4001ab0:	18ffe004 	addi	r3,r3,-128
 4001ab4:	18c03f0c 	andi	r3,r3,252
 4001ab8:	180690fa 	slli	r3,r3,3
 4001abc:	28c6b03a 	or	r3,r5,r3
 4001ac0:	180b883a 	mov	r5,r3
 4001ac4:	e0fff717 	ldw	r3,-36(fp)
 4001ac8:	e13ffe17 	ldw	r4,-8(fp)
 4001acc:	20c7883a 	add	r3,r4,r3
 4001ad0:	18c00003 	ldbu	r3,0(r3)
 4001ad4:	18c03fcc 	andi	r3,r3,255
 4001ad8:	18c0201c 	xori	r3,r3,128
 4001adc:	18ffe004 	addi	r3,r3,-128
 4001ae0:	18c03e0c 	andi	r3,r3,248
 4001ae4:	1806923a 	slli	r3,r3,8
 4001ae8:	28c6b03a 	or	r3,r5,r3
 4001aec:	10c0000d 	sth	r3,0(r2)
        index_16++;
 4001af0:	e0bff817 	ldw	r2,-32(fp)
 4001af4:	10800044 	addi	r2,r2,1
 4001af8:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4001afc:	e0bff717 	ldw	r2,-36(fp)
 4001b00:	108000c4 	addi	r2,r2,3
 4001b04:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
 4001b08:	e0fff717 	ldw	r3,-36(fp)
 4001b0c:	e0bffa17 	ldw	r2,-24(fp)
 4001b10:	18bfd036 	bltu	r3,r2,4001a54 <__alt_mem_epcs_flash_controller_0+0xfb000a54>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4001b14:	e0bff917 	ldw	r2,-28(fp)
 4001b18:	e1bffa17 	ldw	r6,-24(fp)
 4001b1c:	e17ffb17 	ldw	r5,-20(fp)
 4001b20:	1009883a 	mov	r4,r2
 4001b24:	400c2dc0 	call	400c2dc <memcpy>
      free(temp_line);
 4001b28:	e13ffb17 	ldw	r4,-20(fp)
 4001b2c:	400babc0 	call	400babc <free>
 4001b30:	00003f06 	br	4001c30 <vid_copy_line_to_frame_buffer+0x288>
    }
    else if(display->color_depth == 24)
 4001b34:	e0800317 	ldw	r2,12(fp)
 4001b38:	10800417 	ldw	r2,16(r2)
 4001b3c:	10800618 	cmpnei	r2,r2,24
 4001b40:	10003b1e 	bne	r2,zero,4001c30 <vid_copy_line_to_frame_buffer+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4001b44:	e0bff917 	ldw	r2,-28(fp)
 4001b48:	e1bffa17 	ldw	r6,-24(fp)
 4001b4c:	e17ffe17 	ldw	r5,-8(fp)
 4001b50:	1009883a 	mov	r4,r2
 4001b54:	400c2dc0 	call	400c2dc <memcpy>
 4001b58:	00003506 	br	4001c30 <vid_copy_line_to_frame_buffer+0x288>
    }
  }
  else if(source_color_depth == 16)
 4001b5c:	e0800217 	ldw	r2,8(fp)
 4001b60:	10800418 	cmpnei	r2,r2,16
 4001b64:	1000321e 	bne	r2,zero,4001c30 <vid_copy_line_to_frame_buffer+0x288>
  {
    if(display->color_depth == 24)
 4001b68:	e0800317 	ldw	r2,12(fp)
 4001b6c:	10800417 	ldw	r2,16(r2)
 4001b70:	10800618 	cmpnei	r2,r2,24
 4001b74:	1000251e 	bne	r2,zero,4001c0c <vid_copy_line_to_frame_buffer+0x264>
    {
      temp_line = malloc(bytes_in_line);
 4001b78:	e13ffa17 	ldw	r4,-24(fp)
 4001b7c:	400baa80 	call	400baa8 <malloc>
 4001b80:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
 4001b84:	00001606 	br	4001be0 <vid_copy_line_to_frame_buffer+0x238>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
 4001b88:	e0bff817 	ldw	r2,-32(fp)
 4001b8c:	e0fffe17 	ldw	r3,-8(fp)
 4001b90:	1885883a 	add	r2,r3,r2
 4001b94:	10800003 	ldbu	r2,0(r2)
 4001b98:	10803fcc 	andi	r2,r2,255
 4001b9c:	1080201c 	xori	r2,r2,128
 4001ba0:	10bfe004 	addi	r2,r2,-128
 4001ba4:	10ffffcc 	andi	r3,r2,65535
 4001ba8:	e0bff717 	ldw	r2,-36(fp)
 4001bac:	1085883a 	add	r2,r2,r2
 4001bb0:	1009883a 	mov	r4,r2
 4001bb4:	e0bffb17 	ldw	r2,-20(fp)
 4001bb8:	1105883a 	add	r2,r2,r4
 4001bbc:	100b883a 	mov	r5,r2
 4001bc0:	1809883a 	mov	r4,r3
 4001bc4:	400193c0 	call	400193c <vid_color_convert16_24>
        index_16++;
 4001bc8:	e0bff817 	ldw	r2,-32(fp)
 4001bcc:	10800044 	addi	r2,r2,1
 4001bd0:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4001bd4:	e0bff717 	ldw	r2,-36(fp)
 4001bd8:	108000c4 	addi	r2,r2,3
 4001bdc:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = malloc(bytes_in_line);
      while(index_16 < num_pixels )
 4001be0:	e0fff817 	ldw	r3,-32(fp)
 4001be4:	e0bfff17 	ldw	r2,-4(fp)
 4001be8:	18bfe716 	blt	r3,r2,4001b88 <__alt_mem_epcs_flash_controller_0+0xfb000b88>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4001bec:	e0bff917 	ldw	r2,-28(fp)
 4001bf0:	e1bffa17 	ldw	r6,-24(fp)
 4001bf4:	e17ffb17 	ldw	r5,-20(fp)
 4001bf8:	1009883a 	mov	r4,r2
 4001bfc:	400c2dc0 	call	400c2dc <memcpy>
      free(temp_line);
 4001c00:	e13ffb17 	ldw	r4,-20(fp)
 4001c04:	400babc0 	call	400babc <free>
 4001c08:	00000906 	br	4001c30 <vid_copy_line_to_frame_buffer+0x288>
      
    }
    else if(display->color_depth == 16)
 4001c0c:	e0800317 	ldw	r2,12(fp)
 4001c10:	10800417 	ldw	r2,16(r2)
 4001c14:	10800418 	cmpnei	r2,r2,16
 4001c18:	1000051e 	bne	r2,zero,4001c30 <vid_copy_line_to_frame_buffer+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4001c1c:	e0bff917 	ldw	r2,-28(fp)
 4001c20:	e1bffa17 	ldw	r6,-24(fp)
 4001c24:	e17ffe17 	ldw	r5,-8(fp)
 4001c28:	1009883a 	mov	r4,r2
 4001c2c:	400c2dc0 	call	400c2dc <memcpy>
    }
  }
  return(0);
 4001c30:	0005883a 	mov	r2,zero
}
 4001c34:	e037883a 	mov	sp,fp
 4001c38:	dfc00117 	ldw	ra,4(sp)
 4001c3c:	df000017 	ldw	fp,0(sp)
 4001c40:	dec00204 	addi	sp,sp,8
 4001c44:	f800283a 	ret

04001c48 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 4001c48:	deffef04 	addi	sp,sp,-68
 4001c4c:	dfc01015 	stw	ra,64(sp)
 4001c50:	df000f15 	stw	fp,60(sp)
 4001c54:	df000f04 	addi	fp,sp,60
 4001c58:	2011883a 	mov	r8,r4
 4001c5c:	3009883a 	mov	r4,r6
 4001c60:	3807883a 	mov	r3,r7
 4001c64:	e0800217 	ldw	r2,8(fp)
 4001c68:	e23ffb0d 	sth	r8,-20(fp)
 4001c6c:	e17ffc0d 	sth	r5,-16(fp)
 4001c70:	e13ffd0d 	sth	r4,-12(fp)
 4001c74:	e0fffe0d 	sth	r3,-8(fp)
 4001c78:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4001c7c:	e0fffd0b 	ldhu	r3,-12(fp)
 4001c80:	e0bffb0b 	ldhu	r2,-20(fp)
 4001c84:	1885c83a 	sub	r2,r3,r2
 4001c88:	1000010e 	bge	r2,zero,4001c90 <vid_draw_sloped_line+0x48>
 4001c8c:	0085c83a 	sub	r2,zero,r2
 4001c90:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4001c94:	e0fffe0b 	ldhu	r3,-8(fp)
 4001c98:	e0bffc0b 	ldhu	r2,-16(fp)
 4001c9c:	1885c83a 	sub	r2,r3,r2
 4001ca0:	1000010e 	bge	r2,zero,4001ca8 <vid_draw_sloped_line+0x60>
 4001ca4:	0085c83a 	sub	r2,zero,r2
 4001ca8:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4001cac:	e0bffb0b 	ldhu	r2,-20(fp)
 4001cb0:	e0fffd0b 	ldhu	r3,-12(fp)
 4001cb4:	1880032e 	bgeu	r3,r2,4001cc4 <vid_draw_sloped_line+0x7c>
 4001cb8:	00bfffc4 	movi	r2,-1
 4001cbc:	e0bff315 	stw	r2,-52(fp)
 4001cc0:	00000206 	br	4001ccc <vid_draw_sloped_line+0x84>
 4001cc4:	00800044 	movi	r2,1
 4001cc8:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 4001ccc:	e0bffc0b 	ldhu	r2,-16(fp)
 4001cd0:	e0fffe0b 	ldhu	r3,-8(fp)
 4001cd4:	1880032e 	bgeu	r3,r2,4001ce4 <vid_draw_sloped_line+0x9c>
 4001cd8:	00bfffc4 	movi	r2,-1
 4001cdc:	e0bff415 	stw	r2,-48(fp)
 4001ce0:	00000206 	br	4001cec <vid_draw_sloped_line+0xa4>
 4001ce4:	00800044 	movi	r2,1
 4001ce8:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 4001cec:	e0fff117 	ldw	r3,-60(fp)
 4001cf0:	e0bff217 	ldw	r2,-56(fp)
 4001cf4:	18803616 	blt	r3,r2,4001dd0 <vid_draw_sloped_line+0x188>
    int dPr   = vert_delta<<1;
 4001cf8:	e0bff217 	ldw	r2,-56(fp)
 4001cfc:	1085883a 	add	r2,r2,r2
 4001d00:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4001d04:	e0bff117 	ldw	r2,-60(fp)
 4001d08:	1085883a 	add	r2,r2,r2
 4001d0c:	1007883a 	mov	r3,r2
 4001d10:	e0bff717 	ldw	r2,-36(fp)
 4001d14:	10c5c83a 	sub	r2,r2,r3
 4001d18:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 4001d1c:	e0fff717 	ldw	r3,-36(fp)
 4001d20:	e0bff117 	ldw	r2,-60(fp)
 4001d24:	1885c83a 	sub	r2,r3,r2
 4001d28:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001d2c:	00002506 	br	4001dc4 <vid_draw_sloped_line+0x17c>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001d30:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d34:	e0fffc0b 	ldhu	r3,-16(fp)
 4001d38:	e1000317 	ldw	r4,12(fp)
 4001d3c:	e1c00417 	ldw	r7,16(fp)
 4001d40:	200d883a 	mov	r6,r4
 4001d44:	180b883a 	mov	r5,r3
 4001d48:	1009883a 	mov	r4,r2
 4001d4c:	40011240 	call	4001124 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001d50:	e0bff517 	ldw	r2,-44(fp)
 4001d54:	00800f0e 	bge	zero,r2,4001d94 <vid_draw_sloped_line+0x14c>
        horiz_start+=horiz_incr;
 4001d58:	e0bff317 	ldw	r2,-52(fp)
 4001d5c:	1007883a 	mov	r3,r2
 4001d60:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d64:	1885883a 	add	r2,r3,r2
 4001d68:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001d6c:	e0bff417 	ldw	r2,-48(fp)
 4001d70:	1007883a 	mov	r3,r2
 4001d74:	e0bffc0b 	ldhu	r2,-16(fp)
 4001d78:	1885883a 	add	r2,r3,r2
 4001d7c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001d80:	e0fff517 	ldw	r3,-44(fp)
 4001d84:	e0bff817 	ldw	r2,-32(fp)
 4001d88:	1885883a 	add	r2,r3,r2
 4001d8c:	e0bff515 	stw	r2,-44(fp)
 4001d90:	00000906 	br	4001db8 <vid_draw_sloped_line+0x170>
      } else {
        horiz_start+=horiz_incr;
 4001d94:	e0bff317 	ldw	r2,-52(fp)
 4001d98:	1007883a 	mov	r3,r2
 4001d9c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001da0:	1885883a 	add	r2,r3,r2
 4001da4:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 4001da8:	e0fff517 	ldw	r3,-44(fp)
 4001dac:	e0bff717 	ldw	r2,-36(fp)
 4001db0:	1885883a 	add	r2,r3,r2
 4001db4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001db8:	e0bff117 	ldw	r2,-60(fp)
 4001dbc:	10bfffc4 	addi	r2,r2,-1
 4001dc0:	e0bff115 	stw	r2,-60(fp)
 4001dc4:	e0bff117 	ldw	r2,-60(fp)
 4001dc8:	103fd90e 	bge	r2,zero,4001d30 <__alt_mem_epcs_flash_controller_0+0xfb000d30>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 4001dcc:	00003506 	br	4001ea4 <vid_draw_sloped_line+0x25c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 4001dd0:	e0bff117 	ldw	r2,-60(fp)
 4001dd4:	1085883a 	add	r2,r2,r2
 4001dd8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 4001ddc:	e0bff217 	ldw	r2,-56(fp)
 4001de0:	1085883a 	add	r2,r2,r2
 4001de4:	1007883a 	mov	r3,r2
 4001de8:	e0bff917 	ldw	r2,-28(fp)
 4001dec:	10c5c83a 	sub	r2,r2,r3
 4001df0:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 4001df4:	e0fff917 	ldw	r3,-28(fp)
 4001df8:	e0bff217 	ldw	r2,-56(fp)
 4001dfc:	1885c83a 	sub	r2,r3,r2
 4001e00:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001e04:	00002506 	br	4001e9c <vid_draw_sloped_line+0x254>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001e08:	e0bffb0b 	ldhu	r2,-20(fp)
 4001e0c:	e0fffc0b 	ldhu	r3,-16(fp)
 4001e10:	e1000317 	ldw	r4,12(fp)
 4001e14:	e1c00417 	ldw	r7,16(fp)
 4001e18:	200d883a 	mov	r6,r4
 4001e1c:	180b883a 	mov	r5,r3
 4001e20:	1009883a 	mov	r4,r2
 4001e24:	40011240 	call	4001124 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001e28:	e0bff617 	ldw	r2,-40(fp)
 4001e2c:	00800f0e 	bge	zero,r2,4001e6c <vid_draw_sloped_line+0x224>
        horiz_start+=horiz_incr;
 4001e30:	e0bff317 	ldw	r2,-52(fp)
 4001e34:	1007883a 	mov	r3,r2
 4001e38:	e0bffb0b 	ldhu	r2,-20(fp)
 4001e3c:	1885883a 	add	r2,r3,r2
 4001e40:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001e44:	e0bff417 	ldw	r2,-48(fp)
 4001e48:	1007883a 	mov	r3,r2
 4001e4c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e50:	1885883a 	add	r2,r3,r2
 4001e54:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001e58:	e0fff617 	ldw	r3,-40(fp)
 4001e5c:	e0bffa17 	ldw	r2,-24(fp)
 4001e60:	1885883a 	add	r2,r3,r2
 4001e64:	e0bff615 	stw	r2,-40(fp)
 4001e68:	00000906 	br	4001e90 <vid_draw_sloped_line+0x248>
      } else {
        vert_start+=vert_incr;
 4001e6c:	e0bff417 	ldw	r2,-48(fp)
 4001e70:	1007883a 	mov	r3,r2
 4001e74:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e78:	1885883a 	add	r2,r3,r2
 4001e7c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4001e80:	e0fff617 	ldw	r3,-40(fp)
 4001e84:	e0bff917 	ldw	r2,-28(fp)
 4001e88:	1885883a 	add	r2,r3,r2
 4001e8c:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001e90:	e0bff217 	ldw	r2,-56(fp)
 4001e94:	10bfffc4 	addi	r2,r2,-1
 4001e98:	e0bff215 	stw	r2,-56(fp)
 4001e9c:	e0bff217 	ldw	r2,-56(fp)
 4001ea0:	103fd90e 	bge	r2,zero,4001e08 <__alt_mem_epcs_flash_controller_0+0xfb000e08>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 4001ea4:	0001883a 	nop
 4001ea8:	e037883a 	mov	sp,fp
 4001eac:	dfc00117 	ldw	ra,4(sp)
 4001eb0:	df000017 	ldw	fp,0(sp)
 4001eb4:	dec00204 	addi	sp,sp,8
 4001eb8:	f800283a 	ret

04001ebc <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 4001ebc:	defff104 	addi	sp,sp,-60
 4001ec0:	dfc00e15 	stw	ra,56(sp)
 4001ec4:	df000d15 	stw	fp,52(sp)
 4001ec8:	df000d04 	addi	fp,sp,52
 4001ecc:	e13ffb15 	stw	r4,-20(fp)
 4001ed0:	e17ffc15 	stw	r5,-16(fp)
 4001ed4:	e1bffd15 	stw	r6,-12(fp)
 4001ed8:	e1fffe15 	stw	r7,-8(fp)
 4001edc:	e0800217 	ldw	r2,8(fp)
 4001ee0:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 4001ee4:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 4001ee8:	e0bffd17 	ldw	r2,-12(fp)
 4001eec:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 4001ef0:	e0bffd17 	ldw	r2,-12(fp)
 4001ef4:	1085883a 	add	r2,r2,r2
 4001ef8:	1085883a 	add	r2,r2,r2
 4001efc:	1007883a 	mov	r3,r2
 4001f00:	00800144 	movi	r2,5
 4001f04:	10c5c83a 	sub	r2,r2,r3
 4001f08:	1000010e 	bge	r2,zero,4001f10 <vid_draw_circle+0x54>
 4001f0c:	108000c4 	addi	r2,r2,3
 4001f10:	1005d0ba 	srai	r2,r2,2
 4001f14:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001f18:	e0bfff07 	ldb	r2,-4(fp)
 4001f1c:	e0c00317 	ldw	r3,12(fp)
 4001f20:	d8c00415 	stw	r3,16(sp)
 4001f24:	d8800315 	stw	r2,12(sp)
 4001f28:	e0bffe17 	ldw	r2,-8(fp)
 4001f2c:	d8800215 	stw	r2,8(sp)
 4001f30:	d8000115 	stw	zero,4(sp)
 4001f34:	d8000015 	stw	zero,0(sp)
 4001f38:	e1fff917 	ldw	r7,-28(fp)
 4001f3c:	e1bff817 	ldw	r6,-32(fp)
 4001f40:	e17ffc17 	ldw	r5,-16(fp)
 4001f44:	e13ffb17 	ldw	r4,-20(fp)
 4001f48:	40023c00 	call	40023c0 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4001f4c:	00002406 	br	4001fe0 <vid_draw_circle+0x124>
    x++;
 4001f50:	e0bff817 	ldw	r2,-32(fp)
 4001f54:	10800044 	addi	r2,r2,1
 4001f58:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4001f5c:	e0bffa17 	ldw	r2,-24(fp)
 4001f60:	1000070e 	bge	r2,zero,4001f80 <vid_draw_circle+0xc4>
      p += 2*x+1;
 4001f64:	e0bff817 	ldw	r2,-32(fp)
 4001f68:	1085883a 	add	r2,r2,r2
 4001f6c:	10800044 	addi	r2,r2,1
 4001f70:	e0fffa17 	ldw	r3,-24(fp)
 4001f74:	1885883a 	add	r2,r3,r2
 4001f78:	e0bffa15 	stw	r2,-24(fp)
 4001f7c:	00000b06 	br	4001fac <vid_draw_circle+0xf0>
    } else {
      y--;
 4001f80:	e0bff917 	ldw	r2,-28(fp)
 4001f84:	10bfffc4 	addi	r2,r2,-1
 4001f88:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4001f8c:	e0fff817 	ldw	r3,-32(fp)
 4001f90:	e0bff917 	ldw	r2,-28(fp)
 4001f94:	1885c83a 	sub	r2,r3,r2
 4001f98:	1085883a 	add	r2,r2,r2
 4001f9c:	10800044 	addi	r2,r2,1
 4001fa0:	e0fffa17 	ldw	r3,-24(fp)
 4001fa4:	1885883a 	add	r2,r3,r2
 4001fa8:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001fac:	e0bfff07 	ldb	r2,-4(fp)
 4001fb0:	e0c00317 	ldw	r3,12(fp)
 4001fb4:	d8c00415 	stw	r3,16(sp)
 4001fb8:	d8800315 	stw	r2,12(sp)
 4001fbc:	e0bffe17 	ldw	r2,-8(fp)
 4001fc0:	d8800215 	stw	r2,8(sp)
 4001fc4:	d8000115 	stw	zero,4(sp)
 4001fc8:	d8000015 	stw	zero,0(sp)
 4001fcc:	e1fff917 	ldw	r7,-28(fp)
 4001fd0:	e1bff817 	ldw	r6,-32(fp)
 4001fd4:	e17ffc17 	ldw	r5,-16(fp)
 4001fd8:	e13ffb17 	ldw	r4,-20(fp)
 4001fdc:	40023c00 	call	40023c0 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4001fe0:	e0fff817 	ldw	r3,-32(fp)
 4001fe4:	e0bff917 	ldw	r2,-28(fp)
 4001fe8:	18bfd916 	blt	r3,r2,4001f50 <__alt_mem_epcs_flash_controller_0+0xfb000f50>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4001fec:	0005883a 	mov	r2,zero
}
 4001ff0:	e037883a 	mov	sp,fp
 4001ff4:	dfc00117 	ldw	ra,4(sp)
 4001ff8:	df000017 	ldw	fp,0(sp)
 4001ffc:	dec00204 	addi	sp,sp,8
 4002000:	f800283a 	ret

04002004 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 4002004:	deffec04 	addi	sp,sp,-80
 4002008:	dfc01315 	stw	ra,76(sp)
 400200c:	df001215 	stw	fp,72(sp)
 4002010:	df001204 	addi	fp,sp,72
 4002014:	e13ffc15 	stw	r4,-16(fp)
 4002018:	e17ffd15 	stw	r5,-12(fp)
 400201c:	e1bffe15 	stw	r6,-8(fp)
 4002020:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4002024:	e0bffc17 	ldw	r2,-16(fp)
 4002028:	e0fffe17 	ldw	r3,-8(fp)
 400202c:	1880060e 	bge	r3,r2,4002048 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 4002030:	e0bffe17 	ldw	r2,-8(fp)
 4002034:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002038:	e0bffc17 	ldw	r2,-16(fp)
 400203c:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 4002040:	e0bff617 	ldw	r2,-40(fp)
 4002044:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 4002048:	e0bffd17 	ldw	r2,-12(fp)
 400204c:	e0ffff17 	ldw	r3,-4(fp)
 4002050:	1880060e 	bge	r3,r2,400206c <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 4002054:	e0bfff17 	ldw	r2,-4(fp)
 4002058:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 400205c:	e0bffd17 	ldw	r2,-12(fp)
 4002060:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 4002064:	e0bff617 	ldw	r2,-40(fp)
 4002068:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 400206c:	e0fffe17 	ldw	r3,-8(fp)
 4002070:	e0bffc17 	ldw	r2,-16(fp)
 4002074:	1885c83a 	sub	r2,r3,r2
 4002078:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 400207c:	e0ffff17 	ldw	r3,-4(fp)
 4002080:	e0bffd17 	ldw	r2,-12(fp)
 4002084:	1885c83a 	sub	r2,r3,r2
 4002088:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 400208c:	e0bff717 	ldw	r2,-36(fp)
 4002090:	1006d07a 	srli	r3,r2,1
 4002094:	e0800217 	ldw	r2,8(fp)
 4002098:	1880032e 	bgeu	r3,r2,40020a8 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 400209c:	e0bff717 	ldw	r2,-36(fp)
 40020a0:	1004d07a 	srli	r2,r2,1
 40020a4:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 40020a8:	e0bff817 	ldw	r2,-32(fp)
 40020ac:	1006d07a 	srli	r3,r2,1
 40020b0:	e0800217 	ldw	r2,8(fp)
 40020b4:	1880032e 	bgeu	r3,r2,40020c4 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 40020b8:	e0bff817 	ldw	r2,-32(fp)
 40020bc:	1004d07a 	srli	r2,r2,1
 40020c0:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 40020c4:	e0800217 	ldw	r2,8(fp)
 40020c8:	1085883a 	add	r2,r2,r2
 40020cc:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 40020d0:	e0bff917 	ldw	r2,-28(fp)
 40020d4:	e0fff717 	ldw	r3,-36(fp)
 40020d8:	1885c83a 	sub	r2,r3,r2
 40020dc:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 40020e0:	e0bff917 	ldw	r2,-28(fp)
 40020e4:	e0fff817 	ldw	r3,-32(fp)
 40020e8:	1885c83a 	sub	r2,r3,r2
 40020ec:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 40020f0:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 40020f4:	e0800217 	ldw	r2,8(fp)
 40020f8:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 40020fc:	e0800217 	ldw	r2,8(fp)
 4002100:	1085883a 	add	r2,r2,r2
 4002104:	1085883a 	add	r2,r2,r2
 4002108:	1007883a 	mov	r3,r2
 400210c:	00800144 	movi	r2,5
 4002110:	10c5c83a 	sub	r2,r2,r3
 4002114:	1000010e 	bge	r2,zero,400211c <vid_draw_round_corner_box+0x118>
 4002118:	108000c4 	addi	r2,r2,3
 400211c:	1005d0ba 	srai	r2,r2,2
 4002120:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002124:	e0fffc17 	ldw	r3,-16(fp)
 4002128:	e0800217 	ldw	r2,8(fp)
 400212c:	1891883a 	add	r8,r3,r2
 4002130:	e0fffd17 	ldw	r3,-12(fp)
 4002134:	e0800217 	ldw	r2,8(fp)
 4002138:	1893883a 	add	r9,r3,r2
 400213c:	e1bff317 	ldw	r6,-52(fp)
 4002140:	e1fff417 	ldw	r7,-48(fp)
 4002144:	e0bffa17 	ldw	r2,-24(fp)
 4002148:	e0fffb17 	ldw	r3,-20(fp)
 400214c:	e1000417 	ldw	r4,16(fp)
 4002150:	21003fcc 	andi	r4,r4,255
 4002154:	2100201c 	xori	r4,r4,128
 4002158:	213fe004 	addi	r4,r4,-128
 400215c:	e1400517 	ldw	r5,20(fp)
 4002160:	d9400415 	stw	r5,16(sp)
 4002164:	d9000315 	stw	r4,12(sp)
 4002168:	e1000317 	ldw	r4,12(fp)
 400216c:	d9000215 	stw	r4,8(sp)
 4002170:	d8c00115 	stw	r3,4(sp)
 4002174:	d8800015 	stw	r2,0(sp)
 4002178:	480b883a 	mov	r5,r9
 400217c:	4009883a 	mov	r4,r8
 4002180:	40023c00 	call	40023c0 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002184:	00003106 	br	400224c <vid_draw_round_corner_box+0x248>
    x++;
 4002188:	e0bff317 	ldw	r2,-52(fp)
 400218c:	10800044 	addi	r2,r2,1
 4002190:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 4002194:	e0bff517 	ldw	r2,-44(fp)
 4002198:	1000080e 	bge	r2,zero,40021bc <vid_draw_round_corner_box+0x1b8>
      p += 2*x+1;
 400219c:	e0bff317 	ldw	r2,-52(fp)
 40021a0:	1085883a 	add	r2,r2,r2
 40021a4:	1007883a 	mov	r3,r2
 40021a8:	e0bff517 	ldw	r2,-44(fp)
 40021ac:	1885883a 	add	r2,r3,r2
 40021b0:	10800044 	addi	r2,r2,1
 40021b4:	e0bff515 	stw	r2,-44(fp)
 40021b8:	00000c06 	br	40021ec <vid_draw_round_corner_box+0x1e8>
    } else {
      y--;
 40021bc:	e0bff417 	ldw	r2,-48(fp)
 40021c0:	10bfffc4 	addi	r2,r2,-1
 40021c4:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 40021c8:	e0fff317 	ldw	r3,-52(fp)
 40021cc:	e0bff417 	ldw	r2,-48(fp)
 40021d0:	1885c83a 	sub	r2,r3,r2
 40021d4:	1085883a 	add	r2,r2,r2
 40021d8:	1007883a 	mov	r3,r2
 40021dc:	e0bff517 	ldw	r2,-44(fp)
 40021e0:	1885883a 	add	r2,r3,r2
 40021e4:	10800044 	addi	r2,r2,1
 40021e8:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 40021ec:	e0fffc17 	ldw	r3,-16(fp)
 40021f0:	e0800217 	ldw	r2,8(fp)
 40021f4:	1891883a 	add	r8,r3,r2
 40021f8:	e0fffd17 	ldw	r3,-12(fp)
 40021fc:	e0800217 	ldw	r2,8(fp)
 4002200:	1893883a 	add	r9,r3,r2
 4002204:	e1bff317 	ldw	r6,-52(fp)
 4002208:	e1fff417 	ldw	r7,-48(fp)
 400220c:	e0bffa17 	ldw	r2,-24(fp)
 4002210:	e0fffb17 	ldw	r3,-20(fp)
 4002214:	e1000417 	ldw	r4,16(fp)
 4002218:	21003fcc 	andi	r4,r4,255
 400221c:	2100201c 	xori	r4,r4,128
 4002220:	213fe004 	addi	r4,r4,-128
 4002224:	e1400517 	ldw	r5,20(fp)
 4002228:	d9400415 	stw	r5,16(sp)
 400222c:	d9000315 	stw	r4,12(sp)
 4002230:	e1000317 	ldw	r4,12(fp)
 4002234:	d9000215 	stw	r4,8(sp)
 4002238:	d8c00115 	stw	r3,4(sp)
 400223c:	d8800015 	stw	r2,0(sp)
 4002240:	480b883a 	mov	r5,r9
 4002244:	4009883a 	mov	r4,r8
 4002248:	40023c00 	call	40023c0 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 400224c:	e0fff317 	ldw	r3,-52(fp)
 4002250:	e0bff417 	ldw	r2,-48(fp)
 4002254:	18bfcc36 	bltu	r3,r2,4002188 <__alt_mem_epcs_flash_controller_0+0xfb001188>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4002258:	e0800417 	ldw	r2,16(fp)
 400225c:	10001026 	beq	r2,zero,40022a0 <vid_draw_round_corner_box+0x29c>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4002260:	e0fffd17 	ldw	r3,-12(fp)
 4002264:	e0800217 	ldw	r2,8(fp)
 4002268:	1889883a 	add	r4,r3,r2
 400226c:	e0ffff17 	ldw	r3,-4(fp)
 4002270:	e0800217 	ldw	r2,8(fp)
 4002274:	1887c83a 	sub	r3,r3,r2
 4002278:	e0800517 	ldw	r2,20(fp)
 400227c:	d8800115 	stw	r2,4(sp)
 4002280:	e0800317 	ldw	r2,12(fp)
 4002284:	d8800015 	stw	r2,0(sp)
 4002288:	180f883a 	mov	r7,r3
 400228c:	e1bffe17 	ldw	r6,-8(fp)
 4002290:	200b883a 	mov	r5,r4
 4002294:	e13ffc17 	ldw	r4,-16(fp)
 4002298:	40013240 	call	4001324 <vid_paint_block>
 400229c:	00004206 	br	40023a8 <vid_draw_round_corner_box+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 40022a0:	e0fffd17 	ldw	r3,-12(fp)
 40022a4:	e0800217 	ldw	r2,8(fp)
 40022a8:	1889883a 	add	r4,r3,r2
 40022ac:	e0ffff17 	ldw	r3,-4(fp)
 40022b0:	e0800217 	ldw	r2,8(fp)
 40022b4:	1887c83a 	sub	r3,r3,r2
 40022b8:	e0800517 	ldw	r2,20(fp)
 40022bc:	d8800215 	stw	r2,8(sp)
 40022c0:	e0800317 	ldw	r2,12(fp)
 40022c4:	d8800115 	stw	r2,4(sp)
 40022c8:	00800044 	movi	r2,1
 40022cc:	d8800015 	stw	r2,0(sp)
 40022d0:	180f883a 	mov	r7,r3
 40022d4:	e1bffc17 	ldw	r6,-16(fp)
 40022d8:	200b883a 	mov	r5,r4
 40022dc:	e13ffc17 	ldw	r4,-16(fp)
 40022e0:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 40022e4:	e0fffd17 	ldw	r3,-12(fp)
 40022e8:	e0800217 	ldw	r2,8(fp)
 40022ec:	1889883a 	add	r4,r3,r2
 40022f0:	e0ffff17 	ldw	r3,-4(fp)
 40022f4:	e0800217 	ldw	r2,8(fp)
 40022f8:	1887c83a 	sub	r3,r3,r2
 40022fc:	e0800517 	ldw	r2,20(fp)
 4002300:	d8800215 	stw	r2,8(sp)
 4002304:	e0800317 	ldw	r2,12(fp)
 4002308:	d8800115 	stw	r2,4(sp)
 400230c:	00800044 	movi	r2,1
 4002310:	d8800015 	stw	r2,0(sp)
 4002314:	180f883a 	mov	r7,r3
 4002318:	e1bffe17 	ldw	r6,-8(fp)
 400231c:	200b883a 	mov	r5,r4
 4002320:	e13ffe17 	ldw	r4,-8(fp)
 4002324:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4002328:	e0fffc17 	ldw	r3,-16(fp)
 400232c:	e0800217 	ldw	r2,8(fp)
 4002330:	1889883a 	add	r4,r3,r2
 4002334:	e0fffe17 	ldw	r3,-8(fp)
 4002338:	e0800217 	ldw	r2,8(fp)
 400233c:	1887c83a 	sub	r3,r3,r2
 4002340:	e0800517 	ldw	r2,20(fp)
 4002344:	d8800215 	stw	r2,8(sp)
 4002348:	e0800317 	ldw	r2,12(fp)
 400234c:	d8800115 	stw	r2,4(sp)
 4002350:	00800044 	movi	r2,1
 4002354:	d8800015 	stw	r2,0(sp)
 4002358:	e1fffd17 	ldw	r7,-12(fp)
 400235c:	180d883a 	mov	r6,r3
 4002360:	e17ffd17 	ldw	r5,-12(fp)
 4002364:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 4002368:	e0fffc17 	ldw	r3,-16(fp)
 400236c:	e0800217 	ldw	r2,8(fp)
 4002370:	1889883a 	add	r4,r3,r2
 4002374:	e0fffe17 	ldw	r3,-8(fp)
 4002378:	e0800217 	ldw	r2,8(fp)
 400237c:	1887c83a 	sub	r3,r3,r2
 4002380:	e0800517 	ldw	r2,20(fp)
 4002384:	d8800215 	stw	r2,8(sp)
 4002388:	e0800317 	ldw	r2,12(fp)
 400238c:	d8800115 	stw	r2,4(sp)
 4002390:	00800044 	movi	r2,1
 4002394:	d8800015 	stw	r2,0(sp)
 4002398:	e1ffff17 	ldw	r7,-4(fp)
 400239c:	180d883a 	mov	r6,r3
 40023a0:	e17fff17 	ldw	r5,-4(fp)
 40023a4:	40006fc0 	call	40006fc <vid_draw_line>
  }

  return (0);
 40023a8:	0005883a 	mov	r2,zero
}
 40023ac:	e037883a 	mov	sp,fp
 40023b0:	dfc00117 	ldw	ra,4(sp)
 40023b4:	df000017 	ldw	fp,0(sp)
 40023b8:	dec00204 	addi	sp,sp,8
 40023bc:	f800283a 	ret

040023c0 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 40023c0:	defff604 	addi	sp,sp,-40
 40023c4:	dfc00915 	stw	ra,36(sp)
 40023c8:	df000815 	stw	fp,32(sp)
 40023cc:	df000804 	addi	fp,sp,32
 40023d0:	e13ffb15 	stw	r4,-20(fp)
 40023d4:	e17ffc15 	stw	r5,-16(fp)
 40023d8:	e1bffd15 	stw	r6,-12(fp)
 40023dc:	e1fffe15 	stw	r7,-8(fp)
 40023e0:	e0800517 	ldw	r2,20(fp)
 40023e4:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 40023e8:	e0bffd17 	ldw	r2,-12(fp)
 40023ec:	1000841e 	bne	r2,zero,4002600 <vid_round_corner_points+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 40023f0:	e0fffc17 	ldw	r3,-16(fp)
 40023f4:	e0bffe17 	ldw	r2,-8(fp)
 40023f8:	1887883a 	add	r3,r3,r2
 40023fc:	e0800317 	ldw	r2,12(fp)
 4002400:	1885883a 	add	r2,r3,r2
 4002404:	e0c00417 	ldw	r3,16(fp)
 4002408:	e1c00617 	ldw	r7,24(fp)
 400240c:	180d883a 	mov	r6,r3
 4002410:	100b883a 	mov	r5,r2
 4002414:	e13ffb17 	ldw	r4,-20(fp)
 4002418:	40011240 	call	4001124 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 400241c:	e0fffb17 	ldw	r3,-20(fp)
 4002420:	e0800217 	ldw	r2,8(fp)
 4002424:	1889883a 	add	r4,r3,r2
 4002428:	e0fffc17 	ldw	r3,-16(fp)
 400242c:	e0bffe17 	ldw	r2,-8(fp)
 4002430:	1887883a 	add	r3,r3,r2
 4002434:	e0800317 	ldw	r2,12(fp)
 4002438:	1885883a 	add	r2,r3,r2
 400243c:	e0c00417 	ldw	r3,16(fp)
 4002440:	e1c00617 	ldw	r7,24(fp)
 4002444:	180d883a 	mov	r6,r3
 4002448:	100b883a 	mov	r5,r2
 400244c:	40011240 	call	4001124 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4002450:	e0fffc17 	ldw	r3,-16(fp)
 4002454:	e0bffe17 	ldw	r2,-8(fp)
 4002458:	1885c83a 	sub	r2,r3,r2
 400245c:	e0c00417 	ldw	r3,16(fp)
 4002460:	e1c00617 	ldw	r7,24(fp)
 4002464:	180d883a 	mov	r6,r3
 4002468:	100b883a 	mov	r5,r2
 400246c:	e13ffb17 	ldw	r4,-20(fp)
 4002470:	40011240 	call	4001124 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 4002474:	e0fffb17 	ldw	r3,-20(fp)
 4002478:	e0800217 	ldw	r2,8(fp)
 400247c:	1889883a 	add	r4,r3,r2
 4002480:	e0fffc17 	ldw	r3,-16(fp)
 4002484:	e0bffe17 	ldw	r2,-8(fp)
 4002488:	1885c83a 	sub	r2,r3,r2
 400248c:	e0c00417 	ldw	r3,16(fp)
 4002490:	e1c00617 	ldw	r7,24(fp)
 4002494:	180d883a 	mov	r6,r3
 4002498:	100b883a 	mov	r5,r2
 400249c:	40011240 	call	4001124 <vid_set_pixel>

        if(fill) {
 40024a0:	e0bfff07 	ldb	r2,-4(fp)
 40024a4:	10002926 	beq	r2,zero,400254c <vid_round_corner_points+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 40024a8:	e0fffb17 	ldw	r3,-20(fp)
 40024ac:	e0bffe17 	ldw	r2,-8(fp)
 40024b0:	1889c83a 	sub	r4,r3,r2
 40024b4:	e0fffb17 	ldw	r3,-20(fp)
 40024b8:	e0bffe17 	ldw	r2,-8(fp)
 40024bc:	1887883a 	add	r3,r3,r2
 40024c0:	e0800217 	ldw	r2,8(fp)
 40024c4:	1887883a 	add	r3,r3,r2
 40024c8:	e0800617 	ldw	r2,24(fp)
 40024cc:	d8800215 	stw	r2,8(sp)
 40024d0:	e0800417 	ldw	r2,16(fp)
 40024d4:	d8800115 	stw	r2,4(sp)
 40024d8:	00800044 	movi	r2,1
 40024dc:	d8800015 	stw	r2,0(sp)
 40024e0:	e1fffc17 	ldw	r7,-16(fp)
 40024e4:	180d883a 	mov	r6,r3
 40024e8:	e17ffc17 	ldw	r5,-16(fp)
 40024ec:	40006fc0 	call	40006fc <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 40024f0:	e0fffb17 	ldw	r3,-20(fp)
 40024f4:	e0bffe17 	ldw	r2,-8(fp)
 40024f8:	1889c83a 	sub	r4,r3,r2
 40024fc:	e0fffc17 	ldw	r3,-16(fp)
 4002500:	e0800317 	ldw	r2,12(fp)
 4002504:	188b883a 	add	r5,r3,r2
 4002508:	e0fffb17 	ldw	r3,-20(fp)
 400250c:	e0bffe17 	ldw	r2,-8(fp)
 4002510:	1887883a 	add	r3,r3,r2
 4002514:	e0800217 	ldw	r2,8(fp)
 4002518:	188d883a 	add	r6,r3,r2
 400251c:	e0fffc17 	ldw	r3,-16(fp)
 4002520:	e0800317 	ldw	r2,12(fp)
 4002524:	1887883a 	add	r3,r3,r2
 4002528:	e0800617 	ldw	r2,24(fp)
 400252c:	d8800215 	stw	r2,8(sp)
 4002530:	e0800417 	ldw	r2,16(fp)
 4002534:	d8800115 	stw	r2,4(sp)
 4002538:	00800044 	movi	r2,1
 400253c:	d8800015 	stw	r2,0(sp)
 4002540:	180f883a 	mov	r7,r3
 4002544:	40006fc0 	call	40006fc <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4002548:	00016606 	br	4002ae4 <vid_round_corner_points+0x724>
        if(fill) {
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 400254c:	e0fffb17 	ldw	r3,-20(fp)
 4002550:	e0bffe17 	ldw	r2,-8(fp)
 4002554:	1887883a 	add	r3,r3,r2
 4002558:	e0800217 	ldw	r2,8(fp)
 400255c:	1885883a 	add	r2,r3,r2
 4002560:	e0c00417 	ldw	r3,16(fp)
 4002564:	e1c00617 	ldw	r7,24(fp)
 4002568:	180d883a 	mov	r6,r3
 400256c:	e17ffc17 	ldw	r5,-16(fp)
 4002570:	1009883a 	mov	r4,r2
 4002574:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4002578:	e0fffb17 	ldw	r3,-20(fp)
 400257c:	e0bffe17 	ldw	r2,-8(fp)
 4002580:	1887883a 	add	r3,r3,r2
 4002584:	e0800217 	ldw	r2,8(fp)
 4002588:	1889883a 	add	r4,r3,r2
 400258c:	e0fffc17 	ldw	r3,-16(fp)
 4002590:	e0800317 	ldw	r2,12(fp)
 4002594:	1885883a 	add	r2,r3,r2
 4002598:	e0c00417 	ldw	r3,16(fp)
 400259c:	e1c00617 	ldw	r7,24(fp)
 40025a0:	180d883a 	mov	r6,r3
 40025a4:	100b883a 	mov	r5,r2
 40025a8:	40011240 	call	4001124 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 40025ac:	e0fffb17 	ldw	r3,-20(fp)
 40025b0:	e0bffe17 	ldw	r2,-8(fp)
 40025b4:	1885c83a 	sub	r2,r3,r2
 40025b8:	e0c00417 	ldw	r3,16(fp)
 40025bc:	e1c00617 	ldw	r7,24(fp)
 40025c0:	180d883a 	mov	r6,r3
 40025c4:	e17ffc17 	ldw	r5,-16(fp)
 40025c8:	1009883a 	mov	r4,r2
 40025cc:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 40025d0:	e0fffb17 	ldw	r3,-20(fp)
 40025d4:	e0bffe17 	ldw	r2,-8(fp)
 40025d8:	1889c83a 	sub	r4,r3,r2
 40025dc:	e0fffc17 	ldw	r3,-16(fp)
 40025e0:	e0800317 	ldw	r2,12(fp)
 40025e4:	1885883a 	add	r2,r3,r2
 40025e8:	e0c00417 	ldw	r3,16(fp)
 40025ec:	e1c00617 	ldw	r7,24(fp)
 40025f0:	180d883a 	mov	r6,r3
 40025f4:	100b883a 	mov	r5,r2
 40025f8:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40025fc:	00013906 	br	4002ae4 <vid_round_corner_points+0x724>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 4002600:	e0fffd17 	ldw	r3,-12(fp)
 4002604:	e0bffe17 	ldw	r2,-8(fp)
 4002608:	1880681e 	bne	r3,r2,40027ac <vid_round_corner_points+0x3ec>
      if(fill) {
 400260c:	e0bfff07 	ldb	r2,-4(fp)
 4002610:	10003126 	beq	r2,zero,40026d8 <vid_round_corner_points+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 4002614:	e0fffb17 	ldw	r3,-20(fp)
 4002618:	e0bffd17 	ldw	r2,-12(fp)
 400261c:	1889c83a 	sub	r4,r3,r2
 4002620:	e0fffc17 	ldw	r3,-16(fp)
 4002624:	e0bffe17 	ldw	r2,-8(fp)
 4002628:	1887883a 	add	r3,r3,r2
 400262c:	e0800317 	ldw	r2,12(fp)
 4002630:	188b883a 	add	r5,r3,r2
 4002634:	e0fffb17 	ldw	r3,-20(fp)
 4002638:	e0bffd17 	ldw	r2,-12(fp)
 400263c:	1887883a 	add	r3,r3,r2
 4002640:	e0800217 	ldw	r2,8(fp)
 4002644:	188d883a 	add	r6,r3,r2
 4002648:	e0fffc17 	ldw	r3,-16(fp)
 400264c:	e0bffe17 	ldw	r2,-8(fp)
 4002650:	1887883a 	add	r3,r3,r2
 4002654:	e0800317 	ldw	r2,12(fp)
 4002658:	1887883a 	add	r3,r3,r2
 400265c:	e0800617 	ldw	r2,24(fp)
 4002660:	d8800215 	stw	r2,8(sp)
 4002664:	e0800417 	ldw	r2,16(fp)
 4002668:	d8800115 	stw	r2,4(sp)
 400266c:	00800044 	movi	r2,1
 4002670:	d8800015 	stw	r2,0(sp)
 4002674:	180f883a 	mov	r7,r3
 4002678:	40006fc0 	call	40006fc <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 400267c:	e0fffb17 	ldw	r3,-20(fp)
 4002680:	e0bffd17 	ldw	r2,-12(fp)
 4002684:	1889c83a 	sub	r4,r3,r2
 4002688:	e0fffc17 	ldw	r3,-16(fp)
 400268c:	e0bffe17 	ldw	r2,-8(fp)
 4002690:	188bc83a 	sub	r5,r3,r2
 4002694:	e0fffb17 	ldw	r3,-20(fp)
 4002698:	e0bffd17 	ldw	r2,-12(fp)
 400269c:	1887883a 	add	r3,r3,r2
 40026a0:	e0800217 	ldw	r2,8(fp)
 40026a4:	188d883a 	add	r6,r3,r2
 40026a8:	e0fffc17 	ldw	r3,-16(fp)
 40026ac:	e0bffe17 	ldw	r2,-8(fp)
 40026b0:	1887c83a 	sub	r3,r3,r2
 40026b4:	e0800617 	ldw	r2,24(fp)
 40026b8:	d8800215 	stw	r2,8(sp)
 40026bc:	e0800417 	ldw	r2,16(fp)
 40026c0:	d8800115 	stw	r2,4(sp)
 40026c4:	00800044 	movi	r2,1
 40026c8:	d8800015 	stw	r2,0(sp)
 40026cc:	180f883a 	mov	r7,r3
 40026d0:	40006fc0 	call	40006fc <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40026d4:	00010306 	br	4002ae4 <vid_round_corner_points+0x724>
      if(fill) {
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 40026d8:	e0fffb17 	ldw	r3,-20(fp)
 40026dc:	e0bffd17 	ldw	r2,-12(fp)
 40026e0:	1887883a 	add	r3,r3,r2
 40026e4:	e0800217 	ldw	r2,8(fp)
 40026e8:	1889883a 	add	r4,r3,r2
 40026ec:	e0fffc17 	ldw	r3,-16(fp)
 40026f0:	e0bffe17 	ldw	r2,-8(fp)
 40026f4:	1887883a 	add	r3,r3,r2
 40026f8:	e0800317 	ldw	r2,12(fp)
 40026fc:	1885883a 	add	r2,r3,r2
 4002700:	e0c00417 	ldw	r3,16(fp)
 4002704:	e1c00617 	ldw	r7,24(fp)
 4002708:	180d883a 	mov	r6,r3
 400270c:	100b883a 	mov	r5,r2
 4002710:	40011240 	call	4001124 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 4002714:	e0fffb17 	ldw	r3,-20(fp)
 4002718:	e0bffd17 	ldw	r2,-12(fp)
 400271c:	1889c83a 	sub	r4,r3,r2
 4002720:	e0fffc17 	ldw	r3,-16(fp)
 4002724:	e0bffe17 	ldw	r2,-8(fp)
 4002728:	1887883a 	add	r3,r3,r2
 400272c:	e0800317 	ldw	r2,12(fp)
 4002730:	1885883a 	add	r2,r3,r2
 4002734:	e0c00417 	ldw	r3,16(fp)
 4002738:	e1c00617 	ldw	r7,24(fp)
 400273c:	180d883a 	mov	r6,r3
 4002740:	100b883a 	mov	r5,r2
 4002744:	40011240 	call	4001124 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4002748:	e0fffb17 	ldw	r3,-20(fp)
 400274c:	e0bffd17 	ldw	r2,-12(fp)
 4002750:	1887883a 	add	r3,r3,r2
 4002754:	e0800217 	ldw	r2,8(fp)
 4002758:	1889883a 	add	r4,r3,r2
 400275c:	e0fffc17 	ldw	r3,-16(fp)
 4002760:	e0bffe17 	ldw	r2,-8(fp)
 4002764:	1885c83a 	sub	r2,r3,r2
 4002768:	e0c00417 	ldw	r3,16(fp)
 400276c:	e1c00617 	ldw	r7,24(fp)
 4002770:	180d883a 	mov	r6,r3
 4002774:	100b883a 	mov	r5,r2
 4002778:	40011240 	call	4001124 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 400277c:	e0fffb17 	ldw	r3,-20(fp)
 4002780:	e0bffd17 	ldw	r2,-12(fp)
 4002784:	1889c83a 	sub	r4,r3,r2
 4002788:	e0fffc17 	ldw	r3,-16(fp)
 400278c:	e0bffe17 	ldw	r2,-8(fp)
 4002790:	1885c83a 	sub	r2,r3,r2
 4002794:	e0c00417 	ldw	r3,16(fp)
 4002798:	e1c00617 	ldw	r7,24(fp)
 400279c:	180d883a 	mov	r6,r3
 40027a0:	100b883a 	mov	r5,r2
 40027a4:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40027a8:	0000ce06 	br	4002ae4 <vid_round_corner_points+0x724>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
        vid_set_pixel(cx - x, cy - y, color, display); // top left
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 40027ac:	e0fffd17 	ldw	r3,-12(fp)
 40027b0:	e0bffe17 	ldw	r2,-8(fp)
 40027b4:	1880cb0e 	bge	r3,r2,4002ae4 <vid_round_corner_points+0x724>
        if(fill) {
 40027b8:	e0bfff07 	ldb	r2,-4(fp)
 40027bc:	10006126 	beq	r2,zero,4002944 <vid_round_corner_points+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40027c0:	e0fffb17 	ldw	r3,-20(fp)
 40027c4:	e0bffd17 	ldw	r2,-12(fp)
 40027c8:	1889c83a 	sub	r4,r3,r2
 40027cc:	e0fffc17 	ldw	r3,-16(fp)
 40027d0:	e0bffe17 	ldw	r2,-8(fp)
 40027d4:	1887883a 	add	r3,r3,r2
 40027d8:	e0800317 	ldw	r2,12(fp)
 40027dc:	188b883a 	add	r5,r3,r2
 40027e0:	e0fffb17 	ldw	r3,-20(fp)
 40027e4:	e0bffd17 	ldw	r2,-12(fp)
 40027e8:	1887883a 	add	r3,r3,r2
 40027ec:	e0800217 	ldw	r2,8(fp)
 40027f0:	188d883a 	add	r6,r3,r2
 40027f4:	e0fffc17 	ldw	r3,-16(fp)
 40027f8:	e0bffe17 	ldw	r2,-8(fp)
 40027fc:	1887883a 	add	r3,r3,r2
 4002800:	e0800317 	ldw	r2,12(fp)
 4002804:	1887883a 	add	r3,r3,r2
 4002808:	e0800617 	ldw	r2,24(fp)
 400280c:	d8800215 	stw	r2,8(sp)
 4002810:	e0800417 	ldw	r2,16(fp)
 4002814:	d8800115 	stw	r2,4(sp)
 4002818:	00800044 	movi	r2,1
 400281c:	d8800015 	stw	r2,0(sp)
 4002820:	180f883a 	mov	r7,r3
 4002824:	40006fc0 	call	40006fc <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4002828:	e0fffb17 	ldw	r3,-20(fp)
 400282c:	e0bffe17 	ldw	r2,-8(fp)
 4002830:	1889c83a 	sub	r4,r3,r2
 4002834:	e0fffc17 	ldw	r3,-16(fp)
 4002838:	e0bffd17 	ldw	r2,-12(fp)
 400283c:	1887883a 	add	r3,r3,r2
 4002840:	e0800317 	ldw	r2,12(fp)
 4002844:	188b883a 	add	r5,r3,r2
 4002848:	e0fffb17 	ldw	r3,-20(fp)
 400284c:	e0bffe17 	ldw	r2,-8(fp)
 4002850:	1887883a 	add	r3,r3,r2
 4002854:	e0800217 	ldw	r2,8(fp)
 4002858:	188d883a 	add	r6,r3,r2
 400285c:	e0fffc17 	ldw	r3,-16(fp)
 4002860:	e0bffd17 	ldw	r2,-12(fp)
 4002864:	1887883a 	add	r3,r3,r2
 4002868:	e0800317 	ldw	r2,12(fp)
 400286c:	1887883a 	add	r3,r3,r2
 4002870:	e0800617 	ldw	r2,24(fp)
 4002874:	d8800215 	stw	r2,8(sp)
 4002878:	e0800417 	ldw	r2,16(fp)
 400287c:	d8800115 	stw	r2,4(sp)
 4002880:	00800044 	movi	r2,1
 4002884:	d8800015 	stw	r2,0(sp)
 4002888:	180f883a 	mov	r7,r3
 400288c:	40006fc0 	call	40006fc <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4002890:	e0fffb17 	ldw	r3,-20(fp)
 4002894:	e0bffe17 	ldw	r2,-8(fp)
 4002898:	1889c83a 	sub	r4,r3,r2
 400289c:	e0fffc17 	ldw	r3,-16(fp)
 40028a0:	e0bffd17 	ldw	r2,-12(fp)
 40028a4:	188bc83a 	sub	r5,r3,r2
 40028a8:	e0fffb17 	ldw	r3,-20(fp)
 40028ac:	e0bffe17 	ldw	r2,-8(fp)
 40028b0:	1887883a 	add	r3,r3,r2
 40028b4:	e0800217 	ldw	r2,8(fp)
 40028b8:	188d883a 	add	r6,r3,r2
 40028bc:	e0fffc17 	ldw	r3,-16(fp)
 40028c0:	e0bffd17 	ldw	r2,-12(fp)
 40028c4:	1887c83a 	sub	r3,r3,r2
 40028c8:	e0800617 	ldw	r2,24(fp)
 40028cc:	d8800215 	stw	r2,8(sp)
 40028d0:	e0800417 	ldw	r2,16(fp)
 40028d4:	d8800115 	stw	r2,4(sp)
 40028d8:	00800044 	movi	r2,1
 40028dc:	d8800015 	stw	r2,0(sp)
 40028e0:	180f883a 	mov	r7,r3
 40028e4:	40006fc0 	call	40006fc <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 40028e8:	e0fffb17 	ldw	r3,-20(fp)
 40028ec:	e0bffd17 	ldw	r2,-12(fp)
 40028f0:	1889c83a 	sub	r4,r3,r2
 40028f4:	e0fffc17 	ldw	r3,-16(fp)
 40028f8:	e0bffe17 	ldw	r2,-8(fp)
 40028fc:	188bc83a 	sub	r5,r3,r2
 4002900:	e0fffb17 	ldw	r3,-20(fp)
 4002904:	e0bffd17 	ldw	r2,-12(fp)
 4002908:	1887883a 	add	r3,r3,r2
 400290c:	e0800217 	ldw	r2,8(fp)
 4002910:	188d883a 	add	r6,r3,r2
 4002914:	e0fffc17 	ldw	r3,-16(fp)
 4002918:	e0bffe17 	ldw	r2,-8(fp)
 400291c:	1887c83a 	sub	r3,r3,r2
 4002920:	e0800617 	ldw	r2,24(fp)
 4002924:	d8800215 	stw	r2,8(sp)
 4002928:	e0800417 	ldw	r2,16(fp)
 400292c:	d8800115 	stw	r2,4(sp)
 4002930:	00800044 	movi	r2,1
 4002934:	d8800015 	stw	r2,0(sp)
 4002938:	180f883a 	mov	r7,r3
 400293c:	40006fc0 	call	40006fc <vid_draw_line>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4002940:	00006806 	br	4002ae4 <vid_round_corner_points+0x724>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 4002944:	e0fffb17 	ldw	r3,-20(fp)
 4002948:	e0bffd17 	ldw	r2,-12(fp)
 400294c:	1887883a 	add	r3,r3,r2
 4002950:	e0800217 	ldw	r2,8(fp)
 4002954:	1889883a 	add	r4,r3,r2
 4002958:	e0fffc17 	ldw	r3,-16(fp)
 400295c:	e0bffe17 	ldw	r2,-8(fp)
 4002960:	1887883a 	add	r3,r3,r2
 4002964:	e0800317 	ldw	r2,12(fp)
 4002968:	1885883a 	add	r2,r3,r2
 400296c:	e0c00417 	ldw	r3,16(fp)
 4002970:	e1c00617 	ldw	r7,24(fp)
 4002974:	180d883a 	mov	r6,r3
 4002978:	100b883a 	mov	r5,r2
 400297c:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4002980:	e0fffb17 	ldw	r3,-20(fp)
 4002984:	e0bffd17 	ldw	r2,-12(fp)
 4002988:	1889c83a 	sub	r4,r3,r2
 400298c:	e0fffc17 	ldw	r3,-16(fp)
 4002990:	e0bffe17 	ldw	r2,-8(fp)
 4002994:	1887883a 	add	r3,r3,r2
 4002998:	e0800317 	ldw	r2,12(fp)
 400299c:	1885883a 	add	r2,r3,r2
 40029a0:	e0c00417 	ldw	r3,16(fp)
 40029a4:	e1c00617 	ldw	r7,24(fp)
 40029a8:	180d883a 	mov	r6,r3
 40029ac:	100b883a 	mov	r5,r2
 40029b0:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 40029b4:	e0fffb17 	ldw	r3,-20(fp)
 40029b8:	e0bffd17 	ldw	r2,-12(fp)
 40029bc:	1887883a 	add	r3,r3,r2
 40029c0:	e0800217 	ldw	r2,8(fp)
 40029c4:	1889883a 	add	r4,r3,r2
 40029c8:	e0fffc17 	ldw	r3,-16(fp)
 40029cc:	e0bffe17 	ldw	r2,-8(fp)
 40029d0:	1885c83a 	sub	r2,r3,r2
 40029d4:	e0c00417 	ldw	r3,16(fp)
 40029d8:	e1c00617 	ldw	r7,24(fp)
 40029dc:	180d883a 	mov	r6,r3
 40029e0:	100b883a 	mov	r5,r2
 40029e4:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 40029e8:	e0fffb17 	ldw	r3,-20(fp)
 40029ec:	e0bffd17 	ldw	r2,-12(fp)
 40029f0:	1889c83a 	sub	r4,r3,r2
 40029f4:	e0fffc17 	ldw	r3,-16(fp)
 40029f8:	e0bffe17 	ldw	r2,-8(fp)
 40029fc:	1885c83a 	sub	r2,r3,r2
 4002a00:	e0c00417 	ldw	r3,16(fp)
 4002a04:	e1c00617 	ldw	r7,24(fp)
 4002a08:	180d883a 	mov	r6,r3
 4002a0c:	100b883a 	mov	r5,r2
 4002a10:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4002a14:	e0fffb17 	ldw	r3,-20(fp)
 4002a18:	e0bffe17 	ldw	r2,-8(fp)
 4002a1c:	1887883a 	add	r3,r3,r2
 4002a20:	e0800217 	ldw	r2,8(fp)
 4002a24:	1889883a 	add	r4,r3,r2
 4002a28:	e0fffc17 	ldw	r3,-16(fp)
 4002a2c:	e0bffd17 	ldw	r2,-12(fp)
 4002a30:	1887883a 	add	r3,r3,r2
 4002a34:	e0800317 	ldw	r2,12(fp)
 4002a38:	1885883a 	add	r2,r3,r2
 4002a3c:	e0c00417 	ldw	r3,16(fp)
 4002a40:	e1c00617 	ldw	r7,24(fp)
 4002a44:	180d883a 	mov	r6,r3
 4002a48:	100b883a 	mov	r5,r2
 4002a4c:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4002a50:	e0fffb17 	ldw	r3,-20(fp)
 4002a54:	e0bffe17 	ldw	r2,-8(fp)
 4002a58:	1889c83a 	sub	r4,r3,r2
 4002a5c:	e0fffc17 	ldw	r3,-16(fp)
 4002a60:	e0bffd17 	ldw	r2,-12(fp)
 4002a64:	1887883a 	add	r3,r3,r2
 4002a68:	e0800317 	ldw	r2,12(fp)
 4002a6c:	1885883a 	add	r2,r3,r2
 4002a70:	e0c00417 	ldw	r3,16(fp)
 4002a74:	e1c00617 	ldw	r7,24(fp)
 4002a78:	180d883a 	mov	r6,r3
 4002a7c:	100b883a 	mov	r5,r2
 4002a80:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4002a84:	e0fffb17 	ldw	r3,-20(fp)
 4002a88:	e0bffe17 	ldw	r2,-8(fp)
 4002a8c:	1887883a 	add	r3,r3,r2
 4002a90:	e0800217 	ldw	r2,8(fp)
 4002a94:	1889883a 	add	r4,r3,r2
 4002a98:	e0fffc17 	ldw	r3,-16(fp)
 4002a9c:	e0bffd17 	ldw	r2,-12(fp)
 4002aa0:	1885c83a 	sub	r2,r3,r2
 4002aa4:	e0c00417 	ldw	r3,16(fp)
 4002aa8:	e1c00617 	ldw	r7,24(fp)
 4002aac:	180d883a 	mov	r6,r3
 4002ab0:	100b883a 	mov	r5,r2
 4002ab4:	40011240 	call	4001124 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 4002ab8:	e0fffb17 	ldw	r3,-20(fp)
 4002abc:	e0bffe17 	ldw	r2,-8(fp)
 4002ac0:	1889c83a 	sub	r4,r3,r2
 4002ac4:	e0fffc17 	ldw	r3,-16(fp)
 4002ac8:	e0bffd17 	ldw	r2,-12(fp)
 4002acc:	1885c83a 	sub	r2,r3,r2
 4002ad0:	e0c00417 	ldw	r3,16(fp)
 4002ad4:	e1c00617 	ldw	r7,24(fp)
 4002ad8:	180d883a 	mov	r6,r3
 4002adc:	100b883a 	mov	r5,r2
 4002ae0:	40011240 	call	4001124 <vid_set_pixel>
        }
    }
}
 4002ae4:	0001883a 	nop
 4002ae8:	e037883a 	mov	sp,fp
 4002aec:	dfc00117 	ldw	ra,4(sp)
 4002af0:	df000017 	ldw	fp,0(sp)
 4002af4:	dec00204 	addi	sp,sp,8
 4002af8:	f800283a 	ret

04002afc <max3>:
*            Used for drawing filled shapes
*
******************************************************************/
//__inline__
int max3( int a, int b, int c )
{
 4002afc:	defffc04 	addi	sp,sp,-16
 4002b00:	df000315 	stw	fp,12(sp)
 4002b04:	df000304 	addi	fp,sp,12
 4002b08:	e13ffd15 	stw	r4,-12(fp)
 4002b0c:	e17ffe15 	stw	r5,-8(fp)
 4002b10:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4002b14:	e0fffd17 	ldw	r3,-12(fp)
 4002b18:	e0bffe17 	ldw	r2,-8(fp)
 4002b1c:	1880020e 	bge	r3,r2,4002b28 <max3+0x2c>
    a = b;
 4002b20:	e0bffe17 	ldw	r2,-8(fp)
 4002b24:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4002b28:	e0fffd17 	ldw	r3,-12(fp)
 4002b2c:	e0bfff17 	ldw	r2,-4(fp)
 4002b30:	1880020e 	bge	r3,r2,4002b3c <max3+0x40>
    a = c;
 4002b34:	e0bfff17 	ldw	r2,-4(fp)
 4002b38:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002b3c:	e0bffd17 	ldw	r2,-12(fp)
}
 4002b40:	e037883a 	mov	sp,fp
 4002b44:	df000017 	ldw	fp,0(sp)
 4002b48:	dec00104 	addi	sp,sp,4
 4002b4c:	f800283a 	ret

04002b50 <min3>:
*            Used for drawing filled shapes.
*
******************************************************************/
//__inline__
int min3( int a, int b, int c )
{
 4002b50:	defffc04 	addi	sp,sp,-16
 4002b54:	df000315 	stw	fp,12(sp)
 4002b58:	df000304 	addi	fp,sp,12
 4002b5c:	e13ffd15 	stw	r4,-12(fp)
 4002b60:	e17ffe15 	stw	r5,-8(fp)
 4002b64:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4002b68:	e0bffd17 	ldw	r2,-12(fp)
 4002b6c:	e0fffe17 	ldw	r3,-8(fp)
 4002b70:	1880020e 	bge	r3,r2,4002b7c <min3+0x2c>
    a = b;
 4002b74:	e0bffe17 	ldw	r2,-8(fp)
 4002b78:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4002b7c:	e0bffd17 	ldw	r2,-12(fp)
 4002b80:	e0ffff17 	ldw	r3,-4(fp)
 4002b84:	1880020e 	bge	r3,r2,4002b90 <min3+0x40>
    a = c;
 4002b88:	e0bfff17 	ldw	r2,-4(fp)
 4002b8c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002b90:	e0bffd17 	ldw	r2,-12(fp)
}
 4002b94:	e037883a 	mov	sp,fp
 4002b98:	df000017 	ldw	fp,0(sp)
 4002b9c:	dec00104 	addi	sp,sp,4
 4002ba0:	f800283a 	ret

04002ba4 <max_diff3>:
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
//__inline__
int max_diff3(int a, int b, int c)
{
 4002ba4:	defff904 	addi	sp,sp,-28
 4002ba8:	dfc00615 	stw	ra,24(sp)
 4002bac:	df000515 	stw	fp,20(sp)
 4002bb0:	df000504 	addi	fp,sp,20
 4002bb4:	e13ffd15 	stw	r4,-12(fp)
 4002bb8:	e17ffe15 	stw	r5,-8(fp)
 4002bbc:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4002bc0:	e1bfff17 	ldw	r6,-4(fp)
 4002bc4:	e17ffe17 	ldw	r5,-8(fp)
 4002bc8:	e13ffd17 	ldw	r4,-12(fp)
 4002bcc:	4002afc0 	call	4002afc <max3>
 4002bd0:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4002bd4:	e1bfff17 	ldw	r6,-4(fp)
 4002bd8:	e17ffe17 	ldw	r5,-8(fp)
 4002bdc:	e13ffd17 	ldw	r4,-12(fp)
 4002be0:	4002b500 	call	4002b50 <min3>
 4002be4:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4002be8:	e0fffb17 	ldw	r3,-20(fp)
 4002bec:	e0bffc17 	ldw	r2,-16(fp)
 4002bf0:	1885c83a 	sub	r2,r3,r2
}
 4002bf4:	e037883a 	mov	sp,fp
 4002bf8:	dfc00117 	ldw	ra,4(sp)
 4002bfc:	df000017 	ldw	fp,0(sp)
 4002c00:	dec00204 	addi	sp,sp,8
 4002c04:	f800283a 	ret

04002c08 <vid_put_pixel_in_span_map>:
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
//inline
void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4002c08:	defffc04 	addi	sp,sp,-16
 4002c0c:	df000315 	stw	fp,12(sp)
 4002c10:	df000304 	addi	fp,sp,12
 4002c14:	e13ffd15 	stw	r4,-12(fp)
 4002c18:	e17ffe15 	stw	r5,-8(fp)
 4002c1c:	e1bfff15 	stw	r6,-4(fp)

  if (span_array[y*2] == -1)
 4002c20:	e0bffe17 	ldw	r2,-8(fp)
 4002c24:	100490fa 	slli	r2,r2,3
 4002c28:	1007883a 	mov	r3,r2
 4002c2c:	e0bfff17 	ldw	r2,-4(fp)
 4002c30:	10c5883a 	add	r2,r2,r3
 4002c34:	10800017 	ldw	r2,0(r2)
 4002c38:	10bfffd8 	cmpnei	r2,r2,-1
 4002c3c:	10000f1e 	bne	r2,zero,4002c7c <vid_put_pixel_in_span_map+0x74>
  {
    span_array[y*2] = x;
 4002c40:	e0bffe17 	ldw	r2,-8(fp)
 4002c44:	100490fa 	slli	r2,r2,3
 4002c48:	1007883a 	mov	r3,r2
 4002c4c:	e0bfff17 	ldw	r2,-4(fp)
 4002c50:	10c5883a 	add	r2,r2,r3
 4002c54:	e0fffd17 	ldw	r3,-12(fp)
 4002c58:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 4002c5c:	e0bffe17 	ldw	r2,-8(fp)
 4002c60:	100490fa 	slli	r2,r2,3
 4002c64:	10800104 	addi	r2,r2,4
 4002c68:	e0ffff17 	ldw	r3,-4(fp)
 4002c6c:	1885883a 	add	r2,r3,r2
 4002c70:	e0fffd17 	ldw	r3,-12(fp)
 4002c74:	10c00015 	stw	r3,0(r2)
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4002c78:	00001f06 	br	4002cf8 <vid_put_pixel_in_span_map+0xf0>
  if (span_array[y*2] == -1)
  {
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
 4002c7c:	e0bffe17 	ldw	r2,-8(fp)
 4002c80:	100490fa 	slli	r2,r2,3
 4002c84:	1007883a 	mov	r3,r2
 4002c88:	e0bfff17 	ldw	r2,-4(fp)
 4002c8c:	10c5883a 	add	r2,r2,r3
 4002c90:	10800017 	ldw	r2,0(r2)
 4002c94:	e0fffd17 	ldw	r3,-12(fp)
 4002c98:	1880080e 	bge	r3,r2,4002cbc <vid_put_pixel_in_span_map+0xb4>
    span_array[y*2] = x;
 4002c9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ca0:	100490fa 	slli	r2,r2,3
 4002ca4:	1007883a 	mov	r3,r2
 4002ca8:	e0bfff17 	ldw	r2,-4(fp)
 4002cac:	10c5883a 	add	r2,r2,r3
 4002cb0:	e0fffd17 	ldw	r3,-12(fp)
 4002cb4:	10c00015 	stw	r3,0(r2)
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4002cb8:	00000f06 	br	4002cf8 <vid_put_pixel_in_span_map+0xf0>
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
 4002cbc:	e0bffe17 	ldw	r2,-8(fp)
 4002cc0:	100490fa 	slli	r2,r2,3
 4002cc4:	10800104 	addi	r2,r2,4
 4002cc8:	e0ffff17 	ldw	r3,-4(fp)
 4002ccc:	1885883a 	add	r2,r3,r2
 4002cd0:	10c00017 	ldw	r3,0(r2)
 4002cd4:	e0bffd17 	ldw	r2,-12(fp)
 4002cd8:	1880070e 	bge	r3,r2,4002cf8 <vid_put_pixel_in_span_map+0xf0>
    span_array[(y*2)+1] = x;
 4002cdc:	e0bffe17 	ldw	r2,-8(fp)
 4002ce0:	100490fa 	slli	r2,r2,3
 4002ce4:	10800104 	addi	r2,r2,4
 4002ce8:	e0ffff17 	ldw	r3,-4(fp)
 4002cec:	1885883a 	add	r2,r3,r2
 4002cf0:	e0fffd17 	ldw	r3,-12(fp)
 4002cf4:	10c00015 	stw	r3,0(r2)
}
 4002cf8:	0001883a 	nop
 4002cfc:	e037883a 	mov	sp,fp
 4002d00:	df000017 	ldw	fp,0(sp)
 4002d04:	dec00104 	addi	sp,sp,4
 4002d08:	f800283a 	ret

04002d0c <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 4002d0c:	deffee04 	addi	sp,sp,-72
 4002d10:	dfc01115 	stw	ra,68(sp)
 4002d14:	df001015 	stw	fp,64(sp)
 4002d18:	df001004 	addi	fp,sp,64
 4002d1c:	e13ffc15 	stw	r4,-16(fp)
 4002d20:	e17ffd15 	stw	r5,-12(fp)
 4002d24:	e1bffe15 	stw	r6,-8(fp)
 4002d28:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 4002d2c:	e0bffc17 	ldw	r2,-16(fp)
 4002d30:	e0fffe17 	ldw	r3,-8(fp)
 4002d34:	18800c0e 	bge	r3,r2,4002d68 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 4002d38:	e0bffe17 	ldw	r2,-8(fp)
 4002d3c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4002d40:	e0bffc17 	ldw	r2,-16(fp)
 4002d44:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4002d48:	e0bff517 	ldw	r2,-44(fp)
 4002d4c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4002d50:	e0bfff17 	ldw	r2,-4(fp)
 4002d54:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4002d58:	e0bffd17 	ldw	r2,-12(fp)
 4002d5c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4002d60:	e0bff617 	ldw	r2,-40(fp)
 4002d64:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4002d68:	e0fffd17 	ldw	r3,-12(fp)
 4002d6c:	e0bfff17 	ldw	r2,-4(fp)
 4002d70:	1885c83a 	sub	r2,r3,r2
 4002d74:	1000010e 	bge	r2,zero,4002d7c <vid_bres_scan_edges+0x70>
 4002d78:	0085c83a 	sub	r2,zero,r2
 4002d7c:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4002d80:	e0fffe17 	ldw	r3,-8(fp)
 4002d84:	e0bffc17 	ldw	r2,-16(fp)
 4002d88:	1885c83a 	sub	r2,r3,r2
 4002d8c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4002d90:	e0bffd17 	ldw	r2,-12(fp)
 4002d94:	e0ffff17 	ldw	r3,-4(fp)
 4002d98:	1880030e 	bge	r3,r2,4002da8 <vid_bres_scan_edges+0x9c>
 4002d9c:	00bfffc4 	movi	r2,-1
 4002da0:	e0bff015 	stw	r2,-64(fp)
 4002da4:	00000206 	br	4002db0 <vid_bres_scan_edges+0xa4>
 4002da8:	00800044 	movi	r2,1
 4002dac:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 4002db0:	00800044 	movi	r2,1
 4002db4:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 4002db8:	e0fff217 	ldw	r3,-56(fp)
 4002dbc:	e0bff117 	ldw	r2,-60(fp)
 4002dc0:	18802f16 	blt	r3,r2,4002e80 <vid_bres_scan_edges+0x174>
    int dPr   = y_delta<<1;
 4002dc4:	e0bff117 	ldw	r2,-60(fp)
 4002dc8:	1085883a 	add	r2,r2,r2
 4002dcc:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 4002dd0:	e0bff217 	ldw	r2,-56(fp)
 4002dd4:	1085883a 	add	r2,r2,r2
 4002dd8:	1007883a 	mov	r3,r2
 4002ddc:	e0bff817 	ldw	r2,-32(fp)
 4002de0:	10c5c83a 	sub	r2,r2,r3
 4002de4:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 4002de8:	e0fff817 	ldw	r3,-32(fp)
 4002dec:	e0bff217 	ldw	r2,-56(fp)
 4002df0:	1885c83a 	sub	r2,r3,r2
 4002df4:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002df8:	00001e06 	br	4002e74 <vid_bres_scan_edges+0x168>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002dfc:	e1800217 	ldw	r6,8(fp)
 4002e00:	e17ffd17 	ldw	r5,-12(fp)
 4002e04:	e13ffc17 	ldw	r4,-16(fp)
 4002e08:	4002c080 	call	4002c08 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002e0c:	e0bff317 	ldw	r2,-52(fp)
 4002e10:	00800d0e 	bge	zero,r2,4002e48 <vid_bres_scan_edges+0x13c>
        x1+=x_incr;
 4002e14:	e0fffc17 	ldw	r3,-16(fp)
 4002e18:	e0bff717 	ldw	r2,-36(fp)
 4002e1c:	1885883a 	add	r2,r3,r2
 4002e20:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002e24:	e0fffd17 	ldw	r3,-12(fp)
 4002e28:	e0bff017 	ldw	r2,-64(fp)
 4002e2c:	1885883a 	add	r2,r3,r2
 4002e30:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002e34:	e0fff317 	ldw	r3,-52(fp)
 4002e38:	e0bff917 	ldw	r2,-28(fp)
 4002e3c:	1885883a 	add	r2,r3,r2
 4002e40:	e0bff315 	stw	r2,-52(fp)
 4002e44:	00000806 	br	4002e68 <vid_bres_scan_edges+0x15c>
      } else {
        x1+=x_incr;
 4002e48:	e0fffc17 	ldw	r3,-16(fp)
 4002e4c:	e0bff717 	ldw	r2,-36(fp)
 4002e50:	1885883a 	add	r2,r3,r2
 4002e54:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 4002e58:	e0fff317 	ldw	r3,-52(fp)
 4002e5c:	e0bff817 	ldw	r2,-32(fp)
 4002e60:	1885883a 	add	r2,r3,r2
 4002e64:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002e68:	e0bff217 	ldw	r2,-56(fp)
 4002e6c:	10bfffc4 	addi	r2,r2,-1
 4002e70:	e0bff215 	stw	r2,-56(fp)
 4002e74:	e0bff217 	ldw	r2,-56(fp)
 4002e78:	103fe00e 	bge	r2,zero,4002dfc <__alt_mem_epcs_flash_controller_0+0xfb001dfc>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4002e7c:	00002e06 	br	4002f38 <vid_bres_scan_edges+0x22c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 4002e80:	e0bff217 	ldw	r2,-56(fp)
 4002e84:	1085883a 	add	r2,r2,r2
 4002e88:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 4002e8c:	e0bff117 	ldw	r2,-60(fp)
 4002e90:	1085883a 	add	r2,r2,r2
 4002e94:	1007883a 	mov	r3,r2
 4002e98:	e0bffa17 	ldw	r2,-24(fp)
 4002e9c:	10c5c83a 	sub	r2,r2,r3
 4002ea0:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 4002ea4:	e0fffa17 	ldw	r3,-24(fp)
 4002ea8:	e0bff117 	ldw	r2,-60(fp)
 4002eac:	1885c83a 	sub	r2,r3,r2
 4002eb0:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002eb4:	00001e06 	br	4002f30 <vid_bres_scan_edges+0x224>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002eb8:	e1800217 	ldw	r6,8(fp)
 4002ebc:	e17ffd17 	ldw	r5,-12(fp)
 4002ec0:	e13ffc17 	ldw	r4,-16(fp)
 4002ec4:	4002c080 	call	4002c08 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002ec8:	e0bff417 	ldw	r2,-48(fp)
 4002ecc:	00800d0e 	bge	zero,r2,4002f04 <vid_bres_scan_edges+0x1f8>
        x1+=x_incr;
 4002ed0:	e0fffc17 	ldw	r3,-16(fp)
 4002ed4:	e0bff717 	ldw	r2,-36(fp)
 4002ed8:	1885883a 	add	r2,r3,r2
 4002edc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002ee0:	e0fffd17 	ldw	r3,-12(fp)
 4002ee4:	e0bff017 	ldw	r2,-64(fp)
 4002ee8:	1885883a 	add	r2,r3,r2
 4002eec:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002ef0:	e0fff417 	ldw	r3,-48(fp)
 4002ef4:	e0bffb17 	ldw	r2,-20(fp)
 4002ef8:	1885883a 	add	r2,r3,r2
 4002efc:	e0bff415 	stw	r2,-48(fp)
 4002f00:	00000806 	br	4002f24 <vid_bres_scan_edges+0x218>
      } else {
        y1+=y_incr;
 4002f04:	e0fffd17 	ldw	r3,-12(fp)
 4002f08:	e0bff017 	ldw	r2,-64(fp)
 4002f0c:	1885883a 	add	r2,r3,r2
 4002f10:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 4002f14:	e0fff417 	ldw	r3,-48(fp)
 4002f18:	e0bffa17 	ldw	r2,-24(fp)
 4002f1c:	1885883a 	add	r2,r3,r2
 4002f20:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002f24:	e0bff117 	ldw	r2,-60(fp)
 4002f28:	10bfffc4 	addi	r2,r2,-1
 4002f2c:	e0bff115 	stw	r2,-60(fp)
 4002f30:	e0bff117 	ldw	r2,-60(fp)
 4002f34:	103fe00e 	bge	r2,zero,4002eb8 <__alt_mem_epcs_flash_controller_0+0xfb001eb8>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4002f38:	0001883a 	nop
 4002f3c:	e037883a 	mov	sp,fp
 4002f40:	dfc00117 	ldw	ra,4(sp)
 4002f44:	df000017 	ldw	fp,0(sp)
 4002f48:	dec00204 	addi	sp,sp,8
 4002f4c:	f800283a 	ret

04002f50 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 4002f50:	defff804 	addi	sp,sp,-32
 4002f54:	dfc00715 	stw	ra,28(sp)
 4002f58:	df000615 	stw	fp,24(sp)
 4002f5c:	df000604 	addi	fp,sp,24
 4002f60:	e13ffe15 	stw	r4,-8(fp)
 4002f64:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f68:	e0bffe17 	ldw	r2,-8(fp)
 4002f6c:	11000017 	ldw	r4,0(r2)
 4002f70:	e0bffe17 	ldw	r2,-8(fp)
 4002f74:	11400317 	ldw	r5,12(r2)
 4002f78:	e0bffe17 	ldw	r2,-8(fp)
 4002f7c:	11800117 	ldw	r6,4(r2)
 4002f80:	e0bffe17 	ldw	r2,-8(fp)
 4002f84:	11c00417 	ldw	r7,16(r2)
 4002f88:	e0bffe17 	ldw	r2,-8(fp)
 4002f8c:	10800a17 	ldw	r2,40(r2)
 4002f90:	e0ffff17 	ldw	r3,-4(fp)
 4002f94:	d8c00215 	stw	r3,8(sp)
 4002f98:	d8800115 	stw	r2,4(sp)
 4002f9c:	00800044 	movi	r2,1
 4002fa0:	d8800015 	stw	r2,0(sp)
 4002fa4:	40006fc0 	call	40006fc <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002fa8:	e0bffe17 	ldw	r2,-8(fp)
 4002fac:	11000117 	ldw	r4,4(r2)
 4002fb0:	e0bffe17 	ldw	r2,-8(fp)
 4002fb4:	11400417 	ldw	r5,16(r2)
 4002fb8:	e0bffe17 	ldw	r2,-8(fp)
 4002fbc:	11800217 	ldw	r6,8(r2)
 4002fc0:	e0bffe17 	ldw	r2,-8(fp)
 4002fc4:	11c00517 	ldw	r7,20(r2)
 4002fc8:	e0bffe17 	ldw	r2,-8(fp)
 4002fcc:	10800a17 	ldw	r2,40(r2)
 4002fd0:	e0ffff17 	ldw	r3,-4(fp)
 4002fd4:	d8c00215 	stw	r3,8(sp)
 4002fd8:	d8800115 	stw	r2,4(sp)
 4002fdc:	00800044 	movi	r2,1
 4002fe0:	d8800015 	stw	r2,0(sp)
 4002fe4:	40006fc0 	call	40006fc <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002fe8:	e0bffe17 	ldw	r2,-8(fp)
 4002fec:	11000217 	ldw	r4,8(r2)
 4002ff0:	e0bffe17 	ldw	r2,-8(fp)
 4002ff4:	11400517 	ldw	r5,20(r2)
 4002ff8:	e0bffe17 	ldw	r2,-8(fp)
 4002ffc:	11800017 	ldw	r6,0(r2)
 4003000:	e0bffe17 	ldw	r2,-8(fp)
 4003004:	11c00317 	ldw	r7,12(r2)
 4003008:	e0bffe17 	ldw	r2,-8(fp)
 400300c:	10800a17 	ldw	r2,40(r2)
 4003010:	e0ffff17 	ldw	r3,-4(fp)
 4003014:	d8c00215 	stw	r3,8(sp)
 4003018:	d8800115 	stw	r2,4(sp)
 400301c:	00800044 	movi	r2,1
 4003020:	d8800015 	stw	r2,0(sp)
 4003024:	40006fc0 	call	40006fc <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4003028:	e0bffe17 	ldw	r2,-8(fp)
 400302c:	10800b17 	ldw	r2,44(r2)
 4003030:	10800058 	cmpnei	r2,r2,1
 4003034:	1000ad1e 	bne	r2,zero,40032ec <vid_draw_triangle+0x39c>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003038:	e0bffe17 	ldw	r2,-8(fp)
 400303c:	10c00317 	ldw	r3,12(r2)
 4003040:	e0bffe17 	ldw	r2,-8(fp)
 4003044:	11000417 	ldw	r4,16(r2)
 4003048:	e0bffe17 	ldw	r2,-8(fp)
 400304c:	10800517 	ldw	r2,20(r2)
 4003050:	100d883a 	mov	r6,r2
 4003054:	200b883a 	mov	r5,r4
 4003058:	1809883a 	mov	r4,r3
 400305c:	4002b500 	call	4002b50 <min3>
 4003060:	1007883a 	mov	r3,r2
 4003064:	e0bffe17 	ldw	r2,-8(fp)
 4003068:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 400306c:	e0bffe17 	ldw	r2,-8(fp)
 4003070:	10c00317 	ldw	r3,12(r2)
 4003074:	e0bffe17 	ldw	r2,-8(fp)
 4003078:	11000417 	ldw	r4,16(r2)
 400307c:	e0bffe17 	ldw	r2,-8(fp)
 4003080:	10800517 	ldw	r2,20(r2)
 4003084:	100d883a 	mov	r6,r2
 4003088:	200b883a 	mov	r5,r4
 400308c:	1809883a 	mov	r4,r3
 4003090:	4002afc0 	call	4002afc <max3>
 4003094:	1007883a 	mov	r3,r2
 4003098:	e0bffe17 	ldw	r2,-8(fp)
 400309c:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 40030a0:	e0bffe17 	ldw	r2,-8(fp)
 40030a4:	10c00317 	ldw	r3,12(r2)
 40030a8:	e0bffe17 	ldw	r2,-8(fp)
 40030ac:	11000417 	ldw	r4,16(r2)
 40030b0:	e0bffe17 	ldw	r2,-8(fp)
 40030b4:	10800517 	ldw	r2,20(r2)
 40030b8:	100d883a 	mov	r6,r2
 40030bc:	200b883a 	mov	r5,r4
 40030c0:	1809883a 	mov	r4,r3
 40030c4:	4002ba40 	call	4002ba4 <max_diff3>
 40030c8:	1007883a 	mov	r3,r2
 40030cc:	e0bffe17 	ldw	r2,-8(fp)
 40030d0:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 40030d4:	e0bffe17 	ldw	r2,-8(fp)
 40030d8:	10c00017 	ldw	r3,0(r2)
 40030dc:	e0bffe17 	ldw	r2,-8(fp)
 40030e0:	11000117 	ldw	r4,4(r2)
 40030e4:	e0bffe17 	ldw	r2,-8(fp)
 40030e8:	10800217 	ldw	r2,8(r2)
 40030ec:	100d883a 	mov	r6,r2
 40030f0:	200b883a 	mov	r5,r4
 40030f4:	1809883a 	mov	r4,r3
 40030f8:	4002ba40 	call	4002ba4 <max_diff3>
 40030fc:	1007883a 	mov	r3,r2
 4003100:	e0bffe17 	ldw	r2,-8(fp)
 4003104:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
 4003108:	e0bfff17 	ldw	r2,-4(fp)
 400310c:	10800617 	ldw	r2,24(r2)
 4003110:	100490fa 	slli	r2,r2,3
 4003114:	1009883a 	mov	r4,r2
 4003118:	400baa80 	call	400baa8 <malloc>
 400311c:	1007883a 	mov	r3,r2
 4003120:	e0bffe17 	ldw	r2,-8(fp)
 4003124:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003128:	e0bffe17 	ldw	r2,-8(fp)
 400312c:	10800817 	ldw	r2,32(r2)
 4003130:	e0bffd15 	stw	r2,-12(fp)
 4003134:	00001206 	br	4003180 <vid_draw_triangle+0x230>
    {
      tri->span_array[i*2] = -1;
 4003138:	e0bffe17 	ldw	r2,-8(fp)
 400313c:	10800d17 	ldw	r2,52(r2)
 4003140:	e0fffd17 	ldw	r3,-12(fp)
 4003144:	180690fa 	slli	r3,r3,3
 4003148:	10c5883a 	add	r2,r2,r3
 400314c:	00ffffc4 	movi	r3,-1
 4003150:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 4003154:	e0bffe17 	ldw	r2,-8(fp)
 4003158:	10c00d17 	ldw	r3,52(r2)
 400315c:	e0bffd17 	ldw	r2,-12(fp)
 4003160:	100490fa 	slli	r2,r2,3
 4003164:	10800104 	addi	r2,r2,4
 4003168:	1885883a 	add	r2,r3,r2
 400316c:	00ffffc4 	movi	r3,-1
 4003170:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003174:	e0bffd17 	ldw	r2,-12(fp)
 4003178:	10800044 	addi	r2,r2,1
 400317c:	e0bffd15 	stw	r2,-12(fp)
 4003180:	e0bffe17 	ldw	r2,-8(fp)
 4003184:	10c00917 	ldw	r3,36(r2)
 4003188:	e0bffd17 	ldw	r2,-12(fp)
 400318c:	18bfea0e 	bge	r3,r2,4003138 <__alt_mem_epcs_flash_controller_0+0xfb002138>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003190:	e0bffe17 	ldw	r2,-8(fp)
 4003194:	10c00017 	ldw	r3,0(r2)
 4003198:	e0bffe17 	ldw	r2,-8(fp)
 400319c:	11000317 	ldw	r4,12(r2)
 40031a0:	e0bffe17 	ldw	r2,-8(fp)
 40031a4:	11400117 	ldw	r5,4(r2)
 40031a8:	e0bffe17 	ldw	r2,-8(fp)
 40031ac:	11800417 	ldw	r6,16(r2)
 40031b0:	e0bffe17 	ldw	r2,-8(fp)
 40031b4:	10800d17 	ldw	r2,52(r2)
 40031b8:	d8800015 	stw	r2,0(sp)
 40031bc:	300f883a 	mov	r7,r6
 40031c0:	280d883a 	mov	r6,r5
 40031c4:	200b883a 	mov	r5,r4
 40031c8:	1809883a 	mov	r4,r3
 40031cc:	4002d0c0 	call	4002d0c <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40031d0:	e0bffe17 	ldw	r2,-8(fp)
 40031d4:	10c00117 	ldw	r3,4(r2)
 40031d8:	e0bffe17 	ldw	r2,-8(fp)
 40031dc:	11000417 	ldw	r4,16(r2)
 40031e0:	e0bffe17 	ldw	r2,-8(fp)
 40031e4:	11400217 	ldw	r5,8(r2)
 40031e8:	e0bffe17 	ldw	r2,-8(fp)
 40031ec:	11800517 	ldw	r6,20(r2)
 40031f0:	e0bffe17 	ldw	r2,-8(fp)
 40031f4:	10800d17 	ldw	r2,52(r2)
 40031f8:	d8800015 	stw	r2,0(sp)
 40031fc:	300f883a 	mov	r7,r6
 4003200:	280d883a 	mov	r6,r5
 4003204:	200b883a 	mov	r5,r4
 4003208:	1809883a 	mov	r4,r3
 400320c:	4002d0c0 	call	4002d0c <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003210:	e0bffe17 	ldw	r2,-8(fp)
 4003214:	10c00217 	ldw	r3,8(r2)
 4003218:	e0bffe17 	ldw	r2,-8(fp)
 400321c:	11000517 	ldw	r4,20(r2)
 4003220:	e0bffe17 	ldw	r2,-8(fp)
 4003224:	11400017 	ldw	r5,0(r2)
 4003228:	e0bffe17 	ldw	r2,-8(fp)
 400322c:	11800317 	ldw	r6,12(r2)
 4003230:	e0bffe17 	ldw	r2,-8(fp)
 4003234:	10800d17 	ldw	r2,52(r2)
 4003238:	d8800015 	stw	r2,0(sp)
 400323c:	300f883a 	mov	r7,r6
 4003240:	280d883a 	mov	r6,r5
 4003244:	200b883a 	mov	r5,r4
 4003248:	1809883a 	mov	r4,r3
 400324c:	4002d0c0 	call	4002d0c <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003250:	e0bffe17 	ldw	r2,-8(fp)
 4003254:	10800817 	ldw	r2,32(r2)
 4003258:	e0bffd15 	stw	r2,-12(fp)
 400325c:	00001b06 	br	40032cc <vid_draw_triangle+0x37c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4003260:	e0bffe17 	ldw	r2,-8(fp)
 4003264:	10800d17 	ldw	r2,52(r2)
 4003268:	e0fffd17 	ldw	r3,-12(fp)
 400326c:	180690fa 	slli	r3,r3,3
 4003270:	10c5883a 	add	r2,r2,r3
 4003274:	11000017 	ldw	r4,0(r2)
 4003278:	e0bffe17 	ldw	r2,-8(fp)
 400327c:	10c00d17 	ldw	r3,52(r2)
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	100490fa 	slli	r2,r2,3
 4003288:	10800104 	addi	r2,r2,4
 400328c:	1885883a 	add	r2,r3,r2
 4003290:	11400017 	ldw	r5,0(r2)
 4003294:	e0bffe17 	ldw	r2,-8(fp)
 4003298:	10800a17 	ldw	r2,40(r2)
 400329c:	e0ffff17 	ldw	r3,-4(fp)
 40032a0:	d8c00215 	stw	r3,8(sp)
 40032a4:	d8800115 	stw	r2,4(sp)
 40032a8:	00800044 	movi	r2,1
 40032ac:	d8800015 	stw	r2,0(sp)
 40032b0:	e1fffd17 	ldw	r7,-12(fp)
 40032b4:	280d883a 	mov	r6,r5
 40032b8:	e17ffd17 	ldw	r5,-12(fp)
 40032bc:	40006fc0 	call	40006fc <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 40032c0:	e0bffd17 	ldw	r2,-12(fp)
 40032c4:	10800044 	addi	r2,r2,1
 40032c8:	e0bffd15 	stw	r2,-12(fp)
 40032cc:	e0bffe17 	ldw	r2,-8(fp)
 40032d0:	10c00917 	ldw	r3,36(r2)
 40032d4:	e0bffd17 	ldw	r2,-12(fp)
 40032d8:	18bfe10e 	bge	r3,r2,4003260 <__alt_mem_epcs_flash_controller_0+0xfb002260>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 40032dc:	e0bffe17 	ldw	r2,-8(fp)
 40032e0:	10800d17 	ldw	r2,52(r2)
 40032e4:	1009883a 	mov	r4,r2
 40032e8:	400babc0 	call	400babc <free>
  }
}
 40032ec:	0001883a 	nop
 40032f0:	e037883a 	mov	sp,fp
 40032f4:	dfc00117 	ldw	ra,4(sp)
 40032f8:	df000017 	ldw	fp,0(sp)
 40032fc:	dec00204 	addi	sp,sp,8
 4003300:	f800283a 	ret

04003304 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 4003304:	defff404 	addi	sp,sp,-48
 4003308:	dfc00b15 	stw	ra,44(sp)
 400330c:	df000a15 	stw	fp,40(sp)
 4003310:	df000a04 	addi	fp,sp,40
 4003314:	e13ffa15 	stw	r4,-24(fp)
 4003318:	e17ffb15 	stw	r5,-20(fp)
 400331c:	300b883a 	mov	r5,r6
 4003320:	3809883a 	mov	r4,r7
 4003324:	e0c00217 	ldw	r3,8(fp)
 4003328:	e0800317 	ldw	r2,12(fp)
 400332c:	e17ffc0d 	sth	r5,-16(fp)
 4003330:	e13ffd0d 	sth	r4,-12(fp)
 4003334:	e0fffe0d 	sth	r3,-8(fp)
 4003338:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 400333c:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 4003340:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 4003344:	e03ff615 	stw	zero,-40(fp)
 4003348:	e03ff715 	stw	zero,-36(fp)
 400334c:	00001e06 	br	40033c8 <CopyImage16+0xc4>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003350:	e0bff917 	ldw	r2,-28(fp)
 4003354:	1085883a 	add	r2,r2,r2
 4003358:	1007883a 	mov	r3,r2
 400335c:	e0bffb17 	ldw	r2,-20(fp)
 4003360:	10c7883a 	add	r3,r2,r3
 4003364:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 4003368:	1085883a 	add	r2,r2,r2
 400336c:	1009883a 	mov	r4,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003370:	e0bffa17 	ldw	r2,-24(fp)
 4003374:	1109883a 	add	r4,r2,r4
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4003378:	e0bffc0f 	ldh	r2,-16(fp)
 400337c:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003380:	100d883a 	mov	r6,r2
 4003384:	200b883a 	mov	r5,r4
 4003388:	1809883a 	mov	r4,r3
 400338c:	400c2dc0 	call	400c2dc <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 4003390:	e0bff617 	ldw	r2,-40(fp)
 4003394:	10800044 	addi	r2,r2,1
 4003398:	e0bff615 	stw	r2,-40(fp)
 400339c:	e0bff717 	ldw	r2,-36(fp)
 40033a0:	10800044 	addi	r2,r2,1
 40033a4:	e0bff715 	stw	r2,-36(fp)
 40033a8:	e0bffc0f 	ldh	r2,-16(fp)
 40033ac:	e0fff817 	ldw	r3,-32(fp)
 40033b0:	1885883a 	add	r2,r3,r2
 40033b4:	e0bff815 	stw	r2,-32(fp)
 40033b8:	e0bffe0f 	ldh	r2,-8(fp)
 40033bc:	e0fff917 	ldw	r3,-28(fp)
 40033c0:	1885883a 	add	r2,r3,r2
 40033c4:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 40033c8:	e0bffd0f 	ldh	r2,-12(fp)
 40033cc:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 40033d0:	e0bff617 	ldw	r2,-40(fp)
 40033d4:	18bfde0e 	bge	r3,r2,4003350 <__alt_mem_epcs_flash_controller_0+0xfb002350>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 40033d8:	0001883a 	nop
 40033dc:	e037883a 	mov	sp,fp
 40033e0:	dfc00117 	ldw	ra,4(sp)
 40033e4:	df000017 	ldw	fp,0(sp)
 40033e8:	dec00204 	addi	sp,sp,8
 40033ec:	f800283a 	ret

040033f0 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 40033f0:	defff004 	addi	sp,sp,-64
 40033f4:	dfc00f15 	stw	ra,60(sp)
 40033f8:	df000e15 	stw	fp,56(sp)
 40033fc:	df000e04 	addi	fp,sp,56
 4003400:	e13ff615 	stw	r4,-40(fp)
 4003404:	e17ff715 	stw	r5,-36(fp)
 4003408:	3013883a 	mov	r9,r6
 400340c:	3811883a 	mov	r8,r7
 4003410:	e1c00217 	ldw	r7,8(fp)
 4003414:	e1800317 	ldw	r6,12(fp)
 4003418:	e1400417 	ldw	r5,16(fp)
 400341c:	e1000517 	ldw	r4,20(fp)
 4003420:	e0c00617 	ldw	r3,24(fp)
 4003424:	e0800717 	ldw	r2,28(fp)
 4003428:	e27ff80d 	sth	r9,-32(fp)
 400342c:	e23ff90d 	sth	r8,-28(fp)
 4003430:	e1fffa0d 	sth	r7,-24(fp)
 4003434:	e1bffb0d 	sth	r6,-20(fp)
 4003438:	e17ffc0d 	sth	r5,-16(fp)
 400343c:	e13ffd0d 	sth	r4,-12(fp)
 4003440:	e0fffe0d 	sth	r3,-8(fp)
 4003444:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 4003448:	e0fff80f 	ldh	r3,-32(fp)
 400344c:	e0bffc0f 	ldh	r2,-16(fp)
 4003450:	1885383a 	mul	r2,r3,r2
 4003454:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 4003458:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 400345c:	e0bffc0f 	ldh	r2,-16(fp)
 4003460:	e0bff215 	stw	r2,-56(fp)
 4003464:	e03ff315 	stw	zero,-52(fp)
 4003468:	00002206 	br	40034f4 <CropImage16+0x104>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 400346c:	e0bff517 	ldw	r2,-44(fp)
 4003470:	1085883a 	add	r2,r2,r2
 4003474:	1007883a 	mov	r3,r2
 4003478:	e0bff717 	ldw	r2,-36(fp)
 400347c:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 4003480:	e0fffa0f 	ldh	r3,-24(fp)
 4003484:	e0bff417 	ldw	r2,-48(fp)
 4003488:	1885883a 	add	r2,r3,r2
 400348c:	1085883a 	add	r2,r2,r2
 4003490:	1007883a 	mov	r3,r2
 4003494:	e0bff617 	ldw	r2,-40(fp)
 4003498:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 400349c:	e0fff80f 	ldh	r3,-32(fp)
 40034a0:	e0bffa0f 	ldh	r2,-24(fp)
 40034a4:	1887c83a 	sub	r3,r3,r2
 40034a8:	e0bffb0f 	ldh	r2,-20(fp)
 40034ac:	1885c83a 	sub	r2,r3,r2
 40034b0:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 40034b4:	100d883a 	mov	r6,r2
 40034b8:	400c2dc0 	call	400c2dc <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 40034bc:	e0bff217 	ldw	r2,-56(fp)
 40034c0:	10800044 	addi	r2,r2,1
 40034c4:	e0bff215 	stw	r2,-56(fp)
 40034c8:	e0bff317 	ldw	r2,-52(fp)
 40034cc:	10800044 	addi	r2,r2,1
 40034d0:	e0bff315 	stw	r2,-52(fp)
 40034d4:	e0bff80f 	ldh	r2,-32(fp)
 40034d8:	e0fff417 	ldw	r3,-48(fp)
 40034dc:	1885883a 	add	r2,r3,r2
 40034e0:	e0bff415 	stw	r2,-48(fp)
 40034e4:	e0bffe0f 	ldh	r2,-8(fp)
 40034e8:	e0fff517 	ldw	r3,-44(fp)
 40034ec:	1885883a 	add	r2,r3,r2
 40034f0:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 40034f4:	e0fff90f 	ldh	r3,-28(fp)
 40034f8:	e0bffd0f 	ldh	r2,-12(fp)
 40034fc:	1885c83a 	sub	r2,r3,r2
 4003500:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 4003504:	e0bff217 	ldw	r2,-56(fp)
 4003508:	18bfd80e 	bge	r3,r2,400346c <__alt_mem_epcs_flash_controller_0+0xfb00246c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 400350c:	0001883a 	nop
 4003510:	e037883a 	mov	sp,fp
 4003514:	dfc00117 	ldw	ra,4(sp)
 4003518:	df000017 	ldw	fp,0(sp)
 400351c:	dec00204 	addi	sp,sp,8
 4003520:	f800283a 	ret

04003524 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 4003524:	defff404 	addi	sp,sp,-48
 4003528:	dfc00b15 	stw	ra,44(sp)
 400352c:	df000a15 	stw	fp,40(sp)
 4003530:	df000a04 	addi	fp,sp,40
 4003534:	e13ffc15 	stw	r4,-16(fp)
 4003538:	e17ffd15 	stw	r5,-12(fp)
 400353c:	e1bffe15 	stw	r6,-8(fp)
 4003540:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4003544:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4003548:	e0bffc17 	ldw	r2,-16(fp)
 400354c:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4003550:	00007f06 	br	4003750 <vid_print_string_alpha+0x22c>
    //Handle newline char here.
    if (string[i] == '\n') {
 4003554:	e0bff917 	ldw	r2,-28(fp)
 4003558:	e0c00417 	ldw	r3,16(fp)
 400355c:	1885883a 	add	r2,r3,r2
 4003560:	10800003 	ldbu	r2,0(r2)
 4003564:	10803fcc 	andi	r2,r2,255
 4003568:	1080201c 	xori	r2,r2,128
 400356c:	10bfe004 	addi	r2,r2,-128
 4003570:	10800298 	cmpnei	r2,r2,10
 4003574:	10000c1e 	bne	r2,zero,40035a8 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 4003578:	e0bffb17 	ldw	r2,-20(fp)
 400357c:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4003580:	e0800217 	ldw	r2,8(fp)
 4003584:	1082d804 	addi	r2,r2,2912
 4003588:	10c00517 	ldw	r3,20(r2)
 400358c:	e0bffd17 	ldw	r2,-12(fp)
 4003590:	1885883a 	add	r2,r3,r2
 4003594:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4003598:	e0bff917 	ldw	r2,-28(fp)
 400359c:	10800044 	addi	r2,r2,1
 40035a0:	e0bff915 	stw	r2,-28(fp)
      continue;
 40035a4:	00006a06 	br	4003750 <vid_print_string_alpha+0x22c>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 40035a8:	e0bff917 	ldw	r2,-28(fp)
 40035ac:	e0c00417 	ldw	r3,16(fp)
 40035b0:	1885883a 	add	r2,r3,r2
 40035b4:	10800003 	ldbu	r2,0(r2)
 40035b8:	10803fcc 	andi	r2,r2,255
 40035bc:	1080201c 	xori	r2,r2,128
 40035c0:	10bfe004 	addi	r2,r2,-128
 40035c4:	10800818 	cmpnei	r2,r2,32
 40035c8:	1000151e 	bne	r2,zero,4003620 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40035cc:	e0bfff17 	ldw	r2,-4(fp)
 40035d0:	10bfffe0 	cmpeqi	r2,r2,-1
 40035d4:	10000b1e 	bne	r2,zero,4003604 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40035d8:	e0800317 	ldw	r2,12(fp)
 40035dc:	d8800215 	stw	r2,8(sp)
 40035e0:	e0800217 	ldw	r2,8(fp)
 40035e4:	d8800115 	stw	r2,4(sp)
 40035e8:	e0bfff17 	ldw	r2,-4(fp)
 40035ec:	d8800015 	stw	r2,0(sp)
 40035f0:	01c00b44 	movi	r7,45
 40035f4:	e1bfff17 	ldw	r6,-4(fp)
 40035f8:	e17ffd17 	ldw	r5,-12(fp)
 40035fc:	e13ffc17 	ldw	r4,-16(fp)
 4003600:	4003e880 	call	4003e88 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4003604:	e0800217 	ldw	r2,8(fp)
 4003608:	10806004 	addi	r2,r2,384
 400360c:	10c00417 	ldw	r3,16(r2)
 4003610:	e0bffc17 	ldw	r2,-16(fp)
 4003614:	1885883a 	add	r2,r3,r2
 4003618:	e0bffc15 	stw	r2,-16(fp)
 400361c:	00004906 	br	4003744 <vid_print_string_alpha+0x220>
    }
    else if(string[i] == '\t')  // this is a tab
 4003620:	e0bff917 	ldw	r2,-28(fp)
 4003624:	e0c00417 	ldw	r3,16(fp)
 4003628:	1885883a 	add	r2,r3,r2
 400362c:	10800003 	ldbu	r2,0(r2)
 4003630:	10803fcc 	andi	r2,r2,255
 4003634:	1080201c 	xori	r2,r2,128
 4003638:	10bfe004 	addi	r2,r2,-128
 400363c:	10800258 	cmpnei	r2,r2,9
 4003640:	10001d1e 	bne	r2,zero,40036b8 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4003644:	e03ffa15 	stw	zero,-24(fp)
 4003648:	00001706 	br	40036a8 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 400364c:	e0bfff17 	ldw	r2,-4(fp)
 4003650:	10bfffe0 	cmpeqi	r2,r2,-1
 4003654:	10000b1e 	bne	r2,zero,4003684 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4003658:	e0800317 	ldw	r2,12(fp)
 400365c:	d8800215 	stw	r2,8(sp)
 4003660:	e0800217 	ldw	r2,8(fp)
 4003664:	d8800115 	stw	r2,4(sp)
 4003668:	e0bfff17 	ldw	r2,-4(fp)
 400366c:	d8800015 	stw	r2,0(sp)
 4003670:	01c00b44 	movi	r7,45
 4003674:	e1bfff17 	ldw	r6,-4(fp)
 4003678:	e17ffd17 	ldw	r5,-12(fp)
 400367c:	e13ffc17 	ldw	r4,-16(fp)
 4003680:	4003e880 	call	4003e88 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4003684:	e0800217 	ldw	r2,8(fp)
 4003688:	10806004 	addi	r2,r2,384
 400368c:	10c00417 	ldw	r3,16(r2)
 4003690:	e0bffc17 	ldw	r2,-16(fp)
 4003694:	1885883a 	add	r2,r3,r2
 4003698:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 400369c:	e0bffa17 	ldw	r2,-24(fp)
 40036a0:	10800044 	addi	r2,r2,1
 40036a4:	e0bffa15 	stw	r2,-24(fp)
 40036a8:	e0bffa17 	ldw	r2,-24(fp)
 40036ac:	10800090 	cmplti	r2,r2,2
 40036b0:	103fe61e 	bne	r2,zero,400364c <__alt_mem_epcs_flash_controller_0+0xfb00264c>
 40036b4:	00002306 	br	4003744 <vid_print_string_alpha+0x220>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 40036b8:	e0bff917 	ldw	r2,-28(fp)
 40036bc:	e0c00417 	ldw	r3,16(fp)
 40036c0:	1885883a 	add	r2,r3,r2
 40036c4:	10800003 	ldbu	r2,0(r2)
 40036c8:	10c03fcc 	andi	r3,r2,255
 40036cc:	18c0201c 	xori	r3,r3,128
 40036d0:	18ffe004 	addi	r3,r3,-128
 40036d4:	e0800317 	ldw	r2,12(fp)
 40036d8:	d8800215 	stw	r2,8(sp)
 40036dc:	e0800217 	ldw	r2,8(fp)
 40036e0:	d8800115 	stw	r2,4(sp)
 40036e4:	e0bfff17 	ldw	r2,-4(fp)
 40036e8:	d8800015 	stw	r2,0(sp)
 40036ec:	180f883a 	mov	r7,r3
 40036f0:	e1bffe17 	ldw	r6,-8(fp)
 40036f4:	e17ffd17 	ldw	r5,-12(fp)
 40036f8:	e13ffc17 	ldw	r4,-16(fp)
 40036fc:	4003e880 	call	4003e88 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 4003700:	e0bff917 	ldw	r2,-28(fp)
 4003704:	e0c00417 	ldw	r3,16(fp)
 4003708:	1885883a 	add	r2,r3,r2
 400370c:	10800003 	ldbu	r2,0(r2)
 4003710:	10c03fcc 	andi	r3,r2,255
 4003714:	18c0201c 	xori	r3,r3,128
 4003718:	18ffe004 	addi	r3,r3,-128
 400371c:	00820034 	movhi	r2,2048
 4003720:	10bff7c4 	addi	r2,r2,-33
 4003724:	1885883a 	add	r2,r3,r2
 4003728:	1004917a 	slli	r2,r2,5
 400372c:	e0c00217 	ldw	r3,8(fp)
 4003730:	1885883a 	add	r2,r3,r2
 4003734:	10c00417 	ldw	r3,16(r2)
 4003738:	e0bffc17 	ldw	r2,-16(fp)
 400373c:	1885883a 	add	r2,r3,r2
 4003740:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4003744:	e0bff917 	ldw	r2,-28(fp)
 4003748:	10800044 	addi	r2,r2,1
 400374c:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4003750:	e0bff917 	ldw	r2,-28(fp)
 4003754:	e0c00417 	ldw	r3,16(fp)
 4003758:	1885883a 	add	r2,r3,r2
 400375c:	10800003 	ldbu	r2,0(r2)
 4003760:	10803fcc 	andi	r2,r2,255
 4003764:	1080201c 	xori	r2,r2,128
 4003768:	10bfe004 	addi	r2,r2,-128
 400376c:	103f791e 	bne	r2,zero,4003554 <__alt_mem_epcs_flash_controller_0+0xfb002554>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4003770:	0005883a 	mov	r2,zero
}
 4003774:	e037883a 	mov	sp,fp
 4003778:	dfc00117 	ldw	ra,4(sp)
 400377c:	df000017 	ldw	fp,0(sp)
 4003780:	dec00204 	addi	sp,sp,8
 4003784:	f800283a 	ret

04003788 <seperate_color_channels>:
*
******************************************************************/

//__inline__
int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 4003788:	defff904 	addi	sp,sp,-28
 400378c:	df000615 	stw	fp,24(sp)
 4003790:	df000604 	addi	fp,sp,24
 4003794:	e13ffc15 	stw	r4,-16(fp)
 4003798:	e17ffd15 	stw	r5,-12(fp)
 400379c:	e1bffe15 	stw	r6,-8(fp)
 40037a0:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 40037a4:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 40037a8:	e0bffc17 	ldw	r2,-16(fp)
 40037ac:	10800418 	cmpnei	r2,r2,16
 40037b0:	1000221e 	bne	r2,zero,400383c <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 40037b4:	e0bffd17 	ldw	r2,-12(fp)
 40037b8:	10c00044 	addi	r3,r2,1
 40037bc:	e0fffd15 	stw	r3,-12(fp)
 40037c0:	10800003 	ldbu	r2,0(r2)
 40037c4:	10803fcc 	andi	r2,r2,255
 40037c8:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 40037cc:	e0bffd17 	ldw	r2,-12(fp)
 40037d0:	10800003 	ldbu	r2,0(r2)
 40037d4:	10803fcc 	andi	r2,r2,255
 40037d8:	1004923a 	slli	r2,r2,8
 40037dc:	1007883a 	mov	r3,r2
 40037e0:	e0bffb0b 	ldhu	r2,-20(fp)
 40037e4:	1885883a 	add	r2,r3,r2
 40037e8:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 40037ec:	e0bffb0b 	ldhu	r2,-20(fp)
 40037f0:	108007cc 	andi	r2,r2,31
 40037f4:	1007883a 	mov	r3,r2
 40037f8:	e0800117 	ldw	r2,4(fp)
 40037fc:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4003800:	e0bffb0b 	ldhu	r2,-20(fp)
 4003804:	1004d17a 	srli	r2,r2,5
 4003808:	10800fcc 	andi	r2,r2,63
 400380c:	1007883a 	mov	r3,r2
 4003810:	e0bfff17 	ldw	r2,-4(fp)
 4003814:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 4003818:	e0bffb0b 	ldhu	r2,-20(fp)
 400381c:	1004d2fa 	srli	r2,r2,11
 4003820:	108007cc 	andi	r2,r2,31
 4003824:	1007883a 	mov	r3,r2
 4003828:	e0bffe17 	ldw	r2,-8(fp)
 400382c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003830:	00800044 	movi	r2,1
 4003834:	e0bffa15 	stw	r2,-24(fp)
 4003838:	00002006 	br	40038bc <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 400383c:	e0bffc17 	ldw	r2,-16(fp)
 4003840:	10800620 	cmpeqi	r2,r2,24
 4003844:	1000031e 	bne	r2,zero,4003854 <seperate_color_channels+0xcc>
 4003848:	e0bffc17 	ldw	r2,-16(fp)
 400384c:	10800818 	cmpnei	r2,r2,32
 4003850:	1000131e 	bne	r2,zero,40038a0 <seperate_color_channels+0x118>
  {
    *blue = *color++;
 4003854:	e0bffd17 	ldw	r2,-12(fp)
 4003858:	10c00044 	addi	r3,r2,1
 400385c:	e0fffd15 	stw	r3,-12(fp)
 4003860:	10c00003 	ldbu	r3,0(r2)
 4003864:	e0800117 	ldw	r2,4(fp)
 4003868:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 400386c:	e0bffd17 	ldw	r2,-12(fp)
 4003870:	10c00044 	addi	r3,r2,1
 4003874:	e0fffd15 	stw	r3,-12(fp)
 4003878:	10c00003 	ldbu	r3,0(r2)
 400387c:	e0bfff17 	ldw	r2,-4(fp)
 4003880:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 4003884:	e0bffd17 	ldw	r2,-12(fp)
 4003888:	10c00003 	ldbu	r3,0(r2)
 400388c:	e0bffe17 	ldw	r2,-8(fp)
 4003890:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003894:	00800044 	movi	r2,1
 4003898:	e0bffa15 	stw	r2,-24(fp)
 400389c:	00000706 	br	40038bc <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 40038a0:	e0bffe17 	ldw	r2,-8(fp)
 40038a4:	10000005 	stb	zero,0(r2)
    *green = 0;
 40038a8:	e0bfff17 	ldw	r2,-4(fp)
 40038ac:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 40038b0:	e0800117 	ldw	r2,4(fp)
 40038b4:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 40038b8:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 40038bc:	e0bffa17 	ldw	r2,-24(fp)
}
 40038c0:	e037883a 	mov	sp,fp
 40038c4:	df000017 	ldw	fp,0(sp)
 40038c8:	dec00104 	addi	sp,sp,4
 40038cc:	f800283a 	ret

040038d0 <merge_color_channels>:
*
******************************************************************/

//__inline__
int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 40038d0:	defff904 	addi	sp,sp,-28
 40038d4:	df000615 	stw	fp,24(sp)
 40038d8:	df000604 	addi	fp,sp,24
 40038dc:	e13ffc15 	stw	r4,-16(fp)
 40038e0:	2809883a 	mov	r4,r5
 40038e4:	3007883a 	mov	r3,r6
 40038e8:	3805883a 	mov	r2,r7
 40038ec:	e13ffd05 	stb	r4,-12(fp)
 40038f0:	e0fffe05 	stb	r3,-8(fp)
 40038f4:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 40038f8:	e0bffc17 	ldw	r2,-16(fp)
 40038fc:	10800418 	cmpnei	r2,r2,16
 4003900:	1000191e 	bne	r2,zero,4003968 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4003904:	e0bfff03 	ldbu	r2,-4(fp)
 4003908:	108007cc 	andi	r2,r2,31
 400390c:	1007883a 	mov	r3,r2
 4003910:	e0bffe03 	ldbu	r2,-8(fp)
 4003914:	10800fcc 	andi	r2,r2,63
 4003918:	1004917a 	slli	r2,r2,5
 400391c:	1884b03a 	or	r2,r3,r2
 4003920:	1007883a 	mov	r3,r2
 4003924:	e0bffd03 	ldbu	r2,-12(fp)
 4003928:	100492fa 	slli	r2,r2,11
 400392c:	1884b03a 	or	r2,r3,r2
 4003930:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 4003934:	e0800117 	ldw	r2,4(fp)
 4003938:	10c00044 	addi	r3,r2,1
 400393c:	e0c00115 	stw	r3,4(fp)
 4003940:	e0fffb0b 	ldhu	r3,-20(fp)
 4003944:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 4003948:	e0bffb0b 	ldhu	r2,-20(fp)
 400394c:	1004d23a 	srli	r2,r2,8
 4003950:	1007883a 	mov	r3,r2
 4003954:	e0800117 	ldw	r2,4(fp)
 4003958:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 400395c:	00800044 	movi	r2,1
 4003960:	e0bffa15 	stw	r2,-24(fp)
 4003964:	00002106 	br	40039ec <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003968:	e0bffc17 	ldw	r2,-16(fp)
 400396c:	10800620 	cmpeqi	r2,r2,24
 4003970:	1000031e 	bne	r2,zero,4003980 <merge_color_channels+0xb0>
 4003974:	e0bffc17 	ldw	r2,-16(fp)
 4003978:	10800818 	cmpnei	r2,r2,32
 400397c:	1000101e 	bne	r2,zero,40039c0 <merge_color_channels+0xf0>
  {
    *color++ = blue;
 4003980:	e0800117 	ldw	r2,4(fp)
 4003984:	10c00044 	addi	r3,r2,1
 4003988:	e0c00115 	stw	r3,4(fp)
 400398c:	e0ffff03 	ldbu	r3,-4(fp)
 4003990:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 4003994:	e0800117 	ldw	r2,4(fp)
 4003998:	10c00044 	addi	r3,r2,1
 400399c:	e0c00115 	stw	r3,4(fp)
 40039a0:	e0fffe03 	ldbu	r3,-8(fp)
 40039a4:	10c00005 	stb	r3,0(r2)
    *color = red;
 40039a8:	e0800117 	ldw	r2,4(fp)
 40039ac:	e0fffd03 	ldbu	r3,-12(fp)
 40039b0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40039b4:	00800044 	movi	r2,1
 40039b8:	e0bffa15 	stw	r2,-24(fp)
 40039bc:	00000b06 	br	40039ec <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 40039c0:	e0800117 	ldw	r2,4(fp)
 40039c4:	10c00044 	addi	r3,r2,1
 40039c8:	e0c00115 	stw	r3,4(fp)
 40039cc:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 40039d0:	e0800117 	ldw	r2,4(fp)
 40039d4:	10c00044 	addi	r3,r2,1
 40039d8:	e0c00115 	stw	r3,4(fp)
 40039dc:	10000005 	stb	zero,0(r2)
    *color = 0;
 40039e0:	e0800117 	ldw	r2,4(fp)
 40039e4:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 40039e8:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 40039ec:	e0bffa17 	ldw	r2,-24(fp)
}
 40039f0:	e037883a 	mov	sp,fp
 40039f4:	df000017 	ldw	fp,0(sp)
 40039f8:	dec00104 	addi	sp,sp,4
 40039fc:	f800283a 	ret

04003a00 <read_from_frame>:
*
******************************************************************/

//__inline__
int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4003a00:	defff704 	addi	sp,sp,-36
 4003a04:	dfc00815 	stw	ra,32(sp)
 4003a08:	df000715 	stw	fp,28(sp)
 4003a0c:	df000704 	addi	fp,sp,28
 4003a10:	e13ffc15 	stw	r4,-16(fp)
 4003a14:	e17ffd15 	stw	r5,-12(fp)
 4003a18:	e1bffe15 	stw	r6,-8(fp)
 4003a1c:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
 4003a20:	e0800317 	ldw	r2,12(fp)
 4003a24:	10800417 	ldw	r2,16(r2)
 4003a28:	10800818 	cmpnei	r2,r2,32
 4003a2c:	1000211e 	bne	r2,zero,4003ab4 <read_from_frame+0xb4>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
 4003a30:	e1000317 	ldw	r4,12(fp)
 4003a34:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4003a38:	1009883a 	mov	r4,r2
 4003a3c:	e0800317 	ldw	r2,12(fp)
 4003a40:	10c00517 	ldw	r3,20(r2)
 4003a44:	e0bffd17 	ldw	r2,-12(fp)
 4003a48:	1887383a 	mul	r3,r3,r2
 4003a4c:	e0bffc17 	ldw	r2,-16(fp)
 4003a50:	1885883a 	add	r2,r3,r2
 4003a54:	1085883a 	add	r2,r2,r2
 4003a58:	1085883a 	add	r2,r2,r2
 4003a5c:	2085883a 	add	r2,r4,r2
 4003a60:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
 4003a64:	e0bffa17 	ldw	r2,-24(fp)
 4003a68:	10800037 	ldwio	r2,0(r2)
 4003a6c:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
 4003a70:	e0bffb17 	ldw	r2,-20(fp)
 4003a74:	1007883a 	mov	r3,r2
 4003a78:	e0800217 	ldw	r2,8(fp)
 4003a7c:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
 4003a80:	e0bffb17 	ldw	r2,-20(fp)
 4003a84:	1004d23a 	srli	r2,r2,8
 4003a88:	1007883a 	mov	r3,r2
 4003a8c:	e0bfff17 	ldw	r2,-4(fp)
 4003a90:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
 4003a94:	e0bffb17 	ldw	r2,-20(fp)
 4003a98:	1004d43a 	srli	r2,r2,16
 4003a9c:	1007883a 	mov	r3,r2
 4003aa0:	e0bffe17 	ldw	r2,-8(fp)
 4003aa4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003aa8:	00800044 	movi	r2,1
 4003aac:	e0bff915 	stw	r2,-28(fp)
 4003ab0:	00005806 	br	4003c14 <read_from_frame+0x214>
  }
  else if( display->color_depth == 24 )
 4003ab4:	e0800317 	ldw	r2,12(fp)
 4003ab8:	10800417 	ldw	r2,16(r2)
 4003abc:	10800618 	cmpnei	r2,r2,24
 4003ac0:	1000251e 	bne	r2,zero,4003b58 <read_from_frame+0x158>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
 4003ac4:	e1000317 	ldw	r4,12(fp)
 4003ac8:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4003acc:	1009883a 	mov	r4,r2
 4003ad0:	e0800317 	ldw	r2,12(fp)
 4003ad4:	10c00517 	ldw	r3,20(r2)
 4003ad8:	e0bffd17 	ldw	r2,-12(fp)
 4003adc:	1887383a 	mul	r3,r3,r2
 4003ae0:	e0bffc17 	ldw	r2,-16(fp)
 4003ae4:	1887883a 	add	r3,r3,r2
 4003ae8:	1805883a 	mov	r2,r3
 4003aec:	1085883a 	add	r2,r2,r2
 4003af0:	10c5883a 	add	r2,r2,r3
 4003af4:	2085883a 	add	r2,r4,r2
 4003af8:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
 4003afc:	e0bffa17 	ldw	r2,-24(fp)
 4003b00:	10800023 	ldbuio	r2,0(r2)
 4003b04:	10803fcc 	andi	r2,r2,255
 4003b08:	1007883a 	mov	r3,r2
 4003b0c:	e0800217 	ldw	r2,8(fp)
 4003b10:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
 4003b14:	e0bffa17 	ldw	r2,-24(fp)
 4003b18:	10800044 	addi	r2,r2,1
 4003b1c:	10800023 	ldbuio	r2,0(r2)
 4003b20:	10803fcc 	andi	r2,r2,255
 4003b24:	1007883a 	mov	r3,r2
 4003b28:	e0bfff17 	ldw	r2,-4(fp)
 4003b2c:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
 4003b30:	e0bffa17 	ldw	r2,-24(fp)
 4003b34:	10800084 	addi	r2,r2,2
 4003b38:	10800023 	ldbuio	r2,0(r2)
 4003b3c:	10803fcc 	andi	r2,r2,255
 4003b40:	1007883a 	mov	r3,r2
 4003b44:	e0bffe17 	ldw	r2,-8(fp)
 4003b48:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003b4c:	00800044 	movi	r2,1
 4003b50:	e0bff915 	stw	r2,-28(fp)
 4003b54:	00002f06 	br	4003c14 <read_from_frame+0x214>
  }
  else if( display->color_depth == 16 )
 4003b58:	e0800317 	ldw	r2,12(fp)
 4003b5c:	10800417 	ldw	r2,16(r2)
 4003b60:	10800418 	cmpnei	r2,r2,16
 4003b64:	1000241e 	bne	r2,zero,4003bf8 <read_from_frame+0x1f8>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
 4003b68:	e1000317 	ldw	r4,12(fp)
 4003b6c:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4003b70:	1009883a 	mov	r4,r2
 4003b74:	e0800317 	ldw	r2,12(fp)
 4003b78:	10c00517 	ldw	r3,20(r2)
 4003b7c:	e0bffd17 	ldw	r2,-12(fp)
 4003b80:	1887383a 	mul	r3,r3,r2
 4003b84:	e0bffc17 	ldw	r2,-16(fp)
 4003b88:	1885883a 	add	r2,r3,r2
 4003b8c:	1085883a 	add	r2,r2,r2
 4003b90:	2085883a 	add	r2,r4,r2
 4003b94:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
 4003b98:	e0bffa17 	ldw	r2,-24(fp)
 4003b9c:	1080002b 	ldhuio	r2,0(r2)
 4003ba0:	10bfffcc 	andi	r2,r2,65535
 4003ba4:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
 4003ba8:	e0bffb17 	ldw	r2,-20(fp)
 4003bac:	108007cc 	andi	r2,r2,31
 4003bb0:	1007883a 	mov	r3,r2
 4003bb4:	e0800217 	ldw	r2,8(fp)
 4003bb8:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
 4003bbc:	e0bffb17 	ldw	r2,-20(fp)
 4003bc0:	1004d17a 	srli	r2,r2,5
 4003bc4:	10800fcc 	andi	r2,r2,63
 4003bc8:	1007883a 	mov	r3,r2
 4003bcc:	e0bfff17 	ldw	r2,-4(fp)
 4003bd0:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
 4003bd4:	e0bffb17 	ldw	r2,-20(fp)
 4003bd8:	1004d2fa 	srli	r2,r2,11
 4003bdc:	108007cc 	andi	r2,r2,31
 4003be0:	1007883a 	mov	r3,r2
 4003be4:	e0bffe17 	ldw	r2,-8(fp)
 4003be8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003bec:	00800044 	movi	r2,1
 4003bf0:	e0bff915 	stw	r2,-28(fp)
 4003bf4:	00000706 	br	4003c14 <read_from_frame+0x214>
  }
  else
  {
    *blue = 0;
 4003bf8:	e0800217 	ldw	r2,8(fp)
 4003bfc:	10000005 	stb	zero,0(r2)
    *red = 0;
 4003c00:	e0bffe17 	ldw	r2,-8(fp)
 4003c04:	10000005 	stb	zero,0(r2)
    *green = 0;
 4003c08:	e0bfff17 	ldw	r2,-4(fp)
 4003c0c:	10000005 	stb	zero,0(r2)
    return_value = 0; 
 4003c10:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
 4003c14:	e0bff917 	ldw	r2,-28(fp)
}
 4003c18:	e037883a 	mov	sp,fp
 4003c1c:	dfc00117 	ldw	ra,4(sp)
 4003c20:	df000017 	ldw	fp,0(sp)
 4003c24:	dec00204 	addi	sp,sp,8
 4003c28:	f800283a 	ret

04003c2c <alpha_blending>:
*
******************************************************************/

//__inline__
int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4003c2c:	defff304 	addi	sp,sp,-52
 4003c30:	dfc00c15 	stw	ra,48(sp)
 4003c34:	df000b15 	stw	fp,44(sp)
 4003c38:	df000b04 	addi	fp,sp,44
 4003c3c:	e13ffc15 	stw	r4,-16(fp)
 4003c40:	e17ffd15 	stw	r5,-12(fp)
 4003c44:	e1bffe15 	stw	r6,-8(fp)
 4003c48:	3805883a 	mov	r2,r7
 4003c4c:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4003c50:	e0bffe17 	ldw	r2,-8(fp)
 4003c54:	10bfffd8 	cmpnei	r2,r2,-1
 4003c58:	10000c1e 	bne	r2,zero,4003c8c <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4003c5c:	e13ffb44 	addi	r4,fp,-19
 4003c60:	e0fffb04 	addi	r3,fp,-20
 4003c64:	e0800517 	ldw	r2,20(fp)
 4003c68:	d8800115 	stw	r2,4(sp)
 4003c6c:	e0bffb84 	addi	r2,fp,-18
 4003c70:	d8800015 	stw	r2,0(sp)
 4003c74:	200f883a 	mov	r7,r4
 4003c78:	180d883a 	mov	r6,r3
 4003c7c:	e17ffd17 	ldw	r5,-12(fp)
 4003c80:	e13ffc17 	ldw	r4,-16(fp)
 4003c84:	4003a000 	call	4003a00 <read_from_frame>
 4003c88:	00000c06 	br	4003cbc <alpha_blending+0x90>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4003c8c:	e0800517 	ldw	r2,20(fp)
 4003c90:	10c00417 	ldw	r3,16(r2)
 4003c94:	e1bffb44 	addi	r6,fp,-19
 4003c98:	e17ffb04 	addi	r5,fp,-20
 4003c9c:	e13ffe04 	addi	r4,fp,-8
 4003ca0:	e0bffb84 	addi	r2,fp,-18
 4003ca4:	d8800015 	stw	r2,0(sp)
 4003ca8:	300f883a 	mov	r7,r6
 4003cac:	280d883a 	mov	r6,r5
 4003cb0:	200b883a 	mov	r5,r4
 4003cb4:	1809883a 	mov	r4,r3
 4003cb8:	40037880 	call	4003788 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4003cbc:	e0800217 	ldw	r2,8(fp)
 4003cc0:	10800003 	ldbu	r2,0(r2)
 4003cc4:	10c03fcc 	andi	r3,r2,255
 4003cc8:	e0bfff03 	ldbu	r2,-4(fp)
 4003ccc:	1887383a 	mul	r3,r3,r2
 4003cd0:	e0bffb03 	ldbu	r2,-20(fp)
 4003cd4:	11003fcc 	andi	r4,r2,255
 4003cd8:	e0bfff03 	ldbu	r2,-4(fp)
 4003cdc:	01403fc4 	movi	r5,255
 4003ce0:	2885c83a 	sub	r2,r5,r2
 4003ce4:	2085383a 	mul	r2,r4,r2
 4003ce8:	1885883a 	add	r2,r3,r2
 4003cec:	01403fc4 	movi	r5,255
 4003cf0:	1009883a 	mov	r4,r2
 4003cf4:	40094880 	call	4009488 <__divsi3>
 4003cf8:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4003cfc:	e0800317 	ldw	r2,12(fp)
 4003d00:	10800003 	ldbu	r2,0(r2)
 4003d04:	10c03fcc 	andi	r3,r2,255
 4003d08:	e0bfff03 	ldbu	r2,-4(fp)
 4003d0c:	1887383a 	mul	r3,r3,r2
 4003d10:	e0bffb43 	ldbu	r2,-19(fp)
 4003d14:	11003fcc 	andi	r4,r2,255
 4003d18:	e0bfff03 	ldbu	r2,-4(fp)
 4003d1c:	01403fc4 	movi	r5,255
 4003d20:	2885c83a 	sub	r2,r5,r2
 4003d24:	2085383a 	mul	r2,r4,r2
 4003d28:	1885883a 	add	r2,r3,r2
 4003d2c:	01403fc4 	movi	r5,255
 4003d30:	1009883a 	mov	r4,r2
 4003d34:	40094880 	call	4009488 <__divsi3>
 4003d38:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4003d3c:	e0800417 	ldw	r2,16(fp)
 4003d40:	10800003 	ldbu	r2,0(r2)
 4003d44:	10c03fcc 	andi	r3,r2,255
 4003d48:	e0bfff03 	ldbu	r2,-4(fp)
 4003d4c:	1887383a 	mul	r3,r3,r2
 4003d50:	e0bffb83 	ldbu	r2,-18(fp)
 4003d54:	11003fcc 	andi	r4,r2,255
 4003d58:	e0bfff03 	ldbu	r2,-4(fp)
 4003d5c:	01403fc4 	movi	r5,255
 4003d60:	2885c83a 	sub	r2,r5,r2
 4003d64:	2085383a 	mul	r2,r4,r2
 4003d68:	1885883a 	add	r2,r3,r2
 4003d6c:	01403fc4 	movi	r5,255
 4003d70:	1009883a 	mov	r4,r2
 4003d74:	40094880 	call	4009488 <__divsi3>
 4003d78:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4003d7c:	e0800517 	ldw	r2,20(fp)
 4003d80:	10800417 	ldw	r2,16(r2)
 4003d84:	10800418 	cmpnei	r2,r2,16
 4003d88:	1000181e 	bne	r2,zero,4003dec <alpha_blending+0x1c0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4003d8c:	e0bff817 	ldw	r2,-32(fp)
 4003d90:	10c00830 	cmpltui	r3,r2,32
 4003d94:	1800011e 	bne	r3,zero,4003d9c <alpha_blending+0x170>
 4003d98:	008007c4 	movi	r2,31
 4003d9c:	1007883a 	mov	r3,r2
 4003da0:	e0800217 	ldw	r2,8(fp)
 4003da4:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4003da8:	e0bff917 	ldw	r2,-28(fp)
 4003dac:	10c01030 	cmpltui	r3,r2,64
 4003db0:	1800011e 	bne	r3,zero,4003db8 <alpha_blending+0x18c>
 4003db4:	00800fc4 	movi	r2,63
 4003db8:	1007883a 	mov	r3,r2
 4003dbc:	e0800317 	ldw	r2,12(fp)
 4003dc0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4003dc4:	e0bffa17 	ldw	r2,-24(fp)
 4003dc8:	10c00830 	cmpltui	r3,r2,32
 4003dcc:	1800011e 	bne	r3,zero,4003dd4 <alpha_blending+0x1a8>
 4003dd0:	008007c4 	movi	r2,31
 4003dd4:	1007883a 	mov	r3,r2
 4003dd8:	e0800417 	ldw	r2,16(fp)
 4003ddc:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4003de0:	00800044 	movi	r2,1
 4003de4:	e0bff715 	stw	r2,-36(fp)
 4003de8:	00002106 	br	4003e70 <alpha_blending+0x244>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4003dec:	e0800517 	ldw	r2,20(fp)
 4003df0:	10800417 	ldw	r2,16(r2)
 4003df4:	10800620 	cmpeqi	r2,r2,24
 4003df8:	1000041e 	bne	r2,zero,4003e0c <alpha_blending+0x1e0>
 4003dfc:	e0800517 	ldw	r2,20(fp)
 4003e00:	10800417 	ldw	r2,16(r2)
 4003e04:	10800818 	cmpnei	r2,r2,32
 4003e08:	1000181e 	bne	r2,zero,4003e6c <alpha_blending+0x240>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4003e0c:	e0bff817 	ldw	r2,-32(fp)
 4003e10:	10c04030 	cmpltui	r3,r2,256
 4003e14:	1800011e 	bne	r3,zero,4003e1c <alpha_blending+0x1f0>
 4003e18:	00803fc4 	movi	r2,255
 4003e1c:	1007883a 	mov	r3,r2
 4003e20:	e0800217 	ldw	r2,8(fp)
 4003e24:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4003e28:	e0bff917 	ldw	r2,-28(fp)
 4003e2c:	10c04030 	cmpltui	r3,r2,256
 4003e30:	1800011e 	bne	r3,zero,4003e38 <alpha_blending+0x20c>
 4003e34:	00803fc4 	movi	r2,255
 4003e38:	1007883a 	mov	r3,r2
 4003e3c:	e0800317 	ldw	r2,12(fp)
 4003e40:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4003e44:	e0bffa17 	ldw	r2,-24(fp)
 4003e48:	10c04030 	cmpltui	r3,r2,256
 4003e4c:	1800011e 	bne	r3,zero,4003e54 <alpha_blending+0x228>
 4003e50:	00803fc4 	movi	r2,255
 4003e54:	1007883a 	mov	r3,r2
 4003e58:	e0800417 	ldw	r2,16(fp)
 4003e5c:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4003e60:	00800044 	movi	r2,1
 4003e64:	e0bff715 	stw	r2,-36(fp)
 4003e68:	00000106 	br	4003e70 <alpha_blending+0x244>
  }
  else
  {
    return_value = 0;     
 4003e6c:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4003e70:	e0bff717 	ldw	r2,-36(fp)
} 
 4003e74:	e037883a 	mov	sp,fp
 4003e78:	dfc00117 	ldw	ra,4(sp)
 4003e7c:	df000017 	ldw	fp,0(sp)
 4003e80:	dec00204 	addi	sp,sp,8
 4003e84:	f800283a 	ret

04003e88 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4003e88:	defff004 	addi	sp,sp,-64
 4003e8c:	dfc00f15 	stw	ra,60(sp)
 4003e90:	df000e15 	stw	fp,56(sp)
 4003e94:	df000e04 	addi	fp,sp,56
 4003e98:	e13ffc15 	stw	r4,-16(fp)
 4003e9c:	e17ffd15 	stw	r5,-12(fp)
 4003ea0:	e1bffe15 	stw	r6,-8(fp)
 4003ea4:	3805883a 	mov	r2,r7
 4003ea8:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4003eac:	e0ffff07 	ldb	r3,-4(fp)
 4003eb0:	00820034 	movhi	r2,2048
 4003eb4:	10bff7c4 	addi	r2,r2,-33
 4003eb8:	1885883a 	add	r2,r3,r2
 4003ebc:	1004917a 	slli	r2,r2,5
 4003ec0:	e0c00317 	ldw	r3,12(fp)
 4003ec4:	1885883a 	add	r2,r3,r2
 4003ec8:	10800617 	ldw	r2,24(r2)
 4003ecc:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4003ed0:	e0800417 	ldw	r2,16(fp)
 4003ed4:	10c00417 	ldw	r3,16(r2)
 4003ed8:	e1bff984 	addi	r6,fp,-26
 4003edc:	e17ff904 	addi	r5,fp,-28
 4003ee0:	e13ffe04 	addi	r4,fp,-8
 4003ee4:	e0bff944 	addi	r2,fp,-27
 4003ee8:	d8800015 	stw	r2,0(sp)
 4003eec:	300f883a 	mov	r7,r6
 4003ef0:	280d883a 	mov	r6,r5
 4003ef4:	200b883a 	mov	r5,r4
 4003ef8:	1809883a 	mov	r4,r3
 4003efc:	40037880 	call	4003788 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4003f00:	e03ff615 	stw	zero,-40(fp)
 4003f04:	00004a06 	br	4004030 <vid_print_char_alpha+0x1a8>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003f08:	e03ff715 	stw	zero,-36(fp)
 4003f0c:	00003b06 	br	4003ffc <vid_print_char_alpha+0x174>
      red = original_red;
 4003f10:	e0bff903 	ldbu	r2,-28(fp)
 4003f14:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4003f18:	e0bff983 	ldbu	r2,-26(fp)
 4003f1c:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 4003f20:	e0bff943 	ldbu	r2,-27(fp)
 4003f24:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4003f28:	e0fffc17 	ldw	r3,-16(fp)
 4003f2c:	e0bff717 	ldw	r2,-36(fp)
 4003f30:	1889883a 	add	r4,r3,r2
 4003f34:	e0fffd17 	ldw	r3,-12(fp)
 4003f38:	e0bff617 	ldw	r2,-40(fp)
 4003f3c:	1887883a 	add	r3,r3,r2
 4003f40:	e0bff817 	ldw	r2,-32(fp)
 4003f44:	10800003 	ldbu	r2,0(r2)
 4003f48:	11403fcc 	andi	r5,r2,255
 4003f4c:	e0800417 	ldw	r2,16(fp)
 4003f50:	d8800315 	stw	r2,12(sp)
 4003f54:	e0bffa44 	addi	r2,fp,-23
 4003f58:	d8800215 	stw	r2,8(sp)
 4003f5c:	e0bffa04 	addi	r2,fp,-24
 4003f60:	d8800115 	stw	r2,4(sp)
 4003f64:	e0bff9c4 	addi	r2,fp,-25
 4003f68:	d8800015 	stw	r2,0(sp)
 4003f6c:	280f883a 	mov	r7,r5
 4003f70:	e1800217 	ldw	r6,8(fp)
 4003f74:	180b883a 	mov	r5,r3
 4003f78:	4003c2c0 	call	4003c2c <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4003f7c:	e0800417 	ldw	r2,16(fp)
 4003f80:	10c00417 	ldw	r3,16(r2)
 4003f84:	e0bff9c3 	ldbu	r2,-25(fp)
 4003f88:	11003fcc 	andi	r4,r2,255
 4003f8c:	e0bffa03 	ldbu	r2,-24(fp)
 4003f90:	11403fcc 	andi	r5,r2,255
 4003f94:	e0bffa43 	ldbu	r2,-23(fp)
 4003f98:	11803fcc 	andi	r6,r2,255
 4003f9c:	e0bffb04 	addi	r2,fp,-20
 4003fa0:	d8800015 	stw	r2,0(sp)
 4003fa4:	300f883a 	mov	r7,r6
 4003fa8:	280d883a 	mov	r6,r5
 4003fac:	200b883a 	mov	r5,r4
 4003fb0:	1809883a 	mov	r4,r3
 4003fb4:	40038d00 	call	40038d0 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 4003fb8:	e0fffc17 	ldw	r3,-16(fp)
 4003fbc:	e0bff717 	ldw	r2,-36(fp)
 4003fc0:	1889883a 	add	r4,r3,r2
 4003fc4:	e0fffd17 	ldw	r3,-12(fp)
 4003fc8:	e0bff617 	ldw	r2,-40(fp)
 4003fcc:	1885883a 	add	r2,r3,r2
 4003fd0:	e0fffb17 	ldw	r3,-20(fp)
 4003fd4:	e1c00417 	ldw	r7,16(fp)
 4003fd8:	180d883a 	mov	r6,r3
 4003fdc:	100b883a 	mov	r5,r2
 4003fe0:	40011240 	call	4001124 <vid_set_pixel>

      alpha++;
 4003fe4:	e0bff817 	ldw	r2,-32(fp)
 4003fe8:	10800044 	addi	r2,r2,1
 4003fec:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003ff0:	e0bff717 	ldw	r2,-36(fp)
 4003ff4:	10800044 	addi	r2,r2,1
 4003ff8:	e0bff715 	stw	r2,-36(fp)
 4003ffc:	e0ffff07 	ldb	r3,-4(fp)
 4004000:	00820034 	movhi	r2,2048
 4004004:	10bff7c4 	addi	r2,r2,-33
 4004008:	1885883a 	add	r2,r3,r2
 400400c:	1004917a 	slli	r2,r2,5
 4004010:	e0c00317 	ldw	r3,12(fp)
 4004014:	1885883a 	add	r2,r3,r2
 4004018:	10800417 	ldw	r2,16(r2)
 400401c:	e0fff717 	ldw	r3,-36(fp)
 4004020:	18bfbb36 	bltu	r3,r2,4003f10 <__alt_mem_epcs_flash_controller_0+0xfb002f10>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4004024:	e0bff617 	ldw	r2,-40(fp)
 4004028:	10800044 	addi	r2,r2,1
 400402c:	e0bff615 	stw	r2,-40(fp)
 4004030:	e0ffff07 	ldb	r3,-4(fp)
 4004034:	00820034 	movhi	r2,2048
 4004038:	10bff7c4 	addi	r2,r2,-33
 400403c:	1885883a 	add	r2,r3,r2
 4004040:	1004917a 	slli	r2,r2,5
 4004044:	e0c00317 	ldw	r3,12(fp)
 4004048:	1885883a 	add	r2,r3,r2
 400404c:	10800517 	ldw	r2,20(r2)
 4004050:	e0fff617 	ldw	r3,-40(fp)
 4004054:	18bfac36 	bltu	r3,r2,4003f08 <__alt_mem_epcs_flash_controller_0+0xfb002f08>

      alpha++;
    }
  }

  return(0);
 4004058:	0005883a 	mov	r2,zero
}
 400405c:	e037883a 	mov	sp,fp
 4004060:	dfc00117 	ldw	ra,4(sp)
 4004064:	df000017 	ldw	fp,0(sp)
 4004068:	dec00204 	addi	sp,sp,8
 400406c:	f800283a 	ret

04004070 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4004070:	defffb04 	addi	sp,sp,-20
 4004074:	df000415 	stw	fp,16(sp)
 4004078:	df000404 	addi	fp,sp,16
 400407c:	e13ffe15 	stw	r4,-8(fp)
 4004080:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4004084:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 4004088:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 400408c:	e03ffc15 	stw	zero,-16(fp)
 4004090:	00002406 	br	4004124 <vid_string_pixel_length_alpha+0xb4>
  {
    if( string[i] == ' ' )
 4004094:	e0bffc17 	ldw	r2,-16(fp)
 4004098:	e0ffff17 	ldw	r3,-4(fp)
 400409c:	1885883a 	add	r2,r3,r2
 40040a0:	10800003 	ldbu	r2,0(r2)
 40040a4:	10803fcc 	andi	r2,r2,255
 40040a8:	1080201c 	xori	r2,r2,128
 40040ac:	10bfe004 	addi	r2,r2,-128
 40040b0:	10800818 	cmpnei	r2,r2,32
 40040b4:	1000071e 	bne	r2,zero,40040d4 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 40040b8:	e0bffe17 	ldw	r2,-8(fp)
 40040bc:	10806004 	addi	r2,r2,384
 40040c0:	10c00417 	ldw	r3,16(r2)
 40040c4:	e0bffd17 	ldw	r2,-12(fp)
 40040c8:	1885883a 	add	r2,r3,r2
 40040cc:	e0bffd15 	stw	r2,-12(fp)
 40040d0:	00001106 	br	4004118 <vid_string_pixel_length_alpha+0xa8>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 40040d4:	e0bffc17 	ldw	r2,-16(fp)
 40040d8:	e0ffff17 	ldw	r3,-4(fp)
 40040dc:	1885883a 	add	r2,r3,r2
 40040e0:	10800003 	ldbu	r2,0(r2)
 40040e4:	10c03fcc 	andi	r3,r2,255
 40040e8:	18c0201c 	xori	r3,r3,128
 40040ec:	18ffe004 	addi	r3,r3,-128
 40040f0:	00820034 	movhi	r2,2048
 40040f4:	10bff7c4 	addi	r2,r2,-33
 40040f8:	1885883a 	add	r2,r3,r2
 40040fc:	1004917a 	slli	r2,r2,5
 4004100:	e0fffe17 	ldw	r3,-8(fp)
 4004104:	1885883a 	add	r2,r3,r2
 4004108:	10c00417 	ldw	r3,16(r2)
 400410c:	e0bffd17 	ldw	r2,-12(fp)
 4004110:	1885883a 	add	r2,r3,r2
 4004114:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004118:	e0bffc17 	ldw	r2,-16(fp)
 400411c:	10800044 	addi	r2,r2,1
 4004120:	e0bffc15 	stw	r2,-16(fp)
 4004124:	e0bffc17 	ldw	r2,-16(fp)
 4004128:	e0ffff17 	ldw	r3,-4(fp)
 400412c:	1885883a 	add	r2,r3,r2
 4004130:	10800003 	ldbu	r2,0(r2)
 4004134:	10803fcc 	andi	r2,r2,255
 4004138:	1080201c 	xori	r2,r2,128
 400413c:	10bfe004 	addi	r2,r2,-128
 4004140:	103fd41e 	bne	r2,zero,4004094 <__alt_mem_epcs_flash_controller_0+0xfb003094>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4004144:	e0bffd17 	ldw	r2,-12(fp)
}
 4004148:	e037883a 	mov	sp,fp
 400414c:	df000017 	ldw	fp,0(sp)
 4004150:	dec00104 	addi	sp,sp,4
 4004154:	f800283a 	ret

04004158 <GUI_DeskInit>:
    int Paint4_Index;
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;

void GUI_DeskInit(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 4004158:	defff004 	addi	sp,sp,-64
 400415c:	dfc00f15 	stw	ra,60(sp)
 4004160:	df000e15 	stw	fp,56(sp)
 4004164:	df000e04 	addi	fp,sp,56
 4004168:	e13ffe15 	stw	r4,-8(fp)
 400416c:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 70;
 4004170:	00801184 	movi	r2,70
 4004174:	e0bff415 	stw	r2,-48(fp)
    const int BoxW = 70;
 4004178:	00801184 	movi	r2,70
 400417c:	e0bff515 	stw	r2,-44(fp)
    const int GapH = 10;
 4004180:	00800284 	movi	r2,10
 4004184:	e0bff615 	stw	r2,-40(fp)
    const int DrawBorder = 2;
 4004188:	00800084 	movi	r2,2
 400418c:	e0bff715 	stw	r2,-36(fp)
    const int TextW = 120;
 4004190:	00801e04 	movi	r2,120
 4004194:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pReader->width - TextW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 4004198:	e0bffe17 	ldw	r2,-8(fp)
 400419c:	10c00517 	ldw	r3,20(r2)
 40041a0:	e0bff817 	ldw	r2,-32(fp)
 40041a4:	1887c83a 	sub	r3,r3,r2
 40041a8:	e0bff517 	ldw	r2,-44(fp)
 40041ac:	10bffde4 	muli	r2,r2,-9
 40041b0:	1885883a 	add	r2,r3,r2
 40041b4:	01400284 	movi	r5,10
 40041b8:	1009883a 	mov	r4,r2
 40041bc:	40094880 	call	4009488 <__divsi3>
 40041c0:	e0bff915 	stw	r2,-28(fp)
    rc.top = pReader->height - BoxH - GapH;
 40041c4:	e0bffe17 	ldw	r2,-8(fp)
 40041c8:	10c00617 	ldw	r3,24(r2)
 40041cc:	e0bff417 	ldw	r2,-48(fp)
 40041d0:	1887c83a 	sub	r3,r3,r2
 40041d4:	e0bff617 	ldw	r2,-40(fp)
 40041d8:	1885c83a 	sub	r2,r3,r2
 40041dc:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 40041e0:	e0fffc17 	ldw	r3,-16(fp)
 40041e4:	e0bff417 	ldw	r2,-48(fp)
 40041e8:	1885883a 	add	r2,r3,r2
 40041ec:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW;
 40041f0:	e0fff917 	ldw	r3,-28(fp)
 40041f4:	e0bff817 	ldw	r2,-32(fp)
 40041f8:	1885883a 	add	r2,r3,r2
 40041fc:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 4004200:	e0fffa17 	ldw	r3,-24(fp)
 4004204:	e0bff517 	ldw	r2,-44(fp)
 4004208:	1885883a 	add	r2,r3,r2
 400420c:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 4004210:	e0bfff17 	ldw	r2,-4(fp)
 4004214:	11000504 	addi	r4,r2,20
 4004218:	e0bffe17 	ldw	r2,-8(fp)
 400421c:	10c00517 	ldw	r3,20(r2)
 4004220:	e0bff717 	ldw	r2,-36(fp)
 4004224:	188bc83a 	sub	r5,r3,r2
 4004228:	e0fffc17 	ldw	r3,-16(fp)
 400422c:	e0bff717 	ldw	r2,-36(fp)
 4004230:	1885c83a 	sub	r2,r3,r2
 4004234:	d8800015 	stw	r2,0(sp)
 4004238:	e1fff717 	ldw	r7,-36(fp)
 400423c:	280d883a 	mov	r6,r5
 4004240:	e17ff717 	ldw	r5,-36(fp)
 4004244:	40003540 	call	4000354 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 4004248:	e03ff315 	stw	zero,-52(fp)
 400424c:	00002206 	br	40042d8 <GUI_DeskInit+0x180>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 4004250:	e0bff317 	ldw	r2,-52(fp)
 4004254:	10800524 	muli	r2,r2,20
 4004258:	10800904 	addi	r2,r2,36
 400425c:	e0ffff17 	ldw	r3,-4(fp)
 4004260:	1885883a 	add	r2,r3,r2
 4004264:	e0fffa04 	addi	r3,fp,-24
 4004268:	180b883a 	mov	r5,r3
 400426c:	1009883a 	mov	r4,r2
 4004270:	40004cc0 	call	40004cc <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 4004274:	00810234 	movhi	r2,1032
 4004278:	10b75904 	addi	r2,r2,-8860
 400427c:	e0fff317 	ldw	r3,-52(fp)
 4004280:	18c7883a 	add	r3,r3,r3
 4004284:	18c7883a 	add	r3,r3,r3
 4004288:	10c5883a 	add	r2,r2,r3
 400428c:	10800017 	ldw	r2,0(r2)
 4004290:	1009883a 	mov	r4,r2
 4004294:	e0ffff17 	ldw	r3,-4(fp)
 4004298:	e0bff317 	ldw	r2,-52(fp)
 400429c:	10800524 	muli	r2,r2,20
 40042a0:	1885883a 	add	r2,r3,r2
 40042a4:	10800d04 	addi	r2,r2,52
 40042a8:	11000015 	stw	r4,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 40042ac:	e0fff517 	ldw	r3,-44(fp)
 40042b0:	e0bff917 	ldw	r2,-28(fp)
 40042b4:	1887883a 	add	r3,r3,r2
 40042b8:	e0bffa04 	addi	r2,fp,-24
 40042bc:	000d883a 	mov	r6,zero
 40042c0:	180b883a 	mov	r5,r3
 40042c4:	1009883a 	mov	r4,r2
 40042c8:	40004400 	call	4000440 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pReader->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 40042cc:	e0bff317 	ldw	r2,-52(fp)
 40042d0:	10800044 	addi	r2,r2,1
 40042d4:	e0bff315 	stw	r2,-52(fp)
 40042d8:	e0bff317 	ldw	r2,-52(fp)
 40042dc:	10800250 	cmplti	r2,r2,9
 40042e0:	103fdb1e 	bne	r2,zero,4004250 <__alt_mem_epcs_flash_controller_0+0xfb003250>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->Paint0_Index = BTN_BLUE;
 40042e4:	e0bfff17 	ldw	r2,-4(fp)
 40042e8:	00c000c4 	movi	r3,3
 40042ec:	10c00015 	stw	r3,0(r2)
    pDeskInfo->Paint1_Index = BTN_GREEN;
 40042f0:	e0bfff17 	ldw	r2,-4(fp)
 40042f4:	00c00104 	movi	r3,4
 40042f8:	10c00115 	stw	r3,4(r2)
    //add by matthew for mtl2
    pDeskInfo->Paint2_Index = BTN_RED;
 40042fc:	e0bfff17 	ldw	r2,-4(fp)
 4004300:	00c00144 	movi	r3,5
 4004304:	10c00215 	stw	r3,8(r2)
    pDeskInfo->Paint3_Index = BTN_SKY;
 4004308:	e0bfff17 	ldw	r2,-4(fp)
 400430c:	00c00184 	movi	r3,6
 4004310:	10c00315 	stw	r3,12(r2)
    pDeskInfo->Paint4_Index = BTN_YELLOW;
 4004314:	e0bfff17 	ldw	r2,-4(fp)
 4004318:	00c001c4 	movi	r3,7
 400431c:	10c00415 	stw	r3,16(r2)
}
 4004320:	0001883a 	nop
 4004324:	e037883a 	mov	sp,fp
 4004328:	dfc00117 	ldw	ra,4(sp)
 400432c:	df000017 	ldw	fp,0(sp)
 4004330:	dec00204 	addi	sp,sp,8
 4004334:	f800283a 	ret

04004338 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 4004338:	defffa04 	addi	sp,sp,-24
 400433c:	dfc00515 	stw	ra,20(sp)
 4004340:	df000415 	stw	fp,16(sp)
 4004344:	df000404 	addi	fp,sp,16
 4004348:	e13ffe15 	stw	r4,-8(fp)
 400434c:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 4004350:	00800284 	movi	r2,10
 4004354:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 4004358:	e03ffd15 	stw	zero,-12(fp)
 400435c:	00000e06 	br	4004398 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 4004360:	e0bffd17 	ldw	r2,-12(fp)
 4004364:	10800524 	muli	r2,r2,20
 4004368:	10800904 	addi	r2,r2,36
 400436c:	e0fffe17 	ldw	r3,-8(fp)
 4004370:	1885883a 	add	r2,r3,r2
 4004374:	100b883a 	mov	r5,r2
 4004378:	e13fff17 	ldw	r4,-4(fp)
 400437c:	400028c0 	call	400028c <IsPtInRect>
 4004380:	10000226 	beq	r2,zero,400438c <GUI_CheckButton+0x54>
            ButtonId = i;
 4004384:	e0bffd17 	ldw	r2,-12(fp)
 4004388:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 400438c:	e0bffd17 	ldw	r2,-12(fp)
 4004390:	10800044 	addi	r2,r2,1
 4004394:	e0bffd15 	stw	r2,-12(fp)
 4004398:	e0bffd17 	ldw	r2,-12(fp)
 400439c:	10800248 	cmpgei	r2,r2,9
 40043a0:	1000031e 	bne	r2,zero,40043b0 <GUI_CheckButton+0x78>
 40043a4:	e0bffc17 	ldw	r2,-16(fp)
 40043a8:	108002a0 	cmpeqi	r2,r2,10
 40043ac:	103fec1e 	bne	r2,zero,4004360 <__alt_mem_epcs_flash_controller_0+0xfb003360>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 40043b0:	e0bffc17 	ldw	r2,-16(fp)
}
 40043b4:	e037883a 	mov	sp,fp
 40043b8:	dfc00117 	ldw	ra,4(sp)
 40043bc:	df000017 	ldw	fp,0(sp)
 40043c0:	dec00204 	addi	sp,sp,8
 40043c4:	f800283a 	ret

040043c8 <GUI_DeskDraw>:

void GUI_DeskDraw(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 40043c8:	defff104 	addi	sp,sp,-60
 40043cc:	dfc00e15 	stw	ra,56(sp)
 40043d0:	df000d15 	stw	fp,52(sp)
 40043d4:	dc400c15 	stw	r17,48(sp)
 40043d8:	dc000b15 	stw	r16,44(sp)
 40043dc:	df000d04 	addi	fp,sp,52
 40043e0:	e13ffc15 	stw	r4,-16(fp)
 40043e4:	e17ffd15 	stw	r5,-12(fp)
    int i, active;
    RECT rc;
    
    
    // show text
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pReader, "Terasic");
 40043e8:	e0bffd17 	ldw	r2,-12(fp)
 40043ec:	10c00517 	ldw	r3,20(r2)
 40043f0:	e0bffd17 	ldw	r2,-12(fp)
 40043f4:	11000b17 	ldw	r4,44(r2)
 40043f8:	00810234 	movhi	r2,1032
 40043fc:	10ae3504 	addi	r2,r2,-18220
 4004400:	d8800215 	stw	r2,8(sp)
 4004404:	e0bffc17 	ldw	r2,-16(fp)
 4004408:	d8800115 	stw	r2,4(sp)
 400440c:	00810234 	movhi	r2,1032
 4004410:	10b07304 	addi	r2,r2,-15924
 4004414:	d8800015 	stw	r2,0(sp)
 4004418:	000f883a 	mov	r7,zero
 400441c:	01803fc4 	movi	r6,255
 4004420:	200b883a 	mov	r5,r4
 4004424:	1809883a 	mov	r4,r3
 4004428:	40035240 	call	4003524 <vid_print_string_alpha>
    vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pReader, "Multi-Touch");
 400442c:	e0bffd17 	ldw	r2,-12(fp)
 4004430:	10c00517 	ldw	r3,20(r2)
 4004434:	e0bffd17 	ldw	r2,-12(fp)
 4004438:	10800b17 	ldw	r2,44(r2)
 400443c:	11000584 	addi	r4,r2,22
 4004440:	00810234 	movhi	r2,1032
 4004444:	10ae3704 	addi	r2,r2,-18212
 4004448:	d8800215 	stw	r2,8(sp)
 400444c:	e0bffc17 	ldw	r2,-16(fp)
 4004450:	d8800115 	stw	r2,4(sp)
 4004454:	00810234 	movhi	r2,1032
 4004458:	10b07304 	addi	r2,r2,-15924
 400445c:	d8800015 	stw	r2,0(sp)
 4004460:	000f883a 	mov	r7,zero
 4004464:	01803fc4 	movi	r6,255
 4004468:	200b883a 	mov	r5,r4
 400446c:	1809883a 	mov	r4,r3
 4004470:	40035240 	call	4003524 <vid_print_string_alpha>

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004474:	e0bffd17 	ldw	r2,-12(fp)
 4004478:	10c00504 	addi	r3,r2,20
 400447c:	e0bff804 	addi	r2,fp,-32
 4004480:	180b883a 	mov	r5,r3
 4004484:	1009883a 	mov	r4,r2
 4004488:	40004cc0 	call	40004cc <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
 400448c:	e0fff817 	ldw	r3,-32(fp)
 4004490:	e13ffa17 	ldw	r4,-24(fp)
 4004494:	e17ff917 	ldw	r5,-28(fp)
 4004498:	e1bffb17 	ldw	r6,-20(fp)
 400449c:	e0bffc17 	ldw	r2,-16(fp)
 40044a0:	d8800215 	stw	r2,8(sp)
 40044a4:	d8000115 	stw	zero,4(sp)
 40044a8:	00804034 	movhi	r2,256
 40044ac:	10bfffc4 	addi	r2,r2,-1
 40044b0:	d8800015 	stw	r2,0(sp)
 40044b4:	300f883a 	mov	r7,r6
 40044b8:	280d883a 	mov	r6,r5
 40044bc:	200b883a 	mov	r5,r4
 40044c0:	1809883a 	mov	r4,r3
 40044c4:	4000edc0 	call	4000edc <vid_draw_box>
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
 40044c8:	e03ff615 	stw	zero,-40(fp)
 40044cc:	00004d06 	br	4004604 <GUI_DeskDraw+0x23c>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 40044d0:	e0bff617 	ldw	r2,-40(fp)
 40044d4:	10800524 	muli	r2,r2,20
 40044d8:	10800904 	addi	r2,r2,36
 40044dc:	e0fffd17 	ldw	r3,-12(fp)
 40044e0:	1887883a 	add	r3,r3,r2
 40044e4:	e0bff804 	addi	r2,fp,-32
 40044e8:	180b883a 	mov	r5,r3
 40044ec:	1009883a 	mov	r4,r2
 40044f0:	40004cc0 	call	40004cc <RectCopy>
        if (i == BTN_CLEAR){
 40044f4:	e0bff617 	ldw	r2,-40(fp)
 40044f8:	10800058 	cmpnei	r2,r2,1
 40044fc:	10002e1e 	bne	r2,zero,40045b8 <GUI_DeskDraw+0x1f0>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pReader);
 4004500:	e13ff817 	ldw	r4,-32(fp)
 4004504:	e17ffa17 	ldw	r5,-24(fp)
 4004508:	e1bff917 	ldw	r6,-28(fp)
 400450c:	e1fffb17 	ldw	r7,-20(fp)
 4004510:	e0fffd17 	ldw	r3,-12(fp)
 4004514:	e0bff617 	ldw	r2,-40(fp)
 4004518:	10800524 	muli	r2,r2,20
 400451c:	1885883a 	add	r2,r3,r2
 4004520:	10800d04 	addi	r2,r2,52
 4004524:	10800017 	ldw	r2,0(r2)
 4004528:	e0fffc17 	ldw	r3,-16(fp)
 400452c:	d8c00215 	stw	r3,8(sp)
 4004530:	d8000115 	stw	zero,4(sp)
 4004534:	d8800015 	stw	r2,0(sp)
 4004538:	4000edc0 	call	4000edc <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pReader, "Clear");
 400453c:	e0bff817 	ldw	r2,-32(fp)
 4004540:	14400204 	addi	r17,r2,8
 4004544:	e43ffa17 	ldw	r16,-24(fp)
 4004548:	e0bff804 	addi	r2,fp,-32
 400454c:	1009883a 	mov	r4,r2
 4004550:	40005680 	call	4000568 <RectHeight>
 4004554:	10bffa84 	addi	r2,r2,-22
 4004558:	1006d7fa 	srli	r3,r2,31
 400455c:	1885883a 	add	r2,r3,r2
 4004560:	1005d07a 	srai	r2,r2,1
 4004564:	8089883a 	add	r4,r16,r2
 4004568:	e0fffd17 	ldw	r3,-12(fp)
 400456c:	e0bff617 	ldw	r2,-40(fp)
 4004570:	10800524 	muli	r2,r2,20
 4004574:	1885883a 	add	r2,r3,r2
 4004578:	10800d04 	addi	r2,r2,52
 400457c:	10c00017 	ldw	r3,0(r2)
 4004580:	00810234 	movhi	r2,1032
 4004584:	10ae3a04 	addi	r2,r2,-18200
 4004588:	d8800215 	stw	r2,8(sp)
 400458c:	e0bffc17 	ldw	r2,-16(fp)
 4004590:	d8800115 	stw	r2,4(sp)
 4004594:	00810234 	movhi	r2,1032
 4004598:	10b07304 	addi	r2,r2,-15924
 400459c:	d8800015 	stw	r2,0(sp)
 40045a0:	000f883a 	mov	r7,zero
 40045a4:	180d883a 	mov	r6,r3
 40045a8:	200b883a 	mov	r5,r4
 40045ac:	8809883a 	mov	r4,r17
 40045b0:	40035240 	call	4003524 <vid_print_string_alpha>
 40045b4:	00001006 	br	40045f8 <GUI_DeskDraw+0x230>
        }else{
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
 40045b8:	e13ff817 	ldw	r4,-32(fp)
 40045bc:	e17ffa17 	ldw	r5,-24(fp)
 40045c0:	e1bff917 	ldw	r6,-28(fp)
 40045c4:	e1fffb17 	ldw	r7,-20(fp)
 40045c8:	e0fffd17 	ldw	r3,-12(fp)
 40045cc:	e0bff617 	ldw	r2,-40(fp)
 40045d0:	10800524 	muli	r2,r2,20
 40045d4:	1885883a 	add	r2,r3,r2
 40045d8:	10800d04 	addi	r2,r2,52
 40045dc:	10800017 	ldw	r2,0(r2)
 40045e0:	e0fffc17 	ldw	r3,-16(fp)
 40045e4:	d8c00215 	stw	r3,8(sp)
 40045e8:	00c00044 	movi	r3,1
 40045ec:	d8c00115 	stw	r3,4(sp)
 40045f0:	d8800015 	stw	r2,0(sp)
 40045f4:	4000edc0 	call	4000edc <vid_draw_box>
    RectCopy(&rc, &pDeskInfo->rcPaint);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pReader);
    

    // draw palette
    for(i=0;i<BTN_NUM;i++){
 40045f8:	e0bff617 	ldw	r2,-40(fp)
 40045fc:	10800044 	addi	r2,r2,1
 4004600:	e0bff615 	stw	r2,-40(fp)
 4004604:	e0bff617 	ldw	r2,-40(fp)
 4004608:	10800250 	cmplti	r2,r2,9
 400460c:	103fb01e 	bne	r2,zero,40044d0 <__alt_mem_epcs_flash_controller_0+0xfb0034d0>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pReader);
        }            
    }
  
    // draw activce color
    active = pDeskInfo->Paint0_Index;
 4004610:	e0bffd17 	ldw	r2,-12(fp)
 4004614:	10800017 	ldw	r2,0(r2)
 4004618:	e0bff715 	stw	r2,-36(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 400461c:	e0bff717 	ldw	r2,-36(fp)
 4004620:	10800524 	muli	r2,r2,20
 4004624:	10800904 	addi	r2,r2,36
 4004628:	e0fffd17 	ldw	r3,-12(fp)
 400462c:	1887883a 	add	r3,r3,r2
 4004630:	e0bff804 	addi	r2,fp,-32
 4004634:	180b883a 	mov	r5,r3
 4004638:	1009883a 	mov	r4,r2
 400463c:	40004cc0 	call	40004cc <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "1");
 4004640:	e0bff817 	ldw	r2,-32(fp)
 4004644:	11000084 	addi	r4,r2,2
 4004648:	e0bffa17 	ldw	r2,-24(fp)
 400464c:	11400084 	addi	r5,r2,2
 4004650:	e0fffd17 	ldw	r3,-12(fp)
 4004654:	e0bff717 	ldw	r2,-36(fp)
 4004658:	10800524 	muli	r2,r2,20
 400465c:	1885883a 	add	r2,r3,r2
 4004660:	10800d04 	addi	r2,r2,52
 4004664:	10c00017 	ldw	r3,0(r2)
 4004668:	00810234 	movhi	r2,1032
 400466c:	10ae3c04 	addi	r2,r2,-18192
 4004670:	d8800215 	stw	r2,8(sp)
 4004674:	e0bffc17 	ldw	r2,-16(fp)
 4004678:	d8800115 	stw	r2,4(sp)
 400467c:	00810234 	movhi	r2,1032
 4004680:	10b07304 	addi	r2,r2,-15924
 4004684:	d8800015 	stw	r2,0(sp)
 4004688:	180f883a 	mov	r7,r3
 400468c:	000d883a 	mov	r6,zero
 4004690:	40035240 	call	4003524 <vid_print_string_alpha>
        
    active = pDeskInfo->Paint1_Index;
 4004694:	e0bffd17 	ldw	r2,-12(fp)
 4004698:	10800117 	ldw	r2,4(r2)
 400469c:	e0bff715 	stw	r2,-36(fp)
    RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 40046a0:	e0bff717 	ldw	r2,-36(fp)
 40046a4:	10800524 	muli	r2,r2,20
 40046a8:	10800904 	addi	r2,r2,36
 40046ac:	e0fffd17 	ldw	r3,-12(fp)
 40046b0:	1887883a 	add	r3,r3,r2
 40046b4:	e0bff804 	addi	r2,fp,-32
 40046b8:	180b883a 	mov	r5,r3
 40046bc:	1009883a 	mov	r4,r2
 40046c0:	40004cc0 	call	40004cc <RectCopy>
    vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "2");
 40046c4:	e0bff817 	ldw	r2,-32(fp)
 40046c8:	11000084 	addi	r4,r2,2
 40046cc:	e0bffa17 	ldw	r2,-24(fp)
 40046d0:	11400084 	addi	r5,r2,2
 40046d4:	e0fffd17 	ldw	r3,-12(fp)
 40046d8:	e0bff717 	ldw	r2,-36(fp)
 40046dc:	10800524 	muli	r2,r2,20
 40046e0:	1885883a 	add	r2,r3,r2
 40046e4:	10800d04 	addi	r2,r2,52
 40046e8:	10c00017 	ldw	r3,0(r2)
 40046ec:	00810234 	movhi	r2,1032
 40046f0:	10ae3d04 	addi	r2,r2,-18188
 40046f4:	d8800215 	stw	r2,8(sp)
 40046f8:	e0bffc17 	ldw	r2,-16(fp)
 40046fc:	d8800115 	stw	r2,4(sp)
 4004700:	00810234 	movhi	r2,1032
 4004704:	10b07304 	addi	r2,r2,-15924
 4004708:	d8800015 	stw	r2,0(sp)
 400470c:	180f883a 	mov	r7,r3
 4004710:	000d883a 	mov	r6,zero
 4004714:	40035240 	call	4003524 <vid_print_string_alpha>
    active = pDeskInfo->Paint2_Index;
 4004718:	e0bffd17 	ldw	r2,-12(fp)
 400471c:	10800217 	ldw	r2,8(r2)
 4004720:	e0bff715 	stw	r2,-36(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 4004724:	e0bff717 	ldw	r2,-36(fp)
 4004728:	10800524 	muli	r2,r2,20
 400472c:	10800904 	addi	r2,r2,36
 4004730:	e0fffd17 	ldw	r3,-12(fp)
 4004734:	1887883a 	add	r3,r3,r2
 4004738:	e0bff804 	addi	r2,fp,-32
 400473c:	180b883a 	mov	r5,r3
 4004740:	1009883a 	mov	r4,r2
 4004744:	40004cc0 	call	40004cc <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "3");
 4004748:	e0bff817 	ldw	r2,-32(fp)
 400474c:	11000084 	addi	r4,r2,2
 4004750:	e0bffa17 	ldw	r2,-24(fp)
 4004754:	11400084 	addi	r5,r2,2
 4004758:	e0fffd17 	ldw	r3,-12(fp)
 400475c:	e0bff717 	ldw	r2,-36(fp)
 4004760:	10800524 	muli	r2,r2,20
 4004764:	1885883a 	add	r2,r3,r2
 4004768:	10800d04 	addi	r2,r2,52
 400476c:	10c00017 	ldw	r3,0(r2)
 4004770:	00810234 	movhi	r2,1032
 4004774:	10ae3e04 	addi	r2,r2,-18184
 4004778:	d8800215 	stw	r2,8(sp)
 400477c:	e0bffc17 	ldw	r2,-16(fp)
 4004780:	d8800115 	stw	r2,4(sp)
 4004784:	00810234 	movhi	r2,1032
 4004788:	10b07304 	addi	r2,r2,-15924
 400478c:	d8800015 	stw	r2,0(sp)
 4004790:	180f883a 	mov	r7,r3
 4004794:	000d883a 	mov	r6,zero
 4004798:	40035240 	call	4003524 <vid_print_string_alpha>
	active = pDeskInfo->Paint3_Index;
 400479c:	e0bffd17 	ldw	r2,-12(fp)
 40047a0:	10800317 	ldw	r2,12(r2)
 40047a4:	e0bff715 	stw	r2,-36(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 40047a8:	e0bff717 	ldw	r2,-36(fp)
 40047ac:	10800524 	muli	r2,r2,20
 40047b0:	10800904 	addi	r2,r2,36
 40047b4:	e0fffd17 	ldw	r3,-12(fp)
 40047b8:	1887883a 	add	r3,r3,r2
 40047bc:	e0bff804 	addi	r2,fp,-32
 40047c0:	180b883a 	mov	r5,r3
 40047c4:	1009883a 	mov	r4,r2
 40047c8:	40004cc0 	call	40004cc <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "4");
 40047cc:	e0bff817 	ldw	r2,-32(fp)
 40047d0:	11000084 	addi	r4,r2,2
 40047d4:	e0bffa17 	ldw	r2,-24(fp)
 40047d8:	11400084 	addi	r5,r2,2
 40047dc:	e0fffd17 	ldw	r3,-12(fp)
 40047e0:	e0bff717 	ldw	r2,-36(fp)
 40047e4:	10800524 	muli	r2,r2,20
 40047e8:	1885883a 	add	r2,r3,r2
 40047ec:	10800d04 	addi	r2,r2,52
 40047f0:	10c00017 	ldw	r3,0(r2)
 40047f4:	00810234 	movhi	r2,1032
 40047f8:	10ae3f04 	addi	r2,r2,-18180
 40047fc:	d8800215 	stw	r2,8(sp)
 4004800:	e0bffc17 	ldw	r2,-16(fp)
 4004804:	d8800115 	stw	r2,4(sp)
 4004808:	00810234 	movhi	r2,1032
 400480c:	10b07304 	addi	r2,r2,-15924
 4004810:	d8800015 	stw	r2,0(sp)
 4004814:	180f883a 	mov	r7,r3
 4004818:	000d883a 	mov	r6,zero
 400481c:	40035240 	call	4003524 <vid_print_string_alpha>
	active = pDeskInfo->Paint4_Index;
 4004820:	e0bffd17 	ldw	r2,-12(fp)
 4004824:	10800417 	ldw	r2,16(r2)
 4004828:	e0bff715 	stw	r2,-36(fp)
	RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
 400482c:	e0bff717 	ldw	r2,-36(fp)
 4004830:	10800524 	muli	r2,r2,20
 4004834:	10800904 	addi	r2,r2,36
 4004838:	e0fffd17 	ldw	r3,-12(fp)
 400483c:	1887883a 	add	r3,r3,r2
 4004840:	e0bff804 	addi	r2,fp,-32
 4004844:	180b883a 	mov	r5,r3
 4004848:	1009883a 	mov	r4,r2
 400484c:	40004cc0 	call	40004cc <RectCopy>
	vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pReader, "5");
 4004850:	e0bff817 	ldw	r2,-32(fp)
 4004854:	11000084 	addi	r4,r2,2
 4004858:	e0bffa17 	ldw	r2,-24(fp)
 400485c:	11400084 	addi	r5,r2,2
 4004860:	e0fffd17 	ldw	r3,-12(fp)
 4004864:	e0bff717 	ldw	r2,-36(fp)
 4004868:	10800524 	muli	r2,r2,20
 400486c:	1885883a 	add	r2,r3,r2
 4004870:	10800d04 	addi	r2,r2,52
 4004874:	10c00017 	ldw	r3,0(r2)
 4004878:	00810234 	movhi	r2,1032
 400487c:	10ae4004 	addi	r2,r2,-18176
 4004880:	d8800215 	stw	r2,8(sp)
 4004884:	e0bffc17 	ldw	r2,-16(fp)
 4004888:	d8800115 	stw	r2,4(sp)
 400488c:	00810234 	movhi	r2,1032
 4004890:	10b07304 	addi	r2,r2,-15924
 4004894:	d8800015 	stw	r2,0(sp)
 4004898:	180f883a 	mov	r7,r3
 400489c:	000d883a 	mov	r6,zero
 40048a0:	40035240 	call	4003524 <vid_print_string_alpha>
        
        
}
 40048a4:	0001883a 	nop
 40048a8:	e6fffe04 	addi	sp,fp,-8
 40048ac:	dfc00317 	ldw	ra,12(sp)
 40048b0:	df000217 	ldw	fp,8(sp)
 40048b4:	dc400117 	ldw	r17,4(sp)
 40048b8:	dc000017 	ldw	r16,0(sp)
 40048bc:	dec00404 	addi	sp,sp,16
 40048c0:	f800283a 	ret

040048c4 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 40048c4:	defffb04 	addi	sp,sp,-20
 40048c8:	df000415 	stw	fp,16(sp)
 40048cc:	df000404 	addi	fp,sp,16
 40048d0:	e13ffe15 	stw	r4,-8(fp)
 40048d4:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
 40048d8:	00800044 	movi	r2,1
 40048dc:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
 40048e0:	00800c84 	movi	r2,50
 40048e4:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 40048e8:	e0bffe17 	ldw	r2,-8(fp)
 40048ec:	10c00017 	ldw	r3,0(r2)
 40048f0:	e0bfff17 	ldw	r2,-4(fp)
 40048f4:	10800017 	ldw	r2,0(r2)
 40048f8:	1885c83a 	sub	r2,r3,r2
 40048fc:	1000010e 	bge	r2,zero,4004904 <IsContinuedPoint+0x40>
 4004900:	0085c83a 	sub	r2,zero,r2
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bffd17 	ldw	r2,-12(fp)
 400490c:	10c0020e 	bge	r2,r3,4004918 <IsContinuedPoint+0x54>
        bYes = FALSE;
 4004910:	e03ffc15 	stw	zero,-16(fp)
 4004914:	00000b06 	br	4004944 <IsContinuedPoint+0x80>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 4004918:	e0bffe17 	ldw	r2,-8(fp)
 400491c:	10c00117 	ldw	r3,4(r2)
 4004920:	e0bfff17 	ldw	r2,-4(fp)
 4004924:	10800117 	ldw	r2,4(r2)
 4004928:	1885c83a 	sub	r2,r3,r2
 400492c:	1000010e 	bge	r2,zero,4004934 <IsContinuedPoint+0x70>
 4004930:	0085c83a 	sub	r2,zero,r2
 4004934:	1007883a 	mov	r3,r2
 4004938:	e0bffd17 	ldw	r2,-12(fp)
 400493c:	10c0010e 	bge	r2,r3,4004944 <IsContinuedPoint+0x80>
        bYes = FALSE;
 4004940:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
 4004944:	e0bffc17 	ldw	r2,-16(fp)
        
}
 4004948:	e037883a 	mov	sp,fp
 400494c:	df000017 	ldw	fp,0(sp)
 4004950:	dec00104 	addi	sp,sp,4
 4004954:	f800283a 	ret

04004958 <GUI_ShowGesture>:

void GUI_ShowGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
 4004958:	defff304 	addi	sp,sp,-52
 400495c:	dfc00c15 	stw	ra,48(sp)
 4004960:	df000b15 	stw	fp,44(sp)
 4004964:	df000b04 	addi	fp,sp,44
 4004968:	e13ffd15 	stw	r4,-12(fp)
 400496c:	e17ffe15 	stw	r5,-8(fp)
 4004970:	3005883a 	mov	r2,r6
 4004974:	e0bfff05 	stb	r2,-4(fp)
    // show bitmap
    int nIndex = -1, x, y;
 4004978:	00bfffc4 	movi	r2,-1
 400497c:	e0bff515 	stw	r2,-44(fp)
    const int BmpW = 60;
 4004980:	00800f04 	movi	r2,60
 4004984:	e0bffb15 	stw	r2,-20(fp)
    const int BmpH = 60;
 4004988:	00800f04 	movi	r2,60
 400498c:	e0bffc15 	stw	r2,-16(fp)
    alt_u8 *pDes, *pSrc, *pDesStart;

    // find gesture bitmap id
    switch(GestureId){
 4004990:	e0bfff03 	ldbu	r2,-4(fp)
 4004994:	10bffc04 	addi	r2,r2,-16
 4004998:	10c00ea8 	cmpgeui	r3,r2,58
 400499c:	1800511e 	bne	r3,zero,4004ae4 <GUI_ShowGesture+0x18c>
 40049a0:	100690ba 	slli	r3,r2,2
 40049a4:	00810034 	movhi	r2,1024
 40049a8:	10926e04 	addi	r2,r2,18872
 40049ac:	1885883a 	add	r2,r3,r2
 40049b0:	10800017 	ldw	r2,0(r2)
 40049b4:	1000683a 	jmp	r2
 40049b8:	04004ac0 	call	4004ac <__alt_mem_sdram-0x3bffb54>
 40049bc:	04004ae4 	muli	r16,zero,299
 40049c0:	04004ae4 	muli	r16,zero,299
 40049c4:	04004ae4 	muli	r16,zero,299
 40049c8:	04004aa8 	cmpgeui	r16,zero,298
 40049cc:	04004ae4 	muli	r16,zero,299
 40049d0:	04004ae4 	muli	r16,zero,299
 40049d4:	04004ae4 	muli	r16,zero,299
 40049d8:	04004ab4 	movhi	r16,298
 40049dc:	04004ae4 	muli	r16,zero,299
 40049e0:	04004ae4 	muli	r16,zero,299
 40049e4:	04004ae4 	muli	r16,zero,299
 40049e8:	04004aa0 	cmpeqi	r16,zero,298
 40049ec:	04004ae4 	muli	r16,zero,299
 40049f0:	04004ae4 	muli	r16,zero,299
 40049f4:	04004ae4 	muli	r16,zero,299
 40049f8:	04004ae4 	muli	r16,zero,299
 40049fc:	04004ae4 	muli	r16,zero,299
 4004a00:	04004ae4 	muli	r16,zero,299
 4004a04:	04004ae4 	muli	r16,zero,299
 4004a08:	04004ae4 	muli	r16,zero,299
 4004a0c:	04004ae4 	muli	r16,zero,299
 4004a10:	04004ae4 	muli	r16,zero,299
 4004a14:	04004ae4 	muli	r16,zero,299
 4004a18:	04004ae4 	muli	r16,zero,299
 4004a1c:	04004ae4 	muli	r16,zero,299
 4004a20:	04004ae4 	muli	r16,zero,299
 4004a24:	04004ae4 	muli	r16,zero,299
 4004a28:	04004ae4 	muli	r16,zero,299
 4004a2c:	04004ae4 	muli	r16,zero,299
 4004a30:	04004ae4 	muli	r16,zero,299
 4004a34:	04004ae4 	muli	r16,zero,299
 4004a38:	04004ae4 	muli	r16,zero,299
 4004a3c:	04004ae4 	muli	r16,zero,299
 4004a40:	04004ae4 	muli	r16,zero,299
 4004a44:	04004ae4 	muli	r16,zero,299
 4004a48:	04004ae4 	muli	r16,zero,299
 4004a4c:	04004ae4 	muli	r16,zero,299
 4004a50:	04004ae4 	muli	r16,zero,299
 4004a54:	04004ae4 	muli	r16,zero,299
 4004a58:	04004ae4 	muli	r16,zero,299
 4004a5c:	04004ae4 	muli	r16,zero,299
 4004a60:	04004ae4 	muli	r16,zero,299
 4004a64:	04004ae4 	muli	r16,zero,299
 4004a68:	04004ae4 	muli	r16,zero,299
 4004a6c:	04004ae4 	muli	r16,zero,299
 4004a70:	04004ae4 	muli	r16,zero,299
 4004a74:	04004ae4 	muli	r16,zero,299
 4004a78:	04004ae4 	muli	r16,zero,299
 4004a7c:	04004ae4 	muli	r16,zero,299
 4004a80:	04004ae4 	muli	r16,zero,299
 4004a84:	04004ae4 	muli	r16,zero,299
 4004a88:	04004ae4 	muli	r16,zero,299
 4004a8c:	04004ae4 	muli	r16,zero,299
 4004a90:	04004ae4 	muli	r16,zero,299
 4004a94:	04004ae4 	muli	r16,zero,299
 4004a98:	04004acc 	andi	r16,zero,299
 4004a9c:	04004ad8 	cmpnei	r16,zero,299
        case MTC_ST_UP:  nIndex = 0; break;
 4004aa0:	e03ff515 	stw	zero,-44(fp)
 4004aa4:	00000f06 	br	4004ae4 <GUI_ShowGesture+0x18c>
        case MTC_ST_DOWN:  nIndex = 1; break;
 4004aa8:	00800044 	movi	r2,1
 4004aac:	e0bff515 	stw	r2,-44(fp)
 4004ab0:	00000c06 	br	4004ae4 <GUI_ShowGesture+0x18c>
        case MTC_ST_RIGHT:   nIndex = 2; break;
 4004ab4:	00800084 	movi	r2,2
 4004ab8:	e0bff515 	stw	r2,-44(fp)
 4004abc:	00000906 	br	4004ae4 <GUI_ShowGesture+0x18c>
        case MTC_ST_LEFT:   nIndex = 3; break;
 4004ac0:	008000c4 	movi	r2,3
 4004ac4:	e0bff515 	stw	r2,-44(fp)
 4004ac8:	00000606 	br	4004ae4 <GUI_ShowGesture+0x18c>

        case MTC_ZOOM_IN:         nIndex = 24; break;
 4004acc:	00800604 	movi	r2,24
 4004ad0:	e0bff515 	stw	r2,-44(fp)
 4004ad4:	00000306 	br	4004ae4 <GUI_ShowGesture+0x18c>
        case MTC_ZOOM_OUT:        nIndex = 25; break;
 4004ad8:	00800644 	movi	r2,25
 4004adc:	e0bff515 	stw	r2,-44(fp)
 4004ae0:	0001883a 	nop
    }

    if (nIndex  == -1)
 4004ae4:	e0bff517 	ldw	r2,-44(fp)
 4004ae8:	10bfffd8 	cmpnei	r2,r2,-1
 4004aec:	10004726 	beq	r2,zero,4004c0c <GUI_ShowGesture+0x2b4>
        return;

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;
 4004af0:	e0fff517 	ldw	r3,-44(fp)
 4004af4:	e0bffb17 	ldw	r2,-20(fp)
 4004af8:	1887383a 	mul	r3,r3,r2
 4004afc:	e0bffc17 	ldw	r2,-16(fp)
 4004b00:	1887383a 	mul	r3,r3,r2
 4004b04:	1805883a 	mov	r2,r3
 4004b08:	1085883a 	add	r2,r2,r2
 4004b0c:	10c5883a 	add	r2,r2,r3
 4004b10:	1007883a 	mov	r3,r2
 4004b14:	008100f4 	movhi	r2,1027
 4004b18:	109bfc04 	addi	r2,r2,28656
 4004b1c:	1885883a 	add	r2,r3,r2
 4004b20:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);
 4004b24:	e13ffd17 	ldw	r4,-12(fp)
 4004b28:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4004b2c:	1009883a 	mov	r4,r2
 4004b30:	e0bffe17 	ldw	r2,-8(fp)
 4004b34:	10c00117 	ldw	r3,4(r2)
 4004b38:	e0bffd17 	ldw	r2,-12(fp)
 4004b3c:	10800517 	ldw	r2,20(r2)
 4004b40:	1887383a 	mul	r3,r3,r2
 4004b44:	e0bffd17 	ldw	r2,-12(fp)
 4004b48:	10800717 	ldw	r2,28(r2)
 4004b4c:	1885383a 	mul	r2,r3,r2
 4004b50:	100b883a 	mov	r5,r2
 4004b54:	e0bffe17 	ldw	r2,-8(fp)
 4004b58:	10c00017 	ldw	r3,0(r2)
 4004b5c:	e0bffd17 	ldw	r2,-12(fp)
 4004b60:	10800717 	ldw	r2,28(r2)
 4004b64:	1885383a 	mul	r2,r3,r2
 4004b68:	2885883a 	add	r2,r5,r2
 4004b6c:	2085883a 	add	r2,r4,r2
 4004b70:	e0bffa15 	stw	r2,-24(fp)

    for(y=0;y<BmpH;y++){
 4004b74:	e03ff715 	stw	zero,-36(fp)
 4004b78:	00002006 	br	4004bfc <GUI_ShowGesture+0x2a4>
        pDes = pDesStart;
 4004b7c:	e0bffa17 	ldw	r2,-24(fp)
 4004b80:	e0bff815 	stw	r2,-32(fp)
        for(x=0;x<BmpW;x++){
 4004b84:	e03ff615 	stw	zero,-40(fp)
 4004b88:	00000d06 	br	4004bc0 <GUI_ShowGesture+0x268>
            memcpy(pDes, pSrc, 3);
 4004b8c:	018000c4 	movi	r6,3
 4004b90:	e17ff917 	ldw	r5,-28(fp)
 4004b94:	e13ff817 	ldw	r4,-32(fp)
 4004b98:	400c2dc0 	call	400c2dc <memcpy>
            pDes += 4;
 4004b9c:	e0bff817 	ldw	r2,-32(fp)
 4004ba0:	10800104 	addi	r2,r2,4
 4004ba4:	e0bff815 	stw	r2,-32(fp)
            pSrc += 3;
 4004ba8:	e0bff917 	ldw	r2,-28(fp)
 4004bac:	108000c4 	addi	r2,r2,3
 4004bb0:	e0bff915 	stw	r2,-28(fp)

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
        pDes = pDesStart;
        for(x=0;x<BmpW;x++){
 4004bb4:	e0bff617 	ldw	r2,-40(fp)
 4004bb8:	10800044 	addi	r2,r2,1
 4004bbc:	e0bff615 	stw	r2,-40(fp)
 4004bc0:	e0fff617 	ldw	r3,-40(fp)
 4004bc4:	e0bffb17 	ldw	r2,-20(fp)
 4004bc8:	18bff016 	blt	r3,r2,4004b8c <__alt_mem_epcs_flash_controller_0+0xfb003b8c>
            memcpy(pDes, pSrc, 3);
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
 4004bcc:	e0bffd17 	ldw	r2,-12(fp)
 4004bd0:	10c00517 	ldw	r3,20(r2)
 4004bd4:	e0bffd17 	ldw	r2,-12(fp)
 4004bd8:	10800717 	ldw	r2,28(r2)
 4004bdc:	1885383a 	mul	r2,r3,r2
 4004be0:	1007883a 	mov	r3,r2
 4004be4:	e0bffa17 	ldw	r2,-24(fp)
 4004be8:	10c5883a 	add	r2,r2,r3
 4004bec:	e0bffa15 	stw	r2,-24(fp)

    pSrc = (alt_u8 *)gesture_bmp.pixel_data + nIndex * BmpW * BmpH * 3;

    pDesStart = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (ptDraw->y*pReader->width*pReader->bytes_per_pixel) + (ptDraw->x*pReader->bytes_per_pixel);

    for(y=0;y<BmpH;y++){
 4004bf0:	e0bff717 	ldw	r2,-36(fp)
 4004bf4:	10800044 	addi	r2,r2,1
 4004bf8:	e0bff715 	stw	r2,-36(fp)
 4004bfc:	e0fff717 	ldw	r3,-36(fp)
 4004c00:	e0bffc17 	ldw	r2,-16(fp)
 4004c04:	18bfdd16 	blt	r3,r2,4004b7c <__alt_mem_epcs_flash_controller_0+0xfb003b7c>
 4004c08:	00000106 	br	4004c10 <GUI_ShowGesture+0x2b8>
        case MTC_ZOOM_IN:         nIndex = 24; break;
        case MTC_ZOOM_OUT:        nIndex = 25; break;
    }

    if (nIndex  == -1)
        return;
 4004c0c:	0001883a 	nop
            pDes += 4;
            pSrc += 3;
        }
        pDesStart += pReader->width*pReader->bytes_per_pixel;
    }
}
 4004c10:	e037883a 	mov	sp,fp
 4004c14:	dfc00117 	ldw	ra,4(sp)
 4004c18:	df000017 	ldw	fp,0(sp)
 4004c1c:	dec00204 	addi	sp,sp,8
 4004c20:	f800283a 	ret

04004c24 <GUI_TraceGesture>:

void GUI_TraceGesture(VIP_FRAME_READER *pReader, POINT *ptDraw, alt_u8 GestureId ){
 4004c24:	defffb04 	addi	sp,sp,-20
 4004c28:	dfc00415 	stw	ra,16(sp)
 4004c2c:	df000315 	stw	fp,12(sp)
 4004c30:	df000304 	addi	fp,sp,12
 4004c34:	e13ffd15 	stw	r4,-12(fp)
 4004c38:	e17ffe15 	stw	r5,-8(fp)
 4004c3c:	3005883a 	mov	r2,r6
 4004c40:	e0bfff05 	stb	r2,-4(fp)
      GUI_ShowGesture(pReader, ptDraw, GestureId);
 4004c44:	e0bfff03 	ldbu	r2,-4(fp)
 4004c48:	100d883a 	mov	r6,r2
 4004c4c:	e17ffe17 	ldw	r5,-8(fp)
 4004c50:	e13ffd17 	ldw	r4,-12(fp)
 4004c54:	40049580 	call	4004958 <GUI_ShowGesture>
}
 4004c58:	0001883a 	nop
 4004c5c:	e037883a 	mov	sp,fp
 4004c60:	dfc00117 	ldw	ra,4(sp)
 4004c64:	df000017 	ldw	fp,0(sp)
 4004c68:	dec00204 	addi	sp,sp,8
 4004c6c:	f800283a 	ret

04004c70 <GUI_ClearPaintArea>:

void GUI_ClearPaintArea(VIP_FRAME_READER *pReader, DESK_INFO *pDeskInfo){
 4004c70:	defff504 	addi	sp,sp,-44
 4004c74:	dfc00a15 	stw	ra,40(sp)
 4004c78:	df000915 	stw	fp,36(sp)
 4004c7c:	df000904 	addi	fp,sp,36
 4004c80:	e13ffe15 	stw	r4,-8(fp)
 4004c84:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004c88:	e0bfff17 	ldw	r2,-4(fp)
 4004c8c:	10800504 	addi	r2,r2,20
 4004c90:	100b883a 	mov	r5,r2
 4004c94:	e13ffa04 	addi	r4,fp,-24
 4004c98:	40004cc0 	call	40004cc <RectCopy>
    RectInflate(&rc, -1, -1);
 4004c9c:	01bfffc4 	movi	r6,-1
 4004ca0:	017fffc4 	movi	r5,-1
 4004ca4:	e13ffa04 	addi	r4,fp,-24
 4004ca8:	40003b40 	call	40003b4 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
 4004cac:	e0fffa17 	ldw	r3,-24(fp)
 4004cb0:	e13ffc17 	ldw	r4,-16(fp)
 4004cb4:	e17ffb17 	ldw	r5,-20(fp)
 4004cb8:	e1bffd17 	ldw	r6,-12(fp)
 4004cbc:	e0bffe17 	ldw	r2,-8(fp)
 4004cc0:	d8800215 	stw	r2,8(sp)
 4004cc4:	00800044 	movi	r2,1
 4004cc8:	d8800115 	stw	r2,4(sp)
 4004ccc:	d8000015 	stw	zero,0(sp)
 4004cd0:	300f883a 	mov	r7,r6
 4004cd4:	280d883a 	mov	r6,r5
 4004cd8:	200b883a 	mov	r5,r4
 4004cdc:	1809883a 	mov	r4,r3
 4004ce0:	4000edc0 	call	4000edc <vid_draw_box>
    //
    RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
 4004ce4:	e0bfff17 	ldw	r2,-4(fp)
 4004ce8:	10800904 	addi	r2,r2,36
 4004cec:	100b883a 	mov	r5,r2
 4004cf0:	e13ffa04 	addi	r4,fp,-24
 4004cf4:	40004cc0 	call	40004cc <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pReader);
 4004cf8:	e0fffa17 	ldw	r3,-24(fp)
 4004cfc:	e13ffc17 	ldw	r4,-16(fp)
 4004d00:	e17ffb17 	ldw	r5,-20(fp)
 4004d04:	e1bffd17 	ldw	r6,-12(fp)
 4004d08:	e0bffe17 	ldw	r2,-8(fp)
 4004d0c:	d8800215 	stw	r2,8(sp)
 4004d10:	00800044 	movi	r2,1
 4004d14:	d8800115 	stw	r2,4(sp)
 4004d18:	d8000015 	stw	zero,0(sp)
 4004d1c:	300f883a 	mov	r7,r6
 4004d20:	280d883a 	mov	r6,r5
 4004d24:	200b883a 	mov	r5,r4
 4004d28:	1809883a 	mov	r4,r3
 4004d2c:	4000edc0 	call	4000edc <vid_draw_box>
}
 4004d30:	0001883a 	nop
 4004d34:	e037883a 	mov	sp,fp
 4004d38:	dfc00117 	ldw	ra,4(sp)
 4004d3c:	df000017 	ldw	fp,0(sp)
 4004d40:	dec00204 	addi	sp,sp,8
 4004d44:	f800283a 	ret

04004d48 <GUI>:

void GUI(MTC2_INFO *pTouch){
 4004d48:	deff9504 	addi	sp,sp,-428
 4004d4c:	dfc06a15 	stw	ra,424(sp)
 4004d50:	df006915 	stw	fp,420(sp)
 4004d54:	df006904 	addi	fp,sp,420
 4004d58:	e13fff15 	stw	r4,-4(fp)
    // video
    DESK_INFO DeskInfo;
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5 ;
    POINT Pt1, Pt2, Pt3, Pt4, Pt5, ptGesture;
    alt_u8 Event, TouchNum, LedMask = 0x01;
 4004d5c:	00800044 	movi	r2,1
 4004d60:	e0bfa005 	stb	r2,-384(fp)
    const int nDotSize = DOT_SIZE;
 4004d64:	00800184 	movi	r2,6
 4004d68:	e0bfa715 	stw	r2,-356(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
 4004d6c:	00807804 	movi	r2,480
 4004d70:	d8800015 	stw	r2,0(sp)
 4004d74:	01c0c804 	movi	r7,800
 4004d78:	01818034 	movhi	r6,1536
 4004d7c:	01418034 	movhi	r5,1536
 4004d80:	01024034 	movhi	r4,2304
 4004d84:	21080004 	addi	r4,r4,8192
 4004d88:	4008a340 	call	4008a34 <VIPFR_Init>
 4004d8c:	e0bfa815 	stw	r2,-352(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
 4004d90:	01400044 	movi	r5,1
 4004d94:	e13fa817 	ldw	r4,-352(fp)
 4004d98:	4008c5c0 	call	4008c5c <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
 4004d9c:	000b883a 	mov	r5,zero
 4004da0:	e13fa817 	ldw	r4,-352(fp)
 4004da4:	40006980 	call	4000698 <vid_clean_screen>
    
   
    GUI_DeskInit(pReader, &DeskInfo);
 4004da8:	e0bfae04 	addi	r2,fp,-328
 4004dac:	100b883a 	mov	r5,r2
 4004db0:	e13fa817 	ldw	r4,-352(fp)
 4004db4:	40041580 	call	4004158 <GUI_DeskInit>
    GUI_DeskDraw(pReader, &DeskInfo);
 4004db8:	e0bfae04 	addi	r2,fp,-328
 4004dbc:	100b883a 	mov	r5,r2
 4004dc0:	e13fa817 	ldw	r4,-352(fp)
 4004dc4:	40043c80 	call	40043c8 <GUI_DeskDraw>
    
    VIPFR_ActiveDrawFrame(pReader);
 4004dc8:	e13fa817 	ldw	r4,-352(fp)
 4004dcc:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 4004dd0:	e0bfae04 	addi	r2,fp,-328
 4004dd4:	10c00504 	addi	r3,r2,20
 4004dd8:	e0bffb04 	addi	r2,fp,-20
 4004ddc:	180b883a 	mov	r5,r3
 4004de0:	1009883a 	mov	r4,r2
 4004de4:	40004cc0 	call	40004cc <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 4004de8:	00ffff84 	movi	r3,-2
 4004dec:	e0bfa717 	ldw	r2,-356(fp)
 4004df0:	1889c83a 	sub	r4,r3,r2
 4004df4:	00ffff84 	movi	r3,-2
 4004df8:	e0bfa717 	ldw	r2,-356(fp)
 4004dfc:	1887c83a 	sub	r3,r3,r2
 4004e00:	e0bffb04 	addi	r2,fp,-20
 4004e04:	180d883a 	mov	r6,r3
 4004e08:	200b883a 	mov	r5,r4
 4004e0c:	1009883a 	mov	r4,r2
 4004e10:	40003b40 	call	40003b4 <RectInflate>
    
    ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
 4004e14:	e0bfae17 	ldw	r2,-328(fp)
 4004e18:	10800524 	muli	r2,r2,20
 4004e1c:	e0ffa004 	addi	r3,fp,-384
 4004e20:	1885883a 	add	r2,r3,r2
 4004e24:	10801b04 	addi	r2,r2,108
 4004e28:	10800017 	ldw	r2,0(r2)
 4004e2c:	e0bfa115 	stw	r2,-380(fp)
    ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
 4004e30:	e0bfaf17 	ldw	r2,-324(fp)
 4004e34:	10800524 	muli	r2,r2,20
 4004e38:	e0ffa004 	addi	r3,fp,-384
 4004e3c:	1885883a 	add	r2,r3,r2
 4004e40:	10801b04 	addi	r2,r2,108
 4004e44:	10800017 	ldw	r2,0(r2)
 4004e48:	e0bfa215 	stw	r2,-376(fp)
    ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
 4004e4c:	e0bfb017 	ldw	r2,-320(fp)
 4004e50:	10800524 	muli	r2,r2,20
 4004e54:	e0ffa004 	addi	r3,fp,-384
 4004e58:	1885883a 	add	r2,r3,r2
 4004e5c:	10801b04 	addi	r2,r2,108
 4004e60:	10800017 	ldw	r2,0(r2)
 4004e64:	e0bfa315 	stw	r2,-372(fp)
    ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
 4004e68:	e0bfb117 	ldw	r2,-316(fp)
 4004e6c:	10800524 	muli	r2,r2,20
 4004e70:	e0ffa004 	addi	r3,fp,-384
 4004e74:	1885883a 	add	r2,r3,r2
 4004e78:	10801b04 	addi	r2,r2,108
 4004e7c:	10800017 	ldw	r2,0(r2)
 4004e80:	e0bfa415 	stw	r2,-368(fp)
    ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
 4004e84:	e0bfb217 	ldw	r2,-312(fp)
 4004e88:	10800524 	muli	r2,r2,20
 4004e8c:	e0ffa004 	addi	r3,fp,-384
 4004e90:	1885883a 	add	r2,r3,r2
 4004e94:	10801b04 	addi	r2,r2,108
 4004e98:	10800017 	ldw	r2,0(r2)
 4004e9c:	e0bfa515 	stw	r2,-364(fp)
    
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
    PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);
 4004ea0:	e0bfb717 	ldw	r2,-292(fp)
 4004ea4:	10c00144 	addi	r3,r2,5
 4004ea8:	e0bfb917 	ldw	r2,-284(fp)
 4004eac:	11000144 	addi	r4,r2,5
 4004eb0:	e0bff804 	addi	r2,fp,-32
 4004eb4:	200d883a 	mov	r6,r4
 4004eb8:	180b883a 	mov	r5,r3
 4004ebc:	1009883a 	mov	r4,r2
 4004ec0:	40003100 	call	4000310 <PtSet>
    
    while(1)
    {
        // touch
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4004ec4:	e17fe404 	addi	r5,fp,-112
 4004ec8:	e13ffa44 	addi	r4,fp,-23
 4004ecc:	e0fffa04 	addi	r3,fp,-24
 4004ed0:	e0bfed04 	addi	r2,fp,-76
 4004ed4:	d8800815 	stw	r2,32(sp)
 4004ed8:	e0bfec04 	addi	r2,fp,-80
 4004edc:	d8800715 	stw	r2,28(sp)
 4004ee0:	e0bfeb04 	addi	r2,fp,-84
 4004ee4:	d8800615 	stw	r2,24(sp)
 4004ee8:	e0bfea04 	addi	r2,fp,-88
 4004eec:	d8800515 	stw	r2,20(sp)
 4004ef0:	e0bfe904 	addi	r2,fp,-92
 4004ef4:	d8800415 	stw	r2,16(sp)
 4004ef8:	e0bfe804 	addi	r2,fp,-96
 4004efc:	d8800315 	stw	r2,12(sp)
 4004f00:	e0bfe704 	addi	r2,fp,-100
 4004f04:	d8800215 	stw	r2,8(sp)
 4004f08:	e0bfe604 	addi	r2,fp,-104
 4004f0c:	d8800115 	stw	r2,4(sp)
 4004f10:	e0bfe504 	addi	r2,fp,-108
 4004f14:	d8800015 	stw	r2,0(sp)
 4004f18:	280f883a 	mov	r7,r5
 4004f1c:	200d883a 	mov	r6,r4
 4004f20:	180b883a 	mov	r5,r3
 4004f24:	e13fff17 	ldw	r4,-4(fp)
 4004f28:	40085f80 	call	40085f8 <MTC2_GetStatus>
 4004f2c:	103fe526 	beq	r2,zero,4004ec4 <__alt_mem_epcs_flash_controller_0+0xfb003ec4>
            IOWR(LED_BASE, 0x00, LedMask);
 4004f30:	e0ffa003 	ldbu	r3,-384(fp)
 4004f34:	00820034 	movhi	r2,2048
 4004f38:	10801004 	addi	r2,r2,64
 4004f3c:	10c00035 	stwio	r3,0(r2)
            LedMask <<= 1;
 4004f40:	e0bfa003 	ldbu	r2,-384(fp)
 4004f44:	1085883a 	add	r2,r2,r2
 4004f48:	e0bfa005 	stb	r2,-384(fp)
            if (LedMask == 0x00)
 4004f4c:	e0bfa003 	ldbu	r2,-384(fp)
 4004f50:	1000021e 	bne	r2,zero,4004f5c <GUI+0x214>
                LedMask = 0x01;
 4004f54:	00800044 	movi	r2,1
 4004f58:	e0bfa005 	stb	r2,-384(fp)

           GUI_TraceGesture(pReader, &ptGesture, Event);
 4004f5c:	e0bffa03 	ldbu	r2,-24(fp)
 4004f60:	10c03fcc 	andi	r3,r2,255
 4004f64:	e0bff804 	addi	r2,fp,-32
 4004f68:	180d883a 	mov	r6,r3
 4004f6c:	100b883a 	mov	r5,r2
 4004f70:	e13fa817 	ldw	r4,-352(fp)
 4004f74:	4004c240 	call	4004c24 <GUI_TraceGesture>
           printf(".");
 4004f78:	01000b84 	movi	r4,46
 4004f7c:	400c5c00 	call	400c5c0 <putchar>
            switch(TouchNum)
 4004f80:	e0bffa43 	ldbu	r2,-23(fp)
 4004f84:	10803fcc 	andi	r2,r2,255
 4004f88:	10c001a8 	cmpgeui	r3,r2,6
 4004f8c:	1800301e 	bne	r3,zero,4005050 <GUI+0x308>
 4004f90:	100690ba 	slli	r3,r2,2
 4004f94:	00810034 	movhi	r2,1024
 4004f98:	1093ea04 	addi	r2,r2,20392
 4004f9c:	1885883a 	add	r2,r3,r2
 4004fa0:	10800017 	ldw	r2,0(r2)
 4004fa4:	1000683a 	jmp	r2
 4004fa8:	04005050 	cmplti	r16,zero,321
 4004fac:	04005030 	cmpltui	r16,zero,320
 4004fb0:	04005014 	movui	r16,320
 4004fb4:	04004ff8 	rdprs	r16,zero,319
 4004fb8:	04004fdc 	xori	r16,zero,319
 4004fbc:	04004fc0 	call	4004fc <__alt_mem_sdram-0x3bffb04>
            {
            case 5 :
            	PtSet(&Pt5, X5, Y5);
 4004fc0:	e0ffec17 	ldw	r3,-80(fp)
 4004fc4:	e13fed17 	ldw	r4,-76(fp)
 4004fc8:	e0bff604 	addi	r2,fp,-40
 4004fcc:	200d883a 	mov	r6,r4
 4004fd0:	180b883a 	mov	r5,r3
 4004fd4:	1009883a 	mov	r4,r2
 4004fd8:	40003100 	call	4000310 <PtSet>
            case 4 :
            	PtSet(&Pt4, X4, Y4);
 4004fdc:	e0ffea17 	ldw	r3,-88(fp)
 4004fe0:	e13feb17 	ldw	r4,-84(fp)
 4004fe4:	e0bff404 	addi	r2,fp,-48
 4004fe8:	200d883a 	mov	r6,r4
 4004fec:	180b883a 	mov	r5,r3
 4004ff0:	1009883a 	mov	r4,r2
 4004ff4:	40003100 	call	4000310 <PtSet>
            case 3:
            	PtSet(&Pt3, X3, Y3);
 4004ff8:	e0ffe817 	ldw	r3,-96(fp)
 4004ffc:	e13fe917 	ldw	r4,-92(fp)
 4005000:	e0bff204 	addi	r2,fp,-56
 4005004:	200d883a 	mov	r6,r4
 4005008:	180b883a 	mov	r5,r3
 400500c:	1009883a 	mov	r4,r2
 4005010:	40003100 	call	4000310 <PtSet>
            case 2:
            	PtSet(&Pt2, X2, Y2);
 4005014:	e0ffe617 	ldw	r3,-104(fp)
 4005018:	e13fe717 	ldw	r4,-100(fp)
 400501c:	e0bff004 	addi	r2,fp,-64
 4005020:	200d883a 	mov	r6,r4
 4005024:	180b883a 	mov	r5,r3
 4005028:	1009883a 	mov	r4,r2
 400502c:	40003100 	call	4000310 <PtSet>
            case 1:
            	PtSet(&Pt1, X1, Y1); break;
 4005030:	e0ffe417 	ldw	r3,-112(fp)
 4005034:	e13fe517 	ldw	r4,-108(fp)
 4005038:	e0bfee04 	addi	r2,fp,-72
 400503c:	200d883a 	mov	r6,r4
 4005040:	180b883a 	mov	r5,r3
 4005044:	1009883a 	mov	r4,r2
 4005048:	40003100 	call	4000310 <PtSet>
 400504c:	00000106 	br	4005054 <GUI+0x30c>
            default:break;
 4005050:	0001883a 	nop
            }

            if (TouchNum >= 1 && IsPtInRect(&Pt1, &rcTouch)){
 4005054:	e0bffa43 	ldbu	r2,-23(fp)
 4005058:	10803fcc 	andi	r2,r2,255
 400505c:	10006826 	beq	r2,zero,4005200 <GUI+0x4b8>
 4005060:	e0fffb04 	addi	r3,fp,-20
 4005064:	e0bfee04 	addi	r2,fp,-72
 4005068:	180b883a 	mov	r5,r3
 400506c:	1009883a 	mov	r4,r2
 4005070:	400028c0 	call	400028c <IsPtInRect>
 4005074:	10006226 	beq	r2,zero,4005200 <GUI+0x4b8>
                    }
                }else{
                    printf("invalid pt1(%d,%d) pre(%d,%d)\r\n", Pt1.x, Pt1.y, LastPt1.x, LastPt1.y);
                }
#else
                vid_draw_circle(Pt1.x, Pt1.y, nDotSize, ColorPen0, DO_FILL, pReader);
 4005078:	e0ffee17 	ldw	r3,-72(fp)
 400507c:	e13fef17 	ldw	r4,-68(fp)
 4005080:	e0bfa817 	ldw	r2,-352(fp)
 4005084:	d8800115 	stw	r2,4(sp)
 4005088:	00800044 	movi	r2,1
 400508c:	d8800015 	stw	r2,0(sp)
 4005090:	e1ffa117 	ldw	r7,-380(fp)
 4005094:	e1bfa717 	ldw	r6,-356(fp)
 4005098:	200b883a 	mov	r5,r4
 400509c:	1809883a 	mov	r4,r3
 40050a0:	4001ebc0 	call	4001ebc <vid_draw_circle>
                if (TouchNum >= 2 && IsPtInRect(&Pt2, &rcTouch))
 40050a4:	e0bffa43 	ldbu	r2,-23(fp)
 40050a8:	10803fcc 	andi	r2,r2,255
 40050ac:	108000b0 	cmpltui	r2,r2,2
 40050b0:	1000111e 	bne	r2,zero,40050f8 <GUI+0x3b0>
 40050b4:	e0fffb04 	addi	r3,fp,-20
 40050b8:	e0bff004 	addi	r2,fp,-64
 40050bc:	180b883a 	mov	r5,r3
 40050c0:	1009883a 	mov	r4,r2
 40050c4:	400028c0 	call	400028c <IsPtInRect>
 40050c8:	10000b26 	beq	r2,zero,40050f8 <GUI+0x3b0>
                    vid_draw_circle(Pt2.x, Pt2.y, nDotSize, ColorPen1, DO_FILL, pReader);
 40050cc:	e0fff017 	ldw	r3,-64(fp)
 40050d0:	e13ff117 	ldw	r4,-60(fp)
 40050d4:	e0bfa817 	ldw	r2,-352(fp)
 40050d8:	d8800115 	stw	r2,4(sp)
 40050dc:	00800044 	movi	r2,1
 40050e0:	d8800015 	stw	r2,0(sp)
 40050e4:	e1ffa217 	ldw	r7,-376(fp)
 40050e8:	e1bfa717 	ldw	r6,-356(fp)
 40050ec:	200b883a 	mov	r5,r4
 40050f0:	1809883a 	mov	r4,r3
 40050f4:	4001ebc0 	call	4001ebc <vid_draw_circle>
                if (TouchNum >= 3 && IsPtInRect(&Pt3, &rcTouch))
 40050f8:	e0bffa43 	ldbu	r2,-23(fp)
 40050fc:	10803fcc 	andi	r2,r2,255
 4005100:	108000f0 	cmpltui	r2,r2,3
 4005104:	1000111e 	bne	r2,zero,400514c <GUI+0x404>
 4005108:	e0fffb04 	addi	r3,fp,-20
 400510c:	e0bff204 	addi	r2,fp,-56
 4005110:	180b883a 	mov	r5,r3
 4005114:	1009883a 	mov	r4,r2
 4005118:	400028c0 	call	400028c <IsPtInRect>
 400511c:	10000b26 	beq	r2,zero,400514c <GUI+0x404>
                    vid_draw_circle(Pt3.x, Pt3.y, nDotSize, ColorPen2, DO_FILL, pReader);
 4005120:	e0fff217 	ldw	r3,-56(fp)
 4005124:	e13ff317 	ldw	r4,-52(fp)
 4005128:	e0bfa817 	ldw	r2,-352(fp)
 400512c:	d8800115 	stw	r2,4(sp)
 4005130:	00800044 	movi	r2,1
 4005134:	d8800015 	stw	r2,0(sp)
 4005138:	e1ffa317 	ldw	r7,-372(fp)
 400513c:	e1bfa717 	ldw	r6,-356(fp)
 4005140:	200b883a 	mov	r5,r4
 4005144:	1809883a 	mov	r4,r3
 4005148:	4001ebc0 	call	4001ebc <vid_draw_circle>
                if (TouchNum >= 4 && IsPtInRect(&Pt4, &rcTouch))
 400514c:	e0bffa43 	ldbu	r2,-23(fp)
 4005150:	10803fcc 	andi	r2,r2,255
 4005154:	10800130 	cmpltui	r2,r2,4
 4005158:	1000111e 	bne	r2,zero,40051a0 <GUI+0x458>
 400515c:	e0fffb04 	addi	r3,fp,-20
 4005160:	e0bff404 	addi	r2,fp,-48
 4005164:	180b883a 	mov	r5,r3
 4005168:	1009883a 	mov	r4,r2
 400516c:	400028c0 	call	400028c <IsPtInRect>
 4005170:	10000b26 	beq	r2,zero,40051a0 <GUI+0x458>
                    vid_draw_circle(Pt4.x, Pt4.y, nDotSize, ColorPen3, DO_FILL, pReader);
 4005174:	e0fff417 	ldw	r3,-48(fp)
 4005178:	e13ff517 	ldw	r4,-44(fp)
 400517c:	e0bfa817 	ldw	r2,-352(fp)
 4005180:	d8800115 	stw	r2,4(sp)
 4005184:	00800044 	movi	r2,1
 4005188:	d8800015 	stw	r2,0(sp)
 400518c:	e1ffa417 	ldw	r7,-368(fp)
 4005190:	e1bfa717 	ldw	r6,-356(fp)
 4005194:	200b883a 	mov	r5,r4
 4005198:	1809883a 	mov	r4,r3
 400519c:	4001ebc0 	call	4001ebc <vid_draw_circle>
                if (TouchNum >= 5 && IsPtInRect(&Pt5, &rcTouch))
 40051a0:	e0bffa43 	ldbu	r2,-23(fp)
 40051a4:	10803fcc 	andi	r2,r2,255
 40051a8:	10800170 	cmpltui	r2,r2,5
 40051ac:	1000111e 	bne	r2,zero,40051f4 <GUI+0x4ac>
 40051b0:	e0fffb04 	addi	r3,fp,-20
 40051b4:	e0bff604 	addi	r2,fp,-40
 40051b8:	180b883a 	mov	r5,r3
 40051bc:	1009883a 	mov	r4,r2
 40051c0:	400028c0 	call	400028c <IsPtInRect>
 40051c4:	10000b26 	beq	r2,zero,40051f4 <GUI+0x4ac>
                     vid_draw_circle(Pt5.x, Pt5.y, nDotSize, ColorPen4, DO_FILL, pReader);
 40051c8:	e0fff617 	ldw	r3,-40(fp)
 40051cc:	e13ff717 	ldw	r4,-36(fp)
 40051d0:	e0bfa817 	ldw	r2,-352(fp)
 40051d4:	d8800115 	stw	r2,4(sp)
 40051d8:	00800044 	movi	r2,1
 40051dc:	d8800015 	stw	r2,0(sp)
 40051e0:	e1ffa517 	ldw	r7,-364(fp)
 40051e4:	e1bfa717 	ldw	r6,-356(fp)
 40051e8:	200b883a 	mov	r5,r4
 40051ec:	1809883a 	mov	r4,r3
 40051f0:	4001ebc0 	call	4001ebc <vid_draw_circle>
#endif
//            }else if (Event == MTC_ST_DOUBLECLICK || (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR)){
                VIPFR_ActiveDrawFrame(pReader);
 40051f4:	e13fa817 	ldw	r4,-352(fp)
 40051f8:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
 40051fc:	0000ed06 	br	40055b4 <GUI+0x86c>
            }else if (TouchNum == 1 && GUI_CheckButton(&DeskInfo, &Pt1) == BTN_CLEAR){
 4005200:	e0bffa43 	ldbu	r2,-23(fp)
 4005204:	10803fcc 	andi	r2,r2,255
 4005208:	10800058 	cmpnei	r2,r2,1
 400520c:	1000101e 	bne	r2,zero,4005250 <GUI+0x508>
 4005210:	e0ffee04 	addi	r3,fp,-72
 4005214:	e0bfae04 	addi	r2,fp,-328
 4005218:	180b883a 	mov	r5,r3
 400521c:	1009883a 	mov	r4,r2
 4005220:	40043380 	call	4004338 <GUI_CheckButton>
 4005224:	10800058 	cmpnei	r2,r2,1
 4005228:	1000091e 	bne	r2,zero,4005250 <GUI+0x508>
                GUI_ClearPaintArea(pReader, &DeskInfo);
 400522c:	e0bfae04 	addi	r2,fp,-328
 4005230:	100b883a 	mov	r5,r2
 4005234:	e13fa817 	ldw	r4,-352(fp)
 4005238:	4004c700 	call	4004c70 <GUI_ClearPaintArea>
                //vid_clean_screen(pReader, BLACK_24);
                //GUI_DeskDraw(pReader, &DeskInfo);
                VIPFR_ActiveDrawFrame(pReader);
 400523c:	e13fa817 	ldw	r4,-352(fp)
 4005240:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
                MTC2_ClearEvent(pTouch);
 4005244:	e13fff17 	ldw	r4,-4(fp)
 4005248:	40087580 	call	4008758 <MTC2_ClearEvent>
 400524c:	0000d906 	br	40055b4 <GUI+0x86c>
            }else if (TouchNum >= 1){
 4005250:	e0bffa43 	ldbu	r2,-23(fp)
 4005254:	10803fcc 	andi	r2,r2,255
 4005258:	103f1a26 	beq	r2,zero,4004ec4 <__alt_mem_epcs_flash_controller_0+0xfb003ec4>
                ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
 400525c:	e0ffee04 	addi	r3,fp,-72
 4005260:	e0bfae04 	addi	r2,fp,-328
 4005264:	180b883a 	mov	r5,r3
 4005268:	1009883a 	mov	r4,r2
 400526c:	40043380 	call	4004338 <GUI_CheckButton>
 4005270:	e0bfa915 	stw	r2,-348(fp)
                UpdatePalette = FALSE;
 4005274:	e03fa615 	stw	zero,-360(fp)
                switch(TouchNum)
 4005278:	e0bffa43 	ldbu	r2,-23(fp)
 400527c:	10803fcc 	andi	r2,r2,255
 4005280:	10c001a8 	cmpgeui	r3,r2,6
 4005284:	18009b1e 	bne	r3,zero,40054f4 <GUI+0x7ac>
 4005288:	100690ba 	slli	r3,r2,2
 400528c:	00810034 	movhi	r2,1024
 4005290:	1094a804 	addi	r2,r2,21152
 4005294:	1885883a 	add	r2,r3,r2
 4005298:	10800017 	ldw	r2,0(r2)
 400529c:	1000683a 	jmp	r2
 40052a0:	040054f4 	movhi	r16,339
 40052a4:	04005478 	rdprs	r16,zero,337
 40052a8:	04005408 	cmpgei	r16,zero,336
 40052ac:	04005398 	cmpnei	r16,zero,334
 40052b0:	04005328 	cmpgeui	r16,zero,332
 40052b4:	040052b8 	rdprs	r16,zero,330
                {
                	case 5:
					{
						ButtonId5 = GUI_CheckButton(&DeskInfo, &Pt5);
 40052b8:	e0fff604 	addi	r3,fp,-40
 40052bc:	e0bfae04 	addi	r2,fp,-328
 40052c0:	180b883a 	mov	r5,r3
 40052c4:	1009883a 	mov	r4,r2
 40052c8:	40043380 	call	4004338 <GUI_CheckButton>
 40052cc:	e0bfaa15 	stw	r2,-344(fp)
						if(ButtonId5 != BTN_NONE && ButtonId5 != BTN_CLEAR && ButtonId5 != BTN_GESTRUE &&ButtonId5 != DeskInfo.Paint0_Index  &&  ButtonId5 != DeskInfo.Paint1_Index&&  ButtonId5 != DeskInfo.Paint2_Index && ButtonId5 != DeskInfo.Paint3_Index)
 40052d0:	e0bfaa17 	ldw	r2,-344(fp)
 40052d4:	108002a0 	cmpeqi	r2,r2,10
 40052d8:	1000131e 	bne	r2,zero,4005328 <GUI+0x5e0>
 40052dc:	e0bfaa17 	ldw	r2,-344(fp)
 40052e0:	10800060 	cmpeqi	r2,r2,1
 40052e4:	1000101e 	bne	r2,zero,4005328 <GUI+0x5e0>
 40052e8:	e0bfaa17 	ldw	r2,-344(fp)
 40052ec:	10000e26 	beq	r2,zero,4005328 <GUI+0x5e0>
 40052f0:	e0ffae17 	ldw	r3,-328(fp)
 40052f4:	e0bfaa17 	ldw	r2,-344(fp)
 40052f8:	18800b26 	beq	r3,r2,4005328 <GUI+0x5e0>
 40052fc:	e0ffaf17 	ldw	r3,-324(fp)
 4005300:	e0bfaa17 	ldw	r2,-344(fp)
 4005304:	18800826 	beq	r3,r2,4005328 <GUI+0x5e0>
 4005308:	e0ffb017 	ldw	r3,-320(fp)
 400530c:	e0bfaa17 	ldw	r2,-344(fp)
 4005310:	18800526 	beq	r3,r2,4005328 <GUI+0x5e0>
 4005314:	e0ffb117 	ldw	r3,-316(fp)
 4005318:	e0bfaa17 	ldw	r2,-344(fp)
 400531c:	18800226 	beq	r3,r2,4005328 <GUI+0x5e0>
						DeskInfo.Paint4_Index = ButtonId5;
 4005320:	e0bfaa17 	ldw	r2,-344(fp)
 4005324:	e0bfb215 	stw	r2,-312(fp)
					}
                	case 4:
                	{
                		ButtonId4 = GUI_CheckButton(&DeskInfo, &Pt4);
 4005328:	e0fff404 	addi	r3,fp,-48
 400532c:	e0bfae04 	addi	r2,fp,-328
 4005330:	180b883a 	mov	r5,r3
 4005334:	1009883a 	mov	r4,r2
 4005338:	40043380 	call	4004338 <GUI_CheckButton>
 400533c:	e0bfab15 	stw	r2,-340(fp)
                		if(ButtonId4 != BTN_NONE && ButtonId4 != BTN_CLEAR && ButtonId4 != BTN_GESTRUE &&ButtonId4 != DeskInfo.Paint0_Index  &&  ButtonId4 != DeskInfo.Paint1_Index&&  ButtonId4 != DeskInfo.Paint2_Index && ButtonId4 != DeskInfo.Paint4_Index)
 4005340:	e0bfab17 	ldw	r2,-340(fp)
 4005344:	108002a0 	cmpeqi	r2,r2,10
 4005348:	1000131e 	bne	r2,zero,4005398 <GUI+0x650>
 400534c:	e0bfab17 	ldw	r2,-340(fp)
 4005350:	10800060 	cmpeqi	r2,r2,1
 4005354:	1000101e 	bne	r2,zero,4005398 <GUI+0x650>
 4005358:	e0bfab17 	ldw	r2,-340(fp)
 400535c:	10000e26 	beq	r2,zero,4005398 <GUI+0x650>
 4005360:	e0ffae17 	ldw	r3,-328(fp)
 4005364:	e0bfab17 	ldw	r2,-340(fp)
 4005368:	18800b26 	beq	r3,r2,4005398 <GUI+0x650>
 400536c:	e0ffaf17 	ldw	r3,-324(fp)
 4005370:	e0bfab17 	ldw	r2,-340(fp)
 4005374:	18800826 	beq	r3,r2,4005398 <GUI+0x650>
 4005378:	e0ffb017 	ldw	r3,-320(fp)
 400537c:	e0bfab17 	ldw	r2,-340(fp)
 4005380:	18800526 	beq	r3,r2,4005398 <GUI+0x650>
 4005384:	e0ffb217 	ldw	r3,-312(fp)
 4005388:	e0bfab17 	ldw	r2,-340(fp)
 400538c:	18800226 	beq	r3,r2,4005398 <GUI+0x650>
                		DeskInfo.Paint3_Index = ButtonId4;
 4005390:	e0bfab17 	ldw	r2,-340(fp)
 4005394:	e0bfb115 	stw	r2,-316(fp)
                	}
                	case 3:
                	{
                		ButtonId3 = GUI_CheckButton(&DeskInfo, &Pt3);
 4005398:	e0fff204 	addi	r3,fp,-56
 400539c:	e0bfae04 	addi	r2,fp,-328
 40053a0:	180b883a 	mov	r5,r3
 40053a4:	1009883a 	mov	r4,r2
 40053a8:	40043380 	call	4004338 <GUI_CheckButton>
 40053ac:	e0bfac15 	stw	r2,-336(fp)
                		 if(ButtonId3 != BTN_NONE && ButtonId3 != BTN_CLEAR && ButtonId3 != BTN_GESTRUE && ButtonId3 != DeskInfo.Paint4_Index && ButtonId3 != DeskInfo.Paint3_Index &&ButtonId3 != DeskInfo.Paint0_Index  &&  ButtonId3 != DeskInfo.Paint1_Index)
 40053b0:	e0bfac17 	ldw	r2,-336(fp)
 40053b4:	108002a0 	cmpeqi	r2,r2,10
 40053b8:	1000131e 	bne	r2,zero,4005408 <GUI+0x6c0>
 40053bc:	e0bfac17 	ldw	r2,-336(fp)
 40053c0:	10800060 	cmpeqi	r2,r2,1
 40053c4:	1000101e 	bne	r2,zero,4005408 <GUI+0x6c0>
 40053c8:	e0bfac17 	ldw	r2,-336(fp)
 40053cc:	10000e26 	beq	r2,zero,4005408 <GUI+0x6c0>
 40053d0:	e0ffb217 	ldw	r3,-312(fp)
 40053d4:	e0bfac17 	ldw	r2,-336(fp)
 40053d8:	18800b26 	beq	r3,r2,4005408 <GUI+0x6c0>
 40053dc:	e0ffb117 	ldw	r3,-316(fp)
 40053e0:	e0bfac17 	ldw	r2,-336(fp)
 40053e4:	18800826 	beq	r3,r2,4005408 <GUI+0x6c0>
 40053e8:	e0ffae17 	ldw	r3,-328(fp)
 40053ec:	e0bfac17 	ldw	r2,-336(fp)
 40053f0:	18800526 	beq	r3,r2,4005408 <GUI+0x6c0>
 40053f4:	e0ffaf17 	ldw	r3,-324(fp)
 40053f8:	e0bfac17 	ldw	r2,-336(fp)
 40053fc:	18800226 	beq	r3,r2,4005408 <GUI+0x6c0>
                		DeskInfo.Paint2_Index = ButtonId3;
 4005400:	e0bfac17 	ldw	r2,-336(fp)
 4005404:	e0bfb015 	stw	r2,-320(fp)
                	}
                	case 2:
					{
						ButtonId2 = GUI_CheckButton(&DeskInfo, &Pt2);
 4005408:	e0fff004 	addi	r3,fp,-64
 400540c:	e0bfae04 	addi	r2,fp,-328
 4005410:	180b883a 	mov	r5,r3
 4005414:	1009883a 	mov	r4,r2
 4005418:	40043380 	call	4004338 <GUI_CheckButton>
 400541c:	e0bfad15 	stw	r2,-332(fp)
					   if(ButtonId2 != BTN_NONE && ButtonId2 != BTN_CLEAR && ButtonId2 != BTN_GESTRUE && ButtonId2 != DeskInfo.Paint4_Index && ButtonId2 != DeskInfo.Paint3_Index && ButtonId2 != DeskInfo.Paint2_Index &&ButtonId2 != DeskInfo.Paint0_Index )
 4005420:	e0bfad17 	ldw	r2,-332(fp)
 4005424:	108002a0 	cmpeqi	r2,r2,10
 4005428:	1000131e 	bne	r2,zero,4005478 <GUI+0x730>
 400542c:	e0bfad17 	ldw	r2,-332(fp)
 4005430:	10800060 	cmpeqi	r2,r2,1
 4005434:	1000101e 	bne	r2,zero,4005478 <GUI+0x730>
 4005438:	e0bfad17 	ldw	r2,-332(fp)
 400543c:	10000e26 	beq	r2,zero,4005478 <GUI+0x730>
 4005440:	e0ffb217 	ldw	r3,-312(fp)
 4005444:	e0bfad17 	ldw	r2,-332(fp)
 4005448:	18800b26 	beq	r3,r2,4005478 <GUI+0x730>
 400544c:	e0ffb117 	ldw	r3,-316(fp)
 4005450:	e0bfad17 	ldw	r2,-332(fp)
 4005454:	18800826 	beq	r3,r2,4005478 <GUI+0x730>
 4005458:	e0ffb017 	ldw	r3,-320(fp)
 400545c:	e0bfad17 	ldw	r2,-332(fp)
 4005460:	18800526 	beq	r3,r2,4005478 <GUI+0x730>
 4005464:	e0ffae17 	ldw	r3,-328(fp)
 4005468:	e0bfad17 	ldw	r2,-332(fp)
 400546c:	18800226 	beq	r3,r2,4005478 <GUI+0x730>
						DeskInfo.Paint1_Index = ButtonId2;
 4005470:	e0bfad17 	ldw	r2,-332(fp)
 4005474:	e0bfaf15 	stw	r2,-324(fp)
					}
                	case 1:
					{
						ButtonId = GUI_CheckButton(&DeskInfo, &Pt1);
 4005478:	e0ffee04 	addi	r3,fp,-72
 400547c:	e0bfae04 	addi	r2,fp,-328
 4005480:	180b883a 	mov	r5,r3
 4005484:	1009883a 	mov	r4,r2
 4005488:	40043380 	call	4004338 <GUI_CheckButton>
 400548c:	e0bfa915 	stw	r2,-348(fp)
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
 4005490:	e0bfa917 	ldw	r2,-348(fp)
 4005494:	108002a0 	cmpeqi	r2,r2,10
 4005498:	1000181e 	bne	r2,zero,40054fc <GUI+0x7b4>
 400549c:	e0bfa917 	ldw	r2,-348(fp)
 40054a0:	10800060 	cmpeqi	r2,r2,1
 40054a4:	1000151e 	bne	r2,zero,40054fc <GUI+0x7b4>
 40054a8:	e0bfa917 	ldw	r2,-348(fp)
 40054ac:	10001326 	beq	r2,zero,40054fc <GUI+0x7b4>
 40054b0:	e0ffb217 	ldw	r3,-312(fp)
 40054b4:	e0bfa917 	ldw	r2,-348(fp)
 40054b8:	18801026 	beq	r3,r2,40054fc <GUI+0x7b4>
 40054bc:	e0ffb117 	ldw	r3,-316(fp)
 40054c0:	e0bfa917 	ldw	r2,-348(fp)
 40054c4:	18800d26 	beq	r3,r2,40054fc <GUI+0x7b4>
 40054c8:	e0ffb017 	ldw	r3,-320(fp)
 40054cc:	e0bfa917 	ldw	r2,-348(fp)
 40054d0:	18800a26 	beq	r3,r2,40054fc <GUI+0x7b4>
 40054d4:	e0ffaf17 	ldw	r3,-324(fp)
 40054d8:	e0bfa917 	ldw	r2,-348(fp)
 40054dc:	18800726 	beq	r3,r2,40054fc <GUI+0x7b4>
						{
						       UpdatePalette = TRUE;
 40054e0:	00800044 	movi	r2,1
 40054e4:	e0bfa615 	stw	r2,-360(fp)
						       DeskInfo.Paint0_Index = ButtonId;
 40054e8:	e0bfa917 	ldw	r2,-348(fp)
 40054ec:	e0bfae15 	stw	r2,-328(fp)
						}
					}break;
 40054f0:	00000206 	br	40054fc <GUI+0x7b4>
                	default:break;
 40054f4:	0001883a 	nop
 40054f8:	00000106 	br	4005500 <GUI+0x7b8>
						if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR && ButtonId != BTN_GESTRUE && ButtonId != DeskInfo.Paint4_Index && ButtonId != DeskInfo.Paint3_Index && ButtonId != DeskInfo.Paint2_Index && ButtonId != DeskInfo.Paint1_Index)
						{
						       UpdatePalette = TRUE;
						       DeskInfo.Paint0_Index = ButtonId;
						}
					}break;
 40054fc:	0001883a 	nop
                	default:break;
                }
				if (UpdatePalette){
 4005500:	e0bfa617 	ldw	r2,-360(fp)
 4005504:	103e6f26 	beq	r2,zero,4004ec4 <__alt_mem_epcs_flash_controller_0+0xfb003ec4>
					ColorPen0 = DeskInfo.szPalette[DeskInfo.Paint0_Index].color;
 4005508:	e0bfae17 	ldw	r2,-328(fp)
 400550c:	10800524 	muli	r2,r2,20
 4005510:	e0ffa004 	addi	r3,fp,-384
 4005514:	1885883a 	add	r2,r3,r2
 4005518:	10801b04 	addi	r2,r2,108
 400551c:	10800017 	ldw	r2,0(r2)
 4005520:	e0bfa115 	stw	r2,-380(fp)
					ColorPen1 = DeskInfo.szPalette[DeskInfo.Paint1_Index].color;
 4005524:	e0bfaf17 	ldw	r2,-324(fp)
 4005528:	10800524 	muli	r2,r2,20
 400552c:	e0ffa004 	addi	r3,fp,-384
 4005530:	1885883a 	add	r2,r3,r2
 4005534:	10801b04 	addi	r2,r2,108
 4005538:	10800017 	ldw	r2,0(r2)
 400553c:	e0bfa215 	stw	r2,-376(fp)
					ColorPen2 = DeskInfo.szPalette[DeskInfo.Paint2_Index].color;
 4005540:	e0bfb017 	ldw	r2,-320(fp)
 4005544:	10800524 	muli	r2,r2,20
 4005548:	e0ffa004 	addi	r3,fp,-384
 400554c:	1885883a 	add	r2,r3,r2
 4005550:	10801b04 	addi	r2,r2,108
 4005554:	10800017 	ldw	r2,0(r2)
 4005558:	e0bfa315 	stw	r2,-372(fp)
					ColorPen3 = DeskInfo.szPalette[DeskInfo.Paint3_Index].color;
 400555c:	e0bfb117 	ldw	r2,-316(fp)
 4005560:	10800524 	muli	r2,r2,20
 4005564:	e0ffa004 	addi	r3,fp,-384
 4005568:	1885883a 	add	r2,r3,r2
 400556c:	10801b04 	addi	r2,r2,108
 4005570:	10800017 	ldw	r2,0(r2)
 4005574:	e0bfa415 	stw	r2,-368(fp)
					ColorPen4 = DeskInfo.szPalette[DeskInfo.Paint4_Index].color;
 4005578:	e0bfb217 	ldw	r2,-312(fp)
 400557c:	10800524 	muli	r2,r2,20
 4005580:	e0ffa004 	addi	r3,fp,-384
 4005584:	1885883a 	add	r2,r3,r2
 4005588:	10801b04 	addi	r2,r2,108
 400558c:	10800017 	ldw	r2,0(r2)
 4005590:	e0bfa515 	stw	r2,-364(fp)
					GUI_DeskDraw(pReader, &DeskInfo);
 4005594:	e0bfae04 	addi	r2,fp,-328
 4005598:	100b883a 	mov	r5,r2
 400559c:	e13fa817 	ldw	r4,-352(fp)
 40055a0:	40043c80 	call	40043c8 <GUI_DeskDraw>
					VIPFR_ActiveDrawFrame(pReader);
 40055a4:	e13fa817 	ldw	r4,-352(fp)
 40055a8:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
					MTC2_ClearEvent(pTouch);
 40055ac:	e13fff17 	ldw	r4,-4(fp)
 40055b0:	40087580 	call	4008758 <MTC2_ClearEvent>
				}
                }
        }
    }
 40055b4:	003e4306 	br	4004ec4 <__alt_mem_epcs_flash_controller_0+0xfb003ec4>

040055b8 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(VIP_FRAME_READER *pReader, char *pText){
 40055b8:	defff904 	addi	sp,sp,-28
 40055bc:	dfc00615 	stw	ra,24(sp)
 40055c0:	df000515 	stw	fp,20(sp)
 40055c4:	df000504 	addi	fp,sp,20
 40055c8:	e13ffe15 	stw	r4,-8(fp)
 40055cc:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pReader, pText);
 40055d0:	d0e01517 	ldw	r3,-32684(gp)
 40055d4:	d1200117 	ldw	r4,-32764(gp)
 40055d8:	e0bfff17 	ldw	r2,-4(fp)
 40055dc:	d8800215 	stw	r2,8(sp)
 40055e0:	e0bffe17 	ldw	r2,-8(fp)
 40055e4:	d8800115 	stw	r2,4(sp)
 40055e8:	00810234 	movhi	r2,1032
 40055ec:	10b07304 	addi	r2,r2,-15924
 40055f0:	d8800015 	stw	r2,0(sp)
 40055f4:	000f883a 	mov	r7,zero
 40055f8:	01803fc4 	movi	r6,255
 40055fc:	200b883a 	mov	r5,r4
 4005600:	1809883a 	mov	r4,r3
 4005604:	40035240 	call	4003524 <vid_print_string_alpha>
    VIPFR_ActiveDrawFrame(pReader);
 4005608:	e13ffe17 	ldw	r4,-8(fp)
 400560c:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005610:	0001883a 	nop
 4005614:	e037883a 	mov	sp,fp
 4005618:	dfc00117 	ldw	ra,4(sp)
 400561c:	df000017 	ldw	fp,0(sp)
 4005620:	dec00204 	addi	sp,sp,8
 4005624:	f800283a 	ret

04005628 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(VIP_FRAME_READER *pReader, int X, int Y, int color){
 4005628:	defff804 	addi	sp,sp,-32
 400562c:	dfc00715 	stw	ra,28(sp)
 4005630:	df000615 	stw	fp,24(sp)
 4005634:	df000604 	addi	fp,sp,24
 4005638:	e13ffc15 	stw	r4,-16(fp)
 400563c:	e17ffd15 	stw	r5,-12(fp)
 4005640:	e1bffe15 	stw	r6,-8(fp)
 4005644:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pReader);
 4005648:	e0bffc17 	ldw	r2,-16(fp)
 400564c:	d8800115 	stw	r2,4(sp)
 4005650:	00800044 	movi	r2,1
 4005654:	d8800015 	stw	r2,0(sp)
 4005658:	e1ffff17 	ldw	r7,-4(fp)
 400565c:	01800284 	movi	r6,10
 4005660:	e17ffe17 	ldw	r5,-8(fp)
 4005664:	e13ffd17 	ldw	r4,-12(fp)
 4005668:	4001ebc0 	call	4001ebc <vid_draw_circle>
    VIPFR_ActiveDrawFrame(pReader);    
 400566c:	e13ffc17 	ldw	r4,-16(fp)
 4005670:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005674:	0001883a 	nop
 4005678:	e037883a 	mov	sp,fp
 400567c:	dfc00117 	ldw	ra,4(sp)
 4005680:	df000017 	ldw	fp,0(sp)
 4005684:	dec00204 	addi	sp,sp,8
 4005688:	f800283a 	ret

0400568c <ShowInfo>:
#define FRAME_HEIGHT 480

#define FR_FRAME_0  (SDRAM_BASE)
#define FR_FRAME_1  (SDRAM_BASE + FRAME_WIDTH*FRAME_HEIGHT*4)

void ShowInfo(VIP_FRAME_READER *pReader, char *pText){
 400568c:	defff904 	addi	sp,sp,-28
 4005690:	dfc00615 	stw	ra,24(sp)
 4005694:	df000515 	stw	fp,20(sp)
 4005698:	df000504 	addi	fp,sp,20
 400569c:	e13ffe15 	stw	r4,-8(fp)
 40056a0:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pReader, pText);    
 40056a4:	e0bfff17 	ldw	r2,-4(fp)
 40056a8:	d8800215 	stw	r2,8(sp)
 40056ac:	e0bffe17 	ldw	r2,-8(fp)
 40056b0:	d8800115 	stw	r2,4(sp)
 40056b4:	00810234 	movhi	r2,1032
 40056b8:	10b07304 	addi	r2,r2,-15924
 40056bc:	d8800015 	stw	r2,0(sp)
 40056c0:	000f883a 	mov	r7,zero
 40056c4:	01804034 	movhi	r6,256
 40056c8:	31bfffc4 	addi	r6,r6,-1
 40056cc:	01400044 	movi	r5,1
 40056d0:	01000044 	movi	r4,1
 40056d4:	40035240 	call	4003524 <vid_print_string_alpha>
}
 40056d8:	0001883a 	nop
 40056dc:	e037883a 	mov	sp,fp
 40056e0:	dfc00117 	ldw	ra,4(sp)
 40056e4:	df000017 	ldw	fp,0(sp)
 40056e8:	dec00204 	addi	sp,sp,8
 40056ec:	f800283a 	ret

040056f0 <VPG_XLine>:

void VPG_XLine(VIP_FRAME_READER *pReader){
 40056f0:	defff904 	addi	sp,sp,-28
 40056f4:	dfc00615 	stw	ra,24(sp)
 40056f8:	df000515 	stw	fp,20(sp)
 40056fc:	df000504 	addi	fp,sp,20
 4005700:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *p;
    
    p = VIPFR_GetDrawFrame(pReader);
 4005704:	e13fff17 	ldw	r4,-4(fp)
 4005708:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 400570c:	e0bffe15 	stw	r2,-8(fp)

    // erase background
     vid_clean_screen(pReader, BLACK_24);
 4005710:	000b883a 	mov	r5,zero
 4005714:	e13fff17 	ldw	r4,-4(fp)
 4005718:	40006980 	call	4000698 <vid_clean_screen>
    
    // draw line    
    vid_draw_line(0, 0, FRAME_HEIGHT-1, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
 400571c:	e0bfff17 	ldw	r2,-4(fp)
 4005720:	d8800215 	stw	r2,8(sp)
 4005724:	00804034 	movhi	r2,256
 4005728:	10bfffc4 	addi	r2,r2,-1
 400572c:	d8800115 	stw	r2,4(sp)
 4005730:	00800044 	movi	r2,1
 4005734:	d8800015 	stw	r2,0(sp)
 4005738:	01c077c4 	movi	r7,479
 400573c:	018077c4 	movi	r6,479
 4005740:	000b883a 	mov	r5,zero
 4005744:	0009883a 	mov	r4,zero
 4005748:	40006fc0 	call	40006fc <vid_draw_line>
    vid_draw_line(FRAME_HEIGHT-1, 0, 0, FRAME_HEIGHT-1, 1, WHITE_24, pReader);
 400574c:	e0bfff17 	ldw	r2,-4(fp)
 4005750:	d8800215 	stw	r2,8(sp)
 4005754:	00804034 	movhi	r2,256
 4005758:	10bfffc4 	addi	r2,r2,-1
 400575c:	d8800115 	stw	r2,4(sp)
 4005760:	00800044 	movi	r2,1
 4005764:	d8800015 	stw	r2,0(sp)
 4005768:	01c077c4 	movi	r7,479
 400576c:	000d883a 	mov	r6,zero
 4005770:	000b883a 	mov	r5,zero
 4005774:	010077c4 	movi	r4,479
 4005778:	40006fc0 	call	40006fc <vid_draw_line>

    // show text
    ShowInfo(pReader, "X Line");
 400577c:	01410234 	movhi	r5,1032
 4005780:	296e4104 	addi	r5,r5,-18172
 4005784:	e13fff17 	ldw	r4,-4(fp)
 4005788:	400568c0 	call	400568c <ShowInfo>
    
    //    
    VIPFR_ActiveDrawFrame(pReader);        
 400578c:	e13fff17 	ldw	r4,-4(fp)
 4005790:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005794:	0001883a 	nop
 4005798:	e037883a 	mov	sp,fp
 400579c:	dfc00117 	ldw	ra,4(sp)
 40057a0:	df000017 	ldw	fp,0(sp)
 40057a4:	dec00204 	addi	sp,sp,8
 40057a8:	f800283a 	ret

040057ac <VPG_ColorPanel>:

void VPG_ColorPanel(VIP_FRAME_READER *pReader, alt_u32 Color){
 40057ac:	defff204 	addi	sp,sp,-56
 40057b0:	dfc00d15 	stw	ra,52(sp)
 40057b4:	df000c15 	stw	fp,48(sp)
 40057b8:	df000c04 	addi	fp,sp,48
 40057bc:	e13ffe15 	stw	r4,-8(fp)
 40057c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *p;
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
 40057c4:	e13ffe17 	ldw	r4,-8(fp)
 40057c8:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 40057cc:	e0bff415 	stw	r2,-48(fp)
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
 40057d0:	e03ff515 	stw	zero,-44(fp)
 40057d4:	00000806 	br	40057f8 <VPG_ColorPanel+0x4c>
        *p++ = Color;
 40057d8:	e0bff417 	ldw	r2,-48(fp)
 40057dc:	10c00104 	addi	r3,r2,4
 40057e0:	e0fff415 	stw	r3,-48(fp)
 40057e4:	e0ffff17 	ldw	r3,-4(fp)
 40057e8:	10c00015 	stw	r3,0(r2)
    int i;
    char szText[32];
    
    
    p = VIPFR_GetDrawFrame(pReader);
    for(i=0;i<FRAME_HEIGHT*FRAME_WIDTH;i++)
 40057ec:	e0bff517 	ldw	r2,-44(fp)
 40057f0:	10800044 	addi	r2,r2,1
 40057f4:	e0bff515 	stw	r2,-44(fp)
 40057f8:	e0fff517 	ldw	r3,-44(fp)
 40057fc:	008001b4 	movhi	r2,6
 4005800:	10b6ffc4 	addi	r2,r2,-9217
 4005804:	10fff40e 	bge	r2,r3,40057d8 <__alt_mem_epcs_flash_controller_0+0xfb0047d8>
        *p++ = Color;
        
    // show text
    sprintf(szText,"Panel: %08xh", Color);
 4005808:	e0bff604 	addi	r2,fp,-40
 400580c:	e1bfff17 	ldw	r6,-4(fp)
 4005810:	01410234 	movhi	r5,1032
 4005814:	296e4304 	addi	r5,r5,-18164
 4005818:	1009883a 	mov	r4,r2
 400581c:	400c7580 	call	400c758 <sprintf>
    ShowInfo(pReader, szText);
 4005820:	e0bff604 	addi	r2,fp,-40
 4005824:	100b883a 	mov	r5,r2
 4005828:	e13ffe17 	ldw	r4,-8(fp)
 400582c:	400568c0 	call	400568c <ShowInfo>
        
    VIPFR_ActiveDrawFrame(pReader);        
 4005830:	e13ffe17 	ldw	r4,-8(fp)
 4005834:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
    
}
 4005838:	0001883a 	nop
 400583c:	e037883a 	mov	sp,fp
 4005840:	dfc00117 	ldw	ra,4(sp)
 4005844:	df000017 	ldw	fp,0(sp)
 4005848:	dec00204 	addi	sp,sp,8
 400584c:	f800283a 	ret

04005850 <VPG_Grid>:

void VPG_Grid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 4005850:	defff004 	addi	sp,sp,-64
 4005854:	dfc00f15 	stw	ra,60(sp)
 4005858:	df000e15 	stw	fp,56(sp)
 400585c:	df000e04 	addi	fp,sp,56
 4005860:	e13ffe15 	stw	r4,-8(fp)
 4005864:	2805883a 	mov	r2,r5
 4005868:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 400586c:	e13ffe17 	ldw	r4,-8(fp)
 4005870:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4005874:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005878:	e03ff315 	stw	zero,-52(fp)
 400587c:	00002106 	br	4005904 <VPG_Grid+0xb4>
        for(x=0;x<FRAME_WIDTH;x++){
 4005880:	e03ff215 	stw	zero,-56(fp)
 4005884:	00001906 	br	40058ec <VPG_Grid+0x9c>
            if (x%GridSize == 0 || y%GridSize == 0)
 4005888:	e0ffff03 	ldbu	r3,-4(fp)
 400588c:	e0bff217 	ldw	r2,-56(fp)
 4005890:	180b883a 	mov	r5,r3
 4005894:	1009883a 	mov	r4,r2
 4005898:	400950c0 	call	400950c <__modsi3>
 400589c:	10000626 	beq	r2,zero,40058b8 <VPG_Grid+0x68>
 40058a0:	e0ffff03 	ldbu	r3,-4(fp)
 40058a4:	e0bff317 	ldw	r2,-52(fp)
 40058a8:	180b883a 	mov	r5,r3
 40058ac:	1009883a 	mov	r4,r2
 40058b0:	400950c0 	call	400950c <__modsi3>
 40058b4:	1000041e 	bne	r2,zero,40058c8 <VPG_Grid+0x78>
                Value32 = WHITE_24;
 40058b8:	00804034 	movhi	r2,256
 40058bc:	10bfffc4 	addi	r2,r2,-1
 40058c0:	e0bff515 	stw	r2,-44(fp)
 40058c4:	00000106 	br	40058cc <VPG_Grid+0x7c>
            else
                Value32 = BLACK_24;
 40058c8:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 40058cc:	e0bff417 	ldw	r2,-48(fp)
 40058d0:	10c00104 	addi	r3,r2,4
 40058d4:	e0fff415 	stw	r3,-48(fp)
 40058d8:	e0fff517 	ldw	r3,-44(fp)
 40058dc:	10c00015 	stw	r3,0(r2)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 40058e0:	e0bff217 	ldw	r2,-56(fp)
 40058e4:	10800044 	addi	r2,r2,1
 40058e8:	e0bff215 	stw	r2,-56(fp)
 40058ec:	e0bff217 	ldw	r2,-56(fp)
 40058f0:	1080c810 	cmplti	r2,r2,800
 40058f4:	103fe41e 	bne	r2,zero,4005888 <__alt_mem_epcs_flash_controller_0+0xfb004888>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 40058f8:	e0bff317 	ldw	r2,-52(fp)
 40058fc:	10800044 	addi	r2,r2,1
 4005900:	e0bff315 	stw	r2,-52(fp)
 4005904:	e0bff317 	ldw	r2,-52(fp)
 4005908:	10807810 	cmplti	r2,r2,480
 400590c:	103fdc1e 	bne	r2,zero,4005880 <__alt_mem_epcs_flash_controller_0+0xfb004880>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 4005910:	e0ffff03 	ldbu	r3,-4(fp)
 4005914:	e0bff604 	addi	r2,fp,-40
 4005918:	180d883a 	mov	r6,r3
 400591c:	01410234 	movhi	r5,1032
 4005920:	296e4704 	addi	r5,r5,-18148
 4005924:	1009883a 	mov	r4,r2
 4005928:	400c7580 	call	400c758 <sprintf>
    ShowInfo(pReader, szText);
 400592c:	e0bff604 	addi	r2,fp,-40
 4005930:	100b883a 	mov	r5,r2
 4005934:	e13ffe17 	ldw	r4,-8(fp)
 4005938:	400568c0 	call	400568c <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 400593c:	e13ffe17 	ldw	r4,-8(fp)
 4005940:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005944:	0001883a 	nop
 4005948:	e037883a 	mov	sp,fp
 400594c:	dfc00117 	ldw	ra,4(sp)
 4005950:	df000017 	ldw	fp,0(sp)
 4005954:	dec00204 	addi	sp,sp,8
 4005958:	f800283a 	ret

0400595c <VPG_VGrid>:

void VPG_VGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 400595c:	defff004 	addi	sp,sp,-64
 4005960:	dfc00f15 	stw	ra,60(sp)
 4005964:	df000e15 	stw	fp,56(sp)
 4005968:	df000e04 	addi	fp,sp,56
 400596c:	e13ffe15 	stw	r4,-8(fp)
 4005970:	2805883a 	mov	r2,r5
 4005974:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 4005978:	e13ffe17 	ldw	r4,-8(fp)
 400597c:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4005980:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005984:	e03ff315 	stw	zero,-52(fp)
 4005988:	00001b06 	br	40059f8 <VPG_VGrid+0x9c>
        for(x=0;x<FRAME_WIDTH;x++){
 400598c:	e03ff215 	stw	zero,-56(fp)
 4005990:	00001306 	br	40059e0 <VPG_VGrid+0x84>
            if (x%GridSize == 0)
 4005994:	e0ffff03 	ldbu	r3,-4(fp)
 4005998:	e0bff217 	ldw	r2,-56(fp)
 400599c:	180b883a 	mov	r5,r3
 40059a0:	1009883a 	mov	r4,r2
 40059a4:	400950c0 	call	400950c <__modsi3>
 40059a8:	1000041e 	bne	r2,zero,40059bc <VPG_VGrid+0x60>
                Value32 = WHITE_24;
 40059ac:	00804034 	movhi	r2,256
 40059b0:	10bfffc4 	addi	r2,r2,-1
 40059b4:	e0bff515 	stw	r2,-44(fp)
 40059b8:	00000106 	br	40059c0 <VPG_VGrid+0x64>
            else
                Value32 = BLACK_24;
 40059bc:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 40059c0:	e0bff417 	ldw	r2,-48(fp)
 40059c4:	10c00104 	addi	r3,r2,4
 40059c8:	e0fff415 	stw	r3,-48(fp)
 40059cc:	e0fff517 	ldw	r3,-44(fp)
 40059d0:	10c00015 	stw	r3,0(r2)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 40059d4:	e0bff217 	ldw	r2,-56(fp)
 40059d8:	10800044 	addi	r2,r2,1
 40059dc:	e0bff215 	stw	r2,-56(fp)
 40059e0:	e0bff217 	ldw	r2,-56(fp)
 40059e4:	1080c810 	cmplti	r2,r2,800
 40059e8:	103fea1e 	bne	r2,zero,4005994 <__alt_mem_epcs_flash_controller_0+0xfb004994>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 40059ec:	e0bff317 	ldw	r2,-52(fp)
 40059f0:	10800044 	addi	r2,r2,1
 40059f4:	e0bff315 	stw	r2,-52(fp)
 40059f8:	e0bff317 	ldw	r2,-52(fp)
 40059fc:	10807810 	cmplti	r2,r2,480
 4005a00:	103fe21e 	bne	r2,zero,400598c <__alt_mem_epcs_flash_controller_0+0xfb00498c>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 4005a04:	e0ffff03 	ldbu	r3,-4(fp)
 4005a08:	e0bff604 	addi	r2,fp,-40
 4005a0c:	180d883a 	mov	r6,r3
 4005a10:	01410234 	movhi	r5,1032
 4005a14:	296e4904 	addi	r5,r5,-18140
 4005a18:	1009883a 	mov	r4,r2
 4005a1c:	400c7580 	call	400c758 <sprintf>
    ShowInfo(pReader, szText);
 4005a20:	e0bff604 	addi	r2,fp,-40
 4005a24:	100b883a 	mov	r5,r2
 4005a28:	e13ffe17 	ldw	r4,-8(fp)
 4005a2c:	400568c0 	call	400568c <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 4005a30:	e13ffe17 	ldw	r4,-8(fp)
 4005a34:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005a38:	0001883a 	nop
 4005a3c:	e037883a 	mov	sp,fp
 4005a40:	dfc00117 	ldw	ra,4(sp)
 4005a44:	df000017 	ldw	fp,0(sp)
 4005a48:	dec00204 	addi	sp,sp,8
 4005a4c:	f800283a 	ret

04005a50 <VPG_HGrid>:

void VPG_HGrid(VIP_FRAME_READER *pReader, alt_u8 GridSize){
 4005a50:	defff004 	addi	sp,sp,-64
 4005a54:	dfc00f15 	stw	ra,60(sp)
 4005a58:	df000e15 	stw	fp,56(sp)
 4005a5c:	df000e04 	addi	fp,sp,56
 4005a60:	e13ffe15 	stw	r4,-8(fp)
 4005a64:	2805883a 	mov	r2,r5
 4005a68:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
 4005a6c:	e13ffe17 	ldw	r4,-8(fp)
 4005a70:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4005a74:	e0bff415 	stw	r2,-48(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005a78:	e03ff315 	stw	zero,-52(fp)
 4005a7c:	00001b06 	br	4005aec <VPG_HGrid+0x9c>
        for(x=0;x<FRAME_WIDTH;x++){
 4005a80:	e03ff215 	stw	zero,-56(fp)
 4005a84:	00001306 	br	4005ad4 <VPG_HGrid+0x84>
            if (y%GridSize == 0)
 4005a88:	e0ffff03 	ldbu	r3,-4(fp)
 4005a8c:	e0bff317 	ldw	r2,-52(fp)
 4005a90:	180b883a 	mov	r5,r3
 4005a94:	1009883a 	mov	r4,r2
 4005a98:	400950c0 	call	400950c <__modsi3>
 4005a9c:	1000041e 	bne	r2,zero,4005ab0 <VPG_HGrid+0x60>
                Value32 = WHITE_24;
 4005aa0:	00804034 	movhi	r2,256
 4005aa4:	10bfffc4 	addi	r2,r2,-1
 4005aa8:	e0bff515 	stw	r2,-44(fp)
 4005aac:	00000106 	br	4005ab4 <VPG_HGrid+0x64>
            else
                Value32 = BLACK_24;
 4005ab0:	e03ff515 	stw	zero,-44(fp)
            *p++ = Value32;
 4005ab4:	e0bff417 	ldw	r2,-48(fp)
 4005ab8:	10c00104 	addi	r3,r2,4
 4005abc:	e0fff415 	stw	r3,-48(fp)
 4005ac0:	e0fff517 	ldw	r3,-44(fp)
 4005ac4:	10c00015 	stw	r3,0(r2)
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 4005ac8:	e0bff217 	ldw	r2,-56(fp)
 4005acc:	10800044 	addi	r2,r2,1
 4005ad0:	e0bff215 	stw	r2,-56(fp)
 4005ad4:	e0bff217 	ldw	r2,-56(fp)
 4005ad8:	1080c810 	cmplti	r2,r2,800
 4005adc:	103fea1e 	bne	r2,zero,4005a88 <__alt_mem_epcs_flash_controller_0+0xfb004a88>
    int x,y;
    alt_u32 *p, Value32;
    char szText[32];
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005ae0:	e0bff317 	ldw	r2,-52(fp)
 4005ae4:	10800044 	addi	r2,r2,1
 4005ae8:	e0bff315 	stw	r2,-52(fp)
 4005aec:	e0bff317 	ldw	r2,-52(fp)
 4005af0:	10807810 	cmplti	r2,r2,480
 4005af4:	103fe21e 	bne	r2,zero,4005a80 <__alt_mem_epcs_flash_controller_0+0xfb004a80>
            *p++ = Value32;
        }            
        
    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 4005af8:	e0ffff03 	ldbu	r3,-4(fp)
 4005afc:	e0bff604 	addi	r2,fp,-40
 4005b00:	180d883a 	mov	r6,r3
 4005b04:	01410234 	movhi	r5,1032
 4005b08:	296e4b04 	addi	r5,r5,-18132
 4005b0c:	1009883a 	mov	r4,r2
 4005b10:	400c7580 	call	400c758 <sprintf>
    ShowInfo(pReader, szText);
 4005b14:	e0bff604 	addi	r2,fp,-40
 4005b18:	100b883a 	mov	r5,r2
 4005b1c:	e13ffe17 	ldw	r4,-8(fp)
 4005b20:	400568c0 	call	400568c <ShowInfo>
    
    VIPFR_ActiveDrawFrame(pReader);
 4005b24:	e13ffe17 	ldw	r4,-8(fp)
 4005b28:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005b2c:	0001883a 	nop
 4005b30:	e037883a 	mov	sp,fp
 4005b34:	dfc00117 	ldw	ra,4(sp)
 4005b38:	df000017 	ldw	fp,0(sp)
 4005b3c:	dec00204 	addi	sp,sp,8
 4005b40:	f800283a 	ret

04005b44 <VPG_ColorBar>:




void VPG_ColorBar(VIP_FRAME_READER *pReader){
 4005b44:	defff904 	addi	sp,sp,-28
 4005b48:	dfc00615 	stw	ra,24(sp)
 4005b4c:	df000515 	stw	fp,20(sp)
 4005b50:	df000504 	addi	fp,sp,20
 4005b54:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
 4005b58:	e13fff17 	ldw	r4,-4(fp)
 4005b5c:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4005b60:	e0bffd15 	stw	r2,-12(fp)
    for(y=0;y<FRAME_HEIGHT;y++){
 4005b64:	e03ffc15 	stw	zero,-16(fp)
 4005b68:	00004506 	br	4005c80 <VPG_ColorBar+0x13c>
        for(x=0;x<FRAME_WIDTH;x++){
 4005b6c:	e03ffb15 	stw	zero,-20(fp)
 4005b70:	00003d06 	br	4005c68 <VPG_ColorBar+0x124>
            if (x == 0 || y == 0 || x == FRAME_WIDTH-1 || y == FRAME_HEIGHT-1){
 4005b74:	e0bffb17 	ldw	r2,-20(fp)
 4005b78:	10000826 	beq	r2,zero,4005b9c <VPG_ColorBar+0x58>
 4005b7c:	e0bffc17 	ldw	r2,-16(fp)
 4005b80:	10000626 	beq	r2,zero,4005b9c <VPG_ColorBar+0x58>
 4005b84:	e0bffb17 	ldw	r2,-20(fp)
 4005b88:	1080c7e0 	cmpeqi	r2,r2,799
 4005b8c:	1000031e 	bne	r2,zero,4005b9c <VPG_ColorBar+0x58>
 4005b90:	e0bffc17 	ldw	r2,-16(fp)
 4005b94:	108077d8 	cmpnei	r2,r2,479
 4005b98:	1000041e 	bne	r2,zero,4005bac <VPG_ColorBar+0x68>
                Value32 = WHITE_24;
 4005b9c:	00804034 	movhi	r2,256
 4005ba0:	10bfffc4 	addi	r2,r2,-1
 4005ba4:	e0bffe15 	stw	r2,-8(fp)
 4005ba8:	00002706 	br	4005c48 <VPG_ColorBar+0x104>
            }else if (y < FRAME_HEIGHT/4){
 4005bac:	e0bffc17 	ldw	r2,-16(fp)
 4005bb0:	10801e08 	cmpgei	r2,r2,120
 4005bb4:	1000041e 	bne	r2,zero,4005bc8 <VPG_ColorBar+0x84>
                // red
                Value32 = x & 0xFF;
 4005bb8:	e0bffb17 	ldw	r2,-20(fp)
 4005bbc:	10803fcc 	andi	r2,r2,255
 4005bc0:	e0bffe15 	stw	r2,-8(fp)
 4005bc4:	00002006 	br	4005c48 <VPG_ColorBar+0x104>
            }else if (y < FRAME_HEIGHT/2){
 4005bc8:	e0bffc17 	ldw	r2,-16(fp)
 4005bcc:	10803c08 	cmpgei	r2,r2,240
 4005bd0:	1000051e 	bne	r2,zero,4005be8 <VPG_ColorBar+0xa4>
                Value32 = (x & 0xFF) << 8;
 4005bd4:	e0bffb17 	ldw	r2,-20(fp)
 4005bd8:	1004923a 	slli	r2,r2,8
 4005bdc:	10bfffcc 	andi	r2,r2,65535
 4005be0:	e0bffe15 	stw	r2,-8(fp)
 4005be4:	00001806 	br	4005c48 <VPG_ColorBar+0x104>
            }else if (y < FRAME_HEIGHT*3/4){
 4005be8:	e0bffc17 	ldw	r2,-16(fp)
 4005bec:	10805a08 	cmpgei	r2,r2,360
 4005bf0:	1000051e 	bne	r2,zero,4005c08 <VPG_ColorBar+0xc4>
                Value32 = (x & 0xFF) << 16;
 4005bf4:	e0bffb17 	ldw	r2,-20(fp)
 4005bf8:	10803fcc 	andi	r2,r2,255
 4005bfc:	1004943a 	slli	r2,r2,16
 4005c00:	e0bffe15 	stw	r2,-8(fp)
 4005c04:	00001006 	br	4005c48 <VPG_ColorBar+0x104>
            }else{
                Value32 = x & 0xFF;
 4005c08:	e0bffb17 	ldw	r2,-20(fp)
 4005c0c:	10803fcc 	andi	r2,r2,255
 4005c10:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
 4005c14:	e0bffb17 	ldw	r2,-20(fp)
 4005c18:	1004923a 	slli	r2,r2,8
 4005c1c:	10bfffcc 	andi	r2,r2,65535
 4005c20:	e0fffe17 	ldw	r3,-8(fp)
 4005c24:	1884b03a 	or	r2,r3,r2
 4005c28:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
 4005c2c:	e0bffb17 	ldw	r2,-20(fp)
 4005c30:	10803fcc 	andi	r2,r2,255
 4005c34:	1004943a 	slli	r2,r2,16
 4005c38:	1007883a 	mov	r3,r2
 4005c3c:	e0bffe17 	ldw	r2,-8(fp)
 4005c40:	10c4b03a 	or	r2,r2,r3
 4005c44:	e0bffe15 	stw	r2,-8(fp)
            }
            *p++ = Value32;
 4005c48:	e0bffd17 	ldw	r2,-12(fp)
 4005c4c:	10c00104 	addi	r3,r2,4
 4005c50:	e0fffd15 	stw	r3,-12(fp)
 4005c54:	e0fffe17 	ldw	r3,-8(fp)
 4005c58:	10c00015 	stw	r3,0(r2)
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
        for(x=0;x<FRAME_WIDTH;x++){
 4005c5c:	e0bffb17 	ldw	r2,-20(fp)
 4005c60:	10800044 	addi	r2,r2,1
 4005c64:	e0bffb15 	stw	r2,-20(fp)
 4005c68:	e0bffb17 	ldw	r2,-20(fp)
 4005c6c:	1080c810 	cmplti	r2,r2,800
 4005c70:	103fc01e 	bne	r2,zero,4005b74 <__alt_mem_epcs_flash_controller_0+0xfb004b74>
void VPG_ColorBar(VIP_FRAME_READER *pReader){
    int x,y;
    alt_u32 *p, Value32;
    
    p = VIPFR_GetDrawFrame(pReader);
    for(y=0;y<FRAME_HEIGHT;y++){
 4005c74:	e0bffc17 	ldw	r2,-16(fp)
 4005c78:	10800044 	addi	r2,r2,1
 4005c7c:	e0bffc15 	stw	r2,-16(fp)
 4005c80:	e0bffc17 	ldw	r2,-16(fp)
 4005c84:	10807810 	cmplti	r2,r2,480
 4005c88:	103fb81e 	bne	r2,zero,4005b6c <__alt_mem_epcs_flash_controller_0+0xfb004b6c>
            *p++ = Value32;
        }            
        
    }
    
    VIPFR_ActiveDrawFrame(pReader);
 4005c8c:	e13fff17 	ldw	r4,-4(fp)
 4005c90:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
}
 4005c94:	0001883a 	nop
 4005c98:	e037883a 	mov	sp,fp
 4005c9c:	dfc00117 	ldw	ra,4(sp)
 4005ca0:	df000017 	ldw	fp,0(sp)
 4005ca4:	dec00204 	addi	sp,sp,8
 4005ca8:	f800283a 	ret

04005cac <GUI_ShowPAT>:

void GUI_ShowPAT(VIP_FRAME_READER *pReader, int PatId){
 4005cac:	defffc04 	addi	sp,sp,-16
 4005cb0:	dfc00315 	stw	ra,12(sp)
 4005cb4:	df000215 	stw	fp,8(sp)
 4005cb8:	df000204 	addi	fp,sp,8
 4005cbc:	e13ffe15 	stw	r4,-8(fp)
 4005cc0:	e17fff15 	stw	r5,-4(fp)
                switch(PatId){
 4005cc4:	e0bfff17 	ldw	r2,-4(fp)
 4005cc8:	108003e8 	cmpgeui	r2,r2,15
 4005ccc:	1000511e 	bne	r2,zero,4005e14 <GUI_ShowPAT+0x168>
 4005cd0:	e0bfff17 	ldw	r2,-4(fp)
 4005cd4:	100690ba 	slli	r3,r2,2
 4005cd8:	00810034 	movhi	r2,1024
 4005cdc:	10973b04 	addi	r2,r2,23788
 4005ce0:	1885883a 	add	r2,r3,r2
 4005ce4:	10800017 	ldw	r2,0(r2)
 4005ce8:	1000683a 	jmp	r2
 4005cec:	04005d28 	cmpgeui	r16,zero,372
 4005cf0:	04005d34 	movhi	r16,372
 4005cf4:	04005d48 	cmpgei	r16,zero,373
 4005cf8:	04005d58 	cmpnei	r16,zero,373
 4005cfc:	04005d68 	cmpgeui	r16,zero,373
 4005d00:	04005d78 	rdprs	r16,zero,373
 4005d04:	04005d84 	movi	r16,374
 4005d08:	04005d94 	movui	r16,374
 4005d0c:	04005da4 	muli	r16,zero,374
 4005d10:	04005db4 	movhi	r16,374
 4005d14:	04005dc4 	movi	r16,375
 4005d18:	04005dd4 	movui	r16,375
 4005d1c:	04005de4 	muli	r16,zero,375
 4005d20:	04005df4 	movhi	r16,375
 4005d24:	04005e04 	movi	r16,376
                    case 0: VPG_ColorBar(pReader); break;
 4005d28:	e13ffe17 	ldw	r4,-8(fp)
 4005d2c:	4005b440 	call	4005b44 <VPG_ColorBar>
 4005d30:	00003806 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 1: VPG_ColorPanel(pReader, WHITE_24); break;
 4005d34:	01404034 	movhi	r5,256
 4005d38:	297fffc4 	addi	r5,r5,-1
 4005d3c:	e13ffe17 	ldw	r4,-8(fp)
 4005d40:	40057ac0 	call	40057ac <VPG_ColorPanel>
 4005d44:	00003306 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 2: VPG_ColorPanel(pReader, RED_24); break;
 4005d48:	01403ff4 	movhi	r5,255
 4005d4c:	e13ffe17 	ldw	r4,-8(fp)
 4005d50:	40057ac0 	call	40057ac <VPG_ColorPanel>
 4005d54:	00002f06 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 3: VPG_ColorPanel(pReader, GREEN_24); break;
 4005d58:	01600014 	movui	r5,32768
 4005d5c:	e13ffe17 	ldw	r4,-8(fp)
 4005d60:	40057ac0 	call	40057ac <VPG_ColorPanel>
 4005d64:	00002b06 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 4: VPG_ColorPanel(pReader, BLUE_24); break;
 4005d68:	01403fc4 	movi	r5,255
 4005d6c:	e13ffe17 	ldw	r4,-8(fp)
 4005d70:	40057ac0 	call	40057ac <VPG_ColorPanel>
 4005d74:	00002706 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 5: VPG_XLine(pReader); break;
 4005d78:	e13ffe17 	ldw	r4,-8(fp)
 4005d7c:	40056f00 	call	40056f0 <VPG_XLine>
 4005d80:	00002406 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 6: VPG_VGrid(pReader, 2); break;
 4005d84:	01400084 	movi	r5,2
 4005d88:	e13ffe17 	ldw	r4,-8(fp)
 4005d8c:	400595c0 	call	400595c <VPG_VGrid>
 4005d90:	00002006 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 7: VPG_VGrid(pReader, 4); break;
 4005d94:	01400104 	movi	r5,4
 4005d98:	e13ffe17 	ldw	r4,-8(fp)
 4005d9c:	400595c0 	call	400595c <VPG_VGrid>
 4005da0:	00001c06 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 8: VPG_VGrid(pReader, 8); break;
 4005da4:	01400204 	movi	r5,8
 4005da8:	e13ffe17 	ldw	r4,-8(fp)
 4005dac:	400595c0 	call	400595c <VPG_VGrid>
 4005db0:	00001806 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 9: VPG_HGrid(pReader, 2); break;
 4005db4:	01400084 	movi	r5,2
 4005db8:	e13ffe17 	ldw	r4,-8(fp)
 4005dbc:	4005a500 	call	4005a50 <VPG_HGrid>
 4005dc0:	00001406 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 10: VPG_HGrid(pReader, 4); break;
 4005dc4:	01400104 	movi	r5,4
 4005dc8:	e13ffe17 	ldw	r4,-8(fp)
 4005dcc:	4005a500 	call	4005a50 <VPG_HGrid>
 4005dd0:	00001006 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 11: VPG_HGrid(pReader, 8); break;
 4005dd4:	01400204 	movi	r5,8
 4005dd8:	e13ffe17 	ldw	r4,-8(fp)
 4005ddc:	4005a500 	call	4005a50 <VPG_HGrid>
 4005de0:	00000c06 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 12: VPG_Grid(pReader, 2); break;
 4005de4:	01400084 	movi	r5,2
 4005de8:	e13ffe17 	ldw	r4,-8(fp)
 4005dec:	40058500 	call	4005850 <VPG_Grid>
 4005df0:	00000806 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 13: VPG_Grid(pReader, 4); break;
 4005df4:	01400104 	movi	r5,4
 4005df8:	e13ffe17 	ldw	r4,-8(fp)
 4005dfc:	40058500 	call	4005850 <VPG_Grid>
 4005e00:	00000406 	br	4005e14 <GUI_ShowPAT+0x168>
                    case 14: VPG_Grid(pReader, 8); break;
 4005e04:	01400204 	movi	r5,8
 4005e08:	e13ffe17 	ldw	r4,-8(fp)
 4005e0c:	40058500 	call	4005850 <VPG_Grid>
 4005e10:	0001883a 	nop
                }
    
}
 4005e14:	0001883a 	nop
 4005e18:	e037883a 	mov	sp,fp
 4005e1c:	dfc00117 	ldw	ra,4(sp)
 4005e20:	df000017 	ldw	fp,0(sp)
 4005e24:	dec00204 	addi	sp,sp,8
 4005e28:	f800283a 	ret

04005e2c <GUI_VPG>:

void GUI_VPG(MTC2_INFO *pTouch){
 4005e2c:	deffe704 	addi	sp,sp,-100
 4005e30:	dfc01815 	stw	ra,96(sp)
 4005e34:	df001715 	stw	fp,92(sp)
 4005e38:	df001704 	addi	fp,sp,92
 4005e3c:	e13fff15 	stw	r4,-4(fp)
    // video
    VIP_FRAME_READER *pReader;
    int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;
    alt_u8 Event, TouchNum;    
    alt_u8 PatId = 0;
 4005e40:	e03ff205 	stb	zero,-56(fp)
    /////////////////////////////////////////////
    // frame reader
#ifdef DUAL_FRAME_BUFFER
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
#else    
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_0, FRAME_WIDTH, FRAME_HEIGHT);
 4005e44:	00807804 	movi	r2,480
 4005e48:	d8800015 	stw	r2,0(sp)
 4005e4c:	01c0c804 	movi	r7,800
 4005e50:	01810034 	movhi	r6,1024
 4005e54:	01410034 	movhi	r5,1024
 4005e58:	01024034 	movhi	r4,2304
 4005e5c:	21080004 	addi	r4,r4,8192
 4005e60:	4008a340 	call	4008a34 <VIPFR_Init>
 4005e64:	e0bff315 	stw	r2,-52(fp)
#endif // DUAL_FRAME_BUFFER    
    VIPFR_Go(pReader, TRUE);
 4005e68:	01400044 	movi	r5,1
 4005e6c:	e13ff317 	ldw	r4,-52(fp)
 4005e70:	4008c5c0 	call	4008c5c <VIPFR_Go>
    
    
    // clean screen
    vid_clean_screen(pReader, BLACK_24);
 4005e74:	000b883a 	mov	r5,zero
 4005e78:	e13ff317 	ldw	r4,-52(fp)
 4005e7c:	40006980 	call	4000698 <vid_clean_screen>
    
   
    VIPFR_ActiveDrawFrame(pReader);
 4005e80:	e13ff317 	ldw	r4,-52(fp)
 4005e84:	4008ce40 	call	4008ce4 <VIPFR_ActiveDrawFrame>
    
    VPG_ColorBar(pReader);
 4005e88:	e13ff317 	ldw	r4,-52(fp)
 4005e8c:	4005b440 	call	4005b44 <VPG_ColorBar>

   GUI_ShowPAT(pReader, PatId);    
 4005e90:	e0bff203 	ldbu	r2,-56(fp)
 4005e94:	100b883a 	mov	r5,r2
 4005e98:	e13ff317 	ldw	r4,-52(fp)
 4005e9c:	4005cac0 	call	4005cac <GUI_ShowPAT>
    
    while(1){
        if (MTC2_GetStatus(pTouch,&Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4005ea0:	e17ff404 	addi	r5,fp,-48
 4005ea4:	e13ffe44 	addi	r4,fp,-7
 4005ea8:	e0fffe04 	addi	r3,fp,-8
 4005eac:	e0bffd04 	addi	r2,fp,-12
 4005eb0:	d8800815 	stw	r2,32(sp)
 4005eb4:	e0bffc04 	addi	r2,fp,-16
 4005eb8:	d8800715 	stw	r2,28(sp)
 4005ebc:	e0bffb04 	addi	r2,fp,-20
 4005ec0:	d8800615 	stw	r2,24(sp)
 4005ec4:	e0bffa04 	addi	r2,fp,-24
 4005ec8:	d8800515 	stw	r2,20(sp)
 4005ecc:	e0bff904 	addi	r2,fp,-28
 4005ed0:	d8800415 	stw	r2,16(sp)
 4005ed4:	e0bff804 	addi	r2,fp,-32
 4005ed8:	d8800315 	stw	r2,12(sp)
 4005edc:	e0bff704 	addi	r2,fp,-36
 4005ee0:	d8800215 	stw	r2,8(sp)
 4005ee4:	e0bff604 	addi	r2,fp,-40
 4005ee8:	d8800115 	stw	r2,4(sp)
 4005eec:	e0bff504 	addi	r2,fp,-44
 4005ef0:	d8800015 	stw	r2,0(sp)
 4005ef4:	280f883a 	mov	r7,r5
 4005ef8:	200d883a 	mov	r6,r4
 4005efc:	180b883a 	mov	r5,r3
 4005f00:	e13fff17 	ldw	r4,-4(fp)
 4005f04:	40085f80 	call	40085f8 <MTC2_GetStatus>
 4005f08:	103fe526 	beq	r2,zero,4005ea0 <__alt_mem_epcs_flash_controller_0+0xfb004ea0>
           // printf(".");
            //
            if (TouchNum > 0){
 4005f0c:	e0bffe43 	ldbu	r2,-7(fp)
 4005f10:	10803fcc 	andi	r2,r2,255
 4005f14:	103fe226 	beq	r2,zero,4005ea0 <__alt_mem_epcs_flash_controller_0+0xfb004ea0>
                // change patter
                PatId++;
 4005f18:	e0bff203 	ldbu	r2,-56(fp)
 4005f1c:	10800044 	addi	r2,r2,1
 4005f20:	e0bff205 	stb	r2,-56(fp)
                if (PatId > 14)
 4005f24:	e0bff203 	ldbu	r2,-56(fp)
 4005f28:	108003f0 	cmpltui	r2,r2,15
 4005f2c:	1000011e 	bne	r2,zero,4005f34 <GUI_VPG+0x108>
                    PatId = 0;
 4005f30:	e03ff205 	stb	zero,-56(fp)
                GUI_ShowPAT(pReader, PatId);
 4005f34:	e0bff203 	ldbu	r2,-56(fp)
 4005f38:	100b883a 	mov	r5,r2
 4005f3c:	e13ff317 	ldw	r4,-52(fp)
 4005f40:	4005cac0 	call	4005cac <GUI_ShowPAT>
                usleep(300*1000); // debounce
 4005f44:	01000174 	movhi	r4,5
 4005f48:	2124f804 	addi	r4,r4,-27680
 4005f4c:	401a3000 	call	401a300 <usleep>
                MTC2_ClearEvent(pTouch);
 4005f50:	e13fff17 	ldw	r4,-4(fp)
 4005f54:	40087580 	call	4008758 <MTC2_ClearEvent>
            }
        }
    }
 4005f58:	003fd106 	br	4005ea0 <__alt_mem_epcs_flash_controller_0+0xfb004ea0>

04005f5c <main>:
#include "multi_touch2.h"
#include "gui.h"
#include "system.h"

int main()
{
 4005f5c:	defffc04 	addi	sp,sp,-16
 4005f60:	dfc00315 	stw	ra,12(sp)
 4005f64:	df000215 	stw	fp,8(sp)
 4005f68:	df000204 	addi	fp,sp,8

    // touch
    MTC2_INFO *pTouch;
    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 4005f6c:	00820034 	movhi	r2,2048
 4005f70:	10800804 	addi	r2,r2,32
 4005f74:	10800037 	ldwio	r2,0(r2)
 4005f78:	1080004c 	andi	r2,r2,1
 4005f7c:	1005003a 	cmpeq	r2,r2,zero
 4005f80:	10803fcc 	andi	r2,r2,255
 4005f84:	e0bffe15 	stw	r2,-8(fp)
    IOWR(LED_BASE, 0x00, 0x3FF); // high-active
 4005f88:	00c0ffc4 	movi	r3,1023
 4005f8c:	00820034 	movhi	r2,2048
 4005f90:	10801004 	addi	r2,r2,64
 4005f94:	10c00035 	stwio	r3,0(r2)

    printf("Terasic Painter Demo\r\n");
 4005f98:	01010234 	movhi	r4,1032
 4005f9c:	212e4d04 	addi	r4,r4,-18124
 4005fa0:	400c6980 	call	400c698 <puts>
    oc_i2c_init(I2C_OPENCORES_0_BASE);
 4005fa4:	01024034 	movhi	r4,2304
 4005fa8:	21082004 	addi	r4,r4,8320
 4005fac:	40072200 	call	4007220 <oc_i2c_init>
    usleep(1000);
 4005fb0:	0100fa04 	movi	r4,1000
 4005fb4:	401a3000 	call	401a300 <usleep>
    pTouch=MTC2_Init(I2C_OPENCORES_0_BASE,LCD_TOUCH_INT_BASE,LCD_TOUCH_INT_IRQ);
 4005fb8:	01800144 	movi	r6,5
 4005fbc:	01424034 	movhi	r5,2304
 4005fc0:	29482804 	addi	r5,r5,8352
 4005fc4:	01024034 	movhi	r4,2304
 4005fc8:	21082004 	addi	r4,r4,8320
 4005fcc:	40084b00 	call	40084b0 <MTC2_Init>
 4005fd0:	e0bfff15 	stw	r2,-4(fp)
    if (!pTouch){
 4005fd4:	e0bfff17 	ldw	r2,-4(fp)
 4005fd8:	1000041e 	bne	r2,zero,4005fec <main+0x90>
        printf("Failed to init multi-touch\r\n");
 4005fdc:	01010234 	movhi	r4,1032
 4005fe0:	212e5304 	addi	r4,r4,-18100
 4005fe4:	400c6980 	call	400c698 <puts>
 4005fe8:	00000306 	br	4005ff8 <main+0x9c>
    }else{
        printf("Init touch successfully\r\n");
 4005fec:	01010234 	movhi	r4,1032
 4005ff0:	212e5a04 	addi	r4,r4,-18072
 4005ff4:	400c6980 	call	400c698 <puts>

    }
   if (bVPG)
 4005ff8:	e0bffe17 	ldw	r2,-8(fp)
 4005ffc:	10000226 	beq	r2,zero,4006008 <main+0xac>
       GUI_VPG(pTouch); // enter vpg mode when users press KEY0
 4006000:	e13fff17 	ldw	r4,-4(fp)
 4006004:	4005e2c0 	call	4005e2c <GUI_VPG>
   GUI(pTouch);
 4006008:	e13fff17 	ldw	r4,-4(fp)
 400600c:	4004d480 	call	4004d48 <GUI>
  return 0;
 4006010:	0005883a 	mov	r2,zero
}
 4006014:	e037883a 	mov	sp,fp
 4006018:	dfc00117 	ldw	ra,4(sp)
 400601c:	df000017 	ldw	fp,0(sp)
 4006020:	dec00204 	addi	sp,sp,8
 4006024:	f800283a 	ret

04006028 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 4006028:	defffd04 	addi	sp,sp,-12
 400602c:	df000215 	stw	fp,8(sp)
 4006030:	df000204 	addi	fp,sp,8
 4006034:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 4006038:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 400603c:	00000306 	br	400604c <my_wait+0x24>
        i++;
 4006040:	e0bffe17 	ldw	r2,-8(fp)
 4006044:	10800044 	addi	r2,r2,1
 4006048:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 400604c:	e0fffe17 	ldw	r3,-8(fp)
 4006050:	e0bfff17 	ldw	r2,-4(fp)
 4006054:	18bffa16 	blt	r3,r2,4006040 <__alt_mem_epcs_flash_controller_0+0xfb005040>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 4006058:	0001883a 	nop
 400605c:	e037883a 	mov	sp,fp
 4006060:	df000017 	ldw	fp,0(sp)
 4006064:	dec00104 	addi	sp,sp,4
 4006068:	f800283a 	ret

0400606c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 400606c:	defff804 	addi	sp,sp,-32
 4006070:	dfc00715 	stw	ra,28(sp)
 4006074:	df000615 	stw	fp,24(sp)
 4006078:	df000604 	addi	fp,sp,24
 400607c:	e13ffb15 	stw	r4,-20(fp)
 4006080:	e17ffc15 	stw	r5,-16(fp)
 4006084:	3009883a 	mov	r4,r6
 4006088:	3807883a 	mov	r3,r7
 400608c:	e0800217 	ldw	r2,8(fp)
 4006090:	e13ffd05 	stb	r4,-12(fp)
 4006094:	e0fffe05 	stb	r3,-8(fp)
 4006098:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 400609c:	00800044 	movi	r2,1
 40060a0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 40060a4:	e17ffc17 	ldw	r5,-16(fp)
 40060a8:	e13ffb17 	ldw	r4,-20(fp)
 40060ac:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40060b0:	e0bffd03 	ldbu	r2,-12(fp)
 40060b4:	10803fcc 	andi	r2,r2,255
 40060b8:	100d883a 	mov	r6,r2
 40060bc:	e17ffc17 	ldw	r5,-16(fp)
 40060c0:	e13ffb17 	ldw	r4,-20(fp)
 40060c4:	40067c00 	call	40067c0 <i2c_write>
 40060c8:	1000041e 	bne	r2,zero,40060dc <I2C_Write+0x70>
        bSuccess = FALSE;
 40060cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40060d0:	01010234 	movhi	r4,1032
 40060d4:	212e6104 	addi	r4,r4,-18044
 40060d8:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40060dc:	e0bffa17 	ldw	r2,-24(fp)
 40060e0:	10000a26 	beq	r2,zero,400610c <I2C_Write+0xa0>
 40060e4:	e0bffe03 	ldbu	r2,-8(fp)
 40060e8:	100d883a 	mov	r6,r2
 40060ec:	e17ffc17 	ldw	r5,-16(fp)
 40060f0:	e13ffb17 	ldw	r4,-20(fp)
 40060f4:	40067c00 	call	40067c0 <i2c_write>
 40060f8:	1000041e 	bne	r2,zero,400610c <I2C_Write+0xa0>
        bSuccess = FALSE;
 40060fc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4006100:	01010234 	movhi	r4,1032
 4006104:	212e6904 	addi	r4,r4,-18012
 4006108:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 400610c:	e0bffa17 	ldw	r2,-24(fp)
 4006110:	10000a26 	beq	r2,zero,400613c <I2C_Write+0xd0>
 4006114:	e0bfff03 	ldbu	r2,-4(fp)
 4006118:	100d883a 	mov	r6,r2
 400611c:	e17ffc17 	ldw	r5,-16(fp)
 4006120:	e13ffb17 	ldw	r4,-20(fp)
 4006124:	40067c00 	call	40067c0 <i2c_write>
 4006128:	1000041e 	bne	r2,zero,400613c <I2C_Write+0xd0>
        bSuccess = FALSE;
 400612c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006130:	01010234 	movhi	r4,1032
 4006134:	212e7204 	addi	r4,r4,-17976
 4006138:	4007f680 	call	4007f68 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 400613c:	e17ffc17 	ldw	r5,-16(fp)
 4006140:	e13ffb17 	ldw	r4,-20(fp)
 4006144:	40067400 	call	4006740 <i2c_stop>
    
    usleep(7*100); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006148:	0100af04 	movi	r4,700
 400614c:	401a3000 	call	401a300 <usleep>
    
    return bSuccess;
 4006150:	e0bffa17 	ldw	r2,-24(fp)

    
}
 4006154:	e037883a 	mov	sp,fp
 4006158:	dfc00117 	ldw	ra,4(sp)
 400615c:	df000017 	ldw	fp,0(sp)
 4006160:	dec00204 	addi	sp,sp,8
 4006164:	f800283a 	ret

04006168 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 4006168:	defff704 	addi	sp,sp,-36
 400616c:	dfc00815 	stw	ra,32(sp)
 4006170:	df000715 	stw	fp,28(sp)
 4006174:	df000704 	addi	fp,sp,28
 4006178:	e13ffb15 	stw	r4,-20(fp)
 400617c:	e17ffc15 	stw	r5,-16(fp)
 4006180:	3009883a 	mov	r4,r6
 4006184:	3807883a 	mov	r3,r7
 4006188:	e0800217 	ldw	r2,8(fp)
 400618c:	e13ffd05 	stb	r4,-12(fp)
 4006190:	e0fffe05 	stb	r3,-8(fp)
 4006194:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4006198:	00800044 	movi	r2,1
 400619c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 40061a0:	e0bfff0b 	ldhu	r2,-4(fp)
 40061a4:	1004d23a 	srli	r2,r2,8
 40061a8:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 40061ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40061b0:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40061b4:	e17ffc17 	ldw	r5,-16(fp)
 40061b8:	e13ffb17 	ldw	r4,-20(fp)
 40061bc:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40061c0:	e0bffd03 	ldbu	r2,-12(fp)
 40061c4:	10803fcc 	andi	r2,r2,255
 40061c8:	100d883a 	mov	r6,r2
 40061cc:	e17ffc17 	ldw	r5,-16(fp)
 40061d0:	e13ffb17 	ldw	r4,-20(fp)
 40061d4:	40067c00 	call	40067c0 <i2c_write>
 40061d8:	1000041e 	bne	r2,zero,40061ec <I2C_Write16+0x84>
        bSuccess = FALSE;
 40061dc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40061e0:	01010234 	movhi	r4,1032
 40061e4:	212e6104 	addi	r4,r4,-18044
 40061e8:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40061ec:	e0bff917 	ldw	r2,-28(fp)
 40061f0:	10000a26 	beq	r2,zero,400621c <I2C_Write16+0xb4>
 40061f4:	e0bffe03 	ldbu	r2,-8(fp)
 40061f8:	100d883a 	mov	r6,r2
 40061fc:	e17ffc17 	ldw	r5,-16(fp)
 4006200:	e13ffb17 	ldw	r4,-20(fp)
 4006204:	40067c00 	call	40067c0 <i2c_write>
 4006208:	1000041e 	bne	r2,zero,400621c <I2C_Write16+0xb4>
        bSuccess = FALSE;
 400620c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4006210:	01010234 	movhi	r4,1032
 4006214:	212e6904 	addi	r4,r4,-18012
 4006218:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 400621c:	e0bff917 	ldw	r2,-28(fp)
 4006220:	10000a26 	beq	r2,zero,400624c <I2C_Write16+0xe4>
 4006224:	e0bffa03 	ldbu	r2,-24(fp)
 4006228:	100d883a 	mov	r6,r2
 400622c:	e17ffc17 	ldw	r5,-16(fp)
 4006230:	e13ffb17 	ldw	r4,-20(fp)
 4006234:	40067c00 	call	40067c0 <i2c_write>
 4006238:	1000041e 	bne	r2,zero,400624c <I2C_Write16+0xe4>
        bSuccess = FALSE;
 400623c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006240:	01010234 	movhi	r4,1032
 4006244:	212e7204 	addi	r4,r4,-17976
 4006248:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 400624c:	e0bff917 	ldw	r2,-28(fp)
 4006250:	10000a26 	beq	r2,zero,400627c <I2C_Write16+0x114>
 4006254:	e0bffa43 	ldbu	r2,-23(fp)
 4006258:	100d883a 	mov	r6,r2
 400625c:	e17ffc17 	ldw	r5,-16(fp)
 4006260:	e13ffb17 	ldw	r4,-20(fp)
 4006264:	40067c00 	call	40067c0 <i2c_write>
 4006268:	1000041e 	bne	r2,zero,400627c <I2C_Write16+0x114>
        bSuccess = FALSE;
 400626c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006270:	01010234 	movhi	r4,1032
 4006274:	212e7204 	addi	r4,r4,-17976
 4006278:	4007f680 	call	4007f68 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 400627c:	e17ffc17 	ldw	r5,-16(fp)
 4006280:	e13ffb17 	ldw	r4,-20(fp)
 4006284:	40067400 	call	4006740 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006288:	0106d604 	movi	r4,7000
 400628c:	401a3000 	call	401a300 <usleep>
    
    return bSuccess;
 4006290:	e0bff917 	ldw	r2,-28(fp)
}
 4006294:	e037883a 	mov	sp,fp
 4006298:	dfc00117 	ldw	ra,4(sp)
 400629c:	df000017 	ldw	fp,0(sp)
 40062a0:	dec00204 	addi	sp,sp,8
 40062a4:	f800283a 	ret

040062a8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 40062a8:	defff904 	addi	sp,sp,-28
 40062ac:	dfc00615 	stw	ra,24(sp)
 40062b0:	df000515 	stw	fp,20(sp)
 40062b4:	df000504 	addi	fp,sp,20
 40062b8:	e13ffc15 	stw	r4,-16(fp)
 40062bc:	e17ffd15 	stw	r5,-12(fp)
 40062c0:	3007883a 	mov	r3,r6
 40062c4:	3805883a 	mov	r2,r7
 40062c8:	e0fffe05 	stb	r3,-8(fp)
 40062cc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40062d0:	00800044 	movi	r2,1
 40062d4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40062d8:	e0bffe03 	ldbu	r2,-8(fp)
 40062dc:	10803fcc 	andi	r2,r2,255
 40062e0:	100d883a 	mov	r6,r2
 40062e4:	e17ffd17 	ldw	r5,-12(fp)
 40062e8:	e13ffc17 	ldw	r4,-16(fp)
 40062ec:	40067c00 	call	40067c0 <i2c_write>
 40062f0:	1000041e 	bne	r2,zero,4006304 <I2C_Read+0x5c>
        bSuccess = FALSE;
 40062f4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 40062f8:	01010234 	movhi	r4,1032
 40062fc:	212e7a04 	addi	r4,r4,-17944
 4006300:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4006304:	e0bffb17 	ldw	r2,-20(fp)
 4006308:	10000a26 	beq	r2,zero,4006334 <I2C_Read+0x8c>
 400630c:	e0bfff03 	ldbu	r2,-4(fp)
 4006310:	100d883a 	mov	r6,r2
 4006314:	e17ffd17 	ldw	r5,-12(fp)
 4006318:	e13ffc17 	ldw	r4,-16(fp)
 400631c:	40067c00 	call	40067c0 <i2c_write>
 4006320:	1000041e 	bne	r2,zero,4006334 <I2C_Read+0x8c>
        bSuccess = FALSE;
 4006324:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 4006328:	01010234 	movhi	r4,1032
 400632c:	212e8304 	addi	r4,r4,-17908
 4006330:	4007f680 	call	4007f68 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4006334:	e17ffd17 	ldw	r5,-12(fp)
 4006338:	e13ffc17 	ldw	r4,-16(fp)
 400633c:	40066b40 	call	40066b4 <i2c_start>
    DeviceAddr |= 1; // Read
 4006340:	e0bffe03 	ldbu	r2,-8(fp)
 4006344:	10800054 	ori	r2,r2,1
 4006348:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 400634c:	e0bffb17 	ldw	r2,-20(fp)
 4006350:	10000b26 	beq	r2,zero,4006380 <I2C_Read+0xd8>
 4006354:	e0bffe03 	ldbu	r2,-8(fp)
 4006358:	10803fcc 	andi	r2,r2,255
 400635c:	100d883a 	mov	r6,r2
 4006360:	e17ffd17 	ldw	r5,-12(fp)
 4006364:	e13ffc17 	ldw	r4,-16(fp)
 4006368:	40067c00 	call	40067c0 <i2c_write>
 400636c:	1000041e 	bne	r2,zero,4006380 <I2C_Read+0xd8>
        bSuccess = FALSE;
 4006370:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 4006374:	01010234 	movhi	r4,1032
 4006378:	212e8c04 	addi	r4,r4,-17872
 400637c:	4007f680 	call	4007f68 <myprintf>
    }
    
    if (bSuccess){
 4006380:	e0bffb17 	ldw	r2,-20(fp)
 4006384:	10000526 	beq	r2,zero,400639c <I2C_Read+0xf4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4006388:	000f883a 	mov	r7,zero
 400638c:	e1800217 	ldw	r6,8(fp)
 4006390:	e17ffd17 	ldw	r5,-12(fp)
 4006394:	e13ffc17 	ldw	r4,-16(fp)
 4006398:	40069080 	call	4006908 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 400639c:	e17ffd17 	ldw	r5,-12(fp)
 40063a0:	e13ffc17 	ldw	r4,-16(fp)
 40063a4:	40067400 	call	4006740 <i2c_stop>
    
    return bSuccess;
 40063a8:	e0bffb17 	ldw	r2,-20(fp)
}
 40063ac:	e037883a 	mov	sp,fp
 40063b0:	dfc00117 	ldw	ra,4(sp)
 40063b4:	df000017 	ldw	fp,0(sp)
 40063b8:	dec00204 	addi	sp,sp,8
 40063bc:	f800283a 	ret

040063c0 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 40063c0:	defff804 	addi	sp,sp,-32
 40063c4:	dfc00715 	stw	ra,28(sp)
 40063c8:	df000615 	stw	fp,24(sp)
 40063cc:	df000604 	addi	fp,sp,24
 40063d0:	e13ffc15 	stw	r4,-16(fp)
 40063d4:	e17ffd15 	stw	r5,-12(fp)
 40063d8:	3007883a 	mov	r3,r6
 40063dc:	3805883a 	mov	r2,r7
 40063e0:	e0fffe05 	stb	r3,-8(fp)
 40063e4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40063e8:	00800044 	movi	r2,1
 40063ec:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 LowByte, HighByte;
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 40063f0:	e17ffd17 	ldw	r5,-12(fp)
 40063f4:	e13ffc17 	ldw	r4,-16(fp)
 40063f8:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40063fc:	e0bffe03 	ldbu	r2,-8(fp)
 4006400:	10803fcc 	andi	r2,r2,255
 4006404:	100d883a 	mov	r6,r2
 4006408:	e17ffd17 	ldw	r5,-12(fp)
 400640c:	e13ffc17 	ldw	r4,-16(fp)
 4006410:	40067c00 	call	40067c0 <i2c_write>
 4006414:	1000041e 	bne	r2,zero,4006428 <I2C_Read16+0x68>
        bSuccess = FALSE;
 4006418:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 400641c:	01010234 	movhi	r4,1032
 4006420:	212e6104 	addi	r4,r4,-18044
 4006424:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4006428:	e0bffa17 	ldw	r2,-24(fp)
 400642c:	10000a26 	beq	r2,zero,4006458 <I2C_Read16+0x98>
 4006430:	e0bfff03 	ldbu	r2,-4(fp)
 4006434:	100d883a 	mov	r6,r2
 4006438:	e17ffd17 	ldw	r5,-12(fp)
 400643c:	e13ffc17 	ldw	r4,-16(fp)
 4006440:	40067c00 	call	40067c0 <i2c_write>
 4006444:	1000041e 	bne	r2,zero,4006458 <I2C_Read16+0x98>
        bSuccess = FALSE;
 4006448:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 400644c:	01010234 	movhi	r4,1032
 4006450:	212e6904 	addi	r4,r4,-18012
 4006454:	4007f680 	call	4007f68 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4006458:	e17ffd17 	ldw	r5,-12(fp)
 400645c:	e13ffc17 	ldw	r4,-16(fp)
 4006460:	40066b40 	call	40066b4 <i2c_start>
    DeviceAddr |= 1; // Read
 4006464:	e0bffe03 	ldbu	r2,-8(fp)
 4006468:	10800054 	ori	r2,r2,1
 400646c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006470:	e0bffa17 	ldw	r2,-24(fp)
 4006474:	10000b26 	beq	r2,zero,40064a4 <I2C_Read16+0xe4>
 4006478:	e0bffe03 	ldbu	r2,-8(fp)
 400647c:	10803fcc 	andi	r2,r2,255
 4006480:	100d883a 	mov	r6,r2
 4006484:	e17ffd17 	ldw	r5,-12(fp)
 4006488:	e13ffc17 	ldw	r4,-16(fp)
 400648c:	40067c00 	call	40067c0 <i2c_write>
 4006490:	1000041e 	bne	r2,zero,40064a4 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 4006494:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4006498:	01010234 	movhi	r4,1032
 400649c:	212e9504 	addi	r4,r4,-17836
 40064a0:	4007f680 	call	4007f68 <myprintf>
    }
    
    if (bSuccess){
 40064a4:	e0bffa17 	ldw	r2,-24(fp)
 40064a8:	10000626 	beq	r2,zero,40064c4 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 40064ac:	e0bffb44 	addi	r2,fp,-19
 40064b0:	01c00044 	movi	r7,1
 40064b4:	100d883a 	mov	r6,r2
 40064b8:	e17ffd17 	ldw	r5,-12(fp)
 40064bc:	e13ffc17 	ldw	r4,-16(fp)
 40064c0:	40069080 	call	4006908 <i2c_read>
    }        
    if (bSuccess){
 40064c4:	e0bffa17 	ldw	r2,-24(fp)
 40064c8:	10000626 	beq	r2,zero,40064e4 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 40064cc:	e0bffb04 	addi	r2,fp,-20
 40064d0:	000f883a 	mov	r7,zero
 40064d4:	100d883a 	mov	r6,r2
 40064d8:	e17ffd17 	ldw	r5,-12(fp)
 40064dc:	e13ffc17 	ldw	r4,-16(fp)
 40064e0:	40069080 	call	4006908 <i2c_read>
    }        
    if (bSuccess)
 40064e4:	e0bffa17 	ldw	r2,-24(fp)
 40064e8:	10000a26 	beq	r2,zero,4006514 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 40064ec:	e0bffb43 	ldbu	r2,-19(fp)
 40064f0:	10803fcc 	andi	r2,r2,255
 40064f4:	1004923a 	slli	r2,r2,8
 40064f8:	1007883a 	mov	r3,r2
 40064fc:	e0bffb03 	ldbu	r2,-20(fp)
 4006500:	10803fcc 	andi	r2,r2,255
 4006504:	1884b03a 	or	r2,r3,r2
 4006508:	1007883a 	mov	r3,r2
 400650c:	e0800217 	ldw	r2,8(fp)
 4006510:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 4006514:	e17ffd17 	ldw	r5,-12(fp)
 4006518:	e13ffc17 	ldw	r4,-16(fp)
 400651c:	40067400 	call	4006740 <i2c_stop>
    return bSuccess;
 4006520:	e0bffa17 	ldw	r2,-24(fp)
}
 4006524:	e037883a 	mov	sp,fp
 4006528:	dfc00117 	ldw	ra,4(sp)
 400652c:	df000017 	ldw	fp,0(sp)
 4006530:	dec00204 	addi	sp,sp,8
 4006534:	f800283a 	ret

04006538 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 4006538:	defff704 	addi	sp,sp,-36
 400653c:	dfc00815 	stw	ra,32(sp)
 4006540:	df000715 	stw	fp,28(sp)
 4006544:	df000704 	addi	fp,sp,28
 4006548:	e13ffb15 	stw	r4,-20(fp)
 400654c:	e17ffc15 	stw	r5,-16(fp)
 4006550:	3009883a 	mov	r4,r6
 4006554:	3807883a 	mov	r3,r7
 4006558:	e0800317 	ldw	r2,12(fp)
 400655c:	e13ffd05 	stb	r4,-12(fp)
 4006560:	e0fffe05 	stb	r3,-8(fp)
 4006564:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4006568:	00800044 	movi	r2,1
 400656c:	e0bffa15 	stw	r2,-24(fp)
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;
    i2c_start(clk_base, data_base);
 4006570:	e17ffc17 	ldw	r5,-16(fp)
 4006574:	e13ffb17 	ldw	r4,-20(fp)
 4006578:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 400657c:	e0bffd03 	ldbu	r2,-12(fp)
 4006580:	10803fcc 	andi	r2,r2,255
 4006584:	100d883a 	mov	r6,r2
 4006588:	e17ffc17 	ldw	r5,-16(fp)
 400658c:	e13ffb17 	ldw	r4,-20(fp)
 4006590:	40067c00 	call	40067c0 <i2c_write>
 4006594:	1000041e 	bne	r2,zero,40065a8 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 4006598:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 400659c:	01010234 	movhi	r4,1032
 40065a0:	212e9e04 	addi	r4,r4,-17800
 40065a4:	4007f680 	call	4007f68 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40065a8:	e0bffa17 	ldw	r2,-24(fp)
 40065ac:	10000a26 	beq	r2,zero,40065d8 <I2C_MultipleRead+0xa0>
 40065b0:	e0bffe03 	ldbu	r2,-8(fp)
 40065b4:	100d883a 	mov	r6,r2
 40065b8:	e17ffc17 	ldw	r5,-16(fp)
 40065bc:	e13ffb17 	ldw	r4,-20(fp)
 40065c0:	40067c00 	call	40067c0 <i2c_write>
 40065c4:	1000041e 	bne	r2,zero,40065d8 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 40065c8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 40065cc:	01010234 	movhi	r4,1032
 40065d0:	212ea904 	addi	r4,r4,-17756
 40065d4:	4007f680 	call	4007f68 <myprintf>
    }    
    if (bSuccess)        
 40065d8:	e0bffa17 	ldw	r2,-24(fp)
 40065dc:	10000326 	beq	r2,zero,40065ec <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 40065e0:	e17ffc17 	ldw	r5,-16(fp)
 40065e4:	e13ffb17 	ldw	r4,-20(fp)
 40065e8:	40066b40 	call	40066b4 <i2c_start>
    DeviceAddr |= 1; // Read
 40065ec:	e0bffd03 	ldbu	r2,-12(fp)
 40065f0:	10800054 	ori	r2,r2,1
 40065f4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 40065f8:	e0bffa17 	ldw	r2,-24(fp)
 40065fc:	10000b26 	beq	r2,zero,400662c <I2C_MultipleRead+0xf4>
 4006600:	e0bffd03 	ldbu	r2,-12(fp)
 4006604:	10803fcc 	andi	r2,r2,255
 4006608:	100d883a 	mov	r6,r2
 400660c:	e17ffc17 	ldw	r5,-16(fp)
 4006610:	e13ffb17 	ldw	r4,-20(fp)
 4006614:	40067c00 	call	40067c0 <i2c_write>
 4006618:	1000041e 	bne	r2,zero,400662c <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 400661c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 4006620:	01010234 	movhi	r4,1032
 4006624:	212eb404 	addi	r4,r4,-17712
 4006628:	4007f680 	call	4007f68 <myprintf>
    }
    
    if (bSuccess){
 400662c:	e0bffa17 	ldw	r2,-24(fp)
 4006630:	10001726 	beq	r2,zero,4006690 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 4006634:	e03ff915 	stw	zero,-28(fp)
 4006638:	00001006 	br	400667c <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 400663c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006640:	10ffffc4 	addi	r3,r2,-1
 4006644:	e0bff917 	ldw	r2,-28(fp)
 4006648:	1884c03a 	cmpne	r2,r3,r2
 400664c:	10803fcc 	andi	r2,r2,255
 4006650:	100f883a 	mov	r7,r2
 4006654:	e1800217 	ldw	r6,8(fp)
 4006658:	e17ffc17 	ldw	r5,-16(fp)
 400665c:	e13ffb17 	ldw	r4,-20(fp)
 4006660:	40069080 	call	4006908 <i2c_read>
            pBuf++;
 4006664:	e0800217 	ldw	r2,8(fp)
 4006668:	10800044 	addi	r2,r2,1
 400666c:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4006670:	e0bff917 	ldw	r2,-28(fp)
 4006674:	10800044 	addi	r2,r2,1
 4006678:	e0bff915 	stw	r2,-28(fp)
 400667c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006680:	e0fff917 	ldw	r3,-28(fp)
 4006684:	1880020e 	bge	r3,r2,4006690 <I2C_MultipleRead+0x158>
 4006688:	e0bffa17 	ldw	r2,-24(fp)
 400668c:	103feb1e 	bne	r2,zero,400663c <__alt_mem_epcs_flash_controller_0+0xfb00563c>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 4006690:	e17ffc17 	ldw	r5,-16(fp)
 4006694:	e13ffb17 	ldw	r4,-20(fp)
 4006698:	40067400 	call	4006740 <i2c_stop>
    
    return bSuccess;    
 400669c:	e0bffa17 	ldw	r2,-24(fp)
    
}
 40066a0:	e037883a 	mov	sp,fp
 40066a4:	dfc00117 	ldw	ra,4(sp)
 40066a8:	df000017 	ldw	fp,0(sp)
 40066ac:	dec00204 	addi	sp,sp,8
 40066b0:	f800283a 	ret

040066b4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 40066b4:	defffc04 	addi	sp,sp,-16
 40066b8:	dfc00315 	stw	ra,12(sp)
 40066bc:	df000215 	stw	fp,8(sp)
 40066c0:	df000204 	addi	fp,sp,8
 40066c4:	e13ffe15 	stw	r4,-8(fp)
 40066c8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 40066cc:	e0bfff17 	ldw	r2,-4(fp)
 40066d0:	10800104 	addi	r2,r2,4
 40066d4:	1007883a 	mov	r3,r2
 40066d8:	00800044 	movi	r2,1
 40066dc:	18800035 	stwio	r2,0(r3)
    // start condition
    SDA_HIGH(data_base); // data high
 40066e0:	e0bfff17 	ldw	r2,-4(fp)
 40066e4:	00c00044 	movi	r3,1
 40066e8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 40066ec:	e0bffe17 	ldw	r2,-8(fp)
 40066f0:	00c00044 	movi	r3,1
 40066f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 40066f8:	01000784 	movi	r4,30
 40066fc:	401a3000 	call	401a300 <usleep>
    SDA_LOW(data_base); // data low
 4006700:	e0bfff17 	ldw	r2,-4(fp)
 4006704:	0007883a 	mov	r3,zero
 4006708:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 400670c:	01000784 	movi	r4,30
 4006710:	401a3000 	call	401a300 <usleep>
    SCL_LOW(clk_base); // clock low
 4006714:	e0bffe17 	ldw	r2,-8(fp)
 4006718:	0007883a 	mov	r3,zero
 400671c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4006720:	01000784 	movi	r4,30
 4006724:	401a3000 	call	401a300 <usleep>
}
 4006728:	0001883a 	nop
 400672c:	e037883a 	mov	sp,fp
 4006730:	dfc00117 	ldw	ra,4(sp)
 4006734:	df000017 	ldw	fp,0(sp)
 4006738:	dec00204 	addi	sp,sp,8
 400673c:	f800283a 	ret

04006740 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 4006740:	defffc04 	addi	sp,sp,-16
 4006744:	dfc00315 	stw	ra,12(sp)
 4006748:	df000215 	stw	fp,8(sp)
 400674c:	df000204 	addi	fp,sp,8
 4006750:	e13ffe15 	stw	r4,-8(fp)
 4006754:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 4006758:	e0bfff17 	ldw	r2,-4(fp)
 400675c:	10800104 	addi	r2,r2,4
 4006760:	1007883a 	mov	r3,r2
 4006764:	00800044 	movi	r2,1
 4006768:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 400676c:	e0bfff17 	ldw	r2,-4(fp)
 4006770:	0007883a 	mov	r3,zero
 4006774:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4006778:	01000784 	movi	r4,30
 400677c:	401a3000 	call	401a300 <usleep>
    SCL_HIGH(clk_base);  // clock high
 4006780:	e0bffe17 	ldw	r2,-8(fp)
 4006784:	00c00044 	movi	r3,1
 4006788:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 400678c:	01000784 	movi	r4,30
 4006790:	401a3000 	call	401a300 <usleep>
    SDA_HIGH(data_base); // data high
 4006794:	e0bfff17 	ldw	r2,-4(fp)
 4006798:	00c00044 	movi	r3,1
 400679c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 40067a0:	01000784 	movi	r4,30
 40067a4:	401a3000 	call	401a300 <usleep>
 //   SDA_DIR_IN(data_base);  // data read modes
}
 40067a8:	0001883a 	nop
 40067ac:	e037883a 	mov	sp,fp
 40067b0:	dfc00117 	ldw	ra,4(sp)
 40067b4:	df000017 	ldw	fp,0(sp)
 40067b8:	dec00204 	addi	sp,sp,8
 40067bc:	f800283a 	ret

040067c0 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 40067c0:	defff804 	addi	sp,sp,-32
 40067c4:	dfc00715 	stw	ra,28(sp)
 40067c8:	df000615 	stw	fp,24(sp)
 40067cc:	df000604 	addi	fp,sp,24
 40067d0:	e13ffd15 	stw	r4,-12(fp)
 40067d4:	e17ffe15 	stw	r5,-8(fp)
 40067d8:	3005883a 	mov	r2,r6
 40067dc:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 40067e0:	00bfe004 	movi	r2,-128
 40067e4:	e0bffa05 	stb	r2,-24(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 40067e8:	e0bffe17 	ldw	r2,-8(fp)
 40067ec:	10800104 	addi	r2,r2,4
 40067f0:	1007883a 	mov	r3,r2
 40067f4:	00800044 	movi	r2,1
 40067f8:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 40067fc:	e03ffb15 	stw	zero,-20(fp)
 4006800:	00002106 	br	4006888 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 4006804:	e0bffd17 	ldw	r2,-12(fp)
 4006808:	0007883a 	mov	r3,zero
 400680c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 4006810:	e0ffff03 	ldbu	r3,-4(fp)
 4006814:	e0bffa03 	ldbu	r2,-24(fp)
 4006818:	1884703a 	and	r2,r3,r2
 400681c:	10803fcc 	andi	r2,r2,255
 4006820:	10000426 	beq	r2,zero,4006834 <i2c_write+0x74>
            SDA_HIGH(data_base);
 4006824:	e0bffe17 	ldw	r2,-8(fp)
 4006828:	00c00044 	movi	r3,1
 400682c:	10c00035 	stwio	r3,0(r2)
 4006830:	00000306 	br	4006840 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 4006834:	e0bffe17 	ldw	r2,-8(fp)
 4006838:	0007883a 	mov	r3,zero
 400683c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 4006840:	e0bffa03 	ldbu	r2,-24(fp)
 4006844:	1004d07a 	srli	r2,r2,1
 4006848:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_DELAY;
 400684c:	01000784 	movi	r4,30
 4006850:	401a3000 	call	401a300 <usleep>
        SCL_HIGH(clk_base);
 4006854:	e0bffd17 	ldw	r2,-12(fp)
 4006858:	00c00044 	movi	r3,1
 400685c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006860:	01000784 	movi	r4,30
 4006864:	401a3000 	call	401a300 <usleep>
        SCL_LOW(clk_base);
 4006868:	e0bffd17 	ldw	r2,-12(fp)
 400686c:	0007883a 	mov	r3,zero
 4006870:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006874:	01000784 	movi	r4,30
 4006878:	401a3000 	call	401a300 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 400687c:	e0bffb17 	ldw	r2,-20(fp)
 4006880:	10800044 	addi	r2,r2,1
 4006884:	e0bffb15 	stw	r2,-20(fp)
 4006888:	e0bffb17 	ldw	r2,-20(fp)
 400688c:	10800210 	cmplti	r2,r2,8
 4006890:	103fdc1e 	bne	r2,zero,4006804 <__alt_mem_epcs_flash_controller_0+0xfb005804>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 4006894:	e0bffe17 	ldw	r2,-8(fp)
 4006898:	10800104 	addi	r2,r2,4
 400689c:	0007883a 	mov	r3,zero
 40068a0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
    SCL_DELAY;
 40068a4:	01000784 	movi	r4,30
 40068a8:	401a3000 	call	401a300 <usleep>
//	while(SDA_READ(data_base) && w++ < 1000000){
//	}


    // clock high
    SCL_HIGH(clk_base);  // clock high
 40068ac:	e0bffd17 	ldw	r2,-12(fp)
 40068b0:	00c00044 	movi	r3,1
 40068b4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 40068b8:	01000784 	movi	r4,30
 40068bc:	401a3000 	call	401a300 <usleep>
    SCL_DELAY;  // clock high delay
 40068c0:	01000784 	movi	r4,30
 40068c4:	401a3000 	call	401a300 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 40068c8:	e0bffe17 	ldw	r2,-8(fp)
 40068cc:	10800037 	ldwio	r2,0(r2)
 40068d0:	1005003a 	cmpeq	r2,r2,zero
 40068d4:	10803fcc 	andi	r2,r2,255
 40068d8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 40068dc:	e0bffd17 	ldw	r2,-12(fp)
 40068e0:	0007883a 	mov	r3,zero
 40068e4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 40068e8:	01000784 	movi	r4,30
 40068ec:	401a3000 	call	401a300 <usleep>
    return bAck;
 40068f0:	e0bffc17 	ldw	r2,-16(fp)
}    
 40068f4:	e037883a 	mov	sp,fp
 40068f8:	dfc00117 	ldw	ra,4(sp)
 40068fc:	df000017 	ldw	fp,0(sp)
 4006900:	dec00204 	addi	sp,sp,8
 4006904:	f800283a 	ret

04006908 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 4006908:	defff804 	addi	sp,sp,-32
 400690c:	dfc00715 	stw	ra,28(sp)
 4006910:	df000615 	stw	fp,24(sp)
 4006914:	df000604 	addi	fp,sp,24
 4006918:	e13ffc15 	stw	r4,-16(fp)
 400691c:	e17ffd15 	stw	r5,-12(fp)
 4006920:	e1bffe15 	stw	r6,-8(fp)
 4006924:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 4006928:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
 400692c:	e0bffd17 	ldw	r2,-12(fp)
 4006930:	10800104 	addi	r2,r2,4
 4006934:	0007883a 	mov	r3,zero
 4006938:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 400693c:	e0bffc17 	ldw	r2,-16(fp)
 4006940:	0007883a 	mov	r3,zero
 4006944:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4006948:	01000784 	movi	r4,30
 400694c:	401a3000 	call	401a300 <usleep>

    for(i=0;i<8;i++){
 4006950:	e03ffb15 	stw	zero,-20(fp)
 4006954:	00001606 	br	40069b0 <i2c_read+0xa8>
        Data <<= 1;
 4006958:	e0bffa03 	ldbu	r2,-24(fp)
 400695c:	1085883a 	add	r2,r2,r2
 4006960:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 4006964:	e0bffc17 	ldw	r2,-16(fp)
 4006968:	00c00044 	movi	r3,1
 400696c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4006970:	01000784 	movi	r4,30
 4006974:	401a3000 	call	401a300 <usleep>
        if (SDA_READ(data_base))  // read data   
 4006978:	e0bffd17 	ldw	r2,-12(fp)
 400697c:	10800037 	ldwio	r2,0(r2)
 4006980:	10000326 	beq	r2,zero,4006990 <i2c_read+0x88>
            Data |= 0x01;
 4006984:	e0bffa03 	ldbu	r2,-24(fp)
 4006988:	10800054 	ori	r2,r2,1
 400698c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 4006990:	e0bffc17 	ldw	r2,-16(fp)
 4006994:	0007883a 	mov	r3,zero
 4006998:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 400699c:	01000784 	movi	r4,30
 40069a0:	401a3000 	call	401a300 <usleep>
    // assume SCL = low
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 40069a4:	e0bffb17 	ldw	r2,-20(fp)
 40069a8:	10800044 	addi	r2,r2,1
 40069ac:	e0bffb15 	stw	r2,-20(fp)
 40069b0:	e0bffb17 	ldw	r2,-20(fp)
 40069b4:	10800210 	cmplti	r2,r2,8
 40069b8:	103fe71e 	bne	r2,zero,4006958 <__alt_mem_epcs_flash_controller_0+0xfb005958>
            Data |= 0x01;
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 40069bc:	e0bffc17 	ldw	r2,-16(fp)
 40069c0:	0007883a 	mov	r3,zero
 40069c4:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 40069c8:	e0bffd17 	ldw	r2,-12(fp)
 40069cc:	10800104 	addi	r2,r2,4
 40069d0:	1007883a 	mov	r3,r2
 40069d4:	00800044 	movi	r2,1
 40069d8:	18800035 	stwio	r2,0(r3)
    if (bAck)
 40069dc:	e0bfff17 	ldw	r2,-4(fp)
 40069e0:	10000426 	beq	r2,zero,40069f4 <i2c_read+0xec>
        SDA_LOW(data_base);
 40069e4:	e0bffd17 	ldw	r2,-12(fp)
 40069e8:	0007883a 	mov	r3,zero
 40069ec:	10c00035 	stwio	r3,0(r2)
 40069f0:	00000306 	br	4006a00 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 40069f4:	e0bffd17 	ldw	r2,-12(fp)
 40069f8:	00c00044 	movi	r3,1
 40069fc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 4006a00:	e0bffc17 	ldw	r2,-16(fp)
 4006a04:	00c00044 	movi	r3,1
 4006a08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 4006a0c:	01000784 	movi	r4,30
 4006a10:	401a3000 	call	401a300 <usleep>
    SCL_LOW(clk_base); // clock low
 4006a14:	e0bffc17 	ldw	r2,-16(fp)
 4006a18:	0007883a 	mov	r3,zero
 4006a1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4006a20:	01000784 	movi	r4,30
 4006a24:	401a3000 	call	401a300 <usleep>
    SDA_LOW(data_base);  // data low
 4006a28:	e0bffd17 	ldw	r2,-12(fp)
 4006a2c:	0007883a 	mov	r3,zero
 4006a30:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 4006a34:	01000784 	movi	r4,30
 4006a38:	401a3000 	call	401a300 <usleep>
//    SDA_DIR_IN;  // set data read mode
    *pData = Data;
 4006a3c:	e0bffe17 	ldw	r2,-8(fp)
 4006a40:	e0fffa03 	ldbu	r3,-24(fp)
 4006a44:	10c00005 	stb	r3,0(r2)
}
 4006a48:	0001883a 	nop
 4006a4c:	e037883a 	mov	sp,fp
 4006a50:	dfc00117 	ldw	ra,4(sp)
 4006a54:	df000017 	ldw	fp,0(sp)
 4006a58:	dec00204 	addi	sp,sp,8
 4006a5c:	f800283a 	ret

04006a60 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 4006a60:	defff704 	addi	sp,sp,-36
 4006a64:	dfc00815 	stw	ra,32(sp)
 4006a68:	df000715 	stw	fp,28(sp)
 4006a6c:	df000704 	addi	fp,sp,28
 4006a70:	e13ffb15 	stw	r4,-20(fp)
 4006a74:	e17ffc15 	stw	r5,-16(fp)
 4006a78:	3009883a 	mov	r4,r6
 4006a7c:	3807883a 	mov	r3,r7
 4006a80:	e0800217 	ldw	r2,8(fp)
 4006a84:	e13ffd05 	stb	r4,-12(fp)
 4006a88:	e0fffe0d 	sth	r3,-8(fp)
 4006a8c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4006a90:	00800044 	movi	r2,1
 4006a94:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006a98:	e0bffe0b 	ldhu	r2,-8(fp)
 4006a9c:	1004d23a 	srli	r2,r2,8
 4006aa0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006aa4:	e0bffe0b 	ldhu	r2,-8(fp)
 4006aa8:	e0bffa45 	stb	r2,-23(fp)

    i2c_start(clk_base, data_base);
 4006aac:	e17ffc17 	ldw	r5,-16(fp)
 4006ab0:	e13ffb17 	ldw	r4,-20(fp)
 4006ab4:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006ab8:	e0bffd03 	ldbu	r2,-12(fp)
 4006abc:	10803fcc 	andi	r2,r2,255
 4006ac0:	100d883a 	mov	r6,r2
 4006ac4:	e17ffc17 	ldw	r5,-16(fp)
 4006ac8:	e13ffb17 	ldw	r4,-20(fp)
 4006acc:	40067c00 	call	40067c0 <i2c_write>
 4006ad0:	1000041e 	bne	r2,zero,4006ae4 <I2CL_Write+0x84>
        bSuccess = FALSE;
 4006ad4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006ad8:	01010234 	movhi	r4,1032
 4006adc:	212e6104 	addi	r4,r4,-18044
 4006ae0:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006ae4:	e0bff917 	ldw	r2,-28(fp)
 4006ae8:	10000a26 	beq	r2,zero,4006b14 <I2CL_Write+0xb4>
 4006aec:	e0bffa03 	ldbu	r2,-24(fp)
 4006af0:	100d883a 	mov	r6,r2
 4006af4:	e17ffc17 	ldw	r5,-16(fp)
 4006af8:	e13ffb17 	ldw	r4,-20(fp)
 4006afc:	40067c00 	call	40067c0 <i2c_write>
 4006b00:	1000041e 	bne	r2,zero,4006b14 <I2CL_Write+0xb4>
        bSuccess = FALSE;
 4006b04:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006b08:	01010234 	movhi	r4,1032
 4006b0c:	212ebf04 	addi	r4,r4,-17668
 4006b10:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006b14:	e0bff917 	ldw	r2,-28(fp)
 4006b18:	10000a26 	beq	r2,zero,4006b44 <I2CL_Write+0xe4>
 4006b1c:	e0bffa43 	ldbu	r2,-23(fp)
 4006b20:	100d883a 	mov	r6,r2
 4006b24:	e17ffc17 	ldw	r5,-16(fp)
 4006b28:	e13ffb17 	ldw	r4,-20(fp)
 4006b2c:	40067c00 	call	40067c0 <i2c_write>
 4006b30:	1000041e 	bne	r2,zero,4006b44 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 4006b34:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006b38:	01010234 	movhi	r4,1032
 4006b3c:	212ec904 	addi	r4,r4,-17628
 4006b40:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4006b44:	e0bff917 	ldw	r2,-28(fp)
 4006b48:	10000a26 	beq	r2,zero,4006b74 <I2CL_Write+0x114>
 4006b4c:	e0bfff03 	ldbu	r2,-4(fp)
 4006b50:	100d883a 	mov	r6,r2
 4006b54:	e17ffc17 	ldw	r5,-16(fp)
 4006b58:	e13ffb17 	ldw	r4,-20(fp)
 4006b5c:	40067c00 	call	40067c0 <i2c_write>
 4006b60:	1000041e 	bne	r2,zero,4006b74 <I2CL_Write+0x114>
        bSuccess = FALSE;
 4006b64:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006b68:	01010234 	movhi	r4,1032
 4006b6c:	212e7204 	addi	r4,r4,-17976
 4006b70:	4007f680 	call	4007f68 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4006b74:	e17ffc17 	ldw	r5,-16(fp)
 4006b78:	e13ffb17 	ldw	r4,-20(fp)
 4006b7c:	40067400 	call	4006740 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006b80:	0106d604 	movi	r4,7000
 4006b84:	401a3000 	call	401a300 <usleep>
    
    return bSuccess;
 4006b88:	e0bff917 	ldw	r2,-28(fp)
    
}
 4006b8c:	e037883a 	mov	sp,fp
 4006b90:	dfc00117 	ldw	ra,4(sp)
 4006b94:	df000017 	ldw	fp,0(sp)
 4006b98:	dec00204 	addi	sp,sp,8
 4006b9c:	f800283a 	ret

04006ba0 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 4006ba0:	defff804 	addi	sp,sp,-32
 4006ba4:	dfc00715 	stw	ra,28(sp)
 4006ba8:	df000615 	stw	fp,24(sp)
 4006bac:	df000604 	addi	fp,sp,24
 4006bb0:	e13ffc15 	stw	r4,-16(fp)
 4006bb4:	e17ffd15 	stw	r5,-12(fp)
 4006bb8:	3007883a 	mov	r3,r6
 4006bbc:	3805883a 	mov	r2,r7
 4006bc0:	e0fffe05 	stb	r3,-8(fp)
 4006bc4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4006bc8:	00800044 	movi	r2,1
 4006bcc:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006bd0:	e0bfff0b 	ldhu	r2,-4(fp)
 4006bd4:	1004d23a 	srli	r2,r2,8
 4006bd8:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006bdc:	e0bfff0b 	ldhu	r2,-4(fp)
 4006be0:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 4006be4:	e17ffd17 	ldw	r5,-12(fp)
 4006be8:	e13ffc17 	ldw	r4,-16(fp)
 4006bec:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006bf0:	e0bffe03 	ldbu	r2,-8(fp)
 4006bf4:	10803fcc 	andi	r2,r2,255
 4006bf8:	100d883a 	mov	r6,r2
 4006bfc:	e17ffd17 	ldw	r5,-12(fp)
 4006c00:	e13ffc17 	ldw	r4,-16(fp)
 4006c04:	40067c00 	call	40067c0 <i2c_write>
 4006c08:	1000041e 	bne	r2,zero,4006c1c <I2CL_Read+0x7c>
        bSuccess = FALSE;
 4006c0c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006c10:	01010234 	movhi	r4,1032
 4006c14:	212e6104 	addi	r4,r4,-18044
 4006c18:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006c1c:	e0bffa17 	ldw	r2,-24(fp)
 4006c20:	10000a26 	beq	r2,zero,4006c4c <I2CL_Read+0xac>
 4006c24:	e0bffb03 	ldbu	r2,-20(fp)
 4006c28:	100d883a 	mov	r6,r2
 4006c2c:	e17ffd17 	ldw	r5,-12(fp)
 4006c30:	e13ffc17 	ldw	r4,-16(fp)
 4006c34:	40067c00 	call	40067c0 <i2c_write>
 4006c38:	1000041e 	bne	r2,zero,4006c4c <I2CL_Read+0xac>
        bSuccess = FALSE;
 4006c3c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006c40:	01010234 	movhi	r4,1032
 4006c44:	212ebf04 	addi	r4,r4,-17668
 4006c48:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006c4c:	e0bffa17 	ldw	r2,-24(fp)
 4006c50:	10000a26 	beq	r2,zero,4006c7c <I2CL_Read+0xdc>
 4006c54:	e0bffb43 	ldbu	r2,-19(fp)
 4006c58:	100d883a 	mov	r6,r2
 4006c5c:	e17ffd17 	ldw	r5,-12(fp)
 4006c60:	e13ffc17 	ldw	r4,-16(fp)
 4006c64:	40067c00 	call	40067c0 <i2c_write>
 4006c68:	1000041e 	bne	r2,zero,4006c7c <I2CL_Read+0xdc>
        bSuccess = FALSE;
 4006c6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006c70:	01010234 	movhi	r4,1032
 4006c74:	212ec904 	addi	r4,r4,-17628
 4006c78:	4007f680 	call	4007f68 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4006c7c:	e17ffd17 	ldw	r5,-12(fp)
 4006c80:	e13ffc17 	ldw	r4,-16(fp)
 4006c84:	40066b40 	call	40066b4 <i2c_start>
    DeviceAddr |= 1; // Read
 4006c88:	e0bffe03 	ldbu	r2,-8(fp)
 4006c8c:	10800054 	ori	r2,r2,1
 4006c90:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006c94:	e0bffa17 	ldw	r2,-24(fp)
 4006c98:	10000b26 	beq	r2,zero,4006cc8 <I2CL_Read+0x128>
 4006c9c:	e0bffe03 	ldbu	r2,-8(fp)
 4006ca0:	10803fcc 	andi	r2,r2,255
 4006ca4:	100d883a 	mov	r6,r2
 4006ca8:	e17ffd17 	ldw	r5,-12(fp)
 4006cac:	e13ffc17 	ldw	r4,-16(fp)
 4006cb0:	40067c00 	call	40067c0 <i2c_write>
 4006cb4:	1000041e 	bne	r2,zero,4006cc8 <I2CL_Read+0x128>
        bSuccess = FALSE;
 4006cb8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4006cbc:	01010234 	movhi	r4,1032
 4006cc0:	212e9504 	addi	r4,r4,-17836
 4006cc4:	4007f680 	call	4007f68 <myprintf>
    }
    
    if (bSuccess){
 4006cc8:	e0bffa17 	ldw	r2,-24(fp)
 4006ccc:	10000526 	beq	r2,zero,4006ce4 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4006cd0:	000f883a 	mov	r7,zero
 4006cd4:	e1800217 	ldw	r6,8(fp)
 4006cd8:	e17ffd17 	ldw	r5,-12(fp)
 4006cdc:	e13ffc17 	ldw	r4,-16(fp)
 4006ce0:	40069080 	call	4006908 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4006ce4:	e17ffd17 	ldw	r5,-12(fp)
 4006ce8:	e13ffc17 	ldw	r4,-16(fp)
 4006cec:	40067400 	call	4006740 <i2c_stop>
    
    return bSuccess;    
 4006cf0:	e0bffa17 	ldw	r2,-24(fp)
}
 4006cf4:	e037883a 	mov	sp,fp
 4006cf8:	dfc00117 	ldw	ra,4(sp)
 4006cfc:	df000017 	ldw	fp,0(sp)
 4006d00:	dec00204 	addi	sp,sp,8
 4006d04:	f800283a 	ret

04006d08 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4006d08:	defff604 	addi	sp,sp,-40
 4006d0c:	dfc00915 	stw	ra,36(sp)
 4006d10:	df000815 	stw	fp,32(sp)
 4006d14:	df000804 	addi	fp,sp,32
 4006d18:	e13ffb15 	stw	r4,-20(fp)
 4006d1c:	e17ffc15 	stw	r5,-16(fp)
 4006d20:	3009883a 	mov	r4,r6
 4006d24:	3807883a 	mov	r3,r7
 4006d28:	e0800317 	ldw	r2,12(fp)
 4006d2c:	e13ffd05 	stb	r4,-12(fp)
 4006d30:	e0fffe0d 	sth	r3,-8(fp)
 4006d34:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4006d38:	00800044 	movi	r2,1
 4006d3c:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006d40:	e0bffe0b 	ldhu	r2,-8(fp)
 4006d44:	1004d23a 	srli	r2,r2,8
 4006d48:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 4006d4c:	e0bffe0b 	ldhu	r2,-8(fp)
 4006d50:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4006d54:	e17ffc17 	ldw	r5,-16(fp)
 4006d58:	e13ffb17 	ldw	r4,-20(fp)
 4006d5c:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006d60:	e0bffd03 	ldbu	r2,-12(fp)
 4006d64:	10803fcc 	andi	r2,r2,255
 4006d68:	100d883a 	mov	r6,r2
 4006d6c:	e17ffc17 	ldw	r5,-16(fp)
 4006d70:	e13ffb17 	ldw	r4,-20(fp)
 4006d74:	40067c00 	call	40067c0 <i2c_write>
 4006d78:	1000041e 	bne	r2,zero,4006d8c <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 4006d7c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006d80:	01010234 	movhi	r4,1032
 4006d84:	212e6104 	addi	r4,r4,-18044
 4006d88:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006d8c:	e0bff917 	ldw	r2,-28(fp)
 4006d90:	10000a26 	beq	r2,zero,4006dbc <I2CL_MultipleRead+0xb4>
 4006d94:	e0bffa03 	ldbu	r2,-24(fp)
 4006d98:	100d883a 	mov	r6,r2
 4006d9c:	e17ffc17 	ldw	r5,-16(fp)
 4006da0:	e13ffb17 	ldw	r4,-20(fp)
 4006da4:	40067c00 	call	40067c0 <i2c_write>
 4006da8:	1000041e 	bne	r2,zero,4006dbc <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 4006dac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006db0:	01010234 	movhi	r4,1032
 4006db4:	212ebf04 	addi	r4,r4,-17668
 4006db8:	4007f680 	call	4007f68 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006dbc:	e0bff917 	ldw	r2,-28(fp)
 4006dc0:	10000a26 	beq	r2,zero,4006dec <I2CL_MultipleRead+0xe4>
 4006dc4:	e0bffa43 	ldbu	r2,-23(fp)
 4006dc8:	100d883a 	mov	r6,r2
 4006dcc:	e17ffc17 	ldw	r5,-16(fp)
 4006dd0:	e13ffb17 	ldw	r4,-20(fp)
 4006dd4:	40067c00 	call	40067c0 <i2c_write>
 4006dd8:	1000041e 	bne	r2,zero,4006dec <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 4006ddc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006de0:	01010234 	movhi	r4,1032
 4006de4:	212ec904 	addi	r4,r4,-17628
 4006de8:	4007f680 	call	4007f68 <myprintf>
    }    
    if (bSuccess)        
 4006dec:	e0bff917 	ldw	r2,-28(fp)
 4006df0:	10000326 	beq	r2,zero,4006e00 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 4006df4:	e17ffc17 	ldw	r5,-16(fp)
 4006df8:	e13ffb17 	ldw	r4,-20(fp)
 4006dfc:	40066b40 	call	40066b4 <i2c_start>
    DeviceAddr |= 1; // Read
 4006e00:	e0bffd03 	ldbu	r2,-12(fp)
 4006e04:	10800054 	ori	r2,r2,1
 4006e08:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006e0c:	e0bff917 	ldw	r2,-28(fp)
 4006e10:	10000b26 	beq	r2,zero,4006e40 <I2CL_MultipleRead+0x138>
 4006e14:	e0bffd03 	ldbu	r2,-12(fp)
 4006e18:	10803fcc 	andi	r2,r2,255
 4006e1c:	100d883a 	mov	r6,r2
 4006e20:	e17ffc17 	ldw	r5,-16(fp)
 4006e24:	e13ffb17 	ldw	r4,-20(fp)
 4006e28:	40067c00 	call	40067c0 <i2c_write>
 4006e2c:	1000041e 	bne	r2,zero,4006e40 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 4006e30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 4006e34:	01010234 	movhi	r4,1032
 4006e38:	212ed304 	addi	r4,r4,-17588
 4006e3c:	4007f680 	call	4007f68 <myprintf>
    }
    
    if (bSuccess){
 4006e40:	e0bff917 	ldw	r2,-28(fp)
 4006e44:	10001726 	beq	r2,zero,4006ea4 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 4006e48:	e03ff815 	stw	zero,-32(fp)
 4006e4c:	00001006 	br	4006e90 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 4006e50:	e0bff817 	ldw	r2,-32(fp)
 4006e54:	e0c00217 	ldw	r3,8(fp)
 4006e58:	1889883a 	add	r4,r3,r2
 4006e5c:	e0bfff0b 	ldhu	r2,-4(fp)
 4006e60:	10ffffc4 	addi	r3,r2,-1
 4006e64:	e0bff817 	ldw	r2,-32(fp)
 4006e68:	1884c03a 	cmpne	r2,r3,r2
 4006e6c:	10803fcc 	andi	r2,r2,255
 4006e70:	100f883a 	mov	r7,r2
 4006e74:	200d883a 	mov	r6,r4
 4006e78:	e17ffc17 	ldw	r5,-16(fp)
 4006e7c:	e13ffb17 	ldw	r4,-20(fp)
 4006e80:	40069080 	call	4006908 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4006e84:	e0bff817 	ldw	r2,-32(fp)
 4006e88:	10800044 	addi	r2,r2,1
 4006e8c:	e0bff815 	stw	r2,-32(fp)
 4006e90:	e0bfff0b 	ldhu	r2,-4(fp)
 4006e94:	e0fff817 	ldw	r3,-32(fp)
 4006e98:	1880020e 	bge	r3,r2,4006ea4 <I2CL_MultipleRead+0x19c>
 4006e9c:	e0bff917 	ldw	r2,-28(fp)
 4006ea0:	103feb1e 	bne	r2,zero,4006e50 <__alt_mem_epcs_flash_controller_0+0xfb005e50>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 4006ea4:	e17ffc17 	ldw	r5,-16(fp)
 4006ea8:	e13ffb17 	ldw	r4,-20(fp)
 4006eac:	40067400 	call	4006740 <i2c_stop>
    
    return bSuccess;    
 4006eb0:	e0bff917 	ldw	r2,-28(fp)
    
} 
 4006eb4:	e037883a 	mov	sp,fp
 4006eb8:	dfc00117 	ldw	ra,4(sp)
 4006ebc:	df000017 	ldw	fp,0(sp)
 4006ec0:	dec00204 	addi	sp,sp,8
 4006ec4:	f800283a 	ret

04006ec8 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4006ec8:	defff604 	addi	sp,sp,-40
 4006ecc:	dfc00915 	stw	ra,36(sp)
 4006ed0:	df000815 	stw	fp,32(sp)
 4006ed4:	df000804 	addi	fp,sp,32
 4006ed8:	e13ffb15 	stw	r4,-20(fp)
 4006edc:	e17ffc15 	stw	r5,-16(fp)
 4006ee0:	3009883a 	mov	r4,r6
 4006ee4:	3807883a 	mov	r3,r7
 4006ee8:	e0800317 	ldw	r2,12(fp)
 4006eec:	e13ffd05 	stb	r4,-12(fp)
 4006ef0:	e0fffe0d 	sth	r3,-8(fp)
 4006ef4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4006ef8:	00800044 	movi	r2,1
 4006efc:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006f00:	e0bffe0b 	ldhu	r2,-8(fp)
 4006f04:	1004d23a 	srli	r2,r2,8
 4006f08:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006f0c:	e0bffe0b 	ldhu	r2,-8(fp)
 4006f10:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 4006f14:	e17ffc17 	ldw	r5,-16(fp)
 4006f18:	e13ffb17 	ldw	r4,-20(fp)
 4006f1c:	40066b40 	call	40066b4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006f20:	e0bffd03 	ldbu	r2,-12(fp)
 4006f24:	10803fcc 	andi	r2,r2,255
 4006f28:	100d883a 	mov	r6,r2
 4006f2c:	e17ffc17 	ldw	r5,-16(fp)
 4006f30:	e13ffb17 	ldw	r4,-20(fp)
 4006f34:	40067c00 	call	40067c0 <i2c_write>
 4006f38:	1000041e 	bne	r2,zero,4006f4c <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 4006f3c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006f40:	01010234 	movhi	r4,1032
 4006f44:	212e6104 	addi	r4,r4,-18044
 4006f48:	4007f680 	call	4007f68 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006f4c:	e0bff817 	ldw	r2,-32(fp)
 4006f50:	10000a26 	beq	r2,zero,4006f7c <I2CL_MultipleWrite+0xb4>
 4006f54:	e0bffa03 	ldbu	r2,-24(fp)
 4006f58:	100d883a 	mov	r6,r2
 4006f5c:	e17ffc17 	ldw	r5,-16(fp)
 4006f60:	e13ffb17 	ldw	r4,-20(fp)
 4006f64:	40067c00 	call	40067c0 <i2c_write>
 4006f68:	1000041e 	bne	r2,zero,4006f7c <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 4006f6c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006f70:	01010234 	movhi	r4,1032
 4006f74:	212ebf04 	addi	r4,r4,-17668
 4006f78:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4006f7c:	e0bff817 	ldw	r2,-32(fp)
 4006f80:	10000a26 	beq	r2,zero,4006fac <I2CL_MultipleWrite+0xe4>
 4006f84:	e0bffa43 	ldbu	r2,-23(fp)
 4006f88:	100d883a 	mov	r6,r2
 4006f8c:	e17ffc17 	ldw	r5,-16(fp)
 4006f90:	e13ffb17 	ldw	r4,-20(fp)
 4006f94:	40067c00 	call	40067c0 <i2c_write>
 4006f98:	1000041e 	bne	r2,zero,4006fac <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 4006f9c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006fa0:	01010234 	movhi	r4,1032
 4006fa4:	212ec904 	addi	r4,r4,-17628
 4006fa8:	4007f680 	call	4007f68 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 4006fac:	e0bff817 	ldw	r2,-32(fp)
 4006fb0:	10001926 	beq	r2,zero,4007018 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 4006fb4:	e03ff915 	stw	zero,-28(fp)
 4006fb8:	00000d06 	br	4006ff0 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 4006fbc:	e0bff917 	ldw	r2,-28(fp)
 4006fc0:	e0c00217 	ldw	r3,8(fp)
 4006fc4:	1885883a 	add	r2,r3,r2
 4006fc8:	10800003 	ldbu	r2,0(r2)
 4006fcc:	10803fcc 	andi	r2,r2,255
 4006fd0:	100d883a 	mov	r6,r2
 4006fd4:	e17ffc17 	ldw	r5,-16(fp)
 4006fd8:	e13ffb17 	ldw	r4,-20(fp)
 4006fdc:	40067c00 	call	40067c0 <i2c_write>
 4006fe0:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 4006fe4:	e0bff917 	ldw	r2,-28(fp)
 4006fe8:	10800044 	addi	r2,r2,1
 4006fec:	e0bff915 	stw	r2,-28(fp)
 4006ff0:	e0bfff0b 	ldhu	r2,-4(fp)
 4006ff4:	e0fff917 	ldw	r3,-28(fp)
 4006ff8:	1880020e 	bge	r3,r2,4007004 <I2CL_MultipleWrite+0x13c>
 4006ffc:	e0bff817 	ldw	r2,-32(fp)
 4007000:	103fee1e 	bne	r2,zero,4006fbc <__alt_mem_epcs_flash_controller_0+0xfb005fbc>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 4007004:	e0bff817 	ldw	r2,-32(fp)
 4007008:	1000031e 	bne	r2,zero,4007018 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 400700c:	01010234 	movhi	r4,1032
 4007010:	212e7204 	addi	r4,r4,-17976
 4007014:	4007f680 	call	4007f68 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4007018:	e17ffc17 	ldw	r5,-16(fp)
 400701c:	e13ffb17 	ldw	r4,-20(fp)
 4007020:	40067400 	call	4006740 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4007024:	0106d604 	movi	r4,7000
 4007028:	401a3000 	call	401a300 <usleep>
    
    return bSuccess;
 400702c:	e0bff817 	ldw	r2,-32(fp)
    
}
 4007030:	e037883a 	mov	sp,fp
 4007034:	dfc00117 	ldw	ra,4(sp)
 4007038:	df000017 	ldw	fp,0(sp)
 400703c:	dec00204 	addi	sp,sp,8
 4007040:	f800283a 	ret

04007044 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 4007044:	defff604 	addi	sp,sp,-40
 4007048:	dfc00915 	stw	ra,36(sp)
 400704c:	df000815 	stw	fp,32(sp)
 4007050:	df000804 	addi	fp,sp,32
 4007054:	e13ffc15 	stw	r4,-16(fp)
 4007058:	e17ffd15 	stw	r5,-12(fp)
 400705c:	3007883a 	mov	r3,r6
 4007060:	3805883a 	mov	r2,r7
 4007064:	e0fffe05 	stb	r3,-8(fp)
 4007068:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 400706c:	e0fffe07 	ldb	r3,-8(fp)
 4007070:	e13fff0b 	ldhu	r4,-4(fp)
 4007074:	00800084 	movi	r2,2
 4007078:	d8800115 	stw	r2,4(sp)
 400707c:	e0bffb04 	addi	r2,fp,-20
 4007080:	d8800015 	stw	r2,0(sp)
 4007084:	200f883a 	mov	r7,r4
 4007088:	180d883a 	mov	r6,r3
 400708c:	e17ffd17 	ldw	r5,-12(fp)
 4007090:	e13ffc17 	ldw	r4,-16(fp)
 4007094:	4006d080 	call	4006d08 <I2CL_MultipleRead>
 4007098:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 400709c:	e0bffa17 	ldw	r2,-24(fp)
 40070a0:	10000a26 	beq	r2,zero,40070cc <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 40070a4:	e0bffb03 	ldbu	r2,-20(fp)
 40070a8:	10803fcc 	andi	r2,r2,255
 40070ac:	1004923a 	slli	r2,r2,8
 40070b0:	1007883a 	mov	r3,r2
 40070b4:	e0bffb43 	ldbu	r2,-19(fp)
 40070b8:	10803fcc 	andi	r2,r2,255
 40070bc:	1884b03a 	or	r2,r3,r2
 40070c0:	1007883a 	mov	r3,r2
 40070c4:	e0800217 	ldw	r2,8(fp)
 40070c8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 40070cc:	e0bffa17 	ldw	r2,-24(fp)
}
 40070d0:	e037883a 	mov	sp,fp
 40070d4:	dfc00117 	ldw	ra,4(sp)
 40070d8:	df000017 	ldw	fp,0(sp)
 40070dc:	dec00204 	addi	sp,sp,8
 40070e0:	f800283a 	ret

040070e4 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 40070e4:	defff504 	addi	sp,sp,-44
 40070e8:	dfc00a15 	stw	ra,40(sp)
 40070ec:	df000915 	stw	fp,36(sp)
 40070f0:	df000904 	addi	fp,sp,36
 40070f4:	e13ffb15 	stw	r4,-20(fp)
 40070f8:	e17ffc15 	stw	r5,-16(fp)
 40070fc:	3009883a 	mov	r4,r6
 4007100:	3807883a 	mov	r3,r7
 4007104:	e0800217 	ldw	r2,8(fp)
 4007108:	e13ffd05 	stb	r4,-12(fp)
 400710c:	e0fffe0d 	sth	r3,-8(fp)
 4007110:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 4007114:	e0bfff0b 	ldhu	r2,-4(fp)
 4007118:	1004d23a 	srli	r2,r2,8
 400711c:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 4007120:	e0bfff0b 	ldhu	r2,-4(fp)
 4007124:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4007128:	e0fffd07 	ldb	r3,-12(fp)
 400712c:	e13ffe0b 	ldhu	r4,-8(fp)
 4007130:	00800084 	movi	r2,2
 4007134:	d8800115 	stw	r2,4(sp)
 4007138:	e0bffa04 	addi	r2,fp,-24
 400713c:	d8800015 	stw	r2,0(sp)
 4007140:	200f883a 	mov	r7,r4
 4007144:	180d883a 	mov	r6,r3
 4007148:	e17ffc17 	ldw	r5,-16(fp)
 400714c:	e13ffb17 	ldw	r4,-20(fp)
 4007150:	4006ec80 	call	4006ec8 <I2CL_MultipleWrite>
 4007154:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 4007158:	e0bff917 	ldw	r2,-28(fp)
}
 400715c:	e037883a 	mov	sp,fp
 4007160:	dfc00117 	ldw	ra,4(sp)
 4007164:	df000017 	ldw	fp,0(sp)
 4007168:	dec00204 	addi	sp,sp,8
 400716c:	f800283a 	ret

04007170 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 4007170:	defffb04 	addi	sp,sp,-20
 4007174:	df000415 	stw	fp,16(sp)
 4007178:	df000404 	addi	fp,sp,16
 400717c:	e13ffd15 	stw	r4,-12(fp)
 4007180:	e17ffe15 	stw	r5,-8(fp)
 4007184:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4007188:	e0bffe17 	ldw	r2,-8(fp)
 400718c:	1085883a 	add	r2,r2,r2
 4007190:	1085883a 	add	r2,r2,r2
 4007194:	1007883a 	mov	r3,r2
 4007198:	e0bffd17 	ldw	r2,-12(fp)
 400719c:	1885883a 	add	r2,r3,r2
 40071a0:	1007883a 	mov	r3,r2
 40071a4:	e0bfff17 	ldw	r2,-4(fp)
 40071a8:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 40071ac:	00800044 	movi	r2,1
 40071b0:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 40071b4:	e0bffc17 	ldw	r2,-16(fp)
}
 40071b8:	e037883a 	mov	sp,fp
 40071bc:	df000017 	ldw	fp,0(sp)
 40071c0:	dec00104 	addi	sp,sp,4
 40071c4:	f800283a 	ret

040071c8 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 40071c8:	defffb04 	addi	sp,sp,-20
 40071cc:	df000415 	stw	fp,16(sp)
 40071d0:	df000404 	addi	fp,sp,16
 40071d4:	e13ffd15 	stw	r4,-12(fp)
 40071d8:	e17ffe15 	stw	r5,-8(fp)
 40071dc:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 40071e0:	e0bffe17 	ldw	r2,-8(fp)
 40071e4:	1085883a 	add	r2,r2,r2
 40071e8:	1085883a 	add	r2,r2,r2
 40071ec:	1007883a 	mov	r3,r2
 40071f0:	e0bffd17 	ldw	r2,-12(fp)
 40071f4:	1885883a 	add	r2,r3,r2
 40071f8:	10c00037 	ldwio	r3,0(r2)
 40071fc:	e0bfff17 	ldw	r2,-4(fp)
 4007200:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 4007204:	00800044 	movi	r2,1
 4007208:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 400720c:	e0bffc17 	ldw	r2,-16(fp)
}
 4007210:	e037883a 	mov	sp,fp
 4007214:	df000017 	ldw	fp,0(sp)
 4007218:	dec00104 	addi	sp,sp,4
 400721c:	f800283a 	ret

04007220 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
 4007220:	defffa04 	addi	sp,sp,-24
 4007224:	dfc00515 	stw	ra,20(sp)
 4007228:	df000415 	stw	fp,16(sp)
 400722c:	df000404 	addi	fp,sp,16
 4007230:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 4007234:	0080bef4 	movhi	r2,763
 4007238:	10bc2004 	addi	r2,r2,-3968
 400723c:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 4007240:	008001b4 	movhi	r2,6
 4007244:	1086a004 	addi	r2,r2,6784
 4007248:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 400724c:	e1bffd17 	ldw	r6,-12(fp)
 4007250:	e17ffc17 	ldw	r5,-16(fp)
 4007254:	e13fff17 	ldw	r4,-4(fp)
 4007258:	40072780 	call	4007278 <oc_i2c_init_ex>
 400725c:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
 4007260:	e0bffe17 	ldw	r2,-8(fp)
}
 4007264:	e037883a 	mov	sp,fp
 4007268:	dfc00117 	ldw	ra,4(sp)
 400726c:	df000017 	ldw	fp,0(sp)
 4007270:	dec00204 	addi	sp,sp,8
 4007274:	f800283a 	ret

04007278 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 4007278:	defff604 	addi	sp,sp,-40
 400727c:	dfc00915 	stw	ra,36(sp)
 4007280:	df000815 	stw	fp,32(sp)
 4007284:	df000804 	addi	fp,sp,32
 4007288:	e13ffd15 	stw	r4,-12(fp)
 400728c:	e17ffe15 	stw	r5,-8(fp)
 4007290:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 4007294:	00800044 	movi	r2,1
 4007298:	e0bff815 	stw	r2,-32(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 400729c:	00bfe004 	movi	r2,-128
 40072a0:	e0bff905 	stb	r2,-28(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 40072a4:	e0bfff17 	ldw	r2,-4(fp)
 40072a8:	10800164 	muli	r2,r2,5
 40072ac:	100b883a 	mov	r5,r2
 40072b0:	e13ffe17 	ldw	r4,-8(fp)
 40072b4:	40094880 	call	4009488 <__divsi3>
 40072b8:	10bfffc4 	addi	r2,r2,-1
 40072bc:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 40072c0:	e0bffa17 	ldw	r2,-24(fp)
 40072c4:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 40072c8:	e0bffa17 	ldw	r2,-24(fp)
 40072cc:	1005d23a 	srai	r2,r2,8
 40072d0:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 40072d4:	e0bffd17 	ldw	r2,-12(fp)
 40072d8:	e0fffb03 	ldbu	r3,-20(fp)
 40072dc:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 40072e0:	e0bffd17 	ldw	r2,-12(fp)
 40072e4:	10800104 	addi	r2,r2,4
 40072e8:	1007883a 	mov	r3,r2
 40072ec:	e0bffb43 	ldbu	r2,-19(fp)
 40072f0:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 40072f4:	e0bffd17 	ldw	r2,-12(fp)
 40072f8:	10800204 	addi	r2,r2,8
 40072fc:	1007883a 	mov	r3,r2
 4007300:	e0bff903 	ldbu	r2,-28(fp)
 4007304:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 4007308:	e0bff817 	ldw	r2,-32(fp)
 400730c:	10000826 	beq	r2,zero,4007330 <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
 4007310:	e0bffd17 	ldw	r2,-12(fp)
 4007314:	10800037 	ldwio	r2,0(r2)
 4007318:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 400731c:	e0bffc17 	ldw	r2,-16(fp)
 4007320:	10c03fcc 	andi	r3,r2,255
 4007324:	e0bffb03 	ldbu	r2,-20(fp)
 4007328:	18800126 	beq	r3,r2,4007330 <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
 400732c:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 4007330:	e0bff817 	ldw	r2,-32(fp)
 4007334:	10000926 	beq	r2,zero,400735c <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
 4007338:	e0bffd17 	ldw	r2,-12(fp)
 400733c:	10800104 	addi	r2,r2,4
 4007340:	10800037 	ldwio	r2,0(r2)
 4007344:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 4007348:	e0bffc17 	ldw	r2,-16(fp)
 400734c:	10c03fcc 	andi	r3,r2,255
 4007350:	e0bffb43 	ldbu	r2,-19(fp)
 4007354:	18800126 	beq	r3,r2,400735c <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
 4007358:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check control
    if (bSuccess){
 400735c:	e0bff817 	ldw	r2,-32(fp)
 4007360:	10000926 	beq	r2,zero,4007388 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
 4007364:	e0bffd17 	ldw	r2,-12(fp)
 4007368:	10800204 	addi	r2,r2,8
 400736c:	10800037 	ldwio	r2,0(r2)
 4007370:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 4007374:	e0bffc17 	ldw	r2,-16(fp)
 4007378:	10c03fcc 	andi	r3,r2,255
 400737c:	e0bff903 	ldbu	r2,-28(fp)
 4007380:	18800126 	beq	r3,r2,4007388 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
 4007384:	e03ff815 	stw	zero,-32(fp)
        }
    }

   if (bSuccess)
 4007388:	e0bff817 	ldw	r2,-32(fp)
 400738c:	10000426 	beq	r2,zero,40073a0 <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
 4007390:	01010234 	movhi	r4,1032
 4007394:	212ede04 	addi	r4,r4,-17544
 4007398:	400c6980 	call	400c698 <puts>
 400739c:	00000306 	br	40073ac <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 40073a0:	01010234 	movhi	r4,1032
 40073a4:	212ee404 	addi	r4,r4,-17520
 40073a8:	400c6980 	call	400c698 <puts>

   return bSuccess;
 40073ac:	e0bff817 	ldw	r2,-32(fp)

}
 40073b0:	e037883a 	mov	sp,fp
 40073b4:	dfc00117 	ldw	ra,4(sp)
 40073b8:	df000017 	ldw	fp,0(sp)
 40073bc:	dec00204 	addi	sp,sp,8
 40073c0:	f800283a 	ret

040073c4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 40073c4:	defffa04 	addi	sp,sp,-24
 40073c8:	dfc00515 	stw	ra,20(sp)
 40073cc:	df000415 	stw	fp,16(sp)
 40073d0:	df000404 	addi	fp,sp,16
 40073d4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 40073d8:	00800044 	movi	r2,1
 40073dc:	e0bffc15 	stw	r2,-16(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 40073e0:	e03ffd05 	stb	zero,-12(fp)

    IOWR( i2c_base, 2, ControlValue);
 40073e4:	e0bfff17 	ldw	r2,-4(fp)
 40073e8:	10800204 	addi	r2,r2,8
 40073ec:	1007883a 	mov	r3,r2
 40073f0:	e0bffd03 	ldbu	r2,-12(fp)
 40073f4:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
 40073f8:	e0bfff17 	ldw	r2,-4(fp)
 40073fc:	10800204 	addi	r2,r2,8
 4007400:	10800037 	ldwio	r2,0(r2)
 4007404:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 4007408:	e0bffe17 	ldw	r2,-8(fp)
 400740c:	10c03fcc 	andi	r3,r2,255
 4007410:	e0bffd03 	ldbu	r2,-12(fp)
 4007414:	18800126 	beq	r3,r2,400741c <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
 4007418:	e03ffc15 	stw	zero,-16(fp)
    }

   if (bSuccess)
 400741c:	e0bffc17 	ldw	r2,-16(fp)
 4007420:	10000426 	beq	r2,zero,4007434 <oc_i2c_uninit+0x70>
       printf("\I2C core  is disabled! \r\n");
 4007424:	01010234 	movhi	r4,1032
 4007428:	212eef04 	addi	r4,r4,-17476
 400742c:	400c6980 	call	400c698 <puts>
 4007430:	00000306 	br	4007440 <oc_i2c_uninit+0x7c>
   else
       printf("\I2C core is failed to disable! \r\n");
 4007434:	01010234 	movhi	r4,1032
 4007438:	212ef604 	addi	r4,r4,-17448
 400743c:	400c6980 	call	400c698 <puts>

   return bSuccess;
 4007440:	e0bffc17 	ldw	r2,-16(fp)

}
 4007444:	e037883a 	mov	sp,fp
 4007448:	dfc00117 	ldw	ra,4(sp)
 400744c:	df000017 	ldw	fp,0(sp)
 4007450:	dec00204 	addi	sp,sp,8
 4007454:	f800283a 	ret

04007458 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
 4007458:	defffb04 	addi	sp,sp,-20
 400745c:	dfc00415 	stw	ra,16(sp)
 4007460:	df000315 	stw	fp,12(sp)
 4007464:	df000304 	addi	fp,sp,12
 4007468:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 400746c:	00800044 	movi	r2,1
 4007470:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 4007474:	01003e84 	movi	r4,250
 4007478:	401a3000 	call	401a300 <usleep>
    read_data =IORD(i2c_base, 4);
 400747c:	e0bfff17 	ldw	r2,-4(fp)
 4007480:	10800404 	addi	r2,r2,16
 4007484:	10800037 	ldwio	r2,0(r2)
 4007488:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 400748c:	e0bffe17 	ldw	r2,-8(fp)
 4007490:	1080008c 	andi	r2,r2,2
 4007494:	10000126 	beq	r2,zero,400749c <ACK_single_check+0x44>
            bSuccess = FALSE;
 4007498:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
 400749c:	e0bffd17 	ldw	r2,-12(fp)
 40074a0:	10000a26 	beq	r2,zero,40074cc <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
 40074a4:	01003e84 	movi	r4,250
 40074a8:	401a3000 	call	401a300 <usleep>
            read_data =IORD(i2c_base, 4);
 40074ac:	e0bfff17 	ldw	r2,-4(fp)
 40074b0:	10800404 	addi	r2,r2,16
 40074b4:	10800037 	ldwio	r2,0(r2)
 40074b8:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 40074bc:	e0bffe17 	ldw	r2,-8(fp)
 40074c0:	1080200c 	andi	r2,r2,128
 40074c4:	10000126 	beq	r2,zero,40074cc <ACK_single_check+0x74>
                    bSuccess = FALSE;
 40074c8:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
 40074cc:	e0bffd17 	ldw	r2,-12(fp)
}
 40074d0:	e037883a 	mov	sp,fp
 40074d4:	dfc00117 	ldw	ra,4(sp)
 40074d8:	df000017 	ldw	fp,0(sp)
 40074dc:	dec00204 	addi	sp,sp,8
 40074e0:	f800283a 	ret

040074e4 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 40074e4:	defffb04 	addi	sp,sp,-20
 40074e8:	dfc00415 	stw	ra,16(sp)
 40074ec:	df000315 	stw	fp,12(sp)
 40074f0:	df000304 	addi	fp,sp,12
 40074f4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 40074f8:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
 40074fc:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 4007500:	00000306 	br	4007510 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 4007504:	e13fff17 	ldw	r4,-4(fp)
 4007508:	40074580 	call	4007458 <ACK_single_check>
 400750c:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 4007510:	e0bffd17 	ldw	r2,-12(fp)
 4007514:	1000051e 	bne	r2,zero,400752c <ACK_check+0x48>
 4007518:	e0bffe17 	ldw	r2,-8(fp)
 400751c:	10c00044 	addi	r3,r2,1
 4007520:	e0fffe15 	stw	r3,-8(fp)
 4007524:	10800290 	cmplti	r2,r2,10
 4007528:	103ff61e 	bne	r2,zero,4007504 <__alt_mem_epcs_flash_controller_0+0xfb006504>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 400752c:	e0bffd17 	ldw	r2,-12(fp)
}
 4007530:	e037883a 	mov	sp,fp
 4007534:	dfc00117 	ldw	ra,4(sp)
 4007538:	df000017 	ldw	fp,0(sp)
 400753c:	dec00204 	addi	sp,sp,8
 4007540:	f800283a 	ret

04007544 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 4007544:	defff904 	addi	sp,sp,-28
 4007548:	dfc00615 	stw	ra,24(sp)
 400754c:	df000515 	stw	fp,20(sp)
 4007550:	df000504 	addi	fp,sp,20
 4007554:	e13ffc15 	stw	r4,-16(fp)
 4007558:	2807883a 	mov	r3,r5
 400755c:	3005883a 	mov	r2,r6
 4007560:	e1ffff15 	stw	r7,-4(fp)
 4007564:	e0fffd05 	stb	r3,-12(fp)
 4007568:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 400756c:	e0bffd03 	ldbu	r2,-12(fp)
 4007570:	100d883a 	mov	r6,r2
 4007574:	014000c4 	movi	r5,3
 4007578:	e13ffc17 	ldw	r4,-16(fp)
 400757c:	40071700 	call	4007170 <Write32_Data>
 4007580:	1000051e 	bne	r2,zero,4007598 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
 4007584:	01010234 	movhi	r4,1032
 4007588:	212eff04 	addi	r4,r4,-17412
 400758c:	400c6980 	call	400c698 <puts>
       return FALSE;
 4007590:	0005883a 	mov	r2,zero
 4007594:	00006506 	br	400772c <OC_I2C_Write+0x1e8>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 4007598:	01802404 	movi	r6,144
 400759c:	01400104 	movi	r5,4
 40075a0:	e13ffc17 	ldw	r4,-16(fp)
 40075a4:	40071700 	call	4007170 <Write32_Data>
 40075a8:	1000051e 	bne	r2,zero,40075c0 <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
 40075ac:	01010234 	movhi	r4,1032
 40075b0:	212f0504 	addi	r4,r4,-17388
 40075b4:	400c6980 	call	400c698 <puts>
       return FALSE;
 40075b8:	0005883a 	mov	r2,zero
 40075bc:	00005b06 	br	400772c <OC_I2C_Write+0x1e8>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40075c0:	e13ffc17 	ldw	r4,-16(fp)
 40075c4:	40074e40 	call	40074e4 <ACK_check>
 40075c8:	1000051e 	bne	r2,zero,40075e0 <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
 40075cc:	01010234 	movhi	r4,1032
 40075d0:	212f0b04 	addi	r4,r4,-17364
 40075d4:	400c6980 	call	400c698 <puts>
        return FALSE;
 40075d8:	0005883a 	mov	r2,zero
 40075dc:	00005306 	br	400772c <OC_I2C_Write+0x1e8>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 40075e0:	e0bffe03 	ldbu	r2,-8(fp)
 40075e4:	100d883a 	mov	r6,r2
 40075e8:	014000c4 	movi	r5,3
 40075ec:	e13ffc17 	ldw	r4,-16(fp)
 40075f0:	40071700 	call	4007170 <Write32_Data>
 40075f4:	1000051e 	bne	r2,zero,400760c <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
 40075f8:	01010234 	movhi	r4,1032
 40075fc:	212f1104 	addi	r4,r4,-17340
 4007600:	400c6980 	call	400c698 <puts>
       return FALSE;
 4007604:	0005883a 	mov	r2,zero
 4007608:	00004806 	br	400772c <OC_I2C_Write+0x1e8>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 400760c:	01800404 	movi	r6,16
 4007610:	01400104 	movi	r5,4
 4007614:	e13ffc17 	ldw	r4,-16(fp)
 4007618:	40071700 	call	4007170 <Write32_Data>
 400761c:	1000051e 	bne	r2,zero,4007634 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
 4007620:	01010234 	movhi	r4,1032
 4007624:	212f1704 	addi	r4,r4,-17316
 4007628:	400c6980 	call	400c698 <puts>
        return FALSE;
 400762c:	0005883a 	mov	r2,zero
 4007630:	00003e06 	br	400772c <OC_I2C_Write+0x1e8>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007634:	e13ffc17 	ldw	r4,-16(fp)
 4007638:	40074e40 	call	40074e4 <ACK_check>
 400763c:	1000051e 	bne	r2,zero,4007654 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
 4007640:	01010234 	movhi	r4,1032
 4007644:	212f1d04 	addi	r4,r4,-17292
 4007648:	400c6980 	call	400c698 <puts>
        return FALSE;
 400764c:	0005883a 	mov	r2,zero
 4007650:	00003606 	br	400772c <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 4007654:	e03ffb15 	stw	zero,-20(fp)
 4007658:	00002406 	br	40076ec <OC_I2C_Write+0x1a8>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 400765c:	e0bffb17 	ldw	r2,-20(fp)
 4007660:	e0ffff17 	ldw	r3,-4(fp)
 4007664:	1885883a 	add	r2,r3,r2
 4007668:	10800003 	ldbu	r2,0(r2)
 400766c:	10803fcc 	andi	r2,r2,255
 4007670:	100d883a 	mov	r6,r2
 4007674:	014000c4 	movi	r5,3
 4007678:	e13ffc17 	ldw	r4,-16(fp)
 400767c:	40071700 	call	4007170 <Write32_Data>
 4007680:	1000051e 	bne	r2,zero,4007698 <OC_I2C_Write+0x154>
              printf("OC_I2C_Write error[6]\r\n");
 4007684:	01010234 	movhi	r4,1032
 4007688:	212f2304 	addi	r4,r4,-17268
 400768c:	400c6980 	call	400c698 <puts>
              return FALSE;
 4007690:	0005883a 	mov	r2,zero
 4007694:	00002506 	br	400772c <OC_I2C_Write+0x1e8>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 4007698:	01800404 	movi	r6,16
 400769c:	01400104 	movi	r5,4
 40076a0:	e13ffc17 	ldw	r4,-16(fp)
 40076a4:	40071700 	call	4007170 <Write32_Data>
 40076a8:	1000051e 	bne	r2,zero,40076c0 <OC_I2C_Write+0x17c>
             printf("OC_I2C_Write error[7]\r\n");
 40076ac:	01010234 	movhi	r4,1032
 40076b0:	212f2904 	addi	r4,r4,-17244
 40076b4:	400c6980 	call	400c698 <puts>
              return FALSE;
 40076b8:	0005883a 	mov	r2,zero
 40076bc:	00001b06 	br	400772c <OC_I2C_Write+0x1e8>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 40076c0:	e13ffc17 	ldw	r4,-16(fp)
 40076c4:	40074e40 	call	40074e4 <ACK_check>
 40076c8:	1000051e 	bne	r2,zero,40076e0 <OC_I2C_Write+0x19c>
              printf("OC_I2C_Write error[8]\r\n");
 40076cc:	01010234 	movhi	r4,1032
 40076d0:	212f2f04 	addi	r4,r4,-17220
 40076d4:	400c6980 	call	400c698 <puts>
              return FALSE;
 40076d8:	0005883a 	mov	r2,zero
 40076dc:	00001306 	br	400772c <OC_I2C_Write+0x1e8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 40076e0:	e0bffb17 	ldw	r2,-20(fp)
 40076e4:	10800044 	addi	r2,r2,1
 40076e8:	e0bffb15 	stw	r2,-20(fp)
 40076ec:	e0fffb17 	ldw	r3,-20(fp)
 40076f0:	e0800217 	ldw	r2,8(fp)
 40076f4:	18bfd916 	blt	r3,r2,400765c <__alt_mem_epcs_flash_controller_0+0xfb00665c>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 40076f8:	01801004 	movi	r6,64
 40076fc:	01400104 	movi	r5,4
 4007700:	e13ffc17 	ldw	r4,-16(fp)
 4007704:	40071700 	call	4007170 <Write32_Data>
 4007708:	1000051e 	bne	r2,zero,4007720 <OC_I2C_Write+0x1dc>
         printf("OC_I2C_Write error[9]\r\n");
 400770c:	01010234 	movhi	r4,1032
 4007710:	212f3504 	addi	r4,r4,-17196
 4007714:	400c6980 	call	400c698 <puts>
         return FALSE;
 4007718:	0005883a 	mov	r2,zero
 400771c:	00000306 	br	400772c <OC_I2C_Write+0x1e8>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 4007720:	01003e84 	movi	r4,250
 4007724:	401a3000 	call	401a300 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 4007728:	00800044 	movi	r2,1

}
 400772c:	e037883a 	mov	sp,fp
 4007730:	dfc00117 	ldw	ra,4(sp)
 4007734:	df000017 	ldw	fp,0(sp)
 4007738:	dec00204 	addi	sp,sp,8
 400773c:	f800283a 	ret

04007740 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 4007740:	defffb04 	addi	sp,sp,-20
 4007744:	dfc00415 	stw	ra,16(sp)
 4007748:	df000315 	stw	fp,12(sp)
 400774c:	df000304 	addi	fp,sp,12
 4007750:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 4007754:	01003e84 	movi	r4,250
 4007758:	401a3000 	call	401a300 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 400775c:	e0bffe04 	addi	r2,fp,-8
 4007760:	100d883a 	mov	r6,r2
 4007764:	01400104 	movi	r5,4
 4007768:	e13fff17 	ldw	r4,-4(fp)
 400776c:	40071c80 	call	40071c8 <Read32_Data>
 4007770:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 4007774:	e0bffd17 	ldw	r2,-12(fp)
 4007778:	10000426 	beq	r2,zero,400778c <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 400777c:	e0bffe17 	ldw	r2,-8(fp)
 4007780:	1080008c 	andi	r2,r2,2
 4007784:	10000126 	beq	r2,zero,400778c <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 4007788:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 400778c:	e0bffd17 	ldw	r2,-12(fp)

}
 4007790:	e037883a 	mov	sp,fp
 4007794:	dfc00117 	ldw	ra,4(sp)
 4007798:	df000017 	ldw	fp,0(sp)
 400779c:	dec00204 	addi	sp,sp,8
 40077a0:	f800283a 	ret

040077a4 <OC_I2C_Read>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 40077a4:	defff804 	addi	sp,sp,-32
 40077a8:	dfc00715 	stw	ra,28(sp)
 40077ac:	df000615 	stw	fp,24(sp)
 40077b0:	df000604 	addi	fp,sp,24
 40077b4:	e13ffc15 	stw	r4,-16(fp)
 40077b8:	2807883a 	mov	r3,r5
 40077bc:	3005883a 	mov	r2,r6
 40077c0:	e1ffff15 	stw	r7,-4(fp)
 40077c4:	e0fffd05 	stb	r3,-12(fp)
 40077c8:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 40077cc:	e0bffc17 	ldw	r2,-16(fp)
 40077d0:	10800304 	addi	r2,r2,12
 40077d4:	1007883a 	mov	r3,r2
 40077d8:	e0bffd03 	ldbu	r2,-12(fp)
 40077dc:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 40077e0:	e0bffc17 	ldw	r2,-16(fp)
 40077e4:	10800404 	addi	r2,r2,16
 40077e8:	1007883a 	mov	r3,r2
 40077ec:	00802404 	movi	r2,144
 40077f0:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 40077f4:	e13ffc17 	ldw	r4,-16(fp)
 40077f8:	40074e40 	call	40074e4 <ACK_check>
 40077fc:	1000051e 	bne	r2,zero,4007814 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
 4007800:	01010234 	movhi	r4,1032
 4007804:	212f3b04 	addi	r4,r4,-17172
 4007808:	400c6980 	call	400c698 <puts>
       return FALSE;
 400780c:	0005883a 	mov	r2,zero
 4007810:	00005206 	br	400795c <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
 4007814:	e0bffc17 	ldw	r2,-16(fp)
 4007818:	10800304 	addi	r2,r2,12
 400781c:	1007883a 	mov	r3,r2
 4007820:	e0bffe03 	ldbu	r2,-8(fp)
 4007824:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 4007828:	e0bffc17 	ldw	r2,-16(fp)
 400782c:	10800404 	addi	r2,r2,16
 4007830:	1007883a 	mov	r3,r2
 4007834:	00800404 	movi	r2,16
 4007838:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 400783c:	e13ffc17 	ldw	r4,-16(fp)
 4007840:	40074e40 	call	40074e4 <ACK_check>
 4007844:	1000051e 	bne	r2,zero,400785c <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
 4007848:	01010234 	movhi	r4,1032
 400784c:	212f4104 	addi	r4,r4,-17148
 4007850:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007854:	0005883a 	mov	r2,zero
 4007858:	00004006 	br	400795c <OC_I2C_Read+0x1b8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 400785c:	e0bffc17 	ldw	r2,-16(fp)
 4007860:	10800304 	addi	r2,r2,12
 4007864:	1007883a 	mov	r3,r2
 4007868:	e0bffd03 	ldbu	r2,-12(fp)
 400786c:	10800054 	ori	r2,r2,1
 4007870:	10803fcc 	andi	r2,r2,255
 4007874:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4007878:	e0bffc17 	ldw	r2,-16(fp)
 400787c:	10800404 	addi	r2,r2,16
 4007880:	1007883a 	mov	r3,r2
 4007884:	00802404 	movi	r2,144
 4007888:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 400788c:	e13ffc17 	ldw	r4,-16(fp)
 4007890:	40074e40 	call	40074e4 <ACK_check>
 4007894:	1000051e 	bne	r2,zero,40078ac <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
 4007898:	01010234 	movhi	r4,1032
 400789c:	212f4704 	addi	r4,r4,-17124
 40078a0:	400c6980 	call	400c698 <puts>
        return FALSE;
 40078a4:	0005883a 	mov	r2,zero
 40078a8:	00002c06 	br	400795c <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
 40078ac:	e03ffa15 	stw	zero,-24(fp)
 40078b0:	00001f06 	br	4007930 <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 40078b4:	e0bffc17 	ldw	r2,-16(fp)
 40078b8:	10800404 	addi	r2,r2,16
 40078bc:	1009883a 	mov	r4,r2
 40078c0:	e0bffa17 	ldw	r2,-24(fp)
 40078c4:	10c00044 	addi	r3,r2,1
 40078c8:	e0800217 	ldw	r2,8(fp)
 40078cc:	1880021e 	bne	r3,r2,40078d8 <OC_I2C_Read+0x134>
 40078d0:	00800a04 	movi	r2,40
 40078d4:	00000106 	br	40078dc <OC_I2C_Read+0x138>
 40078d8:	00800804 	movi	r2,32
 40078dc:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 40078e0:	e13ffc17 	ldw	r4,-16(fp)
 40078e4:	40077400 	call	4007740 <ACK_judge_for_read>
 40078e8:	1000051e 	bne	r2,zero,4007900 <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
 40078ec:	01010234 	movhi	r4,1032
 40078f0:	212f4d04 	addi	r4,r4,-17100
 40078f4:	400c6980 	call	400c698 <puts>
            return FALSE;
 40078f8:	0005883a 	mov	r2,zero
 40078fc:	00001706 	br	400795c <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007900:	e0bffc17 	ldw	r2,-16(fp)
 4007904:	10800304 	addi	r2,r2,12
 4007908:	10800037 	ldwio	r2,0(r2)
 400790c:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4007910:	e0bffa17 	ldw	r2,-24(fp)
 4007914:	e0ffff17 	ldw	r3,-4(fp)
 4007918:	1885883a 	add	r2,r3,r2
 400791c:	e0fffb17 	ldw	r3,-20(fp)
 4007920:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 4007924:	e0bffa17 	ldw	r2,-24(fp)
 4007928:	10800044 	addi	r2,r2,1
 400792c:	e0bffa15 	stw	r2,-24(fp)
 4007930:	e0fffa17 	ldw	r3,-24(fp)
 4007934:	e0800217 	ldw	r2,8(fp)
 4007938:	18bfde16 	blt	r3,r2,40078b4 <__alt_mem_epcs_flash_controller_0+0xfb0068b4>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 400793c:	e0bffc17 	ldw	r2,-16(fp)
 4007940:	10800404 	addi	r2,r2,16
 4007944:	1007883a 	mov	r3,r2
 4007948:	00801004 	movi	r2,64
 400794c:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007950:	01003e84 	movi	r4,250
 4007954:	401a3000 	call	401a300 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 4007958:	00800044 	movi	r2,1

}
 400795c:	e037883a 	mov	sp,fp
 4007960:	dfc00117 	ldw	ra,4(sp)
 4007964:	df000017 	ldw	fp,0(sp)
 4007968:	dec00204 	addi	sp,sp,8
 400796c:	f800283a 	ret

04007970 <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 4007970:	defff804 	addi	sp,sp,-32
 4007974:	dfc00715 	stw	ra,28(sp)
 4007978:	df000615 	stw	fp,24(sp)
 400797c:	df000604 	addi	fp,sp,24
 4007980:	e13ffc15 	stw	r4,-16(fp)
 4007984:	2805883a 	mov	r2,r5
 4007988:	e1bffe15 	stw	r6,-8(fp)
 400798c:	e1ffff15 	stw	r7,-4(fp)
 4007990:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 4007994:	e0bffc17 	ldw	r2,-16(fp)
 4007998:	10800304 	addi	r2,r2,12
 400799c:	1007883a 	mov	r3,r2
 40079a0:	e0bffd03 	ldbu	r2,-12(fp)
 40079a4:	10800054 	ori	r2,r2,1
 40079a8:	10803fcc 	andi	r2,r2,255
 40079ac:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 40079b0:	e0bffc17 	ldw	r2,-16(fp)
 40079b4:	10800404 	addi	r2,r2,16
 40079b8:	1007883a 	mov	r3,r2
 40079bc:	00802404 	movi	r2,144
 40079c0:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 40079c4:	e13ffc17 	ldw	r4,-16(fp)
 40079c8:	40074e40 	call	40074e4 <ACK_check>
 40079cc:	1000051e 	bne	r2,zero,40079e4 <OC_I2C_Read_Continue+0x74>
        printf("OC_I2C_Read error[8]\r\n");
 40079d0:	01010234 	movhi	r4,1032
 40079d4:	212f4704 	addi	r4,r4,-17124
 40079d8:	400c6980 	call	400c698 <puts>
        return FALSE;
 40079dc:	0005883a 	mov	r2,zero
 40079e0:	00002c06 	br	4007a94 <OC_I2C_Read_Continue+0x124>
    }

    for(i=0;i<nReadLength;i++){
 40079e4:	e03ffa15 	stw	zero,-24(fp)
 40079e8:	00001f06 	br	4007a68 <OC_I2C_Read_Continue+0xf8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 40079ec:	e0bffc17 	ldw	r2,-16(fp)
 40079f0:	10800404 	addi	r2,r2,16
 40079f4:	1009883a 	mov	r4,r2
 40079f8:	e0bffa17 	ldw	r2,-24(fp)
 40079fc:	10c00044 	addi	r3,r2,1
 4007a00:	e0bfff17 	ldw	r2,-4(fp)
 4007a04:	1880021e 	bne	r3,r2,4007a10 <OC_I2C_Read_Continue+0xa0>
 4007a08:	00800a04 	movi	r2,40
 4007a0c:	00000106 	br	4007a14 <OC_I2C_Read_Continue+0xa4>
 4007a10:	00800804 	movi	r2,32
 4007a14:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4007a18:	e13ffc17 	ldw	r4,-16(fp)
 4007a1c:	40077400 	call	4007740 <ACK_judge_for_read>
 4007a20:	1000051e 	bne	r2,zero,4007a38 <OC_I2C_Read_Continue+0xc8>
            printf("OC_I2C_Read error[10]\r\n");
 4007a24:	01010234 	movhi	r4,1032
 4007a28:	212f4d04 	addi	r4,r4,-17100
 4007a2c:	400c6980 	call	400c698 <puts>
            return FALSE;
 4007a30:	0005883a 	mov	r2,zero
 4007a34:	00001706 	br	4007a94 <OC_I2C_Read_Continue+0x124>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007a38:	e0bffc17 	ldw	r2,-16(fp)
 4007a3c:	10800304 	addi	r2,r2,12
 4007a40:	10800037 	ldwio	r2,0(r2)
 4007a44:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4007a48:	e0bffa17 	ldw	r2,-24(fp)
 4007a4c:	e0fffe17 	ldw	r3,-8(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	e0fffb17 	ldw	r3,-20(fp)
 4007a58:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 4007a5c:	e0bffa17 	ldw	r2,-24(fp)
 4007a60:	10800044 	addi	r2,r2,1
 4007a64:	e0bffa15 	stw	r2,-24(fp)
 4007a68:	e0fffa17 	ldw	r3,-24(fp)
 4007a6c:	e0bfff17 	ldw	r2,-4(fp)
 4007a70:	18bfde16 	blt	r3,r2,40079ec <__alt_mem_epcs_flash_controller_0+0xfb0069ec>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 4007a74:	e0bffc17 	ldw	r2,-16(fp)
 4007a78:	10800404 	addi	r2,r2,16
 4007a7c:	1007883a 	mov	r3,r2
 4007a80:	00801004 	movi	r2,64
 4007a84:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007a88:	01003e84 	movi	r4,250
 4007a8c:	401a3000 	call	401a300 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 4007a90:	00800044 	movi	r2,1

}
 4007a94:	e037883a 	mov	sp,fp
 4007a98:	dfc00117 	ldw	ra,4(sp)
 4007a9c:	df000017 	ldw	fp,0(sp)
 4007aa0:	dec00204 	addi	sp,sp,8
 4007aa4:	f800283a 	ret

04007aa8 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 4007aa8:	defff804 	addi	sp,sp,-32
 4007aac:	dfc00715 	stw	ra,28(sp)
 4007ab0:	df000615 	stw	fp,24(sp)
 4007ab4:	df000604 	addi	fp,sp,24
 4007ab8:	e13ffc15 	stw	r4,-16(fp)
 4007abc:	2807883a 	mov	r3,r5
 4007ac0:	3005883a 	mov	r2,r6
 4007ac4:	e1ffff15 	stw	r7,-4(fp)
 4007ac8:	e0fffd05 	stb	r3,-12(fp)
 4007acc:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4007ad0:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ad4:	1004d23a 	srli	r2,r2,8
 4007ad8:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 4007adc:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ae0:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4007ae4:	e0bffd03 	ldbu	r2,-12(fp)
 4007ae8:	100d883a 	mov	r6,r2
 4007aec:	014000c4 	movi	r5,3
 4007af0:	e13ffc17 	ldw	r4,-16(fp)
 4007af4:	40071700 	call	4007170 <Write32_Data>
 4007af8:	1000021e 	bne	r2,zero,4007b04 <OC_I2CL_Write+0x5c>
       return FALSE;
 4007afc:	0005883a 	mov	r2,zero
 4007b00:	00006706 	br	4007ca0 <OC_I2CL_Write+0x1f8>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 4007b04:	01802404 	movi	r6,144
 4007b08:	01400104 	movi	r5,4
 4007b0c:	e13ffc17 	ldw	r4,-16(fp)
 4007b10:	40071700 	call	4007170 <Write32_Data>
 4007b14:	1000021e 	bne	r2,zero,4007b20 <OC_I2CL_Write+0x78>
       return FALSE;
 4007b18:	0005883a 	mov	r2,zero
 4007b1c:	00006006 	br	4007ca0 <OC_I2CL_Write+0x1f8>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007b20:	e13ffc17 	ldw	r4,-16(fp)
 4007b24:	40074e40 	call	40074e4 <ACK_check>
 4007b28:	1000051e 	bne	r2,zero,4007b40 <OC_I2CL_Write+0x98>
        printf("OC_I2CL_Write error[0]\r\n");
 4007b2c:	01010234 	movhi	r4,1032
 4007b30:	212f5304 	addi	r4,r4,-17076
 4007b34:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007b38:	0005883a 	mov	r2,zero
 4007b3c:	00005806 	br	4007ca0 <OC_I2CL_Write+0x1f8>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007b40:	e0bffb03 	ldbu	r2,-20(fp)
 4007b44:	100d883a 	mov	r6,r2
 4007b48:	014000c4 	movi	r5,3
 4007b4c:	e13ffc17 	ldw	r4,-16(fp)
 4007b50:	40071700 	call	4007170 <Write32_Data>
 4007b54:	1000021e 	bne	r2,zero,4007b60 <OC_I2CL_Write+0xb8>
       return FALSE;
 4007b58:	0005883a 	mov	r2,zero
 4007b5c:	00005006 	br	4007ca0 <OC_I2CL_Write+0x1f8>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007b60:	01800404 	movi	r6,16
 4007b64:	01400104 	movi	r5,4
 4007b68:	e13ffc17 	ldw	r4,-16(fp)
 4007b6c:	40071700 	call	4007170 <Write32_Data>
 4007b70:	1000021e 	bne	r2,zero,4007b7c <OC_I2CL_Write+0xd4>
        return FALSE;
 4007b74:	0005883a 	mov	r2,zero
 4007b78:	00004906 	br	4007ca0 <OC_I2CL_Write+0x1f8>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007b7c:	e13ffc17 	ldw	r4,-16(fp)
 4007b80:	40074e40 	call	40074e4 <ACK_check>
 4007b84:	1000051e 	bne	r2,zero,4007b9c <OC_I2CL_Write+0xf4>
        printf("OC_I2CL_Write error[1]\r\n");
 4007b88:	01010234 	movhi	r4,1032
 4007b8c:	212f5904 	addi	r4,r4,-17052
 4007b90:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007b94:	0005883a 	mov	r2,zero
 4007b98:	00004106 	br	4007ca0 <OC_I2CL_Write+0x1f8>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 4007b9c:	e0bffb43 	ldbu	r2,-19(fp)
 4007ba0:	100d883a 	mov	r6,r2
 4007ba4:	014000c4 	movi	r5,3
 4007ba8:	e13ffc17 	ldw	r4,-16(fp)
 4007bac:	40071700 	call	4007170 <Write32_Data>
 4007bb0:	1000021e 	bne	r2,zero,4007bbc <OC_I2CL_Write+0x114>
       return FALSE;
 4007bb4:	0005883a 	mov	r2,zero
 4007bb8:	00003906 	br	4007ca0 <OC_I2CL_Write+0x1f8>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 4007bbc:	01800404 	movi	r6,16
 4007bc0:	01400104 	movi	r5,4
 4007bc4:	e13ffc17 	ldw	r4,-16(fp)
 4007bc8:	40071700 	call	4007170 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007bcc:	e13ffc17 	ldw	r4,-16(fp)
 4007bd0:	40074e40 	call	40074e4 <ACK_check>
 4007bd4:	1000051e 	bne	r2,zero,4007bec <OC_I2CL_Write+0x144>
        printf("OC_I2CL_Write error[2]\r\n");
 4007bd8:	01010234 	movhi	r4,1032
 4007bdc:	212f5f04 	addi	r4,r4,-17028
 4007be0:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007be4:	0005883a 	mov	r2,zero
 4007be8:	00002d06 	br	4007ca0 <OC_I2CL_Write+0x1f8>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 4007bec:	e03ffa15 	stw	zero,-24(fp)
 4007bf0:	00001e06 	br	4007c6c <OC_I2CL_Write+0x1c4>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 4007bf4:	e0bffa17 	ldw	r2,-24(fp)
 4007bf8:	e0ffff17 	ldw	r3,-4(fp)
 4007bfc:	1885883a 	add	r2,r3,r2
 4007c00:	10800003 	ldbu	r2,0(r2)
 4007c04:	10803fcc 	andi	r2,r2,255
 4007c08:	100d883a 	mov	r6,r2
 4007c0c:	014000c4 	movi	r5,3
 4007c10:	e13ffc17 	ldw	r4,-16(fp)
 4007c14:	40071700 	call	4007170 <Write32_Data>
 4007c18:	1000021e 	bne	r2,zero,4007c24 <OC_I2CL_Write+0x17c>
            return FALSE;
 4007c1c:	0005883a 	mov	r2,zero
 4007c20:	00001f06 	br	4007ca0 <OC_I2CL_Write+0x1f8>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 4007c24:	01800404 	movi	r6,16
 4007c28:	01400104 	movi	r5,4
 4007c2c:	e13ffc17 	ldw	r4,-16(fp)
 4007c30:	40071700 	call	4007170 <Write32_Data>
 4007c34:	1000021e 	bne	r2,zero,4007c40 <OC_I2CL_Write+0x198>
            return FALSE;
 4007c38:	0005883a 	mov	r2,zero
 4007c3c:	00001806 	br	4007ca0 <OC_I2CL_Write+0x1f8>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 4007c40:	e13ffc17 	ldw	r4,-16(fp)
 4007c44:	40074e40 	call	40074e4 <ACK_check>
 4007c48:	1000051e 	bne	r2,zero,4007c60 <OC_I2CL_Write+0x1b8>
             printf("OC_I2CL_Write error[3]\r\n");
 4007c4c:	01010234 	movhi	r4,1032
 4007c50:	212f6504 	addi	r4,r4,-17004
 4007c54:	400c6980 	call	400c698 <puts>
             return FALSE;
 4007c58:	0005883a 	mov	r2,zero
 4007c5c:	00001006 	br	4007ca0 <OC_I2CL_Write+0x1f8>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 4007c60:	e0bffa17 	ldw	r2,-24(fp)
 4007c64:	10800044 	addi	r2,r2,1
 4007c68:	e0bffa15 	stw	r2,-24(fp)
 4007c6c:	e0fffa17 	ldw	r3,-24(fp)
 4007c70:	e0800217 	ldw	r2,8(fp)
 4007c74:	18bfdf16 	blt	r3,r2,4007bf4 <__alt_mem_epcs_flash_controller_0+0xfb006bf4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 4007c78:	01801004 	movi	r6,64
 4007c7c:	01400104 	movi	r5,4
 4007c80:	e13ffc17 	ldw	r4,-16(fp)
 4007c84:	40071700 	call	4007170 <Write32_Data>
 4007c88:	1000021e 	bne	r2,zero,4007c94 <OC_I2CL_Write+0x1ec>
         return FALSE;
 4007c8c:	0005883a 	mov	r2,zero
 4007c90:	00000306 	br	4007ca0 <OC_I2CL_Write+0x1f8>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 4007c94:	01003e84 	movi	r4,250
 4007c98:	401a3000 	call	401a300 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 4007c9c:	00800044 	movi	r2,1
}
 4007ca0:	e037883a 	mov	sp,fp
 4007ca4:	dfc00117 	ldw	ra,4(sp)
 4007ca8:	df000017 	ldw	fp,0(sp)
 4007cac:	dec00204 	addi	sp,sp,8
 4007cb0:	f800283a 	ret

04007cb4 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 4007cb4:	defff704 	addi	sp,sp,-36
 4007cb8:	dfc00815 	stw	ra,32(sp)
 4007cbc:	df000715 	stw	fp,28(sp)
 4007cc0:	df000704 	addi	fp,sp,28
 4007cc4:	e13ffc15 	stw	r4,-16(fp)
 4007cc8:	2807883a 	mov	r3,r5
 4007ccc:	3005883a 	mov	r2,r6
 4007cd0:	e1ffff15 	stw	r7,-4(fp)
 4007cd4:	e0fffd05 	stb	r3,-12(fp)
 4007cd8:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4007cdc:	e0bffe0b 	ldhu	r2,-8(fp)
 4007ce0:	1004d23a 	srli	r2,r2,8
 4007ce4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 4007ce8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007cec:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4007cf0:	e0bffd03 	ldbu	r2,-12(fp)
 4007cf4:	100d883a 	mov	r6,r2
 4007cf8:	014000c4 	movi	r5,3
 4007cfc:	e13ffc17 	ldw	r4,-16(fp)
 4007d00:	40071700 	call	4007170 <Write32_Data>
 4007d04:	1000021e 	bne	r2,zero,4007d10 <OC_I2CL_Read+0x5c>
       return FALSE;
 4007d08:	0005883a 	mov	r2,zero
 4007d0c:	00008406 	br	4007f20 <OC_I2CL_Read+0x26c>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 4007d10:	01802404 	movi	r6,144
 4007d14:	01400104 	movi	r5,4
 4007d18:	e13ffc17 	ldw	r4,-16(fp)
 4007d1c:	40071700 	call	4007170 <Write32_Data>
 4007d20:	1000021e 	bne	r2,zero,4007d2c <OC_I2CL_Read+0x78>
       return FALSE;
 4007d24:	0005883a 	mov	r2,zero
 4007d28:	00007d06 	br	4007f20 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007d2c:	e13ffc17 	ldw	r4,-16(fp)
 4007d30:	40074e40 	call	40074e4 <ACK_check>
 4007d34:	1000051e 	bne	r2,zero,4007d4c <OC_I2CL_Read+0x98>
        printf("OC_I2CL_Read error[0]\r\n");
 4007d38:	01010234 	movhi	r4,1032
 4007d3c:	212f6b04 	addi	r4,r4,-16980
 4007d40:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007d44:	0005883a 	mov	r2,zero
 4007d48:	00007506 	br	4007f20 <OC_I2CL_Read+0x26c>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4007d4c:	e0bffa03 	ldbu	r2,-24(fp)
 4007d50:	100d883a 	mov	r6,r2
 4007d54:	014000c4 	movi	r5,3
 4007d58:	e13ffc17 	ldw	r4,-16(fp)
 4007d5c:	40071700 	call	4007170 <Write32_Data>
 4007d60:	1000021e 	bne	r2,zero,4007d6c <OC_I2CL_Read+0xb8>
       return FALSE;
 4007d64:	0005883a 	mov	r2,zero
 4007d68:	00006d06 	br	4007f20 <OC_I2CL_Read+0x26c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007d6c:	01800404 	movi	r6,16
 4007d70:	01400104 	movi	r5,4
 4007d74:	e13ffc17 	ldw	r4,-16(fp)
 4007d78:	40071700 	call	4007170 <Write32_Data>
 4007d7c:	1000021e 	bne	r2,zero,4007d88 <OC_I2CL_Read+0xd4>
        return FALSE;
 4007d80:	0005883a 	mov	r2,zero
 4007d84:	00006606 	br	4007f20 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007d88:	e13ffc17 	ldw	r4,-16(fp)
 4007d8c:	40074e40 	call	40074e4 <ACK_check>
 4007d90:	1000051e 	bne	r2,zero,4007da8 <OC_I2CL_Read+0xf4>
        printf("OC_I2CL_Read error[1]\r\n");
 4007d94:	01010234 	movhi	r4,1032
 4007d98:	212f7104 	addi	r4,r4,-16956
 4007d9c:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007da0:	0005883a 	mov	r2,zero
 4007da4:	00005e06 	br	4007f20 <OC_I2CL_Read+0x26c>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 4007da8:	e0bffa43 	ldbu	r2,-23(fp)
 4007dac:	100d883a 	mov	r6,r2
 4007db0:	014000c4 	movi	r5,3
 4007db4:	e13ffc17 	ldw	r4,-16(fp)
 4007db8:	40071700 	call	4007170 <Write32_Data>
 4007dbc:	1000021e 	bne	r2,zero,4007dc8 <OC_I2CL_Read+0x114>
       return FALSE;
 4007dc0:	0005883a 	mov	r2,zero
 4007dc4:	00005606 	br	4007f20 <OC_I2CL_Read+0x26c>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 4007dc8:	01800404 	movi	r6,16
 4007dcc:	01400104 	movi	r5,4
 4007dd0:	e13ffc17 	ldw	r4,-16(fp)
 4007dd4:	40071700 	call	4007170 <Write32_Data>
 4007dd8:	1000021e 	bne	r2,zero,4007de4 <OC_I2CL_Read+0x130>
        return FALSE;
 4007ddc:	0005883a 	mov	r2,zero
 4007de0:	00004f06 	br	4007f20 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007de4:	e13ffc17 	ldw	r4,-16(fp)
 4007de8:	40074e40 	call	40074e4 <ACK_check>
 4007dec:	1000051e 	bne	r2,zero,4007e04 <OC_I2CL_Read+0x150>
        printf("OC_I2CL_Read error[2]\r\n");
 4007df0:	01010234 	movhi	r4,1032
 4007df4:	212f7704 	addi	r4,r4,-16932
 4007df8:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007dfc:	0005883a 	mov	r2,zero
 4007e00:	00004706 	br	4007f20 <OC_I2CL_Read+0x26c>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 4007e04:	e0bffd03 	ldbu	r2,-12(fp)
 4007e08:	10800054 	ori	r2,r2,1
 4007e0c:	10803fcc 	andi	r2,r2,255
 4007e10:	100d883a 	mov	r6,r2
 4007e14:	014000c4 	movi	r5,3
 4007e18:	e13ffc17 	ldw	r4,-16(fp)
 4007e1c:	40071700 	call	4007170 <Write32_Data>
 4007e20:	1000021e 	bne	r2,zero,4007e2c <OC_I2CL_Read+0x178>
         return FALSE;
 4007e24:	0005883a 	mov	r2,zero
 4007e28:	00003d06 	br	4007f20 <OC_I2CL_Read+0x26c>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 4007e2c:	01802404 	movi	r6,144
 4007e30:	01400104 	movi	r5,4
 4007e34:	e13ffc17 	ldw	r4,-16(fp)
 4007e38:	40071700 	call	4007170 <Write32_Data>
 4007e3c:	1000021e 	bne	r2,zero,4007e48 <OC_I2CL_Read+0x194>
         return FALSE;
 4007e40:	0005883a 	mov	r2,zero
 4007e44:	00003606 	br	4007f20 <OC_I2CL_Read+0x26c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4007e48:	e13ffc17 	ldw	r4,-16(fp)
 4007e4c:	40074e40 	call	40074e4 <ACK_check>
 4007e50:	1000051e 	bne	r2,zero,4007e68 <OC_I2CL_Read+0x1b4>
        printf("OC_I2CL_Read error[3]\r\n");
 4007e54:	01010234 	movhi	r4,1032
 4007e58:	212f7d04 	addi	r4,r4,-16908
 4007e5c:	400c6980 	call	400c698 <puts>
        return FALSE;
 4007e60:	0005883a 	mov	r2,zero
 4007e64:	00002e06 	br	4007f20 <OC_I2CL_Read+0x26c>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 4007e68:	e03ff915 	stw	zero,-28(fp)
 4007e6c:	00001f06 	br	4007eec <OC_I2CL_Read+0x238>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4007e70:	e0bffc17 	ldw	r2,-16(fp)
 4007e74:	10800404 	addi	r2,r2,16
 4007e78:	1009883a 	mov	r4,r2
 4007e7c:	e0bff917 	ldw	r2,-28(fp)
 4007e80:	10c00044 	addi	r3,r2,1
 4007e84:	e0800217 	ldw	r2,8(fp)
 4007e88:	1880021e 	bne	r3,r2,4007e94 <OC_I2CL_Read+0x1e0>
 4007e8c:	00800a04 	movi	r2,40
 4007e90:	00000106 	br	4007e98 <OC_I2CL_Read+0x1e4>
 4007e94:	00800804 	movi	r2,32
 4007e98:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4007e9c:	e13ffc17 	ldw	r4,-16(fp)
 4007ea0:	40077400 	call	4007740 <ACK_judge_for_read>
 4007ea4:	1000051e 	bne	r2,zero,4007ebc <OC_I2CL_Read+0x208>
            printf("OC_I2CL_Read error[4]\r\n");
 4007ea8:	01010234 	movhi	r4,1032
 4007eac:	212f8304 	addi	r4,r4,-16884
 4007eb0:	400c6980 	call	400c698 <puts>
            return FALSE;
 4007eb4:	0005883a 	mov	r2,zero
 4007eb8:	00001906 	br	4007f20 <OC_I2CL_Read+0x26c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4007ebc:	e0bffc17 	ldw	r2,-16(fp)
 4007ec0:	10800304 	addi	r2,r2,12
 4007ec4:	10800037 	ldwio	r2,0(r2)
 4007ec8:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4007ecc:	e0bff917 	ldw	r2,-28(fp)
 4007ed0:	e0ffff17 	ldw	r3,-4(fp)
 4007ed4:	1885883a 	add	r2,r3,r2
 4007ed8:	e0fffb17 	ldw	r3,-20(fp)
 4007edc:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 4007ee0:	e0bff917 	ldw	r2,-28(fp)
 4007ee4:	10800044 	addi	r2,r2,1
 4007ee8:	e0bff915 	stw	r2,-28(fp)
 4007eec:	e0fff917 	ldw	r3,-28(fp)
 4007ef0:	e0800217 	ldw	r2,8(fp)
 4007ef4:	18bfde16 	blt	r3,r2,4007e70 <__alt_mem_epcs_flash_controller_0+0xfb006e70>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
 4007ef8:	01801004 	movi	r6,64
 4007efc:	01400104 	movi	r5,4
 4007f00:	e13ffc17 	ldw	r4,-16(fp)
 4007f04:	40071700 	call	4007170 <Write32_Data>
 4007f08:	1000021e 	bne	r2,zero,4007f14 <OC_I2CL_Read+0x260>
       return FALSE;
 4007f0c:	0005883a 	mov	r2,zero
 4007f10:	00000306 	br	4007f20 <OC_I2CL_Read+0x26c>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4007f14:	01003e84 	movi	r4,250
 4007f18:	401a3000 	call	401a300 <usleep>

   return TRUE;
 4007f1c:	00800044 	movi	r2,1

}
 4007f20:	e037883a 	mov	sp,fp
 4007f24:	dfc00117 	ldw	ra,4(sp)
 4007f28:	df000017 	ldw	fp,0(sp)
 4007f2c:	dec00204 	addi	sp,sp,8
 4007f30:	f800283a 	ret

04007f34 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 4007f34:	defffd04 	addi	sp,sp,-12
 4007f38:	dfc00215 	stw	ra,8(sp)
 4007f3c:	df000115 	stw	fp,4(sp)
 4007f40:	df000104 	addi	fp,sp,4
 4007f44:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 4007f48:	e13fff17 	ldw	r4,-4(fp)
 4007f4c:	400c57c0 	call	400c57c <printf>
}
 4007f50:	0001883a 	nop
 4007f54:	e037883a 	mov	sp,fp
 4007f58:	dfc00117 	ldw	ra,4(sp)
 4007f5c:	df000017 	ldw	fp,0(sp)
 4007f60:	dec00204 	addi	sp,sp,8
 4007f64:	f800283a 	ret

04007f68 <myprintf>:





int myprintf(char *format, ...){
 4007f68:	deff7804 	addi	sp,sp,-544
 4007f6c:	dfc08415 	stw	ra,528(sp)
 4007f70:	df008315 	stw	fp,524(sp)
 4007f74:	df008304 	addi	fp,sp,524
 4007f78:	e13fff15 	stw	r4,-4(fp)
 4007f7c:	e1400215 	stw	r5,8(fp)
 4007f80:	e1800315 	stw	r6,12(fp)
 4007f84:	e1c00415 	stw	r7,16(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 4007f88:	e0800204 	addi	r2,fp,8
 4007f8c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 4007f90:	e0fffe17 	ldw	r3,-8(fp)
 4007f94:	e0bf7e04 	addi	r2,fp,-520
 4007f98:	180f883a 	mov	r7,r3
 4007f9c:	e1bfff17 	ldw	r6,-4(fp)
 4007fa0:	01408004 	movi	r5,512
 4007fa4:	1009883a 	mov	r4,r2
 4007fa8:	4010e840 	call	4010e84 <vsnprintf>
 4007fac:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 4007fb0:	e0bf7e04 	addi	r2,fp,-520
 4007fb4:	1009883a 	mov	r4,r2
 4007fb8:	4007f340 	call	4007f34 <debug_output>

    return rc;    
 4007fbc:	e0bf7d17 	ldw	r2,-524(fp)
}
 4007fc0:	e037883a 	mov	sp,fp
 4007fc4:	dfc00117 	ldw	ra,4(sp)
 4007fc8:	df000017 	ldw	fp,0(sp)
 4007fcc:	dec00504 	addi	sp,sp,20
 4007fd0:	f800283a 	ret

04007fd4 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 4007fd4:	defff704 	addi	sp,sp,-36
 4007fd8:	dfc00815 	stw	ra,32(sp)
 4007fdc:	df000715 	stw	fp,28(sp)
 4007fe0:	df000704 	addi	fp,sp,28
 4007fe4:	e13ffe15 	stw	r4,-8(fp)
 4007fe8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4007fec:	e03ff915 	stw	zero,-28(fp)
 4007ff0:	00001106 	br	4008038 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 4007ff4:	e0bff917 	ldw	r2,-28(fp)
 4007ff8:	e0fffe17 	ldw	r3,-8(fp)
 4007ffc:	1885883a 	add	r2,r3,r2
 4008000:	10800003 	ldbu	r2,0(r2)
 4008004:	10c03fcc 	andi	r3,r2,255
 4008008:	e0bffa04 	addi	r2,fp,-24
 400800c:	180d883a 	mov	r6,r3
 4008010:	01410234 	movhi	r5,1032
 4008014:	296f8904 	addi	r5,r5,-16860
 4008018:	1009883a 	mov	r4,r2
 400801c:	400c7580 	call	400c758 <sprintf>
        DEBUG((szText));
 4008020:	e0bffa04 	addi	r2,fp,-24
 4008024:	1009883a 	mov	r4,r2
 4008028:	4007f680 	call	4007f68 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 400802c:	e0bff917 	ldw	r2,-28(fp)
 4008030:	10800044 	addi	r2,r2,1
 4008034:	e0bff915 	stw	r2,-28(fp)
 4008038:	e0fff917 	ldw	r3,-28(fp)
 400803c:	e0bfff17 	ldw	r2,-4(fp)
 4008040:	18bfec16 	blt	r3,r2,4007ff4 <__alt_mem_epcs_flash_controller_0+0xfb006ff4>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 4008044:	e0bfff17 	ldw	r2,-4(fp)
}
 4008048:	e037883a 	mov	sp,fp
 400804c:	dfc00117 	ldw	ra,4(sp)
 4008050:	df000017 	ldw	fp,0(sp)
 4008054:	dec00204 	addi	sp,sp,8
 4008058:	f800283a 	ret

0400805c <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 400805c:	defff704 	addi	sp,sp,-36
 4008060:	dfc00815 	stw	ra,32(sp)
 4008064:	df000715 	stw	fp,28(sp)
 4008068:	df000704 	addi	fp,sp,28
 400806c:	e13ffe15 	stw	r4,-8(fp)
 4008070:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4008074:	e03ff915 	stw	zero,-28(fp)
 4008078:	00001306 	br	40080c8 <myprintf_dwordarray+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 400807c:	e0bff917 	ldw	r2,-28(fp)
 4008080:	1085883a 	add	r2,r2,r2
 4008084:	1085883a 	add	r2,r2,r2
 4008088:	1007883a 	mov	r3,r2
 400808c:	e0bffe17 	ldw	r2,-8(fp)
 4008090:	10c5883a 	add	r2,r2,r3
 4008094:	10c00017 	ldw	r3,0(r2)
 4008098:	e0bffa04 	addi	r2,fp,-24
 400809c:	180d883a 	mov	r6,r3
 40080a0:	01410234 	movhi	r5,1032
 40080a4:	296f8b04 	addi	r5,r5,-16852
 40080a8:	1009883a 	mov	r4,r2
 40080ac:	400c7580 	call	400c758 <sprintf>
        DEBUG((szText));
 40080b0:	e0bffa04 	addi	r2,fp,-24
 40080b4:	1009883a 	mov	r4,r2
 40080b8:	4007f680 	call	4007f68 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 40080bc:	e0bff917 	ldw	r2,-28(fp)
 40080c0:	10800044 	addi	r2,r2,1
 40080c4:	e0bff915 	stw	r2,-28(fp)
 40080c8:	e0fff917 	ldw	r3,-28(fp)
 40080cc:	e0bfff17 	ldw	r2,-4(fp)
 40080d0:	18bfea16 	blt	r3,r2,400807c <__alt_mem_epcs_flash_controller_0+0xfb00707c>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 40080d4:	e0bfff17 	ldw	r2,-4(fp)
}
 40080d8:	e037883a 	mov	sp,fp
 40080dc:	dfc00117 	ldw	ra,4(sp)
 40080e0:	df000017 	ldw	fp,0(sp)
 40080e4:	dec00204 	addi	sp,sp,8
 40080e8:	f800283a 	ret

040080ec <mtc2_QueryData>:
#include "alt_types.h"

#define TRUE 1


static void mtc2_QueryData(MTC2_INFO *p){
 40080ec:	deffe804 	addi	sp,sp,-96
 40080f0:	dfc01715 	stw	ra,92(sp)
 40080f4:	df001615 	stw	fp,88(sp)
 40080f8:	df001604 	addi	fp,sp,88
 40080fc:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;
    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
 4008100:	e0bfff17 	ldw	r2,-4(fp)
 4008104:	10800017 	ldw	r2,0(r2)
 4008108:	1009883a 	mov	r4,r2
 400810c:	e0fff704 	addi	r3,fp,-36
 4008110:	008007c4 	movi	r2,31
 4008114:	d8800015 	stw	r2,0(sp)
 4008118:	180f883a 	mov	r7,r3
 400811c:	000d883a 	mov	r6,zero
 4008120:	01401c04 	movi	r5,112
 4008124:	40077a40 	call	40077a4 <OC_I2C_Read>
 4008128:	10009f26 	beq	r2,zero,40083a8 <mtc2_QueryData+0x2bc>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
 400812c:	01000584 	movi	r4,22
 4008130:	400baa80 	call	400baa8 <malloc>
 4008134:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
 4008138:	e0fff743 	ldbu	r3,-35(fp)
 400813c:	e0bfeb17 	ldw	r2,-84(fp)
 4008140:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
 4008144:	e0fff783 	ldbu	r3,-34(fp)
 4008148:	e0bfeb17 	ldw	r2,-84(fp)
 400814c:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
 4008150:	e0bff7c3 	ldbu	r2,-33(fp)
 4008154:	10803fcc 	andi	r2,r2,255
 4008158:	108003cc 	andi	r2,r2,15
 400815c:	1006923a 	slli	r3,r2,8
 4008160:	e0bff803 	ldbu	r2,-32(fp)
 4008164:	10803fcc 	andi	r2,r2,255
 4008168:	1884b03a 	or	r2,r3,r2
 400816c:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
 4008170:	e0bff843 	ldbu	r2,-31(fp)
 4008174:	10803fcc 	andi	r2,r2,255
 4008178:	108003cc 	andi	r2,r2,15
 400817c:	1006923a 	slli	r3,r2,8
 4008180:	e0bff883 	ldbu	r2,-30(fp)
 4008184:	10803fcc 	andi	r2,r2,255
 4008188:	1884b03a 	or	r2,r3,r2
 400818c:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
 4008190:	e0bff943 	ldbu	r2,-27(fp)
 4008194:	10803fcc 	andi	r2,r2,255
 4008198:	108003cc 	andi	r2,r2,15
 400819c:	1006923a 	slli	r3,r2,8
 40081a0:	e0bff983 	ldbu	r2,-26(fp)
 40081a4:	10803fcc 	andi	r2,r2,255
 40081a8:	1884b03a 	or	r2,r3,r2
 40081ac:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
 40081b0:	e0bff9c3 	ldbu	r2,-25(fp)
 40081b4:	10803fcc 	andi	r2,r2,255
 40081b8:	108003cc 	andi	r2,r2,15
 40081bc:	1006923a 	slli	r3,r2,8
 40081c0:	e0bffa03 	ldbu	r2,-24(fp)
 40081c4:	10803fcc 	andi	r2,r2,255
 40081c8:	1884b03a 	or	r2,r3,r2
 40081cc:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
 40081d0:	e0bffac3 	ldbu	r2,-21(fp)
 40081d4:	10803fcc 	andi	r2,r2,255
 40081d8:	108003cc 	andi	r2,r2,15
 40081dc:	1006923a 	slli	r3,r2,8
 40081e0:	e0bffb03 	ldbu	r2,-20(fp)
 40081e4:	10803fcc 	andi	r2,r2,255
 40081e8:	1884b03a 	or	r2,r3,r2
 40081ec:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
 40081f0:	e0bffb43 	ldbu	r2,-19(fp)
 40081f4:	10803fcc 	andi	r2,r2,255
 40081f8:	108003cc 	andi	r2,r2,15
 40081fc:	1006923a 	slli	r3,r2,8
 4008200:	e0bffb83 	ldbu	r2,-18(fp)
 4008204:	10803fcc 	andi	r2,r2,255
 4008208:	1884b03a 	or	r2,r3,r2
 400820c:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
 4008210:	e0bffc43 	ldbu	r2,-15(fp)
 4008214:	10803fcc 	andi	r2,r2,255
 4008218:	108003cc 	andi	r2,r2,15
 400821c:	1006923a 	slli	r3,r2,8
 4008220:	e0bffc83 	ldbu	r2,-14(fp)
 4008224:	10803fcc 	andi	r2,r2,255
 4008228:	1884b03a 	or	r2,r3,r2
 400822c:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
 4008230:	e0bffcc3 	ldbu	r2,-13(fp)
 4008234:	10803fcc 	andi	r2,r2,255
 4008238:	108003cc 	andi	r2,r2,15
 400823c:	1006923a 	slli	r3,r2,8
 4008240:	e0bffd03 	ldbu	r2,-12(fp)
 4008244:	10803fcc 	andi	r2,r2,255
 4008248:	1884b03a 	or	r2,r3,r2
 400824c:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
 4008250:	e0bffdc3 	ldbu	r2,-9(fp)
 4008254:	10803fcc 	andi	r2,r2,255
 4008258:	108003cc 	andi	r2,r2,15
 400825c:	1006923a 	slli	r3,r2,8
 4008260:	e0bffe03 	ldbu	r2,-8(fp)
 4008264:	10803fcc 	andi	r2,r2,255
 4008268:	1884b03a 	or	r2,r3,r2
 400826c:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
 4008270:	e0bffe43 	ldbu	r2,-7(fp)
 4008274:	10803fcc 	andi	r2,r2,255
 4008278:	108003cc 	andi	r2,r2,15
 400827c:	1006923a 	slli	r3,r2,8
 4008280:	e0bffe83 	ldbu	r2,-6(fp)
 4008284:	10803fcc 	andi	r2,r2,255
 4008288:	1884b03a 	or	r2,r3,r2
 400828c:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
 4008290:	e0bfec17 	ldw	r2,-80(fp)
 4008294:	1080c824 	muli	r2,r2,800
 4008298:	1004d2ba 	srli	r2,r2,10
 400829c:	1007883a 	mov	r3,r2
 40082a0:	e0bfeb17 	ldw	r2,-84(fp)
 40082a4:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
 40082a8:	e0bfed17 	ldw	r2,-76(fp)
 40082ac:	01400284 	movi	r5,10
 40082b0:	1009883a 	mov	r4,r2
 40082b4:	40095800 	call	4009580 <__udivsi3>
 40082b8:	100490fa 	slli	r2,r2,3
 40082bc:	1007883a 	mov	r3,r2
 40082c0:	e0bfeb17 	ldw	r2,-84(fp)
 40082c4:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
 40082c8:	e0bfee17 	ldw	r2,-72(fp)
 40082cc:	1080c824 	muli	r2,r2,800
 40082d0:	1004d2ba 	srli	r2,r2,10
 40082d4:	1007883a 	mov	r3,r2
 40082d8:	e0bfeb17 	ldw	r2,-84(fp)
 40082dc:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
 40082e0:	e0bfef17 	ldw	r2,-68(fp)
 40082e4:	01400284 	movi	r5,10
 40082e8:	1009883a 	mov	r4,r2
 40082ec:	40095800 	call	4009580 <__udivsi3>
 40082f0:	100490fa 	slli	r2,r2,3
 40082f4:	1007883a 	mov	r3,r2
 40082f8:	e0bfeb17 	ldw	r2,-84(fp)
 40082fc:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
 4008300:	e0bff017 	ldw	r2,-64(fp)
 4008304:	1080c824 	muli	r2,r2,800
 4008308:	1004d2ba 	srli	r2,r2,10
 400830c:	1007883a 	mov	r3,r2
 4008310:	e0bfeb17 	ldw	r2,-84(fp)
 4008314:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
 4008318:	e0bff117 	ldw	r2,-60(fp)
 400831c:	01400284 	movi	r5,10
 4008320:	1009883a 	mov	r4,r2
 4008324:	40095800 	call	4009580 <__udivsi3>
 4008328:	100490fa 	slli	r2,r2,3
 400832c:	1007883a 	mov	r3,r2
 4008330:	e0bfeb17 	ldw	r2,-84(fp)
 4008334:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
 4008338:	e0bff217 	ldw	r2,-56(fp)
 400833c:	1080c824 	muli	r2,r2,800
 4008340:	1004d2ba 	srli	r2,r2,10
 4008344:	1007883a 	mov	r3,r2
 4008348:	e0bfeb17 	ldw	r2,-84(fp)
 400834c:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
 4008350:	e0bff317 	ldw	r2,-52(fp)
 4008354:	01400284 	movi	r5,10
 4008358:	1009883a 	mov	r4,r2
 400835c:	40095800 	call	4009580 <__udivsi3>
 4008360:	100490fa 	slli	r2,r2,3
 4008364:	1007883a 	mov	r3,r2
 4008368:	e0bfeb17 	ldw	r2,-84(fp)
 400836c:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
 4008370:	e0bff417 	ldw	r2,-48(fp)
 4008374:	1080c824 	muli	r2,r2,800
 4008378:	1004d2ba 	srli	r2,r2,10
 400837c:	1007883a 	mov	r3,r2
 4008380:	e0bfeb17 	ldw	r2,-84(fp)
 4008384:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
 4008388:	e0bff517 	ldw	r2,-44(fp)
 400838c:	01400284 	movi	r5,10
 4008390:	1009883a 	mov	r4,r2
 4008394:	40095800 	call	4009580 <__udivsi3>
 4008398:	100490fa 	slli	r2,r2,3
 400839c:	1007883a 	mov	r3,r2
 40083a0:	e0bfeb17 	ldw	r2,-84(fp)
 40083a4:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
 40083a8:	e0bfeb17 	ldw	r2,-84(fp)
 40083ac:	10800043 	ldbu	r2,1(r2)
 40083b0:	10803fcc 	andi	r2,r2,255
 40083b4:	10001826 	beq	r2,zero,4008418 <mtc2_QueryData+0x32c>
 40083b8:	e0bfeb17 	ldw	r2,-84(fp)
 40083bc:	10800043 	ldbu	r2,1(r2)
 40083c0:	10803fcc 	andi	r2,r2,255
 40083c4:	108001a8 	cmpgeui	r2,r2,6
 40083c8:	1000131e 	bne	r2,zero,4008418 <mtc2_QueryData+0x32c>
    {
		if (QUEUE_IsFull(p->pQueue)){
 40083cc:	e0bfff17 	ldw	r2,-4(fp)
 40083d0:	10800317 	ldw	r2,12(r2)
 40083d4:	1009883a 	mov	r4,r2
 40083d8:	40088780 	call	4008878 <QUEUE_IsFull>
 40083dc:	10000726 	beq	r2,zero,40083fc <mtc2_QueryData+0x310>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 40083e0:	e0bfff17 	ldw	r2,-4(fp)
 40083e4:	10800317 	ldw	r2,12(r2)
 40083e8:	1009883a 	mov	r4,r2
 40083ec:	40089700 	call	4008970 <QUEUE_Pop>
 40083f0:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
 40083f4:	e13ff617 	ldw	r4,-40(fp)
 40083f8:	400babc0 	call	400babc <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
 40083fc:	e0bfff17 	ldw	r2,-4(fp)
 4008400:	10800317 	ldw	r2,12(r2)
 4008404:	e0ffeb17 	ldw	r3,-84(fp)
 4008408:	180b883a 	mov	r5,r3
 400840c:	1009883a 	mov	r4,r2
 4008410:	40088dc0 	call	40088dc <QUEUE_Push>
 4008414:	00000206 	br	4008420 <mtc2_QueryData+0x334>
    }
    else
    	free(pEvent);
 4008418:	e13feb17 	ldw	r4,-84(fp)
 400841c:	400babc0 	call	400babc <free>
}
 4008420:	0001883a 	nop
 4008424:	e037883a 	mov	sp,fp
 4008428:	dfc00117 	ldw	ra,4(sp)
 400842c:	df000017 	ldw	fp,0(sp)
 4008430:	dec00204 	addi	sp,sp,8
 4008434:	f800283a 	ret

04008438 <mtc2_ISR>:


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void mtc2_ISR(void* context){
 4008438:	defffc04 	addi	sp,sp,-16
 400843c:	dfc00315 	stw	ra,12(sp)
 4008440:	df000215 	stw	fp,8(sp)
 4008444:	df000204 	addi	fp,sp,8
 4008448:	e13fff15 	stw	r4,-4(fp)
#else
static void mtc2_ISR(void* context, alt_u32 id){
#endif
   MTC2_INFO *p = (MTC2_INFO *)context;
 400844c:	e0bfff17 	ldw	r2,-4(fp)
 4008450:	e0bffe15 	stw	r2,-8(fp)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 4008454:	e0bffe17 	ldw	r2,-8(fp)
 4008458:	10800217 	ldw	r2,8(r2)
 400845c:	100b883a 	mov	r5,r2
 4008460:	0009883a 	mov	r4,zero
 4008464:	4019a940 	call	4019a94 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif
    mtc2_QueryData(p);
 4008468:	e13ffe17 	ldw	r4,-8(fp)
 400846c:	40080ec0 	call	40080ec <mtc2_QueryData>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
 4008470:	e0bffe17 	ldw	r2,-8(fp)
 4008474:	10800117 	ldw	r2,4(r2)
 4008478:	10800304 	addi	r2,r2,12
 400847c:	0007883a 	mov	r3,zero
 4008480:	10c00035 	stwio	r3,0(r2)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 4008484:	e0bffe17 	ldw	r2,-8(fp)
 4008488:	10800217 	ldw	r2,8(r2)
 400848c:	100b883a 	mov	r5,r2
 4008490:	0009883a 	mov	r4,zero
 4008494:	4019a0c0 	call	4019a0c <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif
 }
 4008498:	0001883a 	nop
 400849c:	e037883a 	mov	sp,fp
 40084a0:	dfc00117 	ldw	ra,4(sp)
 40084a4:	df000017 	ldw	fp,0(sp)
 40084a8:	dec00204 	addi	sp,sp,8
 40084ac:	f800283a 	ret

040084b0 <MTC2_Init>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM)
{
 40084b0:	defff904 	addi	sp,sp,-28
 40084b4:	dfc00615 	stw	ra,24(sp)
 40084b8:	df000515 	stw	fp,20(sp)
 40084bc:	df000504 	addi	fp,sp,20
 40084c0:	e13ffd15 	stw	r4,-12(fp)
 40084c4:	e17ffe15 	stw	r5,-8(fp)
 40084c8:	e1bfff15 	stw	r6,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
 40084cc:	01000404 	movi	r4,16
 40084d0:	400baa80 	call	400baa8 <malloc>
 40084d4:	e0bffc15 	stw	r2,-16(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
 40084d8:	e0bffc17 	ldw	r2,-16(fp)
 40084dc:	e0fffd17 	ldw	r3,-12(fp)
 40084e0:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
 40084e4:	e0bffc17 	ldw	r2,-16(fp)
 40084e8:	e0fffe17 	ldw	r3,-8(fp)
 40084ec:	10c00115 	stw	r3,4(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
 40084f0:	e0bffc17 	ldw	r2,-16(fp)
 40084f4:	e0ffff17 	ldw	r3,-4(fp)
 40084f8:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
 40084fc:	01000804 	movi	r4,32
 4008500:	40087940 	call	4008794 <QUEUE_New>
 4008504:	1007883a 	mov	r3,r2
 4008508:	e0bffc17 	ldw	r2,-16(fp)
 400850c:	10c00315 	stw	r3,12(r2)


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
 4008510:	e0bffc17 	ldw	r2,-16(fp)
 4008514:	10800117 	ldw	r2,4(r2)
 4008518:	10800204 	addi	r2,r2,8
 400851c:	0007883a 	mov	r3,zero
 4008520:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 4008524:	e0bffc17 	ldw	r2,-16(fp)
 4008528:	10800117 	ldw	r2,4(r2)
 400852c:	10800304 	addi	r2,r2,12
 4008530:	0007883a 	mov	r3,zero
 4008534:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
 4008538:	e0bffc17 	ldw	r2,-16(fp)
 400853c:	10800217 	ldw	r2,8(r2)
 4008540:	d8000015 	stw	zero,0(sp)
 4008544:	e1fffc17 	ldw	r7,-16(fp)
 4008548:	01810074 	movhi	r6,1025
 400854c:	31a10e04 	addi	r6,r6,-31688
 4008550:	100b883a 	mov	r5,r2
 4008554:	0009883a 	mov	r4,zero
 4008558:	40199bc0 	call	40199bc <alt_ic_isr_register>
 400855c:	10000426 	beq	r2,zero,4008570 <MTC2_Init+0xc0>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->INT_IRQ_NUM, (void *)p, mtc2_ISR) != 0)){
 #endif

	  printf(("[TOUCH]register IRQ fail\n"));
 4008560:	01010234 	movhi	r4,1032
 4008564:	212f8d04 	addi	r4,r4,-16844
 4008568:	400c6980 	call	400c698 <puts>
 400856c:	00000306 	br	400857c <MTC2_Init+0xcc>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
 4008570:	01010234 	movhi	r4,1032
 4008574:	212f9404 	addi	r4,r4,-16816
 4008578:	400c6980 	call	400c698 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
 400857c:	e0bffc17 	ldw	r2,-16(fp)
 4008580:	10800117 	ldw	r2,4(r2)
 4008584:	10800204 	addi	r2,r2,8
 4008588:	1007883a 	mov	r3,r2
 400858c:	00800044 	movi	r2,1
 4008590:	18800035 	stwio	r2,0(r3)
    return p;
 4008594:	e0bffc17 	ldw	r2,-16(fp)
}
 4008598:	e037883a 	mov	sp,fp
 400859c:	dfc00117 	ldw	ra,4(sp)
 40085a0:	df000017 	ldw	fp,0(sp)
 40085a4:	dec00204 	addi	sp,sp,8
 40085a8:	f800283a 	ret

040085ac <MTC2_UnInit>:

void MTC2_UnInit(MTC2_INFO *p){
 40085ac:	defffd04 	addi	sp,sp,-12
 40085b0:	dfc00215 	stw	ra,8(sp)
 40085b4:	df000115 	stw	fp,4(sp)
 40085b8:	df000104 	addi	fp,sp,4
 40085bc:	e13fff15 	stw	r4,-4(fp)
    if (p){
 40085c0:	e0bfff17 	ldw	r2,-4(fp)
 40085c4:	10000626 	beq	r2,zero,40085e0 <MTC2_UnInit+0x34>
        QUEUE_Delete(p->pQueue);
 40085c8:	e0bfff17 	ldw	r2,-4(fp)
 40085cc:	10800317 	ldw	r2,12(r2)
 40085d0:	1009883a 	mov	r4,r2
 40085d4:	40088040 	call	4008804 <QUEUE_Delete>
        free(p);
 40085d8:	e13fff17 	ldw	r4,-4(fp)
 40085dc:	400babc0 	call	400babc <free>
    }
}
 40085e0:	0001883a 	nop
 40085e4:	e037883a 	mov	sp,fp
 40085e8:	dfc00117 	ldw	ra,4(sp)
 40085ec:	df000017 	ldw	fp,0(sp)
 40085f0:	dec00204 	addi	sp,sp,8
 40085f4:	f800283a 	ret

040085f8 <MTC2_GetStatus>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
 40085f8:	defff804 	addi	sp,sp,-32
 40085fc:	dfc00715 	stw	ra,28(sp)
 4008600:	df000615 	stw	fp,24(sp)
 4008604:	df000604 	addi	fp,sp,24
 4008608:	e13ffc15 	stw	r4,-16(fp)
 400860c:	e17ffd15 	stw	r5,-12(fp)
 4008610:	e1bffe15 	stw	r6,-8(fp)
 4008614:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
 4008618:	e0bffc17 	ldw	r2,-16(fp)
 400861c:	10800317 	ldw	r2,12(r2)
 4008620:	1009883a 	mov	r4,r2
 4008624:	40088380 	call	4008838 <QUEUE_IsEmpty>
 4008628:	1005003a 	cmpeq	r2,r2,zero
 400862c:	10803fcc 	andi	r2,r2,255
 4008630:	e0bffa15 	stw	r2,-24(fp)
    if (bFind){
 4008634:	e0bffa17 	ldw	r2,-24(fp)
 4008638:	10004126 	beq	r2,zero,4008740 <MTC2_GetStatus+0x148>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 400863c:	e0bffc17 	ldw	r2,-16(fp)
 4008640:	10800317 	ldw	r2,12(r2)
 4008644:	1009883a 	mov	r4,r2
 4008648:	40089700 	call	4008970 <QUEUE_Pop>
 400864c:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
 4008650:	e0bffb17 	ldw	r2,-20(fp)
 4008654:	10c00003 	ldbu	r3,0(r2)
 4008658:	e0bffd17 	ldw	r2,-12(fp)
 400865c:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
 4008660:	e0bffb17 	ldw	r2,-20(fp)
 4008664:	10c00043 	ldbu	r3,1(r2)
 4008668:	e0bffe17 	ldw	r2,-8(fp)
 400866c:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
 4008670:	e0bffb17 	ldw	r2,-20(fp)
 4008674:	1080008b 	ldhu	r2,2(r2)
 4008678:	10ffffcc 	andi	r3,r2,65535
 400867c:	e0bfff17 	ldw	r2,-4(fp)
 4008680:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
 4008684:	e0bffb17 	ldw	r2,-20(fp)
 4008688:	1080010b 	ldhu	r2,4(r2)
 400868c:	10ffffcc 	andi	r3,r2,65535
 4008690:	e0800217 	ldw	r2,8(fp)
 4008694:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
 4008698:	e0bffb17 	ldw	r2,-20(fp)
 400869c:	1080018b 	ldhu	r2,6(r2)
 40086a0:	10ffffcc 	andi	r3,r2,65535
 40086a4:	e0800317 	ldw	r2,12(fp)
 40086a8:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
 40086ac:	e0bffb17 	ldw	r2,-20(fp)
 40086b0:	1080020b 	ldhu	r2,8(r2)
 40086b4:	10ffffcc 	andi	r3,r2,65535
 40086b8:	e0800417 	ldw	r2,16(fp)
 40086bc:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
 40086c0:	e0bffb17 	ldw	r2,-20(fp)
 40086c4:	1080028b 	ldhu	r2,10(r2)
 40086c8:	10ffffcc 	andi	r3,r2,65535
 40086cc:	e0800517 	ldw	r2,20(fp)
 40086d0:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
 40086d4:	e0bffb17 	ldw	r2,-20(fp)
 40086d8:	1080030b 	ldhu	r2,12(r2)
 40086dc:	10ffffcc 	andi	r3,r2,65535
 40086e0:	e0800617 	ldw	r2,24(fp)
 40086e4:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
 40086e8:	e0bffb17 	ldw	r2,-20(fp)
 40086ec:	1080038b 	ldhu	r2,14(r2)
 40086f0:	10ffffcc 	andi	r3,r2,65535
 40086f4:	e0800717 	ldw	r2,28(fp)
 40086f8:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
 40086fc:	e0bffb17 	ldw	r2,-20(fp)
 4008700:	1080040b 	ldhu	r2,16(r2)
 4008704:	10ffffcc 	andi	r3,r2,65535
 4008708:	e0800817 	ldw	r2,32(fp)
 400870c:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
 4008710:	e0bffb17 	ldw	r2,-20(fp)
 4008714:	1080048b 	ldhu	r2,18(r2)
 4008718:	10ffffcc 	andi	r3,r2,65535
 400871c:	e0800917 	ldw	r2,36(fp)
 4008720:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
 4008724:	e0bffb17 	ldw	r2,-20(fp)
 4008728:	1080050b 	ldhu	r2,20(r2)
 400872c:	10ffffcc 	andi	r3,r2,65535
 4008730:	e0800a17 	ldw	r2,40(fp)
 4008734:	10c00015 	stw	r3,0(r2)
        free(pEvent);
 4008738:	e13ffb17 	ldw	r4,-20(fp)
 400873c:	400babc0 	call	400babc <free>
    }
    return bFind;
 4008740:	e0bffa17 	ldw	r2,-24(fp)
}
 4008744:	e037883a 	mov	sp,fp
 4008748:	dfc00117 	ldw	ra,4(sp)
 400874c:	df000017 	ldw	fp,0(sp)
 4008750:	dec00204 	addi	sp,sp,8
 4008754:	f800283a 	ret

04008758 <MTC2_ClearEvent>:


void MTC2_ClearEvent(MTC2_INFO *p){
 4008758:	defffd04 	addi	sp,sp,-12
 400875c:	dfc00215 	stw	ra,8(sp)
 4008760:	df000115 	stw	fp,4(sp)
 4008764:	df000104 	addi	fp,sp,4
 4008768:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
 400876c:	e0bfff17 	ldw	r2,-4(fp)
 4008770:	10800317 	ldw	r2,12(r2)
 4008774:	1009883a 	mov	r4,r2
 4008778:	4008a000 	call	4008a00 <QUEUE_Empty>
}
 400877c:	0001883a 	nop
 4008780:	e037883a 	mov	sp,fp
 4008784:	dfc00117 	ldw	ra,4(sp)
 4008788:	df000017 	ldw	fp,0(sp)
 400878c:	dec00204 	addi	sp,sp,8
 4008790:	f800283a 	ret

04008794 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 4008794:	defffb04 	addi	sp,sp,-20
 4008798:	dfc00415 	stw	ra,16(sp)
 400879c:	df000315 	stw	fp,12(sp)
 40087a0:	df000304 	addi	fp,sp,12
 40087a4:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 40087a8:	e0bfff17 	ldw	r2,-4(fp)
 40087ac:	10800144 	addi	r2,r2,5
 40087b0:	1085883a 	add	r2,r2,r2
 40087b4:	1085883a 	add	r2,r2,r2
 40087b8:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 40087bc:	e0bffd17 	ldw	r2,-12(fp)
 40087c0:	1009883a 	mov	r4,r2
 40087c4:	400baa80 	call	400baa8 <malloc>
 40087c8:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 40087cc:	e0bffd17 	ldw	r2,-12(fp)
 40087d0:	100d883a 	mov	r6,r2
 40087d4:	000b883a 	mov	r5,zero
 40087d8:	e13ffe17 	ldw	r4,-8(fp)
 40087dc:	400c4240 	call	400c424 <memset>
    pQueue->num = nQueueNum;
 40087e0:	e0ffff17 	ldw	r3,-4(fp)
 40087e4:	e0bffe17 	ldw	r2,-8(fp)
 40087e8:	10c00015 	stw	r3,0(r2)
    return pQueue;
 40087ec:	e0bffe17 	ldw	r2,-8(fp)
}
 40087f0:	e037883a 	mov	sp,fp
 40087f4:	dfc00117 	ldw	ra,4(sp)
 40087f8:	df000017 	ldw	fp,0(sp)
 40087fc:	dec00204 	addi	sp,sp,8
 4008800:	f800283a 	ret

04008804 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 4008804:	defffd04 	addi	sp,sp,-12
 4008808:	dfc00215 	stw	ra,8(sp)
 400880c:	df000115 	stw	fp,4(sp)
 4008810:	df000104 	addi	fp,sp,4
 4008814:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 4008818:	e13fff17 	ldw	r4,-4(fp)
 400881c:	400babc0 	call	400babc <free>
}
 4008820:	0001883a 	nop
 4008824:	e037883a 	mov	sp,fp
 4008828:	dfc00117 	ldw	ra,4(sp)
 400882c:	df000017 	ldw	fp,0(sp)
 4008830:	dec00204 	addi	sp,sp,8
 4008834:	f800283a 	ret

04008838 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 4008838:	defffe04 	addi	sp,sp,-8
 400883c:	df000115 	stw	fp,4(sp)
 4008840:	df000104 	addi	fp,sp,4
 4008844:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 4008848:	e0bfff17 	ldw	r2,-4(fp)
 400884c:	10c00117 	ldw	r3,4(r2)
 4008850:	e0bfff17 	ldw	r2,-4(fp)
 4008854:	10800217 	ldw	r2,8(r2)
 4008858:	1880021e 	bne	r3,r2,4008864 <QUEUE_IsEmpty+0x2c>
        return TRUE;
 400885c:	00800044 	movi	r2,1
 4008860:	00000106 	br	4008868 <QUEUE_IsEmpty+0x30>
    return FALSE;
 4008864:	0005883a 	mov	r2,zero
}
 4008868:	e037883a 	mov	sp,fp
 400886c:	df000017 	ldw	fp,0(sp)
 4008870:	dec00104 	addi	sp,sp,4
 4008874:	f800283a 	ret

04008878 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 4008878:	defffd04 	addi	sp,sp,-12
 400887c:	dfc00215 	stw	ra,8(sp)
 4008880:	df000115 	stw	fp,4(sp)
 4008884:	df000104 	addi	fp,sp,4
 4008888:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 400888c:	e0bfff17 	ldw	r2,-4(fp)
 4008890:	10800117 	ldw	r2,4(r2)
 4008894:	10c00044 	addi	r3,r2,1
 4008898:	e0bfff17 	ldw	r2,-4(fp)
 400889c:	10800017 	ldw	r2,0(r2)
 40088a0:	100b883a 	mov	r5,r2
 40088a4:	1809883a 	mov	r4,r3
 40088a8:	40095e40 	call	40095e4 <__umodsi3>
 40088ac:	1007883a 	mov	r3,r2
 40088b0:	e0bfff17 	ldw	r2,-4(fp)
 40088b4:	10800217 	ldw	r2,8(r2)
 40088b8:	1880021e 	bne	r3,r2,40088c4 <QUEUE_IsFull+0x4c>
        return TRUE;
 40088bc:	00800044 	movi	r2,1
 40088c0:	00000106 	br	40088c8 <QUEUE_IsFull+0x50>
    return FALSE;
 40088c4:	0005883a 	mov	r2,zero
}
 40088c8:	e037883a 	mov	sp,fp
 40088cc:	dfc00117 	ldw	ra,4(sp)
 40088d0:	df000017 	ldw	fp,0(sp)
 40088d4:	dec00204 	addi	sp,sp,8
 40088d8:	f800283a 	ret

040088dc <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 40088dc:	defffc04 	addi	sp,sp,-16
 40088e0:	dfc00315 	stw	ra,12(sp)
 40088e4:	df000215 	stw	fp,8(sp)
 40088e8:	df000204 	addi	fp,sp,8
 40088ec:	e13ffe15 	stw	r4,-8(fp)
 40088f0:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 40088f4:	e13ffe17 	ldw	r4,-8(fp)
 40088f8:	40088780 	call	4008878 <QUEUE_IsFull>
 40088fc:	10000226 	beq	r2,zero,4008908 <QUEUE_Push+0x2c>
        return FALSE;
 4008900:	0005883a 	mov	r2,zero
 4008904:	00001506 	br	400895c <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 4008908:	e0bffe17 	ldw	r2,-8(fp)
 400890c:	10800117 	ldw	r2,4(r2)
 4008910:	e0fffe17 	ldw	r3,-8(fp)
 4008914:	108000c4 	addi	r2,r2,3
 4008918:	1085883a 	add	r2,r2,r2
 400891c:	1085883a 	add	r2,r2,r2
 4008920:	1885883a 	add	r2,r3,r2
 4008924:	e0ffff17 	ldw	r3,-4(fp)
 4008928:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 400892c:	e0bffe17 	ldw	r2,-8(fp)
 4008930:	10800117 	ldw	r2,4(r2)
 4008934:	10c00044 	addi	r3,r2,1
 4008938:	e0bffe17 	ldw	r2,-8(fp)
 400893c:	10800017 	ldw	r2,0(r2)
 4008940:	100b883a 	mov	r5,r2
 4008944:	1809883a 	mov	r4,r3
 4008948:	40095e40 	call	40095e4 <__umodsi3>
 400894c:	1007883a 	mov	r3,r2
 4008950:	e0bffe17 	ldw	r2,-8(fp)
 4008954:	10c00115 	stw	r3,4(r2)
    return TRUE;
 4008958:	00800044 	movi	r2,1
}
 400895c:	e037883a 	mov	sp,fp
 4008960:	dfc00117 	ldw	ra,4(sp)
 4008964:	df000017 	ldw	fp,0(sp)
 4008968:	dec00204 	addi	sp,sp,8
 400896c:	f800283a 	ret

04008970 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 4008970:	defffc04 	addi	sp,sp,-16
 4008974:	dfc00315 	stw	ra,12(sp)
 4008978:	df000215 	stw	fp,8(sp)
 400897c:	df000204 	addi	fp,sp,8
 4008980:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 4008984:	e13fff17 	ldw	r4,-4(fp)
 4008988:	40088380 	call	4008838 <QUEUE_IsEmpty>
 400898c:	10000226 	beq	r2,zero,4008998 <QUEUE_Pop+0x28>
        return 0;
 4008990:	0005883a 	mov	r2,zero
 4008994:	00001506 	br	40089ec <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 4008998:	e0bfff17 	ldw	r2,-4(fp)
 400899c:	10800217 	ldw	r2,8(r2)
 40089a0:	e0ffff17 	ldw	r3,-4(fp)
 40089a4:	108000c4 	addi	r2,r2,3
 40089a8:	1085883a 	add	r2,r2,r2
 40089ac:	1085883a 	add	r2,r2,r2
 40089b0:	1885883a 	add	r2,r3,r2
 40089b4:	10800017 	ldw	r2,0(r2)
 40089b8:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 40089bc:	e0bfff17 	ldw	r2,-4(fp)
 40089c0:	10800217 	ldw	r2,8(r2)
 40089c4:	10c00044 	addi	r3,r2,1
 40089c8:	e0bfff17 	ldw	r2,-4(fp)
 40089cc:	10800017 	ldw	r2,0(r2)
 40089d0:	100b883a 	mov	r5,r2
 40089d4:	1809883a 	mov	r4,r3
 40089d8:	40095e40 	call	40095e4 <__umodsi3>
 40089dc:	1007883a 	mov	r3,r2
 40089e0:	e0bfff17 	ldw	r2,-4(fp)
 40089e4:	10c00215 	stw	r3,8(r2)
    return data32;
 40089e8:	e0bffe17 	ldw	r2,-8(fp)
}
 40089ec:	e037883a 	mov	sp,fp
 40089f0:	dfc00117 	ldw	ra,4(sp)
 40089f4:	df000017 	ldw	fp,0(sp)
 40089f8:	dec00204 	addi	sp,sp,8
 40089fc:	f800283a 	ret

04008a00 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 4008a00:	defffe04 	addi	sp,sp,-8
 4008a04:	df000115 	stw	fp,4(sp)
 4008a08:	df000104 	addi	fp,sp,4
 4008a0c:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 4008a10:	e0bfff17 	ldw	r2,-4(fp)
 4008a14:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 4008a18:	e0bfff17 	ldw	r2,-4(fp)
 4008a1c:	10000215 	stw	zero,8(r2)
}
 4008a20:	0001883a 	nop
 4008a24:	e037883a 	mov	sp,fp
 4008a28:	df000017 	ldw	fp,0(sp)
 4008a2c:	dec00104 	addi	sp,sp,4
 4008a30:	f800283a 	ret

04008a34 <VIPFR_Init>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
 4008a34:	defff904 	addi	sp,sp,-28
 4008a38:	dfc00615 	stw	ra,24(sp)
 4008a3c:	df000515 	stw	fp,20(sp)
 4008a40:	df000504 	addi	fp,sp,20
 4008a44:	e13ffc15 	stw	r4,-16(fp)
 4008a48:	e17ffd15 	stw	r5,-12(fp)
 4008a4c:	e1bffe15 	stw	r6,-8(fp)
 4008a50:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = malloc(sizeof(VIP_FRAME_READER));
 4008a54:	01000904 	movi	r4,36
 4008a58:	400baa80 	call	400baa8 <malloc>
 4008a5c:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
 4008a60:	e0bffb17 	ldw	r2,-20(fp)
 4008a64:	e0fffc17 	ldw	r3,-16(fp)
 4008a68:	10c00015 	stw	r3,0(r2)
    p->Frame0_Base = Frame0_Base;
 4008a6c:	e0bffb17 	ldw	r2,-20(fp)
 4008a70:	e0fffd17 	ldw	r3,-12(fp)
 4008a74:	10c00115 	stw	r3,4(r2)
    p->Frame1_Base = Frame1_Base;
 4008a78:	e0bffb17 	ldw	r2,-20(fp)
 4008a7c:	e0fffe17 	ldw	r3,-8(fp)
 4008a80:	10c00215 	stw	r3,8(r2)
    p->DisplayFrame = 0;
 4008a84:	e0bffb17 	ldw	r2,-20(fp)
 4008a88:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
 4008a8c:	e0bffb17 	ldw	r2,-20(fp)
 4008a90:	00c00104 	movi	r3,4
 4008a94:	10c00715 	stw	r3,28(r2)
    p->color_depth = 32;
 4008a98:	e0bffb17 	ldw	r2,-20(fp)
 4008a9c:	00c00804 	movi	r3,32
 4008aa0:	10c00415 	stw	r3,16(r2)
    p->interlace = 0;
 4008aa4:	e0bffb17 	ldw	r2,-20(fp)
 4008aa8:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
 4008aac:	000b883a 	mov	r5,zero
 4008ab0:	e13ffc17 	ldw	r4,-16(fp)
 4008ab4:	4008f700 	call	4008f70 <FrameReader_Go>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
 4008ab8:	e0bfff17 	ldw	r2,-4(fp)
 4008abc:	e0c00217 	ldw	r3,8(fp)
 4008ac0:	180d883a 	mov	r6,r3
 4008ac4:	100b883a 	mov	r5,r2
 4008ac8:	e13ffb17 	ldw	r4,-20(fp)
 4008acc:	4008b480 	call	4008b48 <VIPFR_SetFrameSize>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
 4008ad0:	e0bffb17 	ldw	r2,-20(fp)
 4008ad4:	10800303 	ldbu	r2,12(r2)
 4008ad8:	10803fcc 	andi	r2,r2,255
 4008adc:	100b883a 	mov	r5,r2
 4008ae0:	e13ffc17 	ldw	r4,-16(fp)
 4008ae4:	4008f300 	call	4008f30 <FrameReader_SelectFrame>
    //
    FrameReader_Go(VipBase, TRUE); // go
 4008ae8:	01400044 	movi	r5,1
 4008aec:	e13ffc17 	ldw	r4,-16(fp)
 4008af0:	4008f700 	call	4008f70 <FrameReader_Go>
    
    return p;
 4008af4:	e0bffb17 	ldw	r2,-20(fp)
}
 4008af8:	e037883a 	mov	sp,fp
 4008afc:	dfc00117 	ldw	ra,4(sp)
 4008b00:	df000017 	ldw	fp,0(sp)
 4008b04:	dec00204 	addi	sp,sp,8
 4008b08:	f800283a 	ret

04008b0c <VIPFR_UnInit>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
 4008b0c:	defffd04 	addi	sp,sp,-12
 4008b10:	dfc00215 	stw	ra,8(sp)
 4008b14:	df000115 	stw	fp,4(sp)
 4008b18:	df000104 	addi	fp,sp,4
 4008b1c:	e13fff15 	stw	r4,-4(fp)
    if (p)
 4008b20:	e0bfff17 	ldw	r2,-4(fp)
 4008b24:	10000226 	beq	r2,zero,4008b30 <VIPFR_UnInit+0x24>
        free(p);
 4008b28:	e13fff17 	ldw	r4,-4(fp)
 4008b2c:	400babc0 	call	400babc <free>
}
 4008b30:	0001883a 	nop
 4008b34:	e037883a 	mov	sp,fp
 4008b38:	dfc00117 	ldw	ra,4(sp)
 4008b3c:	df000017 	ldw	fp,0(sp)
 4008b40:	dec00204 	addi	sp,sp,8
 4008b44:	f800283a 	ret

04008b48 <VIPFR_SetFrameSize>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
 4008b48:	defff604 	addi	sp,sp,-40
 4008b4c:	dfc00915 	stw	ra,36(sp)
 4008b50:	df000815 	stw	fp,32(sp)
 4008b54:	df000804 	addi	fp,sp,32
 4008b58:	e13ffd15 	stw	r4,-12(fp)
 4008b5c:	e17ffe15 	stw	r5,-8(fp)
 4008b60:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
 4008b64:	e0fffe17 	ldw	r3,-8(fp)
 4008b68:	e0bfff17 	ldw	r2,-4(fp)
 4008b6c:	1885383a 	mul	r2,r3,r2
 4008b70:	e0bffb15 	stw	r2,-20(fp)
    cycle = width*height;
 4008b74:	e0fffe17 	ldw	r3,-8(fp)
 4008b78:	e0bfff17 	ldw	r2,-4(fp)
 4008b7c:	1885383a 	mul	r2,r3,r2
 4008b80:	e0bffc15 	stw	r2,-16(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
 4008b84:	e0bffd17 	ldw	r2,-12(fp)
 4008b88:	e0fffe17 	ldw	r3,-8(fp)
 4008b8c:	10c00515 	stw	r3,20(r2)
    p->height = height;
 4008b90:	e0bffd17 	ldw	r2,-12(fp)
 4008b94:	e0ffff17 	ldw	r3,-4(fp)
 4008b98:	10c00615 	stw	r3,24(r2)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
 4008b9c:	e0bffd17 	ldw	r2,-12(fp)
 4008ba0:	10c00017 	ldw	r3,0(r2)
 4008ba4:	e0bffd17 	ldw	r2,-12(fp)
 4008ba8:	10800117 	ldw	r2,4(r2)
 4008bac:	1011883a 	mov	r8,r2
 4008bb0:	e0bffd17 	ldw	r2,-12(fp)
 4008bb4:	10800517 	ldw	r2,20(r2)
 4008bb8:	1009883a 	mov	r4,r2
 4008bbc:	e0bffd17 	ldw	r2,-12(fp)
 4008bc0:	10800617 	ldw	r2,24(r2)
 4008bc4:	100b883a 	mov	r5,r2
 4008bc8:	e0bffd17 	ldw	r2,-12(fp)
 4008bcc:	10800817 	ldw	r2,32(r2)
 4008bd0:	d8800215 	stw	r2,8(sp)
 4008bd4:	d9400115 	stw	r5,4(sp)
 4008bd8:	d9000015 	stw	r4,0(sp)
 4008bdc:	e1fffc17 	ldw	r7,-16(fp)
 4008be0:	e1bffb17 	ldw	r6,-20(fp)
 4008be4:	400b883a 	mov	r5,r8
 4008be8:	1809883a 	mov	r4,r3
 4008bec:	4008de00 	call	4008de0 <FrameReader_SetFrame0>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
 4008bf0:	e0bffd17 	ldw	r2,-12(fp)
 4008bf4:	10c00017 	ldw	r3,0(r2)
 4008bf8:	e0bffd17 	ldw	r2,-12(fp)
 4008bfc:	10800217 	ldw	r2,8(r2)
 4008c00:	1011883a 	mov	r8,r2
 4008c04:	e0bffd17 	ldw	r2,-12(fp)
 4008c08:	10800517 	ldw	r2,20(r2)
 4008c0c:	1009883a 	mov	r4,r2
 4008c10:	e0bffd17 	ldw	r2,-12(fp)
 4008c14:	10800617 	ldw	r2,24(r2)
 4008c18:	100b883a 	mov	r5,r2
 4008c1c:	e0bffd17 	ldw	r2,-12(fp)
 4008c20:	10800817 	ldw	r2,32(r2)
 4008c24:	d8800215 	stw	r2,8(sp)
 4008c28:	d9400115 	stw	r5,4(sp)
 4008c2c:	d9000015 	stw	r4,0(sp)
 4008c30:	e1fffc17 	ldw	r7,-16(fp)
 4008c34:	e1bffb17 	ldw	r6,-20(fp)
 4008c38:	400b883a 	mov	r5,r8
 4008c3c:	1809883a 	mov	r4,r3
 4008c40:	4008e880 	call	4008e88 <FrameReader_SetFrame1>
    
}
 4008c44:	0001883a 	nop
 4008c48:	e037883a 	mov	sp,fp
 4008c4c:	dfc00117 	ldw	ra,4(sp)
 4008c50:	df000017 	ldw	fp,0(sp)
 4008c54:	dec00204 	addi	sp,sp,8
 4008c58:	f800283a 	ret

04008c5c <VIPFR_Go>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
 4008c5c:	defffd04 	addi	sp,sp,-12
 4008c60:	df000215 	stw	fp,8(sp)
 4008c64:	df000204 	addi	fp,sp,8
 4008c68:	e13ffe15 	stw	r4,-8(fp)
 4008c6c:	e17fff15 	stw	r5,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
 4008c70:	e0bffe17 	ldw	r2,-8(fp)
 4008c74:	10800017 	ldw	r2,0(r2)
 4008c78:	1007883a 	mov	r3,r2
 4008c7c:	e0bfff17 	ldw	r2,-4(fp)
 4008c80:	1004c03a 	cmpne	r2,r2,zero
 4008c84:	10803fcc 	andi	r2,r2,255
 4008c88:	18800035 	stwio	r2,0(r3)
}
 4008c8c:	0001883a 	nop
 4008c90:	e037883a 	mov	sp,fp
 4008c94:	df000017 	ldw	fp,0(sp)
 4008c98:	dec00104 	addi	sp,sp,4
 4008c9c:	f800283a 	ret

04008ca0 <VIPFR_GetDrawFrame>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
 4008ca0:	defffe04 	addi	sp,sp,-8
 4008ca4:	df000115 	stw	fp,4(sp)
 4008ca8:	df000104 	addi	fp,sp,4
 4008cac:	e13fff15 	stw	r4,-4(fp)
        if (p->DisplayFrame == 0)
 4008cb0:	e0bfff17 	ldw	r2,-4(fp)
 4008cb4:	10800303 	ldbu	r2,12(r2)
 4008cb8:	10803fcc 	andi	r2,r2,255
 4008cbc:	1000031e 	bne	r2,zero,4008ccc <VIPFR_GetDrawFrame+0x2c>
            return p->Frame1_Base;
 4008cc0:	e0bfff17 	ldw	r2,-4(fp)
 4008cc4:	10800217 	ldw	r2,8(r2)
 4008cc8:	00000206 	br	4008cd4 <VIPFR_GetDrawFrame+0x34>
        return p->Frame0_Base;
 4008ccc:	e0bfff17 	ldw	r2,-4(fp)
 4008cd0:	10800117 	ldw	r2,4(r2)
}
 4008cd4:	e037883a 	mov	sp,fp
 4008cd8:	df000017 	ldw	fp,0(sp)
 4008cdc:	dec00104 	addi	sp,sp,4
 4008ce0:	f800283a 	ret

04008ce4 <VIPFR_ActiveDrawFrame>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
 4008ce4:	defffd04 	addi	sp,sp,-12
 4008ce8:	dfc00215 	stw	ra,8(sp)
 4008cec:	df000115 	stw	fp,4(sp)
 4008cf0:	df000104 	addi	fp,sp,4
 4008cf4:	e13fff15 	stw	r4,-4(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
 4008cf8:	e0bfff17 	ldw	r2,-4(fp)
 4008cfc:	10800303 	ldbu	r2,12(r2)
 4008d00:	10803fcc 	andi	r2,r2,255
 4008d04:	10c00044 	addi	r3,r2,1
 4008d08:	00a00034 	movhi	r2,32768
 4008d0c:	10800044 	addi	r2,r2,1
 4008d10:	1884703a 	and	r2,r3,r2
 4008d14:	1000040e 	bge	r2,zero,4008d28 <VIPFR_ActiveDrawFrame+0x44>
 4008d18:	10bfffc4 	addi	r2,r2,-1
 4008d1c:	00ffff84 	movi	r3,-2
 4008d20:	10c4b03a 	or	r2,r2,r3
 4008d24:	10800044 	addi	r2,r2,1
 4008d28:	1007883a 	mov	r3,r2
 4008d2c:	e0bfff17 	ldw	r2,-4(fp)
 4008d30:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
 4008d34:	e0bfff17 	ldw	r2,-4(fp)
 4008d38:	10c00017 	ldw	r3,0(r2)
 4008d3c:	e0bfff17 	ldw	r2,-4(fp)
 4008d40:	10800303 	ldbu	r2,12(r2)
 4008d44:	10803fcc 	andi	r2,r2,255
 4008d48:	100b883a 	mov	r5,r2
 4008d4c:	1809883a 	mov	r4,r3
 4008d50:	4008f300 	call	4008f30 <FrameReader_SelectFrame>
     alt_dcache_flush_all();
 4008d54:	401985c0 	call	401985c <alt_dcache_flush_all>
}
 4008d58:	0001883a 	nop
 4008d5c:	e037883a 	mov	sp,fp
 4008d60:	dfc00117 	ldw	ra,4(sp)
 4008d64:	df000017 	ldw	fp,0(sp)
 4008d68:	dec00204 	addi	sp,sp,8
 4008d6c:	f800283a 	ret

04008d70 <DRAW_EraseScreen>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
 4008d70:	defffc04 	addi	sp,sp,-16
 4008d74:	dfc00315 	stw	ra,12(sp)
 4008d78:	df000215 	stw	fp,8(sp)
 4008d7c:	df000204 	addi	fp,sp,8
 4008d80:	e13ffe15 	stw	r4,-8(fp)
 4008d84:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
 4008d88:	e13ffe17 	ldw	r4,-8(fp)
 4008d8c:	4008ca00 	call	4008ca0 <VIPFR_GetDrawFrame>
 4008d90:	100f883a 	mov	r7,r2
 4008d94:	e13fff17 	ldw	r4,-4(fp)
 4008d98:	e0bffe17 	ldw	r2,-8(fp)
 4008d9c:	10c00517 	ldw	r3,20(r2)
 4008da0:	e0bffe17 	ldw	r2,-8(fp)
 4008da4:	10800617 	ldw	r2,24(r2)
 4008da8:	1887383a 	mul	r3,r3,r2
 4008dac:	e0bffe17 	ldw	r2,-8(fp)
 4008db0:	10800717 	ldw	r2,28(r2)
 4008db4:	1885383a 	mul	r2,r3,r2
 4008db8:	100d883a 	mov	r6,r2
 4008dbc:	200b883a 	mov	r5,r4
 4008dc0:	3809883a 	mov	r4,r7
 4008dc4:	400c4240 	call	400c424 <memset>
}
 4008dc8:	0001883a 	nop
 4008dcc:	e037883a 	mov	sp,fp
 4008dd0:	dfc00117 	ldw	ra,4(sp)
 4008dd4:	df000017 	ldw	fp,0(sp)
 4008dd8:	dec00204 	addi	sp,sp,8
 4008ddc:	f800283a 	ret

04008de0 <FrameReader_SetFrame0>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 4008de0:	defffb04 	addi	sp,sp,-20
 4008de4:	df000415 	stw	fp,16(sp)
 4008de8:	df000404 	addi	fp,sp,16
 4008dec:	e13ffc15 	stw	r4,-16(fp)
 4008df0:	e17ffd15 	stw	r5,-12(fp)
 4008df4:	e1bffe15 	stw	r6,-8(fp)
 4008df8:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
 4008dfc:	e0bffc17 	ldw	r2,-16(fp)
 4008e00:	10800404 	addi	r2,r2,16
 4008e04:	1007883a 	mov	r3,r2
 4008e08:	e0bffd17 	ldw	r2,-12(fp)
 4008e0c:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 5, words); // frame0 words
 4008e10:	e0bffc17 	ldw	r2,-16(fp)
 4008e14:	10800504 	addi	r2,r2,20
 4008e18:	1007883a 	mov	r3,r2
 4008e1c:	e0bffe17 	ldw	r2,-8(fp)
 4008e20:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
 4008e24:	e0bffc17 	ldw	r2,-16(fp)
 4008e28:	10800604 	addi	r2,r2,24
 4008e2c:	1007883a 	mov	r3,r2
 4008e30:	e0bfff17 	ldw	r2,-4(fp)
 4008e34:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 8, width); // frame0 width
 4008e38:	e0bffc17 	ldw	r2,-16(fp)
 4008e3c:	10800804 	addi	r2,r2,32
 4008e40:	1007883a 	mov	r3,r2
 4008e44:	e0800117 	ldw	r2,4(fp)
 4008e48:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 9, height); // frame0 height
 4008e4c:	e0bffc17 	ldw	r2,-16(fp)
 4008e50:	10800904 	addi	r2,r2,36
 4008e54:	1007883a 	mov	r3,r2
 4008e58:	e0800217 	ldw	r2,8(fp)
 4008e5c:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
 4008e60:	e0bffc17 	ldw	r2,-16(fp)
 4008e64:	10800a04 	addi	r2,r2,40
 4008e68:	1007883a 	mov	r3,r2
 4008e6c:	e0800317 	ldw	r2,12(fp)
 4008e70:	18800035 	stwio	r2,0(r3)
}
 4008e74:	0001883a 	nop
 4008e78:	e037883a 	mov	sp,fp
 4008e7c:	df000017 	ldw	fp,0(sp)
 4008e80:	dec00104 	addi	sp,sp,4
 4008e84:	f800283a 	ret

04008e88 <FrameReader_SetFrame1>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 4008e88:	defffb04 	addi	sp,sp,-20
 4008e8c:	df000415 	stw	fp,16(sp)
 4008e90:	df000404 	addi	fp,sp,16
 4008e94:	e13ffc15 	stw	r4,-16(fp)
 4008e98:	e17ffd15 	stw	r5,-12(fp)
 4008e9c:	e1bffe15 	stw	r6,-8(fp)
 4008ea0:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
 4008ea4:	e0bffc17 	ldw	r2,-16(fp)
 4008ea8:	10800b04 	addi	r2,r2,44
 4008eac:	1007883a 	mov	r3,r2
 4008eb0:	e0bffd17 	ldw	r2,-12(fp)
 4008eb4:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 12, words); // frame0 words
 4008eb8:	e0bffc17 	ldw	r2,-16(fp)
 4008ebc:	10800c04 	addi	r2,r2,48
 4008ec0:	1007883a 	mov	r3,r2
 4008ec4:	e0bffe17 	ldw	r2,-8(fp)
 4008ec8:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
 4008ecc:	e0bffc17 	ldw	r2,-16(fp)
 4008ed0:	10800d04 	addi	r2,r2,52
 4008ed4:	1007883a 	mov	r3,r2
 4008ed8:	e0bfff17 	ldw	r2,-4(fp)
 4008edc:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 15, width); // frame0 width
 4008ee0:	e0bffc17 	ldw	r2,-16(fp)
 4008ee4:	10800f04 	addi	r2,r2,60
 4008ee8:	1007883a 	mov	r3,r2
 4008eec:	e0800117 	ldw	r2,4(fp)
 4008ef0:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 16, height); // frame0 height
 4008ef4:	e0bffc17 	ldw	r2,-16(fp)
 4008ef8:	10801004 	addi	r2,r2,64
 4008efc:	1007883a 	mov	r3,r2
 4008f00:	e0800217 	ldw	r2,8(fp)
 4008f04:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
 4008f08:	e0bffc17 	ldw	r2,-16(fp)
 4008f0c:	10801104 	addi	r2,r2,68
 4008f10:	1007883a 	mov	r3,r2
 4008f14:	e0800317 	ldw	r2,12(fp)
 4008f18:	18800035 	stwio	r2,0(r3)
}
 4008f1c:	0001883a 	nop
 4008f20:	e037883a 	mov	sp,fp
 4008f24:	df000017 	ldw	fp,0(sp)
 4008f28:	dec00104 	addi	sp,sp,4
 4008f2c:	f800283a 	ret

04008f30 <FrameReader_SelectFrame>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
 4008f30:	defffd04 	addi	sp,sp,-12
 4008f34:	df000215 	stw	fp,8(sp)
 4008f38:	df000204 	addi	fp,sp,8
 4008f3c:	e13ffe15 	stw	r4,-8(fp)
 4008f40:	2805883a 	mov	r2,r5
 4008f44:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
 4008f48:	e0bffe17 	ldw	r2,-8(fp)
 4008f4c:	10800304 	addi	r2,r2,12
 4008f50:	1007883a 	mov	r3,r2
 4008f54:	e0bfff03 	ldbu	r2,-4(fp)
 4008f58:	18800035 	stwio	r2,0(r3)
}        
 4008f5c:	0001883a 	nop
 4008f60:	e037883a 	mov	sp,fp
 4008f64:	df000017 	ldw	fp,0(sp)
 4008f68:	dec00104 	addi	sp,sp,4
 4008f6c:	f800283a 	ret

04008f70 <FrameReader_Go>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
 4008f70:	defffd04 	addi	sp,sp,-12
 4008f74:	df000215 	stw	fp,8(sp)
 4008f78:	df000204 	addi	fp,sp,8
 4008f7c:	e13ffe15 	stw	r4,-8(fp)
 4008f80:	e17fff15 	stw	r5,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
 4008f84:	e0bffe17 	ldw	r2,-8(fp)
 4008f88:	e0ffff17 	ldw	r3,-4(fp)
 4008f8c:	1806c03a 	cmpne	r3,r3,zero
 4008f90:	18c03fcc 	andi	r3,r3,255
 4008f94:	10c00035 	stwio	r3,0(r2)
}
 4008f98:	0001883a 	nop
 4008f9c:	e037883a 	mov	sp,fp
 4008fa0:	df000017 	ldw	fp,0(sp)
 4008fa4:	dec00104 	addi	sp,sp,4
 4008fa8:	f800283a 	ret

04008fac <VIPFR_ReserveBackground>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
 4008fac:	defffa04 	addi	sp,sp,-24
 4008fb0:	dfc00515 	stw	ra,20(sp)
 4008fb4:	df000415 	stw	fp,16(sp)
 4008fb8:	df000404 	addi	fp,sp,16
 4008fbc:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
 4008fc0:	e0bfff17 	ldw	r2,-4(fp)
 4008fc4:	10c00517 	ldw	r3,20(r2)
 4008fc8:	e0bfff17 	ldw	r2,-4(fp)
 4008fcc:	10800617 	ldw	r2,24(r2)
 4008fd0:	1887383a 	mul	r3,r3,r2
 4008fd4:	e0bfff17 	ldw	r2,-4(fp)
 4008fd8:	10800717 	ldw	r2,28(r2)
 4008fdc:	1885383a 	mul	r2,r3,r2
 4008fe0:	e0bffe15 	stw	r2,-8(fp)
        
    
    if (p->DisplayFrame == 0){
 4008fe4:	e0bfff17 	ldw	r2,-4(fp)
 4008fe8:	10800303 	ldbu	r2,12(r2)
 4008fec:	10803fcc 	andi	r2,r2,255
 4008ff0:	1000071e 	bne	r2,zero,4009010 <VIPFR_ReserveBackground+0x64>
        pSrc = p->Frame0_Base;
 4008ff4:	e0bfff17 	ldw	r2,-4(fp)
 4008ff8:	10800117 	ldw	r2,4(r2)
 4008ffc:	e0bffc15 	stw	r2,-16(fp)
        pDes = p->Frame1_Base;
 4009000:	e0bfff17 	ldw	r2,-4(fp)
 4009004:	10800217 	ldw	r2,8(r2)
 4009008:	e0bffd15 	stw	r2,-12(fp)
 400900c:	00000606 	br	4009028 <VIPFR_ReserveBackground+0x7c>
    }else{
        pDes = p->Frame0_Base;
 4009010:	e0bfff17 	ldw	r2,-4(fp)
 4009014:	10800117 	ldw	r2,4(r2)
 4009018:	e0bffd15 	stw	r2,-12(fp)
        pSrc = p->Frame1_Base;
 400901c:	e0bfff17 	ldw	r2,-4(fp)
 4009020:	10800217 	ldw	r2,8(r2)
 4009024:	e0bffc15 	stw	r2,-16(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
 4009028:	e0bffe17 	ldw	r2,-8(fp)
 400902c:	100d883a 	mov	r6,r2
 4009030:	e17ffc17 	ldw	r5,-16(fp)
 4009034:	e13ffd17 	ldw	r4,-12(fp)
 4009038:	400c2dc0 	call	400c2dc <memcpy>
#endif //ENABLE_DMA    
}
 400903c:	0001883a 	nop
 4009040:	e037883a 	mov	sp,fp
 4009044:	dfc00117 	ldw	ra,4(sp)
 4009048:	df000017 	ldw	fp,0(sp)
 400904c:	dec00204 	addi	sp,sp,8
 4009050:	f800283a 	ret

04009054 <sqrt>:
 4009054:	defff104 	addi	sp,sp,-60
 4009058:	dd000d15 	stw	r20,52(sp)
 400905c:	05010234 	movhi	r20,1032
 4009060:	dcc00c15 	stw	r19,48(sp)
 4009064:	dc800b15 	stw	r18,44(sp)
 4009068:	dc400a15 	stw	r17,40(sp)
 400906c:	dc000915 	stw	r16,36(sp)
 4009070:	dfc00e15 	stw	ra,56(sp)
 4009074:	a53e4204 	addi	r20,r20,-1784
 4009078:	2027883a 	mov	r19,r4
 400907c:	2825883a 	mov	r18,r5
 4009080:	40091840 	call	4009184 <__ieee754_sqrt>
 4009084:	1821883a 	mov	r16,r3
 4009088:	a0c00017 	ldw	r3,0(r20)
 400908c:	1023883a 	mov	r17,r2
 4009090:	00bfffc4 	movi	r2,-1
 4009094:	18800a26 	beq	r3,r2,40090c0 <sqrt+0x6c>
 4009098:	9809883a 	mov	r4,r19
 400909c:	900b883a 	mov	r5,r18
 40090a0:	400940c0 	call	400940c <__fpclassifyd>
 40090a4:	10000626 	beq	r2,zero,40090c0 <sqrt+0x6c>
 40090a8:	000d883a 	mov	r6,zero
 40090ac:	000f883a 	mov	r7,zero
 40090b0:	9809883a 	mov	r4,r19
 40090b4:	900b883a 	mov	r5,r18
 40090b8:	400a7d00 	call	400a7d0 <__ledf2>
 40090bc:	10000a16 	blt	r2,zero,40090e8 <sqrt+0x94>
 40090c0:	8805883a 	mov	r2,r17
 40090c4:	8007883a 	mov	r3,r16
 40090c8:	dfc00e17 	ldw	ra,56(sp)
 40090cc:	dd000d17 	ldw	r20,52(sp)
 40090d0:	dcc00c17 	ldw	r19,48(sp)
 40090d4:	dc800b17 	ldw	r18,44(sp)
 40090d8:	dc400a17 	ldw	r17,40(sp)
 40090dc:	dc000917 	ldw	r16,36(sp)
 40090e0:	dec00f04 	addi	sp,sp,60
 40090e4:	f800283a 	ret
 40090e8:	00800044 	movi	r2,1
 40090ec:	d8800015 	stw	r2,0(sp)
 40090f0:	a4000017 	ldw	r16,0(r20)
 40090f4:	00810234 	movhi	r2,1032
 40090f8:	10af9b04 	addi	r2,r2,-16788
 40090fc:	d8800115 	stw	r2,4(sp)
 4009100:	d8000815 	stw	zero,32(sp)
 4009104:	dcc00415 	stw	r19,16(sp)
 4009108:	dc800515 	stw	r18,20(sp)
 400910c:	dcc00215 	stw	r19,8(sp)
 4009110:	dc800315 	stw	r18,12(sp)
 4009114:	80000a1e 	bne	r16,zero,4009140 <sqrt+0xec>
 4009118:	d8000615 	stw	zero,24(sp)
 400911c:	d8000715 	stw	zero,28(sp)
 4009120:	d809883a 	mov	r4,sp
 4009124:	40094800 	call	4009480 <matherr>
 4009128:	10000e26 	beq	r2,zero,4009164 <sqrt+0x110>
 400912c:	d8800817 	ldw	r2,32(sp)
 4009130:	1000101e 	bne	r2,zero,4009174 <sqrt+0x120>
 4009134:	d8800617 	ldw	r2,24(sp)
 4009138:	d8c00717 	ldw	r3,28(sp)
 400913c:	003fe206 	br	40090c8 <__alt_mem_epcs_flash_controller_0+0xfb0080c8>
 4009140:	000d883a 	mov	r6,zero
 4009144:	000f883a 	mov	r7,zero
 4009148:	0009883a 	mov	r4,zero
 400914c:	000b883a 	mov	r5,zero
 4009150:	4009ee80 	call	4009ee8 <__divdf3>
 4009154:	d8800615 	stw	r2,24(sp)
 4009158:	d8c00715 	stw	r3,28(sp)
 400915c:	00800084 	movi	r2,2
 4009160:	80bfef1e 	bne	r16,r2,4009120 <__alt_mem_epcs_flash_controller_0+0xfb008120>
 4009164:	400ba980 	call	400ba98 <__errno>
 4009168:	00c00844 	movi	r3,33
 400916c:	10c00015 	stw	r3,0(r2)
 4009170:	003fee06 	br	400912c <__alt_mem_epcs_flash_controller_0+0xfb00812c>
 4009174:	400ba980 	call	400ba98 <__errno>
 4009178:	d8c00817 	ldw	r3,32(sp)
 400917c:	10c00015 	stw	r3,0(r2)
 4009180:	003fec06 	br	4009134 <__alt_mem_epcs_flash_controller_0+0xfb008134>

04009184 <__ieee754_sqrt>:
 4009184:	defffd04 	addi	sp,sp,-12
 4009188:	dc400115 	stw	r17,4(sp)
 400918c:	dc000015 	stw	r16,0(sp)
 4009190:	dfc00215 	stw	ra,8(sp)
 4009194:	28dffc2c 	andhi	r3,r5,32752
 4009198:	009ffc34 	movhi	r2,32752
 400919c:	2821883a 	mov	r16,r5
 40091a0:	2023883a 	mov	r17,r4
 40091a4:	200d883a 	mov	r6,r4
 40091a8:	18807b26 	beq	r3,r2,4009398 <__ieee754_sqrt+0x214>
 40091ac:	01405f0e 	bge	zero,r5,400932c <__ieee754_sqrt+0x1a8>
 40091b0:	2815d53a 	srai	r10,r5,20
 40091b4:	50006a26 	beq	r10,zero,4009360 <__ieee754_sqrt+0x1dc>
 40091b8:	00c00434 	movhi	r3,16
 40091bc:	52bf0044 	addi	r10,r10,-1023
 40091c0:	18ffffc4 	addi	r3,r3,-1
 40091c4:	80c6703a 	and	r3,r16,r3
 40091c8:	5080004c 	andi	r2,r10,1
 40091cc:	18c00434 	orhi	r3,r3,16
 40091d0:	1000511e 	bne	r2,zero,4009318 <__ieee754_sqrt+0x194>
 40091d4:	3004d7fa 	srli	r2,r6,31
 40091d8:	5015d07a 	srai	r10,r10,1
 40091dc:	18c7883a 	add	r3,r3,r3
 40091e0:	10c5883a 	add	r2,r2,r3
 40091e4:	01400584 	movi	r5,22
 40091e8:	3187883a 	add	r3,r6,r6
 40091ec:	0013883a 	mov	r9,zero
 40091f0:	000f883a 	mov	r7,zero
 40091f4:	01000834 	movhi	r4,32
 40091f8:	390d883a 	add	r6,r7,r4
 40091fc:	1810d7fa 	srli	r8,r3,31
 4009200:	297fffc4 	addi	r5,r5,-1
 4009204:	11800316 	blt	r2,r6,4009214 <__ieee754_sqrt+0x90>
 4009208:	1185c83a 	sub	r2,r2,r6
 400920c:	310f883a 	add	r7,r6,r4
 4009210:	4913883a 	add	r9,r9,r4
 4009214:	1085883a 	add	r2,r2,r2
 4009218:	4085883a 	add	r2,r8,r2
 400921c:	18c7883a 	add	r3,r3,r3
 4009220:	2008d07a 	srli	r4,r4,1
 4009224:	283ff41e 	bne	r5,zero,40091f8 <__alt_mem_epcs_flash_controller_0+0xfb0081f8>
 4009228:	01200034 	movhi	r4,32768
 400922c:	01800804 	movi	r6,32
 4009230:	0011883a 	mov	r8,zero
 4009234:	0019883a 	mov	r12,zero
 4009238:	201b883a 	mov	r13,r4
 400923c:	00000806 	br	4009260 <__ieee754_sqrt+0xdc>
 4009240:	38801726 	beq	r7,r2,40092a0 <__ieee754_sqrt+0x11c>
 4009244:	180ad7fa 	srli	r5,r3,31
 4009248:	1085883a 	add	r2,r2,r2
 400924c:	31bfffc4 	addi	r6,r6,-1
 4009250:	2885883a 	add	r2,r5,r2
 4009254:	18c7883a 	add	r3,r3,r3
 4009258:	2008d07a 	srli	r4,r4,1
 400925c:	30001726 	beq	r6,zero,40092bc <__ieee754_sqrt+0x138>
 4009260:	230b883a 	add	r5,r4,r12
 4009264:	38bff60e 	bge	r7,r2,4009240 <__alt_mem_epcs_flash_controller_0+0xfb008240>
 4009268:	2ae0002c 	andhi	r11,r5,32768
 400926c:	2919883a 	add	r12,r5,r4
 4009270:	5b400826 	beq	r11,r13,4009294 <__ieee754_sqrt+0x110>
 4009274:	3817883a 	mov	r11,r7
 4009278:	11c5c83a 	sub	r2,r2,r7
 400927c:	1940012e 	bgeu	r3,r5,4009284 <__ieee754_sqrt+0x100>
 4009280:	10bfffc4 	addi	r2,r2,-1
 4009284:	1947c83a 	sub	r3,r3,r5
 4009288:	4111883a 	add	r8,r8,r4
 400928c:	580f883a 	mov	r7,r11
 4009290:	003fec06 	br	4009244 <__alt_mem_epcs_flash_controller_0+0xfb008244>
 4009294:	603ff716 	blt	r12,zero,4009274 <__alt_mem_epcs_flash_controller_0+0xfb008274>
 4009298:	3ac00044 	addi	r11,r7,1
 400929c:	003ff606 	br	4009278 <__alt_mem_epcs_flash_controller_0+0xfb008278>
 40092a0:	19401936 	bltu	r3,r5,4009308 <__ieee754_sqrt+0x184>
 40092a4:	2ae0002c 	andhi	r11,r5,32768
 40092a8:	2919883a 	add	r12,r5,r4
 40092ac:	5b404526 	beq	r11,r13,40093c4 <__ieee754_sqrt+0x240>
 40092b0:	1017883a 	mov	r11,r2
 40092b4:	0005883a 	mov	r2,zero
 40092b8:	003ff206 	br	4009284 <__alt_mem_epcs_flash_controller_0+0xfb008284>
 40092bc:	10c4b03a 	or	r2,r2,r3
 40092c0:	10000426 	beq	r2,zero,40092d4 <__ieee754_sqrt+0x150>
 40092c4:	00bfffc4 	movi	r2,-1
 40092c8:	40804026 	beq	r8,r2,40093cc <__ieee754_sqrt+0x248>
 40092cc:	4080004c 	andi	r2,r8,1
 40092d0:	4091883a 	add	r8,r8,r2
 40092d4:	4004d07a 	srli	r2,r8,1
 40092d8:	4807d07a 	srai	r3,r9,1
 40092dc:	010ff834 	movhi	r4,16352
 40092e0:	4a40004c 	andi	r9,r9,1
 40092e4:	1909883a 	add	r4,r3,r4
 40092e8:	4800091e 	bne	r9,zero,4009310 <__ieee754_sqrt+0x18c>
 40092ec:	5006953a 	slli	r3,r10,20
 40092f0:	1907883a 	add	r3,r3,r4
 40092f4:	dfc00217 	ldw	ra,8(sp)
 40092f8:	dc400117 	ldw	r17,4(sp)
 40092fc:	dc000017 	ldw	r16,0(sp)
 4009300:	dec00304 	addi	sp,sp,12
 4009304:	f800283a 	ret
 4009308:	3805883a 	mov	r2,r7
 400930c:	003fcd06 	br	4009244 <__alt_mem_epcs_flash_controller_0+0xfb008244>
 4009310:	10a00034 	orhi	r2,r2,32768
 4009314:	003ff506 	br	40092ec <__alt_mem_epcs_flash_controller_0+0xfb0082ec>
 4009318:	3004d7fa 	srli	r2,r6,31
 400931c:	18c7883a 	add	r3,r3,r3
 4009320:	318d883a 	add	r6,r6,r6
 4009324:	10c7883a 	add	r3,r2,r3
 4009328:	003faa06 	br	40091d4 <__alt_mem_epcs_flash_controller_0+0xfb0081d4>
 400932c:	00a00034 	movhi	r2,32768
 4009330:	10bfffc4 	addi	r2,r2,-1
 4009334:	2884703a 	and	r2,r5,r2
 4009338:	1104b03a 	or	r2,r2,r4
 400933c:	10001e26 	beq	r2,zero,40093b8 <__ieee754_sqrt+0x234>
 4009340:	2800291e 	bne	r5,zero,40093e8 <__ieee754_sqrt+0x264>
 4009344:	0015883a 	mov	r10,zero
 4009348:	3020d2fa 	srli	r16,r6,11
 400934c:	52bffac4 	addi	r10,r10,-21
 4009350:	300c957a 	slli	r6,r6,21
 4009354:	803ffc26 	beq	r16,zero,4009348 <__alt_mem_epcs_flash_controller_0+0xfb008348>
 4009358:	8080042c 	andhi	r2,r16,16
 400935c:	10001e1e 	bne	r2,zero,40093d8 <__ieee754_sqrt+0x254>
 4009360:	0005883a 	mov	r2,zero
 4009364:	00000106 	br	400936c <__ieee754_sqrt+0x1e8>
 4009368:	1805883a 	mov	r2,r3
 400936c:	8421883a 	add	r16,r16,r16
 4009370:	8100042c 	andhi	r4,r16,16
 4009374:	10c00044 	addi	r3,r2,1
 4009378:	203ffb26 	beq	r4,zero,4009368 <__alt_mem_epcs_flash_controller_0+0xfb008368>
 400937c:	01000804 	movi	r4,32
 4009380:	20c9c83a 	sub	r4,r4,r3
 4009384:	3108d83a 	srl	r4,r6,r4
 4009388:	5095c83a 	sub	r10,r10,r2
 400938c:	30cc983a 	sll	r6,r6,r3
 4009390:	2420b03a 	or	r16,r4,r16
 4009394:	003f8806 	br	40091b8 <__alt_mem_epcs_flash_controller_0+0xfb0081b8>
 4009398:	280f883a 	mov	r7,r5
 400939c:	400a8c40 	call	400a8c4 <__muldf3>
 40093a0:	880d883a 	mov	r6,r17
 40093a4:	800f883a 	mov	r7,r16
 40093a8:	1009883a 	mov	r4,r2
 40093ac:	180b883a 	mov	r5,r3
 40093b0:	400963c0 	call	400963c <__adddf3>
 40093b4:	003fcf06 	br	40092f4 <__alt_mem_epcs_flash_controller_0+0xfb0082f4>
 40093b8:	2005883a 	mov	r2,r4
 40093bc:	2807883a 	mov	r3,r5
 40093c0:	003fcc06 	br	40092f4 <__alt_mem_epcs_flash_controller_0+0xfb0082f4>
 40093c4:	603fba16 	blt	r12,zero,40092b0 <__alt_mem_epcs_flash_controller_0+0xfb0082b0>
 40093c8:	003fb306 	br	4009298 <__alt_mem_epcs_flash_controller_0+0xfb008298>
 40093cc:	4a400044 	addi	r9,r9,1
 40093d0:	0005883a 	mov	r2,zero
 40093d4:	003fc006 	br	40092d8 <__alt_mem_epcs_flash_controller_0+0xfb0082d8>
 40093d8:	01000804 	movi	r4,32
 40093dc:	00bfffc4 	movi	r2,-1
 40093e0:	0007883a 	mov	r3,zero
 40093e4:	003fe706 	br	4009384 <__alt_mem_epcs_flash_controller_0+0xfb008384>
 40093e8:	200d883a 	mov	r6,r4
 40093ec:	280f883a 	mov	r7,r5
 40093f0:	400afdc0 	call	400afdc <__subdf3>
 40093f4:	100d883a 	mov	r6,r2
 40093f8:	180f883a 	mov	r7,r3
 40093fc:	1009883a 	mov	r4,r2
 4009400:	180b883a 	mov	r5,r3
 4009404:	4009ee80 	call	4009ee8 <__divdf3>
 4009408:	003fba06 	br	40092f4 <__alt_mem_epcs_flash_controller_0+0xfb0082f4>

0400940c <__fpclassifyd>:
 400940c:	00a00034 	movhi	r2,32768
 4009410:	10bfffc4 	addi	r2,r2,-1
 4009414:	2884703a 	and	r2,r5,r2
 4009418:	10000726 	beq	r2,zero,4009438 <__fpclassifyd+0x2c>
 400941c:	00fffc34 	movhi	r3,65520
 4009420:	019ff834 	movhi	r6,32736
 4009424:	28c7883a 	add	r3,r5,r3
 4009428:	31bfffc4 	addi	r6,r6,-1
 400942c:	30c00536 	bltu	r6,r3,4009444 <__fpclassifyd+0x38>
 4009430:	00800104 	movi	r2,4
 4009434:	f800283a 	ret
 4009438:	2000021e 	bne	r4,zero,4009444 <__fpclassifyd+0x38>
 400943c:	00800084 	movi	r2,2
 4009440:	f800283a 	ret
 4009444:	00dffc34 	movhi	r3,32752
 4009448:	019ff834 	movhi	r6,32736
 400944c:	28cb883a 	add	r5,r5,r3
 4009450:	31bfffc4 	addi	r6,r6,-1
 4009454:	317ff62e 	bgeu	r6,r5,4009430 <__alt_mem_epcs_flash_controller_0+0xfb008430>
 4009458:	01400434 	movhi	r5,16
 400945c:	297fffc4 	addi	r5,r5,-1
 4009460:	28800236 	bltu	r5,r2,400946c <__fpclassifyd+0x60>
 4009464:	008000c4 	movi	r2,3
 4009468:	f800283a 	ret
 400946c:	10c00226 	beq	r2,r3,4009478 <__fpclassifyd+0x6c>
 4009470:	0005883a 	mov	r2,zero
 4009474:	f800283a 	ret
 4009478:	2005003a 	cmpeq	r2,r4,zero
 400947c:	f800283a 	ret

04009480 <matherr>:
 4009480:	0005883a 	mov	r2,zero
 4009484:	f800283a 	ret

04009488 <__divsi3>:
 4009488:	20001b16 	blt	r4,zero,40094f8 <__divsi3+0x70>
 400948c:	000f883a 	mov	r7,zero
 4009490:	28001616 	blt	r5,zero,40094ec <__divsi3+0x64>
 4009494:	200d883a 	mov	r6,r4
 4009498:	29001a2e 	bgeu	r5,r4,4009504 <__divsi3+0x7c>
 400949c:	00800804 	movi	r2,32
 40094a0:	00c00044 	movi	r3,1
 40094a4:	00000106 	br	40094ac <__divsi3+0x24>
 40094a8:	10000d26 	beq	r2,zero,40094e0 <__divsi3+0x58>
 40094ac:	294b883a 	add	r5,r5,r5
 40094b0:	10bfffc4 	addi	r2,r2,-1
 40094b4:	18c7883a 	add	r3,r3,r3
 40094b8:	293ffb36 	bltu	r5,r4,40094a8 <__alt_mem_epcs_flash_controller_0+0xfb0084a8>
 40094bc:	0005883a 	mov	r2,zero
 40094c0:	18000726 	beq	r3,zero,40094e0 <__divsi3+0x58>
 40094c4:	0005883a 	mov	r2,zero
 40094c8:	31400236 	bltu	r6,r5,40094d4 <__divsi3+0x4c>
 40094cc:	314dc83a 	sub	r6,r6,r5
 40094d0:	10c4b03a 	or	r2,r2,r3
 40094d4:	1806d07a 	srli	r3,r3,1
 40094d8:	280ad07a 	srli	r5,r5,1
 40094dc:	183ffa1e 	bne	r3,zero,40094c8 <__alt_mem_epcs_flash_controller_0+0xfb0084c8>
 40094e0:	38000126 	beq	r7,zero,40094e8 <__divsi3+0x60>
 40094e4:	0085c83a 	sub	r2,zero,r2
 40094e8:	f800283a 	ret
 40094ec:	014bc83a 	sub	r5,zero,r5
 40094f0:	39c0005c 	xori	r7,r7,1
 40094f4:	003fe706 	br	4009494 <__alt_mem_epcs_flash_controller_0+0xfb008494>
 40094f8:	0109c83a 	sub	r4,zero,r4
 40094fc:	01c00044 	movi	r7,1
 4009500:	003fe306 	br	4009490 <__alt_mem_epcs_flash_controller_0+0xfb008490>
 4009504:	00c00044 	movi	r3,1
 4009508:	003fee06 	br	40094c4 <__alt_mem_epcs_flash_controller_0+0xfb0084c4>

0400950c <__modsi3>:
 400950c:	20001716 	blt	r4,zero,400956c <__modsi3+0x60>
 4009510:	000f883a 	mov	r7,zero
 4009514:	2005883a 	mov	r2,r4
 4009518:	28001216 	blt	r5,zero,4009564 <__modsi3+0x58>
 400951c:	2900162e 	bgeu	r5,r4,4009578 <__modsi3+0x6c>
 4009520:	01800804 	movi	r6,32
 4009524:	00c00044 	movi	r3,1
 4009528:	00000106 	br	4009530 <__modsi3+0x24>
 400952c:	30000a26 	beq	r6,zero,4009558 <__modsi3+0x4c>
 4009530:	294b883a 	add	r5,r5,r5
 4009534:	31bfffc4 	addi	r6,r6,-1
 4009538:	18c7883a 	add	r3,r3,r3
 400953c:	293ffb36 	bltu	r5,r4,400952c <__alt_mem_epcs_flash_controller_0+0xfb00852c>
 4009540:	18000526 	beq	r3,zero,4009558 <__modsi3+0x4c>
 4009544:	1806d07a 	srli	r3,r3,1
 4009548:	11400136 	bltu	r2,r5,4009550 <__modsi3+0x44>
 400954c:	1145c83a 	sub	r2,r2,r5
 4009550:	280ad07a 	srli	r5,r5,1
 4009554:	183ffb1e 	bne	r3,zero,4009544 <__alt_mem_epcs_flash_controller_0+0xfb008544>
 4009558:	38000126 	beq	r7,zero,4009560 <__modsi3+0x54>
 400955c:	0085c83a 	sub	r2,zero,r2
 4009560:	f800283a 	ret
 4009564:	014bc83a 	sub	r5,zero,r5
 4009568:	003fec06 	br	400951c <__alt_mem_epcs_flash_controller_0+0xfb00851c>
 400956c:	0109c83a 	sub	r4,zero,r4
 4009570:	01c00044 	movi	r7,1
 4009574:	003fe706 	br	4009514 <__alt_mem_epcs_flash_controller_0+0xfb008514>
 4009578:	00c00044 	movi	r3,1
 400957c:	003ff106 	br	4009544 <__alt_mem_epcs_flash_controller_0+0xfb008544>

04009580 <__udivsi3>:
 4009580:	200d883a 	mov	r6,r4
 4009584:	2900152e 	bgeu	r5,r4,40095dc <__udivsi3+0x5c>
 4009588:	28001416 	blt	r5,zero,40095dc <__udivsi3+0x5c>
 400958c:	00800804 	movi	r2,32
 4009590:	00c00044 	movi	r3,1
 4009594:	00000206 	br	40095a0 <__udivsi3+0x20>
 4009598:	10000e26 	beq	r2,zero,40095d4 <__udivsi3+0x54>
 400959c:	28000516 	blt	r5,zero,40095b4 <__udivsi3+0x34>
 40095a0:	294b883a 	add	r5,r5,r5
 40095a4:	10bfffc4 	addi	r2,r2,-1
 40095a8:	18c7883a 	add	r3,r3,r3
 40095ac:	293ffa36 	bltu	r5,r4,4009598 <__alt_mem_epcs_flash_controller_0+0xfb008598>
 40095b0:	18000826 	beq	r3,zero,40095d4 <__udivsi3+0x54>
 40095b4:	0005883a 	mov	r2,zero
 40095b8:	31400236 	bltu	r6,r5,40095c4 <__udivsi3+0x44>
 40095bc:	314dc83a 	sub	r6,r6,r5
 40095c0:	10c4b03a 	or	r2,r2,r3
 40095c4:	1806d07a 	srli	r3,r3,1
 40095c8:	280ad07a 	srli	r5,r5,1
 40095cc:	183ffa1e 	bne	r3,zero,40095b8 <__alt_mem_epcs_flash_controller_0+0xfb0085b8>
 40095d0:	f800283a 	ret
 40095d4:	0005883a 	mov	r2,zero
 40095d8:	f800283a 	ret
 40095dc:	00c00044 	movi	r3,1
 40095e0:	003ff406 	br	40095b4 <__alt_mem_epcs_flash_controller_0+0xfb0085b4>

040095e4 <__umodsi3>:
 40095e4:	2005883a 	mov	r2,r4
 40095e8:	2900122e 	bgeu	r5,r4,4009634 <__umodsi3+0x50>
 40095ec:	28001116 	blt	r5,zero,4009634 <__umodsi3+0x50>
 40095f0:	01800804 	movi	r6,32
 40095f4:	00c00044 	movi	r3,1
 40095f8:	00000206 	br	4009604 <__umodsi3+0x20>
 40095fc:	30000c26 	beq	r6,zero,4009630 <__umodsi3+0x4c>
 4009600:	28000516 	blt	r5,zero,4009618 <__umodsi3+0x34>
 4009604:	294b883a 	add	r5,r5,r5
 4009608:	31bfffc4 	addi	r6,r6,-1
 400960c:	18c7883a 	add	r3,r3,r3
 4009610:	293ffa36 	bltu	r5,r4,40095fc <__alt_mem_epcs_flash_controller_0+0xfb0085fc>
 4009614:	18000626 	beq	r3,zero,4009630 <__umodsi3+0x4c>
 4009618:	1806d07a 	srli	r3,r3,1
 400961c:	11400136 	bltu	r2,r5,4009624 <__umodsi3+0x40>
 4009620:	1145c83a 	sub	r2,r2,r5
 4009624:	280ad07a 	srli	r5,r5,1
 4009628:	183ffb1e 	bne	r3,zero,4009618 <__alt_mem_epcs_flash_controller_0+0xfb008618>
 400962c:	f800283a 	ret
 4009630:	f800283a 	ret
 4009634:	00c00044 	movi	r3,1
 4009638:	003ff706 	br	4009618 <__alt_mem_epcs_flash_controller_0+0xfb008618>

0400963c <__adddf3>:
 400963c:	02c00434 	movhi	r11,16
 4009640:	5affffc4 	addi	r11,r11,-1
 4009644:	2806d7fa 	srli	r3,r5,31
 4009648:	2ad4703a 	and	r10,r5,r11
 400964c:	3ad2703a 	and	r9,r7,r11
 4009650:	3804d53a 	srli	r2,r7,20
 4009654:	3018d77a 	srli	r12,r6,29
 4009658:	280ad53a 	srli	r5,r5,20
 400965c:	501490fa 	slli	r10,r10,3
 4009660:	2010d77a 	srli	r8,r4,29
 4009664:	481290fa 	slli	r9,r9,3
 4009668:	380ed7fa 	srli	r7,r7,31
 400966c:	defffb04 	addi	sp,sp,-20
 4009670:	dc800215 	stw	r18,8(sp)
 4009674:	dc400115 	stw	r17,4(sp)
 4009678:	dc000015 	stw	r16,0(sp)
 400967c:	dfc00415 	stw	ra,16(sp)
 4009680:	dcc00315 	stw	r19,12(sp)
 4009684:	1c803fcc 	andi	r18,r3,255
 4009688:	2c01ffcc 	andi	r16,r5,2047
 400968c:	5210b03a 	or	r8,r10,r8
 4009690:	202290fa 	slli	r17,r4,3
 4009694:	1081ffcc 	andi	r2,r2,2047
 4009698:	4b12b03a 	or	r9,r9,r12
 400969c:	300c90fa 	slli	r6,r6,3
 40096a0:	91c07526 	beq	r18,r7,4009878 <__adddf3+0x23c>
 40096a4:	8087c83a 	sub	r3,r16,r2
 40096a8:	00c0ab0e 	bge	zero,r3,4009958 <__adddf3+0x31c>
 40096ac:	10002a1e 	bne	r2,zero,4009758 <__adddf3+0x11c>
 40096b0:	4984b03a 	or	r2,r9,r6
 40096b4:	1000961e 	bne	r2,zero,4009910 <__adddf3+0x2d4>
 40096b8:	888001cc 	andi	r2,r17,7
 40096bc:	10000726 	beq	r2,zero,40096dc <__adddf3+0xa0>
 40096c0:	888003cc 	andi	r2,r17,15
 40096c4:	00c00104 	movi	r3,4
 40096c8:	10c00426 	beq	r2,r3,40096dc <__adddf3+0xa0>
 40096cc:	88c7883a 	add	r3,r17,r3
 40096d0:	1c63803a 	cmpltu	r17,r3,r17
 40096d4:	4451883a 	add	r8,r8,r17
 40096d8:	1823883a 	mov	r17,r3
 40096dc:	4080202c 	andhi	r2,r8,128
 40096e0:	10005926 	beq	r2,zero,4009848 <__adddf3+0x20c>
 40096e4:	84000044 	addi	r16,r16,1
 40096e8:	0081ffc4 	movi	r2,2047
 40096ec:	8080ba26 	beq	r16,r2,40099d8 <__adddf3+0x39c>
 40096f0:	00bfe034 	movhi	r2,65408
 40096f4:	10bfffc4 	addi	r2,r2,-1
 40096f8:	4090703a 	and	r8,r8,r2
 40096fc:	4004977a 	slli	r2,r8,29
 4009700:	4010927a 	slli	r8,r8,9
 4009704:	8822d0fa 	srli	r17,r17,3
 4009708:	8401ffcc 	andi	r16,r16,2047
 400970c:	4010d33a 	srli	r8,r8,12
 4009710:	9007883a 	mov	r3,r18
 4009714:	1444b03a 	or	r2,r2,r17
 4009718:	8401ffcc 	andi	r16,r16,2047
 400971c:	8020953a 	slli	r16,r16,20
 4009720:	18c03fcc 	andi	r3,r3,255
 4009724:	01000434 	movhi	r4,16
 4009728:	213fffc4 	addi	r4,r4,-1
 400972c:	180697fa 	slli	r3,r3,31
 4009730:	4110703a 	and	r8,r8,r4
 4009734:	4410b03a 	or	r8,r8,r16
 4009738:	40c6b03a 	or	r3,r8,r3
 400973c:	dfc00417 	ldw	ra,16(sp)
 4009740:	dcc00317 	ldw	r19,12(sp)
 4009744:	dc800217 	ldw	r18,8(sp)
 4009748:	dc400117 	ldw	r17,4(sp)
 400974c:	dc000017 	ldw	r16,0(sp)
 4009750:	dec00504 	addi	sp,sp,20
 4009754:	f800283a 	ret
 4009758:	0081ffc4 	movi	r2,2047
 400975c:	80bfd626 	beq	r16,r2,40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009760:	4a402034 	orhi	r9,r9,128
 4009764:	00800e04 	movi	r2,56
 4009768:	10c09f16 	blt	r2,r3,40099e8 <__adddf3+0x3ac>
 400976c:	008007c4 	movi	r2,31
 4009770:	10c0c216 	blt	r2,r3,4009a7c <__adddf3+0x440>
 4009774:	00800804 	movi	r2,32
 4009778:	10c5c83a 	sub	r2,r2,r3
 400977c:	488a983a 	sll	r5,r9,r2
 4009780:	30c8d83a 	srl	r4,r6,r3
 4009784:	3084983a 	sll	r2,r6,r2
 4009788:	48c6d83a 	srl	r3,r9,r3
 400978c:	290cb03a 	or	r6,r5,r4
 4009790:	1004c03a 	cmpne	r2,r2,zero
 4009794:	308cb03a 	or	r6,r6,r2
 4009798:	898dc83a 	sub	r6,r17,r6
 400979c:	89a3803a 	cmpltu	r17,r17,r6
 40097a0:	40d1c83a 	sub	r8,r8,r3
 40097a4:	4451c83a 	sub	r8,r8,r17
 40097a8:	3023883a 	mov	r17,r6
 40097ac:	4080202c 	andhi	r2,r8,128
 40097b0:	10002326 	beq	r2,zero,4009840 <__adddf3+0x204>
 40097b4:	04c02034 	movhi	r19,128
 40097b8:	9cffffc4 	addi	r19,r19,-1
 40097bc:	44e6703a 	and	r19,r8,r19
 40097c0:	98007626 	beq	r19,zero,400999c <__adddf3+0x360>
 40097c4:	9809883a 	mov	r4,r19
 40097c8:	400ba340 	call	400ba34 <__clzsi2>
 40097cc:	10fffe04 	addi	r3,r2,-8
 40097d0:	010007c4 	movi	r4,31
 40097d4:	20c07716 	blt	r4,r3,40099b4 <__adddf3+0x378>
 40097d8:	00800804 	movi	r2,32
 40097dc:	10c5c83a 	sub	r2,r2,r3
 40097e0:	8884d83a 	srl	r2,r17,r2
 40097e4:	98d0983a 	sll	r8,r19,r3
 40097e8:	88e2983a 	sll	r17,r17,r3
 40097ec:	1204b03a 	or	r2,r2,r8
 40097f0:	1c007416 	blt	r3,r16,40099c4 <__adddf3+0x388>
 40097f4:	1c21c83a 	sub	r16,r3,r16
 40097f8:	82000044 	addi	r8,r16,1
 40097fc:	00c007c4 	movi	r3,31
 4009800:	1a009116 	blt	r3,r8,4009a48 <__adddf3+0x40c>
 4009804:	00c00804 	movi	r3,32
 4009808:	1a07c83a 	sub	r3,r3,r8
 400980c:	8a08d83a 	srl	r4,r17,r8
 4009810:	88e2983a 	sll	r17,r17,r3
 4009814:	10c6983a 	sll	r3,r2,r3
 4009818:	1210d83a 	srl	r8,r2,r8
 400981c:	8804c03a 	cmpne	r2,r17,zero
 4009820:	1906b03a 	or	r3,r3,r4
 4009824:	18a2b03a 	or	r17,r3,r2
 4009828:	0021883a 	mov	r16,zero
 400982c:	003fa206 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009830:	1890b03a 	or	r8,r3,r2
 4009834:	40017d26 	beq	r8,zero,4009e2c <__adddf3+0x7f0>
 4009838:	1011883a 	mov	r8,r2
 400983c:	1823883a 	mov	r17,r3
 4009840:	888001cc 	andi	r2,r17,7
 4009844:	103f9e1e 	bne	r2,zero,40096c0 <__alt_mem_epcs_flash_controller_0+0xfb0086c0>
 4009848:	4004977a 	slli	r2,r8,29
 400984c:	8822d0fa 	srli	r17,r17,3
 4009850:	4010d0fa 	srli	r8,r8,3
 4009854:	9007883a 	mov	r3,r18
 4009858:	1444b03a 	or	r2,r2,r17
 400985c:	0101ffc4 	movi	r4,2047
 4009860:	81002426 	beq	r16,r4,40098f4 <__adddf3+0x2b8>
 4009864:	8120703a 	and	r16,r16,r4
 4009868:	01000434 	movhi	r4,16
 400986c:	213fffc4 	addi	r4,r4,-1
 4009870:	4110703a 	and	r8,r8,r4
 4009874:	003fa806 	br	4009718 <__alt_mem_epcs_flash_controller_0+0xfb008718>
 4009878:	8089c83a 	sub	r4,r16,r2
 400987c:	01005e0e 	bge	zero,r4,40099f8 <__adddf3+0x3bc>
 4009880:	10002b26 	beq	r2,zero,4009930 <__adddf3+0x2f4>
 4009884:	0081ffc4 	movi	r2,2047
 4009888:	80bf8b26 	beq	r16,r2,40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 400988c:	4a402034 	orhi	r9,r9,128
 4009890:	00800e04 	movi	r2,56
 4009894:	1100a40e 	bge	r2,r4,4009b28 <__adddf3+0x4ec>
 4009898:	498cb03a 	or	r6,r9,r6
 400989c:	300ac03a 	cmpne	r5,r6,zero
 40098a0:	0013883a 	mov	r9,zero
 40098a4:	2c4b883a 	add	r5,r5,r17
 40098a8:	2c63803a 	cmpltu	r17,r5,r17
 40098ac:	4a11883a 	add	r8,r9,r8
 40098b0:	8a11883a 	add	r8,r17,r8
 40098b4:	2823883a 	mov	r17,r5
 40098b8:	4080202c 	andhi	r2,r8,128
 40098bc:	103fe026 	beq	r2,zero,4009840 <__alt_mem_epcs_flash_controller_0+0xfb008840>
 40098c0:	84000044 	addi	r16,r16,1
 40098c4:	0081ffc4 	movi	r2,2047
 40098c8:	8080d226 	beq	r16,r2,4009c14 <__adddf3+0x5d8>
 40098cc:	00bfe034 	movhi	r2,65408
 40098d0:	10bfffc4 	addi	r2,r2,-1
 40098d4:	4090703a 	and	r8,r8,r2
 40098d8:	880ad07a 	srli	r5,r17,1
 40098dc:	400897fa 	slli	r4,r8,31
 40098e0:	88c0004c 	andi	r3,r17,1
 40098e4:	28e2b03a 	or	r17,r5,r3
 40098e8:	4010d07a 	srli	r8,r8,1
 40098ec:	2462b03a 	or	r17,r4,r17
 40098f0:	003f7106 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 40098f4:	4088b03a 	or	r4,r8,r2
 40098f8:	20014526 	beq	r4,zero,4009e10 <__adddf3+0x7d4>
 40098fc:	01000434 	movhi	r4,16
 4009900:	42000234 	orhi	r8,r8,8
 4009904:	213fffc4 	addi	r4,r4,-1
 4009908:	4110703a 	and	r8,r8,r4
 400990c:	003f8206 	br	4009718 <__alt_mem_epcs_flash_controller_0+0xfb008718>
 4009910:	18ffffc4 	addi	r3,r3,-1
 4009914:	1800491e 	bne	r3,zero,4009a3c <__adddf3+0x400>
 4009918:	898bc83a 	sub	r5,r17,r6
 400991c:	8963803a 	cmpltu	r17,r17,r5
 4009920:	4251c83a 	sub	r8,r8,r9
 4009924:	4451c83a 	sub	r8,r8,r17
 4009928:	2823883a 	mov	r17,r5
 400992c:	003f9f06 	br	40097ac <__alt_mem_epcs_flash_controller_0+0xfb0087ac>
 4009930:	4984b03a 	or	r2,r9,r6
 4009934:	103f6026 	beq	r2,zero,40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009938:	213fffc4 	addi	r4,r4,-1
 400993c:	2000931e 	bne	r4,zero,4009b8c <__adddf3+0x550>
 4009940:	898d883a 	add	r6,r17,r6
 4009944:	3463803a 	cmpltu	r17,r6,r17
 4009948:	4251883a 	add	r8,r8,r9
 400994c:	8a11883a 	add	r8,r17,r8
 4009950:	3023883a 	mov	r17,r6
 4009954:	003fd806 	br	40098b8 <__alt_mem_epcs_flash_controller_0+0xfb0088b8>
 4009958:	1800541e 	bne	r3,zero,4009aac <__adddf3+0x470>
 400995c:	80800044 	addi	r2,r16,1
 4009960:	1081ffcc 	andi	r2,r2,2047
 4009964:	00c00044 	movi	r3,1
 4009968:	1880a00e 	bge	r3,r2,4009bec <__adddf3+0x5b0>
 400996c:	8989c83a 	sub	r4,r17,r6
 4009970:	8905803a 	cmpltu	r2,r17,r4
 4009974:	4267c83a 	sub	r19,r8,r9
 4009978:	98a7c83a 	sub	r19,r19,r2
 400997c:	9880202c 	andhi	r2,r19,128
 4009980:	10006326 	beq	r2,zero,4009b10 <__adddf3+0x4d4>
 4009984:	3463c83a 	sub	r17,r6,r17
 4009988:	4a07c83a 	sub	r3,r9,r8
 400998c:	344d803a 	cmpltu	r6,r6,r17
 4009990:	19a7c83a 	sub	r19,r3,r6
 4009994:	3825883a 	mov	r18,r7
 4009998:	983f8a1e 	bne	r19,zero,40097c4 <__alt_mem_epcs_flash_controller_0+0xfb0087c4>
 400999c:	8809883a 	mov	r4,r17
 40099a0:	400ba340 	call	400ba34 <__clzsi2>
 40099a4:	10800804 	addi	r2,r2,32
 40099a8:	10fffe04 	addi	r3,r2,-8
 40099ac:	010007c4 	movi	r4,31
 40099b0:	20ff890e 	bge	r4,r3,40097d8 <__alt_mem_epcs_flash_controller_0+0xfb0087d8>
 40099b4:	10bff604 	addi	r2,r2,-40
 40099b8:	8884983a 	sll	r2,r17,r2
 40099bc:	0023883a 	mov	r17,zero
 40099c0:	1c3f8c0e 	bge	r3,r16,40097f4 <__alt_mem_epcs_flash_controller_0+0xfb0087f4>
 40099c4:	023fe034 	movhi	r8,65408
 40099c8:	423fffc4 	addi	r8,r8,-1
 40099cc:	80e1c83a 	sub	r16,r16,r3
 40099d0:	1210703a 	and	r8,r2,r8
 40099d4:	003f3806 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 40099d8:	9007883a 	mov	r3,r18
 40099dc:	0011883a 	mov	r8,zero
 40099e0:	0005883a 	mov	r2,zero
 40099e4:	003f4c06 	br	4009718 <__alt_mem_epcs_flash_controller_0+0xfb008718>
 40099e8:	498cb03a 	or	r6,r9,r6
 40099ec:	300cc03a 	cmpne	r6,r6,zero
 40099f0:	0007883a 	mov	r3,zero
 40099f4:	003f6806 	br	4009798 <__alt_mem_epcs_flash_controller_0+0xfb008798>
 40099f8:	20009c1e 	bne	r4,zero,4009c6c <__adddf3+0x630>
 40099fc:	80800044 	addi	r2,r16,1
 4009a00:	1141ffcc 	andi	r5,r2,2047
 4009a04:	01000044 	movi	r4,1
 4009a08:	2140670e 	bge	r4,r5,4009ba8 <__adddf3+0x56c>
 4009a0c:	0101ffc4 	movi	r4,2047
 4009a10:	11007f26 	beq	r2,r4,4009c10 <__adddf3+0x5d4>
 4009a14:	898d883a 	add	r6,r17,r6
 4009a18:	4247883a 	add	r3,r8,r9
 4009a1c:	3451803a 	cmpltu	r8,r6,r17
 4009a20:	40d1883a 	add	r8,r8,r3
 4009a24:	402297fa 	slli	r17,r8,31
 4009a28:	300cd07a 	srli	r6,r6,1
 4009a2c:	4010d07a 	srli	r8,r8,1
 4009a30:	1021883a 	mov	r16,r2
 4009a34:	89a2b03a 	or	r17,r17,r6
 4009a38:	003f1f06 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009a3c:	0081ffc4 	movi	r2,2047
 4009a40:	80bf481e 	bne	r16,r2,4009764 <__alt_mem_epcs_flash_controller_0+0xfb008764>
 4009a44:	003f1c06 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009a48:	843ff844 	addi	r16,r16,-31
 4009a4c:	01000804 	movi	r4,32
 4009a50:	1406d83a 	srl	r3,r2,r16
 4009a54:	41005026 	beq	r8,r4,4009b98 <__adddf3+0x55c>
 4009a58:	01001004 	movi	r4,64
 4009a5c:	2211c83a 	sub	r8,r4,r8
 4009a60:	1204983a 	sll	r2,r2,r8
 4009a64:	88a2b03a 	or	r17,r17,r2
 4009a68:	8822c03a 	cmpne	r17,r17,zero
 4009a6c:	1c62b03a 	or	r17,r3,r17
 4009a70:	0011883a 	mov	r8,zero
 4009a74:	0021883a 	mov	r16,zero
 4009a78:	003f7106 	br	4009840 <__alt_mem_epcs_flash_controller_0+0xfb008840>
 4009a7c:	193ff804 	addi	r4,r3,-32
 4009a80:	00800804 	movi	r2,32
 4009a84:	4908d83a 	srl	r4,r9,r4
 4009a88:	18804526 	beq	r3,r2,4009ba0 <__adddf3+0x564>
 4009a8c:	00801004 	movi	r2,64
 4009a90:	10c5c83a 	sub	r2,r2,r3
 4009a94:	4886983a 	sll	r3,r9,r2
 4009a98:	198cb03a 	or	r6,r3,r6
 4009a9c:	300cc03a 	cmpne	r6,r6,zero
 4009aa0:	218cb03a 	or	r6,r4,r6
 4009aa4:	0007883a 	mov	r3,zero
 4009aa8:	003f3b06 	br	4009798 <__alt_mem_epcs_flash_controller_0+0xfb008798>
 4009aac:	80002a26 	beq	r16,zero,4009b58 <__adddf3+0x51c>
 4009ab0:	0101ffc4 	movi	r4,2047
 4009ab4:	11006826 	beq	r2,r4,4009c58 <__adddf3+0x61c>
 4009ab8:	00c7c83a 	sub	r3,zero,r3
 4009abc:	42002034 	orhi	r8,r8,128
 4009ac0:	01000e04 	movi	r4,56
 4009ac4:	20c07c16 	blt	r4,r3,4009cb8 <__adddf3+0x67c>
 4009ac8:	010007c4 	movi	r4,31
 4009acc:	20c0da16 	blt	r4,r3,4009e38 <__adddf3+0x7fc>
 4009ad0:	01000804 	movi	r4,32
 4009ad4:	20c9c83a 	sub	r4,r4,r3
 4009ad8:	4114983a 	sll	r10,r8,r4
 4009adc:	88cad83a 	srl	r5,r17,r3
 4009ae0:	8908983a 	sll	r4,r17,r4
 4009ae4:	40c6d83a 	srl	r3,r8,r3
 4009ae8:	5162b03a 	or	r17,r10,r5
 4009aec:	2008c03a 	cmpne	r4,r4,zero
 4009af0:	8922b03a 	or	r17,r17,r4
 4009af4:	3463c83a 	sub	r17,r6,r17
 4009af8:	48c7c83a 	sub	r3,r9,r3
 4009afc:	344d803a 	cmpltu	r6,r6,r17
 4009b00:	1991c83a 	sub	r8,r3,r6
 4009b04:	1021883a 	mov	r16,r2
 4009b08:	3825883a 	mov	r18,r7
 4009b0c:	003f2706 	br	40097ac <__alt_mem_epcs_flash_controller_0+0xfb0087ac>
 4009b10:	24d0b03a 	or	r8,r4,r19
 4009b14:	40001b1e 	bne	r8,zero,4009b84 <__adddf3+0x548>
 4009b18:	0005883a 	mov	r2,zero
 4009b1c:	0007883a 	mov	r3,zero
 4009b20:	0021883a 	mov	r16,zero
 4009b24:	003f4d06 	br	400985c <__alt_mem_epcs_flash_controller_0+0xfb00885c>
 4009b28:	008007c4 	movi	r2,31
 4009b2c:	11003c16 	blt	r2,r4,4009c20 <__adddf3+0x5e4>
 4009b30:	00800804 	movi	r2,32
 4009b34:	1105c83a 	sub	r2,r2,r4
 4009b38:	488e983a 	sll	r7,r9,r2
 4009b3c:	310ad83a 	srl	r5,r6,r4
 4009b40:	3084983a 	sll	r2,r6,r2
 4009b44:	4912d83a 	srl	r9,r9,r4
 4009b48:	394ab03a 	or	r5,r7,r5
 4009b4c:	1004c03a 	cmpne	r2,r2,zero
 4009b50:	288ab03a 	or	r5,r5,r2
 4009b54:	003f5306 	br	40098a4 <__alt_mem_epcs_flash_controller_0+0xfb0088a4>
 4009b58:	4448b03a 	or	r4,r8,r17
 4009b5c:	20003e26 	beq	r4,zero,4009c58 <__adddf3+0x61c>
 4009b60:	00c6303a 	nor	r3,zero,r3
 4009b64:	18003a1e 	bne	r3,zero,4009c50 <__adddf3+0x614>
 4009b68:	3463c83a 	sub	r17,r6,r17
 4009b6c:	4a07c83a 	sub	r3,r9,r8
 4009b70:	344d803a 	cmpltu	r6,r6,r17
 4009b74:	1991c83a 	sub	r8,r3,r6
 4009b78:	1021883a 	mov	r16,r2
 4009b7c:	3825883a 	mov	r18,r7
 4009b80:	003f0a06 	br	40097ac <__alt_mem_epcs_flash_controller_0+0xfb0087ac>
 4009b84:	2023883a 	mov	r17,r4
 4009b88:	003f0d06 	br	40097c0 <__alt_mem_epcs_flash_controller_0+0xfb0087c0>
 4009b8c:	0081ffc4 	movi	r2,2047
 4009b90:	80bf3f1e 	bne	r16,r2,4009890 <__alt_mem_epcs_flash_controller_0+0xfb008890>
 4009b94:	003ec806 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009b98:	0005883a 	mov	r2,zero
 4009b9c:	003fb106 	br	4009a64 <__alt_mem_epcs_flash_controller_0+0xfb008a64>
 4009ba0:	0007883a 	mov	r3,zero
 4009ba4:	003fbc06 	br	4009a98 <__alt_mem_epcs_flash_controller_0+0xfb008a98>
 4009ba8:	4444b03a 	or	r2,r8,r17
 4009bac:	8000871e 	bne	r16,zero,4009dcc <__adddf3+0x790>
 4009bb0:	1000ba26 	beq	r2,zero,4009e9c <__adddf3+0x860>
 4009bb4:	4984b03a 	or	r2,r9,r6
 4009bb8:	103ebf26 	beq	r2,zero,40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009bbc:	8985883a 	add	r2,r17,r6
 4009bc0:	4247883a 	add	r3,r8,r9
 4009bc4:	1451803a 	cmpltu	r8,r2,r17
 4009bc8:	40d1883a 	add	r8,r8,r3
 4009bcc:	40c0202c 	andhi	r3,r8,128
 4009bd0:	1023883a 	mov	r17,r2
 4009bd4:	183f1a26 	beq	r3,zero,4009840 <__alt_mem_epcs_flash_controller_0+0xfb008840>
 4009bd8:	00bfe034 	movhi	r2,65408
 4009bdc:	10bfffc4 	addi	r2,r2,-1
 4009be0:	2021883a 	mov	r16,r4
 4009be4:	4090703a 	and	r8,r8,r2
 4009be8:	003eb306 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009bec:	4444b03a 	or	r2,r8,r17
 4009bf0:	8000291e 	bne	r16,zero,4009c98 <__adddf3+0x65c>
 4009bf4:	10004b1e 	bne	r2,zero,4009d24 <__adddf3+0x6e8>
 4009bf8:	4990b03a 	or	r8,r9,r6
 4009bfc:	40008b26 	beq	r8,zero,4009e2c <__adddf3+0x7f0>
 4009c00:	4811883a 	mov	r8,r9
 4009c04:	3023883a 	mov	r17,r6
 4009c08:	3825883a 	mov	r18,r7
 4009c0c:	003eaa06 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009c10:	1021883a 	mov	r16,r2
 4009c14:	0011883a 	mov	r8,zero
 4009c18:	0005883a 	mov	r2,zero
 4009c1c:	003f0f06 	br	400985c <__alt_mem_epcs_flash_controller_0+0xfb00885c>
 4009c20:	217ff804 	addi	r5,r4,-32
 4009c24:	00800804 	movi	r2,32
 4009c28:	494ad83a 	srl	r5,r9,r5
 4009c2c:	20807d26 	beq	r4,r2,4009e24 <__adddf3+0x7e8>
 4009c30:	00801004 	movi	r2,64
 4009c34:	1109c83a 	sub	r4,r2,r4
 4009c38:	4912983a 	sll	r9,r9,r4
 4009c3c:	498cb03a 	or	r6,r9,r6
 4009c40:	300cc03a 	cmpne	r6,r6,zero
 4009c44:	298ab03a 	or	r5,r5,r6
 4009c48:	0013883a 	mov	r9,zero
 4009c4c:	003f1506 	br	40098a4 <__alt_mem_epcs_flash_controller_0+0xfb0088a4>
 4009c50:	0101ffc4 	movi	r4,2047
 4009c54:	113f9a1e 	bne	r2,r4,4009ac0 <__alt_mem_epcs_flash_controller_0+0xfb008ac0>
 4009c58:	4811883a 	mov	r8,r9
 4009c5c:	3023883a 	mov	r17,r6
 4009c60:	1021883a 	mov	r16,r2
 4009c64:	3825883a 	mov	r18,r7
 4009c68:	003e9306 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009c6c:	8000161e 	bne	r16,zero,4009cc8 <__adddf3+0x68c>
 4009c70:	444ab03a 	or	r5,r8,r17
 4009c74:	28005126 	beq	r5,zero,4009dbc <__adddf3+0x780>
 4009c78:	0108303a 	nor	r4,zero,r4
 4009c7c:	20004d1e 	bne	r4,zero,4009db4 <__adddf3+0x778>
 4009c80:	89a3883a 	add	r17,r17,r6
 4009c84:	4253883a 	add	r9,r8,r9
 4009c88:	898d803a 	cmpltu	r6,r17,r6
 4009c8c:	3251883a 	add	r8,r6,r9
 4009c90:	1021883a 	mov	r16,r2
 4009c94:	003f0806 	br	40098b8 <__alt_mem_epcs_flash_controller_0+0xfb0088b8>
 4009c98:	1000301e 	bne	r2,zero,4009d5c <__adddf3+0x720>
 4009c9c:	4984b03a 	or	r2,r9,r6
 4009ca0:	10007126 	beq	r2,zero,4009e68 <__adddf3+0x82c>
 4009ca4:	4811883a 	mov	r8,r9
 4009ca8:	3023883a 	mov	r17,r6
 4009cac:	3825883a 	mov	r18,r7
 4009cb0:	0401ffc4 	movi	r16,2047
 4009cb4:	003e8006 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009cb8:	4462b03a 	or	r17,r8,r17
 4009cbc:	8822c03a 	cmpne	r17,r17,zero
 4009cc0:	0007883a 	mov	r3,zero
 4009cc4:	003f8b06 	br	4009af4 <__alt_mem_epcs_flash_controller_0+0xfb008af4>
 4009cc8:	0141ffc4 	movi	r5,2047
 4009ccc:	11403b26 	beq	r2,r5,4009dbc <__adddf3+0x780>
 4009cd0:	0109c83a 	sub	r4,zero,r4
 4009cd4:	42002034 	orhi	r8,r8,128
 4009cd8:	01400e04 	movi	r5,56
 4009cdc:	29006716 	blt	r5,r4,4009e7c <__adddf3+0x840>
 4009ce0:	014007c4 	movi	r5,31
 4009ce4:	29007016 	blt	r5,r4,4009ea8 <__adddf3+0x86c>
 4009ce8:	01400804 	movi	r5,32
 4009cec:	290bc83a 	sub	r5,r5,r4
 4009cf0:	4154983a 	sll	r10,r8,r5
 4009cf4:	890ed83a 	srl	r7,r17,r4
 4009cf8:	894a983a 	sll	r5,r17,r5
 4009cfc:	4108d83a 	srl	r4,r8,r4
 4009d00:	51e2b03a 	or	r17,r10,r7
 4009d04:	280ac03a 	cmpne	r5,r5,zero
 4009d08:	8962b03a 	or	r17,r17,r5
 4009d0c:	89a3883a 	add	r17,r17,r6
 4009d10:	2253883a 	add	r9,r4,r9
 4009d14:	898d803a 	cmpltu	r6,r17,r6
 4009d18:	3251883a 	add	r8,r6,r9
 4009d1c:	1021883a 	mov	r16,r2
 4009d20:	003ee506 	br	40098b8 <__alt_mem_epcs_flash_controller_0+0xfb0088b8>
 4009d24:	4984b03a 	or	r2,r9,r6
 4009d28:	103e6326 	beq	r2,zero,40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009d2c:	8987c83a 	sub	r3,r17,r6
 4009d30:	88c9803a 	cmpltu	r4,r17,r3
 4009d34:	4245c83a 	sub	r2,r8,r9
 4009d38:	1105c83a 	sub	r2,r2,r4
 4009d3c:	1100202c 	andhi	r4,r2,128
 4009d40:	203ebb26 	beq	r4,zero,4009830 <__alt_mem_epcs_flash_controller_0+0xfb008830>
 4009d44:	3463c83a 	sub	r17,r6,r17
 4009d48:	4a07c83a 	sub	r3,r9,r8
 4009d4c:	344d803a 	cmpltu	r6,r6,r17
 4009d50:	1991c83a 	sub	r8,r3,r6
 4009d54:	3825883a 	mov	r18,r7
 4009d58:	003e5706 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009d5c:	4984b03a 	or	r2,r9,r6
 4009d60:	10002e26 	beq	r2,zero,4009e1c <__adddf3+0x7e0>
 4009d64:	4004d0fa 	srli	r2,r8,3
 4009d68:	8822d0fa 	srli	r17,r17,3
 4009d6c:	4010977a 	slli	r8,r8,29
 4009d70:	10c0022c 	andhi	r3,r2,8
 4009d74:	4462b03a 	or	r17,r8,r17
 4009d78:	18000826 	beq	r3,zero,4009d9c <__adddf3+0x760>
 4009d7c:	4808d0fa 	srli	r4,r9,3
 4009d80:	20c0022c 	andhi	r3,r4,8
 4009d84:	1800051e 	bne	r3,zero,4009d9c <__adddf3+0x760>
 4009d88:	300cd0fa 	srli	r6,r6,3
 4009d8c:	4806977a 	slli	r3,r9,29
 4009d90:	2005883a 	mov	r2,r4
 4009d94:	3825883a 	mov	r18,r7
 4009d98:	19a2b03a 	or	r17,r3,r6
 4009d9c:	8810d77a 	srli	r8,r17,29
 4009da0:	100490fa 	slli	r2,r2,3
 4009da4:	882290fa 	slli	r17,r17,3
 4009da8:	0401ffc4 	movi	r16,2047
 4009dac:	4090b03a 	or	r8,r8,r2
 4009db0:	003e4106 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009db4:	0141ffc4 	movi	r5,2047
 4009db8:	117fc71e 	bne	r2,r5,4009cd8 <__alt_mem_epcs_flash_controller_0+0xfb008cd8>
 4009dbc:	4811883a 	mov	r8,r9
 4009dc0:	3023883a 	mov	r17,r6
 4009dc4:	1021883a 	mov	r16,r2
 4009dc8:	003e3b06 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009dcc:	10002f26 	beq	r2,zero,4009e8c <__adddf3+0x850>
 4009dd0:	4984b03a 	or	r2,r9,r6
 4009dd4:	10001126 	beq	r2,zero,4009e1c <__adddf3+0x7e0>
 4009dd8:	4004d0fa 	srli	r2,r8,3
 4009ddc:	8822d0fa 	srli	r17,r17,3
 4009de0:	4010977a 	slli	r8,r8,29
 4009de4:	10c0022c 	andhi	r3,r2,8
 4009de8:	4462b03a 	or	r17,r8,r17
 4009dec:	183feb26 	beq	r3,zero,4009d9c <__alt_mem_epcs_flash_controller_0+0xfb008d9c>
 4009df0:	4808d0fa 	srli	r4,r9,3
 4009df4:	20c0022c 	andhi	r3,r4,8
 4009df8:	183fe81e 	bne	r3,zero,4009d9c <__alt_mem_epcs_flash_controller_0+0xfb008d9c>
 4009dfc:	300cd0fa 	srli	r6,r6,3
 4009e00:	4806977a 	slli	r3,r9,29
 4009e04:	2005883a 	mov	r2,r4
 4009e08:	19a2b03a 	or	r17,r3,r6
 4009e0c:	003fe306 	br	4009d9c <__alt_mem_epcs_flash_controller_0+0xfb008d9c>
 4009e10:	0011883a 	mov	r8,zero
 4009e14:	0005883a 	mov	r2,zero
 4009e18:	003e3f06 	br	4009718 <__alt_mem_epcs_flash_controller_0+0xfb008718>
 4009e1c:	0401ffc4 	movi	r16,2047
 4009e20:	003e2506 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009e24:	0013883a 	mov	r9,zero
 4009e28:	003f8406 	br	4009c3c <__alt_mem_epcs_flash_controller_0+0xfb008c3c>
 4009e2c:	0005883a 	mov	r2,zero
 4009e30:	0007883a 	mov	r3,zero
 4009e34:	003e8906 	br	400985c <__alt_mem_epcs_flash_controller_0+0xfb00885c>
 4009e38:	197ff804 	addi	r5,r3,-32
 4009e3c:	01000804 	movi	r4,32
 4009e40:	414ad83a 	srl	r5,r8,r5
 4009e44:	19002426 	beq	r3,r4,4009ed8 <__adddf3+0x89c>
 4009e48:	01001004 	movi	r4,64
 4009e4c:	20c7c83a 	sub	r3,r4,r3
 4009e50:	40c6983a 	sll	r3,r8,r3
 4009e54:	1c46b03a 	or	r3,r3,r17
 4009e58:	1806c03a 	cmpne	r3,r3,zero
 4009e5c:	28e2b03a 	or	r17,r5,r3
 4009e60:	0007883a 	mov	r3,zero
 4009e64:	003f2306 	br	4009af4 <__alt_mem_epcs_flash_controller_0+0xfb008af4>
 4009e68:	0007883a 	mov	r3,zero
 4009e6c:	5811883a 	mov	r8,r11
 4009e70:	00bfffc4 	movi	r2,-1
 4009e74:	0401ffc4 	movi	r16,2047
 4009e78:	003e7806 	br	400985c <__alt_mem_epcs_flash_controller_0+0xfb00885c>
 4009e7c:	4462b03a 	or	r17,r8,r17
 4009e80:	8822c03a 	cmpne	r17,r17,zero
 4009e84:	0009883a 	mov	r4,zero
 4009e88:	003fa006 	br	4009d0c <__alt_mem_epcs_flash_controller_0+0xfb008d0c>
 4009e8c:	4811883a 	mov	r8,r9
 4009e90:	3023883a 	mov	r17,r6
 4009e94:	0401ffc4 	movi	r16,2047
 4009e98:	003e0706 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009e9c:	4811883a 	mov	r8,r9
 4009ea0:	3023883a 	mov	r17,r6
 4009ea4:	003e0406 	br	40096b8 <__alt_mem_epcs_flash_controller_0+0xfb0086b8>
 4009ea8:	21fff804 	addi	r7,r4,-32
 4009eac:	01400804 	movi	r5,32
 4009eb0:	41ced83a 	srl	r7,r8,r7
 4009eb4:	21400a26 	beq	r4,r5,4009ee0 <__adddf3+0x8a4>
 4009eb8:	01401004 	movi	r5,64
 4009ebc:	2909c83a 	sub	r4,r5,r4
 4009ec0:	4108983a 	sll	r4,r8,r4
 4009ec4:	2448b03a 	or	r4,r4,r17
 4009ec8:	2008c03a 	cmpne	r4,r4,zero
 4009ecc:	3922b03a 	or	r17,r7,r4
 4009ed0:	0009883a 	mov	r4,zero
 4009ed4:	003f8d06 	br	4009d0c <__alt_mem_epcs_flash_controller_0+0xfb008d0c>
 4009ed8:	0007883a 	mov	r3,zero
 4009edc:	003fdd06 	br	4009e54 <__alt_mem_epcs_flash_controller_0+0xfb008e54>
 4009ee0:	0009883a 	mov	r4,zero
 4009ee4:	003ff706 	br	4009ec4 <__alt_mem_epcs_flash_controller_0+0xfb008ec4>

04009ee8 <__divdf3>:
 4009ee8:	defff204 	addi	sp,sp,-56
 4009eec:	dd400915 	stw	r21,36(sp)
 4009ef0:	282ad53a 	srli	r21,r5,20
 4009ef4:	dd000815 	stw	r20,32(sp)
 4009ef8:	2828d7fa 	srli	r20,r5,31
 4009efc:	dc000415 	stw	r16,16(sp)
 4009f00:	04000434 	movhi	r16,16
 4009f04:	df000c15 	stw	fp,48(sp)
 4009f08:	843fffc4 	addi	r16,r16,-1
 4009f0c:	dfc00d15 	stw	ra,52(sp)
 4009f10:	ddc00b15 	stw	r23,44(sp)
 4009f14:	dd800a15 	stw	r22,40(sp)
 4009f18:	dcc00715 	stw	r19,28(sp)
 4009f1c:	dc800615 	stw	r18,24(sp)
 4009f20:	dc400515 	stw	r17,20(sp)
 4009f24:	ad41ffcc 	andi	r21,r21,2047
 4009f28:	2c20703a 	and	r16,r5,r16
 4009f2c:	a7003fcc 	andi	fp,r20,255
 4009f30:	a8006126 	beq	r21,zero,400a0b8 <__divdf3+0x1d0>
 4009f34:	0081ffc4 	movi	r2,2047
 4009f38:	2025883a 	mov	r18,r4
 4009f3c:	a8803726 	beq	r21,r2,400a01c <__divdf3+0x134>
 4009f40:	80800434 	orhi	r2,r16,16
 4009f44:	100490fa 	slli	r2,r2,3
 4009f48:	2020d77a 	srli	r16,r4,29
 4009f4c:	202490fa 	slli	r18,r4,3
 4009f50:	ad7f0044 	addi	r21,r21,-1023
 4009f54:	80a0b03a 	or	r16,r16,r2
 4009f58:	0027883a 	mov	r19,zero
 4009f5c:	0013883a 	mov	r9,zero
 4009f60:	3804d53a 	srli	r2,r7,20
 4009f64:	382cd7fa 	srli	r22,r7,31
 4009f68:	04400434 	movhi	r17,16
 4009f6c:	8c7fffc4 	addi	r17,r17,-1
 4009f70:	1081ffcc 	andi	r2,r2,2047
 4009f74:	3011883a 	mov	r8,r6
 4009f78:	3c62703a 	and	r17,r7,r17
 4009f7c:	b5c03fcc 	andi	r23,r22,255
 4009f80:	10006c26 	beq	r2,zero,400a134 <__divdf3+0x24c>
 4009f84:	00c1ffc4 	movi	r3,2047
 4009f88:	10c06426 	beq	r2,r3,400a11c <__divdf3+0x234>
 4009f8c:	88c00434 	orhi	r3,r17,16
 4009f90:	180690fa 	slli	r3,r3,3
 4009f94:	3022d77a 	srli	r17,r6,29
 4009f98:	301090fa 	slli	r8,r6,3
 4009f9c:	10bf0044 	addi	r2,r2,-1023
 4009fa0:	88e2b03a 	or	r17,r17,r3
 4009fa4:	000f883a 	mov	r7,zero
 4009fa8:	a58cf03a 	xor	r6,r20,r22
 4009fac:	3cc8b03a 	or	r4,r7,r19
 4009fb0:	a8abc83a 	sub	r21,r21,r2
 4009fb4:	008003c4 	movi	r2,15
 4009fb8:	3007883a 	mov	r3,r6
 4009fbc:	34c03fcc 	andi	r19,r6,255
 4009fc0:	11009036 	bltu	r2,r4,400a204 <__divdf3+0x31c>
 4009fc4:	200890ba 	slli	r4,r4,2
 4009fc8:	00810074 	movhi	r2,1025
 4009fcc:	10a7f704 	addi	r2,r2,-24612
 4009fd0:	2089883a 	add	r4,r4,r2
 4009fd4:	20800017 	ldw	r2,0(r4)
 4009fd8:	1000683a 	jmp	r2
 4009fdc:	0400a204 	movi	r16,648
 4009fe0:	0400a054 	movui	r16,641
 4009fe4:	0400a1f4 	movhi	r16,647
 4009fe8:	0400a048 	cmpgei	r16,zero,641
 4009fec:	0400a1f4 	movhi	r16,647
 4009ff0:	0400a1c8 	cmpgei	r16,zero,647
 4009ff4:	0400a1f4 	movhi	r16,647
 4009ff8:	0400a048 	cmpgei	r16,zero,641
 4009ffc:	0400a054 	movui	r16,641
 400a000:	0400a054 	movui	r16,641
 400a004:	0400a1c8 	cmpgei	r16,zero,647
 400a008:	0400a048 	cmpgei	r16,zero,641
 400a00c:	0400a038 	rdprs	r16,zero,640
 400a010:	0400a038 	rdprs	r16,zero,640
 400a014:	0400a038 	rdprs	r16,zero,640
 400a018:	0400a4e8 	cmpgeui	r16,zero,659
 400a01c:	2404b03a 	or	r2,r4,r16
 400a020:	1000661e 	bne	r2,zero,400a1bc <__divdf3+0x2d4>
 400a024:	04c00204 	movi	r19,8
 400a028:	0021883a 	mov	r16,zero
 400a02c:	0025883a 	mov	r18,zero
 400a030:	02400084 	movi	r9,2
 400a034:	003fca06 	br	4009f60 <__alt_mem_epcs_flash_controller_0+0xfb008f60>
 400a038:	8023883a 	mov	r17,r16
 400a03c:	9011883a 	mov	r8,r18
 400a040:	e02f883a 	mov	r23,fp
 400a044:	480f883a 	mov	r7,r9
 400a048:	00800084 	movi	r2,2
 400a04c:	3881311e 	bne	r7,r2,400a514 <__divdf3+0x62c>
 400a050:	b827883a 	mov	r19,r23
 400a054:	98c0004c 	andi	r3,r19,1
 400a058:	0081ffc4 	movi	r2,2047
 400a05c:	000b883a 	mov	r5,zero
 400a060:	0025883a 	mov	r18,zero
 400a064:	1004953a 	slli	r2,r2,20
 400a068:	18c03fcc 	andi	r3,r3,255
 400a06c:	04400434 	movhi	r17,16
 400a070:	8c7fffc4 	addi	r17,r17,-1
 400a074:	180697fa 	slli	r3,r3,31
 400a078:	2c4a703a 	and	r5,r5,r17
 400a07c:	288ab03a 	or	r5,r5,r2
 400a080:	28c6b03a 	or	r3,r5,r3
 400a084:	9005883a 	mov	r2,r18
 400a088:	dfc00d17 	ldw	ra,52(sp)
 400a08c:	df000c17 	ldw	fp,48(sp)
 400a090:	ddc00b17 	ldw	r23,44(sp)
 400a094:	dd800a17 	ldw	r22,40(sp)
 400a098:	dd400917 	ldw	r21,36(sp)
 400a09c:	dd000817 	ldw	r20,32(sp)
 400a0a0:	dcc00717 	ldw	r19,28(sp)
 400a0a4:	dc800617 	ldw	r18,24(sp)
 400a0a8:	dc400517 	ldw	r17,20(sp)
 400a0ac:	dc000417 	ldw	r16,16(sp)
 400a0b0:	dec00e04 	addi	sp,sp,56
 400a0b4:	f800283a 	ret
 400a0b8:	2404b03a 	or	r2,r4,r16
 400a0bc:	2027883a 	mov	r19,r4
 400a0c0:	10003926 	beq	r2,zero,400a1a8 <__divdf3+0x2c0>
 400a0c4:	80012e26 	beq	r16,zero,400a580 <__divdf3+0x698>
 400a0c8:	8009883a 	mov	r4,r16
 400a0cc:	d9800315 	stw	r6,12(sp)
 400a0d0:	d9c00215 	stw	r7,8(sp)
 400a0d4:	400ba340 	call	400ba34 <__clzsi2>
 400a0d8:	d9800317 	ldw	r6,12(sp)
 400a0dc:	d9c00217 	ldw	r7,8(sp)
 400a0e0:	113ffd44 	addi	r4,r2,-11
 400a0e4:	00c00704 	movi	r3,28
 400a0e8:	19012116 	blt	r3,r4,400a570 <__divdf3+0x688>
 400a0ec:	00c00744 	movi	r3,29
 400a0f0:	147ffe04 	addi	r17,r2,-8
 400a0f4:	1907c83a 	sub	r3,r3,r4
 400a0f8:	8460983a 	sll	r16,r16,r17
 400a0fc:	98c6d83a 	srl	r3,r19,r3
 400a100:	9c64983a 	sll	r18,r19,r17
 400a104:	1c20b03a 	or	r16,r3,r16
 400a108:	1080fcc4 	addi	r2,r2,1011
 400a10c:	00abc83a 	sub	r21,zero,r2
 400a110:	0027883a 	mov	r19,zero
 400a114:	0013883a 	mov	r9,zero
 400a118:	003f9106 	br	4009f60 <__alt_mem_epcs_flash_controller_0+0xfb008f60>
 400a11c:	3446b03a 	or	r3,r6,r17
 400a120:	18001f1e 	bne	r3,zero,400a1a0 <__divdf3+0x2b8>
 400a124:	0023883a 	mov	r17,zero
 400a128:	0011883a 	mov	r8,zero
 400a12c:	01c00084 	movi	r7,2
 400a130:	003f9d06 	br	4009fa8 <__alt_mem_epcs_flash_controller_0+0xfb008fa8>
 400a134:	3446b03a 	or	r3,r6,r17
 400a138:	18001526 	beq	r3,zero,400a190 <__divdf3+0x2a8>
 400a13c:	88011b26 	beq	r17,zero,400a5ac <__divdf3+0x6c4>
 400a140:	8809883a 	mov	r4,r17
 400a144:	d9800315 	stw	r6,12(sp)
 400a148:	da400115 	stw	r9,4(sp)
 400a14c:	400ba340 	call	400ba34 <__clzsi2>
 400a150:	d9800317 	ldw	r6,12(sp)
 400a154:	da400117 	ldw	r9,4(sp)
 400a158:	113ffd44 	addi	r4,r2,-11
 400a15c:	00c00704 	movi	r3,28
 400a160:	19010e16 	blt	r3,r4,400a59c <__divdf3+0x6b4>
 400a164:	00c00744 	movi	r3,29
 400a168:	123ffe04 	addi	r8,r2,-8
 400a16c:	1907c83a 	sub	r3,r3,r4
 400a170:	8a22983a 	sll	r17,r17,r8
 400a174:	30c6d83a 	srl	r3,r6,r3
 400a178:	3210983a 	sll	r8,r6,r8
 400a17c:	1c62b03a 	or	r17,r3,r17
 400a180:	1080fcc4 	addi	r2,r2,1011
 400a184:	0085c83a 	sub	r2,zero,r2
 400a188:	000f883a 	mov	r7,zero
 400a18c:	003f8606 	br	4009fa8 <__alt_mem_epcs_flash_controller_0+0xfb008fa8>
 400a190:	0023883a 	mov	r17,zero
 400a194:	0011883a 	mov	r8,zero
 400a198:	01c00044 	movi	r7,1
 400a19c:	003f8206 	br	4009fa8 <__alt_mem_epcs_flash_controller_0+0xfb008fa8>
 400a1a0:	01c000c4 	movi	r7,3
 400a1a4:	003f8006 	br	4009fa8 <__alt_mem_epcs_flash_controller_0+0xfb008fa8>
 400a1a8:	04c00104 	movi	r19,4
 400a1ac:	0021883a 	mov	r16,zero
 400a1b0:	0025883a 	mov	r18,zero
 400a1b4:	02400044 	movi	r9,1
 400a1b8:	003f6906 	br	4009f60 <__alt_mem_epcs_flash_controller_0+0xfb008f60>
 400a1bc:	04c00304 	movi	r19,12
 400a1c0:	024000c4 	movi	r9,3
 400a1c4:	003f6606 	br	4009f60 <__alt_mem_epcs_flash_controller_0+0xfb008f60>
 400a1c8:	01400434 	movhi	r5,16
 400a1cc:	0007883a 	mov	r3,zero
 400a1d0:	297fffc4 	addi	r5,r5,-1
 400a1d4:	04bfffc4 	movi	r18,-1
 400a1d8:	0081ffc4 	movi	r2,2047
 400a1dc:	003fa106 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a1e0:	00c00044 	movi	r3,1
 400a1e4:	1887c83a 	sub	r3,r3,r2
 400a1e8:	01000e04 	movi	r4,56
 400a1ec:	20c1210e 	bge	r4,r3,400a674 <__divdf3+0x78c>
 400a1f0:	98c0004c 	andi	r3,r19,1
 400a1f4:	0005883a 	mov	r2,zero
 400a1f8:	000b883a 	mov	r5,zero
 400a1fc:	0025883a 	mov	r18,zero
 400a200:	003f9806 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a204:	8c00fd36 	bltu	r17,r16,400a5fc <__divdf3+0x714>
 400a208:	8440fb26 	beq	r16,r17,400a5f8 <__divdf3+0x710>
 400a20c:	8007883a 	mov	r3,r16
 400a210:	ad7fffc4 	addi	r21,r21,-1
 400a214:	0021883a 	mov	r16,zero
 400a218:	4004d63a 	srli	r2,r8,24
 400a21c:	8822923a 	slli	r17,r17,8
 400a220:	1809883a 	mov	r4,r3
 400a224:	402c923a 	slli	r22,r8,8
 400a228:	88b8b03a 	or	fp,r17,r2
 400a22c:	e028d43a 	srli	r20,fp,16
 400a230:	d8c00015 	stw	r3,0(sp)
 400a234:	e5ffffcc 	andi	r23,fp,65535
 400a238:	a00b883a 	mov	r5,r20
 400a23c:	40095800 	call	4009580 <__udivsi3>
 400a240:	d8c00017 	ldw	r3,0(sp)
 400a244:	a00b883a 	mov	r5,r20
 400a248:	d8800315 	stw	r2,12(sp)
 400a24c:	1809883a 	mov	r4,r3
 400a250:	40095e40 	call	40095e4 <__umodsi3>
 400a254:	d9800317 	ldw	r6,12(sp)
 400a258:	1006943a 	slli	r3,r2,16
 400a25c:	9004d43a 	srli	r2,r18,16
 400a260:	b9a3383a 	mul	r17,r23,r6
 400a264:	10c4b03a 	or	r2,r2,r3
 400a268:	1440062e 	bgeu	r2,r17,400a284 <__divdf3+0x39c>
 400a26c:	1705883a 	add	r2,r2,fp
 400a270:	30ffffc4 	addi	r3,r6,-1
 400a274:	1700ee36 	bltu	r2,fp,400a630 <__divdf3+0x748>
 400a278:	1440ed2e 	bgeu	r2,r17,400a630 <__divdf3+0x748>
 400a27c:	31bfff84 	addi	r6,r6,-2
 400a280:	1705883a 	add	r2,r2,fp
 400a284:	1463c83a 	sub	r17,r2,r17
 400a288:	a00b883a 	mov	r5,r20
 400a28c:	8809883a 	mov	r4,r17
 400a290:	d9800315 	stw	r6,12(sp)
 400a294:	40095800 	call	4009580 <__udivsi3>
 400a298:	a00b883a 	mov	r5,r20
 400a29c:	8809883a 	mov	r4,r17
 400a2a0:	d8800215 	stw	r2,8(sp)
 400a2a4:	40095e40 	call	40095e4 <__umodsi3>
 400a2a8:	d9c00217 	ldw	r7,8(sp)
 400a2ac:	1004943a 	slli	r2,r2,16
 400a2b0:	94bfffcc 	andi	r18,r18,65535
 400a2b4:	b9d1383a 	mul	r8,r23,r7
 400a2b8:	90a4b03a 	or	r18,r18,r2
 400a2bc:	d9800317 	ldw	r6,12(sp)
 400a2c0:	9200062e 	bgeu	r18,r8,400a2dc <__divdf3+0x3f4>
 400a2c4:	9725883a 	add	r18,r18,fp
 400a2c8:	38bfffc4 	addi	r2,r7,-1
 400a2cc:	9700d636 	bltu	r18,fp,400a628 <__divdf3+0x740>
 400a2d0:	9200d52e 	bgeu	r18,r8,400a628 <__divdf3+0x740>
 400a2d4:	39ffff84 	addi	r7,r7,-2
 400a2d8:	9725883a 	add	r18,r18,fp
 400a2dc:	3004943a 	slli	r2,r6,16
 400a2e0:	b012d43a 	srli	r9,r22,16
 400a2e4:	b1bfffcc 	andi	r6,r22,65535
 400a2e8:	11e2b03a 	or	r17,r2,r7
 400a2ec:	8806d43a 	srli	r3,r17,16
 400a2f0:	893fffcc 	andi	r4,r17,65535
 400a2f4:	218b383a 	mul	r5,r4,r6
 400a2f8:	30c5383a 	mul	r2,r6,r3
 400a2fc:	2249383a 	mul	r4,r4,r9
 400a300:	280ed43a 	srli	r7,r5,16
 400a304:	9225c83a 	sub	r18,r18,r8
 400a308:	2089883a 	add	r4,r4,r2
 400a30c:	3909883a 	add	r4,r7,r4
 400a310:	1a47383a 	mul	r3,r3,r9
 400a314:	2080022e 	bgeu	r4,r2,400a320 <__divdf3+0x438>
 400a318:	00800074 	movhi	r2,1
 400a31c:	1887883a 	add	r3,r3,r2
 400a320:	2004d43a 	srli	r2,r4,16
 400a324:	2008943a 	slli	r4,r4,16
 400a328:	297fffcc 	andi	r5,r5,65535
 400a32c:	10c7883a 	add	r3,r2,r3
 400a330:	2149883a 	add	r4,r4,r5
 400a334:	90c0a536 	bltu	r18,r3,400a5cc <__divdf3+0x6e4>
 400a338:	90c0bf26 	beq	r18,r3,400a638 <__divdf3+0x750>
 400a33c:	90c7c83a 	sub	r3,r18,r3
 400a340:	810fc83a 	sub	r7,r16,r4
 400a344:	81e5803a 	cmpltu	r18,r16,r7
 400a348:	1ca5c83a 	sub	r18,r3,r18
 400a34c:	e480c126 	beq	fp,r18,400a654 <__divdf3+0x76c>
 400a350:	a00b883a 	mov	r5,r20
 400a354:	9009883a 	mov	r4,r18
 400a358:	d9800315 	stw	r6,12(sp)
 400a35c:	d9c00215 	stw	r7,8(sp)
 400a360:	da400115 	stw	r9,4(sp)
 400a364:	40095800 	call	4009580 <__udivsi3>
 400a368:	a00b883a 	mov	r5,r20
 400a36c:	9009883a 	mov	r4,r18
 400a370:	d8800015 	stw	r2,0(sp)
 400a374:	40095e40 	call	40095e4 <__umodsi3>
 400a378:	d9c00217 	ldw	r7,8(sp)
 400a37c:	da000017 	ldw	r8,0(sp)
 400a380:	1006943a 	slli	r3,r2,16
 400a384:	3804d43a 	srli	r2,r7,16
 400a388:	ba21383a 	mul	r16,r23,r8
 400a38c:	d9800317 	ldw	r6,12(sp)
 400a390:	10c4b03a 	or	r2,r2,r3
 400a394:	da400117 	ldw	r9,4(sp)
 400a398:	1400062e 	bgeu	r2,r16,400a3b4 <__divdf3+0x4cc>
 400a39c:	1705883a 	add	r2,r2,fp
 400a3a0:	40ffffc4 	addi	r3,r8,-1
 400a3a4:	1700ad36 	bltu	r2,fp,400a65c <__divdf3+0x774>
 400a3a8:	1400ac2e 	bgeu	r2,r16,400a65c <__divdf3+0x774>
 400a3ac:	423fff84 	addi	r8,r8,-2
 400a3b0:	1705883a 	add	r2,r2,fp
 400a3b4:	1421c83a 	sub	r16,r2,r16
 400a3b8:	a00b883a 	mov	r5,r20
 400a3bc:	8009883a 	mov	r4,r16
 400a3c0:	d9800315 	stw	r6,12(sp)
 400a3c4:	d9c00215 	stw	r7,8(sp)
 400a3c8:	da000015 	stw	r8,0(sp)
 400a3cc:	da400115 	stw	r9,4(sp)
 400a3d0:	40095800 	call	4009580 <__udivsi3>
 400a3d4:	8009883a 	mov	r4,r16
 400a3d8:	a00b883a 	mov	r5,r20
 400a3dc:	1025883a 	mov	r18,r2
 400a3e0:	40095e40 	call	40095e4 <__umodsi3>
 400a3e4:	d9c00217 	ldw	r7,8(sp)
 400a3e8:	1004943a 	slli	r2,r2,16
 400a3ec:	bcaf383a 	mul	r23,r23,r18
 400a3f0:	393fffcc 	andi	r4,r7,65535
 400a3f4:	2088b03a 	or	r4,r4,r2
 400a3f8:	d9800317 	ldw	r6,12(sp)
 400a3fc:	da000017 	ldw	r8,0(sp)
 400a400:	da400117 	ldw	r9,4(sp)
 400a404:	25c0062e 	bgeu	r4,r23,400a420 <__divdf3+0x538>
 400a408:	2709883a 	add	r4,r4,fp
 400a40c:	90bfffc4 	addi	r2,r18,-1
 400a410:	27009436 	bltu	r4,fp,400a664 <__divdf3+0x77c>
 400a414:	25c0932e 	bgeu	r4,r23,400a664 <__divdf3+0x77c>
 400a418:	94bfff84 	addi	r18,r18,-2
 400a41c:	2709883a 	add	r4,r4,fp
 400a420:	4004943a 	slli	r2,r8,16
 400a424:	25efc83a 	sub	r23,r4,r23
 400a428:	1490b03a 	or	r8,r2,r18
 400a42c:	4008d43a 	srli	r4,r8,16
 400a430:	40ffffcc 	andi	r3,r8,65535
 400a434:	30c5383a 	mul	r2,r6,r3
 400a438:	1a47383a 	mul	r3,r3,r9
 400a43c:	310d383a 	mul	r6,r6,r4
 400a440:	100ad43a 	srli	r5,r2,16
 400a444:	4913383a 	mul	r9,r9,r4
 400a448:	1987883a 	add	r3,r3,r6
 400a44c:	28c7883a 	add	r3,r5,r3
 400a450:	1980022e 	bgeu	r3,r6,400a45c <__divdf3+0x574>
 400a454:	01000074 	movhi	r4,1
 400a458:	4913883a 	add	r9,r9,r4
 400a45c:	1808d43a 	srli	r4,r3,16
 400a460:	1806943a 	slli	r3,r3,16
 400a464:	10bfffcc 	andi	r2,r2,65535
 400a468:	2253883a 	add	r9,r4,r9
 400a46c:	1887883a 	add	r3,r3,r2
 400a470:	ba403836 	bltu	r23,r9,400a554 <__divdf3+0x66c>
 400a474:	ba403626 	beq	r23,r9,400a550 <__divdf3+0x668>
 400a478:	42000054 	ori	r8,r8,1
 400a47c:	a880ffc4 	addi	r2,r21,1023
 400a480:	00bf570e 	bge	zero,r2,400a1e0 <__alt_mem_epcs_flash_controller_0+0xfb0091e0>
 400a484:	40c001cc 	andi	r3,r8,7
 400a488:	18000726 	beq	r3,zero,400a4a8 <__divdf3+0x5c0>
 400a48c:	40c003cc 	andi	r3,r8,15
 400a490:	01000104 	movi	r4,4
 400a494:	19000426 	beq	r3,r4,400a4a8 <__divdf3+0x5c0>
 400a498:	4107883a 	add	r3,r8,r4
 400a49c:	1a11803a 	cmpltu	r8,r3,r8
 400a4a0:	8a23883a 	add	r17,r17,r8
 400a4a4:	1811883a 	mov	r8,r3
 400a4a8:	88c0402c 	andhi	r3,r17,256
 400a4ac:	18000426 	beq	r3,zero,400a4c0 <__divdf3+0x5d8>
 400a4b0:	00ffc034 	movhi	r3,65280
 400a4b4:	18ffffc4 	addi	r3,r3,-1
 400a4b8:	a8810004 	addi	r2,r21,1024
 400a4bc:	88e2703a 	and	r17,r17,r3
 400a4c0:	00c1ff84 	movi	r3,2046
 400a4c4:	18bee316 	blt	r3,r2,400a054 <__alt_mem_epcs_flash_controller_0+0xfb009054>
 400a4c8:	8824977a 	slli	r18,r17,29
 400a4cc:	4010d0fa 	srli	r8,r8,3
 400a4d0:	8822927a 	slli	r17,r17,9
 400a4d4:	1081ffcc 	andi	r2,r2,2047
 400a4d8:	9224b03a 	or	r18,r18,r8
 400a4dc:	880ad33a 	srli	r5,r17,12
 400a4e0:	98c0004c 	andi	r3,r19,1
 400a4e4:	003edf06 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a4e8:	8080022c 	andhi	r2,r16,8
 400a4ec:	10001226 	beq	r2,zero,400a538 <__divdf3+0x650>
 400a4f0:	8880022c 	andhi	r2,r17,8
 400a4f4:	1000101e 	bne	r2,zero,400a538 <__divdf3+0x650>
 400a4f8:	00800434 	movhi	r2,16
 400a4fc:	89400234 	orhi	r5,r17,8
 400a500:	10bfffc4 	addi	r2,r2,-1
 400a504:	b007883a 	mov	r3,r22
 400a508:	288a703a 	and	r5,r5,r2
 400a50c:	4025883a 	mov	r18,r8
 400a510:	003f3106 	br	400a1d8 <__alt_mem_epcs_flash_controller_0+0xfb0091d8>
 400a514:	008000c4 	movi	r2,3
 400a518:	3880a626 	beq	r7,r2,400a7b4 <__divdf3+0x8cc>
 400a51c:	00800044 	movi	r2,1
 400a520:	3880521e 	bne	r7,r2,400a66c <__divdf3+0x784>
 400a524:	b807883a 	mov	r3,r23
 400a528:	0005883a 	mov	r2,zero
 400a52c:	000b883a 	mov	r5,zero
 400a530:	0025883a 	mov	r18,zero
 400a534:	003ecb06 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a538:	00800434 	movhi	r2,16
 400a53c:	81400234 	orhi	r5,r16,8
 400a540:	10bfffc4 	addi	r2,r2,-1
 400a544:	a007883a 	mov	r3,r20
 400a548:	288a703a 	and	r5,r5,r2
 400a54c:	003f2206 	br	400a1d8 <__alt_mem_epcs_flash_controller_0+0xfb0091d8>
 400a550:	183fca26 	beq	r3,zero,400a47c <__alt_mem_epcs_flash_controller_0+0xfb00947c>
 400a554:	e5ef883a 	add	r23,fp,r23
 400a558:	40bfffc4 	addi	r2,r8,-1
 400a55c:	bf00392e 	bgeu	r23,fp,400a644 <__divdf3+0x75c>
 400a560:	1011883a 	mov	r8,r2
 400a564:	ba7fc41e 	bne	r23,r9,400a478 <__alt_mem_epcs_flash_controller_0+0xfb009478>
 400a568:	b0ffc31e 	bne	r22,r3,400a478 <__alt_mem_epcs_flash_controller_0+0xfb009478>
 400a56c:	003fc306 	br	400a47c <__alt_mem_epcs_flash_controller_0+0xfb00947c>
 400a570:	143ff604 	addi	r16,r2,-40
 400a574:	9c20983a 	sll	r16,r19,r16
 400a578:	0025883a 	mov	r18,zero
 400a57c:	003ee206 	br	400a108 <__alt_mem_epcs_flash_controller_0+0xfb009108>
 400a580:	d9800315 	stw	r6,12(sp)
 400a584:	d9c00215 	stw	r7,8(sp)
 400a588:	400ba340 	call	400ba34 <__clzsi2>
 400a58c:	10800804 	addi	r2,r2,32
 400a590:	d9c00217 	ldw	r7,8(sp)
 400a594:	d9800317 	ldw	r6,12(sp)
 400a598:	003ed106 	br	400a0e0 <__alt_mem_epcs_flash_controller_0+0xfb0090e0>
 400a59c:	147ff604 	addi	r17,r2,-40
 400a5a0:	3462983a 	sll	r17,r6,r17
 400a5a4:	0011883a 	mov	r8,zero
 400a5a8:	003ef506 	br	400a180 <__alt_mem_epcs_flash_controller_0+0xfb009180>
 400a5ac:	3009883a 	mov	r4,r6
 400a5b0:	d9800315 	stw	r6,12(sp)
 400a5b4:	da400115 	stw	r9,4(sp)
 400a5b8:	400ba340 	call	400ba34 <__clzsi2>
 400a5bc:	10800804 	addi	r2,r2,32
 400a5c0:	da400117 	ldw	r9,4(sp)
 400a5c4:	d9800317 	ldw	r6,12(sp)
 400a5c8:	003ee306 	br	400a158 <__alt_mem_epcs_flash_controller_0+0xfb009158>
 400a5cc:	85a1883a 	add	r16,r16,r22
 400a5d0:	8585803a 	cmpltu	r2,r16,r22
 400a5d4:	1705883a 	add	r2,r2,fp
 400a5d8:	14a5883a 	add	r18,r2,r18
 400a5dc:	88bfffc4 	addi	r2,r17,-1
 400a5e0:	e4800c2e 	bgeu	fp,r18,400a614 <__divdf3+0x72c>
 400a5e4:	90c03e36 	bltu	r18,r3,400a6e0 <__divdf3+0x7f8>
 400a5e8:	1c806926 	beq	r3,r18,400a790 <__divdf3+0x8a8>
 400a5ec:	90c7c83a 	sub	r3,r18,r3
 400a5f0:	1023883a 	mov	r17,r2
 400a5f4:	003f5206 	br	400a340 <__alt_mem_epcs_flash_controller_0+0xfb009340>
 400a5f8:	923f0436 	bltu	r18,r8,400a20c <__alt_mem_epcs_flash_controller_0+0xfb00920c>
 400a5fc:	800897fa 	slli	r4,r16,31
 400a600:	9004d07a 	srli	r2,r18,1
 400a604:	8006d07a 	srli	r3,r16,1
 400a608:	902097fa 	slli	r16,r18,31
 400a60c:	20a4b03a 	or	r18,r4,r2
 400a610:	003f0106 	br	400a218 <__alt_mem_epcs_flash_controller_0+0xfb009218>
 400a614:	e4bff51e 	bne	fp,r18,400a5ec <__alt_mem_epcs_flash_controller_0+0xfb0095ec>
 400a618:	85bff22e 	bgeu	r16,r22,400a5e4 <__alt_mem_epcs_flash_controller_0+0xfb0095e4>
 400a61c:	e0c7c83a 	sub	r3,fp,r3
 400a620:	1023883a 	mov	r17,r2
 400a624:	003f4606 	br	400a340 <__alt_mem_epcs_flash_controller_0+0xfb009340>
 400a628:	100f883a 	mov	r7,r2
 400a62c:	003f2b06 	br	400a2dc <__alt_mem_epcs_flash_controller_0+0xfb0092dc>
 400a630:	180d883a 	mov	r6,r3
 400a634:	003f1306 	br	400a284 <__alt_mem_epcs_flash_controller_0+0xfb009284>
 400a638:	813fe436 	bltu	r16,r4,400a5cc <__alt_mem_epcs_flash_controller_0+0xfb0095cc>
 400a63c:	0007883a 	mov	r3,zero
 400a640:	003f3f06 	br	400a340 <__alt_mem_epcs_flash_controller_0+0xfb009340>
 400a644:	ba402c36 	bltu	r23,r9,400a6f8 <__divdf3+0x810>
 400a648:	4dc05426 	beq	r9,r23,400a79c <__divdf3+0x8b4>
 400a64c:	1011883a 	mov	r8,r2
 400a650:	003f8906 	br	400a478 <__alt_mem_epcs_flash_controller_0+0xfb009478>
 400a654:	023fffc4 	movi	r8,-1
 400a658:	003f8806 	br	400a47c <__alt_mem_epcs_flash_controller_0+0xfb00947c>
 400a65c:	1811883a 	mov	r8,r3
 400a660:	003f5406 	br	400a3b4 <__alt_mem_epcs_flash_controller_0+0xfb0093b4>
 400a664:	1025883a 	mov	r18,r2
 400a668:	003f6d06 	br	400a420 <__alt_mem_epcs_flash_controller_0+0xfb009420>
 400a66c:	b827883a 	mov	r19,r23
 400a670:	003f8206 	br	400a47c <__alt_mem_epcs_flash_controller_0+0xfb00947c>
 400a674:	010007c4 	movi	r4,31
 400a678:	20c02616 	blt	r4,r3,400a714 <__divdf3+0x82c>
 400a67c:	00800804 	movi	r2,32
 400a680:	10c5c83a 	sub	r2,r2,r3
 400a684:	888a983a 	sll	r5,r17,r2
 400a688:	40c8d83a 	srl	r4,r8,r3
 400a68c:	4084983a 	sll	r2,r8,r2
 400a690:	88e2d83a 	srl	r17,r17,r3
 400a694:	2906b03a 	or	r3,r5,r4
 400a698:	1004c03a 	cmpne	r2,r2,zero
 400a69c:	1886b03a 	or	r3,r3,r2
 400a6a0:	188001cc 	andi	r2,r3,7
 400a6a4:	10000726 	beq	r2,zero,400a6c4 <__divdf3+0x7dc>
 400a6a8:	188003cc 	andi	r2,r3,15
 400a6ac:	01000104 	movi	r4,4
 400a6b0:	11000426 	beq	r2,r4,400a6c4 <__divdf3+0x7dc>
 400a6b4:	1805883a 	mov	r2,r3
 400a6b8:	10c00104 	addi	r3,r2,4
 400a6bc:	1885803a 	cmpltu	r2,r3,r2
 400a6c0:	88a3883a 	add	r17,r17,r2
 400a6c4:	8880202c 	andhi	r2,r17,128
 400a6c8:	10002726 	beq	r2,zero,400a768 <__divdf3+0x880>
 400a6cc:	98c0004c 	andi	r3,r19,1
 400a6d0:	00800044 	movi	r2,1
 400a6d4:	000b883a 	mov	r5,zero
 400a6d8:	0025883a 	mov	r18,zero
 400a6dc:	003e6106 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a6e0:	85a1883a 	add	r16,r16,r22
 400a6e4:	8585803a 	cmpltu	r2,r16,r22
 400a6e8:	1705883a 	add	r2,r2,fp
 400a6ec:	14a5883a 	add	r18,r2,r18
 400a6f0:	8c7fff84 	addi	r17,r17,-2
 400a6f4:	003f1106 	br	400a33c <__alt_mem_epcs_flash_controller_0+0xfb00933c>
 400a6f8:	b589883a 	add	r4,r22,r22
 400a6fc:	25ad803a 	cmpltu	r22,r4,r22
 400a700:	b739883a 	add	fp,r22,fp
 400a704:	40bfff84 	addi	r2,r8,-2
 400a708:	bf2f883a 	add	r23,r23,fp
 400a70c:	202d883a 	mov	r22,r4
 400a710:	003f9306 	br	400a560 <__alt_mem_epcs_flash_controller_0+0xfb009560>
 400a714:	013ff844 	movi	r4,-31
 400a718:	2085c83a 	sub	r2,r4,r2
 400a71c:	8888d83a 	srl	r4,r17,r2
 400a720:	00800804 	movi	r2,32
 400a724:	18802126 	beq	r3,r2,400a7ac <__divdf3+0x8c4>
 400a728:	00801004 	movi	r2,64
 400a72c:	10c5c83a 	sub	r2,r2,r3
 400a730:	8884983a 	sll	r2,r17,r2
 400a734:	1204b03a 	or	r2,r2,r8
 400a738:	1004c03a 	cmpne	r2,r2,zero
 400a73c:	2084b03a 	or	r2,r4,r2
 400a740:	144001cc 	andi	r17,r2,7
 400a744:	88000d1e 	bne	r17,zero,400a77c <__divdf3+0x894>
 400a748:	000b883a 	mov	r5,zero
 400a74c:	1024d0fa 	srli	r18,r2,3
 400a750:	98c0004c 	andi	r3,r19,1
 400a754:	0005883a 	mov	r2,zero
 400a758:	9464b03a 	or	r18,r18,r17
 400a75c:	003e4106 	br	400a064 <__alt_mem_epcs_flash_controller_0+0xfb009064>
 400a760:	1007883a 	mov	r3,r2
 400a764:	0023883a 	mov	r17,zero
 400a768:	880a927a 	slli	r5,r17,9
 400a76c:	1805883a 	mov	r2,r3
 400a770:	8822977a 	slli	r17,r17,29
 400a774:	280ad33a 	srli	r5,r5,12
 400a778:	003ff406 	br	400a74c <__alt_mem_epcs_flash_controller_0+0xfb00974c>
 400a77c:	10c003cc 	andi	r3,r2,15
 400a780:	01000104 	movi	r4,4
 400a784:	193ff626 	beq	r3,r4,400a760 <__alt_mem_epcs_flash_controller_0+0xfb009760>
 400a788:	0023883a 	mov	r17,zero
 400a78c:	003fca06 	br	400a6b8 <__alt_mem_epcs_flash_controller_0+0xfb0096b8>
 400a790:	813fd336 	bltu	r16,r4,400a6e0 <__alt_mem_epcs_flash_controller_0+0xfb0096e0>
 400a794:	1023883a 	mov	r17,r2
 400a798:	003fa806 	br	400a63c <__alt_mem_epcs_flash_controller_0+0xfb00963c>
 400a79c:	b0ffd636 	bltu	r22,r3,400a6f8 <__alt_mem_epcs_flash_controller_0+0xfb0096f8>
 400a7a0:	1011883a 	mov	r8,r2
 400a7a4:	b0ff341e 	bne	r22,r3,400a478 <__alt_mem_epcs_flash_controller_0+0xfb009478>
 400a7a8:	003f3406 	br	400a47c <__alt_mem_epcs_flash_controller_0+0xfb00947c>
 400a7ac:	0005883a 	mov	r2,zero
 400a7b0:	003fe006 	br	400a734 <__alt_mem_epcs_flash_controller_0+0xfb009734>
 400a7b4:	00800434 	movhi	r2,16
 400a7b8:	89400234 	orhi	r5,r17,8
 400a7bc:	10bfffc4 	addi	r2,r2,-1
 400a7c0:	b807883a 	mov	r3,r23
 400a7c4:	288a703a 	and	r5,r5,r2
 400a7c8:	4025883a 	mov	r18,r8
 400a7cc:	003e8206 	br	400a1d8 <__alt_mem_epcs_flash_controller_0+0xfb0091d8>

0400a7d0 <__ledf2>:
 400a7d0:	2804d53a 	srli	r2,r5,20
 400a7d4:	3810d53a 	srli	r8,r7,20
 400a7d8:	00c00434 	movhi	r3,16
 400a7dc:	18ffffc4 	addi	r3,r3,-1
 400a7e0:	1081ffcc 	andi	r2,r2,2047
 400a7e4:	0241ffc4 	movi	r9,2047
 400a7e8:	28d4703a 	and	r10,r5,r3
 400a7ec:	4201ffcc 	andi	r8,r8,2047
 400a7f0:	38c6703a 	and	r3,r7,r3
 400a7f4:	280ad7fa 	srli	r5,r5,31
 400a7f8:	380ed7fa 	srli	r7,r7,31
 400a7fc:	12401f26 	beq	r2,r9,400a87c <__ledf2+0xac>
 400a800:	0241ffc4 	movi	r9,2047
 400a804:	42401426 	beq	r8,r9,400a858 <__ledf2+0x88>
 400a808:	1000091e 	bne	r2,zero,400a830 <__ledf2+0x60>
 400a80c:	2296b03a 	or	r11,r4,r10
 400a810:	5813003a 	cmpeq	r9,r11,zero
 400a814:	29403fcc 	andi	r5,r5,255
 400a818:	40000a1e 	bne	r8,zero,400a844 <__ledf2+0x74>
 400a81c:	30d8b03a 	or	r12,r6,r3
 400a820:	6000081e 	bne	r12,zero,400a844 <__ledf2+0x74>
 400a824:	0005883a 	mov	r2,zero
 400a828:	5800111e 	bne	r11,zero,400a870 <__ledf2+0xa0>
 400a82c:	f800283a 	ret
 400a830:	29403fcc 	andi	r5,r5,255
 400a834:	40000c1e 	bne	r8,zero,400a868 <__ledf2+0x98>
 400a838:	30d2b03a 	or	r9,r6,r3
 400a83c:	48000c26 	beq	r9,zero,400a870 <__ledf2+0xa0>
 400a840:	0013883a 	mov	r9,zero
 400a844:	39c03fcc 	andi	r7,r7,255
 400a848:	48000826 	beq	r9,zero,400a86c <__ledf2+0x9c>
 400a84c:	38001126 	beq	r7,zero,400a894 <__ledf2+0xc4>
 400a850:	00800044 	movi	r2,1
 400a854:	f800283a 	ret
 400a858:	30d2b03a 	or	r9,r6,r3
 400a85c:	483fea26 	beq	r9,zero,400a808 <__alt_mem_epcs_flash_controller_0+0xfb009808>
 400a860:	00800084 	movi	r2,2
 400a864:	f800283a 	ret
 400a868:	39c03fcc 	andi	r7,r7,255
 400a86c:	39400726 	beq	r7,r5,400a88c <__ledf2+0xbc>
 400a870:	2800081e 	bne	r5,zero,400a894 <__ledf2+0xc4>
 400a874:	00800044 	movi	r2,1
 400a878:	f800283a 	ret
 400a87c:	2292b03a 	or	r9,r4,r10
 400a880:	483fdf26 	beq	r9,zero,400a800 <__alt_mem_epcs_flash_controller_0+0xfb009800>
 400a884:	00800084 	movi	r2,2
 400a888:	f800283a 	ret
 400a88c:	4080030e 	bge	r8,r2,400a89c <__ledf2+0xcc>
 400a890:	383fef26 	beq	r7,zero,400a850 <__alt_mem_epcs_flash_controller_0+0xfb009850>
 400a894:	00bfffc4 	movi	r2,-1
 400a898:	f800283a 	ret
 400a89c:	123feb16 	blt	r2,r8,400a84c <__alt_mem_epcs_flash_controller_0+0xfb00984c>
 400a8a0:	1abff336 	bltu	r3,r10,400a870 <__alt_mem_epcs_flash_controller_0+0xfb009870>
 400a8a4:	50c00326 	beq	r10,r3,400a8b4 <__ledf2+0xe4>
 400a8a8:	50c0042e 	bgeu	r10,r3,400a8bc <__ledf2+0xec>
 400a8ac:	283fe81e 	bne	r5,zero,400a850 <__alt_mem_epcs_flash_controller_0+0xfb009850>
 400a8b0:	003ff806 	br	400a894 <__alt_mem_epcs_flash_controller_0+0xfb009894>
 400a8b4:	313fee36 	bltu	r6,r4,400a870 <__alt_mem_epcs_flash_controller_0+0xfb009870>
 400a8b8:	21bffc36 	bltu	r4,r6,400a8ac <__alt_mem_epcs_flash_controller_0+0xfb0098ac>
 400a8bc:	0005883a 	mov	r2,zero
 400a8c0:	f800283a 	ret

0400a8c4 <__muldf3>:
 400a8c4:	defff304 	addi	sp,sp,-52
 400a8c8:	2804d53a 	srli	r2,r5,20
 400a8cc:	dd800915 	stw	r22,36(sp)
 400a8d0:	282cd7fa 	srli	r22,r5,31
 400a8d4:	dc000315 	stw	r16,12(sp)
 400a8d8:	04000434 	movhi	r16,16
 400a8dc:	dd400815 	stw	r21,32(sp)
 400a8e0:	dc800515 	stw	r18,20(sp)
 400a8e4:	843fffc4 	addi	r16,r16,-1
 400a8e8:	dfc00c15 	stw	ra,48(sp)
 400a8ec:	df000b15 	stw	fp,44(sp)
 400a8f0:	ddc00a15 	stw	r23,40(sp)
 400a8f4:	dd000715 	stw	r20,28(sp)
 400a8f8:	dcc00615 	stw	r19,24(sp)
 400a8fc:	dc400415 	stw	r17,16(sp)
 400a900:	1481ffcc 	andi	r18,r2,2047
 400a904:	2c20703a 	and	r16,r5,r16
 400a908:	b02b883a 	mov	r21,r22
 400a90c:	b2403fcc 	andi	r9,r22,255
 400a910:	90006026 	beq	r18,zero,400aa94 <__muldf3+0x1d0>
 400a914:	0081ffc4 	movi	r2,2047
 400a918:	2029883a 	mov	r20,r4
 400a91c:	90803626 	beq	r18,r2,400a9f8 <__muldf3+0x134>
 400a920:	80800434 	orhi	r2,r16,16
 400a924:	100490fa 	slli	r2,r2,3
 400a928:	2020d77a 	srli	r16,r4,29
 400a92c:	202890fa 	slli	r20,r4,3
 400a930:	94bf0044 	addi	r18,r18,-1023
 400a934:	80a0b03a 	or	r16,r16,r2
 400a938:	0027883a 	mov	r19,zero
 400a93c:	0039883a 	mov	fp,zero
 400a940:	3804d53a 	srli	r2,r7,20
 400a944:	382ed7fa 	srli	r23,r7,31
 400a948:	04400434 	movhi	r17,16
 400a94c:	8c7fffc4 	addi	r17,r17,-1
 400a950:	1081ffcc 	andi	r2,r2,2047
 400a954:	3011883a 	mov	r8,r6
 400a958:	3c62703a 	and	r17,r7,r17
 400a95c:	ba803fcc 	andi	r10,r23,255
 400a960:	10006d26 	beq	r2,zero,400ab18 <__muldf3+0x254>
 400a964:	00c1ffc4 	movi	r3,2047
 400a968:	10c06526 	beq	r2,r3,400ab00 <__muldf3+0x23c>
 400a96c:	88c00434 	orhi	r3,r17,16
 400a970:	180690fa 	slli	r3,r3,3
 400a974:	3022d77a 	srli	r17,r6,29
 400a978:	301090fa 	slli	r8,r6,3
 400a97c:	10bf0044 	addi	r2,r2,-1023
 400a980:	88e2b03a 	or	r17,r17,r3
 400a984:	000b883a 	mov	r5,zero
 400a988:	9085883a 	add	r2,r18,r2
 400a98c:	2cc8b03a 	or	r4,r5,r19
 400a990:	00c003c4 	movi	r3,15
 400a994:	bdacf03a 	xor	r22,r23,r22
 400a998:	12c00044 	addi	r11,r2,1
 400a99c:	19009936 	bltu	r3,r4,400ac04 <__muldf3+0x340>
 400a9a0:	200890ba 	slli	r4,r4,2
 400a9a4:	00c10074 	movhi	r3,1025
 400a9a8:	18ea6e04 	addi	r3,r3,-22088
 400a9ac:	20c9883a 	add	r4,r4,r3
 400a9b0:	20c00017 	ldw	r3,0(r4)
 400a9b4:	1800683a 	jmp	r3
 400a9b8:	0400ac04 	movi	r16,688
 400a9bc:	0400aa18 	cmpnei	r16,zero,680
 400a9c0:	0400aa18 	cmpnei	r16,zero,680
 400a9c4:	0400aa14 	movui	r16,680
 400a9c8:	0400abe0 	cmpeqi	r16,zero,687
 400a9cc:	0400abe0 	cmpeqi	r16,zero,687
 400a9d0:	0400abc8 	cmpgei	r16,zero,687
 400a9d4:	0400aa14 	movui	r16,680
 400a9d8:	0400abe0 	cmpeqi	r16,zero,687
 400a9dc:	0400abc8 	cmpgei	r16,zero,687
 400a9e0:	0400abe0 	cmpeqi	r16,zero,687
 400a9e4:	0400aa14 	movui	r16,680
 400a9e8:	0400abf0 	cmpltui	r16,zero,687
 400a9ec:	0400abf0 	cmpltui	r16,zero,687
 400a9f0:	0400abf0 	cmpltui	r16,zero,687
 400a9f4:	0400ae0c 	andi	r16,zero,696
 400a9f8:	2404b03a 	or	r2,r4,r16
 400a9fc:	10006f1e 	bne	r2,zero,400abbc <__muldf3+0x2f8>
 400aa00:	04c00204 	movi	r19,8
 400aa04:	0021883a 	mov	r16,zero
 400aa08:	0029883a 	mov	r20,zero
 400aa0c:	07000084 	movi	fp,2
 400aa10:	003fcb06 	br	400a940 <__alt_mem_epcs_flash_controller_0+0xfb009940>
 400aa14:	502d883a 	mov	r22,r10
 400aa18:	00800084 	movi	r2,2
 400aa1c:	28805726 	beq	r5,r2,400ab7c <__muldf3+0x2b8>
 400aa20:	008000c4 	movi	r2,3
 400aa24:	28816626 	beq	r5,r2,400afc0 <__muldf3+0x6fc>
 400aa28:	00800044 	movi	r2,1
 400aa2c:	2881411e 	bne	r5,r2,400af34 <__muldf3+0x670>
 400aa30:	b02b883a 	mov	r21,r22
 400aa34:	0005883a 	mov	r2,zero
 400aa38:	000b883a 	mov	r5,zero
 400aa3c:	0029883a 	mov	r20,zero
 400aa40:	1004953a 	slli	r2,r2,20
 400aa44:	a8c03fcc 	andi	r3,r21,255
 400aa48:	04400434 	movhi	r17,16
 400aa4c:	8c7fffc4 	addi	r17,r17,-1
 400aa50:	180697fa 	slli	r3,r3,31
 400aa54:	2c4a703a 	and	r5,r5,r17
 400aa58:	288ab03a 	or	r5,r5,r2
 400aa5c:	28c6b03a 	or	r3,r5,r3
 400aa60:	a005883a 	mov	r2,r20
 400aa64:	dfc00c17 	ldw	ra,48(sp)
 400aa68:	df000b17 	ldw	fp,44(sp)
 400aa6c:	ddc00a17 	ldw	r23,40(sp)
 400aa70:	dd800917 	ldw	r22,36(sp)
 400aa74:	dd400817 	ldw	r21,32(sp)
 400aa78:	dd000717 	ldw	r20,28(sp)
 400aa7c:	dcc00617 	ldw	r19,24(sp)
 400aa80:	dc800517 	ldw	r18,20(sp)
 400aa84:	dc400417 	ldw	r17,16(sp)
 400aa88:	dc000317 	ldw	r16,12(sp)
 400aa8c:	dec00d04 	addi	sp,sp,52
 400aa90:	f800283a 	ret
 400aa94:	2404b03a 	or	r2,r4,r16
 400aa98:	2027883a 	mov	r19,r4
 400aa9c:	10004226 	beq	r2,zero,400aba8 <__muldf3+0x2e4>
 400aaa0:	8000fc26 	beq	r16,zero,400ae94 <__muldf3+0x5d0>
 400aaa4:	8009883a 	mov	r4,r16
 400aaa8:	d9800215 	stw	r6,8(sp)
 400aaac:	d9c00015 	stw	r7,0(sp)
 400aab0:	da400115 	stw	r9,4(sp)
 400aab4:	400ba340 	call	400ba34 <__clzsi2>
 400aab8:	d9800217 	ldw	r6,8(sp)
 400aabc:	d9c00017 	ldw	r7,0(sp)
 400aac0:	da400117 	ldw	r9,4(sp)
 400aac4:	113ffd44 	addi	r4,r2,-11
 400aac8:	00c00704 	movi	r3,28
 400aacc:	1900ed16 	blt	r3,r4,400ae84 <__muldf3+0x5c0>
 400aad0:	00c00744 	movi	r3,29
 400aad4:	147ffe04 	addi	r17,r2,-8
 400aad8:	1907c83a 	sub	r3,r3,r4
 400aadc:	8460983a 	sll	r16,r16,r17
 400aae0:	98c6d83a 	srl	r3,r19,r3
 400aae4:	9c68983a 	sll	r20,r19,r17
 400aae8:	1c20b03a 	or	r16,r3,r16
 400aaec:	1080fcc4 	addi	r2,r2,1011
 400aaf0:	00a5c83a 	sub	r18,zero,r2
 400aaf4:	0027883a 	mov	r19,zero
 400aaf8:	0039883a 	mov	fp,zero
 400aafc:	003f9006 	br	400a940 <__alt_mem_epcs_flash_controller_0+0xfb009940>
 400ab00:	3446b03a 	or	r3,r6,r17
 400ab04:	1800261e 	bne	r3,zero,400aba0 <__muldf3+0x2dc>
 400ab08:	0023883a 	mov	r17,zero
 400ab0c:	0011883a 	mov	r8,zero
 400ab10:	01400084 	movi	r5,2
 400ab14:	003f9c06 	br	400a988 <__alt_mem_epcs_flash_controller_0+0xfb009988>
 400ab18:	3446b03a 	or	r3,r6,r17
 400ab1c:	18001c26 	beq	r3,zero,400ab90 <__muldf3+0x2cc>
 400ab20:	8800ce26 	beq	r17,zero,400ae5c <__muldf3+0x598>
 400ab24:	8809883a 	mov	r4,r17
 400ab28:	d9800215 	stw	r6,8(sp)
 400ab2c:	da400115 	stw	r9,4(sp)
 400ab30:	da800015 	stw	r10,0(sp)
 400ab34:	400ba340 	call	400ba34 <__clzsi2>
 400ab38:	d9800217 	ldw	r6,8(sp)
 400ab3c:	da400117 	ldw	r9,4(sp)
 400ab40:	da800017 	ldw	r10,0(sp)
 400ab44:	113ffd44 	addi	r4,r2,-11
 400ab48:	00c00704 	movi	r3,28
 400ab4c:	1900bf16 	blt	r3,r4,400ae4c <__muldf3+0x588>
 400ab50:	00c00744 	movi	r3,29
 400ab54:	123ffe04 	addi	r8,r2,-8
 400ab58:	1907c83a 	sub	r3,r3,r4
 400ab5c:	8a22983a 	sll	r17,r17,r8
 400ab60:	30c6d83a 	srl	r3,r6,r3
 400ab64:	3210983a 	sll	r8,r6,r8
 400ab68:	1c62b03a 	or	r17,r3,r17
 400ab6c:	1080fcc4 	addi	r2,r2,1011
 400ab70:	0085c83a 	sub	r2,zero,r2
 400ab74:	000b883a 	mov	r5,zero
 400ab78:	003f8306 	br	400a988 <__alt_mem_epcs_flash_controller_0+0xfb009988>
 400ab7c:	b02b883a 	mov	r21,r22
 400ab80:	0081ffc4 	movi	r2,2047
 400ab84:	000b883a 	mov	r5,zero
 400ab88:	0029883a 	mov	r20,zero
 400ab8c:	003fac06 	br	400aa40 <__alt_mem_epcs_flash_controller_0+0xfb009a40>
 400ab90:	0023883a 	mov	r17,zero
 400ab94:	0011883a 	mov	r8,zero
 400ab98:	01400044 	movi	r5,1
 400ab9c:	003f7a06 	br	400a988 <__alt_mem_epcs_flash_controller_0+0xfb009988>
 400aba0:	014000c4 	movi	r5,3
 400aba4:	003f7806 	br	400a988 <__alt_mem_epcs_flash_controller_0+0xfb009988>
 400aba8:	04c00104 	movi	r19,4
 400abac:	0021883a 	mov	r16,zero
 400abb0:	0029883a 	mov	r20,zero
 400abb4:	07000044 	movi	fp,1
 400abb8:	003f6106 	br	400a940 <__alt_mem_epcs_flash_controller_0+0xfb009940>
 400abbc:	04c00304 	movi	r19,12
 400abc0:	070000c4 	movi	fp,3
 400abc4:	003f5e06 	br	400a940 <__alt_mem_epcs_flash_controller_0+0xfb009940>
 400abc8:	01400434 	movhi	r5,16
 400abcc:	002b883a 	mov	r21,zero
 400abd0:	297fffc4 	addi	r5,r5,-1
 400abd4:	053fffc4 	movi	r20,-1
 400abd8:	0081ffc4 	movi	r2,2047
 400abdc:	003f9806 	br	400aa40 <__alt_mem_epcs_flash_controller_0+0xfb009a40>
 400abe0:	8023883a 	mov	r17,r16
 400abe4:	a011883a 	mov	r8,r20
 400abe8:	e00b883a 	mov	r5,fp
 400abec:	003f8a06 	br	400aa18 <__alt_mem_epcs_flash_controller_0+0xfb009a18>
 400abf0:	8023883a 	mov	r17,r16
 400abf4:	a011883a 	mov	r8,r20
 400abf8:	482d883a 	mov	r22,r9
 400abfc:	e00b883a 	mov	r5,fp
 400ac00:	003f8506 	br	400aa18 <__alt_mem_epcs_flash_controller_0+0xfb009a18>
 400ac04:	a00ad43a 	srli	r5,r20,16
 400ac08:	401ad43a 	srli	r13,r8,16
 400ac0c:	a53fffcc 	andi	r20,r20,65535
 400ac10:	423fffcc 	andi	r8,r8,65535
 400ac14:	4519383a 	mul	r12,r8,r20
 400ac18:	4147383a 	mul	r3,r8,r5
 400ac1c:	6d09383a 	mul	r4,r13,r20
 400ac20:	600cd43a 	srli	r6,r12,16
 400ac24:	2b5d383a 	mul	r14,r5,r13
 400ac28:	20c9883a 	add	r4,r4,r3
 400ac2c:	310d883a 	add	r6,r6,r4
 400ac30:	30c0022e 	bgeu	r6,r3,400ac3c <__muldf3+0x378>
 400ac34:	00c00074 	movhi	r3,1
 400ac38:	70dd883a 	add	r14,r14,r3
 400ac3c:	8826d43a 	srli	r19,r17,16
 400ac40:	8bffffcc 	andi	r15,r17,65535
 400ac44:	7d23383a 	mul	r17,r15,r20
 400ac48:	7949383a 	mul	r4,r15,r5
 400ac4c:	9d29383a 	mul	r20,r19,r20
 400ac50:	8814d43a 	srli	r10,r17,16
 400ac54:	3012943a 	slli	r9,r6,16
 400ac58:	a129883a 	add	r20,r20,r4
 400ac5c:	633fffcc 	andi	r12,r12,65535
 400ac60:	5515883a 	add	r10,r10,r20
 400ac64:	3006d43a 	srli	r3,r6,16
 400ac68:	4b13883a 	add	r9,r9,r12
 400ac6c:	2ccb383a 	mul	r5,r5,r19
 400ac70:	5100022e 	bgeu	r10,r4,400ac7c <__muldf3+0x3b8>
 400ac74:	01000074 	movhi	r4,1
 400ac78:	290b883a 	add	r5,r5,r4
 400ac7c:	802ad43a 	srli	r21,r16,16
 400ac80:	843fffcc 	andi	r16,r16,65535
 400ac84:	440d383a 	mul	r6,r8,r16
 400ac88:	4565383a 	mul	r18,r8,r21
 400ac8c:	8349383a 	mul	r4,r16,r13
 400ac90:	500e943a 	slli	r7,r10,16
 400ac94:	3010d43a 	srli	r8,r6,16
 400ac98:	5028d43a 	srli	r20,r10,16
 400ac9c:	2489883a 	add	r4,r4,r18
 400aca0:	8abfffcc 	andi	r10,r17,65535
 400aca4:	3a95883a 	add	r10,r7,r10
 400aca8:	4119883a 	add	r12,r8,r4
 400acac:	a169883a 	add	r20,r20,r5
 400acb0:	1a87883a 	add	r3,r3,r10
 400acb4:	6d5b383a 	mul	r13,r13,r21
 400acb8:	6480022e 	bgeu	r12,r18,400acc4 <__muldf3+0x400>
 400acbc:	01000074 	movhi	r4,1
 400acc0:	691b883a 	add	r13,r13,r4
 400acc4:	7c25383a 	mul	r18,r15,r16
 400acc8:	7d4b383a 	mul	r5,r15,r21
 400accc:	84cf383a 	mul	r7,r16,r19
 400acd0:	901ed43a 	srli	r15,r18,16
 400acd4:	6008d43a 	srli	r4,r12,16
 400acd8:	6010943a 	slli	r8,r12,16
 400acdc:	394f883a 	add	r7,r7,r5
 400ace0:	333fffcc 	andi	r12,r6,65535
 400ace4:	79df883a 	add	r15,r15,r7
 400ace8:	235b883a 	add	r13,r4,r13
 400acec:	9d63383a 	mul	r17,r19,r21
 400acf0:	4309883a 	add	r4,r8,r12
 400acf4:	7940022e 	bgeu	r15,r5,400ad00 <__muldf3+0x43c>
 400acf8:	01400074 	movhi	r5,1
 400acfc:	8963883a 	add	r17,r17,r5
 400ad00:	780a943a 	slli	r5,r15,16
 400ad04:	91bfffcc 	andi	r6,r18,65535
 400ad08:	70c7883a 	add	r3,r14,r3
 400ad0c:	298d883a 	add	r6,r5,r6
 400ad10:	1a8f803a 	cmpltu	r7,r3,r10
 400ad14:	350b883a 	add	r5,r6,r20
 400ad18:	20c7883a 	add	r3,r4,r3
 400ad1c:	3955883a 	add	r10,r7,r5
 400ad20:	1909803a 	cmpltu	r4,r3,r4
 400ad24:	6a91883a 	add	r8,r13,r10
 400ad28:	780cd43a 	srli	r6,r15,16
 400ad2c:	2219883a 	add	r12,r4,r8
 400ad30:	2d0b803a 	cmpltu	r5,r5,r20
 400ad34:	51cf803a 	cmpltu	r7,r10,r7
 400ad38:	29ceb03a 	or	r7,r5,r7
 400ad3c:	4351803a 	cmpltu	r8,r8,r13
 400ad40:	610b803a 	cmpltu	r5,r12,r4
 400ad44:	4148b03a 	or	r4,r8,r5
 400ad48:	398f883a 	add	r7,r7,r6
 400ad4c:	3909883a 	add	r4,r7,r4
 400ad50:	1810927a 	slli	r8,r3,9
 400ad54:	2449883a 	add	r4,r4,r17
 400ad58:	2008927a 	slli	r4,r4,9
 400ad5c:	6022d5fa 	srli	r17,r12,23
 400ad60:	1806d5fa 	srli	r3,r3,23
 400ad64:	4252b03a 	or	r9,r8,r9
 400ad68:	600a927a 	slli	r5,r12,9
 400ad6c:	4810c03a 	cmpne	r8,r9,zero
 400ad70:	2462b03a 	or	r17,r4,r17
 400ad74:	40c6b03a 	or	r3,r8,r3
 400ad78:	8900402c 	andhi	r4,r17,256
 400ad7c:	1950b03a 	or	r8,r3,r5
 400ad80:	20000726 	beq	r4,zero,400ada0 <__muldf3+0x4dc>
 400ad84:	4006d07a 	srli	r3,r8,1
 400ad88:	880497fa 	slli	r2,r17,31
 400ad8c:	4200004c 	andi	r8,r8,1
 400ad90:	8822d07a 	srli	r17,r17,1
 400ad94:	1a10b03a 	or	r8,r3,r8
 400ad98:	1210b03a 	or	r8,r2,r8
 400ad9c:	5805883a 	mov	r2,r11
 400ada0:	1140ffc4 	addi	r5,r2,1023
 400ada4:	0140440e 	bge	zero,r5,400aeb8 <__muldf3+0x5f4>
 400ada8:	40c001cc 	andi	r3,r8,7
 400adac:	18000726 	beq	r3,zero,400adcc <__muldf3+0x508>
 400adb0:	40c003cc 	andi	r3,r8,15
 400adb4:	01000104 	movi	r4,4
 400adb8:	19000426 	beq	r3,r4,400adcc <__muldf3+0x508>
 400adbc:	4107883a 	add	r3,r8,r4
 400adc0:	1a11803a 	cmpltu	r8,r3,r8
 400adc4:	8a23883a 	add	r17,r17,r8
 400adc8:	1811883a 	mov	r8,r3
 400adcc:	88c0402c 	andhi	r3,r17,256
 400add0:	18000426 	beq	r3,zero,400ade4 <__muldf3+0x520>
 400add4:	11410004 	addi	r5,r2,1024
 400add8:	00bfc034 	movhi	r2,65280
 400addc:	10bfffc4 	addi	r2,r2,-1
 400ade0:	88a2703a 	and	r17,r17,r2
 400ade4:	0081ff84 	movi	r2,2046
 400ade8:	117f6416 	blt	r2,r5,400ab7c <__alt_mem_epcs_flash_controller_0+0xfb009b7c>
 400adec:	8828977a 	slli	r20,r17,29
 400adf0:	4010d0fa 	srli	r8,r8,3
 400adf4:	8822927a 	slli	r17,r17,9
 400adf8:	2881ffcc 	andi	r2,r5,2047
 400adfc:	a228b03a 	or	r20,r20,r8
 400ae00:	880ad33a 	srli	r5,r17,12
 400ae04:	b02b883a 	mov	r21,r22
 400ae08:	003f0d06 	br	400aa40 <__alt_mem_epcs_flash_controller_0+0xfb009a40>
 400ae0c:	8080022c 	andhi	r2,r16,8
 400ae10:	10000926 	beq	r2,zero,400ae38 <__muldf3+0x574>
 400ae14:	8880022c 	andhi	r2,r17,8
 400ae18:	1000071e 	bne	r2,zero,400ae38 <__muldf3+0x574>
 400ae1c:	00800434 	movhi	r2,16
 400ae20:	89400234 	orhi	r5,r17,8
 400ae24:	10bfffc4 	addi	r2,r2,-1
 400ae28:	b82b883a 	mov	r21,r23
 400ae2c:	288a703a 	and	r5,r5,r2
 400ae30:	4029883a 	mov	r20,r8
 400ae34:	003f6806 	br	400abd8 <__alt_mem_epcs_flash_controller_0+0xfb009bd8>
 400ae38:	00800434 	movhi	r2,16
 400ae3c:	81400234 	orhi	r5,r16,8
 400ae40:	10bfffc4 	addi	r2,r2,-1
 400ae44:	288a703a 	and	r5,r5,r2
 400ae48:	003f6306 	br	400abd8 <__alt_mem_epcs_flash_controller_0+0xfb009bd8>
 400ae4c:	147ff604 	addi	r17,r2,-40
 400ae50:	3462983a 	sll	r17,r6,r17
 400ae54:	0011883a 	mov	r8,zero
 400ae58:	003f4406 	br	400ab6c <__alt_mem_epcs_flash_controller_0+0xfb009b6c>
 400ae5c:	3009883a 	mov	r4,r6
 400ae60:	d9800215 	stw	r6,8(sp)
 400ae64:	da400115 	stw	r9,4(sp)
 400ae68:	da800015 	stw	r10,0(sp)
 400ae6c:	400ba340 	call	400ba34 <__clzsi2>
 400ae70:	10800804 	addi	r2,r2,32
 400ae74:	da800017 	ldw	r10,0(sp)
 400ae78:	da400117 	ldw	r9,4(sp)
 400ae7c:	d9800217 	ldw	r6,8(sp)
 400ae80:	003f3006 	br	400ab44 <__alt_mem_epcs_flash_controller_0+0xfb009b44>
 400ae84:	143ff604 	addi	r16,r2,-40
 400ae88:	9c20983a 	sll	r16,r19,r16
 400ae8c:	0029883a 	mov	r20,zero
 400ae90:	003f1606 	br	400aaec <__alt_mem_epcs_flash_controller_0+0xfb009aec>
 400ae94:	d9800215 	stw	r6,8(sp)
 400ae98:	d9c00015 	stw	r7,0(sp)
 400ae9c:	da400115 	stw	r9,4(sp)
 400aea0:	400ba340 	call	400ba34 <__clzsi2>
 400aea4:	10800804 	addi	r2,r2,32
 400aea8:	da400117 	ldw	r9,4(sp)
 400aeac:	d9c00017 	ldw	r7,0(sp)
 400aeb0:	d9800217 	ldw	r6,8(sp)
 400aeb4:	003f0306 	br	400aac4 <__alt_mem_epcs_flash_controller_0+0xfb009ac4>
 400aeb8:	00c00044 	movi	r3,1
 400aebc:	1947c83a 	sub	r3,r3,r5
 400aec0:	00800e04 	movi	r2,56
 400aec4:	10feda16 	blt	r2,r3,400aa30 <__alt_mem_epcs_flash_controller_0+0xfb009a30>
 400aec8:	008007c4 	movi	r2,31
 400aecc:	10c01b16 	blt	r2,r3,400af3c <__muldf3+0x678>
 400aed0:	00800804 	movi	r2,32
 400aed4:	10c5c83a 	sub	r2,r2,r3
 400aed8:	888a983a 	sll	r5,r17,r2
 400aedc:	40c8d83a 	srl	r4,r8,r3
 400aee0:	4084983a 	sll	r2,r8,r2
 400aee4:	88e2d83a 	srl	r17,r17,r3
 400aee8:	2906b03a 	or	r3,r5,r4
 400aeec:	1004c03a 	cmpne	r2,r2,zero
 400aef0:	1886b03a 	or	r3,r3,r2
 400aef4:	188001cc 	andi	r2,r3,7
 400aef8:	10000726 	beq	r2,zero,400af18 <__muldf3+0x654>
 400aefc:	188003cc 	andi	r2,r3,15
 400af00:	01000104 	movi	r4,4
 400af04:	11000426 	beq	r2,r4,400af18 <__muldf3+0x654>
 400af08:	1805883a 	mov	r2,r3
 400af0c:	10c00104 	addi	r3,r2,4
 400af10:	1885803a 	cmpltu	r2,r3,r2
 400af14:	88a3883a 	add	r17,r17,r2
 400af18:	8880202c 	andhi	r2,r17,128
 400af1c:	10001c26 	beq	r2,zero,400af90 <__muldf3+0x6cc>
 400af20:	b02b883a 	mov	r21,r22
 400af24:	00800044 	movi	r2,1
 400af28:	000b883a 	mov	r5,zero
 400af2c:	0029883a 	mov	r20,zero
 400af30:	003ec306 	br	400aa40 <__alt_mem_epcs_flash_controller_0+0xfb009a40>
 400af34:	5805883a 	mov	r2,r11
 400af38:	003f9906 	br	400ada0 <__alt_mem_epcs_flash_controller_0+0xfb009da0>
 400af3c:	00bff844 	movi	r2,-31
 400af40:	1145c83a 	sub	r2,r2,r5
 400af44:	8888d83a 	srl	r4,r17,r2
 400af48:	00800804 	movi	r2,32
 400af4c:	18801a26 	beq	r3,r2,400afb8 <__muldf3+0x6f4>
 400af50:	00801004 	movi	r2,64
 400af54:	10c5c83a 	sub	r2,r2,r3
 400af58:	8884983a 	sll	r2,r17,r2
 400af5c:	1204b03a 	or	r2,r2,r8
 400af60:	1004c03a 	cmpne	r2,r2,zero
 400af64:	2084b03a 	or	r2,r4,r2
 400af68:	144001cc 	andi	r17,r2,7
 400af6c:	88000d1e 	bne	r17,zero,400afa4 <__muldf3+0x6e0>
 400af70:	000b883a 	mov	r5,zero
 400af74:	1028d0fa 	srli	r20,r2,3
 400af78:	b02b883a 	mov	r21,r22
 400af7c:	0005883a 	mov	r2,zero
 400af80:	a468b03a 	or	r20,r20,r17
 400af84:	003eae06 	br	400aa40 <__alt_mem_epcs_flash_controller_0+0xfb009a40>
 400af88:	1007883a 	mov	r3,r2
 400af8c:	0023883a 	mov	r17,zero
 400af90:	880a927a 	slli	r5,r17,9
 400af94:	1805883a 	mov	r2,r3
 400af98:	8822977a 	slli	r17,r17,29
 400af9c:	280ad33a 	srli	r5,r5,12
 400afa0:	003ff406 	br	400af74 <__alt_mem_epcs_flash_controller_0+0xfb009f74>
 400afa4:	10c003cc 	andi	r3,r2,15
 400afa8:	01000104 	movi	r4,4
 400afac:	193ff626 	beq	r3,r4,400af88 <__alt_mem_epcs_flash_controller_0+0xfb009f88>
 400afb0:	0023883a 	mov	r17,zero
 400afb4:	003fd506 	br	400af0c <__alt_mem_epcs_flash_controller_0+0xfb009f0c>
 400afb8:	0005883a 	mov	r2,zero
 400afbc:	003fe706 	br	400af5c <__alt_mem_epcs_flash_controller_0+0xfb009f5c>
 400afc0:	00800434 	movhi	r2,16
 400afc4:	89400234 	orhi	r5,r17,8
 400afc8:	10bfffc4 	addi	r2,r2,-1
 400afcc:	b02b883a 	mov	r21,r22
 400afd0:	288a703a 	and	r5,r5,r2
 400afd4:	4029883a 	mov	r20,r8
 400afd8:	003eff06 	br	400abd8 <__alt_mem_epcs_flash_controller_0+0xfb009bd8>

0400afdc <__subdf3>:
 400afdc:	02000434 	movhi	r8,16
 400afe0:	423fffc4 	addi	r8,r8,-1
 400afe4:	defffb04 	addi	sp,sp,-20
 400afe8:	2a14703a 	and	r10,r5,r8
 400afec:	3812d53a 	srli	r9,r7,20
 400aff0:	3a10703a 	and	r8,r7,r8
 400aff4:	2006d77a 	srli	r3,r4,29
 400aff8:	3004d77a 	srli	r2,r6,29
 400affc:	dc000015 	stw	r16,0(sp)
 400b000:	501490fa 	slli	r10,r10,3
 400b004:	2820d53a 	srli	r16,r5,20
 400b008:	401090fa 	slli	r8,r8,3
 400b00c:	dc800215 	stw	r18,8(sp)
 400b010:	dc400115 	stw	r17,4(sp)
 400b014:	dfc00415 	stw	ra,16(sp)
 400b018:	202290fa 	slli	r17,r4,3
 400b01c:	dcc00315 	stw	r19,12(sp)
 400b020:	4a41ffcc 	andi	r9,r9,2047
 400b024:	0101ffc4 	movi	r4,2047
 400b028:	2824d7fa 	srli	r18,r5,31
 400b02c:	8401ffcc 	andi	r16,r16,2047
 400b030:	50c6b03a 	or	r3,r10,r3
 400b034:	380ed7fa 	srli	r7,r7,31
 400b038:	408ab03a 	or	r5,r8,r2
 400b03c:	300c90fa 	slli	r6,r6,3
 400b040:	49009626 	beq	r9,r4,400b29c <__subdf3+0x2c0>
 400b044:	39c0005c 	xori	r7,r7,1
 400b048:	8245c83a 	sub	r2,r16,r9
 400b04c:	3c807426 	beq	r7,r18,400b220 <__subdf3+0x244>
 400b050:	0080af0e 	bge	zero,r2,400b310 <__subdf3+0x334>
 400b054:	48002a1e 	bne	r9,zero,400b100 <__subdf3+0x124>
 400b058:	2988b03a 	or	r4,r5,r6
 400b05c:	20009a1e 	bne	r4,zero,400b2c8 <__subdf3+0x2ec>
 400b060:	888001cc 	andi	r2,r17,7
 400b064:	10000726 	beq	r2,zero,400b084 <__subdf3+0xa8>
 400b068:	888003cc 	andi	r2,r17,15
 400b06c:	01000104 	movi	r4,4
 400b070:	11000426 	beq	r2,r4,400b084 <__subdf3+0xa8>
 400b074:	890b883a 	add	r5,r17,r4
 400b078:	2c63803a 	cmpltu	r17,r5,r17
 400b07c:	1c47883a 	add	r3,r3,r17
 400b080:	2823883a 	mov	r17,r5
 400b084:	1880202c 	andhi	r2,r3,128
 400b088:	10005926 	beq	r2,zero,400b1f0 <__subdf3+0x214>
 400b08c:	84000044 	addi	r16,r16,1
 400b090:	0081ffc4 	movi	r2,2047
 400b094:	8080be26 	beq	r16,r2,400b390 <__subdf3+0x3b4>
 400b098:	017fe034 	movhi	r5,65408
 400b09c:	297fffc4 	addi	r5,r5,-1
 400b0a0:	1946703a 	and	r3,r3,r5
 400b0a4:	1804977a 	slli	r2,r3,29
 400b0a8:	1806927a 	slli	r3,r3,9
 400b0ac:	8822d0fa 	srli	r17,r17,3
 400b0b0:	8401ffcc 	andi	r16,r16,2047
 400b0b4:	180ad33a 	srli	r5,r3,12
 400b0b8:	9100004c 	andi	r4,r18,1
 400b0bc:	1444b03a 	or	r2,r2,r17
 400b0c0:	80c1ffcc 	andi	r3,r16,2047
 400b0c4:	1820953a 	slli	r16,r3,20
 400b0c8:	20c03fcc 	andi	r3,r4,255
 400b0cc:	180897fa 	slli	r4,r3,31
 400b0d0:	00c00434 	movhi	r3,16
 400b0d4:	18ffffc4 	addi	r3,r3,-1
 400b0d8:	28c6703a 	and	r3,r5,r3
 400b0dc:	1c06b03a 	or	r3,r3,r16
 400b0e0:	1906b03a 	or	r3,r3,r4
 400b0e4:	dfc00417 	ldw	ra,16(sp)
 400b0e8:	dcc00317 	ldw	r19,12(sp)
 400b0ec:	dc800217 	ldw	r18,8(sp)
 400b0f0:	dc400117 	ldw	r17,4(sp)
 400b0f4:	dc000017 	ldw	r16,0(sp)
 400b0f8:	dec00504 	addi	sp,sp,20
 400b0fc:	f800283a 	ret
 400b100:	0101ffc4 	movi	r4,2047
 400b104:	813fd626 	beq	r16,r4,400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b108:	29402034 	orhi	r5,r5,128
 400b10c:	01000e04 	movi	r4,56
 400b110:	2080a316 	blt	r4,r2,400b3a0 <__subdf3+0x3c4>
 400b114:	010007c4 	movi	r4,31
 400b118:	2080c616 	blt	r4,r2,400b434 <__subdf3+0x458>
 400b11c:	01000804 	movi	r4,32
 400b120:	2089c83a 	sub	r4,r4,r2
 400b124:	2910983a 	sll	r8,r5,r4
 400b128:	308ed83a 	srl	r7,r6,r2
 400b12c:	3108983a 	sll	r4,r6,r4
 400b130:	2884d83a 	srl	r2,r5,r2
 400b134:	41ccb03a 	or	r6,r8,r7
 400b138:	2008c03a 	cmpne	r4,r4,zero
 400b13c:	310cb03a 	or	r6,r6,r4
 400b140:	898dc83a 	sub	r6,r17,r6
 400b144:	89a3803a 	cmpltu	r17,r17,r6
 400b148:	1887c83a 	sub	r3,r3,r2
 400b14c:	1c47c83a 	sub	r3,r3,r17
 400b150:	3023883a 	mov	r17,r6
 400b154:	1880202c 	andhi	r2,r3,128
 400b158:	10002326 	beq	r2,zero,400b1e8 <__subdf3+0x20c>
 400b15c:	04c02034 	movhi	r19,128
 400b160:	9cffffc4 	addi	r19,r19,-1
 400b164:	1ce6703a 	and	r19,r3,r19
 400b168:	98007a26 	beq	r19,zero,400b354 <__subdf3+0x378>
 400b16c:	9809883a 	mov	r4,r19
 400b170:	400ba340 	call	400ba34 <__clzsi2>
 400b174:	113ffe04 	addi	r4,r2,-8
 400b178:	00c007c4 	movi	r3,31
 400b17c:	19007b16 	blt	r3,r4,400b36c <__subdf3+0x390>
 400b180:	00800804 	movi	r2,32
 400b184:	1105c83a 	sub	r2,r2,r4
 400b188:	8884d83a 	srl	r2,r17,r2
 400b18c:	9906983a 	sll	r3,r19,r4
 400b190:	8922983a 	sll	r17,r17,r4
 400b194:	10c4b03a 	or	r2,r2,r3
 400b198:	24007816 	blt	r4,r16,400b37c <__subdf3+0x3a0>
 400b19c:	2421c83a 	sub	r16,r4,r16
 400b1a0:	80c00044 	addi	r3,r16,1
 400b1a4:	010007c4 	movi	r4,31
 400b1a8:	20c09516 	blt	r4,r3,400b400 <__subdf3+0x424>
 400b1ac:	01400804 	movi	r5,32
 400b1b0:	28cbc83a 	sub	r5,r5,r3
 400b1b4:	88c8d83a 	srl	r4,r17,r3
 400b1b8:	8962983a 	sll	r17,r17,r5
 400b1bc:	114a983a 	sll	r5,r2,r5
 400b1c0:	10c6d83a 	srl	r3,r2,r3
 400b1c4:	8804c03a 	cmpne	r2,r17,zero
 400b1c8:	290ab03a 	or	r5,r5,r4
 400b1cc:	28a2b03a 	or	r17,r5,r2
 400b1d0:	0021883a 	mov	r16,zero
 400b1d4:	003fa206 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b1d8:	2090b03a 	or	r8,r4,r2
 400b1dc:	40018e26 	beq	r8,zero,400b818 <__subdf3+0x83c>
 400b1e0:	1007883a 	mov	r3,r2
 400b1e4:	2023883a 	mov	r17,r4
 400b1e8:	888001cc 	andi	r2,r17,7
 400b1ec:	103f9e1e 	bne	r2,zero,400b068 <__alt_mem_epcs_flash_controller_0+0xfb00a068>
 400b1f0:	1804977a 	slli	r2,r3,29
 400b1f4:	8822d0fa 	srli	r17,r17,3
 400b1f8:	1810d0fa 	srli	r8,r3,3
 400b1fc:	9100004c 	andi	r4,r18,1
 400b200:	1444b03a 	or	r2,r2,r17
 400b204:	00c1ffc4 	movi	r3,2047
 400b208:	80c02826 	beq	r16,r3,400b2ac <__subdf3+0x2d0>
 400b20c:	01400434 	movhi	r5,16
 400b210:	297fffc4 	addi	r5,r5,-1
 400b214:	80e0703a 	and	r16,r16,r3
 400b218:	414a703a 	and	r5,r8,r5
 400b21c:	003fa806 	br	400b0c0 <__alt_mem_epcs_flash_controller_0+0xfb00a0c0>
 400b220:	0080630e 	bge	zero,r2,400b3b0 <__subdf3+0x3d4>
 400b224:	48003026 	beq	r9,zero,400b2e8 <__subdf3+0x30c>
 400b228:	0101ffc4 	movi	r4,2047
 400b22c:	813f8c26 	beq	r16,r4,400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b230:	29402034 	orhi	r5,r5,128
 400b234:	01000e04 	movi	r4,56
 400b238:	2080a90e 	bge	r4,r2,400b4e0 <__subdf3+0x504>
 400b23c:	298cb03a 	or	r6,r5,r6
 400b240:	3012c03a 	cmpne	r9,r6,zero
 400b244:	0005883a 	mov	r2,zero
 400b248:	4c53883a 	add	r9,r9,r17
 400b24c:	4c63803a 	cmpltu	r17,r9,r17
 400b250:	10c7883a 	add	r3,r2,r3
 400b254:	88c7883a 	add	r3,r17,r3
 400b258:	4823883a 	mov	r17,r9
 400b25c:	1880202c 	andhi	r2,r3,128
 400b260:	1000d026 	beq	r2,zero,400b5a4 <__subdf3+0x5c8>
 400b264:	84000044 	addi	r16,r16,1
 400b268:	0081ffc4 	movi	r2,2047
 400b26c:	8080fe26 	beq	r16,r2,400b668 <__subdf3+0x68c>
 400b270:	00bfe034 	movhi	r2,65408
 400b274:	10bfffc4 	addi	r2,r2,-1
 400b278:	1886703a 	and	r3,r3,r2
 400b27c:	880ad07a 	srli	r5,r17,1
 400b280:	180497fa 	slli	r2,r3,31
 400b284:	8900004c 	andi	r4,r17,1
 400b288:	2922b03a 	or	r17,r5,r4
 400b28c:	1806d07a 	srli	r3,r3,1
 400b290:	1462b03a 	or	r17,r2,r17
 400b294:	3825883a 	mov	r18,r7
 400b298:	003f7106 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b29c:	2984b03a 	or	r2,r5,r6
 400b2a0:	103f6826 	beq	r2,zero,400b044 <__alt_mem_epcs_flash_controller_0+0xfb00a044>
 400b2a4:	39c03fcc 	andi	r7,r7,255
 400b2a8:	003f6706 	br	400b048 <__alt_mem_epcs_flash_controller_0+0xfb00a048>
 400b2ac:	4086b03a 	or	r3,r8,r2
 400b2b0:	18015226 	beq	r3,zero,400b7fc <__subdf3+0x820>
 400b2b4:	00c00434 	movhi	r3,16
 400b2b8:	41400234 	orhi	r5,r8,8
 400b2bc:	18ffffc4 	addi	r3,r3,-1
 400b2c0:	28ca703a 	and	r5,r5,r3
 400b2c4:	003f7e06 	br	400b0c0 <__alt_mem_epcs_flash_controller_0+0xfb00a0c0>
 400b2c8:	10bfffc4 	addi	r2,r2,-1
 400b2cc:	1000491e 	bne	r2,zero,400b3f4 <__subdf3+0x418>
 400b2d0:	898fc83a 	sub	r7,r17,r6
 400b2d4:	89e3803a 	cmpltu	r17,r17,r7
 400b2d8:	1947c83a 	sub	r3,r3,r5
 400b2dc:	1c47c83a 	sub	r3,r3,r17
 400b2e0:	3823883a 	mov	r17,r7
 400b2e4:	003f9b06 	br	400b154 <__alt_mem_epcs_flash_controller_0+0xfb00a154>
 400b2e8:	2988b03a 	or	r4,r5,r6
 400b2ec:	203f5c26 	beq	r4,zero,400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b2f0:	10bfffc4 	addi	r2,r2,-1
 400b2f4:	1000931e 	bne	r2,zero,400b544 <__subdf3+0x568>
 400b2f8:	898d883a 	add	r6,r17,r6
 400b2fc:	3463803a 	cmpltu	r17,r6,r17
 400b300:	1947883a 	add	r3,r3,r5
 400b304:	88c7883a 	add	r3,r17,r3
 400b308:	3023883a 	mov	r17,r6
 400b30c:	003fd306 	br	400b25c <__alt_mem_epcs_flash_controller_0+0xfb00a25c>
 400b310:	1000541e 	bne	r2,zero,400b464 <__subdf3+0x488>
 400b314:	80800044 	addi	r2,r16,1
 400b318:	1081ffcc 	andi	r2,r2,2047
 400b31c:	01000044 	movi	r4,1
 400b320:	2080a20e 	bge	r4,r2,400b5ac <__subdf3+0x5d0>
 400b324:	8989c83a 	sub	r4,r17,r6
 400b328:	8905803a 	cmpltu	r2,r17,r4
 400b32c:	1967c83a 	sub	r19,r3,r5
 400b330:	98a7c83a 	sub	r19,r19,r2
 400b334:	9880202c 	andhi	r2,r19,128
 400b338:	10006326 	beq	r2,zero,400b4c8 <__subdf3+0x4ec>
 400b33c:	3463c83a 	sub	r17,r6,r17
 400b340:	28c7c83a 	sub	r3,r5,r3
 400b344:	344d803a 	cmpltu	r6,r6,r17
 400b348:	19a7c83a 	sub	r19,r3,r6
 400b34c:	3825883a 	mov	r18,r7
 400b350:	983f861e 	bne	r19,zero,400b16c <__alt_mem_epcs_flash_controller_0+0xfb00a16c>
 400b354:	8809883a 	mov	r4,r17
 400b358:	400ba340 	call	400ba34 <__clzsi2>
 400b35c:	10800804 	addi	r2,r2,32
 400b360:	113ffe04 	addi	r4,r2,-8
 400b364:	00c007c4 	movi	r3,31
 400b368:	193f850e 	bge	r3,r4,400b180 <__alt_mem_epcs_flash_controller_0+0xfb00a180>
 400b36c:	10bff604 	addi	r2,r2,-40
 400b370:	8884983a 	sll	r2,r17,r2
 400b374:	0023883a 	mov	r17,zero
 400b378:	243f880e 	bge	r4,r16,400b19c <__alt_mem_epcs_flash_controller_0+0xfb00a19c>
 400b37c:	00ffe034 	movhi	r3,65408
 400b380:	18ffffc4 	addi	r3,r3,-1
 400b384:	8121c83a 	sub	r16,r16,r4
 400b388:	10c6703a 	and	r3,r2,r3
 400b38c:	003f3406 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b390:	9100004c 	andi	r4,r18,1
 400b394:	000b883a 	mov	r5,zero
 400b398:	0005883a 	mov	r2,zero
 400b39c:	003f4806 	br	400b0c0 <__alt_mem_epcs_flash_controller_0+0xfb00a0c0>
 400b3a0:	298cb03a 	or	r6,r5,r6
 400b3a4:	300cc03a 	cmpne	r6,r6,zero
 400b3a8:	0005883a 	mov	r2,zero
 400b3ac:	003f6406 	br	400b140 <__alt_mem_epcs_flash_controller_0+0xfb00a140>
 400b3b0:	10009a1e 	bne	r2,zero,400b61c <__subdf3+0x640>
 400b3b4:	82400044 	addi	r9,r16,1
 400b3b8:	4881ffcc 	andi	r2,r9,2047
 400b3bc:	02800044 	movi	r10,1
 400b3c0:	5080670e 	bge	r10,r2,400b560 <__subdf3+0x584>
 400b3c4:	0081ffc4 	movi	r2,2047
 400b3c8:	4880af26 	beq	r9,r2,400b688 <__subdf3+0x6ac>
 400b3cc:	898d883a 	add	r6,r17,r6
 400b3d0:	1945883a 	add	r2,r3,r5
 400b3d4:	3447803a 	cmpltu	r3,r6,r17
 400b3d8:	1887883a 	add	r3,r3,r2
 400b3dc:	182297fa 	slli	r17,r3,31
 400b3e0:	300cd07a 	srli	r6,r6,1
 400b3e4:	1806d07a 	srli	r3,r3,1
 400b3e8:	4821883a 	mov	r16,r9
 400b3ec:	89a2b03a 	or	r17,r17,r6
 400b3f0:	003f1b06 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b3f4:	0101ffc4 	movi	r4,2047
 400b3f8:	813f441e 	bne	r16,r4,400b10c <__alt_mem_epcs_flash_controller_0+0xfb00a10c>
 400b3fc:	003f1806 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b400:	843ff844 	addi	r16,r16,-31
 400b404:	01400804 	movi	r5,32
 400b408:	1408d83a 	srl	r4,r2,r16
 400b40c:	19405026 	beq	r3,r5,400b550 <__subdf3+0x574>
 400b410:	01401004 	movi	r5,64
 400b414:	28c7c83a 	sub	r3,r5,r3
 400b418:	10c4983a 	sll	r2,r2,r3
 400b41c:	88a2b03a 	or	r17,r17,r2
 400b420:	8822c03a 	cmpne	r17,r17,zero
 400b424:	2462b03a 	or	r17,r4,r17
 400b428:	0007883a 	mov	r3,zero
 400b42c:	0021883a 	mov	r16,zero
 400b430:	003f6d06 	br	400b1e8 <__alt_mem_epcs_flash_controller_0+0xfb00a1e8>
 400b434:	11fff804 	addi	r7,r2,-32
 400b438:	01000804 	movi	r4,32
 400b43c:	29ced83a 	srl	r7,r5,r7
 400b440:	11004526 	beq	r2,r4,400b558 <__subdf3+0x57c>
 400b444:	01001004 	movi	r4,64
 400b448:	2089c83a 	sub	r4,r4,r2
 400b44c:	2904983a 	sll	r2,r5,r4
 400b450:	118cb03a 	or	r6,r2,r6
 400b454:	300cc03a 	cmpne	r6,r6,zero
 400b458:	398cb03a 	or	r6,r7,r6
 400b45c:	0005883a 	mov	r2,zero
 400b460:	003f3706 	br	400b140 <__alt_mem_epcs_flash_controller_0+0xfb00a140>
 400b464:	80002a26 	beq	r16,zero,400b510 <__subdf3+0x534>
 400b468:	0101ffc4 	movi	r4,2047
 400b46c:	49006626 	beq	r9,r4,400b608 <__subdf3+0x62c>
 400b470:	0085c83a 	sub	r2,zero,r2
 400b474:	18c02034 	orhi	r3,r3,128
 400b478:	01000e04 	movi	r4,56
 400b47c:	20807e16 	blt	r4,r2,400b678 <__subdf3+0x69c>
 400b480:	010007c4 	movi	r4,31
 400b484:	2080e716 	blt	r4,r2,400b824 <__subdf3+0x848>
 400b488:	01000804 	movi	r4,32
 400b48c:	2089c83a 	sub	r4,r4,r2
 400b490:	1914983a 	sll	r10,r3,r4
 400b494:	8890d83a 	srl	r8,r17,r2
 400b498:	8908983a 	sll	r4,r17,r4
 400b49c:	1884d83a 	srl	r2,r3,r2
 400b4a0:	5222b03a 	or	r17,r10,r8
 400b4a4:	2006c03a 	cmpne	r3,r4,zero
 400b4a8:	88e2b03a 	or	r17,r17,r3
 400b4ac:	3463c83a 	sub	r17,r6,r17
 400b4b0:	2885c83a 	sub	r2,r5,r2
 400b4b4:	344d803a 	cmpltu	r6,r6,r17
 400b4b8:	1187c83a 	sub	r3,r2,r6
 400b4bc:	4821883a 	mov	r16,r9
 400b4c0:	3825883a 	mov	r18,r7
 400b4c4:	003f2306 	br	400b154 <__alt_mem_epcs_flash_controller_0+0xfb00a154>
 400b4c8:	24d0b03a 	or	r8,r4,r19
 400b4cc:	40001b1e 	bne	r8,zero,400b53c <__subdf3+0x560>
 400b4d0:	0005883a 	mov	r2,zero
 400b4d4:	0009883a 	mov	r4,zero
 400b4d8:	0021883a 	mov	r16,zero
 400b4dc:	003f4906 	br	400b204 <__alt_mem_epcs_flash_controller_0+0xfb00a204>
 400b4e0:	010007c4 	movi	r4,31
 400b4e4:	20803a16 	blt	r4,r2,400b5d0 <__subdf3+0x5f4>
 400b4e8:	01000804 	movi	r4,32
 400b4ec:	2089c83a 	sub	r4,r4,r2
 400b4f0:	2912983a 	sll	r9,r5,r4
 400b4f4:	3090d83a 	srl	r8,r6,r2
 400b4f8:	3108983a 	sll	r4,r6,r4
 400b4fc:	2884d83a 	srl	r2,r5,r2
 400b500:	4a12b03a 	or	r9,r9,r8
 400b504:	2008c03a 	cmpne	r4,r4,zero
 400b508:	4912b03a 	or	r9,r9,r4
 400b50c:	003f4e06 	br	400b248 <__alt_mem_epcs_flash_controller_0+0xfb00a248>
 400b510:	1c48b03a 	or	r4,r3,r17
 400b514:	20003c26 	beq	r4,zero,400b608 <__subdf3+0x62c>
 400b518:	0084303a 	nor	r2,zero,r2
 400b51c:	1000381e 	bne	r2,zero,400b600 <__subdf3+0x624>
 400b520:	3463c83a 	sub	r17,r6,r17
 400b524:	28c5c83a 	sub	r2,r5,r3
 400b528:	344d803a 	cmpltu	r6,r6,r17
 400b52c:	1187c83a 	sub	r3,r2,r6
 400b530:	4821883a 	mov	r16,r9
 400b534:	3825883a 	mov	r18,r7
 400b538:	003f0606 	br	400b154 <__alt_mem_epcs_flash_controller_0+0xfb00a154>
 400b53c:	2023883a 	mov	r17,r4
 400b540:	003f0906 	br	400b168 <__alt_mem_epcs_flash_controller_0+0xfb00a168>
 400b544:	0101ffc4 	movi	r4,2047
 400b548:	813f3a1e 	bne	r16,r4,400b234 <__alt_mem_epcs_flash_controller_0+0xfb00a234>
 400b54c:	003ec406 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b550:	0005883a 	mov	r2,zero
 400b554:	003fb106 	br	400b41c <__alt_mem_epcs_flash_controller_0+0xfb00a41c>
 400b558:	0005883a 	mov	r2,zero
 400b55c:	003fbc06 	br	400b450 <__alt_mem_epcs_flash_controller_0+0xfb00a450>
 400b560:	1c44b03a 	or	r2,r3,r17
 400b564:	80008e1e 	bne	r16,zero,400b7a0 <__subdf3+0x7c4>
 400b568:	1000c826 	beq	r2,zero,400b88c <__subdf3+0x8b0>
 400b56c:	2984b03a 	or	r2,r5,r6
 400b570:	103ebb26 	beq	r2,zero,400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b574:	8989883a 	add	r4,r17,r6
 400b578:	1945883a 	add	r2,r3,r5
 400b57c:	2447803a 	cmpltu	r3,r4,r17
 400b580:	1887883a 	add	r3,r3,r2
 400b584:	1880202c 	andhi	r2,r3,128
 400b588:	2023883a 	mov	r17,r4
 400b58c:	103f1626 	beq	r2,zero,400b1e8 <__alt_mem_epcs_flash_controller_0+0xfb00a1e8>
 400b590:	00bfe034 	movhi	r2,65408
 400b594:	10bfffc4 	addi	r2,r2,-1
 400b598:	5021883a 	mov	r16,r10
 400b59c:	1886703a 	and	r3,r3,r2
 400b5a0:	003eaf06 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b5a4:	3825883a 	mov	r18,r7
 400b5a8:	003f0f06 	br	400b1e8 <__alt_mem_epcs_flash_controller_0+0xfb00a1e8>
 400b5ac:	1c44b03a 	or	r2,r3,r17
 400b5b0:	8000251e 	bne	r16,zero,400b648 <__subdf3+0x66c>
 400b5b4:	1000661e 	bne	r2,zero,400b750 <__subdf3+0x774>
 400b5b8:	2990b03a 	or	r8,r5,r6
 400b5bc:	40009626 	beq	r8,zero,400b818 <__subdf3+0x83c>
 400b5c0:	2807883a 	mov	r3,r5
 400b5c4:	3023883a 	mov	r17,r6
 400b5c8:	3825883a 	mov	r18,r7
 400b5cc:	003ea406 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b5d0:	127ff804 	addi	r9,r2,-32
 400b5d4:	01000804 	movi	r4,32
 400b5d8:	2a52d83a 	srl	r9,r5,r9
 400b5dc:	11008c26 	beq	r2,r4,400b810 <__subdf3+0x834>
 400b5e0:	01001004 	movi	r4,64
 400b5e4:	2085c83a 	sub	r2,r4,r2
 400b5e8:	2884983a 	sll	r2,r5,r2
 400b5ec:	118cb03a 	or	r6,r2,r6
 400b5f0:	300cc03a 	cmpne	r6,r6,zero
 400b5f4:	4992b03a 	or	r9,r9,r6
 400b5f8:	0005883a 	mov	r2,zero
 400b5fc:	003f1206 	br	400b248 <__alt_mem_epcs_flash_controller_0+0xfb00a248>
 400b600:	0101ffc4 	movi	r4,2047
 400b604:	493f9c1e 	bne	r9,r4,400b478 <__alt_mem_epcs_flash_controller_0+0xfb00a478>
 400b608:	2807883a 	mov	r3,r5
 400b60c:	3023883a 	mov	r17,r6
 400b610:	4821883a 	mov	r16,r9
 400b614:	3825883a 	mov	r18,r7
 400b618:	003e9106 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b61c:	80001f1e 	bne	r16,zero,400b69c <__subdf3+0x6c0>
 400b620:	1c48b03a 	or	r4,r3,r17
 400b624:	20005a26 	beq	r4,zero,400b790 <__subdf3+0x7b4>
 400b628:	0084303a 	nor	r2,zero,r2
 400b62c:	1000561e 	bne	r2,zero,400b788 <__subdf3+0x7ac>
 400b630:	89a3883a 	add	r17,r17,r6
 400b634:	1945883a 	add	r2,r3,r5
 400b638:	898d803a 	cmpltu	r6,r17,r6
 400b63c:	3087883a 	add	r3,r6,r2
 400b640:	4821883a 	mov	r16,r9
 400b644:	003f0506 	br	400b25c <__alt_mem_epcs_flash_controller_0+0xfb00a25c>
 400b648:	10002b1e 	bne	r2,zero,400b6f8 <__subdf3+0x71c>
 400b64c:	2984b03a 	or	r2,r5,r6
 400b650:	10008026 	beq	r2,zero,400b854 <__subdf3+0x878>
 400b654:	2807883a 	mov	r3,r5
 400b658:	3023883a 	mov	r17,r6
 400b65c:	3825883a 	mov	r18,r7
 400b660:	0401ffc4 	movi	r16,2047
 400b664:	003e7e06 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b668:	3809883a 	mov	r4,r7
 400b66c:	0011883a 	mov	r8,zero
 400b670:	0005883a 	mov	r2,zero
 400b674:	003ee306 	br	400b204 <__alt_mem_epcs_flash_controller_0+0xfb00a204>
 400b678:	1c62b03a 	or	r17,r3,r17
 400b67c:	8822c03a 	cmpne	r17,r17,zero
 400b680:	0005883a 	mov	r2,zero
 400b684:	003f8906 	br	400b4ac <__alt_mem_epcs_flash_controller_0+0xfb00a4ac>
 400b688:	3809883a 	mov	r4,r7
 400b68c:	4821883a 	mov	r16,r9
 400b690:	0011883a 	mov	r8,zero
 400b694:	0005883a 	mov	r2,zero
 400b698:	003eda06 	br	400b204 <__alt_mem_epcs_flash_controller_0+0xfb00a204>
 400b69c:	0101ffc4 	movi	r4,2047
 400b6a0:	49003b26 	beq	r9,r4,400b790 <__subdf3+0x7b4>
 400b6a4:	0085c83a 	sub	r2,zero,r2
 400b6a8:	18c02034 	orhi	r3,r3,128
 400b6ac:	01000e04 	movi	r4,56
 400b6b0:	20806e16 	blt	r4,r2,400b86c <__subdf3+0x890>
 400b6b4:	010007c4 	movi	r4,31
 400b6b8:	20807716 	blt	r4,r2,400b898 <__subdf3+0x8bc>
 400b6bc:	01000804 	movi	r4,32
 400b6c0:	2089c83a 	sub	r4,r4,r2
 400b6c4:	1914983a 	sll	r10,r3,r4
 400b6c8:	8890d83a 	srl	r8,r17,r2
 400b6cc:	8908983a 	sll	r4,r17,r4
 400b6d0:	1884d83a 	srl	r2,r3,r2
 400b6d4:	5222b03a 	or	r17,r10,r8
 400b6d8:	2006c03a 	cmpne	r3,r4,zero
 400b6dc:	88e2b03a 	or	r17,r17,r3
 400b6e0:	89a3883a 	add	r17,r17,r6
 400b6e4:	1145883a 	add	r2,r2,r5
 400b6e8:	898d803a 	cmpltu	r6,r17,r6
 400b6ec:	3087883a 	add	r3,r6,r2
 400b6f0:	4821883a 	mov	r16,r9
 400b6f4:	003ed906 	br	400b25c <__alt_mem_epcs_flash_controller_0+0xfb00a25c>
 400b6f8:	2984b03a 	or	r2,r5,r6
 400b6fc:	10004226 	beq	r2,zero,400b808 <__subdf3+0x82c>
 400b700:	1808d0fa 	srli	r4,r3,3
 400b704:	8822d0fa 	srli	r17,r17,3
 400b708:	1806977a 	slli	r3,r3,29
 400b70c:	2080022c 	andhi	r2,r4,8
 400b710:	1c62b03a 	or	r17,r3,r17
 400b714:	10000826 	beq	r2,zero,400b738 <__subdf3+0x75c>
 400b718:	2812d0fa 	srli	r9,r5,3
 400b71c:	4880022c 	andhi	r2,r9,8
 400b720:	1000051e 	bne	r2,zero,400b738 <__subdf3+0x75c>
 400b724:	300cd0fa 	srli	r6,r6,3
 400b728:	2804977a 	slli	r2,r5,29
 400b72c:	4809883a 	mov	r4,r9
 400b730:	3825883a 	mov	r18,r7
 400b734:	11a2b03a 	or	r17,r2,r6
 400b738:	8806d77a 	srli	r3,r17,29
 400b73c:	200890fa 	slli	r4,r4,3
 400b740:	882290fa 	slli	r17,r17,3
 400b744:	0401ffc4 	movi	r16,2047
 400b748:	1906b03a 	or	r3,r3,r4
 400b74c:	003e4406 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b750:	2984b03a 	or	r2,r5,r6
 400b754:	103e4226 	beq	r2,zero,400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b758:	8989c83a 	sub	r4,r17,r6
 400b75c:	8911803a 	cmpltu	r8,r17,r4
 400b760:	1945c83a 	sub	r2,r3,r5
 400b764:	1205c83a 	sub	r2,r2,r8
 400b768:	1200202c 	andhi	r8,r2,128
 400b76c:	403e9a26 	beq	r8,zero,400b1d8 <__alt_mem_epcs_flash_controller_0+0xfb00a1d8>
 400b770:	3463c83a 	sub	r17,r6,r17
 400b774:	28c5c83a 	sub	r2,r5,r3
 400b778:	344d803a 	cmpltu	r6,r6,r17
 400b77c:	1187c83a 	sub	r3,r2,r6
 400b780:	3825883a 	mov	r18,r7
 400b784:	003e3606 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b788:	0101ffc4 	movi	r4,2047
 400b78c:	493fc71e 	bne	r9,r4,400b6ac <__alt_mem_epcs_flash_controller_0+0xfb00a6ac>
 400b790:	2807883a 	mov	r3,r5
 400b794:	3023883a 	mov	r17,r6
 400b798:	4821883a 	mov	r16,r9
 400b79c:	003e3006 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b7a0:	10003626 	beq	r2,zero,400b87c <__subdf3+0x8a0>
 400b7a4:	2984b03a 	or	r2,r5,r6
 400b7a8:	10001726 	beq	r2,zero,400b808 <__subdf3+0x82c>
 400b7ac:	1808d0fa 	srli	r4,r3,3
 400b7b0:	8822d0fa 	srli	r17,r17,3
 400b7b4:	1806977a 	slli	r3,r3,29
 400b7b8:	2080022c 	andhi	r2,r4,8
 400b7bc:	1c62b03a 	or	r17,r3,r17
 400b7c0:	10000726 	beq	r2,zero,400b7e0 <__subdf3+0x804>
 400b7c4:	2812d0fa 	srli	r9,r5,3
 400b7c8:	4880022c 	andhi	r2,r9,8
 400b7cc:	1000041e 	bne	r2,zero,400b7e0 <__subdf3+0x804>
 400b7d0:	300cd0fa 	srli	r6,r6,3
 400b7d4:	2804977a 	slli	r2,r5,29
 400b7d8:	4809883a 	mov	r4,r9
 400b7dc:	11a2b03a 	or	r17,r2,r6
 400b7e0:	8806d77a 	srli	r3,r17,29
 400b7e4:	200890fa 	slli	r4,r4,3
 400b7e8:	882290fa 	slli	r17,r17,3
 400b7ec:	3825883a 	mov	r18,r7
 400b7f0:	1906b03a 	or	r3,r3,r4
 400b7f4:	0401ffc4 	movi	r16,2047
 400b7f8:	003e1906 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b7fc:	000b883a 	mov	r5,zero
 400b800:	0005883a 	mov	r2,zero
 400b804:	003e2e06 	br	400b0c0 <__alt_mem_epcs_flash_controller_0+0xfb00a0c0>
 400b808:	0401ffc4 	movi	r16,2047
 400b80c:	003e1406 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b810:	0005883a 	mov	r2,zero
 400b814:	003f7506 	br	400b5ec <__alt_mem_epcs_flash_controller_0+0xfb00a5ec>
 400b818:	0005883a 	mov	r2,zero
 400b81c:	0009883a 	mov	r4,zero
 400b820:	003e7806 	br	400b204 <__alt_mem_epcs_flash_controller_0+0xfb00a204>
 400b824:	123ff804 	addi	r8,r2,-32
 400b828:	01000804 	movi	r4,32
 400b82c:	1a10d83a 	srl	r8,r3,r8
 400b830:	11002526 	beq	r2,r4,400b8c8 <__subdf3+0x8ec>
 400b834:	01001004 	movi	r4,64
 400b838:	2085c83a 	sub	r2,r4,r2
 400b83c:	1884983a 	sll	r2,r3,r2
 400b840:	1444b03a 	or	r2,r2,r17
 400b844:	1004c03a 	cmpne	r2,r2,zero
 400b848:	40a2b03a 	or	r17,r8,r2
 400b84c:	0005883a 	mov	r2,zero
 400b850:	003f1606 	br	400b4ac <__alt_mem_epcs_flash_controller_0+0xfb00a4ac>
 400b854:	02000434 	movhi	r8,16
 400b858:	0009883a 	mov	r4,zero
 400b85c:	423fffc4 	addi	r8,r8,-1
 400b860:	00bfffc4 	movi	r2,-1
 400b864:	0401ffc4 	movi	r16,2047
 400b868:	003e6606 	br	400b204 <__alt_mem_epcs_flash_controller_0+0xfb00a204>
 400b86c:	1c62b03a 	or	r17,r3,r17
 400b870:	8822c03a 	cmpne	r17,r17,zero
 400b874:	0005883a 	mov	r2,zero
 400b878:	003f9906 	br	400b6e0 <__alt_mem_epcs_flash_controller_0+0xfb00a6e0>
 400b87c:	2807883a 	mov	r3,r5
 400b880:	3023883a 	mov	r17,r6
 400b884:	0401ffc4 	movi	r16,2047
 400b888:	003df506 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b88c:	2807883a 	mov	r3,r5
 400b890:	3023883a 	mov	r17,r6
 400b894:	003df206 	br	400b060 <__alt_mem_epcs_flash_controller_0+0xfb00a060>
 400b898:	123ff804 	addi	r8,r2,-32
 400b89c:	01000804 	movi	r4,32
 400b8a0:	1a10d83a 	srl	r8,r3,r8
 400b8a4:	11000a26 	beq	r2,r4,400b8d0 <__subdf3+0x8f4>
 400b8a8:	01001004 	movi	r4,64
 400b8ac:	2085c83a 	sub	r2,r4,r2
 400b8b0:	1884983a 	sll	r2,r3,r2
 400b8b4:	1444b03a 	or	r2,r2,r17
 400b8b8:	1004c03a 	cmpne	r2,r2,zero
 400b8bc:	40a2b03a 	or	r17,r8,r2
 400b8c0:	0005883a 	mov	r2,zero
 400b8c4:	003f8606 	br	400b6e0 <__alt_mem_epcs_flash_controller_0+0xfb00a6e0>
 400b8c8:	0005883a 	mov	r2,zero
 400b8cc:	003fdc06 	br	400b840 <__alt_mem_epcs_flash_controller_0+0xfb00a840>
 400b8d0:	0005883a 	mov	r2,zero
 400b8d4:	003ff706 	br	400b8b4 <__alt_mem_epcs_flash_controller_0+0xfb00a8b4>

0400b8d8 <__fixdfsi>:
 400b8d8:	280cd53a 	srli	r6,r5,20
 400b8dc:	00c00434 	movhi	r3,16
 400b8e0:	18ffffc4 	addi	r3,r3,-1
 400b8e4:	3181ffcc 	andi	r6,r6,2047
 400b8e8:	01c0ff84 	movi	r7,1022
 400b8ec:	28c6703a 	and	r3,r5,r3
 400b8f0:	280ad7fa 	srli	r5,r5,31
 400b8f4:	3980120e 	bge	r7,r6,400b940 <__fixdfsi+0x68>
 400b8f8:	00810744 	movi	r2,1053
 400b8fc:	11800c16 	blt	r2,r6,400b930 <__fixdfsi+0x58>
 400b900:	00810cc4 	movi	r2,1075
 400b904:	1185c83a 	sub	r2,r2,r6
 400b908:	01c007c4 	movi	r7,31
 400b90c:	18c00434 	orhi	r3,r3,16
 400b910:	38800d16 	blt	r7,r2,400b948 <__fixdfsi+0x70>
 400b914:	31befb44 	addi	r6,r6,-1043
 400b918:	2084d83a 	srl	r2,r4,r2
 400b91c:	1986983a 	sll	r3,r3,r6
 400b920:	1884b03a 	or	r2,r3,r2
 400b924:	28000726 	beq	r5,zero,400b944 <__fixdfsi+0x6c>
 400b928:	0085c83a 	sub	r2,zero,r2
 400b92c:	f800283a 	ret
 400b930:	00a00034 	movhi	r2,32768
 400b934:	10bfffc4 	addi	r2,r2,-1
 400b938:	2885883a 	add	r2,r5,r2
 400b93c:	f800283a 	ret
 400b940:	0005883a 	mov	r2,zero
 400b944:	f800283a 	ret
 400b948:	008104c4 	movi	r2,1043
 400b94c:	1185c83a 	sub	r2,r2,r6
 400b950:	1884d83a 	srl	r2,r3,r2
 400b954:	003ff306 	br	400b924 <__alt_mem_epcs_flash_controller_0+0xfb00a924>

0400b958 <__floatsidf>:
 400b958:	defffd04 	addi	sp,sp,-12
 400b95c:	dfc00215 	stw	ra,8(sp)
 400b960:	dc400115 	stw	r17,4(sp)
 400b964:	dc000015 	stw	r16,0(sp)
 400b968:	20002b26 	beq	r4,zero,400ba18 <__floatsidf+0xc0>
 400b96c:	2023883a 	mov	r17,r4
 400b970:	2020d7fa 	srli	r16,r4,31
 400b974:	20002d16 	blt	r4,zero,400ba2c <__floatsidf+0xd4>
 400b978:	8809883a 	mov	r4,r17
 400b97c:	400ba340 	call	400ba34 <__clzsi2>
 400b980:	01410784 	movi	r5,1054
 400b984:	288bc83a 	sub	r5,r5,r2
 400b988:	01010cc4 	movi	r4,1075
 400b98c:	2149c83a 	sub	r4,r4,r5
 400b990:	00c007c4 	movi	r3,31
 400b994:	1900160e 	bge	r3,r4,400b9f0 <__floatsidf+0x98>
 400b998:	00c104c4 	movi	r3,1043
 400b99c:	1947c83a 	sub	r3,r3,r5
 400b9a0:	88c6983a 	sll	r3,r17,r3
 400b9a4:	00800434 	movhi	r2,16
 400b9a8:	10bfffc4 	addi	r2,r2,-1
 400b9ac:	1886703a 	and	r3,r3,r2
 400b9b0:	2941ffcc 	andi	r5,r5,2047
 400b9b4:	800d883a 	mov	r6,r16
 400b9b8:	0005883a 	mov	r2,zero
 400b9bc:	280a953a 	slli	r5,r5,20
 400b9c0:	31803fcc 	andi	r6,r6,255
 400b9c4:	01000434 	movhi	r4,16
 400b9c8:	300c97fa 	slli	r6,r6,31
 400b9cc:	213fffc4 	addi	r4,r4,-1
 400b9d0:	1906703a 	and	r3,r3,r4
 400b9d4:	1946b03a 	or	r3,r3,r5
 400b9d8:	1986b03a 	or	r3,r3,r6
 400b9dc:	dfc00217 	ldw	ra,8(sp)
 400b9e0:	dc400117 	ldw	r17,4(sp)
 400b9e4:	dc000017 	ldw	r16,0(sp)
 400b9e8:	dec00304 	addi	sp,sp,12
 400b9ec:	f800283a 	ret
 400b9f0:	00c002c4 	movi	r3,11
 400b9f4:	1887c83a 	sub	r3,r3,r2
 400b9f8:	88c6d83a 	srl	r3,r17,r3
 400b9fc:	8904983a 	sll	r2,r17,r4
 400ba00:	01000434 	movhi	r4,16
 400ba04:	213fffc4 	addi	r4,r4,-1
 400ba08:	2941ffcc 	andi	r5,r5,2047
 400ba0c:	1906703a 	and	r3,r3,r4
 400ba10:	800d883a 	mov	r6,r16
 400ba14:	003fe906 	br	400b9bc <__alt_mem_epcs_flash_controller_0+0xfb00a9bc>
 400ba18:	000d883a 	mov	r6,zero
 400ba1c:	000b883a 	mov	r5,zero
 400ba20:	0007883a 	mov	r3,zero
 400ba24:	0005883a 	mov	r2,zero
 400ba28:	003fe406 	br	400b9bc <__alt_mem_epcs_flash_controller_0+0xfb00a9bc>
 400ba2c:	0123c83a 	sub	r17,zero,r4
 400ba30:	003fd106 	br	400b978 <__alt_mem_epcs_flash_controller_0+0xfb00a978>

0400ba34 <__clzsi2>:
 400ba34:	00bfffd4 	movui	r2,65535
 400ba38:	11000536 	bltu	r2,r4,400ba50 <__clzsi2+0x1c>
 400ba3c:	00803fc4 	movi	r2,255
 400ba40:	11000f36 	bltu	r2,r4,400ba80 <__clzsi2+0x4c>
 400ba44:	00800804 	movi	r2,32
 400ba48:	0007883a 	mov	r3,zero
 400ba4c:	00000506 	br	400ba64 <__clzsi2+0x30>
 400ba50:	00804034 	movhi	r2,256
 400ba54:	10bfffc4 	addi	r2,r2,-1
 400ba58:	11000c2e 	bgeu	r2,r4,400ba8c <__clzsi2+0x58>
 400ba5c:	00800204 	movi	r2,8
 400ba60:	00c00604 	movi	r3,24
 400ba64:	20c8d83a 	srl	r4,r4,r3
 400ba68:	00c10234 	movhi	r3,1032
 400ba6c:	18ef9c44 	addi	r3,r3,-16783
 400ba70:	1909883a 	add	r4,r3,r4
 400ba74:	20c00003 	ldbu	r3,0(r4)
 400ba78:	10c5c83a 	sub	r2,r2,r3
 400ba7c:	f800283a 	ret
 400ba80:	00800604 	movi	r2,24
 400ba84:	00c00204 	movi	r3,8
 400ba88:	003ff606 	br	400ba64 <__alt_mem_epcs_flash_controller_0+0xfb00aa64>
 400ba8c:	00800404 	movi	r2,16
 400ba90:	1007883a 	mov	r3,r2
 400ba94:	003ff306 	br	400ba64 <__alt_mem_epcs_flash_controller_0+0xfb00aa64>

0400ba98 <__errno>:
 400ba98:	00810234 	movhi	r2,1032
 400ba9c:	10be4404 	addi	r2,r2,-1776
 400baa0:	10800017 	ldw	r2,0(r2)
 400baa4:	f800283a 	ret

0400baa8 <malloc>:
 400baa8:	00810234 	movhi	r2,1032
 400baac:	10be4404 	addi	r2,r2,-1776
 400bab0:	200b883a 	mov	r5,r4
 400bab4:	11000017 	ldw	r4,0(r2)
 400bab8:	400bad01 	jmpi	400bad0 <_malloc_r>

0400babc <free>:
 400babc:	00810234 	movhi	r2,1032
 400bac0:	10be4404 	addi	r2,r2,-1776
 400bac4:	200b883a 	mov	r5,r4
 400bac8:	11000017 	ldw	r4,0(r2)
 400bacc:	40130001 	jmpi	4013000 <_free_r>

0400bad0 <_malloc_r>:
 400bad0:	defff504 	addi	sp,sp,-44
 400bad4:	dc800315 	stw	r18,12(sp)
 400bad8:	dfc00a15 	stw	ra,40(sp)
 400badc:	df000915 	stw	fp,36(sp)
 400bae0:	ddc00815 	stw	r23,32(sp)
 400bae4:	dd800715 	stw	r22,28(sp)
 400bae8:	dd400615 	stw	r21,24(sp)
 400baec:	dd000515 	stw	r20,20(sp)
 400baf0:	dcc00415 	stw	r19,16(sp)
 400baf4:	dc400215 	stw	r17,8(sp)
 400baf8:	dc000115 	stw	r16,4(sp)
 400bafc:	288002c4 	addi	r2,r5,11
 400bb00:	00c00584 	movi	r3,22
 400bb04:	2025883a 	mov	r18,r4
 400bb08:	18807f2e 	bgeu	r3,r2,400bd08 <_malloc_r+0x238>
 400bb0c:	047ffe04 	movi	r17,-8
 400bb10:	1462703a 	and	r17,r2,r17
 400bb14:	8800a316 	blt	r17,zero,400bda4 <_malloc_r+0x2d4>
 400bb18:	8940a236 	bltu	r17,r5,400bda4 <_malloc_r+0x2d4>
 400bb1c:	4019ec80 	call	4019ec8 <__malloc_lock>
 400bb20:	00807dc4 	movi	r2,503
 400bb24:	1441e92e 	bgeu	r2,r17,400c2cc <_malloc_r+0x7fc>
 400bb28:	8804d27a 	srli	r2,r17,9
 400bb2c:	1000a126 	beq	r2,zero,400bdb4 <_malloc_r+0x2e4>
 400bb30:	00c00104 	movi	r3,4
 400bb34:	18811e36 	bltu	r3,r2,400bfb0 <_malloc_r+0x4e0>
 400bb38:	8804d1ba 	srli	r2,r17,6
 400bb3c:	12000e44 	addi	r8,r2,57
 400bb40:	11c00e04 	addi	r7,r2,56
 400bb44:	4209883a 	add	r4,r8,r8
 400bb48:	04c10234 	movhi	r19,1032
 400bb4c:	2109883a 	add	r4,r4,r4
 400bb50:	9cf86b04 	addi	r19,r19,-7764
 400bb54:	2109883a 	add	r4,r4,r4
 400bb58:	9909883a 	add	r4,r19,r4
 400bb5c:	24000117 	ldw	r16,4(r4)
 400bb60:	213ffe04 	addi	r4,r4,-8
 400bb64:	24009726 	beq	r4,r16,400bdc4 <_malloc_r+0x2f4>
 400bb68:	80800117 	ldw	r2,4(r16)
 400bb6c:	01bfff04 	movi	r6,-4
 400bb70:	014003c4 	movi	r5,15
 400bb74:	1184703a 	and	r2,r2,r6
 400bb78:	1447c83a 	sub	r3,r2,r17
 400bb7c:	28c00716 	blt	r5,r3,400bb9c <_malloc_r+0xcc>
 400bb80:	1800920e 	bge	r3,zero,400bdcc <_malloc_r+0x2fc>
 400bb84:	84000317 	ldw	r16,12(r16)
 400bb88:	24008e26 	beq	r4,r16,400bdc4 <_malloc_r+0x2f4>
 400bb8c:	80800117 	ldw	r2,4(r16)
 400bb90:	1184703a 	and	r2,r2,r6
 400bb94:	1447c83a 	sub	r3,r2,r17
 400bb98:	28fff90e 	bge	r5,r3,400bb80 <__alt_mem_epcs_flash_controller_0+0xfb00ab80>
 400bb9c:	3809883a 	mov	r4,r7
 400bba0:	01810234 	movhi	r6,1032
 400bba4:	9c000417 	ldw	r16,16(r19)
 400bba8:	31b86b04 	addi	r6,r6,-7764
 400bbac:	32000204 	addi	r8,r6,8
 400bbb0:	82013426 	beq	r16,r8,400c084 <_malloc_r+0x5b4>
 400bbb4:	80c00117 	ldw	r3,4(r16)
 400bbb8:	00bfff04 	movi	r2,-4
 400bbbc:	188e703a 	and	r7,r3,r2
 400bbc0:	3c45c83a 	sub	r2,r7,r17
 400bbc4:	00c003c4 	movi	r3,15
 400bbc8:	18811f16 	blt	r3,r2,400c048 <_malloc_r+0x578>
 400bbcc:	32000515 	stw	r8,20(r6)
 400bbd0:	32000415 	stw	r8,16(r6)
 400bbd4:	10007f0e 	bge	r2,zero,400bdd4 <_malloc_r+0x304>
 400bbd8:	00807fc4 	movi	r2,511
 400bbdc:	11c0fd36 	bltu	r2,r7,400bfd4 <_malloc_r+0x504>
 400bbe0:	3806d0fa 	srli	r3,r7,3
 400bbe4:	01c00044 	movi	r7,1
 400bbe8:	30800117 	ldw	r2,4(r6)
 400bbec:	19400044 	addi	r5,r3,1
 400bbf0:	294b883a 	add	r5,r5,r5
 400bbf4:	1807d0ba 	srai	r3,r3,2
 400bbf8:	294b883a 	add	r5,r5,r5
 400bbfc:	294b883a 	add	r5,r5,r5
 400bc00:	298b883a 	add	r5,r5,r6
 400bc04:	38c6983a 	sll	r3,r7,r3
 400bc08:	29c00017 	ldw	r7,0(r5)
 400bc0c:	2a7ffe04 	addi	r9,r5,-8
 400bc10:	1886b03a 	or	r3,r3,r2
 400bc14:	82400315 	stw	r9,12(r16)
 400bc18:	81c00215 	stw	r7,8(r16)
 400bc1c:	30c00115 	stw	r3,4(r6)
 400bc20:	2c000015 	stw	r16,0(r5)
 400bc24:	3c000315 	stw	r16,12(r7)
 400bc28:	2005d0ba 	srai	r2,r4,2
 400bc2c:	01400044 	movi	r5,1
 400bc30:	288a983a 	sll	r5,r5,r2
 400bc34:	19406f36 	bltu	r3,r5,400bdf4 <_malloc_r+0x324>
 400bc38:	28c4703a 	and	r2,r5,r3
 400bc3c:	10000a1e 	bne	r2,zero,400bc68 <_malloc_r+0x198>
 400bc40:	00bfff04 	movi	r2,-4
 400bc44:	294b883a 	add	r5,r5,r5
 400bc48:	2088703a 	and	r4,r4,r2
 400bc4c:	28c4703a 	and	r2,r5,r3
 400bc50:	21000104 	addi	r4,r4,4
 400bc54:	1000041e 	bne	r2,zero,400bc68 <_malloc_r+0x198>
 400bc58:	294b883a 	add	r5,r5,r5
 400bc5c:	28c4703a 	and	r2,r5,r3
 400bc60:	21000104 	addi	r4,r4,4
 400bc64:	103ffc26 	beq	r2,zero,400bc58 <__alt_mem_epcs_flash_controller_0+0xfb00ac58>
 400bc68:	02bfff04 	movi	r10,-4
 400bc6c:	024003c4 	movi	r9,15
 400bc70:	21800044 	addi	r6,r4,1
 400bc74:	318d883a 	add	r6,r6,r6
 400bc78:	318d883a 	add	r6,r6,r6
 400bc7c:	318d883a 	add	r6,r6,r6
 400bc80:	998d883a 	add	r6,r19,r6
 400bc84:	333ffe04 	addi	r12,r6,-8
 400bc88:	2017883a 	mov	r11,r4
 400bc8c:	31800104 	addi	r6,r6,4
 400bc90:	34000017 	ldw	r16,0(r6)
 400bc94:	31fffd04 	addi	r7,r6,-12
 400bc98:	81c0041e 	bne	r16,r7,400bcac <_malloc_r+0x1dc>
 400bc9c:	0000fb06 	br	400c08c <_malloc_r+0x5bc>
 400bca0:	1801030e 	bge	r3,zero,400c0b0 <_malloc_r+0x5e0>
 400bca4:	84000317 	ldw	r16,12(r16)
 400bca8:	81c0f826 	beq	r16,r7,400c08c <_malloc_r+0x5bc>
 400bcac:	80800117 	ldw	r2,4(r16)
 400bcb0:	1284703a 	and	r2,r2,r10
 400bcb4:	1447c83a 	sub	r3,r2,r17
 400bcb8:	48fff90e 	bge	r9,r3,400bca0 <__alt_mem_epcs_flash_controller_0+0xfb00aca0>
 400bcbc:	80800317 	ldw	r2,12(r16)
 400bcc0:	81000217 	ldw	r4,8(r16)
 400bcc4:	89400054 	ori	r5,r17,1
 400bcc8:	81400115 	stw	r5,4(r16)
 400bccc:	20800315 	stw	r2,12(r4)
 400bcd0:	11000215 	stw	r4,8(r2)
 400bcd4:	8463883a 	add	r17,r16,r17
 400bcd8:	9c400515 	stw	r17,20(r19)
 400bcdc:	9c400415 	stw	r17,16(r19)
 400bce0:	18800054 	ori	r2,r3,1
 400bce4:	88800115 	stw	r2,4(r17)
 400bce8:	8a000315 	stw	r8,12(r17)
 400bcec:	8a000215 	stw	r8,8(r17)
 400bcf0:	88e3883a 	add	r17,r17,r3
 400bcf4:	88c00015 	stw	r3,0(r17)
 400bcf8:	9009883a 	mov	r4,r18
 400bcfc:	4019eec0 	call	4019eec <__malloc_unlock>
 400bd00:	80800204 	addi	r2,r16,8
 400bd04:	00001b06 	br	400bd74 <_malloc_r+0x2a4>
 400bd08:	04400404 	movi	r17,16
 400bd0c:	89402536 	bltu	r17,r5,400bda4 <_malloc_r+0x2d4>
 400bd10:	4019ec80 	call	4019ec8 <__malloc_lock>
 400bd14:	00800184 	movi	r2,6
 400bd18:	01000084 	movi	r4,2
 400bd1c:	04c10234 	movhi	r19,1032
 400bd20:	1085883a 	add	r2,r2,r2
 400bd24:	9cf86b04 	addi	r19,r19,-7764
 400bd28:	1085883a 	add	r2,r2,r2
 400bd2c:	9885883a 	add	r2,r19,r2
 400bd30:	14000117 	ldw	r16,4(r2)
 400bd34:	10fffe04 	addi	r3,r2,-8
 400bd38:	80c0d926 	beq	r16,r3,400c0a0 <_malloc_r+0x5d0>
 400bd3c:	80c00117 	ldw	r3,4(r16)
 400bd40:	81000317 	ldw	r4,12(r16)
 400bd44:	00bfff04 	movi	r2,-4
 400bd48:	1884703a 	and	r2,r3,r2
 400bd4c:	81400217 	ldw	r5,8(r16)
 400bd50:	8085883a 	add	r2,r16,r2
 400bd54:	10c00117 	ldw	r3,4(r2)
 400bd58:	29000315 	stw	r4,12(r5)
 400bd5c:	21400215 	stw	r5,8(r4)
 400bd60:	18c00054 	ori	r3,r3,1
 400bd64:	10c00115 	stw	r3,4(r2)
 400bd68:	9009883a 	mov	r4,r18
 400bd6c:	4019eec0 	call	4019eec <__malloc_unlock>
 400bd70:	80800204 	addi	r2,r16,8
 400bd74:	dfc00a17 	ldw	ra,40(sp)
 400bd78:	df000917 	ldw	fp,36(sp)
 400bd7c:	ddc00817 	ldw	r23,32(sp)
 400bd80:	dd800717 	ldw	r22,28(sp)
 400bd84:	dd400617 	ldw	r21,24(sp)
 400bd88:	dd000517 	ldw	r20,20(sp)
 400bd8c:	dcc00417 	ldw	r19,16(sp)
 400bd90:	dc800317 	ldw	r18,12(sp)
 400bd94:	dc400217 	ldw	r17,8(sp)
 400bd98:	dc000117 	ldw	r16,4(sp)
 400bd9c:	dec00b04 	addi	sp,sp,44
 400bda0:	f800283a 	ret
 400bda4:	00800304 	movi	r2,12
 400bda8:	90800015 	stw	r2,0(r18)
 400bdac:	0005883a 	mov	r2,zero
 400bdb0:	003ff006 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400bdb4:	01002004 	movi	r4,128
 400bdb8:	02001004 	movi	r8,64
 400bdbc:	01c00fc4 	movi	r7,63
 400bdc0:	003f6106 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400bdc4:	4009883a 	mov	r4,r8
 400bdc8:	003f7506 	br	400bba0 <__alt_mem_epcs_flash_controller_0+0xfb00aba0>
 400bdcc:	81000317 	ldw	r4,12(r16)
 400bdd0:	003fde06 	br	400bd4c <__alt_mem_epcs_flash_controller_0+0xfb00ad4c>
 400bdd4:	81c5883a 	add	r2,r16,r7
 400bdd8:	11400117 	ldw	r5,4(r2)
 400bddc:	9009883a 	mov	r4,r18
 400bde0:	29400054 	ori	r5,r5,1
 400bde4:	11400115 	stw	r5,4(r2)
 400bde8:	4019eec0 	call	4019eec <__malloc_unlock>
 400bdec:	80800204 	addi	r2,r16,8
 400bdf0:	003fe006 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400bdf4:	9c000217 	ldw	r16,8(r19)
 400bdf8:	00bfff04 	movi	r2,-4
 400bdfc:	85800117 	ldw	r22,4(r16)
 400be00:	b0ac703a 	and	r22,r22,r2
 400be04:	b4400336 	bltu	r22,r17,400be14 <_malloc_r+0x344>
 400be08:	b445c83a 	sub	r2,r22,r17
 400be0c:	00c003c4 	movi	r3,15
 400be10:	18805d16 	blt	r3,r2,400bf88 <_malloc_r+0x4b8>
 400be14:	05c10234 	movhi	r23,1032
 400be18:	00810234 	movhi	r2,1032
 400be1c:	10be5804 	addi	r2,r2,-1696
 400be20:	bdfe4504 	addi	r23,r23,-1772
 400be24:	15400017 	ldw	r21,0(r2)
 400be28:	b8c00017 	ldw	r3,0(r23)
 400be2c:	00bfffc4 	movi	r2,-1
 400be30:	858d883a 	add	r6,r16,r22
 400be34:	8d6b883a 	add	r21,r17,r21
 400be38:	1880ea26 	beq	r3,r2,400c1e4 <_malloc_r+0x714>
 400be3c:	ad4403c4 	addi	r21,r21,4111
 400be40:	00bc0004 	movi	r2,-4096
 400be44:	a8aa703a 	and	r21,r21,r2
 400be48:	a80b883a 	mov	r5,r21
 400be4c:	9009883a 	mov	r4,r18
 400be50:	d9800015 	stw	r6,0(sp)
 400be54:	400c6ac0 	call	400c6ac <_sbrk_r>
 400be58:	1029883a 	mov	r20,r2
 400be5c:	00bfffc4 	movi	r2,-1
 400be60:	d9800017 	ldw	r6,0(sp)
 400be64:	a080e826 	beq	r20,r2,400c208 <_malloc_r+0x738>
 400be68:	a180a636 	bltu	r20,r6,400c104 <_malloc_r+0x634>
 400be6c:	07010234 	movhi	fp,1032
 400be70:	e73e6404 	addi	fp,fp,-1648
 400be74:	e0800017 	ldw	r2,0(fp)
 400be78:	a887883a 	add	r3,r21,r2
 400be7c:	e0c00015 	stw	r3,0(fp)
 400be80:	3500e626 	beq	r6,r20,400c21c <_malloc_r+0x74c>
 400be84:	b9000017 	ldw	r4,0(r23)
 400be88:	00bfffc4 	movi	r2,-1
 400be8c:	2080ee26 	beq	r4,r2,400c248 <_malloc_r+0x778>
 400be90:	a185c83a 	sub	r2,r20,r6
 400be94:	10c5883a 	add	r2,r2,r3
 400be98:	e0800015 	stw	r2,0(fp)
 400be9c:	a0c001cc 	andi	r3,r20,7
 400bea0:	1800bc26 	beq	r3,zero,400c194 <_malloc_r+0x6c4>
 400bea4:	a0e9c83a 	sub	r20,r20,r3
 400bea8:	00840204 	movi	r2,4104
 400beac:	a5000204 	addi	r20,r20,8
 400beb0:	10c7c83a 	sub	r3,r2,r3
 400beb4:	a545883a 	add	r2,r20,r21
 400beb8:	1083ffcc 	andi	r2,r2,4095
 400bebc:	18abc83a 	sub	r21,r3,r2
 400bec0:	a80b883a 	mov	r5,r21
 400bec4:	9009883a 	mov	r4,r18
 400bec8:	400c6ac0 	call	400c6ac <_sbrk_r>
 400becc:	00ffffc4 	movi	r3,-1
 400bed0:	10c0e126 	beq	r2,r3,400c258 <_malloc_r+0x788>
 400bed4:	1505c83a 	sub	r2,r2,r20
 400bed8:	1545883a 	add	r2,r2,r21
 400bedc:	10800054 	ori	r2,r2,1
 400bee0:	e0c00017 	ldw	r3,0(fp)
 400bee4:	9d000215 	stw	r20,8(r19)
 400bee8:	a0800115 	stw	r2,4(r20)
 400beec:	a8c7883a 	add	r3,r21,r3
 400bef0:	e0c00015 	stw	r3,0(fp)
 400bef4:	84c00e26 	beq	r16,r19,400bf30 <_malloc_r+0x460>
 400bef8:	018003c4 	movi	r6,15
 400befc:	3580a72e 	bgeu	r6,r22,400c19c <_malloc_r+0x6cc>
 400bf00:	81400117 	ldw	r5,4(r16)
 400bf04:	013ffe04 	movi	r4,-8
 400bf08:	b0bffd04 	addi	r2,r22,-12
 400bf0c:	1104703a 	and	r2,r2,r4
 400bf10:	2900004c 	andi	r4,r5,1
 400bf14:	2088b03a 	or	r4,r4,r2
 400bf18:	81000115 	stw	r4,4(r16)
 400bf1c:	01400144 	movi	r5,5
 400bf20:	8089883a 	add	r4,r16,r2
 400bf24:	21400115 	stw	r5,4(r4)
 400bf28:	21400215 	stw	r5,8(r4)
 400bf2c:	3080cd36 	bltu	r6,r2,400c264 <_malloc_r+0x794>
 400bf30:	00810234 	movhi	r2,1032
 400bf34:	10be5704 	addi	r2,r2,-1700
 400bf38:	11000017 	ldw	r4,0(r2)
 400bf3c:	20c0012e 	bgeu	r4,r3,400bf44 <_malloc_r+0x474>
 400bf40:	10c00015 	stw	r3,0(r2)
 400bf44:	00810234 	movhi	r2,1032
 400bf48:	10be5604 	addi	r2,r2,-1704
 400bf4c:	11000017 	ldw	r4,0(r2)
 400bf50:	9c000217 	ldw	r16,8(r19)
 400bf54:	20c0012e 	bgeu	r4,r3,400bf5c <_malloc_r+0x48c>
 400bf58:	10c00015 	stw	r3,0(r2)
 400bf5c:	80c00117 	ldw	r3,4(r16)
 400bf60:	00bfff04 	movi	r2,-4
 400bf64:	1886703a 	and	r3,r3,r2
 400bf68:	1c45c83a 	sub	r2,r3,r17
 400bf6c:	1c400236 	bltu	r3,r17,400bf78 <_malloc_r+0x4a8>
 400bf70:	00c003c4 	movi	r3,15
 400bf74:	18800416 	blt	r3,r2,400bf88 <_malloc_r+0x4b8>
 400bf78:	9009883a 	mov	r4,r18
 400bf7c:	4019eec0 	call	4019eec <__malloc_unlock>
 400bf80:	0005883a 	mov	r2,zero
 400bf84:	003f7b06 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400bf88:	88c00054 	ori	r3,r17,1
 400bf8c:	80c00115 	stw	r3,4(r16)
 400bf90:	8463883a 	add	r17,r16,r17
 400bf94:	10800054 	ori	r2,r2,1
 400bf98:	9c400215 	stw	r17,8(r19)
 400bf9c:	88800115 	stw	r2,4(r17)
 400bfa0:	9009883a 	mov	r4,r18
 400bfa4:	4019eec0 	call	4019eec <__malloc_unlock>
 400bfa8:	80800204 	addi	r2,r16,8
 400bfac:	003f7106 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400bfb0:	00c00504 	movi	r3,20
 400bfb4:	18804a2e 	bgeu	r3,r2,400c0e0 <_malloc_r+0x610>
 400bfb8:	00c01504 	movi	r3,84
 400bfbc:	18806e36 	bltu	r3,r2,400c178 <_malloc_r+0x6a8>
 400bfc0:	8804d33a 	srli	r2,r17,12
 400bfc4:	12001bc4 	addi	r8,r2,111
 400bfc8:	11c01b84 	addi	r7,r2,110
 400bfcc:	4209883a 	add	r4,r8,r8
 400bfd0:	003edd06 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400bfd4:	3804d27a 	srli	r2,r7,9
 400bfd8:	00c00104 	movi	r3,4
 400bfdc:	1880442e 	bgeu	r3,r2,400c0f0 <_malloc_r+0x620>
 400bfe0:	00c00504 	movi	r3,20
 400bfe4:	18808136 	bltu	r3,r2,400c1ec <_malloc_r+0x71c>
 400bfe8:	11401704 	addi	r5,r2,92
 400bfec:	10c016c4 	addi	r3,r2,91
 400bff0:	294b883a 	add	r5,r5,r5
 400bff4:	294b883a 	add	r5,r5,r5
 400bff8:	294b883a 	add	r5,r5,r5
 400bffc:	994b883a 	add	r5,r19,r5
 400c000:	28800017 	ldw	r2,0(r5)
 400c004:	01810234 	movhi	r6,1032
 400c008:	297ffe04 	addi	r5,r5,-8
 400c00c:	31b86b04 	addi	r6,r6,-7764
 400c010:	28806526 	beq	r5,r2,400c1a8 <_malloc_r+0x6d8>
 400c014:	01bfff04 	movi	r6,-4
 400c018:	10c00117 	ldw	r3,4(r2)
 400c01c:	1986703a 	and	r3,r3,r6
 400c020:	38c0022e 	bgeu	r7,r3,400c02c <_malloc_r+0x55c>
 400c024:	10800217 	ldw	r2,8(r2)
 400c028:	28bffb1e 	bne	r5,r2,400c018 <__alt_mem_epcs_flash_controller_0+0xfb00b018>
 400c02c:	11400317 	ldw	r5,12(r2)
 400c030:	98c00117 	ldw	r3,4(r19)
 400c034:	81400315 	stw	r5,12(r16)
 400c038:	80800215 	stw	r2,8(r16)
 400c03c:	2c000215 	stw	r16,8(r5)
 400c040:	14000315 	stw	r16,12(r2)
 400c044:	003ef806 	br	400bc28 <__alt_mem_epcs_flash_controller_0+0xfb00ac28>
 400c048:	88c00054 	ori	r3,r17,1
 400c04c:	80c00115 	stw	r3,4(r16)
 400c050:	8463883a 	add	r17,r16,r17
 400c054:	34400515 	stw	r17,20(r6)
 400c058:	34400415 	stw	r17,16(r6)
 400c05c:	10c00054 	ori	r3,r2,1
 400c060:	8a000315 	stw	r8,12(r17)
 400c064:	8a000215 	stw	r8,8(r17)
 400c068:	88c00115 	stw	r3,4(r17)
 400c06c:	88a3883a 	add	r17,r17,r2
 400c070:	88800015 	stw	r2,0(r17)
 400c074:	9009883a 	mov	r4,r18
 400c078:	4019eec0 	call	4019eec <__malloc_unlock>
 400c07c:	80800204 	addi	r2,r16,8
 400c080:	003f3c06 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400c084:	30c00117 	ldw	r3,4(r6)
 400c088:	003ee706 	br	400bc28 <__alt_mem_epcs_flash_controller_0+0xfb00ac28>
 400c08c:	5ac00044 	addi	r11,r11,1
 400c090:	588000cc 	andi	r2,r11,3
 400c094:	31800204 	addi	r6,r6,8
 400c098:	103efd1e 	bne	r2,zero,400bc90 <__alt_mem_epcs_flash_controller_0+0xfb00ac90>
 400c09c:	00002406 	br	400c130 <_malloc_r+0x660>
 400c0a0:	14000317 	ldw	r16,12(r2)
 400c0a4:	143f251e 	bne	r2,r16,400bd3c <__alt_mem_epcs_flash_controller_0+0xfb00ad3c>
 400c0a8:	21000084 	addi	r4,r4,2
 400c0ac:	003ebc06 	br	400bba0 <__alt_mem_epcs_flash_controller_0+0xfb00aba0>
 400c0b0:	8085883a 	add	r2,r16,r2
 400c0b4:	10c00117 	ldw	r3,4(r2)
 400c0b8:	81000317 	ldw	r4,12(r16)
 400c0bc:	81400217 	ldw	r5,8(r16)
 400c0c0:	18c00054 	ori	r3,r3,1
 400c0c4:	10c00115 	stw	r3,4(r2)
 400c0c8:	29000315 	stw	r4,12(r5)
 400c0cc:	21400215 	stw	r5,8(r4)
 400c0d0:	9009883a 	mov	r4,r18
 400c0d4:	4019eec0 	call	4019eec <__malloc_unlock>
 400c0d8:	80800204 	addi	r2,r16,8
 400c0dc:	003f2506 	br	400bd74 <__alt_mem_epcs_flash_controller_0+0xfb00ad74>
 400c0e0:	12001704 	addi	r8,r2,92
 400c0e4:	11c016c4 	addi	r7,r2,91
 400c0e8:	4209883a 	add	r4,r8,r8
 400c0ec:	003e9606 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400c0f0:	3804d1ba 	srli	r2,r7,6
 400c0f4:	11400e44 	addi	r5,r2,57
 400c0f8:	10c00e04 	addi	r3,r2,56
 400c0fc:	294b883a 	add	r5,r5,r5
 400c100:	003fbc06 	br	400bff4 <__alt_mem_epcs_flash_controller_0+0xfb00aff4>
 400c104:	84ff5926 	beq	r16,r19,400be6c <__alt_mem_epcs_flash_controller_0+0xfb00ae6c>
 400c108:	00810234 	movhi	r2,1032
 400c10c:	10b86b04 	addi	r2,r2,-7764
 400c110:	14000217 	ldw	r16,8(r2)
 400c114:	00bfff04 	movi	r2,-4
 400c118:	80c00117 	ldw	r3,4(r16)
 400c11c:	1886703a 	and	r3,r3,r2
 400c120:	003f9106 	br	400bf68 <__alt_mem_epcs_flash_controller_0+0xfb00af68>
 400c124:	60800217 	ldw	r2,8(r12)
 400c128:	213fffc4 	addi	r4,r4,-1
 400c12c:	1300651e 	bne	r2,r12,400c2c4 <_malloc_r+0x7f4>
 400c130:	208000cc 	andi	r2,r4,3
 400c134:	633ffe04 	addi	r12,r12,-8
 400c138:	103ffa1e 	bne	r2,zero,400c124 <__alt_mem_epcs_flash_controller_0+0xfb00b124>
 400c13c:	98800117 	ldw	r2,4(r19)
 400c140:	0146303a 	nor	r3,zero,r5
 400c144:	1884703a 	and	r2,r3,r2
 400c148:	98800115 	stw	r2,4(r19)
 400c14c:	294b883a 	add	r5,r5,r5
 400c150:	117f2836 	bltu	r2,r5,400bdf4 <__alt_mem_epcs_flash_controller_0+0xfb00adf4>
 400c154:	283f2726 	beq	r5,zero,400bdf4 <__alt_mem_epcs_flash_controller_0+0xfb00adf4>
 400c158:	2886703a 	and	r3,r5,r2
 400c15c:	5809883a 	mov	r4,r11
 400c160:	183ec31e 	bne	r3,zero,400bc70 <__alt_mem_epcs_flash_controller_0+0xfb00ac70>
 400c164:	294b883a 	add	r5,r5,r5
 400c168:	2886703a 	and	r3,r5,r2
 400c16c:	21000104 	addi	r4,r4,4
 400c170:	183ffc26 	beq	r3,zero,400c164 <__alt_mem_epcs_flash_controller_0+0xfb00b164>
 400c174:	003ebe06 	br	400bc70 <__alt_mem_epcs_flash_controller_0+0xfb00ac70>
 400c178:	00c05504 	movi	r3,340
 400c17c:	18801236 	bltu	r3,r2,400c1c8 <_malloc_r+0x6f8>
 400c180:	8804d3fa 	srli	r2,r17,15
 400c184:	12001e04 	addi	r8,r2,120
 400c188:	11c01dc4 	addi	r7,r2,119
 400c18c:	4209883a 	add	r4,r8,r8
 400c190:	003e6d06 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400c194:	00c40004 	movi	r3,4096
 400c198:	003f4606 	br	400beb4 <__alt_mem_epcs_flash_controller_0+0xfb00aeb4>
 400c19c:	00800044 	movi	r2,1
 400c1a0:	a0800115 	stw	r2,4(r20)
 400c1a4:	003f7406 	br	400bf78 <__alt_mem_epcs_flash_controller_0+0xfb00af78>
 400c1a8:	1805d0ba 	srai	r2,r3,2
 400c1ac:	01c00044 	movi	r7,1
 400c1b0:	30c00117 	ldw	r3,4(r6)
 400c1b4:	388e983a 	sll	r7,r7,r2
 400c1b8:	2805883a 	mov	r2,r5
 400c1bc:	38c6b03a 	or	r3,r7,r3
 400c1c0:	30c00115 	stw	r3,4(r6)
 400c1c4:	003f9b06 	br	400c034 <__alt_mem_epcs_flash_controller_0+0xfb00b034>
 400c1c8:	00c15504 	movi	r3,1364
 400c1cc:	18801a36 	bltu	r3,r2,400c238 <_malloc_r+0x768>
 400c1d0:	8804d4ba 	srli	r2,r17,18
 400c1d4:	12001f44 	addi	r8,r2,125
 400c1d8:	11c01f04 	addi	r7,r2,124
 400c1dc:	4209883a 	add	r4,r8,r8
 400c1e0:	003e5906 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400c1e4:	ad400404 	addi	r21,r21,16
 400c1e8:	003f1706 	br	400be48 <__alt_mem_epcs_flash_controller_0+0xfb00ae48>
 400c1ec:	00c01504 	movi	r3,84
 400c1f0:	18802336 	bltu	r3,r2,400c280 <_malloc_r+0x7b0>
 400c1f4:	3804d33a 	srli	r2,r7,12
 400c1f8:	11401bc4 	addi	r5,r2,111
 400c1fc:	10c01b84 	addi	r3,r2,110
 400c200:	294b883a 	add	r5,r5,r5
 400c204:	003f7b06 	br	400bff4 <__alt_mem_epcs_flash_controller_0+0xfb00aff4>
 400c208:	9c000217 	ldw	r16,8(r19)
 400c20c:	00bfff04 	movi	r2,-4
 400c210:	80c00117 	ldw	r3,4(r16)
 400c214:	1886703a 	and	r3,r3,r2
 400c218:	003f5306 	br	400bf68 <__alt_mem_epcs_flash_controller_0+0xfb00af68>
 400c21c:	3083ffcc 	andi	r2,r6,4095
 400c220:	103f181e 	bne	r2,zero,400be84 <__alt_mem_epcs_flash_controller_0+0xfb00ae84>
 400c224:	99000217 	ldw	r4,8(r19)
 400c228:	b545883a 	add	r2,r22,r21
 400c22c:	10800054 	ori	r2,r2,1
 400c230:	20800115 	stw	r2,4(r4)
 400c234:	003f3e06 	br	400bf30 <__alt_mem_epcs_flash_controller_0+0xfb00af30>
 400c238:	01003f84 	movi	r4,254
 400c23c:	02001fc4 	movi	r8,127
 400c240:	01c01f84 	movi	r7,126
 400c244:	003e4006 	br	400bb48 <__alt_mem_epcs_flash_controller_0+0xfb00ab48>
 400c248:	00810234 	movhi	r2,1032
 400c24c:	10be4504 	addi	r2,r2,-1772
 400c250:	15000015 	stw	r20,0(r2)
 400c254:	003f1106 	br	400be9c <__alt_mem_epcs_flash_controller_0+0xfb00ae9c>
 400c258:	00800044 	movi	r2,1
 400c25c:	002b883a 	mov	r21,zero
 400c260:	003f1f06 	br	400bee0 <__alt_mem_epcs_flash_controller_0+0xfb00aee0>
 400c264:	81400204 	addi	r5,r16,8
 400c268:	9009883a 	mov	r4,r18
 400c26c:	40130000 	call	4013000 <_free_r>
 400c270:	00810234 	movhi	r2,1032
 400c274:	10be6404 	addi	r2,r2,-1648
 400c278:	10c00017 	ldw	r3,0(r2)
 400c27c:	003f2c06 	br	400bf30 <__alt_mem_epcs_flash_controller_0+0xfb00af30>
 400c280:	00c05504 	movi	r3,340
 400c284:	18800536 	bltu	r3,r2,400c29c <_malloc_r+0x7cc>
 400c288:	3804d3fa 	srli	r2,r7,15
 400c28c:	11401e04 	addi	r5,r2,120
 400c290:	10c01dc4 	addi	r3,r2,119
 400c294:	294b883a 	add	r5,r5,r5
 400c298:	003f5606 	br	400bff4 <__alt_mem_epcs_flash_controller_0+0xfb00aff4>
 400c29c:	00c15504 	movi	r3,1364
 400c2a0:	18800536 	bltu	r3,r2,400c2b8 <_malloc_r+0x7e8>
 400c2a4:	3804d4ba 	srli	r2,r7,18
 400c2a8:	11401f44 	addi	r5,r2,125
 400c2ac:	10c01f04 	addi	r3,r2,124
 400c2b0:	294b883a 	add	r5,r5,r5
 400c2b4:	003f4f06 	br	400bff4 <__alt_mem_epcs_flash_controller_0+0xfb00aff4>
 400c2b8:	01403f84 	movi	r5,254
 400c2bc:	00c01f84 	movi	r3,126
 400c2c0:	003f4c06 	br	400bff4 <__alt_mem_epcs_flash_controller_0+0xfb00aff4>
 400c2c4:	98800117 	ldw	r2,4(r19)
 400c2c8:	003fa006 	br	400c14c <__alt_mem_epcs_flash_controller_0+0xfb00b14c>
 400c2cc:	8808d0fa 	srli	r4,r17,3
 400c2d0:	20800044 	addi	r2,r4,1
 400c2d4:	1085883a 	add	r2,r2,r2
 400c2d8:	003e9006 	br	400bd1c <__alt_mem_epcs_flash_controller_0+0xfb00ad1c>

0400c2dc <memcpy>:
 400c2dc:	defffd04 	addi	sp,sp,-12
 400c2e0:	dfc00215 	stw	ra,8(sp)
 400c2e4:	dc400115 	stw	r17,4(sp)
 400c2e8:	dc000015 	stw	r16,0(sp)
 400c2ec:	00c003c4 	movi	r3,15
 400c2f0:	2005883a 	mov	r2,r4
 400c2f4:	1980452e 	bgeu	r3,r6,400c40c <memcpy+0x130>
 400c2f8:	2906b03a 	or	r3,r5,r4
 400c2fc:	18c000cc 	andi	r3,r3,3
 400c300:	1800441e 	bne	r3,zero,400c414 <memcpy+0x138>
 400c304:	347ffc04 	addi	r17,r6,-16
 400c308:	8822d13a 	srli	r17,r17,4
 400c30c:	28c00104 	addi	r3,r5,4
 400c310:	23400104 	addi	r13,r4,4
 400c314:	8820913a 	slli	r16,r17,4
 400c318:	2b000204 	addi	r12,r5,8
 400c31c:	22c00204 	addi	r11,r4,8
 400c320:	84000504 	addi	r16,r16,20
 400c324:	2a800304 	addi	r10,r5,12
 400c328:	22400304 	addi	r9,r4,12
 400c32c:	2c21883a 	add	r16,r5,r16
 400c330:	2811883a 	mov	r8,r5
 400c334:	200f883a 	mov	r7,r4
 400c338:	41000017 	ldw	r4,0(r8)
 400c33c:	1fc00017 	ldw	ra,0(r3)
 400c340:	63c00017 	ldw	r15,0(r12)
 400c344:	39000015 	stw	r4,0(r7)
 400c348:	53800017 	ldw	r14,0(r10)
 400c34c:	6fc00015 	stw	ra,0(r13)
 400c350:	5bc00015 	stw	r15,0(r11)
 400c354:	4b800015 	stw	r14,0(r9)
 400c358:	18c00404 	addi	r3,r3,16
 400c35c:	39c00404 	addi	r7,r7,16
 400c360:	42000404 	addi	r8,r8,16
 400c364:	6b400404 	addi	r13,r13,16
 400c368:	63000404 	addi	r12,r12,16
 400c36c:	5ac00404 	addi	r11,r11,16
 400c370:	52800404 	addi	r10,r10,16
 400c374:	4a400404 	addi	r9,r9,16
 400c378:	1c3fef1e 	bne	r3,r16,400c338 <__alt_mem_epcs_flash_controller_0+0xfb00b338>
 400c37c:	89c00044 	addi	r7,r17,1
 400c380:	380e913a 	slli	r7,r7,4
 400c384:	310003cc 	andi	r4,r6,15
 400c388:	02c000c4 	movi	r11,3
 400c38c:	11c7883a 	add	r3,r2,r7
 400c390:	29cb883a 	add	r5,r5,r7
 400c394:	5900212e 	bgeu	r11,r4,400c41c <memcpy+0x140>
 400c398:	1813883a 	mov	r9,r3
 400c39c:	2811883a 	mov	r8,r5
 400c3a0:	200f883a 	mov	r7,r4
 400c3a4:	42800017 	ldw	r10,0(r8)
 400c3a8:	4a400104 	addi	r9,r9,4
 400c3ac:	39ffff04 	addi	r7,r7,-4
 400c3b0:	4abfff15 	stw	r10,-4(r9)
 400c3b4:	42000104 	addi	r8,r8,4
 400c3b8:	59fffa36 	bltu	r11,r7,400c3a4 <__alt_mem_epcs_flash_controller_0+0xfb00b3a4>
 400c3bc:	213fff04 	addi	r4,r4,-4
 400c3c0:	2008d0ba 	srli	r4,r4,2
 400c3c4:	318000cc 	andi	r6,r6,3
 400c3c8:	21000044 	addi	r4,r4,1
 400c3cc:	2109883a 	add	r4,r4,r4
 400c3d0:	2109883a 	add	r4,r4,r4
 400c3d4:	1907883a 	add	r3,r3,r4
 400c3d8:	290b883a 	add	r5,r5,r4
 400c3dc:	30000626 	beq	r6,zero,400c3f8 <memcpy+0x11c>
 400c3e0:	198d883a 	add	r6,r3,r6
 400c3e4:	29c00003 	ldbu	r7,0(r5)
 400c3e8:	18c00044 	addi	r3,r3,1
 400c3ec:	29400044 	addi	r5,r5,1
 400c3f0:	19ffffc5 	stb	r7,-1(r3)
 400c3f4:	19bffb1e 	bne	r3,r6,400c3e4 <__alt_mem_epcs_flash_controller_0+0xfb00b3e4>
 400c3f8:	dfc00217 	ldw	ra,8(sp)
 400c3fc:	dc400117 	ldw	r17,4(sp)
 400c400:	dc000017 	ldw	r16,0(sp)
 400c404:	dec00304 	addi	sp,sp,12
 400c408:	f800283a 	ret
 400c40c:	2007883a 	mov	r3,r4
 400c410:	003ff206 	br	400c3dc <__alt_mem_epcs_flash_controller_0+0xfb00b3dc>
 400c414:	2007883a 	mov	r3,r4
 400c418:	003ff106 	br	400c3e0 <__alt_mem_epcs_flash_controller_0+0xfb00b3e0>
 400c41c:	200d883a 	mov	r6,r4
 400c420:	003fee06 	br	400c3dc <__alt_mem_epcs_flash_controller_0+0xfb00b3dc>

0400c424 <memset>:
 400c424:	20c000cc 	andi	r3,r4,3
 400c428:	2005883a 	mov	r2,r4
 400c42c:	18004426 	beq	r3,zero,400c540 <memset+0x11c>
 400c430:	31ffffc4 	addi	r7,r6,-1
 400c434:	30004026 	beq	r6,zero,400c538 <memset+0x114>
 400c438:	2813883a 	mov	r9,r5
 400c43c:	200d883a 	mov	r6,r4
 400c440:	2007883a 	mov	r3,r4
 400c444:	00000406 	br	400c458 <memset+0x34>
 400c448:	3a3fffc4 	addi	r8,r7,-1
 400c44c:	31800044 	addi	r6,r6,1
 400c450:	38003926 	beq	r7,zero,400c538 <memset+0x114>
 400c454:	400f883a 	mov	r7,r8
 400c458:	18c00044 	addi	r3,r3,1
 400c45c:	32400005 	stb	r9,0(r6)
 400c460:	1a0000cc 	andi	r8,r3,3
 400c464:	403ff81e 	bne	r8,zero,400c448 <__alt_mem_epcs_flash_controller_0+0xfb00b448>
 400c468:	010000c4 	movi	r4,3
 400c46c:	21c02d2e 	bgeu	r4,r7,400c524 <memset+0x100>
 400c470:	29003fcc 	andi	r4,r5,255
 400c474:	200c923a 	slli	r6,r4,8
 400c478:	3108b03a 	or	r4,r6,r4
 400c47c:	200c943a 	slli	r6,r4,16
 400c480:	218cb03a 	or	r6,r4,r6
 400c484:	010003c4 	movi	r4,15
 400c488:	21c0182e 	bgeu	r4,r7,400c4ec <memset+0xc8>
 400c48c:	3b3ffc04 	addi	r12,r7,-16
 400c490:	6018d13a 	srli	r12,r12,4
 400c494:	1a000104 	addi	r8,r3,4
 400c498:	1ac00204 	addi	r11,r3,8
 400c49c:	6008913a 	slli	r4,r12,4
 400c4a0:	1a800304 	addi	r10,r3,12
 400c4a4:	1813883a 	mov	r9,r3
 400c4a8:	21000504 	addi	r4,r4,20
 400c4ac:	1909883a 	add	r4,r3,r4
 400c4b0:	49800015 	stw	r6,0(r9)
 400c4b4:	41800015 	stw	r6,0(r8)
 400c4b8:	59800015 	stw	r6,0(r11)
 400c4bc:	51800015 	stw	r6,0(r10)
 400c4c0:	42000404 	addi	r8,r8,16
 400c4c4:	4a400404 	addi	r9,r9,16
 400c4c8:	5ac00404 	addi	r11,r11,16
 400c4cc:	52800404 	addi	r10,r10,16
 400c4d0:	413ff71e 	bne	r8,r4,400c4b0 <__alt_mem_epcs_flash_controller_0+0xfb00b4b0>
 400c4d4:	63000044 	addi	r12,r12,1
 400c4d8:	6018913a 	slli	r12,r12,4
 400c4dc:	39c003cc 	andi	r7,r7,15
 400c4e0:	010000c4 	movi	r4,3
 400c4e4:	1b07883a 	add	r3,r3,r12
 400c4e8:	21c00e2e 	bgeu	r4,r7,400c524 <memset+0x100>
 400c4ec:	1813883a 	mov	r9,r3
 400c4f0:	3811883a 	mov	r8,r7
 400c4f4:	010000c4 	movi	r4,3
 400c4f8:	49800015 	stw	r6,0(r9)
 400c4fc:	423fff04 	addi	r8,r8,-4
 400c500:	4a400104 	addi	r9,r9,4
 400c504:	223ffc36 	bltu	r4,r8,400c4f8 <__alt_mem_epcs_flash_controller_0+0xfb00b4f8>
 400c508:	393fff04 	addi	r4,r7,-4
 400c50c:	2008d0ba 	srli	r4,r4,2
 400c510:	39c000cc 	andi	r7,r7,3
 400c514:	21000044 	addi	r4,r4,1
 400c518:	2109883a 	add	r4,r4,r4
 400c51c:	2109883a 	add	r4,r4,r4
 400c520:	1907883a 	add	r3,r3,r4
 400c524:	38000526 	beq	r7,zero,400c53c <memset+0x118>
 400c528:	19cf883a 	add	r7,r3,r7
 400c52c:	19400005 	stb	r5,0(r3)
 400c530:	18c00044 	addi	r3,r3,1
 400c534:	38fffd1e 	bne	r7,r3,400c52c <__alt_mem_epcs_flash_controller_0+0xfb00b52c>
 400c538:	f800283a 	ret
 400c53c:	f800283a 	ret
 400c540:	2007883a 	mov	r3,r4
 400c544:	300f883a 	mov	r7,r6
 400c548:	003fc706 	br	400c468 <__alt_mem_epcs_flash_controller_0+0xfb00b468>

0400c54c <_printf_r>:
 400c54c:	defffd04 	addi	sp,sp,-12
 400c550:	2805883a 	mov	r2,r5
 400c554:	dfc00015 	stw	ra,0(sp)
 400c558:	d9800115 	stw	r6,4(sp)
 400c55c:	d9c00215 	stw	r7,8(sp)
 400c560:	21400217 	ldw	r5,8(r4)
 400c564:	d9c00104 	addi	r7,sp,4
 400c568:	100d883a 	mov	r6,r2
 400c56c:	400eac40 	call	400eac4 <___vfprintf_internal_r>
 400c570:	dfc00017 	ldw	ra,0(sp)
 400c574:	dec00304 	addi	sp,sp,12
 400c578:	f800283a 	ret

0400c57c <printf>:
 400c57c:	defffc04 	addi	sp,sp,-16
 400c580:	dfc00015 	stw	ra,0(sp)
 400c584:	d9400115 	stw	r5,4(sp)
 400c588:	d9800215 	stw	r6,8(sp)
 400c58c:	d9c00315 	stw	r7,12(sp)
 400c590:	00810234 	movhi	r2,1032
 400c594:	10be4404 	addi	r2,r2,-1776
 400c598:	10800017 	ldw	r2,0(r2)
 400c59c:	200b883a 	mov	r5,r4
 400c5a0:	d9800104 	addi	r6,sp,4
 400c5a4:	11000217 	ldw	r4,8(r2)
 400c5a8:	4010cbc0 	call	4010cbc <__vfprintf_internal>
 400c5ac:	dfc00017 	ldw	ra,0(sp)
 400c5b0:	dec00404 	addi	sp,sp,16
 400c5b4:	f800283a 	ret

0400c5b8 <_putchar_r>:
 400c5b8:	21800217 	ldw	r6,8(r4)
 400c5bc:	4014e281 	jmpi	4014e28 <_putc_r>

0400c5c0 <putchar>:
 400c5c0:	00810234 	movhi	r2,1032
 400c5c4:	10be4404 	addi	r2,r2,-1776
 400c5c8:	200b883a 	mov	r5,r4
 400c5cc:	11000017 	ldw	r4,0(r2)
 400c5d0:	21800217 	ldw	r6,8(r4)
 400c5d4:	4014e281 	jmpi	4014e28 <_putc_r>

0400c5d8 <_puts_r>:
 400c5d8:	defff604 	addi	sp,sp,-40
 400c5dc:	dc000715 	stw	r16,28(sp)
 400c5e0:	2021883a 	mov	r16,r4
 400c5e4:	2809883a 	mov	r4,r5
 400c5e8:	dc400815 	stw	r17,32(sp)
 400c5ec:	dfc00915 	stw	ra,36(sp)
 400c5f0:	2823883a 	mov	r17,r5
 400c5f4:	400c8540 	call	400c854 <strlen>
 400c5f8:	10c00044 	addi	r3,r2,1
 400c5fc:	d8800115 	stw	r2,4(sp)
 400c600:	00810234 	movhi	r2,1032
 400c604:	10afde04 	addi	r2,r2,-16520
 400c608:	d8800215 	stw	r2,8(sp)
 400c60c:	00800044 	movi	r2,1
 400c610:	d8800315 	stw	r2,12(sp)
 400c614:	00800084 	movi	r2,2
 400c618:	dc400015 	stw	r17,0(sp)
 400c61c:	d8c00615 	stw	r3,24(sp)
 400c620:	dec00415 	stw	sp,16(sp)
 400c624:	d8800515 	stw	r2,20(sp)
 400c628:	80000226 	beq	r16,zero,400c634 <_puts_r+0x5c>
 400c62c:	80800e17 	ldw	r2,56(r16)
 400c630:	10001426 	beq	r2,zero,400c684 <_puts_r+0xac>
 400c634:	81400217 	ldw	r5,8(r16)
 400c638:	2880030b 	ldhu	r2,12(r5)
 400c63c:	10c8000c 	andi	r3,r2,8192
 400c640:	1800061e 	bne	r3,zero,400c65c <_puts_r+0x84>
 400c644:	29001917 	ldw	r4,100(r5)
 400c648:	00f7ffc4 	movi	r3,-8193
 400c64c:	10880014 	ori	r2,r2,8192
 400c650:	20c6703a 	and	r3,r4,r3
 400c654:	2880030d 	sth	r2,12(r5)
 400c658:	28c01915 	stw	r3,100(r5)
 400c65c:	d9800404 	addi	r6,sp,16
 400c660:	8009883a 	mov	r4,r16
 400c664:	40133100 	call	4013310 <__sfvwrite_r>
 400c668:	1000091e 	bne	r2,zero,400c690 <_puts_r+0xb8>
 400c66c:	00800284 	movi	r2,10
 400c670:	dfc00917 	ldw	ra,36(sp)
 400c674:	dc400817 	ldw	r17,32(sp)
 400c678:	dc000717 	ldw	r16,28(sp)
 400c67c:	dec00a04 	addi	sp,sp,40
 400c680:	f800283a 	ret
 400c684:	8009883a 	mov	r4,r16
 400c688:	4012e8c0 	call	4012e8c <__sinit>
 400c68c:	003fe906 	br	400c634 <__alt_mem_epcs_flash_controller_0+0xfb00b634>
 400c690:	00bfffc4 	movi	r2,-1
 400c694:	003ff606 	br	400c670 <__alt_mem_epcs_flash_controller_0+0xfb00b670>

0400c698 <puts>:
 400c698:	00810234 	movhi	r2,1032
 400c69c:	10be4404 	addi	r2,r2,-1776
 400c6a0:	200b883a 	mov	r5,r4
 400c6a4:	11000017 	ldw	r4,0(r2)
 400c6a8:	400c5d81 	jmpi	400c5d8 <_puts_r>

0400c6ac <_sbrk_r>:
 400c6ac:	defffd04 	addi	sp,sp,-12
 400c6b0:	dc000015 	stw	r16,0(sp)
 400c6b4:	04010234 	movhi	r16,1032
 400c6b8:	dc400115 	stw	r17,4(sp)
 400c6bc:	843e5904 	addi	r16,r16,-1692
 400c6c0:	2023883a 	mov	r17,r4
 400c6c4:	2809883a 	mov	r4,r5
 400c6c8:	dfc00215 	stw	ra,8(sp)
 400c6cc:	80000015 	stw	zero,0(r16)
 400c6d0:	401a0ac0 	call	401a0ac <sbrk>
 400c6d4:	00ffffc4 	movi	r3,-1
 400c6d8:	10c00526 	beq	r2,r3,400c6f0 <_sbrk_r+0x44>
 400c6dc:	dfc00217 	ldw	ra,8(sp)
 400c6e0:	dc400117 	ldw	r17,4(sp)
 400c6e4:	dc000017 	ldw	r16,0(sp)
 400c6e8:	dec00304 	addi	sp,sp,12
 400c6ec:	f800283a 	ret
 400c6f0:	80c00017 	ldw	r3,0(r16)
 400c6f4:	183ff926 	beq	r3,zero,400c6dc <__alt_mem_epcs_flash_controller_0+0xfb00b6dc>
 400c6f8:	88c00015 	stw	r3,0(r17)
 400c6fc:	003ff706 	br	400c6dc <__alt_mem_epcs_flash_controller_0+0xfb00b6dc>

0400c700 <_sprintf_r>:
 400c700:	deffe404 	addi	sp,sp,-112
 400c704:	2807883a 	mov	r3,r5
 400c708:	dfc01a15 	stw	ra,104(sp)
 400c70c:	d9c01b15 	stw	r7,108(sp)
 400c710:	00a00034 	movhi	r2,32768
 400c714:	10bfffc4 	addi	r2,r2,-1
 400c718:	02008204 	movi	r8,520
 400c71c:	d8800215 	stw	r2,8(sp)
 400c720:	d8800515 	stw	r2,20(sp)
 400c724:	d9c01b04 	addi	r7,sp,108
 400c728:	d80b883a 	mov	r5,sp
 400c72c:	00bfffc4 	movi	r2,-1
 400c730:	d8c00015 	stw	r3,0(sp)
 400c734:	d8c00415 	stw	r3,16(sp)
 400c738:	da00030d 	sth	r8,12(sp)
 400c73c:	d880038d 	sth	r2,14(sp)
 400c740:	400c8ec0 	call	400c8ec <___svfprintf_internal_r>
 400c744:	d8c00017 	ldw	r3,0(sp)
 400c748:	18000005 	stb	zero,0(r3)
 400c74c:	dfc01a17 	ldw	ra,104(sp)
 400c750:	dec01c04 	addi	sp,sp,112
 400c754:	f800283a 	ret

0400c758 <sprintf>:
 400c758:	deffe304 	addi	sp,sp,-116
 400c75c:	2007883a 	mov	r3,r4
 400c760:	dfc01a15 	stw	ra,104(sp)
 400c764:	d9801b15 	stw	r6,108(sp)
 400c768:	d9c01c15 	stw	r7,112(sp)
 400c76c:	01010234 	movhi	r4,1032
 400c770:	213e4404 	addi	r4,r4,-1776
 400c774:	21000017 	ldw	r4,0(r4)
 400c778:	00a00034 	movhi	r2,32768
 400c77c:	10bfffc4 	addi	r2,r2,-1
 400c780:	280d883a 	mov	r6,r5
 400c784:	02008204 	movi	r8,520
 400c788:	d8800215 	stw	r2,8(sp)
 400c78c:	d8800515 	stw	r2,20(sp)
 400c790:	d9c01b04 	addi	r7,sp,108
 400c794:	d80b883a 	mov	r5,sp
 400c798:	00bfffc4 	movi	r2,-1
 400c79c:	d8c00015 	stw	r3,0(sp)
 400c7a0:	d8c00415 	stw	r3,16(sp)
 400c7a4:	da00030d 	sth	r8,12(sp)
 400c7a8:	d880038d 	sth	r2,14(sp)
 400c7ac:	400c8ec0 	call	400c8ec <___svfprintf_internal_r>
 400c7b0:	d8c00017 	ldw	r3,0(sp)
 400c7b4:	18000005 	stb	zero,0(r3)
 400c7b8:	dfc01a17 	ldw	ra,104(sp)
 400c7bc:	dec01d04 	addi	sp,sp,116
 400c7c0:	f800283a 	ret

0400c7c4 <strcpy>:
 400c7c4:	2906b03a 	or	r3,r5,r4
 400c7c8:	18c000cc 	andi	r3,r3,3
 400c7cc:	2005883a 	mov	r2,r4
 400c7d0:	1800161e 	bne	r3,zero,400c82c <strcpy+0x68>
 400c7d4:	29c00017 	ldw	r7,0(r5)
 400c7d8:	02ffbff4 	movhi	r11,65279
 400c7dc:	5affbfc4 	addi	r11,r11,-257
 400c7e0:	02a02074 	movhi	r10,32897
 400c7e4:	01c6303a 	nor	r3,zero,r7
 400c7e8:	3ac9883a 	add	r4,r7,r11
 400c7ec:	52a02004 	addi	r10,r10,-32640
 400c7f0:	20c6703a 	and	r3,r4,r3
 400c7f4:	1a86703a 	and	r3,r3,r10
 400c7f8:	18000c1e 	bne	r3,zero,400c82c <strcpy+0x68>
 400c7fc:	1011883a 	mov	r8,r2
 400c800:	41c00015 	stw	r7,0(r8)
 400c804:	29400104 	addi	r5,r5,4
 400c808:	29c00017 	ldw	r7,0(r5)
 400c80c:	41800104 	addi	r6,r8,4
 400c810:	3011883a 	mov	r8,r6
 400c814:	3ad3883a 	add	r9,r7,r11
 400c818:	01c6303a 	nor	r3,zero,r7
 400c81c:	48c6703a 	and	r3,r9,r3
 400c820:	1a86703a 	and	r3,r3,r10
 400c824:	183ff626 	beq	r3,zero,400c800 <__alt_mem_epcs_flash_controller_0+0xfb00b800>
 400c828:	00000106 	br	400c830 <strcpy+0x6c>
 400c82c:	100d883a 	mov	r6,r2
 400c830:	28c00003 	ldbu	r3,0(r5)
 400c834:	31800044 	addi	r6,r6,1
 400c838:	29400044 	addi	r5,r5,1
 400c83c:	30ffffc5 	stb	r3,-1(r6)
 400c840:	18c03fcc 	andi	r3,r3,255
 400c844:	18c0201c 	xori	r3,r3,128
 400c848:	18ffe004 	addi	r3,r3,-128
 400c84c:	183ff81e 	bne	r3,zero,400c830 <__alt_mem_epcs_flash_controller_0+0xfb00b830>
 400c850:	f800283a 	ret

0400c854 <strlen>:
 400c854:	208000cc 	andi	r2,r4,3
 400c858:	10002026 	beq	r2,zero,400c8dc <strlen+0x88>
 400c85c:	20800007 	ldb	r2,0(r4)
 400c860:	10002026 	beq	r2,zero,400c8e4 <strlen+0x90>
 400c864:	2005883a 	mov	r2,r4
 400c868:	00000206 	br	400c874 <strlen+0x20>
 400c86c:	10c00007 	ldb	r3,0(r2)
 400c870:	18001826 	beq	r3,zero,400c8d4 <strlen+0x80>
 400c874:	10800044 	addi	r2,r2,1
 400c878:	10c000cc 	andi	r3,r2,3
 400c87c:	183ffb1e 	bne	r3,zero,400c86c <__alt_mem_epcs_flash_controller_0+0xfb00b86c>
 400c880:	10c00017 	ldw	r3,0(r2)
 400c884:	01ffbff4 	movhi	r7,65279
 400c888:	39ffbfc4 	addi	r7,r7,-257
 400c88c:	00ca303a 	nor	r5,zero,r3
 400c890:	01a02074 	movhi	r6,32897
 400c894:	19c7883a 	add	r3,r3,r7
 400c898:	31a02004 	addi	r6,r6,-32640
 400c89c:	1946703a 	and	r3,r3,r5
 400c8a0:	1986703a 	and	r3,r3,r6
 400c8a4:	1800091e 	bne	r3,zero,400c8cc <strlen+0x78>
 400c8a8:	10800104 	addi	r2,r2,4
 400c8ac:	10c00017 	ldw	r3,0(r2)
 400c8b0:	19cb883a 	add	r5,r3,r7
 400c8b4:	00c6303a 	nor	r3,zero,r3
 400c8b8:	28c6703a 	and	r3,r5,r3
 400c8bc:	1986703a 	and	r3,r3,r6
 400c8c0:	183ff926 	beq	r3,zero,400c8a8 <__alt_mem_epcs_flash_controller_0+0xfb00b8a8>
 400c8c4:	00000106 	br	400c8cc <strlen+0x78>
 400c8c8:	10800044 	addi	r2,r2,1
 400c8cc:	10c00007 	ldb	r3,0(r2)
 400c8d0:	183ffd1e 	bne	r3,zero,400c8c8 <__alt_mem_epcs_flash_controller_0+0xfb00b8c8>
 400c8d4:	1105c83a 	sub	r2,r2,r4
 400c8d8:	f800283a 	ret
 400c8dc:	2005883a 	mov	r2,r4
 400c8e0:	003fe706 	br	400c880 <__alt_mem_epcs_flash_controller_0+0xfb00b880>
 400c8e4:	0005883a 	mov	r2,zero
 400c8e8:	f800283a 	ret

0400c8ec <___svfprintf_internal_r>:
 400c8ec:	deffb704 	addi	sp,sp,-292
 400c8f0:	dfc04815 	stw	ra,288(sp)
 400c8f4:	ddc04615 	stw	r23,280(sp)
 400c8f8:	d9402c15 	stw	r5,176(sp)
 400c8fc:	d9003915 	stw	r4,228(sp)
 400c900:	302f883a 	mov	r23,r6
 400c904:	d9c02d15 	stw	r7,180(sp)
 400c908:	df004715 	stw	fp,284(sp)
 400c90c:	dd804515 	stw	r22,276(sp)
 400c910:	dd404415 	stw	r21,272(sp)
 400c914:	dd004315 	stw	r20,268(sp)
 400c918:	dcc04215 	stw	r19,264(sp)
 400c91c:	dc804115 	stw	r18,260(sp)
 400c920:	dc404015 	stw	r17,256(sp)
 400c924:	dc003f15 	stw	r16,252(sp)
 400c928:	4013a000 	call	4013a00 <_localeconv_r>
 400c92c:	10800017 	ldw	r2,0(r2)
 400c930:	1009883a 	mov	r4,r2
 400c934:	d8803415 	stw	r2,208(sp)
 400c938:	400c8540 	call	400c854 <strlen>
 400c93c:	d8c02c17 	ldw	r3,176(sp)
 400c940:	d8803815 	stw	r2,224(sp)
 400c944:	1880030b 	ldhu	r2,12(r3)
 400c948:	1080200c 	andi	r2,r2,128
 400c94c:	10000226 	beq	r2,zero,400c958 <___svfprintf_internal_r+0x6c>
 400c950:	18800417 	ldw	r2,16(r3)
 400c954:	10067f26 	beq	r2,zero,400e354 <___svfprintf_internal_r+0x1a68>
 400c958:	dcc03917 	ldw	r19,228(sp)
 400c95c:	d8c00404 	addi	r3,sp,16
 400c960:	05410234 	movhi	r21,1032
 400c964:	d9001e04 	addi	r4,sp,120
 400c968:	ad6fef84 	addi	r21,r21,-16450
 400c96c:	d8c01e15 	stw	r3,120(sp)
 400c970:	d8002015 	stw	zero,128(sp)
 400c974:	d8001f15 	stw	zero,124(sp)
 400c978:	d8003315 	stw	zero,204(sp)
 400c97c:	d8003615 	stw	zero,216(sp)
 400c980:	d8003715 	stw	zero,220(sp)
 400c984:	1811883a 	mov	r8,r3
 400c988:	d8003a15 	stw	zero,232(sp)
 400c98c:	d8003b15 	stw	zero,236(sp)
 400c990:	d8002f15 	stw	zero,188(sp)
 400c994:	d9002815 	stw	r4,160(sp)
 400c998:	b8800007 	ldb	r2,0(r23)
 400c99c:	10026726 	beq	r2,zero,400d33c <___svfprintf_internal_r+0xa50>
 400c9a0:	00c00944 	movi	r3,37
 400c9a4:	b821883a 	mov	r16,r23
 400c9a8:	10c0021e 	bne	r2,r3,400c9b4 <___svfprintf_internal_r+0xc8>
 400c9ac:	00001406 	br	400ca00 <___svfprintf_internal_r+0x114>
 400c9b0:	10c00326 	beq	r2,r3,400c9c0 <___svfprintf_internal_r+0xd4>
 400c9b4:	84000044 	addi	r16,r16,1
 400c9b8:	80800007 	ldb	r2,0(r16)
 400c9bc:	103ffc1e 	bne	r2,zero,400c9b0 <__alt_mem_epcs_flash_controller_0+0xfb00b9b0>
 400c9c0:	85e3c83a 	sub	r17,r16,r23
 400c9c4:	88000e26 	beq	r17,zero,400ca00 <___svfprintf_internal_r+0x114>
 400c9c8:	d8c02017 	ldw	r3,128(sp)
 400c9cc:	d8801f17 	ldw	r2,124(sp)
 400c9d0:	45c00015 	stw	r23,0(r8)
 400c9d4:	1c47883a 	add	r3,r3,r17
 400c9d8:	10800044 	addi	r2,r2,1
 400c9dc:	d8c02015 	stw	r3,128(sp)
 400c9e0:	44400115 	stw	r17,4(r8)
 400c9e4:	d8801f15 	stw	r2,124(sp)
 400c9e8:	00c001c4 	movi	r3,7
 400c9ec:	18809716 	blt	r3,r2,400cc4c <___svfprintf_internal_r+0x360>
 400c9f0:	42000204 	addi	r8,r8,8
 400c9f4:	d9402f17 	ldw	r5,188(sp)
 400c9f8:	2c4b883a 	add	r5,r5,r17
 400c9fc:	d9402f15 	stw	r5,188(sp)
 400ca00:	80800007 	ldb	r2,0(r16)
 400ca04:	10009826 	beq	r2,zero,400cc68 <___svfprintf_internal_r+0x37c>
 400ca08:	84400047 	ldb	r17,1(r16)
 400ca0c:	00bfffc4 	movi	r2,-1
 400ca10:	85c00044 	addi	r23,r16,1
 400ca14:	d8002785 	stb	zero,158(sp)
 400ca18:	0007883a 	mov	r3,zero
 400ca1c:	000f883a 	mov	r7,zero
 400ca20:	d8802915 	stw	r2,164(sp)
 400ca24:	d8003115 	stw	zero,196(sp)
 400ca28:	0025883a 	mov	r18,zero
 400ca2c:	01401604 	movi	r5,88
 400ca30:	01800244 	movi	r6,9
 400ca34:	02800a84 	movi	r10,42
 400ca38:	02401b04 	movi	r9,108
 400ca3c:	bdc00044 	addi	r23,r23,1
 400ca40:	88bff804 	addi	r2,r17,-32
 400ca44:	2882f036 	bltu	r5,r2,400d608 <___svfprintf_internal_r+0xd1c>
 400ca48:	100490ba 	slli	r2,r2,2
 400ca4c:	01010074 	movhi	r4,1025
 400ca50:	21329804 	addi	r4,r4,-13728
 400ca54:	1105883a 	add	r2,r2,r4
 400ca58:	10800017 	ldw	r2,0(r2)
 400ca5c:	1000683a 	jmp	r2
 400ca60:	0400d570 	cmpltui	r16,zero,853
 400ca64:	0400d608 	cmpgei	r16,zero,856
 400ca68:	0400d608 	cmpgei	r16,zero,856
 400ca6c:	0400d564 	muli	r16,zero,853
 400ca70:	0400d608 	cmpgei	r16,zero,856
 400ca74:	0400d608 	cmpgei	r16,zero,856
 400ca78:	0400d608 	cmpgei	r16,zero,856
 400ca7c:	0400d608 	cmpgei	r16,zero,856
 400ca80:	0400d608 	cmpgei	r16,zero,856
 400ca84:	0400d608 	cmpgei	r16,zero,856
 400ca88:	0400ccc4 	movi	r16,819
 400ca8c:	0400d4a0 	cmpeqi	r16,zero,850
 400ca90:	0400d608 	cmpgei	r16,zero,856
 400ca94:	0400cbd4 	movui	r16,815
 400ca98:	0400ccec 	andhi	r16,zero,819
 400ca9c:	0400d608 	cmpgei	r16,zero,856
 400caa0:	0400cd60 	cmpeqi	r16,zero,821
 400caa4:	0400cd2c 	andhi	r16,zero,820
 400caa8:	0400cd2c 	andhi	r16,zero,820
 400caac:	0400cd2c 	andhi	r16,zero,820
 400cab0:	0400cd2c 	andhi	r16,zero,820
 400cab4:	0400cd2c 	andhi	r16,zero,820
 400cab8:	0400cd2c 	andhi	r16,zero,820
 400cabc:	0400cd2c 	andhi	r16,zero,820
 400cac0:	0400cd2c 	andhi	r16,zero,820
 400cac4:	0400cd2c 	andhi	r16,zero,820
 400cac8:	0400d608 	cmpgei	r16,zero,856
 400cacc:	0400d608 	cmpgei	r16,zero,856
 400cad0:	0400d608 	cmpgei	r16,zero,856
 400cad4:	0400d608 	cmpgei	r16,zero,856
 400cad8:	0400d608 	cmpgei	r16,zero,856
 400cadc:	0400d608 	cmpgei	r16,zero,856
 400cae0:	0400d608 	cmpgei	r16,zero,856
 400cae4:	0400d608 	cmpgei	r16,zero,856
 400cae8:	0400d608 	cmpgei	r16,zero,856
 400caec:	0400d608 	cmpgei	r16,zero,856
 400caf0:	0400ce18 	cmpnei	r16,zero,824
 400caf4:	0400cd6c 	andhi	r16,zero,821
 400caf8:	0400d608 	cmpgei	r16,zero,856
 400cafc:	0400cd6c 	andhi	r16,zero,821
 400cb00:	0400d608 	cmpgei	r16,zero,856
 400cb04:	0400d608 	cmpgei	r16,zero,856
 400cb08:	0400d608 	cmpgei	r16,zero,856
 400cb0c:	0400d608 	cmpgei	r16,zero,856
 400cb10:	0400ce0c 	andi	r16,zero,824
 400cb14:	0400d608 	cmpgei	r16,zero,856
 400cb18:	0400d608 	cmpgei	r16,zero,856
 400cb1c:	0400ced4 	movui	r16,827
 400cb20:	0400d608 	cmpgei	r16,zero,856
 400cb24:	0400d608 	cmpgei	r16,zero,856
 400cb28:	0400d608 	cmpgei	r16,zero,856
 400cb2c:	0400d608 	cmpgei	r16,zero,856
 400cb30:	0400d608 	cmpgei	r16,zero,856
 400cb34:	0400d344 	movi	r16,845
 400cb38:	0400d608 	cmpgei	r16,zero,856
 400cb3c:	0400d608 	cmpgei	r16,zero,856
 400cb40:	0400d3a4 	muli	r16,zero,846
 400cb44:	0400d608 	cmpgei	r16,zero,856
 400cb48:	0400d608 	cmpgei	r16,zero,856
 400cb4c:	0400d608 	cmpgei	r16,zero,856
 400cb50:	0400d608 	cmpgei	r16,zero,856
 400cb54:	0400d608 	cmpgei	r16,zero,856
 400cb58:	0400d608 	cmpgei	r16,zero,856
 400cb5c:	0400d608 	cmpgei	r16,zero,856
 400cb60:	0400d608 	cmpgei	r16,zero,856
 400cb64:	0400d608 	cmpgei	r16,zero,856
 400cb68:	0400d608 	cmpgei	r16,zero,856
 400cb6c:	0400d454 	movui	r16,849
 400cb70:	0400d590 	cmplti	r16,zero,854
 400cb74:	0400cd6c 	andhi	r16,zero,821
 400cb78:	0400cd6c 	andhi	r16,zero,821
 400cb7c:	0400cd6c 	andhi	r16,zero,821
 400cb80:	0400d5e4 	muli	r16,zero,855
 400cb84:	0400d590 	cmplti	r16,zero,854
 400cb88:	0400d608 	cmpgei	r16,zero,856
 400cb8c:	0400d608 	cmpgei	r16,zero,856
 400cb90:	0400d5a0 	cmpeqi	r16,zero,854
 400cb94:	0400d608 	cmpgei	r16,zero,856
 400cb98:	0400d5b0 	cmpltui	r16,zero,854
 400cb9c:	0400d490 	cmplti	r16,zero,850
 400cba0:	0400cbe0 	cmpeqi	r16,zero,815
 400cba4:	0400d4b0 	cmpltui	r16,zero,850
 400cba8:	0400d608 	cmpgei	r16,zero,856
 400cbac:	0400d4bc 	xorhi	r16,zero,850
 400cbb0:	0400d608 	cmpgei	r16,zero,856
 400cbb4:	0400d518 	cmpnei	r16,zero,852
 400cbb8:	0400d608 	cmpgei	r16,zero,856
 400cbbc:	0400d608 	cmpgei	r16,zero,856
 400cbc0:	0400d528 	cmpgeui	r16,zero,852
 400cbc4:	d9003117 	ldw	r4,196(sp)
 400cbc8:	d8802d15 	stw	r2,180(sp)
 400cbcc:	0109c83a 	sub	r4,zero,r4
 400cbd0:	d9003115 	stw	r4,196(sp)
 400cbd4:	94800114 	ori	r18,r18,4
 400cbd8:	bc400007 	ldb	r17,0(r23)
 400cbdc:	003f9706 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400cbe0:	00800c04 	movi	r2,48
 400cbe4:	d9002d17 	ldw	r4,180(sp)
 400cbe8:	d9402917 	ldw	r5,164(sp)
 400cbec:	d8802705 	stb	r2,156(sp)
 400cbf0:	00801e04 	movi	r2,120
 400cbf4:	d8802745 	stb	r2,157(sp)
 400cbf8:	d8002785 	stb	zero,158(sp)
 400cbfc:	20c00104 	addi	r3,r4,4
 400cc00:	25000017 	ldw	r20,0(r4)
 400cc04:	002d883a 	mov	r22,zero
 400cc08:	90800094 	ori	r2,r18,2
 400cc0c:	28028616 	blt	r5,zero,400d628 <___svfprintf_internal_r+0xd3c>
 400cc10:	00bfdfc4 	movi	r2,-129
 400cc14:	90a4703a 	and	r18,r18,r2
 400cc18:	d8c02d15 	stw	r3,180(sp)
 400cc1c:	94800094 	ori	r18,r18,2
 400cc20:	a002731e 	bne	r20,zero,400d5f0 <___svfprintf_internal_r+0xd04>
 400cc24:	00810234 	movhi	r2,1032
 400cc28:	10afe804 	addi	r2,r2,-16480
 400cc2c:	d8803a15 	stw	r2,232(sp)
 400cc30:	04401e04 	movi	r17,120
 400cc34:	d8c02917 	ldw	r3,164(sp)
 400cc38:	0039883a 	mov	fp,zero
 400cc3c:	1801d526 	beq	r3,zero,400d394 <___svfprintf_internal_r+0xaa8>
 400cc40:	0029883a 	mov	r20,zero
 400cc44:	002d883a 	mov	r22,zero
 400cc48:	0001f106 	br	400d410 <___svfprintf_internal_r+0xb24>
 400cc4c:	d9402c17 	ldw	r5,176(sp)
 400cc50:	d9801e04 	addi	r6,sp,120
 400cc54:	9809883a 	mov	r4,r19
 400cc58:	401570c0 	call	401570c <__ssprint_r>
 400cc5c:	1000081e 	bne	r2,zero,400cc80 <___svfprintf_internal_r+0x394>
 400cc60:	da000404 	addi	r8,sp,16
 400cc64:	003f6306 	br	400c9f4 <__alt_mem_epcs_flash_controller_0+0xfb00b9f4>
 400cc68:	d8802017 	ldw	r2,128(sp)
 400cc6c:	10000426 	beq	r2,zero,400cc80 <___svfprintf_internal_r+0x394>
 400cc70:	d9402c17 	ldw	r5,176(sp)
 400cc74:	d9003917 	ldw	r4,228(sp)
 400cc78:	d9801e04 	addi	r6,sp,120
 400cc7c:	401570c0 	call	401570c <__ssprint_r>
 400cc80:	d8802c17 	ldw	r2,176(sp)
 400cc84:	10c0030b 	ldhu	r3,12(r2)
 400cc88:	d8802f17 	ldw	r2,188(sp)
 400cc8c:	18c0100c 	andi	r3,r3,64
 400cc90:	1805f51e 	bne	r3,zero,400e468 <___svfprintf_internal_r+0x1b7c>
 400cc94:	dfc04817 	ldw	ra,288(sp)
 400cc98:	df004717 	ldw	fp,284(sp)
 400cc9c:	ddc04617 	ldw	r23,280(sp)
 400cca0:	dd804517 	ldw	r22,276(sp)
 400cca4:	dd404417 	ldw	r21,272(sp)
 400cca8:	dd004317 	ldw	r20,268(sp)
 400ccac:	dcc04217 	ldw	r19,264(sp)
 400ccb0:	dc804117 	ldw	r18,260(sp)
 400ccb4:	dc404017 	ldw	r17,256(sp)
 400ccb8:	dc003f17 	ldw	r16,252(sp)
 400ccbc:	dec04904 	addi	sp,sp,292
 400ccc0:	f800283a 	ret
 400ccc4:	d8802d17 	ldw	r2,180(sp)
 400ccc8:	d9002d17 	ldw	r4,180(sp)
 400cccc:	10800017 	ldw	r2,0(r2)
 400ccd0:	d8803115 	stw	r2,196(sp)
 400ccd4:	20800104 	addi	r2,r4,4
 400ccd8:	d9003117 	ldw	r4,196(sp)
 400ccdc:	203fb916 	blt	r4,zero,400cbc4 <__alt_mem_epcs_flash_controller_0+0xfb00bbc4>
 400cce0:	d8802d15 	stw	r2,180(sp)
 400cce4:	bc400007 	ldb	r17,0(r23)
 400cce8:	003f5406 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400ccec:	bc400007 	ldb	r17,0(r23)
 400ccf0:	bac00044 	addi	r11,r23,1
 400ccf4:	8a873926 	beq	r17,r10,400e9dc <___svfprintf_internal_r+0x20f0>
 400ccf8:	88bff404 	addi	r2,r17,-48
 400ccfc:	0009883a 	mov	r4,zero
 400cd00:	30868836 	bltu	r6,r2,400e724 <___svfprintf_internal_r+0x1e38>
 400cd04:	5c400007 	ldb	r17,0(r11)
 400cd08:	210002a4 	muli	r4,r4,10
 400cd0c:	5dc00044 	addi	r23,r11,1
 400cd10:	b817883a 	mov	r11,r23
 400cd14:	2089883a 	add	r4,r4,r2
 400cd18:	88bff404 	addi	r2,r17,-48
 400cd1c:	30bff92e 	bgeu	r6,r2,400cd04 <__alt_mem_epcs_flash_controller_0+0xfb00bd04>
 400cd20:	2005d716 	blt	r4,zero,400e480 <___svfprintf_internal_r+0x1b94>
 400cd24:	d9002915 	stw	r4,164(sp)
 400cd28:	003f4506 	br	400ca40 <__alt_mem_epcs_flash_controller_0+0xfb00ba40>
 400cd2c:	b809883a 	mov	r4,r23
 400cd30:	d8003115 	stw	zero,196(sp)
 400cd34:	88bff404 	addi	r2,r17,-48
 400cd38:	0017883a 	mov	r11,zero
 400cd3c:	24400007 	ldb	r17,0(r4)
 400cd40:	5ac002a4 	muli	r11,r11,10
 400cd44:	bdc00044 	addi	r23,r23,1
 400cd48:	b809883a 	mov	r4,r23
 400cd4c:	12d7883a 	add	r11,r2,r11
 400cd50:	88bff404 	addi	r2,r17,-48
 400cd54:	30bff92e 	bgeu	r6,r2,400cd3c <__alt_mem_epcs_flash_controller_0+0xfb00bd3c>
 400cd58:	dac03115 	stw	r11,196(sp)
 400cd5c:	003f3806 	br	400ca40 <__alt_mem_epcs_flash_controller_0+0xfb00ba40>
 400cd60:	94802014 	ori	r18,r18,128
 400cd64:	bc400007 	ldb	r17,0(r23)
 400cd68:	003f3406 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400cd6c:	18c03fcc 	andi	r3,r3,255
 400cd70:	1807471e 	bne	r3,zero,400ea90 <___svfprintf_internal_r+0x21a4>
 400cd74:	9080020c 	andi	r2,r18,8
 400cd78:	10047d26 	beq	r2,zero,400df70 <___svfprintf_internal_r+0x1684>
 400cd7c:	d8c02d17 	ldw	r3,180(sp)
 400cd80:	d9002d17 	ldw	r4,180(sp)
 400cd84:	d9402d17 	ldw	r5,180(sp)
 400cd88:	18c00017 	ldw	r3,0(r3)
 400cd8c:	21000117 	ldw	r4,4(r4)
 400cd90:	29400204 	addi	r5,r5,8
 400cd94:	d8c03615 	stw	r3,216(sp)
 400cd98:	d9003715 	stw	r4,220(sp)
 400cd9c:	d9402d15 	stw	r5,180(sp)
 400cda0:	d9003617 	ldw	r4,216(sp)
 400cda4:	d9403717 	ldw	r5,220(sp)
 400cda8:	da003e15 	stw	r8,248(sp)
 400cdac:	04000044 	movi	r16,1
 400cdb0:	400940c0 	call	400940c <__fpclassifyd>
 400cdb4:	da003e17 	ldw	r8,248(sp)
 400cdb8:	14044b1e 	bne	r2,r16,400dee8 <___svfprintf_internal_r+0x15fc>
 400cdbc:	d9003617 	ldw	r4,216(sp)
 400cdc0:	d9403717 	ldw	r5,220(sp)
 400cdc4:	000d883a 	mov	r6,zero
 400cdc8:	000f883a 	mov	r7,zero
 400cdcc:	400a7d00 	call	400a7d0 <__ledf2>
 400cdd0:	da003e17 	ldw	r8,248(sp)
 400cdd4:	1005f316 	blt	r2,zero,400e5a4 <___svfprintf_internal_r+0x1cb8>
 400cdd8:	df002783 	ldbu	fp,158(sp)
 400cddc:	008011c4 	movi	r2,71
 400cde0:	1445590e 	bge	r2,r17,400e348 <___svfprintf_internal_r+0x1a5c>
 400cde4:	04010234 	movhi	r16,1032
 400cde8:	842fe004 	addi	r16,r16,-16512
 400cdec:	00c000c4 	movi	r3,3
 400cdf0:	00bfdfc4 	movi	r2,-129
 400cdf4:	d8c02a15 	stw	r3,168(sp)
 400cdf8:	90a4703a 	and	r18,r18,r2
 400cdfc:	d8c02e15 	stw	r3,184(sp)
 400ce00:	d8002915 	stw	zero,164(sp)
 400ce04:	d8003215 	stw	zero,200(sp)
 400ce08:	00006606 	br	400cfa4 <___svfprintf_internal_r+0x6b8>
 400ce0c:	94800214 	ori	r18,r18,8
 400ce10:	bc400007 	ldb	r17,0(r23)
 400ce14:	003f0906 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400ce18:	18c03fcc 	andi	r3,r3,255
 400ce1c:	1807181e 	bne	r3,zero,400ea80 <___svfprintf_internal_r+0x2194>
 400ce20:	94800414 	ori	r18,r18,16
 400ce24:	9080080c 	andi	r2,r18,32
 400ce28:	10039626 	beq	r2,zero,400dc84 <___svfprintf_internal_r+0x1398>
 400ce2c:	d9402d17 	ldw	r5,180(sp)
 400ce30:	28800117 	ldw	r2,4(r5)
 400ce34:	2d000017 	ldw	r20,0(r5)
 400ce38:	29400204 	addi	r5,r5,8
 400ce3c:	d9402d15 	stw	r5,180(sp)
 400ce40:	102d883a 	mov	r22,r2
 400ce44:	10039816 	blt	r2,zero,400dca8 <___svfprintf_internal_r+0x13bc>
 400ce48:	d9402917 	ldw	r5,164(sp)
 400ce4c:	df002783 	ldbu	fp,158(sp)
 400ce50:	2803ab16 	blt	r5,zero,400dd00 <___svfprintf_internal_r+0x1414>
 400ce54:	00ffdfc4 	movi	r3,-129
 400ce58:	a584b03a 	or	r2,r20,r22
 400ce5c:	90e4703a 	and	r18,r18,r3
 400ce60:	10014a26 	beq	r2,zero,400d38c <___svfprintf_internal_r+0xaa0>
 400ce64:	b0034b26 	beq	r22,zero,400db94 <___svfprintf_internal_r+0x12a8>
 400ce68:	dc402a15 	stw	r17,168(sp)
 400ce6c:	dc001e04 	addi	r16,sp,120
 400ce70:	b023883a 	mov	r17,r22
 400ce74:	402d883a 	mov	r22,r8
 400ce78:	a009883a 	mov	r4,r20
 400ce7c:	880b883a 	mov	r5,r17
 400ce80:	01800284 	movi	r6,10
 400ce84:	000f883a 	mov	r7,zero
 400ce88:	401900c0 	call	401900c <__umoddi3>
 400ce8c:	10800c04 	addi	r2,r2,48
 400ce90:	843fffc4 	addi	r16,r16,-1
 400ce94:	a009883a 	mov	r4,r20
 400ce98:	880b883a 	mov	r5,r17
 400ce9c:	80800005 	stb	r2,0(r16)
 400cea0:	01800284 	movi	r6,10
 400cea4:	000f883a 	mov	r7,zero
 400cea8:	4018a940 	call	4018a94 <__udivdi3>
 400ceac:	1029883a 	mov	r20,r2
 400ceb0:	10c4b03a 	or	r2,r2,r3
 400ceb4:	1823883a 	mov	r17,r3
 400ceb8:	103fef1e 	bne	r2,zero,400ce78 <__alt_mem_epcs_flash_controller_0+0xfb00be78>
 400cebc:	d8c02817 	ldw	r3,160(sp)
 400cec0:	dc402a17 	ldw	r17,168(sp)
 400cec4:	b011883a 	mov	r8,r22
 400cec8:	1c07c83a 	sub	r3,r3,r16
 400cecc:	d8c02e15 	stw	r3,184(sp)
 400ced0:	00002e06 	br	400cf8c <___svfprintf_internal_r+0x6a0>
 400ced4:	18c03fcc 	andi	r3,r3,255
 400ced8:	1806e71e 	bne	r3,zero,400ea78 <___svfprintf_internal_r+0x218c>
 400cedc:	94800414 	ori	r18,r18,16
 400cee0:	9080080c 	andi	r2,r18,32
 400cee4:	1002d426 	beq	r2,zero,400da38 <___svfprintf_internal_r+0x114c>
 400cee8:	d9402d17 	ldw	r5,180(sp)
 400ceec:	d8c02917 	ldw	r3,164(sp)
 400cef0:	d8002785 	stb	zero,158(sp)
 400cef4:	28800204 	addi	r2,r5,8
 400cef8:	2d000017 	ldw	r20,0(r5)
 400cefc:	2d800117 	ldw	r22,4(r5)
 400cf00:	18041516 	blt	r3,zero,400df58 <___svfprintf_internal_r+0x166c>
 400cf04:	013fdfc4 	movi	r4,-129
 400cf08:	a586b03a 	or	r3,r20,r22
 400cf0c:	d8802d15 	stw	r2,180(sp)
 400cf10:	9124703a 	and	r18,r18,r4
 400cf14:	1802d51e 	bne	r3,zero,400da6c <___svfprintf_internal_r+0x1180>
 400cf18:	d9402917 	ldw	r5,164(sp)
 400cf1c:	0039883a 	mov	fp,zero
 400cf20:	2806be26 	beq	r5,zero,400ea1c <___svfprintf_internal_r+0x2130>
 400cf24:	0029883a 	mov	r20,zero
 400cf28:	002d883a 	mov	r22,zero
 400cf2c:	dc001e04 	addi	r16,sp,120
 400cf30:	a006d0fa 	srli	r3,r20,3
 400cf34:	b008977a 	slli	r4,r22,29
 400cf38:	b02cd0fa 	srli	r22,r22,3
 400cf3c:	a50001cc 	andi	r20,r20,7
 400cf40:	a0800c04 	addi	r2,r20,48
 400cf44:	843fffc4 	addi	r16,r16,-1
 400cf48:	20e8b03a 	or	r20,r4,r3
 400cf4c:	80800005 	stb	r2,0(r16)
 400cf50:	a586b03a 	or	r3,r20,r22
 400cf54:	183ff61e 	bne	r3,zero,400cf30 <__alt_mem_epcs_flash_controller_0+0xfb00bf30>
 400cf58:	90c0004c 	andi	r3,r18,1
 400cf5c:	18013926 	beq	r3,zero,400d444 <___svfprintf_internal_r+0xb58>
 400cf60:	10803fcc 	andi	r2,r2,255
 400cf64:	1080201c 	xori	r2,r2,128
 400cf68:	10bfe004 	addi	r2,r2,-128
 400cf6c:	00c00c04 	movi	r3,48
 400cf70:	10c13426 	beq	r2,r3,400d444 <___svfprintf_internal_r+0xb58>
 400cf74:	80ffffc5 	stb	r3,-1(r16)
 400cf78:	d8c02817 	ldw	r3,160(sp)
 400cf7c:	80bfffc4 	addi	r2,r16,-1
 400cf80:	1021883a 	mov	r16,r2
 400cf84:	1887c83a 	sub	r3,r3,r2
 400cf88:	d8c02e15 	stw	r3,184(sp)
 400cf8c:	d8802e17 	ldw	r2,184(sp)
 400cf90:	d9002917 	ldw	r4,164(sp)
 400cf94:	1100010e 	bge	r2,r4,400cf9c <___svfprintf_internal_r+0x6b0>
 400cf98:	2005883a 	mov	r2,r4
 400cf9c:	d8802a15 	stw	r2,168(sp)
 400cfa0:	d8003215 	stw	zero,200(sp)
 400cfa4:	e7003fcc 	andi	fp,fp,255
 400cfa8:	e700201c 	xori	fp,fp,128
 400cfac:	e73fe004 	addi	fp,fp,-128
 400cfb0:	e0000326 	beq	fp,zero,400cfc0 <___svfprintf_internal_r+0x6d4>
 400cfb4:	d8c02a17 	ldw	r3,168(sp)
 400cfb8:	18c00044 	addi	r3,r3,1
 400cfbc:	d8c02a15 	stw	r3,168(sp)
 400cfc0:	90c0008c 	andi	r3,r18,2
 400cfc4:	d8c02b15 	stw	r3,172(sp)
 400cfc8:	18000326 	beq	r3,zero,400cfd8 <___svfprintf_internal_r+0x6ec>
 400cfcc:	d8c02a17 	ldw	r3,168(sp)
 400cfd0:	18c00084 	addi	r3,r3,2
 400cfd4:	d8c02a15 	stw	r3,168(sp)
 400cfd8:	90c0210c 	andi	r3,r18,132
 400cfdc:	d8c03015 	stw	r3,192(sp)
 400cfe0:	1801a11e 	bne	r3,zero,400d668 <___svfprintf_internal_r+0xd7c>
 400cfe4:	d9003117 	ldw	r4,196(sp)
 400cfe8:	d8c02a17 	ldw	r3,168(sp)
 400cfec:	20e9c83a 	sub	r20,r4,r3
 400cff0:	05019d0e 	bge	zero,r20,400d668 <___svfprintf_internal_r+0xd7c>
 400cff4:	02400404 	movi	r9,16
 400cff8:	d8c02017 	ldw	r3,128(sp)
 400cffc:	d8801f17 	ldw	r2,124(sp)
 400d000:	4d051b0e 	bge	r9,r20,400e470 <___svfprintf_internal_r+0x1b84>
 400d004:	01410234 	movhi	r5,1032
 400d008:	296ff384 	addi	r5,r5,-16434
 400d00c:	dc403c15 	stw	r17,240(sp)
 400d010:	d9403515 	stw	r5,212(sp)
 400d014:	a023883a 	mov	r17,r20
 400d018:	482d883a 	mov	r22,r9
 400d01c:	9029883a 	mov	r20,r18
 400d020:	070001c4 	movi	fp,7
 400d024:	8025883a 	mov	r18,r16
 400d028:	dc002c17 	ldw	r16,176(sp)
 400d02c:	00000306 	br	400d03c <___svfprintf_internal_r+0x750>
 400d030:	8c7ffc04 	addi	r17,r17,-16
 400d034:	42000204 	addi	r8,r8,8
 400d038:	b440130e 	bge	r22,r17,400d088 <___svfprintf_internal_r+0x79c>
 400d03c:	01010234 	movhi	r4,1032
 400d040:	18c00404 	addi	r3,r3,16
 400d044:	10800044 	addi	r2,r2,1
 400d048:	212ff384 	addi	r4,r4,-16434
 400d04c:	41000015 	stw	r4,0(r8)
 400d050:	45800115 	stw	r22,4(r8)
 400d054:	d8c02015 	stw	r3,128(sp)
 400d058:	d8801f15 	stw	r2,124(sp)
 400d05c:	e0bff40e 	bge	fp,r2,400d030 <__alt_mem_epcs_flash_controller_0+0xfb00c030>
 400d060:	d9801e04 	addi	r6,sp,120
 400d064:	800b883a 	mov	r5,r16
 400d068:	9809883a 	mov	r4,r19
 400d06c:	401570c0 	call	401570c <__ssprint_r>
 400d070:	103f031e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d074:	8c7ffc04 	addi	r17,r17,-16
 400d078:	d8c02017 	ldw	r3,128(sp)
 400d07c:	d8801f17 	ldw	r2,124(sp)
 400d080:	da000404 	addi	r8,sp,16
 400d084:	b47fed16 	blt	r22,r17,400d03c <__alt_mem_epcs_flash_controller_0+0xfb00c03c>
 400d088:	9021883a 	mov	r16,r18
 400d08c:	a025883a 	mov	r18,r20
 400d090:	8829883a 	mov	r20,r17
 400d094:	dc403c17 	ldw	r17,240(sp)
 400d098:	d9403517 	ldw	r5,212(sp)
 400d09c:	a0c7883a 	add	r3,r20,r3
 400d0a0:	10800044 	addi	r2,r2,1
 400d0a4:	41400015 	stw	r5,0(r8)
 400d0a8:	45000115 	stw	r20,4(r8)
 400d0ac:	d8c02015 	stw	r3,128(sp)
 400d0b0:	d8801f15 	stw	r2,124(sp)
 400d0b4:	010001c4 	movi	r4,7
 400d0b8:	20829f16 	blt	r4,r2,400db38 <___svfprintf_internal_r+0x124c>
 400d0bc:	df002787 	ldb	fp,158(sp)
 400d0c0:	42000204 	addi	r8,r8,8
 400d0c4:	e0000c26 	beq	fp,zero,400d0f8 <___svfprintf_internal_r+0x80c>
 400d0c8:	d8801f17 	ldw	r2,124(sp)
 400d0cc:	d9002784 	addi	r4,sp,158
 400d0d0:	18c00044 	addi	r3,r3,1
 400d0d4:	10800044 	addi	r2,r2,1
 400d0d8:	41000015 	stw	r4,0(r8)
 400d0dc:	01000044 	movi	r4,1
 400d0e0:	41000115 	stw	r4,4(r8)
 400d0e4:	d8c02015 	stw	r3,128(sp)
 400d0e8:	d8801f15 	stw	r2,124(sp)
 400d0ec:	010001c4 	movi	r4,7
 400d0f0:	20823816 	blt	r4,r2,400d9d4 <___svfprintf_internal_r+0x10e8>
 400d0f4:	42000204 	addi	r8,r8,8
 400d0f8:	d8802b17 	ldw	r2,172(sp)
 400d0fc:	10000c26 	beq	r2,zero,400d130 <___svfprintf_internal_r+0x844>
 400d100:	d8801f17 	ldw	r2,124(sp)
 400d104:	d9002704 	addi	r4,sp,156
 400d108:	18c00084 	addi	r3,r3,2
 400d10c:	10800044 	addi	r2,r2,1
 400d110:	41000015 	stw	r4,0(r8)
 400d114:	01000084 	movi	r4,2
 400d118:	41000115 	stw	r4,4(r8)
 400d11c:	d8c02015 	stw	r3,128(sp)
 400d120:	d8801f15 	stw	r2,124(sp)
 400d124:	010001c4 	movi	r4,7
 400d128:	20823216 	blt	r4,r2,400d9f4 <___svfprintf_internal_r+0x1108>
 400d12c:	42000204 	addi	r8,r8,8
 400d130:	d9003017 	ldw	r4,192(sp)
 400d134:	00802004 	movi	r2,128
 400d138:	20819726 	beq	r4,r2,400d798 <___svfprintf_internal_r+0xeac>
 400d13c:	d9402917 	ldw	r5,164(sp)
 400d140:	d8802e17 	ldw	r2,184(sp)
 400d144:	28adc83a 	sub	r22,r5,r2
 400d148:	05802f0e 	bge	zero,r22,400d208 <___svfprintf_internal_r+0x91c>
 400d14c:	07000404 	movi	fp,16
 400d150:	d8801f17 	ldw	r2,124(sp)
 400d154:	e583c00e 	bge	fp,r22,400e058 <___svfprintf_internal_r+0x176c>
 400d158:	01410234 	movhi	r5,1032
 400d15c:	296fef84 	addi	r5,r5,-16450
 400d160:	dc402915 	stw	r17,164(sp)
 400d164:	d9402b15 	stw	r5,172(sp)
 400d168:	b023883a 	mov	r17,r22
 400d16c:	050001c4 	movi	r20,7
 400d170:	902d883a 	mov	r22,r18
 400d174:	8025883a 	mov	r18,r16
 400d178:	dc002c17 	ldw	r16,176(sp)
 400d17c:	00000306 	br	400d18c <___svfprintf_internal_r+0x8a0>
 400d180:	8c7ffc04 	addi	r17,r17,-16
 400d184:	42000204 	addi	r8,r8,8
 400d188:	e440110e 	bge	fp,r17,400d1d0 <___svfprintf_internal_r+0x8e4>
 400d18c:	18c00404 	addi	r3,r3,16
 400d190:	10800044 	addi	r2,r2,1
 400d194:	45400015 	stw	r21,0(r8)
 400d198:	47000115 	stw	fp,4(r8)
 400d19c:	d8c02015 	stw	r3,128(sp)
 400d1a0:	d8801f15 	stw	r2,124(sp)
 400d1a4:	a0bff60e 	bge	r20,r2,400d180 <__alt_mem_epcs_flash_controller_0+0xfb00c180>
 400d1a8:	d9801e04 	addi	r6,sp,120
 400d1ac:	800b883a 	mov	r5,r16
 400d1b0:	9809883a 	mov	r4,r19
 400d1b4:	401570c0 	call	401570c <__ssprint_r>
 400d1b8:	103eb11e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d1bc:	8c7ffc04 	addi	r17,r17,-16
 400d1c0:	d8c02017 	ldw	r3,128(sp)
 400d1c4:	d8801f17 	ldw	r2,124(sp)
 400d1c8:	da000404 	addi	r8,sp,16
 400d1cc:	e47fef16 	blt	fp,r17,400d18c <__alt_mem_epcs_flash_controller_0+0xfb00c18c>
 400d1d0:	9021883a 	mov	r16,r18
 400d1d4:	b025883a 	mov	r18,r22
 400d1d8:	882d883a 	mov	r22,r17
 400d1dc:	dc402917 	ldw	r17,164(sp)
 400d1e0:	d9002b17 	ldw	r4,172(sp)
 400d1e4:	1d87883a 	add	r3,r3,r22
 400d1e8:	10800044 	addi	r2,r2,1
 400d1ec:	41000015 	stw	r4,0(r8)
 400d1f0:	45800115 	stw	r22,4(r8)
 400d1f4:	d8c02015 	stw	r3,128(sp)
 400d1f8:	d8801f15 	stw	r2,124(sp)
 400d1fc:	010001c4 	movi	r4,7
 400d200:	2081ec16 	blt	r4,r2,400d9b4 <___svfprintf_internal_r+0x10c8>
 400d204:	42000204 	addi	r8,r8,8
 400d208:	9080400c 	andi	r2,r18,256
 400d20c:	1001181e 	bne	r2,zero,400d670 <___svfprintf_internal_r+0xd84>
 400d210:	d9402e17 	ldw	r5,184(sp)
 400d214:	d8801f17 	ldw	r2,124(sp)
 400d218:	44000015 	stw	r16,0(r8)
 400d21c:	1947883a 	add	r3,r3,r5
 400d220:	10800044 	addi	r2,r2,1
 400d224:	41400115 	stw	r5,4(r8)
 400d228:	d8c02015 	stw	r3,128(sp)
 400d22c:	d8801f15 	stw	r2,124(sp)
 400d230:	010001c4 	movi	r4,7
 400d234:	2081d116 	blt	r4,r2,400d97c <___svfprintf_internal_r+0x1090>
 400d238:	42000204 	addi	r8,r8,8
 400d23c:	9480010c 	andi	r18,r18,4
 400d240:	90003226 	beq	r18,zero,400d30c <___svfprintf_internal_r+0xa20>
 400d244:	d9403117 	ldw	r5,196(sp)
 400d248:	d8802a17 	ldw	r2,168(sp)
 400d24c:	28a1c83a 	sub	r16,r5,r2
 400d250:	04002e0e 	bge	zero,r16,400d30c <___svfprintf_internal_r+0xa20>
 400d254:	04400404 	movi	r17,16
 400d258:	d8801f17 	ldw	r2,124(sp)
 400d25c:	8c04b90e 	bge	r17,r16,400e544 <___svfprintf_internal_r+0x1c58>
 400d260:	01410234 	movhi	r5,1032
 400d264:	296ff384 	addi	r5,r5,-16434
 400d268:	d9403515 	stw	r5,212(sp)
 400d26c:	048001c4 	movi	r18,7
 400d270:	dd002c17 	ldw	r20,176(sp)
 400d274:	00000306 	br	400d284 <___svfprintf_internal_r+0x998>
 400d278:	843ffc04 	addi	r16,r16,-16
 400d27c:	42000204 	addi	r8,r8,8
 400d280:	8c00130e 	bge	r17,r16,400d2d0 <___svfprintf_internal_r+0x9e4>
 400d284:	01010234 	movhi	r4,1032
 400d288:	18c00404 	addi	r3,r3,16
 400d28c:	10800044 	addi	r2,r2,1
 400d290:	212ff384 	addi	r4,r4,-16434
 400d294:	41000015 	stw	r4,0(r8)
 400d298:	44400115 	stw	r17,4(r8)
 400d29c:	d8c02015 	stw	r3,128(sp)
 400d2a0:	d8801f15 	stw	r2,124(sp)
 400d2a4:	90bff40e 	bge	r18,r2,400d278 <__alt_mem_epcs_flash_controller_0+0xfb00c278>
 400d2a8:	d9801e04 	addi	r6,sp,120
 400d2ac:	a00b883a 	mov	r5,r20
 400d2b0:	9809883a 	mov	r4,r19
 400d2b4:	401570c0 	call	401570c <__ssprint_r>
 400d2b8:	103e711e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d2bc:	843ffc04 	addi	r16,r16,-16
 400d2c0:	d8c02017 	ldw	r3,128(sp)
 400d2c4:	d8801f17 	ldw	r2,124(sp)
 400d2c8:	da000404 	addi	r8,sp,16
 400d2cc:	8c3fed16 	blt	r17,r16,400d284 <__alt_mem_epcs_flash_controller_0+0xfb00c284>
 400d2d0:	d9403517 	ldw	r5,212(sp)
 400d2d4:	1c07883a 	add	r3,r3,r16
 400d2d8:	10800044 	addi	r2,r2,1
 400d2dc:	41400015 	stw	r5,0(r8)
 400d2e0:	44000115 	stw	r16,4(r8)
 400d2e4:	d8c02015 	stw	r3,128(sp)
 400d2e8:	d8801f15 	stw	r2,124(sp)
 400d2ec:	010001c4 	movi	r4,7
 400d2f0:	2080060e 	bge	r4,r2,400d30c <___svfprintf_internal_r+0xa20>
 400d2f4:	d9402c17 	ldw	r5,176(sp)
 400d2f8:	d9801e04 	addi	r6,sp,120
 400d2fc:	9809883a 	mov	r4,r19
 400d300:	401570c0 	call	401570c <__ssprint_r>
 400d304:	103e5e1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d308:	d8c02017 	ldw	r3,128(sp)
 400d30c:	d8803117 	ldw	r2,196(sp)
 400d310:	d9002a17 	ldw	r4,168(sp)
 400d314:	1100010e 	bge	r2,r4,400d31c <___svfprintf_internal_r+0xa30>
 400d318:	2005883a 	mov	r2,r4
 400d31c:	d9402f17 	ldw	r5,188(sp)
 400d320:	288b883a 	add	r5,r5,r2
 400d324:	d9402f15 	stw	r5,188(sp)
 400d328:	18019c1e 	bne	r3,zero,400d99c <___svfprintf_internal_r+0x10b0>
 400d32c:	b8800007 	ldb	r2,0(r23)
 400d330:	d8001f15 	stw	zero,124(sp)
 400d334:	da000404 	addi	r8,sp,16
 400d338:	103d991e 	bne	r2,zero,400c9a0 <__alt_mem_epcs_flash_controller_0+0xfb00b9a0>
 400d33c:	b821883a 	mov	r16,r23
 400d340:	003daf06 	br	400ca00 <__alt_mem_epcs_flash_controller_0+0xfb00ba00>
 400d344:	18c03fcc 	andi	r3,r3,255
 400d348:	1805c71e 	bne	r3,zero,400ea68 <___svfprintf_internal_r+0x217c>
 400d34c:	94800414 	ori	r18,r18,16
 400d350:	9080080c 	andi	r2,r18,32
 400d354:	10020126 	beq	r2,zero,400db5c <___svfprintf_internal_r+0x1270>
 400d358:	d8802d17 	ldw	r2,180(sp)
 400d35c:	d9002917 	ldw	r4,164(sp)
 400d360:	d8002785 	stb	zero,158(sp)
 400d364:	10c00204 	addi	r3,r2,8
 400d368:	15000017 	ldw	r20,0(r2)
 400d36c:	15800117 	ldw	r22,4(r2)
 400d370:	20038e16 	blt	r4,zero,400e1ac <___svfprintf_internal_r+0x18c0>
 400d374:	013fdfc4 	movi	r4,-129
 400d378:	a584b03a 	or	r2,r20,r22
 400d37c:	d8c02d15 	stw	r3,180(sp)
 400d380:	9124703a 	and	r18,r18,r4
 400d384:	0039883a 	mov	fp,zero
 400d388:	103eb61e 	bne	r2,zero,400ce64 <__alt_mem_epcs_flash_controller_0+0xfb00be64>
 400d38c:	d8802917 	ldw	r2,164(sp)
 400d390:	1002c81e 	bne	r2,zero,400deb4 <___svfprintf_internal_r+0x15c8>
 400d394:	d8002915 	stw	zero,164(sp)
 400d398:	d8002e15 	stw	zero,184(sp)
 400d39c:	dc001e04 	addi	r16,sp,120
 400d3a0:	003efa06 	br	400cf8c <__alt_mem_epcs_flash_controller_0+0xfb00bf8c>
 400d3a4:	18c03fcc 	andi	r3,r3,255
 400d3a8:	1805ad1e 	bne	r3,zero,400ea60 <___svfprintf_internal_r+0x2174>
 400d3ac:	01410234 	movhi	r5,1032
 400d3b0:	296fe304 	addi	r5,r5,-16500
 400d3b4:	d9403a15 	stw	r5,232(sp)
 400d3b8:	9080080c 	andi	r2,r18,32
 400d3bc:	10006126 	beq	r2,zero,400d544 <___svfprintf_internal_r+0xc58>
 400d3c0:	d8802d17 	ldw	r2,180(sp)
 400d3c4:	15000017 	ldw	r20,0(r2)
 400d3c8:	15800117 	ldw	r22,4(r2)
 400d3cc:	10800204 	addi	r2,r2,8
 400d3d0:	d8802d15 	stw	r2,180(sp)
 400d3d4:	9080004c 	andi	r2,r18,1
 400d3d8:	10018e26 	beq	r2,zero,400da14 <___svfprintf_internal_r+0x1128>
 400d3dc:	a584b03a 	or	r2,r20,r22
 400d3e0:	10030926 	beq	r2,zero,400e008 <___svfprintf_internal_r+0x171c>
 400d3e4:	d8c02917 	ldw	r3,164(sp)
 400d3e8:	00800c04 	movi	r2,48
 400d3ec:	d8802705 	stb	r2,156(sp)
 400d3f0:	dc402745 	stb	r17,157(sp)
 400d3f4:	d8002785 	stb	zero,158(sp)
 400d3f8:	90800094 	ori	r2,r18,2
 400d3fc:	18048716 	blt	r3,zero,400e61c <___svfprintf_internal_r+0x1d30>
 400d400:	00bfdfc4 	movi	r2,-129
 400d404:	90a4703a 	and	r18,r18,r2
 400d408:	94800094 	ori	r18,r18,2
 400d40c:	0039883a 	mov	fp,zero
 400d410:	d9003a17 	ldw	r4,232(sp)
 400d414:	dc001e04 	addi	r16,sp,120
 400d418:	a08003cc 	andi	r2,r20,15
 400d41c:	b006973a 	slli	r3,r22,28
 400d420:	2085883a 	add	r2,r4,r2
 400d424:	a028d13a 	srli	r20,r20,4
 400d428:	10800003 	ldbu	r2,0(r2)
 400d42c:	b02cd13a 	srli	r22,r22,4
 400d430:	843fffc4 	addi	r16,r16,-1
 400d434:	1d28b03a 	or	r20,r3,r20
 400d438:	80800005 	stb	r2,0(r16)
 400d43c:	a584b03a 	or	r2,r20,r22
 400d440:	103ff51e 	bne	r2,zero,400d418 <__alt_mem_epcs_flash_controller_0+0xfb00c418>
 400d444:	d8c02817 	ldw	r3,160(sp)
 400d448:	1c07c83a 	sub	r3,r3,r16
 400d44c:	d8c02e15 	stw	r3,184(sp)
 400d450:	003ece06 	br	400cf8c <__alt_mem_epcs_flash_controller_0+0xfb00bf8c>
 400d454:	d8c02d17 	ldw	r3,180(sp)
 400d458:	d9002d17 	ldw	r4,180(sp)
 400d45c:	d8002785 	stb	zero,158(sp)
 400d460:	18800017 	ldw	r2,0(r3)
 400d464:	21000104 	addi	r4,r4,4
 400d468:	00c00044 	movi	r3,1
 400d46c:	d8c02a15 	stw	r3,168(sp)
 400d470:	d8801405 	stb	r2,80(sp)
 400d474:	d9002d15 	stw	r4,180(sp)
 400d478:	d8c02e15 	stw	r3,184(sp)
 400d47c:	d8002915 	stw	zero,164(sp)
 400d480:	d8003215 	stw	zero,200(sp)
 400d484:	dc001404 	addi	r16,sp,80
 400d488:	0039883a 	mov	fp,zero
 400d48c:	003ecc06 	br	400cfc0 <__alt_mem_epcs_flash_controller_0+0xfb00bfc0>
 400d490:	18c03fcc 	andi	r3,r3,255
 400d494:	183e9226 	beq	r3,zero,400cee0 <__alt_mem_epcs_flash_controller_0+0xfb00bee0>
 400d498:	d9c02785 	stb	r7,158(sp)
 400d49c:	003e9006 	br	400cee0 <__alt_mem_epcs_flash_controller_0+0xfb00bee0>
 400d4a0:	00c00044 	movi	r3,1
 400d4a4:	01c00ac4 	movi	r7,43
 400d4a8:	bc400007 	ldb	r17,0(r23)
 400d4ac:	003d6306 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d4b0:	94800814 	ori	r18,r18,32
 400d4b4:	bc400007 	ldb	r17,0(r23)
 400d4b8:	003d6006 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d4bc:	d8c02d17 	ldw	r3,180(sp)
 400d4c0:	d8002785 	stb	zero,158(sp)
 400d4c4:	1c000017 	ldw	r16,0(r3)
 400d4c8:	1d000104 	addi	r20,r3,4
 400d4cc:	80040f26 	beq	r16,zero,400e50c <___svfprintf_internal_r+0x1c20>
 400d4d0:	d9002917 	ldw	r4,164(sp)
 400d4d4:	2003dc16 	blt	r4,zero,400e448 <___svfprintf_internal_r+0x1b5c>
 400d4d8:	200d883a 	mov	r6,r4
 400d4dc:	000b883a 	mov	r5,zero
 400d4e0:	8009883a 	mov	r4,r16
 400d4e4:	da003e15 	stw	r8,248(sp)
 400d4e8:	4013bec0 	call	4013bec <memchr>
 400d4ec:	da003e17 	ldw	r8,248(sp)
 400d4f0:	10045826 	beq	r2,zero,400e654 <___svfprintf_internal_r+0x1d68>
 400d4f4:	1405c83a 	sub	r2,r2,r16
 400d4f8:	d8802e15 	stw	r2,184(sp)
 400d4fc:	1003d816 	blt	r2,zero,400e460 <___svfprintf_internal_r+0x1b74>
 400d500:	df002783 	ldbu	fp,158(sp)
 400d504:	d8802a15 	stw	r2,168(sp)
 400d508:	dd002d15 	stw	r20,180(sp)
 400d50c:	d8002915 	stw	zero,164(sp)
 400d510:	d8003215 	stw	zero,200(sp)
 400d514:	003ea306 	br	400cfa4 <__alt_mem_epcs_flash_controller_0+0xfb00bfa4>
 400d518:	18c03fcc 	andi	r3,r3,255
 400d51c:	183f8c26 	beq	r3,zero,400d350 <__alt_mem_epcs_flash_controller_0+0xfb00c350>
 400d520:	d9c02785 	stb	r7,158(sp)
 400d524:	003f8a06 	br	400d350 <__alt_mem_epcs_flash_controller_0+0xfb00c350>
 400d528:	18c03fcc 	andi	r3,r3,255
 400d52c:	1805631e 	bne	r3,zero,400eabc <___svfprintf_internal_r+0x21d0>
 400d530:	01410234 	movhi	r5,1032
 400d534:	296fe804 	addi	r5,r5,-16480
 400d538:	d9403a15 	stw	r5,232(sp)
 400d53c:	9080080c 	andi	r2,r18,32
 400d540:	103f9f1e 	bne	r2,zero,400d3c0 <__alt_mem_epcs_flash_controller_0+0xfb00c3c0>
 400d544:	9080040c 	andi	r2,r18,16
 400d548:	10029c26 	beq	r2,zero,400dfbc <___svfprintf_internal_r+0x16d0>
 400d54c:	d8c02d17 	ldw	r3,180(sp)
 400d550:	002d883a 	mov	r22,zero
 400d554:	1d000017 	ldw	r20,0(r3)
 400d558:	18c00104 	addi	r3,r3,4
 400d55c:	d8c02d15 	stw	r3,180(sp)
 400d560:	003f9c06 	br	400d3d4 <__alt_mem_epcs_flash_controller_0+0xfb00c3d4>
 400d564:	94800054 	ori	r18,r18,1
 400d568:	bc400007 	ldb	r17,0(r23)
 400d56c:	003d3306 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d570:	38803fcc 	andi	r2,r7,255
 400d574:	1080201c 	xori	r2,r2,128
 400d578:	10bfe004 	addi	r2,r2,-128
 400d57c:	1002971e 	bne	r2,zero,400dfdc <___svfprintf_internal_r+0x16f0>
 400d580:	00c00044 	movi	r3,1
 400d584:	01c00804 	movi	r7,32
 400d588:	bc400007 	ldb	r17,0(r23)
 400d58c:	003d2b06 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d590:	18c03fcc 	andi	r3,r3,255
 400d594:	183e2326 	beq	r3,zero,400ce24 <__alt_mem_epcs_flash_controller_0+0xfb00be24>
 400d598:	d9c02785 	stb	r7,158(sp)
 400d59c:	003e2106 	br	400ce24 <__alt_mem_epcs_flash_controller_0+0xfb00be24>
 400d5a0:	bc400007 	ldb	r17,0(r23)
 400d5a4:	8a430426 	beq	r17,r9,400e1b8 <___svfprintf_internal_r+0x18cc>
 400d5a8:	94800414 	ori	r18,r18,16
 400d5ac:	003d2306 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d5b0:	18c03fcc 	andi	r3,r3,255
 400d5b4:	18053f1e 	bne	r3,zero,400eab4 <___svfprintf_internal_r+0x21c8>
 400d5b8:	9080080c 	andi	r2,r18,32
 400d5bc:	10028926 	beq	r2,zero,400dfe4 <___svfprintf_internal_r+0x16f8>
 400d5c0:	d9402d17 	ldw	r5,180(sp)
 400d5c4:	d9002f17 	ldw	r4,188(sp)
 400d5c8:	28800017 	ldw	r2,0(r5)
 400d5cc:	2007d7fa 	srai	r3,r4,31
 400d5d0:	29400104 	addi	r5,r5,4
 400d5d4:	d9402d15 	stw	r5,180(sp)
 400d5d8:	11000015 	stw	r4,0(r2)
 400d5dc:	10c00115 	stw	r3,4(r2)
 400d5e0:	003ced06 	br	400c998 <__alt_mem_epcs_flash_controller_0+0xfb00b998>
 400d5e4:	94801014 	ori	r18,r18,64
 400d5e8:	bc400007 	ldb	r17,0(r23)
 400d5ec:	003d1306 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400d5f0:	01010234 	movhi	r4,1032
 400d5f4:	212fe804 	addi	r4,r4,-16480
 400d5f8:	0039883a 	mov	fp,zero
 400d5fc:	d9003a15 	stw	r4,232(sp)
 400d600:	04401e04 	movi	r17,120
 400d604:	003f8206 	br	400d410 <__alt_mem_epcs_flash_controller_0+0xfb00c410>
 400d608:	18c03fcc 	andi	r3,r3,255
 400d60c:	1805221e 	bne	r3,zero,400ea98 <___svfprintf_internal_r+0x21ac>
 400d610:	883d9526 	beq	r17,zero,400cc68 <__alt_mem_epcs_flash_controller_0+0xfb00bc68>
 400d614:	00c00044 	movi	r3,1
 400d618:	d8c02a15 	stw	r3,168(sp)
 400d61c:	dc401405 	stb	r17,80(sp)
 400d620:	d8002785 	stb	zero,158(sp)
 400d624:	003f9406 	br	400d478 <__alt_mem_epcs_flash_controller_0+0xfb00c478>
 400d628:	01010234 	movhi	r4,1032
 400d62c:	212fe804 	addi	r4,r4,-16480
 400d630:	d9003a15 	stw	r4,232(sp)
 400d634:	d8c02d15 	stw	r3,180(sp)
 400d638:	1025883a 	mov	r18,r2
 400d63c:	04401e04 	movi	r17,120
 400d640:	a584b03a 	or	r2,r20,r22
 400d644:	1000fa1e 	bne	r2,zero,400da30 <___svfprintf_internal_r+0x1144>
 400d648:	0039883a 	mov	fp,zero
 400d64c:	00800084 	movi	r2,2
 400d650:	10803fcc 	andi	r2,r2,255
 400d654:	00c00044 	movi	r3,1
 400d658:	10c21626 	beq	r2,r3,400deb4 <___svfprintf_internal_r+0x15c8>
 400d65c:	00c00084 	movi	r3,2
 400d660:	10fe301e 	bne	r2,r3,400cf24 <__alt_mem_epcs_flash_controller_0+0xfb00bf24>
 400d664:	003d7606 	br	400cc40 <__alt_mem_epcs_flash_controller_0+0xfb00bc40>
 400d668:	d8c02017 	ldw	r3,128(sp)
 400d66c:	003e9506 	br	400d0c4 <__alt_mem_epcs_flash_controller_0+0xfb00c0c4>
 400d670:	00801944 	movi	r2,101
 400d674:	14407c0e 	bge	r2,r17,400d868 <___svfprintf_internal_r+0xf7c>
 400d678:	d9003617 	ldw	r4,216(sp)
 400d67c:	d9403717 	ldw	r5,220(sp)
 400d680:	000d883a 	mov	r6,zero
 400d684:	000f883a 	mov	r7,zero
 400d688:	d8c03d15 	stw	r3,244(sp)
 400d68c:	da003e15 	stw	r8,248(sp)
 400d690:	40195440 	call	4019544 <__eqdf2>
 400d694:	d8c03d17 	ldw	r3,244(sp)
 400d698:	da003e17 	ldw	r8,248(sp)
 400d69c:	1000f51e 	bne	r2,zero,400da74 <___svfprintf_internal_r+0x1188>
 400d6a0:	d8801f17 	ldw	r2,124(sp)
 400d6a4:	01010234 	movhi	r4,1032
 400d6a8:	212fef04 	addi	r4,r4,-16452
 400d6ac:	18c00044 	addi	r3,r3,1
 400d6b0:	10800044 	addi	r2,r2,1
 400d6b4:	41000015 	stw	r4,0(r8)
 400d6b8:	01000044 	movi	r4,1
 400d6bc:	41000115 	stw	r4,4(r8)
 400d6c0:	d8c02015 	stw	r3,128(sp)
 400d6c4:	d8801f15 	stw	r2,124(sp)
 400d6c8:	010001c4 	movi	r4,7
 400d6cc:	20826616 	blt	r4,r2,400e068 <___svfprintf_internal_r+0x177c>
 400d6d0:	42000204 	addi	r8,r8,8
 400d6d4:	d8802617 	ldw	r2,152(sp)
 400d6d8:	d9403317 	ldw	r5,204(sp)
 400d6dc:	11400216 	blt	r2,r5,400d6e8 <___svfprintf_internal_r+0xdfc>
 400d6e0:	9080004c 	andi	r2,r18,1
 400d6e4:	103ed526 	beq	r2,zero,400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400d6e8:	d8803817 	ldw	r2,224(sp)
 400d6ec:	d9003417 	ldw	r4,208(sp)
 400d6f0:	d9403817 	ldw	r5,224(sp)
 400d6f4:	1887883a 	add	r3,r3,r2
 400d6f8:	d8801f17 	ldw	r2,124(sp)
 400d6fc:	41000015 	stw	r4,0(r8)
 400d700:	41400115 	stw	r5,4(r8)
 400d704:	10800044 	addi	r2,r2,1
 400d708:	d8c02015 	stw	r3,128(sp)
 400d70c:	d8801f15 	stw	r2,124(sp)
 400d710:	010001c4 	movi	r4,7
 400d714:	2082af16 	blt	r4,r2,400e1d4 <___svfprintf_internal_r+0x18e8>
 400d718:	42000204 	addi	r8,r8,8
 400d71c:	d8803317 	ldw	r2,204(sp)
 400d720:	143fffc4 	addi	r16,r2,-1
 400d724:	043ec50e 	bge	zero,r16,400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400d728:	04400404 	movi	r17,16
 400d72c:	d8801f17 	ldw	r2,124(sp)
 400d730:	8c00860e 	bge	r17,r16,400d94c <___svfprintf_internal_r+0x1060>
 400d734:	01410234 	movhi	r5,1032
 400d738:	296fef84 	addi	r5,r5,-16450
 400d73c:	d9402b15 	stw	r5,172(sp)
 400d740:	058001c4 	movi	r22,7
 400d744:	dd002c17 	ldw	r20,176(sp)
 400d748:	00000306 	br	400d758 <___svfprintf_internal_r+0xe6c>
 400d74c:	42000204 	addi	r8,r8,8
 400d750:	843ffc04 	addi	r16,r16,-16
 400d754:	8c00800e 	bge	r17,r16,400d958 <___svfprintf_internal_r+0x106c>
 400d758:	18c00404 	addi	r3,r3,16
 400d75c:	10800044 	addi	r2,r2,1
 400d760:	45400015 	stw	r21,0(r8)
 400d764:	44400115 	stw	r17,4(r8)
 400d768:	d8c02015 	stw	r3,128(sp)
 400d76c:	d8801f15 	stw	r2,124(sp)
 400d770:	b0bff60e 	bge	r22,r2,400d74c <__alt_mem_epcs_flash_controller_0+0xfb00c74c>
 400d774:	d9801e04 	addi	r6,sp,120
 400d778:	a00b883a 	mov	r5,r20
 400d77c:	9809883a 	mov	r4,r19
 400d780:	401570c0 	call	401570c <__ssprint_r>
 400d784:	103d3e1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d788:	d8c02017 	ldw	r3,128(sp)
 400d78c:	d8801f17 	ldw	r2,124(sp)
 400d790:	da000404 	addi	r8,sp,16
 400d794:	003fee06 	br	400d750 <__alt_mem_epcs_flash_controller_0+0xfb00c750>
 400d798:	d9403117 	ldw	r5,196(sp)
 400d79c:	d8802a17 	ldw	r2,168(sp)
 400d7a0:	28adc83a 	sub	r22,r5,r2
 400d7a4:	05be650e 	bge	zero,r22,400d13c <__alt_mem_epcs_flash_controller_0+0xfb00c13c>
 400d7a8:	07000404 	movi	fp,16
 400d7ac:	d8801f17 	ldw	r2,124(sp)
 400d7b0:	e583a20e 	bge	fp,r22,400e63c <___svfprintf_internal_r+0x1d50>
 400d7b4:	01410234 	movhi	r5,1032
 400d7b8:	296fef84 	addi	r5,r5,-16450
 400d7bc:	dc403015 	stw	r17,192(sp)
 400d7c0:	d9402b15 	stw	r5,172(sp)
 400d7c4:	b023883a 	mov	r17,r22
 400d7c8:	050001c4 	movi	r20,7
 400d7cc:	902d883a 	mov	r22,r18
 400d7d0:	8025883a 	mov	r18,r16
 400d7d4:	dc002c17 	ldw	r16,176(sp)
 400d7d8:	00000306 	br	400d7e8 <___svfprintf_internal_r+0xefc>
 400d7dc:	8c7ffc04 	addi	r17,r17,-16
 400d7e0:	42000204 	addi	r8,r8,8
 400d7e4:	e440110e 	bge	fp,r17,400d82c <___svfprintf_internal_r+0xf40>
 400d7e8:	18c00404 	addi	r3,r3,16
 400d7ec:	10800044 	addi	r2,r2,1
 400d7f0:	45400015 	stw	r21,0(r8)
 400d7f4:	47000115 	stw	fp,4(r8)
 400d7f8:	d8c02015 	stw	r3,128(sp)
 400d7fc:	d8801f15 	stw	r2,124(sp)
 400d800:	a0bff60e 	bge	r20,r2,400d7dc <__alt_mem_epcs_flash_controller_0+0xfb00c7dc>
 400d804:	d9801e04 	addi	r6,sp,120
 400d808:	800b883a 	mov	r5,r16
 400d80c:	9809883a 	mov	r4,r19
 400d810:	401570c0 	call	401570c <__ssprint_r>
 400d814:	103d1a1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d818:	8c7ffc04 	addi	r17,r17,-16
 400d81c:	d8c02017 	ldw	r3,128(sp)
 400d820:	d8801f17 	ldw	r2,124(sp)
 400d824:	da000404 	addi	r8,sp,16
 400d828:	e47fef16 	blt	fp,r17,400d7e8 <__alt_mem_epcs_flash_controller_0+0xfb00c7e8>
 400d82c:	9021883a 	mov	r16,r18
 400d830:	b025883a 	mov	r18,r22
 400d834:	882d883a 	mov	r22,r17
 400d838:	dc403017 	ldw	r17,192(sp)
 400d83c:	d9002b17 	ldw	r4,172(sp)
 400d840:	1d87883a 	add	r3,r3,r22
 400d844:	10800044 	addi	r2,r2,1
 400d848:	41000015 	stw	r4,0(r8)
 400d84c:	45800115 	stw	r22,4(r8)
 400d850:	d8c02015 	stw	r3,128(sp)
 400d854:	d8801f15 	stw	r2,124(sp)
 400d858:	010001c4 	movi	r4,7
 400d85c:	20819a16 	blt	r4,r2,400dec8 <___svfprintf_internal_r+0x15dc>
 400d860:	42000204 	addi	r8,r8,8
 400d864:	003e3506 	br	400d13c <__alt_mem_epcs_flash_controller_0+0xfb00c13c>
 400d868:	d9403317 	ldw	r5,204(sp)
 400d86c:	00800044 	movi	r2,1
 400d870:	18c00044 	addi	r3,r3,1
 400d874:	1141710e 	bge	r2,r5,400de3c <___svfprintf_internal_r+0x1550>
 400d878:	dc401f17 	ldw	r17,124(sp)
 400d87c:	00800044 	movi	r2,1
 400d880:	40800115 	stw	r2,4(r8)
 400d884:	8c400044 	addi	r17,r17,1
 400d888:	44000015 	stw	r16,0(r8)
 400d88c:	d8c02015 	stw	r3,128(sp)
 400d890:	dc401f15 	stw	r17,124(sp)
 400d894:	008001c4 	movi	r2,7
 400d898:	14417416 	blt	r2,r17,400de6c <___svfprintf_internal_r+0x1580>
 400d89c:	42000204 	addi	r8,r8,8
 400d8a0:	d8803817 	ldw	r2,224(sp)
 400d8a4:	d9003417 	ldw	r4,208(sp)
 400d8a8:	8c400044 	addi	r17,r17,1
 400d8ac:	10c7883a 	add	r3,r2,r3
 400d8b0:	40800115 	stw	r2,4(r8)
 400d8b4:	41000015 	stw	r4,0(r8)
 400d8b8:	d8c02015 	stw	r3,128(sp)
 400d8bc:	dc401f15 	stw	r17,124(sp)
 400d8c0:	008001c4 	movi	r2,7
 400d8c4:	14417216 	blt	r2,r17,400de90 <___svfprintf_internal_r+0x15a4>
 400d8c8:	45800204 	addi	r22,r8,8
 400d8cc:	d9003617 	ldw	r4,216(sp)
 400d8d0:	d9403717 	ldw	r5,220(sp)
 400d8d4:	000d883a 	mov	r6,zero
 400d8d8:	000f883a 	mov	r7,zero
 400d8dc:	d8c03d15 	stw	r3,244(sp)
 400d8e0:	40195440 	call	4019544 <__eqdf2>
 400d8e4:	d8c03d17 	ldw	r3,244(sp)
 400d8e8:	1000b326 	beq	r2,zero,400dbb8 <___svfprintf_internal_r+0x12cc>
 400d8ec:	d9403317 	ldw	r5,204(sp)
 400d8f0:	84000044 	addi	r16,r16,1
 400d8f4:	8c400044 	addi	r17,r17,1
 400d8f8:	28bfffc4 	addi	r2,r5,-1
 400d8fc:	1887883a 	add	r3,r3,r2
 400d900:	b0800115 	stw	r2,4(r22)
 400d904:	b4000015 	stw	r16,0(r22)
 400d908:	d8c02015 	stw	r3,128(sp)
 400d90c:	dc401f15 	stw	r17,124(sp)
 400d910:	008001c4 	movi	r2,7
 400d914:	1440d216 	blt	r2,r17,400dc60 <___svfprintf_internal_r+0x1374>
 400d918:	b5800204 	addi	r22,r22,8
 400d91c:	d9003b17 	ldw	r4,236(sp)
 400d920:	df0022c4 	addi	fp,sp,139
 400d924:	8c400044 	addi	r17,r17,1
 400d928:	20c7883a 	add	r3,r4,r3
 400d92c:	b7000015 	stw	fp,0(r22)
 400d930:	b1000115 	stw	r4,4(r22)
 400d934:	d8c02015 	stw	r3,128(sp)
 400d938:	dc401f15 	stw	r17,124(sp)
 400d93c:	008001c4 	movi	r2,7
 400d940:	14400e16 	blt	r2,r17,400d97c <___svfprintf_internal_r+0x1090>
 400d944:	b2000204 	addi	r8,r22,8
 400d948:	003e3c06 	br	400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400d94c:	01010234 	movhi	r4,1032
 400d950:	212fef84 	addi	r4,r4,-16450
 400d954:	d9002b15 	stw	r4,172(sp)
 400d958:	d9002b17 	ldw	r4,172(sp)
 400d95c:	1c07883a 	add	r3,r3,r16
 400d960:	44000115 	stw	r16,4(r8)
 400d964:	41000015 	stw	r4,0(r8)
 400d968:	10800044 	addi	r2,r2,1
 400d96c:	d8c02015 	stw	r3,128(sp)
 400d970:	d8801f15 	stw	r2,124(sp)
 400d974:	010001c4 	movi	r4,7
 400d978:	20be2f0e 	bge	r4,r2,400d238 <__alt_mem_epcs_flash_controller_0+0xfb00c238>
 400d97c:	d9402c17 	ldw	r5,176(sp)
 400d980:	d9801e04 	addi	r6,sp,120
 400d984:	9809883a 	mov	r4,r19
 400d988:	401570c0 	call	401570c <__ssprint_r>
 400d98c:	103cbc1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d990:	d8c02017 	ldw	r3,128(sp)
 400d994:	da000404 	addi	r8,sp,16
 400d998:	003e2806 	br	400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400d99c:	d9402c17 	ldw	r5,176(sp)
 400d9a0:	d9801e04 	addi	r6,sp,120
 400d9a4:	9809883a 	mov	r4,r19
 400d9a8:	401570c0 	call	401570c <__ssprint_r>
 400d9ac:	103e5f26 	beq	r2,zero,400d32c <__alt_mem_epcs_flash_controller_0+0xfb00c32c>
 400d9b0:	003cb306 	br	400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d9b4:	d9402c17 	ldw	r5,176(sp)
 400d9b8:	d9801e04 	addi	r6,sp,120
 400d9bc:	9809883a 	mov	r4,r19
 400d9c0:	401570c0 	call	401570c <__ssprint_r>
 400d9c4:	103cae1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d9c8:	d8c02017 	ldw	r3,128(sp)
 400d9cc:	da000404 	addi	r8,sp,16
 400d9d0:	003e0d06 	br	400d208 <__alt_mem_epcs_flash_controller_0+0xfb00c208>
 400d9d4:	d9402c17 	ldw	r5,176(sp)
 400d9d8:	d9801e04 	addi	r6,sp,120
 400d9dc:	9809883a 	mov	r4,r19
 400d9e0:	401570c0 	call	401570c <__ssprint_r>
 400d9e4:	103ca61e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400d9e8:	d8c02017 	ldw	r3,128(sp)
 400d9ec:	da000404 	addi	r8,sp,16
 400d9f0:	003dc106 	br	400d0f8 <__alt_mem_epcs_flash_controller_0+0xfb00c0f8>
 400d9f4:	d9402c17 	ldw	r5,176(sp)
 400d9f8:	d9801e04 	addi	r6,sp,120
 400d9fc:	9809883a 	mov	r4,r19
 400da00:	401570c0 	call	401570c <__ssprint_r>
 400da04:	103c9e1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400da08:	d8c02017 	ldw	r3,128(sp)
 400da0c:	da000404 	addi	r8,sp,16
 400da10:	003dc706 	br	400d130 <__alt_mem_epcs_flash_controller_0+0xfb00c130>
 400da14:	d8802917 	ldw	r2,164(sp)
 400da18:	d8002785 	stb	zero,158(sp)
 400da1c:	103f0816 	blt	r2,zero,400d640 <__alt_mem_epcs_flash_controller_0+0xfb00c640>
 400da20:	00ffdfc4 	movi	r3,-129
 400da24:	a584b03a 	or	r2,r20,r22
 400da28:	90e4703a 	and	r18,r18,r3
 400da2c:	103c8126 	beq	r2,zero,400cc34 <__alt_mem_epcs_flash_controller_0+0xfb00bc34>
 400da30:	0039883a 	mov	fp,zero
 400da34:	003e7606 	br	400d410 <__alt_mem_epcs_flash_controller_0+0xfb00c410>
 400da38:	9080040c 	andi	r2,r18,16
 400da3c:	10013d26 	beq	r2,zero,400df34 <___svfprintf_internal_r+0x1648>
 400da40:	d9002d17 	ldw	r4,180(sp)
 400da44:	d9402917 	ldw	r5,164(sp)
 400da48:	d8002785 	stb	zero,158(sp)
 400da4c:	20800104 	addi	r2,r4,4
 400da50:	25000017 	ldw	r20,0(r4)
 400da54:	002d883a 	mov	r22,zero
 400da58:	28013f16 	blt	r5,zero,400df58 <___svfprintf_internal_r+0x166c>
 400da5c:	00ffdfc4 	movi	r3,-129
 400da60:	d8802d15 	stw	r2,180(sp)
 400da64:	90e4703a 	and	r18,r18,r3
 400da68:	a03d2b26 	beq	r20,zero,400cf18 <__alt_mem_epcs_flash_controller_0+0xfb00bf18>
 400da6c:	0039883a 	mov	fp,zero
 400da70:	003d2e06 	br	400cf2c <__alt_mem_epcs_flash_controller_0+0xfb00bf2c>
 400da74:	dc402617 	ldw	r17,152(sp)
 400da78:	0441830e 	bge	zero,r17,400e088 <___svfprintf_internal_r+0x179c>
 400da7c:	dc403217 	ldw	r17,200(sp)
 400da80:	d8803317 	ldw	r2,204(sp)
 400da84:	1440010e 	bge	r2,r17,400da8c <___svfprintf_internal_r+0x11a0>
 400da88:	1023883a 	mov	r17,r2
 400da8c:	04400a0e 	bge	zero,r17,400dab8 <___svfprintf_internal_r+0x11cc>
 400da90:	d8801f17 	ldw	r2,124(sp)
 400da94:	1c47883a 	add	r3,r3,r17
 400da98:	44000015 	stw	r16,0(r8)
 400da9c:	10800044 	addi	r2,r2,1
 400daa0:	44400115 	stw	r17,4(r8)
 400daa4:	d8c02015 	stw	r3,128(sp)
 400daa8:	d8801f15 	stw	r2,124(sp)
 400daac:	010001c4 	movi	r4,7
 400dab0:	20827516 	blt	r4,r2,400e488 <___svfprintf_internal_r+0x1b9c>
 400dab4:	42000204 	addi	r8,r8,8
 400dab8:	88027b16 	blt	r17,zero,400e4a8 <___svfprintf_internal_r+0x1bbc>
 400dabc:	d9003217 	ldw	r4,200(sp)
 400dac0:	2463c83a 	sub	r17,r4,r17
 400dac4:	0440990e 	bge	zero,r17,400dd2c <___svfprintf_internal_r+0x1440>
 400dac8:	05800404 	movi	r22,16
 400dacc:	d8801f17 	ldw	r2,124(sp)
 400dad0:	b441530e 	bge	r22,r17,400e020 <___svfprintf_internal_r+0x1734>
 400dad4:	01010234 	movhi	r4,1032
 400dad8:	212fef84 	addi	r4,r4,-16450
 400dadc:	d9002b15 	stw	r4,172(sp)
 400dae0:	070001c4 	movi	fp,7
 400dae4:	dd002c17 	ldw	r20,176(sp)
 400dae8:	00000306 	br	400daf8 <___svfprintf_internal_r+0x120c>
 400daec:	42000204 	addi	r8,r8,8
 400daf0:	8c7ffc04 	addi	r17,r17,-16
 400daf4:	b4414d0e 	bge	r22,r17,400e02c <___svfprintf_internal_r+0x1740>
 400daf8:	18c00404 	addi	r3,r3,16
 400dafc:	10800044 	addi	r2,r2,1
 400db00:	45400015 	stw	r21,0(r8)
 400db04:	45800115 	stw	r22,4(r8)
 400db08:	d8c02015 	stw	r3,128(sp)
 400db0c:	d8801f15 	stw	r2,124(sp)
 400db10:	e0bff60e 	bge	fp,r2,400daec <__alt_mem_epcs_flash_controller_0+0xfb00caec>
 400db14:	d9801e04 	addi	r6,sp,120
 400db18:	a00b883a 	mov	r5,r20
 400db1c:	9809883a 	mov	r4,r19
 400db20:	401570c0 	call	401570c <__ssprint_r>
 400db24:	103c561e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400db28:	d8c02017 	ldw	r3,128(sp)
 400db2c:	d8801f17 	ldw	r2,124(sp)
 400db30:	da000404 	addi	r8,sp,16
 400db34:	003fee06 	br	400daf0 <__alt_mem_epcs_flash_controller_0+0xfb00caf0>
 400db38:	d9402c17 	ldw	r5,176(sp)
 400db3c:	d9801e04 	addi	r6,sp,120
 400db40:	9809883a 	mov	r4,r19
 400db44:	401570c0 	call	401570c <__ssprint_r>
 400db48:	103c4d1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400db4c:	d8c02017 	ldw	r3,128(sp)
 400db50:	df002787 	ldb	fp,158(sp)
 400db54:	da000404 	addi	r8,sp,16
 400db58:	003d5a06 	br	400d0c4 <__alt_mem_epcs_flash_controller_0+0xfb00c0c4>
 400db5c:	9080040c 	andi	r2,r18,16
 400db60:	10005c26 	beq	r2,zero,400dcd4 <___svfprintf_internal_r+0x13e8>
 400db64:	d9402d17 	ldw	r5,180(sp)
 400db68:	d8c02917 	ldw	r3,164(sp)
 400db6c:	d8002785 	stb	zero,158(sp)
 400db70:	28800104 	addi	r2,r5,4
 400db74:	2d000017 	ldw	r20,0(r5)
 400db78:	002d883a 	mov	r22,zero
 400db7c:	18005e16 	blt	r3,zero,400dcf8 <___svfprintf_internal_r+0x140c>
 400db80:	00ffdfc4 	movi	r3,-129
 400db84:	d8802d15 	stw	r2,180(sp)
 400db88:	90e4703a 	and	r18,r18,r3
 400db8c:	0039883a 	mov	fp,zero
 400db90:	a03dfe26 	beq	r20,zero,400d38c <__alt_mem_epcs_flash_controller_0+0xfb00c38c>
 400db94:	00800244 	movi	r2,9
 400db98:	153cb336 	bltu	r2,r20,400ce68 <__alt_mem_epcs_flash_controller_0+0xfb00be68>
 400db9c:	a5000c04 	addi	r20,r20,48
 400dba0:	dc001dc4 	addi	r16,sp,119
 400dba4:	dd001dc5 	stb	r20,119(sp)
 400dba8:	d8c02817 	ldw	r3,160(sp)
 400dbac:	1c07c83a 	sub	r3,r3,r16
 400dbb0:	d8c02e15 	stw	r3,184(sp)
 400dbb4:	003cf506 	br	400cf8c <__alt_mem_epcs_flash_controller_0+0xfb00bf8c>
 400dbb8:	d8803317 	ldw	r2,204(sp)
 400dbbc:	143fffc4 	addi	r16,r2,-1
 400dbc0:	043f560e 	bge	zero,r16,400d91c <__alt_mem_epcs_flash_controller_0+0xfb00c91c>
 400dbc4:	07000404 	movi	fp,16
 400dbc8:	e403530e 	bge	fp,r16,400e918 <___svfprintf_internal_r+0x202c>
 400dbcc:	01410234 	movhi	r5,1032
 400dbd0:	296fef84 	addi	r5,r5,-16450
 400dbd4:	d9402b15 	stw	r5,172(sp)
 400dbd8:	01c001c4 	movi	r7,7
 400dbdc:	dd002c17 	ldw	r20,176(sp)
 400dbe0:	00000306 	br	400dbf0 <___svfprintf_internal_r+0x1304>
 400dbe4:	843ffc04 	addi	r16,r16,-16
 400dbe8:	b5800204 	addi	r22,r22,8
 400dbec:	e400130e 	bge	fp,r16,400dc3c <___svfprintf_internal_r+0x1350>
 400dbf0:	18c00404 	addi	r3,r3,16
 400dbf4:	8c400044 	addi	r17,r17,1
 400dbf8:	b5400015 	stw	r21,0(r22)
 400dbfc:	b7000115 	stw	fp,4(r22)
 400dc00:	d8c02015 	stw	r3,128(sp)
 400dc04:	dc401f15 	stw	r17,124(sp)
 400dc08:	3c7ff60e 	bge	r7,r17,400dbe4 <__alt_mem_epcs_flash_controller_0+0xfb00cbe4>
 400dc0c:	d9801e04 	addi	r6,sp,120
 400dc10:	a00b883a 	mov	r5,r20
 400dc14:	9809883a 	mov	r4,r19
 400dc18:	d9c03d15 	stw	r7,244(sp)
 400dc1c:	401570c0 	call	401570c <__ssprint_r>
 400dc20:	d9c03d17 	ldw	r7,244(sp)
 400dc24:	103c161e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400dc28:	843ffc04 	addi	r16,r16,-16
 400dc2c:	d8c02017 	ldw	r3,128(sp)
 400dc30:	dc401f17 	ldw	r17,124(sp)
 400dc34:	dd800404 	addi	r22,sp,16
 400dc38:	e43fed16 	blt	fp,r16,400dbf0 <__alt_mem_epcs_flash_controller_0+0xfb00cbf0>
 400dc3c:	d8802b17 	ldw	r2,172(sp)
 400dc40:	1c07883a 	add	r3,r3,r16
 400dc44:	8c400044 	addi	r17,r17,1
 400dc48:	b0800015 	stw	r2,0(r22)
 400dc4c:	b4000115 	stw	r16,4(r22)
 400dc50:	d8c02015 	stw	r3,128(sp)
 400dc54:	dc401f15 	stw	r17,124(sp)
 400dc58:	008001c4 	movi	r2,7
 400dc5c:	147f2e0e 	bge	r2,r17,400d918 <__alt_mem_epcs_flash_controller_0+0xfb00c918>
 400dc60:	d9402c17 	ldw	r5,176(sp)
 400dc64:	d9801e04 	addi	r6,sp,120
 400dc68:	9809883a 	mov	r4,r19
 400dc6c:	401570c0 	call	401570c <__ssprint_r>
 400dc70:	103c031e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400dc74:	d8c02017 	ldw	r3,128(sp)
 400dc78:	dc401f17 	ldw	r17,124(sp)
 400dc7c:	dd800404 	addi	r22,sp,16
 400dc80:	003f2606 	br	400d91c <__alt_mem_epcs_flash_controller_0+0xfb00c91c>
 400dc84:	9080040c 	andi	r2,r18,16
 400dc88:	1000c326 	beq	r2,zero,400df98 <___svfprintf_internal_r+0x16ac>
 400dc8c:	d8802d17 	ldw	r2,180(sp)
 400dc90:	15000017 	ldw	r20,0(r2)
 400dc94:	10800104 	addi	r2,r2,4
 400dc98:	d8802d15 	stw	r2,180(sp)
 400dc9c:	a02dd7fa 	srai	r22,r20,31
 400dca0:	b005883a 	mov	r2,r22
 400dca4:	103c680e 	bge	r2,zero,400ce48 <__alt_mem_epcs_flash_controller_0+0xfb00be48>
 400dca8:	0529c83a 	sub	r20,zero,r20
 400dcac:	a004c03a 	cmpne	r2,r20,zero
 400dcb0:	05adc83a 	sub	r22,zero,r22
 400dcb4:	b0adc83a 	sub	r22,r22,r2
 400dcb8:	d8802917 	ldw	r2,164(sp)
 400dcbc:	07000b44 	movi	fp,45
 400dcc0:	df002785 	stb	fp,158(sp)
 400dcc4:	10022e16 	blt	r2,zero,400e580 <___svfprintf_internal_r+0x1c94>
 400dcc8:	00bfdfc4 	movi	r2,-129
 400dccc:	90a4703a 	and	r18,r18,r2
 400dcd0:	003c6406 	br	400ce64 <__alt_mem_epcs_flash_controller_0+0xfb00be64>
 400dcd4:	9080100c 	andi	r2,r18,64
 400dcd8:	d8002785 	stb	zero,158(sp)
 400dcdc:	10012526 	beq	r2,zero,400e174 <___svfprintf_internal_r+0x1888>
 400dce0:	d9002d17 	ldw	r4,180(sp)
 400dce4:	d9402917 	ldw	r5,164(sp)
 400dce8:	002d883a 	mov	r22,zero
 400dcec:	20800104 	addi	r2,r4,4
 400dcf0:	2500000b 	ldhu	r20,0(r4)
 400dcf4:	283fa20e 	bge	r5,zero,400db80 <__alt_mem_epcs_flash_controller_0+0xfb00cb80>
 400dcf8:	d8802d15 	stw	r2,180(sp)
 400dcfc:	0039883a 	mov	fp,zero
 400dd00:	a584b03a 	or	r2,r20,r22
 400dd04:	103c571e 	bne	r2,zero,400ce64 <__alt_mem_epcs_flash_controller_0+0xfb00be64>
 400dd08:	00800044 	movi	r2,1
 400dd0c:	003e5006 	br	400d650 <__alt_mem_epcs_flash_controller_0+0xfb00c650>
 400dd10:	d9402c17 	ldw	r5,176(sp)
 400dd14:	d9801e04 	addi	r6,sp,120
 400dd18:	9809883a 	mov	r4,r19
 400dd1c:	401570c0 	call	401570c <__ssprint_r>
 400dd20:	103bd71e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400dd24:	d8c02017 	ldw	r3,128(sp)
 400dd28:	da000404 	addi	r8,sp,16
 400dd2c:	d9003217 	ldw	r4,200(sp)
 400dd30:	d8802617 	ldw	r2,152(sp)
 400dd34:	d9403317 	ldw	r5,204(sp)
 400dd38:	8123883a 	add	r17,r16,r4
 400dd3c:	11400216 	blt	r2,r5,400dd48 <___svfprintf_internal_r+0x145c>
 400dd40:	9100004c 	andi	r4,r18,1
 400dd44:	20000d26 	beq	r4,zero,400dd7c <___svfprintf_internal_r+0x1490>
 400dd48:	d9003817 	ldw	r4,224(sp)
 400dd4c:	d9403417 	ldw	r5,208(sp)
 400dd50:	1907883a 	add	r3,r3,r4
 400dd54:	d9001f17 	ldw	r4,124(sp)
 400dd58:	41400015 	stw	r5,0(r8)
 400dd5c:	d9403817 	ldw	r5,224(sp)
 400dd60:	21000044 	addi	r4,r4,1
 400dd64:	d8c02015 	stw	r3,128(sp)
 400dd68:	41400115 	stw	r5,4(r8)
 400dd6c:	d9001f15 	stw	r4,124(sp)
 400dd70:	014001c4 	movi	r5,7
 400dd74:	2901dc16 	blt	r5,r4,400e4e8 <___svfprintf_internal_r+0x1bfc>
 400dd78:	42000204 	addi	r8,r8,8
 400dd7c:	d9003317 	ldw	r4,204(sp)
 400dd80:	8121883a 	add	r16,r16,r4
 400dd84:	2085c83a 	sub	r2,r4,r2
 400dd88:	8461c83a 	sub	r16,r16,r17
 400dd8c:	1400010e 	bge	r2,r16,400dd94 <___svfprintf_internal_r+0x14a8>
 400dd90:	1021883a 	mov	r16,r2
 400dd94:	04000a0e 	bge	zero,r16,400ddc0 <___svfprintf_internal_r+0x14d4>
 400dd98:	d9001f17 	ldw	r4,124(sp)
 400dd9c:	1c07883a 	add	r3,r3,r16
 400dda0:	44400015 	stw	r17,0(r8)
 400dda4:	21000044 	addi	r4,r4,1
 400dda8:	44000115 	stw	r16,4(r8)
 400ddac:	d8c02015 	stw	r3,128(sp)
 400ddb0:	d9001f15 	stw	r4,124(sp)
 400ddb4:	014001c4 	movi	r5,7
 400ddb8:	2901e616 	blt	r5,r4,400e554 <___svfprintf_internal_r+0x1c68>
 400ddbc:	42000204 	addi	r8,r8,8
 400ddc0:	8001f616 	blt	r16,zero,400e59c <___svfprintf_internal_r+0x1cb0>
 400ddc4:	1421c83a 	sub	r16,r2,r16
 400ddc8:	043d1c0e 	bge	zero,r16,400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400ddcc:	04400404 	movi	r17,16
 400ddd0:	d8801f17 	ldw	r2,124(sp)
 400ddd4:	8c3edd0e 	bge	r17,r16,400d94c <__alt_mem_epcs_flash_controller_0+0xfb00c94c>
 400ddd8:	01410234 	movhi	r5,1032
 400dddc:	296fef84 	addi	r5,r5,-16450
 400dde0:	d9402b15 	stw	r5,172(sp)
 400dde4:	058001c4 	movi	r22,7
 400dde8:	dd002c17 	ldw	r20,176(sp)
 400ddec:	00000306 	br	400ddfc <___svfprintf_internal_r+0x1510>
 400ddf0:	42000204 	addi	r8,r8,8
 400ddf4:	843ffc04 	addi	r16,r16,-16
 400ddf8:	8c3ed70e 	bge	r17,r16,400d958 <__alt_mem_epcs_flash_controller_0+0xfb00c958>
 400ddfc:	18c00404 	addi	r3,r3,16
 400de00:	10800044 	addi	r2,r2,1
 400de04:	45400015 	stw	r21,0(r8)
 400de08:	44400115 	stw	r17,4(r8)
 400de0c:	d8c02015 	stw	r3,128(sp)
 400de10:	d8801f15 	stw	r2,124(sp)
 400de14:	b0bff60e 	bge	r22,r2,400ddf0 <__alt_mem_epcs_flash_controller_0+0xfb00cdf0>
 400de18:	d9801e04 	addi	r6,sp,120
 400de1c:	a00b883a 	mov	r5,r20
 400de20:	9809883a 	mov	r4,r19
 400de24:	401570c0 	call	401570c <__ssprint_r>
 400de28:	103b951e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400de2c:	d8c02017 	ldw	r3,128(sp)
 400de30:	d8801f17 	ldw	r2,124(sp)
 400de34:	da000404 	addi	r8,sp,16
 400de38:	003fee06 	br	400ddf4 <__alt_mem_epcs_flash_controller_0+0xfb00cdf4>
 400de3c:	9088703a 	and	r4,r18,r2
 400de40:	203e8d1e 	bne	r4,zero,400d878 <__alt_mem_epcs_flash_controller_0+0xfb00c878>
 400de44:	dc401f17 	ldw	r17,124(sp)
 400de48:	40800115 	stw	r2,4(r8)
 400de4c:	44000015 	stw	r16,0(r8)
 400de50:	8c400044 	addi	r17,r17,1
 400de54:	d8c02015 	stw	r3,128(sp)
 400de58:	dc401f15 	stw	r17,124(sp)
 400de5c:	008001c4 	movi	r2,7
 400de60:	147f7f16 	blt	r2,r17,400dc60 <__alt_mem_epcs_flash_controller_0+0xfb00cc60>
 400de64:	45800204 	addi	r22,r8,8
 400de68:	003eac06 	br	400d91c <__alt_mem_epcs_flash_controller_0+0xfb00c91c>
 400de6c:	d9402c17 	ldw	r5,176(sp)
 400de70:	d9801e04 	addi	r6,sp,120
 400de74:	9809883a 	mov	r4,r19
 400de78:	401570c0 	call	401570c <__ssprint_r>
 400de7c:	103b801e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400de80:	d8c02017 	ldw	r3,128(sp)
 400de84:	dc401f17 	ldw	r17,124(sp)
 400de88:	da000404 	addi	r8,sp,16
 400de8c:	003e8406 	br	400d8a0 <__alt_mem_epcs_flash_controller_0+0xfb00c8a0>
 400de90:	d9402c17 	ldw	r5,176(sp)
 400de94:	d9801e04 	addi	r6,sp,120
 400de98:	9809883a 	mov	r4,r19
 400de9c:	401570c0 	call	401570c <__ssprint_r>
 400dea0:	103b771e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400dea4:	d8c02017 	ldw	r3,128(sp)
 400dea8:	dc401f17 	ldw	r17,124(sp)
 400deac:	dd800404 	addi	r22,sp,16
 400deb0:	003e8606 	br	400d8cc <__alt_mem_epcs_flash_controller_0+0xfb00c8cc>
 400deb4:	0029883a 	mov	r20,zero
 400deb8:	a5000c04 	addi	r20,r20,48
 400debc:	dc001dc4 	addi	r16,sp,119
 400dec0:	dd001dc5 	stb	r20,119(sp)
 400dec4:	003f3806 	br	400dba8 <__alt_mem_epcs_flash_controller_0+0xfb00cba8>
 400dec8:	d9402c17 	ldw	r5,176(sp)
 400decc:	d9801e04 	addi	r6,sp,120
 400ded0:	9809883a 	mov	r4,r19
 400ded4:	401570c0 	call	401570c <__ssprint_r>
 400ded8:	103b691e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400dedc:	d8c02017 	ldw	r3,128(sp)
 400dee0:	da000404 	addi	r8,sp,16
 400dee4:	003c9506 	br	400d13c <__alt_mem_epcs_flash_controller_0+0xfb00c13c>
 400dee8:	d9003617 	ldw	r4,216(sp)
 400deec:	d9403717 	ldw	r5,220(sp)
 400def0:	da003e15 	stw	r8,248(sp)
 400def4:	400940c0 	call	400940c <__fpclassifyd>
 400def8:	da003e17 	ldw	r8,248(sp)
 400defc:	1000bd1e 	bne	r2,zero,400e1f4 <___svfprintf_internal_r+0x1908>
 400df00:	008011c4 	movi	r2,71
 400df04:	14411e0e 	bge	r2,r17,400e380 <___svfprintf_internal_r+0x1a94>
 400df08:	04010234 	movhi	r16,1032
 400df0c:	842fe204 	addi	r16,r16,-16504
 400df10:	00c000c4 	movi	r3,3
 400df14:	00bfdfc4 	movi	r2,-129
 400df18:	d8c02a15 	stw	r3,168(sp)
 400df1c:	90a4703a 	and	r18,r18,r2
 400df20:	df002783 	ldbu	fp,158(sp)
 400df24:	d8c02e15 	stw	r3,184(sp)
 400df28:	d8002915 	stw	zero,164(sp)
 400df2c:	d8003215 	stw	zero,200(sp)
 400df30:	003c1c06 	br	400cfa4 <__alt_mem_epcs_flash_controller_0+0xfb00bfa4>
 400df34:	9080100c 	andi	r2,r18,64
 400df38:	d8002785 	stb	zero,158(sp)
 400df3c:	10009426 	beq	r2,zero,400e190 <___svfprintf_internal_r+0x18a4>
 400df40:	d8c02d17 	ldw	r3,180(sp)
 400df44:	d9002917 	ldw	r4,164(sp)
 400df48:	002d883a 	mov	r22,zero
 400df4c:	18800104 	addi	r2,r3,4
 400df50:	1d00000b 	ldhu	r20,0(r3)
 400df54:	203ec10e 	bge	r4,zero,400da5c <__alt_mem_epcs_flash_controller_0+0xfb00ca5c>
 400df58:	a586b03a 	or	r3,r20,r22
 400df5c:	d8802d15 	stw	r2,180(sp)
 400df60:	183ec21e 	bne	r3,zero,400da6c <__alt_mem_epcs_flash_controller_0+0xfb00ca6c>
 400df64:	0039883a 	mov	fp,zero
 400df68:	0005883a 	mov	r2,zero
 400df6c:	003db806 	br	400d650 <__alt_mem_epcs_flash_controller_0+0xfb00c650>
 400df70:	d8802d17 	ldw	r2,180(sp)
 400df74:	d8c02d17 	ldw	r3,180(sp)
 400df78:	d9002d17 	ldw	r4,180(sp)
 400df7c:	10800017 	ldw	r2,0(r2)
 400df80:	18c00117 	ldw	r3,4(r3)
 400df84:	21000204 	addi	r4,r4,8
 400df88:	d8803615 	stw	r2,216(sp)
 400df8c:	d8c03715 	stw	r3,220(sp)
 400df90:	d9002d15 	stw	r4,180(sp)
 400df94:	003b8206 	br	400cda0 <__alt_mem_epcs_flash_controller_0+0xfb00bda0>
 400df98:	9080100c 	andi	r2,r18,64
 400df9c:	10010726 	beq	r2,zero,400e3bc <___svfprintf_internal_r+0x1ad0>
 400dfa0:	d8c02d17 	ldw	r3,180(sp)
 400dfa4:	1d00000f 	ldh	r20,0(r3)
 400dfa8:	18c00104 	addi	r3,r3,4
 400dfac:	d8c02d15 	stw	r3,180(sp)
 400dfb0:	a02dd7fa 	srai	r22,r20,31
 400dfb4:	b005883a 	mov	r2,r22
 400dfb8:	003ba206 	br	400ce44 <__alt_mem_epcs_flash_controller_0+0xfb00be44>
 400dfbc:	9080100c 	andi	r2,r18,64
 400dfc0:	10010526 	beq	r2,zero,400e3d8 <___svfprintf_internal_r+0x1aec>
 400dfc4:	d9002d17 	ldw	r4,180(sp)
 400dfc8:	002d883a 	mov	r22,zero
 400dfcc:	2500000b 	ldhu	r20,0(r4)
 400dfd0:	21000104 	addi	r4,r4,4
 400dfd4:	d9002d15 	stw	r4,180(sp)
 400dfd8:	003cfe06 	br	400d3d4 <__alt_mem_epcs_flash_controller_0+0xfb00c3d4>
 400dfdc:	bc400007 	ldb	r17,0(r23)
 400dfe0:	003a9606 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400dfe4:	9080040c 	andi	r2,r18,16
 400dfe8:	10010126 	beq	r2,zero,400e3f0 <___svfprintf_internal_r+0x1b04>
 400dfec:	d9402d17 	ldw	r5,180(sp)
 400dff0:	d8c02f17 	ldw	r3,188(sp)
 400dff4:	28800017 	ldw	r2,0(r5)
 400dff8:	29400104 	addi	r5,r5,4
 400dffc:	d9402d15 	stw	r5,180(sp)
 400e000:	10c00015 	stw	r3,0(r2)
 400e004:	003a6406 	br	400c998 <__alt_mem_epcs_flash_controller_0+0xfb00b998>
 400e008:	d9002917 	ldw	r4,164(sp)
 400e00c:	d8002785 	stb	zero,158(sp)
 400e010:	203d8d16 	blt	r4,zero,400d648 <__alt_mem_epcs_flash_controller_0+0xfb00c648>
 400e014:	00bfdfc4 	movi	r2,-129
 400e018:	90a4703a 	and	r18,r18,r2
 400e01c:	003b0506 	br	400cc34 <__alt_mem_epcs_flash_controller_0+0xfb00bc34>
 400e020:	01410234 	movhi	r5,1032
 400e024:	296fef84 	addi	r5,r5,-16450
 400e028:	d9402b15 	stw	r5,172(sp)
 400e02c:	d9402b17 	ldw	r5,172(sp)
 400e030:	1c47883a 	add	r3,r3,r17
 400e034:	10800044 	addi	r2,r2,1
 400e038:	41400015 	stw	r5,0(r8)
 400e03c:	44400115 	stw	r17,4(r8)
 400e040:	d8c02015 	stw	r3,128(sp)
 400e044:	d8801f15 	stw	r2,124(sp)
 400e048:	010001c4 	movi	r4,7
 400e04c:	20bf3016 	blt	r4,r2,400dd10 <__alt_mem_epcs_flash_controller_0+0xfb00cd10>
 400e050:	42000204 	addi	r8,r8,8
 400e054:	003f3506 	br	400dd2c <__alt_mem_epcs_flash_controller_0+0xfb00cd2c>
 400e058:	01010234 	movhi	r4,1032
 400e05c:	212fef84 	addi	r4,r4,-16450
 400e060:	d9002b15 	stw	r4,172(sp)
 400e064:	003c5e06 	br	400d1e0 <__alt_mem_epcs_flash_controller_0+0xfb00c1e0>
 400e068:	d9402c17 	ldw	r5,176(sp)
 400e06c:	d9801e04 	addi	r6,sp,120
 400e070:	9809883a 	mov	r4,r19
 400e074:	401570c0 	call	401570c <__ssprint_r>
 400e078:	103b011e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e07c:	d8c02017 	ldw	r3,128(sp)
 400e080:	da000404 	addi	r8,sp,16
 400e084:	003d9306 	br	400d6d4 <__alt_mem_epcs_flash_controller_0+0xfb00c6d4>
 400e088:	d8801f17 	ldw	r2,124(sp)
 400e08c:	01410234 	movhi	r5,1032
 400e090:	01000044 	movi	r4,1
 400e094:	18c00044 	addi	r3,r3,1
 400e098:	10800044 	addi	r2,r2,1
 400e09c:	296fef04 	addi	r5,r5,-16452
 400e0a0:	41000115 	stw	r4,4(r8)
 400e0a4:	41400015 	stw	r5,0(r8)
 400e0a8:	d8c02015 	stw	r3,128(sp)
 400e0ac:	d8801f15 	stw	r2,124(sp)
 400e0b0:	010001c4 	movi	r4,7
 400e0b4:	2080b516 	blt	r4,r2,400e38c <___svfprintf_internal_r+0x1aa0>
 400e0b8:	42000204 	addi	r8,r8,8
 400e0bc:	8800041e 	bne	r17,zero,400e0d0 <___svfprintf_internal_r+0x17e4>
 400e0c0:	d8803317 	ldw	r2,204(sp)
 400e0c4:	1000021e 	bne	r2,zero,400e0d0 <___svfprintf_internal_r+0x17e4>
 400e0c8:	9080004c 	andi	r2,r18,1
 400e0cc:	103c5b26 	beq	r2,zero,400d23c <__alt_mem_epcs_flash_controller_0+0xfb00c23c>
 400e0d0:	d9003817 	ldw	r4,224(sp)
 400e0d4:	d8801f17 	ldw	r2,124(sp)
 400e0d8:	d9403417 	ldw	r5,208(sp)
 400e0dc:	20c7883a 	add	r3,r4,r3
 400e0e0:	10800044 	addi	r2,r2,1
 400e0e4:	41000115 	stw	r4,4(r8)
 400e0e8:	41400015 	stw	r5,0(r8)
 400e0ec:	d8c02015 	stw	r3,128(sp)
 400e0f0:	d8801f15 	stw	r2,124(sp)
 400e0f4:	010001c4 	movi	r4,7
 400e0f8:	20818016 	blt	r4,r2,400e6fc <___svfprintf_internal_r+0x1e10>
 400e0fc:	42000204 	addi	r8,r8,8
 400e100:	0463c83a 	sub	r17,zero,r17
 400e104:	0440cb0e 	bge	zero,r17,400e434 <___svfprintf_internal_r+0x1b48>
 400e108:	05800404 	movi	r22,16
 400e10c:	b440e80e 	bge	r22,r17,400e4b0 <___svfprintf_internal_r+0x1bc4>
 400e110:	01410234 	movhi	r5,1032
 400e114:	296fef84 	addi	r5,r5,-16450
 400e118:	d9402b15 	stw	r5,172(sp)
 400e11c:	070001c4 	movi	fp,7
 400e120:	dd002c17 	ldw	r20,176(sp)
 400e124:	00000306 	br	400e134 <___svfprintf_internal_r+0x1848>
 400e128:	42000204 	addi	r8,r8,8
 400e12c:	8c7ffc04 	addi	r17,r17,-16
 400e130:	b440e20e 	bge	r22,r17,400e4bc <___svfprintf_internal_r+0x1bd0>
 400e134:	18c00404 	addi	r3,r3,16
 400e138:	10800044 	addi	r2,r2,1
 400e13c:	45400015 	stw	r21,0(r8)
 400e140:	45800115 	stw	r22,4(r8)
 400e144:	d8c02015 	stw	r3,128(sp)
 400e148:	d8801f15 	stw	r2,124(sp)
 400e14c:	e0bff60e 	bge	fp,r2,400e128 <__alt_mem_epcs_flash_controller_0+0xfb00d128>
 400e150:	d9801e04 	addi	r6,sp,120
 400e154:	a00b883a 	mov	r5,r20
 400e158:	9809883a 	mov	r4,r19
 400e15c:	401570c0 	call	401570c <__ssprint_r>
 400e160:	103ac71e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e164:	d8c02017 	ldw	r3,128(sp)
 400e168:	d8801f17 	ldw	r2,124(sp)
 400e16c:	da000404 	addi	r8,sp,16
 400e170:	003fee06 	br	400e12c <__alt_mem_epcs_flash_controller_0+0xfb00d12c>
 400e174:	d8c02d17 	ldw	r3,180(sp)
 400e178:	d9002917 	ldw	r4,164(sp)
 400e17c:	002d883a 	mov	r22,zero
 400e180:	18800104 	addi	r2,r3,4
 400e184:	1d000017 	ldw	r20,0(r3)
 400e188:	203e7d0e 	bge	r4,zero,400db80 <__alt_mem_epcs_flash_controller_0+0xfb00cb80>
 400e18c:	003eda06 	br	400dcf8 <__alt_mem_epcs_flash_controller_0+0xfb00ccf8>
 400e190:	d9402d17 	ldw	r5,180(sp)
 400e194:	d8c02917 	ldw	r3,164(sp)
 400e198:	002d883a 	mov	r22,zero
 400e19c:	28800104 	addi	r2,r5,4
 400e1a0:	2d000017 	ldw	r20,0(r5)
 400e1a4:	183e2d0e 	bge	r3,zero,400da5c <__alt_mem_epcs_flash_controller_0+0xfb00ca5c>
 400e1a8:	003f6b06 	br	400df58 <__alt_mem_epcs_flash_controller_0+0xfb00cf58>
 400e1ac:	d8c02d15 	stw	r3,180(sp)
 400e1b0:	0039883a 	mov	fp,zero
 400e1b4:	003ed206 	br	400dd00 <__alt_mem_epcs_flash_controller_0+0xfb00cd00>
 400e1b8:	bc400043 	ldbu	r17,1(r23)
 400e1bc:	94800814 	ori	r18,r18,32
 400e1c0:	bdc00044 	addi	r23,r23,1
 400e1c4:	8c403fcc 	andi	r17,r17,255
 400e1c8:	8c40201c 	xori	r17,r17,128
 400e1cc:	8c7fe004 	addi	r17,r17,-128
 400e1d0:	003a1a06 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400e1d4:	d9402c17 	ldw	r5,176(sp)
 400e1d8:	d9801e04 	addi	r6,sp,120
 400e1dc:	9809883a 	mov	r4,r19
 400e1e0:	401570c0 	call	401570c <__ssprint_r>
 400e1e4:	103aa61e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e1e8:	d8c02017 	ldw	r3,128(sp)
 400e1ec:	da000404 	addi	r8,sp,16
 400e1f0:	003d4a06 	br	400d71c <__alt_mem_epcs_flash_controller_0+0xfb00c71c>
 400e1f4:	d9002917 	ldw	r4,164(sp)
 400e1f8:	05bff7c4 	movi	r22,-33
 400e1fc:	00bfffc4 	movi	r2,-1
 400e200:	8dac703a 	and	r22,r17,r22
 400e204:	20806a26 	beq	r4,r2,400e3b0 <___svfprintf_internal_r+0x1ac4>
 400e208:	008011c4 	movi	r2,71
 400e20c:	b0813726 	beq	r22,r2,400e6ec <___svfprintf_internal_r+0x1e00>
 400e210:	d9003717 	ldw	r4,220(sp)
 400e214:	90c04014 	ori	r3,r18,256
 400e218:	d8c02b15 	stw	r3,172(sp)
 400e21c:	20015d16 	blt	r4,zero,400e794 <___svfprintf_internal_r+0x1ea8>
 400e220:	dd003717 	ldw	r20,220(sp)
 400e224:	d8002a05 	stb	zero,168(sp)
 400e228:	00801984 	movi	r2,102
 400e22c:	88814026 	beq	r17,r2,400e730 <___svfprintf_internal_r+0x1e44>
 400e230:	00801184 	movi	r2,70
 400e234:	88817126 	beq	r17,r2,400e7fc <___svfprintf_internal_r+0x1f10>
 400e238:	00801144 	movi	r2,69
 400e23c:	b0816226 	beq	r22,r2,400e7c8 <___svfprintf_internal_r+0x1edc>
 400e240:	d8c02917 	ldw	r3,164(sp)
 400e244:	d8802104 	addi	r2,sp,132
 400e248:	d8800315 	stw	r2,12(sp)
 400e24c:	d9403617 	ldw	r5,216(sp)
 400e250:	d8802504 	addi	r2,sp,148
 400e254:	d8800215 	stw	r2,8(sp)
 400e258:	d8802604 	addi	r2,sp,152
 400e25c:	d8c00015 	stw	r3,0(sp)
 400e260:	d8800115 	stw	r2,4(sp)
 400e264:	01c00084 	movi	r7,2
 400e268:	a00d883a 	mov	r6,r20
 400e26c:	9809883a 	mov	r4,r19
 400e270:	d8c03d15 	stw	r3,244(sp)
 400e274:	da003e15 	stw	r8,248(sp)
 400e278:	401120c0 	call	401120c <_dtoa_r>
 400e27c:	1021883a 	mov	r16,r2
 400e280:	008019c4 	movi	r2,103
 400e284:	d8c03d17 	ldw	r3,244(sp)
 400e288:	da003e17 	ldw	r8,248(sp)
 400e28c:	8880e726 	beq	r17,r2,400e62c <___svfprintf_internal_r+0x1d40>
 400e290:	008011c4 	movi	r2,71
 400e294:	8880d426 	beq	r17,r2,400e5e8 <___svfprintf_internal_r+0x1cfc>
 400e298:	80f9883a 	add	fp,r16,r3
 400e29c:	d9003617 	ldw	r4,216(sp)
 400e2a0:	000d883a 	mov	r6,zero
 400e2a4:	000f883a 	mov	r7,zero
 400e2a8:	a00b883a 	mov	r5,r20
 400e2ac:	da003e15 	stw	r8,248(sp)
 400e2b0:	40195440 	call	4019544 <__eqdf2>
 400e2b4:	da003e17 	ldw	r8,248(sp)
 400e2b8:	1000e426 	beq	r2,zero,400e64c <___svfprintf_internal_r+0x1d60>
 400e2bc:	d8802117 	ldw	r2,132(sp)
 400e2c0:	1700062e 	bgeu	r2,fp,400e2dc <___svfprintf_internal_r+0x19f0>
 400e2c4:	01000c04 	movi	r4,48
 400e2c8:	10c00044 	addi	r3,r2,1
 400e2cc:	d8c02115 	stw	r3,132(sp)
 400e2d0:	11000005 	stb	r4,0(r2)
 400e2d4:	d8802117 	ldw	r2,132(sp)
 400e2d8:	173ffb36 	bltu	r2,fp,400e2c8 <__alt_mem_epcs_flash_controller_0+0xfb00d2c8>
 400e2dc:	1405c83a 	sub	r2,r2,r16
 400e2e0:	d8803315 	stw	r2,204(sp)
 400e2e4:	008011c4 	movi	r2,71
 400e2e8:	b080c526 	beq	r22,r2,400e600 <___svfprintf_internal_r+0x1d14>
 400e2ec:	00801944 	movi	r2,101
 400e2f0:	1441d90e 	bge	r2,r17,400ea58 <___svfprintf_internal_r+0x216c>
 400e2f4:	d8c02617 	ldw	r3,152(sp)
 400e2f8:	00801984 	movi	r2,102
 400e2fc:	d8c03215 	stw	r3,200(sp)
 400e300:	88813426 	beq	r17,r2,400e7d4 <___svfprintf_internal_r+0x1ee8>
 400e304:	d8c03217 	ldw	r3,200(sp)
 400e308:	d9003317 	ldw	r4,204(sp)
 400e30c:	19012516 	blt	r3,r4,400e7a4 <___svfprintf_internal_r+0x1eb8>
 400e310:	9480004c 	andi	r18,r18,1
 400e314:	9001841e 	bne	r18,zero,400e928 <___svfprintf_internal_r+0x203c>
 400e318:	1805883a 	mov	r2,r3
 400e31c:	1801cc16 	blt	r3,zero,400ea50 <___svfprintf_internal_r+0x2164>
 400e320:	d8c03217 	ldw	r3,200(sp)
 400e324:	044019c4 	movi	r17,103
 400e328:	d8c02e15 	stw	r3,184(sp)
 400e32c:	df002a07 	ldb	fp,168(sp)
 400e330:	e000a61e 	bne	fp,zero,400e5cc <___svfprintf_internal_r+0x1ce0>
 400e334:	df002783 	ldbu	fp,158(sp)
 400e338:	d8802a15 	stw	r2,168(sp)
 400e33c:	dc802b17 	ldw	r18,172(sp)
 400e340:	d8002915 	stw	zero,164(sp)
 400e344:	003b1706 	br	400cfa4 <__alt_mem_epcs_flash_controller_0+0xfb00bfa4>
 400e348:	04010234 	movhi	r16,1032
 400e34c:	842fdf04 	addi	r16,r16,-16516
 400e350:	003aa606 	br	400cdec <__alt_mem_epcs_flash_controller_0+0xfb00bdec>
 400e354:	d9003917 	ldw	r4,228(sp)
 400e358:	04001004 	movi	r16,64
 400e35c:	800b883a 	mov	r5,r16
 400e360:	400bad00 	call	400bad0 <_malloc_r>
 400e364:	d9002c17 	ldw	r4,176(sp)
 400e368:	20800015 	stw	r2,0(r4)
 400e36c:	20800415 	stw	r2,16(r4)
 400e370:	1001cb26 	beq	r2,zero,400eaa0 <___svfprintf_internal_r+0x21b4>
 400e374:	d8802c17 	ldw	r2,176(sp)
 400e378:	14000515 	stw	r16,20(r2)
 400e37c:	00397606 	br	400c958 <__alt_mem_epcs_flash_controller_0+0xfb00b958>
 400e380:	04010234 	movhi	r16,1032
 400e384:	842fe104 	addi	r16,r16,-16508
 400e388:	003ee106 	br	400df10 <__alt_mem_epcs_flash_controller_0+0xfb00cf10>
 400e38c:	d9402c17 	ldw	r5,176(sp)
 400e390:	d9801e04 	addi	r6,sp,120
 400e394:	9809883a 	mov	r4,r19
 400e398:	401570c0 	call	401570c <__ssprint_r>
 400e39c:	103a381e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e3a0:	dc402617 	ldw	r17,152(sp)
 400e3a4:	d8c02017 	ldw	r3,128(sp)
 400e3a8:	da000404 	addi	r8,sp,16
 400e3ac:	003f4306 	br	400e0bc <__alt_mem_epcs_flash_controller_0+0xfb00d0bc>
 400e3b0:	01400184 	movi	r5,6
 400e3b4:	d9402915 	stw	r5,164(sp)
 400e3b8:	003f9506 	br	400e210 <__alt_mem_epcs_flash_controller_0+0xfb00d210>
 400e3bc:	d9002d17 	ldw	r4,180(sp)
 400e3c0:	25000017 	ldw	r20,0(r4)
 400e3c4:	21000104 	addi	r4,r4,4
 400e3c8:	d9002d15 	stw	r4,180(sp)
 400e3cc:	a02dd7fa 	srai	r22,r20,31
 400e3d0:	b005883a 	mov	r2,r22
 400e3d4:	003a9b06 	br	400ce44 <__alt_mem_epcs_flash_controller_0+0xfb00be44>
 400e3d8:	d9402d17 	ldw	r5,180(sp)
 400e3dc:	002d883a 	mov	r22,zero
 400e3e0:	2d000017 	ldw	r20,0(r5)
 400e3e4:	29400104 	addi	r5,r5,4
 400e3e8:	d9402d15 	stw	r5,180(sp)
 400e3ec:	003bf906 	br	400d3d4 <__alt_mem_epcs_flash_controller_0+0xfb00c3d4>
 400e3f0:	9480100c 	andi	r18,r18,64
 400e3f4:	90006e26 	beq	r18,zero,400e5b0 <___svfprintf_internal_r+0x1cc4>
 400e3f8:	d9002d17 	ldw	r4,180(sp)
 400e3fc:	d9402f17 	ldw	r5,188(sp)
 400e400:	20800017 	ldw	r2,0(r4)
 400e404:	21000104 	addi	r4,r4,4
 400e408:	d9002d15 	stw	r4,180(sp)
 400e40c:	1140000d 	sth	r5,0(r2)
 400e410:	00396106 	br	400c998 <__alt_mem_epcs_flash_controller_0+0xfb00b998>
 400e414:	d9402c17 	ldw	r5,176(sp)
 400e418:	d9801e04 	addi	r6,sp,120
 400e41c:	9809883a 	mov	r4,r19
 400e420:	401570c0 	call	401570c <__ssprint_r>
 400e424:	103a161e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e428:	d8c02017 	ldw	r3,128(sp)
 400e42c:	d8801f17 	ldw	r2,124(sp)
 400e430:	da000404 	addi	r8,sp,16
 400e434:	d9403317 	ldw	r5,204(sp)
 400e438:	10800044 	addi	r2,r2,1
 400e43c:	44000015 	stw	r16,0(r8)
 400e440:	28c7883a 	add	r3,r5,r3
 400e444:	003b7706 	br	400d224 <__alt_mem_epcs_flash_controller_0+0xfb00c224>
 400e448:	8009883a 	mov	r4,r16
 400e44c:	da003e15 	stw	r8,248(sp)
 400e450:	400c8540 	call	400c854 <strlen>
 400e454:	d8802e15 	stw	r2,184(sp)
 400e458:	da003e17 	ldw	r8,248(sp)
 400e45c:	103c280e 	bge	r2,zero,400d500 <__alt_mem_epcs_flash_controller_0+0xfb00c500>
 400e460:	0005883a 	mov	r2,zero
 400e464:	003c2606 	br	400d500 <__alt_mem_epcs_flash_controller_0+0xfb00c500>
 400e468:	00bfffc4 	movi	r2,-1
 400e46c:	003a0906 	br	400cc94 <__alt_mem_epcs_flash_controller_0+0xfb00bc94>
 400e470:	01010234 	movhi	r4,1032
 400e474:	212ff384 	addi	r4,r4,-16434
 400e478:	d9003515 	stw	r4,212(sp)
 400e47c:	003b0606 	br	400d098 <__alt_mem_epcs_flash_controller_0+0xfb00c098>
 400e480:	013fffc4 	movi	r4,-1
 400e484:	003a2706 	br	400cd24 <__alt_mem_epcs_flash_controller_0+0xfb00bd24>
 400e488:	d9402c17 	ldw	r5,176(sp)
 400e48c:	d9801e04 	addi	r6,sp,120
 400e490:	9809883a 	mov	r4,r19
 400e494:	401570c0 	call	401570c <__ssprint_r>
 400e498:	1039f91e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e49c:	d8c02017 	ldw	r3,128(sp)
 400e4a0:	da000404 	addi	r8,sp,16
 400e4a4:	003d8406 	br	400dab8 <__alt_mem_epcs_flash_controller_0+0xfb00cab8>
 400e4a8:	0023883a 	mov	r17,zero
 400e4ac:	003d8306 	br	400dabc <__alt_mem_epcs_flash_controller_0+0xfb00cabc>
 400e4b0:	01010234 	movhi	r4,1032
 400e4b4:	212fef84 	addi	r4,r4,-16450
 400e4b8:	d9002b15 	stw	r4,172(sp)
 400e4bc:	d9002b17 	ldw	r4,172(sp)
 400e4c0:	1c47883a 	add	r3,r3,r17
 400e4c4:	10800044 	addi	r2,r2,1
 400e4c8:	41000015 	stw	r4,0(r8)
 400e4cc:	44400115 	stw	r17,4(r8)
 400e4d0:	d8c02015 	stw	r3,128(sp)
 400e4d4:	d8801f15 	stw	r2,124(sp)
 400e4d8:	010001c4 	movi	r4,7
 400e4dc:	20bfcd16 	blt	r4,r2,400e414 <__alt_mem_epcs_flash_controller_0+0xfb00d414>
 400e4e0:	42000204 	addi	r8,r8,8
 400e4e4:	003fd306 	br	400e434 <__alt_mem_epcs_flash_controller_0+0xfb00d434>
 400e4e8:	d9402c17 	ldw	r5,176(sp)
 400e4ec:	d9801e04 	addi	r6,sp,120
 400e4f0:	9809883a 	mov	r4,r19
 400e4f4:	401570c0 	call	401570c <__ssprint_r>
 400e4f8:	1039e11e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e4fc:	d8802617 	ldw	r2,152(sp)
 400e500:	d8c02017 	ldw	r3,128(sp)
 400e504:	da000404 	addi	r8,sp,16
 400e508:	003e1c06 	br	400dd7c <__alt_mem_epcs_flash_controller_0+0xfb00cd7c>
 400e50c:	d8802917 	ldw	r2,164(sp)
 400e510:	00c00184 	movi	r3,6
 400e514:	1880012e 	bgeu	r3,r2,400e51c <___svfprintf_internal_r+0x1c30>
 400e518:	1805883a 	mov	r2,r3
 400e51c:	d8802e15 	stw	r2,184(sp)
 400e520:	1000f316 	blt	r2,zero,400e8f0 <___svfprintf_internal_r+0x2004>
 400e524:	04010234 	movhi	r16,1032
 400e528:	d8802a15 	stw	r2,168(sp)
 400e52c:	dd002d15 	stw	r20,180(sp)
 400e530:	d8002915 	stw	zero,164(sp)
 400e534:	d8003215 	stw	zero,200(sp)
 400e538:	842fed04 	addi	r16,r16,-16460
 400e53c:	0039883a 	mov	fp,zero
 400e540:	003a9f06 	br	400cfc0 <__alt_mem_epcs_flash_controller_0+0xfb00bfc0>
 400e544:	01010234 	movhi	r4,1032
 400e548:	212ff384 	addi	r4,r4,-16434
 400e54c:	d9003515 	stw	r4,212(sp)
 400e550:	003b5f06 	br	400d2d0 <__alt_mem_epcs_flash_controller_0+0xfb00c2d0>
 400e554:	d9402c17 	ldw	r5,176(sp)
 400e558:	d9801e04 	addi	r6,sp,120
 400e55c:	9809883a 	mov	r4,r19
 400e560:	401570c0 	call	401570c <__ssprint_r>
 400e564:	1039c61e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e568:	d8802617 	ldw	r2,152(sp)
 400e56c:	d9403317 	ldw	r5,204(sp)
 400e570:	d8c02017 	ldw	r3,128(sp)
 400e574:	da000404 	addi	r8,sp,16
 400e578:	2885c83a 	sub	r2,r5,r2
 400e57c:	003e1006 	br	400ddc0 <__alt_mem_epcs_flash_controller_0+0xfb00cdc0>
 400e580:	00800044 	movi	r2,1
 400e584:	10803fcc 	andi	r2,r2,255
 400e588:	00c00044 	movi	r3,1
 400e58c:	10fa3526 	beq	r2,r3,400ce64 <__alt_mem_epcs_flash_controller_0+0xfb00be64>
 400e590:	00c00084 	movi	r3,2
 400e594:	10fb9e26 	beq	r2,r3,400d410 <__alt_mem_epcs_flash_controller_0+0xfb00c410>
 400e598:	003a6406 	br	400cf2c <__alt_mem_epcs_flash_controller_0+0xfb00bf2c>
 400e59c:	0021883a 	mov	r16,zero
 400e5a0:	003e0806 	br	400ddc4 <__alt_mem_epcs_flash_controller_0+0xfb00cdc4>
 400e5a4:	07000b44 	movi	fp,45
 400e5a8:	df002785 	stb	fp,158(sp)
 400e5ac:	003a0b06 	br	400cddc <__alt_mem_epcs_flash_controller_0+0xfb00bddc>
 400e5b0:	d8c02d17 	ldw	r3,180(sp)
 400e5b4:	d9002f17 	ldw	r4,188(sp)
 400e5b8:	18800017 	ldw	r2,0(r3)
 400e5bc:	18c00104 	addi	r3,r3,4
 400e5c0:	d8c02d15 	stw	r3,180(sp)
 400e5c4:	11000015 	stw	r4,0(r2)
 400e5c8:	0038f306 	br	400c998 <__alt_mem_epcs_flash_controller_0+0xfb00b998>
 400e5cc:	00c00b44 	movi	r3,45
 400e5d0:	d8c02785 	stb	r3,158(sp)
 400e5d4:	d8802a15 	stw	r2,168(sp)
 400e5d8:	dc802b17 	ldw	r18,172(sp)
 400e5dc:	d8002915 	stw	zero,164(sp)
 400e5e0:	07000b44 	movi	fp,45
 400e5e4:	003a7306 	br	400cfb4 <__alt_mem_epcs_flash_controller_0+0xfb00bfb4>
 400e5e8:	9080004c 	andi	r2,r18,1
 400e5ec:	1000941e 	bne	r2,zero,400e840 <___svfprintf_internal_r+0x1f54>
 400e5f0:	d8802117 	ldw	r2,132(sp)
 400e5f4:	1405c83a 	sub	r2,r2,r16
 400e5f8:	d8803315 	stw	r2,204(sp)
 400e5fc:	b441161e 	bne	r22,r17,400ea58 <___svfprintf_internal_r+0x216c>
 400e600:	dd802617 	ldw	r22,152(sp)
 400e604:	00bfff44 	movi	r2,-3
 400e608:	b0801a16 	blt	r22,r2,400e674 <___svfprintf_internal_r+0x1d88>
 400e60c:	d9402917 	ldw	r5,164(sp)
 400e610:	2d801816 	blt	r5,r22,400e674 <___svfprintf_internal_r+0x1d88>
 400e614:	dd803215 	stw	r22,200(sp)
 400e618:	003f3a06 	br	400e304 <__alt_mem_epcs_flash_controller_0+0xfb00d304>
 400e61c:	1025883a 	mov	r18,r2
 400e620:	0039883a 	mov	fp,zero
 400e624:	00800084 	movi	r2,2
 400e628:	003fd606 	br	400e584 <__alt_mem_epcs_flash_controller_0+0xfb00d584>
 400e62c:	9080004c 	andi	r2,r18,1
 400e630:	103f191e 	bne	r2,zero,400e298 <__alt_mem_epcs_flash_controller_0+0xfb00d298>
 400e634:	d8802117 	ldw	r2,132(sp)
 400e638:	003f2806 	br	400e2dc <__alt_mem_epcs_flash_controller_0+0xfb00d2dc>
 400e63c:	01010234 	movhi	r4,1032
 400e640:	212fef84 	addi	r4,r4,-16450
 400e644:	d9002b15 	stw	r4,172(sp)
 400e648:	003c7c06 	br	400d83c <__alt_mem_epcs_flash_controller_0+0xfb00c83c>
 400e64c:	e005883a 	mov	r2,fp
 400e650:	003f2206 	br	400e2dc <__alt_mem_epcs_flash_controller_0+0xfb00d2dc>
 400e654:	d9402917 	ldw	r5,164(sp)
 400e658:	df002783 	ldbu	fp,158(sp)
 400e65c:	dd002d15 	stw	r20,180(sp)
 400e660:	d9402a15 	stw	r5,168(sp)
 400e664:	d9402e15 	stw	r5,184(sp)
 400e668:	d8002915 	stw	zero,164(sp)
 400e66c:	d8003215 	stw	zero,200(sp)
 400e670:	003a4c06 	br	400cfa4 <__alt_mem_epcs_flash_controller_0+0xfb00bfa4>
 400e674:	8c7fff84 	addi	r17,r17,-2
 400e678:	b5bfffc4 	addi	r22,r22,-1
 400e67c:	dd802615 	stw	r22,152(sp)
 400e680:	dc4022c5 	stb	r17,139(sp)
 400e684:	b000c316 	blt	r22,zero,400e994 <___svfprintf_internal_r+0x20a8>
 400e688:	00800ac4 	movi	r2,43
 400e68c:	d8802305 	stb	r2,140(sp)
 400e690:	00800244 	movi	r2,9
 400e694:	15806e16 	blt	r2,r22,400e850 <___svfprintf_internal_r+0x1f64>
 400e698:	00800c04 	movi	r2,48
 400e69c:	b5800c04 	addi	r22,r22,48
 400e6a0:	d8802345 	stb	r2,141(sp)
 400e6a4:	dd802385 	stb	r22,142(sp)
 400e6a8:	d88023c4 	addi	r2,sp,143
 400e6ac:	df0022c4 	addi	fp,sp,139
 400e6b0:	d8c03317 	ldw	r3,204(sp)
 400e6b4:	1739c83a 	sub	fp,r2,fp
 400e6b8:	d9003317 	ldw	r4,204(sp)
 400e6bc:	e0c7883a 	add	r3,fp,r3
 400e6c0:	df003b15 	stw	fp,236(sp)
 400e6c4:	d8c02e15 	stw	r3,184(sp)
 400e6c8:	00800044 	movi	r2,1
 400e6cc:	1100b70e 	bge	r2,r4,400e9ac <___svfprintf_internal_r+0x20c0>
 400e6d0:	d8c02e17 	ldw	r3,184(sp)
 400e6d4:	18c00044 	addi	r3,r3,1
 400e6d8:	d8c02e15 	stw	r3,184(sp)
 400e6dc:	1805883a 	mov	r2,r3
 400e6e0:	1800b016 	blt	r3,zero,400e9a4 <___svfprintf_internal_r+0x20b8>
 400e6e4:	d8003215 	stw	zero,200(sp)
 400e6e8:	003f1006 	br	400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e6ec:	d8802917 	ldw	r2,164(sp)
 400e6f0:	103ec71e 	bne	r2,zero,400e210 <__alt_mem_epcs_flash_controller_0+0xfb00d210>
 400e6f4:	dc002915 	stw	r16,164(sp)
 400e6f8:	003ec506 	br	400e210 <__alt_mem_epcs_flash_controller_0+0xfb00d210>
 400e6fc:	d9402c17 	ldw	r5,176(sp)
 400e700:	d9801e04 	addi	r6,sp,120
 400e704:	9809883a 	mov	r4,r19
 400e708:	401570c0 	call	401570c <__ssprint_r>
 400e70c:	10395c1e 	bne	r2,zero,400cc80 <__alt_mem_epcs_flash_controller_0+0xfb00bc80>
 400e710:	dc402617 	ldw	r17,152(sp)
 400e714:	d8c02017 	ldw	r3,128(sp)
 400e718:	d8801f17 	ldw	r2,124(sp)
 400e71c:	da000404 	addi	r8,sp,16
 400e720:	003e7706 	br	400e100 <__alt_mem_epcs_flash_controller_0+0xfb00d100>
 400e724:	582f883a 	mov	r23,r11
 400e728:	d8002915 	stw	zero,164(sp)
 400e72c:	0038c406 	br	400ca40 <__alt_mem_epcs_flash_controller_0+0xfb00ba40>
 400e730:	d8c02917 	ldw	r3,164(sp)
 400e734:	d8802104 	addi	r2,sp,132
 400e738:	d8800315 	stw	r2,12(sp)
 400e73c:	d9403617 	ldw	r5,216(sp)
 400e740:	d8802504 	addi	r2,sp,148
 400e744:	d8800215 	stw	r2,8(sp)
 400e748:	d8802604 	addi	r2,sp,152
 400e74c:	d8c00015 	stw	r3,0(sp)
 400e750:	9809883a 	mov	r4,r19
 400e754:	d8800115 	stw	r2,4(sp)
 400e758:	01c000c4 	movi	r7,3
 400e75c:	a00d883a 	mov	r6,r20
 400e760:	da003e15 	stw	r8,248(sp)
 400e764:	401120c0 	call	401120c <_dtoa_r>
 400e768:	d9002917 	ldw	r4,164(sp)
 400e76c:	da003e17 	ldw	r8,248(sp)
 400e770:	1021883a 	mov	r16,r2
 400e774:	1139883a 	add	fp,r2,r4
 400e778:	2007883a 	mov	r3,r4
 400e77c:	81000007 	ldb	r4,0(r16)
 400e780:	00800c04 	movi	r2,48
 400e784:	20806f26 	beq	r4,r2,400e944 <___svfprintf_internal_r+0x2058>
 400e788:	d8c02617 	ldw	r3,152(sp)
 400e78c:	e0f9883a 	add	fp,fp,r3
 400e790:	003ec206 	br	400e29c <__alt_mem_epcs_flash_controller_0+0xfb00d29c>
 400e794:	00c00b44 	movi	r3,45
 400e798:	2520003c 	xorhi	r20,r4,32768
 400e79c:	d8c02a05 	stb	r3,168(sp)
 400e7a0:	003ea106 	br	400e228 <__alt_mem_epcs_flash_controller_0+0xfb00d228>
 400e7a4:	d8c03217 	ldw	r3,200(sp)
 400e7a8:	00c0890e 	bge	zero,r3,400e9d0 <___svfprintf_internal_r+0x20e4>
 400e7ac:	00800044 	movi	r2,1
 400e7b0:	d9003317 	ldw	r4,204(sp)
 400e7b4:	1105883a 	add	r2,r2,r4
 400e7b8:	d8802e15 	stw	r2,184(sp)
 400e7bc:	10005f16 	blt	r2,zero,400e93c <___svfprintf_internal_r+0x2050>
 400e7c0:	044019c4 	movi	r17,103
 400e7c4:	003ed906 	br	400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e7c8:	d9002917 	ldw	r4,164(sp)
 400e7cc:	20c00044 	addi	r3,r4,1
 400e7d0:	003e9c06 	br	400e244 <__alt_mem_epcs_flash_controller_0+0xfb00d244>
 400e7d4:	d9002917 	ldw	r4,164(sp)
 400e7d8:	00c0680e 	bge	zero,r3,400e97c <___svfprintf_internal_r+0x2090>
 400e7dc:	2000461e 	bne	r4,zero,400e8f8 <___svfprintf_internal_r+0x200c>
 400e7e0:	9480004c 	andi	r18,r18,1
 400e7e4:	9000441e 	bne	r18,zero,400e8f8 <___svfprintf_internal_r+0x200c>
 400e7e8:	1805883a 	mov	r2,r3
 400e7ec:	1800a016 	blt	r3,zero,400ea70 <___svfprintf_internal_r+0x2184>
 400e7f0:	d8c03217 	ldw	r3,200(sp)
 400e7f4:	d8c02e15 	stw	r3,184(sp)
 400e7f8:	003ecc06 	br	400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e7fc:	d9402917 	ldw	r5,164(sp)
 400e800:	d8802104 	addi	r2,sp,132
 400e804:	d8800315 	stw	r2,12(sp)
 400e808:	d9400015 	stw	r5,0(sp)
 400e80c:	d8802504 	addi	r2,sp,148
 400e810:	d9403617 	ldw	r5,216(sp)
 400e814:	d8800215 	stw	r2,8(sp)
 400e818:	d8802604 	addi	r2,sp,152
 400e81c:	d8800115 	stw	r2,4(sp)
 400e820:	01c000c4 	movi	r7,3
 400e824:	a00d883a 	mov	r6,r20
 400e828:	9809883a 	mov	r4,r19
 400e82c:	da003e15 	stw	r8,248(sp)
 400e830:	401120c0 	call	401120c <_dtoa_r>
 400e834:	d8c02917 	ldw	r3,164(sp)
 400e838:	da003e17 	ldw	r8,248(sp)
 400e83c:	1021883a 	mov	r16,r2
 400e840:	00801184 	movi	r2,70
 400e844:	80f9883a 	add	fp,r16,r3
 400e848:	88bfcc26 	beq	r17,r2,400e77c <__alt_mem_epcs_flash_controller_0+0xfb00d77c>
 400e84c:	003e9306 	br	400e29c <__alt_mem_epcs_flash_controller_0+0xfb00d29c>
 400e850:	df0022c4 	addi	fp,sp,139
 400e854:	dc002915 	stw	r16,164(sp)
 400e858:	9829883a 	mov	r20,r19
 400e85c:	e021883a 	mov	r16,fp
 400e860:	4027883a 	mov	r19,r8
 400e864:	b009883a 	mov	r4,r22
 400e868:	01400284 	movi	r5,10
 400e86c:	400950c0 	call	400950c <__modsi3>
 400e870:	10800c04 	addi	r2,r2,48
 400e874:	843fffc4 	addi	r16,r16,-1
 400e878:	b009883a 	mov	r4,r22
 400e87c:	01400284 	movi	r5,10
 400e880:	80800005 	stb	r2,0(r16)
 400e884:	40094880 	call	4009488 <__divsi3>
 400e888:	102d883a 	mov	r22,r2
 400e88c:	00800244 	movi	r2,9
 400e890:	15bff416 	blt	r2,r22,400e864 <__alt_mem_epcs_flash_controller_0+0xfb00d864>
 400e894:	9811883a 	mov	r8,r19
 400e898:	b0800c04 	addi	r2,r22,48
 400e89c:	a027883a 	mov	r19,r20
 400e8a0:	8029883a 	mov	r20,r16
 400e8a4:	a17fffc4 	addi	r5,r20,-1
 400e8a8:	a0bfffc5 	stb	r2,-1(r20)
 400e8ac:	dc002917 	ldw	r16,164(sp)
 400e8b0:	2f00752e 	bgeu	r5,fp,400ea88 <___svfprintf_internal_r+0x219c>
 400e8b4:	d9c02384 	addi	r7,sp,142
 400e8b8:	3d0fc83a 	sub	r7,r7,r20
 400e8bc:	d9002344 	addi	r4,sp,141
 400e8c0:	e1cf883a 	add	r7,fp,r7
 400e8c4:	00000106 	br	400e8cc <___svfprintf_internal_r+0x1fe0>
 400e8c8:	28800003 	ldbu	r2,0(r5)
 400e8cc:	20800005 	stb	r2,0(r4)
 400e8d0:	21000044 	addi	r4,r4,1
 400e8d4:	29400044 	addi	r5,r5,1
 400e8d8:	21fffb1e 	bne	r4,r7,400e8c8 <__alt_mem_epcs_flash_controller_0+0xfb00d8c8>
 400e8dc:	d8802304 	addi	r2,sp,140
 400e8e0:	1505c83a 	sub	r2,r2,r20
 400e8e4:	d8c02344 	addi	r3,sp,141
 400e8e8:	1885883a 	add	r2,r3,r2
 400e8ec:	003f7006 	br	400e6b0 <__alt_mem_epcs_flash_controller_0+0xfb00d6b0>
 400e8f0:	0005883a 	mov	r2,zero
 400e8f4:	003f0b06 	br	400e524 <__alt_mem_epcs_flash_controller_0+0xfb00d524>
 400e8f8:	d9002917 	ldw	r4,164(sp)
 400e8fc:	d8c03217 	ldw	r3,200(sp)
 400e900:	20800044 	addi	r2,r4,1
 400e904:	1885883a 	add	r2,r3,r2
 400e908:	d8802e15 	stw	r2,184(sp)
 400e90c:	103e870e 	bge	r2,zero,400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e910:	0005883a 	mov	r2,zero
 400e914:	003e8506 	br	400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e918:	01010234 	movhi	r4,1032
 400e91c:	212fef84 	addi	r4,r4,-16450
 400e920:	d9002b15 	stw	r4,172(sp)
 400e924:	003cc506 	br	400dc3c <__alt_mem_epcs_flash_controller_0+0xfb00cc3c>
 400e928:	d8c03217 	ldw	r3,200(sp)
 400e92c:	18c00044 	addi	r3,r3,1
 400e930:	d8c02e15 	stw	r3,184(sp)
 400e934:	1805883a 	mov	r2,r3
 400e938:	183fa10e 	bge	r3,zero,400e7c0 <__alt_mem_epcs_flash_controller_0+0xfb00d7c0>
 400e93c:	0005883a 	mov	r2,zero
 400e940:	003f9f06 	br	400e7c0 <__alt_mem_epcs_flash_controller_0+0xfb00d7c0>
 400e944:	d9003617 	ldw	r4,216(sp)
 400e948:	000d883a 	mov	r6,zero
 400e94c:	000f883a 	mov	r7,zero
 400e950:	a00b883a 	mov	r5,r20
 400e954:	d8c03d15 	stw	r3,244(sp)
 400e958:	da003e15 	stw	r8,248(sp)
 400e95c:	40195440 	call	4019544 <__eqdf2>
 400e960:	d8c03d17 	ldw	r3,244(sp)
 400e964:	da003e17 	ldw	r8,248(sp)
 400e968:	103f8726 	beq	r2,zero,400e788 <__alt_mem_epcs_flash_controller_0+0xfb00d788>
 400e96c:	00800044 	movi	r2,1
 400e970:	10c7c83a 	sub	r3,r2,r3
 400e974:	d8c02615 	stw	r3,152(sp)
 400e978:	003f8406 	br	400e78c <__alt_mem_epcs_flash_controller_0+0xfb00d78c>
 400e97c:	20000e1e 	bne	r4,zero,400e9b8 <___svfprintf_internal_r+0x20cc>
 400e980:	9480004c 	andi	r18,r18,1
 400e984:	90000c1e 	bne	r18,zero,400e9b8 <___svfprintf_internal_r+0x20cc>
 400e988:	00800044 	movi	r2,1
 400e98c:	d8802e15 	stw	r2,184(sp)
 400e990:	003e6606 	br	400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e994:	00800b44 	movi	r2,45
 400e998:	05adc83a 	sub	r22,zero,r22
 400e99c:	d8802305 	stb	r2,140(sp)
 400e9a0:	003f3b06 	br	400e690 <__alt_mem_epcs_flash_controller_0+0xfb00d690>
 400e9a4:	0005883a 	mov	r2,zero
 400e9a8:	003f4e06 	br	400e6e4 <__alt_mem_epcs_flash_controller_0+0xfb00d6e4>
 400e9ac:	90a4703a 	and	r18,r18,r2
 400e9b0:	903f4a26 	beq	r18,zero,400e6dc <__alt_mem_epcs_flash_controller_0+0xfb00d6dc>
 400e9b4:	003f4606 	br	400e6d0 <__alt_mem_epcs_flash_controller_0+0xfb00d6d0>
 400e9b8:	d8c02917 	ldw	r3,164(sp)
 400e9bc:	18c00084 	addi	r3,r3,2
 400e9c0:	d8c02e15 	stw	r3,184(sp)
 400e9c4:	1805883a 	mov	r2,r3
 400e9c8:	183e580e 	bge	r3,zero,400e32c <__alt_mem_epcs_flash_controller_0+0xfb00d32c>
 400e9cc:	003fd006 	br	400e910 <__alt_mem_epcs_flash_controller_0+0xfb00d910>
 400e9d0:	00800084 	movi	r2,2
 400e9d4:	10c5c83a 	sub	r2,r2,r3
 400e9d8:	003f7506 	br	400e7b0 <__alt_mem_epcs_flash_controller_0+0xfb00d7b0>
 400e9dc:	d8802d17 	ldw	r2,180(sp)
 400e9e0:	d9002d17 	ldw	r4,180(sp)
 400e9e4:	bc400043 	ldbu	r17,1(r23)
 400e9e8:	10800017 	ldw	r2,0(r2)
 400e9ec:	582f883a 	mov	r23,r11
 400e9f0:	d8802915 	stw	r2,164(sp)
 400e9f4:	20800104 	addi	r2,r4,4
 400e9f8:	d9002917 	ldw	r4,164(sp)
 400e9fc:	d8802d15 	stw	r2,180(sp)
 400ea00:	203df00e 	bge	r4,zero,400e1c4 <__alt_mem_epcs_flash_controller_0+0xfb00d1c4>
 400ea04:	8c403fcc 	andi	r17,r17,255
 400ea08:	00bfffc4 	movi	r2,-1
 400ea0c:	8c40201c 	xori	r17,r17,128
 400ea10:	d8802915 	stw	r2,164(sp)
 400ea14:	8c7fe004 	addi	r17,r17,-128
 400ea18:	00380806 	br	400ca3c <__alt_mem_epcs_flash_controller_0+0xfb00ba3c>
 400ea1c:	9080004c 	andi	r2,r18,1
 400ea20:	0039883a 	mov	fp,zero
 400ea24:	10000726 	beq	r2,zero,400ea44 <___svfprintf_internal_r+0x2158>
 400ea28:	d8c02817 	ldw	r3,160(sp)
 400ea2c:	dc001dc4 	addi	r16,sp,119
 400ea30:	00800c04 	movi	r2,48
 400ea34:	1c07c83a 	sub	r3,r3,r16
 400ea38:	d8801dc5 	stb	r2,119(sp)
 400ea3c:	d8c02e15 	stw	r3,184(sp)
 400ea40:	00395206 	br	400cf8c <__alt_mem_epcs_flash_controller_0+0xfb00bf8c>
 400ea44:	d8002e15 	stw	zero,184(sp)
 400ea48:	dc001e04 	addi	r16,sp,120
 400ea4c:	00394f06 	br	400cf8c <__alt_mem_epcs_flash_controller_0+0xfb00bf8c>
 400ea50:	0005883a 	mov	r2,zero
 400ea54:	003e3206 	br	400e320 <__alt_mem_epcs_flash_controller_0+0xfb00d320>
 400ea58:	dd802617 	ldw	r22,152(sp)
 400ea5c:	003f0606 	br	400e678 <__alt_mem_epcs_flash_controller_0+0xfb00d678>
 400ea60:	d9c02785 	stb	r7,158(sp)
 400ea64:	003a5106 	br	400d3ac <__alt_mem_epcs_flash_controller_0+0xfb00c3ac>
 400ea68:	d9c02785 	stb	r7,158(sp)
 400ea6c:	003a3706 	br	400d34c <__alt_mem_epcs_flash_controller_0+0xfb00c34c>
 400ea70:	0005883a 	mov	r2,zero
 400ea74:	003f5e06 	br	400e7f0 <__alt_mem_epcs_flash_controller_0+0xfb00d7f0>
 400ea78:	d9c02785 	stb	r7,158(sp)
 400ea7c:	00391706 	br	400cedc <__alt_mem_epcs_flash_controller_0+0xfb00bedc>
 400ea80:	d9c02785 	stb	r7,158(sp)
 400ea84:	0038e606 	br	400ce20 <__alt_mem_epcs_flash_controller_0+0xfb00be20>
 400ea88:	d8802344 	addi	r2,sp,141
 400ea8c:	003f0806 	br	400e6b0 <__alt_mem_epcs_flash_controller_0+0xfb00d6b0>
 400ea90:	d9c02785 	stb	r7,158(sp)
 400ea94:	0038b706 	br	400cd74 <__alt_mem_epcs_flash_controller_0+0xfb00bd74>
 400ea98:	d9c02785 	stb	r7,158(sp)
 400ea9c:	003adc06 	br	400d610 <__alt_mem_epcs_flash_controller_0+0xfb00c610>
 400eaa0:	d9403917 	ldw	r5,228(sp)
 400eaa4:	00800304 	movi	r2,12
 400eaa8:	28800015 	stw	r2,0(r5)
 400eaac:	00bfffc4 	movi	r2,-1
 400eab0:	00387806 	br	400cc94 <__alt_mem_epcs_flash_controller_0+0xfb00bc94>
 400eab4:	d9c02785 	stb	r7,158(sp)
 400eab8:	003abf06 	br	400d5b8 <__alt_mem_epcs_flash_controller_0+0xfb00c5b8>
 400eabc:	d9c02785 	stb	r7,158(sp)
 400eac0:	003a9b06 	br	400d530 <__alt_mem_epcs_flash_controller_0+0xfb00c530>

0400eac4 <___vfprintf_internal_r>:
 400eac4:	deffb804 	addi	sp,sp,-288
 400eac8:	dfc04715 	stw	ra,284(sp)
 400eacc:	ddc04515 	stw	r23,276(sp)
 400ead0:	dd404315 	stw	r21,268(sp)
 400ead4:	d9002c15 	stw	r4,176(sp)
 400ead8:	282f883a 	mov	r23,r5
 400eadc:	302b883a 	mov	r21,r6
 400eae0:	d9c02d15 	stw	r7,180(sp)
 400eae4:	df004615 	stw	fp,280(sp)
 400eae8:	dd804415 	stw	r22,272(sp)
 400eaec:	dd004215 	stw	r20,264(sp)
 400eaf0:	dcc04115 	stw	r19,260(sp)
 400eaf4:	dc804015 	stw	r18,256(sp)
 400eaf8:	dc403f15 	stw	r17,252(sp)
 400eafc:	dc003e15 	stw	r16,248(sp)
 400eb00:	4013a000 	call	4013a00 <_localeconv_r>
 400eb04:	10800017 	ldw	r2,0(r2)
 400eb08:	1009883a 	mov	r4,r2
 400eb0c:	d8803415 	stw	r2,208(sp)
 400eb10:	400c8540 	call	400c854 <strlen>
 400eb14:	d8803715 	stw	r2,220(sp)
 400eb18:	d8802c17 	ldw	r2,176(sp)
 400eb1c:	10000226 	beq	r2,zero,400eb28 <___vfprintf_internal_r+0x64>
 400eb20:	10800e17 	ldw	r2,56(r2)
 400eb24:	1000f926 	beq	r2,zero,400ef0c <___vfprintf_internal_r+0x448>
 400eb28:	b880030b 	ldhu	r2,12(r23)
 400eb2c:	10c8000c 	andi	r3,r2,8192
 400eb30:	1800061e 	bne	r3,zero,400eb4c <___vfprintf_internal_r+0x88>
 400eb34:	b9001917 	ldw	r4,100(r23)
 400eb38:	00f7ffc4 	movi	r3,-8193
 400eb3c:	10880014 	ori	r2,r2,8192
 400eb40:	20c6703a 	and	r3,r4,r3
 400eb44:	b880030d 	sth	r2,12(r23)
 400eb48:	b8c01915 	stw	r3,100(r23)
 400eb4c:	10c0020c 	andi	r3,r2,8
 400eb50:	1800c126 	beq	r3,zero,400ee58 <___vfprintf_internal_r+0x394>
 400eb54:	b8c00417 	ldw	r3,16(r23)
 400eb58:	1800bf26 	beq	r3,zero,400ee58 <___vfprintf_internal_r+0x394>
 400eb5c:	1080068c 	andi	r2,r2,26
 400eb60:	00c00284 	movi	r3,10
 400eb64:	10c0c426 	beq	r2,r3,400ee78 <___vfprintf_internal_r+0x3b4>
 400eb68:	d8c00404 	addi	r3,sp,16
 400eb6c:	05010234 	movhi	r20,1032
 400eb70:	d9001e04 	addi	r4,sp,120
 400eb74:	a52ff784 	addi	r20,r20,-16418
 400eb78:	d8c01e15 	stw	r3,120(sp)
 400eb7c:	d8002015 	stw	zero,128(sp)
 400eb80:	d8001f15 	stw	zero,124(sp)
 400eb84:	d8003315 	stw	zero,204(sp)
 400eb88:	d8003615 	stw	zero,216(sp)
 400eb8c:	d8003815 	stw	zero,224(sp)
 400eb90:	1811883a 	mov	r8,r3
 400eb94:	d8003915 	stw	zero,228(sp)
 400eb98:	d8003a15 	stw	zero,232(sp)
 400eb9c:	d8002f15 	stw	zero,188(sp)
 400eba0:	d9002815 	stw	r4,160(sp)
 400eba4:	a8800007 	ldb	r2,0(r21)
 400eba8:	10027b26 	beq	r2,zero,400f598 <___vfprintf_internal_r+0xad4>
 400ebac:	00c00944 	movi	r3,37
 400ebb0:	a821883a 	mov	r16,r21
 400ebb4:	10c0021e 	bne	r2,r3,400ebc0 <___vfprintf_internal_r+0xfc>
 400ebb8:	00001406 	br	400ec0c <___vfprintf_internal_r+0x148>
 400ebbc:	10c00326 	beq	r2,r3,400ebcc <___vfprintf_internal_r+0x108>
 400ebc0:	84000044 	addi	r16,r16,1
 400ebc4:	80800007 	ldb	r2,0(r16)
 400ebc8:	103ffc1e 	bne	r2,zero,400ebbc <__alt_mem_epcs_flash_controller_0+0xfb00dbbc>
 400ebcc:	8563c83a 	sub	r17,r16,r21
 400ebd0:	88000e26 	beq	r17,zero,400ec0c <___vfprintf_internal_r+0x148>
 400ebd4:	d8c02017 	ldw	r3,128(sp)
 400ebd8:	d8801f17 	ldw	r2,124(sp)
 400ebdc:	45400015 	stw	r21,0(r8)
 400ebe0:	1c47883a 	add	r3,r3,r17
 400ebe4:	10800044 	addi	r2,r2,1
 400ebe8:	d8c02015 	stw	r3,128(sp)
 400ebec:	44400115 	stw	r17,4(r8)
 400ebf0:	d8801f15 	stw	r2,124(sp)
 400ebf4:	00c001c4 	movi	r3,7
 400ebf8:	1880a716 	blt	r3,r2,400ee98 <___vfprintf_internal_r+0x3d4>
 400ebfc:	42000204 	addi	r8,r8,8
 400ec00:	d9402f17 	ldw	r5,188(sp)
 400ec04:	2c4b883a 	add	r5,r5,r17
 400ec08:	d9402f15 	stw	r5,188(sp)
 400ec0c:	80800007 	ldb	r2,0(r16)
 400ec10:	1000a826 	beq	r2,zero,400eeb4 <___vfprintf_internal_r+0x3f0>
 400ec14:	84400047 	ldb	r17,1(r16)
 400ec18:	00bfffc4 	movi	r2,-1
 400ec1c:	85400044 	addi	r21,r16,1
 400ec20:	d8002785 	stb	zero,158(sp)
 400ec24:	0007883a 	mov	r3,zero
 400ec28:	000f883a 	mov	r7,zero
 400ec2c:	d8802915 	stw	r2,164(sp)
 400ec30:	d8003115 	stw	zero,196(sp)
 400ec34:	0025883a 	mov	r18,zero
 400ec38:	01401604 	movi	r5,88
 400ec3c:	01800244 	movi	r6,9
 400ec40:	02800a84 	movi	r10,42
 400ec44:	02401b04 	movi	r9,108
 400ec48:	ad400044 	addi	r21,r21,1
 400ec4c:	88bff804 	addi	r2,r17,-32
 400ec50:	28830436 	bltu	r5,r2,400f864 <___vfprintf_internal_r+0xda0>
 400ec54:	100490ba 	slli	r2,r2,2
 400ec58:	01010074 	movhi	r4,1025
 400ec5c:	213b1b04 	addi	r4,r4,-5012
 400ec60:	1105883a 	add	r2,r2,r4
 400ec64:	10800017 	ldw	r2,0(r2)
 400ec68:	1000683a 	jmp	r2
 400ec6c:	0400f784 	movi	r16,990
 400ec70:	0400f864 	muli	r16,zero,993
 400ec74:	0400f864 	muli	r16,zero,993
 400ec78:	0400f7a4 	muli	r16,zero,990
 400ec7c:	0400f864 	muli	r16,zero,993
 400ec80:	0400f864 	muli	r16,zero,993
 400ec84:	0400f864 	muli	r16,zero,993
 400ec88:	0400f864 	muli	r16,zero,993
 400ec8c:	0400f864 	muli	r16,zero,993
 400ec90:	0400f864 	muli	r16,zero,993
 400ec94:	0400ef18 	cmpnei	r16,zero,956
 400ec98:	0400f6c0 	call	400f6c <__alt_mem_sdram-0x3bff094>
 400ec9c:	0400f864 	muli	r16,zero,993
 400eca0:	0400ede0 	cmpeqi	r16,zero,951
 400eca4:	0400ef40 	call	400ef4 <__alt_mem_sdram-0x3bff10c>
 400eca8:	0400f864 	muli	r16,zero,993
 400ecac:	0400ef80 	call	400ef8 <__alt_mem_sdram-0x3bff108>
 400ecb0:	0400ef8c 	andi	r16,zero,958
 400ecb4:	0400ef8c 	andi	r16,zero,958
 400ecb8:	0400ef8c 	andi	r16,zero,958
 400ecbc:	0400ef8c 	andi	r16,zero,958
 400ecc0:	0400ef8c 	andi	r16,zero,958
 400ecc4:	0400ef8c 	andi	r16,zero,958
 400ecc8:	0400ef8c 	andi	r16,zero,958
 400eccc:	0400ef8c 	andi	r16,zero,958
 400ecd0:	0400ef8c 	andi	r16,zero,958
 400ecd4:	0400f864 	muli	r16,zero,993
 400ecd8:	0400f864 	muli	r16,zero,993
 400ecdc:	0400f864 	muli	r16,zero,993
 400ece0:	0400f864 	muli	r16,zero,993
 400ece4:	0400f864 	muli	r16,zero,993
 400ece8:	0400f864 	muli	r16,zero,993
 400ecec:	0400f864 	muli	r16,zero,993
 400ecf0:	0400f864 	muli	r16,zero,993
 400ecf4:	0400f864 	muli	r16,zero,993
 400ecf8:	0400f864 	muli	r16,zero,993
 400ecfc:	0400efc0 	call	400efc <__alt_mem_sdram-0x3bff104>
 400ed00:	0400f07c 	xorhi	r16,zero,961
 400ed04:	0400f864 	muli	r16,zero,993
 400ed08:	0400f07c 	xorhi	r16,zero,961
 400ed0c:	0400f864 	muli	r16,zero,993
 400ed10:	0400f864 	muli	r16,zero,993
 400ed14:	0400f864 	muli	r16,zero,993
 400ed18:	0400f864 	muli	r16,zero,993
 400ed1c:	0400f11c 	xori	r16,zero,964
 400ed20:	0400f864 	muli	r16,zero,993
 400ed24:	0400f864 	muli	r16,zero,993
 400ed28:	0400f128 	cmpgeui	r16,zero,964
 400ed2c:	0400f864 	muli	r16,zero,993
 400ed30:	0400f864 	muli	r16,zero,993
 400ed34:	0400f864 	muli	r16,zero,993
 400ed38:	0400f864 	muli	r16,zero,993
 400ed3c:	0400f864 	muli	r16,zero,993
 400ed40:	0400f5a0 	cmpeqi	r16,zero,982
 400ed44:	0400f864 	muli	r16,zero,993
 400ed48:	0400f864 	muli	r16,zero,993
 400ed4c:	0400f600 	call	400f60 <__alt_mem_sdram-0x3bff0a0>
 400ed50:	0400f864 	muli	r16,zero,993
 400ed54:	0400f864 	muli	r16,zero,993
 400ed58:	0400f864 	muli	r16,zero,993
 400ed5c:	0400f864 	muli	r16,zero,993
 400ed60:	0400f864 	muli	r16,zero,993
 400ed64:	0400f864 	muli	r16,zero,993
 400ed68:	0400f864 	muli	r16,zero,993
 400ed6c:	0400f864 	muli	r16,zero,993
 400ed70:	0400f864 	muli	r16,zero,993
 400ed74:	0400f864 	muli	r16,zero,993
 400ed78:	0400f810 	cmplti	r16,zero,992
 400ed7c:	0400f7b0 	cmpltui	r16,zero,990
 400ed80:	0400f07c 	xorhi	r16,zero,961
 400ed84:	0400f07c 	xorhi	r16,zero,961
 400ed88:	0400f07c 	xorhi	r16,zero,961
 400ed8c:	0400f7c0 	call	400f7c <__alt_mem_sdram-0x3bff084>
 400ed90:	0400f7b0 	cmpltui	r16,zero,990
 400ed94:	0400f864 	muli	r16,zero,993
 400ed98:	0400f864 	muli	r16,zero,993
 400ed9c:	0400f7cc 	andi	r16,zero,991
 400eda0:	0400f864 	muli	r16,zero,993
 400eda4:	0400f7dc 	xori	r16,zero,991
 400eda8:	0400f6b0 	cmpltui	r16,zero,986
 400edac:	0400edec 	andhi	r16,zero,951
 400edb0:	0400f6d0 	cmplti	r16,zero,987
 400edb4:	0400f864 	muli	r16,zero,993
 400edb8:	0400f6dc 	xori	r16,zero,987
 400edbc:	0400f864 	muli	r16,zero,993
 400edc0:	0400f738 	rdprs	r16,zero,988
 400edc4:	0400f864 	muli	r16,zero,993
 400edc8:	0400f864 	muli	r16,zero,993
 400edcc:	0400f748 	cmpgei	r16,zero,989
 400edd0:	d9003117 	ldw	r4,196(sp)
 400edd4:	d8802d15 	stw	r2,180(sp)
 400edd8:	0109c83a 	sub	r4,zero,r4
 400eddc:	d9003115 	stw	r4,196(sp)
 400ede0:	94800114 	ori	r18,r18,4
 400ede4:	ac400007 	ldb	r17,0(r21)
 400ede8:	003f9706 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400edec:	00800c04 	movi	r2,48
 400edf0:	d9002d17 	ldw	r4,180(sp)
 400edf4:	d9402917 	ldw	r5,164(sp)
 400edf8:	d8802705 	stb	r2,156(sp)
 400edfc:	00801e04 	movi	r2,120
 400ee00:	d8802745 	stb	r2,157(sp)
 400ee04:	d8002785 	stb	zero,158(sp)
 400ee08:	20c00104 	addi	r3,r4,4
 400ee0c:	24c00017 	ldw	r19,0(r4)
 400ee10:	002d883a 	mov	r22,zero
 400ee14:	90800094 	ori	r2,r18,2
 400ee18:	28029a16 	blt	r5,zero,400f884 <___vfprintf_internal_r+0xdc0>
 400ee1c:	00bfdfc4 	movi	r2,-129
 400ee20:	90a4703a 	and	r18,r18,r2
 400ee24:	d8c02d15 	stw	r3,180(sp)
 400ee28:	94800094 	ori	r18,r18,2
 400ee2c:	9802871e 	bne	r19,zero,400f84c <___vfprintf_internal_r+0xd88>
 400ee30:	00810234 	movhi	r2,1032
 400ee34:	10afe804 	addi	r2,r2,-16480
 400ee38:	d8803915 	stw	r2,228(sp)
 400ee3c:	04401e04 	movi	r17,120
 400ee40:	d8802917 	ldw	r2,164(sp)
 400ee44:	0039883a 	mov	fp,zero
 400ee48:	1001e926 	beq	r2,zero,400f5f0 <___vfprintf_internal_r+0xb2c>
 400ee4c:	0027883a 	mov	r19,zero
 400ee50:	002d883a 	mov	r22,zero
 400ee54:	00020506 	br	400f66c <___vfprintf_internal_r+0xba8>
 400ee58:	d9002c17 	ldw	r4,176(sp)
 400ee5c:	b80b883a 	mov	r5,r23
 400ee60:	4010eb80 	call	4010eb8 <__swsetup_r>
 400ee64:	1005ac1e 	bne	r2,zero,4010518 <___vfprintf_internal_r+0x1a54>
 400ee68:	b880030b 	ldhu	r2,12(r23)
 400ee6c:	00c00284 	movi	r3,10
 400ee70:	1080068c 	andi	r2,r2,26
 400ee74:	10ff3c1e 	bne	r2,r3,400eb68 <__alt_mem_epcs_flash_controller_0+0xfb00db68>
 400ee78:	b880038f 	ldh	r2,14(r23)
 400ee7c:	103f3a16 	blt	r2,zero,400eb68 <__alt_mem_epcs_flash_controller_0+0xfb00db68>
 400ee80:	d9c02d17 	ldw	r7,180(sp)
 400ee84:	d9002c17 	ldw	r4,176(sp)
 400ee88:	a80d883a 	mov	r6,r21
 400ee8c:	b80b883a 	mov	r5,r23
 400ee90:	4010cd80 	call	4010cd8 <__sbprintf>
 400ee94:	00001106 	br	400eedc <___vfprintf_internal_r+0x418>
 400ee98:	d9002c17 	ldw	r4,176(sp)
 400ee9c:	d9801e04 	addi	r6,sp,120
 400eea0:	b80b883a 	mov	r5,r23
 400eea4:	4016c140 	call	4016c14 <__sprint_r>
 400eea8:	1000081e 	bne	r2,zero,400eecc <___vfprintf_internal_r+0x408>
 400eeac:	da000404 	addi	r8,sp,16
 400eeb0:	003f5306 	br	400ec00 <__alt_mem_epcs_flash_controller_0+0xfb00dc00>
 400eeb4:	d8802017 	ldw	r2,128(sp)
 400eeb8:	10000426 	beq	r2,zero,400eecc <___vfprintf_internal_r+0x408>
 400eebc:	d9002c17 	ldw	r4,176(sp)
 400eec0:	d9801e04 	addi	r6,sp,120
 400eec4:	b80b883a 	mov	r5,r23
 400eec8:	4016c140 	call	4016c14 <__sprint_r>
 400eecc:	b880030b 	ldhu	r2,12(r23)
 400eed0:	1080100c 	andi	r2,r2,64
 400eed4:	1005901e 	bne	r2,zero,4010518 <___vfprintf_internal_r+0x1a54>
 400eed8:	d8802f17 	ldw	r2,188(sp)
 400eedc:	dfc04717 	ldw	ra,284(sp)
 400eee0:	df004617 	ldw	fp,280(sp)
 400eee4:	ddc04517 	ldw	r23,276(sp)
 400eee8:	dd804417 	ldw	r22,272(sp)
 400eeec:	dd404317 	ldw	r21,268(sp)
 400eef0:	dd004217 	ldw	r20,264(sp)
 400eef4:	dcc04117 	ldw	r19,260(sp)
 400eef8:	dc804017 	ldw	r18,256(sp)
 400eefc:	dc403f17 	ldw	r17,252(sp)
 400ef00:	dc003e17 	ldw	r16,248(sp)
 400ef04:	dec04804 	addi	sp,sp,288
 400ef08:	f800283a 	ret
 400ef0c:	d9002c17 	ldw	r4,176(sp)
 400ef10:	4012e8c0 	call	4012e8c <__sinit>
 400ef14:	003f0406 	br	400eb28 <__alt_mem_epcs_flash_controller_0+0xfb00db28>
 400ef18:	d8802d17 	ldw	r2,180(sp)
 400ef1c:	d9002d17 	ldw	r4,180(sp)
 400ef20:	10800017 	ldw	r2,0(r2)
 400ef24:	d8803115 	stw	r2,196(sp)
 400ef28:	20800104 	addi	r2,r4,4
 400ef2c:	d9003117 	ldw	r4,196(sp)
 400ef30:	203fa716 	blt	r4,zero,400edd0 <__alt_mem_epcs_flash_controller_0+0xfb00ddd0>
 400ef34:	d8802d15 	stw	r2,180(sp)
 400ef38:	ac400007 	ldb	r17,0(r21)
 400ef3c:	003f4206 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400ef40:	ac400007 	ldb	r17,0(r21)
 400ef44:	aac00044 	addi	r11,r21,1
 400ef48:	8a872826 	beq	r17,r10,4010bec <___vfprintf_internal_r+0x2128>
 400ef4c:	88bff404 	addi	r2,r17,-48
 400ef50:	0009883a 	mov	r4,zero
 400ef54:	30867d36 	bltu	r6,r2,401094c <___vfprintf_internal_r+0x1e88>
 400ef58:	5c400007 	ldb	r17,0(r11)
 400ef5c:	210002a4 	muli	r4,r4,10
 400ef60:	5d400044 	addi	r21,r11,1
 400ef64:	a817883a 	mov	r11,r21
 400ef68:	2089883a 	add	r4,r4,r2
 400ef6c:	88bff404 	addi	r2,r17,-48
 400ef70:	30bff92e 	bgeu	r6,r2,400ef58 <__alt_mem_epcs_flash_controller_0+0xfb00df58>
 400ef74:	2005c916 	blt	r4,zero,401069c <___vfprintf_internal_r+0x1bd8>
 400ef78:	d9002915 	stw	r4,164(sp)
 400ef7c:	003f3306 	br	400ec4c <__alt_mem_epcs_flash_controller_0+0xfb00dc4c>
 400ef80:	94802014 	ori	r18,r18,128
 400ef84:	ac400007 	ldb	r17,0(r21)
 400ef88:	003f2f06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400ef8c:	a809883a 	mov	r4,r21
 400ef90:	d8003115 	stw	zero,196(sp)
 400ef94:	88bff404 	addi	r2,r17,-48
 400ef98:	0017883a 	mov	r11,zero
 400ef9c:	24400007 	ldb	r17,0(r4)
 400efa0:	5ac002a4 	muli	r11,r11,10
 400efa4:	ad400044 	addi	r21,r21,1
 400efa8:	a809883a 	mov	r4,r21
 400efac:	12d7883a 	add	r11,r2,r11
 400efb0:	88bff404 	addi	r2,r17,-48
 400efb4:	30bff92e 	bgeu	r6,r2,400ef9c <__alt_mem_epcs_flash_controller_0+0xfb00df9c>
 400efb8:	dac03115 	stw	r11,196(sp)
 400efbc:	003f2306 	br	400ec4c <__alt_mem_epcs_flash_controller_0+0xfb00dc4c>
 400efc0:	18c03fcc 	andi	r3,r3,255
 400efc4:	18072b1e 	bne	r3,zero,4010c74 <___vfprintf_internal_r+0x21b0>
 400efc8:	94800414 	ori	r18,r18,16
 400efcc:	9080080c 	andi	r2,r18,32
 400efd0:	10037b26 	beq	r2,zero,400fdc0 <___vfprintf_internal_r+0x12fc>
 400efd4:	d9402d17 	ldw	r5,180(sp)
 400efd8:	28800117 	ldw	r2,4(r5)
 400efdc:	2cc00017 	ldw	r19,0(r5)
 400efe0:	29400204 	addi	r5,r5,8
 400efe4:	d9402d15 	stw	r5,180(sp)
 400efe8:	102d883a 	mov	r22,r2
 400efec:	10044b16 	blt	r2,zero,401011c <___vfprintf_internal_r+0x1658>
 400eff0:	d9402917 	ldw	r5,164(sp)
 400eff4:	df002783 	ldbu	fp,158(sp)
 400eff8:	2803bc16 	blt	r5,zero,400feec <___vfprintf_internal_r+0x1428>
 400effc:	00ffdfc4 	movi	r3,-129
 400f000:	9d84b03a 	or	r2,r19,r22
 400f004:	90e4703a 	and	r18,r18,r3
 400f008:	10017726 	beq	r2,zero,400f5e8 <___vfprintf_internal_r+0xb24>
 400f00c:	b0038326 	beq	r22,zero,400fe1c <___vfprintf_internal_r+0x1358>
 400f010:	dc402a15 	stw	r17,168(sp)
 400f014:	dc001e04 	addi	r16,sp,120
 400f018:	b023883a 	mov	r17,r22
 400f01c:	402d883a 	mov	r22,r8
 400f020:	9809883a 	mov	r4,r19
 400f024:	880b883a 	mov	r5,r17
 400f028:	01800284 	movi	r6,10
 400f02c:	000f883a 	mov	r7,zero
 400f030:	401900c0 	call	401900c <__umoddi3>
 400f034:	10800c04 	addi	r2,r2,48
 400f038:	843fffc4 	addi	r16,r16,-1
 400f03c:	9809883a 	mov	r4,r19
 400f040:	880b883a 	mov	r5,r17
 400f044:	80800005 	stb	r2,0(r16)
 400f048:	01800284 	movi	r6,10
 400f04c:	000f883a 	mov	r7,zero
 400f050:	4018a940 	call	4018a94 <__udivdi3>
 400f054:	1027883a 	mov	r19,r2
 400f058:	10c4b03a 	or	r2,r2,r3
 400f05c:	1823883a 	mov	r17,r3
 400f060:	103fef1e 	bne	r2,zero,400f020 <__alt_mem_epcs_flash_controller_0+0xfb00e020>
 400f064:	d8c02817 	ldw	r3,160(sp)
 400f068:	dc402a17 	ldw	r17,168(sp)
 400f06c:	b011883a 	mov	r8,r22
 400f070:	1c07c83a 	sub	r3,r3,r16
 400f074:	d8c02e15 	stw	r3,184(sp)
 400f078:	00005906 	br	400f1e0 <___vfprintf_internal_r+0x71c>
 400f07c:	18c03fcc 	andi	r3,r3,255
 400f080:	1806fa1e 	bne	r3,zero,4010c6c <___vfprintf_internal_r+0x21a8>
 400f084:	9080020c 	andi	r2,r18,8
 400f088:	10048a26 	beq	r2,zero,40102b4 <___vfprintf_internal_r+0x17f0>
 400f08c:	d8c02d17 	ldw	r3,180(sp)
 400f090:	d9002d17 	ldw	r4,180(sp)
 400f094:	d9402d17 	ldw	r5,180(sp)
 400f098:	18c00017 	ldw	r3,0(r3)
 400f09c:	21000117 	ldw	r4,4(r4)
 400f0a0:	29400204 	addi	r5,r5,8
 400f0a4:	d8c03615 	stw	r3,216(sp)
 400f0a8:	d9003815 	stw	r4,224(sp)
 400f0ac:	d9402d15 	stw	r5,180(sp)
 400f0b0:	d9003617 	ldw	r4,216(sp)
 400f0b4:	d9403817 	ldw	r5,224(sp)
 400f0b8:	da003d15 	stw	r8,244(sp)
 400f0bc:	04000044 	movi	r16,1
 400f0c0:	400940c0 	call	400940c <__fpclassifyd>
 400f0c4:	da003d17 	ldw	r8,244(sp)
 400f0c8:	14041f1e 	bne	r2,r16,4010148 <___vfprintf_internal_r+0x1684>
 400f0cc:	d9003617 	ldw	r4,216(sp)
 400f0d0:	d9403817 	ldw	r5,224(sp)
 400f0d4:	000d883a 	mov	r6,zero
 400f0d8:	000f883a 	mov	r7,zero
 400f0dc:	400a7d00 	call	400a7d0 <__ledf2>
 400f0e0:	da003d17 	ldw	r8,244(sp)
 400f0e4:	1005be16 	blt	r2,zero,40107e0 <___vfprintf_internal_r+0x1d1c>
 400f0e8:	df002783 	ldbu	fp,158(sp)
 400f0ec:	008011c4 	movi	r2,71
 400f0f0:	1445330e 	bge	r2,r17,40105c0 <___vfprintf_internal_r+0x1afc>
 400f0f4:	04010234 	movhi	r16,1032
 400f0f8:	842fe004 	addi	r16,r16,-16512
 400f0fc:	00c000c4 	movi	r3,3
 400f100:	00bfdfc4 	movi	r2,-129
 400f104:	d8c02a15 	stw	r3,168(sp)
 400f108:	90a4703a 	and	r18,r18,r2
 400f10c:	d8c02e15 	stw	r3,184(sp)
 400f110:	d8002915 	stw	zero,164(sp)
 400f114:	d8003215 	stw	zero,200(sp)
 400f118:	00003706 	br	400f1f8 <___vfprintf_internal_r+0x734>
 400f11c:	94800214 	ori	r18,r18,8
 400f120:	ac400007 	ldb	r17,0(r21)
 400f124:	003ec806 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f128:	18c03fcc 	andi	r3,r3,255
 400f12c:	1806db1e 	bne	r3,zero,4010c9c <___vfprintf_internal_r+0x21d8>
 400f130:	94800414 	ori	r18,r18,16
 400f134:	9080080c 	andi	r2,r18,32
 400f138:	1002d826 	beq	r2,zero,400fc9c <___vfprintf_internal_r+0x11d8>
 400f13c:	d9402d17 	ldw	r5,180(sp)
 400f140:	d8c02917 	ldw	r3,164(sp)
 400f144:	d8002785 	stb	zero,158(sp)
 400f148:	28800204 	addi	r2,r5,8
 400f14c:	2cc00017 	ldw	r19,0(r5)
 400f150:	2d800117 	ldw	r22,4(r5)
 400f154:	18048f16 	blt	r3,zero,4010394 <___vfprintf_internal_r+0x18d0>
 400f158:	013fdfc4 	movi	r4,-129
 400f15c:	9d86b03a 	or	r3,r19,r22
 400f160:	d8802d15 	stw	r2,180(sp)
 400f164:	9124703a 	and	r18,r18,r4
 400f168:	1802d91e 	bne	r3,zero,400fcd0 <___vfprintf_internal_r+0x120c>
 400f16c:	d8c02917 	ldw	r3,164(sp)
 400f170:	0039883a 	mov	fp,zero
 400f174:	1805c326 	beq	r3,zero,4010884 <___vfprintf_internal_r+0x1dc0>
 400f178:	0027883a 	mov	r19,zero
 400f17c:	002d883a 	mov	r22,zero
 400f180:	dc001e04 	addi	r16,sp,120
 400f184:	9806d0fa 	srli	r3,r19,3
 400f188:	b008977a 	slli	r4,r22,29
 400f18c:	b02cd0fa 	srli	r22,r22,3
 400f190:	9cc001cc 	andi	r19,r19,7
 400f194:	98800c04 	addi	r2,r19,48
 400f198:	843fffc4 	addi	r16,r16,-1
 400f19c:	20e6b03a 	or	r19,r4,r3
 400f1a0:	80800005 	stb	r2,0(r16)
 400f1a4:	9d86b03a 	or	r3,r19,r22
 400f1a8:	183ff61e 	bne	r3,zero,400f184 <__alt_mem_epcs_flash_controller_0+0xfb00e184>
 400f1ac:	90c0004c 	andi	r3,r18,1
 400f1b0:	18013b26 	beq	r3,zero,400f6a0 <___vfprintf_internal_r+0xbdc>
 400f1b4:	10803fcc 	andi	r2,r2,255
 400f1b8:	1080201c 	xori	r2,r2,128
 400f1bc:	10bfe004 	addi	r2,r2,-128
 400f1c0:	00c00c04 	movi	r3,48
 400f1c4:	10c13626 	beq	r2,r3,400f6a0 <___vfprintf_internal_r+0xbdc>
 400f1c8:	80ffffc5 	stb	r3,-1(r16)
 400f1cc:	d8c02817 	ldw	r3,160(sp)
 400f1d0:	80bfffc4 	addi	r2,r16,-1
 400f1d4:	1021883a 	mov	r16,r2
 400f1d8:	1887c83a 	sub	r3,r3,r2
 400f1dc:	d8c02e15 	stw	r3,184(sp)
 400f1e0:	d8802e17 	ldw	r2,184(sp)
 400f1e4:	d9002917 	ldw	r4,164(sp)
 400f1e8:	1100010e 	bge	r2,r4,400f1f0 <___vfprintf_internal_r+0x72c>
 400f1ec:	2005883a 	mov	r2,r4
 400f1f0:	d8802a15 	stw	r2,168(sp)
 400f1f4:	d8003215 	stw	zero,200(sp)
 400f1f8:	e7003fcc 	andi	fp,fp,255
 400f1fc:	e700201c 	xori	fp,fp,128
 400f200:	e73fe004 	addi	fp,fp,-128
 400f204:	e0000326 	beq	fp,zero,400f214 <___vfprintf_internal_r+0x750>
 400f208:	d8c02a17 	ldw	r3,168(sp)
 400f20c:	18c00044 	addi	r3,r3,1
 400f210:	d8c02a15 	stw	r3,168(sp)
 400f214:	90c0008c 	andi	r3,r18,2
 400f218:	d8c02b15 	stw	r3,172(sp)
 400f21c:	18000326 	beq	r3,zero,400f22c <___vfprintf_internal_r+0x768>
 400f220:	d8c02a17 	ldw	r3,168(sp)
 400f224:	18c00084 	addi	r3,r3,2
 400f228:	d8c02a15 	stw	r3,168(sp)
 400f22c:	90c0210c 	andi	r3,r18,132
 400f230:	d8c03015 	stw	r3,192(sp)
 400f234:	1801a31e 	bne	r3,zero,400f8c4 <___vfprintf_internal_r+0xe00>
 400f238:	d9003117 	ldw	r4,196(sp)
 400f23c:	d8c02a17 	ldw	r3,168(sp)
 400f240:	20e7c83a 	sub	r19,r4,r3
 400f244:	04c19f0e 	bge	zero,r19,400f8c4 <___vfprintf_internal_r+0xe00>
 400f248:	02400404 	movi	r9,16
 400f24c:	d8c02017 	ldw	r3,128(sp)
 400f250:	d8801f17 	ldw	r2,124(sp)
 400f254:	4cc50d0e 	bge	r9,r19,401068c <___vfprintf_internal_r+0x1bc8>
 400f258:	01410234 	movhi	r5,1032
 400f25c:	296ffb84 	addi	r5,r5,-16402
 400f260:	dc403b15 	stw	r17,236(sp)
 400f264:	d9403515 	stw	r5,212(sp)
 400f268:	9823883a 	mov	r17,r19
 400f26c:	482d883a 	mov	r22,r9
 400f270:	9027883a 	mov	r19,r18
 400f274:	070001c4 	movi	fp,7
 400f278:	8025883a 	mov	r18,r16
 400f27c:	dc002c17 	ldw	r16,176(sp)
 400f280:	00000306 	br	400f290 <___vfprintf_internal_r+0x7cc>
 400f284:	8c7ffc04 	addi	r17,r17,-16
 400f288:	42000204 	addi	r8,r8,8
 400f28c:	b440130e 	bge	r22,r17,400f2dc <___vfprintf_internal_r+0x818>
 400f290:	01010234 	movhi	r4,1032
 400f294:	18c00404 	addi	r3,r3,16
 400f298:	10800044 	addi	r2,r2,1
 400f29c:	212ffb84 	addi	r4,r4,-16402
 400f2a0:	41000015 	stw	r4,0(r8)
 400f2a4:	45800115 	stw	r22,4(r8)
 400f2a8:	d8c02015 	stw	r3,128(sp)
 400f2ac:	d8801f15 	stw	r2,124(sp)
 400f2b0:	e0bff40e 	bge	fp,r2,400f284 <__alt_mem_epcs_flash_controller_0+0xfb00e284>
 400f2b4:	d9801e04 	addi	r6,sp,120
 400f2b8:	b80b883a 	mov	r5,r23
 400f2bc:	8009883a 	mov	r4,r16
 400f2c0:	4016c140 	call	4016c14 <__sprint_r>
 400f2c4:	103f011e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400f2c8:	8c7ffc04 	addi	r17,r17,-16
 400f2cc:	d8c02017 	ldw	r3,128(sp)
 400f2d0:	d8801f17 	ldw	r2,124(sp)
 400f2d4:	da000404 	addi	r8,sp,16
 400f2d8:	b47fed16 	blt	r22,r17,400f290 <__alt_mem_epcs_flash_controller_0+0xfb00e290>
 400f2dc:	9021883a 	mov	r16,r18
 400f2e0:	9825883a 	mov	r18,r19
 400f2e4:	8827883a 	mov	r19,r17
 400f2e8:	dc403b17 	ldw	r17,236(sp)
 400f2ec:	d9403517 	ldw	r5,212(sp)
 400f2f0:	98c7883a 	add	r3,r19,r3
 400f2f4:	10800044 	addi	r2,r2,1
 400f2f8:	41400015 	stw	r5,0(r8)
 400f2fc:	44c00115 	stw	r19,4(r8)
 400f300:	d8c02015 	stw	r3,128(sp)
 400f304:	d8801f15 	stw	r2,124(sp)
 400f308:	010001c4 	movi	r4,7
 400f30c:	2082a316 	blt	r4,r2,400fd9c <___vfprintf_internal_r+0x12d8>
 400f310:	df002787 	ldb	fp,158(sp)
 400f314:	42000204 	addi	r8,r8,8
 400f318:	e0000c26 	beq	fp,zero,400f34c <___vfprintf_internal_r+0x888>
 400f31c:	d8801f17 	ldw	r2,124(sp)
 400f320:	d9002784 	addi	r4,sp,158
 400f324:	18c00044 	addi	r3,r3,1
 400f328:	10800044 	addi	r2,r2,1
 400f32c:	41000015 	stw	r4,0(r8)
 400f330:	01000044 	movi	r4,1
 400f334:	41000115 	stw	r4,4(r8)
 400f338:	d8c02015 	stw	r3,128(sp)
 400f33c:	d8801f15 	stw	r2,124(sp)
 400f340:	010001c4 	movi	r4,7
 400f344:	20823c16 	blt	r4,r2,400fc38 <___vfprintf_internal_r+0x1174>
 400f348:	42000204 	addi	r8,r8,8
 400f34c:	d8802b17 	ldw	r2,172(sp)
 400f350:	10000c26 	beq	r2,zero,400f384 <___vfprintf_internal_r+0x8c0>
 400f354:	d8801f17 	ldw	r2,124(sp)
 400f358:	d9002704 	addi	r4,sp,156
 400f35c:	18c00084 	addi	r3,r3,2
 400f360:	10800044 	addi	r2,r2,1
 400f364:	41000015 	stw	r4,0(r8)
 400f368:	01000084 	movi	r4,2
 400f36c:	41000115 	stw	r4,4(r8)
 400f370:	d8c02015 	stw	r3,128(sp)
 400f374:	d8801f15 	stw	r2,124(sp)
 400f378:	010001c4 	movi	r4,7
 400f37c:	20823616 	blt	r4,r2,400fc58 <___vfprintf_internal_r+0x1194>
 400f380:	42000204 	addi	r8,r8,8
 400f384:	d9003017 	ldw	r4,192(sp)
 400f388:	00802004 	movi	r2,128
 400f38c:	20819926 	beq	r4,r2,400f9f4 <___vfprintf_internal_r+0xf30>
 400f390:	d9402917 	ldw	r5,164(sp)
 400f394:	d8802e17 	ldw	r2,184(sp)
 400f398:	28adc83a 	sub	r22,r5,r2
 400f39c:	0580310e 	bge	zero,r22,400f464 <___vfprintf_internal_r+0x9a0>
 400f3a0:	07000404 	movi	fp,16
 400f3a4:	d8801f17 	ldw	r2,124(sp)
 400f3a8:	e584140e 	bge	fp,r22,40103fc <___vfprintf_internal_r+0x1938>
 400f3ac:	01410234 	movhi	r5,1032
 400f3b0:	296ff784 	addi	r5,r5,-16418
 400f3b4:	dc402915 	stw	r17,164(sp)
 400f3b8:	d9402b15 	stw	r5,172(sp)
 400f3bc:	b023883a 	mov	r17,r22
 400f3c0:	04c001c4 	movi	r19,7
 400f3c4:	a82d883a 	mov	r22,r21
 400f3c8:	902b883a 	mov	r21,r18
 400f3cc:	8025883a 	mov	r18,r16
 400f3d0:	dc002c17 	ldw	r16,176(sp)
 400f3d4:	00000306 	br	400f3e4 <___vfprintf_internal_r+0x920>
 400f3d8:	8c7ffc04 	addi	r17,r17,-16
 400f3dc:	42000204 	addi	r8,r8,8
 400f3e0:	e440110e 	bge	fp,r17,400f428 <___vfprintf_internal_r+0x964>
 400f3e4:	18c00404 	addi	r3,r3,16
 400f3e8:	10800044 	addi	r2,r2,1
 400f3ec:	45000015 	stw	r20,0(r8)
 400f3f0:	47000115 	stw	fp,4(r8)
 400f3f4:	d8c02015 	stw	r3,128(sp)
 400f3f8:	d8801f15 	stw	r2,124(sp)
 400f3fc:	98bff60e 	bge	r19,r2,400f3d8 <__alt_mem_epcs_flash_controller_0+0xfb00e3d8>
 400f400:	d9801e04 	addi	r6,sp,120
 400f404:	b80b883a 	mov	r5,r23
 400f408:	8009883a 	mov	r4,r16
 400f40c:	4016c140 	call	4016c14 <__sprint_r>
 400f410:	103eae1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400f414:	8c7ffc04 	addi	r17,r17,-16
 400f418:	d8c02017 	ldw	r3,128(sp)
 400f41c:	d8801f17 	ldw	r2,124(sp)
 400f420:	da000404 	addi	r8,sp,16
 400f424:	e47fef16 	blt	fp,r17,400f3e4 <__alt_mem_epcs_flash_controller_0+0xfb00e3e4>
 400f428:	9021883a 	mov	r16,r18
 400f42c:	a825883a 	mov	r18,r21
 400f430:	b02b883a 	mov	r21,r22
 400f434:	882d883a 	mov	r22,r17
 400f438:	dc402917 	ldw	r17,164(sp)
 400f43c:	d9002b17 	ldw	r4,172(sp)
 400f440:	1d87883a 	add	r3,r3,r22
 400f444:	10800044 	addi	r2,r2,1
 400f448:	41000015 	stw	r4,0(r8)
 400f44c:	45800115 	stw	r22,4(r8)
 400f450:	d8c02015 	stw	r3,128(sp)
 400f454:	d8801f15 	stw	r2,124(sp)
 400f458:	010001c4 	movi	r4,7
 400f45c:	2081ee16 	blt	r4,r2,400fc18 <___vfprintf_internal_r+0x1154>
 400f460:	42000204 	addi	r8,r8,8
 400f464:	9080400c 	andi	r2,r18,256
 400f468:	1001181e 	bne	r2,zero,400f8cc <___vfprintf_internal_r+0xe08>
 400f46c:	d9402e17 	ldw	r5,184(sp)
 400f470:	d8801f17 	ldw	r2,124(sp)
 400f474:	44000015 	stw	r16,0(r8)
 400f478:	1947883a 	add	r3,r3,r5
 400f47c:	10800044 	addi	r2,r2,1
 400f480:	41400115 	stw	r5,4(r8)
 400f484:	d8c02015 	stw	r3,128(sp)
 400f488:	d8801f15 	stw	r2,124(sp)
 400f48c:	010001c4 	movi	r4,7
 400f490:	2081d316 	blt	r4,r2,400fbe0 <___vfprintf_internal_r+0x111c>
 400f494:	42000204 	addi	r8,r8,8
 400f498:	9480010c 	andi	r18,r18,4
 400f49c:	90003226 	beq	r18,zero,400f568 <___vfprintf_internal_r+0xaa4>
 400f4a0:	d9403117 	ldw	r5,196(sp)
 400f4a4:	d8802a17 	ldw	r2,168(sp)
 400f4a8:	28a1c83a 	sub	r16,r5,r2
 400f4ac:	04002e0e 	bge	zero,r16,400f568 <___vfprintf_internal_r+0xaa4>
 400f4b0:	04400404 	movi	r17,16
 400f4b4:	d8801f17 	ldw	r2,124(sp)
 400f4b8:	8c04a20e 	bge	r17,r16,4010744 <___vfprintf_internal_r+0x1c80>
 400f4bc:	01410234 	movhi	r5,1032
 400f4c0:	296ffb84 	addi	r5,r5,-16402
 400f4c4:	d9403515 	stw	r5,212(sp)
 400f4c8:	048001c4 	movi	r18,7
 400f4cc:	dcc02c17 	ldw	r19,176(sp)
 400f4d0:	00000306 	br	400f4e0 <___vfprintf_internal_r+0xa1c>
 400f4d4:	843ffc04 	addi	r16,r16,-16
 400f4d8:	42000204 	addi	r8,r8,8
 400f4dc:	8c00130e 	bge	r17,r16,400f52c <___vfprintf_internal_r+0xa68>
 400f4e0:	01010234 	movhi	r4,1032
 400f4e4:	18c00404 	addi	r3,r3,16
 400f4e8:	10800044 	addi	r2,r2,1
 400f4ec:	212ffb84 	addi	r4,r4,-16402
 400f4f0:	41000015 	stw	r4,0(r8)
 400f4f4:	44400115 	stw	r17,4(r8)
 400f4f8:	d8c02015 	stw	r3,128(sp)
 400f4fc:	d8801f15 	stw	r2,124(sp)
 400f500:	90bff40e 	bge	r18,r2,400f4d4 <__alt_mem_epcs_flash_controller_0+0xfb00e4d4>
 400f504:	d9801e04 	addi	r6,sp,120
 400f508:	b80b883a 	mov	r5,r23
 400f50c:	9809883a 	mov	r4,r19
 400f510:	4016c140 	call	4016c14 <__sprint_r>
 400f514:	103e6d1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400f518:	843ffc04 	addi	r16,r16,-16
 400f51c:	d8c02017 	ldw	r3,128(sp)
 400f520:	d8801f17 	ldw	r2,124(sp)
 400f524:	da000404 	addi	r8,sp,16
 400f528:	8c3fed16 	blt	r17,r16,400f4e0 <__alt_mem_epcs_flash_controller_0+0xfb00e4e0>
 400f52c:	d9403517 	ldw	r5,212(sp)
 400f530:	1c07883a 	add	r3,r3,r16
 400f534:	10800044 	addi	r2,r2,1
 400f538:	41400015 	stw	r5,0(r8)
 400f53c:	44000115 	stw	r16,4(r8)
 400f540:	d8c02015 	stw	r3,128(sp)
 400f544:	d8801f15 	stw	r2,124(sp)
 400f548:	010001c4 	movi	r4,7
 400f54c:	2080060e 	bge	r4,r2,400f568 <___vfprintf_internal_r+0xaa4>
 400f550:	d9002c17 	ldw	r4,176(sp)
 400f554:	d9801e04 	addi	r6,sp,120
 400f558:	b80b883a 	mov	r5,r23
 400f55c:	4016c140 	call	4016c14 <__sprint_r>
 400f560:	103e5a1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400f564:	d8c02017 	ldw	r3,128(sp)
 400f568:	d8803117 	ldw	r2,196(sp)
 400f56c:	d9002a17 	ldw	r4,168(sp)
 400f570:	1100010e 	bge	r2,r4,400f578 <___vfprintf_internal_r+0xab4>
 400f574:	2005883a 	mov	r2,r4
 400f578:	d9402f17 	ldw	r5,188(sp)
 400f57c:	288b883a 	add	r5,r5,r2
 400f580:	d9402f15 	stw	r5,188(sp)
 400f584:	18019e1e 	bne	r3,zero,400fc00 <___vfprintf_internal_r+0x113c>
 400f588:	a8800007 	ldb	r2,0(r21)
 400f58c:	d8001f15 	stw	zero,124(sp)
 400f590:	da000404 	addi	r8,sp,16
 400f594:	103d851e 	bne	r2,zero,400ebac <__alt_mem_epcs_flash_controller_0+0xfb00dbac>
 400f598:	a821883a 	mov	r16,r21
 400f59c:	003d9b06 	br	400ec0c <__alt_mem_epcs_flash_controller_0+0xfb00dc0c>
 400f5a0:	18c03fcc 	andi	r3,r3,255
 400f5a4:	1805c11e 	bne	r3,zero,4010cac <___vfprintf_internal_r+0x21e8>
 400f5a8:	94800414 	ori	r18,r18,16
 400f5ac:	9080080c 	andi	r2,r18,32
 400f5b0:	10020c26 	beq	r2,zero,400fde4 <___vfprintf_internal_r+0x1320>
 400f5b4:	d8802d17 	ldw	r2,180(sp)
 400f5b8:	d9002917 	ldw	r4,164(sp)
 400f5bc:	d8002785 	stb	zero,158(sp)
 400f5c0:	10c00204 	addi	r3,r2,8
 400f5c4:	14c00017 	ldw	r19,0(r2)
 400f5c8:	15800117 	ldw	r22,4(r2)
 400f5cc:	20040f16 	blt	r4,zero,401060c <___vfprintf_internal_r+0x1b48>
 400f5d0:	013fdfc4 	movi	r4,-129
 400f5d4:	9d84b03a 	or	r2,r19,r22
 400f5d8:	d8c02d15 	stw	r3,180(sp)
 400f5dc:	9124703a 	and	r18,r18,r4
 400f5e0:	0039883a 	mov	fp,zero
 400f5e4:	103e891e 	bne	r2,zero,400f00c <__alt_mem_epcs_flash_controller_0+0xfb00e00c>
 400f5e8:	d9002917 	ldw	r4,164(sp)
 400f5ec:	2002c11e 	bne	r4,zero,40100f4 <___vfprintf_internal_r+0x1630>
 400f5f0:	d8002915 	stw	zero,164(sp)
 400f5f4:	d8002e15 	stw	zero,184(sp)
 400f5f8:	dc001e04 	addi	r16,sp,120
 400f5fc:	003ef806 	br	400f1e0 <__alt_mem_epcs_flash_controller_0+0xfb00e1e0>
 400f600:	18c03fcc 	andi	r3,r3,255
 400f604:	18059d1e 	bne	r3,zero,4010c7c <___vfprintf_internal_r+0x21b8>
 400f608:	01410234 	movhi	r5,1032
 400f60c:	296fe304 	addi	r5,r5,-16500
 400f610:	d9403915 	stw	r5,228(sp)
 400f614:	9080080c 	andi	r2,r18,32
 400f618:	10005226 	beq	r2,zero,400f764 <___vfprintf_internal_r+0xca0>
 400f61c:	d8802d17 	ldw	r2,180(sp)
 400f620:	14c00017 	ldw	r19,0(r2)
 400f624:	15800117 	ldw	r22,4(r2)
 400f628:	10800204 	addi	r2,r2,8
 400f62c:	d8802d15 	stw	r2,180(sp)
 400f630:	9080004c 	andi	r2,r18,1
 400f634:	10019026 	beq	r2,zero,400fc78 <___vfprintf_internal_r+0x11b4>
 400f638:	9d84b03a 	or	r2,r19,r22
 400f63c:	10036926 	beq	r2,zero,40103e4 <___vfprintf_internal_r+0x1920>
 400f640:	d8c02917 	ldw	r3,164(sp)
 400f644:	00800c04 	movi	r2,48
 400f648:	d8802705 	stb	r2,156(sp)
 400f64c:	dc402745 	stb	r17,157(sp)
 400f650:	d8002785 	stb	zero,158(sp)
 400f654:	90800094 	ori	r2,r18,2
 400f658:	18045d16 	blt	r3,zero,40107d0 <___vfprintf_internal_r+0x1d0c>
 400f65c:	00bfdfc4 	movi	r2,-129
 400f660:	90a4703a 	and	r18,r18,r2
 400f664:	94800094 	ori	r18,r18,2
 400f668:	0039883a 	mov	fp,zero
 400f66c:	d9003917 	ldw	r4,228(sp)
 400f670:	dc001e04 	addi	r16,sp,120
 400f674:	988003cc 	andi	r2,r19,15
 400f678:	b006973a 	slli	r3,r22,28
 400f67c:	2085883a 	add	r2,r4,r2
 400f680:	9826d13a 	srli	r19,r19,4
 400f684:	10800003 	ldbu	r2,0(r2)
 400f688:	b02cd13a 	srli	r22,r22,4
 400f68c:	843fffc4 	addi	r16,r16,-1
 400f690:	1ce6b03a 	or	r19,r3,r19
 400f694:	80800005 	stb	r2,0(r16)
 400f698:	9d84b03a 	or	r2,r19,r22
 400f69c:	103ff51e 	bne	r2,zero,400f674 <__alt_mem_epcs_flash_controller_0+0xfb00e674>
 400f6a0:	d8c02817 	ldw	r3,160(sp)
 400f6a4:	1c07c83a 	sub	r3,r3,r16
 400f6a8:	d8c02e15 	stw	r3,184(sp)
 400f6ac:	003ecc06 	br	400f1e0 <__alt_mem_epcs_flash_controller_0+0xfb00e1e0>
 400f6b0:	18c03fcc 	andi	r3,r3,255
 400f6b4:	183e9f26 	beq	r3,zero,400f134 <__alt_mem_epcs_flash_controller_0+0xfb00e134>
 400f6b8:	d9c02785 	stb	r7,158(sp)
 400f6bc:	003e9d06 	br	400f134 <__alt_mem_epcs_flash_controller_0+0xfb00e134>
 400f6c0:	00c00044 	movi	r3,1
 400f6c4:	01c00ac4 	movi	r7,43
 400f6c8:	ac400007 	ldb	r17,0(r21)
 400f6cc:	003d5e06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f6d0:	94800814 	ori	r18,r18,32
 400f6d4:	ac400007 	ldb	r17,0(r21)
 400f6d8:	003d5b06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f6dc:	d8c02d17 	ldw	r3,180(sp)
 400f6e0:	d8002785 	stb	zero,158(sp)
 400f6e4:	1c000017 	ldw	r16,0(r3)
 400f6e8:	1cc00104 	addi	r19,r3,4
 400f6ec:	80041926 	beq	r16,zero,4010754 <___vfprintf_internal_r+0x1c90>
 400f6f0:	d9002917 	ldw	r4,164(sp)
 400f6f4:	2003d016 	blt	r4,zero,4010638 <___vfprintf_internal_r+0x1b74>
 400f6f8:	200d883a 	mov	r6,r4
 400f6fc:	000b883a 	mov	r5,zero
 400f700:	8009883a 	mov	r4,r16
 400f704:	da003d15 	stw	r8,244(sp)
 400f708:	4013bec0 	call	4013bec <memchr>
 400f70c:	da003d17 	ldw	r8,244(sp)
 400f710:	10045426 	beq	r2,zero,4010864 <___vfprintf_internal_r+0x1da0>
 400f714:	1405c83a 	sub	r2,r2,r16
 400f718:	d8802e15 	stw	r2,184(sp)
 400f71c:	1003cc16 	blt	r2,zero,4010650 <___vfprintf_internal_r+0x1b8c>
 400f720:	df002783 	ldbu	fp,158(sp)
 400f724:	d8802a15 	stw	r2,168(sp)
 400f728:	dcc02d15 	stw	r19,180(sp)
 400f72c:	d8002915 	stw	zero,164(sp)
 400f730:	d8003215 	stw	zero,200(sp)
 400f734:	003eb006 	br	400f1f8 <__alt_mem_epcs_flash_controller_0+0xfb00e1f8>
 400f738:	18c03fcc 	andi	r3,r3,255
 400f73c:	183f9b26 	beq	r3,zero,400f5ac <__alt_mem_epcs_flash_controller_0+0xfb00e5ac>
 400f740:	d9c02785 	stb	r7,158(sp)
 400f744:	003f9906 	br	400f5ac <__alt_mem_epcs_flash_controller_0+0xfb00e5ac>
 400f748:	18c03fcc 	andi	r3,r3,255
 400f74c:	1805551e 	bne	r3,zero,4010ca4 <___vfprintf_internal_r+0x21e0>
 400f750:	01410234 	movhi	r5,1032
 400f754:	296fe804 	addi	r5,r5,-16480
 400f758:	d9403915 	stw	r5,228(sp)
 400f75c:	9080080c 	andi	r2,r18,32
 400f760:	103fae1e 	bne	r2,zero,400f61c <__alt_mem_epcs_flash_controller_0+0xfb00e61c>
 400f764:	9080040c 	andi	r2,r18,16
 400f768:	1002de26 	beq	r2,zero,40102e4 <___vfprintf_internal_r+0x1820>
 400f76c:	d8c02d17 	ldw	r3,180(sp)
 400f770:	002d883a 	mov	r22,zero
 400f774:	1cc00017 	ldw	r19,0(r3)
 400f778:	18c00104 	addi	r3,r3,4
 400f77c:	d8c02d15 	stw	r3,180(sp)
 400f780:	003fab06 	br	400f630 <__alt_mem_epcs_flash_controller_0+0xfb00e630>
 400f784:	38803fcc 	andi	r2,r7,255
 400f788:	1080201c 	xori	r2,r2,128
 400f78c:	10bfe004 	addi	r2,r2,-128
 400f790:	1002d21e 	bne	r2,zero,40102dc <___vfprintf_internal_r+0x1818>
 400f794:	00c00044 	movi	r3,1
 400f798:	01c00804 	movi	r7,32
 400f79c:	ac400007 	ldb	r17,0(r21)
 400f7a0:	003d2906 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f7a4:	94800054 	ori	r18,r18,1
 400f7a8:	ac400007 	ldb	r17,0(r21)
 400f7ac:	003d2606 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f7b0:	18c03fcc 	andi	r3,r3,255
 400f7b4:	183e0526 	beq	r3,zero,400efcc <__alt_mem_epcs_flash_controller_0+0xfb00dfcc>
 400f7b8:	d9c02785 	stb	r7,158(sp)
 400f7bc:	003e0306 	br	400efcc <__alt_mem_epcs_flash_controller_0+0xfb00dfcc>
 400f7c0:	94801014 	ori	r18,r18,64
 400f7c4:	ac400007 	ldb	r17,0(r21)
 400f7c8:	003d1f06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f7cc:	ac400007 	ldb	r17,0(r21)
 400f7d0:	8a438726 	beq	r17,r9,40105f0 <___vfprintf_internal_r+0x1b2c>
 400f7d4:	94800414 	ori	r18,r18,16
 400f7d8:	003d1b06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 400f7dc:	18c03fcc 	andi	r3,r3,255
 400f7e0:	1805341e 	bne	r3,zero,4010cb4 <___vfprintf_internal_r+0x21f0>
 400f7e4:	9080080c 	andi	r2,r18,32
 400f7e8:	1002cd26 	beq	r2,zero,4010320 <___vfprintf_internal_r+0x185c>
 400f7ec:	d9402d17 	ldw	r5,180(sp)
 400f7f0:	d9002f17 	ldw	r4,188(sp)
 400f7f4:	28800017 	ldw	r2,0(r5)
 400f7f8:	2007d7fa 	srai	r3,r4,31
 400f7fc:	29400104 	addi	r5,r5,4
 400f800:	d9402d15 	stw	r5,180(sp)
 400f804:	11000015 	stw	r4,0(r2)
 400f808:	10c00115 	stw	r3,4(r2)
 400f80c:	003ce506 	br	400eba4 <__alt_mem_epcs_flash_controller_0+0xfb00dba4>
 400f810:	d8c02d17 	ldw	r3,180(sp)
 400f814:	d9002d17 	ldw	r4,180(sp)
 400f818:	d8002785 	stb	zero,158(sp)
 400f81c:	18800017 	ldw	r2,0(r3)
 400f820:	21000104 	addi	r4,r4,4
 400f824:	00c00044 	movi	r3,1
 400f828:	d8c02a15 	stw	r3,168(sp)
 400f82c:	d8801405 	stb	r2,80(sp)
 400f830:	d9002d15 	stw	r4,180(sp)
 400f834:	d8c02e15 	stw	r3,184(sp)
 400f838:	d8002915 	stw	zero,164(sp)
 400f83c:	d8003215 	stw	zero,200(sp)
 400f840:	dc001404 	addi	r16,sp,80
 400f844:	0039883a 	mov	fp,zero
 400f848:	003e7206 	br	400f214 <__alt_mem_epcs_flash_controller_0+0xfb00e214>
 400f84c:	01010234 	movhi	r4,1032
 400f850:	212fe804 	addi	r4,r4,-16480
 400f854:	0039883a 	mov	fp,zero
 400f858:	d9003915 	stw	r4,228(sp)
 400f85c:	04401e04 	movi	r17,120
 400f860:	003f8206 	br	400f66c <__alt_mem_epcs_flash_controller_0+0xfb00e66c>
 400f864:	18c03fcc 	andi	r3,r3,255
 400f868:	1805061e 	bne	r3,zero,4010c84 <___vfprintf_internal_r+0x21c0>
 400f86c:	883d9126 	beq	r17,zero,400eeb4 <__alt_mem_epcs_flash_controller_0+0xfb00deb4>
 400f870:	00c00044 	movi	r3,1
 400f874:	d8c02a15 	stw	r3,168(sp)
 400f878:	dc401405 	stb	r17,80(sp)
 400f87c:	d8002785 	stb	zero,158(sp)
 400f880:	003fec06 	br	400f834 <__alt_mem_epcs_flash_controller_0+0xfb00e834>
 400f884:	01410234 	movhi	r5,1032
 400f888:	296fe804 	addi	r5,r5,-16480
 400f88c:	d9403915 	stw	r5,228(sp)
 400f890:	d8c02d15 	stw	r3,180(sp)
 400f894:	1025883a 	mov	r18,r2
 400f898:	04401e04 	movi	r17,120
 400f89c:	9d84b03a 	or	r2,r19,r22
 400f8a0:	1000fc1e 	bne	r2,zero,400fc94 <___vfprintf_internal_r+0x11d0>
 400f8a4:	0039883a 	mov	fp,zero
 400f8a8:	00800084 	movi	r2,2
 400f8ac:	10803fcc 	andi	r2,r2,255
 400f8b0:	00c00044 	movi	r3,1
 400f8b4:	10c20f26 	beq	r2,r3,40100f4 <___vfprintf_internal_r+0x1630>
 400f8b8:	00c00084 	movi	r3,2
 400f8bc:	10fd6326 	beq	r2,r3,400ee4c <__alt_mem_epcs_flash_controller_0+0xfb00de4c>
 400f8c0:	003e2d06 	br	400f178 <__alt_mem_epcs_flash_controller_0+0xfb00e178>
 400f8c4:	d8c02017 	ldw	r3,128(sp)
 400f8c8:	003e9306 	br	400f318 <__alt_mem_epcs_flash_controller_0+0xfb00e318>
 400f8cc:	00801944 	movi	r2,101
 400f8d0:	14407e0e 	bge	r2,r17,400facc <___vfprintf_internal_r+0x1008>
 400f8d4:	d9003617 	ldw	r4,216(sp)
 400f8d8:	d9403817 	ldw	r5,224(sp)
 400f8dc:	000d883a 	mov	r6,zero
 400f8e0:	000f883a 	mov	r7,zero
 400f8e4:	d8c03c15 	stw	r3,240(sp)
 400f8e8:	da003d15 	stw	r8,244(sp)
 400f8ec:	40195440 	call	4019544 <__eqdf2>
 400f8f0:	d8c03c17 	ldw	r3,240(sp)
 400f8f4:	da003d17 	ldw	r8,244(sp)
 400f8f8:	1000f71e 	bne	r2,zero,400fcd8 <___vfprintf_internal_r+0x1214>
 400f8fc:	d8801f17 	ldw	r2,124(sp)
 400f900:	01010234 	movhi	r4,1032
 400f904:	212fef04 	addi	r4,r4,-16452
 400f908:	18c00044 	addi	r3,r3,1
 400f90c:	10800044 	addi	r2,r2,1
 400f910:	41000015 	stw	r4,0(r8)
 400f914:	01000044 	movi	r4,1
 400f918:	41000115 	stw	r4,4(r8)
 400f91c:	d8c02015 	stw	r3,128(sp)
 400f920:	d8801f15 	stw	r2,124(sp)
 400f924:	010001c4 	movi	r4,7
 400f928:	2082b816 	blt	r4,r2,401040c <___vfprintf_internal_r+0x1948>
 400f92c:	42000204 	addi	r8,r8,8
 400f930:	d8802617 	ldw	r2,152(sp)
 400f934:	d9403317 	ldw	r5,204(sp)
 400f938:	11400216 	blt	r2,r5,400f944 <___vfprintf_internal_r+0xe80>
 400f93c:	9080004c 	andi	r2,r18,1
 400f940:	103ed526 	beq	r2,zero,400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 400f944:	d8803717 	ldw	r2,220(sp)
 400f948:	d9003417 	ldw	r4,208(sp)
 400f94c:	d9403717 	ldw	r5,220(sp)
 400f950:	1887883a 	add	r3,r3,r2
 400f954:	d8801f17 	ldw	r2,124(sp)
 400f958:	41000015 	stw	r4,0(r8)
 400f95c:	41400115 	stw	r5,4(r8)
 400f960:	10800044 	addi	r2,r2,1
 400f964:	d8c02015 	stw	r3,128(sp)
 400f968:	d8801f15 	stw	r2,124(sp)
 400f96c:	010001c4 	movi	r4,7
 400f970:	20832916 	blt	r4,r2,4010618 <___vfprintf_internal_r+0x1b54>
 400f974:	42000204 	addi	r8,r8,8
 400f978:	d8803317 	ldw	r2,204(sp)
 400f97c:	143fffc4 	addi	r16,r2,-1
 400f980:	043ec50e 	bge	zero,r16,400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 400f984:	04400404 	movi	r17,16
 400f988:	d8801f17 	ldw	r2,124(sp)
 400f98c:	8c00880e 	bge	r17,r16,400fbb0 <___vfprintf_internal_r+0x10ec>
 400f990:	01410234 	movhi	r5,1032
 400f994:	296ff784 	addi	r5,r5,-16418
 400f998:	d9402b15 	stw	r5,172(sp)
 400f99c:	058001c4 	movi	r22,7
 400f9a0:	dcc02c17 	ldw	r19,176(sp)
 400f9a4:	00000306 	br	400f9b4 <___vfprintf_internal_r+0xef0>
 400f9a8:	42000204 	addi	r8,r8,8
 400f9ac:	843ffc04 	addi	r16,r16,-16
 400f9b0:	8c00820e 	bge	r17,r16,400fbbc <___vfprintf_internal_r+0x10f8>
 400f9b4:	18c00404 	addi	r3,r3,16
 400f9b8:	10800044 	addi	r2,r2,1
 400f9bc:	45000015 	stw	r20,0(r8)
 400f9c0:	44400115 	stw	r17,4(r8)
 400f9c4:	d8c02015 	stw	r3,128(sp)
 400f9c8:	d8801f15 	stw	r2,124(sp)
 400f9cc:	b0bff60e 	bge	r22,r2,400f9a8 <__alt_mem_epcs_flash_controller_0+0xfb00e9a8>
 400f9d0:	d9801e04 	addi	r6,sp,120
 400f9d4:	b80b883a 	mov	r5,r23
 400f9d8:	9809883a 	mov	r4,r19
 400f9dc:	4016c140 	call	4016c14 <__sprint_r>
 400f9e0:	103d3a1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400f9e4:	d8c02017 	ldw	r3,128(sp)
 400f9e8:	d8801f17 	ldw	r2,124(sp)
 400f9ec:	da000404 	addi	r8,sp,16
 400f9f0:	003fee06 	br	400f9ac <__alt_mem_epcs_flash_controller_0+0xfb00e9ac>
 400f9f4:	d9403117 	ldw	r5,196(sp)
 400f9f8:	d8802a17 	ldw	r2,168(sp)
 400f9fc:	28adc83a 	sub	r22,r5,r2
 400fa00:	05be630e 	bge	zero,r22,400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 400fa04:	07000404 	movi	fp,16
 400fa08:	d8801f17 	ldw	r2,124(sp)
 400fa0c:	e5838f0e 	bge	fp,r22,401084c <___vfprintf_internal_r+0x1d88>
 400fa10:	01410234 	movhi	r5,1032
 400fa14:	296ff784 	addi	r5,r5,-16418
 400fa18:	dc403015 	stw	r17,192(sp)
 400fa1c:	d9402b15 	stw	r5,172(sp)
 400fa20:	b023883a 	mov	r17,r22
 400fa24:	04c001c4 	movi	r19,7
 400fa28:	a82d883a 	mov	r22,r21
 400fa2c:	902b883a 	mov	r21,r18
 400fa30:	8025883a 	mov	r18,r16
 400fa34:	dc002c17 	ldw	r16,176(sp)
 400fa38:	00000306 	br	400fa48 <___vfprintf_internal_r+0xf84>
 400fa3c:	8c7ffc04 	addi	r17,r17,-16
 400fa40:	42000204 	addi	r8,r8,8
 400fa44:	e440110e 	bge	fp,r17,400fa8c <___vfprintf_internal_r+0xfc8>
 400fa48:	18c00404 	addi	r3,r3,16
 400fa4c:	10800044 	addi	r2,r2,1
 400fa50:	45000015 	stw	r20,0(r8)
 400fa54:	47000115 	stw	fp,4(r8)
 400fa58:	d8c02015 	stw	r3,128(sp)
 400fa5c:	d8801f15 	stw	r2,124(sp)
 400fa60:	98bff60e 	bge	r19,r2,400fa3c <__alt_mem_epcs_flash_controller_0+0xfb00ea3c>
 400fa64:	d9801e04 	addi	r6,sp,120
 400fa68:	b80b883a 	mov	r5,r23
 400fa6c:	8009883a 	mov	r4,r16
 400fa70:	4016c140 	call	4016c14 <__sprint_r>
 400fa74:	103d151e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fa78:	8c7ffc04 	addi	r17,r17,-16
 400fa7c:	d8c02017 	ldw	r3,128(sp)
 400fa80:	d8801f17 	ldw	r2,124(sp)
 400fa84:	da000404 	addi	r8,sp,16
 400fa88:	e47fef16 	blt	fp,r17,400fa48 <__alt_mem_epcs_flash_controller_0+0xfb00ea48>
 400fa8c:	9021883a 	mov	r16,r18
 400fa90:	a825883a 	mov	r18,r21
 400fa94:	b02b883a 	mov	r21,r22
 400fa98:	882d883a 	mov	r22,r17
 400fa9c:	dc403017 	ldw	r17,192(sp)
 400faa0:	d9002b17 	ldw	r4,172(sp)
 400faa4:	1d87883a 	add	r3,r3,r22
 400faa8:	10800044 	addi	r2,r2,1
 400faac:	41000015 	stw	r4,0(r8)
 400fab0:	45800115 	stw	r22,4(r8)
 400fab4:	d8c02015 	stw	r3,128(sp)
 400fab8:	d8801f15 	stw	r2,124(sp)
 400fabc:	010001c4 	movi	r4,7
 400fac0:	20818e16 	blt	r4,r2,40100fc <___vfprintf_internal_r+0x1638>
 400fac4:	42000204 	addi	r8,r8,8
 400fac8:	003e3106 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 400facc:	d9403317 	ldw	r5,204(sp)
 400fad0:	00800044 	movi	r2,1
 400fad4:	18c00044 	addi	r3,r3,1
 400fad8:	1141530e 	bge	r2,r5,4010028 <___vfprintf_internal_r+0x1564>
 400fadc:	dc401f17 	ldw	r17,124(sp)
 400fae0:	00800044 	movi	r2,1
 400fae4:	40800115 	stw	r2,4(r8)
 400fae8:	8c400044 	addi	r17,r17,1
 400faec:	44000015 	stw	r16,0(r8)
 400faf0:	d8c02015 	stw	r3,128(sp)
 400faf4:	dc401f15 	stw	r17,124(sp)
 400faf8:	008001c4 	movi	r2,7
 400fafc:	14416b16 	blt	r2,r17,40100ac <___vfprintf_internal_r+0x15e8>
 400fb00:	42000204 	addi	r8,r8,8
 400fb04:	d8803717 	ldw	r2,220(sp)
 400fb08:	d9003417 	ldw	r4,208(sp)
 400fb0c:	8c400044 	addi	r17,r17,1
 400fb10:	10c7883a 	add	r3,r2,r3
 400fb14:	40800115 	stw	r2,4(r8)
 400fb18:	41000015 	stw	r4,0(r8)
 400fb1c:	d8c02015 	stw	r3,128(sp)
 400fb20:	dc401f15 	stw	r17,124(sp)
 400fb24:	008001c4 	movi	r2,7
 400fb28:	14416916 	blt	r2,r17,40100d0 <___vfprintf_internal_r+0x160c>
 400fb2c:	45800204 	addi	r22,r8,8
 400fb30:	d9003617 	ldw	r4,216(sp)
 400fb34:	d9403817 	ldw	r5,224(sp)
 400fb38:	000d883a 	mov	r6,zero
 400fb3c:	000f883a 	mov	r7,zero
 400fb40:	d8c03c15 	stw	r3,240(sp)
 400fb44:	40195440 	call	4019544 <__eqdf2>
 400fb48:	d8c03c17 	ldw	r3,240(sp)
 400fb4c:	1000bc26 	beq	r2,zero,400fe40 <___vfprintf_internal_r+0x137c>
 400fb50:	d9403317 	ldw	r5,204(sp)
 400fb54:	84000044 	addi	r16,r16,1
 400fb58:	8c400044 	addi	r17,r17,1
 400fb5c:	28bfffc4 	addi	r2,r5,-1
 400fb60:	1887883a 	add	r3,r3,r2
 400fb64:	b0800115 	stw	r2,4(r22)
 400fb68:	b4000015 	stw	r16,0(r22)
 400fb6c:	d8c02015 	stw	r3,128(sp)
 400fb70:	dc401f15 	stw	r17,124(sp)
 400fb74:	008001c4 	movi	r2,7
 400fb78:	14414316 	blt	r2,r17,4010088 <___vfprintf_internal_r+0x15c4>
 400fb7c:	b5800204 	addi	r22,r22,8
 400fb80:	d9003a17 	ldw	r4,232(sp)
 400fb84:	df0022c4 	addi	fp,sp,139
 400fb88:	8c400044 	addi	r17,r17,1
 400fb8c:	20c7883a 	add	r3,r4,r3
 400fb90:	b7000015 	stw	fp,0(r22)
 400fb94:	b1000115 	stw	r4,4(r22)
 400fb98:	d8c02015 	stw	r3,128(sp)
 400fb9c:	dc401f15 	stw	r17,124(sp)
 400fba0:	008001c4 	movi	r2,7
 400fba4:	14400e16 	blt	r2,r17,400fbe0 <___vfprintf_internal_r+0x111c>
 400fba8:	b2000204 	addi	r8,r22,8
 400fbac:	003e3a06 	br	400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 400fbb0:	01010234 	movhi	r4,1032
 400fbb4:	212ff784 	addi	r4,r4,-16418
 400fbb8:	d9002b15 	stw	r4,172(sp)
 400fbbc:	d9002b17 	ldw	r4,172(sp)
 400fbc0:	1c07883a 	add	r3,r3,r16
 400fbc4:	44000115 	stw	r16,4(r8)
 400fbc8:	41000015 	stw	r4,0(r8)
 400fbcc:	10800044 	addi	r2,r2,1
 400fbd0:	d8c02015 	stw	r3,128(sp)
 400fbd4:	d8801f15 	stw	r2,124(sp)
 400fbd8:	010001c4 	movi	r4,7
 400fbdc:	20be2d0e 	bge	r4,r2,400f494 <__alt_mem_epcs_flash_controller_0+0xfb00e494>
 400fbe0:	d9002c17 	ldw	r4,176(sp)
 400fbe4:	d9801e04 	addi	r6,sp,120
 400fbe8:	b80b883a 	mov	r5,r23
 400fbec:	4016c140 	call	4016c14 <__sprint_r>
 400fbf0:	103cb61e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fbf4:	d8c02017 	ldw	r3,128(sp)
 400fbf8:	da000404 	addi	r8,sp,16
 400fbfc:	003e2606 	br	400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 400fc00:	d9002c17 	ldw	r4,176(sp)
 400fc04:	d9801e04 	addi	r6,sp,120
 400fc08:	b80b883a 	mov	r5,r23
 400fc0c:	4016c140 	call	4016c14 <__sprint_r>
 400fc10:	103e5d26 	beq	r2,zero,400f588 <__alt_mem_epcs_flash_controller_0+0xfb00e588>
 400fc14:	003cad06 	br	400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fc18:	d9002c17 	ldw	r4,176(sp)
 400fc1c:	d9801e04 	addi	r6,sp,120
 400fc20:	b80b883a 	mov	r5,r23
 400fc24:	4016c140 	call	4016c14 <__sprint_r>
 400fc28:	103ca81e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fc2c:	d8c02017 	ldw	r3,128(sp)
 400fc30:	da000404 	addi	r8,sp,16
 400fc34:	003e0b06 	br	400f464 <__alt_mem_epcs_flash_controller_0+0xfb00e464>
 400fc38:	d9002c17 	ldw	r4,176(sp)
 400fc3c:	d9801e04 	addi	r6,sp,120
 400fc40:	b80b883a 	mov	r5,r23
 400fc44:	4016c140 	call	4016c14 <__sprint_r>
 400fc48:	103ca01e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fc4c:	d8c02017 	ldw	r3,128(sp)
 400fc50:	da000404 	addi	r8,sp,16
 400fc54:	003dbd06 	br	400f34c <__alt_mem_epcs_flash_controller_0+0xfb00e34c>
 400fc58:	d9002c17 	ldw	r4,176(sp)
 400fc5c:	d9801e04 	addi	r6,sp,120
 400fc60:	b80b883a 	mov	r5,r23
 400fc64:	4016c140 	call	4016c14 <__sprint_r>
 400fc68:	103c981e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fc6c:	d8c02017 	ldw	r3,128(sp)
 400fc70:	da000404 	addi	r8,sp,16
 400fc74:	003dc306 	br	400f384 <__alt_mem_epcs_flash_controller_0+0xfb00e384>
 400fc78:	d8802917 	ldw	r2,164(sp)
 400fc7c:	d8002785 	stb	zero,158(sp)
 400fc80:	103f0616 	blt	r2,zero,400f89c <__alt_mem_epcs_flash_controller_0+0xfb00e89c>
 400fc84:	00ffdfc4 	movi	r3,-129
 400fc88:	9d84b03a 	or	r2,r19,r22
 400fc8c:	90e4703a 	and	r18,r18,r3
 400fc90:	103c6b26 	beq	r2,zero,400ee40 <__alt_mem_epcs_flash_controller_0+0xfb00de40>
 400fc94:	0039883a 	mov	fp,zero
 400fc98:	003e7406 	br	400f66c <__alt_mem_epcs_flash_controller_0+0xfb00e66c>
 400fc9c:	9080040c 	andi	r2,r18,16
 400fca0:	1001b326 	beq	r2,zero,4010370 <___vfprintf_internal_r+0x18ac>
 400fca4:	d9002d17 	ldw	r4,180(sp)
 400fca8:	d9402917 	ldw	r5,164(sp)
 400fcac:	d8002785 	stb	zero,158(sp)
 400fcb0:	20800104 	addi	r2,r4,4
 400fcb4:	24c00017 	ldw	r19,0(r4)
 400fcb8:	002d883a 	mov	r22,zero
 400fcbc:	2801b516 	blt	r5,zero,4010394 <___vfprintf_internal_r+0x18d0>
 400fcc0:	00ffdfc4 	movi	r3,-129
 400fcc4:	d8802d15 	stw	r2,180(sp)
 400fcc8:	90e4703a 	and	r18,r18,r3
 400fccc:	983d2726 	beq	r19,zero,400f16c <__alt_mem_epcs_flash_controller_0+0xfb00e16c>
 400fcd0:	0039883a 	mov	fp,zero
 400fcd4:	003d2a06 	br	400f180 <__alt_mem_epcs_flash_controller_0+0xfb00e180>
 400fcd8:	dc402617 	ldw	r17,152(sp)
 400fcdc:	0441d30e 	bge	zero,r17,401042c <___vfprintf_internal_r+0x1968>
 400fce0:	dc403217 	ldw	r17,200(sp)
 400fce4:	d8803317 	ldw	r2,204(sp)
 400fce8:	1440010e 	bge	r2,r17,400fcf0 <___vfprintf_internal_r+0x122c>
 400fcec:	1023883a 	mov	r17,r2
 400fcf0:	04400a0e 	bge	zero,r17,400fd1c <___vfprintf_internal_r+0x1258>
 400fcf4:	d8801f17 	ldw	r2,124(sp)
 400fcf8:	1c47883a 	add	r3,r3,r17
 400fcfc:	44000015 	stw	r16,0(r8)
 400fd00:	10800044 	addi	r2,r2,1
 400fd04:	44400115 	stw	r17,4(r8)
 400fd08:	d8c02015 	stw	r3,128(sp)
 400fd0c:	d8801f15 	stw	r2,124(sp)
 400fd10:	010001c4 	movi	r4,7
 400fd14:	20826516 	blt	r4,r2,40106ac <___vfprintf_internal_r+0x1be8>
 400fd18:	42000204 	addi	r8,r8,8
 400fd1c:	88026116 	blt	r17,zero,40106a4 <___vfprintf_internal_r+0x1be0>
 400fd20:	d9003217 	ldw	r4,200(sp)
 400fd24:	2463c83a 	sub	r17,r4,r17
 400fd28:	04407b0e 	bge	zero,r17,400ff18 <___vfprintf_internal_r+0x1454>
 400fd2c:	05800404 	movi	r22,16
 400fd30:	d8801f17 	ldw	r2,124(sp)
 400fd34:	b4419d0e 	bge	r22,r17,40103ac <___vfprintf_internal_r+0x18e8>
 400fd38:	01010234 	movhi	r4,1032
 400fd3c:	212ff784 	addi	r4,r4,-16418
 400fd40:	d9002b15 	stw	r4,172(sp)
 400fd44:	070001c4 	movi	fp,7
 400fd48:	dcc02c17 	ldw	r19,176(sp)
 400fd4c:	00000306 	br	400fd5c <___vfprintf_internal_r+0x1298>
 400fd50:	42000204 	addi	r8,r8,8
 400fd54:	8c7ffc04 	addi	r17,r17,-16
 400fd58:	b441970e 	bge	r22,r17,40103b8 <___vfprintf_internal_r+0x18f4>
 400fd5c:	18c00404 	addi	r3,r3,16
 400fd60:	10800044 	addi	r2,r2,1
 400fd64:	45000015 	stw	r20,0(r8)
 400fd68:	45800115 	stw	r22,4(r8)
 400fd6c:	d8c02015 	stw	r3,128(sp)
 400fd70:	d8801f15 	stw	r2,124(sp)
 400fd74:	e0bff60e 	bge	fp,r2,400fd50 <__alt_mem_epcs_flash_controller_0+0xfb00ed50>
 400fd78:	d9801e04 	addi	r6,sp,120
 400fd7c:	b80b883a 	mov	r5,r23
 400fd80:	9809883a 	mov	r4,r19
 400fd84:	4016c140 	call	4016c14 <__sprint_r>
 400fd88:	103c501e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fd8c:	d8c02017 	ldw	r3,128(sp)
 400fd90:	d8801f17 	ldw	r2,124(sp)
 400fd94:	da000404 	addi	r8,sp,16
 400fd98:	003fee06 	br	400fd54 <__alt_mem_epcs_flash_controller_0+0xfb00ed54>
 400fd9c:	d9002c17 	ldw	r4,176(sp)
 400fda0:	d9801e04 	addi	r6,sp,120
 400fda4:	b80b883a 	mov	r5,r23
 400fda8:	4016c140 	call	4016c14 <__sprint_r>
 400fdac:	103c471e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400fdb0:	d8c02017 	ldw	r3,128(sp)
 400fdb4:	df002787 	ldb	fp,158(sp)
 400fdb8:	da000404 	addi	r8,sp,16
 400fdbc:	003d5606 	br	400f318 <__alt_mem_epcs_flash_controller_0+0xfb00e318>
 400fdc0:	9080040c 	andi	r2,r18,16
 400fdc4:	10016126 	beq	r2,zero,401034c <___vfprintf_internal_r+0x1888>
 400fdc8:	d8802d17 	ldw	r2,180(sp)
 400fdcc:	14c00017 	ldw	r19,0(r2)
 400fdd0:	10800104 	addi	r2,r2,4
 400fdd4:	d8802d15 	stw	r2,180(sp)
 400fdd8:	982dd7fa 	srai	r22,r19,31
 400fddc:	b005883a 	mov	r2,r22
 400fde0:	003c8206 	br	400efec <__alt_mem_epcs_flash_controller_0+0xfb00dfec>
 400fde4:	9080040c 	andi	r2,r18,16
 400fde8:	10003526 	beq	r2,zero,400fec0 <___vfprintf_internal_r+0x13fc>
 400fdec:	d9402d17 	ldw	r5,180(sp)
 400fdf0:	d8c02917 	ldw	r3,164(sp)
 400fdf4:	d8002785 	stb	zero,158(sp)
 400fdf8:	28800104 	addi	r2,r5,4
 400fdfc:	2cc00017 	ldw	r19,0(r5)
 400fe00:	002d883a 	mov	r22,zero
 400fe04:	18003716 	blt	r3,zero,400fee4 <___vfprintf_internal_r+0x1420>
 400fe08:	00ffdfc4 	movi	r3,-129
 400fe0c:	d8802d15 	stw	r2,180(sp)
 400fe10:	90e4703a 	and	r18,r18,r3
 400fe14:	0039883a 	mov	fp,zero
 400fe18:	983df326 	beq	r19,zero,400f5e8 <__alt_mem_epcs_flash_controller_0+0xfb00e5e8>
 400fe1c:	00800244 	movi	r2,9
 400fe20:	14fc7b36 	bltu	r2,r19,400f010 <__alt_mem_epcs_flash_controller_0+0xfb00e010>
 400fe24:	d8c02817 	ldw	r3,160(sp)
 400fe28:	dc001dc4 	addi	r16,sp,119
 400fe2c:	9cc00c04 	addi	r19,r19,48
 400fe30:	1c07c83a 	sub	r3,r3,r16
 400fe34:	dcc01dc5 	stb	r19,119(sp)
 400fe38:	d8c02e15 	stw	r3,184(sp)
 400fe3c:	003ce806 	br	400f1e0 <__alt_mem_epcs_flash_controller_0+0xfb00e1e0>
 400fe40:	d8803317 	ldw	r2,204(sp)
 400fe44:	143fffc4 	addi	r16,r2,-1
 400fe48:	043f4d0e 	bge	zero,r16,400fb80 <__alt_mem_epcs_flash_controller_0+0xfb00eb80>
 400fe4c:	07000404 	movi	fp,16
 400fe50:	e400810e 	bge	fp,r16,4010058 <___vfprintf_internal_r+0x1594>
 400fe54:	01410234 	movhi	r5,1032
 400fe58:	296ff784 	addi	r5,r5,-16418
 400fe5c:	d9402b15 	stw	r5,172(sp)
 400fe60:	01c001c4 	movi	r7,7
 400fe64:	dcc02c17 	ldw	r19,176(sp)
 400fe68:	00000306 	br	400fe78 <___vfprintf_internal_r+0x13b4>
 400fe6c:	b5800204 	addi	r22,r22,8
 400fe70:	843ffc04 	addi	r16,r16,-16
 400fe74:	e4007b0e 	bge	fp,r16,4010064 <___vfprintf_internal_r+0x15a0>
 400fe78:	18c00404 	addi	r3,r3,16
 400fe7c:	8c400044 	addi	r17,r17,1
 400fe80:	b5000015 	stw	r20,0(r22)
 400fe84:	b7000115 	stw	fp,4(r22)
 400fe88:	d8c02015 	stw	r3,128(sp)
 400fe8c:	dc401f15 	stw	r17,124(sp)
 400fe90:	3c7ff60e 	bge	r7,r17,400fe6c <__alt_mem_epcs_flash_controller_0+0xfb00ee6c>
 400fe94:	d9801e04 	addi	r6,sp,120
 400fe98:	b80b883a 	mov	r5,r23
 400fe9c:	9809883a 	mov	r4,r19
 400fea0:	d9c03c15 	stw	r7,240(sp)
 400fea4:	4016c140 	call	4016c14 <__sprint_r>
 400fea8:	d9c03c17 	ldw	r7,240(sp)
 400feac:	103c071e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400feb0:	d8c02017 	ldw	r3,128(sp)
 400feb4:	dc401f17 	ldw	r17,124(sp)
 400feb8:	dd800404 	addi	r22,sp,16
 400febc:	003fec06 	br	400fe70 <__alt_mem_epcs_flash_controller_0+0xfb00ee70>
 400fec0:	9080100c 	andi	r2,r18,64
 400fec4:	d8002785 	stb	zero,158(sp)
 400fec8:	10010e26 	beq	r2,zero,4010304 <___vfprintf_internal_r+0x1840>
 400fecc:	d9002d17 	ldw	r4,180(sp)
 400fed0:	d9402917 	ldw	r5,164(sp)
 400fed4:	002d883a 	mov	r22,zero
 400fed8:	20800104 	addi	r2,r4,4
 400fedc:	24c0000b 	ldhu	r19,0(r4)
 400fee0:	283fc90e 	bge	r5,zero,400fe08 <__alt_mem_epcs_flash_controller_0+0xfb00ee08>
 400fee4:	d8802d15 	stw	r2,180(sp)
 400fee8:	0039883a 	mov	fp,zero
 400feec:	9d84b03a 	or	r2,r19,r22
 400fef0:	103c461e 	bne	r2,zero,400f00c <__alt_mem_epcs_flash_controller_0+0xfb00e00c>
 400fef4:	00800044 	movi	r2,1
 400fef8:	003e6c06 	br	400f8ac <__alt_mem_epcs_flash_controller_0+0xfb00e8ac>
 400fefc:	d9002c17 	ldw	r4,176(sp)
 400ff00:	d9801e04 	addi	r6,sp,120
 400ff04:	b80b883a 	mov	r5,r23
 400ff08:	4016c140 	call	4016c14 <__sprint_r>
 400ff0c:	103bef1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 400ff10:	d8c02017 	ldw	r3,128(sp)
 400ff14:	da000404 	addi	r8,sp,16
 400ff18:	d9003217 	ldw	r4,200(sp)
 400ff1c:	d8802617 	ldw	r2,152(sp)
 400ff20:	d9403317 	ldw	r5,204(sp)
 400ff24:	8123883a 	add	r17,r16,r4
 400ff28:	11400216 	blt	r2,r5,400ff34 <___vfprintf_internal_r+0x1470>
 400ff2c:	9100004c 	andi	r4,r18,1
 400ff30:	20000d26 	beq	r4,zero,400ff68 <___vfprintf_internal_r+0x14a4>
 400ff34:	d9003717 	ldw	r4,220(sp)
 400ff38:	d9403417 	ldw	r5,208(sp)
 400ff3c:	1907883a 	add	r3,r3,r4
 400ff40:	d9001f17 	ldw	r4,124(sp)
 400ff44:	41400015 	stw	r5,0(r8)
 400ff48:	d9403717 	ldw	r5,220(sp)
 400ff4c:	21000044 	addi	r4,r4,1
 400ff50:	d8c02015 	stw	r3,128(sp)
 400ff54:	41400115 	stw	r5,4(r8)
 400ff58:	d9001f15 	stw	r4,124(sp)
 400ff5c:	014001c4 	movi	r5,7
 400ff60:	2901e816 	blt	r5,r4,4010704 <___vfprintf_internal_r+0x1c40>
 400ff64:	42000204 	addi	r8,r8,8
 400ff68:	d9003317 	ldw	r4,204(sp)
 400ff6c:	8121883a 	add	r16,r16,r4
 400ff70:	2085c83a 	sub	r2,r4,r2
 400ff74:	8461c83a 	sub	r16,r16,r17
 400ff78:	1400010e 	bge	r2,r16,400ff80 <___vfprintf_internal_r+0x14bc>
 400ff7c:	1021883a 	mov	r16,r2
 400ff80:	04000a0e 	bge	zero,r16,400ffac <___vfprintf_internal_r+0x14e8>
 400ff84:	d9001f17 	ldw	r4,124(sp)
 400ff88:	1c07883a 	add	r3,r3,r16
 400ff8c:	44400015 	stw	r17,0(r8)
 400ff90:	21000044 	addi	r4,r4,1
 400ff94:	44000115 	stw	r16,4(r8)
 400ff98:	d8c02015 	stw	r3,128(sp)
 400ff9c:	d9001f15 	stw	r4,124(sp)
 400ffa0:	014001c4 	movi	r5,7
 400ffa4:	2901fb16 	blt	r5,r4,4010794 <___vfprintf_internal_r+0x1cd0>
 400ffa8:	42000204 	addi	r8,r8,8
 400ffac:	8001f716 	blt	r16,zero,401078c <___vfprintf_internal_r+0x1cc8>
 400ffb0:	1421c83a 	sub	r16,r2,r16
 400ffb4:	043d380e 	bge	zero,r16,400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 400ffb8:	04400404 	movi	r17,16
 400ffbc:	d8801f17 	ldw	r2,124(sp)
 400ffc0:	8c3efb0e 	bge	r17,r16,400fbb0 <__alt_mem_epcs_flash_controller_0+0xfb00ebb0>
 400ffc4:	01410234 	movhi	r5,1032
 400ffc8:	296ff784 	addi	r5,r5,-16418
 400ffcc:	d9402b15 	stw	r5,172(sp)
 400ffd0:	058001c4 	movi	r22,7
 400ffd4:	dcc02c17 	ldw	r19,176(sp)
 400ffd8:	00000306 	br	400ffe8 <___vfprintf_internal_r+0x1524>
 400ffdc:	42000204 	addi	r8,r8,8
 400ffe0:	843ffc04 	addi	r16,r16,-16
 400ffe4:	8c3ef50e 	bge	r17,r16,400fbbc <__alt_mem_epcs_flash_controller_0+0xfb00ebbc>
 400ffe8:	18c00404 	addi	r3,r3,16
 400ffec:	10800044 	addi	r2,r2,1
 400fff0:	45000015 	stw	r20,0(r8)
 400fff4:	44400115 	stw	r17,4(r8)
 400fff8:	d8c02015 	stw	r3,128(sp)
 400fffc:	d8801f15 	stw	r2,124(sp)
 4010000:	b0bff60e 	bge	r22,r2,400ffdc <__alt_mem_epcs_flash_controller_0+0xfb00efdc>
 4010004:	d9801e04 	addi	r6,sp,120
 4010008:	b80b883a 	mov	r5,r23
 401000c:	9809883a 	mov	r4,r19
 4010010:	4016c140 	call	4016c14 <__sprint_r>
 4010014:	103bad1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010018:	d8c02017 	ldw	r3,128(sp)
 401001c:	d8801f17 	ldw	r2,124(sp)
 4010020:	da000404 	addi	r8,sp,16
 4010024:	003fee06 	br	400ffe0 <__alt_mem_epcs_flash_controller_0+0xfb00efe0>
 4010028:	9088703a 	and	r4,r18,r2
 401002c:	203eab1e 	bne	r4,zero,400fadc <__alt_mem_epcs_flash_controller_0+0xfb00eadc>
 4010030:	dc401f17 	ldw	r17,124(sp)
 4010034:	40800115 	stw	r2,4(r8)
 4010038:	44000015 	stw	r16,0(r8)
 401003c:	8c400044 	addi	r17,r17,1
 4010040:	d8c02015 	stw	r3,128(sp)
 4010044:	dc401f15 	stw	r17,124(sp)
 4010048:	008001c4 	movi	r2,7
 401004c:	14400e16 	blt	r2,r17,4010088 <___vfprintf_internal_r+0x15c4>
 4010050:	45800204 	addi	r22,r8,8
 4010054:	003eca06 	br	400fb80 <__alt_mem_epcs_flash_controller_0+0xfb00eb80>
 4010058:	01010234 	movhi	r4,1032
 401005c:	212ff784 	addi	r4,r4,-16418
 4010060:	d9002b15 	stw	r4,172(sp)
 4010064:	d8802b17 	ldw	r2,172(sp)
 4010068:	1c07883a 	add	r3,r3,r16
 401006c:	8c400044 	addi	r17,r17,1
 4010070:	b0800015 	stw	r2,0(r22)
 4010074:	b4000115 	stw	r16,4(r22)
 4010078:	d8c02015 	stw	r3,128(sp)
 401007c:	dc401f15 	stw	r17,124(sp)
 4010080:	008001c4 	movi	r2,7
 4010084:	147ebd0e 	bge	r2,r17,400fb7c <__alt_mem_epcs_flash_controller_0+0xfb00eb7c>
 4010088:	d9002c17 	ldw	r4,176(sp)
 401008c:	d9801e04 	addi	r6,sp,120
 4010090:	b80b883a 	mov	r5,r23
 4010094:	4016c140 	call	4016c14 <__sprint_r>
 4010098:	103b8c1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 401009c:	d8c02017 	ldw	r3,128(sp)
 40100a0:	dc401f17 	ldw	r17,124(sp)
 40100a4:	dd800404 	addi	r22,sp,16
 40100a8:	003eb506 	br	400fb80 <__alt_mem_epcs_flash_controller_0+0xfb00eb80>
 40100ac:	d9002c17 	ldw	r4,176(sp)
 40100b0:	d9801e04 	addi	r6,sp,120
 40100b4:	b80b883a 	mov	r5,r23
 40100b8:	4016c140 	call	4016c14 <__sprint_r>
 40100bc:	103b831e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 40100c0:	d8c02017 	ldw	r3,128(sp)
 40100c4:	dc401f17 	ldw	r17,124(sp)
 40100c8:	da000404 	addi	r8,sp,16
 40100cc:	003e8d06 	br	400fb04 <__alt_mem_epcs_flash_controller_0+0xfb00eb04>
 40100d0:	d9002c17 	ldw	r4,176(sp)
 40100d4:	d9801e04 	addi	r6,sp,120
 40100d8:	b80b883a 	mov	r5,r23
 40100dc:	4016c140 	call	4016c14 <__sprint_r>
 40100e0:	103b7a1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 40100e4:	d8c02017 	ldw	r3,128(sp)
 40100e8:	dc401f17 	ldw	r17,124(sp)
 40100ec:	dd800404 	addi	r22,sp,16
 40100f0:	003e8f06 	br	400fb30 <__alt_mem_epcs_flash_controller_0+0xfb00eb30>
 40100f4:	0027883a 	mov	r19,zero
 40100f8:	003f4a06 	br	400fe24 <__alt_mem_epcs_flash_controller_0+0xfb00ee24>
 40100fc:	d9002c17 	ldw	r4,176(sp)
 4010100:	d9801e04 	addi	r6,sp,120
 4010104:	b80b883a 	mov	r5,r23
 4010108:	4016c140 	call	4016c14 <__sprint_r>
 401010c:	103b6f1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010110:	d8c02017 	ldw	r3,128(sp)
 4010114:	da000404 	addi	r8,sp,16
 4010118:	003c9d06 	br	400f390 <__alt_mem_epcs_flash_controller_0+0xfb00e390>
 401011c:	04e7c83a 	sub	r19,zero,r19
 4010120:	9804c03a 	cmpne	r2,r19,zero
 4010124:	05adc83a 	sub	r22,zero,r22
 4010128:	b0adc83a 	sub	r22,r22,r2
 401012c:	d8802917 	ldw	r2,164(sp)
 4010130:	07000b44 	movi	fp,45
 4010134:	df002785 	stb	fp,158(sp)
 4010138:	10017b16 	blt	r2,zero,4010728 <___vfprintf_internal_r+0x1c64>
 401013c:	00bfdfc4 	movi	r2,-129
 4010140:	90a4703a 	and	r18,r18,r2
 4010144:	003bb106 	br	400f00c <__alt_mem_epcs_flash_controller_0+0xfb00e00c>
 4010148:	d9003617 	ldw	r4,216(sp)
 401014c:	d9403817 	ldw	r5,224(sp)
 4010150:	da003d15 	stw	r8,244(sp)
 4010154:	400940c0 	call	400940c <__fpclassifyd>
 4010158:	da003d17 	ldw	r8,244(sp)
 401015c:	1000f026 	beq	r2,zero,4010520 <___vfprintf_internal_r+0x1a5c>
 4010160:	d9002917 	ldw	r4,164(sp)
 4010164:	05bff7c4 	movi	r22,-33
 4010168:	00bfffc4 	movi	r2,-1
 401016c:	8dac703a 	and	r22,r17,r22
 4010170:	20820026 	beq	r4,r2,4010974 <___vfprintf_internal_r+0x1eb0>
 4010174:	008011c4 	movi	r2,71
 4010178:	b081f726 	beq	r22,r2,4010958 <___vfprintf_internal_r+0x1e94>
 401017c:	d9003817 	ldw	r4,224(sp)
 4010180:	90c04014 	ori	r3,r18,256
 4010184:	d8c02b15 	stw	r3,172(sp)
 4010188:	20021516 	blt	r4,zero,40109e0 <___vfprintf_internal_r+0x1f1c>
 401018c:	dcc03817 	ldw	r19,224(sp)
 4010190:	d8002a05 	stb	zero,168(sp)
 4010194:	00801984 	movi	r2,102
 4010198:	8881f926 	beq	r17,r2,4010980 <___vfprintf_internal_r+0x1ebc>
 401019c:	00801184 	movi	r2,70
 40101a0:	88821c26 	beq	r17,r2,4010a14 <___vfprintf_internal_r+0x1f50>
 40101a4:	00801144 	movi	r2,69
 40101a8:	b081ef26 	beq	r22,r2,4010968 <___vfprintf_internal_r+0x1ea4>
 40101ac:	d8c02917 	ldw	r3,164(sp)
 40101b0:	d8802104 	addi	r2,sp,132
 40101b4:	d8800315 	stw	r2,12(sp)
 40101b8:	d9403617 	ldw	r5,216(sp)
 40101bc:	d8802504 	addi	r2,sp,148
 40101c0:	d9002c17 	ldw	r4,176(sp)
 40101c4:	d8800215 	stw	r2,8(sp)
 40101c8:	d8802604 	addi	r2,sp,152
 40101cc:	d8c00015 	stw	r3,0(sp)
 40101d0:	d8800115 	stw	r2,4(sp)
 40101d4:	01c00084 	movi	r7,2
 40101d8:	980d883a 	mov	r6,r19
 40101dc:	d8c03c15 	stw	r3,240(sp)
 40101e0:	da003d15 	stw	r8,244(sp)
 40101e4:	401120c0 	call	401120c <_dtoa_r>
 40101e8:	1021883a 	mov	r16,r2
 40101ec:	008019c4 	movi	r2,103
 40101f0:	d8c03c17 	ldw	r3,240(sp)
 40101f4:	da003d17 	ldw	r8,244(sp)
 40101f8:	88817126 	beq	r17,r2,40107c0 <___vfprintf_internal_r+0x1cfc>
 40101fc:	008011c4 	movi	r2,71
 4010200:	88829226 	beq	r17,r2,4010c4c <___vfprintf_internal_r+0x2188>
 4010204:	80f9883a 	add	fp,r16,r3
 4010208:	d9003617 	ldw	r4,216(sp)
 401020c:	000d883a 	mov	r6,zero
 4010210:	000f883a 	mov	r7,zero
 4010214:	980b883a 	mov	r5,r19
 4010218:	da003d15 	stw	r8,244(sp)
 401021c:	40195440 	call	4019544 <__eqdf2>
 4010220:	da003d17 	ldw	r8,244(sp)
 4010224:	10018d26 	beq	r2,zero,401085c <___vfprintf_internal_r+0x1d98>
 4010228:	d8802117 	ldw	r2,132(sp)
 401022c:	1700062e 	bgeu	r2,fp,4010248 <___vfprintf_internal_r+0x1784>
 4010230:	01000c04 	movi	r4,48
 4010234:	10c00044 	addi	r3,r2,1
 4010238:	d8c02115 	stw	r3,132(sp)
 401023c:	11000005 	stb	r4,0(r2)
 4010240:	d8802117 	ldw	r2,132(sp)
 4010244:	173ffb36 	bltu	r2,fp,4010234 <__alt_mem_epcs_flash_controller_0+0xfb00f234>
 4010248:	1405c83a 	sub	r2,r2,r16
 401024c:	d8803315 	stw	r2,204(sp)
 4010250:	008011c4 	movi	r2,71
 4010254:	b0817626 	beq	r22,r2,4010830 <___vfprintf_internal_r+0x1d6c>
 4010258:	00801944 	movi	r2,101
 401025c:	1442810e 	bge	r2,r17,4010c64 <___vfprintf_internal_r+0x21a0>
 4010260:	d8c02617 	ldw	r3,152(sp)
 4010264:	00801984 	movi	r2,102
 4010268:	d8c03215 	stw	r3,200(sp)
 401026c:	8881fe26 	beq	r17,r2,4010a68 <___vfprintf_internal_r+0x1fa4>
 4010270:	d8c03217 	ldw	r3,200(sp)
 4010274:	d9003317 	ldw	r4,204(sp)
 4010278:	1901dd16 	blt	r3,r4,40109f0 <___vfprintf_internal_r+0x1f2c>
 401027c:	9480004c 	andi	r18,r18,1
 4010280:	90022b1e 	bne	r18,zero,4010b30 <___vfprintf_internal_r+0x206c>
 4010284:	1805883a 	mov	r2,r3
 4010288:	18028016 	blt	r3,zero,4010c8c <___vfprintf_internal_r+0x21c8>
 401028c:	d8c03217 	ldw	r3,200(sp)
 4010290:	044019c4 	movi	r17,103
 4010294:	d8c02e15 	stw	r3,184(sp)
 4010298:	df002a07 	ldb	fp,168(sp)
 401029c:	e001531e 	bne	fp,zero,40107ec <___vfprintf_internal_r+0x1d28>
 40102a0:	df002783 	ldbu	fp,158(sp)
 40102a4:	d8802a15 	stw	r2,168(sp)
 40102a8:	dc802b17 	ldw	r18,172(sp)
 40102ac:	d8002915 	stw	zero,164(sp)
 40102b0:	003bd106 	br	400f1f8 <__alt_mem_epcs_flash_controller_0+0xfb00e1f8>
 40102b4:	d8802d17 	ldw	r2,180(sp)
 40102b8:	d8c02d17 	ldw	r3,180(sp)
 40102bc:	d9002d17 	ldw	r4,180(sp)
 40102c0:	10800017 	ldw	r2,0(r2)
 40102c4:	18c00117 	ldw	r3,4(r3)
 40102c8:	21000204 	addi	r4,r4,8
 40102cc:	d8803615 	stw	r2,216(sp)
 40102d0:	d8c03815 	stw	r3,224(sp)
 40102d4:	d9002d15 	stw	r4,180(sp)
 40102d8:	003b7506 	br	400f0b0 <__alt_mem_epcs_flash_controller_0+0xfb00e0b0>
 40102dc:	ac400007 	ldb	r17,0(r21)
 40102e0:	003a5906 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 40102e4:	9080100c 	andi	r2,r18,64
 40102e8:	1000a826 	beq	r2,zero,401058c <___vfprintf_internal_r+0x1ac8>
 40102ec:	d9002d17 	ldw	r4,180(sp)
 40102f0:	002d883a 	mov	r22,zero
 40102f4:	24c0000b 	ldhu	r19,0(r4)
 40102f8:	21000104 	addi	r4,r4,4
 40102fc:	d9002d15 	stw	r4,180(sp)
 4010300:	003ccb06 	br	400f630 <__alt_mem_epcs_flash_controller_0+0xfb00e630>
 4010304:	d8c02d17 	ldw	r3,180(sp)
 4010308:	d9002917 	ldw	r4,164(sp)
 401030c:	002d883a 	mov	r22,zero
 4010310:	18800104 	addi	r2,r3,4
 4010314:	1cc00017 	ldw	r19,0(r3)
 4010318:	203ebb0e 	bge	r4,zero,400fe08 <__alt_mem_epcs_flash_controller_0+0xfb00ee08>
 401031c:	003ef106 	br	400fee4 <__alt_mem_epcs_flash_controller_0+0xfb00eee4>
 4010320:	9080040c 	andi	r2,r18,16
 4010324:	1000921e 	bne	r2,zero,4010570 <___vfprintf_internal_r+0x1aac>
 4010328:	9480100c 	andi	r18,r18,64
 401032c:	90013926 	beq	r18,zero,4010814 <___vfprintf_internal_r+0x1d50>
 4010330:	d9002d17 	ldw	r4,180(sp)
 4010334:	d9402f17 	ldw	r5,188(sp)
 4010338:	20800017 	ldw	r2,0(r4)
 401033c:	21000104 	addi	r4,r4,4
 4010340:	d9002d15 	stw	r4,180(sp)
 4010344:	1140000d 	sth	r5,0(r2)
 4010348:	003a1606 	br	400eba4 <__alt_mem_epcs_flash_controller_0+0xfb00dba4>
 401034c:	9080100c 	andi	r2,r18,64
 4010350:	10008026 	beq	r2,zero,4010554 <___vfprintf_internal_r+0x1a90>
 4010354:	d8c02d17 	ldw	r3,180(sp)
 4010358:	1cc0000f 	ldh	r19,0(r3)
 401035c:	18c00104 	addi	r3,r3,4
 4010360:	d8c02d15 	stw	r3,180(sp)
 4010364:	982dd7fa 	srai	r22,r19,31
 4010368:	b005883a 	mov	r2,r22
 401036c:	003b1f06 	br	400efec <__alt_mem_epcs_flash_controller_0+0xfb00dfec>
 4010370:	9080100c 	andi	r2,r18,64
 4010374:	d8002785 	stb	zero,158(sp)
 4010378:	10008a1e 	bne	r2,zero,40105a4 <___vfprintf_internal_r+0x1ae0>
 401037c:	d9402d17 	ldw	r5,180(sp)
 4010380:	d8c02917 	ldw	r3,164(sp)
 4010384:	002d883a 	mov	r22,zero
 4010388:	28800104 	addi	r2,r5,4
 401038c:	2cc00017 	ldw	r19,0(r5)
 4010390:	183e4b0e 	bge	r3,zero,400fcc0 <__alt_mem_epcs_flash_controller_0+0xfb00ecc0>
 4010394:	9d86b03a 	or	r3,r19,r22
 4010398:	d8802d15 	stw	r2,180(sp)
 401039c:	183e4c1e 	bne	r3,zero,400fcd0 <__alt_mem_epcs_flash_controller_0+0xfb00ecd0>
 40103a0:	0039883a 	mov	fp,zero
 40103a4:	0005883a 	mov	r2,zero
 40103a8:	003d4006 	br	400f8ac <__alt_mem_epcs_flash_controller_0+0xfb00e8ac>
 40103ac:	01410234 	movhi	r5,1032
 40103b0:	296ff784 	addi	r5,r5,-16418
 40103b4:	d9402b15 	stw	r5,172(sp)
 40103b8:	d9402b17 	ldw	r5,172(sp)
 40103bc:	1c47883a 	add	r3,r3,r17
 40103c0:	10800044 	addi	r2,r2,1
 40103c4:	41400015 	stw	r5,0(r8)
 40103c8:	44400115 	stw	r17,4(r8)
 40103cc:	d8c02015 	stw	r3,128(sp)
 40103d0:	d8801f15 	stw	r2,124(sp)
 40103d4:	010001c4 	movi	r4,7
 40103d8:	20bec816 	blt	r4,r2,400fefc <__alt_mem_epcs_flash_controller_0+0xfb00eefc>
 40103dc:	42000204 	addi	r8,r8,8
 40103e0:	003ecd06 	br	400ff18 <__alt_mem_epcs_flash_controller_0+0xfb00ef18>
 40103e4:	d9002917 	ldw	r4,164(sp)
 40103e8:	d8002785 	stb	zero,158(sp)
 40103ec:	203d2d16 	blt	r4,zero,400f8a4 <__alt_mem_epcs_flash_controller_0+0xfb00e8a4>
 40103f0:	00bfdfc4 	movi	r2,-129
 40103f4:	90a4703a 	and	r18,r18,r2
 40103f8:	003a9106 	br	400ee40 <__alt_mem_epcs_flash_controller_0+0xfb00de40>
 40103fc:	01010234 	movhi	r4,1032
 4010400:	212ff784 	addi	r4,r4,-16418
 4010404:	d9002b15 	stw	r4,172(sp)
 4010408:	003c0c06 	br	400f43c <__alt_mem_epcs_flash_controller_0+0xfb00e43c>
 401040c:	d9002c17 	ldw	r4,176(sp)
 4010410:	d9801e04 	addi	r6,sp,120
 4010414:	b80b883a 	mov	r5,r23
 4010418:	4016c140 	call	4016c14 <__sprint_r>
 401041c:	103aab1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010420:	d8c02017 	ldw	r3,128(sp)
 4010424:	da000404 	addi	r8,sp,16
 4010428:	003d4106 	br	400f930 <__alt_mem_epcs_flash_controller_0+0xfb00e930>
 401042c:	d8801f17 	ldw	r2,124(sp)
 4010430:	01410234 	movhi	r5,1032
 4010434:	01000044 	movi	r4,1
 4010438:	18c00044 	addi	r3,r3,1
 401043c:	10800044 	addi	r2,r2,1
 4010440:	296fef04 	addi	r5,r5,-16452
 4010444:	41000115 	stw	r4,4(r8)
 4010448:	41400015 	stw	r5,0(r8)
 401044c:	d8c02015 	stw	r3,128(sp)
 4010450:	d8801f15 	stw	r2,124(sp)
 4010454:	010001c4 	movi	r4,7
 4010458:	20805c16 	blt	r4,r2,40105cc <___vfprintf_internal_r+0x1b08>
 401045c:	42000204 	addi	r8,r8,8
 4010460:	8800041e 	bne	r17,zero,4010474 <___vfprintf_internal_r+0x19b0>
 4010464:	d8803317 	ldw	r2,204(sp)
 4010468:	1000021e 	bne	r2,zero,4010474 <___vfprintf_internal_r+0x19b0>
 401046c:	9080004c 	andi	r2,r18,1
 4010470:	103c0926 	beq	r2,zero,400f498 <__alt_mem_epcs_flash_controller_0+0xfb00e498>
 4010474:	d9003717 	ldw	r4,220(sp)
 4010478:	d8801f17 	ldw	r2,124(sp)
 401047c:	d9403417 	ldw	r5,208(sp)
 4010480:	20c7883a 	add	r3,r4,r3
 4010484:	10800044 	addi	r2,r2,1
 4010488:	41000115 	stw	r4,4(r8)
 401048c:	41400015 	stw	r5,0(r8)
 4010490:	d8c02015 	stw	r3,128(sp)
 4010494:	d8801f15 	stw	r2,124(sp)
 4010498:	010001c4 	movi	r4,7
 401049c:	20812116 	blt	r4,r2,4010924 <___vfprintf_internal_r+0x1e60>
 40104a0:	42000204 	addi	r8,r8,8
 40104a4:	0463c83a 	sub	r17,zero,r17
 40104a8:	0440730e 	bge	zero,r17,4010678 <___vfprintf_internal_r+0x1bb4>
 40104ac:	05800404 	movi	r22,16
 40104b0:	b440860e 	bge	r22,r17,40106cc <___vfprintf_internal_r+0x1c08>
 40104b4:	01410234 	movhi	r5,1032
 40104b8:	296ff784 	addi	r5,r5,-16418
 40104bc:	d9402b15 	stw	r5,172(sp)
 40104c0:	070001c4 	movi	fp,7
 40104c4:	dcc02c17 	ldw	r19,176(sp)
 40104c8:	00000306 	br	40104d8 <___vfprintf_internal_r+0x1a14>
 40104cc:	42000204 	addi	r8,r8,8
 40104d0:	8c7ffc04 	addi	r17,r17,-16
 40104d4:	b440800e 	bge	r22,r17,40106d8 <___vfprintf_internal_r+0x1c14>
 40104d8:	18c00404 	addi	r3,r3,16
 40104dc:	10800044 	addi	r2,r2,1
 40104e0:	45000015 	stw	r20,0(r8)
 40104e4:	45800115 	stw	r22,4(r8)
 40104e8:	d8c02015 	stw	r3,128(sp)
 40104ec:	d8801f15 	stw	r2,124(sp)
 40104f0:	e0bff60e 	bge	fp,r2,40104cc <__alt_mem_epcs_flash_controller_0+0xfb00f4cc>
 40104f4:	d9801e04 	addi	r6,sp,120
 40104f8:	b80b883a 	mov	r5,r23
 40104fc:	9809883a 	mov	r4,r19
 4010500:	4016c140 	call	4016c14 <__sprint_r>
 4010504:	103a711e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010508:	d8c02017 	ldw	r3,128(sp)
 401050c:	d8801f17 	ldw	r2,124(sp)
 4010510:	da000404 	addi	r8,sp,16
 4010514:	003fee06 	br	40104d0 <__alt_mem_epcs_flash_controller_0+0xfb00f4d0>
 4010518:	00bfffc4 	movi	r2,-1
 401051c:	003a6f06 	br	400eedc <__alt_mem_epcs_flash_controller_0+0xfb00dedc>
 4010520:	008011c4 	movi	r2,71
 4010524:	1440b816 	blt	r2,r17,4010808 <___vfprintf_internal_r+0x1d44>
 4010528:	04010234 	movhi	r16,1032
 401052c:	842fe104 	addi	r16,r16,-16508
 4010530:	00c000c4 	movi	r3,3
 4010534:	00bfdfc4 	movi	r2,-129
 4010538:	d8c02a15 	stw	r3,168(sp)
 401053c:	90a4703a 	and	r18,r18,r2
 4010540:	df002783 	ldbu	fp,158(sp)
 4010544:	d8c02e15 	stw	r3,184(sp)
 4010548:	d8002915 	stw	zero,164(sp)
 401054c:	d8003215 	stw	zero,200(sp)
 4010550:	003b2906 	br	400f1f8 <__alt_mem_epcs_flash_controller_0+0xfb00e1f8>
 4010554:	d9002d17 	ldw	r4,180(sp)
 4010558:	24c00017 	ldw	r19,0(r4)
 401055c:	21000104 	addi	r4,r4,4
 4010560:	d9002d15 	stw	r4,180(sp)
 4010564:	982dd7fa 	srai	r22,r19,31
 4010568:	b005883a 	mov	r2,r22
 401056c:	003a9f06 	br	400efec <__alt_mem_epcs_flash_controller_0+0xfb00dfec>
 4010570:	d9402d17 	ldw	r5,180(sp)
 4010574:	d8c02f17 	ldw	r3,188(sp)
 4010578:	28800017 	ldw	r2,0(r5)
 401057c:	29400104 	addi	r5,r5,4
 4010580:	d9402d15 	stw	r5,180(sp)
 4010584:	10c00015 	stw	r3,0(r2)
 4010588:	00398606 	br	400eba4 <__alt_mem_epcs_flash_controller_0+0xfb00dba4>
 401058c:	d9402d17 	ldw	r5,180(sp)
 4010590:	002d883a 	mov	r22,zero
 4010594:	2cc00017 	ldw	r19,0(r5)
 4010598:	29400104 	addi	r5,r5,4
 401059c:	d9402d15 	stw	r5,180(sp)
 40105a0:	003c2306 	br	400f630 <__alt_mem_epcs_flash_controller_0+0xfb00e630>
 40105a4:	d8c02d17 	ldw	r3,180(sp)
 40105a8:	d9002917 	ldw	r4,164(sp)
 40105ac:	002d883a 	mov	r22,zero
 40105b0:	18800104 	addi	r2,r3,4
 40105b4:	1cc0000b 	ldhu	r19,0(r3)
 40105b8:	203dc10e 	bge	r4,zero,400fcc0 <__alt_mem_epcs_flash_controller_0+0xfb00ecc0>
 40105bc:	003f7506 	br	4010394 <__alt_mem_epcs_flash_controller_0+0xfb00f394>
 40105c0:	04010234 	movhi	r16,1032
 40105c4:	842fdf04 	addi	r16,r16,-16516
 40105c8:	003acc06 	br	400f0fc <__alt_mem_epcs_flash_controller_0+0xfb00e0fc>
 40105cc:	d9002c17 	ldw	r4,176(sp)
 40105d0:	d9801e04 	addi	r6,sp,120
 40105d4:	b80b883a 	mov	r5,r23
 40105d8:	4016c140 	call	4016c14 <__sprint_r>
 40105dc:	103a3b1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 40105e0:	dc402617 	ldw	r17,152(sp)
 40105e4:	d8c02017 	ldw	r3,128(sp)
 40105e8:	da000404 	addi	r8,sp,16
 40105ec:	003f9c06 	br	4010460 <__alt_mem_epcs_flash_controller_0+0xfb00f460>
 40105f0:	ac400043 	ldbu	r17,1(r21)
 40105f4:	94800814 	ori	r18,r18,32
 40105f8:	ad400044 	addi	r21,r21,1
 40105fc:	8c403fcc 	andi	r17,r17,255
 4010600:	8c40201c 	xori	r17,r17,128
 4010604:	8c7fe004 	addi	r17,r17,-128
 4010608:	00398f06 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 401060c:	d8c02d15 	stw	r3,180(sp)
 4010610:	0039883a 	mov	fp,zero
 4010614:	003e3506 	br	400feec <__alt_mem_epcs_flash_controller_0+0xfb00eeec>
 4010618:	d9002c17 	ldw	r4,176(sp)
 401061c:	d9801e04 	addi	r6,sp,120
 4010620:	b80b883a 	mov	r5,r23
 4010624:	4016c140 	call	4016c14 <__sprint_r>
 4010628:	103a281e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 401062c:	d8c02017 	ldw	r3,128(sp)
 4010630:	da000404 	addi	r8,sp,16
 4010634:	003cd006 	br	400f978 <__alt_mem_epcs_flash_controller_0+0xfb00e978>
 4010638:	8009883a 	mov	r4,r16
 401063c:	da003d15 	stw	r8,244(sp)
 4010640:	400c8540 	call	400c854 <strlen>
 4010644:	d8802e15 	stw	r2,184(sp)
 4010648:	da003d17 	ldw	r8,244(sp)
 401064c:	103c340e 	bge	r2,zero,400f720 <__alt_mem_epcs_flash_controller_0+0xfb00e720>
 4010650:	0005883a 	mov	r2,zero
 4010654:	003c3206 	br	400f720 <__alt_mem_epcs_flash_controller_0+0xfb00e720>
 4010658:	d9002c17 	ldw	r4,176(sp)
 401065c:	d9801e04 	addi	r6,sp,120
 4010660:	b80b883a 	mov	r5,r23
 4010664:	4016c140 	call	4016c14 <__sprint_r>
 4010668:	103a181e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 401066c:	d8c02017 	ldw	r3,128(sp)
 4010670:	d8801f17 	ldw	r2,124(sp)
 4010674:	da000404 	addi	r8,sp,16
 4010678:	d9403317 	ldw	r5,204(sp)
 401067c:	10800044 	addi	r2,r2,1
 4010680:	44000015 	stw	r16,0(r8)
 4010684:	28c7883a 	add	r3,r5,r3
 4010688:	003b7d06 	br	400f480 <__alt_mem_epcs_flash_controller_0+0xfb00e480>
 401068c:	01010234 	movhi	r4,1032
 4010690:	212ffb84 	addi	r4,r4,-16402
 4010694:	d9003515 	stw	r4,212(sp)
 4010698:	003b1406 	br	400f2ec <__alt_mem_epcs_flash_controller_0+0xfb00e2ec>
 401069c:	013fffc4 	movi	r4,-1
 40106a0:	003a3506 	br	400ef78 <__alt_mem_epcs_flash_controller_0+0xfb00df78>
 40106a4:	0023883a 	mov	r17,zero
 40106a8:	003d9d06 	br	400fd20 <__alt_mem_epcs_flash_controller_0+0xfb00ed20>
 40106ac:	d9002c17 	ldw	r4,176(sp)
 40106b0:	d9801e04 	addi	r6,sp,120
 40106b4:	b80b883a 	mov	r5,r23
 40106b8:	4016c140 	call	4016c14 <__sprint_r>
 40106bc:	103a031e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 40106c0:	d8c02017 	ldw	r3,128(sp)
 40106c4:	da000404 	addi	r8,sp,16
 40106c8:	003d9406 	br	400fd1c <__alt_mem_epcs_flash_controller_0+0xfb00ed1c>
 40106cc:	01010234 	movhi	r4,1032
 40106d0:	212ff784 	addi	r4,r4,-16418
 40106d4:	d9002b15 	stw	r4,172(sp)
 40106d8:	d9002b17 	ldw	r4,172(sp)
 40106dc:	1c47883a 	add	r3,r3,r17
 40106e0:	10800044 	addi	r2,r2,1
 40106e4:	41000015 	stw	r4,0(r8)
 40106e8:	44400115 	stw	r17,4(r8)
 40106ec:	d8c02015 	stw	r3,128(sp)
 40106f0:	d8801f15 	stw	r2,124(sp)
 40106f4:	010001c4 	movi	r4,7
 40106f8:	20bfd716 	blt	r4,r2,4010658 <__alt_mem_epcs_flash_controller_0+0xfb00f658>
 40106fc:	42000204 	addi	r8,r8,8
 4010700:	003fdd06 	br	4010678 <__alt_mem_epcs_flash_controller_0+0xfb00f678>
 4010704:	d9002c17 	ldw	r4,176(sp)
 4010708:	d9801e04 	addi	r6,sp,120
 401070c:	b80b883a 	mov	r5,r23
 4010710:	4016c140 	call	4016c14 <__sprint_r>
 4010714:	1039ed1e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010718:	d8802617 	ldw	r2,152(sp)
 401071c:	d8c02017 	ldw	r3,128(sp)
 4010720:	da000404 	addi	r8,sp,16
 4010724:	003e1006 	br	400ff68 <__alt_mem_epcs_flash_controller_0+0xfb00ef68>
 4010728:	00800044 	movi	r2,1
 401072c:	10803fcc 	andi	r2,r2,255
 4010730:	00c00044 	movi	r3,1
 4010734:	10fa3526 	beq	r2,r3,400f00c <__alt_mem_epcs_flash_controller_0+0xfb00e00c>
 4010738:	00c00084 	movi	r3,2
 401073c:	10fbcb26 	beq	r2,r3,400f66c <__alt_mem_epcs_flash_controller_0+0xfb00e66c>
 4010740:	003a8f06 	br	400f180 <__alt_mem_epcs_flash_controller_0+0xfb00e180>
 4010744:	01010234 	movhi	r4,1032
 4010748:	212ffb84 	addi	r4,r4,-16402
 401074c:	d9003515 	stw	r4,212(sp)
 4010750:	003b7606 	br	400f52c <__alt_mem_epcs_flash_controller_0+0xfb00e52c>
 4010754:	d8802917 	ldw	r2,164(sp)
 4010758:	00c00184 	movi	r3,6
 401075c:	1880012e 	bgeu	r3,r2,4010764 <___vfprintf_internal_r+0x1ca0>
 4010760:	1805883a 	mov	r2,r3
 4010764:	d8802e15 	stw	r2,184(sp)
 4010768:	1000ef16 	blt	r2,zero,4010b28 <___vfprintf_internal_r+0x2064>
 401076c:	04010234 	movhi	r16,1032
 4010770:	d8802a15 	stw	r2,168(sp)
 4010774:	dcc02d15 	stw	r19,180(sp)
 4010778:	d8002915 	stw	zero,164(sp)
 401077c:	d8003215 	stw	zero,200(sp)
 4010780:	842fed04 	addi	r16,r16,-16460
 4010784:	0039883a 	mov	fp,zero
 4010788:	003aa206 	br	400f214 <__alt_mem_epcs_flash_controller_0+0xfb00e214>
 401078c:	0021883a 	mov	r16,zero
 4010790:	003e0706 	br	400ffb0 <__alt_mem_epcs_flash_controller_0+0xfb00efb0>
 4010794:	d9002c17 	ldw	r4,176(sp)
 4010798:	d9801e04 	addi	r6,sp,120
 401079c:	b80b883a 	mov	r5,r23
 40107a0:	4016c140 	call	4016c14 <__sprint_r>
 40107a4:	1039c91e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 40107a8:	d8802617 	ldw	r2,152(sp)
 40107ac:	d9403317 	ldw	r5,204(sp)
 40107b0:	d8c02017 	ldw	r3,128(sp)
 40107b4:	da000404 	addi	r8,sp,16
 40107b8:	2885c83a 	sub	r2,r5,r2
 40107bc:	003dfb06 	br	400ffac <__alt_mem_epcs_flash_controller_0+0xfb00efac>
 40107c0:	9080004c 	andi	r2,r18,1
 40107c4:	103e8f1e 	bne	r2,zero,4010204 <__alt_mem_epcs_flash_controller_0+0xfb00f204>
 40107c8:	d8802117 	ldw	r2,132(sp)
 40107cc:	003e9e06 	br	4010248 <__alt_mem_epcs_flash_controller_0+0xfb00f248>
 40107d0:	1025883a 	mov	r18,r2
 40107d4:	0039883a 	mov	fp,zero
 40107d8:	00800084 	movi	r2,2
 40107dc:	003fd306 	br	401072c <__alt_mem_epcs_flash_controller_0+0xfb00f72c>
 40107e0:	07000b44 	movi	fp,45
 40107e4:	df002785 	stb	fp,158(sp)
 40107e8:	003a4006 	br	400f0ec <__alt_mem_epcs_flash_controller_0+0xfb00e0ec>
 40107ec:	00c00b44 	movi	r3,45
 40107f0:	d8c02785 	stb	r3,158(sp)
 40107f4:	d8802a15 	stw	r2,168(sp)
 40107f8:	dc802b17 	ldw	r18,172(sp)
 40107fc:	d8002915 	stw	zero,164(sp)
 4010800:	07000b44 	movi	fp,45
 4010804:	003a8006 	br	400f208 <__alt_mem_epcs_flash_controller_0+0xfb00e208>
 4010808:	04010234 	movhi	r16,1032
 401080c:	842fe204 	addi	r16,r16,-16504
 4010810:	003f4706 	br	4010530 <__alt_mem_epcs_flash_controller_0+0xfb00f530>
 4010814:	d8c02d17 	ldw	r3,180(sp)
 4010818:	d9002f17 	ldw	r4,188(sp)
 401081c:	18800017 	ldw	r2,0(r3)
 4010820:	18c00104 	addi	r3,r3,4
 4010824:	d8c02d15 	stw	r3,180(sp)
 4010828:	11000015 	stw	r4,0(r2)
 401082c:	0038dd06 	br	400eba4 <__alt_mem_epcs_flash_controller_0+0xfb00dba4>
 4010830:	dd802617 	ldw	r22,152(sp)
 4010834:	00bfff44 	movi	r2,-3
 4010838:	b0801c16 	blt	r22,r2,40108ac <___vfprintf_internal_r+0x1de8>
 401083c:	d9402917 	ldw	r5,164(sp)
 4010840:	2d801a16 	blt	r5,r22,40108ac <___vfprintf_internal_r+0x1de8>
 4010844:	dd803215 	stw	r22,200(sp)
 4010848:	003e8906 	br	4010270 <__alt_mem_epcs_flash_controller_0+0xfb00f270>
 401084c:	01010234 	movhi	r4,1032
 4010850:	212ff784 	addi	r4,r4,-16418
 4010854:	d9002b15 	stw	r4,172(sp)
 4010858:	003c9106 	br	400faa0 <__alt_mem_epcs_flash_controller_0+0xfb00eaa0>
 401085c:	e005883a 	mov	r2,fp
 4010860:	003e7906 	br	4010248 <__alt_mem_epcs_flash_controller_0+0xfb00f248>
 4010864:	d9402917 	ldw	r5,164(sp)
 4010868:	df002783 	ldbu	fp,158(sp)
 401086c:	dcc02d15 	stw	r19,180(sp)
 4010870:	d9402a15 	stw	r5,168(sp)
 4010874:	d9402e15 	stw	r5,184(sp)
 4010878:	d8002915 	stw	zero,164(sp)
 401087c:	d8003215 	stw	zero,200(sp)
 4010880:	003a5d06 	br	400f1f8 <__alt_mem_epcs_flash_controller_0+0xfb00e1f8>
 4010884:	9080004c 	andi	r2,r18,1
 4010888:	0039883a 	mov	fp,zero
 401088c:	10000426 	beq	r2,zero,40108a0 <___vfprintf_internal_r+0x1ddc>
 4010890:	00800c04 	movi	r2,48
 4010894:	dc001dc4 	addi	r16,sp,119
 4010898:	d8801dc5 	stb	r2,119(sp)
 401089c:	003b8006 	br	400f6a0 <__alt_mem_epcs_flash_controller_0+0xfb00e6a0>
 40108a0:	d8002e15 	stw	zero,184(sp)
 40108a4:	dc001e04 	addi	r16,sp,120
 40108a8:	003a4d06 	br	400f1e0 <__alt_mem_epcs_flash_controller_0+0xfb00e1e0>
 40108ac:	8c7fff84 	addi	r17,r17,-2
 40108b0:	b5bfffc4 	addi	r22,r22,-1
 40108b4:	dd802615 	stw	r22,152(sp)
 40108b8:	dc4022c5 	stb	r17,139(sp)
 40108bc:	b000bf16 	blt	r22,zero,4010bbc <___vfprintf_internal_r+0x20f8>
 40108c0:	00800ac4 	movi	r2,43
 40108c4:	d8802305 	stb	r2,140(sp)
 40108c8:	00800244 	movi	r2,9
 40108cc:	15807016 	blt	r2,r22,4010a90 <___vfprintf_internal_r+0x1fcc>
 40108d0:	00800c04 	movi	r2,48
 40108d4:	b5800c04 	addi	r22,r22,48
 40108d8:	d8802345 	stb	r2,141(sp)
 40108dc:	dd802385 	stb	r22,142(sp)
 40108e0:	d88023c4 	addi	r2,sp,143
 40108e4:	df0022c4 	addi	fp,sp,139
 40108e8:	d8c03317 	ldw	r3,204(sp)
 40108ec:	1739c83a 	sub	fp,r2,fp
 40108f0:	d9003317 	ldw	r4,204(sp)
 40108f4:	e0c7883a 	add	r3,fp,r3
 40108f8:	df003a15 	stw	fp,232(sp)
 40108fc:	d8c02e15 	stw	r3,184(sp)
 4010900:	00800044 	movi	r2,1
 4010904:	1100b30e 	bge	r2,r4,4010bd4 <___vfprintf_internal_r+0x2110>
 4010908:	d8c02e17 	ldw	r3,184(sp)
 401090c:	18c00044 	addi	r3,r3,1
 4010910:	d8c02e15 	stw	r3,184(sp)
 4010914:	1805883a 	mov	r2,r3
 4010918:	1800ac16 	blt	r3,zero,4010bcc <___vfprintf_internal_r+0x2108>
 401091c:	d8003215 	stw	zero,200(sp)
 4010920:	003e5d06 	br	4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010924:	d9002c17 	ldw	r4,176(sp)
 4010928:	d9801e04 	addi	r6,sp,120
 401092c:	b80b883a 	mov	r5,r23
 4010930:	4016c140 	call	4016c14 <__sprint_r>
 4010934:	1039651e 	bne	r2,zero,400eecc <__alt_mem_epcs_flash_controller_0+0xfb00decc>
 4010938:	dc402617 	ldw	r17,152(sp)
 401093c:	d8c02017 	ldw	r3,128(sp)
 4010940:	d8801f17 	ldw	r2,124(sp)
 4010944:	da000404 	addi	r8,sp,16
 4010948:	003ed606 	br	40104a4 <__alt_mem_epcs_flash_controller_0+0xfb00f4a4>
 401094c:	582b883a 	mov	r21,r11
 4010950:	d8002915 	stw	zero,164(sp)
 4010954:	0038bd06 	br	400ec4c <__alt_mem_epcs_flash_controller_0+0xfb00dc4c>
 4010958:	d8802917 	ldw	r2,164(sp)
 401095c:	103e071e 	bne	r2,zero,401017c <__alt_mem_epcs_flash_controller_0+0xfb00f17c>
 4010960:	dc002915 	stw	r16,164(sp)
 4010964:	003e0506 	br	401017c <__alt_mem_epcs_flash_controller_0+0xfb00f17c>
 4010968:	d9002917 	ldw	r4,164(sp)
 401096c:	20c00044 	addi	r3,r4,1
 4010970:	003e0f06 	br	40101b0 <__alt_mem_epcs_flash_controller_0+0xfb00f1b0>
 4010974:	01400184 	movi	r5,6
 4010978:	d9402915 	stw	r5,164(sp)
 401097c:	003dff06 	br	401017c <__alt_mem_epcs_flash_controller_0+0xfb00f17c>
 4010980:	d8802104 	addi	r2,sp,132
 4010984:	d8800315 	stw	r2,12(sp)
 4010988:	d8802504 	addi	r2,sp,148
 401098c:	d8800215 	stw	r2,8(sp)
 4010990:	d8802604 	addi	r2,sp,152
 4010994:	d8800115 	stw	r2,4(sp)
 4010998:	d8802917 	ldw	r2,164(sp)
 401099c:	d9403617 	ldw	r5,216(sp)
 40109a0:	d9002c17 	ldw	r4,176(sp)
 40109a4:	d8800015 	stw	r2,0(sp)
 40109a8:	01c000c4 	movi	r7,3
 40109ac:	980d883a 	mov	r6,r19
 40109b0:	da003d15 	stw	r8,244(sp)
 40109b4:	401120c0 	call	401120c <_dtoa_r>
 40109b8:	d8c02917 	ldw	r3,164(sp)
 40109bc:	da003d17 	ldw	r8,244(sp)
 40109c0:	1021883a 	mov	r16,r2
 40109c4:	10f9883a 	add	fp,r2,r3
 40109c8:	81000007 	ldb	r4,0(r16)
 40109cc:	00800c04 	movi	r2,48
 40109d0:	20805e26 	beq	r4,r2,4010b4c <___vfprintf_internal_r+0x2088>
 40109d4:	d8c02617 	ldw	r3,152(sp)
 40109d8:	e0f9883a 	add	fp,fp,r3
 40109dc:	003e0a06 	br	4010208 <__alt_mem_epcs_flash_controller_0+0xfb00f208>
 40109e0:	00c00b44 	movi	r3,45
 40109e4:	24e0003c 	xorhi	r19,r4,32768
 40109e8:	d8c02a05 	stb	r3,168(sp)
 40109ec:	003de906 	br	4010194 <__alt_mem_epcs_flash_controller_0+0xfb00f194>
 40109f0:	d8c03217 	ldw	r3,200(sp)
 40109f4:	00c07a0e 	bge	zero,r3,4010be0 <___vfprintf_internal_r+0x211c>
 40109f8:	00800044 	movi	r2,1
 40109fc:	d9003317 	ldw	r4,204(sp)
 4010a00:	1105883a 	add	r2,r2,r4
 4010a04:	d8802e15 	stw	r2,184(sp)
 4010a08:	10004e16 	blt	r2,zero,4010b44 <___vfprintf_internal_r+0x2080>
 4010a0c:	044019c4 	movi	r17,103
 4010a10:	003e2106 	br	4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010a14:	d9002917 	ldw	r4,164(sp)
 4010a18:	d8802104 	addi	r2,sp,132
 4010a1c:	d8800315 	stw	r2,12(sp)
 4010a20:	d9000015 	stw	r4,0(sp)
 4010a24:	d8802504 	addi	r2,sp,148
 4010a28:	d9403617 	ldw	r5,216(sp)
 4010a2c:	d9002c17 	ldw	r4,176(sp)
 4010a30:	d8800215 	stw	r2,8(sp)
 4010a34:	d8802604 	addi	r2,sp,152
 4010a38:	d8800115 	stw	r2,4(sp)
 4010a3c:	01c000c4 	movi	r7,3
 4010a40:	980d883a 	mov	r6,r19
 4010a44:	da003d15 	stw	r8,244(sp)
 4010a48:	401120c0 	call	401120c <_dtoa_r>
 4010a4c:	d8c02917 	ldw	r3,164(sp)
 4010a50:	da003d17 	ldw	r8,244(sp)
 4010a54:	1021883a 	mov	r16,r2
 4010a58:	00801184 	movi	r2,70
 4010a5c:	80f9883a 	add	fp,r16,r3
 4010a60:	88bfd926 	beq	r17,r2,40109c8 <__alt_mem_epcs_flash_controller_0+0xfb00f9c8>
 4010a64:	003de806 	br	4010208 <__alt_mem_epcs_flash_controller_0+0xfb00f208>
 4010a68:	d9002917 	ldw	r4,164(sp)
 4010a6c:	00c04d0e 	bge	zero,r3,4010ba4 <___vfprintf_internal_r+0x20e0>
 4010a70:	2000441e 	bne	r4,zero,4010b84 <___vfprintf_internal_r+0x20c0>
 4010a74:	9480004c 	andi	r18,r18,1
 4010a78:	9000421e 	bne	r18,zero,4010b84 <___vfprintf_internal_r+0x20c0>
 4010a7c:	1805883a 	mov	r2,r3
 4010a80:	18007016 	blt	r3,zero,4010c44 <___vfprintf_internal_r+0x2180>
 4010a84:	d8c03217 	ldw	r3,200(sp)
 4010a88:	d8c02e15 	stw	r3,184(sp)
 4010a8c:	003e0206 	br	4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010a90:	df0022c4 	addi	fp,sp,139
 4010a94:	dc002915 	stw	r16,164(sp)
 4010a98:	4027883a 	mov	r19,r8
 4010a9c:	e021883a 	mov	r16,fp
 4010aa0:	b009883a 	mov	r4,r22
 4010aa4:	01400284 	movi	r5,10
 4010aa8:	400950c0 	call	400950c <__modsi3>
 4010aac:	10800c04 	addi	r2,r2,48
 4010ab0:	843fffc4 	addi	r16,r16,-1
 4010ab4:	b009883a 	mov	r4,r22
 4010ab8:	01400284 	movi	r5,10
 4010abc:	80800005 	stb	r2,0(r16)
 4010ac0:	40094880 	call	4009488 <__divsi3>
 4010ac4:	102d883a 	mov	r22,r2
 4010ac8:	00800244 	movi	r2,9
 4010acc:	15bff416 	blt	r2,r22,4010aa0 <__alt_mem_epcs_flash_controller_0+0xfb00faa0>
 4010ad0:	9811883a 	mov	r8,r19
 4010ad4:	b0800c04 	addi	r2,r22,48
 4010ad8:	8027883a 	mov	r19,r16
 4010adc:	997fffc4 	addi	r5,r19,-1
 4010ae0:	98bfffc5 	stb	r2,-1(r19)
 4010ae4:	dc002917 	ldw	r16,164(sp)
 4010ae8:	2f006a2e 	bgeu	r5,fp,4010c94 <___vfprintf_internal_r+0x21d0>
 4010aec:	d9c02384 	addi	r7,sp,142
 4010af0:	3ccfc83a 	sub	r7,r7,r19
 4010af4:	d9002344 	addi	r4,sp,141
 4010af8:	e1cf883a 	add	r7,fp,r7
 4010afc:	00000106 	br	4010b04 <___vfprintf_internal_r+0x2040>
 4010b00:	28800003 	ldbu	r2,0(r5)
 4010b04:	20800005 	stb	r2,0(r4)
 4010b08:	21000044 	addi	r4,r4,1
 4010b0c:	29400044 	addi	r5,r5,1
 4010b10:	393ffb1e 	bne	r7,r4,4010b00 <__alt_mem_epcs_flash_controller_0+0xfb00fb00>
 4010b14:	d8802304 	addi	r2,sp,140
 4010b18:	14c5c83a 	sub	r2,r2,r19
 4010b1c:	d8c02344 	addi	r3,sp,141
 4010b20:	1885883a 	add	r2,r3,r2
 4010b24:	003f7006 	br	40108e8 <__alt_mem_epcs_flash_controller_0+0xfb00f8e8>
 4010b28:	0005883a 	mov	r2,zero
 4010b2c:	003f0f06 	br	401076c <__alt_mem_epcs_flash_controller_0+0xfb00f76c>
 4010b30:	d8c03217 	ldw	r3,200(sp)
 4010b34:	18c00044 	addi	r3,r3,1
 4010b38:	d8c02e15 	stw	r3,184(sp)
 4010b3c:	1805883a 	mov	r2,r3
 4010b40:	183fb20e 	bge	r3,zero,4010a0c <__alt_mem_epcs_flash_controller_0+0xfb00fa0c>
 4010b44:	0005883a 	mov	r2,zero
 4010b48:	003fb006 	br	4010a0c <__alt_mem_epcs_flash_controller_0+0xfb00fa0c>
 4010b4c:	d9003617 	ldw	r4,216(sp)
 4010b50:	000d883a 	mov	r6,zero
 4010b54:	000f883a 	mov	r7,zero
 4010b58:	980b883a 	mov	r5,r19
 4010b5c:	d8c03c15 	stw	r3,240(sp)
 4010b60:	da003d15 	stw	r8,244(sp)
 4010b64:	40195440 	call	4019544 <__eqdf2>
 4010b68:	d8c03c17 	ldw	r3,240(sp)
 4010b6c:	da003d17 	ldw	r8,244(sp)
 4010b70:	103f9826 	beq	r2,zero,40109d4 <__alt_mem_epcs_flash_controller_0+0xfb00f9d4>
 4010b74:	00800044 	movi	r2,1
 4010b78:	10c7c83a 	sub	r3,r2,r3
 4010b7c:	d8c02615 	stw	r3,152(sp)
 4010b80:	003f9506 	br	40109d8 <__alt_mem_epcs_flash_controller_0+0xfb00f9d8>
 4010b84:	d9002917 	ldw	r4,164(sp)
 4010b88:	d8c03217 	ldw	r3,200(sp)
 4010b8c:	20800044 	addi	r2,r4,1
 4010b90:	1885883a 	add	r2,r3,r2
 4010b94:	d8802e15 	stw	r2,184(sp)
 4010b98:	103dbf0e 	bge	r2,zero,4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010b9c:	0005883a 	mov	r2,zero
 4010ba0:	003dbd06 	br	4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010ba4:	2000211e 	bne	r4,zero,4010c2c <___vfprintf_internal_r+0x2168>
 4010ba8:	9480004c 	andi	r18,r18,1
 4010bac:	90001f1e 	bne	r18,zero,4010c2c <___vfprintf_internal_r+0x2168>
 4010bb0:	00800044 	movi	r2,1
 4010bb4:	d8802e15 	stw	r2,184(sp)
 4010bb8:	003db706 	br	4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010bbc:	00800b44 	movi	r2,45
 4010bc0:	05adc83a 	sub	r22,zero,r22
 4010bc4:	d8802305 	stb	r2,140(sp)
 4010bc8:	003f3f06 	br	40108c8 <__alt_mem_epcs_flash_controller_0+0xfb00f8c8>
 4010bcc:	0005883a 	mov	r2,zero
 4010bd0:	003f5206 	br	401091c <__alt_mem_epcs_flash_controller_0+0xfb00f91c>
 4010bd4:	90a4703a 	and	r18,r18,r2
 4010bd8:	903f4e26 	beq	r18,zero,4010914 <__alt_mem_epcs_flash_controller_0+0xfb00f914>
 4010bdc:	003f4a06 	br	4010908 <__alt_mem_epcs_flash_controller_0+0xfb00f908>
 4010be0:	00800084 	movi	r2,2
 4010be4:	10c5c83a 	sub	r2,r2,r3
 4010be8:	003f8406 	br	40109fc <__alt_mem_epcs_flash_controller_0+0xfb00f9fc>
 4010bec:	d8802d17 	ldw	r2,180(sp)
 4010bf0:	d9002d17 	ldw	r4,180(sp)
 4010bf4:	ac400043 	ldbu	r17,1(r21)
 4010bf8:	10800017 	ldw	r2,0(r2)
 4010bfc:	582b883a 	mov	r21,r11
 4010c00:	d8802915 	stw	r2,164(sp)
 4010c04:	20800104 	addi	r2,r4,4
 4010c08:	d9002917 	ldw	r4,164(sp)
 4010c0c:	d8802d15 	stw	r2,180(sp)
 4010c10:	203e7a0e 	bge	r4,zero,40105fc <__alt_mem_epcs_flash_controller_0+0xfb00f5fc>
 4010c14:	8c403fcc 	andi	r17,r17,255
 4010c18:	00bfffc4 	movi	r2,-1
 4010c1c:	8c40201c 	xori	r17,r17,128
 4010c20:	d8802915 	stw	r2,164(sp)
 4010c24:	8c7fe004 	addi	r17,r17,-128
 4010c28:	00380706 	br	400ec48 <__alt_mem_epcs_flash_controller_0+0xfb00dc48>
 4010c2c:	d8c02917 	ldw	r3,164(sp)
 4010c30:	18c00084 	addi	r3,r3,2
 4010c34:	d8c02e15 	stw	r3,184(sp)
 4010c38:	1805883a 	mov	r2,r3
 4010c3c:	183d960e 	bge	r3,zero,4010298 <__alt_mem_epcs_flash_controller_0+0xfb00f298>
 4010c40:	003fd606 	br	4010b9c <__alt_mem_epcs_flash_controller_0+0xfb00fb9c>
 4010c44:	0005883a 	mov	r2,zero
 4010c48:	003f8e06 	br	4010a84 <__alt_mem_epcs_flash_controller_0+0xfb00fa84>
 4010c4c:	9080004c 	andi	r2,r18,1
 4010c50:	103f811e 	bne	r2,zero,4010a58 <__alt_mem_epcs_flash_controller_0+0xfb00fa58>
 4010c54:	d8802117 	ldw	r2,132(sp)
 4010c58:	1405c83a 	sub	r2,r2,r16
 4010c5c:	d8803315 	stw	r2,204(sp)
 4010c60:	b47ef326 	beq	r22,r17,4010830 <__alt_mem_epcs_flash_controller_0+0xfb00f830>
 4010c64:	dd802617 	ldw	r22,152(sp)
 4010c68:	003f1106 	br	40108b0 <__alt_mem_epcs_flash_controller_0+0xfb00f8b0>
 4010c6c:	d9c02785 	stb	r7,158(sp)
 4010c70:	00390406 	br	400f084 <__alt_mem_epcs_flash_controller_0+0xfb00e084>
 4010c74:	d9c02785 	stb	r7,158(sp)
 4010c78:	0038d306 	br	400efc8 <__alt_mem_epcs_flash_controller_0+0xfb00dfc8>
 4010c7c:	d9c02785 	stb	r7,158(sp)
 4010c80:	003a6106 	br	400f608 <__alt_mem_epcs_flash_controller_0+0xfb00e608>
 4010c84:	d9c02785 	stb	r7,158(sp)
 4010c88:	003af806 	br	400f86c <__alt_mem_epcs_flash_controller_0+0xfb00e86c>
 4010c8c:	0005883a 	mov	r2,zero
 4010c90:	003d7e06 	br	401028c <__alt_mem_epcs_flash_controller_0+0xfb00f28c>
 4010c94:	d8802344 	addi	r2,sp,141
 4010c98:	003f1306 	br	40108e8 <__alt_mem_epcs_flash_controller_0+0xfb00f8e8>
 4010c9c:	d9c02785 	stb	r7,158(sp)
 4010ca0:	00392306 	br	400f130 <__alt_mem_epcs_flash_controller_0+0xfb00e130>
 4010ca4:	d9c02785 	stb	r7,158(sp)
 4010ca8:	003aa906 	br	400f750 <__alt_mem_epcs_flash_controller_0+0xfb00e750>
 4010cac:	d9c02785 	stb	r7,158(sp)
 4010cb0:	003a3d06 	br	400f5a8 <__alt_mem_epcs_flash_controller_0+0xfb00e5a8>
 4010cb4:	d9c02785 	stb	r7,158(sp)
 4010cb8:	003aca06 	br	400f7e4 <__alt_mem_epcs_flash_controller_0+0xfb00e7e4>

04010cbc <__vfprintf_internal>:
 4010cbc:	00810234 	movhi	r2,1032
 4010cc0:	10be4404 	addi	r2,r2,-1776
 4010cc4:	300f883a 	mov	r7,r6
 4010cc8:	280d883a 	mov	r6,r5
 4010ccc:	200b883a 	mov	r5,r4
 4010cd0:	11000017 	ldw	r4,0(r2)
 4010cd4:	400eac41 	jmpi	400eac4 <___vfprintf_internal_r>

04010cd8 <__sbprintf>:
 4010cd8:	2880030b 	ldhu	r2,12(r5)
 4010cdc:	2ac01917 	ldw	r11,100(r5)
 4010ce0:	2a80038b 	ldhu	r10,14(r5)
 4010ce4:	2a400717 	ldw	r9,28(r5)
 4010ce8:	2a000917 	ldw	r8,36(r5)
 4010cec:	defee204 	addi	sp,sp,-1144
 4010cf0:	00c10004 	movi	r3,1024
 4010cf4:	dc011a15 	stw	r16,1128(sp)
 4010cf8:	10bfff4c 	andi	r2,r2,65533
 4010cfc:	2821883a 	mov	r16,r5
 4010d00:	d8cb883a 	add	r5,sp,r3
 4010d04:	dc811c15 	stw	r18,1136(sp)
 4010d08:	dc411b15 	stw	r17,1132(sp)
 4010d0c:	dfc11d15 	stw	ra,1140(sp)
 4010d10:	2025883a 	mov	r18,r4
 4010d14:	d881030d 	sth	r2,1036(sp)
 4010d18:	dac11915 	stw	r11,1124(sp)
 4010d1c:	da81038d 	sth	r10,1038(sp)
 4010d20:	da410715 	stw	r9,1052(sp)
 4010d24:	da010915 	stw	r8,1060(sp)
 4010d28:	dec10015 	stw	sp,1024(sp)
 4010d2c:	dec10415 	stw	sp,1040(sp)
 4010d30:	d8c10215 	stw	r3,1032(sp)
 4010d34:	d8c10515 	stw	r3,1044(sp)
 4010d38:	d8010615 	stw	zero,1048(sp)
 4010d3c:	400eac40 	call	400eac4 <___vfprintf_internal_r>
 4010d40:	1023883a 	mov	r17,r2
 4010d44:	10000416 	blt	r2,zero,4010d58 <__sbprintf+0x80>
 4010d48:	d9410004 	addi	r5,sp,1024
 4010d4c:	9009883a 	mov	r4,r18
 4010d50:	4012ab00 	call	4012ab0 <_fflush_r>
 4010d54:	10000d1e 	bne	r2,zero,4010d8c <__sbprintf+0xb4>
 4010d58:	d881030b 	ldhu	r2,1036(sp)
 4010d5c:	1080100c 	andi	r2,r2,64
 4010d60:	10000326 	beq	r2,zero,4010d70 <__sbprintf+0x98>
 4010d64:	8080030b 	ldhu	r2,12(r16)
 4010d68:	10801014 	ori	r2,r2,64
 4010d6c:	8080030d 	sth	r2,12(r16)
 4010d70:	8805883a 	mov	r2,r17
 4010d74:	dfc11d17 	ldw	ra,1140(sp)
 4010d78:	dc811c17 	ldw	r18,1136(sp)
 4010d7c:	dc411b17 	ldw	r17,1132(sp)
 4010d80:	dc011a17 	ldw	r16,1128(sp)
 4010d84:	dec11e04 	addi	sp,sp,1144
 4010d88:	f800283a 	ret
 4010d8c:	047fffc4 	movi	r17,-1
 4010d90:	003ff106 	br	4010d58 <__alt_mem_epcs_flash_controller_0+0xfb00fd58>

04010d94 <_vsnprintf_r>:
 4010d94:	30003716 	blt	r6,zero,4010e74 <_vsnprintf_r+0xe0>
 4010d98:	deffe404 	addi	sp,sp,-112
 4010d9c:	00c08204 	movi	r3,520
 4010da0:	dc001a15 	stw	r16,104(sp)
 4010da4:	3005883a 	mov	r2,r6
 4010da8:	dfc01b15 	stw	ra,108(sp)
 4010dac:	d8c0030d 	sth	r3,12(sp)
 4010db0:	d9400015 	stw	r5,0(sp)
 4010db4:	d9400415 	stw	r5,16(sp)
 4010db8:	380d883a 	mov	r6,r7
 4010dbc:	2021883a 	mov	r16,r4
 4010dc0:	10001326 	beq	r2,zero,4010e10 <_vsnprintf_r+0x7c>
 4010dc4:	00c10234 	movhi	r3,1032
 4010dc8:	18fe4404 	addi	r3,r3,-1776
 4010dcc:	19000017 	ldw	r4,0(r3)
 4010dd0:	d9c01c17 	ldw	r7,112(sp)
 4010dd4:	10bfffc4 	addi	r2,r2,-1
 4010dd8:	d8800215 	stw	r2,8(sp)
 4010ddc:	d8800515 	stw	r2,20(sp)
 4010de0:	d80b883a 	mov	r5,sp
 4010de4:	00bfffc4 	movi	r2,-1
 4010de8:	d880038d 	sth	r2,14(sp)
 4010dec:	400c8ec0 	call	400c8ec <___svfprintf_internal_r>
 4010df0:	00ffffc4 	movi	r3,-1
 4010df4:	10c01616 	blt	r2,r3,4010e50 <_vsnprintf_r+0xbc>
 4010df8:	d8c00017 	ldw	r3,0(sp)
 4010dfc:	18000005 	stb	zero,0(r3)
 4010e00:	dfc01b17 	ldw	ra,108(sp)
 4010e04:	dc001a17 	ldw	r16,104(sp)
 4010e08:	dec01c04 	addi	sp,sp,112
 4010e0c:	f800283a 	ret
 4010e10:	00810234 	movhi	r2,1032
 4010e14:	10be4404 	addi	r2,r2,-1776
 4010e18:	11000017 	ldw	r4,0(r2)
 4010e1c:	d9c01c17 	ldw	r7,112(sp)
 4010e20:	00bfffc4 	movi	r2,-1
 4010e24:	d80b883a 	mov	r5,sp
 4010e28:	d8000215 	stw	zero,8(sp)
 4010e2c:	d8000515 	stw	zero,20(sp)
 4010e30:	d880038d 	sth	r2,14(sp)
 4010e34:	400c8ec0 	call	400c8ec <___svfprintf_internal_r>
 4010e38:	00ffffc4 	movi	r3,-1
 4010e3c:	10c00716 	blt	r2,r3,4010e5c <_vsnprintf_r+0xc8>
 4010e40:	dfc01b17 	ldw	ra,108(sp)
 4010e44:	dc001a17 	ldw	r16,104(sp)
 4010e48:	dec01c04 	addi	sp,sp,112
 4010e4c:	f800283a 	ret
 4010e50:	00c022c4 	movi	r3,139
 4010e54:	80c00015 	stw	r3,0(r16)
 4010e58:	003fe706 	br	4010df8 <__alt_mem_epcs_flash_controller_0+0xfb00fdf8>
 4010e5c:	00c022c4 	movi	r3,139
 4010e60:	80c00015 	stw	r3,0(r16)
 4010e64:	dfc01b17 	ldw	ra,108(sp)
 4010e68:	dc001a17 	ldw	r16,104(sp)
 4010e6c:	dec01c04 	addi	sp,sp,112
 4010e70:	f800283a 	ret
 4010e74:	008022c4 	movi	r2,139
 4010e78:	20800015 	stw	r2,0(r4)
 4010e7c:	00bfffc4 	movi	r2,-1
 4010e80:	f800283a 	ret

04010e84 <vsnprintf>:
 4010e84:	defffe04 	addi	sp,sp,-8
 4010e88:	00810234 	movhi	r2,1032
 4010e8c:	d9c00015 	stw	r7,0(sp)
 4010e90:	10be4404 	addi	r2,r2,-1776
 4010e94:	300f883a 	mov	r7,r6
 4010e98:	280d883a 	mov	r6,r5
 4010e9c:	200b883a 	mov	r5,r4
 4010ea0:	11000017 	ldw	r4,0(r2)
 4010ea4:	dfc00115 	stw	ra,4(sp)
 4010ea8:	4010d940 	call	4010d94 <_vsnprintf_r>
 4010eac:	dfc00117 	ldw	ra,4(sp)
 4010eb0:	dec00204 	addi	sp,sp,8
 4010eb4:	f800283a 	ret

04010eb8 <__swsetup_r>:
 4010eb8:	00810234 	movhi	r2,1032
 4010ebc:	defffd04 	addi	sp,sp,-12
 4010ec0:	10be4404 	addi	r2,r2,-1776
 4010ec4:	dc400115 	stw	r17,4(sp)
 4010ec8:	2023883a 	mov	r17,r4
 4010ecc:	11000017 	ldw	r4,0(r2)
 4010ed0:	dc000015 	stw	r16,0(sp)
 4010ed4:	dfc00215 	stw	ra,8(sp)
 4010ed8:	2821883a 	mov	r16,r5
 4010edc:	20000226 	beq	r4,zero,4010ee8 <__swsetup_r+0x30>
 4010ee0:	20800e17 	ldw	r2,56(r4)
 4010ee4:	10003126 	beq	r2,zero,4010fac <__swsetup_r+0xf4>
 4010ee8:	8080030b 	ldhu	r2,12(r16)
 4010eec:	10c0020c 	andi	r3,r2,8
 4010ef0:	1009883a 	mov	r4,r2
 4010ef4:	18000f26 	beq	r3,zero,4010f34 <__swsetup_r+0x7c>
 4010ef8:	80c00417 	ldw	r3,16(r16)
 4010efc:	18001526 	beq	r3,zero,4010f54 <__swsetup_r+0x9c>
 4010f00:	1100004c 	andi	r4,r2,1
 4010f04:	20001c1e 	bne	r4,zero,4010f78 <__swsetup_r+0xc0>
 4010f08:	1080008c 	andi	r2,r2,2
 4010f0c:	1000291e 	bne	r2,zero,4010fb4 <__swsetup_r+0xfc>
 4010f10:	80800517 	ldw	r2,20(r16)
 4010f14:	80800215 	stw	r2,8(r16)
 4010f18:	18001c26 	beq	r3,zero,4010f8c <__swsetup_r+0xd4>
 4010f1c:	0005883a 	mov	r2,zero
 4010f20:	dfc00217 	ldw	ra,8(sp)
 4010f24:	dc400117 	ldw	r17,4(sp)
 4010f28:	dc000017 	ldw	r16,0(sp)
 4010f2c:	dec00304 	addi	sp,sp,12
 4010f30:	f800283a 	ret
 4010f34:	2080040c 	andi	r2,r4,16
 4010f38:	10002e26 	beq	r2,zero,4010ff4 <__swsetup_r+0x13c>
 4010f3c:	2080010c 	andi	r2,r4,4
 4010f40:	10001e1e 	bne	r2,zero,4010fbc <__swsetup_r+0x104>
 4010f44:	80c00417 	ldw	r3,16(r16)
 4010f48:	20800214 	ori	r2,r4,8
 4010f4c:	8080030d 	sth	r2,12(r16)
 4010f50:	183feb1e 	bne	r3,zero,4010f00 <__alt_mem_epcs_flash_controller_0+0xfb00ff00>
 4010f54:	1100a00c 	andi	r4,r2,640
 4010f58:	01408004 	movi	r5,512
 4010f5c:	217fe826 	beq	r4,r5,4010f00 <__alt_mem_epcs_flash_controller_0+0xfb00ff00>
 4010f60:	800b883a 	mov	r5,r16
 4010f64:	8809883a 	mov	r4,r17
 4010f68:	4013a300 	call	4013a30 <__smakebuf_r>
 4010f6c:	8080030b 	ldhu	r2,12(r16)
 4010f70:	80c00417 	ldw	r3,16(r16)
 4010f74:	003fe206 	br	4010f00 <__alt_mem_epcs_flash_controller_0+0xfb00ff00>
 4010f78:	80800517 	ldw	r2,20(r16)
 4010f7c:	80000215 	stw	zero,8(r16)
 4010f80:	0085c83a 	sub	r2,zero,r2
 4010f84:	80800615 	stw	r2,24(r16)
 4010f88:	183fe41e 	bne	r3,zero,4010f1c <__alt_mem_epcs_flash_controller_0+0xfb00ff1c>
 4010f8c:	80c0030b 	ldhu	r3,12(r16)
 4010f90:	0005883a 	mov	r2,zero
 4010f94:	1900200c 	andi	r4,r3,128
 4010f98:	203fe126 	beq	r4,zero,4010f20 <__alt_mem_epcs_flash_controller_0+0xfb00ff20>
 4010f9c:	18c01014 	ori	r3,r3,64
 4010fa0:	80c0030d 	sth	r3,12(r16)
 4010fa4:	00bfffc4 	movi	r2,-1
 4010fa8:	003fdd06 	br	4010f20 <__alt_mem_epcs_flash_controller_0+0xfb00ff20>
 4010fac:	4012e8c0 	call	4012e8c <__sinit>
 4010fb0:	003fcd06 	br	4010ee8 <__alt_mem_epcs_flash_controller_0+0xfb00fee8>
 4010fb4:	0005883a 	mov	r2,zero
 4010fb8:	003fd606 	br	4010f14 <__alt_mem_epcs_flash_controller_0+0xfb00ff14>
 4010fbc:	81400c17 	ldw	r5,48(r16)
 4010fc0:	28000626 	beq	r5,zero,4010fdc <__swsetup_r+0x124>
 4010fc4:	80801004 	addi	r2,r16,64
 4010fc8:	28800326 	beq	r5,r2,4010fd8 <__swsetup_r+0x120>
 4010fcc:	8809883a 	mov	r4,r17
 4010fd0:	40130000 	call	4013000 <_free_r>
 4010fd4:	8100030b 	ldhu	r4,12(r16)
 4010fd8:	80000c15 	stw	zero,48(r16)
 4010fdc:	80c00417 	ldw	r3,16(r16)
 4010fe0:	00bff6c4 	movi	r2,-37
 4010fe4:	1108703a 	and	r4,r2,r4
 4010fe8:	80000115 	stw	zero,4(r16)
 4010fec:	80c00015 	stw	r3,0(r16)
 4010ff0:	003fd506 	br	4010f48 <__alt_mem_epcs_flash_controller_0+0xfb00ff48>
 4010ff4:	00800244 	movi	r2,9
 4010ff8:	88800015 	stw	r2,0(r17)
 4010ffc:	20801014 	ori	r2,r4,64
 4011000:	8080030d 	sth	r2,12(r16)
 4011004:	00bfffc4 	movi	r2,-1
 4011008:	003fc506 	br	4010f20 <__alt_mem_epcs_flash_controller_0+0xfb00ff20>

0401100c <quorem>:
 401100c:	defff704 	addi	sp,sp,-36
 4011010:	dc800215 	stw	r18,8(sp)
 4011014:	20800417 	ldw	r2,16(r4)
 4011018:	2c800417 	ldw	r18,16(r5)
 401101c:	dfc00815 	stw	ra,32(sp)
 4011020:	ddc00715 	stw	r23,28(sp)
 4011024:	dd800615 	stw	r22,24(sp)
 4011028:	dd400515 	stw	r21,20(sp)
 401102c:	dd000415 	stw	r20,16(sp)
 4011030:	dcc00315 	stw	r19,12(sp)
 4011034:	dc400115 	stw	r17,4(sp)
 4011038:	dc000015 	stw	r16,0(sp)
 401103c:	14807116 	blt	r2,r18,4011204 <quorem+0x1f8>
 4011040:	94bfffc4 	addi	r18,r18,-1
 4011044:	94ad883a 	add	r22,r18,r18
 4011048:	b5ad883a 	add	r22,r22,r22
 401104c:	2c400504 	addi	r17,r5,20
 4011050:	8da9883a 	add	r20,r17,r22
 4011054:	25400504 	addi	r21,r4,20
 4011058:	282f883a 	mov	r23,r5
 401105c:	adad883a 	add	r22,r21,r22
 4011060:	a1400017 	ldw	r5,0(r20)
 4011064:	2021883a 	mov	r16,r4
 4011068:	b1000017 	ldw	r4,0(r22)
 401106c:	29400044 	addi	r5,r5,1
 4011070:	40095800 	call	4009580 <__udivsi3>
 4011074:	1027883a 	mov	r19,r2
 4011078:	10002c26 	beq	r2,zero,401112c <quorem+0x120>
 401107c:	a813883a 	mov	r9,r21
 4011080:	880b883a 	mov	r5,r17
 4011084:	0009883a 	mov	r4,zero
 4011088:	000d883a 	mov	r6,zero
 401108c:	2a000017 	ldw	r8,0(r5)
 4011090:	49c00017 	ldw	r7,0(r9)
 4011094:	29400104 	addi	r5,r5,4
 4011098:	40bfffcc 	andi	r2,r8,65535
 401109c:	14c5383a 	mul	r2,r2,r19
 40110a0:	4010d43a 	srli	r8,r8,16
 40110a4:	38ffffcc 	andi	r3,r7,65535
 40110a8:	1105883a 	add	r2,r2,r4
 40110ac:	1008d43a 	srli	r4,r2,16
 40110b0:	44d1383a 	mul	r8,r8,r19
 40110b4:	198d883a 	add	r6,r3,r6
 40110b8:	10ffffcc 	andi	r3,r2,65535
 40110bc:	30c7c83a 	sub	r3,r6,r3
 40110c0:	380ed43a 	srli	r7,r7,16
 40110c4:	4105883a 	add	r2,r8,r4
 40110c8:	180dd43a 	srai	r6,r3,16
 40110cc:	113fffcc 	andi	r4,r2,65535
 40110d0:	390fc83a 	sub	r7,r7,r4
 40110d4:	398d883a 	add	r6,r7,r6
 40110d8:	300e943a 	slli	r7,r6,16
 40110dc:	18ffffcc 	andi	r3,r3,65535
 40110e0:	1008d43a 	srli	r4,r2,16
 40110e4:	38ceb03a 	or	r7,r7,r3
 40110e8:	49c00015 	stw	r7,0(r9)
 40110ec:	300dd43a 	srai	r6,r6,16
 40110f0:	4a400104 	addi	r9,r9,4
 40110f4:	a17fe52e 	bgeu	r20,r5,401108c <__alt_mem_epcs_flash_controller_0+0xfb01008c>
 40110f8:	b0800017 	ldw	r2,0(r22)
 40110fc:	10000b1e 	bne	r2,zero,401112c <quorem+0x120>
 4011100:	b0bfff04 	addi	r2,r22,-4
 4011104:	a880082e 	bgeu	r21,r2,4011128 <quorem+0x11c>
 4011108:	b0ffff17 	ldw	r3,-4(r22)
 401110c:	18000326 	beq	r3,zero,401111c <quorem+0x110>
 4011110:	00000506 	br	4011128 <quorem+0x11c>
 4011114:	10c00017 	ldw	r3,0(r2)
 4011118:	1800031e 	bne	r3,zero,4011128 <quorem+0x11c>
 401111c:	10bfff04 	addi	r2,r2,-4
 4011120:	94bfffc4 	addi	r18,r18,-1
 4011124:	a8bffb36 	bltu	r21,r2,4011114 <__alt_mem_epcs_flash_controller_0+0xfb010114>
 4011128:	84800415 	stw	r18,16(r16)
 401112c:	b80b883a 	mov	r5,r23
 4011130:	8009883a 	mov	r4,r16
 4011134:	40146f40 	call	40146f4 <__mcmp>
 4011138:	10002616 	blt	r2,zero,40111d4 <quorem+0x1c8>
 401113c:	9cc00044 	addi	r19,r19,1
 4011140:	a805883a 	mov	r2,r21
 4011144:	000b883a 	mov	r5,zero
 4011148:	11000017 	ldw	r4,0(r2)
 401114c:	89800017 	ldw	r6,0(r17)
 4011150:	10800104 	addi	r2,r2,4
 4011154:	20ffffcc 	andi	r3,r4,65535
 4011158:	194b883a 	add	r5,r3,r5
 401115c:	30ffffcc 	andi	r3,r6,65535
 4011160:	28c7c83a 	sub	r3,r5,r3
 4011164:	300cd43a 	srli	r6,r6,16
 4011168:	2008d43a 	srli	r4,r4,16
 401116c:	180bd43a 	srai	r5,r3,16
 4011170:	18ffffcc 	andi	r3,r3,65535
 4011174:	2189c83a 	sub	r4,r4,r6
 4011178:	2149883a 	add	r4,r4,r5
 401117c:	200c943a 	slli	r6,r4,16
 4011180:	8c400104 	addi	r17,r17,4
 4011184:	200bd43a 	srai	r5,r4,16
 4011188:	30c6b03a 	or	r3,r6,r3
 401118c:	10ffff15 	stw	r3,-4(r2)
 4011190:	a47fed2e 	bgeu	r20,r17,4011148 <__alt_mem_epcs_flash_controller_0+0xfb010148>
 4011194:	9485883a 	add	r2,r18,r18
 4011198:	1085883a 	add	r2,r2,r2
 401119c:	a887883a 	add	r3,r21,r2
 40111a0:	18800017 	ldw	r2,0(r3)
 40111a4:	10000b1e 	bne	r2,zero,40111d4 <quorem+0x1c8>
 40111a8:	18bfff04 	addi	r2,r3,-4
 40111ac:	a880082e 	bgeu	r21,r2,40111d0 <quorem+0x1c4>
 40111b0:	18ffff17 	ldw	r3,-4(r3)
 40111b4:	18000326 	beq	r3,zero,40111c4 <quorem+0x1b8>
 40111b8:	00000506 	br	40111d0 <quorem+0x1c4>
 40111bc:	10c00017 	ldw	r3,0(r2)
 40111c0:	1800031e 	bne	r3,zero,40111d0 <quorem+0x1c4>
 40111c4:	10bfff04 	addi	r2,r2,-4
 40111c8:	94bfffc4 	addi	r18,r18,-1
 40111cc:	a8bffb36 	bltu	r21,r2,40111bc <__alt_mem_epcs_flash_controller_0+0xfb0101bc>
 40111d0:	84800415 	stw	r18,16(r16)
 40111d4:	9805883a 	mov	r2,r19
 40111d8:	dfc00817 	ldw	ra,32(sp)
 40111dc:	ddc00717 	ldw	r23,28(sp)
 40111e0:	dd800617 	ldw	r22,24(sp)
 40111e4:	dd400517 	ldw	r21,20(sp)
 40111e8:	dd000417 	ldw	r20,16(sp)
 40111ec:	dcc00317 	ldw	r19,12(sp)
 40111f0:	dc800217 	ldw	r18,8(sp)
 40111f4:	dc400117 	ldw	r17,4(sp)
 40111f8:	dc000017 	ldw	r16,0(sp)
 40111fc:	dec00904 	addi	sp,sp,36
 4011200:	f800283a 	ret
 4011204:	0005883a 	mov	r2,zero
 4011208:	003ff306 	br	40111d8 <__alt_mem_epcs_flash_controller_0+0xfb0101d8>

0401120c <_dtoa_r>:
 401120c:	20801017 	ldw	r2,64(r4)
 4011210:	deffde04 	addi	sp,sp,-136
 4011214:	df002015 	stw	fp,128(sp)
 4011218:	dcc01b15 	stw	r19,108(sp)
 401121c:	dc801a15 	stw	r18,104(sp)
 4011220:	dc401915 	stw	r17,100(sp)
 4011224:	dc001815 	stw	r16,96(sp)
 4011228:	dfc02115 	stw	ra,132(sp)
 401122c:	ddc01f15 	stw	r23,124(sp)
 4011230:	dd801e15 	stw	r22,120(sp)
 4011234:	dd401d15 	stw	r21,116(sp)
 4011238:	dd001c15 	stw	r20,112(sp)
 401123c:	d9c00315 	stw	r7,12(sp)
 4011240:	2039883a 	mov	fp,r4
 4011244:	3023883a 	mov	r17,r6
 4011248:	2825883a 	mov	r18,r5
 401124c:	dc002417 	ldw	r16,144(sp)
 4011250:	3027883a 	mov	r19,r6
 4011254:	10000826 	beq	r2,zero,4011278 <_dtoa_r+0x6c>
 4011258:	21801117 	ldw	r6,68(r4)
 401125c:	00c00044 	movi	r3,1
 4011260:	100b883a 	mov	r5,r2
 4011264:	1986983a 	sll	r3,r3,r6
 4011268:	11800115 	stw	r6,4(r2)
 401126c:	10c00215 	stw	r3,8(r2)
 4011270:	4013ed40 	call	4013ed4 <_Bfree>
 4011274:	e0001015 	stw	zero,64(fp)
 4011278:	88002e16 	blt	r17,zero,4011334 <_dtoa_r+0x128>
 401127c:	80000015 	stw	zero,0(r16)
 4011280:	889ffc2c 	andhi	r2,r17,32752
 4011284:	00dffc34 	movhi	r3,32752
 4011288:	10c01c26 	beq	r2,r3,40112fc <_dtoa_r+0xf0>
 401128c:	000d883a 	mov	r6,zero
 4011290:	000f883a 	mov	r7,zero
 4011294:	9009883a 	mov	r4,r18
 4011298:	980b883a 	mov	r5,r19
 401129c:	40195440 	call	4019544 <__eqdf2>
 40112a0:	10002b1e 	bne	r2,zero,4011350 <_dtoa_r+0x144>
 40112a4:	d9c02317 	ldw	r7,140(sp)
 40112a8:	00800044 	movi	r2,1
 40112ac:	38800015 	stw	r2,0(r7)
 40112b0:	d8802517 	ldw	r2,148(sp)
 40112b4:	10019e26 	beq	r2,zero,4011930 <_dtoa_r+0x724>
 40112b8:	d8c02517 	ldw	r3,148(sp)
 40112bc:	00810234 	movhi	r2,1032
 40112c0:	10afef44 	addi	r2,r2,-16451
 40112c4:	18800015 	stw	r2,0(r3)
 40112c8:	10bfffc4 	addi	r2,r2,-1
 40112cc:	dfc02117 	ldw	ra,132(sp)
 40112d0:	df002017 	ldw	fp,128(sp)
 40112d4:	ddc01f17 	ldw	r23,124(sp)
 40112d8:	dd801e17 	ldw	r22,120(sp)
 40112dc:	dd401d17 	ldw	r21,116(sp)
 40112e0:	dd001c17 	ldw	r20,112(sp)
 40112e4:	dcc01b17 	ldw	r19,108(sp)
 40112e8:	dc801a17 	ldw	r18,104(sp)
 40112ec:	dc401917 	ldw	r17,100(sp)
 40112f0:	dc001817 	ldw	r16,96(sp)
 40112f4:	dec02204 	addi	sp,sp,136
 40112f8:	f800283a 	ret
 40112fc:	d8c02317 	ldw	r3,140(sp)
 4011300:	0089c3c4 	movi	r2,9999
 4011304:	18800015 	stw	r2,0(r3)
 4011308:	90017726 	beq	r18,zero,40118e8 <_dtoa_r+0x6dc>
 401130c:	00810234 	movhi	r2,1032
 4011310:	10b00304 	addi	r2,r2,-16372
 4011314:	d9002517 	ldw	r4,148(sp)
 4011318:	203fec26 	beq	r4,zero,40112cc <__alt_mem_epcs_flash_controller_0+0xfb0102cc>
 401131c:	10c000c7 	ldb	r3,3(r2)
 4011320:	1801781e 	bne	r3,zero,4011904 <_dtoa_r+0x6f8>
 4011324:	10c000c4 	addi	r3,r2,3
 4011328:	d9802517 	ldw	r6,148(sp)
 401132c:	30c00015 	stw	r3,0(r6)
 4011330:	003fe606 	br	40112cc <__alt_mem_epcs_flash_controller_0+0xfb0102cc>
 4011334:	04e00034 	movhi	r19,32768
 4011338:	9cffffc4 	addi	r19,r19,-1
 401133c:	00800044 	movi	r2,1
 4011340:	8ce6703a 	and	r19,r17,r19
 4011344:	80800015 	stw	r2,0(r16)
 4011348:	9823883a 	mov	r17,r19
 401134c:	003fcc06 	br	4011280 <__alt_mem_epcs_flash_controller_0+0xfb010280>
 4011350:	d8800204 	addi	r2,sp,8
 4011354:	d8800015 	stw	r2,0(sp)
 4011358:	d9c00104 	addi	r7,sp,4
 401135c:	900b883a 	mov	r5,r18
 4011360:	980d883a 	mov	r6,r19
 4011364:	e009883a 	mov	r4,fp
 4011368:	8820d53a 	srli	r16,r17,20
 401136c:	4014ac00 	call	4014ac0 <__d2b>
 4011370:	d8800915 	stw	r2,36(sp)
 4011374:	8001651e 	bne	r16,zero,401190c <_dtoa_r+0x700>
 4011378:	dd800217 	ldw	r22,8(sp)
 401137c:	dc000117 	ldw	r16,4(sp)
 4011380:	00800804 	movi	r2,32
 4011384:	b421883a 	add	r16,r22,r16
 4011388:	80c10c84 	addi	r3,r16,1074
 401138c:	10c2d10e 	bge	r2,r3,4011ed4 <_dtoa_r+0xcc8>
 4011390:	00801004 	movi	r2,64
 4011394:	81010484 	addi	r4,r16,1042
 4011398:	10c7c83a 	sub	r3,r2,r3
 401139c:	9108d83a 	srl	r4,r18,r4
 40113a0:	88e2983a 	sll	r17,r17,r3
 40113a4:	2448b03a 	or	r4,r4,r17
 40113a8:	40196a80 	call	40196a8 <__floatunsidf>
 40113ac:	017f8434 	movhi	r5,65040
 40113b0:	01800044 	movi	r6,1
 40113b4:	1009883a 	mov	r4,r2
 40113b8:	194b883a 	add	r5,r3,r5
 40113bc:	843fffc4 	addi	r16,r16,-1
 40113c0:	d9801115 	stw	r6,68(sp)
 40113c4:	000d883a 	mov	r6,zero
 40113c8:	01cffe34 	movhi	r7,16376
 40113cc:	400afdc0 	call	400afdc <__subdf3>
 40113d0:	0198dbf4 	movhi	r6,25455
 40113d4:	01cff4f4 	movhi	r7,16339
 40113d8:	3190d844 	addi	r6,r6,17249
 40113dc:	39e1e9c4 	addi	r7,r7,-30809
 40113e0:	1009883a 	mov	r4,r2
 40113e4:	180b883a 	mov	r5,r3
 40113e8:	400a8c40 	call	400a8c4 <__muldf3>
 40113ec:	01a2d874 	movhi	r6,35681
 40113f0:	01cff1f4 	movhi	r7,16327
 40113f4:	31b22cc4 	addi	r6,r6,-14157
 40113f8:	39e28a04 	addi	r7,r7,-30168
 40113fc:	180b883a 	mov	r5,r3
 4011400:	1009883a 	mov	r4,r2
 4011404:	400963c0 	call	400963c <__adddf3>
 4011408:	8009883a 	mov	r4,r16
 401140c:	1029883a 	mov	r20,r2
 4011410:	1823883a 	mov	r17,r3
 4011414:	400b9580 	call	400b958 <__floatsidf>
 4011418:	019427f4 	movhi	r6,20639
 401141c:	01cff4f4 	movhi	r7,16339
 4011420:	319e7ec4 	addi	r6,r6,31227
 4011424:	39d104c4 	addi	r7,r7,17427
 4011428:	1009883a 	mov	r4,r2
 401142c:	180b883a 	mov	r5,r3
 4011430:	400a8c40 	call	400a8c4 <__muldf3>
 4011434:	100d883a 	mov	r6,r2
 4011438:	180f883a 	mov	r7,r3
 401143c:	a009883a 	mov	r4,r20
 4011440:	880b883a 	mov	r5,r17
 4011444:	400963c0 	call	400963c <__adddf3>
 4011448:	1009883a 	mov	r4,r2
 401144c:	180b883a 	mov	r5,r3
 4011450:	1029883a 	mov	r20,r2
 4011454:	1823883a 	mov	r17,r3
 4011458:	400b8d80 	call	400b8d8 <__fixdfsi>
 401145c:	000d883a 	mov	r6,zero
 4011460:	000f883a 	mov	r7,zero
 4011464:	a009883a 	mov	r4,r20
 4011468:	880b883a 	mov	r5,r17
 401146c:	d8800515 	stw	r2,20(sp)
 4011470:	400a7d00 	call	400a7d0 <__ledf2>
 4011474:	10028716 	blt	r2,zero,4011e94 <_dtoa_r+0xc88>
 4011478:	d8c00517 	ldw	r3,20(sp)
 401147c:	00800584 	movi	r2,22
 4011480:	10c27536 	bltu	r2,r3,4011e58 <_dtoa_r+0xc4c>
 4011484:	180490fa 	slli	r2,r3,3
 4011488:	00c10234 	movhi	r3,1032
 401148c:	18f01e04 	addi	r3,r3,-16264
 4011490:	1885883a 	add	r2,r3,r2
 4011494:	11000017 	ldw	r4,0(r2)
 4011498:	11400117 	ldw	r5,4(r2)
 401149c:	900d883a 	mov	r6,r18
 40114a0:	980f883a 	mov	r7,r19
 40114a4:	40195cc0 	call	40195cc <__gedf2>
 40114a8:	00828d0e 	bge	zero,r2,4011ee0 <_dtoa_r+0xcd4>
 40114ac:	d9000517 	ldw	r4,20(sp)
 40114b0:	d8000e15 	stw	zero,56(sp)
 40114b4:	213fffc4 	addi	r4,r4,-1
 40114b8:	d9000515 	stw	r4,20(sp)
 40114bc:	b42dc83a 	sub	r22,r22,r16
 40114c0:	b5bfffc4 	addi	r22,r22,-1
 40114c4:	b0026f16 	blt	r22,zero,4011e84 <_dtoa_r+0xc78>
 40114c8:	d8000815 	stw	zero,32(sp)
 40114cc:	d9c00517 	ldw	r7,20(sp)
 40114d0:	38026416 	blt	r7,zero,4011e64 <_dtoa_r+0xc58>
 40114d4:	b1ed883a 	add	r22,r22,r7
 40114d8:	d9c00d15 	stw	r7,52(sp)
 40114dc:	d8000a15 	stw	zero,40(sp)
 40114e0:	d9800317 	ldw	r6,12(sp)
 40114e4:	00800244 	movi	r2,9
 40114e8:	11811436 	bltu	r2,r6,401193c <_dtoa_r+0x730>
 40114ec:	00800144 	movi	r2,5
 40114f0:	1184e10e 	bge	r2,r6,4012878 <_dtoa_r+0x166c>
 40114f4:	31bfff04 	addi	r6,r6,-4
 40114f8:	d9800315 	stw	r6,12(sp)
 40114fc:	0023883a 	mov	r17,zero
 4011500:	d9800317 	ldw	r6,12(sp)
 4011504:	008000c4 	movi	r2,3
 4011508:	30836726 	beq	r6,r2,40122a8 <_dtoa_r+0x109c>
 401150c:	1183410e 	bge	r2,r6,4012214 <_dtoa_r+0x1008>
 4011510:	d9c00317 	ldw	r7,12(sp)
 4011514:	00800104 	movi	r2,4
 4011518:	38827c26 	beq	r7,r2,4011f0c <_dtoa_r+0xd00>
 401151c:	00800144 	movi	r2,5
 4011520:	3884c41e 	bne	r7,r2,4012834 <_dtoa_r+0x1628>
 4011524:	00800044 	movi	r2,1
 4011528:	d8800b15 	stw	r2,44(sp)
 401152c:	d8c00517 	ldw	r3,20(sp)
 4011530:	d9002217 	ldw	r4,136(sp)
 4011534:	1907883a 	add	r3,r3,r4
 4011538:	19800044 	addi	r6,r3,1
 401153c:	d8c00c15 	stw	r3,48(sp)
 4011540:	d9800615 	stw	r6,24(sp)
 4011544:	0183a40e 	bge	zero,r6,40123d8 <_dtoa_r+0x11cc>
 4011548:	d9800617 	ldw	r6,24(sp)
 401154c:	3021883a 	mov	r16,r6
 4011550:	e0001115 	stw	zero,68(fp)
 4011554:	008005c4 	movi	r2,23
 4011558:	1184c92e 	bgeu	r2,r6,4012880 <_dtoa_r+0x1674>
 401155c:	00c00044 	movi	r3,1
 4011560:	00800104 	movi	r2,4
 4011564:	1085883a 	add	r2,r2,r2
 4011568:	11000504 	addi	r4,r2,20
 401156c:	180b883a 	mov	r5,r3
 4011570:	18c00044 	addi	r3,r3,1
 4011574:	313ffb2e 	bgeu	r6,r4,4011564 <__alt_mem_epcs_flash_controller_0+0xfb010564>
 4011578:	e1401115 	stw	r5,68(fp)
 401157c:	e009883a 	mov	r4,fp
 4011580:	4013e2c0 	call	4013e2c <_Balloc>
 4011584:	d8800715 	stw	r2,28(sp)
 4011588:	e0801015 	stw	r2,64(fp)
 401158c:	00800384 	movi	r2,14
 4011590:	1400f736 	bltu	r2,r16,4011970 <_dtoa_r+0x764>
 4011594:	8800f626 	beq	r17,zero,4011970 <_dtoa_r+0x764>
 4011598:	d9c00517 	ldw	r7,20(sp)
 401159c:	01c39a0e 	bge	zero,r7,4012408 <_dtoa_r+0x11fc>
 40115a0:	388003cc 	andi	r2,r7,15
 40115a4:	100490fa 	slli	r2,r2,3
 40115a8:	382bd13a 	srai	r21,r7,4
 40115ac:	00c10234 	movhi	r3,1032
 40115b0:	18f01e04 	addi	r3,r3,-16264
 40115b4:	1885883a 	add	r2,r3,r2
 40115b8:	a8c0040c 	andi	r3,r21,16
 40115bc:	12400017 	ldw	r9,0(r2)
 40115c0:	12000117 	ldw	r8,4(r2)
 40115c4:	18037926 	beq	r3,zero,40123ac <_dtoa_r+0x11a0>
 40115c8:	00810234 	movhi	r2,1032
 40115cc:	10b01404 	addi	r2,r2,-16304
 40115d0:	11800817 	ldw	r6,32(r2)
 40115d4:	11c00917 	ldw	r7,36(r2)
 40115d8:	9009883a 	mov	r4,r18
 40115dc:	980b883a 	mov	r5,r19
 40115e0:	da001715 	stw	r8,92(sp)
 40115e4:	da401615 	stw	r9,88(sp)
 40115e8:	4009ee80 	call	4009ee8 <__divdf3>
 40115ec:	da001717 	ldw	r8,92(sp)
 40115f0:	da401617 	ldw	r9,88(sp)
 40115f4:	ad4003cc 	andi	r21,r21,15
 40115f8:	040000c4 	movi	r16,3
 40115fc:	1023883a 	mov	r17,r2
 4011600:	1829883a 	mov	r20,r3
 4011604:	a8001126 	beq	r21,zero,401164c <_dtoa_r+0x440>
 4011608:	05c10234 	movhi	r23,1032
 401160c:	bdf01404 	addi	r23,r23,-16304
 4011610:	4805883a 	mov	r2,r9
 4011614:	4007883a 	mov	r3,r8
 4011618:	a980004c 	andi	r6,r21,1
 401161c:	1009883a 	mov	r4,r2
 4011620:	a82bd07a 	srai	r21,r21,1
 4011624:	180b883a 	mov	r5,r3
 4011628:	30000426 	beq	r6,zero,401163c <_dtoa_r+0x430>
 401162c:	b9800017 	ldw	r6,0(r23)
 4011630:	b9c00117 	ldw	r7,4(r23)
 4011634:	84000044 	addi	r16,r16,1
 4011638:	400a8c40 	call	400a8c4 <__muldf3>
 401163c:	bdc00204 	addi	r23,r23,8
 4011640:	a83ff51e 	bne	r21,zero,4011618 <__alt_mem_epcs_flash_controller_0+0xfb010618>
 4011644:	1013883a 	mov	r9,r2
 4011648:	1811883a 	mov	r8,r3
 401164c:	480d883a 	mov	r6,r9
 4011650:	400f883a 	mov	r7,r8
 4011654:	8809883a 	mov	r4,r17
 4011658:	a00b883a 	mov	r5,r20
 401165c:	4009ee80 	call	4009ee8 <__divdf3>
 4011660:	d8800f15 	stw	r2,60(sp)
 4011664:	d8c01015 	stw	r3,64(sp)
 4011668:	d8c00e17 	ldw	r3,56(sp)
 401166c:	18000626 	beq	r3,zero,4011688 <_dtoa_r+0x47c>
 4011670:	d9000f17 	ldw	r4,60(sp)
 4011674:	d9401017 	ldw	r5,64(sp)
 4011678:	000d883a 	mov	r6,zero
 401167c:	01cffc34 	movhi	r7,16368
 4011680:	400a7d00 	call	400a7d0 <__ledf2>
 4011684:	10040b16 	blt	r2,zero,40126b4 <_dtoa_r+0x14a8>
 4011688:	8009883a 	mov	r4,r16
 401168c:	400b9580 	call	400b958 <__floatsidf>
 4011690:	d9800f17 	ldw	r6,60(sp)
 4011694:	d9c01017 	ldw	r7,64(sp)
 4011698:	1009883a 	mov	r4,r2
 401169c:	180b883a 	mov	r5,r3
 40116a0:	400a8c40 	call	400a8c4 <__muldf3>
 40116a4:	000d883a 	mov	r6,zero
 40116a8:	01d00734 	movhi	r7,16412
 40116ac:	1009883a 	mov	r4,r2
 40116b0:	180b883a 	mov	r5,r3
 40116b4:	400963c0 	call	400963c <__adddf3>
 40116b8:	1021883a 	mov	r16,r2
 40116bc:	d8800617 	ldw	r2,24(sp)
 40116c0:	047f3034 	movhi	r17,64704
 40116c4:	1c63883a 	add	r17,r3,r17
 40116c8:	10031826 	beq	r2,zero,401232c <_dtoa_r+0x1120>
 40116cc:	d8c00517 	ldw	r3,20(sp)
 40116d0:	db000617 	ldw	r12,24(sp)
 40116d4:	d8c01315 	stw	r3,76(sp)
 40116d8:	d9000b17 	ldw	r4,44(sp)
 40116dc:	20038f26 	beq	r4,zero,401251c <_dtoa_r+0x1310>
 40116e0:	60bfffc4 	addi	r2,r12,-1
 40116e4:	100490fa 	slli	r2,r2,3
 40116e8:	00c10234 	movhi	r3,1032
 40116ec:	18f01e04 	addi	r3,r3,-16264
 40116f0:	1885883a 	add	r2,r3,r2
 40116f4:	11800017 	ldw	r6,0(r2)
 40116f8:	11c00117 	ldw	r7,4(r2)
 40116fc:	d8800717 	ldw	r2,28(sp)
 4011700:	0009883a 	mov	r4,zero
 4011704:	014ff834 	movhi	r5,16352
 4011708:	db001615 	stw	r12,88(sp)
 401170c:	15c00044 	addi	r23,r2,1
 4011710:	4009ee80 	call	4009ee8 <__divdf3>
 4011714:	800d883a 	mov	r6,r16
 4011718:	880f883a 	mov	r7,r17
 401171c:	1009883a 	mov	r4,r2
 4011720:	180b883a 	mov	r5,r3
 4011724:	400afdc0 	call	400afdc <__subdf3>
 4011728:	d9401017 	ldw	r5,64(sp)
 401172c:	d9000f17 	ldw	r4,60(sp)
 4011730:	102b883a 	mov	r21,r2
 4011734:	d8c01215 	stw	r3,72(sp)
 4011738:	400b8d80 	call	400b8d8 <__fixdfsi>
 401173c:	1009883a 	mov	r4,r2
 4011740:	1029883a 	mov	r20,r2
 4011744:	400b9580 	call	400b958 <__floatsidf>
 4011748:	d9000f17 	ldw	r4,60(sp)
 401174c:	d9401017 	ldw	r5,64(sp)
 4011750:	100d883a 	mov	r6,r2
 4011754:	180f883a 	mov	r7,r3
 4011758:	400afdc0 	call	400afdc <__subdf3>
 401175c:	1823883a 	mov	r17,r3
 4011760:	d8c00717 	ldw	r3,28(sp)
 4011764:	d9401217 	ldw	r5,72(sp)
 4011768:	a2000c04 	addi	r8,r20,48
 401176c:	1021883a 	mov	r16,r2
 4011770:	1a000005 	stb	r8,0(r3)
 4011774:	800d883a 	mov	r6,r16
 4011778:	880f883a 	mov	r7,r17
 401177c:	a809883a 	mov	r4,r21
 4011780:	4029883a 	mov	r20,r8
 4011784:	40195cc0 	call	40195cc <__gedf2>
 4011788:	00841d16 	blt	zero,r2,4012800 <_dtoa_r+0x15f4>
 401178c:	800d883a 	mov	r6,r16
 4011790:	880f883a 	mov	r7,r17
 4011794:	0009883a 	mov	r4,zero
 4011798:	014ffc34 	movhi	r5,16368
 401179c:	400afdc0 	call	400afdc <__subdf3>
 40117a0:	d9401217 	ldw	r5,72(sp)
 40117a4:	100d883a 	mov	r6,r2
 40117a8:	180f883a 	mov	r7,r3
 40117ac:	a809883a 	mov	r4,r21
 40117b0:	40195cc0 	call	40195cc <__gedf2>
 40117b4:	db001617 	ldw	r12,88(sp)
 40117b8:	00840e16 	blt	zero,r2,40127f4 <_dtoa_r+0x15e8>
 40117bc:	00800044 	movi	r2,1
 40117c0:	13006b0e 	bge	r2,r12,4011970 <_dtoa_r+0x764>
 40117c4:	d9000717 	ldw	r4,28(sp)
 40117c8:	dd800f15 	stw	r22,60(sp)
 40117cc:	dcc01015 	stw	r19,64(sp)
 40117d0:	2319883a 	add	r12,r4,r12
 40117d4:	dcc01217 	ldw	r19,72(sp)
 40117d8:	602d883a 	mov	r22,r12
 40117dc:	dc801215 	stw	r18,72(sp)
 40117e0:	b825883a 	mov	r18,r23
 40117e4:	00000906 	br	401180c <_dtoa_r+0x600>
 40117e8:	400afdc0 	call	400afdc <__subdf3>
 40117ec:	a80d883a 	mov	r6,r21
 40117f0:	980f883a 	mov	r7,r19
 40117f4:	1009883a 	mov	r4,r2
 40117f8:	180b883a 	mov	r5,r3
 40117fc:	400a7d00 	call	400a7d0 <__ledf2>
 4011800:	1003e816 	blt	r2,zero,40127a4 <_dtoa_r+0x1598>
 4011804:	b825883a 	mov	r18,r23
 4011808:	bd83e926 	beq	r23,r22,40127b0 <_dtoa_r+0x15a4>
 401180c:	a809883a 	mov	r4,r21
 4011810:	980b883a 	mov	r5,r19
 4011814:	000d883a 	mov	r6,zero
 4011818:	01d00934 	movhi	r7,16420
 401181c:	400a8c40 	call	400a8c4 <__muldf3>
 4011820:	000d883a 	mov	r6,zero
 4011824:	01d00934 	movhi	r7,16420
 4011828:	8009883a 	mov	r4,r16
 401182c:	880b883a 	mov	r5,r17
 4011830:	102b883a 	mov	r21,r2
 4011834:	1827883a 	mov	r19,r3
 4011838:	400a8c40 	call	400a8c4 <__muldf3>
 401183c:	180b883a 	mov	r5,r3
 4011840:	1009883a 	mov	r4,r2
 4011844:	1821883a 	mov	r16,r3
 4011848:	1023883a 	mov	r17,r2
 401184c:	400b8d80 	call	400b8d8 <__fixdfsi>
 4011850:	1009883a 	mov	r4,r2
 4011854:	1029883a 	mov	r20,r2
 4011858:	400b9580 	call	400b958 <__floatsidf>
 401185c:	8809883a 	mov	r4,r17
 4011860:	800b883a 	mov	r5,r16
 4011864:	100d883a 	mov	r6,r2
 4011868:	180f883a 	mov	r7,r3
 401186c:	400afdc0 	call	400afdc <__subdf3>
 4011870:	a5000c04 	addi	r20,r20,48
 4011874:	a80d883a 	mov	r6,r21
 4011878:	980f883a 	mov	r7,r19
 401187c:	1009883a 	mov	r4,r2
 4011880:	180b883a 	mov	r5,r3
 4011884:	95000005 	stb	r20,0(r18)
 4011888:	1021883a 	mov	r16,r2
 401188c:	1823883a 	mov	r17,r3
 4011890:	400a7d00 	call	400a7d0 <__ledf2>
 4011894:	bdc00044 	addi	r23,r23,1
 4011898:	800d883a 	mov	r6,r16
 401189c:	880f883a 	mov	r7,r17
 40118a0:	0009883a 	mov	r4,zero
 40118a4:	014ffc34 	movhi	r5,16368
 40118a8:	103fcf0e 	bge	r2,zero,40117e8 <__alt_mem_epcs_flash_controller_0+0xfb0107e8>
 40118ac:	d8c01317 	ldw	r3,76(sp)
 40118b0:	d8c00515 	stw	r3,20(sp)
 40118b4:	d9400917 	ldw	r5,36(sp)
 40118b8:	e009883a 	mov	r4,fp
 40118bc:	4013ed40 	call	4013ed4 <_Bfree>
 40118c0:	d9000517 	ldw	r4,20(sp)
 40118c4:	d9802317 	ldw	r6,140(sp)
 40118c8:	d9c02517 	ldw	r7,148(sp)
 40118cc:	b8000005 	stb	zero,0(r23)
 40118d0:	20800044 	addi	r2,r4,1
 40118d4:	30800015 	stw	r2,0(r6)
 40118d8:	3802aa26 	beq	r7,zero,4012384 <_dtoa_r+0x1178>
 40118dc:	3dc00015 	stw	r23,0(r7)
 40118e0:	d8800717 	ldw	r2,28(sp)
 40118e4:	003e7906 	br	40112cc <__alt_mem_epcs_flash_controller_0+0xfb0102cc>
 40118e8:	00800434 	movhi	r2,16
 40118ec:	10bfffc4 	addi	r2,r2,-1
 40118f0:	88a2703a 	and	r17,r17,r2
 40118f4:	883e851e 	bne	r17,zero,401130c <__alt_mem_epcs_flash_controller_0+0xfb01030c>
 40118f8:	00810234 	movhi	r2,1032
 40118fc:	10b00004 	addi	r2,r2,-16384
 4011900:	003e8406 	br	4011314 <__alt_mem_epcs_flash_controller_0+0xfb010314>
 4011904:	10c00204 	addi	r3,r2,8
 4011908:	003e8706 	br	4011328 <__alt_mem_epcs_flash_controller_0+0xfb010328>
 401190c:	01400434 	movhi	r5,16
 4011910:	297fffc4 	addi	r5,r5,-1
 4011914:	994a703a 	and	r5,r19,r5
 4011918:	9009883a 	mov	r4,r18
 401191c:	843f0044 	addi	r16,r16,-1023
 4011920:	294ffc34 	orhi	r5,r5,16368
 4011924:	dd800217 	ldw	r22,8(sp)
 4011928:	d8001115 	stw	zero,68(sp)
 401192c:	003ea506 	br	40113c4 <__alt_mem_epcs_flash_controller_0+0xfb0103c4>
 4011930:	00810234 	movhi	r2,1032
 4011934:	10afef04 	addi	r2,r2,-16452
 4011938:	003e6406 	br	40112cc <__alt_mem_epcs_flash_controller_0+0xfb0102cc>
 401193c:	e0001115 	stw	zero,68(fp)
 4011940:	000b883a 	mov	r5,zero
 4011944:	e009883a 	mov	r4,fp
 4011948:	4013e2c0 	call	4013e2c <_Balloc>
 401194c:	01bfffc4 	movi	r6,-1
 4011950:	01c00044 	movi	r7,1
 4011954:	d8800715 	stw	r2,28(sp)
 4011958:	d9800c15 	stw	r6,48(sp)
 401195c:	e0801015 	stw	r2,64(fp)
 4011960:	d8000315 	stw	zero,12(sp)
 4011964:	d9c00b15 	stw	r7,44(sp)
 4011968:	d9800615 	stw	r6,24(sp)
 401196c:	d8002215 	stw	zero,136(sp)
 4011970:	d8800117 	ldw	r2,4(sp)
 4011974:	10008916 	blt	r2,zero,4011b9c <_dtoa_r+0x990>
 4011978:	d9000517 	ldw	r4,20(sp)
 401197c:	00c00384 	movi	r3,14
 4011980:	19008616 	blt	r3,r4,4011b9c <_dtoa_r+0x990>
 4011984:	200490fa 	slli	r2,r4,3
 4011988:	00c10234 	movhi	r3,1032
 401198c:	d9802217 	ldw	r6,136(sp)
 4011990:	18f01e04 	addi	r3,r3,-16264
 4011994:	1885883a 	add	r2,r3,r2
 4011998:	14000017 	ldw	r16,0(r2)
 401199c:	14400117 	ldw	r17,4(r2)
 40119a0:	30016316 	blt	r6,zero,4011f30 <_dtoa_r+0xd24>
 40119a4:	800d883a 	mov	r6,r16
 40119a8:	880f883a 	mov	r7,r17
 40119ac:	9009883a 	mov	r4,r18
 40119b0:	980b883a 	mov	r5,r19
 40119b4:	4009ee80 	call	4009ee8 <__divdf3>
 40119b8:	180b883a 	mov	r5,r3
 40119bc:	1009883a 	mov	r4,r2
 40119c0:	400b8d80 	call	400b8d8 <__fixdfsi>
 40119c4:	1009883a 	mov	r4,r2
 40119c8:	102b883a 	mov	r21,r2
 40119cc:	400b9580 	call	400b958 <__floatsidf>
 40119d0:	800d883a 	mov	r6,r16
 40119d4:	880f883a 	mov	r7,r17
 40119d8:	1009883a 	mov	r4,r2
 40119dc:	180b883a 	mov	r5,r3
 40119e0:	400a8c40 	call	400a8c4 <__muldf3>
 40119e4:	100d883a 	mov	r6,r2
 40119e8:	180f883a 	mov	r7,r3
 40119ec:	9009883a 	mov	r4,r18
 40119f0:	980b883a 	mov	r5,r19
 40119f4:	400afdc0 	call	400afdc <__subdf3>
 40119f8:	d9c00717 	ldw	r7,28(sp)
 40119fc:	1009883a 	mov	r4,r2
 4011a00:	a8800c04 	addi	r2,r21,48
 4011a04:	38800005 	stb	r2,0(r7)
 4011a08:	3dc00044 	addi	r23,r7,1
 4011a0c:	d9c00617 	ldw	r7,24(sp)
 4011a10:	01800044 	movi	r6,1
 4011a14:	180b883a 	mov	r5,r3
 4011a18:	2005883a 	mov	r2,r4
 4011a1c:	39803826 	beq	r7,r6,4011b00 <_dtoa_r+0x8f4>
 4011a20:	000d883a 	mov	r6,zero
 4011a24:	01d00934 	movhi	r7,16420
 4011a28:	400a8c40 	call	400a8c4 <__muldf3>
 4011a2c:	000d883a 	mov	r6,zero
 4011a30:	000f883a 	mov	r7,zero
 4011a34:	1009883a 	mov	r4,r2
 4011a38:	180b883a 	mov	r5,r3
 4011a3c:	1025883a 	mov	r18,r2
 4011a40:	1827883a 	mov	r19,r3
 4011a44:	40195440 	call	4019544 <__eqdf2>
 4011a48:	103f9a26 	beq	r2,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011a4c:	d9c00617 	ldw	r7,24(sp)
 4011a50:	d8c00717 	ldw	r3,28(sp)
 4011a54:	b829883a 	mov	r20,r23
 4011a58:	38bfffc4 	addi	r2,r7,-1
 4011a5c:	18ad883a 	add	r22,r3,r2
 4011a60:	00000a06 	br	4011a8c <_dtoa_r+0x880>
 4011a64:	400a8c40 	call	400a8c4 <__muldf3>
 4011a68:	000d883a 	mov	r6,zero
 4011a6c:	000f883a 	mov	r7,zero
 4011a70:	1009883a 	mov	r4,r2
 4011a74:	180b883a 	mov	r5,r3
 4011a78:	1025883a 	mov	r18,r2
 4011a7c:	1827883a 	mov	r19,r3
 4011a80:	b829883a 	mov	r20,r23
 4011a84:	40195440 	call	4019544 <__eqdf2>
 4011a88:	103f8a26 	beq	r2,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011a8c:	800d883a 	mov	r6,r16
 4011a90:	880f883a 	mov	r7,r17
 4011a94:	9009883a 	mov	r4,r18
 4011a98:	980b883a 	mov	r5,r19
 4011a9c:	4009ee80 	call	4009ee8 <__divdf3>
 4011aa0:	180b883a 	mov	r5,r3
 4011aa4:	1009883a 	mov	r4,r2
 4011aa8:	400b8d80 	call	400b8d8 <__fixdfsi>
 4011aac:	1009883a 	mov	r4,r2
 4011ab0:	102b883a 	mov	r21,r2
 4011ab4:	400b9580 	call	400b958 <__floatsidf>
 4011ab8:	800d883a 	mov	r6,r16
 4011abc:	880f883a 	mov	r7,r17
 4011ac0:	1009883a 	mov	r4,r2
 4011ac4:	180b883a 	mov	r5,r3
 4011ac8:	400a8c40 	call	400a8c4 <__muldf3>
 4011acc:	100d883a 	mov	r6,r2
 4011ad0:	180f883a 	mov	r7,r3
 4011ad4:	9009883a 	mov	r4,r18
 4011ad8:	980b883a 	mov	r5,r19
 4011adc:	400afdc0 	call	400afdc <__subdf3>
 4011ae0:	aa000c04 	addi	r8,r21,48
 4011ae4:	a2000005 	stb	r8,0(r20)
 4011ae8:	000d883a 	mov	r6,zero
 4011aec:	01d00934 	movhi	r7,16420
 4011af0:	1009883a 	mov	r4,r2
 4011af4:	180b883a 	mov	r5,r3
 4011af8:	a5c00044 	addi	r23,r20,1
 4011afc:	b53fd91e 	bne	r22,r20,4011a64 <__alt_mem_epcs_flash_controller_0+0xfb010a64>
 4011b00:	100d883a 	mov	r6,r2
 4011b04:	180f883a 	mov	r7,r3
 4011b08:	1009883a 	mov	r4,r2
 4011b0c:	180b883a 	mov	r5,r3
 4011b10:	400963c0 	call	400963c <__adddf3>
 4011b14:	100d883a 	mov	r6,r2
 4011b18:	180f883a 	mov	r7,r3
 4011b1c:	8009883a 	mov	r4,r16
 4011b20:	880b883a 	mov	r5,r17
 4011b24:	1027883a 	mov	r19,r2
 4011b28:	1825883a 	mov	r18,r3
 4011b2c:	400a7d00 	call	400a7d0 <__ledf2>
 4011b30:	10000816 	blt	r2,zero,4011b54 <_dtoa_r+0x948>
 4011b34:	980d883a 	mov	r6,r19
 4011b38:	900f883a 	mov	r7,r18
 4011b3c:	8009883a 	mov	r4,r16
 4011b40:	880b883a 	mov	r5,r17
 4011b44:	40195440 	call	4019544 <__eqdf2>
 4011b48:	103f5a1e 	bne	r2,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011b4c:	ad40004c 	andi	r21,r21,1
 4011b50:	a83f5826 	beq	r21,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011b54:	bd3fffc3 	ldbu	r20,-1(r23)
 4011b58:	b8bfffc4 	addi	r2,r23,-1
 4011b5c:	1007883a 	mov	r3,r2
 4011b60:	01400e44 	movi	r5,57
 4011b64:	d9800717 	ldw	r6,28(sp)
 4011b68:	00000506 	br	4011b80 <_dtoa_r+0x974>
 4011b6c:	18ffffc4 	addi	r3,r3,-1
 4011b70:	11824726 	beq	r2,r6,4012490 <_dtoa_r+0x1284>
 4011b74:	1d000003 	ldbu	r20,0(r3)
 4011b78:	102f883a 	mov	r23,r2
 4011b7c:	10bfffc4 	addi	r2,r2,-1
 4011b80:	a1003fcc 	andi	r4,r20,255
 4011b84:	2100201c 	xori	r4,r4,128
 4011b88:	213fe004 	addi	r4,r4,-128
 4011b8c:	217ff726 	beq	r4,r5,4011b6c <__alt_mem_epcs_flash_controller_0+0xfb010b6c>
 4011b90:	a2000044 	addi	r8,r20,1
 4011b94:	12000005 	stb	r8,0(r2)
 4011b98:	003f4606 	br	40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011b9c:	d9000b17 	ldw	r4,44(sp)
 4011ba0:	2000c826 	beq	r4,zero,4011ec4 <_dtoa_r+0xcb8>
 4011ba4:	d9800317 	ldw	r6,12(sp)
 4011ba8:	00c00044 	movi	r3,1
 4011bac:	1980f90e 	bge	r3,r6,4011f94 <_dtoa_r+0xd88>
 4011bb0:	d8800617 	ldw	r2,24(sp)
 4011bb4:	d8c00a17 	ldw	r3,40(sp)
 4011bb8:	157fffc4 	addi	r21,r2,-1
 4011bbc:	1d41f316 	blt	r3,r21,401238c <_dtoa_r+0x1180>
 4011bc0:	1d6bc83a 	sub	r21,r3,r21
 4011bc4:	d9c00617 	ldw	r7,24(sp)
 4011bc8:	3802aa16 	blt	r7,zero,4012674 <_dtoa_r+0x1468>
 4011bcc:	dd000817 	ldw	r20,32(sp)
 4011bd0:	d8800617 	ldw	r2,24(sp)
 4011bd4:	d8c00817 	ldw	r3,32(sp)
 4011bd8:	01400044 	movi	r5,1
 4011bdc:	e009883a 	mov	r4,fp
 4011be0:	1887883a 	add	r3,r3,r2
 4011be4:	d8c00815 	stw	r3,32(sp)
 4011be8:	b0ad883a 	add	r22,r22,r2
 4011bec:	40142380 	call	4014238 <__i2b>
 4011bf0:	1023883a 	mov	r17,r2
 4011bf4:	a0000826 	beq	r20,zero,4011c18 <_dtoa_r+0xa0c>
 4011bf8:	0580070e 	bge	zero,r22,4011c18 <_dtoa_r+0xa0c>
 4011bfc:	a005883a 	mov	r2,r20
 4011c00:	b500b916 	blt	r22,r20,4011ee8 <_dtoa_r+0xcdc>
 4011c04:	d9000817 	ldw	r4,32(sp)
 4011c08:	a0a9c83a 	sub	r20,r20,r2
 4011c0c:	b0adc83a 	sub	r22,r22,r2
 4011c10:	2089c83a 	sub	r4,r4,r2
 4011c14:	d9000815 	stw	r4,32(sp)
 4011c18:	d9800a17 	ldw	r6,40(sp)
 4011c1c:	0181810e 	bge	zero,r6,4012224 <_dtoa_r+0x1018>
 4011c20:	d9c00b17 	ldw	r7,44(sp)
 4011c24:	3800b326 	beq	r7,zero,4011ef4 <_dtoa_r+0xce8>
 4011c28:	a800b226 	beq	r21,zero,4011ef4 <_dtoa_r+0xce8>
 4011c2c:	880b883a 	mov	r5,r17
 4011c30:	a80d883a 	mov	r6,r21
 4011c34:	e009883a 	mov	r4,fp
 4011c38:	401446c0 	call	401446c <__pow5mult>
 4011c3c:	d9800917 	ldw	r6,36(sp)
 4011c40:	100b883a 	mov	r5,r2
 4011c44:	e009883a 	mov	r4,fp
 4011c48:	1023883a 	mov	r17,r2
 4011c4c:	40142740 	call	4014274 <__multiply>
 4011c50:	1021883a 	mov	r16,r2
 4011c54:	d8800a17 	ldw	r2,40(sp)
 4011c58:	d9400917 	ldw	r5,36(sp)
 4011c5c:	e009883a 	mov	r4,fp
 4011c60:	1545c83a 	sub	r2,r2,r21
 4011c64:	d8800a15 	stw	r2,40(sp)
 4011c68:	4013ed40 	call	4013ed4 <_Bfree>
 4011c6c:	d8c00a17 	ldw	r3,40(sp)
 4011c70:	18009f1e 	bne	r3,zero,4011ef0 <_dtoa_r+0xce4>
 4011c74:	05c00044 	movi	r23,1
 4011c78:	e009883a 	mov	r4,fp
 4011c7c:	b80b883a 	mov	r5,r23
 4011c80:	40142380 	call	4014238 <__i2b>
 4011c84:	d9000d17 	ldw	r4,52(sp)
 4011c88:	102b883a 	mov	r21,r2
 4011c8c:	2000ce26 	beq	r4,zero,4011fc8 <_dtoa_r+0xdbc>
 4011c90:	200d883a 	mov	r6,r4
 4011c94:	100b883a 	mov	r5,r2
 4011c98:	e009883a 	mov	r4,fp
 4011c9c:	401446c0 	call	401446c <__pow5mult>
 4011ca0:	d9800317 	ldw	r6,12(sp)
 4011ca4:	102b883a 	mov	r21,r2
 4011ca8:	b981810e 	bge	r23,r6,40122b0 <_dtoa_r+0x10a4>
 4011cac:	0027883a 	mov	r19,zero
 4011cb0:	a8800417 	ldw	r2,16(r21)
 4011cb4:	05c00804 	movi	r23,32
 4011cb8:	10800104 	addi	r2,r2,4
 4011cbc:	1085883a 	add	r2,r2,r2
 4011cc0:	1085883a 	add	r2,r2,r2
 4011cc4:	a885883a 	add	r2,r21,r2
 4011cc8:	11000017 	ldw	r4,0(r2)
 4011ccc:	40141200 	call	4014120 <__hi0bits>
 4011cd0:	b885c83a 	sub	r2,r23,r2
 4011cd4:	1585883a 	add	r2,r2,r22
 4011cd8:	108007cc 	andi	r2,r2,31
 4011cdc:	1000b326 	beq	r2,zero,4011fac <_dtoa_r+0xda0>
 4011ce0:	00c00804 	movi	r3,32
 4011ce4:	1887c83a 	sub	r3,r3,r2
 4011ce8:	01000104 	movi	r4,4
 4011cec:	20c2cd0e 	bge	r4,r3,4012824 <_dtoa_r+0x1618>
 4011cf0:	00c00704 	movi	r3,28
 4011cf4:	1885c83a 	sub	r2,r3,r2
 4011cf8:	d8c00817 	ldw	r3,32(sp)
 4011cfc:	a0a9883a 	add	r20,r20,r2
 4011d00:	b0ad883a 	add	r22,r22,r2
 4011d04:	1887883a 	add	r3,r3,r2
 4011d08:	d8c00815 	stw	r3,32(sp)
 4011d0c:	d9800817 	ldw	r6,32(sp)
 4011d10:	0180040e 	bge	zero,r6,4011d24 <_dtoa_r+0xb18>
 4011d14:	800b883a 	mov	r5,r16
 4011d18:	e009883a 	mov	r4,fp
 4011d1c:	40145ac0 	call	40145ac <__lshift>
 4011d20:	1021883a 	mov	r16,r2
 4011d24:	0580050e 	bge	zero,r22,4011d3c <_dtoa_r+0xb30>
 4011d28:	a80b883a 	mov	r5,r21
 4011d2c:	b00d883a 	mov	r6,r22
 4011d30:	e009883a 	mov	r4,fp
 4011d34:	40145ac0 	call	40145ac <__lshift>
 4011d38:	102b883a 	mov	r21,r2
 4011d3c:	d9c00e17 	ldw	r7,56(sp)
 4011d40:	3801211e 	bne	r7,zero,40121c8 <_dtoa_r+0xfbc>
 4011d44:	d9800617 	ldw	r6,24(sp)
 4011d48:	0181380e 	bge	zero,r6,401222c <_dtoa_r+0x1020>
 4011d4c:	d8c00b17 	ldw	r3,44(sp)
 4011d50:	1800ab1e 	bne	r3,zero,4012000 <_dtoa_r+0xdf4>
 4011d54:	dc800717 	ldw	r18,28(sp)
 4011d58:	dcc00617 	ldw	r19,24(sp)
 4011d5c:	9029883a 	mov	r20,r18
 4011d60:	00000206 	br	4011d6c <_dtoa_r+0xb60>
 4011d64:	4013efc0 	call	4013efc <__multadd>
 4011d68:	1021883a 	mov	r16,r2
 4011d6c:	a80b883a 	mov	r5,r21
 4011d70:	8009883a 	mov	r4,r16
 4011d74:	401100c0 	call	401100c <quorem>
 4011d78:	10800c04 	addi	r2,r2,48
 4011d7c:	90800005 	stb	r2,0(r18)
 4011d80:	94800044 	addi	r18,r18,1
 4011d84:	9507c83a 	sub	r3,r18,r20
 4011d88:	000f883a 	mov	r7,zero
 4011d8c:	01800284 	movi	r6,10
 4011d90:	800b883a 	mov	r5,r16
 4011d94:	e009883a 	mov	r4,fp
 4011d98:	1cfff216 	blt	r3,r19,4011d64 <__alt_mem_epcs_flash_controller_0+0xfb010d64>
 4011d9c:	1011883a 	mov	r8,r2
 4011da0:	d8800617 	ldw	r2,24(sp)
 4011da4:	0082370e 	bge	zero,r2,4012684 <_dtoa_r+0x1478>
 4011da8:	d9000717 	ldw	r4,28(sp)
 4011dac:	0025883a 	mov	r18,zero
 4011db0:	20af883a 	add	r23,r4,r2
 4011db4:	01800044 	movi	r6,1
 4011db8:	800b883a 	mov	r5,r16
 4011dbc:	e009883a 	mov	r4,fp
 4011dc0:	da001715 	stw	r8,92(sp)
 4011dc4:	40145ac0 	call	40145ac <__lshift>
 4011dc8:	a80b883a 	mov	r5,r21
 4011dcc:	1009883a 	mov	r4,r2
 4011dd0:	d8800915 	stw	r2,36(sp)
 4011dd4:	40146f40 	call	40146f4 <__mcmp>
 4011dd8:	da001717 	ldw	r8,92(sp)
 4011ddc:	0081800e 	bge	zero,r2,40123e0 <_dtoa_r+0x11d4>
 4011de0:	b93fffc3 	ldbu	r4,-1(r23)
 4011de4:	b8bfffc4 	addi	r2,r23,-1
 4011de8:	1007883a 	mov	r3,r2
 4011dec:	01800e44 	movi	r6,57
 4011df0:	d9c00717 	ldw	r7,28(sp)
 4011df4:	00000506 	br	4011e0c <_dtoa_r+0xc00>
 4011df8:	18ffffc4 	addi	r3,r3,-1
 4011dfc:	11c12326 	beq	r2,r7,401228c <_dtoa_r+0x1080>
 4011e00:	19000003 	ldbu	r4,0(r3)
 4011e04:	102f883a 	mov	r23,r2
 4011e08:	10bfffc4 	addi	r2,r2,-1
 4011e0c:	21403fcc 	andi	r5,r4,255
 4011e10:	2940201c 	xori	r5,r5,128
 4011e14:	297fe004 	addi	r5,r5,-128
 4011e18:	29bff726 	beq	r5,r6,4011df8 <__alt_mem_epcs_flash_controller_0+0xfb010df8>
 4011e1c:	21000044 	addi	r4,r4,1
 4011e20:	11000005 	stb	r4,0(r2)
 4011e24:	a80b883a 	mov	r5,r21
 4011e28:	e009883a 	mov	r4,fp
 4011e2c:	4013ed40 	call	4013ed4 <_Bfree>
 4011e30:	883ea026 	beq	r17,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011e34:	90000426 	beq	r18,zero,4011e48 <_dtoa_r+0xc3c>
 4011e38:	94400326 	beq	r18,r17,4011e48 <_dtoa_r+0xc3c>
 4011e3c:	900b883a 	mov	r5,r18
 4011e40:	e009883a 	mov	r4,fp
 4011e44:	4013ed40 	call	4013ed4 <_Bfree>
 4011e48:	880b883a 	mov	r5,r17
 4011e4c:	e009883a 	mov	r4,fp
 4011e50:	4013ed40 	call	4013ed4 <_Bfree>
 4011e54:	003e9706 	br	40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011e58:	01800044 	movi	r6,1
 4011e5c:	d9800e15 	stw	r6,56(sp)
 4011e60:	003d9606 	br	40114bc <__alt_mem_epcs_flash_controller_0+0xfb0104bc>
 4011e64:	d8800817 	ldw	r2,32(sp)
 4011e68:	d8c00517 	ldw	r3,20(sp)
 4011e6c:	d8000d15 	stw	zero,52(sp)
 4011e70:	10c5c83a 	sub	r2,r2,r3
 4011e74:	00c9c83a 	sub	r4,zero,r3
 4011e78:	d8800815 	stw	r2,32(sp)
 4011e7c:	d9000a15 	stw	r4,40(sp)
 4011e80:	003d9706 	br	40114e0 <__alt_mem_epcs_flash_controller_0+0xfb0104e0>
 4011e84:	05adc83a 	sub	r22,zero,r22
 4011e88:	dd800815 	stw	r22,32(sp)
 4011e8c:	002d883a 	mov	r22,zero
 4011e90:	003d8e06 	br	40114cc <__alt_mem_epcs_flash_controller_0+0xfb0104cc>
 4011e94:	d9000517 	ldw	r4,20(sp)
 4011e98:	400b9580 	call	400b958 <__floatsidf>
 4011e9c:	100d883a 	mov	r6,r2
 4011ea0:	180f883a 	mov	r7,r3
 4011ea4:	a009883a 	mov	r4,r20
 4011ea8:	880b883a 	mov	r5,r17
 4011eac:	40195440 	call	4019544 <__eqdf2>
 4011eb0:	103d7126 	beq	r2,zero,4011478 <__alt_mem_epcs_flash_controller_0+0xfb010478>
 4011eb4:	d9c00517 	ldw	r7,20(sp)
 4011eb8:	39ffffc4 	addi	r7,r7,-1
 4011ebc:	d9c00515 	stw	r7,20(sp)
 4011ec0:	003d6d06 	br	4011478 <__alt_mem_epcs_flash_controller_0+0xfb010478>
 4011ec4:	dd400a17 	ldw	r21,40(sp)
 4011ec8:	dd000817 	ldw	r20,32(sp)
 4011ecc:	0023883a 	mov	r17,zero
 4011ed0:	003f4806 	br	4011bf4 <__alt_mem_epcs_flash_controller_0+0xfb010bf4>
 4011ed4:	10e3c83a 	sub	r17,r2,r3
 4011ed8:	9448983a 	sll	r4,r18,r17
 4011edc:	003d3206 	br	40113a8 <__alt_mem_epcs_flash_controller_0+0xfb0103a8>
 4011ee0:	d8000e15 	stw	zero,56(sp)
 4011ee4:	003d7506 	br	40114bc <__alt_mem_epcs_flash_controller_0+0xfb0104bc>
 4011ee8:	b005883a 	mov	r2,r22
 4011eec:	003f4506 	br	4011c04 <__alt_mem_epcs_flash_controller_0+0xfb010c04>
 4011ef0:	dc000915 	stw	r16,36(sp)
 4011ef4:	d9800a17 	ldw	r6,40(sp)
 4011ef8:	d9400917 	ldw	r5,36(sp)
 4011efc:	e009883a 	mov	r4,fp
 4011f00:	401446c0 	call	401446c <__pow5mult>
 4011f04:	1021883a 	mov	r16,r2
 4011f08:	003f5a06 	br	4011c74 <__alt_mem_epcs_flash_controller_0+0xfb010c74>
 4011f0c:	01c00044 	movi	r7,1
 4011f10:	d9c00b15 	stw	r7,44(sp)
 4011f14:	d8802217 	ldw	r2,136(sp)
 4011f18:	0081280e 	bge	zero,r2,40123bc <_dtoa_r+0x11b0>
 4011f1c:	100d883a 	mov	r6,r2
 4011f20:	1021883a 	mov	r16,r2
 4011f24:	d8800c15 	stw	r2,48(sp)
 4011f28:	d8800615 	stw	r2,24(sp)
 4011f2c:	003d8806 	br	4011550 <__alt_mem_epcs_flash_controller_0+0xfb010550>
 4011f30:	d8800617 	ldw	r2,24(sp)
 4011f34:	00be9b16 	blt	zero,r2,40119a4 <__alt_mem_epcs_flash_controller_0+0xfb0109a4>
 4011f38:	10010f1e 	bne	r2,zero,4012378 <_dtoa_r+0x116c>
 4011f3c:	880b883a 	mov	r5,r17
 4011f40:	000d883a 	mov	r6,zero
 4011f44:	01d00534 	movhi	r7,16404
 4011f48:	8009883a 	mov	r4,r16
 4011f4c:	400a8c40 	call	400a8c4 <__muldf3>
 4011f50:	900d883a 	mov	r6,r18
 4011f54:	980f883a 	mov	r7,r19
 4011f58:	1009883a 	mov	r4,r2
 4011f5c:	180b883a 	mov	r5,r3
 4011f60:	40195cc0 	call	40195cc <__gedf2>
 4011f64:	002b883a 	mov	r21,zero
 4011f68:	0023883a 	mov	r17,zero
 4011f6c:	1000bf16 	blt	r2,zero,401226c <_dtoa_r+0x1060>
 4011f70:	d9802217 	ldw	r6,136(sp)
 4011f74:	ddc00717 	ldw	r23,28(sp)
 4011f78:	018c303a 	nor	r6,zero,r6
 4011f7c:	d9800515 	stw	r6,20(sp)
 4011f80:	a80b883a 	mov	r5,r21
 4011f84:	e009883a 	mov	r4,fp
 4011f88:	4013ed40 	call	4013ed4 <_Bfree>
 4011f8c:	883e4926 	beq	r17,zero,40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 4011f90:	003fad06 	br	4011e48 <__alt_mem_epcs_flash_controller_0+0xfb010e48>
 4011f94:	d9c01117 	ldw	r7,68(sp)
 4011f98:	3801bc26 	beq	r7,zero,401268c <_dtoa_r+0x1480>
 4011f9c:	10810cc4 	addi	r2,r2,1075
 4011fa0:	dd400a17 	ldw	r21,40(sp)
 4011fa4:	dd000817 	ldw	r20,32(sp)
 4011fa8:	003f0a06 	br	4011bd4 <__alt_mem_epcs_flash_controller_0+0xfb010bd4>
 4011fac:	00800704 	movi	r2,28
 4011fb0:	d9000817 	ldw	r4,32(sp)
 4011fb4:	a0a9883a 	add	r20,r20,r2
 4011fb8:	b0ad883a 	add	r22,r22,r2
 4011fbc:	2089883a 	add	r4,r4,r2
 4011fc0:	d9000815 	stw	r4,32(sp)
 4011fc4:	003f5106 	br	4011d0c <__alt_mem_epcs_flash_controller_0+0xfb010d0c>
 4011fc8:	d8c00317 	ldw	r3,12(sp)
 4011fcc:	b8c1fc0e 	bge	r23,r3,40127c0 <_dtoa_r+0x15b4>
 4011fd0:	0027883a 	mov	r19,zero
 4011fd4:	b805883a 	mov	r2,r23
 4011fd8:	003f3e06 	br	4011cd4 <__alt_mem_epcs_flash_controller_0+0xfb010cd4>
 4011fdc:	880b883a 	mov	r5,r17
 4011fe0:	e009883a 	mov	r4,fp
 4011fe4:	000f883a 	mov	r7,zero
 4011fe8:	01800284 	movi	r6,10
 4011fec:	4013efc0 	call	4013efc <__multadd>
 4011ff0:	d9000c17 	ldw	r4,48(sp)
 4011ff4:	1023883a 	mov	r17,r2
 4011ff8:	0102040e 	bge	zero,r4,401280c <_dtoa_r+0x1600>
 4011ffc:	d9000615 	stw	r4,24(sp)
 4012000:	0500050e 	bge	zero,r20,4012018 <_dtoa_r+0xe0c>
 4012004:	880b883a 	mov	r5,r17
 4012008:	a00d883a 	mov	r6,r20
 401200c:	e009883a 	mov	r4,fp
 4012010:	40145ac0 	call	40145ac <__lshift>
 4012014:	1023883a 	mov	r17,r2
 4012018:	9801241e 	bne	r19,zero,40124ac <_dtoa_r+0x12a0>
 401201c:	8829883a 	mov	r20,r17
 4012020:	d9000617 	ldw	r4,24(sp)
 4012024:	dcc00717 	ldw	r19,28(sp)
 4012028:	9480004c 	andi	r18,r18,1
 401202c:	20bfffc4 	addi	r2,r4,-1
 4012030:	9885883a 	add	r2,r19,r2
 4012034:	d8800415 	stw	r2,16(sp)
 4012038:	dc800615 	stw	r18,24(sp)
 401203c:	a80b883a 	mov	r5,r21
 4012040:	8009883a 	mov	r4,r16
 4012044:	401100c0 	call	401100c <quorem>
 4012048:	880b883a 	mov	r5,r17
 401204c:	8009883a 	mov	r4,r16
 4012050:	102f883a 	mov	r23,r2
 4012054:	40146f40 	call	40146f4 <__mcmp>
 4012058:	a80b883a 	mov	r5,r21
 401205c:	a00d883a 	mov	r6,r20
 4012060:	e009883a 	mov	r4,fp
 4012064:	102d883a 	mov	r22,r2
 4012068:	40147540 	call	4014754 <__mdiff>
 401206c:	1007883a 	mov	r3,r2
 4012070:	10800317 	ldw	r2,12(r2)
 4012074:	bc800c04 	addi	r18,r23,48
 4012078:	180b883a 	mov	r5,r3
 401207c:	10004e1e 	bne	r2,zero,40121b8 <_dtoa_r+0xfac>
 4012080:	8009883a 	mov	r4,r16
 4012084:	d8c01615 	stw	r3,88(sp)
 4012088:	40146f40 	call	40146f4 <__mcmp>
 401208c:	d8c01617 	ldw	r3,88(sp)
 4012090:	e009883a 	mov	r4,fp
 4012094:	d8801615 	stw	r2,88(sp)
 4012098:	180b883a 	mov	r5,r3
 401209c:	4013ed40 	call	4013ed4 <_Bfree>
 40120a0:	d8801617 	ldw	r2,88(sp)
 40120a4:	1000041e 	bne	r2,zero,40120b8 <_dtoa_r+0xeac>
 40120a8:	d9800317 	ldw	r6,12(sp)
 40120ac:	3000021e 	bne	r6,zero,40120b8 <_dtoa_r+0xeac>
 40120b0:	d8c00617 	ldw	r3,24(sp)
 40120b4:	18003726 	beq	r3,zero,4012194 <_dtoa_r+0xf88>
 40120b8:	b0002016 	blt	r22,zero,401213c <_dtoa_r+0xf30>
 40120bc:	b000041e 	bne	r22,zero,40120d0 <_dtoa_r+0xec4>
 40120c0:	d9000317 	ldw	r4,12(sp)
 40120c4:	2000021e 	bne	r4,zero,40120d0 <_dtoa_r+0xec4>
 40120c8:	d8c00617 	ldw	r3,24(sp)
 40120cc:	18001b26 	beq	r3,zero,401213c <_dtoa_r+0xf30>
 40120d0:	00810716 	blt	zero,r2,40124f0 <_dtoa_r+0x12e4>
 40120d4:	d8c00417 	ldw	r3,16(sp)
 40120d8:	9d800044 	addi	r22,r19,1
 40120dc:	9c800005 	stb	r18,0(r19)
 40120e0:	b02f883a 	mov	r23,r22
 40120e4:	98c10626 	beq	r19,r3,4012500 <_dtoa_r+0x12f4>
 40120e8:	800b883a 	mov	r5,r16
 40120ec:	000f883a 	mov	r7,zero
 40120f0:	01800284 	movi	r6,10
 40120f4:	e009883a 	mov	r4,fp
 40120f8:	4013efc0 	call	4013efc <__multadd>
 40120fc:	1021883a 	mov	r16,r2
 4012100:	000f883a 	mov	r7,zero
 4012104:	01800284 	movi	r6,10
 4012108:	880b883a 	mov	r5,r17
 401210c:	e009883a 	mov	r4,fp
 4012110:	8d002526 	beq	r17,r20,40121a8 <_dtoa_r+0xf9c>
 4012114:	4013efc0 	call	4013efc <__multadd>
 4012118:	a00b883a 	mov	r5,r20
 401211c:	000f883a 	mov	r7,zero
 4012120:	01800284 	movi	r6,10
 4012124:	e009883a 	mov	r4,fp
 4012128:	1023883a 	mov	r17,r2
 401212c:	4013efc0 	call	4013efc <__multadd>
 4012130:	1029883a 	mov	r20,r2
 4012134:	b027883a 	mov	r19,r22
 4012138:	003fc006 	br	401203c <__alt_mem_epcs_flash_controller_0+0xfb01103c>
 401213c:	9011883a 	mov	r8,r18
 4012140:	00800e0e 	bge	zero,r2,401217c <_dtoa_r+0xf70>
 4012144:	800b883a 	mov	r5,r16
 4012148:	01800044 	movi	r6,1
 401214c:	e009883a 	mov	r4,fp
 4012150:	da001715 	stw	r8,92(sp)
 4012154:	40145ac0 	call	40145ac <__lshift>
 4012158:	a80b883a 	mov	r5,r21
 401215c:	1009883a 	mov	r4,r2
 4012160:	1021883a 	mov	r16,r2
 4012164:	40146f40 	call	40146f4 <__mcmp>
 4012168:	da001717 	ldw	r8,92(sp)
 401216c:	0081960e 	bge	zero,r2,40127c8 <_dtoa_r+0x15bc>
 4012170:	00800e44 	movi	r2,57
 4012174:	40817026 	beq	r8,r2,4012738 <_dtoa_r+0x152c>
 4012178:	ba000c44 	addi	r8,r23,49
 401217c:	8825883a 	mov	r18,r17
 4012180:	9dc00044 	addi	r23,r19,1
 4012184:	9a000005 	stb	r8,0(r19)
 4012188:	a023883a 	mov	r17,r20
 401218c:	dc000915 	stw	r16,36(sp)
 4012190:	003f2406 	br	4011e24 <__alt_mem_epcs_flash_controller_0+0xfb010e24>
 4012194:	00800e44 	movi	r2,57
 4012198:	9011883a 	mov	r8,r18
 401219c:	90816626 	beq	r18,r2,4012738 <_dtoa_r+0x152c>
 40121a0:	05bff516 	blt	zero,r22,4012178 <__alt_mem_epcs_flash_controller_0+0xfb011178>
 40121a4:	003ff506 	br	401217c <__alt_mem_epcs_flash_controller_0+0xfb01117c>
 40121a8:	4013efc0 	call	4013efc <__multadd>
 40121ac:	1023883a 	mov	r17,r2
 40121b0:	1029883a 	mov	r20,r2
 40121b4:	003fdf06 	br	4012134 <__alt_mem_epcs_flash_controller_0+0xfb011134>
 40121b8:	e009883a 	mov	r4,fp
 40121bc:	4013ed40 	call	4013ed4 <_Bfree>
 40121c0:	00800044 	movi	r2,1
 40121c4:	003fbc06 	br	40120b8 <__alt_mem_epcs_flash_controller_0+0xfb0110b8>
 40121c8:	a80b883a 	mov	r5,r21
 40121cc:	8009883a 	mov	r4,r16
 40121d0:	40146f40 	call	40146f4 <__mcmp>
 40121d4:	103edb0e 	bge	r2,zero,4011d44 <__alt_mem_epcs_flash_controller_0+0xfb010d44>
 40121d8:	800b883a 	mov	r5,r16
 40121dc:	000f883a 	mov	r7,zero
 40121e0:	01800284 	movi	r6,10
 40121e4:	e009883a 	mov	r4,fp
 40121e8:	4013efc0 	call	4013efc <__multadd>
 40121ec:	1021883a 	mov	r16,r2
 40121f0:	d8800517 	ldw	r2,20(sp)
 40121f4:	d8c00b17 	ldw	r3,44(sp)
 40121f8:	10bfffc4 	addi	r2,r2,-1
 40121fc:	d8800515 	stw	r2,20(sp)
 4012200:	183f761e 	bne	r3,zero,4011fdc <__alt_mem_epcs_flash_controller_0+0xfb010fdc>
 4012204:	d9000c17 	ldw	r4,48(sp)
 4012208:	0101730e 	bge	zero,r4,40127d8 <_dtoa_r+0x15cc>
 401220c:	d9000615 	stw	r4,24(sp)
 4012210:	003ed006 	br	4011d54 <__alt_mem_epcs_flash_controller_0+0xfb010d54>
 4012214:	00800084 	movi	r2,2
 4012218:	3081861e 	bne	r6,r2,4012834 <_dtoa_r+0x1628>
 401221c:	d8000b15 	stw	zero,44(sp)
 4012220:	003f3c06 	br	4011f14 <__alt_mem_epcs_flash_controller_0+0xfb010f14>
 4012224:	dc000917 	ldw	r16,36(sp)
 4012228:	003e9206 	br	4011c74 <__alt_mem_epcs_flash_controller_0+0xfb010c74>
 401222c:	d9c00317 	ldw	r7,12(sp)
 4012230:	00800084 	movi	r2,2
 4012234:	11fec50e 	bge	r2,r7,4011d4c <__alt_mem_epcs_flash_controller_0+0xfb010d4c>
 4012238:	d9000617 	ldw	r4,24(sp)
 401223c:	20013c1e 	bne	r4,zero,4012730 <_dtoa_r+0x1524>
 4012240:	a80b883a 	mov	r5,r21
 4012244:	000f883a 	mov	r7,zero
 4012248:	01800144 	movi	r6,5
 401224c:	e009883a 	mov	r4,fp
 4012250:	4013efc0 	call	4013efc <__multadd>
 4012254:	100b883a 	mov	r5,r2
 4012258:	8009883a 	mov	r4,r16
 401225c:	102b883a 	mov	r21,r2
 4012260:	40146f40 	call	40146f4 <__mcmp>
 4012264:	dc000915 	stw	r16,36(sp)
 4012268:	00bf410e 	bge	zero,r2,4011f70 <__alt_mem_epcs_flash_controller_0+0xfb010f70>
 401226c:	d9c00717 	ldw	r7,28(sp)
 4012270:	00800c44 	movi	r2,49
 4012274:	38800005 	stb	r2,0(r7)
 4012278:	d8800517 	ldw	r2,20(sp)
 401227c:	3dc00044 	addi	r23,r7,1
 4012280:	10800044 	addi	r2,r2,1
 4012284:	d8800515 	stw	r2,20(sp)
 4012288:	003f3d06 	br	4011f80 <__alt_mem_epcs_flash_controller_0+0xfb010f80>
 401228c:	d9800517 	ldw	r6,20(sp)
 4012290:	d9c00717 	ldw	r7,28(sp)
 4012294:	00800c44 	movi	r2,49
 4012298:	31800044 	addi	r6,r6,1
 401229c:	d9800515 	stw	r6,20(sp)
 40122a0:	38800005 	stb	r2,0(r7)
 40122a4:	003edf06 	br	4011e24 <__alt_mem_epcs_flash_controller_0+0xfb010e24>
 40122a8:	d8000b15 	stw	zero,44(sp)
 40122ac:	003c9f06 	br	401152c <__alt_mem_epcs_flash_controller_0+0xfb01052c>
 40122b0:	903e7e1e 	bne	r18,zero,4011cac <__alt_mem_epcs_flash_controller_0+0xfb010cac>
 40122b4:	00800434 	movhi	r2,16
 40122b8:	10bfffc4 	addi	r2,r2,-1
 40122bc:	9884703a 	and	r2,r19,r2
 40122c0:	1000ea1e 	bne	r2,zero,401266c <_dtoa_r+0x1460>
 40122c4:	9cdffc2c 	andhi	r19,r19,32752
 40122c8:	9800e826 	beq	r19,zero,401266c <_dtoa_r+0x1460>
 40122cc:	d9c00817 	ldw	r7,32(sp)
 40122d0:	b5800044 	addi	r22,r22,1
 40122d4:	04c00044 	movi	r19,1
 40122d8:	39c00044 	addi	r7,r7,1
 40122dc:	d9c00815 	stw	r7,32(sp)
 40122e0:	d8800d17 	ldw	r2,52(sp)
 40122e4:	103e721e 	bne	r2,zero,4011cb0 <__alt_mem_epcs_flash_controller_0+0xfb010cb0>
 40122e8:	00800044 	movi	r2,1
 40122ec:	003e7906 	br	4011cd4 <__alt_mem_epcs_flash_controller_0+0xfb010cd4>
 40122f0:	8009883a 	mov	r4,r16
 40122f4:	400b9580 	call	400b958 <__floatsidf>
 40122f8:	d9800f17 	ldw	r6,60(sp)
 40122fc:	d9c01017 	ldw	r7,64(sp)
 4012300:	1009883a 	mov	r4,r2
 4012304:	180b883a 	mov	r5,r3
 4012308:	400a8c40 	call	400a8c4 <__muldf3>
 401230c:	000d883a 	mov	r6,zero
 4012310:	01d00734 	movhi	r7,16412
 4012314:	1009883a 	mov	r4,r2
 4012318:	180b883a 	mov	r5,r3
 401231c:	400963c0 	call	400963c <__adddf3>
 4012320:	047f3034 	movhi	r17,64704
 4012324:	1021883a 	mov	r16,r2
 4012328:	1c63883a 	add	r17,r3,r17
 401232c:	d9000f17 	ldw	r4,60(sp)
 4012330:	d9401017 	ldw	r5,64(sp)
 4012334:	000d883a 	mov	r6,zero
 4012338:	01d00534 	movhi	r7,16404
 401233c:	400afdc0 	call	400afdc <__subdf3>
 4012340:	800d883a 	mov	r6,r16
 4012344:	880f883a 	mov	r7,r17
 4012348:	1009883a 	mov	r4,r2
 401234c:	180b883a 	mov	r5,r3
 4012350:	102b883a 	mov	r21,r2
 4012354:	1829883a 	mov	r20,r3
 4012358:	40195cc0 	call	40195cc <__gedf2>
 401235c:	00806c16 	blt	zero,r2,4012510 <_dtoa_r+0x1304>
 4012360:	89e0003c 	xorhi	r7,r17,32768
 4012364:	800d883a 	mov	r6,r16
 4012368:	a809883a 	mov	r4,r21
 401236c:	a00b883a 	mov	r5,r20
 4012370:	400a7d00 	call	400a7d0 <__ledf2>
 4012374:	103d7e0e 	bge	r2,zero,4011970 <__alt_mem_epcs_flash_controller_0+0xfb010970>
 4012378:	002b883a 	mov	r21,zero
 401237c:	0023883a 	mov	r17,zero
 4012380:	003efb06 	br	4011f70 <__alt_mem_epcs_flash_controller_0+0xfb010f70>
 4012384:	d8800717 	ldw	r2,28(sp)
 4012388:	003bd006 	br	40112cc <__alt_mem_epcs_flash_controller_0+0xfb0102cc>
 401238c:	d9000a17 	ldw	r4,40(sp)
 4012390:	d9800d17 	ldw	r6,52(sp)
 4012394:	dd400a15 	stw	r21,40(sp)
 4012398:	a905c83a 	sub	r2,r21,r4
 401239c:	308d883a 	add	r6,r6,r2
 40123a0:	d9800d15 	stw	r6,52(sp)
 40123a4:	002b883a 	mov	r21,zero
 40123a8:	003e0606 	br	4011bc4 <__alt_mem_epcs_flash_controller_0+0xfb010bc4>
 40123ac:	9023883a 	mov	r17,r18
 40123b0:	9829883a 	mov	r20,r19
 40123b4:	04000084 	movi	r16,2
 40123b8:	003c9206 	br	4011604 <__alt_mem_epcs_flash_controller_0+0xfb010604>
 40123bc:	04000044 	movi	r16,1
 40123c0:	dc000c15 	stw	r16,48(sp)
 40123c4:	dc000615 	stw	r16,24(sp)
 40123c8:	dc002215 	stw	r16,136(sp)
 40123cc:	e0001115 	stw	zero,68(fp)
 40123d0:	000b883a 	mov	r5,zero
 40123d4:	003c6906 	br	401157c <__alt_mem_epcs_flash_controller_0+0xfb01057c>
 40123d8:	3021883a 	mov	r16,r6
 40123dc:	003ffb06 	br	40123cc <__alt_mem_epcs_flash_controller_0+0xfb0113cc>
 40123e0:	1000021e 	bne	r2,zero,40123ec <_dtoa_r+0x11e0>
 40123e4:	4200004c 	andi	r8,r8,1
 40123e8:	403e7d1e 	bne	r8,zero,4011de0 <__alt_mem_epcs_flash_controller_0+0xfb010de0>
 40123ec:	01000c04 	movi	r4,48
 40123f0:	00000106 	br	40123f8 <_dtoa_r+0x11ec>
 40123f4:	102f883a 	mov	r23,r2
 40123f8:	b8bfffc4 	addi	r2,r23,-1
 40123fc:	10c00007 	ldb	r3,0(r2)
 4012400:	193ffc26 	beq	r3,r4,40123f4 <__alt_mem_epcs_flash_controller_0+0xfb0113f4>
 4012404:	003e8706 	br	4011e24 <__alt_mem_epcs_flash_controller_0+0xfb010e24>
 4012408:	d8800517 	ldw	r2,20(sp)
 401240c:	00a3c83a 	sub	r17,zero,r2
 4012410:	8800a426 	beq	r17,zero,40126a4 <_dtoa_r+0x1498>
 4012414:	888003cc 	andi	r2,r17,15
 4012418:	100490fa 	slli	r2,r2,3
 401241c:	00c10234 	movhi	r3,1032
 4012420:	18f01e04 	addi	r3,r3,-16264
 4012424:	1885883a 	add	r2,r3,r2
 4012428:	11800017 	ldw	r6,0(r2)
 401242c:	11c00117 	ldw	r7,4(r2)
 4012430:	9009883a 	mov	r4,r18
 4012434:	980b883a 	mov	r5,r19
 4012438:	8823d13a 	srai	r17,r17,4
 401243c:	400a8c40 	call	400a8c4 <__muldf3>
 4012440:	d8800f15 	stw	r2,60(sp)
 4012444:	d8c01015 	stw	r3,64(sp)
 4012448:	8800e826 	beq	r17,zero,40127ec <_dtoa_r+0x15e0>
 401244c:	05010234 	movhi	r20,1032
 4012450:	a5301404 	addi	r20,r20,-16304
 4012454:	04000084 	movi	r16,2
 4012458:	8980004c 	andi	r6,r17,1
 401245c:	1009883a 	mov	r4,r2
 4012460:	8823d07a 	srai	r17,r17,1
 4012464:	180b883a 	mov	r5,r3
 4012468:	30000426 	beq	r6,zero,401247c <_dtoa_r+0x1270>
 401246c:	a1800017 	ldw	r6,0(r20)
 4012470:	a1c00117 	ldw	r7,4(r20)
 4012474:	84000044 	addi	r16,r16,1
 4012478:	400a8c40 	call	400a8c4 <__muldf3>
 401247c:	a5000204 	addi	r20,r20,8
 4012480:	883ff51e 	bne	r17,zero,4012458 <__alt_mem_epcs_flash_controller_0+0xfb011458>
 4012484:	d8800f15 	stw	r2,60(sp)
 4012488:	d8c01015 	stw	r3,64(sp)
 401248c:	003c7606 	br	4011668 <__alt_mem_epcs_flash_controller_0+0xfb010668>
 4012490:	00c00c04 	movi	r3,48
 4012494:	10c00005 	stb	r3,0(r2)
 4012498:	d8c00517 	ldw	r3,20(sp)
 401249c:	bd3fffc3 	ldbu	r20,-1(r23)
 40124a0:	18c00044 	addi	r3,r3,1
 40124a4:	d8c00515 	stw	r3,20(sp)
 40124a8:	003db906 	br	4011b90 <__alt_mem_epcs_flash_controller_0+0xfb010b90>
 40124ac:	89400117 	ldw	r5,4(r17)
 40124b0:	e009883a 	mov	r4,fp
 40124b4:	4013e2c0 	call	4013e2c <_Balloc>
 40124b8:	89800417 	ldw	r6,16(r17)
 40124bc:	89400304 	addi	r5,r17,12
 40124c0:	11000304 	addi	r4,r2,12
 40124c4:	31800084 	addi	r6,r6,2
 40124c8:	318d883a 	add	r6,r6,r6
 40124cc:	318d883a 	add	r6,r6,r6
 40124d0:	1027883a 	mov	r19,r2
 40124d4:	400c2dc0 	call	400c2dc <memcpy>
 40124d8:	01800044 	movi	r6,1
 40124dc:	980b883a 	mov	r5,r19
 40124e0:	e009883a 	mov	r4,fp
 40124e4:	40145ac0 	call	40145ac <__lshift>
 40124e8:	1029883a 	mov	r20,r2
 40124ec:	003ecc06 	br	4012020 <__alt_mem_epcs_flash_controller_0+0xfb011020>
 40124f0:	00800e44 	movi	r2,57
 40124f4:	90809026 	beq	r18,r2,4012738 <_dtoa_r+0x152c>
 40124f8:	92000044 	addi	r8,r18,1
 40124fc:	003f1f06 	br	401217c <__alt_mem_epcs_flash_controller_0+0xfb01117c>
 4012500:	9011883a 	mov	r8,r18
 4012504:	8825883a 	mov	r18,r17
 4012508:	a023883a 	mov	r17,r20
 401250c:	003e2906 	br	4011db4 <__alt_mem_epcs_flash_controller_0+0xfb010db4>
 4012510:	002b883a 	mov	r21,zero
 4012514:	0023883a 	mov	r17,zero
 4012518:	003f5406 	br	401226c <__alt_mem_epcs_flash_controller_0+0xfb01126c>
 401251c:	61bfffc4 	addi	r6,r12,-1
 4012520:	300490fa 	slli	r2,r6,3
 4012524:	00c10234 	movhi	r3,1032
 4012528:	18f01e04 	addi	r3,r3,-16264
 401252c:	1885883a 	add	r2,r3,r2
 4012530:	11000017 	ldw	r4,0(r2)
 4012534:	11400117 	ldw	r5,4(r2)
 4012538:	d8800717 	ldw	r2,28(sp)
 401253c:	880f883a 	mov	r7,r17
 4012540:	d9801215 	stw	r6,72(sp)
 4012544:	800d883a 	mov	r6,r16
 4012548:	db001615 	stw	r12,88(sp)
 401254c:	15c00044 	addi	r23,r2,1
 4012550:	400a8c40 	call	400a8c4 <__muldf3>
 4012554:	d9401017 	ldw	r5,64(sp)
 4012558:	d9000f17 	ldw	r4,60(sp)
 401255c:	d8c01515 	stw	r3,84(sp)
 4012560:	d8801415 	stw	r2,80(sp)
 4012564:	400b8d80 	call	400b8d8 <__fixdfsi>
 4012568:	1009883a 	mov	r4,r2
 401256c:	1021883a 	mov	r16,r2
 4012570:	400b9580 	call	400b958 <__floatsidf>
 4012574:	d9000f17 	ldw	r4,60(sp)
 4012578:	d9401017 	ldw	r5,64(sp)
 401257c:	100d883a 	mov	r6,r2
 4012580:	180f883a 	mov	r7,r3
 4012584:	400afdc0 	call	400afdc <__subdf3>
 4012588:	1829883a 	mov	r20,r3
 401258c:	d8c00717 	ldw	r3,28(sp)
 4012590:	84000c04 	addi	r16,r16,48
 4012594:	1023883a 	mov	r17,r2
 4012598:	1c000005 	stb	r16,0(r3)
 401259c:	db001617 	ldw	r12,88(sp)
 40125a0:	00800044 	movi	r2,1
 40125a4:	60802226 	beq	r12,r2,4012630 <_dtoa_r+0x1424>
 40125a8:	d9c00717 	ldw	r7,28(sp)
 40125ac:	8805883a 	mov	r2,r17
 40125b0:	b82b883a 	mov	r21,r23
 40125b4:	3b19883a 	add	r12,r7,r12
 40125b8:	6023883a 	mov	r17,r12
 40125bc:	a007883a 	mov	r3,r20
 40125c0:	dc800f15 	stw	r18,60(sp)
 40125c4:	000d883a 	mov	r6,zero
 40125c8:	01d00934 	movhi	r7,16420
 40125cc:	1009883a 	mov	r4,r2
 40125d0:	180b883a 	mov	r5,r3
 40125d4:	400a8c40 	call	400a8c4 <__muldf3>
 40125d8:	180b883a 	mov	r5,r3
 40125dc:	1009883a 	mov	r4,r2
 40125e0:	1829883a 	mov	r20,r3
 40125e4:	1025883a 	mov	r18,r2
 40125e8:	400b8d80 	call	400b8d8 <__fixdfsi>
 40125ec:	1009883a 	mov	r4,r2
 40125f0:	1021883a 	mov	r16,r2
 40125f4:	400b9580 	call	400b958 <__floatsidf>
 40125f8:	100d883a 	mov	r6,r2
 40125fc:	180f883a 	mov	r7,r3
 4012600:	9009883a 	mov	r4,r18
 4012604:	a00b883a 	mov	r5,r20
 4012608:	84000c04 	addi	r16,r16,48
 401260c:	400afdc0 	call	400afdc <__subdf3>
 4012610:	ad400044 	addi	r21,r21,1
 4012614:	ac3fffc5 	stb	r16,-1(r21)
 4012618:	ac7fea1e 	bne	r21,r17,40125c4 <__alt_mem_epcs_flash_controller_0+0xfb0115c4>
 401261c:	1023883a 	mov	r17,r2
 4012620:	d8801217 	ldw	r2,72(sp)
 4012624:	dc800f17 	ldw	r18,60(sp)
 4012628:	1829883a 	mov	r20,r3
 401262c:	b8af883a 	add	r23,r23,r2
 4012630:	d9001417 	ldw	r4,80(sp)
 4012634:	d9401517 	ldw	r5,84(sp)
 4012638:	000d883a 	mov	r6,zero
 401263c:	01cff834 	movhi	r7,16352
 4012640:	400963c0 	call	400963c <__adddf3>
 4012644:	880d883a 	mov	r6,r17
 4012648:	a00f883a 	mov	r7,r20
 401264c:	1009883a 	mov	r4,r2
 4012650:	180b883a 	mov	r5,r3
 4012654:	400a7d00 	call	400a7d0 <__ledf2>
 4012658:	10003e0e 	bge	r2,zero,4012754 <_dtoa_r+0x1548>
 401265c:	d9001317 	ldw	r4,76(sp)
 4012660:	bd3fffc3 	ldbu	r20,-1(r23)
 4012664:	d9000515 	stw	r4,20(sp)
 4012668:	003d3b06 	br	4011b58 <__alt_mem_epcs_flash_controller_0+0xfb010b58>
 401266c:	0027883a 	mov	r19,zero
 4012670:	003f1b06 	br	40122e0 <__alt_mem_epcs_flash_controller_0+0xfb0112e0>
 4012674:	d8800817 	ldw	r2,32(sp)
 4012678:	11e9c83a 	sub	r20,r2,r7
 401267c:	0005883a 	mov	r2,zero
 4012680:	003d5406 	br	4011bd4 <__alt_mem_epcs_flash_controller_0+0xfb010bd4>
 4012684:	00800044 	movi	r2,1
 4012688:	003dc706 	br	4011da8 <__alt_mem_epcs_flash_controller_0+0xfb010da8>
 401268c:	d8c00217 	ldw	r3,8(sp)
 4012690:	00800d84 	movi	r2,54
 4012694:	dd400a17 	ldw	r21,40(sp)
 4012698:	10c5c83a 	sub	r2,r2,r3
 401269c:	dd000817 	ldw	r20,32(sp)
 40126a0:	003d4c06 	br	4011bd4 <__alt_mem_epcs_flash_controller_0+0xfb010bd4>
 40126a4:	dc800f15 	stw	r18,60(sp)
 40126a8:	dcc01015 	stw	r19,64(sp)
 40126ac:	04000084 	movi	r16,2
 40126b0:	003bed06 	br	4011668 <__alt_mem_epcs_flash_controller_0+0xfb010668>
 40126b4:	d9000617 	ldw	r4,24(sp)
 40126b8:	203f0d26 	beq	r4,zero,40122f0 <__alt_mem_epcs_flash_controller_0+0xfb0112f0>
 40126bc:	d9800c17 	ldw	r6,48(sp)
 40126c0:	01bcab0e 	bge	zero,r6,4011970 <__alt_mem_epcs_flash_controller_0+0xfb010970>
 40126c4:	d9401017 	ldw	r5,64(sp)
 40126c8:	d9000f17 	ldw	r4,60(sp)
 40126cc:	000d883a 	mov	r6,zero
 40126d0:	01d00934 	movhi	r7,16420
 40126d4:	400a8c40 	call	400a8c4 <__muldf3>
 40126d8:	81000044 	addi	r4,r16,1
 40126dc:	d8800f15 	stw	r2,60(sp)
 40126e0:	d8c01015 	stw	r3,64(sp)
 40126e4:	400b9580 	call	400b958 <__floatsidf>
 40126e8:	d9800f17 	ldw	r6,60(sp)
 40126ec:	d9c01017 	ldw	r7,64(sp)
 40126f0:	1009883a 	mov	r4,r2
 40126f4:	180b883a 	mov	r5,r3
 40126f8:	400a8c40 	call	400a8c4 <__muldf3>
 40126fc:	01d00734 	movhi	r7,16412
 4012700:	000d883a 	mov	r6,zero
 4012704:	1009883a 	mov	r4,r2
 4012708:	180b883a 	mov	r5,r3
 401270c:	400963c0 	call	400963c <__adddf3>
 4012710:	d9c00517 	ldw	r7,20(sp)
 4012714:	047f3034 	movhi	r17,64704
 4012718:	1021883a 	mov	r16,r2
 401271c:	39ffffc4 	addi	r7,r7,-1
 4012720:	d9c01315 	stw	r7,76(sp)
 4012724:	1c63883a 	add	r17,r3,r17
 4012728:	db000c17 	ldw	r12,48(sp)
 401272c:	003bea06 	br	40116d8 <__alt_mem_epcs_flash_controller_0+0xfb0106d8>
 4012730:	dc000915 	stw	r16,36(sp)
 4012734:	003e0e06 	br	4011f70 <__alt_mem_epcs_flash_controller_0+0xfb010f70>
 4012738:	01000e44 	movi	r4,57
 401273c:	8825883a 	mov	r18,r17
 4012740:	9dc00044 	addi	r23,r19,1
 4012744:	99000005 	stb	r4,0(r19)
 4012748:	a023883a 	mov	r17,r20
 401274c:	dc000915 	stw	r16,36(sp)
 4012750:	003da406 	br	4011de4 <__alt_mem_epcs_flash_controller_0+0xfb010de4>
 4012754:	d9801417 	ldw	r6,80(sp)
 4012758:	d9c01517 	ldw	r7,84(sp)
 401275c:	0009883a 	mov	r4,zero
 4012760:	014ff834 	movhi	r5,16352
 4012764:	400afdc0 	call	400afdc <__subdf3>
 4012768:	880d883a 	mov	r6,r17
 401276c:	a00f883a 	mov	r7,r20
 4012770:	1009883a 	mov	r4,r2
 4012774:	180b883a 	mov	r5,r3
 4012778:	40195cc0 	call	40195cc <__gedf2>
 401277c:	00bc7c0e 	bge	zero,r2,4011970 <__alt_mem_epcs_flash_controller_0+0xfb010970>
 4012780:	01000c04 	movi	r4,48
 4012784:	00000106 	br	401278c <_dtoa_r+0x1580>
 4012788:	102f883a 	mov	r23,r2
 401278c:	b8bfffc4 	addi	r2,r23,-1
 4012790:	10c00007 	ldb	r3,0(r2)
 4012794:	193ffc26 	beq	r3,r4,4012788 <__alt_mem_epcs_flash_controller_0+0xfb011788>
 4012798:	d9801317 	ldw	r6,76(sp)
 401279c:	d9800515 	stw	r6,20(sp)
 40127a0:	003c4406 	br	40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 40127a4:	d9801317 	ldw	r6,76(sp)
 40127a8:	d9800515 	stw	r6,20(sp)
 40127ac:	003cea06 	br	4011b58 <__alt_mem_epcs_flash_controller_0+0xfb010b58>
 40127b0:	dd800f17 	ldw	r22,60(sp)
 40127b4:	dcc01017 	ldw	r19,64(sp)
 40127b8:	dc801217 	ldw	r18,72(sp)
 40127bc:	003c6c06 	br	4011970 <__alt_mem_epcs_flash_controller_0+0xfb010970>
 40127c0:	903e031e 	bne	r18,zero,4011fd0 <__alt_mem_epcs_flash_controller_0+0xfb010fd0>
 40127c4:	003ebb06 	br	40122b4 <__alt_mem_epcs_flash_controller_0+0xfb0112b4>
 40127c8:	103e6c1e 	bne	r2,zero,401217c <__alt_mem_epcs_flash_controller_0+0xfb01117c>
 40127cc:	4080004c 	andi	r2,r8,1
 40127d0:	103e6a26 	beq	r2,zero,401217c <__alt_mem_epcs_flash_controller_0+0xfb01117c>
 40127d4:	003e6606 	br	4012170 <__alt_mem_epcs_flash_controller_0+0xfb011170>
 40127d8:	d8c00317 	ldw	r3,12(sp)
 40127dc:	00800084 	movi	r2,2
 40127e0:	10c02916 	blt	r2,r3,4012888 <_dtoa_r+0x167c>
 40127e4:	d9000c17 	ldw	r4,48(sp)
 40127e8:	003e8806 	br	401220c <__alt_mem_epcs_flash_controller_0+0xfb01120c>
 40127ec:	04000084 	movi	r16,2
 40127f0:	003b9d06 	br	4011668 <__alt_mem_epcs_flash_controller_0+0xfb010668>
 40127f4:	d9001317 	ldw	r4,76(sp)
 40127f8:	d9000515 	stw	r4,20(sp)
 40127fc:	003cd606 	br	4011b58 <__alt_mem_epcs_flash_controller_0+0xfb010b58>
 4012800:	d8801317 	ldw	r2,76(sp)
 4012804:	d8800515 	stw	r2,20(sp)
 4012808:	003c2a06 	br	40118b4 <__alt_mem_epcs_flash_controller_0+0xfb0108b4>
 401280c:	d9800317 	ldw	r6,12(sp)
 4012810:	00800084 	movi	r2,2
 4012814:	11801516 	blt	r2,r6,401286c <_dtoa_r+0x1660>
 4012818:	d9c00c17 	ldw	r7,48(sp)
 401281c:	d9c00615 	stw	r7,24(sp)
 4012820:	003df706 	br	4012000 <__alt_mem_epcs_flash_controller_0+0xfb011000>
 4012824:	193d3926 	beq	r3,r4,4011d0c <__alt_mem_epcs_flash_controller_0+0xfb010d0c>
 4012828:	00c00f04 	movi	r3,60
 401282c:	1885c83a 	sub	r2,r3,r2
 4012830:	003ddf06 	br	4011fb0 <__alt_mem_epcs_flash_controller_0+0xfb010fb0>
 4012834:	e009883a 	mov	r4,fp
 4012838:	e0001115 	stw	zero,68(fp)
 401283c:	000b883a 	mov	r5,zero
 4012840:	4013e2c0 	call	4013e2c <_Balloc>
 4012844:	d8800715 	stw	r2,28(sp)
 4012848:	d8c00717 	ldw	r3,28(sp)
 401284c:	00bfffc4 	movi	r2,-1
 4012850:	01000044 	movi	r4,1
 4012854:	d8800c15 	stw	r2,48(sp)
 4012858:	e0c01015 	stw	r3,64(fp)
 401285c:	d9000b15 	stw	r4,44(sp)
 4012860:	d8800615 	stw	r2,24(sp)
 4012864:	d8002215 	stw	zero,136(sp)
 4012868:	003c4106 	br	4011970 <__alt_mem_epcs_flash_controller_0+0xfb010970>
 401286c:	d8c00c17 	ldw	r3,48(sp)
 4012870:	d8c00615 	stw	r3,24(sp)
 4012874:	003e7006 	br	4012238 <__alt_mem_epcs_flash_controller_0+0xfb011238>
 4012878:	04400044 	movi	r17,1
 401287c:	003b2006 	br	4011500 <__alt_mem_epcs_flash_controller_0+0xfb010500>
 4012880:	000b883a 	mov	r5,zero
 4012884:	003b3d06 	br	401157c <__alt_mem_epcs_flash_controller_0+0xfb01057c>
 4012888:	d8800c17 	ldw	r2,48(sp)
 401288c:	d8800615 	stw	r2,24(sp)
 4012890:	003e6906 	br	4012238 <__alt_mem_epcs_flash_controller_0+0xfb011238>

04012894 <__sflush_r>:
 4012894:	2880030b 	ldhu	r2,12(r5)
 4012898:	defffb04 	addi	sp,sp,-20
 401289c:	dcc00315 	stw	r19,12(sp)
 40128a0:	dc400115 	stw	r17,4(sp)
 40128a4:	dfc00415 	stw	ra,16(sp)
 40128a8:	dc800215 	stw	r18,8(sp)
 40128ac:	dc000015 	stw	r16,0(sp)
 40128b0:	10c0020c 	andi	r3,r2,8
 40128b4:	2823883a 	mov	r17,r5
 40128b8:	2027883a 	mov	r19,r4
 40128bc:	1800311e 	bne	r3,zero,4012984 <__sflush_r+0xf0>
 40128c0:	28c00117 	ldw	r3,4(r5)
 40128c4:	10820014 	ori	r2,r2,2048
 40128c8:	2880030d 	sth	r2,12(r5)
 40128cc:	00c04b0e 	bge	zero,r3,40129fc <__sflush_r+0x168>
 40128d0:	8a000a17 	ldw	r8,40(r17)
 40128d4:	40002326 	beq	r8,zero,4012964 <__sflush_r+0xd0>
 40128d8:	9c000017 	ldw	r16,0(r19)
 40128dc:	10c4000c 	andi	r3,r2,4096
 40128e0:	98000015 	stw	zero,0(r19)
 40128e4:	18004826 	beq	r3,zero,4012a08 <__sflush_r+0x174>
 40128e8:	89801417 	ldw	r6,80(r17)
 40128ec:	10c0010c 	andi	r3,r2,4
 40128f0:	18000626 	beq	r3,zero,401290c <__sflush_r+0x78>
 40128f4:	88c00117 	ldw	r3,4(r17)
 40128f8:	88800c17 	ldw	r2,48(r17)
 40128fc:	30cdc83a 	sub	r6,r6,r3
 4012900:	10000226 	beq	r2,zero,401290c <__sflush_r+0x78>
 4012904:	88800f17 	ldw	r2,60(r17)
 4012908:	308dc83a 	sub	r6,r6,r2
 401290c:	89400717 	ldw	r5,28(r17)
 4012910:	000f883a 	mov	r7,zero
 4012914:	9809883a 	mov	r4,r19
 4012918:	403ee83a 	callr	r8
 401291c:	00ffffc4 	movi	r3,-1
 4012920:	10c04426 	beq	r2,r3,4012a34 <__sflush_r+0x1a0>
 4012924:	88c0030b 	ldhu	r3,12(r17)
 4012928:	89000417 	ldw	r4,16(r17)
 401292c:	88000115 	stw	zero,4(r17)
 4012930:	197dffcc 	andi	r5,r3,63487
 4012934:	8940030d 	sth	r5,12(r17)
 4012938:	89000015 	stw	r4,0(r17)
 401293c:	18c4000c 	andi	r3,r3,4096
 4012940:	18002c1e 	bne	r3,zero,40129f4 <__sflush_r+0x160>
 4012944:	89400c17 	ldw	r5,48(r17)
 4012948:	9c000015 	stw	r16,0(r19)
 401294c:	28000526 	beq	r5,zero,4012964 <__sflush_r+0xd0>
 4012950:	88801004 	addi	r2,r17,64
 4012954:	28800226 	beq	r5,r2,4012960 <__sflush_r+0xcc>
 4012958:	9809883a 	mov	r4,r19
 401295c:	40130000 	call	4013000 <_free_r>
 4012960:	88000c15 	stw	zero,48(r17)
 4012964:	0005883a 	mov	r2,zero
 4012968:	dfc00417 	ldw	ra,16(sp)
 401296c:	dcc00317 	ldw	r19,12(sp)
 4012970:	dc800217 	ldw	r18,8(sp)
 4012974:	dc400117 	ldw	r17,4(sp)
 4012978:	dc000017 	ldw	r16,0(sp)
 401297c:	dec00504 	addi	sp,sp,20
 4012980:	f800283a 	ret
 4012984:	2c800417 	ldw	r18,16(r5)
 4012988:	903ff626 	beq	r18,zero,4012964 <__alt_mem_epcs_flash_controller_0+0xfb011964>
 401298c:	2c000017 	ldw	r16,0(r5)
 4012990:	108000cc 	andi	r2,r2,3
 4012994:	2c800015 	stw	r18,0(r5)
 4012998:	84a1c83a 	sub	r16,r16,r18
 401299c:	1000131e 	bne	r2,zero,40129ec <__sflush_r+0x158>
 40129a0:	28800517 	ldw	r2,20(r5)
 40129a4:	88800215 	stw	r2,8(r17)
 40129a8:	04000316 	blt	zero,r16,40129b8 <__sflush_r+0x124>
 40129ac:	003fed06 	br	4012964 <__alt_mem_epcs_flash_controller_0+0xfb011964>
 40129b0:	90a5883a 	add	r18,r18,r2
 40129b4:	043feb0e 	bge	zero,r16,4012964 <__alt_mem_epcs_flash_controller_0+0xfb011964>
 40129b8:	88800917 	ldw	r2,36(r17)
 40129bc:	89400717 	ldw	r5,28(r17)
 40129c0:	800f883a 	mov	r7,r16
 40129c4:	900d883a 	mov	r6,r18
 40129c8:	9809883a 	mov	r4,r19
 40129cc:	103ee83a 	callr	r2
 40129d0:	80a1c83a 	sub	r16,r16,r2
 40129d4:	00bff616 	blt	zero,r2,40129b0 <__alt_mem_epcs_flash_controller_0+0xfb0119b0>
 40129d8:	88c0030b 	ldhu	r3,12(r17)
 40129dc:	00bfffc4 	movi	r2,-1
 40129e0:	18c01014 	ori	r3,r3,64
 40129e4:	88c0030d 	sth	r3,12(r17)
 40129e8:	003fdf06 	br	4012968 <__alt_mem_epcs_flash_controller_0+0xfb011968>
 40129ec:	0005883a 	mov	r2,zero
 40129f0:	003fec06 	br	40129a4 <__alt_mem_epcs_flash_controller_0+0xfb0119a4>
 40129f4:	88801415 	stw	r2,80(r17)
 40129f8:	003fd206 	br	4012944 <__alt_mem_epcs_flash_controller_0+0xfb011944>
 40129fc:	28c00f17 	ldw	r3,60(r5)
 4012a00:	00ffb316 	blt	zero,r3,40128d0 <__alt_mem_epcs_flash_controller_0+0xfb0118d0>
 4012a04:	003fd706 	br	4012964 <__alt_mem_epcs_flash_controller_0+0xfb011964>
 4012a08:	89400717 	ldw	r5,28(r17)
 4012a0c:	000d883a 	mov	r6,zero
 4012a10:	01c00044 	movi	r7,1
 4012a14:	9809883a 	mov	r4,r19
 4012a18:	403ee83a 	callr	r8
 4012a1c:	100d883a 	mov	r6,r2
 4012a20:	00bfffc4 	movi	r2,-1
 4012a24:	30801426 	beq	r6,r2,4012a78 <__sflush_r+0x1e4>
 4012a28:	8880030b 	ldhu	r2,12(r17)
 4012a2c:	8a000a17 	ldw	r8,40(r17)
 4012a30:	003fae06 	br	40128ec <__alt_mem_epcs_flash_controller_0+0xfb0118ec>
 4012a34:	98c00017 	ldw	r3,0(r19)
 4012a38:	183fba26 	beq	r3,zero,4012924 <__alt_mem_epcs_flash_controller_0+0xfb011924>
 4012a3c:	01000744 	movi	r4,29
 4012a40:	19000626 	beq	r3,r4,4012a5c <__sflush_r+0x1c8>
 4012a44:	01000584 	movi	r4,22
 4012a48:	19000426 	beq	r3,r4,4012a5c <__sflush_r+0x1c8>
 4012a4c:	88c0030b 	ldhu	r3,12(r17)
 4012a50:	18c01014 	ori	r3,r3,64
 4012a54:	88c0030d 	sth	r3,12(r17)
 4012a58:	003fc306 	br	4012968 <__alt_mem_epcs_flash_controller_0+0xfb011968>
 4012a5c:	8880030b 	ldhu	r2,12(r17)
 4012a60:	88c00417 	ldw	r3,16(r17)
 4012a64:	88000115 	stw	zero,4(r17)
 4012a68:	10bdffcc 	andi	r2,r2,63487
 4012a6c:	8880030d 	sth	r2,12(r17)
 4012a70:	88c00015 	stw	r3,0(r17)
 4012a74:	003fb306 	br	4012944 <__alt_mem_epcs_flash_controller_0+0xfb011944>
 4012a78:	98800017 	ldw	r2,0(r19)
 4012a7c:	103fea26 	beq	r2,zero,4012a28 <__alt_mem_epcs_flash_controller_0+0xfb011a28>
 4012a80:	00c00744 	movi	r3,29
 4012a84:	10c00226 	beq	r2,r3,4012a90 <__sflush_r+0x1fc>
 4012a88:	00c00584 	movi	r3,22
 4012a8c:	10c0031e 	bne	r2,r3,4012a9c <__sflush_r+0x208>
 4012a90:	9c000015 	stw	r16,0(r19)
 4012a94:	0005883a 	mov	r2,zero
 4012a98:	003fb306 	br	4012968 <__alt_mem_epcs_flash_controller_0+0xfb011968>
 4012a9c:	88c0030b 	ldhu	r3,12(r17)
 4012aa0:	3005883a 	mov	r2,r6
 4012aa4:	18c01014 	ori	r3,r3,64
 4012aa8:	88c0030d 	sth	r3,12(r17)
 4012aac:	003fae06 	br	4012968 <__alt_mem_epcs_flash_controller_0+0xfb011968>

04012ab0 <_fflush_r>:
 4012ab0:	defffd04 	addi	sp,sp,-12
 4012ab4:	dc000115 	stw	r16,4(sp)
 4012ab8:	dfc00215 	stw	ra,8(sp)
 4012abc:	2021883a 	mov	r16,r4
 4012ac0:	20000226 	beq	r4,zero,4012acc <_fflush_r+0x1c>
 4012ac4:	20800e17 	ldw	r2,56(r4)
 4012ac8:	10000c26 	beq	r2,zero,4012afc <_fflush_r+0x4c>
 4012acc:	2880030f 	ldh	r2,12(r5)
 4012ad0:	1000051e 	bne	r2,zero,4012ae8 <_fflush_r+0x38>
 4012ad4:	0005883a 	mov	r2,zero
 4012ad8:	dfc00217 	ldw	ra,8(sp)
 4012adc:	dc000117 	ldw	r16,4(sp)
 4012ae0:	dec00304 	addi	sp,sp,12
 4012ae4:	f800283a 	ret
 4012ae8:	8009883a 	mov	r4,r16
 4012aec:	dfc00217 	ldw	ra,8(sp)
 4012af0:	dc000117 	ldw	r16,4(sp)
 4012af4:	dec00304 	addi	sp,sp,12
 4012af8:	40128941 	jmpi	4012894 <__sflush_r>
 4012afc:	d9400015 	stw	r5,0(sp)
 4012b00:	4012e8c0 	call	4012e8c <__sinit>
 4012b04:	d9400017 	ldw	r5,0(sp)
 4012b08:	003ff006 	br	4012acc <__alt_mem_epcs_flash_controller_0+0xfb011acc>

04012b0c <fflush>:
 4012b0c:	20000526 	beq	r4,zero,4012b24 <fflush+0x18>
 4012b10:	00810234 	movhi	r2,1032
 4012b14:	10be4404 	addi	r2,r2,-1776
 4012b18:	200b883a 	mov	r5,r4
 4012b1c:	11000017 	ldw	r4,0(r2)
 4012b20:	4012ab01 	jmpi	4012ab0 <_fflush_r>
 4012b24:	00810234 	movhi	r2,1032
 4012b28:	10be4304 	addi	r2,r2,-1780
 4012b2c:	11000017 	ldw	r4,0(r2)
 4012b30:	01410074 	movhi	r5,1025
 4012b34:	294aac04 	addi	r5,r5,10928
 4012b38:	40138901 	jmpi	4013890 <_fwalk_reent>

04012b3c <__fp_unlock>:
 4012b3c:	0005883a 	mov	r2,zero
 4012b40:	f800283a 	ret

04012b44 <_cleanup_r>:
 4012b44:	014100b4 	movhi	r5,1026
 4012b48:	29610c04 	addi	r5,r5,-31696
 4012b4c:	40138901 	jmpi	4013890 <_fwalk_reent>

04012b50 <__sinit.part.1>:
 4012b50:	defff704 	addi	sp,sp,-36
 4012b54:	00c10074 	movhi	r3,1025
 4012b58:	dfc00815 	stw	ra,32(sp)
 4012b5c:	ddc00715 	stw	r23,28(sp)
 4012b60:	dd800615 	stw	r22,24(sp)
 4012b64:	dd400515 	stw	r21,20(sp)
 4012b68:	dd000415 	stw	r20,16(sp)
 4012b6c:	dcc00315 	stw	r19,12(sp)
 4012b70:	dc800215 	stw	r18,8(sp)
 4012b74:	dc400115 	stw	r17,4(sp)
 4012b78:	dc000015 	stw	r16,0(sp)
 4012b7c:	18cad104 	addi	r3,r3,11076
 4012b80:	24000117 	ldw	r16,4(r4)
 4012b84:	20c00f15 	stw	r3,60(r4)
 4012b88:	2080bb04 	addi	r2,r4,748
 4012b8c:	00c000c4 	movi	r3,3
 4012b90:	20c0b915 	stw	r3,740(r4)
 4012b94:	2080ba15 	stw	r2,744(r4)
 4012b98:	2000b815 	stw	zero,736(r4)
 4012b9c:	05c00204 	movi	r23,8
 4012ba0:	00800104 	movi	r2,4
 4012ba4:	2025883a 	mov	r18,r4
 4012ba8:	b80d883a 	mov	r6,r23
 4012bac:	81001704 	addi	r4,r16,92
 4012bb0:	000b883a 	mov	r5,zero
 4012bb4:	80000015 	stw	zero,0(r16)
 4012bb8:	80000115 	stw	zero,4(r16)
 4012bbc:	80000215 	stw	zero,8(r16)
 4012bc0:	8080030d 	sth	r2,12(r16)
 4012bc4:	80001915 	stw	zero,100(r16)
 4012bc8:	8000038d 	sth	zero,14(r16)
 4012bcc:	80000415 	stw	zero,16(r16)
 4012bd0:	80000515 	stw	zero,20(r16)
 4012bd4:	80000615 	stw	zero,24(r16)
 4012bd8:	400c4240 	call	400c424 <memset>
 4012bdc:	05810074 	movhi	r22,1025
 4012be0:	94400217 	ldw	r17,8(r18)
 4012be4:	05410074 	movhi	r21,1025
 4012be8:	05010074 	movhi	r20,1025
 4012bec:	04c10074 	movhi	r19,1025
 4012bf0:	b5953d04 	addi	r22,r22,21748
 4012bf4:	ad555404 	addi	r21,r21,21840
 4012bf8:	a5157304 	addi	r20,r20,21964
 4012bfc:	9cd58a04 	addi	r19,r19,22056
 4012c00:	85800815 	stw	r22,32(r16)
 4012c04:	85400915 	stw	r21,36(r16)
 4012c08:	85000a15 	stw	r20,40(r16)
 4012c0c:	84c00b15 	stw	r19,44(r16)
 4012c10:	84000715 	stw	r16,28(r16)
 4012c14:	00800284 	movi	r2,10
 4012c18:	8880030d 	sth	r2,12(r17)
 4012c1c:	00800044 	movi	r2,1
 4012c20:	b80d883a 	mov	r6,r23
 4012c24:	89001704 	addi	r4,r17,92
 4012c28:	000b883a 	mov	r5,zero
 4012c2c:	88000015 	stw	zero,0(r17)
 4012c30:	88000115 	stw	zero,4(r17)
 4012c34:	88000215 	stw	zero,8(r17)
 4012c38:	88001915 	stw	zero,100(r17)
 4012c3c:	8880038d 	sth	r2,14(r17)
 4012c40:	88000415 	stw	zero,16(r17)
 4012c44:	88000515 	stw	zero,20(r17)
 4012c48:	88000615 	stw	zero,24(r17)
 4012c4c:	400c4240 	call	400c424 <memset>
 4012c50:	94000317 	ldw	r16,12(r18)
 4012c54:	00800484 	movi	r2,18
 4012c58:	8c400715 	stw	r17,28(r17)
 4012c5c:	8d800815 	stw	r22,32(r17)
 4012c60:	8d400915 	stw	r21,36(r17)
 4012c64:	8d000a15 	stw	r20,40(r17)
 4012c68:	8cc00b15 	stw	r19,44(r17)
 4012c6c:	8080030d 	sth	r2,12(r16)
 4012c70:	00800084 	movi	r2,2
 4012c74:	80000015 	stw	zero,0(r16)
 4012c78:	80000115 	stw	zero,4(r16)
 4012c7c:	80000215 	stw	zero,8(r16)
 4012c80:	80001915 	stw	zero,100(r16)
 4012c84:	8080038d 	sth	r2,14(r16)
 4012c88:	80000415 	stw	zero,16(r16)
 4012c8c:	80000515 	stw	zero,20(r16)
 4012c90:	80000615 	stw	zero,24(r16)
 4012c94:	b80d883a 	mov	r6,r23
 4012c98:	000b883a 	mov	r5,zero
 4012c9c:	81001704 	addi	r4,r16,92
 4012ca0:	400c4240 	call	400c424 <memset>
 4012ca4:	00800044 	movi	r2,1
 4012ca8:	84000715 	stw	r16,28(r16)
 4012cac:	85800815 	stw	r22,32(r16)
 4012cb0:	85400915 	stw	r21,36(r16)
 4012cb4:	85000a15 	stw	r20,40(r16)
 4012cb8:	84c00b15 	stw	r19,44(r16)
 4012cbc:	90800e15 	stw	r2,56(r18)
 4012cc0:	dfc00817 	ldw	ra,32(sp)
 4012cc4:	ddc00717 	ldw	r23,28(sp)
 4012cc8:	dd800617 	ldw	r22,24(sp)
 4012ccc:	dd400517 	ldw	r21,20(sp)
 4012cd0:	dd000417 	ldw	r20,16(sp)
 4012cd4:	dcc00317 	ldw	r19,12(sp)
 4012cd8:	dc800217 	ldw	r18,8(sp)
 4012cdc:	dc400117 	ldw	r17,4(sp)
 4012ce0:	dc000017 	ldw	r16,0(sp)
 4012ce4:	dec00904 	addi	sp,sp,36
 4012ce8:	f800283a 	ret

04012cec <__fp_lock>:
 4012cec:	0005883a 	mov	r2,zero
 4012cf0:	f800283a 	ret

04012cf4 <__sfmoreglue>:
 4012cf4:	defffc04 	addi	sp,sp,-16
 4012cf8:	dc400115 	stw	r17,4(sp)
 4012cfc:	2c7fffc4 	addi	r17,r5,-1
 4012d00:	8c401a24 	muli	r17,r17,104
 4012d04:	dc800215 	stw	r18,8(sp)
 4012d08:	2825883a 	mov	r18,r5
 4012d0c:	89401d04 	addi	r5,r17,116
 4012d10:	dc000015 	stw	r16,0(sp)
 4012d14:	dfc00315 	stw	ra,12(sp)
 4012d18:	400bad00 	call	400bad0 <_malloc_r>
 4012d1c:	1021883a 	mov	r16,r2
 4012d20:	10000726 	beq	r2,zero,4012d40 <__sfmoreglue+0x4c>
 4012d24:	11000304 	addi	r4,r2,12
 4012d28:	10000015 	stw	zero,0(r2)
 4012d2c:	14800115 	stw	r18,4(r2)
 4012d30:	11000215 	stw	r4,8(r2)
 4012d34:	89801a04 	addi	r6,r17,104
 4012d38:	000b883a 	mov	r5,zero
 4012d3c:	400c4240 	call	400c424 <memset>
 4012d40:	8005883a 	mov	r2,r16
 4012d44:	dfc00317 	ldw	ra,12(sp)
 4012d48:	dc800217 	ldw	r18,8(sp)
 4012d4c:	dc400117 	ldw	r17,4(sp)
 4012d50:	dc000017 	ldw	r16,0(sp)
 4012d54:	dec00404 	addi	sp,sp,16
 4012d58:	f800283a 	ret

04012d5c <__sfp>:
 4012d5c:	defffb04 	addi	sp,sp,-20
 4012d60:	dc000015 	stw	r16,0(sp)
 4012d64:	04010234 	movhi	r16,1032
 4012d68:	843e4304 	addi	r16,r16,-1780
 4012d6c:	dcc00315 	stw	r19,12(sp)
 4012d70:	2027883a 	mov	r19,r4
 4012d74:	81000017 	ldw	r4,0(r16)
 4012d78:	dfc00415 	stw	ra,16(sp)
 4012d7c:	dc800215 	stw	r18,8(sp)
 4012d80:	20800e17 	ldw	r2,56(r4)
 4012d84:	dc400115 	stw	r17,4(sp)
 4012d88:	1000021e 	bne	r2,zero,4012d94 <__sfp+0x38>
 4012d8c:	4012b500 	call	4012b50 <__sinit.part.1>
 4012d90:	81000017 	ldw	r4,0(r16)
 4012d94:	2480b804 	addi	r18,r4,736
 4012d98:	047fffc4 	movi	r17,-1
 4012d9c:	91000117 	ldw	r4,4(r18)
 4012da0:	94000217 	ldw	r16,8(r18)
 4012da4:	213fffc4 	addi	r4,r4,-1
 4012da8:	20000a16 	blt	r4,zero,4012dd4 <__sfp+0x78>
 4012dac:	8080030f 	ldh	r2,12(r16)
 4012db0:	10000c26 	beq	r2,zero,4012de4 <__sfp+0x88>
 4012db4:	80c01d04 	addi	r3,r16,116
 4012db8:	00000206 	br	4012dc4 <__sfp+0x68>
 4012dbc:	18bfe60f 	ldh	r2,-104(r3)
 4012dc0:	10000826 	beq	r2,zero,4012de4 <__sfp+0x88>
 4012dc4:	213fffc4 	addi	r4,r4,-1
 4012dc8:	1c3ffd04 	addi	r16,r3,-12
 4012dcc:	18c01a04 	addi	r3,r3,104
 4012dd0:	247ffa1e 	bne	r4,r17,4012dbc <__alt_mem_epcs_flash_controller_0+0xfb011dbc>
 4012dd4:	90800017 	ldw	r2,0(r18)
 4012dd8:	10001d26 	beq	r2,zero,4012e50 <__sfp+0xf4>
 4012ddc:	1025883a 	mov	r18,r2
 4012de0:	003fee06 	br	4012d9c <__alt_mem_epcs_flash_controller_0+0xfb011d9c>
 4012de4:	00bfffc4 	movi	r2,-1
 4012de8:	8080038d 	sth	r2,14(r16)
 4012dec:	00800044 	movi	r2,1
 4012df0:	8080030d 	sth	r2,12(r16)
 4012df4:	80001915 	stw	zero,100(r16)
 4012df8:	80000015 	stw	zero,0(r16)
 4012dfc:	80000215 	stw	zero,8(r16)
 4012e00:	80000115 	stw	zero,4(r16)
 4012e04:	80000415 	stw	zero,16(r16)
 4012e08:	80000515 	stw	zero,20(r16)
 4012e0c:	80000615 	stw	zero,24(r16)
 4012e10:	01800204 	movi	r6,8
 4012e14:	000b883a 	mov	r5,zero
 4012e18:	81001704 	addi	r4,r16,92
 4012e1c:	400c4240 	call	400c424 <memset>
 4012e20:	8005883a 	mov	r2,r16
 4012e24:	80000c15 	stw	zero,48(r16)
 4012e28:	80000d15 	stw	zero,52(r16)
 4012e2c:	80001115 	stw	zero,68(r16)
 4012e30:	80001215 	stw	zero,72(r16)
 4012e34:	dfc00417 	ldw	ra,16(sp)
 4012e38:	dcc00317 	ldw	r19,12(sp)
 4012e3c:	dc800217 	ldw	r18,8(sp)
 4012e40:	dc400117 	ldw	r17,4(sp)
 4012e44:	dc000017 	ldw	r16,0(sp)
 4012e48:	dec00504 	addi	sp,sp,20
 4012e4c:	f800283a 	ret
 4012e50:	01400104 	movi	r5,4
 4012e54:	9809883a 	mov	r4,r19
 4012e58:	4012cf40 	call	4012cf4 <__sfmoreglue>
 4012e5c:	90800015 	stw	r2,0(r18)
 4012e60:	103fde1e 	bne	r2,zero,4012ddc <__alt_mem_epcs_flash_controller_0+0xfb011ddc>
 4012e64:	00800304 	movi	r2,12
 4012e68:	98800015 	stw	r2,0(r19)
 4012e6c:	0005883a 	mov	r2,zero
 4012e70:	003ff006 	br	4012e34 <__alt_mem_epcs_flash_controller_0+0xfb011e34>

04012e74 <_cleanup>:
 4012e74:	00810234 	movhi	r2,1032
 4012e78:	10be4304 	addi	r2,r2,-1780
 4012e7c:	11000017 	ldw	r4,0(r2)
 4012e80:	014100b4 	movhi	r5,1026
 4012e84:	29610c04 	addi	r5,r5,-31696
 4012e88:	40138901 	jmpi	4013890 <_fwalk_reent>

04012e8c <__sinit>:
 4012e8c:	20800e17 	ldw	r2,56(r4)
 4012e90:	10000126 	beq	r2,zero,4012e98 <__sinit+0xc>
 4012e94:	f800283a 	ret
 4012e98:	4012b501 	jmpi	4012b50 <__sinit.part.1>

04012e9c <__sfp_lock_acquire>:
 4012e9c:	f800283a 	ret

04012ea0 <__sfp_lock_release>:
 4012ea0:	f800283a 	ret

04012ea4 <__sinit_lock_acquire>:
 4012ea4:	f800283a 	ret

04012ea8 <__sinit_lock_release>:
 4012ea8:	f800283a 	ret

04012eac <__fp_lock_all>:
 4012eac:	00810234 	movhi	r2,1032
 4012eb0:	10be4404 	addi	r2,r2,-1776
 4012eb4:	11000017 	ldw	r4,0(r2)
 4012eb8:	01410074 	movhi	r5,1025
 4012ebc:	294b3b04 	addi	r5,r5,11500
 4012ec0:	40137cc1 	jmpi	40137cc <_fwalk>

04012ec4 <__fp_unlock_all>:
 4012ec4:	00810234 	movhi	r2,1032
 4012ec8:	10be4404 	addi	r2,r2,-1776
 4012ecc:	11000017 	ldw	r4,0(r2)
 4012ed0:	01410074 	movhi	r5,1025
 4012ed4:	294acf04 	addi	r5,r5,11068
 4012ed8:	40137cc1 	jmpi	40137cc <_fwalk>

04012edc <_malloc_trim_r>:
 4012edc:	defffb04 	addi	sp,sp,-20
 4012ee0:	dcc00315 	stw	r19,12(sp)
 4012ee4:	04c10234 	movhi	r19,1032
 4012ee8:	dc800215 	stw	r18,8(sp)
 4012eec:	dc400115 	stw	r17,4(sp)
 4012ef0:	dc000015 	stw	r16,0(sp)
 4012ef4:	dfc00415 	stw	ra,16(sp)
 4012ef8:	2821883a 	mov	r16,r5
 4012efc:	9cf86b04 	addi	r19,r19,-7764
 4012f00:	2025883a 	mov	r18,r4
 4012f04:	4019ec80 	call	4019ec8 <__malloc_lock>
 4012f08:	98800217 	ldw	r2,8(r19)
 4012f0c:	14400117 	ldw	r17,4(r2)
 4012f10:	00bfff04 	movi	r2,-4
 4012f14:	88a2703a 	and	r17,r17,r2
 4012f18:	8c21c83a 	sub	r16,r17,r16
 4012f1c:	8403fbc4 	addi	r16,r16,4079
 4012f20:	8020d33a 	srli	r16,r16,12
 4012f24:	0083ffc4 	movi	r2,4095
 4012f28:	843fffc4 	addi	r16,r16,-1
 4012f2c:	8020933a 	slli	r16,r16,12
 4012f30:	1400060e 	bge	r2,r16,4012f4c <_malloc_trim_r+0x70>
 4012f34:	000b883a 	mov	r5,zero
 4012f38:	9009883a 	mov	r4,r18
 4012f3c:	400c6ac0 	call	400c6ac <_sbrk_r>
 4012f40:	98c00217 	ldw	r3,8(r19)
 4012f44:	1c47883a 	add	r3,r3,r17
 4012f48:	10c00a26 	beq	r2,r3,4012f74 <_malloc_trim_r+0x98>
 4012f4c:	9009883a 	mov	r4,r18
 4012f50:	4019eec0 	call	4019eec <__malloc_unlock>
 4012f54:	0005883a 	mov	r2,zero
 4012f58:	dfc00417 	ldw	ra,16(sp)
 4012f5c:	dcc00317 	ldw	r19,12(sp)
 4012f60:	dc800217 	ldw	r18,8(sp)
 4012f64:	dc400117 	ldw	r17,4(sp)
 4012f68:	dc000017 	ldw	r16,0(sp)
 4012f6c:	dec00504 	addi	sp,sp,20
 4012f70:	f800283a 	ret
 4012f74:	040bc83a 	sub	r5,zero,r16
 4012f78:	9009883a 	mov	r4,r18
 4012f7c:	400c6ac0 	call	400c6ac <_sbrk_r>
 4012f80:	00ffffc4 	movi	r3,-1
 4012f84:	10c00d26 	beq	r2,r3,4012fbc <_malloc_trim_r+0xe0>
 4012f88:	00c10234 	movhi	r3,1032
 4012f8c:	18fe6404 	addi	r3,r3,-1648
 4012f90:	18800017 	ldw	r2,0(r3)
 4012f94:	99000217 	ldw	r4,8(r19)
 4012f98:	8c23c83a 	sub	r17,r17,r16
 4012f9c:	8c400054 	ori	r17,r17,1
 4012fa0:	1421c83a 	sub	r16,r2,r16
 4012fa4:	24400115 	stw	r17,4(r4)
 4012fa8:	9009883a 	mov	r4,r18
 4012fac:	1c000015 	stw	r16,0(r3)
 4012fb0:	4019eec0 	call	4019eec <__malloc_unlock>
 4012fb4:	00800044 	movi	r2,1
 4012fb8:	003fe706 	br	4012f58 <__alt_mem_epcs_flash_controller_0+0xfb011f58>
 4012fbc:	000b883a 	mov	r5,zero
 4012fc0:	9009883a 	mov	r4,r18
 4012fc4:	400c6ac0 	call	400c6ac <_sbrk_r>
 4012fc8:	99000217 	ldw	r4,8(r19)
 4012fcc:	014003c4 	movi	r5,15
 4012fd0:	1107c83a 	sub	r3,r2,r4
 4012fd4:	28ffdd0e 	bge	r5,r3,4012f4c <__alt_mem_epcs_flash_controller_0+0xfb011f4c>
 4012fd8:	01410234 	movhi	r5,1032
 4012fdc:	297e4504 	addi	r5,r5,-1772
 4012fe0:	29400017 	ldw	r5,0(r5)
 4012fe4:	18c00054 	ori	r3,r3,1
 4012fe8:	20c00115 	stw	r3,4(r4)
 4012fec:	00c10234 	movhi	r3,1032
 4012ff0:	1145c83a 	sub	r2,r2,r5
 4012ff4:	18fe6404 	addi	r3,r3,-1648
 4012ff8:	18800015 	stw	r2,0(r3)
 4012ffc:	003fd306 	br	4012f4c <__alt_mem_epcs_flash_controller_0+0xfb011f4c>

04013000 <_free_r>:
 4013000:	28004126 	beq	r5,zero,4013108 <_free_r+0x108>
 4013004:	defffd04 	addi	sp,sp,-12
 4013008:	dc400115 	stw	r17,4(sp)
 401300c:	dc000015 	stw	r16,0(sp)
 4013010:	2023883a 	mov	r17,r4
 4013014:	2821883a 	mov	r16,r5
 4013018:	dfc00215 	stw	ra,8(sp)
 401301c:	4019ec80 	call	4019ec8 <__malloc_lock>
 4013020:	81ffff17 	ldw	r7,-4(r16)
 4013024:	00bfff84 	movi	r2,-2
 4013028:	01010234 	movhi	r4,1032
 401302c:	81bffe04 	addi	r6,r16,-8
 4013030:	3884703a 	and	r2,r7,r2
 4013034:	21386b04 	addi	r4,r4,-7764
 4013038:	308b883a 	add	r5,r6,r2
 401303c:	2a400117 	ldw	r9,4(r5)
 4013040:	22000217 	ldw	r8,8(r4)
 4013044:	00ffff04 	movi	r3,-4
 4013048:	48c6703a 	and	r3,r9,r3
 401304c:	2a005726 	beq	r5,r8,40131ac <_free_r+0x1ac>
 4013050:	28c00115 	stw	r3,4(r5)
 4013054:	39c0004c 	andi	r7,r7,1
 4013058:	3800091e 	bne	r7,zero,4013080 <_free_r+0x80>
 401305c:	823ffe17 	ldw	r8,-8(r16)
 4013060:	22400204 	addi	r9,r4,8
 4013064:	320dc83a 	sub	r6,r6,r8
 4013068:	31c00217 	ldw	r7,8(r6)
 401306c:	1205883a 	add	r2,r2,r8
 4013070:	3a406526 	beq	r7,r9,4013208 <_free_r+0x208>
 4013074:	32000317 	ldw	r8,12(r6)
 4013078:	3a000315 	stw	r8,12(r7)
 401307c:	41c00215 	stw	r7,8(r8)
 4013080:	28cf883a 	add	r7,r5,r3
 4013084:	39c00117 	ldw	r7,4(r7)
 4013088:	39c0004c 	andi	r7,r7,1
 401308c:	38003a26 	beq	r7,zero,4013178 <_free_r+0x178>
 4013090:	10c00054 	ori	r3,r2,1
 4013094:	30c00115 	stw	r3,4(r6)
 4013098:	3087883a 	add	r3,r6,r2
 401309c:	18800015 	stw	r2,0(r3)
 40130a0:	00c07fc4 	movi	r3,511
 40130a4:	18801936 	bltu	r3,r2,401310c <_free_r+0x10c>
 40130a8:	1004d0fa 	srli	r2,r2,3
 40130ac:	01c00044 	movi	r7,1
 40130b0:	21400117 	ldw	r5,4(r4)
 40130b4:	10c00044 	addi	r3,r2,1
 40130b8:	18c7883a 	add	r3,r3,r3
 40130bc:	1005d0ba 	srai	r2,r2,2
 40130c0:	18c7883a 	add	r3,r3,r3
 40130c4:	18c7883a 	add	r3,r3,r3
 40130c8:	1907883a 	add	r3,r3,r4
 40130cc:	3884983a 	sll	r2,r7,r2
 40130d0:	19c00017 	ldw	r7,0(r3)
 40130d4:	1a3ffe04 	addi	r8,r3,-8
 40130d8:	1144b03a 	or	r2,r2,r5
 40130dc:	32000315 	stw	r8,12(r6)
 40130e0:	31c00215 	stw	r7,8(r6)
 40130e4:	20800115 	stw	r2,4(r4)
 40130e8:	19800015 	stw	r6,0(r3)
 40130ec:	39800315 	stw	r6,12(r7)
 40130f0:	8809883a 	mov	r4,r17
 40130f4:	dfc00217 	ldw	ra,8(sp)
 40130f8:	dc400117 	ldw	r17,4(sp)
 40130fc:	dc000017 	ldw	r16,0(sp)
 4013100:	dec00304 	addi	sp,sp,12
 4013104:	4019eec1 	jmpi	4019eec <__malloc_unlock>
 4013108:	f800283a 	ret
 401310c:	100ad27a 	srli	r5,r2,9
 4013110:	00c00104 	movi	r3,4
 4013114:	19404a36 	bltu	r3,r5,4013240 <_free_r+0x240>
 4013118:	100ad1ba 	srli	r5,r2,6
 401311c:	28c00e44 	addi	r3,r5,57
 4013120:	18c7883a 	add	r3,r3,r3
 4013124:	29400e04 	addi	r5,r5,56
 4013128:	18c7883a 	add	r3,r3,r3
 401312c:	18c7883a 	add	r3,r3,r3
 4013130:	1909883a 	add	r4,r3,r4
 4013134:	20c00017 	ldw	r3,0(r4)
 4013138:	01c10234 	movhi	r7,1032
 401313c:	213ffe04 	addi	r4,r4,-8
 4013140:	39f86b04 	addi	r7,r7,-7764
 4013144:	20c04426 	beq	r4,r3,4013258 <_free_r+0x258>
 4013148:	01ffff04 	movi	r7,-4
 401314c:	19400117 	ldw	r5,4(r3)
 4013150:	29ca703a 	and	r5,r5,r7
 4013154:	1140022e 	bgeu	r2,r5,4013160 <_free_r+0x160>
 4013158:	18c00217 	ldw	r3,8(r3)
 401315c:	20fffb1e 	bne	r4,r3,401314c <__alt_mem_epcs_flash_controller_0+0xfb01214c>
 4013160:	19000317 	ldw	r4,12(r3)
 4013164:	31000315 	stw	r4,12(r6)
 4013168:	30c00215 	stw	r3,8(r6)
 401316c:	21800215 	stw	r6,8(r4)
 4013170:	19800315 	stw	r6,12(r3)
 4013174:	003fde06 	br	40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>
 4013178:	29c00217 	ldw	r7,8(r5)
 401317c:	10c5883a 	add	r2,r2,r3
 4013180:	00c10234 	movhi	r3,1032
 4013184:	18f86d04 	addi	r3,r3,-7756
 4013188:	38c03b26 	beq	r7,r3,4013278 <_free_r+0x278>
 401318c:	2a000317 	ldw	r8,12(r5)
 4013190:	11400054 	ori	r5,r2,1
 4013194:	3087883a 	add	r3,r6,r2
 4013198:	3a000315 	stw	r8,12(r7)
 401319c:	41c00215 	stw	r7,8(r8)
 40131a0:	31400115 	stw	r5,4(r6)
 40131a4:	18800015 	stw	r2,0(r3)
 40131a8:	003fbd06 	br	40130a0 <__alt_mem_epcs_flash_controller_0+0xfb0120a0>
 40131ac:	39c0004c 	andi	r7,r7,1
 40131b0:	10c5883a 	add	r2,r2,r3
 40131b4:	3800071e 	bne	r7,zero,40131d4 <_free_r+0x1d4>
 40131b8:	81fffe17 	ldw	r7,-8(r16)
 40131bc:	31cdc83a 	sub	r6,r6,r7
 40131c0:	30c00317 	ldw	r3,12(r6)
 40131c4:	31400217 	ldw	r5,8(r6)
 40131c8:	11c5883a 	add	r2,r2,r7
 40131cc:	28c00315 	stw	r3,12(r5)
 40131d0:	19400215 	stw	r5,8(r3)
 40131d4:	10c00054 	ori	r3,r2,1
 40131d8:	30c00115 	stw	r3,4(r6)
 40131dc:	00c10234 	movhi	r3,1032
 40131e0:	18fe4604 	addi	r3,r3,-1768
 40131e4:	18c00017 	ldw	r3,0(r3)
 40131e8:	21800215 	stw	r6,8(r4)
 40131ec:	10ffc036 	bltu	r2,r3,40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>
 40131f0:	00810234 	movhi	r2,1032
 40131f4:	10be5804 	addi	r2,r2,-1696
 40131f8:	11400017 	ldw	r5,0(r2)
 40131fc:	8809883a 	mov	r4,r17
 4013200:	4012edc0 	call	4012edc <_malloc_trim_r>
 4013204:	003fba06 	br	40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>
 4013208:	28c9883a 	add	r4,r5,r3
 401320c:	21000117 	ldw	r4,4(r4)
 4013210:	2100004c 	andi	r4,r4,1
 4013214:	2000391e 	bne	r4,zero,40132fc <_free_r+0x2fc>
 4013218:	29c00217 	ldw	r7,8(r5)
 401321c:	29000317 	ldw	r4,12(r5)
 4013220:	1885883a 	add	r2,r3,r2
 4013224:	10c00054 	ori	r3,r2,1
 4013228:	39000315 	stw	r4,12(r7)
 401322c:	21c00215 	stw	r7,8(r4)
 4013230:	30c00115 	stw	r3,4(r6)
 4013234:	308d883a 	add	r6,r6,r2
 4013238:	30800015 	stw	r2,0(r6)
 401323c:	003fac06 	br	40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>
 4013240:	00c00504 	movi	r3,20
 4013244:	19401536 	bltu	r3,r5,401329c <_free_r+0x29c>
 4013248:	28c01704 	addi	r3,r5,92
 401324c:	18c7883a 	add	r3,r3,r3
 4013250:	294016c4 	addi	r5,r5,91
 4013254:	003fb406 	br	4013128 <__alt_mem_epcs_flash_controller_0+0xfb012128>
 4013258:	280bd0ba 	srai	r5,r5,2
 401325c:	00c00044 	movi	r3,1
 4013260:	38800117 	ldw	r2,4(r7)
 4013264:	194a983a 	sll	r5,r3,r5
 4013268:	2007883a 	mov	r3,r4
 401326c:	2884b03a 	or	r2,r5,r2
 4013270:	38800115 	stw	r2,4(r7)
 4013274:	003fbb06 	br	4013164 <__alt_mem_epcs_flash_controller_0+0xfb012164>
 4013278:	21800515 	stw	r6,20(r4)
 401327c:	21800415 	stw	r6,16(r4)
 4013280:	10c00054 	ori	r3,r2,1
 4013284:	31c00315 	stw	r7,12(r6)
 4013288:	31c00215 	stw	r7,8(r6)
 401328c:	30c00115 	stw	r3,4(r6)
 4013290:	308d883a 	add	r6,r6,r2
 4013294:	30800015 	stw	r2,0(r6)
 4013298:	003f9506 	br	40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>
 401329c:	00c01504 	movi	r3,84
 40132a0:	19400536 	bltu	r3,r5,40132b8 <_free_r+0x2b8>
 40132a4:	100ad33a 	srli	r5,r2,12
 40132a8:	28c01bc4 	addi	r3,r5,111
 40132ac:	18c7883a 	add	r3,r3,r3
 40132b0:	29401b84 	addi	r5,r5,110
 40132b4:	003f9c06 	br	4013128 <__alt_mem_epcs_flash_controller_0+0xfb012128>
 40132b8:	00c05504 	movi	r3,340
 40132bc:	19400536 	bltu	r3,r5,40132d4 <_free_r+0x2d4>
 40132c0:	100ad3fa 	srli	r5,r2,15
 40132c4:	28c01e04 	addi	r3,r5,120
 40132c8:	18c7883a 	add	r3,r3,r3
 40132cc:	29401dc4 	addi	r5,r5,119
 40132d0:	003f9506 	br	4013128 <__alt_mem_epcs_flash_controller_0+0xfb012128>
 40132d4:	00c15504 	movi	r3,1364
 40132d8:	19400536 	bltu	r3,r5,40132f0 <_free_r+0x2f0>
 40132dc:	100ad4ba 	srli	r5,r2,18
 40132e0:	28c01f44 	addi	r3,r5,125
 40132e4:	18c7883a 	add	r3,r3,r3
 40132e8:	29401f04 	addi	r5,r5,124
 40132ec:	003f8e06 	br	4013128 <__alt_mem_epcs_flash_controller_0+0xfb012128>
 40132f0:	00c03f84 	movi	r3,254
 40132f4:	01401f84 	movi	r5,126
 40132f8:	003f8b06 	br	4013128 <__alt_mem_epcs_flash_controller_0+0xfb012128>
 40132fc:	10c00054 	ori	r3,r2,1
 4013300:	30c00115 	stw	r3,4(r6)
 4013304:	308d883a 	add	r6,r6,r2
 4013308:	30800015 	stw	r2,0(r6)
 401330c:	003f7806 	br	40130f0 <__alt_mem_epcs_flash_controller_0+0xfb0120f0>

04013310 <__sfvwrite_r>:
 4013310:	30800217 	ldw	r2,8(r6)
 4013314:	10006726 	beq	r2,zero,40134b4 <__sfvwrite_r+0x1a4>
 4013318:	28c0030b 	ldhu	r3,12(r5)
 401331c:	defff404 	addi	sp,sp,-48
 4013320:	dd400715 	stw	r21,28(sp)
 4013324:	dd000615 	stw	r20,24(sp)
 4013328:	dc000215 	stw	r16,8(sp)
 401332c:	dfc00b15 	stw	ra,44(sp)
 4013330:	df000a15 	stw	fp,40(sp)
 4013334:	ddc00915 	stw	r23,36(sp)
 4013338:	dd800815 	stw	r22,32(sp)
 401333c:	dcc00515 	stw	r19,20(sp)
 4013340:	dc800415 	stw	r18,16(sp)
 4013344:	dc400315 	stw	r17,12(sp)
 4013348:	1880020c 	andi	r2,r3,8
 401334c:	2821883a 	mov	r16,r5
 4013350:	202b883a 	mov	r21,r4
 4013354:	3029883a 	mov	r20,r6
 4013358:	10002726 	beq	r2,zero,40133f8 <__sfvwrite_r+0xe8>
 401335c:	28800417 	ldw	r2,16(r5)
 4013360:	10002526 	beq	r2,zero,40133f8 <__sfvwrite_r+0xe8>
 4013364:	1880008c 	andi	r2,r3,2
 4013368:	a4400017 	ldw	r17,0(r20)
 401336c:	10002a26 	beq	r2,zero,4013418 <__sfvwrite_r+0x108>
 4013370:	05a00034 	movhi	r22,32768
 4013374:	0027883a 	mov	r19,zero
 4013378:	0025883a 	mov	r18,zero
 401337c:	b5bf0004 	addi	r22,r22,-1024
 4013380:	980d883a 	mov	r6,r19
 4013384:	a809883a 	mov	r4,r21
 4013388:	90004626 	beq	r18,zero,40134a4 <__sfvwrite_r+0x194>
 401338c:	900f883a 	mov	r7,r18
 4013390:	b480022e 	bgeu	r22,r18,401339c <__sfvwrite_r+0x8c>
 4013394:	01e00034 	movhi	r7,32768
 4013398:	39ff0004 	addi	r7,r7,-1024
 401339c:	80800917 	ldw	r2,36(r16)
 40133a0:	81400717 	ldw	r5,28(r16)
 40133a4:	103ee83a 	callr	r2
 40133a8:	0080570e 	bge	zero,r2,4013508 <__sfvwrite_r+0x1f8>
 40133ac:	a0c00217 	ldw	r3,8(r20)
 40133b0:	98a7883a 	add	r19,r19,r2
 40133b4:	90a5c83a 	sub	r18,r18,r2
 40133b8:	1885c83a 	sub	r2,r3,r2
 40133bc:	a0800215 	stw	r2,8(r20)
 40133c0:	103fef1e 	bne	r2,zero,4013380 <__alt_mem_epcs_flash_controller_0+0xfb012380>
 40133c4:	0005883a 	mov	r2,zero
 40133c8:	dfc00b17 	ldw	ra,44(sp)
 40133cc:	df000a17 	ldw	fp,40(sp)
 40133d0:	ddc00917 	ldw	r23,36(sp)
 40133d4:	dd800817 	ldw	r22,32(sp)
 40133d8:	dd400717 	ldw	r21,28(sp)
 40133dc:	dd000617 	ldw	r20,24(sp)
 40133e0:	dcc00517 	ldw	r19,20(sp)
 40133e4:	dc800417 	ldw	r18,16(sp)
 40133e8:	dc400317 	ldw	r17,12(sp)
 40133ec:	dc000217 	ldw	r16,8(sp)
 40133f0:	dec00c04 	addi	sp,sp,48
 40133f4:	f800283a 	ret
 40133f8:	800b883a 	mov	r5,r16
 40133fc:	a809883a 	mov	r4,r21
 4013400:	4010eb80 	call	4010eb8 <__swsetup_r>
 4013404:	1000eb1e 	bne	r2,zero,40137b4 <__sfvwrite_r+0x4a4>
 4013408:	80c0030b 	ldhu	r3,12(r16)
 401340c:	a4400017 	ldw	r17,0(r20)
 4013410:	1880008c 	andi	r2,r3,2
 4013414:	103fd61e 	bne	r2,zero,4013370 <__alt_mem_epcs_flash_controller_0+0xfb012370>
 4013418:	1880004c 	andi	r2,r3,1
 401341c:	10003f1e 	bne	r2,zero,401351c <__sfvwrite_r+0x20c>
 4013420:	0039883a 	mov	fp,zero
 4013424:	0025883a 	mov	r18,zero
 4013428:	90001a26 	beq	r18,zero,4013494 <__sfvwrite_r+0x184>
 401342c:	1880800c 	andi	r2,r3,512
 4013430:	84c00217 	ldw	r19,8(r16)
 4013434:	10002126 	beq	r2,zero,40134bc <__sfvwrite_r+0x1ac>
 4013438:	982f883a 	mov	r23,r19
 401343c:	94c09336 	bltu	r18,r19,401368c <__sfvwrite_r+0x37c>
 4013440:	1881200c 	andi	r2,r3,1152
 4013444:	10009e1e 	bne	r2,zero,40136c0 <__sfvwrite_r+0x3b0>
 4013448:	81000017 	ldw	r4,0(r16)
 401344c:	b80d883a 	mov	r6,r23
 4013450:	e00b883a 	mov	r5,fp
 4013454:	4013cd00 	call	4013cd0 <memmove>
 4013458:	80c00217 	ldw	r3,8(r16)
 401345c:	81000017 	ldw	r4,0(r16)
 4013460:	9005883a 	mov	r2,r18
 4013464:	1ce7c83a 	sub	r19,r3,r19
 4013468:	25cf883a 	add	r7,r4,r23
 401346c:	84c00215 	stw	r19,8(r16)
 4013470:	81c00015 	stw	r7,0(r16)
 4013474:	a0c00217 	ldw	r3,8(r20)
 4013478:	e0b9883a 	add	fp,fp,r2
 401347c:	90a5c83a 	sub	r18,r18,r2
 4013480:	18a7c83a 	sub	r19,r3,r2
 4013484:	a4c00215 	stw	r19,8(r20)
 4013488:	983fce26 	beq	r19,zero,40133c4 <__alt_mem_epcs_flash_controller_0+0xfb0123c4>
 401348c:	80c0030b 	ldhu	r3,12(r16)
 4013490:	903fe61e 	bne	r18,zero,401342c <__alt_mem_epcs_flash_controller_0+0xfb01242c>
 4013494:	8f000017 	ldw	fp,0(r17)
 4013498:	8c800117 	ldw	r18,4(r17)
 401349c:	8c400204 	addi	r17,r17,8
 40134a0:	003fe106 	br	4013428 <__alt_mem_epcs_flash_controller_0+0xfb012428>
 40134a4:	8cc00017 	ldw	r19,0(r17)
 40134a8:	8c800117 	ldw	r18,4(r17)
 40134ac:	8c400204 	addi	r17,r17,8
 40134b0:	003fb306 	br	4013380 <__alt_mem_epcs_flash_controller_0+0xfb012380>
 40134b4:	0005883a 	mov	r2,zero
 40134b8:	f800283a 	ret
 40134bc:	81000017 	ldw	r4,0(r16)
 40134c0:	80800417 	ldw	r2,16(r16)
 40134c4:	11005736 	bltu	r2,r4,4013624 <__sfvwrite_r+0x314>
 40134c8:	85c00517 	ldw	r23,20(r16)
 40134cc:	95c05536 	bltu	r18,r23,4013624 <__sfvwrite_r+0x314>
 40134d0:	00a00034 	movhi	r2,32768
 40134d4:	10bfffc4 	addi	r2,r2,-1
 40134d8:	9009883a 	mov	r4,r18
 40134dc:	1480012e 	bgeu	r2,r18,40134e4 <__sfvwrite_r+0x1d4>
 40134e0:	1009883a 	mov	r4,r2
 40134e4:	b80b883a 	mov	r5,r23
 40134e8:	40094880 	call	4009488 <__divsi3>
 40134ec:	15cf383a 	mul	r7,r2,r23
 40134f0:	81400717 	ldw	r5,28(r16)
 40134f4:	80800917 	ldw	r2,36(r16)
 40134f8:	e00d883a 	mov	r6,fp
 40134fc:	a809883a 	mov	r4,r21
 4013500:	103ee83a 	callr	r2
 4013504:	00bfdb16 	blt	zero,r2,4013474 <__alt_mem_epcs_flash_controller_0+0xfb012474>
 4013508:	8080030b 	ldhu	r2,12(r16)
 401350c:	10801014 	ori	r2,r2,64
 4013510:	8080030d 	sth	r2,12(r16)
 4013514:	00bfffc4 	movi	r2,-1
 4013518:	003fab06 	br	40133c8 <__alt_mem_epcs_flash_controller_0+0xfb0123c8>
 401351c:	0027883a 	mov	r19,zero
 4013520:	0011883a 	mov	r8,zero
 4013524:	0039883a 	mov	fp,zero
 4013528:	0025883a 	mov	r18,zero
 401352c:	90001f26 	beq	r18,zero,40135ac <__sfvwrite_r+0x29c>
 4013530:	40005a26 	beq	r8,zero,401369c <__sfvwrite_r+0x38c>
 4013534:	982d883a 	mov	r22,r19
 4013538:	94c0012e 	bgeu	r18,r19,4013540 <__sfvwrite_r+0x230>
 401353c:	902d883a 	mov	r22,r18
 4013540:	81000017 	ldw	r4,0(r16)
 4013544:	80800417 	ldw	r2,16(r16)
 4013548:	b02f883a 	mov	r23,r22
 401354c:	81c00517 	ldw	r7,20(r16)
 4013550:	1100032e 	bgeu	r2,r4,4013560 <__sfvwrite_r+0x250>
 4013554:	80c00217 	ldw	r3,8(r16)
 4013558:	38c7883a 	add	r3,r7,r3
 401355c:	1d801816 	blt	r3,r22,40135c0 <__sfvwrite_r+0x2b0>
 4013560:	b1c03e16 	blt	r22,r7,401365c <__sfvwrite_r+0x34c>
 4013564:	80800917 	ldw	r2,36(r16)
 4013568:	81400717 	ldw	r5,28(r16)
 401356c:	e00d883a 	mov	r6,fp
 4013570:	da000115 	stw	r8,4(sp)
 4013574:	a809883a 	mov	r4,r21
 4013578:	103ee83a 	callr	r2
 401357c:	102f883a 	mov	r23,r2
 4013580:	da000117 	ldw	r8,4(sp)
 4013584:	00bfe00e 	bge	zero,r2,4013508 <__alt_mem_epcs_flash_controller_0+0xfb012508>
 4013588:	9de7c83a 	sub	r19,r19,r23
 401358c:	98001f26 	beq	r19,zero,401360c <__sfvwrite_r+0x2fc>
 4013590:	a0800217 	ldw	r2,8(r20)
 4013594:	e5f9883a 	add	fp,fp,r23
 4013598:	95e5c83a 	sub	r18,r18,r23
 401359c:	15efc83a 	sub	r23,r2,r23
 40135a0:	a5c00215 	stw	r23,8(r20)
 40135a4:	b83f8726 	beq	r23,zero,40133c4 <__alt_mem_epcs_flash_controller_0+0xfb0123c4>
 40135a8:	903fe11e 	bne	r18,zero,4013530 <__alt_mem_epcs_flash_controller_0+0xfb012530>
 40135ac:	8f000017 	ldw	fp,0(r17)
 40135b0:	8c800117 	ldw	r18,4(r17)
 40135b4:	0011883a 	mov	r8,zero
 40135b8:	8c400204 	addi	r17,r17,8
 40135bc:	003fdb06 	br	401352c <__alt_mem_epcs_flash_controller_0+0xfb01252c>
 40135c0:	180d883a 	mov	r6,r3
 40135c4:	e00b883a 	mov	r5,fp
 40135c8:	da000115 	stw	r8,4(sp)
 40135cc:	d8c00015 	stw	r3,0(sp)
 40135d0:	4013cd00 	call	4013cd0 <memmove>
 40135d4:	d8c00017 	ldw	r3,0(sp)
 40135d8:	80800017 	ldw	r2,0(r16)
 40135dc:	800b883a 	mov	r5,r16
 40135e0:	a809883a 	mov	r4,r21
 40135e4:	10c5883a 	add	r2,r2,r3
 40135e8:	80800015 	stw	r2,0(r16)
 40135ec:	d8c00015 	stw	r3,0(sp)
 40135f0:	4012ab00 	call	4012ab0 <_fflush_r>
 40135f4:	d8c00017 	ldw	r3,0(sp)
 40135f8:	da000117 	ldw	r8,4(sp)
 40135fc:	103fc21e 	bne	r2,zero,4013508 <__alt_mem_epcs_flash_controller_0+0xfb012508>
 4013600:	182f883a 	mov	r23,r3
 4013604:	9de7c83a 	sub	r19,r19,r23
 4013608:	983fe11e 	bne	r19,zero,4013590 <__alt_mem_epcs_flash_controller_0+0xfb012590>
 401360c:	800b883a 	mov	r5,r16
 4013610:	a809883a 	mov	r4,r21
 4013614:	4012ab00 	call	4012ab0 <_fflush_r>
 4013618:	103fbb1e 	bne	r2,zero,4013508 <__alt_mem_epcs_flash_controller_0+0xfb012508>
 401361c:	0011883a 	mov	r8,zero
 4013620:	003fdb06 	br	4013590 <__alt_mem_epcs_flash_controller_0+0xfb012590>
 4013624:	94c0012e 	bgeu	r18,r19,401362c <__sfvwrite_r+0x31c>
 4013628:	9027883a 	mov	r19,r18
 401362c:	980d883a 	mov	r6,r19
 4013630:	e00b883a 	mov	r5,fp
 4013634:	4013cd00 	call	4013cd0 <memmove>
 4013638:	80800217 	ldw	r2,8(r16)
 401363c:	80c00017 	ldw	r3,0(r16)
 4013640:	14c5c83a 	sub	r2,r2,r19
 4013644:	1cc7883a 	add	r3,r3,r19
 4013648:	80800215 	stw	r2,8(r16)
 401364c:	80c00015 	stw	r3,0(r16)
 4013650:	10004326 	beq	r2,zero,4013760 <__sfvwrite_r+0x450>
 4013654:	9805883a 	mov	r2,r19
 4013658:	003f8606 	br	4013474 <__alt_mem_epcs_flash_controller_0+0xfb012474>
 401365c:	b00d883a 	mov	r6,r22
 4013660:	e00b883a 	mov	r5,fp
 4013664:	da000115 	stw	r8,4(sp)
 4013668:	4013cd00 	call	4013cd0 <memmove>
 401366c:	80800217 	ldw	r2,8(r16)
 4013670:	80c00017 	ldw	r3,0(r16)
 4013674:	da000117 	ldw	r8,4(sp)
 4013678:	1585c83a 	sub	r2,r2,r22
 401367c:	1dad883a 	add	r22,r3,r22
 4013680:	80800215 	stw	r2,8(r16)
 4013684:	85800015 	stw	r22,0(r16)
 4013688:	003fbf06 	br	4013588 <__alt_mem_epcs_flash_controller_0+0xfb012588>
 401368c:	81000017 	ldw	r4,0(r16)
 4013690:	9027883a 	mov	r19,r18
 4013694:	902f883a 	mov	r23,r18
 4013698:	003f6c06 	br	401344c <__alt_mem_epcs_flash_controller_0+0xfb01244c>
 401369c:	900d883a 	mov	r6,r18
 40136a0:	01400284 	movi	r5,10
 40136a4:	e009883a 	mov	r4,fp
 40136a8:	4013bec0 	call	4013bec <memchr>
 40136ac:	10003e26 	beq	r2,zero,40137a8 <__sfvwrite_r+0x498>
 40136b0:	10800044 	addi	r2,r2,1
 40136b4:	1727c83a 	sub	r19,r2,fp
 40136b8:	02000044 	movi	r8,1
 40136bc:	003f9d06 	br	4013534 <__alt_mem_epcs_flash_controller_0+0xfb012534>
 40136c0:	80800517 	ldw	r2,20(r16)
 40136c4:	81400417 	ldw	r5,16(r16)
 40136c8:	81c00017 	ldw	r7,0(r16)
 40136cc:	10a7883a 	add	r19,r2,r2
 40136d0:	9885883a 	add	r2,r19,r2
 40136d4:	1026d7fa 	srli	r19,r2,31
 40136d8:	396dc83a 	sub	r22,r7,r5
 40136dc:	b1000044 	addi	r4,r22,1
 40136e0:	9885883a 	add	r2,r19,r2
 40136e4:	1027d07a 	srai	r19,r2,1
 40136e8:	2485883a 	add	r2,r4,r18
 40136ec:	980d883a 	mov	r6,r19
 40136f0:	9880022e 	bgeu	r19,r2,40136fc <__sfvwrite_r+0x3ec>
 40136f4:	1027883a 	mov	r19,r2
 40136f8:	100d883a 	mov	r6,r2
 40136fc:	18c1000c 	andi	r3,r3,1024
 4013700:	18001c26 	beq	r3,zero,4013774 <__sfvwrite_r+0x464>
 4013704:	300b883a 	mov	r5,r6
 4013708:	a809883a 	mov	r4,r21
 401370c:	400bad00 	call	400bad0 <_malloc_r>
 4013710:	102f883a 	mov	r23,r2
 4013714:	10002926 	beq	r2,zero,40137bc <__sfvwrite_r+0x4ac>
 4013718:	81400417 	ldw	r5,16(r16)
 401371c:	b00d883a 	mov	r6,r22
 4013720:	1009883a 	mov	r4,r2
 4013724:	400c2dc0 	call	400c2dc <memcpy>
 4013728:	8080030b 	ldhu	r2,12(r16)
 401372c:	00fedfc4 	movi	r3,-1153
 4013730:	10c4703a 	and	r2,r2,r3
 4013734:	10802014 	ori	r2,r2,128
 4013738:	8080030d 	sth	r2,12(r16)
 401373c:	bd89883a 	add	r4,r23,r22
 4013740:	9d8fc83a 	sub	r7,r19,r22
 4013744:	85c00415 	stw	r23,16(r16)
 4013748:	84c00515 	stw	r19,20(r16)
 401374c:	81000015 	stw	r4,0(r16)
 4013750:	9027883a 	mov	r19,r18
 4013754:	81c00215 	stw	r7,8(r16)
 4013758:	902f883a 	mov	r23,r18
 401375c:	003f3b06 	br	401344c <__alt_mem_epcs_flash_controller_0+0xfb01244c>
 4013760:	800b883a 	mov	r5,r16
 4013764:	a809883a 	mov	r4,r21
 4013768:	4012ab00 	call	4012ab0 <_fflush_r>
 401376c:	103fb926 	beq	r2,zero,4013654 <__alt_mem_epcs_flash_controller_0+0xfb012654>
 4013770:	003f6506 	br	4013508 <__alt_mem_epcs_flash_controller_0+0xfb012508>
 4013774:	a809883a 	mov	r4,r21
 4013778:	4014f900 	call	4014f90 <_realloc_r>
 401377c:	102f883a 	mov	r23,r2
 4013780:	103fee1e 	bne	r2,zero,401373c <__alt_mem_epcs_flash_controller_0+0xfb01273c>
 4013784:	81400417 	ldw	r5,16(r16)
 4013788:	a809883a 	mov	r4,r21
 401378c:	40130000 	call	4013000 <_free_r>
 4013790:	8080030b 	ldhu	r2,12(r16)
 4013794:	00ffdfc4 	movi	r3,-129
 4013798:	1884703a 	and	r2,r3,r2
 401379c:	00c00304 	movi	r3,12
 40137a0:	a8c00015 	stw	r3,0(r21)
 40137a4:	003f5906 	br	401350c <__alt_mem_epcs_flash_controller_0+0xfb01250c>
 40137a8:	94c00044 	addi	r19,r18,1
 40137ac:	02000044 	movi	r8,1
 40137b0:	003f6006 	br	4013534 <__alt_mem_epcs_flash_controller_0+0xfb012534>
 40137b4:	00bfffc4 	movi	r2,-1
 40137b8:	003f0306 	br	40133c8 <__alt_mem_epcs_flash_controller_0+0xfb0123c8>
 40137bc:	00800304 	movi	r2,12
 40137c0:	a8800015 	stw	r2,0(r21)
 40137c4:	8080030b 	ldhu	r2,12(r16)
 40137c8:	003f5006 	br	401350c <__alt_mem_epcs_flash_controller_0+0xfb01250c>

040137cc <_fwalk>:
 40137cc:	defff704 	addi	sp,sp,-36
 40137d0:	dd000415 	stw	r20,16(sp)
 40137d4:	dfc00815 	stw	ra,32(sp)
 40137d8:	ddc00715 	stw	r23,28(sp)
 40137dc:	dd800615 	stw	r22,24(sp)
 40137e0:	dd400515 	stw	r21,20(sp)
 40137e4:	dcc00315 	stw	r19,12(sp)
 40137e8:	dc800215 	stw	r18,8(sp)
 40137ec:	dc400115 	stw	r17,4(sp)
 40137f0:	dc000015 	stw	r16,0(sp)
 40137f4:	2500b804 	addi	r20,r4,736
 40137f8:	a0002326 	beq	r20,zero,4013888 <_fwalk+0xbc>
 40137fc:	282b883a 	mov	r21,r5
 4013800:	002f883a 	mov	r23,zero
 4013804:	05800044 	movi	r22,1
 4013808:	04ffffc4 	movi	r19,-1
 401380c:	a4400117 	ldw	r17,4(r20)
 4013810:	a4800217 	ldw	r18,8(r20)
 4013814:	8c7fffc4 	addi	r17,r17,-1
 4013818:	88000d16 	blt	r17,zero,4013850 <_fwalk+0x84>
 401381c:	94000304 	addi	r16,r18,12
 4013820:	94800384 	addi	r18,r18,14
 4013824:	8080000b 	ldhu	r2,0(r16)
 4013828:	8c7fffc4 	addi	r17,r17,-1
 401382c:	813ffd04 	addi	r4,r16,-12
 4013830:	b080042e 	bgeu	r22,r2,4013844 <_fwalk+0x78>
 4013834:	9080000f 	ldh	r2,0(r18)
 4013838:	14c00226 	beq	r2,r19,4013844 <_fwalk+0x78>
 401383c:	a83ee83a 	callr	r21
 4013840:	b8aeb03a 	or	r23,r23,r2
 4013844:	84001a04 	addi	r16,r16,104
 4013848:	94801a04 	addi	r18,r18,104
 401384c:	8cfff51e 	bne	r17,r19,4013824 <__alt_mem_epcs_flash_controller_0+0xfb012824>
 4013850:	a5000017 	ldw	r20,0(r20)
 4013854:	a03fed1e 	bne	r20,zero,401380c <__alt_mem_epcs_flash_controller_0+0xfb01280c>
 4013858:	b805883a 	mov	r2,r23
 401385c:	dfc00817 	ldw	ra,32(sp)
 4013860:	ddc00717 	ldw	r23,28(sp)
 4013864:	dd800617 	ldw	r22,24(sp)
 4013868:	dd400517 	ldw	r21,20(sp)
 401386c:	dd000417 	ldw	r20,16(sp)
 4013870:	dcc00317 	ldw	r19,12(sp)
 4013874:	dc800217 	ldw	r18,8(sp)
 4013878:	dc400117 	ldw	r17,4(sp)
 401387c:	dc000017 	ldw	r16,0(sp)
 4013880:	dec00904 	addi	sp,sp,36
 4013884:	f800283a 	ret
 4013888:	002f883a 	mov	r23,zero
 401388c:	003ff206 	br	4013858 <__alt_mem_epcs_flash_controller_0+0xfb012858>

04013890 <_fwalk_reent>:
 4013890:	defff704 	addi	sp,sp,-36
 4013894:	dd000415 	stw	r20,16(sp)
 4013898:	dfc00815 	stw	ra,32(sp)
 401389c:	ddc00715 	stw	r23,28(sp)
 40138a0:	dd800615 	stw	r22,24(sp)
 40138a4:	dd400515 	stw	r21,20(sp)
 40138a8:	dcc00315 	stw	r19,12(sp)
 40138ac:	dc800215 	stw	r18,8(sp)
 40138b0:	dc400115 	stw	r17,4(sp)
 40138b4:	dc000015 	stw	r16,0(sp)
 40138b8:	2500b804 	addi	r20,r4,736
 40138bc:	a0002326 	beq	r20,zero,401394c <_fwalk_reent+0xbc>
 40138c0:	282b883a 	mov	r21,r5
 40138c4:	2027883a 	mov	r19,r4
 40138c8:	002f883a 	mov	r23,zero
 40138cc:	05800044 	movi	r22,1
 40138d0:	04bfffc4 	movi	r18,-1
 40138d4:	a4400117 	ldw	r17,4(r20)
 40138d8:	a4000217 	ldw	r16,8(r20)
 40138dc:	8c7fffc4 	addi	r17,r17,-1
 40138e0:	88000c16 	blt	r17,zero,4013914 <_fwalk_reent+0x84>
 40138e4:	84000304 	addi	r16,r16,12
 40138e8:	8080000b 	ldhu	r2,0(r16)
 40138ec:	8c7fffc4 	addi	r17,r17,-1
 40138f0:	817ffd04 	addi	r5,r16,-12
 40138f4:	b080052e 	bgeu	r22,r2,401390c <_fwalk_reent+0x7c>
 40138f8:	8080008f 	ldh	r2,2(r16)
 40138fc:	9809883a 	mov	r4,r19
 4013900:	14800226 	beq	r2,r18,401390c <_fwalk_reent+0x7c>
 4013904:	a83ee83a 	callr	r21
 4013908:	b8aeb03a 	or	r23,r23,r2
 401390c:	84001a04 	addi	r16,r16,104
 4013910:	8cbff51e 	bne	r17,r18,40138e8 <__alt_mem_epcs_flash_controller_0+0xfb0128e8>
 4013914:	a5000017 	ldw	r20,0(r20)
 4013918:	a03fee1e 	bne	r20,zero,40138d4 <__alt_mem_epcs_flash_controller_0+0xfb0128d4>
 401391c:	b805883a 	mov	r2,r23
 4013920:	dfc00817 	ldw	ra,32(sp)
 4013924:	ddc00717 	ldw	r23,28(sp)
 4013928:	dd800617 	ldw	r22,24(sp)
 401392c:	dd400517 	ldw	r21,20(sp)
 4013930:	dd000417 	ldw	r20,16(sp)
 4013934:	dcc00317 	ldw	r19,12(sp)
 4013938:	dc800217 	ldw	r18,8(sp)
 401393c:	dc400117 	ldw	r17,4(sp)
 4013940:	dc000017 	ldw	r16,0(sp)
 4013944:	dec00904 	addi	sp,sp,36
 4013948:	f800283a 	ret
 401394c:	002f883a 	mov	r23,zero
 4013950:	003ff206 	br	401391c <__alt_mem_epcs_flash_controller_0+0xfb01291c>

04013954 <_setlocale_r>:
 4013954:	30001b26 	beq	r6,zero,40139c4 <_setlocale_r+0x70>
 4013958:	01410234 	movhi	r5,1032
 401395c:	defffe04 	addi	sp,sp,-8
 4013960:	29700404 	addi	r5,r5,-16368
 4013964:	3009883a 	mov	r4,r6
 4013968:	dc000015 	stw	r16,0(sp)
 401396c:	dfc00115 	stw	ra,4(sp)
 4013970:	3021883a 	mov	r16,r6
 4013974:	40156300 	call	4015630 <strcmp>
 4013978:	1000061e 	bne	r2,zero,4013994 <_setlocale_r+0x40>
 401397c:	00810234 	movhi	r2,1032
 4013980:	10afdd04 	addi	r2,r2,-16524
 4013984:	dfc00117 	ldw	ra,4(sp)
 4013988:	dc000017 	ldw	r16,0(sp)
 401398c:	dec00204 	addi	sp,sp,8
 4013990:	f800283a 	ret
 4013994:	01410234 	movhi	r5,1032
 4013998:	296fdd04 	addi	r5,r5,-16524
 401399c:	8009883a 	mov	r4,r16
 40139a0:	40156300 	call	4015630 <strcmp>
 40139a4:	103ff526 	beq	r2,zero,401397c <__alt_mem_epcs_flash_controller_0+0xfb01297c>
 40139a8:	01410234 	movhi	r5,1032
 40139ac:	296fe704 	addi	r5,r5,-16484
 40139b0:	8009883a 	mov	r4,r16
 40139b4:	40156300 	call	4015630 <strcmp>
 40139b8:	103ff026 	beq	r2,zero,401397c <__alt_mem_epcs_flash_controller_0+0xfb01297c>
 40139bc:	0005883a 	mov	r2,zero
 40139c0:	003ff006 	br	4013984 <__alt_mem_epcs_flash_controller_0+0xfb012984>
 40139c4:	00810234 	movhi	r2,1032
 40139c8:	10afdd04 	addi	r2,r2,-16524
 40139cc:	f800283a 	ret

040139d0 <__locale_charset>:
 40139d0:	00810234 	movhi	r2,1032
 40139d4:	10b97504 	addi	r2,r2,-6700
 40139d8:	f800283a 	ret

040139dc <__locale_mb_cur_max>:
 40139dc:	00810234 	movhi	r2,1032
 40139e0:	10be4704 	addi	r2,r2,-1764
 40139e4:	10800017 	ldw	r2,0(r2)
 40139e8:	f800283a 	ret

040139ec <__locale_msgcharset>:
 40139ec:	00810234 	movhi	r2,1032
 40139f0:	10b96d04 	addi	r2,r2,-6732
 40139f4:	f800283a 	ret

040139f8 <__locale_cjk_lang>:
 40139f8:	0005883a 	mov	r2,zero
 40139fc:	f800283a 	ret

04013a00 <_localeconv_r>:
 4013a00:	00810234 	movhi	r2,1032
 4013a04:	10b97d04 	addi	r2,r2,-6668
 4013a08:	f800283a 	ret

04013a0c <setlocale>:
 4013a0c:	00810234 	movhi	r2,1032
 4013a10:	10be4404 	addi	r2,r2,-1776
 4013a14:	280d883a 	mov	r6,r5
 4013a18:	200b883a 	mov	r5,r4
 4013a1c:	11000017 	ldw	r4,0(r2)
 4013a20:	40139541 	jmpi	4013954 <_setlocale_r>

04013a24 <localeconv>:
 4013a24:	00810234 	movhi	r2,1032
 4013a28:	10b97d04 	addi	r2,r2,-6668
 4013a2c:	f800283a 	ret

04013a30 <__smakebuf_r>:
 4013a30:	2880030b 	ldhu	r2,12(r5)
 4013a34:	10c0008c 	andi	r3,r2,2
 4013a38:	1800411e 	bne	r3,zero,4013b40 <__smakebuf_r+0x110>
 4013a3c:	deffec04 	addi	sp,sp,-80
 4013a40:	dc000f15 	stw	r16,60(sp)
 4013a44:	2821883a 	mov	r16,r5
 4013a48:	2940038f 	ldh	r5,14(r5)
 4013a4c:	dc401015 	stw	r17,64(sp)
 4013a50:	dfc01315 	stw	ra,76(sp)
 4013a54:	dcc01215 	stw	r19,72(sp)
 4013a58:	dc801115 	stw	r18,68(sp)
 4013a5c:	2023883a 	mov	r17,r4
 4013a60:	28001c16 	blt	r5,zero,4013ad4 <__smakebuf_r+0xa4>
 4013a64:	d80d883a 	mov	r6,sp
 4013a68:	401873c0 	call	401873c <_fstat_r>
 4013a6c:	10001816 	blt	r2,zero,4013ad0 <__smakebuf_r+0xa0>
 4013a70:	d8800117 	ldw	r2,4(sp)
 4013a74:	00e00014 	movui	r3,32768
 4013a78:	10bc000c 	andi	r2,r2,61440
 4013a7c:	14c80020 	cmpeqi	r19,r2,8192
 4013a80:	10c03726 	beq	r2,r3,4013b60 <__smakebuf_r+0x130>
 4013a84:	80c0030b 	ldhu	r3,12(r16)
 4013a88:	18c20014 	ori	r3,r3,2048
 4013a8c:	80c0030d 	sth	r3,12(r16)
 4013a90:	00c80004 	movi	r3,8192
 4013a94:	10c0521e 	bne	r2,r3,4013be0 <__smakebuf_r+0x1b0>
 4013a98:	8140038f 	ldh	r5,14(r16)
 4013a9c:	8809883a 	mov	r4,r17
 4013aa0:	40187980 	call	4018798 <_isatty_r>
 4013aa4:	10004c26 	beq	r2,zero,4013bd8 <__smakebuf_r+0x1a8>
 4013aa8:	8080030b 	ldhu	r2,12(r16)
 4013aac:	80c010c4 	addi	r3,r16,67
 4013ab0:	80c00015 	stw	r3,0(r16)
 4013ab4:	10800054 	ori	r2,r2,1
 4013ab8:	8080030d 	sth	r2,12(r16)
 4013abc:	00800044 	movi	r2,1
 4013ac0:	80c00415 	stw	r3,16(r16)
 4013ac4:	80800515 	stw	r2,20(r16)
 4013ac8:	04810004 	movi	r18,1024
 4013acc:	00000706 	br	4013aec <__smakebuf_r+0xbc>
 4013ad0:	8080030b 	ldhu	r2,12(r16)
 4013ad4:	10c0200c 	andi	r3,r2,128
 4013ad8:	18001f1e 	bne	r3,zero,4013b58 <__smakebuf_r+0x128>
 4013adc:	04810004 	movi	r18,1024
 4013ae0:	10820014 	ori	r2,r2,2048
 4013ae4:	8080030d 	sth	r2,12(r16)
 4013ae8:	0027883a 	mov	r19,zero
 4013aec:	900b883a 	mov	r5,r18
 4013af0:	8809883a 	mov	r4,r17
 4013af4:	400bad00 	call	400bad0 <_malloc_r>
 4013af8:	10002c26 	beq	r2,zero,4013bac <__smakebuf_r+0x17c>
 4013afc:	80c0030b 	ldhu	r3,12(r16)
 4013b00:	01010074 	movhi	r4,1025
 4013b04:	210ad104 	addi	r4,r4,11076
 4013b08:	89000f15 	stw	r4,60(r17)
 4013b0c:	18c02014 	ori	r3,r3,128
 4013b10:	80c0030d 	sth	r3,12(r16)
 4013b14:	80800015 	stw	r2,0(r16)
 4013b18:	80800415 	stw	r2,16(r16)
 4013b1c:	84800515 	stw	r18,20(r16)
 4013b20:	98001a1e 	bne	r19,zero,4013b8c <__smakebuf_r+0x15c>
 4013b24:	dfc01317 	ldw	ra,76(sp)
 4013b28:	dcc01217 	ldw	r19,72(sp)
 4013b2c:	dc801117 	ldw	r18,68(sp)
 4013b30:	dc401017 	ldw	r17,64(sp)
 4013b34:	dc000f17 	ldw	r16,60(sp)
 4013b38:	dec01404 	addi	sp,sp,80
 4013b3c:	f800283a 	ret
 4013b40:	288010c4 	addi	r2,r5,67
 4013b44:	28800015 	stw	r2,0(r5)
 4013b48:	28800415 	stw	r2,16(r5)
 4013b4c:	00800044 	movi	r2,1
 4013b50:	28800515 	stw	r2,20(r5)
 4013b54:	f800283a 	ret
 4013b58:	04801004 	movi	r18,64
 4013b5c:	003fe006 	br	4013ae0 <__alt_mem_epcs_flash_controller_0+0xfb012ae0>
 4013b60:	81000a17 	ldw	r4,40(r16)
 4013b64:	00c10074 	movhi	r3,1025
 4013b68:	18d57304 	addi	r3,r3,21964
 4013b6c:	20ffc51e 	bne	r4,r3,4013a84 <__alt_mem_epcs_flash_controller_0+0xfb012a84>
 4013b70:	8080030b 	ldhu	r2,12(r16)
 4013b74:	04810004 	movi	r18,1024
 4013b78:	84801315 	stw	r18,76(r16)
 4013b7c:	1484b03a 	or	r2,r2,r18
 4013b80:	8080030d 	sth	r2,12(r16)
 4013b84:	0027883a 	mov	r19,zero
 4013b88:	003fd806 	br	4013aec <__alt_mem_epcs_flash_controller_0+0xfb012aec>
 4013b8c:	8140038f 	ldh	r5,14(r16)
 4013b90:	8809883a 	mov	r4,r17
 4013b94:	40187980 	call	4018798 <_isatty_r>
 4013b98:	103fe226 	beq	r2,zero,4013b24 <__alt_mem_epcs_flash_controller_0+0xfb012b24>
 4013b9c:	8080030b 	ldhu	r2,12(r16)
 4013ba0:	10800054 	ori	r2,r2,1
 4013ba4:	8080030d 	sth	r2,12(r16)
 4013ba8:	003fde06 	br	4013b24 <__alt_mem_epcs_flash_controller_0+0xfb012b24>
 4013bac:	8080030b 	ldhu	r2,12(r16)
 4013bb0:	10c0800c 	andi	r3,r2,512
 4013bb4:	183fdb1e 	bne	r3,zero,4013b24 <__alt_mem_epcs_flash_controller_0+0xfb012b24>
 4013bb8:	10800094 	ori	r2,r2,2
 4013bbc:	80c010c4 	addi	r3,r16,67
 4013bc0:	8080030d 	sth	r2,12(r16)
 4013bc4:	00800044 	movi	r2,1
 4013bc8:	80c00015 	stw	r3,0(r16)
 4013bcc:	80c00415 	stw	r3,16(r16)
 4013bd0:	80800515 	stw	r2,20(r16)
 4013bd4:	003fd306 	br	4013b24 <__alt_mem_epcs_flash_controller_0+0xfb012b24>
 4013bd8:	04810004 	movi	r18,1024
 4013bdc:	003fc306 	br	4013aec <__alt_mem_epcs_flash_controller_0+0xfb012aec>
 4013be0:	0027883a 	mov	r19,zero
 4013be4:	04810004 	movi	r18,1024
 4013be8:	003fc006 	br	4013aec <__alt_mem_epcs_flash_controller_0+0xfb012aec>

04013bec <memchr>:
 4013bec:	208000cc 	andi	r2,r4,3
 4013bf0:	280f883a 	mov	r7,r5
 4013bf4:	10003426 	beq	r2,zero,4013cc8 <memchr+0xdc>
 4013bf8:	30bfffc4 	addi	r2,r6,-1
 4013bfc:	30001a26 	beq	r6,zero,4013c68 <memchr+0x7c>
 4013c00:	20c00003 	ldbu	r3,0(r4)
 4013c04:	29803fcc 	andi	r6,r5,255
 4013c08:	30c0051e 	bne	r6,r3,4013c20 <memchr+0x34>
 4013c0c:	00001806 	br	4013c70 <memchr+0x84>
 4013c10:	10001526 	beq	r2,zero,4013c68 <memchr+0x7c>
 4013c14:	20c00003 	ldbu	r3,0(r4)
 4013c18:	10bfffc4 	addi	r2,r2,-1
 4013c1c:	30c01426 	beq	r6,r3,4013c70 <memchr+0x84>
 4013c20:	21000044 	addi	r4,r4,1
 4013c24:	20c000cc 	andi	r3,r4,3
 4013c28:	183ff91e 	bne	r3,zero,4013c10 <__alt_mem_epcs_flash_controller_0+0xfb012c10>
 4013c2c:	020000c4 	movi	r8,3
 4013c30:	40801136 	bltu	r8,r2,4013c78 <memchr+0x8c>
 4013c34:	10000c26 	beq	r2,zero,4013c68 <memchr+0x7c>
 4013c38:	20c00003 	ldbu	r3,0(r4)
 4013c3c:	29403fcc 	andi	r5,r5,255
 4013c40:	28c00b26 	beq	r5,r3,4013c70 <memchr+0x84>
 4013c44:	20c00044 	addi	r3,r4,1
 4013c48:	39803fcc 	andi	r6,r7,255
 4013c4c:	2089883a 	add	r4,r4,r2
 4013c50:	00000306 	br	4013c60 <memchr+0x74>
 4013c54:	18c00044 	addi	r3,r3,1
 4013c58:	197fffc3 	ldbu	r5,-1(r3)
 4013c5c:	31400526 	beq	r6,r5,4013c74 <memchr+0x88>
 4013c60:	1805883a 	mov	r2,r3
 4013c64:	20fffb1e 	bne	r4,r3,4013c54 <__alt_mem_epcs_flash_controller_0+0xfb012c54>
 4013c68:	0005883a 	mov	r2,zero
 4013c6c:	f800283a 	ret
 4013c70:	2005883a 	mov	r2,r4
 4013c74:	f800283a 	ret
 4013c78:	28c03fcc 	andi	r3,r5,255
 4013c7c:	1812923a 	slli	r9,r3,8
 4013c80:	02ffbff4 	movhi	r11,65279
 4013c84:	02a02074 	movhi	r10,32897
 4013c88:	48d2b03a 	or	r9,r9,r3
 4013c8c:	4806943a 	slli	r3,r9,16
 4013c90:	5affbfc4 	addi	r11,r11,-257
 4013c94:	52a02004 	addi	r10,r10,-32640
 4013c98:	48d2b03a 	or	r9,r9,r3
 4013c9c:	20c00017 	ldw	r3,0(r4)
 4013ca0:	48c6f03a 	xor	r3,r9,r3
 4013ca4:	1acd883a 	add	r6,r3,r11
 4013ca8:	00c6303a 	nor	r3,zero,r3
 4013cac:	30c6703a 	and	r3,r6,r3
 4013cb0:	1a86703a 	and	r3,r3,r10
 4013cb4:	183fe01e 	bne	r3,zero,4013c38 <__alt_mem_epcs_flash_controller_0+0xfb012c38>
 4013cb8:	10bfff04 	addi	r2,r2,-4
 4013cbc:	21000104 	addi	r4,r4,4
 4013cc0:	40bff636 	bltu	r8,r2,4013c9c <__alt_mem_epcs_flash_controller_0+0xfb012c9c>
 4013cc4:	003fdb06 	br	4013c34 <__alt_mem_epcs_flash_controller_0+0xfb012c34>
 4013cc8:	3005883a 	mov	r2,r6
 4013ccc:	003fd706 	br	4013c2c <__alt_mem_epcs_flash_controller_0+0xfb012c2c>

04013cd0 <memmove>:
 4013cd0:	2005883a 	mov	r2,r4
 4013cd4:	29000b2e 	bgeu	r5,r4,4013d04 <memmove+0x34>
 4013cd8:	298f883a 	add	r7,r5,r6
 4013cdc:	21c0092e 	bgeu	r4,r7,4013d04 <memmove+0x34>
 4013ce0:	2187883a 	add	r3,r4,r6
 4013ce4:	198bc83a 	sub	r5,r3,r6
 4013ce8:	30004826 	beq	r6,zero,4013e0c <memmove+0x13c>
 4013cec:	39ffffc4 	addi	r7,r7,-1
 4013cf0:	39000003 	ldbu	r4,0(r7)
 4013cf4:	18ffffc4 	addi	r3,r3,-1
 4013cf8:	19000005 	stb	r4,0(r3)
 4013cfc:	28fffb1e 	bne	r5,r3,4013cec <__alt_mem_epcs_flash_controller_0+0xfb012cec>
 4013d00:	f800283a 	ret
 4013d04:	00c003c4 	movi	r3,15
 4013d08:	1980412e 	bgeu	r3,r6,4013e10 <memmove+0x140>
 4013d0c:	2886b03a 	or	r3,r5,r2
 4013d10:	18c000cc 	andi	r3,r3,3
 4013d14:	1800401e 	bne	r3,zero,4013e18 <memmove+0x148>
 4013d18:	33fffc04 	addi	r15,r6,-16
 4013d1c:	781ed13a 	srli	r15,r15,4
 4013d20:	28c00104 	addi	r3,r5,4
 4013d24:	13400104 	addi	r13,r2,4
 4013d28:	781c913a 	slli	r14,r15,4
 4013d2c:	2b000204 	addi	r12,r5,8
 4013d30:	12c00204 	addi	r11,r2,8
 4013d34:	73800504 	addi	r14,r14,20
 4013d38:	2a800304 	addi	r10,r5,12
 4013d3c:	12400304 	addi	r9,r2,12
 4013d40:	2b9d883a 	add	r14,r5,r14
 4013d44:	2811883a 	mov	r8,r5
 4013d48:	100f883a 	mov	r7,r2
 4013d4c:	41000017 	ldw	r4,0(r8)
 4013d50:	39c00404 	addi	r7,r7,16
 4013d54:	18c00404 	addi	r3,r3,16
 4013d58:	393ffc15 	stw	r4,-16(r7)
 4013d5c:	193ffc17 	ldw	r4,-16(r3)
 4013d60:	6b400404 	addi	r13,r13,16
 4013d64:	5ac00404 	addi	r11,r11,16
 4013d68:	693ffc15 	stw	r4,-16(r13)
 4013d6c:	61000017 	ldw	r4,0(r12)
 4013d70:	4a400404 	addi	r9,r9,16
 4013d74:	42000404 	addi	r8,r8,16
 4013d78:	593ffc15 	stw	r4,-16(r11)
 4013d7c:	51000017 	ldw	r4,0(r10)
 4013d80:	63000404 	addi	r12,r12,16
 4013d84:	52800404 	addi	r10,r10,16
 4013d88:	493ffc15 	stw	r4,-16(r9)
 4013d8c:	1bbfef1e 	bne	r3,r14,4013d4c <__alt_mem_epcs_flash_controller_0+0xfb012d4c>
 4013d90:	79000044 	addi	r4,r15,1
 4013d94:	2008913a 	slli	r4,r4,4
 4013d98:	328003cc 	andi	r10,r6,15
 4013d9c:	02c000c4 	movi	r11,3
 4013da0:	1107883a 	add	r3,r2,r4
 4013da4:	290b883a 	add	r5,r5,r4
 4013da8:	5a801e2e 	bgeu	r11,r10,4013e24 <memmove+0x154>
 4013dac:	1813883a 	mov	r9,r3
 4013db0:	2811883a 	mov	r8,r5
 4013db4:	500f883a 	mov	r7,r10
 4013db8:	41000017 	ldw	r4,0(r8)
 4013dbc:	4a400104 	addi	r9,r9,4
 4013dc0:	39ffff04 	addi	r7,r7,-4
 4013dc4:	493fff15 	stw	r4,-4(r9)
 4013dc8:	42000104 	addi	r8,r8,4
 4013dcc:	59fffa36 	bltu	r11,r7,4013db8 <__alt_mem_epcs_flash_controller_0+0xfb012db8>
 4013dd0:	513fff04 	addi	r4,r10,-4
 4013dd4:	2008d0ba 	srli	r4,r4,2
 4013dd8:	318000cc 	andi	r6,r6,3
 4013ddc:	21000044 	addi	r4,r4,1
 4013de0:	2109883a 	add	r4,r4,r4
 4013de4:	2109883a 	add	r4,r4,r4
 4013de8:	1907883a 	add	r3,r3,r4
 4013dec:	290b883a 	add	r5,r5,r4
 4013df0:	30000b26 	beq	r6,zero,4013e20 <memmove+0x150>
 4013df4:	198d883a 	add	r6,r3,r6
 4013df8:	29c00003 	ldbu	r7,0(r5)
 4013dfc:	18c00044 	addi	r3,r3,1
 4013e00:	29400044 	addi	r5,r5,1
 4013e04:	19ffffc5 	stb	r7,-1(r3)
 4013e08:	19bffb1e 	bne	r3,r6,4013df8 <__alt_mem_epcs_flash_controller_0+0xfb012df8>
 4013e0c:	f800283a 	ret
 4013e10:	1007883a 	mov	r3,r2
 4013e14:	003ff606 	br	4013df0 <__alt_mem_epcs_flash_controller_0+0xfb012df0>
 4013e18:	1007883a 	mov	r3,r2
 4013e1c:	003ff506 	br	4013df4 <__alt_mem_epcs_flash_controller_0+0xfb012df4>
 4013e20:	f800283a 	ret
 4013e24:	500d883a 	mov	r6,r10
 4013e28:	003ff106 	br	4013df0 <__alt_mem_epcs_flash_controller_0+0xfb012df0>

04013e2c <_Balloc>:
 4013e2c:	20801317 	ldw	r2,76(r4)
 4013e30:	defffc04 	addi	sp,sp,-16
 4013e34:	dc400115 	stw	r17,4(sp)
 4013e38:	dc000015 	stw	r16,0(sp)
 4013e3c:	dfc00315 	stw	ra,12(sp)
 4013e40:	dc800215 	stw	r18,8(sp)
 4013e44:	2023883a 	mov	r17,r4
 4013e48:	2821883a 	mov	r16,r5
 4013e4c:	10000f26 	beq	r2,zero,4013e8c <_Balloc+0x60>
 4013e50:	8407883a 	add	r3,r16,r16
 4013e54:	18c7883a 	add	r3,r3,r3
 4013e58:	10c7883a 	add	r3,r2,r3
 4013e5c:	18800017 	ldw	r2,0(r3)
 4013e60:	10001126 	beq	r2,zero,4013ea8 <_Balloc+0x7c>
 4013e64:	11000017 	ldw	r4,0(r2)
 4013e68:	19000015 	stw	r4,0(r3)
 4013e6c:	10000415 	stw	zero,16(r2)
 4013e70:	10000315 	stw	zero,12(r2)
 4013e74:	dfc00317 	ldw	ra,12(sp)
 4013e78:	dc800217 	ldw	r18,8(sp)
 4013e7c:	dc400117 	ldw	r17,4(sp)
 4013e80:	dc000017 	ldw	r16,0(sp)
 4013e84:	dec00404 	addi	sp,sp,16
 4013e88:	f800283a 	ret
 4013e8c:	01800844 	movi	r6,33
 4013e90:	01400104 	movi	r5,4
 4013e94:	401836c0 	call	401836c <_calloc_r>
 4013e98:	88801315 	stw	r2,76(r17)
 4013e9c:	103fec1e 	bne	r2,zero,4013e50 <__alt_mem_epcs_flash_controller_0+0xfb012e50>
 4013ea0:	0005883a 	mov	r2,zero
 4013ea4:	003ff306 	br	4013e74 <__alt_mem_epcs_flash_controller_0+0xfb012e74>
 4013ea8:	01400044 	movi	r5,1
 4013eac:	2c24983a 	sll	r18,r5,r16
 4013eb0:	8809883a 	mov	r4,r17
 4013eb4:	91800144 	addi	r6,r18,5
 4013eb8:	318d883a 	add	r6,r6,r6
 4013ebc:	318d883a 	add	r6,r6,r6
 4013ec0:	401836c0 	call	401836c <_calloc_r>
 4013ec4:	103ff626 	beq	r2,zero,4013ea0 <__alt_mem_epcs_flash_controller_0+0xfb012ea0>
 4013ec8:	14000115 	stw	r16,4(r2)
 4013ecc:	14800215 	stw	r18,8(r2)
 4013ed0:	003fe606 	br	4013e6c <__alt_mem_epcs_flash_controller_0+0xfb012e6c>

04013ed4 <_Bfree>:
 4013ed4:	28000826 	beq	r5,zero,4013ef8 <_Bfree+0x24>
 4013ed8:	28c00117 	ldw	r3,4(r5)
 4013edc:	20801317 	ldw	r2,76(r4)
 4013ee0:	18c7883a 	add	r3,r3,r3
 4013ee4:	18c7883a 	add	r3,r3,r3
 4013ee8:	10c5883a 	add	r2,r2,r3
 4013eec:	10c00017 	ldw	r3,0(r2)
 4013ef0:	28c00015 	stw	r3,0(r5)
 4013ef4:	11400015 	stw	r5,0(r2)
 4013ef8:	f800283a 	ret

04013efc <__multadd>:
 4013efc:	defffa04 	addi	sp,sp,-24
 4013f00:	dc800315 	stw	r18,12(sp)
 4013f04:	dc400215 	stw	r17,8(sp)
 4013f08:	dc000115 	stw	r16,4(sp)
 4013f0c:	2823883a 	mov	r17,r5
 4013f10:	2c000417 	ldw	r16,16(r5)
 4013f14:	dfc00515 	stw	ra,20(sp)
 4013f18:	dcc00415 	stw	r19,16(sp)
 4013f1c:	2025883a 	mov	r18,r4
 4013f20:	29400504 	addi	r5,r5,20
 4013f24:	0011883a 	mov	r8,zero
 4013f28:	28c00017 	ldw	r3,0(r5)
 4013f2c:	29400104 	addi	r5,r5,4
 4013f30:	42000044 	addi	r8,r8,1
 4013f34:	18bfffcc 	andi	r2,r3,65535
 4013f38:	1185383a 	mul	r2,r2,r6
 4013f3c:	1806d43a 	srli	r3,r3,16
 4013f40:	11cf883a 	add	r7,r2,r7
 4013f44:	3808d43a 	srli	r4,r7,16
 4013f48:	1987383a 	mul	r3,r3,r6
 4013f4c:	38bfffcc 	andi	r2,r7,65535
 4013f50:	1907883a 	add	r3,r3,r4
 4013f54:	1808943a 	slli	r4,r3,16
 4013f58:	180ed43a 	srli	r7,r3,16
 4013f5c:	2085883a 	add	r2,r4,r2
 4013f60:	28bfff15 	stw	r2,-4(r5)
 4013f64:	443ff016 	blt	r8,r16,4013f28 <__alt_mem_epcs_flash_controller_0+0xfb012f28>
 4013f68:	38000926 	beq	r7,zero,4013f90 <__multadd+0x94>
 4013f6c:	88800217 	ldw	r2,8(r17)
 4013f70:	80800f0e 	bge	r16,r2,4013fb0 <__multadd+0xb4>
 4013f74:	80800144 	addi	r2,r16,5
 4013f78:	1085883a 	add	r2,r2,r2
 4013f7c:	1085883a 	add	r2,r2,r2
 4013f80:	8885883a 	add	r2,r17,r2
 4013f84:	11c00015 	stw	r7,0(r2)
 4013f88:	84000044 	addi	r16,r16,1
 4013f8c:	8c000415 	stw	r16,16(r17)
 4013f90:	8805883a 	mov	r2,r17
 4013f94:	dfc00517 	ldw	ra,20(sp)
 4013f98:	dcc00417 	ldw	r19,16(sp)
 4013f9c:	dc800317 	ldw	r18,12(sp)
 4013fa0:	dc400217 	ldw	r17,8(sp)
 4013fa4:	dc000117 	ldw	r16,4(sp)
 4013fa8:	dec00604 	addi	sp,sp,24
 4013fac:	f800283a 	ret
 4013fb0:	89400117 	ldw	r5,4(r17)
 4013fb4:	9009883a 	mov	r4,r18
 4013fb8:	d9c00015 	stw	r7,0(sp)
 4013fbc:	29400044 	addi	r5,r5,1
 4013fc0:	4013e2c0 	call	4013e2c <_Balloc>
 4013fc4:	89800417 	ldw	r6,16(r17)
 4013fc8:	89400304 	addi	r5,r17,12
 4013fcc:	11000304 	addi	r4,r2,12
 4013fd0:	31800084 	addi	r6,r6,2
 4013fd4:	318d883a 	add	r6,r6,r6
 4013fd8:	318d883a 	add	r6,r6,r6
 4013fdc:	1027883a 	mov	r19,r2
 4013fe0:	400c2dc0 	call	400c2dc <memcpy>
 4013fe4:	d9c00017 	ldw	r7,0(sp)
 4013fe8:	88000a26 	beq	r17,zero,4014014 <__multadd+0x118>
 4013fec:	88c00117 	ldw	r3,4(r17)
 4013ff0:	90801317 	ldw	r2,76(r18)
 4013ff4:	18c7883a 	add	r3,r3,r3
 4013ff8:	18c7883a 	add	r3,r3,r3
 4013ffc:	10c5883a 	add	r2,r2,r3
 4014000:	10c00017 	ldw	r3,0(r2)
 4014004:	88c00015 	stw	r3,0(r17)
 4014008:	14400015 	stw	r17,0(r2)
 401400c:	9823883a 	mov	r17,r19
 4014010:	003fd806 	br	4013f74 <__alt_mem_epcs_flash_controller_0+0xfb012f74>
 4014014:	9823883a 	mov	r17,r19
 4014018:	003fd606 	br	4013f74 <__alt_mem_epcs_flash_controller_0+0xfb012f74>

0401401c <__s2b>:
 401401c:	defff904 	addi	sp,sp,-28
 4014020:	dc400115 	stw	r17,4(sp)
 4014024:	dc000015 	stw	r16,0(sp)
 4014028:	2023883a 	mov	r17,r4
 401402c:	2821883a 	mov	r16,r5
 4014030:	39000204 	addi	r4,r7,8
 4014034:	01400244 	movi	r5,9
 4014038:	dcc00315 	stw	r19,12(sp)
 401403c:	dc800215 	stw	r18,8(sp)
 4014040:	dfc00615 	stw	ra,24(sp)
 4014044:	dd400515 	stw	r21,20(sp)
 4014048:	dd000415 	stw	r20,16(sp)
 401404c:	3825883a 	mov	r18,r7
 4014050:	3027883a 	mov	r19,r6
 4014054:	40094880 	call	4009488 <__divsi3>
 4014058:	00c00044 	movi	r3,1
 401405c:	000b883a 	mov	r5,zero
 4014060:	1880030e 	bge	r3,r2,4014070 <__s2b+0x54>
 4014064:	18c7883a 	add	r3,r3,r3
 4014068:	29400044 	addi	r5,r5,1
 401406c:	18bffd16 	blt	r3,r2,4014064 <__alt_mem_epcs_flash_controller_0+0xfb013064>
 4014070:	8809883a 	mov	r4,r17
 4014074:	4013e2c0 	call	4013e2c <_Balloc>
 4014078:	d8c00717 	ldw	r3,28(sp)
 401407c:	10c00515 	stw	r3,20(r2)
 4014080:	00c00044 	movi	r3,1
 4014084:	10c00415 	stw	r3,16(r2)
 4014088:	00c00244 	movi	r3,9
 401408c:	1cc0210e 	bge	r3,r19,4014114 <__s2b+0xf8>
 4014090:	80eb883a 	add	r21,r16,r3
 4014094:	a829883a 	mov	r20,r21
 4014098:	84e1883a 	add	r16,r16,r19
 401409c:	a1c00007 	ldb	r7,0(r20)
 40140a0:	01800284 	movi	r6,10
 40140a4:	a5000044 	addi	r20,r20,1
 40140a8:	100b883a 	mov	r5,r2
 40140ac:	39fff404 	addi	r7,r7,-48
 40140b0:	8809883a 	mov	r4,r17
 40140b4:	4013efc0 	call	4013efc <__multadd>
 40140b8:	a43ff81e 	bne	r20,r16,401409c <__alt_mem_epcs_flash_controller_0+0xfb01309c>
 40140bc:	ace1883a 	add	r16,r21,r19
 40140c0:	843ffe04 	addi	r16,r16,-8
 40140c4:	9c800a0e 	bge	r19,r18,40140f0 <__s2b+0xd4>
 40140c8:	94e5c83a 	sub	r18,r18,r19
 40140cc:	84a5883a 	add	r18,r16,r18
 40140d0:	81c00007 	ldb	r7,0(r16)
 40140d4:	01800284 	movi	r6,10
 40140d8:	84000044 	addi	r16,r16,1
 40140dc:	100b883a 	mov	r5,r2
 40140e0:	39fff404 	addi	r7,r7,-48
 40140e4:	8809883a 	mov	r4,r17
 40140e8:	4013efc0 	call	4013efc <__multadd>
 40140ec:	84bff81e 	bne	r16,r18,40140d0 <__alt_mem_epcs_flash_controller_0+0xfb0130d0>
 40140f0:	dfc00617 	ldw	ra,24(sp)
 40140f4:	dd400517 	ldw	r21,20(sp)
 40140f8:	dd000417 	ldw	r20,16(sp)
 40140fc:	dcc00317 	ldw	r19,12(sp)
 4014100:	dc800217 	ldw	r18,8(sp)
 4014104:	dc400117 	ldw	r17,4(sp)
 4014108:	dc000017 	ldw	r16,0(sp)
 401410c:	dec00704 	addi	sp,sp,28
 4014110:	f800283a 	ret
 4014114:	84000284 	addi	r16,r16,10
 4014118:	1827883a 	mov	r19,r3
 401411c:	003fe906 	br	40140c4 <__alt_mem_epcs_flash_controller_0+0xfb0130c4>

04014120 <__hi0bits>:
 4014120:	20bfffec 	andhi	r2,r4,65535
 4014124:	1000141e 	bne	r2,zero,4014178 <__hi0bits+0x58>
 4014128:	2008943a 	slli	r4,r4,16
 401412c:	00800404 	movi	r2,16
 4014130:	20ffc02c 	andhi	r3,r4,65280
 4014134:	1800021e 	bne	r3,zero,4014140 <__hi0bits+0x20>
 4014138:	2008923a 	slli	r4,r4,8
 401413c:	10800204 	addi	r2,r2,8
 4014140:	20fc002c 	andhi	r3,r4,61440
 4014144:	1800021e 	bne	r3,zero,4014150 <__hi0bits+0x30>
 4014148:	2008913a 	slli	r4,r4,4
 401414c:	10800104 	addi	r2,r2,4
 4014150:	20f0002c 	andhi	r3,r4,49152
 4014154:	1800031e 	bne	r3,zero,4014164 <__hi0bits+0x44>
 4014158:	2109883a 	add	r4,r4,r4
 401415c:	10800084 	addi	r2,r2,2
 4014160:	2109883a 	add	r4,r4,r4
 4014164:	20000316 	blt	r4,zero,4014174 <__hi0bits+0x54>
 4014168:	2110002c 	andhi	r4,r4,16384
 401416c:	2000041e 	bne	r4,zero,4014180 <__hi0bits+0x60>
 4014170:	00800804 	movi	r2,32
 4014174:	f800283a 	ret
 4014178:	0005883a 	mov	r2,zero
 401417c:	003fec06 	br	4014130 <__alt_mem_epcs_flash_controller_0+0xfb013130>
 4014180:	10800044 	addi	r2,r2,1
 4014184:	f800283a 	ret

04014188 <__lo0bits>:
 4014188:	20c00017 	ldw	r3,0(r4)
 401418c:	188001cc 	andi	r2,r3,7
 4014190:	10000826 	beq	r2,zero,40141b4 <__lo0bits+0x2c>
 4014194:	1880004c 	andi	r2,r3,1
 4014198:	1000211e 	bne	r2,zero,4014220 <__lo0bits+0x98>
 401419c:	1880008c 	andi	r2,r3,2
 40141a0:	1000211e 	bne	r2,zero,4014228 <__lo0bits+0xa0>
 40141a4:	1806d0ba 	srli	r3,r3,2
 40141a8:	00800084 	movi	r2,2
 40141ac:	20c00015 	stw	r3,0(r4)
 40141b0:	f800283a 	ret
 40141b4:	18bfffcc 	andi	r2,r3,65535
 40141b8:	10001326 	beq	r2,zero,4014208 <__lo0bits+0x80>
 40141bc:	0005883a 	mov	r2,zero
 40141c0:	19403fcc 	andi	r5,r3,255
 40141c4:	2800021e 	bne	r5,zero,40141d0 <__lo0bits+0x48>
 40141c8:	1806d23a 	srli	r3,r3,8
 40141cc:	10800204 	addi	r2,r2,8
 40141d0:	194003cc 	andi	r5,r3,15
 40141d4:	2800021e 	bne	r5,zero,40141e0 <__lo0bits+0x58>
 40141d8:	1806d13a 	srli	r3,r3,4
 40141dc:	10800104 	addi	r2,r2,4
 40141e0:	194000cc 	andi	r5,r3,3
 40141e4:	2800021e 	bne	r5,zero,40141f0 <__lo0bits+0x68>
 40141e8:	1806d0ba 	srli	r3,r3,2
 40141ec:	10800084 	addi	r2,r2,2
 40141f0:	1940004c 	andi	r5,r3,1
 40141f4:	2800081e 	bne	r5,zero,4014218 <__lo0bits+0x90>
 40141f8:	1806d07a 	srli	r3,r3,1
 40141fc:	1800051e 	bne	r3,zero,4014214 <__lo0bits+0x8c>
 4014200:	00800804 	movi	r2,32
 4014204:	f800283a 	ret
 4014208:	1806d43a 	srli	r3,r3,16
 401420c:	00800404 	movi	r2,16
 4014210:	003feb06 	br	40141c0 <__alt_mem_epcs_flash_controller_0+0xfb0131c0>
 4014214:	10800044 	addi	r2,r2,1
 4014218:	20c00015 	stw	r3,0(r4)
 401421c:	f800283a 	ret
 4014220:	0005883a 	mov	r2,zero
 4014224:	f800283a 	ret
 4014228:	1806d07a 	srli	r3,r3,1
 401422c:	00800044 	movi	r2,1
 4014230:	20c00015 	stw	r3,0(r4)
 4014234:	f800283a 	ret

04014238 <__i2b>:
 4014238:	defffd04 	addi	sp,sp,-12
 401423c:	dc000015 	stw	r16,0(sp)
 4014240:	04000044 	movi	r16,1
 4014244:	dc400115 	stw	r17,4(sp)
 4014248:	2823883a 	mov	r17,r5
 401424c:	800b883a 	mov	r5,r16
 4014250:	dfc00215 	stw	ra,8(sp)
 4014254:	4013e2c0 	call	4013e2c <_Balloc>
 4014258:	14400515 	stw	r17,20(r2)
 401425c:	14000415 	stw	r16,16(r2)
 4014260:	dfc00217 	ldw	ra,8(sp)
 4014264:	dc400117 	ldw	r17,4(sp)
 4014268:	dc000017 	ldw	r16,0(sp)
 401426c:	dec00304 	addi	sp,sp,12
 4014270:	f800283a 	ret

04014274 <__multiply>:
 4014274:	defffa04 	addi	sp,sp,-24
 4014278:	dcc00315 	stw	r19,12(sp)
 401427c:	dc800215 	stw	r18,8(sp)
 4014280:	34c00417 	ldw	r19,16(r6)
 4014284:	2c800417 	ldw	r18,16(r5)
 4014288:	dd000415 	stw	r20,16(sp)
 401428c:	dc400115 	stw	r17,4(sp)
 4014290:	dfc00515 	stw	ra,20(sp)
 4014294:	dc000015 	stw	r16,0(sp)
 4014298:	2829883a 	mov	r20,r5
 401429c:	3023883a 	mov	r17,r6
 40142a0:	94c0050e 	bge	r18,r19,40142b8 <__multiply+0x44>
 40142a4:	9007883a 	mov	r3,r18
 40142a8:	3029883a 	mov	r20,r6
 40142ac:	9825883a 	mov	r18,r19
 40142b0:	2823883a 	mov	r17,r5
 40142b4:	1827883a 	mov	r19,r3
 40142b8:	a0800217 	ldw	r2,8(r20)
 40142bc:	94e1883a 	add	r16,r18,r19
 40142c0:	a1400117 	ldw	r5,4(r20)
 40142c4:	1400010e 	bge	r2,r16,40142cc <__multiply+0x58>
 40142c8:	29400044 	addi	r5,r5,1
 40142cc:	4013e2c0 	call	4013e2c <_Balloc>
 40142d0:	8415883a 	add	r10,r16,r16
 40142d4:	12c00504 	addi	r11,r2,20
 40142d8:	5295883a 	add	r10,r10,r10
 40142dc:	5a95883a 	add	r10,r11,r10
 40142e0:	5807883a 	mov	r3,r11
 40142e4:	5a80032e 	bgeu	r11,r10,40142f4 <__multiply+0x80>
 40142e8:	18000015 	stw	zero,0(r3)
 40142ec:	18c00104 	addi	r3,r3,4
 40142f0:	1abffd36 	bltu	r3,r10,40142e8 <__alt_mem_epcs_flash_controller_0+0xfb0132e8>
 40142f4:	9ce7883a 	add	r19,r19,r19
 40142f8:	94a5883a 	add	r18,r18,r18
 40142fc:	89800504 	addi	r6,r17,20
 4014300:	9ce7883a 	add	r19,r19,r19
 4014304:	a3400504 	addi	r13,r20,20
 4014308:	94a5883a 	add	r18,r18,r18
 401430c:	34d9883a 	add	r12,r6,r19
 4014310:	6c93883a 	add	r9,r13,r18
 4014314:	3300422e 	bgeu	r6,r12,4014420 <__multiply+0x1ac>
 4014318:	37c00017 	ldw	ra,0(r6)
 401431c:	fbffffcc 	andi	r15,ra,65535
 4014320:	78001b26 	beq	r15,zero,4014390 <__multiply+0x11c>
 4014324:	5811883a 	mov	r8,r11
 4014328:	681d883a 	mov	r14,r13
 401432c:	000f883a 	mov	r7,zero
 4014330:	71000017 	ldw	r4,0(r14)
 4014334:	40c00017 	ldw	r3,0(r8)
 4014338:	73800104 	addi	r14,r14,4
 401433c:	217fffcc 	andi	r5,r4,65535
 4014340:	2bcb383a 	mul	r5,r5,r15
 4014344:	2008d43a 	srli	r4,r4,16
 4014348:	1c7fffcc 	andi	r17,r3,65535
 401434c:	2c4b883a 	add	r5,r5,r17
 4014350:	29cb883a 	add	r5,r5,r7
 4014354:	23c9383a 	mul	r4,r4,r15
 4014358:	1806d43a 	srli	r3,r3,16
 401435c:	280ed43a 	srli	r7,r5,16
 4014360:	297fffcc 	andi	r5,r5,65535
 4014364:	20c7883a 	add	r3,r4,r3
 4014368:	19c7883a 	add	r3,r3,r7
 401436c:	1808943a 	slli	r4,r3,16
 4014370:	4023883a 	mov	r17,r8
 4014374:	180ed43a 	srli	r7,r3,16
 4014378:	214ab03a 	or	r5,r4,r5
 401437c:	41400015 	stw	r5,0(r8)
 4014380:	42000104 	addi	r8,r8,4
 4014384:	727fea36 	bltu	r14,r9,4014330 <__alt_mem_epcs_flash_controller_0+0xfb013330>
 4014388:	89c00115 	stw	r7,4(r17)
 401438c:	37c00017 	ldw	ra,0(r6)
 4014390:	f83ed43a 	srli	ra,ra,16
 4014394:	f8001f26 	beq	ra,zero,4014414 <__multiply+0x1a0>
 4014398:	58c00017 	ldw	r3,0(r11)
 401439c:	681d883a 	mov	r14,r13
 40143a0:	581f883a 	mov	r15,r11
 40143a4:	1811883a 	mov	r8,r3
 40143a8:	5825883a 	mov	r18,r11
 40143ac:	000f883a 	mov	r7,zero
 40143b0:	00000106 	br	40143b8 <__multiply+0x144>
 40143b4:	8825883a 	mov	r18,r17
 40143b8:	7140000b 	ldhu	r5,0(r14)
 40143bc:	4010d43a 	srli	r8,r8,16
 40143c0:	193fffcc 	andi	r4,r3,65535
 40143c4:	2fcb383a 	mul	r5,r5,ra
 40143c8:	7bc00104 	addi	r15,r15,4
 40143cc:	73800104 	addi	r14,r14,4
 40143d0:	2a0b883a 	add	r5,r5,r8
 40143d4:	29cb883a 	add	r5,r5,r7
 40143d8:	2806943a 	slli	r3,r5,16
 40143dc:	94400104 	addi	r17,r18,4
 40143e0:	280ad43a 	srli	r5,r5,16
 40143e4:	1908b03a 	or	r4,r3,r4
 40143e8:	793fff15 	stw	r4,-4(r15)
 40143ec:	70ffff17 	ldw	r3,-4(r14)
 40143f0:	8a000017 	ldw	r8,0(r17)
 40143f4:	1806d43a 	srli	r3,r3,16
 40143f8:	413fffcc 	andi	r4,r8,65535
 40143fc:	1fc7383a 	mul	r3,r3,ra
 4014400:	1907883a 	add	r3,r3,r4
 4014404:	1947883a 	add	r3,r3,r5
 4014408:	180ed43a 	srli	r7,r3,16
 401440c:	727fe936 	bltu	r14,r9,40143b4 <__alt_mem_epcs_flash_controller_0+0xfb0133b4>
 4014410:	90c00115 	stw	r3,4(r18)
 4014414:	31800104 	addi	r6,r6,4
 4014418:	5ac00104 	addi	r11,r11,4
 401441c:	333fbe36 	bltu	r6,r12,4014318 <__alt_mem_epcs_flash_controller_0+0xfb013318>
 4014420:	0400090e 	bge	zero,r16,4014448 <__multiply+0x1d4>
 4014424:	50ffff17 	ldw	r3,-4(r10)
 4014428:	52bfff04 	addi	r10,r10,-4
 401442c:	18000326 	beq	r3,zero,401443c <__multiply+0x1c8>
 4014430:	00000506 	br	4014448 <__multiply+0x1d4>
 4014434:	50c00017 	ldw	r3,0(r10)
 4014438:	1800031e 	bne	r3,zero,4014448 <__multiply+0x1d4>
 401443c:	843fffc4 	addi	r16,r16,-1
 4014440:	52bfff04 	addi	r10,r10,-4
 4014444:	803ffb1e 	bne	r16,zero,4014434 <__alt_mem_epcs_flash_controller_0+0xfb013434>
 4014448:	14000415 	stw	r16,16(r2)
 401444c:	dfc00517 	ldw	ra,20(sp)
 4014450:	dd000417 	ldw	r20,16(sp)
 4014454:	dcc00317 	ldw	r19,12(sp)
 4014458:	dc800217 	ldw	r18,8(sp)
 401445c:	dc400117 	ldw	r17,4(sp)
 4014460:	dc000017 	ldw	r16,0(sp)
 4014464:	dec00604 	addi	sp,sp,24
 4014468:	f800283a 	ret

0401446c <__pow5mult>:
 401446c:	defffa04 	addi	sp,sp,-24
 4014470:	dcc00315 	stw	r19,12(sp)
 4014474:	dc000015 	stw	r16,0(sp)
 4014478:	dfc00515 	stw	ra,20(sp)
 401447c:	dd000415 	stw	r20,16(sp)
 4014480:	dc800215 	stw	r18,8(sp)
 4014484:	dc400115 	stw	r17,4(sp)
 4014488:	308000cc 	andi	r2,r6,3
 401448c:	3021883a 	mov	r16,r6
 4014490:	2027883a 	mov	r19,r4
 4014494:	10002f1e 	bne	r2,zero,4014554 <__pow5mult+0xe8>
 4014498:	2825883a 	mov	r18,r5
 401449c:	8021d0ba 	srai	r16,r16,2
 40144a0:	80001a26 	beq	r16,zero,401450c <__pow5mult+0xa0>
 40144a4:	9c401217 	ldw	r17,72(r19)
 40144a8:	8800061e 	bne	r17,zero,40144c4 <__pow5mult+0x58>
 40144ac:	00003406 	br	4014580 <__pow5mult+0x114>
 40144b0:	8021d07a 	srai	r16,r16,1
 40144b4:	80001526 	beq	r16,zero,401450c <__pow5mult+0xa0>
 40144b8:	88800017 	ldw	r2,0(r17)
 40144bc:	10001c26 	beq	r2,zero,4014530 <__pow5mult+0xc4>
 40144c0:	1023883a 	mov	r17,r2
 40144c4:	8080004c 	andi	r2,r16,1
 40144c8:	103ff926 	beq	r2,zero,40144b0 <__alt_mem_epcs_flash_controller_0+0xfb0134b0>
 40144cc:	880d883a 	mov	r6,r17
 40144d0:	900b883a 	mov	r5,r18
 40144d4:	9809883a 	mov	r4,r19
 40144d8:	40142740 	call	4014274 <__multiply>
 40144dc:	90001b26 	beq	r18,zero,401454c <__pow5mult+0xe0>
 40144e0:	91000117 	ldw	r4,4(r18)
 40144e4:	98c01317 	ldw	r3,76(r19)
 40144e8:	8021d07a 	srai	r16,r16,1
 40144ec:	2109883a 	add	r4,r4,r4
 40144f0:	2109883a 	add	r4,r4,r4
 40144f4:	1907883a 	add	r3,r3,r4
 40144f8:	19000017 	ldw	r4,0(r3)
 40144fc:	91000015 	stw	r4,0(r18)
 4014500:	1c800015 	stw	r18,0(r3)
 4014504:	1025883a 	mov	r18,r2
 4014508:	803feb1e 	bne	r16,zero,40144b8 <__alt_mem_epcs_flash_controller_0+0xfb0134b8>
 401450c:	9005883a 	mov	r2,r18
 4014510:	dfc00517 	ldw	ra,20(sp)
 4014514:	dd000417 	ldw	r20,16(sp)
 4014518:	dcc00317 	ldw	r19,12(sp)
 401451c:	dc800217 	ldw	r18,8(sp)
 4014520:	dc400117 	ldw	r17,4(sp)
 4014524:	dc000017 	ldw	r16,0(sp)
 4014528:	dec00604 	addi	sp,sp,24
 401452c:	f800283a 	ret
 4014530:	880d883a 	mov	r6,r17
 4014534:	880b883a 	mov	r5,r17
 4014538:	9809883a 	mov	r4,r19
 401453c:	40142740 	call	4014274 <__multiply>
 4014540:	88800015 	stw	r2,0(r17)
 4014544:	10000015 	stw	zero,0(r2)
 4014548:	003fdd06 	br	40144c0 <__alt_mem_epcs_flash_controller_0+0xfb0134c0>
 401454c:	1025883a 	mov	r18,r2
 4014550:	003fd706 	br	40144b0 <__alt_mem_epcs_flash_controller_0+0xfb0134b0>
 4014554:	10bfffc4 	addi	r2,r2,-1
 4014558:	1085883a 	add	r2,r2,r2
 401455c:	00c10234 	movhi	r3,1032
 4014560:	18f00704 	addi	r3,r3,-16356
 4014564:	1085883a 	add	r2,r2,r2
 4014568:	1885883a 	add	r2,r3,r2
 401456c:	11800017 	ldw	r6,0(r2)
 4014570:	000f883a 	mov	r7,zero
 4014574:	4013efc0 	call	4013efc <__multadd>
 4014578:	1025883a 	mov	r18,r2
 401457c:	003fc706 	br	401449c <__alt_mem_epcs_flash_controller_0+0xfb01349c>
 4014580:	05000044 	movi	r20,1
 4014584:	a00b883a 	mov	r5,r20
 4014588:	9809883a 	mov	r4,r19
 401458c:	4013e2c0 	call	4013e2c <_Balloc>
 4014590:	1023883a 	mov	r17,r2
 4014594:	00809c44 	movi	r2,625
 4014598:	88800515 	stw	r2,20(r17)
 401459c:	8d000415 	stw	r20,16(r17)
 40145a0:	9c401215 	stw	r17,72(r19)
 40145a4:	88000015 	stw	zero,0(r17)
 40145a8:	003fc606 	br	40144c4 <__alt_mem_epcs_flash_controller_0+0xfb0134c4>

040145ac <__lshift>:
 40145ac:	defff904 	addi	sp,sp,-28
 40145b0:	dd400515 	stw	r21,20(sp)
 40145b4:	dcc00315 	stw	r19,12(sp)
 40145b8:	302bd17a 	srai	r21,r6,5
 40145bc:	2cc00417 	ldw	r19,16(r5)
 40145c0:	28800217 	ldw	r2,8(r5)
 40145c4:	dd000415 	stw	r20,16(sp)
 40145c8:	ace7883a 	add	r19,r21,r19
 40145cc:	dc800215 	stw	r18,8(sp)
 40145d0:	dc400115 	stw	r17,4(sp)
 40145d4:	dc000015 	stw	r16,0(sp)
 40145d8:	dfc00615 	stw	ra,24(sp)
 40145dc:	9c000044 	addi	r16,r19,1
 40145e0:	2823883a 	mov	r17,r5
 40145e4:	3029883a 	mov	r20,r6
 40145e8:	2025883a 	mov	r18,r4
 40145ec:	29400117 	ldw	r5,4(r5)
 40145f0:	1400030e 	bge	r2,r16,4014600 <__lshift+0x54>
 40145f4:	1085883a 	add	r2,r2,r2
 40145f8:	29400044 	addi	r5,r5,1
 40145fc:	143ffd16 	blt	r2,r16,40145f4 <__alt_mem_epcs_flash_controller_0+0xfb0135f4>
 4014600:	9009883a 	mov	r4,r18
 4014604:	4013e2c0 	call	4013e2c <_Balloc>
 4014608:	10c00504 	addi	r3,r2,20
 401460c:	0540070e 	bge	zero,r21,401462c <__lshift+0x80>
 4014610:	ad6b883a 	add	r21,r21,r21
 4014614:	ad6b883a 	add	r21,r21,r21
 4014618:	1809883a 	mov	r4,r3
 401461c:	1d47883a 	add	r3,r3,r21
 4014620:	20000015 	stw	zero,0(r4)
 4014624:	21000104 	addi	r4,r4,4
 4014628:	193ffd1e 	bne	r3,r4,4014620 <__alt_mem_epcs_flash_controller_0+0xfb013620>
 401462c:	8a000417 	ldw	r8,16(r17)
 4014630:	89000504 	addi	r4,r17,20
 4014634:	a18007cc 	andi	r6,r20,31
 4014638:	4211883a 	add	r8,r8,r8
 401463c:	4211883a 	add	r8,r8,r8
 4014640:	2211883a 	add	r8,r4,r8
 4014644:	30002326 	beq	r6,zero,40146d4 <__lshift+0x128>
 4014648:	02400804 	movi	r9,32
 401464c:	4993c83a 	sub	r9,r9,r6
 4014650:	000b883a 	mov	r5,zero
 4014654:	21c00017 	ldw	r7,0(r4)
 4014658:	1815883a 	mov	r10,r3
 401465c:	18c00104 	addi	r3,r3,4
 4014660:	398e983a 	sll	r7,r7,r6
 4014664:	21000104 	addi	r4,r4,4
 4014668:	394ab03a 	or	r5,r7,r5
 401466c:	197fff15 	stw	r5,-4(r3)
 4014670:	217fff17 	ldw	r5,-4(r4)
 4014674:	2a4ad83a 	srl	r5,r5,r9
 4014678:	223ff636 	bltu	r4,r8,4014654 <__alt_mem_epcs_flash_controller_0+0xfb013654>
 401467c:	51400115 	stw	r5,4(r10)
 4014680:	28001a1e 	bne	r5,zero,40146ec <__lshift+0x140>
 4014684:	843fffc4 	addi	r16,r16,-1
 4014688:	14000415 	stw	r16,16(r2)
 401468c:	88000826 	beq	r17,zero,40146b0 <__lshift+0x104>
 4014690:	89000117 	ldw	r4,4(r17)
 4014694:	90c01317 	ldw	r3,76(r18)
 4014698:	2109883a 	add	r4,r4,r4
 401469c:	2109883a 	add	r4,r4,r4
 40146a0:	1907883a 	add	r3,r3,r4
 40146a4:	19000017 	ldw	r4,0(r3)
 40146a8:	89000015 	stw	r4,0(r17)
 40146ac:	1c400015 	stw	r17,0(r3)
 40146b0:	dfc00617 	ldw	ra,24(sp)
 40146b4:	dd400517 	ldw	r21,20(sp)
 40146b8:	dd000417 	ldw	r20,16(sp)
 40146bc:	dcc00317 	ldw	r19,12(sp)
 40146c0:	dc800217 	ldw	r18,8(sp)
 40146c4:	dc400117 	ldw	r17,4(sp)
 40146c8:	dc000017 	ldw	r16,0(sp)
 40146cc:	dec00704 	addi	sp,sp,28
 40146d0:	f800283a 	ret
 40146d4:	21400017 	ldw	r5,0(r4)
 40146d8:	18c00104 	addi	r3,r3,4
 40146dc:	21000104 	addi	r4,r4,4
 40146e0:	197fff15 	stw	r5,-4(r3)
 40146e4:	223ffb36 	bltu	r4,r8,40146d4 <__alt_mem_epcs_flash_controller_0+0xfb0136d4>
 40146e8:	003fe606 	br	4014684 <__alt_mem_epcs_flash_controller_0+0xfb013684>
 40146ec:	9c000084 	addi	r16,r19,2
 40146f0:	003fe406 	br	4014684 <__alt_mem_epcs_flash_controller_0+0xfb013684>

040146f4 <__mcmp>:
 40146f4:	20800417 	ldw	r2,16(r4)
 40146f8:	28c00417 	ldw	r3,16(r5)
 40146fc:	10c5c83a 	sub	r2,r2,r3
 4014700:	1000111e 	bne	r2,zero,4014748 <__mcmp+0x54>
 4014704:	18c7883a 	add	r3,r3,r3
 4014708:	18c7883a 	add	r3,r3,r3
 401470c:	21000504 	addi	r4,r4,20
 4014710:	29400504 	addi	r5,r5,20
 4014714:	20c5883a 	add	r2,r4,r3
 4014718:	28cb883a 	add	r5,r5,r3
 401471c:	00000106 	br	4014724 <__mcmp+0x30>
 4014720:	20800a2e 	bgeu	r4,r2,401474c <__mcmp+0x58>
 4014724:	10bfff04 	addi	r2,r2,-4
 4014728:	297fff04 	addi	r5,r5,-4
 401472c:	11800017 	ldw	r6,0(r2)
 4014730:	28c00017 	ldw	r3,0(r5)
 4014734:	30fffa26 	beq	r6,r3,4014720 <__alt_mem_epcs_flash_controller_0+0xfb013720>
 4014738:	30c00236 	bltu	r6,r3,4014744 <__mcmp+0x50>
 401473c:	00800044 	movi	r2,1
 4014740:	f800283a 	ret
 4014744:	00bfffc4 	movi	r2,-1
 4014748:	f800283a 	ret
 401474c:	0005883a 	mov	r2,zero
 4014750:	f800283a 	ret

04014754 <__mdiff>:
 4014754:	28c00417 	ldw	r3,16(r5)
 4014758:	30800417 	ldw	r2,16(r6)
 401475c:	defffa04 	addi	sp,sp,-24
 4014760:	dcc00315 	stw	r19,12(sp)
 4014764:	dc800215 	stw	r18,8(sp)
 4014768:	dfc00515 	stw	ra,20(sp)
 401476c:	dd000415 	stw	r20,16(sp)
 4014770:	dc400115 	stw	r17,4(sp)
 4014774:	dc000015 	stw	r16,0(sp)
 4014778:	1887c83a 	sub	r3,r3,r2
 401477c:	2825883a 	mov	r18,r5
 4014780:	3027883a 	mov	r19,r6
 4014784:	1800141e 	bne	r3,zero,40147d8 <__mdiff+0x84>
 4014788:	1085883a 	add	r2,r2,r2
 401478c:	1085883a 	add	r2,r2,r2
 4014790:	2a000504 	addi	r8,r5,20
 4014794:	34000504 	addi	r16,r6,20
 4014798:	4087883a 	add	r3,r8,r2
 401479c:	8085883a 	add	r2,r16,r2
 40147a0:	00000106 	br	40147a8 <__mdiff+0x54>
 40147a4:	40c0592e 	bgeu	r8,r3,401490c <__mdiff+0x1b8>
 40147a8:	18ffff04 	addi	r3,r3,-4
 40147ac:	10bfff04 	addi	r2,r2,-4
 40147b0:	19c00017 	ldw	r7,0(r3)
 40147b4:	11400017 	ldw	r5,0(r2)
 40147b8:	397ffa26 	beq	r7,r5,40147a4 <__alt_mem_epcs_flash_controller_0+0xfb0137a4>
 40147bc:	3940592e 	bgeu	r7,r5,4014924 <__mdiff+0x1d0>
 40147c0:	9005883a 	mov	r2,r18
 40147c4:	4023883a 	mov	r17,r8
 40147c8:	9825883a 	mov	r18,r19
 40147cc:	05000044 	movi	r20,1
 40147d0:	1027883a 	mov	r19,r2
 40147d4:	00000406 	br	40147e8 <__mdiff+0x94>
 40147d8:	18005616 	blt	r3,zero,4014934 <__mdiff+0x1e0>
 40147dc:	34400504 	addi	r17,r6,20
 40147e0:	2c000504 	addi	r16,r5,20
 40147e4:	0029883a 	mov	r20,zero
 40147e8:	91400117 	ldw	r5,4(r18)
 40147ec:	4013e2c0 	call	4013e2c <_Balloc>
 40147f0:	92400417 	ldw	r9,16(r18)
 40147f4:	9b000417 	ldw	r12,16(r19)
 40147f8:	12c00504 	addi	r11,r2,20
 40147fc:	4a51883a 	add	r8,r9,r9
 4014800:	6319883a 	add	r12,r12,r12
 4014804:	4211883a 	add	r8,r8,r8
 4014808:	6319883a 	add	r12,r12,r12
 401480c:	15000315 	stw	r20,12(r2)
 4014810:	8211883a 	add	r8,r16,r8
 4014814:	8b19883a 	add	r12,r17,r12
 4014818:	0007883a 	mov	r3,zero
 401481c:	81400017 	ldw	r5,0(r16)
 4014820:	89c00017 	ldw	r7,0(r17)
 4014824:	59800104 	addi	r6,r11,4
 4014828:	293fffcc 	andi	r4,r5,65535
 401482c:	20c7883a 	add	r3,r4,r3
 4014830:	393fffcc 	andi	r4,r7,65535
 4014834:	1909c83a 	sub	r4,r3,r4
 4014838:	280ad43a 	srli	r5,r5,16
 401483c:	380ed43a 	srli	r7,r7,16
 4014840:	2007d43a 	srai	r3,r4,16
 4014844:	213fffcc 	andi	r4,r4,65535
 4014848:	29cbc83a 	sub	r5,r5,r7
 401484c:	28c7883a 	add	r3,r5,r3
 4014850:	180a943a 	slli	r5,r3,16
 4014854:	8c400104 	addi	r17,r17,4
 4014858:	84000104 	addi	r16,r16,4
 401485c:	2908b03a 	or	r4,r5,r4
 4014860:	59000015 	stw	r4,0(r11)
 4014864:	1807d43a 	srai	r3,r3,16
 4014868:	3015883a 	mov	r10,r6
 401486c:	3017883a 	mov	r11,r6
 4014870:	8b3fea36 	bltu	r17,r12,401481c <__alt_mem_epcs_flash_controller_0+0xfb01381c>
 4014874:	8200162e 	bgeu	r16,r8,40148d0 <__mdiff+0x17c>
 4014878:	8017883a 	mov	r11,r16
 401487c:	59400017 	ldw	r5,0(r11)
 4014880:	31800104 	addi	r6,r6,4
 4014884:	5ac00104 	addi	r11,r11,4
 4014888:	293fffcc 	andi	r4,r5,65535
 401488c:	20c7883a 	add	r3,r4,r3
 4014890:	280ed43a 	srli	r7,r5,16
 4014894:	180bd43a 	srai	r5,r3,16
 4014898:	193fffcc 	andi	r4,r3,65535
 401489c:	3947883a 	add	r3,r7,r5
 40148a0:	180a943a 	slli	r5,r3,16
 40148a4:	1807d43a 	srai	r3,r3,16
 40148a8:	2908b03a 	or	r4,r5,r4
 40148ac:	313fff15 	stw	r4,-4(r6)
 40148b0:	5a3ff236 	bltu	r11,r8,401487c <__alt_mem_epcs_flash_controller_0+0xfb01387c>
 40148b4:	0406303a 	nor	r3,zero,r16
 40148b8:	1a07883a 	add	r3,r3,r8
 40148bc:	1806d0ba 	srli	r3,r3,2
 40148c0:	18c00044 	addi	r3,r3,1
 40148c4:	18c7883a 	add	r3,r3,r3
 40148c8:	18c7883a 	add	r3,r3,r3
 40148cc:	50d5883a 	add	r10,r10,r3
 40148d0:	50ffff04 	addi	r3,r10,-4
 40148d4:	2000041e 	bne	r4,zero,40148e8 <__mdiff+0x194>
 40148d8:	18ffff04 	addi	r3,r3,-4
 40148dc:	19000017 	ldw	r4,0(r3)
 40148e0:	4a7fffc4 	addi	r9,r9,-1
 40148e4:	203ffc26 	beq	r4,zero,40148d8 <__alt_mem_epcs_flash_controller_0+0xfb0138d8>
 40148e8:	12400415 	stw	r9,16(r2)
 40148ec:	dfc00517 	ldw	ra,20(sp)
 40148f0:	dd000417 	ldw	r20,16(sp)
 40148f4:	dcc00317 	ldw	r19,12(sp)
 40148f8:	dc800217 	ldw	r18,8(sp)
 40148fc:	dc400117 	ldw	r17,4(sp)
 4014900:	dc000017 	ldw	r16,0(sp)
 4014904:	dec00604 	addi	sp,sp,24
 4014908:	f800283a 	ret
 401490c:	000b883a 	mov	r5,zero
 4014910:	4013e2c0 	call	4013e2c <_Balloc>
 4014914:	00c00044 	movi	r3,1
 4014918:	10c00415 	stw	r3,16(r2)
 401491c:	10000515 	stw	zero,20(r2)
 4014920:	003ff206 	br	40148ec <__alt_mem_epcs_flash_controller_0+0xfb0138ec>
 4014924:	8023883a 	mov	r17,r16
 4014928:	0029883a 	mov	r20,zero
 401492c:	4021883a 	mov	r16,r8
 4014930:	003fad06 	br	40147e8 <__alt_mem_epcs_flash_controller_0+0xfb0137e8>
 4014934:	9005883a 	mov	r2,r18
 4014938:	94400504 	addi	r17,r18,20
 401493c:	9c000504 	addi	r16,r19,20
 4014940:	9825883a 	mov	r18,r19
 4014944:	05000044 	movi	r20,1
 4014948:	1027883a 	mov	r19,r2
 401494c:	003fa606 	br	40147e8 <__alt_mem_epcs_flash_controller_0+0xfb0137e8>

04014950 <__ulp>:
 4014950:	295ffc2c 	andhi	r5,r5,32752
 4014954:	00bf3034 	movhi	r2,64704
 4014958:	2887883a 	add	r3,r5,r2
 401495c:	00c0020e 	bge	zero,r3,4014968 <__ulp+0x18>
 4014960:	0005883a 	mov	r2,zero
 4014964:	f800283a 	ret
 4014968:	00c7c83a 	sub	r3,zero,r3
 401496c:	1807d53a 	srai	r3,r3,20
 4014970:	008004c4 	movi	r2,19
 4014974:	10c00b0e 	bge	r2,r3,40149a4 <__ulp+0x54>
 4014978:	18bffb04 	addi	r2,r3,-20
 401497c:	01000784 	movi	r4,30
 4014980:	0007883a 	mov	r3,zero
 4014984:	20800516 	blt	r4,r2,401499c <__ulp+0x4c>
 4014988:	010007c4 	movi	r4,31
 401498c:	2089c83a 	sub	r4,r4,r2
 4014990:	00800044 	movi	r2,1
 4014994:	1104983a 	sll	r2,r2,r4
 4014998:	f800283a 	ret
 401499c:	00800044 	movi	r2,1
 40149a0:	f800283a 	ret
 40149a4:	01400234 	movhi	r5,8
 40149a8:	28c7d83a 	sra	r3,r5,r3
 40149ac:	0005883a 	mov	r2,zero
 40149b0:	f800283a 	ret

040149b4 <__b2d>:
 40149b4:	defffa04 	addi	sp,sp,-24
 40149b8:	dc000015 	stw	r16,0(sp)
 40149bc:	24000417 	ldw	r16,16(r4)
 40149c0:	dc400115 	stw	r17,4(sp)
 40149c4:	24400504 	addi	r17,r4,20
 40149c8:	8421883a 	add	r16,r16,r16
 40149cc:	8421883a 	add	r16,r16,r16
 40149d0:	8c21883a 	add	r16,r17,r16
 40149d4:	dc800215 	stw	r18,8(sp)
 40149d8:	84bfff17 	ldw	r18,-4(r16)
 40149dc:	dd000415 	stw	r20,16(sp)
 40149e0:	dcc00315 	stw	r19,12(sp)
 40149e4:	9009883a 	mov	r4,r18
 40149e8:	2829883a 	mov	r20,r5
 40149ec:	dfc00515 	stw	ra,20(sp)
 40149f0:	40141200 	call	4014120 <__hi0bits>
 40149f4:	00c00804 	movi	r3,32
 40149f8:	1889c83a 	sub	r4,r3,r2
 40149fc:	a1000015 	stw	r4,0(r20)
 4014a00:	01000284 	movi	r4,10
 4014a04:	84ffff04 	addi	r19,r16,-4
 4014a08:	20801216 	blt	r4,r2,4014a54 <__b2d+0xa0>
 4014a0c:	018002c4 	movi	r6,11
 4014a10:	308dc83a 	sub	r6,r6,r2
 4014a14:	9186d83a 	srl	r3,r18,r6
 4014a18:	18cffc34 	orhi	r3,r3,16368
 4014a1c:	8cc0212e 	bgeu	r17,r19,4014aa4 <__b2d+0xf0>
 4014a20:	813ffe17 	ldw	r4,-8(r16)
 4014a24:	218cd83a 	srl	r6,r4,r6
 4014a28:	10800544 	addi	r2,r2,21
 4014a2c:	9084983a 	sll	r2,r18,r2
 4014a30:	1184b03a 	or	r2,r2,r6
 4014a34:	dfc00517 	ldw	ra,20(sp)
 4014a38:	dd000417 	ldw	r20,16(sp)
 4014a3c:	dcc00317 	ldw	r19,12(sp)
 4014a40:	dc800217 	ldw	r18,8(sp)
 4014a44:	dc400117 	ldw	r17,4(sp)
 4014a48:	dc000017 	ldw	r16,0(sp)
 4014a4c:	dec00604 	addi	sp,sp,24
 4014a50:	f800283a 	ret
 4014a54:	8cc00f2e 	bgeu	r17,r19,4014a94 <__b2d+0xe0>
 4014a58:	117ffd44 	addi	r5,r2,-11
 4014a5c:	80bffe17 	ldw	r2,-8(r16)
 4014a60:	28000e26 	beq	r5,zero,4014a9c <__b2d+0xe8>
 4014a64:	1949c83a 	sub	r4,r3,r5
 4014a68:	9164983a 	sll	r18,r18,r5
 4014a6c:	1106d83a 	srl	r3,r2,r4
 4014a70:	81bffe04 	addi	r6,r16,-8
 4014a74:	948ffc34 	orhi	r18,r18,16368
 4014a78:	90c6b03a 	or	r3,r18,r3
 4014a7c:	89800e2e 	bgeu	r17,r6,4014ab8 <__b2d+0x104>
 4014a80:	81bffd17 	ldw	r6,-12(r16)
 4014a84:	1144983a 	sll	r2,r2,r5
 4014a88:	310ad83a 	srl	r5,r6,r4
 4014a8c:	2884b03a 	or	r2,r5,r2
 4014a90:	003fe806 	br	4014a34 <__alt_mem_epcs_flash_controller_0+0xfb013a34>
 4014a94:	10bffd44 	addi	r2,r2,-11
 4014a98:	1000041e 	bne	r2,zero,4014aac <__b2d+0xf8>
 4014a9c:	90cffc34 	orhi	r3,r18,16368
 4014aa0:	003fe406 	br	4014a34 <__alt_mem_epcs_flash_controller_0+0xfb013a34>
 4014aa4:	000d883a 	mov	r6,zero
 4014aa8:	003fdf06 	br	4014a28 <__alt_mem_epcs_flash_controller_0+0xfb013a28>
 4014aac:	90a4983a 	sll	r18,r18,r2
 4014ab0:	0005883a 	mov	r2,zero
 4014ab4:	003ff906 	br	4014a9c <__alt_mem_epcs_flash_controller_0+0xfb013a9c>
 4014ab8:	1144983a 	sll	r2,r2,r5
 4014abc:	003fdd06 	br	4014a34 <__alt_mem_epcs_flash_controller_0+0xfb013a34>

04014ac0 <__d2b>:
 4014ac0:	defff804 	addi	sp,sp,-32
 4014ac4:	dc000215 	stw	r16,8(sp)
 4014ac8:	3021883a 	mov	r16,r6
 4014acc:	dc400315 	stw	r17,12(sp)
 4014ad0:	8022907a 	slli	r17,r16,1
 4014ad4:	dd000615 	stw	r20,24(sp)
 4014ad8:	2829883a 	mov	r20,r5
 4014adc:	01400044 	movi	r5,1
 4014ae0:	dcc00515 	stw	r19,20(sp)
 4014ae4:	dc800415 	stw	r18,16(sp)
 4014ae8:	dfc00715 	stw	ra,28(sp)
 4014aec:	3825883a 	mov	r18,r7
 4014af0:	8822d57a 	srli	r17,r17,21
 4014af4:	4013e2c0 	call	4013e2c <_Balloc>
 4014af8:	1027883a 	mov	r19,r2
 4014afc:	00800434 	movhi	r2,16
 4014b00:	10bfffc4 	addi	r2,r2,-1
 4014b04:	808c703a 	and	r6,r16,r2
 4014b08:	88000126 	beq	r17,zero,4014b10 <__d2b+0x50>
 4014b0c:	31800434 	orhi	r6,r6,16
 4014b10:	d9800015 	stw	r6,0(sp)
 4014b14:	a0002426 	beq	r20,zero,4014ba8 <__d2b+0xe8>
 4014b18:	d9000104 	addi	r4,sp,4
 4014b1c:	dd000115 	stw	r20,4(sp)
 4014b20:	40141880 	call	4014188 <__lo0bits>
 4014b24:	d8c00017 	ldw	r3,0(sp)
 4014b28:	10002f1e 	bne	r2,zero,4014be8 <__d2b+0x128>
 4014b2c:	d9000117 	ldw	r4,4(sp)
 4014b30:	99000515 	stw	r4,20(r19)
 4014b34:	1821003a 	cmpeq	r16,r3,zero
 4014b38:	01000084 	movi	r4,2
 4014b3c:	2421c83a 	sub	r16,r4,r16
 4014b40:	98c00615 	stw	r3,24(r19)
 4014b44:	9c000415 	stw	r16,16(r19)
 4014b48:	88001f1e 	bne	r17,zero,4014bc8 <__d2b+0x108>
 4014b4c:	10bef384 	addi	r2,r2,-1074
 4014b50:	90800015 	stw	r2,0(r18)
 4014b54:	00900034 	movhi	r2,16384
 4014b58:	10bfffc4 	addi	r2,r2,-1
 4014b5c:	8085883a 	add	r2,r16,r2
 4014b60:	1085883a 	add	r2,r2,r2
 4014b64:	1085883a 	add	r2,r2,r2
 4014b68:	9885883a 	add	r2,r19,r2
 4014b6c:	11000517 	ldw	r4,20(r2)
 4014b70:	8020917a 	slli	r16,r16,5
 4014b74:	40141200 	call	4014120 <__hi0bits>
 4014b78:	d8c00817 	ldw	r3,32(sp)
 4014b7c:	8085c83a 	sub	r2,r16,r2
 4014b80:	18800015 	stw	r2,0(r3)
 4014b84:	9805883a 	mov	r2,r19
 4014b88:	dfc00717 	ldw	ra,28(sp)
 4014b8c:	dd000617 	ldw	r20,24(sp)
 4014b90:	dcc00517 	ldw	r19,20(sp)
 4014b94:	dc800417 	ldw	r18,16(sp)
 4014b98:	dc400317 	ldw	r17,12(sp)
 4014b9c:	dc000217 	ldw	r16,8(sp)
 4014ba0:	dec00804 	addi	sp,sp,32
 4014ba4:	f800283a 	ret
 4014ba8:	d809883a 	mov	r4,sp
 4014bac:	40141880 	call	4014188 <__lo0bits>
 4014bb0:	d8c00017 	ldw	r3,0(sp)
 4014bb4:	04000044 	movi	r16,1
 4014bb8:	9c000415 	stw	r16,16(r19)
 4014bbc:	98c00515 	stw	r3,20(r19)
 4014bc0:	10800804 	addi	r2,r2,32
 4014bc4:	883fe126 	beq	r17,zero,4014b4c <__alt_mem_epcs_flash_controller_0+0xfb013b4c>
 4014bc8:	00c00d44 	movi	r3,53
 4014bcc:	8c7ef344 	addi	r17,r17,-1075
 4014bd0:	88a3883a 	add	r17,r17,r2
 4014bd4:	1885c83a 	sub	r2,r3,r2
 4014bd8:	d8c00817 	ldw	r3,32(sp)
 4014bdc:	94400015 	stw	r17,0(r18)
 4014be0:	18800015 	stw	r2,0(r3)
 4014be4:	003fe706 	br	4014b84 <__alt_mem_epcs_flash_controller_0+0xfb013b84>
 4014be8:	01000804 	movi	r4,32
 4014bec:	2089c83a 	sub	r4,r4,r2
 4014bf0:	1908983a 	sll	r4,r3,r4
 4014bf4:	d9400117 	ldw	r5,4(sp)
 4014bf8:	1886d83a 	srl	r3,r3,r2
 4014bfc:	2148b03a 	or	r4,r4,r5
 4014c00:	99000515 	stw	r4,20(r19)
 4014c04:	d8c00015 	stw	r3,0(sp)
 4014c08:	003fca06 	br	4014b34 <__alt_mem_epcs_flash_controller_0+0xfb013b34>

04014c0c <__ratio>:
 4014c0c:	defff904 	addi	sp,sp,-28
 4014c10:	dc400315 	stw	r17,12(sp)
 4014c14:	2823883a 	mov	r17,r5
 4014c18:	d9400104 	addi	r5,sp,4
 4014c1c:	dfc00615 	stw	ra,24(sp)
 4014c20:	dcc00515 	stw	r19,20(sp)
 4014c24:	dc800415 	stw	r18,16(sp)
 4014c28:	2027883a 	mov	r19,r4
 4014c2c:	dc000215 	stw	r16,8(sp)
 4014c30:	40149b40 	call	40149b4 <__b2d>
 4014c34:	d80b883a 	mov	r5,sp
 4014c38:	8809883a 	mov	r4,r17
 4014c3c:	1025883a 	mov	r18,r2
 4014c40:	1821883a 	mov	r16,r3
 4014c44:	40149b40 	call	40149b4 <__b2d>
 4014c48:	8a000417 	ldw	r8,16(r17)
 4014c4c:	99000417 	ldw	r4,16(r19)
 4014c50:	d9400117 	ldw	r5,4(sp)
 4014c54:	2209c83a 	sub	r4,r4,r8
 4014c58:	2010917a 	slli	r8,r4,5
 4014c5c:	d9000017 	ldw	r4,0(sp)
 4014c60:	2909c83a 	sub	r4,r5,r4
 4014c64:	4109883a 	add	r4,r8,r4
 4014c68:	01000e0e 	bge	zero,r4,4014ca4 <__ratio+0x98>
 4014c6c:	2008953a 	slli	r4,r4,20
 4014c70:	2421883a 	add	r16,r4,r16
 4014c74:	100d883a 	mov	r6,r2
 4014c78:	180f883a 	mov	r7,r3
 4014c7c:	9009883a 	mov	r4,r18
 4014c80:	800b883a 	mov	r5,r16
 4014c84:	4009ee80 	call	4009ee8 <__divdf3>
 4014c88:	dfc00617 	ldw	ra,24(sp)
 4014c8c:	dcc00517 	ldw	r19,20(sp)
 4014c90:	dc800417 	ldw	r18,16(sp)
 4014c94:	dc400317 	ldw	r17,12(sp)
 4014c98:	dc000217 	ldw	r16,8(sp)
 4014c9c:	dec00704 	addi	sp,sp,28
 4014ca0:	f800283a 	ret
 4014ca4:	2008953a 	slli	r4,r4,20
 4014ca8:	1907c83a 	sub	r3,r3,r4
 4014cac:	003ff106 	br	4014c74 <__alt_mem_epcs_flash_controller_0+0xfb013c74>

04014cb0 <_mprec_log10>:
 4014cb0:	defffe04 	addi	sp,sp,-8
 4014cb4:	dc000015 	stw	r16,0(sp)
 4014cb8:	dfc00115 	stw	ra,4(sp)
 4014cbc:	008005c4 	movi	r2,23
 4014cc0:	2021883a 	mov	r16,r4
 4014cc4:	11000d0e 	bge	r2,r4,4014cfc <_mprec_log10+0x4c>
 4014cc8:	0005883a 	mov	r2,zero
 4014ccc:	00cffc34 	movhi	r3,16368
 4014cd0:	843fffc4 	addi	r16,r16,-1
 4014cd4:	000d883a 	mov	r6,zero
 4014cd8:	01d00934 	movhi	r7,16420
 4014cdc:	1009883a 	mov	r4,r2
 4014ce0:	180b883a 	mov	r5,r3
 4014ce4:	400a8c40 	call	400a8c4 <__muldf3>
 4014ce8:	803ff91e 	bne	r16,zero,4014cd0 <__alt_mem_epcs_flash_controller_0+0xfb013cd0>
 4014cec:	dfc00117 	ldw	ra,4(sp)
 4014cf0:	dc000017 	ldw	r16,0(sp)
 4014cf4:	dec00204 	addi	sp,sp,8
 4014cf8:	f800283a 	ret
 4014cfc:	202090fa 	slli	r16,r4,3
 4014d00:	00810234 	movhi	r2,1032
 4014d04:	10b01e04 	addi	r2,r2,-16264
 4014d08:	1421883a 	add	r16,r2,r16
 4014d0c:	80800017 	ldw	r2,0(r16)
 4014d10:	80c00117 	ldw	r3,4(r16)
 4014d14:	dfc00117 	ldw	ra,4(sp)
 4014d18:	dc000017 	ldw	r16,0(sp)
 4014d1c:	dec00204 	addi	sp,sp,8
 4014d20:	f800283a 	ret

04014d24 <__copybits>:
 4014d24:	297fffc4 	addi	r5,r5,-1
 4014d28:	280fd17a 	srai	r7,r5,5
 4014d2c:	30c00417 	ldw	r3,16(r6)
 4014d30:	30800504 	addi	r2,r6,20
 4014d34:	39c00044 	addi	r7,r7,1
 4014d38:	18c7883a 	add	r3,r3,r3
 4014d3c:	39cf883a 	add	r7,r7,r7
 4014d40:	18c7883a 	add	r3,r3,r3
 4014d44:	39cf883a 	add	r7,r7,r7
 4014d48:	10c7883a 	add	r3,r2,r3
 4014d4c:	21cf883a 	add	r7,r4,r7
 4014d50:	10c00d2e 	bgeu	r2,r3,4014d88 <__copybits+0x64>
 4014d54:	200b883a 	mov	r5,r4
 4014d58:	12000017 	ldw	r8,0(r2)
 4014d5c:	29400104 	addi	r5,r5,4
 4014d60:	10800104 	addi	r2,r2,4
 4014d64:	2a3fff15 	stw	r8,-4(r5)
 4014d68:	10fffb36 	bltu	r2,r3,4014d58 <__alt_mem_epcs_flash_controller_0+0xfb013d58>
 4014d6c:	1985c83a 	sub	r2,r3,r6
 4014d70:	10bffac4 	addi	r2,r2,-21
 4014d74:	1004d0ba 	srli	r2,r2,2
 4014d78:	10800044 	addi	r2,r2,1
 4014d7c:	1085883a 	add	r2,r2,r2
 4014d80:	1085883a 	add	r2,r2,r2
 4014d84:	2089883a 	add	r4,r4,r2
 4014d88:	21c0032e 	bgeu	r4,r7,4014d98 <__copybits+0x74>
 4014d8c:	20000015 	stw	zero,0(r4)
 4014d90:	21000104 	addi	r4,r4,4
 4014d94:	21fffd36 	bltu	r4,r7,4014d8c <__alt_mem_epcs_flash_controller_0+0xfb013d8c>
 4014d98:	f800283a 	ret

04014d9c <__any_on>:
 4014d9c:	20c00417 	ldw	r3,16(r4)
 4014da0:	2805d17a 	srai	r2,r5,5
 4014da4:	21000504 	addi	r4,r4,20
 4014da8:	18800d0e 	bge	r3,r2,4014de0 <__any_on+0x44>
 4014dac:	18c7883a 	add	r3,r3,r3
 4014db0:	18c7883a 	add	r3,r3,r3
 4014db4:	20c7883a 	add	r3,r4,r3
 4014db8:	20c0192e 	bgeu	r4,r3,4014e20 <__any_on+0x84>
 4014dbc:	18bfff17 	ldw	r2,-4(r3)
 4014dc0:	18ffff04 	addi	r3,r3,-4
 4014dc4:	1000041e 	bne	r2,zero,4014dd8 <__any_on+0x3c>
 4014dc8:	20c0142e 	bgeu	r4,r3,4014e1c <__any_on+0x80>
 4014dcc:	18ffff04 	addi	r3,r3,-4
 4014dd0:	19400017 	ldw	r5,0(r3)
 4014dd4:	283ffc26 	beq	r5,zero,4014dc8 <__alt_mem_epcs_flash_controller_0+0xfb013dc8>
 4014dd8:	00800044 	movi	r2,1
 4014ddc:	f800283a 	ret
 4014de0:	10c00a0e 	bge	r2,r3,4014e0c <__any_on+0x70>
 4014de4:	1085883a 	add	r2,r2,r2
 4014de8:	1085883a 	add	r2,r2,r2
 4014dec:	294007cc 	andi	r5,r5,31
 4014df0:	2087883a 	add	r3,r4,r2
 4014df4:	283ff026 	beq	r5,zero,4014db8 <__alt_mem_epcs_flash_controller_0+0xfb013db8>
 4014df8:	19800017 	ldw	r6,0(r3)
 4014dfc:	3144d83a 	srl	r2,r6,r5
 4014e00:	114a983a 	sll	r5,r2,r5
 4014e04:	317ff41e 	bne	r6,r5,4014dd8 <__alt_mem_epcs_flash_controller_0+0xfb013dd8>
 4014e08:	003feb06 	br	4014db8 <__alt_mem_epcs_flash_controller_0+0xfb013db8>
 4014e0c:	1085883a 	add	r2,r2,r2
 4014e10:	1085883a 	add	r2,r2,r2
 4014e14:	2087883a 	add	r3,r4,r2
 4014e18:	003fe706 	br	4014db8 <__alt_mem_epcs_flash_controller_0+0xfb013db8>
 4014e1c:	f800283a 	ret
 4014e20:	0005883a 	mov	r2,zero
 4014e24:	f800283a 	ret

04014e28 <_putc_r>:
 4014e28:	defffc04 	addi	sp,sp,-16
 4014e2c:	dc000215 	stw	r16,8(sp)
 4014e30:	dfc00315 	stw	ra,12(sp)
 4014e34:	2021883a 	mov	r16,r4
 4014e38:	20000226 	beq	r4,zero,4014e44 <_putc_r+0x1c>
 4014e3c:	20800e17 	ldw	r2,56(r4)
 4014e40:	10001b26 	beq	r2,zero,4014eb0 <_putc_r+0x88>
 4014e44:	30800217 	ldw	r2,8(r6)
 4014e48:	10bfffc4 	addi	r2,r2,-1
 4014e4c:	30800215 	stw	r2,8(r6)
 4014e50:	10000a16 	blt	r2,zero,4014e7c <_putc_r+0x54>
 4014e54:	30800017 	ldw	r2,0(r6)
 4014e58:	11400005 	stb	r5,0(r2)
 4014e5c:	30800017 	ldw	r2,0(r6)
 4014e60:	10c00044 	addi	r3,r2,1
 4014e64:	30c00015 	stw	r3,0(r6)
 4014e68:	10800003 	ldbu	r2,0(r2)
 4014e6c:	dfc00317 	ldw	ra,12(sp)
 4014e70:	dc000217 	ldw	r16,8(sp)
 4014e74:	dec00404 	addi	sp,sp,16
 4014e78:	f800283a 	ret
 4014e7c:	30c00617 	ldw	r3,24(r6)
 4014e80:	10c00616 	blt	r2,r3,4014e9c <_putc_r+0x74>
 4014e84:	30800017 	ldw	r2,0(r6)
 4014e88:	00c00284 	movi	r3,10
 4014e8c:	11400005 	stb	r5,0(r2)
 4014e90:	30800017 	ldw	r2,0(r6)
 4014e94:	11400003 	ldbu	r5,0(r2)
 4014e98:	28fff11e 	bne	r5,r3,4014e60 <__alt_mem_epcs_flash_controller_0+0xfb013e60>
 4014e9c:	8009883a 	mov	r4,r16
 4014ea0:	dfc00317 	ldw	ra,12(sp)
 4014ea4:	dc000217 	ldw	r16,8(sp)
 4014ea8:	dec00404 	addi	sp,sp,16
 4014eac:	40181601 	jmpi	4018160 <__swbuf_r>
 4014eb0:	d9400015 	stw	r5,0(sp)
 4014eb4:	d9800115 	stw	r6,4(sp)
 4014eb8:	4012e8c0 	call	4012e8c <__sinit>
 4014ebc:	d9800117 	ldw	r6,4(sp)
 4014ec0:	d9400017 	ldw	r5,0(sp)
 4014ec4:	003fdf06 	br	4014e44 <__alt_mem_epcs_flash_controller_0+0xfb013e44>

04014ec8 <putc>:
 4014ec8:	00810234 	movhi	r2,1032
 4014ecc:	defffc04 	addi	sp,sp,-16
 4014ed0:	10be4404 	addi	r2,r2,-1776
 4014ed4:	dc000115 	stw	r16,4(sp)
 4014ed8:	14000017 	ldw	r16,0(r2)
 4014edc:	dc400215 	stw	r17,8(sp)
 4014ee0:	dfc00315 	stw	ra,12(sp)
 4014ee4:	2023883a 	mov	r17,r4
 4014ee8:	80000226 	beq	r16,zero,4014ef4 <putc+0x2c>
 4014eec:	80800e17 	ldw	r2,56(r16)
 4014ef0:	10001a26 	beq	r2,zero,4014f5c <putc+0x94>
 4014ef4:	28800217 	ldw	r2,8(r5)
 4014ef8:	10bfffc4 	addi	r2,r2,-1
 4014efc:	28800215 	stw	r2,8(r5)
 4014f00:	10000b16 	blt	r2,zero,4014f30 <putc+0x68>
 4014f04:	28800017 	ldw	r2,0(r5)
 4014f08:	14400005 	stb	r17,0(r2)
 4014f0c:	28800017 	ldw	r2,0(r5)
 4014f10:	10c00044 	addi	r3,r2,1
 4014f14:	28c00015 	stw	r3,0(r5)
 4014f18:	10800003 	ldbu	r2,0(r2)
 4014f1c:	dfc00317 	ldw	ra,12(sp)
 4014f20:	dc400217 	ldw	r17,8(sp)
 4014f24:	dc000117 	ldw	r16,4(sp)
 4014f28:	dec00404 	addi	sp,sp,16
 4014f2c:	f800283a 	ret
 4014f30:	28c00617 	ldw	r3,24(r5)
 4014f34:	10c00e16 	blt	r2,r3,4014f70 <putc+0xa8>
 4014f38:	28800017 	ldw	r2,0(r5)
 4014f3c:	01000284 	movi	r4,10
 4014f40:	14400005 	stb	r17,0(r2)
 4014f44:	28800017 	ldw	r2,0(r5)
 4014f48:	10c00003 	ldbu	r3,0(r2)
 4014f4c:	193ff01e 	bne	r3,r4,4014f10 <__alt_mem_epcs_flash_controller_0+0xfb013f10>
 4014f50:	280d883a 	mov	r6,r5
 4014f54:	180b883a 	mov	r5,r3
 4014f58:	00000706 	br	4014f78 <putc+0xb0>
 4014f5c:	8009883a 	mov	r4,r16
 4014f60:	d9400015 	stw	r5,0(sp)
 4014f64:	4012e8c0 	call	4012e8c <__sinit>
 4014f68:	d9400017 	ldw	r5,0(sp)
 4014f6c:	003fe106 	br	4014ef4 <__alt_mem_epcs_flash_controller_0+0xfb013ef4>
 4014f70:	280d883a 	mov	r6,r5
 4014f74:	880b883a 	mov	r5,r17
 4014f78:	8009883a 	mov	r4,r16
 4014f7c:	dfc00317 	ldw	ra,12(sp)
 4014f80:	dc400217 	ldw	r17,8(sp)
 4014f84:	dc000117 	ldw	r16,4(sp)
 4014f88:	dec00404 	addi	sp,sp,16
 4014f8c:	40181601 	jmpi	4018160 <__swbuf_r>

04014f90 <_realloc_r>:
 4014f90:	defff604 	addi	sp,sp,-40
 4014f94:	dc800215 	stw	r18,8(sp)
 4014f98:	dfc00915 	stw	ra,36(sp)
 4014f9c:	df000815 	stw	fp,32(sp)
 4014fa0:	ddc00715 	stw	r23,28(sp)
 4014fa4:	dd800615 	stw	r22,24(sp)
 4014fa8:	dd400515 	stw	r21,20(sp)
 4014fac:	dd000415 	stw	r20,16(sp)
 4014fb0:	dcc00315 	stw	r19,12(sp)
 4014fb4:	dc400115 	stw	r17,4(sp)
 4014fb8:	dc000015 	stw	r16,0(sp)
 4014fbc:	3025883a 	mov	r18,r6
 4014fc0:	2800b726 	beq	r5,zero,40152a0 <_realloc_r+0x310>
 4014fc4:	282b883a 	mov	r21,r5
 4014fc8:	2029883a 	mov	r20,r4
 4014fcc:	4019ec80 	call	4019ec8 <__malloc_lock>
 4014fd0:	a8bfff17 	ldw	r2,-4(r21)
 4014fd4:	043fff04 	movi	r16,-4
 4014fd8:	90c002c4 	addi	r3,r18,11
 4014fdc:	01000584 	movi	r4,22
 4014fe0:	acfffe04 	addi	r19,r21,-8
 4014fe4:	1420703a 	and	r16,r2,r16
 4014fe8:	20c0332e 	bgeu	r4,r3,40150b8 <_realloc_r+0x128>
 4014fec:	047ffe04 	movi	r17,-8
 4014ff0:	1c62703a 	and	r17,r3,r17
 4014ff4:	8807883a 	mov	r3,r17
 4014ff8:	88005816 	blt	r17,zero,401515c <_realloc_r+0x1cc>
 4014ffc:	8c805736 	bltu	r17,r18,401515c <_realloc_r+0x1cc>
 4015000:	80c0300e 	bge	r16,r3,40150c4 <_realloc_r+0x134>
 4015004:	07010234 	movhi	fp,1032
 4015008:	e7386b04 	addi	fp,fp,-7764
 401500c:	e1c00217 	ldw	r7,8(fp)
 4015010:	9c09883a 	add	r4,r19,r16
 4015014:	22000117 	ldw	r8,4(r4)
 4015018:	21c06326 	beq	r4,r7,40151a8 <_realloc_r+0x218>
 401501c:	017fff84 	movi	r5,-2
 4015020:	414a703a 	and	r5,r8,r5
 4015024:	214b883a 	add	r5,r4,r5
 4015028:	29800117 	ldw	r6,4(r5)
 401502c:	3180004c 	andi	r6,r6,1
 4015030:	30003f26 	beq	r6,zero,4015130 <_realloc_r+0x1a0>
 4015034:	1080004c 	andi	r2,r2,1
 4015038:	10008326 	beq	r2,zero,4015248 <_realloc_r+0x2b8>
 401503c:	900b883a 	mov	r5,r18
 4015040:	a009883a 	mov	r4,r20
 4015044:	400bad00 	call	400bad0 <_malloc_r>
 4015048:	1025883a 	mov	r18,r2
 401504c:	10011e26 	beq	r2,zero,40154c8 <_realloc_r+0x538>
 4015050:	a93fff17 	ldw	r4,-4(r21)
 4015054:	10fffe04 	addi	r3,r2,-8
 4015058:	00bfff84 	movi	r2,-2
 401505c:	2084703a 	and	r2,r4,r2
 4015060:	9885883a 	add	r2,r19,r2
 4015064:	1880ee26 	beq	r3,r2,4015420 <_realloc_r+0x490>
 4015068:	81bfff04 	addi	r6,r16,-4
 401506c:	00800904 	movi	r2,36
 4015070:	1180b836 	bltu	r2,r6,4015354 <_realloc_r+0x3c4>
 4015074:	00c004c4 	movi	r3,19
 4015078:	19809636 	bltu	r3,r6,40152d4 <_realloc_r+0x344>
 401507c:	9005883a 	mov	r2,r18
 4015080:	a807883a 	mov	r3,r21
 4015084:	19000017 	ldw	r4,0(r3)
 4015088:	11000015 	stw	r4,0(r2)
 401508c:	19000117 	ldw	r4,4(r3)
 4015090:	11000115 	stw	r4,4(r2)
 4015094:	18c00217 	ldw	r3,8(r3)
 4015098:	10c00215 	stw	r3,8(r2)
 401509c:	a80b883a 	mov	r5,r21
 40150a0:	a009883a 	mov	r4,r20
 40150a4:	40130000 	call	4013000 <_free_r>
 40150a8:	a009883a 	mov	r4,r20
 40150ac:	4019eec0 	call	4019eec <__malloc_unlock>
 40150b0:	9005883a 	mov	r2,r18
 40150b4:	00001206 	br	4015100 <_realloc_r+0x170>
 40150b8:	00c00404 	movi	r3,16
 40150bc:	1823883a 	mov	r17,r3
 40150c0:	003fce06 	br	4014ffc <__alt_mem_epcs_flash_controller_0+0xfb013ffc>
 40150c4:	a825883a 	mov	r18,r21
 40150c8:	8445c83a 	sub	r2,r16,r17
 40150cc:	00c003c4 	movi	r3,15
 40150d0:	18802636 	bltu	r3,r2,401516c <_realloc_r+0x1dc>
 40150d4:	99800117 	ldw	r6,4(r19)
 40150d8:	9c07883a 	add	r3,r19,r16
 40150dc:	3180004c 	andi	r6,r6,1
 40150e0:	3420b03a 	or	r16,r6,r16
 40150e4:	9c000115 	stw	r16,4(r19)
 40150e8:	18800117 	ldw	r2,4(r3)
 40150ec:	10800054 	ori	r2,r2,1
 40150f0:	18800115 	stw	r2,4(r3)
 40150f4:	a009883a 	mov	r4,r20
 40150f8:	4019eec0 	call	4019eec <__malloc_unlock>
 40150fc:	9005883a 	mov	r2,r18
 4015100:	dfc00917 	ldw	ra,36(sp)
 4015104:	df000817 	ldw	fp,32(sp)
 4015108:	ddc00717 	ldw	r23,28(sp)
 401510c:	dd800617 	ldw	r22,24(sp)
 4015110:	dd400517 	ldw	r21,20(sp)
 4015114:	dd000417 	ldw	r20,16(sp)
 4015118:	dcc00317 	ldw	r19,12(sp)
 401511c:	dc800217 	ldw	r18,8(sp)
 4015120:	dc400117 	ldw	r17,4(sp)
 4015124:	dc000017 	ldw	r16,0(sp)
 4015128:	dec00a04 	addi	sp,sp,40
 401512c:	f800283a 	ret
 4015130:	017fff04 	movi	r5,-4
 4015134:	414a703a 	and	r5,r8,r5
 4015138:	814d883a 	add	r6,r16,r5
 401513c:	30c01f16 	blt	r6,r3,40151bc <_realloc_r+0x22c>
 4015140:	20800317 	ldw	r2,12(r4)
 4015144:	20c00217 	ldw	r3,8(r4)
 4015148:	a825883a 	mov	r18,r21
 401514c:	3021883a 	mov	r16,r6
 4015150:	18800315 	stw	r2,12(r3)
 4015154:	10c00215 	stw	r3,8(r2)
 4015158:	003fdb06 	br	40150c8 <__alt_mem_epcs_flash_controller_0+0xfb0140c8>
 401515c:	00800304 	movi	r2,12
 4015160:	a0800015 	stw	r2,0(r20)
 4015164:	0005883a 	mov	r2,zero
 4015168:	003fe506 	br	4015100 <__alt_mem_epcs_flash_controller_0+0xfb014100>
 401516c:	98c00117 	ldw	r3,4(r19)
 4015170:	9c4b883a 	add	r5,r19,r17
 4015174:	11000054 	ori	r4,r2,1
 4015178:	18c0004c 	andi	r3,r3,1
 401517c:	1c62b03a 	or	r17,r3,r17
 4015180:	9c400115 	stw	r17,4(r19)
 4015184:	29000115 	stw	r4,4(r5)
 4015188:	2885883a 	add	r2,r5,r2
 401518c:	10c00117 	ldw	r3,4(r2)
 4015190:	29400204 	addi	r5,r5,8
 4015194:	a009883a 	mov	r4,r20
 4015198:	18c00054 	ori	r3,r3,1
 401519c:	10c00115 	stw	r3,4(r2)
 40151a0:	40130000 	call	4013000 <_free_r>
 40151a4:	003fd306 	br	40150f4 <__alt_mem_epcs_flash_controller_0+0xfb0140f4>
 40151a8:	017fff04 	movi	r5,-4
 40151ac:	414a703a 	and	r5,r8,r5
 40151b0:	89800404 	addi	r6,r17,16
 40151b4:	8151883a 	add	r8,r16,r5
 40151b8:	4180590e 	bge	r8,r6,4015320 <_realloc_r+0x390>
 40151bc:	1080004c 	andi	r2,r2,1
 40151c0:	103f9e1e 	bne	r2,zero,401503c <__alt_mem_epcs_flash_controller_0+0xfb01403c>
 40151c4:	adbffe17 	ldw	r22,-8(r21)
 40151c8:	00bfff04 	movi	r2,-4
 40151cc:	9dadc83a 	sub	r22,r19,r22
 40151d0:	b1800117 	ldw	r6,4(r22)
 40151d4:	3084703a 	and	r2,r6,r2
 40151d8:	20002026 	beq	r4,zero,401525c <_realloc_r+0x2cc>
 40151dc:	80af883a 	add	r23,r16,r2
 40151e0:	b96f883a 	add	r23,r23,r5
 40151e4:	21c05f26 	beq	r4,r7,4015364 <_realloc_r+0x3d4>
 40151e8:	b8c01c16 	blt	r23,r3,401525c <_realloc_r+0x2cc>
 40151ec:	20800317 	ldw	r2,12(r4)
 40151f0:	20c00217 	ldw	r3,8(r4)
 40151f4:	81bfff04 	addi	r6,r16,-4
 40151f8:	01000904 	movi	r4,36
 40151fc:	18800315 	stw	r2,12(r3)
 4015200:	10c00215 	stw	r3,8(r2)
 4015204:	b0c00217 	ldw	r3,8(r22)
 4015208:	b0800317 	ldw	r2,12(r22)
 401520c:	b4800204 	addi	r18,r22,8
 4015210:	18800315 	stw	r2,12(r3)
 4015214:	10c00215 	stw	r3,8(r2)
 4015218:	21801b36 	bltu	r4,r6,4015288 <_realloc_r+0x2f8>
 401521c:	008004c4 	movi	r2,19
 4015220:	1180352e 	bgeu	r2,r6,40152f8 <_realloc_r+0x368>
 4015224:	a8800017 	ldw	r2,0(r21)
 4015228:	b0800215 	stw	r2,8(r22)
 401522c:	a8800117 	ldw	r2,4(r21)
 4015230:	b0800315 	stw	r2,12(r22)
 4015234:	008006c4 	movi	r2,27
 4015238:	11807f36 	bltu	r2,r6,4015438 <_realloc_r+0x4a8>
 401523c:	b0800404 	addi	r2,r22,16
 4015240:	ad400204 	addi	r21,r21,8
 4015244:	00002d06 	br	40152fc <_realloc_r+0x36c>
 4015248:	adbffe17 	ldw	r22,-8(r21)
 401524c:	00bfff04 	movi	r2,-4
 4015250:	9dadc83a 	sub	r22,r19,r22
 4015254:	b1000117 	ldw	r4,4(r22)
 4015258:	2084703a 	and	r2,r4,r2
 401525c:	b03f7726 	beq	r22,zero,401503c <__alt_mem_epcs_flash_controller_0+0xfb01403c>
 4015260:	80af883a 	add	r23,r16,r2
 4015264:	b8ff7516 	blt	r23,r3,401503c <__alt_mem_epcs_flash_controller_0+0xfb01403c>
 4015268:	b0800317 	ldw	r2,12(r22)
 401526c:	b0c00217 	ldw	r3,8(r22)
 4015270:	81bfff04 	addi	r6,r16,-4
 4015274:	01000904 	movi	r4,36
 4015278:	18800315 	stw	r2,12(r3)
 401527c:	10c00215 	stw	r3,8(r2)
 4015280:	b4800204 	addi	r18,r22,8
 4015284:	21bfe52e 	bgeu	r4,r6,401521c <__alt_mem_epcs_flash_controller_0+0xfb01421c>
 4015288:	a80b883a 	mov	r5,r21
 401528c:	9009883a 	mov	r4,r18
 4015290:	4013cd00 	call	4013cd0 <memmove>
 4015294:	b821883a 	mov	r16,r23
 4015298:	b027883a 	mov	r19,r22
 401529c:	003f8a06 	br	40150c8 <__alt_mem_epcs_flash_controller_0+0xfb0140c8>
 40152a0:	300b883a 	mov	r5,r6
 40152a4:	dfc00917 	ldw	ra,36(sp)
 40152a8:	df000817 	ldw	fp,32(sp)
 40152ac:	ddc00717 	ldw	r23,28(sp)
 40152b0:	dd800617 	ldw	r22,24(sp)
 40152b4:	dd400517 	ldw	r21,20(sp)
 40152b8:	dd000417 	ldw	r20,16(sp)
 40152bc:	dcc00317 	ldw	r19,12(sp)
 40152c0:	dc800217 	ldw	r18,8(sp)
 40152c4:	dc400117 	ldw	r17,4(sp)
 40152c8:	dc000017 	ldw	r16,0(sp)
 40152cc:	dec00a04 	addi	sp,sp,40
 40152d0:	400bad01 	jmpi	400bad0 <_malloc_r>
 40152d4:	a8c00017 	ldw	r3,0(r21)
 40152d8:	90c00015 	stw	r3,0(r18)
 40152dc:	a8c00117 	ldw	r3,4(r21)
 40152e0:	90c00115 	stw	r3,4(r18)
 40152e4:	00c006c4 	movi	r3,27
 40152e8:	19804536 	bltu	r3,r6,4015400 <_realloc_r+0x470>
 40152ec:	90800204 	addi	r2,r18,8
 40152f0:	a8c00204 	addi	r3,r21,8
 40152f4:	003f6306 	br	4015084 <__alt_mem_epcs_flash_controller_0+0xfb014084>
 40152f8:	9005883a 	mov	r2,r18
 40152fc:	a8c00017 	ldw	r3,0(r21)
 4015300:	b821883a 	mov	r16,r23
 4015304:	b027883a 	mov	r19,r22
 4015308:	10c00015 	stw	r3,0(r2)
 401530c:	a8c00117 	ldw	r3,4(r21)
 4015310:	10c00115 	stw	r3,4(r2)
 4015314:	a8c00217 	ldw	r3,8(r21)
 4015318:	10c00215 	stw	r3,8(r2)
 401531c:	003f6a06 	br	40150c8 <__alt_mem_epcs_flash_controller_0+0xfb0140c8>
 4015320:	9c67883a 	add	r19,r19,r17
 4015324:	4445c83a 	sub	r2,r8,r17
 4015328:	e4c00215 	stw	r19,8(fp)
 401532c:	10800054 	ori	r2,r2,1
 4015330:	98800115 	stw	r2,4(r19)
 4015334:	a8bfff17 	ldw	r2,-4(r21)
 4015338:	a009883a 	mov	r4,r20
 401533c:	1080004c 	andi	r2,r2,1
 4015340:	1462b03a 	or	r17,r2,r17
 4015344:	ac7fff15 	stw	r17,-4(r21)
 4015348:	4019eec0 	call	4019eec <__malloc_unlock>
 401534c:	a805883a 	mov	r2,r21
 4015350:	003f6b06 	br	4015100 <__alt_mem_epcs_flash_controller_0+0xfb014100>
 4015354:	a80b883a 	mov	r5,r21
 4015358:	9009883a 	mov	r4,r18
 401535c:	4013cd00 	call	4013cd0 <memmove>
 4015360:	003f4e06 	br	401509c <__alt_mem_epcs_flash_controller_0+0xfb01409c>
 4015364:	89000404 	addi	r4,r17,16
 4015368:	b93fbc16 	blt	r23,r4,401525c <__alt_mem_epcs_flash_controller_0+0xfb01425c>
 401536c:	b0800317 	ldw	r2,12(r22)
 4015370:	b0c00217 	ldw	r3,8(r22)
 4015374:	81bfff04 	addi	r6,r16,-4
 4015378:	01000904 	movi	r4,36
 401537c:	18800315 	stw	r2,12(r3)
 4015380:	10c00215 	stw	r3,8(r2)
 4015384:	b4800204 	addi	r18,r22,8
 4015388:	21804336 	bltu	r4,r6,4015498 <_realloc_r+0x508>
 401538c:	008004c4 	movi	r2,19
 4015390:	11803f2e 	bgeu	r2,r6,4015490 <_realloc_r+0x500>
 4015394:	a8800017 	ldw	r2,0(r21)
 4015398:	b0800215 	stw	r2,8(r22)
 401539c:	a8800117 	ldw	r2,4(r21)
 40153a0:	b0800315 	stw	r2,12(r22)
 40153a4:	008006c4 	movi	r2,27
 40153a8:	11803f36 	bltu	r2,r6,40154a8 <_realloc_r+0x518>
 40153ac:	b0800404 	addi	r2,r22,16
 40153b0:	ad400204 	addi	r21,r21,8
 40153b4:	a8c00017 	ldw	r3,0(r21)
 40153b8:	10c00015 	stw	r3,0(r2)
 40153bc:	a8c00117 	ldw	r3,4(r21)
 40153c0:	10c00115 	stw	r3,4(r2)
 40153c4:	a8c00217 	ldw	r3,8(r21)
 40153c8:	10c00215 	stw	r3,8(r2)
 40153cc:	b447883a 	add	r3,r22,r17
 40153d0:	bc45c83a 	sub	r2,r23,r17
 40153d4:	e0c00215 	stw	r3,8(fp)
 40153d8:	10800054 	ori	r2,r2,1
 40153dc:	18800115 	stw	r2,4(r3)
 40153e0:	b0800117 	ldw	r2,4(r22)
 40153e4:	a009883a 	mov	r4,r20
 40153e8:	1080004c 	andi	r2,r2,1
 40153ec:	1462b03a 	or	r17,r2,r17
 40153f0:	b4400115 	stw	r17,4(r22)
 40153f4:	4019eec0 	call	4019eec <__malloc_unlock>
 40153f8:	9005883a 	mov	r2,r18
 40153fc:	003f4006 	br	4015100 <__alt_mem_epcs_flash_controller_0+0xfb014100>
 4015400:	a8c00217 	ldw	r3,8(r21)
 4015404:	90c00215 	stw	r3,8(r18)
 4015408:	a8c00317 	ldw	r3,12(r21)
 401540c:	90c00315 	stw	r3,12(r18)
 4015410:	30801126 	beq	r6,r2,4015458 <_realloc_r+0x4c8>
 4015414:	90800404 	addi	r2,r18,16
 4015418:	a8c00404 	addi	r3,r21,16
 401541c:	003f1906 	br	4015084 <__alt_mem_epcs_flash_controller_0+0xfb014084>
 4015420:	90ffff17 	ldw	r3,-4(r18)
 4015424:	00bfff04 	movi	r2,-4
 4015428:	a825883a 	mov	r18,r21
 401542c:	1884703a 	and	r2,r3,r2
 4015430:	80a1883a 	add	r16,r16,r2
 4015434:	003f2406 	br	40150c8 <__alt_mem_epcs_flash_controller_0+0xfb0140c8>
 4015438:	a8800217 	ldw	r2,8(r21)
 401543c:	b0800415 	stw	r2,16(r22)
 4015440:	a8800317 	ldw	r2,12(r21)
 4015444:	b0800515 	stw	r2,20(r22)
 4015448:	31000a26 	beq	r6,r4,4015474 <_realloc_r+0x4e4>
 401544c:	b0800604 	addi	r2,r22,24
 4015450:	ad400404 	addi	r21,r21,16
 4015454:	003fa906 	br	40152fc <__alt_mem_epcs_flash_controller_0+0xfb0142fc>
 4015458:	a9000417 	ldw	r4,16(r21)
 401545c:	90800604 	addi	r2,r18,24
 4015460:	a8c00604 	addi	r3,r21,24
 4015464:	91000415 	stw	r4,16(r18)
 4015468:	a9000517 	ldw	r4,20(r21)
 401546c:	91000515 	stw	r4,20(r18)
 4015470:	003f0406 	br	4015084 <__alt_mem_epcs_flash_controller_0+0xfb014084>
 4015474:	a8c00417 	ldw	r3,16(r21)
 4015478:	ad400604 	addi	r21,r21,24
 401547c:	b0800804 	addi	r2,r22,32
 4015480:	b0c00615 	stw	r3,24(r22)
 4015484:	a8ffff17 	ldw	r3,-4(r21)
 4015488:	b0c00715 	stw	r3,28(r22)
 401548c:	003f9b06 	br	40152fc <__alt_mem_epcs_flash_controller_0+0xfb0142fc>
 4015490:	9005883a 	mov	r2,r18
 4015494:	003fc706 	br	40153b4 <__alt_mem_epcs_flash_controller_0+0xfb0143b4>
 4015498:	a80b883a 	mov	r5,r21
 401549c:	9009883a 	mov	r4,r18
 40154a0:	4013cd00 	call	4013cd0 <memmove>
 40154a4:	003fc906 	br	40153cc <__alt_mem_epcs_flash_controller_0+0xfb0143cc>
 40154a8:	a8800217 	ldw	r2,8(r21)
 40154ac:	b0800415 	stw	r2,16(r22)
 40154b0:	a8800317 	ldw	r2,12(r21)
 40154b4:	b0800515 	stw	r2,20(r22)
 40154b8:	31000726 	beq	r6,r4,40154d8 <_realloc_r+0x548>
 40154bc:	b0800604 	addi	r2,r22,24
 40154c0:	ad400404 	addi	r21,r21,16
 40154c4:	003fbb06 	br	40153b4 <__alt_mem_epcs_flash_controller_0+0xfb0143b4>
 40154c8:	a009883a 	mov	r4,r20
 40154cc:	4019eec0 	call	4019eec <__malloc_unlock>
 40154d0:	0005883a 	mov	r2,zero
 40154d4:	003f0a06 	br	4015100 <__alt_mem_epcs_flash_controller_0+0xfb014100>
 40154d8:	a8c00417 	ldw	r3,16(r21)
 40154dc:	ad400604 	addi	r21,r21,24
 40154e0:	b0800804 	addi	r2,r22,32
 40154e4:	b0c00615 	stw	r3,24(r22)
 40154e8:	a8ffff17 	ldw	r3,-4(r21)
 40154ec:	b0c00715 	stw	r3,28(r22)
 40154f0:	003fb006 	br	40153b4 <__alt_mem_epcs_flash_controller_0+0xfb0143b4>

040154f4 <__sread>:
 40154f4:	defffe04 	addi	sp,sp,-8
 40154f8:	dc000015 	stw	r16,0(sp)
 40154fc:	2821883a 	mov	r16,r5
 4015500:	2940038f 	ldh	r5,14(r5)
 4015504:	dfc00115 	stw	ra,4(sp)
 4015508:	401884c0 	call	401884c <_read_r>
 401550c:	10000716 	blt	r2,zero,401552c <__sread+0x38>
 4015510:	80c01417 	ldw	r3,80(r16)
 4015514:	1887883a 	add	r3,r3,r2
 4015518:	80c01415 	stw	r3,80(r16)
 401551c:	dfc00117 	ldw	ra,4(sp)
 4015520:	dc000017 	ldw	r16,0(sp)
 4015524:	dec00204 	addi	sp,sp,8
 4015528:	f800283a 	ret
 401552c:	80c0030b 	ldhu	r3,12(r16)
 4015530:	18fbffcc 	andi	r3,r3,61439
 4015534:	80c0030d 	sth	r3,12(r16)
 4015538:	dfc00117 	ldw	ra,4(sp)
 401553c:	dc000017 	ldw	r16,0(sp)
 4015540:	dec00204 	addi	sp,sp,8
 4015544:	f800283a 	ret

04015548 <__seofread>:
 4015548:	0005883a 	mov	r2,zero
 401554c:	f800283a 	ret

04015550 <__swrite>:
 4015550:	2880030b 	ldhu	r2,12(r5)
 4015554:	defffb04 	addi	sp,sp,-20
 4015558:	dcc00315 	stw	r19,12(sp)
 401555c:	dc800215 	stw	r18,8(sp)
 4015560:	dc400115 	stw	r17,4(sp)
 4015564:	dc000015 	stw	r16,0(sp)
 4015568:	dfc00415 	stw	ra,16(sp)
 401556c:	10c0400c 	andi	r3,r2,256
 4015570:	2821883a 	mov	r16,r5
 4015574:	2023883a 	mov	r17,r4
 4015578:	3025883a 	mov	r18,r6
 401557c:	3827883a 	mov	r19,r7
 4015580:	18000526 	beq	r3,zero,4015598 <__swrite+0x48>
 4015584:	2940038f 	ldh	r5,14(r5)
 4015588:	01c00084 	movi	r7,2
 401558c:	000d883a 	mov	r6,zero
 4015590:	40187ec0 	call	40187ec <_lseek_r>
 4015594:	8080030b 	ldhu	r2,12(r16)
 4015598:	8140038f 	ldh	r5,14(r16)
 401559c:	10bbffcc 	andi	r2,r2,61439
 40155a0:	980f883a 	mov	r7,r19
 40155a4:	900d883a 	mov	r6,r18
 40155a8:	8809883a 	mov	r4,r17
 40155ac:	8080030d 	sth	r2,12(r16)
 40155b0:	dfc00417 	ldw	ra,16(sp)
 40155b4:	dcc00317 	ldw	r19,12(sp)
 40155b8:	dc800217 	ldw	r18,8(sp)
 40155bc:	dc400117 	ldw	r17,4(sp)
 40155c0:	dc000017 	ldw	r16,0(sp)
 40155c4:	dec00504 	addi	sp,sp,20
 40155c8:	40182b81 	jmpi	40182b8 <_write_r>

040155cc <__sseek>:
 40155cc:	defffe04 	addi	sp,sp,-8
 40155d0:	dc000015 	stw	r16,0(sp)
 40155d4:	2821883a 	mov	r16,r5
 40155d8:	2940038f 	ldh	r5,14(r5)
 40155dc:	dfc00115 	stw	ra,4(sp)
 40155e0:	40187ec0 	call	40187ec <_lseek_r>
 40155e4:	00ffffc4 	movi	r3,-1
 40155e8:	10c00826 	beq	r2,r3,401560c <__sseek+0x40>
 40155ec:	80c0030b 	ldhu	r3,12(r16)
 40155f0:	80801415 	stw	r2,80(r16)
 40155f4:	18c40014 	ori	r3,r3,4096
 40155f8:	80c0030d 	sth	r3,12(r16)
 40155fc:	dfc00117 	ldw	ra,4(sp)
 4015600:	dc000017 	ldw	r16,0(sp)
 4015604:	dec00204 	addi	sp,sp,8
 4015608:	f800283a 	ret
 401560c:	80c0030b 	ldhu	r3,12(r16)
 4015610:	18fbffcc 	andi	r3,r3,61439
 4015614:	80c0030d 	sth	r3,12(r16)
 4015618:	dfc00117 	ldw	ra,4(sp)
 401561c:	dc000017 	ldw	r16,0(sp)
 4015620:	dec00204 	addi	sp,sp,8
 4015624:	f800283a 	ret

04015628 <__sclose>:
 4015628:	2940038f 	ldh	r5,14(r5)
 401562c:	40183181 	jmpi	4018318 <_close_r>

04015630 <strcmp>:
 4015630:	2144b03a 	or	r2,r4,r5
 4015634:	108000cc 	andi	r2,r2,3
 4015638:	1000171e 	bne	r2,zero,4015698 <strcmp+0x68>
 401563c:	20800017 	ldw	r2,0(r4)
 4015640:	28c00017 	ldw	r3,0(r5)
 4015644:	10c0141e 	bne	r2,r3,4015698 <strcmp+0x68>
 4015648:	027fbff4 	movhi	r9,65279
 401564c:	4a7fbfc4 	addi	r9,r9,-257
 4015650:	0086303a 	nor	r3,zero,r2
 4015654:	02202074 	movhi	r8,32897
 4015658:	1245883a 	add	r2,r2,r9
 401565c:	42202004 	addi	r8,r8,-32640
 4015660:	10c4703a 	and	r2,r2,r3
 4015664:	1204703a 	and	r2,r2,r8
 4015668:	10000226 	beq	r2,zero,4015674 <strcmp+0x44>
 401566c:	00002306 	br	40156fc <strcmp+0xcc>
 4015670:	1000221e 	bne	r2,zero,40156fc <strcmp+0xcc>
 4015674:	21000104 	addi	r4,r4,4
 4015678:	20c00017 	ldw	r3,0(r4)
 401567c:	29400104 	addi	r5,r5,4
 4015680:	29800017 	ldw	r6,0(r5)
 4015684:	1a4f883a 	add	r7,r3,r9
 4015688:	00c4303a 	nor	r2,zero,r3
 401568c:	3884703a 	and	r2,r7,r2
 4015690:	1204703a 	and	r2,r2,r8
 4015694:	19bff626 	beq	r3,r6,4015670 <__alt_mem_epcs_flash_controller_0+0xfb014670>
 4015698:	20800003 	ldbu	r2,0(r4)
 401569c:	10c03fcc 	andi	r3,r2,255
 40156a0:	18c0201c 	xori	r3,r3,128
 40156a4:	18ffe004 	addi	r3,r3,-128
 40156a8:	18000c26 	beq	r3,zero,40156dc <strcmp+0xac>
 40156ac:	29800007 	ldb	r6,0(r5)
 40156b0:	19800326 	beq	r3,r6,40156c0 <strcmp+0x90>
 40156b4:	00001306 	br	4015704 <strcmp+0xd4>
 40156b8:	29800007 	ldb	r6,0(r5)
 40156bc:	11800b1e 	bne	r2,r6,40156ec <strcmp+0xbc>
 40156c0:	21000044 	addi	r4,r4,1
 40156c4:	20c00003 	ldbu	r3,0(r4)
 40156c8:	29400044 	addi	r5,r5,1
 40156cc:	18803fcc 	andi	r2,r3,255
 40156d0:	1080201c 	xori	r2,r2,128
 40156d4:	10bfe004 	addi	r2,r2,-128
 40156d8:	103ff71e 	bne	r2,zero,40156b8 <__alt_mem_epcs_flash_controller_0+0xfb0146b8>
 40156dc:	0007883a 	mov	r3,zero
 40156e0:	28800003 	ldbu	r2,0(r5)
 40156e4:	1885c83a 	sub	r2,r3,r2
 40156e8:	f800283a 	ret
 40156ec:	28800003 	ldbu	r2,0(r5)
 40156f0:	18c03fcc 	andi	r3,r3,255
 40156f4:	1885c83a 	sub	r2,r3,r2
 40156f8:	f800283a 	ret
 40156fc:	0005883a 	mov	r2,zero
 4015700:	f800283a 	ret
 4015704:	10c03fcc 	andi	r3,r2,255
 4015708:	003ff506 	br	40156e0 <__alt_mem_epcs_flash_controller_0+0xfb0146e0>

0401570c <__ssprint_r>:
 401570c:	30800217 	ldw	r2,8(r6)
 4015710:	defff604 	addi	sp,sp,-40
 4015714:	dc800215 	stw	r18,8(sp)
 4015718:	dfc00915 	stw	ra,36(sp)
 401571c:	df000815 	stw	fp,32(sp)
 4015720:	ddc00715 	stw	r23,28(sp)
 4015724:	dd800615 	stw	r22,24(sp)
 4015728:	dd400515 	stw	r21,20(sp)
 401572c:	dd000415 	stw	r20,16(sp)
 4015730:	dcc00315 	stw	r19,12(sp)
 4015734:	dc400115 	stw	r17,4(sp)
 4015738:	dc000015 	stw	r16,0(sp)
 401573c:	3025883a 	mov	r18,r6
 4015740:	10005826 	beq	r2,zero,40158a4 <__ssprint_r+0x198>
 4015744:	2027883a 	mov	r19,r4
 4015748:	35c00017 	ldw	r23,0(r6)
 401574c:	29000017 	ldw	r4,0(r5)
 4015750:	28800217 	ldw	r2,8(r5)
 4015754:	2823883a 	mov	r17,r5
 4015758:	0039883a 	mov	fp,zero
 401575c:	0021883a 	mov	r16,zero
 4015760:	80003926 	beq	r16,zero,4015848 <__ssprint_r+0x13c>
 4015764:	102b883a 	mov	r21,r2
 4015768:	102d883a 	mov	r22,r2
 401576c:	80803a36 	bltu	r16,r2,4015858 <__ssprint_r+0x14c>
 4015770:	88c0030b 	ldhu	r3,12(r17)
 4015774:	1881200c 	andi	r2,r3,1152
 4015778:	10002626 	beq	r2,zero,4015814 <__ssprint_r+0x108>
 401577c:	88800517 	ldw	r2,20(r17)
 4015780:	89400417 	ldw	r5,16(r17)
 4015784:	81800044 	addi	r6,r16,1
 4015788:	108f883a 	add	r7,r2,r2
 401578c:	3885883a 	add	r2,r7,r2
 4015790:	100ed7fa 	srli	r7,r2,31
 4015794:	216dc83a 	sub	r22,r4,r5
 4015798:	3589883a 	add	r4,r6,r22
 401579c:	3885883a 	add	r2,r7,r2
 40157a0:	102bd07a 	srai	r21,r2,1
 40157a4:	a80d883a 	mov	r6,r21
 40157a8:	a900022e 	bgeu	r21,r4,40157b4 <__ssprint_r+0xa8>
 40157ac:	202b883a 	mov	r21,r4
 40157b0:	200d883a 	mov	r6,r4
 40157b4:	18c1000c 	andi	r3,r3,1024
 40157b8:	18002a26 	beq	r3,zero,4015864 <__ssprint_r+0x158>
 40157bc:	300b883a 	mov	r5,r6
 40157c0:	9809883a 	mov	r4,r19
 40157c4:	400bad00 	call	400bad0 <_malloc_r>
 40157c8:	1029883a 	mov	r20,r2
 40157cc:	10002c26 	beq	r2,zero,4015880 <__ssprint_r+0x174>
 40157d0:	89400417 	ldw	r5,16(r17)
 40157d4:	b00d883a 	mov	r6,r22
 40157d8:	1009883a 	mov	r4,r2
 40157dc:	400c2dc0 	call	400c2dc <memcpy>
 40157e0:	8880030b 	ldhu	r2,12(r17)
 40157e4:	00fedfc4 	movi	r3,-1153
 40157e8:	10c4703a 	and	r2,r2,r3
 40157ec:	10802014 	ori	r2,r2,128
 40157f0:	8880030d 	sth	r2,12(r17)
 40157f4:	a589883a 	add	r4,r20,r22
 40157f8:	adadc83a 	sub	r22,r21,r22
 40157fc:	8d400515 	stw	r21,20(r17)
 4015800:	8d800215 	stw	r22,8(r17)
 4015804:	8d000415 	stw	r20,16(r17)
 4015808:	89000015 	stw	r4,0(r17)
 401580c:	802b883a 	mov	r21,r16
 4015810:	802d883a 	mov	r22,r16
 4015814:	b00d883a 	mov	r6,r22
 4015818:	e00b883a 	mov	r5,fp
 401581c:	4013cd00 	call	4013cd0 <memmove>
 4015820:	88800217 	ldw	r2,8(r17)
 4015824:	89000017 	ldw	r4,0(r17)
 4015828:	90c00217 	ldw	r3,8(r18)
 401582c:	1545c83a 	sub	r2,r2,r21
 4015830:	2589883a 	add	r4,r4,r22
 4015834:	88800215 	stw	r2,8(r17)
 4015838:	89000015 	stw	r4,0(r17)
 401583c:	1c21c83a 	sub	r16,r3,r16
 4015840:	94000215 	stw	r16,8(r18)
 4015844:	80001726 	beq	r16,zero,40158a4 <__ssprint_r+0x198>
 4015848:	bf000017 	ldw	fp,0(r23)
 401584c:	bc000117 	ldw	r16,4(r23)
 4015850:	bdc00204 	addi	r23,r23,8
 4015854:	003fc206 	br	4015760 <__alt_mem_epcs_flash_controller_0+0xfb014760>
 4015858:	802b883a 	mov	r21,r16
 401585c:	802d883a 	mov	r22,r16
 4015860:	003fec06 	br	4015814 <__alt_mem_epcs_flash_controller_0+0xfb014814>
 4015864:	9809883a 	mov	r4,r19
 4015868:	4014f900 	call	4014f90 <_realloc_r>
 401586c:	1029883a 	mov	r20,r2
 4015870:	103fe01e 	bne	r2,zero,40157f4 <__alt_mem_epcs_flash_controller_0+0xfb0147f4>
 4015874:	89400417 	ldw	r5,16(r17)
 4015878:	9809883a 	mov	r4,r19
 401587c:	40130000 	call	4013000 <_free_r>
 4015880:	88c0030b 	ldhu	r3,12(r17)
 4015884:	00800304 	movi	r2,12
 4015888:	98800015 	stw	r2,0(r19)
 401588c:	18c01014 	ori	r3,r3,64
 4015890:	88c0030d 	sth	r3,12(r17)
 4015894:	00bfffc4 	movi	r2,-1
 4015898:	90000215 	stw	zero,8(r18)
 401589c:	90000115 	stw	zero,4(r18)
 40158a0:	00000206 	br	40158ac <__ssprint_r+0x1a0>
 40158a4:	90000115 	stw	zero,4(r18)
 40158a8:	0005883a 	mov	r2,zero
 40158ac:	dfc00917 	ldw	ra,36(sp)
 40158b0:	df000817 	ldw	fp,32(sp)
 40158b4:	ddc00717 	ldw	r23,28(sp)
 40158b8:	dd800617 	ldw	r22,24(sp)
 40158bc:	dd400517 	ldw	r21,20(sp)
 40158c0:	dd000417 	ldw	r20,16(sp)
 40158c4:	dcc00317 	ldw	r19,12(sp)
 40158c8:	dc800217 	ldw	r18,8(sp)
 40158cc:	dc400117 	ldw	r17,4(sp)
 40158d0:	dc000017 	ldw	r16,0(sp)
 40158d4:	dec00a04 	addi	sp,sp,40
 40158d8:	f800283a 	ret

040158dc <___svfiprintf_internal_r>:
 40158dc:	2880030b 	ldhu	r2,12(r5)
 40158e0:	deffc804 	addi	sp,sp,-224
 40158e4:	dcc03115 	stw	r19,196(sp)
 40158e8:	dfc03715 	stw	ra,220(sp)
 40158ec:	df003615 	stw	fp,216(sp)
 40158f0:	ddc03515 	stw	r23,212(sp)
 40158f4:	dd803415 	stw	r22,208(sp)
 40158f8:	dd403315 	stw	r21,204(sp)
 40158fc:	dd003215 	stw	r20,200(sp)
 4015900:	dc803015 	stw	r18,192(sp)
 4015904:	dc402f15 	stw	r17,188(sp)
 4015908:	dc002e15 	stw	r16,184(sp)
 401590c:	d9402715 	stw	r5,156(sp)
 4015910:	d9002a15 	stw	r4,168(sp)
 4015914:	1080200c 	andi	r2,r2,128
 4015918:	d9c02315 	stw	r7,140(sp)
 401591c:	3027883a 	mov	r19,r6
 4015920:	10000226 	beq	r2,zero,401592c <___svfiprintf_internal_r+0x50>
 4015924:	28800417 	ldw	r2,16(r5)
 4015928:	10041d26 	beq	r2,zero,40169a0 <___svfiprintf_internal_r+0x10c4>
 401592c:	dac01a04 	addi	r11,sp,104
 4015930:	dac01e15 	stw	r11,120(sp)
 4015934:	d8801e17 	ldw	r2,120(sp)
 4015938:	dac019c4 	addi	r11,sp,103
 401593c:	dd402a17 	ldw	r21,168(sp)
 4015940:	ddc02717 	ldw	r23,156(sp)
 4015944:	05810234 	movhi	r22,1032
 4015948:	05010234 	movhi	r20,1032
 401594c:	dac01f15 	stw	r11,124(sp)
 4015950:	12d7c83a 	sub	r11,r2,r11
 4015954:	b5b05404 	addi	r22,r22,-16048
 4015958:	a5305004 	addi	r20,r20,-16064
 401595c:	dec01a15 	stw	sp,104(sp)
 4015960:	d8001c15 	stw	zero,112(sp)
 4015964:	d8001b15 	stw	zero,108(sp)
 4015968:	d811883a 	mov	r8,sp
 401596c:	d8002915 	stw	zero,164(sp)
 4015970:	d8002515 	stw	zero,148(sp)
 4015974:	dac02b15 	stw	r11,172(sp)
 4015978:	98800007 	ldb	r2,0(r19)
 401597c:	1002dd26 	beq	r2,zero,40164f4 <___svfiprintf_internal_r+0xc18>
 4015980:	00c00944 	movi	r3,37
 4015984:	9823883a 	mov	r17,r19
 4015988:	10c0021e 	bne	r2,r3,4015994 <___svfiprintf_internal_r+0xb8>
 401598c:	00001406 	br	40159e0 <___svfiprintf_internal_r+0x104>
 4015990:	10c00326 	beq	r2,r3,40159a0 <___svfiprintf_internal_r+0xc4>
 4015994:	8c400044 	addi	r17,r17,1
 4015998:	88800007 	ldb	r2,0(r17)
 401599c:	103ffc1e 	bne	r2,zero,4015990 <__alt_mem_epcs_flash_controller_0+0xfb014990>
 40159a0:	8ce1c83a 	sub	r16,r17,r19
 40159a4:	80000e26 	beq	r16,zero,40159e0 <___svfiprintf_internal_r+0x104>
 40159a8:	d8c01c17 	ldw	r3,112(sp)
 40159ac:	d8801b17 	ldw	r2,108(sp)
 40159b0:	44c00015 	stw	r19,0(r8)
 40159b4:	1c07883a 	add	r3,r3,r16
 40159b8:	10800044 	addi	r2,r2,1
 40159bc:	d8c01c15 	stw	r3,112(sp)
 40159c0:	44000115 	stw	r16,4(r8)
 40159c4:	d8801b15 	stw	r2,108(sp)
 40159c8:	00c001c4 	movi	r3,7
 40159cc:	18831e16 	blt	r3,r2,4016648 <___svfiprintf_internal_r+0xd6c>
 40159d0:	42000204 	addi	r8,r8,8
 40159d4:	dac02517 	ldw	r11,148(sp)
 40159d8:	5c17883a 	add	r11,r11,r16
 40159dc:	dac02515 	stw	r11,148(sp)
 40159e0:	88800007 	ldb	r2,0(r17)
 40159e4:	1002c526 	beq	r2,zero,40164fc <___svfiprintf_internal_r+0xc20>
 40159e8:	88c00047 	ldb	r3,1(r17)
 40159ec:	8cc00044 	addi	r19,r17,1
 40159f0:	d8001d85 	stb	zero,118(sp)
 40159f4:	0009883a 	mov	r4,zero
 40159f8:	000f883a 	mov	r7,zero
 40159fc:	043fffc4 	movi	r16,-1
 4015a00:	d8002415 	stw	zero,144(sp)
 4015a04:	0025883a 	mov	r18,zero
 4015a08:	01401604 	movi	r5,88
 4015a0c:	01800244 	movi	r6,9
 4015a10:	02800a84 	movi	r10,42
 4015a14:	02401b04 	movi	r9,108
 4015a18:	9cc00044 	addi	r19,r19,1
 4015a1c:	18bff804 	addi	r2,r3,-32
 4015a20:	2881dd36 	bltu	r5,r2,4016198 <___svfiprintf_internal_r+0x8bc>
 4015a24:	100490ba 	slli	r2,r2,2
 4015a28:	02c10074 	movhi	r11,1025
 4015a2c:	5ad68f04 	addi	r11,r11,23100
 4015a30:	12c5883a 	add	r2,r2,r11
 4015a34:	10800017 	ldw	r2,0(r2)
 4015a38:	1000683a 	jmp	r2
 4015a3c:	04015c38 	rdprs	r16,zero,1392
 4015a40:	04016198 	cmpnei	r16,zero,1414
 4015a44:	04016198 	cmpnei	r16,zero,1414
 4015a48:	04015c2c 	andhi	r16,zero,1392
 4015a4c:	04016198 	cmpnei	r16,zero,1414
 4015a50:	04016198 	cmpnei	r16,zero,1414
 4015a54:	04016198 	cmpnei	r16,zero,1414
 4015a58:	04016198 	cmpnei	r16,zero,1414
 4015a5c:	04016198 	cmpnei	r16,zero,1414
 4015a60:	04016198 	cmpnei	r16,zero,1414
 4015a64:	04015ba0 	cmpeqi	r16,zero,1390
 4015a68:	04015d7c 	xorhi	r16,zero,1397
 4015a6c:	04016198 	cmpnei	r16,zero,1414
 4015a70:	04015bcc 	andi	r16,zero,1391
 4015a74:	040161cc 	andi	r16,zero,1415
 4015a78:	04016198 	cmpnei	r16,zero,1414
 4015a7c:	040161c0 	call	40161c <__alt_mem_sdram-0x3bfe9e4>
 4015a80:	04016160 	cmpeqi	r16,zero,1413
 4015a84:	04016160 	cmpeqi	r16,zero,1413
 4015a88:	04016160 	cmpeqi	r16,zero,1413
 4015a8c:	04016160 	cmpeqi	r16,zero,1413
 4015a90:	04016160 	cmpeqi	r16,zero,1413
 4015a94:	04016160 	cmpeqi	r16,zero,1413
 4015a98:	04016160 	cmpeqi	r16,zero,1413
 4015a9c:	04016160 	cmpeqi	r16,zero,1413
 4015aa0:	04016160 	cmpeqi	r16,zero,1413
 4015aa4:	04016198 	cmpnei	r16,zero,1414
 4015aa8:	04016198 	cmpnei	r16,zero,1414
 4015aac:	04016198 	cmpnei	r16,zero,1414
 4015ab0:	04016198 	cmpnei	r16,zero,1414
 4015ab4:	04016198 	cmpnei	r16,zero,1414
 4015ab8:	04016198 	cmpnei	r16,zero,1414
 4015abc:	04016198 	cmpnei	r16,zero,1414
 4015ac0:	04016198 	cmpnei	r16,zero,1414
 4015ac4:	04016198 	cmpnei	r16,zero,1414
 4015ac8:	04016198 	cmpnei	r16,zero,1414
 4015acc:	040160fc 	xorhi	r16,zero,1411
 4015ad0:	04016198 	cmpnei	r16,zero,1414
 4015ad4:	04016198 	cmpnei	r16,zero,1414
 4015ad8:	04016198 	cmpnei	r16,zero,1414
 4015adc:	04016198 	cmpnei	r16,zero,1414
 4015ae0:	04016198 	cmpnei	r16,zero,1414
 4015ae4:	04016198 	cmpnei	r16,zero,1414
 4015ae8:	04016198 	cmpnei	r16,zero,1414
 4015aec:	04016198 	cmpnei	r16,zero,1414
 4015af0:	04016198 	cmpnei	r16,zero,1414
 4015af4:	04016198 	cmpnei	r16,zero,1414
 4015af8:	04016274 	movhi	r16,1417
 4015afc:	04016198 	cmpnei	r16,zero,1414
 4015b00:	04016198 	cmpnei	r16,zero,1414
 4015b04:	04016198 	cmpnei	r16,zero,1414
 4015b08:	04016198 	cmpnei	r16,zero,1414
 4015b0c:	04016198 	cmpnei	r16,zero,1414
 4015b10:	0401620c 	andi	r16,zero,1416
 4015b14:	04016198 	cmpnei	r16,zero,1414
 4015b18:	04016198 	cmpnei	r16,zero,1414
 4015b1c:	04015f40 	call	4015f4 <__alt_mem_sdram-0x3bfea0c>
 4015b20:	04016198 	cmpnei	r16,zero,1414
 4015b24:	04016198 	cmpnei	r16,zero,1414
 4015b28:	04016198 	cmpnei	r16,zero,1414
 4015b2c:	04016198 	cmpnei	r16,zero,1414
 4015b30:	04016198 	cmpnei	r16,zero,1414
 4015b34:	04016198 	cmpnei	r16,zero,1414
 4015b38:	04016198 	cmpnei	r16,zero,1414
 4015b3c:	04016198 	cmpnei	r16,zero,1414
 4015b40:	04016198 	cmpnei	r16,zero,1414
 4015b44:	04016198 	cmpnei	r16,zero,1414
 4015b48:	04015e30 	cmpltui	r16,zero,1400
 4015b4c:	04015fdc 	xori	r16,zero,1407
 4015b50:	04016198 	cmpnei	r16,zero,1414
 4015b54:	04016198 	cmpnei	r16,zero,1414
 4015b58:	04016198 	cmpnei	r16,zero,1414
 4015b5c:	04015fd0 	cmplti	r16,zero,1407
 4015b60:	04015fdc 	xori	r16,zero,1407
 4015b64:	04016198 	cmpnei	r16,zero,1414
 4015b68:	04016198 	cmpnei	r16,zero,1414
 4015b6c:	04015fc0 	call	4015fc <__alt_mem_sdram-0x3bfea04>
 4015b70:	04016198 	cmpnei	r16,zero,1414
 4015b74:	04015f84 	movi	r16,1406
 4015b78:	04015d8c 	andi	r16,zero,1398
 4015b7c:	04015bd8 	cmpnei	r16,zero,1391
 4015b80:	040160f0 	cmpltui	r16,zero,1411
 4015b84:	04016198 	cmpnei	r16,zero,1414
 4015b88:	040160a4 	muli	r16,zero,1410
 4015b8c:	04016198 	cmpnei	r16,zero,1414
 4015b90:	04015cfc 	xorhi	r16,zero,1395
 4015b94:	04016198 	cmpnei	r16,zero,1414
 4015b98:	04016198 	cmpnei	r16,zero,1414
 4015b9c:	04015c58 	cmpnei	r16,zero,1393
 4015ba0:	dac02317 	ldw	r11,140(sp)
 4015ba4:	5ac00017 	ldw	r11,0(r11)
 4015ba8:	dac02415 	stw	r11,144(sp)
 4015bac:	dac02317 	ldw	r11,140(sp)
 4015bb0:	58800104 	addi	r2,r11,4
 4015bb4:	dac02417 	ldw	r11,144(sp)
 4015bb8:	5802e90e 	bge	r11,zero,4016760 <___svfiprintf_internal_r+0xe84>
 4015bbc:	dac02417 	ldw	r11,144(sp)
 4015bc0:	d8802315 	stw	r2,140(sp)
 4015bc4:	02d7c83a 	sub	r11,zero,r11
 4015bc8:	dac02415 	stw	r11,144(sp)
 4015bcc:	94800114 	ori	r18,r18,4
 4015bd0:	98c00007 	ldb	r3,0(r19)
 4015bd4:	003f9006 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015bd8:	00800c04 	movi	r2,48
 4015bdc:	dac02317 	ldw	r11,140(sp)
 4015be0:	d8801d05 	stb	r2,116(sp)
 4015be4:	00801e04 	movi	r2,120
 4015be8:	d8801d45 	stb	r2,117(sp)
 4015bec:	d8001d85 	stb	zero,118(sp)
 4015bf0:	58c00104 	addi	r3,r11,4
 4015bf4:	5f000017 	ldw	fp,0(r11)
 4015bf8:	0013883a 	mov	r9,zero
 4015bfc:	90800094 	ori	r2,r18,2
 4015c00:	80032b16 	blt	r16,zero,40168b0 <___svfiprintf_internal_r+0xfd4>
 4015c04:	00bfdfc4 	movi	r2,-129
 4015c08:	90a4703a 	and	r18,r18,r2
 4015c0c:	d8c02315 	stw	r3,140(sp)
 4015c10:	94800094 	ori	r18,r18,2
 4015c14:	e002dc26 	beq	fp,zero,4016788 <___svfiprintf_internal_r+0xeac>
 4015c18:	01010234 	movhi	r4,1032
 4015c1c:	212fe804 	addi	r4,r4,-16480
 4015c20:	0015883a 	mov	r10,zero
 4015c24:	d9002915 	stw	r4,164(sp)
 4015c28:	00002306 	br	4015cb8 <___svfiprintf_internal_r+0x3dc>
 4015c2c:	94800054 	ori	r18,r18,1
 4015c30:	98c00007 	ldb	r3,0(r19)
 4015c34:	003f7806 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015c38:	38803fcc 	andi	r2,r7,255
 4015c3c:	1080201c 	xori	r2,r2,128
 4015c40:	10bfe004 	addi	r2,r2,-128
 4015c44:	1002f31e 	bne	r2,zero,4016814 <___svfiprintf_internal_r+0xf38>
 4015c48:	01000044 	movi	r4,1
 4015c4c:	01c00804 	movi	r7,32
 4015c50:	98c00007 	ldb	r3,0(r19)
 4015c54:	003f7006 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015c58:	21003fcc 	andi	r4,r4,255
 4015c5c:	2003aa1e 	bne	r4,zero,4016b08 <___svfiprintf_internal_r+0x122c>
 4015c60:	00810234 	movhi	r2,1032
 4015c64:	10afe804 	addi	r2,r2,-16480
 4015c68:	d8802915 	stw	r2,164(sp)
 4015c6c:	9080080c 	andi	r2,r18,32
 4015c70:	1000ba26 	beq	r2,zero,4015f5c <___svfiprintf_internal_r+0x680>
 4015c74:	dac02317 	ldw	r11,140(sp)
 4015c78:	5f000017 	ldw	fp,0(r11)
 4015c7c:	5a400117 	ldw	r9,4(r11)
 4015c80:	5ac00204 	addi	r11,r11,8
 4015c84:	dac02315 	stw	r11,140(sp)
 4015c88:	9080004c 	andi	r2,r18,1
 4015c8c:	10029026 	beq	r2,zero,40166d0 <___svfiprintf_internal_r+0xdf4>
 4015c90:	e244b03a 	or	r2,fp,r9
 4015c94:	1002d41e 	bne	r2,zero,40167e8 <___svfiprintf_internal_r+0xf0c>
 4015c98:	d8001d85 	stb	zero,118(sp)
 4015c9c:	80030b16 	blt	r16,zero,40168cc <___svfiprintf_internal_r+0xff0>
 4015ca0:	00bfdfc4 	movi	r2,-129
 4015ca4:	90a4703a 	and	r18,r18,r2
 4015ca8:	0015883a 	mov	r10,zero
 4015cac:	80002426 	beq	r16,zero,4015d40 <___svfiprintf_internal_r+0x464>
 4015cb0:	0039883a 	mov	fp,zero
 4015cb4:	0013883a 	mov	r9,zero
 4015cb8:	d9002917 	ldw	r4,164(sp)
 4015cbc:	dc401a04 	addi	r17,sp,104
 4015cc0:	e08003cc 	andi	r2,fp,15
 4015cc4:	4806973a 	slli	r3,r9,28
 4015cc8:	2085883a 	add	r2,r4,r2
 4015ccc:	e038d13a 	srli	fp,fp,4
 4015cd0:	10800003 	ldbu	r2,0(r2)
 4015cd4:	4812d13a 	srli	r9,r9,4
 4015cd8:	8c7fffc4 	addi	r17,r17,-1
 4015cdc:	1f38b03a 	or	fp,r3,fp
 4015ce0:	88800005 	stb	r2,0(r17)
 4015ce4:	e244b03a 	or	r2,fp,r9
 4015ce8:	103ff51e 	bne	r2,zero,4015cc0 <__alt_mem_epcs_flash_controller_0+0xfb014cc0>
 4015cec:	dac01e17 	ldw	r11,120(sp)
 4015cf0:	5c57c83a 	sub	r11,r11,r17
 4015cf4:	dac02115 	stw	r11,132(sp)
 4015cf8:	00001406 	br	4015d4c <___svfiprintf_internal_r+0x470>
 4015cfc:	21003fcc 	andi	r4,r4,255
 4015d00:	2003741e 	bne	r4,zero,4016ad4 <___svfiprintf_internal_r+0x11f8>
 4015d04:	9080080c 	andi	r2,r18,32
 4015d08:	10014526 	beq	r2,zero,4016220 <___svfiprintf_internal_r+0x944>
 4015d0c:	dac02317 	ldw	r11,140(sp)
 4015d10:	d8001d85 	stb	zero,118(sp)
 4015d14:	58c00204 	addi	r3,r11,8
 4015d18:	5f000017 	ldw	fp,0(r11)
 4015d1c:	5a400117 	ldw	r9,4(r11)
 4015d20:	8002d916 	blt	r16,zero,4016888 <___svfiprintf_internal_r+0xfac>
 4015d24:	013fdfc4 	movi	r4,-129
 4015d28:	e244b03a 	or	r2,fp,r9
 4015d2c:	d8c02315 	stw	r3,140(sp)
 4015d30:	9124703a 	and	r18,r18,r4
 4015d34:	0015883a 	mov	r10,zero
 4015d38:	1000b91e 	bne	r2,zero,4016020 <___svfiprintf_internal_r+0x744>
 4015d3c:	8002e61e 	bne	r16,zero,40168d8 <___svfiprintf_internal_r+0xffc>
 4015d40:	0021883a 	mov	r16,zero
 4015d44:	d8002115 	stw	zero,132(sp)
 4015d48:	dc401a04 	addi	r17,sp,104
 4015d4c:	d8c02117 	ldw	r3,132(sp)
 4015d50:	dc002015 	stw	r16,128(sp)
 4015d54:	80c0010e 	bge	r16,r3,4015d5c <___svfiprintf_internal_r+0x480>
 4015d58:	d8c02015 	stw	r3,128(sp)
 4015d5c:	52803fcc 	andi	r10,r10,255
 4015d60:	5280201c 	xori	r10,r10,128
 4015d64:	52bfe004 	addi	r10,r10,-128
 4015d68:	50003c26 	beq	r10,zero,4015e5c <___svfiprintf_internal_r+0x580>
 4015d6c:	dac02017 	ldw	r11,128(sp)
 4015d70:	5ac00044 	addi	r11,r11,1
 4015d74:	dac02015 	stw	r11,128(sp)
 4015d78:	00003806 	br	4015e5c <___svfiprintf_internal_r+0x580>
 4015d7c:	01000044 	movi	r4,1
 4015d80:	01c00ac4 	movi	r7,43
 4015d84:	98c00007 	ldb	r3,0(r19)
 4015d88:	003f2306 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015d8c:	21003fcc 	andi	r4,r4,255
 4015d90:	2003481e 	bne	r4,zero,4016ab4 <___svfiprintf_internal_r+0x11d8>
 4015d94:	9080080c 	andi	r2,r18,32
 4015d98:	10013b26 	beq	r2,zero,4016288 <___svfiprintf_internal_r+0x9ac>
 4015d9c:	dac02317 	ldw	r11,140(sp)
 4015da0:	d8001d85 	stb	zero,118(sp)
 4015da4:	58800204 	addi	r2,r11,8
 4015da8:	5f000017 	ldw	fp,0(r11)
 4015dac:	5a400117 	ldw	r9,4(r11)
 4015db0:	8002a816 	blt	r16,zero,4016854 <___svfiprintf_internal_r+0xf78>
 4015db4:	013fdfc4 	movi	r4,-129
 4015db8:	e246b03a 	or	r3,fp,r9
 4015dbc:	d8802315 	stw	r2,140(sp)
 4015dc0:	9124703a 	and	r18,r18,r4
 4015dc4:	18013c26 	beq	r3,zero,40162b8 <___svfiprintf_internal_r+0x9dc>
 4015dc8:	0015883a 	mov	r10,zero
 4015dcc:	dc401a04 	addi	r17,sp,104
 4015dd0:	e006d0fa 	srli	r3,fp,3
 4015dd4:	4808977a 	slli	r4,r9,29
 4015dd8:	4812d0fa 	srli	r9,r9,3
 4015ddc:	e70001cc 	andi	fp,fp,7
 4015de0:	e0800c04 	addi	r2,fp,48
 4015de4:	8c7fffc4 	addi	r17,r17,-1
 4015de8:	20f8b03a 	or	fp,r4,r3
 4015dec:	88800005 	stb	r2,0(r17)
 4015df0:	e246b03a 	or	r3,fp,r9
 4015df4:	183ff61e 	bne	r3,zero,4015dd0 <__alt_mem_epcs_flash_controller_0+0xfb014dd0>
 4015df8:	90c0004c 	andi	r3,r18,1
 4015dfc:	1800a526 	beq	r3,zero,4016094 <___svfiprintf_internal_r+0x7b8>
 4015e00:	10803fcc 	andi	r2,r2,255
 4015e04:	1080201c 	xori	r2,r2,128
 4015e08:	10bfe004 	addi	r2,r2,-128
 4015e0c:	00c00c04 	movi	r3,48
 4015e10:	10ffb626 	beq	r2,r3,4015cec <__alt_mem_epcs_flash_controller_0+0xfb014cec>
 4015e14:	88ffffc5 	stb	r3,-1(r17)
 4015e18:	d8c01e17 	ldw	r3,120(sp)
 4015e1c:	88bfffc4 	addi	r2,r17,-1
 4015e20:	1023883a 	mov	r17,r2
 4015e24:	1887c83a 	sub	r3,r3,r2
 4015e28:	d8c02115 	stw	r3,132(sp)
 4015e2c:	003fc706 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 4015e30:	dac02317 	ldw	r11,140(sp)
 4015e34:	00c00044 	movi	r3,1
 4015e38:	d8c02015 	stw	r3,128(sp)
 4015e3c:	58800017 	ldw	r2,0(r11)
 4015e40:	5ac00104 	addi	r11,r11,4
 4015e44:	d8001d85 	stb	zero,118(sp)
 4015e48:	d8801005 	stb	r2,64(sp)
 4015e4c:	dac02315 	stw	r11,140(sp)
 4015e50:	d8c02115 	stw	r3,132(sp)
 4015e54:	dc401004 	addi	r17,sp,64
 4015e58:	0021883a 	mov	r16,zero
 4015e5c:	90c0008c 	andi	r3,r18,2
 4015e60:	d8c02215 	stw	r3,136(sp)
 4015e64:	18000326 	beq	r3,zero,4015e74 <___svfiprintf_internal_r+0x598>
 4015e68:	dac02017 	ldw	r11,128(sp)
 4015e6c:	5ac00084 	addi	r11,r11,2
 4015e70:	dac02015 	stw	r11,128(sp)
 4015e74:	90c0210c 	andi	r3,r18,132
 4015e78:	d8c02615 	stw	r3,152(sp)
 4015e7c:	1801131e 	bne	r3,zero,40162cc <___svfiprintf_internal_r+0x9f0>
 4015e80:	dac02417 	ldw	r11,144(sp)
 4015e84:	d8c02017 	ldw	r3,128(sp)
 4015e88:	58f9c83a 	sub	fp,r11,r3
 4015e8c:	07010f0e 	bge	zero,fp,40162cc <___svfiprintf_internal_r+0x9f0>
 4015e90:	02400404 	movi	r9,16
 4015e94:	d8c01c17 	ldw	r3,112(sp)
 4015e98:	d8801b17 	ldw	r2,108(sp)
 4015e9c:	4f02d60e 	bge	r9,fp,40169f8 <___svfiprintf_internal_r+0x111c>
 4015ea0:	01410234 	movhi	r5,1032
 4015ea4:	29705404 	addi	r5,r5,-16048
 4015ea8:	d9402815 	stw	r5,160(sp)
 4015eac:	028001c4 	movi	r10,7
 4015eb0:	00000306 	br	4015ec0 <___svfiprintf_internal_r+0x5e4>
 4015eb4:	e73ffc04 	addi	fp,fp,-16
 4015eb8:	42000204 	addi	r8,r8,8
 4015ebc:	4f00150e 	bge	r9,fp,4015f14 <___svfiprintf_internal_r+0x638>
 4015ec0:	18c00404 	addi	r3,r3,16
 4015ec4:	10800044 	addi	r2,r2,1
 4015ec8:	45800015 	stw	r22,0(r8)
 4015ecc:	42400115 	stw	r9,4(r8)
 4015ed0:	d8c01c15 	stw	r3,112(sp)
 4015ed4:	d8801b15 	stw	r2,108(sp)
 4015ed8:	50bff60e 	bge	r10,r2,4015eb4 <__alt_mem_epcs_flash_controller_0+0xfb014eb4>
 4015edc:	d9801a04 	addi	r6,sp,104
 4015ee0:	b80b883a 	mov	r5,r23
 4015ee4:	a809883a 	mov	r4,r21
 4015ee8:	da402c15 	stw	r9,176(sp)
 4015eec:	da802d15 	stw	r10,180(sp)
 4015ef0:	401570c0 	call	401570c <__ssprint_r>
 4015ef4:	da402c17 	ldw	r9,176(sp)
 4015ef8:	da802d17 	ldw	r10,180(sp)
 4015efc:	1001851e 	bne	r2,zero,4016514 <___svfiprintf_internal_r+0xc38>
 4015f00:	e73ffc04 	addi	fp,fp,-16
 4015f04:	d8c01c17 	ldw	r3,112(sp)
 4015f08:	d8801b17 	ldw	r2,108(sp)
 4015f0c:	d811883a 	mov	r8,sp
 4015f10:	4f3feb16 	blt	r9,fp,4015ec0 <__alt_mem_epcs_flash_controller_0+0xfb014ec0>
 4015f14:	dac02817 	ldw	r11,160(sp)
 4015f18:	e0c7883a 	add	r3,fp,r3
 4015f1c:	10800044 	addi	r2,r2,1
 4015f20:	42c00015 	stw	r11,0(r8)
 4015f24:	47000115 	stw	fp,4(r8)
 4015f28:	d8c01c15 	stw	r3,112(sp)
 4015f2c:	d8801b15 	stw	r2,108(sp)
 4015f30:	010001c4 	movi	r4,7
 4015f34:	2081ee16 	blt	r4,r2,40166f0 <___svfiprintf_internal_r+0xe14>
 4015f38:	42000204 	addi	r8,r8,8
 4015f3c:	0000e506 	br	40162d4 <___svfiprintf_internal_r+0x9f8>
 4015f40:	21003fcc 	andi	r4,r4,255
 4015f44:	2002dd1e 	bne	r4,zero,4016abc <___svfiprintf_internal_r+0x11e0>
 4015f48:	00810234 	movhi	r2,1032
 4015f4c:	10afe304 	addi	r2,r2,-16500
 4015f50:	d8802915 	stw	r2,164(sp)
 4015f54:	9080080c 	andi	r2,r18,32
 4015f58:	103f461e 	bne	r2,zero,4015c74 <__alt_mem_epcs_flash_controller_0+0xfb014c74>
 4015f5c:	9080040c 	andi	r2,r18,16
 4015f60:	10022e1e 	bne	r2,zero,401681c <___svfiprintf_internal_r+0xf40>
 4015f64:	9080100c 	andi	r2,r18,64
 4015f68:	dac02317 	ldw	r11,140(sp)
 4015f6c:	10027326 	beq	r2,zero,401693c <___svfiprintf_internal_r+0x1060>
 4015f70:	5f00000b 	ldhu	fp,0(r11)
 4015f74:	5ac00104 	addi	r11,r11,4
 4015f78:	0013883a 	mov	r9,zero
 4015f7c:	dac02315 	stw	r11,140(sp)
 4015f80:	003f4106 	br	4015c88 <__alt_mem_epcs_flash_controller_0+0xfb014c88>
 4015f84:	21003fcc 	andi	r4,r4,255
 4015f88:	2002e11e 	bne	r4,zero,4016b10 <___svfiprintf_internal_r+0x1234>
 4015f8c:	9080080c 	andi	r2,r18,32
 4015f90:	1002011e 	bne	r2,zero,4016798 <___svfiprintf_internal_r+0xebc>
 4015f94:	9080040c 	andi	r2,r18,16
 4015f98:	10023e1e 	bne	r2,zero,4016894 <___svfiprintf_internal_r+0xfb8>
 4015f9c:	9480100c 	andi	r18,r18,64
 4015fa0:	90023c26 	beq	r18,zero,4016894 <___svfiprintf_internal_r+0xfb8>
 4015fa4:	dac02317 	ldw	r11,140(sp)
 4015fa8:	58800017 	ldw	r2,0(r11)
 4015fac:	5ac00104 	addi	r11,r11,4
 4015fb0:	dac02315 	stw	r11,140(sp)
 4015fb4:	dac02517 	ldw	r11,148(sp)
 4015fb8:	12c0000d 	sth	r11,0(r2)
 4015fbc:	003e6e06 	br	4015978 <__alt_mem_epcs_flash_controller_0+0xfb014978>
 4015fc0:	98c00007 	ldb	r3,0(r19)
 4015fc4:	1a422926 	beq	r3,r9,401686c <___svfiprintf_internal_r+0xf90>
 4015fc8:	94800414 	ori	r18,r18,16
 4015fcc:	003e9206 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015fd0:	94801014 	ori	r18,r18,64
 4015fd4:	98c00007 	ldb	r3,0(r19)
 4015fd8:	003e8f06 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4015fdc:	21003fcc 	andi	r4,r4,255
 4015fe0:	2002c71e 	bne	r4,zero,4016b00 <___svfiprintf_internal_r+0x1224>
 4015fe4:	9080080c 	andi	r2,r18,32
 4015fe8:	10004926 	beq	r2,zero,4016110 <___svfiprintf_internal_r+0x834>
 4015fec:	dac02317 	ldw	r11,140(sp)
 4015ff0:	58800117 	ldw	r2,4(r11)
 4015ff4:	5f000017 	ldw	fp,0(r11)
 4015ff8:	5ac00204 	addi	r11,r11,8
 4015ffc:	dac02315 	stw	r11,140(sp)
 4016000:	1013883a 	mov	r9,r2
 4016004:	10004b16 	blt	r2,zero,4016134 <___svfiprintf_internal_r+0x858>
 4016008:	da801d83 	ldbu	r10,118(sp)
 401600c:	8001cb16 	blt	r16,zero,401673c <___svfiprintf_internal_r+0xe60>
 4016010:	00ffdfc4 	movi	r3,-129
 4016014:	e244b03a 	or	r2,fp,r9
 4016018:	90e4703a 	and	r18,r18,r3
 401601c:	103f4726 	beq	r2,zero,4015d3c <__alt_mem_epcs_flash_controller_0+0xfb014d3c>
 4016020:	48008c26 	beq	r9,zero,4016254 <___svfiprintf_internal_r+0x978>
 4016024:	dc802015 	stw	r18,128(sp)
 4016028:	dc002115 	stw	r16,132(sp)
 401602c:	dc401a04 	addi	r17,sp,104
 4016030:	e021883a 	mov	r16,fp
 4016034:	da002215 	stw	r8,136(sp)
 4016038:	5039883a 	mov	fp,r10
 401603c:	4825883a 	mov	r18,r9
 4016040:	8009883a 	mov	r4,r16
 4016044:	900b883a 	mov	r5,r18
 4016048:	01800284 	movi	r6,10
 401604c:	000f883a 	mov	r7,zero
 4016050:	401900c0 	call	401900c <__umoddi3>
 4016054:	10800c04 	addi	r2,r2,48
 4016058:	8c7fffc4 	addi	r17,r17,-1
 401605c:	8009883a 	mov	r4,r16
 4016060:	900b883a 	mov	r5,r18
 4016064:	88800005 	stb	r2,0(r17)
 4016068:	01800284 	movi	r6,10
 401606c:	000f883a 	mov	r7,zero
 4016070:	4018a940 	call	4018a94 <__udivdi3>
 4016074:	1021883a 	mov	r16,r2
 4016078:	10c4b03a 	or	r2,r2,r3
 401607c:	1825883a 	mov	r18,r3
 4016080:	103fef1e 	bne	r2,zero,4016040 <__alt_mem_epcs_flash_controller_0+0xfb015040>
 4016084:	dc802017 	ldw	r18,128(sp)
 4016088:	dc002117 	ldw	r16,132(sp)
 401608c:	da002217 	ldw	r8,136(sp)
 4016090:	e015883a 	mov	r10,fp
 4016094:	d8c01e17 	ldw	r3,120(sp)
 4016098:	1c47c83a 	sub	r3,r3,r17
 401609c:	d8c02115 	stw	r3,132(sp)
 40160a0:	003f2a06 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 40160a4:	dac02317 	ldw	r11,140(sp)
 40160a8:	d8001d85 	stb	zero,118(sp)
 40160ac:	5c400017 	ldw	r17,0(r11)
 40160b0:	5f000104 	addi	fp,r11,4
 40160b4:	88022f26 	beq	r17,zero,4016974 <___svfiprintf_internal_r+0x1098>
 40160b8:	80022516 	blt	r16,zero,4016950 <___svfiprintf_internal_r+0x1074>
 40160bc:	800d883a 	mov	r6,r16
 40160c0:	000b883a 	mov	r5,zero
 40160c4:	8809883a 	mov	r4,r17
 40160c8:	da002c15 	stw	r8,176(sp)
 40160cc:	4013bec0 	call	4013bec <memchr>
 40160d0:	da002c17 	ldw	r8,176(sp)
 40160d4:	10026426 	beq	r2,zero,4016a68 <___svfiprintf_internal_r+0x118c>
 40160d8:	1445c83a 	sub	r2,r2,r17
 40160dc:	d8802115 	stw	r2,132(sp)
 40160e0:	da801d83 	ldbu	r10,118(sp)
 40160e4:	df002315 	stw	fp,140(sp)
 40160e8:	0021883a 	mov	r16,zero
 40160ec:	003f1706 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 40160f0:	94800814 	ori	r18,r18,32
 40160f4:	98c00007 	ldb	r3,0(r19)
 40160f8:	003e4706 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 40160fc:	21003fcc 	andi	r4,r4,255
 4016100:	2002701e 	bne	r4,zero,4016ac4 <___svfiprintf_internal_r+0x11e8>
 4016104:	94800414 	ori	r18,r18,16
 4016108:	9080080c 	andi	r2,r18,32
 401610c:	103fb71e 	bne	r2,zero,4015fec <__alt_mem_epcs_flash_controller_0+0xfb014fec>
 4016110:	9080040c 	andi	r2,r18,16
 4016114:	1001ab26 	beq	r2,zero,40167c4 <___svfiprintf_internal_r+0xee8>
 4016118:	dac02317 	ldw	r11,140(sp)
 401611c:	5f000017 	ldw	fp,0(r11)
 4016120:	5ac00104 	addi	r11,r11,4
 4016124:	dac02315 	stw	r11,140(sp)
 4016128:	e013d7fa 	srai	r9,fp,31
 401612c:	4805883a 	mov	r2,r9
 4016130:	103fb50e 	bge	r2,zero,4016008 <__alt_mem_epcs_flash_controller_0+0xfb015008>
 4016134:	0739c83a 	sub	fp,zero,fp
 4016138:	02800b44 	movi	r10,45
 401613c:	e004c03a 	cmpne	r2,fp,zero
 4016140:	0253c83a 	sub	r9,zero,r9
 4016144:	da801d85 	stb	r10,118(sp)
 4016148:	4893c83a 	sub	r9,r9,r2
 401614c:	80023016 	blt	r16,zero,4016a10 <___svfiprintf_internal_r+0x1134>
 4016150:	00bfdfc4 	movi	r2,-129
 4016154:	90a4703a 	and	r18,r18,r2
 4016158:	483fb21e 	bne	r9,zero,4016024 <__alt_mem_epcs_flash_controller_0+0xfb015024>
 401615c:	00003d06 	br	4016254 <___svfiprintf_internal_r+0x978>
 4016160:	9817883a 	mov	r11,r19
 4016164:	d8002415 	stw	zero,144(sp)
 4016168:	18bff404 	addi	r2,r3,-48
 401616c:	0019883a 	mov	r12,zero
 4016170:	58c00007 	ldb	r3,0(r11)
 4016174:	630002a4 	muli	r12,r12,10
 4016178:	9cc00044 	addi	r19,r19,1
 401617c:	9817883a 	mov	r11,r19
 4016180:	1319883a 	add	r12,r2,r12
 4016184:	18bff404 	addi	r2,r3,-48
 4016188:	30bff92e 	bgeu	r6,r2,4016170 <__alt_mem_epcs_flash_controller_0+0xfb015170>
 401618c:	db002415 	stw	r12,144(sp)
 4016190:	18bff804 	addi	r2,r3,-32
 4016194:	28be232e 	bgeu	r5,r2,4015a24 <__alt_mem_epcs_flash_controller_0+0xfb014a24>
 4016198:	21003fcc 	andi	r4,r4,255
 401619c:	20024b1e 	bne	r4,zero,4016acc <___svfiprintf_internal_r+0x11f0>
 40161a0:	1800d626 	beq	r3,zero,40164fc <___svfiprintf_internal_r+0xc20>
 40161a4:	02c00044 	movi	r11,1
 40161a8:	dac02015 	stw	r11,128(sp)
 40161ac:	d8c01005 	stb	r3,64(sp)
 40161b0:	d8001d85 	stb	zero,118(sp)
 40161b4:	dac02115 	stw	r11,132(sp)
 40161b8:	dc401004 	addi	r17,sp,64
 40161bc:	003f2606 	br	4015e58 <__alt_mem_epcs_flash_controller_0+0xfb014e58>
 40161c0:	94802014 	ori	r18,r18,128
 40161c4:	98c00007 	ldb	r3,0(r19)
 40161c8:	003e1306 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 40161cc:	98c00007 	ldb	r3,0(r19)
 40161d0:	9ac00044 	addi	r11,r19,1
 40161d4:	1a822b26 	beq	r3,r10,4016a84 <___svfiprintf_internal_r+0x11a8>
 40161d8:	18bff404 	addi	r2,r3,-48
 40161dc:	0021883a 	mov	r16,zero
 40161e0:	30821e36 	bltu	r6,r2,4016a5c <___svfiprintf_internal_r+0x1180>
 40161e4:	58c00007 	ldb	r3,0(r11)
 40161e8:	840002a4 	muli	r16,r16,10
 40161ec:	5cc00044 	addi	r19,r11,1
 40161f0:	9817883a 	mov	r11,r19
 40161f4:	80a1883a 	add	r16,r16,r2
 40161f8:	18bff404 	addi	r2,r3,-48
 40161fc:	30bff92e 	bgeu	r6,r2,40161e4 <__alt_mem_epcs_flash_controller_0+0xfb0151e4>
 4016200:	803e060e 	bge	r16,zero,4015a1c <__alt_mem_epcs_flash_controller_0+0xfb014a1c>
 4016204:	043fffc4 	movi	r16,-1
 4016208:	003e0406 	br	4015a1c <__alt_mem_epcs_flash_controller_0+0xfb014a1c>
 401620c:	21003fcc 	andi	r4,r4,255
 4016210:	2002371e 	bne	r4,zero,4016af0 <___svfiprintf_internal_r+0x1214>
 4016214:	94800414 	ori	r18,r18,16
 4016218:	9080080c 	andi	r2,r18,32
 401621c:	103ebb1e 	bne	r2,zero,4015d0c <__alt_mem_epcs_flash_controller_0+0xfb014d0c>
 4016220:	9080040c 	andi	r2,r18,16
 4016224:	10013b26 	beq	r2,zero,4016714 <___svfiprintf_internal_r+0xe38>
 4016228:	dac02317 	ldw	r11,140(sp)
 401622c:	d8001d85 	stb	zero,118(sp)
 4016230:	0013883a 	mov	r9,zero
 4016234:	58800104 	addi	r2,r11,4
 4016238:	5f000017 	ldw	fp,0(r11)
 401623c:	80013d16 	blt	r16,zero,4016734 <___svfiprintf_internal_r+0xe58>
 4016240:	00ffdfc4 	movi	r3,-129
 4016244:	d8802315 	stw	r2,140(sp)
 4016248:	90e4703a 	and	r18,r18,r3
 401624c:	0015883a 	mov	r10,zero
 4016250:	e03eba26 	beq	fp,zero,4015d3c <__alt_mem_epcs_flash_controller_0+0xfb014d3c>
 4016254:	00800244 	movi	r2,9
 4016258:	173f7236 	bltu	r2,fp,4016024 <__alt_mem_epcs_flash_controller_0+0xfb015024>
 401625c:	dac02b17 	ldw	r11,172(sp)
 4016260:	e7000c04 	addi	fp,fp,48
 4016264:	df0019c5 	stb	fp,103(sp)
 4016268:	dac02115 	stw	r11,132(sp)
 401626c:	dc4019c4 	addi	r17,sp,103
 4016270:	003eb606 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 4016274:	21003fcc 	andi	r4,r4,255
 4016278:	20021f1e 	bne	r4,zero,4016af8 <___svfiprintf_internal_r+0x121c>
 401627c:	94800414 	ori	r18,r18,16
 4016280:	9080080c 	andi	r2,r18,32
 4016284:	103ec51e 	bne	r2,zero,4015d9c <__alt_mem_epcs_flash_controller_0+0xfb014d9c>
 4016288:	9080040c 	andi	r2,r18,16
 401628c:	10016926 	beq	r2,zero,4016834 <___svfiprintf_internal_r+0xf58>
 4016290:	dac02317 	ldw	r11,140(sp)
 4016294:	d8001d85 	stb	zero,118(sp)
 4016298:	0013883a 	mov	r9,zero
 401629c:	58800104 	addi	r2,r11,4
 40162a0:	5f000017 	ldw	fp,0(r11)
 40162a4:	80016b16 	blt	r16,zero,4016854 <___svfiprintf_internal_r+0xf78>
 40162a8:	00ffdfc4 	movi	r3,-129
 40162ac:	d8802315 	stw	r2,140(sp)
 40162b0:	90e4703a 	and	r18,r18,r3
 40162b4:	e03ec41e 	bne	fp,zero,4015dc8 <__alt_mem_epcs_flash_controller_0+0xfb014dc8>
 40162b8:	0015883a 	mov	r10,zero
 40162bc:	8001c226 	beq	r16,zero,40169c8 <___svfiprintf_internal_r+0x10ec>
 40162c0:	0039883a 	mov	fp,zero
 40162c4:	0013883a 	mov	r9,zero
 40162c8:	003ec006 	br	4015dcc <__alt_mem_epcs_flash_controller_0+0xfb014dcc>
 40162cc:	d8c01c17 	ldw	r3,112(sp)
 40162d0:	d8801b17 	ldw	r2,108(sp)
 40162d4:	d9001d87 	ldb	r4,118(sp)
 40162d8:	20000b26 	beq	r4,zero,4016308 <___svfiprintf_internal_r+0xa2c>
 40162dc:	d9001d84 	addi	r4,sp,118
 40162e0:	18c00044 	addi	r3,r3,1
 40162e4:	10800044 	addi	r2,r2,1
 40162e8:	41000015 	stw	r4,0(r8)
 40162ec:	01000044 	movi	r4,1
 40162f0:	41000115 	stw	r4,4(r8)
 40162f4:	d8c01c15 	stw	r3,112(sp)
 40162f8:	d8801b15 	stw	r2,108(sp)
 40162fc:	010001c4 	movi	r4,7
 4016300:	2080e116 	blt	r4,r2,4016688 <___svfiprintf_internal_r+0xdac>
 4016304:	42000204 	addi	r8,r8,8
 4016308:	dac02217 	ldw	r11,136(sp)
 401630c:	58000b26 	beq	r11,zero,401633c <___svfiprintf_internal_r+0xa60>
 4016310:	d9001d04 	addi	r4,sp,116
 4016314:	18c00084 	addi	r3,r3,2
 4016318:	10800044 	addi	r2,r2,1
 401631c:	41000015 	stw	r4,0(r8)
 4016320:	01000084 	movi	r4,2
 4016324:	41000115 	stw	r4,4(r8)
 4016328:	d8c01c15 	stw	r3,112(sp)
 401632c:	d8801b15 	stw	r2,108(sp)
 4016330:	010001c4 	movi	r4,7
 4016334:	2080dd16 	blt	r4,r2,40166ac <___svfiprintf_internal_r+0xdd0>
 4016338:	42000204 	addi	r8,r8,8
 401633c:	dac02617 	ldw	r11,152(sp)
 4016340:	01002004 	movi	r4,128
 4016344:	59008426 	beq	r11,r4,4016558 <___svfiprintf_internal_r+0xc7c>
 4016348:	dac02117 	ldw	r11,132(sp)
 401634c:	82e1c83a 	sub	r16,r16,r11
 4016350:	0400270e 	bge	zero,r16,40163f0 <___svfiprintf_internal_r+0xb14>
 4016354:	01c00404 	movi	r7,16
 4016358:	3c016a0e 	bge	r7,r16,4016904 <___svfiprintf_internal_r+0x1028>
 401635c:	01410234 	movhi	r5,1032
 4016360:	29705004 	addi	r5,r5,-16064
 4016364:	d9402215 	stw	r5,136(sp)
 4016368:	070001c4 	movi	fp,7
 401636c:	00000306 	br	401637c <___svfiprintf_internal_r+0xaa0>
 4016370:	843ffc04 	addi	r16,r16,-16
 4016374:	42000204 	addi	r8,r8,8
 4016378:	3c00130e 	bge	r7,r16,40163c8 <___svfiprintf_internal_r+0xaec>
 401637c:	18c00404 	addi	r3,r3,16
 4016380:	10800044 	addi	r2,r2,1
 4016384:	45000015 	stw	r20,0(r8)
 4016388:	41c00115 	stw	r7,4(r8)
 401638c:	d8c01c15 	stw	r3,112(sp)
 4016390:	d8801b15 	stw	r2,108(sp)
 4016394:	e0bff60e 	bge	fp,r2,4016370 <__alt_mem_epcs_flash_controller_0+0xfb015370>
 4016398:	d9801a04 	addi	r6,sp,104
 401639c:	b80b883a 	mov	r5,r23
 40163a0:	a809883a 	mov	r4,r21
 40163a4:	d9c02c15 	stw	r7,176(sp)
 40163a8:	401570c0 	call	401570c <__ssprint_r>
 40163ac:	d9c02c17 	ldw	r7,176(sp)
 40163b0:	1000581e 	bne	r2,zero,4016514 <___svfiprintf_internal_r+0xc38>
 40163b4:	843ffc04 	addi	r16,r16,-16
 40163b8:	d8c01c17 	ldw	r3,112(sp)
 40163bc:	d8801b17 	ldw	r2,108(sp)
 40163c0:	d811883a 	mov	r8,sp
 40163c4:	3c3fed16 	blt	r7,r16,401637c <__alt_mem_epcs_flash_controller_0+0xfb01537c>
 40163c8:	dac02217 	ldw	r11,136(sp)
 40163cc:	1c07883a 	add	r3,r3,r16
 40163d0:	10800044 	addi	r2,r2,1
 40163d4:	42c00015 	stw	r11,0(r8)
 40163d8:	44000115 	stw	r16,4(r8)
 40163dc:	d8c01c15 	stw	r3,112(sp)
 40163e0:	d8801b15 	stw	r2,108(sp)
 40163e4:	010001c4 	movi	r4,7
 40163e8:	20809e16 	blt	r4,r2,4016664 <___svfiprintf_internal_r+0xd88>
 40163ec:	42000204 	addi	r8,r8,8
 40163f0:	dac02117 	ldw	r11,132(sp)
 40163f4:	10800044 	addi	r2,r2,1
 40163f8:	44400015 	stw	r17,0(r8)
 40163fc:	58c7883a 	add	r3,r11,r3
 4016400:	42c00115 	stw	r11,4(r8)
 4016404:	d8c01c15 	stw	r3,112(sp)
 4016408:	d8801b15 	stw	r2,108(sp)
 401640c:	010001c4 	movi	r4,7
 4016410:	20807f16 	blt	r4,r2,4016610 <___svfiprintf_internal_r+0xd34>
 4016414:	42000204 	addi	r8,r8,8
 4016418:	9480010c 	andi	r18,r18,4
 401641c:	90002926 	beq	r18,zero,40164c4 <___svfiprintf_internal_r+0xbe8>
 4016420:	dac02417 	ldw	r11,144(sp)
 4016424:	d8802017 	ldw	r2,128(sp)
 4016428:	58a1c83a 	sub	r16,r11,r2
 401642c:	0400250e 	bge	zero,r16,40164c4 <___svfiprintf_internal_r+0xbe8>
 4016430:	04400404 	movi	r17,16
 4016434:	d8801b17 	ldw	r2,108(sp)
 4016438:	8c017c0e 	bge	r17,r16,4016a2c <___svfiprintf_internal_r+0x1150>
 401643c:	01410234 	movhi	r5,1032
 4016440:	29705404 	addi	r5,r5,-16048
 4016444:	d9402815 	stw	r5,160(sp)
 4016448:	048001c4 	movi	r18,7
 401644c:	00000306 	br	401645c <___svfiprintf_internal_r+0xb80>
 4016450:	843ffc04 	addi	r16,r16,-16
 4016454:	42000204 	addi	r8,r8,8
 4016458:	8c00110e 	bge	r17,r16,40164a0 <___svfiprintf_internal_r+0xbc4>
 401645c:	18c00404 	addi	r3,r3,16
 4016460:	10800044 	addi	r2,r2,1
 4016464:	45800015 	stw	r22,0(r8)
 4016468:	44400115 	stw	r17,4(r8)
 401646c:	d8c01c15 	stw	r3,112(sp)
 4016470:	d8801b15 	stw	r2,108(sp)
 4016474:	90bff60e 	bge	r18,r2,4016450 <__alt_mem_epcs_flash_controller_0+0xfb015450>
 4016478:	d9801a04 	addi	r6,sp,104
 401647c:	b80b883a 	mov	r5,r23
 4016480:	a809883a 	mov	r4,r21
 4016484:	401570c0 	call	401570c <__ssprint_r>
 4016488:	1000221e 	bne	r2,zero,4016514 <___svfiprintf_internal_r+0xc38>
 401648c:	843ffc04 	addi	r16,r16,-16
 4016490:	d8c01c17 	ldw	r3,112(sp)
 4016494:	d8801b17 	ldw	r2,108(sp)
 4016498:	d811883a 	mov	r8,sp
 401649c:	8c3fef16 	blt	r17,r16,401645c <__alt_mem_epcs_flash_controller_0+0xfb01545c>
 40164a0:	dac02817 	ldw	r11,160(sp)
 40164a4:	1c07883a 	add	r3,r3,r16
 40164a8:	10800044 	addi	r2,r2,1
 40164ac:	42c00015 	stw	r11,0(r8)
 40164b0:	44000115 	stw	r16,4(r8)
 40164b4:	d8c01c15 	stw	r3,112(sp)
 40164b8:	d8801b15 	stw	r2,108(sp)
 40164bc:	010001c4 	movi	r4,7
 40164c0:	2080aa16 	blt	r4,r2,401676c <___svfiprintf_internal_r+0xe90>
 40164c4:	d8802417 	ldw	r2,144(sp)
 40164c8:	dac02017 	ldw	r11,128(sp)
 40164cc:	12c0010e 	bge	r2,r11,40164d4 <___svfiprintf_internal_r+0xbf8>
 40164d0:	5805883a 	mov	r2,r11
 40164d4:	dac02517 	ldw	r11,148(sp)
 40164d8:	5897883a 	add	r11,r11,r2
 40164dc:	dac02515 	stw	r11,148(sp)
 40164e0:	1800531e 	bne	r3,zero,4016630 <___svfiprintf_internal_r+0xd54>
 40164e4:	98800007 	ldb	r2,0(r19)
 40164e8:	d8001b15 	stw	zero,108(sp)
 40164ec:	d811883a 	mov	r8,sp
 40164f0:	103d231e 	bne	r2,zero,4015980 <__alt_mem_epcs_flash_controller_0+0xfb014980>
 40164f4:	9823883a 	mov	r17,r19
 40164f8:	003d3906 	br	40159e0 <__alt_mem_epcs_flash_controller_0+0xfb0149e0>
 40164fc:	d8801c17 	ldw	r2,112(sp)
 4016500:	10000426 	beq	r2,zero,4016514 <___svfiprintf_internal_r+0xc38>
 4016504:	d9402717 	ldw	r5,156(sp)
 4016508:	d9002a17 	ldw	r4,168(sp)
 401650c:	d9801a04 	addi	r6,sp,104
 4016510:	401570c0 	call	401570c <__ssprint_r>
 4016514:	dac02717 	ldw	r11,156(sp)
 4016518:	d8802517 	ldw	r2,148(sp)
 401651c:	58c0030b 	ldhu	r3,12(r11)
 4016520:	18c0100c 	andi	r3,r3,64
 4016524:	1801381e 	bne	r3,zero,4016a08 <___svfiprintf_internal_r+0x112c>
 4016528:	dfc03717 	ldw	ra,220(sp)
 401652c:	df003617 	ldw	fp,216(sp)
 4016530:	ddc03517 	ldw	r23,212(sp)
 4016534:	dd803417 	ldw	r22,208(sp)
 4016538:	dd403317 	ldw	r21,204(sp)
 401653c:	dd003217 	ldw	r20,200(sp)
 4016540:	dcc03117 	ldw	r19,196(sp)
 4016544:	dc803017 	ldw	r18,192(sp)
 4016548:	dc402f17 	ldw	r17,188(sp)
 401654c:	dc002e17 	ldw	r16,184(sp)
 4016550:	dec03804 	addi	sp,sp,224
 4016554:	f800283a 	ret
 4016558:	dac02417 	ldw	r11,144(sp)
 401655c:	d9002017 	ldw	r4,128(sp)
 4016560:	5939c83a 	sub	fp,r11,r4
 4016564:	073f780e 	bge	zero,fp,4016348 <__alt_mem_epcs_flash_controller_0+0xfb015348>
 4016568:	02400404 	movi	r9,16
 401656c:	4f01370e 	bge	r9,fp,4016a4c <___svfiprintf_internal_r+0x1170>
 4016570:	02c10234 	movhi	r11,1032
 4016574:	5af05004 	addi	r11,r11,-16064
 4016578:	dac02215 	stw	r11,136(sp)
 401657c:	028001c4 	movi	r10,7
 4016580:	00000306 	br	4016590 <___svfiprintf_internal_r+0xcb4>
 4016584:	e73ffc04 	addi	fp,fp,-16
 4016588:	42000204 	addi	r8,r8,8
 401658c:	4f00150e 	bge	r9,fp,40165e4 <___svfiprintf_internal_r+0xd08>
 4016590:	18c00404 	addi	r3,r3,16
 4016594:	10800044 	addi	r2,r2,1
 4016598:	45000015 	stw	r20,0(r8)
 401659c:	42400115 	stw	r9,4(r8)
 40165a0:	d8c01c15 	stw	r3,112(sp)
 40165a4:	d8801b15 	stw	r2,108(sp)
 40165a8:	50bff60e 	bge	r10,r2,4016584 <__alt_mem_epcs_flash_controller_0+0xfb015584>
 40165ac:	d9801a04 	addi	r6,sp,104
 40165b0:	b80b883a 	mov	r5,r23
 40165b4:	a809883a 	mov	r4,r21
 40165b8:	da402c15 	stw	r9,176(sp)
 40165bc:	da802d15 	stw	r10,180(sp)
 40165c0:	401570c0 	call	401570c <__ssprint_r>
 40165c4:	da402c17 	ldw	r9,176(sp)
 40165c8:	da802d17 	ldw	r10,180(sp)
 40165cc:	103fd11e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 40165d0:	e73ffc04 	addi	fp,fp,-16
 40165d4:	d8c01c17 	ldw	r3,112(sp)
 40165d8:	d8801b17 	ldw	r2,108(sp)
 40165dc:	d811883a 	mov	r8,sp
 40165e0:	4f3feb16 	blt	r9,fp,4016590 <__alt_mem_epcs_flash_controller_0+0xfb015590>
 40165e4:	dac02217 	ldw	r11,136(sp)
 40165e8:	1f07883a 	add	r3,r3,fp
 40165ec:	10800044 	addi	r2,r2,1
 40165f0:	42c00015 	stw	r11,0(r8)
 40165f4:	47000115 	stw	fp,4(r8)
 40165f8:	d8c01c15 	stw	r3,112(sp)
 40165fc:	d8801b15 	stw	r2,108(sp)
 4016600:	010001c4 	movi	r4,7
 4016604:	2080b616 	blt	r4,r2,40168e0 <___svfiprintf_internal_r+0x1004>
 4016608:	42000204 	addi	r8,r8,8
 401660c:	003f4e06 	br	4016348 <__alt_mem_epcs_flash_controller_0+0xfb015348>
 4016610:	d9801a04 	addi	r6,sp,104
 4016614:	b80b883a 	mov	r5,r23
 4016618:	a809883a 	mov	r4,r21
 401661c:	401570c0 	call	401570c <__ssprint_r>
 4016620:	103fbc1e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 4016624:	d8c01c17 	ldw	r3,112(sp)
 4016628:	d811883a 	mov	r8,sp
 401662c:	003f7a06 	br	4016418 <__alt_mem_epcs_flash_controller_0+0xfb015418>
 4016630:	d9801a04 	addi	r6,sp,104
 4016634:	b80b883a 	mov	r5,r23
 4016638:	a809883a 	mov	r4,r21
 401663c:	401570c0 	call	401570c <__ssprint_r>
 4016640:	103fa826 	beq	r2,zero,40164e4 <__alt_mem_epcs_flash_controller_0+0xfb0154e4>
 4016644:	003fb306 	br	4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 4016648:	d9801a04 	addi	r6,sp,104
 401664c:	b80b883a 	mov	r5,r23
 4016650:	a809883a 	mov	r4,r21
 4016654:	401570c0 	call	401570c <__ssprint_r>
 4016658:	103fae1e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 401665c:	d811883a 	mov	r8,sp
 4016660:	003cdc06 	br	40159d4 <__alt_mem_epcs_flash_controller_0+0xfb0149d4>
 4016664:	d9801a04 	addi	r6,sp,104
 4016668:	b80b883a 	mov	r5,r23
 401666c:	a809883a 	mov	r4,r21
 4016670:	401570c0 	call	401570c <__ssprint_r>
 4016674:	103fa71e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 4016678:	d8c01c17 	ldw	r3,112(sp)
 401667c:	d8801b17 	ldw	r2,108(sp)
 4016680:	d811883a 	mov	r8,sp
 4016684:	003f5a06 	br	40163f0 <__alt_mem_epcs_flash_controller_0+0xfb0153f0>
 4016688:	d9801a04 	addi	r6,sp,104
 401668c:	b80b883a 	mov	r5,r23
 4016690:	a809883a 	mov	r4,r21
 4016694:	401570c0 	call	401570c <__ssprint_r>
 4016698:	103f9e1e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 401669c:	d8c01c17 	ldw	r3,112(sp)
 40166a0:	d8801b17 	ldw	r2,108(sp)
 40166a4:	d811883a 	mov	r8,sp
 40166a8:	003f1706 	br	4016308 <__alt_mem_epcs_flash_controller_0+0xfb015308>
 40166ac:	d9801a04 	addi	r6,sp,104
 40166b0:	b80b883a 	mov	r5,r23
 40166b4:	a809883a 	mov	r4,r21
 40166b8:	401570c0 	call	401570c <__ssprint_r>
 40166bc:	103f951e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 40166c0:	d8c01c17 	ldw	r3,112(sp)
 40166c4:	d8801b17 	ldw	r2,108(sp)
 40166c8:	d811883a 	mov	r8,sp
 40166cc:	003f1b06 	br	401633c <__alt_mem_epcs_flash_controller_0+0xfb01533c>
 40166d0:	d8001d85 	stb	zero,118(sp)
 40166d4:	80007b16 	blt	r16,zero,40168c4 <___svfiprintf_internal_r+0xfe8>
 40166d8:	00ffdfc4 	movi	r3,-129
 40166dc:	e244b03a 	or	r2,fp,r9
 40166e0:	90e4703a 	and	r18,r18,r3
 40166e4:	103d7026 	beq	r2,zero,4015ca8 <__alt_mem_epcs_flash_controller_0+0xfb014ca8>
 40166e8:	0015883a 	mov	r10,zero
 40166ec:	003d7206 	br	4015cb8 <__alt_mem_epcs_flash_controller_0+0xfb014cb8>
 40166f0:	d9801a04 	addi	r6,sp,104
 40166f4:	b80b883a 	mov	r5,r23
 40166f8:	a809883a 	mov	r4,r21
 40166fc:	401570c0 	call	401570c <__ssprint_r>
 4016700:	103f841e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 4016704:	d8c01c17 	ldw	r3,112(sp)
 4016708:	d8801b17 	ldw	r2,108(sp)
 401670c:	d811883a 	mov	r8,sp
 4016710:	003ef006 	br	40162d4 <__alt_mem_epcs_flash_controller_0+0xfb0152d4>
 4016714:	9080100c 	andi	r2,r18,64
 4016718:	d8001d85 	stb	zero,118(sp)
 401671c:	dac02317 	ldw	r11,140(sp)
 4016720:	10008126 	beq	r2,zero,4016928 <___svfiprintf_internal_r+0x104c>
 4016724:	58800104 	addi	r2,r11,4
 4016728:	5f00000b 	ldhu	fp,0(r11)
 401672c:	0013883a 	mov	r9,zero
 4016730:	803ec30e 	bge	r16,zero,4016240 <__alt_mem_epcs_flash_controller_0+0xfb015240>
 4016734:	d8802315 	stw	r2,140(sp)
 4016738:	0015883a 	mov	r10,zero
 401673c:	e244b03a 	or	r2,fp,r9
 4016740:	103e371e 	bne	r2,zero,4016020 <__alt_mem_epcs_flash_controller_0+0xfb015020>
 4016744:	00800044 	movi	r2,1
 4016748:	10803fcc 	andi	r2,r2,255
 401674c:	00c00044 	movi	r3,1
 4016750:	10c06126 	beq	r2,r3,40168d8 <___svfiprintf_internal_r+0xffc>
 4016754:	00c00084 	movi	r3,2
 4016758:	10fd5526 	beq	r2,r3,4015cb0 <__alt_mem_epcs_flash_controller_0+0xfb014cb0>
 401675c:	003ed806 	br	40162c0 <__alt_mem_epcs_flash_controller_0+0xfb0152c0>
 4016760:	d8802315 	stw	r2,140(sp)
 4016764:	98c00007 	ldb	r3,0(r19)
 4016768:	003cab06 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 401676c:	d9801a04 	addi	r6,sp,104
 4016770:	b80b883a 	mov	r5,r23
 4016774:	a809883a 	mov	r4,r21
 4016778:	401570c0 	call	401570c <__ssprint_r>
 401677c:	103f651e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 4016780:	d8c01c17 	ldw	r3,112(sp)
 4016784:	003f4f06 	br	40164c4 <__alt_mem_epcs_flash_controller_0+0xfb0154c4>
 4016788:	00810234 	movhi	r2,1032
 401678c:	10afe804 	addi	r2,r2,-16480
 4016790:	d8802915 	stw	r2,164(sp)
 4016794:	003d4406 	br	4015ca8 <__alt_mem_epcs_flash_controller_0+0xfb014ca8>
 4016798:	dac02317 	ldw	r11,140(sp)
 401679c:	58800017 	ldw	r2,0(r11)
 40167a0:	dac02517 	ldw	r11,148(sp)
 40167a4:	5807d7fa 	srai	r3,r11,31
 40167a8:	dac02317 	ldw	r11,140(sp)
 40167ac:	10c00115 	stw	r3,4(r2)
 40167b0:	5ac00104 	addi	r11,r11,4
 40167b4:	dac02315 	stw	r11,140(sp)
 40167b8:	dac02517 	ldw	r11,148(sp)
 40167bc:	12c00015 	stw	r11,0(r2)
 40167c0:	003c6d06 	br	4015978 <__alt_mem_epcs_flash_controller_0+0xfb014978>
 40167c4:	9080100c 	andi	r2,r18,64
 40167c8:	dac02317 	ldw	r11,140(sp)
 40167cc:	103e5326 	beq	r2,zero,401611c <__alt_mem_epcs_flash_controller_0+0xfb01511c>
 40167d0:	5f00000f 	ldh	fp,0(r11)
 40167d4:	5ac00104 	addi	r11,r11,4
 40167d8:	dac02315 	stw	r11,140(sp)
 40167dc:	e013d7fa 	srai	r9,fp,31
 40167e0:	4805883a 	mov	r2,r9
 40167e4:	003e0706 	br	4016004 <__alt_mem_epcs_flash_controller_0+0xfb015004>
 40167e8:	00800c04 	movi	r2,48
 40167ec:	d8801d05 	stb	r2,116(sp)
 40167f0:	d8c01d45 	stb	r3,117(sp)
 40167f4:	d8001d85 	stb	zero,118(sp)
 40167f8:	90800094 	ori	r2,r18,2
 40167fc:	80008f16 	blt	r16,zero,4016a3c <___svfiprintf_internal_r+0x1160>
 4016800:	00bfdfc4 	movi	r2,-129
 4016804:	90a4703a 	and	r18,r18,r2
 4016808:	94800094 	ori	r18,r18,2
 401680c:	0015883a 	mov	r10,zero
 4016810:	003d2906 	br	4015cb8 <__alt_mem_epcs_flash_controller_0+0xfb014cb8>
 4016814:	98c00007 	ldb	r3,0(r19)
 4016818:	003c7f06 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 401681c:	dac02317 	ldw	r11,140(sp)
 4016820:	0013883a 	mov	r9,zero
 4016824:	5f000017 	ldw	fp,0(r11)
 4016828:	5ac00104 	addi	r11,r11,4
 401682c:	dac02315 	stw	r11,140(sp)
 4016830:	003d1506 	br	4015c88 <__alt_mem_epcs_flash_controller_0+0xfb014c88>
 4016834:	9080100c 	andi	r2,r18,64
 4016838:	d8001d85 	stb	zero,118(sp)
 401683c:	dac02317 	ldw	r11,140(sp)
 4016840:	10003426 	beq	r2,zero,4016914 <___svfiprintf_internal_r+0x1038>
 4016844:	58800104 	addi	r2,r11,4
 4016848:	5f00000b 	ldhu	fp,0(r11)
 401684c:	0013883a 	mov	r9,zero
 4016850:	803e950e 	bge	r16,zero,40162a8 <__alt_mem_epcs_flash_controller_0+0xfb0152a8>
 4016854:	e246b03a 	or	r3,fp,r9
 4016858:	d8802315 	stw	r2,140(sp)
 401685c:	183d5a1e 	bne	r3,zero,4015dc8 <__alt_mem_epcs_flash_controller_0+0xfb014dc8>
 4016860:	0015883a 	mov	r10,zero
 4016864:	0005883a 	mov	r2,zero
 4016868:	003fb706 	br	4016748 <__alt_mem_epcs_flash_controller_0+0xfb015748>
 401686c:	98c00043 	ldbu	r3,1(r19)
 4016870:	94800814 	ori	r18,r18,32
 4016874:	9cc00044 	addi	r19,r19,1
 4016878:	18c03fcc 	andi	r3,r3,255
 401687c:	18c0201c 	xori	r3,r3,128
 4016880:	18ffe004 	addi	r3,r3,-128
 4016884:	003c6406 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4016888:	d8c02315 	stw	r3,140(sp)
 401688c:	0015883a 	mov	r10,zero
 4016890:	003faa06 	br	401673c <__alt_mem_epcs_flash_controller_0+0xfb01573c>
 4016894:	dac02317 	ldw	r11,140(sp)
 4016898:	58800017 	ldw	r2,0(r11)
 401689c:	5ac00104 	addi	r11,r11,4
 40168a0:	dac02315 	stw	r11,140(sp)
 40168a4:	dac02517 	ldw	r11,148(sp)
 40168a8:	12c00015 	stw	r11,0(r2)
 40168ac:	003c3206 	br	4015978 <__alt_mem_epcs_flash_controller_0+0xfb014978>
 40168b0:	01010234 	movhi	r4,1032
 40168b4:	212fe804 	addi	r4,r4,-16480
 40168b8:	d9002915 	stw	r4,164(sp)
 40168bc:	d8c02315 	stw	r3,140(sp)
 40168c0:	1025883a 	mov	r18,r2
 40168c4:	e244b03a 	or	r2,fp,r9
 40168c8:	103f871e 	bne	r2,zero,40166e8 <__alt_mem_epcs_flash_controller_0+0xfb0156e8>
 40168cc:	0015883a 	mov	r10,zero
 40168d0:	00800084 	movi	r2,2
 40168d4:	003f9c06 	br	4016748 <__alt_mem_epcs_flash_controller_0+0xfb015748>
 40168d8:	0039883a 	mov	fp,zero
 40168dc:	003e5f06 	br	401625c <__alt_mem_epcs_flash_controller_0+0xfb01525c>
 40168e0:	d9801a04 	addi	r6,sp,104
 40168e4:	b80b883a 	mov	r5,r23
 40168e8:	a809883a 	mov	r4,r21
 40168ec:	401570c0 	call	401570c <__ssprint_r>
 40168f0:	103f081e 	bne	r2,zero,4016514 <__alt_mem_epcs_flash_controller_0+0xfb015514>
 40168f4:	d8c01c17 	ldw	r3,112(sp)
 40168f8:	d8801b17 	ldw	r2,108(sp)
 40168fc:	d811883a 	mov	r8,sp
 4016900:	003e9106 	br	4016348 <__alt_mem_epcs_flash_controller_0+0xfb015348>
 4016904:	01010234 	movhi	r4,1032
 4016908:	21305004 	addi	r4,r4,-16064
 401690c:	d9002215 	stw	r4,136(sp)
 4016910:	003ead06 	br	40163c8 <__alt_mem_epcs_flash_controller_0+0xfb0153c8>
 4016914:	58800104 	addi	r2,r11,4
 4016918:	5f000017 	ldw	fp,0(r11)
 401691c:	0013883a 	mov	r9,zero
 4016920:	803e610e 	bge	r16,zero,40162a8 <__alt_mem_epcs_flash_controller_0+0xfb0152a8>
 4016924:	003fcb06 	br	4016854 <__alt_mem_epcs_flash_controller_0+0xfb015854>
 4016928:	58800104 	addi	r2,r11,4
 401692c:	5f000017 	ldw	fp,0(r11)
 4016930:	0013883a 	mov	r9,zero
 4016934:	803e420e 	bge	r16,zero,4016240 <__alt_mem_epcs_flash_controller_0+0xfb015240>
 4016938:	003f7e06 	br	4016734 <__alt_mem_epcs_flash_controller_0+0xfb015734>
 401693c:	5f000017 	ldw	fp,0(r11)
 4016940:	5ac00104 	addi	r11,r11,4
 4016944:	0013883a 	mov	r9,zero
 4016948:	dac02315 	stw	r11,140(sp)
 401694c:	003cce06 	br	4015c88 <__alt_mem_epcs_flash_controller_0+0xfb014c88>
 4016950:	8809883a 	mov	r4,r17
 4016954:	da002c15 	stw	r8,176(sp)
 4016958:	400c8540 	call	400c854 <strlen>
 401695c:	d8802115 	stw	r2,132(sp)
 4016960:	da801d83 	ldbu	r10,118(sp)
 4016964:	df002315 	stw	fp,140(sp)
 4016968:	0021883a 	mov	r16,zero
 401696c:	da002c17 	ldw	r8,176(sp)
 4016970:	003cf606 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 4016974:	00800184 	movi	r2,6
 4016978:	1400012e 	bgeu	r2,r16,4016980 <___svfiprintf_internal_r+0x10a4>
 401697c:	1021883a 	mov	r16,r2
 4016980:	dc002115 	stw	r16,132(sp)
 4016984:	8005883a 	mov	r2,r16
 4016988:	80003c16 	blt	r16,zero,4016a7c <___svfiprintf_internal_r+0x11a0>
 401698c:	04410234 	movhi	r17,1032
 4016990:	d8802015 	stw	r2,128(sp)
 4016994:	df002315 	stw	fp,140(sp)
 4016998:	8c6fed04 	addi	r17,r17,-16460
 401699c:	003d2e06 	br	4015e58 <__alt_mem_epcs_flash_controller_0+0xfb014e58>
 40169a0:	04001004 	movi	r16,64
 40169a4:	800b883a 	mov	r5,r16
 40169a8:	400bad00 	call	400bad0 <_malloc_r>
 40169ac:	dac02717 	ldw	r11,156(sp)
 40169b0:	58800015 	stw	r2,0(r11)
 40169b4:	58800415 	stw	r2,16(r11)
 40169b8:	10004826 	beq	r2,zero,4016adc <___svfiprintf_internal_r+0x1200>
 40169bc:	dac02717 	ldw	r11,156(sp)
 40169c0:	5c000515 	stw	r16,20(r11)
 40169c4:	003bd906 	br	401592c <__alt_mem_epcs_flash_controller_0+0xfb01492c>
 40169c8:	9080004c 	andi	r2,r18,1
 40169cc:	0015883a 	mov	r10,zero
 40169d0:	10000626 	beq	r2,zero,40169ec <___svfiprintf_internal_r+0x1110>
 40169d4:	dac02b17 	ldw	r11,172(sp)
 40169d8:	00800c04 	movi	r2,48
 40169dc:	d88019c5 	stb	r2,103(sp)
 40169e0:	dac02115 	stw	r11,132(sp)
 40169e4:	dc4019c4 	addi	r17,sp,103
 40169e8:	003cd806 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 40169ec:	d8002115 	stw	zero,132(sp)
 40169f0:	dc401a04 	addi	r17,sp,104
 40169f4:	003cd506 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 40169f8:	01010234 	movhi	r4,1032
 40169fc:	21305404 	addi	r4,r4,-16048
 4016a00:	d9002815 	stw	r4,160(sp)
 4016a04:	003d4306 	br	4015f14 <__alt_mem_epcs_flash_controller_0+0xfb014f14>
 4016a08:	00bfffc4 	movi	r2,-1
 4016a0c:	003ec606 	br	4016528 <__alt_mem_epcs_flash_controller_0+0xfb015528>
 4016a10:	00800044 	movi	r2,1
 4016a14:	10803fcc 	andi	r2,r2,255
 4016a18:	00c00044 	movi	r3,1
 4016a1c:	10fd8026 	beq	r2,r3,4016020 <__alt_mem_epcs_flash_controller_0+0xfb015020>
 4016a20:	00c00084 	movi	r3,2
 4016a24:	10fca426 	beq	r2,r3,4015cb8 <__alt_mem_epcs_flash_controller_0+0xfb014cb8>
 4016a28:	003ce806 	br	4015dcc <__alt_mem_epcs_flash_controller_0+0xfb014dcc>
 4016a2c:	01010234 	movhi	r4,1032
 4016a30:	21305404 	addi	r4,r4,-16048
 4016a34:	d9002815 	stw	r4,160(sp)
 4016a38:	003e9906 	br	40164a0 <__alt_mem_epcs_flash_controller_0+0xfb0154a0>
 4016a3c:	1025883a 	mov	r18,r2
 4016a40:	0015883a 	mov	r10,zero
 4016a44:	00800084 	movi	r2,2
 4016a48:	003ff206 	br	4016a14 <__alt_mem_epcs_flash_controller_0+0xfb015a14>
 4016a4c:	01410234 	movhi	r5,1032
 4016a50:	29705004 	addi	r5,r5,-16064
 4016a54:	d9402215 	stw	r5,136(sp)
 4016a58:	003ee206 	br	40165e4 <__alt_mem_epcs_flash_controller_0+0xfb0155e4>
 4016a5c:	5827883a 	mov	r19,r11
 4016a60:	0021883a 	mov	r16,zero
 4016a64:	003bed06 	br	4015a1c <__alt_mem_epcs_flash_controller_0+0xfb014a1c>
 4016a68:	dc002115 	stw	r16,132(sp)
 4016a6c:	da801d83 	ldbu	r10,118(sp)
 4016a70:	df002315 	stw	fp,140(sp)
 4016a74:	0021883a 	mov	r16,zero
 4016a78:	003cb406 	br	4015d4c <__alt_mem_epcs_flash_controller_0+0xfb014d4c>
 4016a7c:	0005883a 	mov	r2,zero
 4016a80:	003fc206 	br	401698c <__alt_mem_epcs_flash_controller_0+0xfb01598c>
 4016a84:	d8802317 	ldw	r2,140(sp)
 4016a88:	98c00043 	ldbu	r3,1(r19)
 4016a8c:	5827883a 	mov	r19,r11
 4016a90:	14000017 	ldw	r16,0(r2)
 4016a94:	10800104 	addi	r2,r2,4
 4016a98:	d8802315 	stw	r2,140(sp)
 4016a9c:	803f760e 	bge	r16,zero,4016878 <__alt_mem_epcs_flash_controller_0+0xfb015878>
 4016aa0:	18c03fcc 	andi	r3,r3,255
 4016aa4:	18c0201c 	xori	r3,r3,128
 4016aa8:	043fffc4 	movi	r16,-1
 4016aac:	18ffe004 	addi	r3,r3,-128
 4016ab0:	003bd906 	br	4015a18 <__alt_mem_epcs_flash_controller_0+0xfb014a18>
 4016ab4:	d9c01d85 	stb	r7,118(sp)
 4016ab8:	003cb606 	br	4015d94 <__alt_mem_epcs_flash_controller_0+0xfb014d94>
 4016abc:	d9c01d85 	stb	r7,118(sp)
 4016ac0:	003d2106 	br	4015f48 <__alt_mem_epcs_flash_controller_0+0xfb014f48>
 4016ac4:	d9c01d85 	stb	r7,118(sp)
 4016ac8:	003d8e06 	br	4016104 <__alt_mem_epcs_flash_controller_0+0xfb015104>
 4016acc:	d9c01d85 	stb	r7,118(sp)
 4016ad0:	003db306 	br	40161a0 <__alt_mem_epcs_flash_controller_0+0xfb0151a0>
 4016ad4:	d9c01d85 	stb	r7,118(sp)
 4016ad8:	003c8a06 	br	4015d04 <__alt_mem_epcs_flash_controller_0+0xfb014d04>
 4016adc:	dac02a17 	ldw	r11,168(sp)
 4016ae0:	00800304 	movi	r2,12
 4016ae4:	58800015 	stw	r2,0(r11)
 4016ae8:	00bfffc4 	movi	r2,-1
 4016aec:	003e8e06 	br	4016528 <__alt_mem_epcs_flash_controller_0+0xfb015528>
 4016af0:	d9c01d85 	stb	r7,118(sp)
 4016af4:	003dc706 	br	4016214 <__alt_mem_epcs_flash_controller_0+0xfb015214>
 4016af8:	d9c01d85 	stb	r7,118(sp)
 4016afc:	003ddf06 	br	401627c <__alt_mem_epcs_flash_controller_0+0xfb01527c>
 4016b00:	d9c01d85 	stb	r7,118(sp)
 4016b04:	003d3706 	br	4015fe4 <__alt_mem_epcs_flash_controller_0+0xfb014fe4>
 4016b08:	d9c01d85 	stb	r7,118(sp)
 4016b0c:	003c5406 	br	4015c60 <__alt_mem_epcs_flash_controller_0+0xfb014c60>
 4016b10:	d9c01d85 	stb	r7,118(sp)
 4016b14:	003d1d06 	br	4015f8c <__alt_mem_epcs_flash_controller_0+0xfb014f8c>

04016b18 <__sprint_r.part.0>:
 4016b18:	28801917 	ldw	r2,100(r5)
 4016b1c:	defff604 	addi	sp,sp,-40
 4016b20:	dd400515 	stw	r21,20(sp)
 4016b24:	dfc00915 	stw	ra,36(sp)
 4016b28:	df000815 	stw	fp,32(sp)
 4016b2c:	ddc00715 	stw	r23,28(sp)
 4016b30:	dd800615 	stw	r22,24(sp)
 4016b34:	dd000415 	stw	r20,16(sp)
 4016b38:	dcc00315 	stw	r19,12(sp)
 4016b3c:	dc800215 	stw	r18,8(sp)
 4016b40:	dc400115 	stw	r17,4(sp)
 4016b44:	dc000015 	stw	r16,0(sp)
 4016b48:	1088000c 	andi	r2,r2,8192
 4016b4c:	302b883a 	mov	r21,r6
 4016b50:	10002e26 	beq	r2,zero,4016c0c <__sprint_r.part.0+0xf4>
 4016b54:	30800217 	ldw	r2,8(r6)
 4016b58:	35800017 	ldw	r22,0(r6)
 4016b5c:	10002926 	beq	r2,zero,4016c04 <__sprint_r.part.0+0xec>
 4016b60:	2827883a 	mov	r19,r5
 4016b64:	2029883a 	mov	r20,r4
 4016b68:	b5c00104 	addi	r23,r22,4
 4016b6c:	04bfffc4 	movi	r18,-1
 4016b70:	bc400017 	ldw	r17,0(r23)
 4016b74:	b4000017 	ldw	r16,0(r22)
 4016b78:	0039883a 	mov	fp,zero
 4016b7c:	8822d0ba 	srli	r17,r17,2
 4016b80:	8800031e 	bne	r17,zero,4016b90 <__sprint_r.part.0+0x78>
 4016b84:	00001806 	br	4016be8 <__sprint_r.part.0+0xd0>
 4016b88:	84000104 	addi	r16,r16,4
 4016b8c:	8f001526 	beq	r17,fp,4016be4 <__sprint_r.part.0+0xcc>
 4016b90:	81400017 	ldw	r5,0(r16)
 4016b94:	980d883a 	mov	r6,r19
 4016b98:	a009883a 	mov	r4,r20
 4016b9c:	40186980 	call	4018698 <_fputwc_r>
 4016ba0:	e7000044 	addi	fp,fp,1
 4016ba4:	14bff81e 	bne	r2,r18,4016b88 <__alt_mem_epcs_flash_controller_0+0xfb015b88>
 4016ba8:	9005883a 	mov	r2,r18
 4016bac:	a8000215 	stw	zero,8(r21)
 4016bb0:	a8000115 	stw	zero,4(r21)
 4016bb4:	dfc00917 	ldw	ra,36(sp)
 4016bb8:	df000817 	ldw	fp,32(sp)
 4016bbc:	ddc00717 	ldw	r23,28(sp)
 4016bc0:	dd800617 	ldw	r22,24(sp)
 4016bc4:	dd400517 	ldw	r21,20(sp)
 4016bc8:	dd000417 	ldw	r20,16(sp)
 4016bcc:	dcc00317 	ldw	r19,12(sp)
 4016bd0:	dc800217 	ldw	r18,8(sp)
 4016bd4:	dc400117 	ldw	r17,4(sp)
 4016bd8:	dc000017 	ldw	r16,0(sp)
 4016bdc:	dec00a04 	addi	sp,sp,40
 4016be0:	f800283a 	ret
 4016be4:	a8800217 	ldw	r2,8(r21)
 4016be8:	8c63883a 	add	r17,r17,r17
 4016bec:	8c63883a 	add	r17,r17,r17
 4016bf0:	1445c83a 	sub	r2,r2,r17
 4016bf4:	a8800215 	stw	r2,8(r21)
 4016bf8:	b5800204 	addi	r22,r22,8
 4016bfc:	bdc00204 	addi	r23,r23,8
 4016c00:	103fdb1e 	bne	r2,zero,4016b70 <__alt_mem_epcs_flash_controller_0+0xfb015b70>
 4016c04:	0005883a 	mov	r2,zero
 4016c08:	003fe806 	br	4016bac <__alt_mem_epcs_flash_controller_0+0xfb015bac>
 4016c0c:	40133100 	call	4013310 <__sfvwrite_r>
 4016c10:	003fe606 	br	4016bac <__alt_mem_epcs_flash_controller_0+0xfb015bac>

04016c14 <__sprint_r>:
 4016c14:	30c00217 	ldw	r3,8(r6)
 4016c18:	18000126 	beq	r3,zero,4016c20 <__sprint_r+0xc>
 4016c1c:	4016b181 	jmpi	4016b18 <__sprint_r.part.0>
 4016c20:	30000115 	stw	zero,4(r6)
 4016c24:	0005883a 	mov	r2,zero
 4016c28:	f800283a 	ret

04016c2c <___vfiprintf_internal_r>:
 4016c2c:	deffc904 	addi	sp,sp,-220
 4016c30:	df003515 	stw	fp,212(sp)
 4016c34:	dd003115 	stw	r20,196(sp)
 4016c38:	dfc03615 	stw	ra,216(sp)
 4016c3c:	ddc03415 	stw	r23,208(sp)
 4016c40:	dd803315 	stw	r22,204(sp)
 4016c44:	dd403215 	stw	r21,200(sp)
 4016c48:	dcc03015 	stw	r19,192(sp)
 4016c4c:	dc802f15 	stw	r18,188(sp)
 4016c50:	dc402e15 	stw	r17,184(sp)
 4016c54:	dc002d15 	stw	r16,180(sp)
 4016c58:	d9002015 	stw	r4,128(sp)
 4016c5c:	d9c02215 	stw	r7,136(sp)
 4016c60:	2829883a 	mov	r20,r5
 4016c64:	3039883a 	mov	fp,r6
 4016c68:	20000226 	beq	r4,zero,4016c74 <___vfiprintf_internal_r+0x48>
 4016c6c:	20800e17 	ldw	r2,56(r4)
 4016c70:	1000cf26 	beq	r2,zero,4016fb0 <___vfiprintf_internal_r+0x384>
 4016c74:	a080030b 	ldhu	r2,12(r20)
 4016c78:	10c8000c 	andi	r3,r2,8192
 4016c7c:	1800061e 	bne	r3,zero,4016c98 <___vfiprintf_internal_r+0x6c>
 4016c80:	a1001917 	ldw	r4,100(r20)
 4016c84:	00f7ffc4 	movi	r3,-8193
 4016c88:	10880014 	ori	r2,r2,8192
 4016c8c:	20c6703a 	and	r3,r4,r3
 4016c90:	a080030d 	sth	r2,12(r20)
 4016c94:	a0c01915 	stw	r3,100(r20)
 4016c98:	10c0020c 	andi	r3,r2,8
 4016c9c:	1800a926 	beq	r3,zero,4016f44 <___vfiprintf_internal_r+0x318>
 4016ca0:	a0c00417 	ldw	r3,16(r20)
 4016ca4:	1800a726 	beq	r3,zero,4016f44 <___vfiprintf_internal_r+0x318>
 4016ca8:	1080068c 	andi	r2,r2,26
 4016cac:	00c00284 	movi	r3,10
 4016cb0:	10c0ac26 	beq	r2,r3,4016f64 <___vfiprintf_internal_r+0x338>
 4016cb4:	da801a04 	addi	r10,sp,104
 4016cb8:	da801e15 	stw	r10,120(sp)
 4016cbc:	d8801e17 	ldw	r2,120(sp)
 4016cc0:	da8019c4 	addi	r10,sp,103
 4016cc4:	05810234 	movhi	r22,1032
 4016cc8:	05c10234 	movhi	r23,1032
 4016ccc:	da801f15 	stw	r10,124(sp)
 4016cd0:	1295c83a 	sub	r10,r2,r10
 4016cd4:	b5b05c04 	addi	r22,r22,-16016
 4016cd8:	bdf05804 	addi	r23,r23,-16032
 4016cdc:	dec01a15 	stw	sp,104(sp)
 4016ce0:	d8001c15 	stw	zero,112(sp)
 4016ce4:	d8001b15 	stw	zero,108(sp)
 4016ce8:	d8002615 	stw	zero,152(sp)
 4016cec:	d8002315 	stw	zero,140(sp)
 4016cf0:	da802715 	stw	r10,156(sp)
 4016cf4:	d811883a 	mov	r8,sp
 4016cf8:	dd002115 	stw	r20,132(sp)
 4016cfc:	e021883a 	mov	r16,fp
 4016d00:	80800007 	ldb	r2,0(r16)
 4016d04:	1003ea26 	beq	r2,zero,4017cb0 <___vfiprintf_internal_r+0x1084>
 4016d08:	00c00944 	movi	r3,37
 4016d0c:	8025883a 	mov	r18,r16
 4016d10:	10c0021e 	bne	r2,r3,4016d1c <___vfiprintf_internal_r+0xf0>
 4016d14:	00001606 	br	4016d70 <___vfiprintf_internal_r+0x144>
 4016d18:	10c00326 	beq	r2,r3,4016d28 <___vfiprintf_internal_r+0xfc>
 4016d1c:	94800044 	addi	r18,r18,1
 4016d20:	90800007 	ldb	r2,0(r18)
 4016d24:	103ffc1e 	bne	r2,zero,4016d18 <__alt_mem_epcs_flash_controller_0+0xfb015d18>
 4016d28:	9423c83a 	sub	r17,r18,r16
 4016d2c:	88001026 	beq	r17,zero,4016d70 <___vfiprintf_internal_r+0x144>
 4016d30:	d8c01c17 	ldw	r3,112(sp)
 4016d34:	d8801b17 	ldw	r2,108(sp)
 4016d38:	44000015 	stw	r16,0(r8)
 4016d3c:	88c7883a 	add	r3,r17,r3
 4016d40:	10800044 	addi	r2,r2,1
 4016d44:	44400115 	stw	r17,4(r8)
 4016d48:	d8c01c15 	stw	r3,112(sp)
 4016d4c:	d8801b15 	stw	r2,108(sp)
 4016d50:	010001c4 	movi	r4,7
 4016d54:	2080760e 	bge	r4,r2,4016f30 <___vfiprintf_internal_r+0x304>
 4016d58:	1803821e 	bne	r3,zero,4017b64 <___vfiprintf_internal_r+0xf38>
 4016d5c:	da802317 	ldw	r10,140(sp)
 4016d60:	d8001b15 	stw	zero,108(sp)
 4016d64:	d811883a 	mov	r8,sp
 4016d68:	5455883a 	add	r10,r10,r17
 4016d6c:	da802315 	stw	r10,140(sp)
 4016d70:	90800007 	ldb	r2,0(r18)
 4016d74:	10044626 	beq	r2,zero,4017e90 <___vfiprintf_internal_r+0x1264>
 4016d78:	90c00047 	ldb	r3,1(r18)
 4016d7c:	94000044 	addi	r16,r18,1
 4016d80:	d8001d85 	stb	zero,118(sp)
 4016d84:	0009883a 	mov	r4,zero
 4016d88:	000f883a 	mov	r7,zero
 4016d8c:	027fffc4 	movi	r9,-1
 4016d90:	0023883a 	mov	r17,zero
 4016d94:	0029883a 	mov	r20,zero
 4016d98:	01401604 	movi	r5,88
 4016d9c:	01800244 	movi	r6,9
 4016da0:	03400a84 	movi	r13,42
 4016da4:	03001b04 	movi	r12,108
 4016da8:	84000044 	addi	r16,r16,1
 4016dac:	18bff804 	addi	r2,r3,-32
 4016db0:	28827336 	bltu	r5,r2,4017780 <___vfiprintf_internal_r+0xb54>
 4016db4:	100490ba 	slli	r2,r2,2
 4016db8:	02810074 	movhi	r10,1025
 4016dbc:	529b7304 	addi	r10,r10,28108
 4016dc0:	1285883a 	add	r2,r2,r10
 4016dc4:	10800017 	ldw	r2,0(r2)
 4016dc8:	1000683a 	jmp	r2
 4016dcc:	040174b4 	movhi	r16,1490
 4016dd0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016dd4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016dd8:	040174d4 	movui	r16,1491
 4016ddc:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016de0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016de4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016de8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016dec:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016df0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016df4:	040176bc 	xorhi	r16,zero,1498
 4016df8:	040176d8 	cmpnei	r16,zero,1499
 4016dfc:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e00:	04016fc0 	call	4016fc <__alt_mem_sdram-0x3bfe904>
 4016e04:	040176e8 	cmpgeui	r16,zero,1499
 4016e08:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e0c:	040174e0 	cmpeqi	r16,zero,1491
 4016e10:	040174ec 	andhi	r16,zero,1491
 4016e14:	040174ec 	andhi	r16,zero,1491
 4016e18:	040174ec 	andhi	r16,zero,1491
 4016e1c:	040174ec 	andhi	r16,zero,1491
 4016e20:	040174ec 	andhi	r16,zero,1491
 4016e24:	040174ec 	andhi	r16,zero,1491
 4016e28:	040174ec 	andhi	r16,zero,1491
 4016e2c:	040174ec 	andhi	r16,zero,1491
 4016e30:	040174ec 	andhi	r16,zero,1491
 4016e34:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e38:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e3c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e40:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e44:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e48:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e4c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e50:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e54:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e58:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e5c:	04017518 	cmpnei	r16,zero,1492
 4016e60:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e64:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e68:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e6c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e70:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e74:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e78:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e7c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e80:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e84:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e88:	04017550 	cmplti	r16,zero,1493
 4016e8c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e90:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e94:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e98:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016e9c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ea0:	040175a8 	cmpgeui	r16,zero,1494
 4016ea4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ea8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016eac:	04017618 	cmpnei	r16,zero,1496
 4016eb0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016eb4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016eb8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ebc:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ec0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ec4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ec8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ecc:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ed0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ed4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ed8:	040173c4 	movi	r16,1487
 4016edc:	040173f0 	cmpltui	r16,zero,1487
 4016ee0:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ee4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ee8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016eec:	04017728 	cmpgeui	r16,zero,1500
 4016ef0:	040173f0 	cmpltui	r16,zero,1487
 4016ef4:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016ef8:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016efc:	04017284 	movi	r16,1482
 4016f00:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016f04:	04017294 	movui	r16,1482
 4016f08:	040172d0 	cmplti	r16,zero,1483
 4016f0c:	04016fcc 	andi	r16,zero,1471
 4016f10:	04017278 	rdprs	r16,zero,1481
 4016f14:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016f18:	04017654 	movui	r16,1497
 4016f1c:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016f20:	040176ac 	andhi	r16,zero,1498
 4016f24:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016f28:	04017780 	call	401778 <__alt_mem_sdram-0x3bfe888>
 4016f2c:	04017370 	cmpltui	r16,zero,1485
 4016f30:	42000204 	addi	r8,r8,8
 4016f34:	da802317 	ldw	r10,140(sp)
 4016f38:	5455883a 	add	r10,r10,r17
 4016f3c:	da802315 	stw	r10,140(sp)
 4016f40:	003f8b06 	br	4016d70 <__alt_mem_epcs_flash_controller_0+0xfb015d70>
 4016f44:	d9002017 	ldw	r4,128(sp)
 4016f48:	a00b883a 	mov	r5,r20
 4016f4c:	4010eb80 	call	4010eb8 <__swsetup_r>
 4016f50:	1003b11e 	bne	r2,zero,4017e18 <___vfiprintf_internal_r+0x11ec>
 4016f54:	a080030b 	ldhu	r2,12(r20)
 4016f58:	00c00284 	movi	r3,10
 4016f5c:	1080068c 	andi	r2,r2,26
 4016f60:	10ff541e 	bne	r2,r3,4016cb4 <__alt_mem_epcs_flash_controller_0+0xfb015cb4>
 4016f64:	a080038f 	ldh	r2,14(r20)
 4016f68:	103f5216 	blt	r2,zero,4016cb4 <__alt_mem_epcs_flash_controller_0+0xfb015cb4>
 4016f6c:	d9c02217 	ldw	r7,136(sp)
 4016f70:	d9002017 	ldw	r4,128(sp)
 4016f74:	e00d883a 	mov	r6,fp
 4016f78:	a00b883a 	mov	r5,r20
 4016f7c:	40180a40 	call	40180a4 <__sbprintf>
 4016f80:	dfc03617 	ldw	ra,216(sp)
 4016f84:	df003517 	ldw	fp,212(sp)
 4016f88:	ddc03417 	ldw	r23,208(sp)
 4016f8c:	dd803317 	ldw	r22,204(sp)
 4016f90:	dd403217 	ldw	r21,200(sp)
 4016f94:	dd003117 	ldw	r20,196(sp)
 4016f98:	dcc03017 	ldw	r19,192(sp)
 4016f9c:	dc802f17 	ldw	r18,188(sp)
 4016fa0:	dc402e17 	ldw	r17,184(sp)
 4016fa4:	dc002d17 	ldw	r16,180(sp)
 4016fa8:	dec03704 	addi	sp,sp,220
 4016fac:	f800283a 	ret
 4016fb0:	4012e8c0 	call	4012e8c <__sinit>
 4016fb4:	003f2f06 	br	4016c74 <__alt_mem_epcs_flash_controller_0+0xfb015c74>
 4016fb8:	0463c83a 	sub	r17,zero,r17
 4016fbc:	d8802215 	stw	r2,136(sp)
 4016fc0:	a5000114 	ori	r20,r20,4
 4016fc4:	80c00007 	ldb	r3,0(r16)
 4016fc8:	003f7706 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4016fcc:	00800c04 	movi	r2,48
 4016fd0:	da802217 	ldw	r10,136(sp)
 4016fd4:	d8801d05 	stb	r2,116(sp)
 4016fd8:	00801e04 	movi	r2,120
 4016fdc:	d8801d45 	stb	r2,117(sp)
 4016fe0:	d8001d85 	stb	zero,118(sp)
 4016fe4:	50c00104 	addi	r3,r10,4
 4016fe8:	54800017 	ldw	r18,0(r10)
 4016fec:	0027883a 	mov	r19,zero
 4016ff0:	a0800094 	ori	r2,r20,2
 4016ff4:	48030b16 	blt	r9,zero,4017c24 <___vfiprintf_internal_r+0xff8>
 4016ff8:	00bfdfc4 	movi	r2,-129
 4016ffc:	a096703a 	and	r11,r20,r2
 4017000:	d8c02215 	stw	r3,136(sp)
 4017004:	5d000094 	ori	r20,r11,2
 4017008:	90032b1e 	bne	r18,zero,4017cb8 <___vfiprintf_internal_r+0x108c>
 401700c:	00810234 	movhi	r2,1032
 4017010:	10afe804 	addi	r2,r2,-16480
 4017014:	d8802615 	stw	r2,152(sp)
 4017018:	0039883a 	mov	fp,zero
 401701c:	48017b1e 	bne	r9,zero,401760c <___vfiprintf_internal_r+0x9e0>
 4017020:	0013883a 	mov	r9,zero
 4017024:	0027883a 	mov	r19,zero
 4017028:	dd401a04 	addi	r21,sp,104
 401702c:	4825883a 	mov	r18,r9
 4017030:	4cc0010e 	bge	r9,r19,4017038 <___vfiprintf_internal_r+0x40c>
 4017034:	9825883a 	mov	r18,r19
 4017038:	e7003fcc 	andi	fp,fp,255
 401703c:	e700201c 	xori	fp,fp,128
 4017040:	e73fe004 	addi	fp,fp,-128
 4017044:	e0000126 	beq	fp,zero,401704c <___vfiprintf_internal_r+0x420>
 4017048:	94800044 	addi	r18,r18,1
 401704c:	a380008c 	andi	r14,r20,2
 4017050:	70000126 	beq	r14,zero,4017058 <___vfiprintf_internal_r+0x42c>
 4017054:	94800084 	addi	r18,r18,2
 4017058:	a700210c 	andi	fp,r20,132
 401705c:	e001df1e 	bne	fp,zero,40177dc <___vfiprintf_internal_r+0xbb0>
 4017060:	8c87c83a 	sub	r3,r17,r18
 4017064:	00c1dd0e 	bge	zero,r3,40177dc <___vfiprintf_internal_r+0xbb0>
 4017068:	01c00404 	movi	r7,16
 401706c:	d8801c17 	ldw	r2,112(sp)
 4017070:	38c3ad0e 	bge	r7,r3,4017f28 <___vfiprintf_internal_r+0x12fc>
 4017074:	02810234 	movhi	r10,1032
 4017078:	52b05c04 	addi	r10,r10,-16016
 401707c:	dc002915 	stw	r16,164(sp)
 4017080:	d9801b17 	ldw	r6,108(sp)
 4017084:	da802415 	stw	r10,144(sp)
 4017088:	03c001c4 	movi	r15,7
 401708c:	da402515 	stw	r9,148(sp)
 4017090:	db802815 	stw	r14,160(sp)
 4017094:	1821883a 	mov	r16,r3
 4017098:	00000506 	br	40170b0 <___vfiprintf_internal_r+0x484>
 401709c:	31400084 	addi	r5,r6,2
 40170a0:	42000204 	addi	r8,r8,8
 40170a4:	200d883a 	mov	r6,r4
 40170a8:	843ffc04 	addi	r16,r16,-16
 40170ac:	3c000d0e 	bge	r7,r16,40170e4 <___vfiprintf_internal_r+0x4b8>
 40170b0:	10800404 	addi	r2,r2,16
 40170b4:	31000044 	addi	r4,r6,1
 40170b8:	45800015 	stw	r22,0(r8)
 40170bc:	41c00115 	stw	r7,4(r8)
 40170c0:	d8801c15 	stw	r2,112(sp)
 40170c4:	d9001b15 	stw	r4,108(sp)
 40170c8:	793ff40e 	bge	r15,r4,401709c <__alt_mem_epcs_flash_controller_0+0xfb01609c>
 40170cc:	1001b51e 	bne	r2,zero,40177a4 <___vfiprintf_internal_r+0xb78>
 40170d0:	843ffc04 	addi	r16,r16,-16
 40170d4:	000d883a 	mov	r6,zero
 40170d8:	01400044 	movi	r5,1
 40170dc:	d811883a 	mov	r8,sp
 40170e0:	3c3ff316 	blt	r7,r16,40170b0 <__alt_mem_epcs_flash_controller_0+0xfb0160b0>
 40170e4:	8007883a 	mov	r3,r16
 40170e8:	da402517 	ldw	r9,148(sp)
 40170ec:	db802817 	ldw	r14,160(sp)
 40170f0:	dc002917 	ldw	r16,164(sp)
 40170f4:	da802417 	ldw	r10,144(sp)
 40170f8:	1885883a 	add	r2,r3,r2
 40170fc:	40c00115 	stw	r3,4(r8)
 4017100:	42800015 	stw	r10,0(r8)
 4017104:	d8801c15 	stw	r2,112(sp)
 4017108:	d9401b15 	stw	r5,108(sp)
 401710c:	00c001c4 	movi	r3,7
 4017110:	19426016 	blt	r3,r5,4017a94 <___vfiprintf_internal_r+0xe68>
 4017114:	d8c01d87 	ldb	r3,118(sp)
 4017118:	42000204 	addi	r8,r8,8
 401711c:	29000044 	addi	r4,r5,1
 4017120:	1801b31e 	bne	r3,zero,40177f0 <___vfiprintf_internal_r+0xbc4>
 4017124:	7001c026 	beq	r14,zero,4017828 <___vfiprintf_internal_r+0xbfc>
 4017128:	d8c01d04 	addi	r3,sp,116
 401712c:	10800084 	addi	r2,r2,2
 4017130:	40c00015 	stw	r3,0(r8)
 4017134:	00c00084 	movi	r3,2
 4017138:	40c00115 	stw	r3,4(r8)
 401713c:	d8801c15 	stw	r2,112(sp)
 4017140:	d9001b15 	stw	r4,108(sp)
 4017144:	00c001c4 	movi	r3,7
 4017148:	1902650e 	bge	r3,r4,4017ae0 <___vfiprintf_internal_r+0xeb4>
 401714c:	10029a1e 	bne	r2,zero,4017bb8 <___vfiprintf_internal_r+0xf8c>
 4017150:	00c02004 	movi	r3,128
 4017154:	01000044 	movi	r4,1
 4017158:	000b883a 	mov	r5,zero
 401715c:	d811883a 	mov	r8,sp
 4017160:	e0c1b31e 	bne	fp,r3,4017830 <___vfiprintf_internal_r+0xc04>
 4017164:	8cb9c83a 	sub	fp,r17,r18
 4017168:	0701b10e 	bge	zero,fp,4017830 <___vfiprintf_internal_r+0xc04>
 401716c:	01c00404 	movi	r7,16
 4017170:	3f03890e 	bge	r7,fp,4017f98 <___vfiprintf_internal_r+0x136c>
 4017174:	00c10234 	movhi	r3,1032
 4017178:	18f05804 	addi	r3,r3,-16032
 401717c:	d8c02415 	stw	r3,144(sp)
 4017180:	8007883a 	mov	r3,r16
 4017184:	034001c4 	movi	r13,7
 4017188:	e021883a 	mov	r16,fp
 401718c:	da402515 	stw	r9,148(sp)
 4017190:	1839883a 	mov	fp,r3
 4017194:	00000506 	br	40171ac <___vfiprintf_internal_r+0x580>
 4017198:	29800084 	addi	r6,r5,2
 401719c:	42000204 	addi	r8,r8,8
 40171a0:	180b883a 	mov	r5,r3
 40171a4:	843ffc04 	addi	r16,r16,-16
 40171a8:	3c000d0e 	bge	r7,r16,40171e0 <___vfiprintf_internal_r+0x5b4>
 40171ac:	10800404 	addi	r2,r2,16
 40171b0:	28c00044 	addi	r3,r5,1
 40171b4:	45c00015 	stw	r23,0(r8)
 40171b8:	41c00115 	stw	r7,4(r8)
 40171bc:	d8801c15 	stw	r2,112(sp)
 40171c0:	d8c01b15 	stw	r3,108(sp)
 40171c4:	68fff40e 	bge	r13,r3,4017198 <__alt_mem_epcs_flash_controller_0+0xfb016198>
 40171c8:	1002241e 	bne	r2,zero,4017a5c <___vfiprintf_internal_r+0xe30>
 40171cc:	843ffc04 	addi	r16,r16,-16
 40171d0:	01800044 	movi	r6,1
 40171d4:	000b883a 	mov	r5,zero
 40171d8:	d811883a 	mov	r8,sp
 40171dc:	3c3ff316 	blt	r7,r16,40171ac <__alt_mem_epcs_flash_controller_0+0xfb0161ac>
 40171e0:	da402517 	ldw	r9,148(sp)
 40171e4:	e007883a 	mov	r3,fp
 40171e8:	8039883a 	mov	fp,r16
 40171ec:	1821883a 	mov	r16,r3
 40171f0:	d8c02417 	ldw	r3,144(sp)
 40171f4:	1705883a 	add	r2,r2,fp
 40171f8:	47000115 	stw	fp,4(r8)
 40171fc:	40c00015 	stw	r3,0(r8)
 4017200:	d8801c15 	stw	r2,112(sp)
 4017204:	d9801b15 	stw	r6,108(sp)
 4017208:	00c001c4 	movi	r3,7
 401720c:	19827616 	blt	r3,r6,4017be8 <___vfiprintf_internal_r+0xfbc>
 4017210:	4cf9c83a 	sub	fp,r9,r19
 4017214:	42000204 	addi	r8,r8,8
 4017218:	31000044 	addi	r4,r6,1
 401721c:	300b883a 	mov	r5,r6
 4017220:	07018516 	blt	zero,fp,4017838 <___vfiprintf_internal_r+0xc0c>
 4017224:	9885883a 	add	r2,r19,r2
 4017228:	45400015 	stw	r21,0(r8)
 401722c:	44c00115 	stw	r19,4(r8)
 4017230:	d8801c15 	stw	r2,112(sp)
 4017234:	d9001b15 	stw	r4,108(sp)
 4017238:	00c001c4 	movi	r3,7
 401723c:	1901dd0e 	bge	r3,r4,40179b4 <___vfiprintf_internal_r+0xd88>
 4017240:	1002401e 	bne	r2,zero,4017b44 <___vfiprintf_internal_r+0xf18>
 4017244:	d8001b15 	stw	zero,108(sp)
 4017248:	a2c0010c 	andi	r11,r20,4
 401724c:	58000226 	beq	r11,zero,4017258 <___vfiprintf_internal_r+0x62c>
 4017250:	8ca7c83a 	sub	r19,r17,r18
 4017254:	04c2f216 	blt	zero,r19,4017e20 <___vfiprintf_internal_r+0x11f4>
 4017258:	8c80010e 	bge	r17,r18,4017260 <___vfiprintf_internal_r+0x634>
 401725c:	9023883a 	mov	r17,r18
 4017260:	da802317 	ldw	r10,140(sp)
 4017264:	5455883a 	add	r10,r10,r17
 4017268:	da802315 	stw	r10,140(sp)
 401726c:	d8001b15 	stw	zero,108(sp)
 4017270:	d811883a 	mov	r8,sp
 4017274:	003ea206 	br	4016d00 <__alt_mem_epcs_flash_controller_0+0xfb015d00>
 4017278:	a5000814 	ori	r20,r20,32
 401727c:	80c00007 	ldb	r3,0(r16)
 4017280:	003ec906 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4017284:	80c00007 	ldb	r3,0(r16)
 4017288:	1b030926 	beq	r3,r12,4017eb0 <___vfiprintf_internal_r+0x1284>
 401728c:	a5000414 	ori	r20,r20,16
 4017290:	003ec506 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4017294:	21003fcc 	andi	r4,r4,255
 4017298:	20035e1e 	bne	r4,zero,4018014 <___vfiprintf_internal_r+0x13e8>
 401729c:	a080080c 	andi	r2,r20,32
 40172a0:	1002a526 	beq	r2,zero,4017d38 <___vfiprintf_internal_r+0x110c>
 40172a4:	da802217 	ldw	r10,136(sp)
 40172a8:	50800017 	ldw	r2,0(r10)
 40172ac:	da802317 	ldw	r10,140(sp)
 40172b0:	5007d7fa 	srai	r3,r10,31
 40172b4:	da802217 	ldw	r10,136(sp)
 40172b8:	10c00115 	stw	r3,4(r2)
 40172bc:	52800104 	addi	r10,r10,4
 40172c0:	da802215 	stw	r10,136(sp)
 40172c4:	da802317 	ldw	r10,140(sp)
 40172c8:	12800015 	stw	r10,0(r2)
 40172cc:	003e8c06 	br	4016d00 <__alt_mem_epcs_flash_controller_0+0xfb015d00>
 40172d0:	21003fcc 	andi	r4,r4,255
 40172d4:	2003511e 	bne	r4,zero,401801c <___vfiprintf_internal_r+0x13f0>
 40172d8:	a080080c 	andi	r2,r20,32
 40172dc:	1000a126 	beq	r2,zero,4017564 <___vfiprintf_internal_r+0x938>
 40172e0:	da802217 	ldw	r10,136(sp)
 40172e4:	d8001d85 	stb	zero,118(sp)
 40172e8:	50800204 	addi	r2,r10,8
 40172ec:	54800017 	ldw	r18,0(r10)
 40172f0:	54c00117 	ldw	r19,4(r10)
 40172f4:	4802b416 	blt	r9,zero,4017dc8 <___vfiprintf_internal_r+0x119c>
 40172f8:	013fdfc4 	movi	r4,-129
 40172fc:	94c6b03a 	or	r3,r18,r19
 4017300:	d8802215 	stw	r2,136(sp)
 4017304:	a128703a 	and	r20,r20,r4
 4017308:	1800a226 	beq	r3,zero,4017594 <___vfiprintf_internal_r+0x968>
 401730c:	0039883a 	mov	fp,zero
 4017310:	dd401a04 	addi	r21,sp,104
 4017314:	9006d0fa 	srli	r3,r18,3
 4017318:	9808977a 	slli	r4,r19,29
 401731c:	9826d0fa 	srli	r19,r19,3
 4017320:	948001cc 	andi	r18,r18,7
 4017324:	90800c04 	addi	r2,r18,48
 4017328:	ad7fffc4 	addi	r21,r21,-1
 401732c:	20e4b03a 	or	r18,r4,r3
 4017330:	a8800005 	stb	r2,0(r21)
 4017334:	94c6b03a 	or	r3,r18,r19
 4017338:	183ff61e 	bne	r3,zero,4017314 <__alt_mem_epcs_flash_controller_0+0xfb016314>
 401733c:	a0c0004c 	andi	r3,r20,1
 4017340:	18005926 	beq	r3,zero,40174a8 <___vfiprintf_internal_r+0x87c>
 4017344:	10803fcc 	andi	r2,r2,255
 4017348:	1080201c 	xori	r2,r2,128
 401734c:	10bfe004 	addi	r2,r2,-128
 4017350:	00c00c04 	movi	r3,48
 4017354:	10c05426 	beq	r2,r3,40174a8 <___vfiprintf_internal_r+0x87c>
 4017358:	da801e17 	ldw	r10,120(sp)
 401735c:	a8bfffc4 	addi	r2,r21,-1
 4017360:	a8ffffc5 	stb	r3,-1(r21)
 4017364:	50a7c83a 	sub	r19,r10,r2
 4017368:	102b883a 	mov	r21,r2
 401736c:	003f2f06 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4017370:	21003fcc 	andi	r4,r4,255
 4017374:	2003421e 	bne	r4,zero,4018080 <___vfiprintf_internal_r+0x1454>
 4017378:	00810234 	movhi	r2,1032
 401737c:	10afe804 	addi	r2,r2,-16480
 4017380:	d8802615 	stw	r2,152(sp)
 4017384:	a080080c 	andi	r2,r20,32
 4017388:	1000aa26 	beq	r2,zero,4017634 <___vfiprintf_internal_r+0xa08>
 401738c:	da802217 	ldw	r10,136(sp)
 4017390:	54800017 	ldw	r18,0(r10)
 4017394:	54c00117 	ldw	r19,4(r10)
 4017398:	52800204 	addi	r10,r10,8
 401739c:	da802215 	stw	r10,136(sp)
 40173a0:	a080004c 	andi	r2,r20,1
 40173a4:	1001d226 	beq	r2,zero,4017af0 <___vfiprintf_internal_r+0xec4>
 40173a8:	94c4b03a 	or	r2,r18,r19
 40173ac:	1002351e 	bne	r2,zero,4017c84 <___vfiprintf_internal_r+0x1058>
 40173b0:	d8001d85 	stb	zero,118(sp)
 40173b4:	48022216 	blt	r9,zero,4017c40 <___vfiprintf_internal_r+0x1014>
 40173b8:	00bfdfc4 	movi	r2,-129
 40173bc:	a0a8703a 	and	r20,r20,r2
 40173c0:	003f1506 	br	4017018 <__alt_mem_epcs_flash_controller_0+0xfb016018>
 40173c4:	da802217 	ldw	r10,136(sp)
 40173c8:	04800044 	movi	r18,1
 40173cc:	d8001d85 	stb	zero,118(sp)
 40173d0:	50800017 	ldw	r2,0(r10)
 40173d4:	52800104 	addi	r10,r10,4
 40173d8:	da802215 	stw	r10,136(sp)
 40173dc:	d8801005 	stb	r2,64(sp)
 40173e0:	9027883a 	mov	r19,r18
 40173e4:	dd401004 	addi	r21,sp,64
 40173e8:	0013883a 	mov	r9,zero
 40173ec:	003f1706 	br	401704c <__alt_mem_epcs_flash_controller_0+0xfb01604c>
 40173f0:	21003fcc 	andi	r4,r4,255
 40173f4:	2003201e 	bne	r4,zero,4018078 <___vfiprintf_internal_r+0x144c>
 40173f8:	a080080c 	andi	r2,r20,32
 40173fc:	10004b26 	beq	r2,zero,401752c <___vfiprintf_internal_r+0x900>
 4017400:	da802217 	ldw	r10,136(sp)
 4017404:	50800117 	ldw	r2,4(r10)
 4017408:	54800017 	ldw	r18,0(r10)
 401740c:	52800204 	addi	r10,r10,8
 4017410:	da802215 	stw	r10,136(sp)
 4017414:	1027883a 	mov	r19,r2
 4017418:	10022c16 	blt	r2,zero,4017ccc <___vfiprintf_internal_r+0x10a0>
 401741c:	df001d83 	ldbu	fp,118(sp)
 4017420:	48007216 	blt	r9,zero,40175ec <___vfiprintf_internal_r+0x9c0>
 4017424:	00ffdfc4 	movi	r3,-129
 4017428:	94c4b03a 	or	r2,r18,r19
 401742c:	a0e8703a 	and	r20,r20,r3
 4017430:	1000cc26 	beq	r2,zero,4017764 <___vfiprintf_internal_r+0xb38>
 4017434:	98021026 	beq	r19,zero,4017c78 <___vfiprintf_internal_r+0x104c>
 4017438:	dc402415 	stw	r17,144(sp)
 401743c:	dc002515 	stw	r16,148(sp)
 4017440:	9823883a 	mov	r17,r19
 4017444:	9021883a 	mov	r16,r18
 4017448:	dd401a04 	addi	r21,sp,104
 401744c:	4825883a 	mov	r18,r9
 4017450:	4027883a 	mov	r19,r8
 4017454:	8009883a 	mov	r4,r16
 4017458:	880b883a 	mov	r5,r17
 401745c:	01800284 	movi	r6,10
 4017460:	000f883a 	mov	r7,zero
 4017464:	401900c0 	call	401900c <__umoddi3>
 4017468:	10800c04 	addi	r2,r2,48
 401746c:	ad7fffc4 	addi	r21,r21,-1
 4017470:	8009883a 	mov	r4,r16
 4017474:	880b883a 	mov	r5,r17
 4017478:	a8800005 	stb	r2,0(r21)
 401747c:	01800284 	movi	r6,10
 4017480:	000f883a 	mov	r7,zero
 4017484:	4018a940 	call	4018a94 <__udivdi3>
 4017488:	1021883a 	mov	r16,r2
 401748c:	10c4b03a 	or	r2,r2,r3
 4017490:	1823883a 	mov	r17,r3
 4017494:	103fef1e 	bne	r2,zero,4017454 <__alt_mem_epcs_flash_controller_0+0xfb016454>
 4017498:	dc402417 	ldw	r17,144(sp)
 401749c:	dc002517 	ldw	r16,148(sp)
 40174a0:	9013883a 	mov	r9,r18
 40174a4:	9811883a 	mov	r8,r19
 40174a8:	da801e17 	ldw	r10,120(sp)
 40174ac:	5567c83a 	sub	r19,r10,r21
 40174b0:	003ede06 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 40174b4:	38803fcc 	andi	r2,r7,255
 40174b8:	1080201c 	xori	r2,r2,128
 40174bc:	10bfe004 	addi	r2,r2,-128
 40174c0:	1002371e 	bne	r2,zero,4017da0 <___vfiprintf_internal_r+0x1174>
 40174c4:	01000044 	movi	r4,1
 40174c8:	01c00804 	movi	r7,32
 40174cc:	80c00007 	ldb	r3,0(r16)
 40174d0:	003e3506 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 40174d4:	a5000054 	ori	r20,r20,1
 40174d8:	80c00007 	ldb	r3,0(r16)
 40174dc:	003e3206 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 40174e0:	a5002014 	ori	r20,r20,128
 40174e4:	80c00007 	ldb	r3,0(r16)
 40174e8:	003e2f06 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 40174ec:	8015883a 	mov	r10,r16
 40174f0:	0023883a 	mov	r17,zero
 40174f4:	18bff404 	addi	r2,r3,-48
 40174f8:	50c00007 	ldb	r3,0(r10)
 40174fc:	8c4002a4 	muli	r17,r17,10
 4017500:	84000044 	addi	r16,r16,1
 4017504:	8015883a 	mov	r10,r16
 4017508:	1463883a 	add	r17,r2,r17
 401750c:	18bff404 	addi	r2,r3,-48
 4017510:	30bff92e 	bgeu	r6,r2,40174f8 <__alt_mem_epcs_flash_controller_0+0xfb0164f8>
 4017514:	003e2506 	br	4016dac <__alt_mem_epcs_flash_controller_0+0xfb015dac>
 4017518:	21003fcc 	andi	r4,r4,255
 401751c:	2002d41e 	bne	r4,zero,4018070 <___vfiprintf_internal_r+0x1444>
 4017520:	a5000414 	ori	r20,r20,16
 4017524:	a080080c 	andi	r2,r20,32
 4017528:	103fb51e 	bne	r2,zero,4017400 <__alt_mem_epcs_flash_controller_0+0xfb016400>
 401752c:	a080040c 	andi	r2,r20,16
 4017530:	1001f826 	beq	r2,zero,4017d14 <___vfiprintf_internal_r+0x10e8>
 4017534:	da802217 	ldw	r10,136(sp)
 4017538:	54800017 	ldw	r18,0(r10)
 401753c:	52800104 	addi	r10,r10,4
 4017540:	da802215 	stw	r10,136(sp)
 4017544:	9027d7fa 	srai	r19,r18,31
 4017548:	9805883a 	mov	r2,r19
 401754c:	003fb206 	br	4017418 <__alt_mem_epcs_flash_controller_0+0xfb016418>
 4017550:	21003fcc 	andi	r4,r4,255
 4017554:	2002c41e 	bne	r4,zero,4018068 <___vfiprintf_internal_r+0x143c>
 4017558:	a5000414 	ori	r20,r20,16
 401755c:	a080080c 	andi	r2,r20,32
 4017560:	103f5f1e 	bne	r2,zero,40172e0 <__alt_mem_epcs_flash_controller_0+0xfb0162e0>
 4017564:	a080040c 	andi	r2,r20,16
 4017568:	10020f26 	beq	r2,zero,4017da8 <___vfiprintf_internal_r+0x117c>
 401756c:	da802217 	ldw	r10,136(sp)
 4017570:	d8001d85 	stb	zero,118(sp)
 4017574:	0027883a 	mov	r19,zero
 4017578:	50800104 	addi	r2,r10,4
 401757c:	54800017 	ldw	r18,0(r10)
 4017580:	48021116 	blt	r9,zero,4017dc8 <___vfiprintf_internal_r+0x119c>
 4017584:	00ffdfc4 	movi	r3,-129
 4017588:	d8802215 	stw	r2,136(sp)
 401758c:	a0e8703a 	and	r20,r20,r3
 4017590:	903f5e1e 	bne	r18,zero,401730c <__alt_mem_epcs_flash_controller_0+0xfb01630c>
 4017594:	0039883a 	mov	fp,zero
 4017598:	4802a626 	beq	r9,zero,4018034 <___vfiprintf_internal_r+0x1408>
 401759c:	0025883a 	mov	r18,zero
 40175a0:	0027883a 	mov	r19,zero
 40175a4:	003f5a06 	br	4017310 <__alt_mem_epcs_flash_controller_0+0xfb016310>
 40175a8:	21003fcc 	andi	r4,r4,255
 40175ac:	20029f1e 	bne	r4,zero,401802c <___vfiprintf_internal_r+0x1400>
 40175b0:	a5000414 	ori	r20,r20,16
 40175b4:	a080080c 	andi	r2,r20,32
 40175b8:	10005e1e 	bne	r2,zero,4017734 <___vfiprintf_internal_r+0xb08>
 40175bc:	a080040c 	andi	r2,r20,16
 40175c0:	1001a21e 	bne	r2,zero,4017c4c <___vfiprintf_internal_r+0x1020>
 40175c4:	a080100c 	andi	r2,r20,64
 40175c8:	d8001d85 	stb	zero,118(sp)
 40175cc:	da802217 	ldw	r10,136(sp)
 40175d0:	1002231e 	bne	r2,zero,4017e60 <___vfiprintf_internal_r+0x1234>
 40175d4:	50800104 	addi	r2,r10,4
 40175d8:	54800017 	ldw	r18,0(r10)
 40175dc:	0027883a 	mov	r19,zero
 40175e0:	4801a00e 	bge	r9,zero,4017c64 <___vfiprintf_internal_r+0x1038>
 40175e4:	d8802215 	stw	r2,136(sp)
 40175e8:	0039883a 	mov	fp,zero
 40175ec:	94c4b03a 	or	r2,r18,r19
 40175f0:	103f901e 	bne	r2,zero,4017434 <__alt_mem_epcs_flash_controller_0+0xfb016434>
 40175f4:	00800044 	movi	r2,1
 40175f8:	10803fcc 	andi	r2,r2,255
 40175fc:	00c00044 	movi	r3,1
 4017600:	10c05926 	beq	r2,r3,4017768 <___vfiprintf_internal_r+0xb3c>
 4017604:	00c00084 	movi	r3,2
 4017608:	10ffe41e 	bne	r2,r3,401759c <__alt_mem_epcs_flash_controller_0+0xfb01659c>
 401760c:	0025883a 	mov	r18,zero
 4017610:	0027883a 	mov	r19,zero
 4017614:	00013d06 	br	4017b0c <___vfiprintf_internal_r+0xee0>
 4017618:	21003fcc 	andi	r4,r4,255
 401761c:	2002811e 	bne	r4,zero,4018024 <___vfiprintf_internal_r+0x13f8>
 4017620:	00810234 	movhi	r2,1032
 4017624:	10afe304 	addi	r2,r2,-16500
 4017628:	d8802615 	stw	r2,152(sp)
 401762c:	a080080c 	andi	r2,r20,32
 4017630:	103f561e 	bne	r2,zero,401738c <__alt_mem_epcs_flash_controller_0+0xfb01638c>
 4017634:	a080040c 	andi	r2,r20,16
 4017638:	1001d126 	beq	r2,zero,4017d80 <___vfiprintf_internal_r+0x1154>
 401763c:	da802217 	ldw	r10,136(sp)
 4017640:	0027883a 	mov	r19,zero
 4017644:	54800017 	ldw	r18,0(r10)
 4017648:	52800104 	addi	r10,r10,4
 401764c:	da802215 	stw	r10,136(sp)
 4017650:	003f5306 	br	40173a0 <__alt_mem_epcs_flash_controller_0+0xfb0163a0>
 4017654:	da802217 	ldw	r10,136(sp)
 4017658:	d8001d85 	stb	zero,118(sp)
 401765c:	55400017 	ldw	r21,0(r10)
 4017660:	50c00104 	addi	r3,r10,4
 4017664:	a8024226 	beq	r21,zero,4017f70 <___vfiprintf_internal_r+0x1344>
 4017668:	48021816 	blt	r9,zero,4017ecc <___vfiprintf_internal_r+0x12a0>
 401766c:	480d883a 	mov	r6,r9
 4017670:	000b883a 	mov	r5,zero
 4017674:	a809883a 	mov	r4,r21
 4017678:	d8c02a15 	stw	r3,168(sp)
 401767c:	da002b15 	stw	r8,172(sp)
 4017680:	da402c15 	stw	r9,176(sp)
 4017684:	4013bec0 	call	4013bec <memchr>
 4017688:	d8c02a17 	ldw	r3,168(sp)
 401768c:	da002b17 	ldw	r8,172(sp)
 4017690:	da402c17 	ldw	r9,176(sp)
 4017694:	10024826 	beq	r2,zero,4017fb8 <___vfiprintf_internal_r+0x138c>
 4017698:	1567c83a 	sub	r19,r2,r21
 401769c:	df001d83 	ldbu	fp,118(sp)
 40176a0:	d8c02215 	stw	r3,136(sp)
 40176a4:	0013883a 	mov	r9,zero
 40176a8:	003e6006 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 40176ac:	21003fcc 	andi	r4,r4,255
 40176b0:	203fc026 	beq	r4,zero,40175b4 <__alt_mem_epcs_flash_controller_0+0xfb0165b4>
 40176b4:	d9c01d85 	stb	r7,118(sp)
 40176b8:	003fbe06 	br	40175b4 <__alt_mem_epcs_flash_controller_0+0xfb0165b4>
 40176bc:	da802217 	ldw	r10,136(sp)
 40176c0:	54400017 	ldw	r17,0(r10)
 40176c4:	50800104 	addi	r2,r10,4
 40176c8:	883e3b16 	blt	r17,zero,4016fb8 <__alt_mem_epcs_flash_controller_0+0xfb015fb8>
 40176cc:	d8802215 	stw	r2,136(sp)
 40176d0:	80c00007 	ldb	r3,0(r16)
 40176d4:	003db406 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 40176d8:	01000044 	movi	r4,1
 40176dc:	01c00ac4 	movi	r7,43
 40176e0:	80c00007 	ldb	r3,0(r16)
 40176e4:	003db006 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 40176e8:	80c00007 	ldb	r3,0(r16)
 40176ec:	82800044 	addi	r10,r16,1
 40176f0:	1b423c26 	beq	r3,r13,4017fe4 <___vfiprintf_internal_r+0x13b8>
 40176f4:	18bff404 	addi	r2,r3,-48
 40176f8:	0013883a 	mov	r9,zero
 40176fc:	30822b36 	bltu	r6,r2,4017fac <___vfiprintf_internal_r+0x1380>
 4017700:	50c00007 	ldb	r3,0(r10)
 4017704:	4a4002a4 	muli	r9,r9,10
 4017708:	54000044 	addi	r16,r10,1
 401770c:	8015883a 	mov	r10,r16
 4017710:	4893883a 	add	r9,r9,r2
 4017714:	18bff404 	addi	r2,r3,-48
 4017718:	30bff92e 	bgeu	r6,r2,4017700 <__alt_mem_epcs_flash_controller_0+0xfb016700>
 401771c:	483da30e 	bge	r9,zero,4016dac <__alt_mem_epcs_flash_controller_0+0xfb015dac>
 4017720:	027fffc4 	movi	r9,-1
 4017724:	003da106 	br	4016dac <__alt_mem_epcs_flash_controller_0+0xfb015dac>
 4017728:	a5001014 	ori	r20,r20,64
 401772c:	80c00007 	ldb	r3,0(r16)
 4017730:	003d9d06 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4017734:	da802217 	ldw	r10,136(sp)
 4017738:	d8001d85 	stb	zero,118(sp)
 401773c:	50c00204 	addi	r3,r10,8
 4017740:	54800017 	ldw	r18,0(r10)
 4017744:	54c00117 	ldw	r19,4(r10)
 4017748:	4801ca16 	blt	r9,zero,4017e74 <___vfiprintf_internal_r+0x1248>
 401774c:	013fdfc4 	movi	r4,-129
 4017750:	94c4b03a 	or	r2,r18,r19
 4017754:	d8c02215 	stw	r3,136(sp)
 4017758:	a128703a 	and	r20,r20,r4
 401775c:	0039883a 	mov	fp,zero
 4017760:	103f341e 	bne	r2,zero,4017434 <__alt_mem_epcs_flash_controller_0+0xfb016434>
 4017764:	483e2e26 	beq	r9,zero,4017020 <__alt_mem_epcs_flash_controller_0+0xfb016020>
 4017768:	0025883a 	mov	r18,zero
 401776c:	94800c04 	addi	r18,r18,48
 4017770:	dc8019c5 	stb	r18,103(sp)
 4017774:	dcc02717 	ldw	r19,156(sp)
 4017778:	dd4019c4 	addi	r21,sp,103
 401777c:	003e2b06 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4017780:	21003fcc 	andi	r4,r4,255
 4017784:	2002361e 	bne	r4,zero,4018060 <___vfiprintf_internal_r+0x1434>
 4017788:	1801c126 	beq	r3,zero,4017e90 <___vfiprintf_internal_r+0x1264>
 401778c:	04800044 	movi	r18,1
 4017790:	d8c01005 	stb	r3,64(sp)
 4017794:	d8001d85 	stb	zero,118(sp)
 4017798:	9027883a 	mov	r19,r18
 401779c:	dd401004 	addi	r21,sp,64
 40177a0:	003f1106 	br	40173e8 <__alt_mem_epcs_flash_controller_0+0xfb0163e8>
 40177a4:	d9402117 	ldw	r5,132(sp)
 40177a8:	d9002017 	ldw	r4,128(sp)
 40177ac:	d9801a04 	addi	r6,sp,104
 40177b0:	d9c02b15 	stw	r7,172(sp)
 40177b4:	dbc02a15 	stw	r15,168(sp)
 40177b8:	4016b180 	call	4016b18 <__sprint_r.part.0>
 40177bc:	d9c02b17 	ldw	r7,172(sp)
 40177c0:	dbc02a17 	ldw	r15,168(sp)
 40177c4:	10006d1e 	bne	r2,zero,401797c <___vfiprintf_internal_r+0xd50>
 40177c8:	d9801b17 	ldw	r6,108(sp)
 40177cc:	d8801c17 	ldw	r2,112(sp)
 40177d0:	d811883a 	mov	r8,sp
 40177d4:	31400044 	addi	r5,r6,1
 40177d8:	003e3306 	br	40170a8 <__alt_mem_epcs_flash_controller_0+0xfb0160a8>
 40177dc:	d9401b17 	ldw	r5,108(sp)
 40177e0:	d8801c17 	ldw	r2,112(sp)
 40177e4:	29000044 	addi	r4,r5,1
 40177e8:	d8c01d87 	ldb	r3,118(sp)
 40177ec:	183e4d26 	beq	r3,zero,4017124 <__alt_mem_epcs_flash_controller_0+0xfb016124>
 40177f0:	00c00044 	movi	r3,1
 40177f4:	d9401d84 	addi	r5,sp,118
 40177f8:	10c5883a 	add	r2,r2,r3
 40177fc:	41400015 	stw	r5,0(r8)
 4017800:	40c00115 	stw	r3,4(r8)
 4017804:	d8801c15 	stw	r2,112(sp)
 4017808:	d9001b15 	stw	r4,108(sp)
 401780c:	014001c4 	movi	r5,7
 4017810:	2900a90e 	bge	r5,r4,4017ab8 <___vfiprintf_internal_r+0xe8c>
 4017814:	1000da1e 	bne	r2,zero,4017b80 <___vfiprintf_internal_r+0xf54>
 4017818:	7000ab1e 	bne	r14,zero,4017ac8 <___vfiprintf_internal_r+0xe9c>
 401781c:	000b883a 	mov	r5,zero
 4017820:	1809883a 	mov	r4,r3
 4017824:	d811883a 	mov	r8,sp
 4017828:	00c02004 	movi	r3,128
 401782c:	e0fe4d26 	beq	fp,r3,4017164 <__alt_mem_epcs_flash_controller_0+0xfb016164>
 4017830:	4cf9c83a 	sub	fp,r9,r19
 4017834:	073e7b0e 	bge	zero,fp,4017224 <__alt_mem_epcs_flash_controller_0+0xfb016224>
 4017838:	01c00404 	movi	r7,16
 401783c:	3f01900e 	bge	r7,fp,4017e80 <___vfiprintf_internal_r+0x1254>
 4017840:	00c10234 	movhi	r3,1032
 4017844:	18f05804 	addi	r3,r3,-16032
 4017848:	d8c02415 	stw	r3,144(sp)
 401784c:	034001c4 	movi	r13,7
 4017850:	00000506 	br	4017868 <___vfiprintf_internal_r+0xc3c>
 4017854:	29000084 	addi	r4,r5,2
 4017858:	42000204 	addi	r8,r8,8
 401785c:	180b883a 	mov	r5,r3
 4017860:	e73ffc04 	addi	fp,fp,-16
 4017864:	3f000d0e 	bge	r7,fp,401789c <___vfiprintf_internal_r+0xc70>
 4017868:	10800404 	addi	r2,r2,16
 401786c:	28c00044 	addi	r3,r5,1
 4017870:	45c00015 	stw	r23,0(r8)
 4017874:	41c00115 	stw	r7,4(r8)
 4017878:	d8801c15 	stw	r2,112(sp)
 401787c:	d8c01b15 	stw	r3,108(sp)
 4017880:	68fff40e 	bge	r13,r3,4017854 <__alt_mem_epcs_flash_controller_0+0xfb016854>
 4017884:	1000101e 	bne	r2,zero,40178c8 <___vfiprintf_internal_r+0xc9c>
 4017888:	e73ffc04 	addi	fp,fp,-16
 401788c:	01000044 	movi	r4,1
 4017890:	000b883a 	mov	r5,zero
 4017894:	d811883a 	mov	r8,sp
 4017898:	3f3ff316 	blt	r7,fp,4017868 <__alt_mem_epcs_flash_controller_0+0xfb016868>
 401789c:	da802417 	ldw	r10,144(sp)
 40178a0:	1705883a 	add	r2,r2,fp
 40178a4:	47000115 	stw	fp,4(r8)
 40178a8:	42800015 	stw	r10,0(r8)
 40178ac:	d8801c15 	stw	r2,112(sp)
 40178b0:	d9001b15 	stw	r4,108(sp)
 40178b4:	00c001c4 	movi	r3,7
 40178b8:	19003616 	blt	r3,r4,4017994 <___vfiprintf_internal_r+0xd68>
 40178bc:	42000204 	addi	r8,r8,8
 40178c0:	21000044 	addi	r4,r4,1
 40178c4:	003e5706 	br	4017224 <__alt_mem_epcs_flash_controller_0+0xfb016224>
 40178c8:	d9402117 	ldw	r5,132(sp)
 40178cc:	d9002017 	ldw	r4,128(sp)
 40178d0:	d9801a04 	addi	r6,sp,104
 40178d4:	d9c02b15 	stw	r7,172(sp)
 40178d8:	db402a15 	stw	r13,168(sp)
 40178dc:	4016b180 	call	4016b18 <__sprint_r.part.0>
 40178e0:	d9c02b17 	ldw	r7,172(sp)
 40178e4:	db402a17 	ldw	r13,168(sp)
 40178e8:	1000241e 	bne	r2,zero,401797c <___vfiprintf_internal_r+0xd50>
 40178ec:	d9401b17 	ldw	r5,108(sp)
 40178f0:	d8801c17 	ldw	r2,112(sp)
 40178f4:	d811883a 	mov	r8,sp
 40178f8:	29000044 	addi	r4,r5,1
 40178fc:	003fd806 	br	4017860 <__alt_mem_epcs_flash_controller_0+0xfb016860>
 4017900:	d9401b17 	ldw	r5,108(sp)
 4017904:	00c10234 	movhi	r3,1032
 4017908:	18f05c04 	addi	r3,r3,-16016
 401790c:	d8c02415 	stw	r3,144(sp)
 4017910:	29400044 	addi	r5,r5,1
 4017914:	d8c02417 	ldw	r3,144(sp)
 4017918:	14c5883a 	add	r2,r2,r19
 401791c:	44c00115 	stw	r19,4(r8)
 4017920:	40c00015 	stw	r3,0(r8)
 4017924:	d8801c15 	stw	r2,112(sp)
 4017928:	d9401b15 	stw	r5,108(sp)
 401792c:	00c001c4 	movi	r3,7
 4017930:	1940070e 	bge	r3,r5,4017950 <___vfiprintf_internal_r+0xd24>
 4017934:	103e4826 	beq	r2,zero,4017258 <__alt_mem_epcs_flash_controller_0+0xfb016258>
 4017938:	d9402117 	ldw	r5,132(sp)
 401793c:	d9002017 	ldw	r4,128(sp)
 4017940:	d9801a04 	addi	r6,sp,104
 4017944:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017948:	10000c1e 	bne	r2,zero,401797c <___vfiprintf_internal_r+0xd50>
 401794c:	d8801c17 	ldw	r2,112(sp)
 4017950:	8c80010e 	bge	r17,r18,4017958 <___vfiprintf_internal_r+0xd2c>
 4017954:	9023883a 	mov	r17,r18
 4017958:	da802317 	ldw	r10,140(sp)
 401795c:	5455883a 	add	r10,r10,r17
 4017960:	da802315 	stw	r10,140(sp)
 4017964:	103e4126 	beq	r2,zero,401726c <__alt_mem_epcs_flash_controller_0+0xfb01626c>
 4017968:	d9402117 	ldw	r5,132(sp)
 401796c:	d9002017 	ldw	r4,128(sp)
 4017970:	d9801a04 	addi	r6,sp,104
 4017974:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017978:	103e3c26 	beq	r2,zero,401726c <__alt_mem_epcs_flash_controller_0+0xfb01626c>
 401797c:	dd002117 	ldw	r20,132(sp)
 4017980:	a080030b 	ldhu	r2,12(r20)
 4017984:	1080100c 	andi	r2,r2,64
 4017988:	1001231e 	bne	r2,zero,4017e18 <___vfiprintf_internal_r+0x11ec>
 401798c:	d8802317 	ldw	r2,140(sp)
 4017990:	003d7b06 	br	4016f80 <__alt_mem_epcs_flash_controller_0+0xfb015f80>
 4017994:	1000991e 	bne	r2,zero,4017bfc <___vfiprintf_internal_r+0xfd0>
 4017998:	00c00044 	movi	r3,1
 401799c:	9805883a 	mov	r2,r19
 40179a0:	dd400015 	stw	r21,0(sp)
 40179a4:	dcc00115 	stw	r19,4(sp)
 40179a8:	dcc01c15 	stw	r19,112(sp)
 40179ac:	d8c01b15 	stw	r3,108(sp)
 40179b0:	d811883a 	mov	r8,sp
 40179b4:	42000204 	addi	r8,r8,8
 40179b8:	a2c0010c 	andi	r11,r20,4
 40179bc:	583fe426 	beq	r11,zero,4017950 <__alt_mem_epcs_flash_controller_0+0xfb016950>
 40179c0:	8ca7c83a 	sub	r19,r17,r18
 40179c4:	04ffe20e 	bge	zero,r19,4017950 <__alt_mem_epcs_flash_controller_0+0xfb016950>
 40179c8:	01c00404 	movi	r7,16
 40179cc:	3cffcc0e 	bge	r7,r19,4017900 <__alt_mem_epcs_flash_controller_0+0xfb016900>
 40179d0:	02810234 	movhi	r10,1032
 40179d4:	52b05c04 	addi	r10,r10,-16016
 40179d8:	d9001b17 	ldw	r4,108(sp)
 40179dc:	da802415 	stw	r10,144(sp)
 40179e0:	382b883a 	mov	r21,r7
 40179e4:	050001c4 	movi	r20,7
 40179e8:	df002017 	ldw	fp,128(sp)
 40179ec:	00000506 	br	4017a04 <___vfiprintf_internal_r+0xdd8>
 40179f0:	21400084 	addi	r5,r4,2
 40179f4:	42000204 	addi	r8,r8,8
 40179f8:	1809883a 	mov	r4,r3
 40179fc:	9cfffc04 	addi	r19,r19,-16
 4017a00:	acffc40e 	bge	r21,r19,4017914 <__alt_mem_epcs_flash_controller_0+0xfb016914>
 4017a04:	10800404 	addi	r2,r2,16
 4017a08:	20c00044 	addi	r3,r4,1
 4017a0c:	45800015 	stw	r22,0(r8)
 4017a10:	45400115 	stw	r21,4(r8)
 4017a14:	d8801c15 	stw	r2,112(sp)
 4017a18:	d8c01b15 	stw	r3,108(sp)
 4017a1c:	a0fff40e 	bge	r20,r3,40179f0 <__alt_mem_epcs_flash_controller_0+0xfb0169f0>
 4017a20:	1000041e 	bne	r2,zero,4017a34 <___vfiprintf_internal_r+0xe08>
 4017a24:	01400044 	movi	r5,1
 4017a28:	0009883a 	mov	r4,zero
 4017a2c:	d811883a 	mov	r8,sp
 4017a30:	003ff206 	br	40179fc <__alt_mem_epcs_flash_controller_0+0xfb0169fc>
 4017a34:	d9402117 	ldw	r5,132(sp)
 4017a38:	d9801a04 	addi	r6,sp,104
 4017a3c:	e009883a 	mov	r4,fp
 4017a40:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017a44:	103fcd1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017a48:	d9001b17 	ldw	r4,108(sp)
 4017a4c:	d8801c17 	ldw	r2,112(sp)
 4017a50:	d811883a 	mov	r8,sp
 4017a54:	21400044 	addi	r5,r4,1
 4017a58:	003fe806 	br	40179fc <__alt_mem_epcs_flash_controller_0+0xfb0169fc>
 4017a5c:	d9402117 	ldw	r5,132(sp)
 4017a60:	d9002017 	ldw	r4,128(sp)
 4017a64:	d9801a04 	addi	r6,sp,104
 4017a68:	d9c02b15 	stw	r7,172(sp)
 4017a6c:	db402a15 	stw	r13,168(sp)
 4017a70:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017a74:	d9c02b17 	ldw	r7,172(sp)
 4017a78:	db402a17 	ldw	r13,168(sp)
 4017a7c:	103fbf1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017a80:	d9401b17 	ldw	r5,108(sp)
 4017a84:	d8801c17 	ldw	r2,112(sp)
 4017a88:	d811883a 	mov	r8,sp
 4017a8c:	29800044 	addi	r6,r5,1
 4017a90:	003dc406 	br	40171a4 <__alt_mem_epcs_flash_controller_0+0xfb0161a4>
 4017a94:	1000d21e 	bne	r2,zero,4017de0 <___vfiprintf_internal_r+0x11b4>
 4017a98:	d8c01d87 	ldb	r3,118(sp)
 4017a9c:	18009526 	beq	r3,zero,4017cf4 <___vfiprintf_internal_r+0x10c8>
 4017aa0:	00800044 	movi	r2,1
 4017aa4:	d8c01d84 	addi	r3,sp,118
 4017aa8:	1009883a 	mov	r4,r2
 4017aac:	d8c00015 	stw	r3,0(sp)
 4017ab0:	d8800115 	stw	r2,4(sp)
 4017ab4:	d811883a 	mov	r8,sp
 4017ab8:	200b883a 	mov	r5,r4
 4017abc:	42000204 	addi	r8,r8,8
 4017ac0:	21000044 	addi	r4,r4,1
 4017ac4:	003d9706 	br	4017124 <__alt_mem_epcs_flash_controller_0+0xfb016124>
 4017ac8:	d9001d04 	addi	r4,sp,116
 4017acc:	00800084 	movi	r2,2
 4017ad0:	d9000015 	stw	r4,0(sp)
 4017ad4:	d8800115 	stw	r2,4(sp)
 4017ad8:	1809883a 	mov	r4,r3
 4017adc:	d811883a 	mov	r8,sp
 4017ae0:	200b883a 	mov	r5,r4
 4017ae4:	42000204 	addi	r8,r8,8
 4017ae8:	21000044 	addi	r4,r4,1
 4017aec:	003f4e06 	br	4017828 <__alt_mem_epcs_flash_controller_0+0xfb016828>
 4017af0:	d8001d85 	stb	zero,118(sp)
 4017af4:	48005016 	blt	r9,zero,4017c38 <___vfiprintf_internal_r+0x100c>
 4017af8:	00ffdfc4 	movi	r3,-129
 4017afc:	94c4b03a 	or	r2,r18,r19
 4017b00:	a0e8703a 	and	r20,r20,r3
 4017b04:	103d4426 	beq	r2,zero,4017018 <__alt_mem_epcs_flash_controller_0+0xfb016018>
 4017b08:	0039883a 	mov	fp,zero
 4017b0c:	d9002617 	ldw	r4,152(sp)
 4017b10:	dd401a04 	addi	r21,sp,104
 4017b14:	908003cc 	andi	r2,r18,15
 4017b18:	9806973a 	slli	r3,r19,28
 4017b1c:	2085883a 	add	r2,r4,r2
 4017b20:	9024d13a 	srli	r18,r18,4
 4017b24:	10800003 	ldbu	r2,0(r2)
 4017b28:	9826d13a 	srli	r19,r19,4
 4017b2c:	ad7fffc4 	addi	r21,r21,-1
 4017b30:	1ca4b03a 	or	r18,r3,r18
 4017b34:	a8800005 	stb	r2,0(r21)
 4017b38:	94c4b03a 	or	r2,r18,r19
 4017b3c:	103ff51e 	bne	r2,zero,4017b14 <__alt_mem_epcs_flash_controller_0+0xfb016b14>
 4017b40:	003e5906 	br	40174a8 <__alt_mem_epcs_flash_controller_0+0xfb0164a8>
 4017b44:	d9402117 	ldw	r5,132(sp)
 4017b48:	d9002017 	ldw	r4,128(sp)
 4017b4c:	d9801a04 	addi	r6,sp,104
 4017b50:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017b54:	103f891e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017b58:	d8801c17 	ldw	r2,112(sp)
 4017b5c:	d811883a 	mov	r8,sp
 4017b60:	003f9506 	br	40179b8 <__alt_mem_epcs_flash_controller_0+0xfb0169b8>
 4017b64:	d9402117 	ldw	r5,132(sp)
 4017b68:	d9002017 	ldw	r4,128(sp)
 4017b6c:	d9801a04 	addi	r6,sp,104
 4017b70:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017b74:	103f811e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017b78:	d811883a 	mov	r8,sp
 4017b7c:	003ced06 	br	4016f34 <__alt_mem_epcs_flash_controller_0+0xfb015f34>
 4017b80:	d9402117 	ldw	r5,132(sp)
 4017b84:	d9002017 	ldw	r4,128(sp)
 4017b88:	d9801a04 	addi	r6,sp,104
 4017b8c:	da402c15 	stw	r9,176(sp)
 4017b90:	db802a15 	stw	r14,168(sp)
 4017b94:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017b98:	da402c17 	ldw	r9,176(sp)
 4017b9c:	db802a17 	ldw	r14,168(sp)
 4017ba0:	103f761e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017ba4:	d9401b17 	ldw	r5,108(sp)
 4017ba8:	d8801c17 	ldw	r2,112(sp)
 4017bac:	d811883a 	mov	r8,sp
 4017bb0:	29000044 	addi	r4,r5,1
 4017bb4:	003d5b06 	br	4017124 <__alt_mem_epcs_flash_controller_0+0xfb016124>
 4017bb8:	d9402117 	ldw	r5,132(sp)
 4017bbc:	d9002017 	ldw	r4,128(sp)
 4017bc0:	d9801a04 	addi	r6,sp,104
 4017bc4:	da402c15 	stw	r9,176(sp)
 4017bc8:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017bcc:	da402c17 	ldw	r9,176(sp)
 4017bd0:	103f6a1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017bd4:	d9401b17 	ldw	r5,108(sp)
 4017bd8:	d8801c17 	ldw	r2,112(sp)
 4017bdc:	d811883a 	mov	r8,sp
 4017be0:	29000044 	addi	r4,r5,1
 4017be4:	003f1006 	br	4017828 <__alt_mem_epcs_flash_controller_0+0xfb016828>
 4017be8:	1000c31e 	bne	r2,zero,4017ef8 <___vfiprintf_internal_r+0x12cc>
 4017bec:	01000044 	movi	r4,1
 4017bf0:	000b883a 	mov	r5,zero
 4017bf4:	d811883a 	mov	r8,sp
 4017bf8:	003f0d06 	br	4017830 <__alt_mem_epcs_flash_controller_0+0xfb016830>
 4017bfc:	d9402117 	ldw	r5,132(sp)
 4017c00:	d9002017 	ldw	r4,128(sp)
 4017c04:	d9801a04 	addi	r6,sp,104
 4017c08:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017c0c:	103f5b1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017c10:	d9001b17 	ldw	r4,108(sp)
 4017c14:	d8801c17 	ldw	r2,112(sp)
 4017c18:	d811883a 	mov	r8,sp
 4017c1c:	21000044 	addi	r4,r4,1
 4017c20:	003d8006 	br	4017224 <__alt_mem_epcs_flash_controller_0+0xfb016224>
 4017c24:	01010234 	movhi	r4,1032
 4017c28:	212fe804 	addi	r4,r4,-16480
 4017c2c:	d9002615 	stw	r4,152(sp)
 4017c30:	d8c02215 	stw	r3,136(sp)
 4017c34:	1029883a 	mov	r20,r2
 4017c38:	94c4b03a 	or	r2,r18,r19
 4017c3c:	103fb21e 	bne	r2,zero,4017b08 <__alt_mem_epcs_flash_controller_0+0xfb016b08>
 4017c40:	0039883a 	mov	fp,zero
 4017c44:	00800084 	movi	r2,2
 4017c48:	003e6b06 	br	40175f8 <__alt_mem_epcs_flash_controller_0+0xfb0165f8>
 4017c4c:	da802217 	ldw	r10,136(sp)
 4017c50:	d8001d85 	stb	zero,118(sp)
 4017c54:	0027883a 	mov	r19,zero
 4017c58:	50800104 	addi	r2,r10,4
 4017c5c:	54800017 	ldw	r18,0(r10)
 4017c60:	483e6016 	blt	r9,zero,40175e4 <__alt_mem_epcs_flash_controller_0+0xfb0165e4>
 4017c64:	00ffdfc4 	movi	r3,-129
 4017c68:	d8802215 	stw	r2,136(sp)
 4017c6c:	a0e8703a 	and	r20,r20,r3
 4017c70:	0039883a 	mov	fp,zero
 4017c74:	903ebb26 	beq	r18,zero,4017764 <__alt_mem_epcs_flash_controller_0+0xfb016764>
 4017c78:	00800244 	movi	r2,9
 4017c7c:	14bdee36 	bltu	r2,r18,4017438 <__alt_mem_epcs_flash_controller_0+0xfb016438>
 4017c80:	003eba06 	br	401776c <__alt_mem_epcs_flash_controller_0+0xfb01676c>
 4017c84:	00800c04 	movi	r2,48
 4017c88:	d8c01d45 	stb	r3,117(sp)
 4017c8c:	d8801d05 	stb	r2,116(sp)
 4017c90:	d8001d85 	stb	zero,118(sp)
 4017c94:	a0c00094 	ori	r3,r20,2
 4017c98:	4800a916 	blt	r9,zero,4017f40 <___vfiprintf_internal_r+0x1314>
 4017c9c:	00bfdfc4 	movi	r2,-129
 4017ca0:	a096703a 	and	r11,r20,r2
 4017ca4:	5d000094 	ori	r20,r11,2
 4017ca8:	0039883a 	mov	fp,zero
 4017cac:	003f9706 	br	4017b0c <__alt_mem_epcs_flash_controller_0+0xfb016b0c>
 4017cb0:	8025883a 	mov	r18,r16
 4017cb4:	003c2e06 	br	4016d70 <__alt_mem_epcs_flash_controller_0+0xfb015d70>
 4017cb8:	00810234 	movhi	r2,1032
 4017cbc:	10afe804 	addi	r2,r2,-16480
 4017cc0:	0039883a 	mov	fp,zero
 4017cc4:	d8802615 	stw	r2,152(sp)
 4017cc8:	003f9006 	br	4017b0c <__alt_mem_epcs_flash_controller_0+0xfb016b0c>
 4017ccc:	04a5c83a 	sub	r18,zero,r18
 4017cd0:	07000b44 	movi	fp,45
 4017cd4:	9004c03a 	cmpne	r2,r18,zero
 4017cd8:	04e7c83a 	sub	r19,zero,r19
 4017cdc:	df001d85 	stb	fp,118(sp)
 4017ce0:	98a7c83a 	sub	r19,r19,r2
 4017ce4:	48009f16 	blt	r9,zero,4017f64 <___vfiprintf_internal_r+0x1338>
 4017ce8:	00bfdfc4 	movi	r2,-129
 4017cec:	a0a8703a 	and	r20,r20,r2
 4017cf0:	003dd006 	br	4017434 <__alt_mem_epcs_flash_controller_0+0xfb016434>
 4017cf4:	70004c26 	beq	r14,zero,4017e28 <___vfiprintf_internal_r+0x11fc>
 4017cf8:	00800084 	movi	r2,2
 4017cfc:	d8c01d04 	addi	r3,sp,116
 4017d00:	d8c00015 	stw	r3,0(sp)
 4017d04:	d8800115 	stw	r2,4(sp)
 4017d08:	01000044 	movi	r4,1
 4017d0c:	d811883a 	mov	r8,sp
 4017d10:	003f7306 	br	4017ae0 <__alt_mem_epcs_flash_controller_0+0xfb016ae0>
 4017d14:	a080100c 	andi	r2,r20,64
 4017d18:	da802217 	ldw	r10,136(sp)
 4017d1c:	103e0626 	beq	r2,zero,4017538 <__alt_mem_epcs_flash_controller_0+0xfb016538>
 4017d20:	5480000f 	ldh	r18,0(r10)
 4017d24:	52800104 	addi	r10,r10,4
 4017d28:	da802215 	stw	r10,136(sp)
 4017d2c:	9027d7fa 	srai	r19,r18,31
 4017d30:	9805883a 	mov	r2,r19
 4017d34:	003db806 	br	4017418 <__alt_mem_epcs_flash_controller_0+0xfb016418>
 4017d38:	a080040c 	andi	r2,r20,16
 4017d3c:	1000091e 	bne	r2,zero,4017d64 <___vfiprintf_internal_r+0x1138>
 4017d40:	a2c0100c 	andi	r11,r20,64
 4017d44:	58000726 	beq	r11,zero,4017d64 <___vfiprintf_internal_r+0x1138>
 4017d48:	da802217 	ldw	r10,136(sp)
 4017d4c:	50800017 	ldw	r2,0(r10)
 4017d50:	52800104 	addi	r10,r10,4
 4017d54:	da802215 	stw	r10,136(sp)
 4017d58:	da802317 	ldw	r10,140(sp)
 4017d5c:	1280000d 	sth	r10,0(r2)
 4017d60:	003be706 	br	4016d00 <__alt_mem_epcs_flash_controller_0+0xfb015d00>
 4017d64:	da802217 	ldw	r10,136(sp)
 4017d68:	50800017 	ldw	r2,0(r10)
 4017d6c:	52800104 	addi	r10,r10,4
 4017d70:	da802215 	stw	r10,136(sp)
 4017d74:	da802317 	ldw	r10,140(sp)
 4017d78:	12800015 	stw	r10,0(r2)
 4017d7c:	003be006 	br	4016d00 <__alt_mem_epcs_flash_controller_0+0xfb015d00>
 4017d80:	a080100c 	andi	r2,r20,64
 4017d84:	da802217 	ldw	r10,136(sp)
 4017d88:	10003026 	beq	r2,zero,4017e4c <___vfiprintf_internal_r+0x1220>
 4017d8c:	5480000b 	ldhu	r18,0(r10)
 4017d90:	52800104 	addi	r10,r10,4
 4017d94:	0027883a 	mov	r19,zero
 4017d98:	da802215 	stw	r10,136(sp)
 4017d9c:	003d8006 	br	40173a0 <__alt_mem_epcs_flash_controller_0+0xfb0163a0>
 4017da0:	80c00007 	ldb	r3,0(r16)
 4017da4:	003c0006 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4017da8:	a080100c 	andi	r2,r20,64
 4017dac:	d8001d85 	stb	zero,118(sp)
 4017db0:	da802217 	ldw	r10,136(sp)
 4017db4:	1000201e 	bne	r2,zero,4017e38 <___vfiprintf_internal_r+0x120c>
 4017db8:	50800104 	addi	r2,r10,4
 4017dbc:	54800017 	ldw	r18,0(r10)
 4017dc0:	0027883a 	mov	r19,zero
 4017dc4:	483def0e 	bge	r9,zero,4017584 <__alt_mem_epcs_flash_controller_0+0xfb016584>
 4017dc8:	94c6b03a 	or	r3,r18,r19
 4017dcc:	d8802215 	stw	r2,136(sp)
 4017dd0:	183d4e1e 	bne	r3,zero,401730c <__alt_mem_epcs_flash_controller_0+0xfb01630c>
 4017dd4:	0039883a 	mov	fp,zero
 4017dd8:	0005883a 	mov	r2,zero
 4017ddc:	003e0606 	br	40175f8 <__alt_mem_epcs_flash_controller_0+0xfb0165f8>
 4017de0:	d9402117 	ldw	r5,132(sp)
 4017de4:	d9002017 	ldw	r4,128(sp)
 4017de8:	d9801a04 	addi	r6,sp,104
 4017dec:	da402c15 	stw	r9,176(sp)
 4017df0:	db802a15 	stw	r14,168(sp)
 4017df4:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017df8:	da402c17 	ldw	r9,176(sp)
 4017dfc:	db802a17 	ldw	r14,168(sp)
 4017e00:	103ede1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017e04:	d9401b17 	ldw	r5,108(sp)
 4017e08:	d8801c17 	ldw	r2,112(sp)
 4017e0c:	d811883a 	mov	r8,sp
 4017e10:	29000044 	addi	r4,r5,1
 4017e14:	003e7406 	br	40177e8 <__alt_mem_epcs_flash_controller_0+0xfb0167e8>
 4017e18:	00bfffc4 	movi	r2,-1
 4017e1c:	003c5806 	br	4016f80 <__alt_mem_epcs_flash_controller_0+0xfb015f80>
 4017e20:	d811883a 	mov	r8,sp
 4017e24:	003ee806 	br	40179c8 <__alt_mem_epcs_flash_controller_0+0xfb0169c8>
 4017e28:	000b883a 	mov	r5,zero
 4017e2c:	01000044 	movi	r4,1
 4017e30:	d811883a 	mov	r8,sp
 4017e34:	003e7c06 	br	4017828 <__alt_mem_epcs_flash_controller_0+0xfb016828>
 4017e38:	50800104 	addi	r2,r10,4
 4017e3c:	5480000b 	ldhu	r18,0(r10)
 4017e40:	0027883a 	mov	r19,zero
 4017e44:	483dcf0e 	bge	r9,zero,4017584 <__alt_mem_epcs_flash_controller_0+0xfb016584>
 4017e48:	003fdf06 	br	4017dc8 <__alt_mem_epcs_flash_controller_0+0xfb016dc8>
 4017e4c:	54800017 	ldw	r18,0(r10)
 4017e50:	52800104 	addi	r10,r10,4
 4017e54:	0027883a 	mov	r19,zero
 4017e58:	da802215 	stw	r10,136(sp)
 4017e5c:	003d5006 	br	40173a0 <__alt_mem_epcs_flash_controller_0+0xfb0163a0>
 4017e60:	50800104 	addi	r2,r10,4
 4017e64:	5480000b 	ldhu	r18,0(r10)
 4017e68:	0027883a 	mov	r19,zero
 4017e6c:	483f7d0e 	bge	r9,zero,4017c64 <__alt_mem_epcs_flash_controller_0+0xfb016c64>
 4017e70:	003ddc06 	br	40175e4 <__alt_mem_epcs_flash_controller_0+0xfb0165e4>
 4017e74:	d8c02215 	stw	r3,136(sp)
 4017e78:	0039883a 	mov	fp,zero
 4017e7c:	003ddb06 	br	40175ec <__alt_mem_epcs_flash_controller_0+0xfb0165ec>
 4017e80:	02810234 	movhi	r10,1032
 4017e84:	52b05804 	addi	r10,r10,-16032
 4017e88:	da802415 	stw	r10,144(sp)
 4017e8c:	003e8306 	br	401789c <__alt_mem_epcs_flash_controller_0+0xfb01689c>
 4017e90:	d8801c17 	ldw	r2,112(sp)
 4017e94:	dd002117 	ldw	r20,132(sp)
 4017e98:	103eb926 	beq	r2,zero,4017980 <__alt_mem_epcs_flash_controller_0+0xfb016980>
 4017e9c:	d9002017 	ldw	r4,128(sp)
 4017ea0:	d9801a04 	addi	r6,sp,104
 4017ea4:	a00b883a 	mov	r5,r20
 4017ea8:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017eac:	003eb406 	br	4017980 <__alt_mem_epcs_flash_controller_0+0xfb016980>
 4017eb0:	80c00043 	ldbu	r3,1(r16)
 4017eb4:	a5000814 	ori	r20,r20,32
 4017eb8:	84000044 	addi	r16,r16,1
 4017ebc:	18c03fcc 	andi	r3,r3,255
 4017ec0:	18c0201c 	xori	r3,r3,128
 4017ec4:	18ffe004 	addi	r3,r3,-128
 4017ec8:	003bb706 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4017ecc:	a809883a 	mov	r4,r21
 4017ed0:	d8c02a15 	stw	r3,168(sp)
 4017ed4:	da002b15 	stw	r8,172(sp)
 4017ed8:	400c8540 	call	400c854 <strlen>
 4017edc:	d8c02a17 	ldw	r3,168(sp)
 4017ee0:	1027883a 	mov	r19,r2
 4017ee4:	df001d83 	ldbu	fp,118(sp)
 4017ee8:	d8c02215 	stw	r3,136(sp)
 4017eec:	0013883a 	mov	r9,zero
 4017ef0:	da002b17 	ldw	r8,172(sp)
 4017ef4:	003c4d06 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4017ef8:	d9402117 	ldw	r5,132(sp)
 4017efc:	d9002017 	ldw	r4,128(sp)
 4017f00:	d9801a04 	addi	r6,sp,104
 4017f04:	da402c15 	stw	r9,176(sp)
 4017f08:	4016b180 	call	4016b18 <__sprint_r.part.0>
 4017f0c:	da402c17 	ldw	r9,176(sp)
 4017f10:	103e9a1e 	bne	r2,zero,401797c <__alt_mem_epcs_flash_controller_0+0xfb01697c>
 4017f14:	d9401b17 	ldw	r5,108(sp)
 4017f18:	d8801c17 	ldw	r2,112(sp)
 4017f1c:	d811883a 	mov	r8,sp
 4017f20:	29000044 	addi	r4,r5,1
 4017f24:	003e4206 	br	4017830 <__alt_mem_epcs_flash_controller_0+0xfb016830>
 4017f28:	d9401b17 	ldw	r5,108(sp)
 4017f2c:	01010234 	movhi	r4,1032
 4017f30:	21305c04 	addi	r4,r4,-16016
 4017f34:	d9002415 	stw	r4,144(sp)
 4017f38:	29400044 	addi	r5,r5,1
 4017f3c:	003c6d06 	br	40170f4 <__alt_mem_epcs_flash_controller_0+0xfb0160f4>
 4017f40:	0039883a 	mov	fp,zero
 4017f44:	00800084 	movi	r2,2
 4017f48:	10803fcc 	andi	r2,r2,255
 4017f4c:	01000044 	movi	r4,1
 4017f50:	11001e26 	beq	r2,r4,4017fcc <___vfiprintf_internal_r+0x13a0>
 4017f54:	01000084 	movi	r4,2
 4017f58:	11001e1e 	bne	r2,r4,4017fd4 <___vfiprintf_internal_r+0x13a8>
 4017f5c:	1829883a 	mov	r20,r3
 4017f60:	003eea06 	br	4017b0c <__alt_mem_epcs_flash_controller_0+0xfb016b0c>
 4017f64:	a007883a 	mov	r3,r20
 4017f68:	00800044 	movi	r2,1
 4017f6c:	003ff606 	br	4017f48 <__alt_mem_epcs_flash_controller_0+0xfb016f48>
 4017f70:	00800184 	movi	r2,6
 4017f74:	1240012e 	bgeu	r2,r9,4017f7c <___vfiprintf_internal_r+0x1350>
 4017f78:	1013883a 	mov	r9,r2
 4017f7c:	4827883a 	mov	r19,r9
 4017f80:	4825883a 	mov	r18,r9
 4017f84:	48001516 	blt	r9,zero,4017fdc <___vfiprintf_internal_r+0x13b0>
 4017f88:	05410234 	movhi	r21,1032
 4017f8c:	d8c02215 	stw	r3,136(sp)
 4017f90:	ad6fed04 	addi	r21,r21,-16460
 4017f94:	003d1406 	br	40173e8 <__alt_mem_epcs_flash_controller_0+0xfb0163e8>
 4017f98:	02810234 	movhi	r10,1032
 4017f9c:	52b05804 	addi	r10,r10,-16032
 4017fa0:	da802415 	stw	r10,144(sp)
 4017fa4:	200d883a 	mov	r6,r4
 4017fa8:	003c9106 	br	40171f0 <__alt_mem_epcs_flash_controller_0+0xfb0161f0>
 4017fac:	5021883a 	mov	r16,r10
 4017fb0:	0013883a 	mov	r9,zero
 4017fb4:	003b7d06 	br	4016dac <__alt_mem_epcs_flash_controller_0+0xfb015dac>
 4017fb8:	4827883a 	mov	r19,r9
 4017fbc:	df001d83 	ldbu	fp,118(sp)
 4017fc0:	d8c02215 	stw	r3,136(sp)
 4017fc4:	0013883a 	mov	r9,zero
 4017fc8:	003c1806 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4017fcc:	1829883a 	mov	r20,r3
 4017fd0:	003d1806 	br	4017434 <__alt_mem_epcs_flash_controller_0+0xfb016434>
 4017fd4:	1829883a 	mov	r20,r3
 4017fd8:	003ccd06 	br	4017310 <__alt_mem_epcs_flash_controller_0+0xfb016310>
 4017fdc:	0025883a 	mov	r18,zero
 4017fe0:	003fe906 	br	4017f88 <__alt_mem_epcs_flash_controller_0+0xfb016f88>
 4017fe4:	d8802217 	ldw	r2,136(sp)
 4017fe8:	80c00043 	ldbu	r3,1(r16)
 4017fec:	5021883a 	mov	r16,r10
 4017ff0:	12400017 	ldw	r9,0(r2)
 4017ff4:	10800104 	addi	r2,r2,4
 4017ff8:	d8802215 	stw	r2,136(sp)
 4017ffc:	483faf0e 	bge	r9,zero,4017ebc <__alt_mem_epcs_flash_controller_0+0xfb016ebc>
 4018000:	18c03fcc 	andi	r3,r3,255
 4018004:	18c0201c 	xori	r3,r3,128
 4018008:	027fffc4 	movi	r9,-1
 401800c:	18ffe004 	addi	r3,r3,-128
 4018010:	003b6506 	br	4016da8 <__alt_mem_epcs_flash_controller_0+0xfb015da8>
 4018014:	d9c01d85 	stb	r7,118(sp)
 4018018:	003ca006 	br	401729c <__alt_mem_epcs_flash_controller_0+0xfb01629c>
 401801c:	d9c01d85 	stb	r7,118(sp)
 4018020:	003cad06 	br	40172d8 <__alt_mem_epcs_flash_controller_0+0xfb0162d8>
 4018024:	d9c01d85 	stb	r7,118(sp)
 4018028:	003d7d06 	br	4017620 <__alt_mem_epcs_flash_controller_0+0xfb016620>
 401802c:	d9c01d85 	stb	r7,118(sp)
 4018030:	003d5f06 	br	40175b0 <__alt_mem_epcs_flash_controller_0+0xfb0165b0>
 4018034:	a080004c 	andi	r2,r20,1
 4018038:	0039883a 	mov	fp,zero
 401803c:	10000526 	beq	r2,zero,4018054 <___vfiprintf_internal_r+0x1428>
 4018040:	00800c04 	movi	r2,48
 4018044:	d88019c5 	stb	r2,103(sp)
 4018048:	dcc02717 	ldw	r19,156(sp)
 401804c:	dd4019c4 	addi	r21,sp,103
 4018050:	003bf606 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4018054:	0027883a 	mov	r19,zero
 4018058:	dd401a04 	addi	r21,sp,104
 401805c:	003bf306 	br	401702c <__alt_mem_epcs_flash_controller_0+0xfb01602c>
 4018060:	d9c01d85 	stb	r7,118(sp)
 4018064:	003dc806 	br	4017788 <__alt_mem_epcs_flash_controller_0+0xfb016788>
 4018068:	d9c01d85 	stb	r7,118(sp)
 401806c:	003d3a06 	br	4017558 <__alt_mem_epcs_flash_controller_0+0xfb016558>
 4018070:	d9c01d85 	stb	r7,118(sp)
 4018074:	003d2a06 	br	4017520 <__alt_mem_epcs_flash_controller_0+0xfb016520>
 4018078:	d9c01d85 	stb	r7,118(sp)
 401807c:	003cde06 	br	40173f8 <__alt_mem_epcs_flash_controller_0+0xfb0163f8>
 4018080:	d9c01d85 	stb	r7,118(sp)
 4018084:	003cbc06 	br	4017378 <__alt_mem_epcs_flash_controller_0+0xfb016378>

04018088 <__vfiprintf_internal>:
 4018088:	00810234 	movhi	r2,1032
 401808c:	10be4404 	addi	r2,r2,-1776
 4018090:	300f883a 	mov	r7,r6
 4018094:	280d883a 	mov	r6,r5
 4018098:	200b883a 	mov	r5,r4
 401809c:	11000017 	ldw	r4,0(r2)
 40180a0:	4016c2c1 	jmpi	4016c2c <___vfiprintf_internal_r>

040180a4 <__sbprintf>:
 40180a4:	2880030b 	ldhu	r2,12(r5)
 40180a8:	2ac01917 	ldw	r11,100(r5)
 40180ac:	2a80038b 	ldhu	r10,14(r5)
 40180b0:	2a400717 	ldw	r9,28(r5)
 40180b4:	2a000917 	ldw	r8,36(r5)
 40180b8:	defee204 	addi	sp,sp,-1144
 40180bc:	00c10004 	movi	r3,1024
 40180c0:	dc011a15 	stw	r16,1128(sp)
 40180c4:	10bfff4c 	andi	r2,r2,65533
 40180c8:	2821883a 	mov	r16,r5
 40180cc:	d8cb883a 	add	r5,sp,r3
 40180d0:	dc811c15 	stw	r18,1136(sp)
 40180d4:	dc411b15 	stw	r17,1132(sp)
 40180d8:	dfc11d15 	stw	ra,1140(sp)
 40180dc:	2025883a 	mov	r18,r4
 40180e0:	d881030d 	sth	r2,1036(sp)
 40180e4:	dac11915 	stw	r11,1124(sp)
 40180e8:	da81038d 	sth	r10,1038(sp)
 40180ec:	da410715 	stw	r9,1052(sp)
 40180f0:	da010915 	stw	r8,1060(sp)
 40180f4:	dec10015 	stw	sp,1024(sp)
 40180f8:	dec10415 	stw	sp,1040(sp)
 40180fc:	d8c10215 	stw	r3,1032(sp)
 4018100:	d8c10515 	stw	r3,1044(sp)
 4018104:	d8010615 	stw	zero,1048(sp)
 4018108:	4016c2c0 	call	4016c2c <___vfiprintf_internal_r>
 401810c:	1023883a 	mov	r17,r2
 4018110:	10000416 	blt	r2,zero,4018124 <__sbprintf+0x80>
 4018114:	d9410004 	addi	r5,sp,1024
 4018118:	9009883a 	mov	r4,r18
 401811c:	4012ab00 	call	4012ab0 <_fflush_r>
 4018120:	10000d1e 	bne	r2,zero,4018158 <__sbprintf+0xb4>
 4018124:	d881030b 	ldhu	r2,1036(sp)
 4018128:	1080100c 	andi	r2,r2,64
 401812c:	10000326 	beq	r2,zero,401813c <__sbprintf+0x98>
 4018130:	8080030b 	ldhu	r2,12(r16)
 4018134:	10801014 	ori	r2,r2,64
 4018138:	8080030d 	sth	r2,12(r16)
 401813c:	8805883a 	mov	r2,r17
 4018140:	dfc11d17 	ldw	ra,1140(sp)
 4018144:	dc811c17 	ldw	r18,1136(sp)
 4018148:	dc411b17 	ldw	r17,1132(sp)
 401814c:	dc011a17 	ldw	r16,1128(sp)
 4018150:	dec11e04 	addi	sp,sp,1144
 4018154:	f800283a 	ret
 4018158:	047fffc4 	movi	r17,-1
 401815c:	003ff106 	br	4018124 <__alt_mem_epcs_flash_controller_0+0xfb017124>

04018160 <__swbuf_r>:
 4018160:	defffb04 	addi	sp,sp,-20
 4018164:	dcc00315 	stw	r19,12(sp)
 4018168:	dc800215 	stw	r18,8(sp)
 401816c:	dc000015 	stw	r16,0(sp)
 4018170:	dfc00415 	stw	ra,16(sp)
 4018174:	dc400115 	stw	r17,4(sp)
 4018178:	2025883a 	mov	r18,r4
 401817c:	2827883a 	mov	r19,r5
 4018180:	3021883a 	mov	r16,r6
 4018184:	20000226 	beq	r4,zero,4018190 <__swbuf_r+0x30>
 4018188:	20800e17 	ldw	r2,56(r4)
 401818c:	10004226 	beq	r2,zero,4018298 <__swbuf_r+0x138>
 4018190:	80800617 	ldw	r2,24(r16)
 4018194:	8100030b 	ldhu	r4,12(r16)
 4018198:	80800215 	stw	r2,8(r16)
 401819c:	2080020c 	andi	r2,r4,8
 40181a0:	10003626 	beq	r2,zero,401827c <__swbuf_r+0x11c>
 40181a4:	80c00417 	ldw	r3,16(r16)
 40181a8:	18003426 	beq	r3,zero,401827c <__swbuf_r+0x11c>
 40181ac:	2088000c 	andi	r2,r4,8192
 40181b0:	9c403fcc 	andi	r17,r19,255
 40181b4:	10001a26 	beq	r2,zero,4018220 <__swbuf_r+0xc0>
 40181b8:	80800017 	ldw	r2,0(r16)
 40181bc:	81000517 	ldw	r4,20(r16)
 40181c0:	10c7c83a 	sub	r3,r2,r3
 40181c4:	1900200e 	bge	r3,r4,4018248 <__swbuf_r+0xe8>
 40181c8:	18c00044 	addi	r3,r3,1
 40181cc:	81000217 	ldw	r4,8(r16)
 40181d0:	11400044 	addi	r5,r2,1
 40181d4:	81400015 	stw	r5,0(r16)
 40181d8:	213fffc4 	addi	r4,r4,-1
 40181dc:	81000215 	stw	r4,8(r16)
 40181e0:	14c00005 	stb	r19,0(r2)
 40181e4:	80800517 	ldw	r2,20(r16)
 40181e8:	10c01e26 	beq	r2,r3,4018264 <__swbuf_r+0x104>
 40181ec:	8080030b 	ldhu	r2,12(r16)
 40181f0:	1080004c 	andi	r2,r2,1
 40181f4:	10000226 	beq	r2,zero,4018200 <__swbuf_r+0xa0>
 40181f8:	00800284 	movi	r2,10
 40181fc:	88801926 	beq	r17,r2,4018264 <__swbuf_r+0x104>
 4018200:	8805883a 	mov	r2,r17
 4018204:	dfc00417 	ldw	ra,16(sp)
 4018208:	dcc00317 	ldw	r19,12(sp)
 401820c:	dc800217 	ldw	r18,8(sp)
 4018210:	dc400117 	ldw	r17,4(sp)
 4018214:	dc000017 	ldw	r16,0(sp)
 4018218:	dec00504 	addi	sp,sp,20
 401821c:	f800283a 	ret
 4018220:	81401917 	ldw	r5,100(r16)
 4018224:	00b7ffc4 	movi	r2,-8193
 4018228:	21080014 	ori	r4,r4,8192
 401822c:	2884703a 	and	r2,r5,r2
 4018230:	80801915 	stw	r2,100(r16)
 4018234:	80800017 	ldw	r2,0(r16)
 4018238:	8100030d 	sth	r4,12(r16)
 401823c:	81000517 	ldw	r4,20(r16)
 4018240:	10c7c83a 	sub	r3,r2,r3
 4018244:	193fe016 	blt	r3,r4,40181c8 <__alt_mem_epcs_flash_controller_0+0xfb0171c8>
 4018248:	800b883a 	mov	r5,r16
 401824c:	9009883a 	mov	r4,r18
 4018250:	4012ab00 	call	4012ab0 <_fflush_r>
 4018254:	1000071e 	bne	r2,zero,4018274 <__swbuf_r+0x114>
 4018258:	80800017 	ldw	r2,0(r16)
 401825c:	00c00044 	movi	r3,1
 4018260:	003fda06 	br	40181cc <__alt_mem_epcs_flash_controller_0+0xfb0171cc>
 4018264:	800b883a 	mov	r5,r16
 4018268:	9009883a 	mov	r4,r18
 401826c:	4012ab00 	call	4012ab0 <_fflush_r>
 4018270:	103fe326 	beq	r2,zero,4018200 <__alt_mem_epcs_flash_controller_0+0xfb017200>
 4018274:	00bfffc4 	movi	r2,-1
 4018278:	003fe206 	br	4018204 <__alt_mem_epcs_flash_controller_0+0xfb017204>
 401827c:	800b883a 	mov	r5,r16
 4018280:	9009883a 	mov	r4,r18
 4018284:	4010eb80 	call	4010eb8 <__swsetup_r>
 4018288:	103ffa1e 	bne	r2,zero,4018274 <__alt_mem_epcs_flash_controller_0+0xfb017274>
 401828c:	8100030b 	ldhu	r4,12(r16)
 4018290:	80c00417 	ldw	r3,16(r16)
 4018294:	003fc506 	br	40181ac <__alt_mem_epcs_flash_controller_0+0xfb0171ac>
 4018298:	4012e8c0 	call	4012e8c <__sinit>
 401829c:	003fbc06 	br	4018190 <__alt_mem_epcs_flash_controller_0+0xfb017190>

040182a0 <__swbuf>:
 40182a0:	00810234 	movhi	r2,1032
 40182a4:	10be4404 	addi	r2,r2,-1776
 40182a8:	280d883a 	mov	r6,r5
 40182ac:	200b883a 	mov	r5,r4
 40182b0:	11000017 	ldw	r4,0(r2)
 40182b4:	40181601 	jmpi	4018160 <__swbuf_r>

040182b8 <_write_r>:
 40182b8:	defffd04 	addi	sp,sp,-12
 40182bc:	2805883a 	mov	r2,r5
 40182c0:	dc000015 	stw	r16,0(sp)
 40182c4:	04010234 	movhi	r16,1032
 40182c8:	dc400115 	stw	r17,4(sp)
 40182cc:	300b883a 	mov	r5,r6
 40182d0:	843e5904 	addi	r16,r16,-1692
 40182d4:	2023883a 	mov	r17,r4
 40182d8:	380d883a 	mov	r6,r7
 40182dc:	1009883a 	mov	r4,r2
 40182e0:	dfc00215 	stw	ra,8(sp)
 40182e4:	80000015 	stw	zero,0(r16)
 40182e8:	401a36c0 	call	401a36c <write>
 40182ec:	00ffffc4 	movi	r3,-1
 40182f0:	10c00526 	beq	r2,r3,4018308 <_write_r+0x50>
 40182f4:	dfc00217 	ldw	ra,8(sp)
 40182f8:	dc400117 	ldw	r17,4(sp)
 40182fc:	dc000017 	ldw	r16,0(sp)
 4018300:	dec00304 	addi	sp,sp,12
 4018304:	f800283a 	ret
 4018308:	80c00017 	ldw	r3,0(r16)
 401830c:	183ff926 	beq	r3,zero,40182f4 <__alt_mem_epcs_flash_controller_0+0xfb0172f4>
 4018310:	88c00015 	stw	r3,0(r17)
 4018314:	003ff706 	br	40182f4 <__alt_mem_epcs_flash_controller_0+0xfb0172f4>

04018318 <_close_r>:
 4018318:	defffd04 	addi	sp,sp,-12
 401831c:	dc000015 	stw	r16,0(sp)
 4018320:	04010234 	movhi	r16,1032
 4018324:	dc400115 	stw	r17,4(sp)
 4018328:	843e5904 	addi	r16,r16,-1692
 401832c:	2023883a 	mov	r17,r4
 4018330:	2809883a 	mov	r4,r5
 4018334:	dfc00215 	stw	ra,8(sp)
 4018338:	80000015 	stw	zero,0(r16)
 401833c:	401978c0 	call	401978c <close>
 4018340:	00ffffc4 	movi	r3,-1
 4018344:	10c00526 	beq	r2,r3,401835c <_close_r+0x44>
 4018348:	dfc00217 	ldw	ra,8(sp)
 401834c:	dc400117 	ldw	r17,4(sp)
 4018350:	dc000017 	ldw	r16,0(sp)
 4018354:	dec00304 	addi	sp,sp,12
 4018358:	f800283a 	ret
 401835c:	80c00017 	ldw	r3,0(r16)
 4018360:	183ff926 	beq	r3,zero,4018348 <__alt_mem_epcs_flash_controller_0+0xfb017348>
 4018364:	88c00015 	stw	r3,0(r17)
 4018368:	003ff706 	br	4018348 <__alt_mem_epcs_flash_controller_0+0xfb017348>

0401836c <_calloc_r>:
 401836c:	298b383a 	mul	r5,r5,r6
 4018370:	defffe04 	addi	sp,sp,-8
 4018374:	dfc00115 	stw	ra,4(sp)
 4018378:	dc000015 	stw	r16,0(sp)
 401837c:	400bad00 	call	400bad0 <_malloc_r>
 4018380:	10002926 	beq	r2,zero,4018428 <_calloc_r+0xbc>
 4018384:	11bfff17 	ldw	r6,-4(r2)
 4018388:	1021883a 	mov	r16,r2
 401838c:	00bfff04 	movi	r2,-4
 4018390:	308c703a 	and	r6,r6,r2
 4018394:	00c00904 	movi	r3,36
 4018398:	308d883a 	add	r6,r6,r2
 401839c:	19801636 	bltu	r3,r6,40183f8 <_calloc_r+0x8c>
 40183a0:	008004c4 	movi	r2,19
 40183a4:	11800b2e 	bgeu	r2,r6,40183d4 <_calloc_r+0x68>
 40183a8:	80000015 	stw	zero,0(r16)
 40183ac:	80000115 	stw	zero,4(r16)
 40183b0:	008006c4 	movi	r2,27
 40183b4:	11801a2e 	bgeu	r2,r6,4018420 <_calloc_r+0xb4>
 40183b8:	80000215 	stw	zero,8(r16)
 40183bc:	80000315 	stw	zero,12(r16)
 40183c0:	30c0151e 	bne	r6,r3,4018418 <_calloc_r+0xac>
 40183c4:	80000415 	stw	zero,16(r16)
 40183c8:	80800604 	addi	r2,r16,24
 40183cc:	80000515 	stw	zero,20(r16)
 40183d0:	00000106 	br	40183d8 <_calloc_r+0x6c>
 40183d4:	8005883a 	mov	r2,r16
 40183d8:	10000015 	stw	zero,0(r2)
 40183dc:	10000115 	stw	zero,4(r2)
 40183e0:	10000215 	stw	zero,8(r2)
 40183e4:	8005883a 	mov	r2,r16
 40183e8:	dfc00117 	ldw	ra,4(sp)
 40183ec:	dc000017 	ldw	r16,0(sp)
 40183f0:	dec00204 	addi	sp,sp,8
 40183f4:	f800283a 	ret
 40183f8:	000b883a 	mov	r5,zero
 40183fc:	8009883a 	mov	r4,r16
 4018400:	400c4240 	call	400c424 <memset>
 4018404:	8005883a 	mov	r2,r16
 4018408:	dfc00117 	ldw	ra,4(sp)
 401840c:	dc000017 	ldw	r16,0(sp)
 4018410:	dec00204 	addi	sp,sp,8
 4018414:	f800283a 	ret
 4018418:	80800404 	addi	r2,r16,16
 401841c:	003fee06 	br	40183d8 <__alt_mem_epcs_flash_controller_0+0xfb0173d8>
 4018420:	80800204 	addi	r2,r16,8
 4018424:	003fec06 	br	40183d8 <__alt_mem_epcs_flash_controller_0+0xfb0173d8>
 4018428:	0005883a 	mov	r2,zero
 401842c:	003fee06 	br	40183e8 <__alt_mem_epcs_flash_controller_0+0xfb0173e8>

04018430 <_fclose_r>:
 4018430:	28003926 	beq	r5,zero,4018518 <_fclose_r+0xe8>
 4018434:	defffc04 	addi	sp,sp,-16
 4018438:	dc400115 	stw	r17,4(sp)
 401843c:	dc000015 	stw	r16,0(sp)
 4018440:	dfc00315 	stw	ra,12(sp)
 4018444:	dc800215 	stw	r18,8(sp)
 4018448:	2023883a 	mov	r17,r4
 401844c:	2821883a 	mov	r16,r5
 4018450:	20000226 	beq	r4,zero,401845c <_fclose_r+0x2c>
 4018454:	20800e17 	ldw	r2,56(r4)
 4018458:	10002726 	beq	r2,zero,40184f8 <_fclose_r+0xc8>
 401845c:	8080030f 	ldh	r2,12(r16)
 4018460:	1000071e 	bne	r2,zero,4018480 <_fclose_r+0x50>
 4018464:	0005883a 	mov	r2,zero
 4018468:	dfc00317 	ldw	ra,12(sp)
 401846c:	dc800217 	ldw	r18,8(sp)
 4018470:	dc400117 	ldw	r17,4(sp)
 4018474:	dc000017 	ldw	r16,0(sp)
 4018478:	dec00404 	addi	sp,sp,16
 401847c:	f800283a 	ret
 4018480:	800b883a 	mov	r5,r16
 4018484:	8809883a 	mov	r4,r17
 4018488:	40128940 	call	4012894 <__sflush_r>
 401848c:	1025883a 	mov	r18,r2
 4018490:	80800b17 	ldw	r2,44(r16)
 4018494:	10000426 	beq	r2,zero,40184a8 <_fclose_r+0x78>
 4018498:	81400717 	ldw	r5,28(r16)
 401849c:	8809883a 	mov	r4,r17
 40184a0:	103ee83a 	callr	r2
 40184a4:	10001616 	blt	r2,zero,4018500 <_fclose_r+0xd0>
 40184a8:	8080030b 	ldhu	r2,12(r16)
 40184ac:	1080200c 	andi	r2,r2,128
 40184b0:	1000151e 	bne	r2,zero,4018508 <_fclose_r+0xd8>
 40184b4:	81400c17 	ldw	r5,48(r16)
 40184b8:	28000526 	beq	r5,zero,40184d0 <_fclose_r+0xa0>
 40184bc:	80801004 	addi	r2,r16,64
 40184c0:	28800226 	beq	r5,r2,40184cc <_fclose_r+0x9c>
 40184c4:	8809883a 	mov	r4,r17
 40184c8:	40130000 	call	4013000 <_free_r>
 40184cc:	80000c15 	stw	zero,48(r16)
 40184d0:	81401117 	ldw	r5,68(r16)
 40184d4:	28000326 	beq	r5,zero,40184e4 <_fclose_r+0xb4>
 40184d8:	8809883a 	mov	r4,r17
 40184dc:	40130000 	call	4013000 <_free_r>
 40184e0:	80001115 	stw	zero,68(r16)
 40184e4:	4012e9c0 	call	4012e9c <__sfp_lock_acquire>
 40184e8:	8000030d 	sth	zero,12(r16)
 40184ec:	4012ea00 	call	4012ea0 <__sfp_lock_release>
 40184f0:	9005883a 	mov	r2,r18
 40184f4:	003fdc06 	br	4018468 <__alt_mem_epcs_flash_controller_0+0xfb017468>
 40184f8:	4012e8c0 	call	4012e8c <__sinit>
 40184fc:	003fd706 	br	401845c <__alt_mem_epcs_flash_controller_0+0xfb01745c>
 4018500:	04bfffc4 	movi	r18,-1
 4018504:	003fe806 	br	40184a8 <__alt_mem_epcs_flash_controller_0+0xfb0174a8>
 4018508:	81400417 	ldw	r5,16(r16)
 401850c:	8809883a 	mov	r4,r17
 4018510:	40130000 	call	4013000 <_free_r>
 4018514:	003fe706 	br	40184b4 <__alt_mem_epcs_flash_controller_0+0xfb0174b4>
 4018518:	0005883a 	mov	r2,zero
 401851c:	f800283a 	ret

04018520 <fclose>:
 4018520:	00810234 	movhi	r2,1032
 4018524:	10be4404 	addi	r2,r2,-1776
 4018528:	200b883a 	mov	r5,r4
 401852c:	11000017 	ldw	r4,0(r2)
 4018530:	40184301 	jmpi	4018430 <_fclose_r>

04018534 <__fputwc>:
 4018534:	defff804 	addi	sp,sp,-32
 4018538:	dcc00415 	stw	r19,16(sp)
 401853c:	dc800315 	stw	r18,12(sp)
 4018540:	dc000115 	stw	r16,4(sp)
 4018544:	dfc00715 	stw	ra,28(sp)
 4018548:	dd400615 	stw	r21,24(sp)
 401854c:	dd000515 	stw	r20,20(sp)
 4018550:	dc400215 	stw	r17,8(sp)
 4018554:	2027883a 	mov	r19,r4
 4018558:	2825883a 	mov	r18,r5
 401855c:	3021883a 	mov	r16,r6
 4018560:	40139dc0 	call	40139dc <__locale_mb_cur_max>
 4018564:	00c00044 	movi	r3,1
 4018568:	10c03e26 	beq	r2,r3,4018664 <__fputwc+0x130>
 401856c:	81c01704 	addi	r7,r16,92
 4018570:	900d883a 	mov	r6,r18
 4018574:	d80b883a 	mov	r5,sp
 4018578:	9809883a 	mov	r4,r19
 401857c:	40188ac0 	call	40188ac <_wcrtomb_r>
 4018580:	1029883a 	mov	r20,r2
 4018584:	00bfffc4 	movi	r2,-1
 4018588:	a0802026 	beq	r20,r2,401860c <__fputwc+0xd8>
 401858c:	d9400003 	ldbu	r5,0(sp)
 4018590:	a0001c26 	beq	r20,zero,4018604 <__fputwc+0xd0>
 4018594:	0023883a 	mov	r17,zero
 4018598:	05400284 	movi	r21,10
 401859c:	00000906 	br	40185c4 <__fputwc+0x90>
 40185a0:	80800017 	ldw	r2,0(r16)
 40185a4:	11400005 	stb	r5,0(r2)
 40185a8:	80c00017 	ldw	r3,0(r16)
 40185ac:	18c00044 	addi	r3,r3,1
 40185b0:	80c00015 	stw	r3,0(r16)
 40185b4:	8c400044 	addi	r17,r17,1
 40185b8:	dc45883a 	add	r2,sp,r17
 40185bc:	8d00112e 	bgeu	r17,r20,4018604 <__fputwc+0xd0>
 40185c0:	11400003 	ldbu	r5,0(r2)
 40185c4:	80c00217 	ldw	r3,8(r16)
 40185c8:	18ffffc4 	addi	r3,r3,-1
 40185cc:	80c00215 	stw	r3,8(r16)
 40185d0:	183ff30e 	bge	r3,zero,40185a0 <__alt_mem_epcs_flash_controller_0+0xfb0175a0>
 40185d4:	80800617 	ldw	r2,24(r16)
 40185d8:	18801916 	blt	r3,r2,4018640 <__fputwc+0x10c>
 40185dc:	80800017 	ldw	r2,0(r16)
 40185e0:	11400005 	stb	r5,0(r2)
 40185e4:	80800017 	ldw	r2,0(r16)
 40185e8:	10c00003 	ldbu	r3,0(r2)
 40185ec:	10800044 	addi	r2,r2,1
 40185f0:	1d402326 	beq	r3,r21,4018680 <__fputwc+0x14c>
 40185f4:	80800015 	stw	r2,0(r16)
 40185f8:	8c400044 	addi	r17,r17,1
 40185fc:	dc45883a 	add	r2,sp,r17
 4018600:	8d3fef36 	bltu	r17,r20,40185c0 <__alt_mem_epcs_flash_controller_0+0xfb0175c0>
 4018604:	9005883a 	mov	r2,r18
 4018608:	00000406 	br	401861c <__fputwc+0xe8>
 401860c:	80c0030b 	ldhu	r3,12(r16)
 4018610:	a005883a 	mov	r2,r20
 4018614:	18c01014 	ori	r3,r3,64
 4018618:	80c0030d 	sth	r3,12(r16)
 401861c:	dfc00717 	ldw	ra,28(sp)
 4018620:	dd400617 	ldw	r21,24(sp)
 4018624:	dd000517 	ldw	r20,20(sp)
 4018628:	dcc00417 	ldw	r19,16(sp)
 401862c:	dc800317 	ldw	r18,12(sp)
 4018630:	dc400217 	ldw	r17,8(sp)
 4018634:	dc000117 	ldw	r16,4(sp)
 4018638:	dec00804 	addi	sp,sp,32
 401863c:	f800283a 	ret
 4018640:	800d883a 	mov	r6,r16
 4018644:	29403fcc 	andi	r5,r5,255
 4018648:	9809883a 	mov	r4,r19
 401864c:	40181600 	call	4018160 <__swbuf_r>
 4018650:	10bfffe0 	cmpeqi	r2,r2,-1
 4018654:	10803fcc 	andi	r2,r2,255
 4018658:	103fd626 	beq	r2,zero,40185b4 <__alt_mem_epcs_flash_controller_0+0xfb0175b4>
 401865c:	00bfffc4 	movi	r2,-1
 4018660:	003fee06 	br	401861c <__alt_mem_epcs_flash_controller_0+0xfb01761c>
 4018664:	90ffffc4 	addi	r3,r18,-1
 4018668:	01003f84 	movi	r4,254
 401866c:	20ffbf36 	bltu	r4,r3,401856c <__alt_mem_epcs_flash_controller_0+0xfb01756c>
 4018670:	900b883a 	mov	r5,r18
 4018674:	dc800005 	stb	r18,0(sp)
 4018678:	1029883a 	mov	r20,r2
 401867c:	003fc506 	br	4018594 <__alt_mem_epcs_flash_controller_0+0xfb017594>
 4018680:	800d883a 	mov	r6,r16
 4018684:	a80b883a 	mov	r5,r21
 4018688:	9809883a 	mov	r4,r19
 401868c:	40181600 	call	4018160 <__swbuf_r>
 4018690:	10bfffe0 	cmpeqi	r2,r2,-1
 4018694:	003fef06 	br	4018654 <__alt_mem_epcs_flash_controller_0+0xfb017654>

04018698 <_fputwc_r>:
 4018698:	3080030b 	ldhu	r2,12(r6)
 401869c:	10c8000c 	andi	r3,r2,8192
 40186a0:	1800051e 	bne	r3,zero,40186b8 <_fputwc_r+0x20>
 40186a4:	30c01917 	ldw	r3,100(r6)
 40186a8:	10880014 	ori	r2,r2,8192
 40186ac:	3080030d 	sth	r2,12(r6)
 40186b0:	18880014 	ori	r2,r3,8192
 40186b4:	30801915 	stw	r2,100(r6)
 40186b8:	40185341 	jmpi	4018534 <__fputwc>

040186bc <fputwc>:
 40186bc:	00810234 	movhi	r2,1032
 40186c0:	defffc04 	addi	sp,sp,-16
 40186c4:	10be4404 	addi	r2,r2,-1776
 40186c8:	dc000115 	stw	r16,4(sp)
 40186cc:	14000017 	ldw	r16,0(r2)
 40186d0:	dc400215 	stw	r17,8(sp)
 40186d4:	dfc00315 	stw	ra,12(sp)
 40186d8:	2023883a 	mov	r17,r4
 40186dc:	80000226 	beq	r16,zero,40186e8 <fputwc+0x2c>
 40186e0:	80800e17 	ldw	r2,56(r16)
 40186e4:	10001026 	beq	r2,zero,4018728 <fputwc+0x6c>
 40186e8:	2880030b 	ldhu	r2,12(r5)
 40186ec:	10c8000c 	andi	r3,r2,8192
 40186f0:	1800051e 	bne	r3,zero,4018708 <fputwc+0x4c>
 40186f4:	28c01917 	ldw	r3,100(r5)
 40186f8:	10880014 	ori	r2,r2,8192
 40186fc:	2880030d 	sth	r2,12(r5)
 4018700:	18880014 	ori	r2,r3,8192
 4018704:	28801915 	stw	r2,100(r5)
 4018708:	280d883a 	mov	r6,r5
 401870c:	8009883a 	mov	r4,r16
 4018710:	880b883a 	mov	r5,r17
 4018714:	dfc00317 	ldw	ra,12(sp)
 4018718:	dc400217 	ldw	r17,8(sp)
 401871c:	dc000117 	ldw	r16,4(sp)
 4018720:	dec00404 	addi	sp,sp,16
 4018724:	40185341 	jmpi	4018534 <__fputwc>
 4018728:	8009883a 	mov	r4,r16
 401872c:	d9400015 	stw	r5,0(sp)
 4018730:	4012e8c0 	call	4012e8c <__sinit>
 4018734:	d9400017 	ldw	r5,0(sp)
 4018738:	003feb06 	br	40186e8 <__alt_mem_epcs_flash_controller_0+0xfb0176e8>

0401873c <_fstat_r>:
 401873c:	defffd04 	addi	sp,sp,-12
 4018740:	2805883a 	mov	r2,r5
 4018744:	dc000015 	stw	r16,0(sp)
 4018748:	04010234 	movhi	r16,1032
 401874c:	dc400115 	stw	r17,4(sp)
 4018750:	843e5904 	addi	r16,r16,-1692
 4018754:	2023883a 	mov	r17,r4
 4018758:	300b883a 	mov	r5,r6
 401875c:	1009883a 	mov	r4,r2
 4018760:	dfc00215 	stw	ra,8(sp)
 4018764:	80000015 	stw	zero,0(r16)
 4018768:	401990c0 	call	401990c <fstat>
 401876c:	00ffffc4 	movi	r3,-1
 4018770:	10c00526 	beq	r2,r3,4018788 <_fstat_r+0x4c>
 4018774:	dfc00217 	ldw	ra,8(sp)
 4018778:	dc400117 	ldw	r17,4(sp)
 401877c:	dc000017 	ldw	r16,0(sp)
 4018780:	dec00304 	addi	sp,sp,12
 4018784:	f800283a 	ret
 4018788:	80c00017 	ldw	r3,0(r16)
 401878c:	183ff926 	beq	r3,zero,4018774 <__alt_mem_epcs_flash_controller_0+0xfb017774>
 4018790:	88c00015 	stw	r3,0(r17)
 4018794:	003ff706 	br	4018774 <__alt_mem_epcs_flash_controller_0+0xfb017774>

04018798 <_isatty_r>:
 4018798:	defffd04 	addi	sp,sp,-12
 401879c:	dc000015 	stw	r16,0(sp)
 40187a0:	04010234 	movhi	r16,1032
 40187a4:	dc400115 	stw	r17,4(sp)
 40187a8:	843e5904 	addi	r16,r16,-1692
 40187ac:	2023883a 	mov	r17,r4
 40187b0:	2809883a 	mov	r4,r5
 40187b4:	dfc00215 	stw	ra,8(sp)
 40187b8:	80000015 	stw	zero,0(r16)
 40187bc:	4019c980 	call	4019c98 <isatty>
 40187c0:	00ffffc4 	movi	r3,-1
 40187c4:	10c00526 	beq	r2,r3,40187dc <_isatty_r+0x44>
 40187c8:	dfc00217 	ldw	ra,8(sp)
 40187cc:	dc400117 	ldw	r17,4(sp)
 40187d0:	dc000017 	ldw	r16,0(sp)
 40187d4:	dec00304 	addi	sp,sp,12
 40187d8:	f800283a 	ret
 40187dc:	80c00017 	ldw	r3,0(r16)
 40187e0:	183ff926 	beq	r3,zero,40187c8 <__alt_mem_epcs_flash_controller_0+0xfb0177c8>
 40187e4:	88c00015 	stw	r3,0(r17)
 40187e8:	003ff706 	br	40187c8 <__alt_mem_epcs_flash_controller_0+0xfb0177c8>

040187ec <_lseek_r>:
 40187ec:	defffd04 	addi	sp,sp,-12
 40187f0:	2805883a 	mov	r2,r5
 40187f4:	dc000015 	stw	r16,0(sp)
 40187f8:	04010234 	movhi	r16,1032
 40187fc:	dc400115 	stw	r17,4(sp)
 4018800:	300b883a 	mov	r5,r6
 4018804:	843e5904 	addi	r16,r16,-1692
 4018808:	2023883a 	mov	r17,r4
 401880c:	380d883a 	mov	r6,r7
 4018810:	1009883a 	mov	r4,r2
 4018814:	dfc00215 	stw	ra,8(sp)
 4018818:	80000015 	stw	zero,0(r16)
 401881c:	4019d780 	call	4019d78 <lseek>
 4018820:	00ffffc4 	movi	r3,-1
 4018824:	10c00526 	beq	r2,r3,401883c <_lseek_r+0x50>
 4018828:	dfc00217 	ldw	ra,8(sp)
 401882c:	dc400117 	ldw	r17,4(sp)
 4018830:	dc000017 	ldw	r16,0(sp)
 4018834:	dec00304 	addi	sp,sp,12
 4018838:	f800283a 	ret
 401883c:	80c00017 	ldw	r3,0(r16)
 4018840:	183ff926 	beq	r3,zero,4018828 <__alt_mem_epcs_flash_controller_0+0xfb017828>
 4018844:	88c00015 	stw	r3,0(r17)
 4018848:	003ff706 	br	4018828 <__alt_mem_epcs_flash_controller_0+0xfb017828>

0401884c <_read_r>:
 401884c:	defffd04 	addi	sp,sp,-12
 4018850:	2805883a 	mov	r2,r5
 4018854:	dc000015 	stw	r16,0(sp)
 4018858:	04010234 	movhi	r16,1032
 401885c:	dc400115 	stw	r17,4(sp)
 4018860:	300b883a 	mov	r5,r6
 4018864:	843e5904 	addi	r16,r16,-1692
 4018868:	2023883a 	mov	r17,r4
 401886c:	380d883a 	mov	r6,r7
 4018870:	1009883a 	mov	r4,r2
 4018874:	dfc00215 	stw	ra,8(sp)
 4018878:	80000015 	stw	zero,0(r16)
 401887c:	4019f4c0 	call	4019f4c <read>
 4018880:	00ffffc4 	movi	r3,-1
 4018884:	10c00526 	beq	r2,r3,401889c <_read_r+0x50>
 4018888:	dfc00217 	ldw	ra,8(sp)
 401888c:	dc400117 	ldw	r17,4(sp)
 4018890:	dc000017 	ldw	r16,0(sp)
 4018894:	dec00304 	addi	sp,sp,12
 4018898:	f800283a 	ret
 401889c:	80c00017 	ldw	r3,0(r16)
 40188a0:	183ff926 	beq	r3,zero,4018888 <__alt_mem_epcs_flash_controller_0+0xfb017888>
 40188a4:	88c00015 	stw	r3,0(r17)
 40188a8:	003ff706 	br	4018888 <__alt_mem_epcs_flash_controller_0+0xfb017888>

040188ac <_wcrtomb_r>:
 40188ac:	defff604 	addi	sp,sp,-40
 40188b0:	00810234 	movhi	r2,1032
 40188b4:	dc800815 	stw	r18,32(sp)
 40188b8:	dc400715 	stw	r17,28(sp)
 40188bc:	dc000615 	stw	r16,24(sp)
 40188c0:	10be4804 	addi	r2,r2,-1760
 40188c4:	dfc00915 	stw	ra,36(sp)
 40188c8:	2021883a 	mov	r16,r4
 40188cc:	3823883a 	mov	r17,r7
 40188d0:	14800017 	ldw	r18,0(r2)
 40188d4:	28001426 	beq	r5,zero,4018928 <_wcrtomb_r+0x7c>
 40188d8:	d9400415 	stw	r5,16(sp)
 40188dc:	d9800515 	stw	r6,20(sp)
 40188e0:	40139d00 	call	40139d0 <__locale_charset>
 40188e4:	d9800517 	ldw	r6,20(sp)
 40188e8:	d9400417 	ldw	r5,16(sp)
 40188ec:	100f883a 	mov	r7,r2
 40188f0:	dc400015 	stw	r17,0(sp)
 40188f4:	8009883a 	mov	r4,r16
 40188f8:	903ee83a 	callr	r18
 40188fc:	00ffffc4 	movi	r3,-1
 4018900:	10c0031e 	bne	r2,r3,4018910 <_wcrtomb_r+0x64>
 4018904:	88000015 	stw	zero,0(r17)
 4018908:	00c02284 	movi	r3,138
 401890c:	80c00015 	stw	r3,0(r16)
 4018910:	dfc00917 	ldw	ra,36(sp)
 4018914:	dc800817 	ldw	r18,32(sp)
 4018918:	dc400717 	ldw	r17,28(sp)
 401891c:	dc000617 	ldw	r16,24(sp)
 4018920:	dec00a04 	addi	sp,sp,40
 4018924:	f800283a 	ret
 4018928:	40139d00 	call	40139d0 <__locale_charset>
 401892c:	100f883a 	mov	r7,r2
 4018930:	dc400015 	stw	r17,0(sp)
 4018934:	000d883a 	mov	r6,zero
 4018938:	d9400104 	addi	r5,sp,4
 401893c:	8009883a 	mov	r4,r16
 4018940:	903ee83a 	callr	r18
 4018944:	003fed06 	br	40188fc <__alt_mem_epcs_flash_controller_0+0xfb0178fc>

04018948 <wcrtomb>:
 4018948:	defff604 	addi	sp,sp,-40
 401894c:	00810234 	movhi	r2,1032
 4018950:	dc800615 	stw	r18,24(sp)
 4018954:	dc400515 	stw	r17,20(sp)
 4018958:	10be4404 	addi	r2,r2,-1776
 401895c:	dfc00915 	stw	ra,36(sp)
 4018960:	dd000815 	stw	r20,32(sp)
 4018964:	dcc00715 	stw	r19,28(sp)
 4018968:	dc000415 	stw	r16,16(sp)
 401896c:	3025883a 	mov	r18,r6
 4018970:	14400017 	ldw	r17,0(r2)
 4018974:	20001926 	beq	r4,zero,40189dc <wcrtomb+0x94>
 4018978:	00810234 	movhi	r2,1032
 401897c:	10be4804 	addi	r2,r2,-1760
 4018980:	15000017 	ldw	r20,0(r2)
 4018984:	2021883a 	mov	r16,r4
 4018988:	2827883a 	mov	r19,r5
 401898c:	40139d00 	call	40139d0 <__locale_charset>
 4018990:	100f883a 	mov	r7,r2
 4018994:	dc800015 	stw	r18,0(sp)
 4018998:	980d883a 	mov	r6,r19
 401899c:	800b883a 	mov	r5,r16
 40189a0:	8809883a 	mov	r4,r17
 40189a4:	a03ee83a 	callr	r20
 40189a8:	00ffffc4 	movi	r3,-1
 40189ac:	10c0031e 	bne	r2,r3,40189bc <wcrtomb+0x74>
 40189b0:	90000015 	stw	zero,0(r18)
 40189b4:	00c02284 	movi	r3,138
 40189b8:	88c00015 	stw	r3,0(r17)
 40189bc:	dfc00917 	ldw	ra,36(sp)
 40189c0:	dd000817 	ldw	r20,32(sp)
 40189c4:	dcc00717 	ldw	r19,28(sp)
 40189c8:	dc800617 	ldw	r18,24(sp)
 40189cc:	dc400517 	ldw	r17,20(sp)
 40189d0:	dc000417 	ldw	r16,16(sp)
 40189d4:	dec00a04 	addi	sp,sp,40
 40189d8:	f800283a 	ret
 40189dc:	00810234 	movhi	r2,1032
 40189e0:	10be4804 	addi	r2,r2,-1760
 40189e4:	14000017 	ldw	r16,0(r2)
 40189e8:	40139d00 	call	40139d0 <__locale_charset>
 40189ec:	100f883a 	mov	r7,r2
 40189f0:	dc800015 	stw	r18,0(sp)
 40189f4:	000d883a 	mov	r6,zero
 40189f8:	d9400104 	addi	r5,sp,4
 40189fc:	8809883a 	mov	r4,r17
 4018a00:	803ee83a 	callr	r16
 4018a04:	003fe806 	br	40189a8 <__alt_mem_epcs_flash_controller_0+0xfb0179a8>

04018a08 <__ascii_wctomb>:
 4018a08:	28000526 	beq	r5,zero,4018a20 <__ascii_wctomb+0x18>
 4018a0c:	00803fc4 	movi	r2,255
 4018a10:	11800536 	bltu	r2,r6,4018a28 <__ascii_wctomb+0x20>
 4018a14:	29800005 	stb	r6,0(r5)
 4018a18:	00800044 	movi	r2,1
 4018a1c:	f800283a 	ret
 4018a20:	0005883a 	mov	r2,zero
 4018a24:	f800283a 	ret
 4018a28:	00802284 	movi	r2,138
 4018a2c:	20800015 	stw	r2,0(r4)
 4018a30:	00bfffc4 	movi	r2,-1
 4018a34:	f800283a 	ret

04018a38 <_wctomb_r>:
 4018a38:	00810234 	movhi	r2,1032
 4018a3c:	defff904 	addi	sp,sp,-28
 4018a40:	10be4804 	addi	r2,r2,-1760
 4018a44:	dfc00615 	stw	ra,24(sp)
 4018a48:	dc400515 	stw	r17,20(sp)
 4018a4c:	dc000415 	stw	r16,16(sp)
 4018a50:	3823883a 	mov	r17,r7
 4018a54:	14000017 	ldw	r16,0(r2)
 4018a58:	d9000115 	stw	r4,4(sp)
 4018a5c:	d9400215 	stw	r5,8(sp)
 4018a60:	d9800315 	stw	r6,12(sp)
 4018a64:	40139d00 	call	40139d0 <__locale_charset>
 4018a68:	d9800317 	ldw	r6,12(sp)
 4018a6c:	d9400217 	ldw	r5,8(sp)
 4018a70:	d9000117 	ldw	r4,4(sp)
 4018a74:	100f883a 	mov	r7,r2
 4018a78:	dc400015 	stw	r17,0(sp)
 4018a7c:	803ee83a 	callr	r16
 4018a80:	dfc00617 	ldw	ra,24(sp)
 4018a84:	dc400517 	ldw	r17,20(sp)
 4018a88:	dc000417 	ldw	r16,16(sp)
 4018a8c:	dec00704 	addi	sp,sp,28
 4018a90:	f800283a 	ret

04018a94 <__udivdi3>:
 4018a94:	defff504 	addi	sp,sp,-44
 4018a98:	dcc00415 	stw	r19,16(sp)
 4018a9c:	dc000115 	stw	r16,4(sp)
 4018aa0:	dfc00a15 	stw	ra,40(sp)
 4018aa4:	df000915 	stw	fp,36(sp)
 4018aa8:	ddc00815 	stw	r23,32(sp)
 4018aac:	dd800715 	stw	r22,28(sp)
 4018ab0:	dd400615 	stw	r21,24(sp)
 4018ab4:	dd000515 	stw	r20,20(sp)
 4018ab8:	dc800315 	stw	r18,12(sp)
 4018abc:	dc400215 	stw	r17,8(sp)
 4018ac0:	2027883a 	mov	r19,r4
 4018ac4:	2821883a 	mov	r16,r5
 4018ac8:	3800411e 	bne	r7,zero,4018bd0 <__udivdi3+0x13c>
 4018acc:	3023883a 	mov	r17,r6
 4018ad0:	2025883a 	mov	r18,r4
 4018ad4:	2980522e 	bgeu	r5,r6,4018c20 <__udivdi3+0x18c>
 4018ad8:	00bfffd4 	movui	r2,65535
 4018adc:	282d883a 	mov	r22,r5
 4018ae0:	1180a836 	bltu	r2,r6,4018d84 <__udivdi3+0x2f0>
 4018ae4:	00803fc4 	movi	r2,255
 4018ae8:	1185803a 	cmpltu	r2,r2,r6
 4018aec:	100490fa 	slli	r2,r2,3
 4018af0:	3086d83a 	srl	r3,r6,r2
 4018af4:	01010234 	movhi	r4,1032
 4018af8:	212f9c44 	addi	r4,r4,-16783
 4018afc:	20c7883a 	add	r3,r4,r3
 4018b00:	18c00003 	ldbu	r3,0(r3)
 4018b04:	1885883a 	add	r2,r3,r2
 4018b08:	00c00804 	movi	r3,32
 4018b0c:	1887c83a 	sub	r3,r3,r2
 4018b10:	18000526 	beq	r3,zero,4018b28 <__udivdi3+0x94>
 4018b14:	80e0983a 	sll	r16,r16,r3
 4018b18:	9884d83a 	srl	r2,r19,r2
 4018b1c:	30e2983a 	sll	r17,r6,r3
 4018b20:	98e4983a 	sll	r18,r19,r3
 4018b24:	142cb03a 	or	r22,r2,r16
 4018b28:	882ad43a 	srli	r21,r17,16
 4018b2c:	b009883a 	mov	r4,r22
 4018b30:	8d3fffcc 	andi	r20,r17,65535
 4018b34:	a80b883a 	mov	r5,r21
 4018b38:	40095e40 	call	40095e4 <__umodsi3>
 4018b3c:	b009883a 	mov	r4,r22
 4018b40:	a80b883a 	mov	r5,r21
 4018b44:	1027883a 	mov	r19,r2
 4018b48:	40095800 	call	4009580 <__udivsi3>
 4018b4c:	102d883a 	mov	r22,r2
 4018b50:	9826943a 	slli	r19,r19,16
 4018b54:	9004d43a 	srli	r2,r18,16
 4018b58:	a5a1383a 	mul	r16,r20,r22
 4018b5c:	14c4b03a 	or	r2,r2,r19
 4018b60:	1400052e 	bgeu	r2,r16,4018b78 <__udivdi3+0xe4>
 4018b64:	1445883a 	add	r2,r2,r17
 4018b68:	b0ffffc4 	addi	r3,r22,-1
 4018b6c:	14400136 	bltu	r2,r17,4018b74 <__udivdi3+0xe0>
 4018b70:	14012336 	bltu	r2,r16,4019000 <__udivdi3+0x56c>
 4018b74:	182d883a 	mov	r22,r3
 4018b78:	1421c83a 	sub	r16,r2,r16
 4018b7c:	a80b883a 	mov	r5,r21
 4018b80:	8009883a 	mov	r4,r16
 4018b84:	40095e40 	call	40095e4 <__umodsi3>
 4018b88:	1027883a 	mov	r19,r2
 4018b8c:	a80b883a 	mov	r5,r21
 4018b90:	8009883a 	mov	r4,r16
 4018b94:	40095800 	call	4009580 <__udivsi3>
 4018b98:	9826943a 	slli	r19,r19,16
 4018b9c:	a0a9383a 	mul	r20,r20,r2
 4018ba0:	94bfffcc 	andi	r18,r18,65535
 4018ba4:	94e4b03a 	or	r18,r18,r19
 4018ba8:	9500052e 	bgeu	r18,r20,4018bc0 <__udivdi3+0x12c>
 4018bac:	8ca5883a 	add	r18,r17,r18
 4018bb0:	10ffffc4 	addi	r3,r2,-1
 4018bb4:	9440f136 	bltu	r18,r17,4018f7c <__udivdi3+0x4e8>
 4018bb8:	9500f02e 	bgeu	r18,r20,4018f7c <__udivdi3+0x4e8>
 4018bbc:	10bfff84 	addi	r2,r2,-2
 4018bc0:	b00c943a 	slli	r6,r22,16
 4018bc4:	0007883a 	mov	r3,zero
 4018bc8:	3084b03a 	or	r2,r6,r2
 4018bcc:	00005906 	br	4018d34 <__udivdi3+0x2a0>
 4018bd0:	29c05636 	bltu	r5,r7,4018d2c <__udivdi3+0x298>
 4018bd4:	00bfffd4 	movui	r2,65535
 4018bd8:	11c0622e 	bgeu	r2,r7,4018d64 <__udivdi3+0x2d0>
 4018bdc:	00804034 	movhi	r2,256
 4018be0:	10bfffc4 	addi	r2,r2,-1
 4018be4:	11c0ee36 	bltu	r2,r7,4018fa0 <__udivdi3+0x50c>
 4018be8:	00800404 	movi	r2,16
 4018bec:	3886d83a 	srl	r3,r7,r2
 4018bf0:	01010234 	movhi	r4,1032
 4018bf4:	212f9c44 	addi	r4,r4,-16783
 4018bf8:	20c7883a 	add	r3,r4,r3
 4018bfc:	18c00003 	ldbu	r3,0(r3)
 4018c00:	05400804 	movi	r21,32
 4018c04:	1885883a 	add	r2,r3,r2
 4018c08:	a8abc83a 	sub	r21,r21,r2
 4018c0c:	a800621e 	bne	r21,zero,4018d98 <__udivdi3+0x304>
 4018c10:	3c00e936 	bltu	r7,r16,4018fb8 <__udivdi3+0x524>
 4018c14:	9985403a 	cmpgeu	r2,r19,r6
 4018c18:	0007883a 	mov	r3,zero
 4018c1c:	00004506 	br	4018d34 <__udivdi3+0x2a0>
 4018c20:	3000041e 	bne	r6,zero,4018c34 <__udivdi3+0x1a0>
 4018c24:	000b883a 	mov	r5,zero
 4018c28:	01000044 	movi	r4,1
 4018c2c:	40095800 	call	4009580 <__udivsi3>
 4018c30:	1023883a 	mov	r17,r2
 4018c34:	00bfffd4 	movui	r2,65535
 4018c38:	14404e2e 	bgeu	r2,r17,4018d74 <__udivdi3+0x2e0>
 4018c3c:	00804034 	movhi	r2,256
 4018c40:	10bfffc4 	addi	r2,r2,-1
 4018c44:	1440d836 	bltu	r2,r17,4018fa8 <__udivdi3+0x514>
 4018c48:	00800404 	movi	r2,16
 4018c4c:	8886d83a 	srl	r3,r17,r2
 4018c50:	01010234 	movhi	r4,1032
 4018c54:	212f9c44 	addi	r4,r4,-16783
 4018c58:	20c7883a 	add	r3,r4,r3
 4018c5c:	18c00003 	ldbu	r3,0(r3)
 4018c60:	1885883a 	add	r2,r3,r2
 4018c64:	00c00804 	movi	r3,32
 4018c68:	1887c83a 	sub	r3,r3,r2
 4018c6c:	18008f1e 	bne	r3,zero,4018eac <__udivdi3+0x418>
 4018c70:	882ad43a 	srli	r21,r17,16
 4018c74:	8461c83a 	sub	r16,r16,r17
 4018c78:	8d3fffcc 	andi	r20,r17,65535
 4018c7c:	00c00044 	movi	r3,1
 4018c80:	8009883a 	mov	r4,r16
 4018c84:	a80b883a 	mov	r5,r21
 4018c88:	d8c00015 	stw	r3,0(sp)
 4018c8c:	40095e40 	call	40095e4 <__umodsi3>
 4018c90:	8009883a 	mov	r4,r16
 4018c94:	a80b883a 	mov	r5,r21
 4018c98:	1027883a 	mov	r19,r2
 4018c9c:	40095800 	call	4009580 <__udivsi3>
 4018ca0:	9826943a 	slli	r19,r19,16
 4018ca4:	9008d43a 	srli	r4,r18,16
 4018ca8:	1521383a 	mul	r16,r2,r20
 4018cac:	102d883a 	mov	r22,r2
 4018cb0:	24c8b03a 	or	r4,r4,r19
 4018cb4:	d8c00017 	ldw	r3,0(sp)
 4018cb8:	2400052e 	bgeu	r4,r16,4018cd0 <__udivdi3+0x23c>
 4018cbc:	2449883a 	add	r4,r4,r17
 4018cc0:	b0bfffc4 	addi	r2,r22,-1
 4018cc4:	24400136 	bltu	r4,r17,4018ccc <__udivdi3+0x238>
 4018cc8:	2400ca36 	bltu	r4,r16,4018ff4 <__udivdi3+0x560>
 4018ccc:	102d883a 	mov	r22,r2
 4018cd0:	2421c83a 	sub	r16,r4,r16
 4018cd4:	a80b883a 	mov	r5,r21
 4018cd8:	8009883a 	mov	r4,r16
 4018cdc:	d8c00015 	stw	r3,0(sp)
 4018ce0:	40095e40 	call	40095e4 <__umodsi3>
 4018ce4:	1027883a 	mov	r19,r2
 4018ce8:	a80b883a 	mov	r5,r21
 4018cec:	8009883a 	mov	r4,r16
 4018cf0:	40095800 	call	4009580 <__udivsi3>
 4018cf4:	9826943a 	slli	r19,r19,16
 4018cf8:	1529383a 	mul	r20,r2,r20
 4018cfc:	94bfffcc 	andi	r18,r18,65535
 4018d00:	94e4b03a 	or	r18,r18,r19
 4018d04:	d8c00017 	ldw	r3,0(sp)
 4018d08:	9500052e 	bgeu	r18,r20,4018d20 <__udivdi3+0x28c>
 4018d0c:	8ca5883a 	add	r18,r17,r18
 4018d10:	113fffc4 	addi	r4,r2,-1
 4018d14:	94409736 	bltu	r18,r17,4018f74 <__udivdi3+0x4e0>
 4018d18:	9500962e 	bgeu	r18,r20,4018f74 <__udivdi3+0x4e0>
 4018d1c:	10bfff84 	addi	r2,r2,-2
 4018d20:	b00c943a 	slli	r6,r22,16
 4018d24:	3084b03a 	or	r2,r6,r2
 4018d28:	00000206 	br	4018d34 <__udivdi3+0x2a0>
 4018d2c:	0007883a 	mov	r3,zero
 4018d30:	0005883a 	mov	r2,zero
 4018d34:	dfc00a17 	ldw	ra,40(sp)
 4018d38:	df000917 	ldw	fp,36(sp)
 4018d3c:	ddc00817 	ldw	r23,32(sp)
 4018d40:	dd800717 	ldw	r22,28(sp)
 4018d44:	dd400617 	ldw	r21,24(sp)
 4018d48:	dd000517 	ldw	r20,20(sp)
 4018d4c:	dcc00417 	ldw	r19,16(sp)
 4018d50:	dc800317 	ldw	r18,12(sp)
 4018d54:	dc400217 	ldw	r17,8(sp)
 4018d58:	dc000117 	ldw	r16,4(sp)
 4018d5c:	dec00b04 	addi	sp,sp,44
 4018d60:	f800283a 	ret
 4018d64:	00803fc4 	movi	r2,255
 4018d68:	11c5803a 	cmpltu	r2,r2,r7
 4018d6c:	100490fa 	slli	r2,r2,3
 4018d70:	003f9e06 	br	4018bec <__alt_mem_epcs_flash_controller_0+0xfb017bec>
 4018d74:	00803fc4 	movi	r2,255
 4018d78:	1445803a 	cmpltu	r2,r2,r17
 4018d7c:	100490fa 	slli	r2,r2,3
 4018d80:	003fb206 	br	4018c4c <__alt_mem_epcs_flash_controller_0+0xfb017c4c>
 4018d84:	00804034 	movhi	r2,256
 4018d88:	10bfffc4 	addi	r2,r2,-1
 4018d8c:	11808836 	bltu	r2,r6,4018fb0 <__udivdi3+0x51c>
 4018d90:	00800404 	movi	r2,16
 4018d94:	003f5606 	br	4018af0 <__alt_mem_epcs_flash_controller_0+0xfb017af0>
 4018d98:	30aed83a 	srl	r23,r6,r2
 4018d9c:	3d4e983a 	sll	r7,r7,r21
 4018da0:	80acd83a 	srl	r22,r16,r2
 4018da4:	9884d83a 	srl	r2,r19,r2
 4018da8:	3deeb03a 	or	r23,r7,r23
 4018dac:	b824d43a 	srli	r18,r23,16
 4018db0:	8560983a 	sll	r16,r16,r21
 4018db4:	b009883a 	mov	r4,r22
 4018db8:	900b883a 	mov	r5,r18
 4018dbc:	3568983a 	sll	r20,r6,r21
 4018dc0:	1420b03a 	or	r16,r2,r16
 4018dc4:	40095e40 	call	40095e4 <__umodsi3>
 4018dc8:	b009883a 	mov	r4,r22
 4018dcc:	900b883a 	mov	r5,r18
 4018dd0:	1023883a 	mov	r17,r2
 4018dd4:	40095800 	call	4009580 <__udivsi3>
 4018dd8:	8808943a 	slli	r4,r17,16
 4018ddc:	bf3fffcc 	andi	fp,r23,65535
 4018de0:	8006d43a 	srli	r3,r16,16
 4018de4:	e0a3383a 	mul	r17,fp,r2
 4018de8:	100d883a 	mov	r6,r2
 4018dec:	1906b03a 	or	r3,r3,r4
 4018df0:	1c40042e 	bgeu	r3,r17,4018e04 <__udivdi3+0x370>
 4018df4:	1dc7883a 	add	r3,r3,r23
 4018df8:	10bfffc4 	addi	r2,r2,-1
 4018dfc:	1dc0752e 	bgeu	r3,r23,4018fd4 <__udivdi3+0x540>
 4018e00:	100d883a 	mov	r6,r2
 4018e04:	1c63c83a 	sub	r17,r3,r17
 4018e08:	900b883a 	mov	r5,r18
 4018e0c:	8809883a 	mov	r4,r17
 4018e10:	d9800015 	stw	r6,0(sp)
 4018e14:	40095e40 	call	40095e4 <__umodsi3>
 4018e18:	102d883a 	mov	r22,r2
 4018e1c:	8809883a 	mov	r4,r17
 4018e20:	900b883a 	mov	r5,r18
 4018e24:	40095800 	call	4009580 <__udivsi3>
 4018e28:	b02c943a 	slli	r22,r22,16
 4018e2c:	e089383a 	mul	r4,fp,r2
 4018e30:	843fffcc 	andi	r16,r16,65535
 4018e34:	85a0b03a 	or	r16,r16,r22
 4018e38:	d9800017 	ldw	r6,0(sp)
 4018e3c:	8100042e 	bgeu	r16,r4,4018e50 <__udivdi3+0x3bc>
 4018e40:	85e1883a 	add	r16,r16,r23
 4018e44:	10ffffc4 	addi	r3,r2,-1
 4018e48:	85c05e2e 	bgeu	r16,r23,4018fc4 <__udivdi3+0x530>
 4018e4c:	1805883a 	mov	r2,r3
 4018e50:	300c943a 	slli	r6,r6,16
 4018e54:	a17fffcc 	andi	r5,r20,65535
 4018e58:	a028d43a 	srli	r20,r20,16
 4018e5c:	3084b03a 	or	r2,r6,r2
 4018e60:	10ffffcc 	andi	r3,r2,65535
 4018e64:	100cd43a 	srli	r6,r2,16
 4018e68:	194f383a 	mul	r7,r3,r5
 4018e6c:	1d07383a 	mul	r3,r3,r20
 4018e70:	314b383a 	mul	r5,r6,r5
 4018e74:	3810d43a 	srli	r8,r7,16
 4018e78:	8121c83a 	sub	r16,r16,r4
 4018e7c:	1947883a 	add	r3,r3,r5
 4018e80:	40c7883a 	add	r3,r8,r3
 4018e84:	350d383a 	mul	r6,r6,r20
 4018e88:	1940022e 	bgeu	r3,r5,4018e94 <__udivdi3+0x400>
 4018e8c:	01000074 	movhi	r4,1
 4018e90:	310d883a 	add	r6,r6,r4
 4018e94:	1828d43a 	srli	r20,r3,16
 4018e98:	a18d883a 	add	r6,r20,r6
 4018e9c:	81803e36 	bltu	r16,r6,4018f98 <__udivdi3+0x504>
 4018ea0:	81803826 	beq	r16,r6,4018f84 <__udivdi3+0x4f0>
 4018ea4:	0007883a 	mov	r3,zero
 4018ea8:	003fa206 	br	4018d34 <__alt_mem_epcs_flash_controller_0+0xfb017d34>
 4018eac:	88e2983a 	sll	r17,r17,r3
 4018eb0:	80a8d83a 	srl	r20,r16,r2
 4018eb4:	80e0983a 	sll	r16,r16,r3
 4018eb8:	882ad43a 	srli	r21,r17,16
 4018ebc:	9884d83a 	srl	r2,r19,r2
 4018ec0:	a009883a 	mov	r4,r20
 4018ec4:	a80b883a 	mov	r5,r21
 4018ec8:	142eb03a 	or	r23,r2,r16
 4018ecc:	98e4983a 	sll	r18,r19,r3
 4018ed0:	40095e40 	call	40095e4 <__umodsi3>
 4018ed4:	a009883a 	mov	r4,r20
 4018ed8:	a80b883a 	mov	r5,r21
 4018edc:	1021883a 	mov	r16,r2
 4018ee0:	40095800 	call	4009580 <__udivsi3>
 4018ee4:	1039883a 	mov	fp,r2
 4018ee8:	8d3fffcc 	andi	r20,r17,65535
 4018eec:	8020943a 	slli	r16,r16,16
 4018ef0:	b804d43a 	srli	r2,r23,16
 4018ef4:	a72d383a 	mul	r22,r20,fp
 4018ef8:	1404b03a 	or	r2,r2,r16
 4018efc:	1580062e 	bgeu	r2,r22,4018f18 <__udivdi3+0x484>
 4018f00:	1445883a 	add	r2,r2,r17
 4018f04:	e0ffffc4 	addi	r3,fp,-1
 4018f08:	14403836 	bltu	r2,r17,4018fec <__udivdi3+0x558>
 4018f0c:	1580372e 	bgeu	r2,r22,4018fec <__udivdi3+0x558>
 4018f10:	e73fff84 	addi	fp,fp,-2
 4018f14:	1445883a 	add	r2,r2,r17
 4018f18:	15adc83a 	sub	r22,r2,r22
 4018f1c:	a80b883a 	mov	r5,r21
 4018f20:	b009883a 	mov	r4,r22
 4018f24:	40095e40 	call	40095e4 <__umodsi3>
 4018f28:	1027883a 	mov	r19,r2
 4018f2c:	b009883a 	mov	r4,r22
 4018f30:	a80b883a 	mov	r5,r21
 4018f34:	40095800 	call	4009580 <__udivsi3>
 4018f38:	9826943a 	slli	r19,r19,16
 4018f3c:	a0a1383a 	mul	r16,r20,r2
 4018f40:	b93fffcc 	andi	r4,r23,65535
 4018f44:	24c8b03a 	or	r4,r4,r19
 4018f48:	2400062e 	bgeu	r4,r16,4018f64 <__udivdi3+0x4d0>
 4018f4c:	2449883a 	add	r4,r4,r17
 4018f50:	10ffffc4 	addi	r3,r2,-1
 4018f54:	24402336 	bltu	r4,r17,4018fe4 <__udivdi3+0x550>
 4018f58:	2400222e 	bgeu	r4,r16,4018fe4 <__udivdi3+0x550>
 4018f5c:	10bfff84 	addi	r2,r2,-2
 4018f60:	2449883a 	add	r4,r4,r17
 4018f64:	e038943a 	slli	fp,fp,16
 4018f68:	2421c83a 	sub	r16,r4,r16
 4018f6c:	e086b03a 	or	r3,fp,r2
 4018f70:	003f4306 	br	4018c80 <__alt_mem_epcs_flash_controller_0+0xfb017c80>
 4018f74:	2005883a 	mov	r2,r4
 4018f78:	003f6906 	br	4018d20 <__alt_mem_epcs_flash_controller_0+0xfb017d20>
 4018f7c:	1805883a 	mov	r2,r3
 4018f80:	003f0f06 	br	4018bc0 <__alt_mem_epcs_flash_controller_0+0xfb017bc0>
 4018f84:	1806943a 	slli	r3,r3,16
 4018f88:	9d66983a 	sll	r19,r19,r21
 4018f8c:	39ffffcc 	andi	r7,r7,65535
 4018f90:	19c7883a 	add	r3,r3,r7
 4018f94:	98ffc32e 	bgeu	r19,r3,4018ea4 <__alt_mem_epcs_flash_controller_0+0xfb017ea4>
 4018f98:	10bfffc4 	addi	r2,r2,-1
 4018f9c:	003fc106 	br	4018ea4 <__alt_mem_epcs_flash_controller_0+0xfb017ea4>
 4018fa0:	00800604 	movi	r2,24
 4018fa4:	003f1106 	br	4018bec <__alt_mem_epcs_flash_controller_0+0xfb017bec>
 4018fa8:	00800604 	movi	r2,24
 4018fac:	003f2706 	br	4018c4c <__alt_mem_epcs_flash_controller_0+0xfb017c4c>
 4018fb0:	00800604 	movi	r2,24
 4018fb4:	003ece06 	br	4018af0 <__alt_mem_epcs_flash_controller_0+0xfb017af0>
 4018fb8:	0007883a 	mov	r3,zero
 4018fbc:	00800044 	movi	r2,1
 4018fc0:	003f5c06 	br	4018d34 <__alt_mem_epcs_flash_controller_0+0xfb017d34>
 4018fc4:	813fa12e 	bgeu	r16,r4,4018e4c <__alt_mem_epcs_flash_controller_0+0xfb017e4c>
 4018fc8:	10bfff84 	addi	r2,r2,-2
 4018fcc:	85e1883a 	add	r16,r16,r23
 4018fd0:	003f9f06 	br	4018e50 <__alt_mem_epcs_flash_controller_0+0xfb017e50>
 4018fd4:	1c7f8a2e 	bgeu	r3,r17,4018e00 <__alt_mem_epcs_flash_controller_0+0xfb017e00>
 4018fd8:	31bfff84 	addi	r6,r6,-2
 4018fdc:	1dc7883a 	add	r3,r3,r23
 4018fe0:	003f8806 	br	4018e04 <__alt_mem_epcs_flash_controller_0+0xfb017e04>
 4018fe4:	1805883a 	mov	r2,r3
 4018fe8:	003fde06 	br	4018f64 <__alt_mem_epcs_flash_controller_0+0xfb017f64>
 4018fec:	1839883a 	mov	fp,r3
 4018ff0:	003fc906 	br	4018f18 <__alt_mem_epcs_flash_controller_0+0xfb017f18>
 4018ff4:	b5bfff84 	addi	r22,r22,-2
 4018ff8:	2449883a 	add	r4,r4,r17
 4018ffc:	003f3406 	br	4018cd0 <__alt_mem_epcs_flash_controller_0+0xfb017cd0>
 4019000:	b5bfff84 	addi	r22,r22,-2
 4019004:	1445883a 	add	r2,r2,r17
 4019008:	003edb06 	br	4018b78 <__alt_mem_epcs_flash_controller_0+0xfb017b78>

0401900c <__umoddi3>:
 401900c:	defff404 	addi	sp,sp,-48
 4019010:	df000a15 	stw	fp,40(sp)
 4019014:	dc400315 	stw	r17,12(sp)
 4019018:	dc000215 	stw	r16,8(sp)
 401901c:	dfc00b15 	stw	ra,44(sp)
 4019020:	ddc00915 	stw	r23,36(sp)
 4019024:	dd800815 	stw	r22,32(sp)
 4019028:	dd400715 	stw	r21,28(sp)
 401902c:	dd000615 	stw	r20,24(sp)
 4019030:	dcc00515 	stw	r19,20(sp)
 4019034:	dc800415 	stw	r18,16(sp)
 4019038:	2021883a 	mov	r16,r4
 401903c:	2823883a 	mov	r17,r5
 4019040:	2839883a 	mov	fp,r5
 4019044:	38003c1e 	bne	r7,zero,4019138 <__umoddi3+0x12c>
 4019048:	3027883a 	mov	r19,r6
 401904c:	2029883a 	mov	r20,r4
 4019050:	2980512e 	bgeu	r5,r6,4019198 <__umoddi3+0x18c>
 4019054:	00bfffd4 	movui	r2,65535
 4019058:	11809a36 	bltu	r2,r6,40192c4 <__umoddi3+0x2b8>
 401905c:	01003fc4 	movi	r4,255
 4019060:	2189803a 	cmpltu	r4,r4,r6
 4019064:	200890fa 	slli	r4,r4,3
 4019068:	3104d83a 	srl	r2,r6,r4
 401906c:	00c10234 	movhi	r3,1032
 4019070:	18ef9c44 	addi	r3,r3,-16783
 4019074:	1885883a 	add	r2,r3,r2
 4019078:	10c00003 	ldbu	r3,0(r2)
 401907c:	00800804 	movi	r2,32
 4019080:	1909883a 	add	r4,r3,r4
 4019084:	1125c83a 	sub	r18,r2,r4
 4019088:	90000526 	beq	r18,zero,40190a0 <__umoddi3+0x94>
 401908c:	8ca2983a 	sll	r17,r17,r18
 4019090:	8108d83a 	srl	r4,r16,r4
 4019094:	34a6983a 	sll	r19,r6,r18
 4019098:	84a8983a 	sll	r20,r16,r18
 401909c:	2478b03a 	or	fp,r4,r17
 40190a0:	982ed43a 	srli	r23,r19,16
 40190a4:	e009883a 	mov	r4,fp
 40190a8:	9dbfffcc 	andi	r22,r19,65535
 40190ac:	b80b883a 	mov	r5,r23
 40190b0:	40095e40 	call	40095e4 <__umodsi3>
 40190b4:	e009883a 	mov	r4,fp
 40190b8:	b80b883a 	mov	r5,r23
 40190bc:	102b883a 	mov	r21,r2
 40190c0:	40095800 	call	4009580 <__udivsi3>
 40190c4:	a806943a 	slli	r3,r21,16
 40190c8:	a008d43a 	srli	r4,r20,16
 40190cc:	b085383a 	mul	r2,r22,r2
 40190d0:	20c8b03a 	or	r4,r4,r3
 40190d4:	2080032e 	bgeu	r4,r2,40190e4 <__umoddi3+0xd8>
 40190d8:	24c9883a 	add	r4,r4,r19
 40190dc:	24c00136 	bltu	r4,r19,40190e4 <__umoddi3+0xd8>
 40190e0:	20811036 	bltu	r4,r2,4019524 <__umoddi3+0x518>
 40190e4:	20abc83a 	sub	r21,r4,r2
 40190e8:	b80b883a 	mov	r5,r23
 40190ec:	a809883a 	mov	r4,r21
 40190f0:	40095e40 	call	40095e4 <__umodsi3>
 40190f4:	1023883a 	mov	r17,r2
 40190f8:	b80b883a 	mov	r5,r23
 40190fc:	a809883a 	mov	r4,r21
 4019100:	40095800 	call	4009580 <__udivsi3>
 4019104:	8822943a 	slli	r17,r17,16
 4019108:	b085383a 	mul	r2,r22,r2
 401910c:	a0ffffcc 	andi	r3,r20,65535
 4019110:	1c46b03a 	or	r3,r3,r17
 4019114:	1880042e 	bgeu	r3,r2,4019128 <__umoddi3+0x11c>
 4019118:	1cc7883a 	add	r3,r3,r19
 401911c:	1cc00236 	bltu	r3,r19,4019128 <__umoddi3+0x11c>
 4019120:	1880012e 	bgeu	r3,r2,4019128 <__umoddi3+0x11c>
 4019124:	1cc7883a 	add	r3,r3,r19
 4019128:	1885c83a 	sub	r2,r3,r2
 401912c:	1484d83a 	srl	r2,r2,r18
 4019130:	0007883a 	mov	r3,zero
 4019134:	00004f06 	br	4019274 <__umoddi3+0x268>
 4019138:	29c04c36 	bltu	r5,r7,401926c <__umoddi3+0x260>
 401913c:	00bfffd4 	movui	r2,65535
 4019140:	11c0582e 	bgeu	r2,r7,40192a4 <__umoddi3+0x298>
 4019144:	00804034 	movhi	r2,256
 4019148:	10bfffc4 	addi	r2,r2,-1
 401914c:	11c0e736 	bltu	r2,r7,40194ec <__umoddi3+0x4e0>
 4019150:	01000404 	movi	r4,16
 4019154:	3904d83a 	srl	r2,r7,r4
 4019158:	00c10234 	movhi	r3,1032
 401915c:	18ef9c44 	addi	r3,r3,-16783
 4019160:	1885883a 	add	r2,r3,r2
 4019164:	14c00003 	ldbu	r19,0(r2)
 4019168:	00c00804 	movi	r3,32
 401916c:	9927883a 	add	r19,r19,r4
 4019170:	1ce9c83a 	sub	r20,r3,r19
 4019174:	a000581e 	bne	r20,zero,40192d8 <__umoddi3+0x2cc>
 4019178:	3c400136 	bltu	r7,r17,4019180 <__umoddi3+0x174>
 401917c:	8180eb36 	bltu	r16,r6,401952c <__umoddi3+0x520>
 4019180:	8185c83a 	sub	r2,r16,r6
 4019184:	89e3c83a 	sub	r17,r17,r7
 4019188:	8089803a 	cmpltu	r4,r16,r2
 401918c:	8939c83a 	sub	fp,r17,r4
 4019190:	e007883a 	mov	r3,fp
 4019194:	00003706 	br	4019274 <__umoddi3+0x268>
 4019198:	3000041e 	bne	r6,zero,40191ac <__umoddi3+0x1a0>
 401919c:	000b883a 	mov	r5,zero
 40191a0:	01000044 	movi	r4,1
 40191a4:	40095800 	call	4009580 <__udivsi3>
 40191a8:	1027883a 	mov	r19,r2
 40191ac:	00bfffd4 	movui	r2,65535
 40191b0:	14c0402e 	bgeu	r2,r19,40192b4 <__umoddi3+0x2a8>
 40191b4:	00804034 	movhi	r2,256
 40191b8:	10bfffc4 	addi	r2,r2,-1
 40191bc:	14c0cd36 	bltu	r2,r19,40194f4 <__umoddi3+0x4e8>
 40191c0:	00800404 	movi	r2,16
 40191c4:	9886d83a 	srl	r3,r19,r2
 40191c8:	01010234 	movhi	r4,1032
 40191cc:	212f9c44 	addi	r4,r4,-16783
 40191d0:	20c7883a 	add	r3,r4,r3
 40191d4:	18c00003 	ldbu	r3,0(r3)
 40191d8:	1887883a 	add	r3,r3,r2
 40191dc:	00800804 	movi	r2,32
 40191e0:	10e5c83a 	sub	r18,r2,r3
 40191e4:	9000901e 	bne	r18,zero,4019428 <__umoddi3+0x41c>
 40191e8:	982cd43a 	srli	r22,r19,16
 40191ec:	8ce3c83a 	sub	r17,r17,r19
 40191f0:	9d7fffcc 	andi	r21,r19,65535
 40191f4:	b00b883a 	mov	r5,r22
 40191f8:	8809883a 	mov	r4,r17
 40191fc:	40095e40 	call	40095e4 <__umodsi3>
 4019200:	8809883a 	mov	r4,r17
 4019204:	b00b883a 	mov	r5,r22
 4019208:	1021883a 	mov	r16,r2
 401920c:	40095800 	call	4009580 <__udivsi3>
 4019210:	8006943a 	slli	r3,r16,16
 4019214:	a008d43a 	srli	r4,r20,16
 4019218:	1545383a 	mul	r2,r2,r21
 401921c:	20c8b03a 	or	r4,r4,r3
 4019220:	2080042e 	bgeu	r4,r2,4019234 <__umoddi3+0x228>
 4019224:	24c9883a 	add	r4,r4,r19
 4019228:	24c00236 	bltu	r4,r19,4019234 <__umoddi3+0x228>
 401922c:	2080012e 	bgeu	r4,r2,4019234 <__umoddi3+0x228>
 4019230:	24c9883a 	add	r4,r4,r19
 4019234:	20a1c83a 	sub	r16,r4,r2
 4019238:	b00b883a 	mov	r5,r22
 401923c:	8009883a 	mov	r4,r16
 4019240:	40095e40 	call	40095e4 <__umodsi3>
 4019244:	1023883a 	mov	r17,r2
 4019248:	b00b883a 	mov	r5,r22
 401924c:	8009883a 	mov	r4,r16
 4019250:	40095800 	call	4009580 <__udivsi3>
 4019254:	8822943a 	slli	r17,r17,16
 4019258:	1545383a 	mul	r2,r2,r21
 401925c:	a53fffcc 	andi	r20,r20,65535
 4019260:	a446b03a 	or	r3,r20,r17
 4019264:	18bfb02e 	bgeu	r3,r2,4019128 <__alt_mem_epcs_flash_controller_0+0xfb018128>
 4019268:	003fab06 	br	4019118 <__alt_mem_epcs_flash_controller_0+0xfb018118>
 401926c:	2005883a 	mov	r2,r4
 4019270:	2807883a 	mov	r3,r5
 4019274:	dfc00b17 	ldw	ra,44(sp)
 4019278:	df000a17 	ldw	fp,40(sp)
 401927c:	ddc00917 	ldw	r23,36(sp)
 4019280:	dd800817 	ldw	r22,32(sp)
 4019284:	dd400717 	ldw	r21,28(sp)
 4019288:	dd000617 	ldw	r20,24(sp)
 401928c:	dcc00517 	ldw	r19,20(sp)
 4019290:	dc800417 	ldw	r18,16(sp)
 4019294:	dc400317 	ldw	r17,12(sp)
 4019298:	dc000217 	ldw	r16,8(sp)
 401929c:	dec00c04 	addi	sp,sp,48
 40192a0:	f800283a 	ret
 40192a4:	04c03fc4 	movi	r19,255
 40192a8:	99c9803a 	cmpltu	r4,r19,r7
 40192ac:	200890fa 	slli	r4,r4,3
 40192b0:	003fa806 	br	4019154 <__alt_mem_epcs_flash_controller_0+0xfb018154>
 40192b4:	00803fc4 	movi	r2,255
 40192b8:	14c5803a 	cmpltu	r2,r2,r19
 40192bc:	100490fa 	slli	r2,r2,3
 40192c0:	003fc006 	br	40191c4 <__alt_mem_epcs_flash_controller_0+0xfb0181c4>
 40192c4:	00804034 	movhi	r2,256
 40192c8:	10bfffc4 	addi	r2,r2,-1
 40192cc:	11808b36 	bltu	r2,r6,40194fc <__umoddi3+0x4f0>
 40192d0:	01000404 	movi	r4,16
 40192d4:	003f6406 	br	4019068 <__alt_mem_epcs_flash_controller_0+0xfb018068>
 40192d8:	34c4d83a 	srl	r2,r6,r19
 40192dc:	3d0e983a 	sll	r7,r7,r20
 40192e0:	8cf8d83a 	srl	fp,r17,r19
 40192e4:	8d10983a 	sll	r8,r17,r20
 40192e8:	38aab03a 	or	r21,r7,r2
 40192ec:	a82cd43a 	srli	r22,r21,16
 40192f0:	84e2d83a 	srl	r17,r16,r19
 40192f4:	e009883a 	mov	r4,fp
 40192f8:	b00b883a 	mov	r5,r22
 40192fc:	8a22b03a 	or	r17,r17,r8
 4019300:	3524983a 	sll	r18,r6,r20
 4019304:	40095e40 	call	40095e4 <__umodsi3>
 4019308:	e009883a 	mov	r4,fp
 401930c:	b00b883a 	mov	r5,r22
 4019310:	102f883a 	mov	r23,r2
 4019314:	40095800 	call	4009580 <__udivsi3>
 4019318:	100d883a 	mov	r6,r2
 401931c:	b808943a 	slli	r4,r23,16
 4019320:	aa3fffcc 	andi	r8,r21,65535
 4019324:	8804d43a 	srli	r2,r17,16
 4019328:	41af383a 	mul	r23,r8,r6
 401932c:	8520983a 	sll	r16,r16,r20
 4019330:	1104b03a 	or	r2,r2,r4
 4019334:	15c0042e 	bgeu	r2,r23,4019348 <__umoddi3+0x33c>
 4019338:	1545883a 	add	r2,r2,r21
 401933c:	30ffffc4 	addi	r3,r6,-1
 4019340:	1540742e 	bgeu	r2,r21,4019514 <__umoddi3+0x508>
 4019344:	180d883a 	mov	r6,r3
 4019348:	15efc83a 	sub	r23,r2,r23
 401934c:	b00b883a 	mov	r5,r22
 4019350:	b809883a 	mov	r4,r23
 4019354:	d9800115 	stw	r6,4(sp)
 4019358:	da000015 	stw	r8,0(sp)
 401935c:	40095e40 	call	40095e4 <__umodsi3>
 4019360:	b00b883a 	mov	r5,r22
 4019364:	b809883a 	mov	r4,r23
 4019368:	1039883a 	mov	fp,r2
 401936c:	40095800 	call	4009580 <__udivsi3>
 4019370:	da000017 	ldw	r8,0(sp)
 4019374:	e038943a 	slli	fp,fp,16
 4019378:	100b883a 	mov	r5,r2
 401937c:	4089383a 	mul	r4,r8,r2
 4019380:	8a3fffcc 	andi	r8,r17,65535
 4019384:	4710b03a 	or	r8,r8,fp
 4019388:	d9800117 	ldw	r6,4(sp)
 401938c:	4100042e 	bgeu	r8,r4,40193a0 <__umoddi3+0x394>
 4019390:	4551883a 	add	r8,r8,r21
 4019394:	10bfffc4 	addi	r2,r2,-1
 4019398:	45405a2e 	bgeu	r8,r21,4019504 <__umoddi3+0x4f8>
 401939c:	100b883a 	mov	r5,r2
 40193a0:	300c943a 	slli	r6,r6,16
 40193a4:	91ffffcc 	andi	r7,r18,65535
 40193a8:	9004d43a 	srli	r2,r18,16
 40193ac:	314cb03a 	or	r6,r6,r5
 40193b0:	317fffcc 	andi	r5,r6,65535
 40193b4:	300cd43a 	srli	r6,r6,16
 40193b8:	29d3383a 	mul	r9,r5,r7
 40193bc:	288b383a 	mul	r5,r5,r2
 40193c0:	31cf383a 	mul	r7,r6,r7
 40193c4:	4806d43a 	srli	r3,r9,16
 40193c8:	4111c83a 	sub	r8,r8,r4
 40193cc:	29cb883a 	add	r5,r5,r7
 40193d0:	194b883a 	add	r5,r3,r5
 40193d4:	3085383a 	mul	r2,r6,r2
 40193d8:	29c0022e 	bgeu	r5,r7,40193e4 <__umoddi3+0x3d8>
 40193dc:	00c00074 	movhi	r3,1
 40193e0:	10c5883a 	add	r2,r2,r3
 40193e4:	2808d43a 	srli	r4,r5,16
 40193e8:	280a943a 	slli	r5,r5,16
 40193ec:	4a7fffcc 	andi	r9,r9,65535
 40193f0:	2085883a 	add	r2,r4,r2
 40193f4:	2a4b883a 	add	r5,r5,r9
 40193f8:	40803636 	bltu	r8,r2,40194d4 <__umoddi3+0x4c8>
 40193fc:	40804d26 	beq	r8,r2,4019534 <__umoddi3+0x528>
 4019400:	4089c83a 	sub	r4,r8,r2
 4019404:	280f883a 	mov	r7,r5
 4019408:	81cfc83a 	sub	r7,r16,r7
 401940c:	81c7803a 	cmpltu	r3,r16,r7
 4019410:	20c7c83a 	sub	r3,r4,r3
 4019414:	1cc4983a 	sll	r2,r3,r19
 4019418:	3d0ed83a 	srl	r7,r7,r20
 401941c:	1d06d83a 	srl	r3,r3,r20
 4019420:	11c4b03a 	or	r2,r2,r7
 4019424:	003f9306 	br	4019274 <__alt_mem_epcs_flash_controller_0+0xfb018274>
 4019428:	9ca6983a 	sll	r19,r19,r18
 401942c:	88e8d83a 	srl	r20,r17,r3
 4019430:	80c4d83a 	srl	r2,r16,r3
 4019434:	982cd43a 	srli	r22,r19,16
 4019438:	8ca2983a 	sll	r17,r17,r18
 401943c:	a009883a 	mov	r4,r20
 4019440:	b00b883a 	mov	r5,r22
 4019444:	1478b03a 	or	fp,r2,r17
 4019448:	40095e40 	call	40095e4 <__umodsi3>
 401944c:	a009883a 	mov	r4,r20
 4019450:	b00b883a 	mov	r5,r22
 4019454:	1023883a 	mov	r17,r2
 4019458:	40095800 	call	4009580 <__udivsi3>
 401945c:	9d7fffcc 	andi	r21,r19,65535
 4019460:	880a943a 	slli	r5,r17,16
 4019464:	e008d43a 	srli	r4,fp,16
 4019468:	a885383a 	mul	r2,r21,r2
 401946c:	84a8983a 	sll	r20,r16,r18
 4019470:	2148b03a 	or	r4,r4,r5
 4019474:	2080042e 	bgeu	r4,r2,4019488 <__umoddi3+0x47c>
 4019478:	24c9883a 	add	r4,r4,r19
 401947c:	24c00236 	bltu	r4,r19,4019488 <__umoddi3+0x47c>
 4019480:	2080012e 	bgeu	r4,r2,4019488 <__umoddi3+0x47c>
 4019484:	24c9883a 	add	r4,r4,r19
 4019488:	20a3c83a 	sub	r17,r4,r2
 401948c:	b00b883a 	mov	r5,r22
 4019490:	8809883a 	mov	r4,r17
 4019494:	40095e40 	call	40095e4 <__umodsi3>
 4019498:	102f883a 	mov	r23,r2
 401949c:	8809883a 	mov	r4,r17
 40194a0:	b00b883a 	mov	r5,r22
 40194a4:	40095800 	call	4009580 <__udivsi3>
 40194a8:	b82e943a 	slli	r23,r23,16
 40194ac:	a885383a 	mul	r2,r21,r2
 40194b0:	e13fffcc 	andi	r4,fp,65535
 40194b4:	25c8b03a 	or	r4,r4,r23
 40194b8:	2080042e 	bgeu	r4,r2,40194cc <__umoddi3+0x4c0>
 40194bc:	24c9883a 	add	r4,r4,r19
 40194c0:	24c00236 	bltu	r4,r19,40194cc <__umoddi3+0x4c0>
 40194c4:	2080012e 	bgeu	r4,r2,40194cc <__umoddi3+0x4c0>
 40194c8:	24c9883a 	add	r4,r4,r19
 40194cc:	20a3c83a 	sub	r17,r4,r2
 40194d0:	003f4806 	br	40191f4 <__alt_mem_epcs_flash_controller_0+0xfb0181f4>
 40194d4:	2c8fc83a 	sub	r7,r5,r18
 40194d8:	1545c83a 	sub	r2,r2,r21
 40194dc:	29cb803a 	cmpltu	r5,r5,r7
 40194e0:	1145c83a 	sub	r2,r2,r5
 40194e4:	4089c83a 	sub	r4,r8,r2
 40194e8:	003fc706 	br	4019408 <__alt_mem_epcs_flash_controller_0+0xfb018408>
 40194ec:	01000604 	movi	r4,24
 40194f0:	003f1806 	br	4019154 <__alt_mem_epcs_flash_controller_0+0xfb018154>
 40194f4:	00800604 	movi	r2,24
 40194f8:	003f3206 	br	40191c4 <__alt_mem_epcs_flash_controller_0+0xfb0181c4>
 40194fc:	01000604 	movi	r4,24
 4019500:	003ed906 	br	4019068 <__alt_mem_epcs_flash_controller_0+0xfb018068>
 4019504:	413fa52e 	bgeu	r8,r4,401939c <__alt_mem_epcs_flash_controller_0+0xfb01839c>
 4019508:	297fff84 	addi	r5,r5,-2
 401950c:	4551883a 	add	r8,r8,r21
 4019510:	003fa306 	br	40193a0 <__alt_mem_epcs_flash_controller_0+0xfb0183a0>
 4019514:	15ff8b2e 	bgeu	r2,r23,4019344 <__alt_mem_epcs_flash_controller_0+0xfb018344>
 4019518:	31bfff84 	addi	r6,r6,-2
 401951c:	1545883a 	add	r2,r2,r21
 4019520:	003f8906 	br	4019348 <__alt_mem_epcs_flash_controller_0+0xfb018348>
 4019524:	24c9883a 	add	r4,r4,r19
 4019528:	003eee06 	br	40190e4 <__alt_mem_epcs_flash_controller_0+0xfb0180e4>
 401952c:	8005883a 	mov	r2,r16
 4019530:	003f1706 	br	4019190 <__alt_mem_epcs_flash_controller_0+0xfb018190>
 4019534:	817fe736 	bltu	r16,r5,40194d4 <__alt_mem_epcs_flash_controller_0+0xfb0184d4>
 4019538:	280f883a 	mov	r7,r5
 401953c:	0009883a 	mov	r4,zero
 4019540:	003fb106 	br	4019408 <__alt_mem_epcs_flash_controller_0+0xfb018408>

04019544 <__eqdf2>:
 4019544:	2804d53a 	srli	r2,r5,20
 4019548:	3806d53a 	srli	r3,r7,20
 401954c:	02000434 	movhi	r8,16
 4019550:	423fffc4 	addi	r8,r8,-1
 4019554:	1081ffcc 	andi	r2,r2,2047
 4019558:	0281ffc4 	movi	r10,2047
 401955c:	2a12703a 	and	r9,r5,r8
 4019560:	18c1ffcc 	andi	r3,r3,2047
 4019564:	3a10703a 	and	r8,r7,r8
 4019568:	280ad7fa 	srli	r5,r5,31
 401956c:	380ed7fa 	srli	r7,r7,31
 4019570:	12801026 	beq	r2,r10,40195b4 <__eqdf2+0x70>
 4019574:	0281ffc4 	movi	r10,2047
 4019578:	1a800a26 	beq	r3,r10,40195a4 <__eqdf2+0x60>
 401957c:	10c00226 	beq	r2,r3,4019588 <__eqdf2+0x44>
 4019580:	00800044 	movi	r2,1
 4019584:	f800283a 	ret
 4019588:	4a3ffd1e 	bne	r9,r8,4019580 <__alt_mem_epcs_flash_controller_0+0xfb018580>
 401958c:	21bffc1e 	bne	r4,r6,4019580 <__alt_mem_epcs_flash_controller_0+0xfb018580>
 4019590:	29c00c26 	beq	r5,r7,40195c4 <__eqdf2+0x80>
 4019594:	103ffa1e 	bne	r2,zero,4019580 <__alt_mem_epcs_flash_controller_0+0xfb018580>
 4019598:	2244b03a 	or	r2,r4,r9
 401959c:	1004c03a 	cmpne	r2,r2,zero
 40195a0:	f800283a 	ret
 40195a4:	3214b03a 	or	r10,r6,r8
 40195a8:	503ff426 	beq	r10,zero,401957c <__alt_mem_epcs_flash_controller_0+0xfb01857c>
 40195ac:	00800044 	movi	r2,1
 40195b0:	f800283a 	ret
 40195b4:	2254b03a 	or	r10,r4,r9
 40195b8:	503fee26 	beq	r10,zero,4019574 <__alt_mem_epcs_flash_controller_0+0xfb018574>
 40195bc:	00800044 	movi	r2,1
 40195c0:	f800283a 	ret
 40195c4:	0005883a 	mov	r2,zero
 40195c8:	f800283a 	ret

040195cc <__gedf2>:
 40195cc:	2804d53a 	srli	r2,r5,20
 40195d0:	3806d53a 	srli	r3,r7,20
 40195d4:	02000434 	movhi	r8,16
 40195d8:	423fffc4 	addi	r8,r8,-1
 40195dc:	1081ffcc 	andi	r2,r2,2047
 40195e0:	0241ffc4 	movi	r9,2047
 40195e4:	2a14703a 	and	r10,r5,r8
 40195e8:	18c1ffcc 	andi	r3,r3,2047
 40195ec:	3a10703a 	and	r8,r7,r8
 40195f0:	280ad7fa 	srli	r5,r5,31
 40195f4:	380ed7fa 	srli	r7,r7,31
 40195f8:	12401d26 	beq	r2,r9,4019670 <__gedf2+0xa4>
 40195fc:	0241ffc4 	movi	r9,2047
 4019600:	1a401226 	beq	r3,r9,401964c <__gedf2+0x80>
 4019604:	1000081e 	bne	r2,zero,4019628 <__gedf2+0x5c>
 4019608:	2296b03a 	or	r11,r4,r10
 401960c:	5813003a 	cmpeq	r9,r11,zero
 4019610:	1800091e 	bne	r3,zero,4019638 <__gedf2+0x6c>
 4019614:	3218b03a 	or	r12,r6,r8
 4019618:	6000071e 	bne	r12,zero,4019638 <__gedf2+0x6c>
 401961c:	0005883a 	mov	r2,zero
 4019620:	5800101e 	bne	r11,zero,4019664 <__gedf2+0x98>
 4019624:	f800283a 	ret
 4019628:	18000c1e 	bne	r3,zero,401965c <__gedf2+0x90>
 401962c:	3212b03a 	or	r9,r6,r8
 4019630:	48000c26 	beq	r9,zero,4019664 <__gedf2+0x98>
 4019634:	0013883a 	mov	r9,zero
 4019638:	39c03fcc 	andi	r7,r7,255
 401963c:	48000826 	beq	r9,zero,4019660 <__gedf2+0x94>
 4019640:	38000926 	beq	r7,zero,4019668 <__gedf2+0x9c>
 4019644:	00800044 	movi	r2,1
 4019648:	f800283a 	ret
 401964c:	3212b03a 	or	r9,r6,r8
 4019650:	483fec26 	beq	r9,zero,4019604 <__alt_mem_epcs_flash_controller_0+0xfb018604>
 4019654:	00bfff84 	movi	r2,-2
 4019658:	f800283a 	ret
 401965c:	39c03fcc 	andi	r7,r7,255
 4019660:	29c00626 	beq	r5,r7,401967c <__gedf2+0xb0>
 4019664:	283ff726 	beq	r5,zero,4019644 <__alt_mem_epcs_flash_controller_0+0xfb018644>
 4019668:	00bfffc4 	movi	r2,-1
 401966c:	f800283a 	ret
 4019670:	2292b03a 	or	r9,r4,r10
 4019674:	483fe126 	beq	r9,zero,40195fc <__alt_mem_epcs_flash_controller_0+0xfb0185fc>
 4019678:	003ff606 	br	4019654 <__alt_mem_epcs_flash_controller_0+0xfb018654>
 401967c:	18bff916 	blt	r3,r2,4019664 <__alt_mem_epcs_flash_controller_0+0xfb018664>
 4019680:	10c00316 	blt	r2,r3,4019690 <__gedf2+0xc4>
 4019684:	42bff736 	bltu	r8,r10,4019664 <__alt_mem_epcs_flash_controller_0+0xfb018664>
 4019688:	52000326 	beq	r10,r8,4019698 <__gedf2+0xcc>
 401968c:	5200042e 	bgeu	r10,r8,40196a0 <__gedf2+0xd4>
 4019690:	283fec1e 	bne	r5,zero,4019644 <__alt_mem_epcs_flash_controller_0+0xfb018644>
 4019694:	003ff406 	br	4019668 <__alt_mem_epcs_flash_controller_0+0xfb018668>
 4019698:	313ff236 	bltu	r6,r4,4019664 <__alt_mem_epcs_flash_controller_0+0xfb018664>
 401969c:	21bffc36 	bltu	r4,r6,4019690 <__alt_mem_epcs_flash_controller_0+0xfb018690>
 40196a0:	0005883a 	mov	r2,zero
 40196a4:	f800283a 	ret

040196a8 <__floatunsidf>:
 40196a8:	defffe04 	addi	sp,sp,-8
 40196ac:	dc000015 	stw	r16,0(sp)
 40196b0:	dfc00115 	stw	ra,4(sp)
 40196b4:	2021883a 	mov	r16,r4
 40196b8:	20002226 	beq	r4,zero,4019744 <__floatunsidf+0x9c>
 40196bc:	400ba340 	call	400ba34 <__clzsi2>
 40196c0:	01010784 	movi	r4,1054
 40196c4:	2089c83a 	sub	r4,r4,r2
 40196c8:	01810cc4 	movi	r6,1075
 40196cc:	310dc83a 	sub	r6,r6,r4
 40196d0:	00c007c4 	movi	r3,31
 40196d4:	1980120e 	bge	r3,r6,4019720 <__floatunsidf+0x78>
 40196d8:	00c104c4 	movi	r3,1043
 40196dc:	1907c83a 	sub	r3,r3,r4
 40196e0:	80ca983a 	sll	r5,r16,r3
 40196e4:	00800434 	movhi	r2,16
 40196e8:	10bfffc4 	addi	r2,r2,-1
 40196ec:	2101ffcc 	andi	r4,r4,2047
 40196f0:	0021883a 	mov	r16,zero
 40196f4:	288a703a 	and	r5,r5,r2
 40196f8:	2008953a 	slli	r4,r4,20
 40196fc:	00c00434 	movhi	r3,16
 4019700:	18ffffc4 	addi	r3,r3,-1
 4019704:	28c6703a 	and	r3,r5,r3
 4019708:	8005883a 	mov	r2,r16
 401970c:	1906b03a 	or	r3,r3,r4
 4019710:	dfc00117 	ldw	ra,4(sp)
 4019714:	dc000017 	ldw	r16,0(sp)
 4019718:	dec00204 	addi	sp,sp,8
 401971c:	f800283a 	ret
 4019720:	00c002c4 	movi	r3,11
 4019724:	188bc83a 	sub	r5,r3,r2
 4019728:	814ad83a 	srl	r5,r16,r5
 401972c:	00c00434 	movhi	r3,16
 4019730:	18ffffc4 	addi	r3,r3,-1
 4019734:	81a0983a 	sll	r16,r16,r6
 4019738:	2101ffcc 	andi	r4,r4,2047
 401973c:	28ca703a 	and	r5,r5,r3
 4019740:	003fed06 	br	40196f8 <__alt_mem_epcs_flash_controller_0+0xfb0186f8>
 4019744:	0009883a 	mov	r4,zero
 4019748:	000b883a 	mov	r5,zero
 401974c:	003fea06 	br	40196f8 <__alt_mem_epcs_flash_controller_0+0xfb0186f8>

04019750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019750:	defffe04 	addi	sp,sp,-8
 4019754:	dfc00115 	stw	ra,4(sp)
 4019758:	df000015 	stw	fp,0(sp)
 401975c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019760:	d0a00e17 	ldw	r2,-32712(gp)
 4019764:	10000326 	beq	r2,zero,4019774 <alt_get_errno+0x24>
 4019768:	d0a00e17 	ldw	r2,-32712(gp)
 401976c:	103ee83a 	callr	r2
 4019770:	00000106 	br	4019778 <alt_get_errno+0x28>
 4019774:	d0a01904 	addi	r2,gp,-32668
}
 4019778:	e037883a 	mov	sp,fp
 401977c:	dfc00117 	ldw	ra,4(sp)
 4019780:	df000017 	ldw	fp,0(sp)
 4019784:	dec00204 	addi	sp,sp,8
 4019788:	f800283a 	ret

0401978c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401978c:	defffb04 	addi	sp,sp,-20
 4019790:	dfc00415 	stw	ra,16(sp)
 4019794:	df000315 	stw	fp,12(sp)
 4019798:	df000304 	addi	fp,sp,12
 401979c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40197a0:	e0bfff17 	ldw	r2,-4(fp)
 40197a4:	10000616 	blt	r2,zero,40197c0 <close+0x34>
 40197a8:	e0bfff17 	ldw	r2,-4(fp)
 40197ac:	10c00324 	muli	r3,r2,12
 40197b0:	00810234 	movhi	r2,1032
 40197b4:	10b99504 	addi	r2,r2,-6572
 40197b8:	1885883a 	add	r2,r3,r2
 40197bc:	00000106 	br	40197c4 <close+0x38>
 40197c0:	0005883a 	mov	r2,zero
 40197c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 40197c8:	e0bffd17 	ldw	r2,-12(fp)
 40197cc:	10001926 	beq	r2,zero,4019834 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40197d0:	e0bffd17 	ldw	r2,-12(fp)
 40197d4:	10800017 	ldw	r2,0(r2)
 40197d8:	10800417 	ldw	r2,16(r2)
 40197dc:	10000626 	beq	r2,zero,40197f8 <close+0x6c>
 40197e0:	e0bffd17 	ldw	r2,-12(fp)
 40197e4:	10800017 	ldw	r2,0(r2)
 40197e8:	10800417 	ldw	r2,16(r2)
 40197ec:	e13ffd17 	ldw	r4,-12(fp)
 40197f0:	103ee83a 	callr	r2
 40197f4:	00000106 	br	40197fc <close+0x70>
 40197f8:	0005883a 	mov	r2,zero
 40197fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4019800:	e13fff17 	ldw	r4,-4(fp)
 4019804:	401a0480 	call	401a048 <alt_release_fd>
    if (rval < 0)
 4019808:	e0bffe17 	ldw	r2,-8(fp)
 401980c:	1000070e 	bge	r2,zero,401982c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4019810:	40197500 	call	4019750 <alt_get_errno>
 4019814:	1007883a 	mov	r3,r2
 4019818:	e0bffe17 	ldw	r2,-8(fp)
 401981c:	0085c83a 	sub	r2,zero,r2
 4019820:	18800015 	stw	r2,0(r3)
      return -1;
 4019824:	00bfffc4 	movi	r2,-1
 4019828:	00000706 	br	4019848 <close+0xbc>
    }
    return 0;
 401982c:	0005883a 	mov	r2,zero
 4019830:	00000506 	br	4019848 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4019834:	40197500 	call	4019750 <alt_get_errno>
 4019838:	1007883a 	mov	r3,r2
 401983c:	00801444 	movi	r2,81
 4019840:	18800015 	stw	r2,0(r3)
    return -1;
 4019844:	00bfffc4 	movi	r2,-1
  }
}
 4019848:	e037883a 	mov	sp,fp
 401984c:	dfc00117 	ldw	ra,4(sp)
 4019850:	df000017 	ldw	fp,0(sp)
 4019854:	dec00204 	addi	sp,sp,8
 4019858:	f800283a 	ret

0401985c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401985c:	defffe04 	addi	sp,sp,-8
 4019860:	df000115 	stw	fp,4(sp)
 4019864:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4019868:	e03fff15 	stw	zero,-4(fp)
 401986c:	00000506 	br	4019884 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4019870:	e0bfff17 	ldw	r2,-4(fp)
 4019874:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4019878:	e0bfff17 	ldw	r2,-4(fp)
 401987c:	10800804 	addi	r2,r2,32
 4019880:	e0bfff15 	stw	r2,-4(fp)
 4019884:	e0bfff17 	ldw	r2,-4(fp)
 4019888:	10820030 	cmpltui	r2,r2,2048
 401988c:	103ff81e 	bne	r2,zero,4019870 <__alt_mem_epcs_flash_controller_0+0xfb018870>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4019890:	0001883a 	nop
 4019894:	e037883a 	mov	sp,fp
 4019898:	df000017 	ldw	fp,0(sp)
 401989c:	dec00104 	addi	sp,sp,4
 40198a0:	f800283a 	ret

040198a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40198a4:	defffc04 	addi	sp,sp,-16
 40198a8:	df000315 	stw	fp,12(sp)
 40198ac:	df000304 	addi	fp,sp,12
 40198b0:	e13ffd15 	stw	r4,-12(fp)
 40198b4:	e17ffe15 	stw	r5,-8(fp)
 40198b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40198bc:	e0bfff17 	ldw	r2,-4(fp)
}
 40198c0:	e037883a 	mov	sp,fp
 40198c4:	df000017 	ldw	fp,0(sp)
 40198c8:	dec00104 	addi	sp,sp,4
 40198cc:	f800283a 	ret

040198d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40198d0:	defffe04 	addi	sp,sp,-8
 40198d4:	dfc00115 	stw	ra,4(sp)
 40198d8:	df000015 	stw	fp,0(sp)
 40198dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40198e0:	d0a00e17 	ldw	r2,-32712(gp)
 40198e4:	10000326 	beq	r2,zero,40198f4 <alt_get_errno+0x24>
 40198e8:	d0a00e17 	ldw	r2,-32712(gp)
 40198ec:	103ee83a 	callr	r2
 40198f0:	00000106 	br	40198f8 <alt_get_errno+0x28>
 40198f4:	d0a01904 	addi	r2,gp,-32668
}
 40198f8:	e037883a 	mov	sp,fp
 40198fc:	dfc00117 	ldw	ra,4(sp)
 4019900:	df000017 	ldw	fp,0(sp)
 4019904:	dec00204 	addi	sp,sp,8
 4019908:	f800283a 	ret

0401990c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401990c:	defffb04 	addi	sp,sp,-20
 4019910:	dfc00415 	stw	ra,16(sp)
 4019914:	df000315 	stw	fp,12(sp)
 4019918:	df000304 	addi	fp,sp,12
 401991c:	e13ffe15 	stw	r4,-8(fp)
 4019920:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019924:	e0bffe17 	ldw	r2,-8(fp)
 4019928:	10000616 	blt	r2,zero,4019944 <fstat+0x38>
 401992c:	e0bffe17 	ldw	r2,-8(fp)
 4019930:	10c00324 	muli	r3,r2,12
 4019934:	00810234 	movhi	r2,1032
 4019938:	10b99504 	addi	r2,r2,-6572
 401993c:	1885883a 	add	r2,r3,r2
 4019940:	00000106 	br	4019948 <fstat+0x3c>
 4019944:	0005883a 	mov	r2,zero
 4019948:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401994c:	e0bffd17 	ldw	r2,-12(fp)
 4019950:	10001026 	beq	r2,zero,4019994 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4019954:	e0bffd17 	ldw	r2,-12(fp)
 4019958:	10800017 	ldw	r2,0(r2)
 401995c:	10800817 	ldw	r2,32(r2)
 4019960:	10000726 	beq	r2,zero,4019980 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4019964:	e0bffd17 	ldw	r2,-12(fp)
 4019968:	10800017 	ldw	r2,0(r2)
 401996c:	10800817 	ldw	r2,32(r2)
 4019970:	e17fff17 	ldw	r5,-4(fp)
 4019974:	e13ffd17 	ldw	r4,-12(fp)
 4019978:	103ee83a 	callr	r2
 401997c:	00000a06 	br	40199a8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4019980:	e0bfff17 	ldw	r2,-4(fp)
 4019984:	00c80004 	movi	r3,8192
 4019988:	10c00115 	stw	r3,4(r2)
      return 0;
 401998c:	0005883a 	mov	r2,zero
 4019990:	00000506 	br	40199a8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4019994:	40198d00 	call	40198d0 <alt_get_errno>
 4019998:	1007883a 	mov	r3,r2
 401999c:	00801444 	movi	r2,81
 40199a0:	18800015 	stw	r2,0(r3)
    return -1;
 40199a4:	00bfffc4 	movi	r2,-1
  }
}
 40199a8:	e037883a 	mov	sp,fp
 40199ac:	dfc00117 	ldw	ra,4(sp)
 40199b0:	df000017 	ldw	fp,0(sp)
 40199b4:	dec00204 	addi	sp,sp,8
 40199b8:	f800283a 	ret

040199bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40199bc:	defff904 	addi	sp,sp,-28
 40199c0:	dfc00615 	stw	ra,24(sp)
 40199c4:	df000515 	stw	fp,20(sp)
 40199c8:	df000504 	addi	fp,sp,20
 40199cc:	e13ffc15 	stw	r4,-16(fp)
 40199d0:	e17ffd15 	stw	r5,-12(fp)
 40199d4:	e1bffe15 	stw	r6,-8(fp)
 40199d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40199dc:	e0800217 	ldw	r2,8(fp)
 40199e0:	d8800015 	stw	r2,0(sp)
 40199e4:	e1ffff17 	ldw	r7,-4(fp)
 40199e8:	e1bffe17 	ldw	r6,-8(fp)
 40199ec:	e17ffd17 	ldw	r5,-12(fp)
 40199f0:	e13ffc17 	ldw	r4,-16(fp)
 40199f4:	4019b6c0 	call	4019b6c <alt_iic_isr_register>
}  
 40199f8:	e037883a 	mov	sp,fp
 40199fc:	dfc00117 	ldw	ra,4(sp)
 4019a00:	df000017 	ldw	fp,0(sp)
 4019a04:	dec00204 	addi	sp,sp,8
 4019a08:	f800283a 	ret

04019a0c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4019a0c:	defff904 	addi	sp,sp,-28
 4019a10:	df000615 	stw	fp,24(sp)
 4019a14:	df000604 	addi	fp,sp,24
 4019a18:	e13ffe15 	stw	r4,-8(fp)
 4019a1c:	e17fff15 	stw	r5,-4(fp)
 4019a20:	e0bfff17 	ldw	r2,-4(fp)
 4019a24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019a28:	0005303a 	rdctl	r2,status
 4019a2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019a30:	e0fffb17 	ldw	r3,-20(fp)
 4019a34:	00bfff84 	movi	r2,-2
 4019a38:	1884703a 	and	r2,r3,r2
 4019a3c:	1001703a 	wrctl	status,r2
  
  return context;
 4019a40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019a44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4019a48:	00c00044 	movi	r3,1
 4019a4c:	e0bffa17 	ldw	r2,-24(fp)
 4019a50:	1884983a 	sll	r2,r3,r2
 4019a54:	1007883a 	mov	r3,r2
 4019a58:	d0a01d17 	ldw	r2,-32652(gp)
 4019a5c:	1884b03a 	or	r2,r3,r2
 4019a60:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019a64:	d0a01d17 	ldw	r2,-32652(gp)
 4019a68:	100170fa 	wrctl	ienable,r2
 4019a6c:	e0bffc17 	ldw	r2,-16(fp)
 4019a70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019a74:	e0bffd17 	ldw	r2,-12(fp)
 4019a78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019a7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4019a80:	0001883a 	nop
}
 4019a84:	e037883a 	mov	sp,fp
 4019a88:	df000017 	ldw	fp,0(sp)
 4019a8c:	dec00104 	addi	sp,sp,4
 4019a90:	f800283a 	ret

04019a94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4019a94:	defff904 	addi	sp,sp,-28
 4019a98:	df000615 	stw	fp,24(sp)
 4019a9c:	df000604 	addi	fp,sp,24
 4019aa0:	e13ffe15 	stw	r4,-8(fp)
 4019aa4:	e17fff15 	stw	r5,-4(fp)
 4019aa8:	e0bfff17 	ldw	r2,-4(fp)
 4019aac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019ab0:	0005303a 	rdctl	r2,status
 4019ab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019ab8:	e0fffb17 	ldw	r3,-20(fp)
 4019abc:	00bfff84 	movi	r2,-2
 4019ac0:	1884703a 	and	r2,r3,r2
 4019ac4:	1001703a 	wrctl	status,r2
  
  return context;
 4019ac8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4019acc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4019ad0:	00c00044 	movi	r3,1
 4019ad4:	e0bffa17 	ldw	r2,-24(fp)
 4019ad8:	1884983a 	sll	r2,r3,r2
 4019adc:	0084303a 	nor	r2,zero,r2
 4019ae0:	1007883a 	mov	r3,r2
 4019ae4:	d0a01d17 	ldw	r2,-32652(gp)
 4019ae8:	1884703a 	and	r2,r3,r2
 4019aec:	d0a01d15 	stw	r2,-32652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4019af0:	d0a01d17 	ldw	r2,-32652(gp)
 4019af4:	100170fa 	wrctl	ienable,r2
 4019af8:	e0bffc17 	ldw	r2,-16(fp)
 4019afc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019b00:	e0bffd17 	ldw	r2,-12(fp)
 4019b04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4019b08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4019b0c:	0001883a 	nop
}
 4019b10:	e037883a 	mov	sp,fp
 4019b14:	df000017 	ldw	fp,0(sp)
 4019b18:	dec00104 	addi	sp,sp,4
 4019b1c:	f800283a 	ret

04019b20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4019b20:	defffc04 	addi	sp,sp,-16
 4019b24:	df000315 	stw	fp,12(sp)
 4019b28:	df000304 	addi	fp,sp,12
 4019b2c:	e13ffe15 	stw	r4,-8(fp)
 4019b30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4019b34:	000530fa 	rdctl	r2,ienable
 4019b38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4019b3c:	00c00044 	movi	r3,1
 4019b40:	e0bfff17 	ldw	r2,-4(fp)
 4019b44:	1884983a 	sll	r2,r3,r2
 4019b48:	1007883a 	mov	r3,r2
 4019b4c:	e0bffd17 	ldw	r2,-12(fp)
 4019b50:	1884703a 	and	r2,r3,r2
 4019b54:	1004c03a 	cmpne	r2,r2,zero
 4019b58:	10803fcc 	andi	r2,r2,255
}
 4019b5c:	e037883a 	mov	sp,fp
 4019b60:	df000017 	ldw	fp,0(sp)
 4019b64:	dec00104 	addi	sp,sp,4
 4019b68:	f800283a 	ret

04019b6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4019b6c:	defff504 	addi	sp,sp,-44
 4019b70:	dfc00a15 	stw	ra,40(sp)
 4019b74:	df000915 	stw	fp,36(sp)
 4019b78:	df000904 	addi	fp,sp,36
 4019b7c:	e13ffc15 	stw	r4,-16(fp)
 4019b80:	e17ffd15 	stw	r5,-12(fp)
 4019b84:	e1bffe15 	stw	r6,-8(fp)
 4019b88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4019b8c:	00bffa84 	movi	r2,-22
 4019b90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4019b94:	e0bffd17 	ldw	r2,-12(fp)
 4019b98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4019b9c:	e0bff817 	ldw	r2,-32(fp)
 4019ba0:	10800808 	cmpgei	r2,r2,32
 4019ba4:	1000271e 	bne	r2,zero,4019c44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4019ba8:	0005303a 	rdctl	r2,status
 4019bac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4019bb0:	e0fffb17 	ldw	r3,-20(fp)
 4019bb4:	00bfff84 	movi	r2,-2
 4019bb8:	1884703a 	and	r2,r3,r2
 4019bbc:	1001703a 	wrctl	status,r2
  
  return context;
 4019bc0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4019bc4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4019bc8:	00810234 	movhi	r2,1032
 4019bcc:	10be6e04 	addi	r2,r2,-1608
 4019bd0:	e0fff817 	ldw	r3,-32(fp)
 4019bd4:	180690fa 	slli	r3,r3,3
 4019bd8:	10c5883a 	add	r2,r2,r3
 4019bdc:	e0fffe17 	ldw	r3,-8(fp)
 4019be0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4019be4:	00810234 	movhi	r2,1032
 4019be8:	10be6e04 	addi	r2,r2,-1608
 4019bec:	e0fff817 	ldw	r3,-32(fp)
 4019bf0:	180690fa 	slli	r3,r3,3
 4019bf4:	10c5883a 	add	r2,r2,r3
 4019bf8:	10800104 	addi	r2,r2,4
 4019bfc:	e0ffff17 	ldw	r3,-4(fp)
 4019c00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4019c04:	e0bffe17 	ldw	r2,-8(fp)
 4019c08:	10000526 	beq	r2,zero,4019c20 <alt_iic_isr_register+0xb4>
 4019c0c:	e0bff817 	ldw	r2,-32(fp)
 4019c10:	100b883a 	mov	r5,r2
 4019c14:	e13ffc17 	ldw	r4,-16(fp)
 4019c18:	4019a0c0 	call	4019a0c <alt_ic_irq_enable>
 4019c1c:	00000406 	br	4019c30 <alt_iic_isr_register+0xc4>
 4019c20:	e0bff817 	ldw	r2,-32(fp)
 4019c24:	100b883a 	mov	r5,r2
 4019c28:	e13ffc17 	ldw	r4,-16(fp)
 4019c2c:	4019a940 	call	4019a94 <alt_ic_irq_disable>
 4019c30:	e0bff715 	stw	r2,-36(fp)
 4019c34:	e0bffa17 	ldw	r2,-24(fp)
 4019c38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4019c3c:	e0bff917 	ldw	r2,-28(fp)
 4019c40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4019c44:	e0bff717 	ldw	r2,-36(fp)
}
 4019c48:	e037883a 	mov	sp,fp
 4019c4c:	dfc00117 	ldw	ra,4(sp)
 4019c50:	df000017 	ldw	fp,0(sp)
 4019c54:	dec00204 	addi	sp,sp,8
 4019c58:	f800283a 	ret

04019c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019c5c:	defffe04 	addi	sp,sp,-8
 4019c60:	dfc00115 	stw	ra,4(sp)
 4019c64:	df000015 	stw	fp,0(sp)
 4019c68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019c6c:	d0a00e17 	ldw	r2,-32712(gp)
 4019c70:	10000326 	beq	r2,zero,4019c80 <alt_get_errno+0x24>
 4019c74:	d0a00e17 	ldw	r2,-32712(gp)
 4019c78:	103ee83a 	callr	r2
 4019c7c:	00000106 	br	4019c84 <alt_get_errno+0x28>
 4019c80:	d0a01904 	addi	r2,gp,-32668
}
 4019c84:	e037883a 	mov	sp,fp
 4019c88:	dfc00117 	ldw	ra,4(sp)
 4019c8c:	df000017 	ldw	fp,0(sp)
 4019c90:	dec00204 	addi	sp,sp,8
 4019c94:	f800283a 	ret

04019c98 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4019c98:	deffed04 	addi	sp,sp,-76
 4019c9c:	dfc01215 	stw	ra,72(sp)
 4019ca0:	df001115 	stw	fp,68(sp)
 4019ca4:	df001104 	addi	fp,sp,68
 4019ca8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019cac:	e0bfff17 	ldw	r2,-4(fp)
 4019cb0:	10000616 	blt	r2,zero,4019ccc <isatty+0x34>
 4019cb4:	e0bfff17 	ldw	r2,-4(fp)
 4019cb8:	10c00324 	muli	r3,r2,12
 4019cbc:	00810234 	movhi	r2,1032
 4019cc0:	10b99504 	addi	r2,r2,-6572
 4019cc4:	1885883a 	add	r2,r3,r2
 4019cc8:	00000106 	br	4019cd0 <isatty+0x38>
 4019ccc:	0005883a 	mov	r2,zero
 4019cd0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4019cd4:	e0bfef17 	ldw	r2,-68(fp)
 4019cd8:	10000e26 	beq	r2,zero,4019d14 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4019cdc:	e0bfef17 	ldw	r2,-68(fp)
 4019ce0:	10800017 	ldw	r2,0(r2)
 4019ce4:	10800817 	ldw	r2,32(r2)
 4019ce8:	1000021e 	bne	r2,zero,4019cf4 <isatty+0x5c>
    {
      return 1;
 4019cec:	00800044 	movi	r2,1
 4019cf0:	00000d06 	br	4019d28 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4019cf4:	e0bff004 	addi	r2,fp,-64
 4019cf8:	100b883a 	mov	r5,r2
 4019cfc:	e13fff17 	ldw	r4,-4(fp)
 4019d00:	401990c0 	call	401990c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4019d04:	e0bff117 	ldw	r2,-60(fp)
 4019d08:	10880020 	cmpeqi	r2,r2,8192
 4019d0c:	10803fcc 	andi	r2,r2,255
 4019d10:	00000506 	br	4019d28 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4019d14:	4019c5c0 	call	4019c5c <alt_get_errno>
 4019d18:	1007883a 	mov	r3,r2
 4019d1c:	00801444 	movi	r2,81
 4019d20:	18800015 	stw	r2,0(r3)
    return 0;
 4019d24:	0005883a 	mov	r2,zero
  }
}
 4019d28:	e037883a 	mov	sp,fp
 4019d2c:	dfc00117 	ldw	ra,4(sp)
 4019d30:	df000017 	ldw	fp,0(sp)
 4019d34:	dec00204 	addi	sp,sp,8
 4019d38:	f800283a 	ret

04019d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019d3c:	defffe04 	addi	sp,sp,-8
 4019d40:	dfc00115 	stw	ra,4(sp)
 4019d44:	df000015 	stw	fp,0(sp)
 4019d48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019d4c:	d0a00e17 	ldw	r2,-32712(gp)
 4019d50:	10000326 	beq	r2,zero,4019d60 <alt_get_errno+0x24>
 4019d54:	d0a00e17 	ldw	r2,-32712(gp)
 4019d58:	103ee83a 	callr	r2
 4019d5c:	00000106 	br	4019d64 <alt_get_errno+0x28>
 4019d60:	d0a01904 	addi	r2,gp,-32668
}
 4019d64:	e037883a 	mov	sp,fp
 4019d68:	dfc00117 	ldw	ra,4(sp)
 4019d6c:	df000017 	ldw	fp,0(sp)
 4019d70:	dec00204 	addi	sp,sp,8
 4019d74:	f800283a 	ret

04019d78 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4019d78:	defff904 	addi	sp,sp,-28
 4019d7c:	dfc00615 	stw	ra,24(sp)
 4019d80:	df000515 	stw	fp,20(sp)
 4019d84:	df000504 	addi	fp,sp,20
 4019d88:	e13ffd15 	stw	r4,-12(fp)
 4019d8c:	e17ffe15 	stw	r5,-8(fp)
 4019d90:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4019d94:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019d98:	e0bffd17 	ldw	r2,-12(fp)
 4019d9c:	10000616 	blt	r2,zero,4019db8 <lseek+0x40>
 4019da0:	e0bffd17 	ldw	r2,-12(fp)
 4019da4:	10c00324 	muli	r3,r2,12
 4019da8:	00810234 	movhi	r2,1032
 4019dac:	10b99504 	addi	r2,r2,-6572
 4019db0:	1885883a 	add	r2,r3,r2
 4019db4:	00000106 	br	4019dbc <lseek+0x44>
 4019db8:	0005883a 	mov	r2,zero
 4019dbc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4019dc0:	e0bffc17 	ldw	r2,-16(fp)
 4019dc4:	10001026 	beq	r2,zero,4019e08 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4019dc8:	e0bffc17 	ldw	r2,-16(fp)
 4019dcc:	10800017 	ldw	r2,0(r2)
 4019dd0:	10800717 	ldw	r2,28(r2)
 4019dd4:	10000926 	beq	r2,zero,4019dfc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4019dd8:	e0bffc17 	ldw	r2,-16(fp)
 4019ddc:	10800017 	ldw	r2,0(r2)
 4019de0:	10800717 	ldw	r2,28(r2)
 4019de4:	e1bfff17 	ldw	r6,-4(fp)
 4019de8:	e17ffe17 	ldw	r5,-8(fp)
 4019dec:	e13ffc17 	ldw	r4,-16(fp)
 4019df0:	103ee83a 	callr	r2
 4019df4:	e0bffb15 	stw	r2,-20(fp)
 4019df8:	00000506 	br	4019e10 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4019dfc:	00bfde84 	movi	r2,-134
 4019e00:	e0bffb15 	stw	r2,-20(fp)
 4019e04:	00000206 	br	4019e10 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4019e08:	00bfebc4 	movi	r2,-81
 4019e0c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4019e10:	e0bffb17 	ldw	r2,-20(fp)
 4019e14:	1000070e 	bge	r2,zero,4019e34 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4019e18:	4019d3c0 	call	4019d3c <alt_get_errno>
 4019e1c:	1007883a 	mov	r3,r2
 4019e20:	e0bffb17 	ldw	r2,-20(fp)
 4019e24:	0085c83a 	sub	r2,zero,r2
 4019e28:	18800015 	stw	r2,0(r3)
    rc = -1;
 4019e2c:	00bfffc4 	movi	r2,-1
 4019e30:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4019e34:	e0bffb17 	ldw	r2,-20(fp)
}
 4019e38:	e037883a 	mov	sp,fp
 4019e3c:	dfc00117 	ldw	ra,4(sp)
 4019e40:	df000017 	ldw	fp,0(sp)
 4019e44:	dec00204 	addi	sp,sp,8
 4019e48:	f800283a 	ret

04019e4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4019e4c:	defffd04 	addi	sp,sp,-12
 4019e50:	dfc00215 	stw	ra,8(sp)
 4019e54:	df000115 	stw	fp,4(sp)
 4019e58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4019e5c:	0009883a 	mov	r4,zero
 4019e60:	401a4980 	call	401a498 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4019e64:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4019e68:	401a4d00 	call	401a4d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4019e6c:	01810234 	movhi	r6,1032
 4019e70:	31b06304 	addi	r6,r6,-15988
 4019e74:	01410234 	movhi	r5,1032
 4019e78:	29706304 	addi	r5,r5,-15988
 4019e7c:	01010234 	movhi	r4,1032
 4019e80:	21306304 	addi	r4,r4,-15988
 4019e84:	401c8100 	call	401c810 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4019e88:	401c5340 	call	401c534 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4019e8c:	010100b4 	movhi	r4,1026
 4019e90:	21316504 	addi	r4,r4,-14956
 4019e94:	401cf3c0 	call	401cf3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4019e98:	d0a01e17 	ldw	r2,-32648(gp)
 4019e9c:	d0e01f17 	ldw	r3,-32644(gp)
 4019ea0:	d1202017 	ldw	r4,-32640(gp)
 4019ea4:	200d883a 	mov	r6,r4
 4019ea8:	180b883a 	mov	r5,r3
 4019eac:	1009883a 	mov	r4,r2
 4019eb0:	4005f5c0 	call	4005f5c <main>
 4019eb4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4019eb8:	01000044 	movi	r4,1
 4019ebc:	401978c0 	call	401978c <close>
  exit (result);
 4019ec0:	e13fff17 	ldw	r4,-4(fp)
 4019ec4:	401cf500 	call	401cf50 <exit>

04019ec8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4019ec8:	defffe04 	addi	sp,sp,-8
 4019ecc:	df000115 	stw	fp,4(sp)
 4019ed0:	df000104 	addi	fp,sp,4
 4019ed4:	e13fff15 	stw	r4,-4(fp)
}
 4019ed8:	0001883a 	nop
 4019edc:	e037883a 	mov	sp,fp
 4019ee0:	df000017 	ldw	fp,0(sp)
 4019ee4:	dec00104 	addi	sp,sp,4
 4019ee8:	f800283a 	ret

04019eec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4019eec:	defffe04 	addi	sp,sp,-8
 4019ef0:	df000115 	stw	fp,4(sp)
 4019ef4:	df000104 	addi	fp,sp,4
 4019ef8:	e13fff15 	stw	r4,-4(fp)
}
 4019efc:	0001883a 	nop
 4019f00:	e037883a 	mov	sp,fp
 4019f04:	df000017 	ldw	fp,0(sp)
 4019f08:	dec00104 	addi	sp,sp,4
 4019f0c:	f800283a 	ret

04019f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4019f10:	defffe04 	addi	sp,sp,-8
 4019f14:	dfc00115 	stw	ra,4(sp)
 4019f18:	df000015 	stw	fp,0(sp)
 4019f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4019f20:	d0a00e17 	ldw	r2,-32712(gp)
 4019f24:	10000326 	beq	r2,zero,4019f34 <alt_get_errno+0x24>
 4019f28:	d0a00e17 	ldw	r2,-32712(gp)
 4019f2c:	103ee83a 	callr	r2
 4019f30:	00000106 	br	4019f38 <alt_get_errno+0x28>
 4019f34:	d0a01904 	addi	r2,gp,-32668
}
 4019f38:	e037883a 	mov	sp,fp
 4019f3c:	dfc00117 	ldw	ra,4(sp)
 4019f40:	df000017 	ldw	fp,0(sp)
 4019f44:	dec00204 	addi	sp,sp,8
 4019f48:	f800283a 	ret

04019f4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4019f4c:	defff904 	addi	sp,sp,-28
 4019f50:	dfc00615 	stw	ra,24(sp)
 4019f54:	df000515 	stw	fp,20(sp)
 4019f58:	df000504 	addi	fp,sp,20
 4019f5c:	e13ffd15 	stw	r4,-12(fp)
 4019f60:	e17ffe15 	stw	r5,-8(fp)
 4019f64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4019f68:	e0bffd17 	ldw	r2,-12(fp)
 4019f6c:	10000616 	blt	r2,zero,4019f88 <read+0x3c>
 4019f70:	e0bffd17 	ldw	r2,-12(fp)
 4019f74:	10c00324 	muli	r3,r2,12
 4019f78:	00810234 	movhi	r2,1032
 4019f7c:	10b99504 	addi	r2,r2,-6572
 4019f80:	1885883a 	add	r2,r3,r2
 4019f84:	00000106 	br	4019f8c <read+0x40>
 4019f88:	0005883a 	mov	r2,zero
 4019f8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4019f90:	e0bffb17 	ldw	r2,-20(fp)
 4019f94:	10002226 	beq	r2,zero,401a020 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4019f98:	e0bffb17 	ldw	r2,-20(fp)
 4019f9c:	10800217 	ldw	r2,8(r2)
 4019fa0:	108000cc 	andi	r2,r2,3
 4019fa4:	10800060 	cmpeqi	r2,r2,1
 4019fa8:	1000181e 	bne	r2,zero,401a00c <read+0xc0>
        (fd->dev->read))
 4019fac:	e0bffb17 	ldw	r2,-20(fp)
 4019fb0:	10800017 	ldw	r2,0(r2)
 4019fb4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4019fb8:	10001426 	beq	r2,zero,401a00c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4019fbc:	e0bffb17 	ldw	r2,-20(fp)
 4019fc0:	10800017 	ldw	r2,0(r2)
 4019fc4:	10800517 	ldw	r2,20(r2)
 4019fc8:	e0ffff17 	ldw	r3,-4(fp)
 4019fcc:	180d883a 	mov	r6,r3
 4019fd0:	e17ffe17 	ldw	r5,-8(fp)
 4019fd4:	e13ffb17 	ldw	r4,-20(fp)
 4019fd8:	103ee83a 	callr	r2
 4019fdc:	e0bffc15 	stw	r2,-16(fp)
 4019fe0:	e0bffc17 	ldw	r2,-16(fp)
 4019fe4:	1000070e 	bge	r2,zero,401a004 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4019fe8:	4019f100 	call	4019f10 <alt_get_errno>
 4019fec:	1007883a 	mov	r3,r2
 4019ff0:	e0bffc17 	ldw	r2,-16(fp)
 4019ff4:	0085c83a 	sub	r2,zero,r2
 4019ff8:	18800015 	stw	r2,0(r3)
          return -1;
 4019ffc:	00bfffc4 	movi	r2,-1
 401a000:	00000c06 	br	401a034 <read+0xe8>
        }
        return rval;
 401a004:	e0bffc17 	ldw	r2,-16(fp)
 401a008:	00000a06 	br	401a034 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401a00c:	4019f100 	call	4019f10 <alt_get_errno>
 401a010:	1007883a 	mov	r3,r2
 401a014:	00800344 	movi	r2,13
 401a018:	18800015 	stw	r2,0(r3)
 401a01c:	00000406 	br	401a030 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401a020:	4019f100 	call	4019f10 <alt_get_errno>
 401a024:	1007883a 	mov	r3,r2
 401a028:	00801444 	movi	r2,81
 401a02c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401a030:	00bfffc4 	movi	r2,-1
}
 401a034:	e037883a 	mov	sp,fp
 401a038:	dfc00117 	ldw	ra,4(sp)
 401a03c:	df000017 	ldw	fp,0(sp)
 401a040:	dec00204 	addi	sp,sp,8
 401a044:	f800283a 	ret

0401a048 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401a048:	defffe04 	addi	sp,sp,-8
 401a04c:	df000115 	stw	fp,4(sp)
 401a050:	df000104 	addi	fp,sp,4
 401a054:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 401a058:	e0bfff17 	ldw	r2,-4(fp)
 401a05c:	108000d0 	cmplti	r2,r2,3
 401a060:	10000d1e 	bne	r2,zero,401a098 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 401a064:	00810234 	movhi	r2,1032
 401a068:	10b99504 	addi	r2,r2,-6572
 401a06c:	e0ffff17 	ldw	r3,-4(fp)
 401a070:	18c00324 	muli	r3,r3,12
 401a074:	10c5883a 	add	r2,r2,r3
 401a078:	10800204 	addi	r2,r2,8
 401a07c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401a080:	00810234 	movhi	r2,1032
 401a084:	10b99504 	addi	r2,r2,-6572
 401a088:	e0ffff17 	ldw	r3,-4(fp)
 401a08c:	18c00324 	muli	r3,r3,12
 401a090:	10c5883a 	add	r2,r2,r3
 401a094:	10000015 	stw	zero,0(r2)
  }
}
 401a098:	0001883a 	nop
 401a09c:	e037883a 	mov	sp,fp
 401a0a0:	df000017 	ldw	fp,0(sp)
 401a0a4:	dec00104 	addi	sp,sp,4
 401a0a8:	f800283a 	ret

0401a0ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401a0ac:	defff904 	addi	sp,sp,-28
 401a0b0:	df000615 	stw	fp,24(sp)
 401a0b4:	df000604 	addi	fp,sp,24
 401a0b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a0bc:	0005303a 	rdctl	r2,status
 401a0c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a0c4:	e0fffe17 	ldw	r3,-8(fp)
 401a0c8:	00bfff84 	movi	r2,-2
 401a0cc:	1884703a 	and	r2,r3,r2
 401a0d0:	1001703a 	wrctl	status,r2
  
  return context;
 401a0d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401a0d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401a0dc:	d0a01017 	ldw	r2,-32704(gp)
 401a0e0:	10c000c4 	addi	r3,r2,3
 401a0e4:	00bfff04 	movi	r2,-4
 401a0e8:	1884703a 	and	r2,r3,r2
 401a0ec:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401a0f0:	d0e01017 	ldw	r3,-32704(gp)
 401a0f4:	e0bfff17 	ldw	r2,-4(fp)
 401a0f8:	1887883a 	add	r3,r3,r2
 401a0fc:	00820034 	movhi	r2,2048
 401a100:	10800004 	addi	r2,r2,0
 401a104:	10c0062e 	bgeu	r2,r3,401a120 <sbrk+0x74>
 401a108:	e0bffb17 	ldw	r2,-20(fp)
 401a10c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a110:	e0bffa17 	ldw	r2,-24(fp)
 401a114:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401a118:	00bfffc4 	movi	r2,-1
 401a11c:	00000b06 	br	401a14c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401a120:	d0a01017 	ldw	r2,-32704(gp)
 401a124:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401a128:	d0e01017 	ldw	r3,-32704(gp)
 401a12c:	e0bfff17 	ldw	r2,-4(fp)
 401a130:	1885883a 	add	r2,r3,r2
 401a134:	d0a01015 	stw	r2,-32704(gp)
 401a138:	e0bffb17 	ldw	r2,-20(fp)
 401a13c:	e0bffc15 	stw	r2,-16(fp)
 401a140:	e0bffc17 	ldw	r2,-16(fp)
 401a144:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401a148:	e0bffd17 	ldw	r2,-12(fp)
} 
 401a14c:	e037883a 	mov	sp,fp
 401a150:	df000017 	ldw	fp,0(sp)
 401a154:	dec00104 	addi	sp,sp,4
 401a158:	f800283a 	ret

0401a15c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401a15c:	defffa04 	addi	sp,sp,-24
 401a160:	df000515 	stw	fp,20(sp)
 401a164:	df000504 	addi	fp,sp,20
 401a168:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a16c:	0005303a 	rdctl	r2,status
 401a170:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a174:	e0fffc17 	ldw	r3,-16(fp)
 401a178:	00bfff84 	movi	r2,-2
 401a17c:	1884703a 	and	r2,r3,r2
 401a180:	1001703a 	wrctl	status,r2
  
  return context;
 401a184:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401a188:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401a18c:	e0bfff17 	ldw	r2,-4(fp)
 401a190:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401a194:	e0bffd17 	ldw	r2,-12(fp)
 401a198:	10800017 	ldw	r2,0(r2)
 401a19c:	e0fffd17 	ldw	r3,-12(fp)
 401a1a0:	18c00117 	ldw	r3,4(r3)
 401a1a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401a1a8:	e0bffd17 	ldw	r2,-12(fp)
 401a1ac:	10800117 	ldw	r2,4(r2)
 401a1b0:	e0fffd17 	ldw	r3,-12(fp)
 401a1b4:	18c00017 	ldw	r3,0(r3)
 401a1b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401a1bc:	e0bffd17 	ldw	r2,-12(fp)
 401a1c0:	e0fffd17 	ldw	r3,-12(fp)
 401a1c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401a1c8:	e0bffd17 	ldw	r2,-12(fp)
 401a1cc:	e0fffd17 	ldw	r3,-12(fp)
 401a1d0:	10c00015 	stw	r3,0(r2)
 401a1d4:	e0bffb17 	ldw	r2,-20(fp)
 401a1d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a1dc:	e0bffe17 	ldw	r2,-8(fp)
 401a1e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401a1e4:	0001883a 	nop
 401a1e8:	e037883a 	mov	sp,fp
 401a1ec:	df000017 	ldw	fp,0(sp)
 401a1f0:	dec00104 	addi	sp,sp,4
 401a1f4:	f800283a 	ret

0401a1f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401a1f8:	defffb04 	addi	sp,sp,-20
 401a1fc:	dfc00415 	stw	ra,16(sp)
 401a200:	df000315 	stw	fp,12(sp)
 401a204:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401a208:	d0a01117 	ldw	r2,-32700(gp)
 401a20c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401a210:	d0a02217 	ldw	r2,-32632(gp)
 401a214:	10800044 	addi	r2,r2,1
 401a218:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401a21c:	00002e06 	br	401a2d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401a220:	e0bffd17 	ldw	r2,-12(fp)
 401a224:	10800017 	ldw	r2,0(r2)
 401a228:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401a22c:	e0bffd17 	ldw	r2,-12(fp)
 401a230:	10800403 	ldbu	r2,16(r2)
 401a234:	10803fcc 	andi	r2,r2,255
 401a238:	10000426 	beq	r2,zero,401a24c <alt_tick+0x54>
 401a23c:	d0a02217 	ldw	r2,-32632(gp)
 401a240:	1000021e 	bne	r2,zero,401a24c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401a244:	e0bffd17 	ldw	r2,-12(fp)
 401a248:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401a24c:	e0bffd17 	ldw	r2,-12(fp)
 401a250:	10800217 	ldw	r2,8(r2)
 401a254:	d0e02217 	ldw	r3,-32632(gp)
 401a258:	18801d36 	bltu	r3,r2,401a2d0 <alt_tick+0xd8>
 401a25c:	e0bffd17 	ldw	r2,-12(fp)
 401a260:	10800403 	ldbu	r2,16(r2)
 401a264:	10803fcc 	andi	r2,r2,255
 401a268:	1000191e 	bne	r2,zero,401a2d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401a26c:	e0bffd17 	ldw	r2,-12(fp)
 401a270:	10800317 	ldw	r2,12(r2)
 401a274:	e0fffd17 	ldw	r3,-12(fp)
 401a278:	18c00517 	ldw	r3,20(r3)
 401a27c:	1809883a 	mov	r4,r3
 401a280:	103ee83a 	callr	r2
 401a284:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401a288:	e0bfff17 	ldw	r2,-4(fp)
 401a28c:	1000031e 	bne	r2,zero,401a29c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401a290:	e13ffd17 	ldw	r4,-12(fp)
 401a294:	401a15c0 	call	401a15c <alt_alarm_stop>
 401a298:	00000d06 	br	401a2d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401a29c:	e0bffd17 	ldw	r2,-12(fp)
 401a2a0:	10c00217 	ldw	r3,8(r2)
 401a2a4:	e0bfff17 	ldw	r2,-4(fp)
 401a2a8:	1887883a 	add	r3,r3,r2
 401a2ac:	e0bffd17 	ldw	r2,-12(fp)
 401a2b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401a2b4:	e0bffd17 	ldw	r2,-12(fp)
 401a2b8:	10c00217 	ldw	r3,8(r2)
 401a2bc:	d0a02217 	ldw	r2,-32632(gp)
 401a2c0:	1880032e 	bgeu	r3,r2,401a2d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401a2c4:	e0bffd17 	ldw	r2,-12(fp)
 401a2c8:	00c00044 	movi	r3,1
 401a2cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401a2d0:	e0bffe17 	ldw	r2,-8(fp)
 401a2d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401a2d8:	e0fffd17 	ldw	r3,-12(fp)
 401a2dc:	d0a01104 	addi	r2,gp,-32700
 401a2e0:	18bfcf1e 	bne	r3,r2,401a220 <__alt_mem_epcs_flash_controller_0+0xfb019220>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401a2e4:	0001883a 	nop
}
 401a2e8:	0001883a 	nop
 401a2ec:	e037883a 	mov	sp,fp
 401a2f0:	dfc00117 	ldw	ra,4(sp)
 401a2f4:	df000017 	ldw	fp,0(sp)
 401a2f8:	dec00204 	addi	sp,sp,8
 401a2fc:	f800283a 	ret

0401a300 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401a300:	defffd04 	addi	sp,sp,-12
 401a304:	dfc00215 	stw	ra,8(sp)
 401a308:	df000115 	stw	fp,4(sp)
 401a30c:	df000104 	addi	fp,sp,4
 401a310:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401a314:	e13fff17 	ldw	r4,-4(fp)
 401a318:	401c2fc0 	call	401c2fc <alt_busy_sleep>
}
 401a31c:	e037883a 	mov	sp,fp
 401a320:	dfc00117 	ldw	ra,4(sp)
 401a324:	df000017 	ldw	fp,0(sp)
 401a328:	dec00204 	addi	sp,sp,8
 401a32c:	f800283a 	ret

0401a330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401a330:	defffe04 	addi	sp,sp,-8
 401a334:	dfc00115 	stw	ra,4(sp)
 401a338:	df000015 	stw	fp,0(sp)
 401a33c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401a340:	d0a00e17 	ldw	r2,-32712(gp)
 401a344:	10000326 	beq	r2,zero,401a354 <alt_get_errno+0x24>
 401a348:	d0a00e17 	ldw	r2,-32712(gp)
 401a34c:	103ee83a 	callr	r2
 401a350:	00000106 	br	401a358 <alt_get_errno+0x28>
 401a354:	d0a01904 	addi	r2,gp,-32668
}
 401a358:	e037883a 	mov	sp,fp
 401a35c:	dfc00117 	ldw	ra,4(sp)
 401a360:	df000017 	ldw	fp,0(sp)
 401a364:	dec00204 	addi	sp,sp,8
 401a368:	f800283a 	ret

0401a36c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401a36c:	defff904 	addi	sp,sp,-28
 401a370:	dfc00615 	stw	ra,24(sp)
 401a374:	df000515 	stw	fp,20(sp)
 401a378:	df000504 	addi	fp,sp,20
 401a37c:	e13ffd15 	stw	r4,-12(fp)
 401a380:	e17ffe15 	stw	r5,-8(fp)
 401a384:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401a388:	e0bffd17 	ldw	r2,-12(fp)
 401a38c:	10000616 	blt	r2,zero,401a3a8 <write+0x3c>
 401a390:	e0bffd17 	ldw	r2,-12(fp)
 401a394:	10c00324 	muli	r3,r2,12
 401a398:	00810234 	movhi	r2,1032
 401a39c:	10b99504 	addi	r2,r2,-6572
 401a3a0:	1885883a 	add	r2,r3,r2
 401a3a4:	00000106 	br	401a3ac <write+0x40>
 401a3a8:	0005883a 	mov	r2,zero
 401a3ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401a3b0:	e0bffb17 	ldw	r2,-20(fp)
 401a3b4:	10002126 	beq	r2,zero,401a43c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401a3b8:	e0bffb17 	ldw	r2,-20(fp)
 401a3bc:	10800217 	ldw	r2,8(r2)
 401a3c0:	108000cc 	andi	r2,r2,3
 401a3c4:	10001826 	beq	r2,zero,401a428 <write+0xbc>
 401a3c8:	e0bffb17 	ldw	r2,-20(fp)
 401a3cc:	10800017 	ldw	r2,0(r2)
 401a3d0:	10800617 	ldw	r2,24(r2)
 401a3d4:	10001426 	beq	r2,zero,401a428 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401a3d8:	e0bffb17 	ldw	r2,-20(fp)
 401a3dc:	10800017 	ldw	r2,0(r2)
 401a3e0:	10800617 	ldw	r2,24(r2)
 401a3e4:	e0ffff17 	ldw	r3,-4(fp)
 401a3e8:	180d883a 	mov	r6,r3
 401a3ec:	e17ffe17 	ldw	r5,-8(fp)
 401a3f0:	e13ffb17 	ldw	r4,-20(fp)
 401a3f4:	103ee83a 	callr	r2
 401a3f8:	e0bffc15 	stw	r2,-16(fp)
 401a3fc:	e0bffc17 	ldw	r2,-16(fp)
 401a400:	1000070e 	bge	r2,zero,401a420 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 401a404:	401a3300 	call	401a330 <alt_get_errno>
 401a408:	1007883a 	mov	r3,r2
 401a40c:	e0bffc17 	ldw	r2,-16(fp)
 401a410:	0085c83a 	sub	r2,zero,r2
 401a414:	18800015 	stw	r2,0(r3)
        return -1;
 401a418:	00bfffc4 	movi	r2,-1
 401a41c:	00000c06 	br	401a450 <write+0xe4>
      }
      return rval;
 401a420:	e0bffc17 	ldw	r2,-16(fp)
 401a424:	00000a06 	br	401a450 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401a428:	401a3300 	call	401a330 <alt_get_errno>
 401a42c:	1007883a 	mov	r3,r2
 401a430:	00800344 	movi	r2,13
 401a434:	18800015 	stw	r2,0(r3)
 401a438:	00000406 	br	401a44c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401a43c:	401a3300 	call	401a330 <alt_get_errno>
 401a440:	1007883a 	mov	r3,r2
 401a444:	00801444 	movi	r2,81
 401a448:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401a44c:	00bfffc4 	movi	r2,-1
}
 401a450:	e037883a 	mov	sp,fp
 401a454:	dfc00117 	ldw	ra,4(sp)
 401a458:	df000017 	ldw	fp,0(sp)
 401a45c:	dec00204 	addi	sp,sp,8
 401a460:	f800283a 	ret

0401a464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401a464:	defffd04 	addi	sp,sp,-12
 401a468:	dfc00215 	stw	ra,8(sp)
 401a46c:	df000115 	stw	fp,4(sp)
 401a470:	df000104 	addi	fp,sp,4
 401a474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401a478:	d1600b04 	addi	r5,gp,-32724
 401a47c:	e13fff17 	ldw	r4,-4(fp)
 401a480:	401c4900 	call	401c490 <alt_dev_llist_insert>
}
 401a484:	e037883a 	mov	sp,fp
 401a488:	dfc00117 	ldw	ra,4(sp)
 401a48c:	df000017 	ldw	fp,0(sp)
 401a490:	dec00204 	addi	sp,sp,8
 401a494:	f800283a 	ret

0401a498 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401a498:	defffd04 	addi	sp,sp,-12
 401a49c:	dfc00215 	stw	ra,8(sp)
 401a4a0:	df000115 	stw	fp,4(sp)
 401a4a4:	df000104 	addi	fp,sp,4
 401a4a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 401a4ac:	401cae00 	call	401cae0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401a4b0:	00800044 	movi	r2,1
 401a4b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401a4b8:	0001883a 	nop
 401a4bc:	e037883a 	mov	sp,fp
 401a4c0:	dfc00117 	ldw	ra,4(sp)
 401a4c4:	df000017 	ldw	fp,0(sp)
 401a4c8:	dec00204 	addi	sp,sp,8
 401a4cc:	f800283a 	ret

0401a4d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401a4d0:	defffe04 	addi	sp,sp,-8
 401a4d4:	dfc00115 	stw	ra,4(sp)
 401a4d8:	df000015 	stw	fp,0(sp)
 401a4dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 401a4e0:	01c0fa04 	movi	r7,1000
 401a4e4:	000d883a 	mov	r6,zero
 401a4e8:	000b883a 	mov	r5,zero
 401a4ec:	01020034 	movhi	r4,2048
 401a4f0:	401bb180 	call	401bb18 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 401a4f4:	01010234 	movhi	r4,1032
 401a4f8:	2139f504 	addi	r4,r4,-6188
 401a4fc:	401a5700 	call	401a570 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401a500:	018000c4 	movi	r6,3
 401a504:	000b883a 	mov	r5,zero
 401a508:	01010234 	movhi	r4,1032
 401a50c:	213a3204 	addi	r4,r4,-5944
 401a510:	401b19c0 	call	401b19c <altera_avalon_jtag_uart_init>
 401a514:	01010234 	movhi	r4,1032
 401a518:	213a2804 	addi	r4,r4,-5984
 401a51c:	401a4640 	call	401a464 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 401a520:	0001883a 	nop
}
 401a524:	0001883a 	nop
 401a528:	e037883a 	mov	sp,fp
 401a52c:	dfc00117 	ldw	ra,4(sp)
 401a530:	df000017 	ldw	fp,0(sp)
 401a534:	dec00204 	addi	sp,sp,8
 401a538:	f800283a 	ret

0401a53c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 401a53c:	defffd04 	addi	sp,sp,-12
 401a540:	dfc00215 	stw	ra,8(sp)
 401a544:	df000115 	stw	fp,4(sp)
 401a548:	df000104 	addi	fp,sp,4
 401a54c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 401a550:	d1601304 	addi	r5,gp,-32692
 401a554:	e13fff17 	ldw	r4,-4(fp)
 401a558:	401c4900 	call	401c490 <alt_dev_llist_insert>
}
 401a55c:	e037883a 	mov	sp,fp
 401a560:	dfc00117 	ldw	ra,4(sp)
 401a564:	df000017 	ldw	fp,0(sp)
 401a568:	dec00204 	addi	sp,sp,8
 401a56c:	f800283a 	ret

0401a570 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 401a570:	defffc04 	addi	sp,sp,-16
 401a574:	dfc00315 	stw	ra,12(sp)
 401a578:	df000215 	stw	fp,8(sp)
 401a57c:	df000204 	addi	fp,sp,8
 401a580:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 401a584:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 401a588:	e13fff17 	ldw	r4,-4(fp)
 401a58c:	401a5c40 	call	401a5c4 <alt_epcs_flash_query>
 401a590:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 401a594:	e0bffe17 	ldw	r2,-8(fp)
 401a598:	1000041e 	bne	r2,zero,401a5ac <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 401a59c:	e0bfff17 	ldw	r2,-4(fp)
 401a5a0:	1009883a 	mov	r4,r2
 401a5a4:	401a53c0 	call	401a53c <alt_flash_device_register>
 401a5a8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 401a5ac:	e0bffe17 	ldw	r2,-8(fp)
}
 401a5b0:	e037883a 	mov	sp,fp
 401a5b4:	dfc00117 	ldw	ra,4(sp)
 401a5b8:	df000017 	ldw	fp,0(sp)
 401a5bc:	dec00204 	addi	sp,sp,8
 401a5c0:	f800283a 	ret

0401a5c4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 401a5c4:	defffc04 	addi	sp,sp,-16
 401a5c8:	dfc00315 	stw	ra,12(sp)
 401a5cc:	df000215 	stw	fp,8(sp)
 401a5d0:	df000204 	addi	fp,sp,8
 401a5d4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 401a5d8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 401a5dc:	e0bfff17 	ldw	r2,-4(fp)
 401a5e0:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 401a5e4:	e0bfff17 	ldw	r2,-4(fp)
 401a5e8:	10802e17 	ldw	r2,184(r2)
 401a5ec:	1009883a 	mov	r4,r2
 401a5f0:	401c0300 	call	401c030 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 401a5f4:	10c03fcc 	andi	r3,r2,255
 401a5f8:	e0bfff17 	ldw	r2,-4(fp)
 401a5fc:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 401a600:	e0bfff17 	ldw	r2,-4(fp)
 401a604:	10803017 	ldw	r2,192(r2)
 401a608:	10800598 	cmpnei	r2,r2,22
 401a60c:	10000a1e 	bne	r2,zero,401a638 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 401a610:	e0bfff17 	ldw	r2,-4(fp)
 401a614:	00c02034 	movhi	r3,128
 401a618:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 401a61c:	e0bfff17 	ldw	r2,-4(fp)
 401a620:	00c02004 	movi	r3,128
 401a624:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401a628:	e0bfff17 	ldw	r2,-4(fp)
 401a62c:	00c00074 	movhi	r3,1
 401a630:	10c01015 	stw	r3,64(r2)
 401a634:	0000ce06 	br	401a970 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 401a638:	e0bfff17 	ldw	r2,-4(fp)
 401a63c:	10803017 	ldw	r2,192(r2)
 401a640:	10800518 	cmpnei	r2,r2,20
 401a644:	10000a1e 	bne	r2,zero,401a670 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 401a648:	e0bfff17 	ldw	r2,-4(fp)
 401a64c:	00c00834 	movhi	r3,32
 401a650:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 401a654:	e0bfff17 	ldw	r2,-4(fp)
 401a658:	00c00804 	movi	r3,32
 401a65c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401a660:	e0bfff17 	ldw	r2,-4(fp)
 401a664:	00c00074 	movhi	r3,1
 401a668:	10c01015 	stw	r3,64(r2)
 401a66c:	0000c006 	br	401a970 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 401a670:	e0bfff17 	ldw	r2,-4(fp)
 401a674:	10803017 	ldw	r2,192(r2)
 401a678:	108004d8 	cmpnei	r2,r2,19
 401a67c:	10000a1e 	bne	r2,zero,401a6a8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 401a680:	e0bfff17 	ldw	r2,-4(fp)
 401a684:	00c00434 	movhi	r3,16
 401a688:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 401a68c:	e0bfff17 	ldw	r2,-4(fp)
 401a690:	00c00404 	movi	r3,16
 401a694:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401a698:	e0bfff17 	ldw	r2,-4(fp)
 401a69c:	00c00074 	movhi	r3,1
 401a6a0:	10c01015 	stw	r3,64(r2)
 401a6a4:	0000b206 	br	401a970 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 401a6a8:	e0bfff17 	ldw	r2,-4(fp)
 401a6ac:	10803017 	ldw	r2,192(r2)
 401a6b0:	10800498 	cmpnei	r2,r2,18
 401a6b4:	10000a1e 	bne	r2,zero,401a6e0 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 401a6b8:	e0bfff17 	ldw	r2,-4(fp)
 401a6bc:	00c00234 	movhi	r3,8
 401a6c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 401a6c4:	e0bfff17 	ldw	r2,-4(fp)
 401a6c8:	00c00204 	movi	r3,8
 401a6cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 401a6d0:	e0bfff17 	ldw	r2,-4(fp)
 401a6d4:	00c00074 	movhi	r3,1
 401a6d8:	10c01015 	stw	r3,64(r2)
 401a6dc:	0000a406 	br	401a970 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 401a6e0:	e0bfff17 	ldw	r2,-4(fp)
 401a6e4:	10803017 	ldw	r2,192(r2)
 401a6e8:	10800418 	cmpnei	r2,r2,16
 401a6ec:	10000a1e 	bne	r2,zero,401a718 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 401a6f0:	e0bfff17 	ldw	r2,-4(fp)
 401a6f4:	00c000b4 	movhi	r3,2
 401a6f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 401a6fc:	e0bfff17 	ldw	r2,-4(fp)
 401a700:	00c00104 	movi	r3,4
 401a704:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 401a708:	e0bfff17 	ldw	r2,-4(fp)
 401a70c:	00e00014 	movui	r3,32768
 401a710:	10c01015 	stw	r3,64(r2)
 401a714:	00009606 	br	401a970 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 401a718:	e0bfff17 	ldw	r2,-4(fp)
 401a71c:	10802e17 	ldw	r2,184(r2)
 401a720:	1009883a 	mov	r4,r2
 401a724:	401c0980 	call	401c098 <epcs_read_device_id>
 401a728:	1007883a 	mov	r3,r2
 401a72c:	e0bfff17 	ldw	r2,-4(fp)
 401a730:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 401a734:	e0bfff17 	ldw	r2,-4(fp)
 401a738:	10c03017 	ldw	r3,192(r2)
 401a73c:	00804034 	movhi	r2,256
 401a740:	10bfffc4 	addi	r2,r2,-1
 401a744:	1886703a 	and	r3,r3,r2
 401a748:	00800874 	movhi	r2,33
 401a74c:	10ae8544 	addi	r2,r2,-17899
 401a750:	18800a1e 	bne	r3,r2,401a77c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 401a754:	e0bfff17 	ldw	r2,-4(fp)
 401a758:	00c00834 	movhi	r3,32
 401a75c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 401a760:	e0bfff17 	ldw	r2,-4(fp)
 401a764:	00c00804 	movi	r3,32
 401a768:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a76c:	e0bfff17 	ldw	r2,-4(fp)
 401a770:	00c00074 	movhi	r3,1
 401a774:	10c01015 	stw	r3,64(r2)
 401a778:	00007d06 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 401a77c:	e0bfff17 	ldw	r2,-4(fp)
 401a780:	10c03017 	ldw	r3,192(r2)
 401a784:	00804034 	movhi	r2,256
 401a788:	10bfffc4 	addi	r2,r2,-1
 401a78c:	1886703a 	and	r3,r3,r2
 401a790:	00800874 	movhi	r2,33
 401a794:	10ae8584 	addi	r2,r2,-17898
 401a798:	18800a1e 	bne	r3,r2,401a7c4 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 401a79c:	e0bfff17 	ldw	r2,-4(fp)
 401a7a0:	00c01034 	movhi	r3,64
 401a7a4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 401a7a8:	e0bfff17 	ldw	r2,-4(fp)
 401a7ac:	00c01004 	movi	r3,64
 401a7b0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a7b4:	e0bfff17 	ldw	r2,-4(fp)
 401a7b8:	00c00074 	movhi	r3,1
 401a7bc:	10c01015 	stw	r3,64(r2)
 401a7c0:	00006b06 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 401a7c4:	e0bfff17 	ldw	r2,-4(fp)
 401a7c8:	10c03017 	ldw	r3,192(r2)
 401a7cc:	00804034 	movhi	r2,256
 401a7d0:	10bfffc4 	addi	r2,r2,-1
 401a7d4:	1886703a 	and	r3,r3,r2
 401a7d8:	00800874 	movhi	r2,33
 401a7dc:	10ae85c4 	addi	r2,r2,-17897
 401a7e0:	18800a1e 	bne	r3,r2,401a80c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 401a7e4:	e0bfff17 	ldw	r2,-4(fp)
 401a7e8:	00c02034 	movhi	r3,128
 401a7ec:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 401a7f0:	e0bfff17 	ldw	r2,-4(fp)
 401a7f4:	00c02004 	movi	r3,128
 401a7f8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a7fc:	e0bfff17 	ldw	r2,-4(fp)
 401a800:	00c00074 	movhi	r3,1
 401a804:	10c01015 	stw	r3,64(r2)
 401a808:	00005906 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 401a80c:	e0bfff17 	ldw	r2,-4(fp)
 401a810:	10c03017 	ldw	r3,192(r2)
 401a814:	00804034 	movhi	r2,256
 401a818:	10bfffc4 	addi	r2,r2,-1
 401a81c:	1886703a 	and	r3,r3,r2
 401a820:	00800874 	movhi	r2,33
 401a824:	10ae8604 	addi	r2,r2,-17896
 401a828:	18800a1e 	bne	r3,r2,401a854 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 401a82c:	e0bfff17 	ldw	r2,-4(fp)
 401a830:	00c04034 	movhi	r3,256
 401a834:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 401a838:	e0bfff17 	ldw	r2,-4(fp)
 401a83c:	00c04004 	movi	r3,256
 401a840:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a844:	e0bfff17 	ldw	r2,-4(fp)
 401a848:	00c00074 	movhi	r3,1
 401a84c:	10c01015 	stw	r3,64(r2)
 401a850:	00004706 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 401a854:	e0bfff17 	ldw	r2,-4(fp)
 401a858:	10803017 	ldw	r2,192(r2)
 401a85c:	10803fcc 	andi	r2,r2,255
 401a860:	10800618 	cmpnei	r2,r2,24
 401a864:	10000a1e 	bne	r2,zero,401a890 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 401a868:	e0bfff17 	ldw	r2,-4(fp)
 401a86c:	00c04034 	movhi	r3,256
 401a870:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 401a874:	e0bfff17 	ldw	r2,-4(fp)
 401a878:	00c01004 	movi	r3,64
 401a87c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 401a880:	e0bfff17 	ldw	r2,-4(fp)
 401a884:	00c00134 	movhi	r3,4
 401a888:	10c01015 	stw	r3,64(r2)
 401a88c:	00003806 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 401a890:	e0bfff17 	ldw	r2,-4(fp)
 401a894:	10803017 	ldw	r2,192(r2)
 401a898:	10803fcc 	andi	r2,r2,255
 401a89c:	10800658 	cmpnei	r2,r2,25
 401a8a0:	10000d1e 	bne	r2,zero,401a8d8 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 401a8a4:	e0bfff17 	ldw	r2,-4(fp)
 401a8a8:	00c08034 	movhi	r3,512
 401a8ac:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 401a8b0:	e0bfff17 	ldw	r2,-4(fp)
 401a8b4:	00c08004 	movi	r3,512
 401a8b8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a8bc:	e0bfff17 	ldw	r2,-4(fp)
 401a8c0:	00c00074 	movhi	r3,1
 401a8c4:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 401a8c8:	e0bfff17 	ldw	r2,-4(fp)
 401a8cc:	00c00044 	movi	r3,1
 401a8d0:	10c03215 	stw	r3,200(r2)
 401a8d4:	00002606 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 401a8d8:	e0bfff17 	ldw	r2,-4(fp)
 401a8dc:	10803017 	ldw	r2,192(r2)
 401a8e0:	10803fcc 	andi	r2,r2,255
 401a8e4:	10800818 	cmpnei	r2,r2,32
 401a8e8:	10000d1e 	bne	r2,zero,401a920 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 401a8ec:	e0bfff17 	ldw	r2,-4(fp)
 401a8f0:	00c10034 	movhi	r3,1024
 401a8f4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 401a8f8:	e0bfff17 	ldw	r2,-4(fp)
 401a8fc:	00c10004 	movi	r3,1024
 401a900:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a904:	e0bfff17 	ldw	r2,-4(fp)
 401a908:	00c00074 	movhi	r3,1
 401a90c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 401a910:	e0bfff17 	ldw	r2,-4(fp)
 401a914:	00c00044 	movi	r3,1
 401a918:	10c03215 	stw	r3,200(r2)
 401a91c:	00001406 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 401a920:	e0bfff17 	ldw	r2,-4(fp)
 401a924:	10803017 	ldw	r2,192(r2)
 401a928:	10803fcc 	andi	r2,r2,255
 401a92c:	10800858 	cmpnei	r2,r2,33
 401a930:	10000d1e 	bne	r2,zero,401a968 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 401a934:	e0bfff17 	ldw	r2,-4(fp)
 401a938:	00c20034 	movhi	r3,2048
 401a93c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 401a940:	e0bfff17 	ldw	r2,-4(fp)
 401a944:	00c20004 	movi	r3,2048
 401a948:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 401a94c:	e0bfff17 	ldw	r2,-4(fp)
 401a950:	00c00074 	movhi	r3,1
 401a954:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 401a958:	e0bfff17 	ldw	r2,-4(fp)
 401a95c:	00c00044 	movi	r3,1
 401a960:	10c03215 	stw	r3,200(r2)
 401a964:	00000206 	br	401a970 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 401a968:	00bffb44 	movi	r2,-19
 401a96c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 401a970:	e0bfff17 	ldw	r2,-4(fp)
 401a974:	10800e17 	ldw	r2,56(r2)
 401a978:	1007883a 	mov	r3,r2
 401a97c:	e0bfff17 	ldw	r2,-4(fp)
 401a980:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 401a984:	e0bfff17 	ldw	r2,-4(fp)
 401a988:	00c00044 	movi	r3,1
 401a98c:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 401a990:	e0bfff17 	ldw	r2,-4(fp)
 401a994:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 401a998:	e0bfff17 	ldw	r2,-4(fp)
 401a99c:	00c04004 	movi	r3,256
 401a9a0:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 401a9a4:	e0bffe17 	ldw	r2,-8(fp)
}
 401a9a8:	e037883a 	mov	sp,fp
 401a9ac:	dfc00117 	ldw	ra,4(sp)
 401a9b0:	df000017 	ldw	fp,0(sp)
 401a9b4:	dec00204 	addi	sp,sp,8
 401a9b8:	f800283a 	ret

0401a9bc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 401a9bc:	deffee04 	addi	sp,sp,-72
 401a9c0:	dfc01115 	stw	ra,68(sp)
 401a9c4:	df001015 	stw	fp,64(sp)
 401a9c8:	df001004 	addi	fp,sp,64
 401a9cc:	e13ffc15 	stw	r4,-16(fp)
 401a9d0:	e17ffd15 	stw	r5,-12(fp)
 401a9d4:	e1bffe15 	stw	r6,-8(fp)
 401a9d8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 401a9dc:	00800804 	movi	r2,32
 401a9e0:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 401a9e4:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 401a9e8:	00002706 	br	401aa88 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 401a9ec:	e0fff117 	ldw	r3,-60(fp)
 401a9f0:	e0bfff17 	ldw	r2,-4(fp)
 401a9f4:	1880012e 	bgeu	r3,r2,401a9fc <alt_epcs_flash_memcmp+0x40>
 401a9f8:	1805883a 	mov	r2,r3
 401a9fc:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 401aa00:	e0fffe17 	ldw	r3,-8(fp)
 401aa04:	e0bff017 	ldw	r2,-64(fp)
 401aa08:	1885883a 	add	r2,r3,r2
 401aa0c:	e0fff404 	addi	r3,fp,-48
 401aa10:	e1fff217 	ldw	r7,-56(fp)
 401aa14:	180d883a 	mov	r6,r3
 401aa18:	100b883a 	mov	r5,r2
 401aa1c:	e13ffc17 	ldw	r4,-16(fp)
 401aa20:	401afa00 	call	401afa0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 401aa24:	1000020e 	bge	r2,zero,401aa30 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 401aa28:	00bfffc4 	movi	r2,-1
 401aa2c:	00001906 	br	401aa94 <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 401aa30:	e0bff017 	ldw	r2,-64(fp)
 401aa34:	e0fffd17 	ldw	r3,-12(fp)
 401aa38:	1885883a 	add	r2,r3,r2
 401aa3c:	e13ff217 	ldw	r4,-56(fp)
 401aa40:	e0fff404 	addi	r3,fp,-48
 401aa44:	200d883a 	mov	r6,r4
 401aa48:	180b883a 	mov	r5,r3
 401aa4c:	1009883a 	mov	r4,r2
 401aa50:	401cf880 	call	401cf88 <memcmp>
 401aa54:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 401aa58:	e0bff317 	ldw	r2,-52(fp)
 401aa5c:	10000226 	beq	r2,zero,401aa68 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 401aa60:	e0bff317 	ldw	r2,-52(fp)
 401aa64:	00000b06 	br	401aa94 <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 401aa68:	e0bff217 	ldw	r2,-56(fp)
 401aa6c:	e0ffff17 	ldw	r3,-4(fp)
 401aa70:	1885c83a 	sub	r2,r3,r2
 401aa74:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 401aa78:	e0fff017 	ldw	r3,-64(fp)
 401aa7c:	e0bff217 	ldw	r2,-56(fp)
 401aa80:	1885883a 	add	r2,r3,r2
 401aa84:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 401aa88:	e0bfff17 	ldw	r2,-4(fp)
 401aa8c:	103fd71e 	bne	r2,zero,401a9ec <__alt_mem_epcs_flash_controller_0+0xfb0199ec>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 401aa90:	0005883a 	mov	r2,zero
}
 401aa94:	e037883a 	mov	sp,fp
 401aa98:	dfc00117 	ldw	ra,4(sp)
 401aa9c:	df000017 	ldw	fp,0(sp)
 401aaa0:	dec00204 	addi	sp,sp,8
 401aaa4:	f800283a 	ret

0401aaa8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 401aaa8:	defff404 	addi	sp,sp,-48
 401aaac:	dfc00b15 	stw	ra,44(sp)
 401aab0:	df000a15 	stw	fp,40(sp)
 401aab4:	df000a04 	addi	fp,sp,40
 401aab8:	e13ffc15 	stw	r4,-16(fp)
 401aabc:	e17ffd15 	stw	r5,-12(fp)
 401aac0:	e1bffe15 	stw	r6,-8(fp)
 401aac4:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 401aac8:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401aacc:	e03ff815 	stw	zero,-32(fp)
 401aad0:	00008306 	br	401ace0 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401aad4:	e0fffc17 	ldw	r3,-16(fp)
 401aad8:	e0bff817 	ldw	r2,-32(fp)
 401aadc:	1004913a 	slli	r2,r2,4
 401aae0:	1885883a 	add	r2,r3,r2
 401aae4:	10800d04 	addi	r2,r2,52
 401aae8:	10800017 	ldw	r2,0(r2)
 401aaec:	e0fffd17 	ldw	r3,-12(fp)
 401aaf0:	18807816 	blt	r3,r2,401acd4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 401aaf4:	e0fffc17 	ldw	r3,-16(fp)
 401aaf8:	e0bff817 	ldw	r2,-32(fp)
 401aafc:	1004913a 	slli	r2,r2,4
 401ab00:	1885883a 	add	r2,r3,r2
 401ab04:	10800d04 	addi	r2,r2,52
 401ab08:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 401ab0c:	e13ffc17 	ldw	r4,-16(fp)
 401ab10:	e0bff817 	ldw	r2,-32(fp)
 401ab14:	1004913a 	slli	r2,r2,4
 401ab18:	2085883a 	add	r2,r4,r2
 401ab1c:	10800e04 	addi	r2,r2,56
 401ab20:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 401ab24:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 401ab28:	e0fffd17 	ldw	r3,-12(fp)
 401ab2c:	1880690e 	bge	r3,r2,401acd4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 401ab30:	e0fffc17 	ldw	r3,-16(fp)
 401ab34:	e0bff817 	ldw	r2,-32(fp)
 401ab38:	1004913a 	slli	r2,r2,4
 401ab3c:	1885883a 	add	r2,r3,r2
 401ab40:	10800d04 	addi	r2,r2,52
 401ab44:	10800017 	ldw	r2,0(r2)
 401ab48:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 401ab4c:	e03ff915 	stw	zero,-28(fp)
 401ab50:	00005806 	br	401acb4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 401ab54:	e0fffd17 	ldw	r3,-12(fp)
 401ab58:	e0bffa17 	ldw	r2,-24(fp)
 401ab5c:	18804916 	blt	r3,r2,401ac84 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 401ab60:	e0fffc17 	ldw	r3,-16(fp)
 401ab64:	e0bff817 	ldw	r2,-32(fp)
 401ab68:	10800104 	addi	r2,r2,4
 401ab6c:	1004913a 	slli	r2,r2,4
 401ab70:	1885883a 	add	r2,r3,r2
 401ab74:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 401ab78:	e0bffa17 	ldw	r2,-24(fp)
 401ab7c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 401ab80:	e0fffd17 	ldw	r3,-12(fp)
 401ab84:	18803f0e 	bge	r3,r2,401ac84 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 401ab88:	e0fffc17 	ldw	r3,-16(fp)
 401ab8c:	e0bff817 	ldw	r2,-32(fp)
 401ab90:	10800104 	addi	r2,r2,4
 401ab94:	1004913a 	slli	r2,r2,4
 401ab98:	1885883a 	add	r2,r3,r2
 401ab9c:	10c00017 	ldw	r3,0(r2)
 401aba0:	e0bffa17 	ldw	r2,-24(fp)
 401aba4:	1887883a 	add	r3,r3,r2
 401aba8:	e0bffd17 	ldw	r2,-12(fp)
 401abac:	1885c83a 	sub	r2,r3,r2
 401abb0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 401abb4:	e0fffb17 	ldw	r3,-20(fp)
 401abb8:	e0bfff17 	ldw	r2,-4(fp)
 401abbc:	1880010e 	bge	r3,r2,401abc4 <alt_epcs_flash_write+0x11c>
 401abc0:	1805883a 	mov	r2,r3
 401abc4:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 401abc8:	e0bffb17 	ldw	r2,-20(fp)
 401abcc:	100f883a 	mov	r7,r2
 401abd0:	e1bffd17 	ldw	r6,-12(fp)
 401abd4:	e17ffe17 	ldw	r5,-8(fp)
 401abd8:	e13ffc17 	ldw	r4,-16(fp)
 401abdc:	401a9bc0 	call	401a9bc <alt_epcs_flash_memcmp>
 401abe0:	10001226 	beq	r2,zero,401ac2c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 401abe4:	e0bffc17 	ldw	r2,-16(fp)
 401abe8:	10800817 	ldw	r2,32(r2)
 401abec:	e17ffa17 	ldw	r5,-24(fp)
 401abf0:	e13ffc17 	ldw	r4,-16(fp)
 401abf4:	103ee83a 	callr	r2
 401abf8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 401abfc:	e0bff717 	ldw	r2,-36(fp)
 401ac00:	10000a1e 	bne	r2,zero,401ac2c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 401ac04:	e0bffc17 	ldw	r2,-16(fp)
 401ac08:	10800917 	ldw	r2,36(r2)
 401ac0c:	e0fffb17 	ldw	r3,-20(fp)
 401ac10:	d8c00015 	stw	r3,0(sp)
 401ac14:	e1fffe17 	ldw	r7,-8(fp)
 401ac18:	e1bffd17 	ldw	r6,-12(fp)
 401ac1c:	e17ffa17 	ldw	r5,-24(fp)
 401ac20:	e13ffc17 	ldw	r4,-16(fp)
 401ac24:	103ee83a 	callr	r2
 401ac28:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 401ac2c:	e0ffff17 	ldw	r3,-4(fp)
 401ac30:	e0bffb17 	ldw	r2,-20(fp)
 401ac34:	18802e26 	beq	r3,r2,401acf0 <alt_epcs_flash_write+0x248>
 401ac38:	e0bff717 	ldw	r2,-36(fp)
 401ac3c:	10002c1e 	bne	r2,zero,401acf0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 401ac40:	e0ffff17 	ldw	r3,-4(fp)
 401ac44:	e0bffb17 	ldw	r2,-20(fp)
 401ac48:	1885c83a 	sub	r2,r3,r2
 401ac4c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 401ac50:	e0fffc17 	ldw	r3,-16(fp)
 401ac54:	e0bff817 	ldw	r2,-32(fp)
 401ac58:	10800104 	addi	r2,r2,4
 401ac5c:	1004913a 	slli	r2,r2,4
 401ac60:	1885883a 	add	r2,r3,r2
 401ac64:	10c00017 	ldw	r3,0(r2)
 401ac68:	e0bffa17 	ldw	r2,-24(fp)
 401ac6c:	1885883a 	add	r2,r3,r2
 401ac70:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 401ac74:	e0bffb17 	ldw	r2,-20(fp)
 401ac78:	e0fffe17 	ldw	r3,-8(fp)
 401ac7c:	1885883a 	add	r2,r3,r2
 401ac80:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 401ac84:	e0fffc17 	ldw	r3,-16(fp)
 401ac88:	e0bff817 	ldw	r2,-32(fp)
 401ac8c:	10800104 	addi	r2,r2,4
 401ac90:	1004913a 	slli	r2,r2,4
 401ac94:	1885883a 	add	r2,r3,r2
 401ac98:	10800017 	ldw	r2,0(r2)
 401ac9c:	e0fffa17 	ldw	r3,-24(fp)
 401aca0:	1885883a 	add	r2,r3,r2
 401aca4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 401aca8:	e0bff917 	ldw	r2,-28(fp)
 401acac:	10800044 	addi	r2,r2,1
 401acb0:	e0bff915 	stw	r2,-28(fp)
 401acb4:	e0fffc17 	ldw	r3,-16(fp)
 401acb8:	e0bff817 	ldw	r2,-32(fp)
 401acbc:	1004913a 	slli	r2,r2,4
 401acc0:	1885883a 	add	r2,r3,r2
 401acc4:	10800f04 	addi	r2,r2,60
 401acc8:	10800017 	ldw	r2,0(r2)
 401accc:	e0fff917 	ldw	r3,-28(fp)
 401acd0:	18bfa016 	blt	r3,r2,401ab54 <__alt_mem_epcs_flash_controller_0+0xfb019b54>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 401acd4:	e0bff817 	ldw	r2,-32(fp)
 401acd8:	10800044 	addi	r2,r2,1
 401acdc:	e0bff815 	stw	r2,-32(fp)
 401ace0:	e0bffc17 	ldw	r2,-16(fp)
 401ace4:	10800c17 	ldw	r2,48(r2)
 401ace8:	e0fff817 	ldw	r3,-32(fp)
 401acec:	18bf7916 	blt	r3,r2,401aad4 <__alt_mem_epcs_flash_controller_0+0xfb019ad4>
      }
    }
  }

finished:
  return ret_code;
 401acf0:	e0bff717 	ldw	r2,-36(fp)
}
 401acf4:	e037883a 	mov	sp,fp
 401acf8:	dfc00117 	ldw	ra,4(sp)
 401acfc:	df000017 	ldw	fp,0(sp)
 401ad00:	dec00204 	addi	sp,sp,8
 401ad04:	f800283a 	ret

0401ad08 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 401ad08:	defffa04 	addi	sp,sp,-24
 401ad0c:	df000515 	stw	fp,20(sp)
 401ad10:	df000504 	addi	fp,sp,20
 401ad14:	e13ffd15 	stw	r4,-12(fp)
 401ad18:	e17ffe15 	stw	r5,-8(fp)
 401ad1c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 401ad20:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 401ad24:	e0bffd17 	ldw	r2,-12(fp)
 401ad28:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 401ad2c:	e0bffc17 	ldw	r2,-16(fp)
 401ad30:	10c00c17 	ldw	r3,48(r2)
 401ad34:	e0bfff17 	ldw	r2,-4(fp)
 401ad38:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 401ad3c:	e0bffc17 	ldw	r2,-16(fp)
 401ad40:	10800c17 	ldw	r2,48(r2)
 401ad44:	1000031e 	bne	r2,zero,401ad54 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 401ad48:	00bffec4 	movi	r2,-5
 401ad4c:	e0bffb15 	stw	r2,-20(fp)
 401ad50:	00000b06 	br	401ad80 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 401ad54:	e0bffc17 	ldw	r2,-16(fp)
 401ad58:	10800c17 	ldw	r2,48(r2)
 401ad5c:	10800250 	cmplti	r2,r2,9
 401ad60:	1000031e 	bne	r2,zero,401ad70 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 401ad64:	00bffd04 	movi	r2,-12
 401ad68:	e0bffb15 	stw	r2,-20(fp)
 401ad6c:	00000406 	br	401ad80 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 401ad70:	e0bffc17 	ldw	r2,-16(fp)
 401ad74:	10c00d04 	addi	r3,r2,52
 401ad78:	e0bffe17 	ldw	r2,-8(fp)
 401ad7c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 401ad80:	e0bffb17 	ldw	r2,-20(fp)
}
 401ad84:	e037883a 	mov	sp,fp
 401ad88:	df000017 	ldw	fp,0(sp)
 401ad8c:	dec00104 	addi	sp,sp,4
 401ad90:	f800283a 	ret

0401ad94 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 401ad94:	defff904 	addi	sp,sp,-28
 401ad98:	df000615 	stw	fp,24(sp)
 401ad9c:	df000604 	addi	fp,sp,24
 401ada0:	e13ffe15 	stw	r4,-8(fp)
 401ada4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 401ada8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401adac:	e0bffe17 	ldw	r2,-8(fp)
 401adb0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 401adb4:	e0bffb17 	ldw	r2,-20(fp)
 401adb8:	10800c17 	ldw	r2,48(r2)
 401adbc:	10bfffc4 	addi	r2,r2,-1
 401adc0:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 401adc4:	e0fffb17 	ldw	r3,-20(fp)
 401adc8:	e0bffc17 	ldw	r2,-16(fp)
 401adcc:	1004913a 	slli	r2,r2,4
 401add0:	1885883a 	add	r2,r3,r2
 401add4:	10800d04 	addi	r2,r2,52
 401add8:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 401addc:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 401ade0:	e13ffb17 	ldw	r4,-20(fp)
 401ade4:	e0bffc17 	ldw	r2,-16(fp)
 401ade8:	1004913a 	slli	r2,r2,4
 401adec:	2085883a 	add	r2,r4,r2
 401adf0:	10800e04 	addi	r2,r2,56
 401adf4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 401adf8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 401adfc:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 401ae00:	e0bfff17 	ldw	r2,-4(fp)
 401ae04:	e0fffd17 	ldw	r3,-12(fp)
 401ae08:	1880022e 	bgeu	r3,r2,401ae14 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 401ae0c:	00bffec4 	movi	r2,-5
 401ae10:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 401ae14:	e0bffa17 	ldw	r2,-24(fp)
}
 401ae18:	e037883a 	mov	sp,fp
 401ae1c:	df000017 	ldw	fp,0(sp)
 401ae20:	dec00104 	addi	sp,sp,4
 401ae24:	f800283a 	ret

0401ae28 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 401ae28:	defffa04 	addi	sp,sp,-24
 401ae2c:	dfc00515 	stw	ra,20(sp)
 401ae30:	df000415 	stw	fp,16(sp)
 401ae34:	df000404 	addi	fp,sp,16
 401ae38:	e13ffe15 	stw	r4,-8(fp)
 401ae3c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 401ae40:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401ae44:	e0bffe17 	ldw	r2,-8(fp)
 401ae48:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 401ae4c:	e17fff17 	ldw	r5,-4(fp)
 401ae50:	e13ffe17 	ldw	r4,-8(fp)
 401ae54:	401ad940 	call	401ad94 <alt_epcs_test_address>
 401ae58:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 401ae5c:	e0bffc17 	ldw	r2,-16(fp)
 401ae60:	10000916 	blt	r2,zero,401ae88 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 401ae64:	e0bffd17 	ldw	r2,-12(fp)
 401ae68:	10c02e17 	ldw	r3,184(r2)
 401ae6c:	e13fff17 	ldw	r4,-4(fp)
 401ae70:	e0bffd17 	ldw	r2,-12(fp)
 401ae74:	10803217 	ldw	r2,200(r2)
 401ae78:	100d883a 	mov	r6,r2
 401ae7c:	200b883a 	mov	r5,r4
 401ae80:	1809883a 	mov	r4,r3
 401ae84:	401bc640 	call	401bc64 <epcs_sector_erase>
  }
  return ret_code;
 401ae88:	e0bffc17 	ldw	r2,-16(fp)
}
 401ae8c:	e037883a 	mov	sp,fp
 401ae90:	dfc00117 	ldw	ra,4(sp)
 401ae94:	df000017 	ldw	fp,0(sp)
 401ae98:	dec00204 	addi	sp,sp,8
 401ae9c:	f800283a 	ret

0401aea0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 401aea0:	defff404 	addi	sp,sp,-48
 401aea4:	dfc00b15 	stw	ra,44(sp)
 401aea8:	df000a15 	stw	fp,40(sp)
 401aeac:	df000a04 	addi	fp,sp,40
 401aeb0:	e13ffc15 	stw	r4,-16(fp)
 401aeb4:	e17ffd15 	stw	r5,-12(fp)
 401aeb8:	e1bffe15 	stw	r6,-8(fp)
 401aebc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401aec0:	e0bffc17 	ldw	r2,-16(fp)
 401aec4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 401aec8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 401aecc:	e17ffe17 	ldw	r5,-8(fp)
 401aed0:	e13ffc17 	ldw	r4,-16(fp)
 401aed4:	401ad940 	call	401ad94 <alt_epcs_test_address>
 401aed8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 401aedc:	e0bff917 	ldw	r2,-28(fp)
 401aee0:	10002916 	blt	r2,zero,401af88 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 401aee4:	00002606 	br	401af80 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 401aee8:	e0bff817 	ldw	r2,-32(fp)
 401aeec:	10c03117 	ldw	r3,196(r2)
 401aef0:	e0bffe17 	ldw	r2,-8(fp)
 401aef4:	1887883a 	add	r3,r3,r2
 401aef8:	e0bff817 	ldw	r2,-32(fp)
 401aefc:	10803117 	ldw	r2,196(r2)
 401af00:	0085c83a 	sub	r2,zero,r2
 401af04:	1884703a 	and	r2,r3,r2
 401af08:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 401af0c:	e0fffa17 	ldw	r3,-24(fp)
 401af10:	e0bffe17 	ldw	r2,-8(fp)
 401af14:	1885c83a 	sub	r2,r3,r2
 401af18:	e0c00217 	ldw	r3,8(fp)
 401af1c:	1880010e 	bge	r3,r2,401af24 <alt_epcs_flash_write_block+0x84>
 401af20:	1805883a 	mov	r2,r3
 401af24:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 401af28:	e0bff817 	ldw	r2,-32(fp)
 401af2c:	11002e17 	ldw	r4,184(r2)
 401af30:	e0bff717 	ldw	r2,-36(fp)
 401af34:	e0ffff17 	ldw	r3,-4(fp)
 401af38:	1887883a 	add	r3,r3,r2
 401af3c:	e0bff817 	ldw	r2,-32(fp)
 401af40:	10803217 	ldw	r2,200(r2)
 401af44:	d8800015 	stw	r2,0(sp)
 401af48:	e1fffb17 	ldw	r7,-20(fp)
 401af4c:	180d883a 	mov	r6,r3
 401af50:	e17ffe17 	ldw	r5,-8(fp)
 401af54:	401bf140 	call	401bf14 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 401af58:	e0c00217 	ldw	r3,8(fp)
 401af5c:	e0bffb17 	ldw	r2,-20(fp)
 401af60:	1885c83a 	sub	r2,r3,r2
 401af64:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 401af68:	e0fff717 	ldw	r3,-36(fp)
 401af6c:	e0bffb17 	ldw	r2,-20(fp)
 401af70:	1885883a 	add	r2,r3,r2
 401af74:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 401af78:	e0bffa17 	ldw	r2,-24(fp)
 401af7c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 401af80:	e0800217 	ldw	r2,8(fp)
 401af84:	103fd81e 	bne	r2,zero,401aee8 <__alt_mem_epcs_flash_controller_0+0xfb019ee8>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 401af88:	e0bff917 	ldw	r2,-28(fp)
}
 401af8c:	e037883a 	mov	sp,fp
 401af90:	dfc00117 	ldw	ra,4(sp)
 401af94:	df000017 	ldw	fp,0(sp)
 401af98:	dec00204 	addi	sp,sp,8
 401af9c:	f800283a 	ret

0401afa0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 401afa0:	defff704 	addi	sp,sp,-36
 401afa4:	dfc00815 	stw	ra,32(sp)
 401afa8:	df000715 	stw	fp,28(sp)
 401afac:	df000704 	addi	fp,sp,28
 401afb0:	e13ffc15 	stw	r4,-16(fp)
 401afb4:	e17ffd15 	stw	r5,-12(fp)
 401afb8:	e1bffe15 	stw	r6,-8(fp)
 401afbc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 401afc0:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 401afc4:	e0bffc17 	ldw	r2,-16(fp)
 401afc8:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 401afcc:	e17ffd17 	ldw	r5,-12(fp)
 401afd0:	e13ffc17 	ldw	r4,-16(fp)
 401afd4:	401ad940 	call	401ad94 <alt_epcs_test_address>
 401afd8:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 401afdc:	e0bffa17 	ldw	r2,-24(fp)
 401afe0:	10000f16 	blt	r2,zero,401b020 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 401afe4:	e0bffb17 	ldw	r2,-20(fp)
 401afe8:	10c02e17 	ldw	r3,184(r2)
 401afec:	e0bffb17 	ldw	r2,-20(fp)
 401aff0:	10803217 	ldw	r2,200(r2)
 401aff4:	d8800015 	stw	r2,0(sp)
 401aff8:	e1ffff17 	ldw	r7,-4(fp)
 401affc:	e1bffe17 	ldw	r6,-8(fp)
 401b000:	e17ffd17 	ldw	r5,-12(fp)
 401b004:	1809883a 	mov	r4,r3
 401b008:	401bd600 	call	401bd60 <epcs_read_buffer>
 401b00c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 401b010:	e0fffa17 	ldw	r3,-24(fp)
 401b014:	e0bfff17 	ldw	r2,-4(fp)
 401b018:	1880011e 	bne	r3,r2,401b020 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 401b01c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 401b020:	e0bffa17 	ldw	r2,-24(fp)
}
 401b024:	e037883a 	mov	sp,fp
 401b028:	dfc00117 	ldw	ra,4(sp)
 401b02c:	df000017 	ldw	fp,0(sp)
 401b030:	dec00204 	addi	sp,sp,8
 401b034:	f800283a 	ret

0401b038 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401b038:	defffa04 	addi	sp,sp,-24
 401b03c:	dfc00515 	stw	ra,20(sp)
 401b040:	df000415 	stw	fp,16(sp)
 401b044:	df000404 	addi	fp,sp,16
 401b048:	e13ffd15 	stw	r4,-12(fp)
 401b04c:	e17ffe15 	stw	r5,-8(fp)
 401b050:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401b054:	e0bffd17 	ldw	r2,-12(fp)
 401b058:	10800017 	ldw	r2,0(r2)
 401b05c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401b060:	e0bffc17 	ldw	r2,-16(fp)
 401b064:	10c00a04 	addi	r3,r2,40
 401b068:	e0bffd17 	ldw	r2,-12(fp)
 401b06c:	10800217 	ldw	r2,8(r2)
 401b070:	100f883a 	mov	r7,r2
 401b074:	e1bfff17 	ldw	r6,-4(fp)
 401b078:	e17ffe17 	ldw	r5,-8(fp)
 401b07c:	1809883a 	mov	r4,r3
 401b080:	401b6600 	call	401b660 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401b084:	e037883a 	mov	sp,fp
 401b088:	dfc00117 	ldw	ra,4(sp)
 401b08c:	df000017 	ldw	fp,0(sp)
 401b090:	dec00204 	addi	sp,sp,8
 401b094:	f800283a 	ret

0401b098 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401b098:	defffa04 	addi	sp,sp,-24
 401b09c:	dfc00515 	stw	ra,20(sp)
 401b0a0:	df000415 	stw	fp,16(sp)
 401b0a4:	df000404 	addi	fp,sp,16
 401b0a8:	e13ffd15 	stw	r4,-12(fp)
 401b0ac:	e17ffe15 	stw	r5,-8(fp)
 401b0b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401b0b4:	e0bffd17 	ldw	r2,-12(fp)
 401b0b8:	10800017 	ldw	r2,0(r2)
 401b0bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401b0c0:	e0bffc17 	ldw	r2,-16(fp)
 401b0c4:	10c00a04 	addi	r3,r2,40
 401b0c8:	e0bffd17 	ldw	r2,-12(fp)
 401b0cc:	10800217 	ldw	r2,8(r2)
 401b0d0:	100f883a 	mov	r7,r2
 401b0d4:	e1bfff17 	ldw	r6,-4(fp)
 401b0d8:	e17ffe17 	ldw	r5,-8(fp)
 401b0dc:	1809883a 	mov	r4,r3
 401b0e0:	401b87c0 	call	401b87c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401b0e4:	e037883a 	mov	sp,fp
 401b0e8:	dfc00117 	ldw	ra,4(sp)
 401b0ec:	df000017 	ldw	fp,0(sp)
 401b0f0:	dec00204 	addi	sp,sp,8
 401b0f4:	f800283a 	ret

0401b0f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401b0f8:	defffc04 	addi	sp,sp,-16
 401b0fc:	dfc00315 	stw	ra,12(sp)
 401b100:	df000215 	stw	fp,8(sp)
 401b104:	df000204 	addi	fp,sp,8
 401b108:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401b10c:	e0bfff17 	ldw	r2,-4(fp)
 401b110:	10800017 	ldw	r2,0(r2)
 401b114:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401b118:	e0bffe17 	ldw	r2,-8(fp)
 401b11c:	10c00a04 	addi	r3,r2,40
 401b120:	e0bfff17 	ldw	r2,-4(fp)
 401b124:	10800217 	ldw	r2,8(r2)
 401b128:	100b883a 	mov	r5,r2
 401b12c:	1809883a 	mov	r4,r3
 401b130:	401b5080 	call	401b508 <altera_avalon_jtag_uart_close>
}
 401b134:	e037883a 	mov	sp,fp
 401b138:	dfc00117 	ldw	ra,4(sp)
 401b13c:	df000017 	ldw	fp,0(sp)
 401b140:	dec00204 	addi	sp,sp,8
 401b144:	f800283a 	ret

0401b148 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401b148:	defffa04 	addi	sp,sp,-24
 401b14c:	dfc00515 	stw	ra,20(sp)
 401b150:	df000415 	stw	fp,16(sp)
 401b154:	df000404 	addi	fp,sp,16
 401b158:	e13ffd15 	stw	r4,-12(fp)
 401b15c:	e17ffe15 	stw	r5,-8(fp)
 401b160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401b164:	e0bffd17 	ldw	r2,-12(fp)
 401b168:	10800017 	ldw	r2,0(r2)
 401b16c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401b170:	e0bffc17 	ldw	r2,-16(fp)
 401b174:	10800a04 	addi	r2,r2,40
 401b178:	e1bfff17 	ldw	r6,-4(fp)
 401b17c:	e17ffe17 	ldw	r5,-8(fp)
 401b180:	1009883a 	mov	r4,r2
 401b184:	401b5700 	call	401b570 <altera_avalon_jtag_uart_ioctl>
}
 401b188:	e037883a 	mov	sp,fp
 401b18c:	dfc00117 	ldw	ra,4(sp)
 401b190:	df000017 	ldw	fp,0(sp)
 401b194:	dec00204 	addi	sp,sp,8
 401b198:	f800283a 	ret

0401b19c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401b19c:	defffa04 	addi	sp,sp,-24
 401b1a0:	dfc00515 	stw	ra,20(sp)
 401b1a4:	df000415 	stw	fp,16(sp)
 401b1a8:	df000404 	addi	fp,sp,16
 401b1ac:	e13ffd15 	stw	r4,-12(fp)
 401b1b0:	e17ffe15 	stw	r5,-8(fp)
 401b1b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401b1b8:	e0bffd17 	ldw	r2,-12(fp)
 401b1bc:	00c00044 	movi	r3,1
 401b1c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401b1c4:	e0bffd17 	ldw	r2,-12(fp)
 401b1c8:	10800017 	ldw	r2,0(r2)
 401b1cc:	10800104 	addi	r2,r2,4
 401b1d0:	1007883a 	mov	r3,r2
 401b1d4:	e0bffd17 	ldw	r2,-12(fp)
 401b1d8:	10800817 	ldw	r2,32(r2)
 401b1dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401b1e0:	e0bffe17 	ldw	r2,-8(fp)
 401b1e4:	e0ffff17 	ldw	r3,-4(fp)
 401b1e8:	d8000015 	stw	zero,0(sp)
 401b1ec:	e1fffd17 	ldw	r7,-12(fp)
 401b1f0:	018100b4 	movhi	r6,1026
 401b1f4:	31ac9704 	addi	r6,r6,-19876
 401b1f8:	180b883a 	mov	r5,r3
 401b1fc:	1009883a 	mov	r4,r2
 401b200:	40199bc0 	call	40199bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401b204:	e0bffd17 	ldw	r2,-12(fp)
 401b208:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401b20c:	e0bffd17 	ldw	r2,-12(fp)
 401b210:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401b214:	d0e02117 	ldw	r3,-32636(gp)
 401b218:	e1fffd17 	ldw	r7,-12(fp)
 401b21c:	018100b4 	movhi	r6,1026
 401b220:	31ad1a04 	addi	r6,r6,-19352
 401b224:	180b883a 	mov	r5,r3
 401b228:	1009883a 	mov	r4,r2
 401b22c:	401c1d00 	call	401c1d0 <alt_alarm_start>
 401b230:	1000040e 	bge	r2,zero,401b244 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401b234:	e0fffd17 	ldw	r3,-12(fp)
 401b238:	00a00034 	movhi	r2,32768
 401b23c:	10bfffc4 	addi	r2,r2,-1
 401b240:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401b244:	0001883a 	nop
 401b248:	e037883a 	mov	sp,fp
 401b24c:	dfc00117 	ldw	ra,4(sp)
 401b250:	df000017 	ldw	fp,0(sp)
 401b254:	dec00204 	addi	sp,sp,8
 401b258:	f800283a 	ret

0401b25c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401b25c:	defff804 	addi	sp,sp,-32
 401b260:	df000715 	stw	fp,28(sp)
 401b264:	df000704 	addi	fp,sp,28
 401b268:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401b26c:	e0bfff17 	ldw	r2,-4(fp)
 401b270:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401b274:	e0bffb17 	ldw	r2,-20(fp)
 401b278:	10800017 	ldw	r2,0(r2)
 401b27c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401b280:	e0bffc17 	ldw	r2,-16(fp)
 401b284:	10800104 	addi	r2,r2,4
 401b288:	10800037 	ldwio	r2,0(r2)
 401b28c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401b290:	e0bffd17 	ldw	r2,-12(fp)
 401b294:	1080c00c 	andi	r2,r2,768
 401b298:	10006d26 	beq	r2,zero,401b450 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401b29c:	e0bffd17 	ldw	r2,-12(fp)
 401b2a0:	1080400c 	andi	r2,r2,256
 401b2a4:	10003526 	beq	r2,zero,401b37c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401b2a8:	00800074 	movhi	r2,1
 401b2ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401b2b0:	e0bffb17 	ldw	r2,-20(fp)
 401b2b4:	10800a17 	ldw	r2,40(r2)
 401b2b8:	10800044 	addi	r2,r2,1
 401b2bc:	1081ffcc 	andi	r2,r2,2047
 401b2c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401b2c4:	e0bffb17 	ldw	r2,-20(fp)
 401b2c8:	10c00b17 	ldw	r3,44(r2)
 401b2cc:	e0bffe17 	ldw	r2,-8(fp)
 401b2d0:	18801526 	beq	r3,r2,401b328 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401b2d4:	e0bffc17 	ldw	r2,-16(fp)
 401b2d8:	10800037 	ldwio	r2,0(r2)
 401b2dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401b2e0:	e0bff917 	ldw	r2,-28(fp)
 401b2e4:	10a0000c 	andi	r2,r2,32768
 401b2e8:	10001126 	beq	r2,zero,401b330 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401b2ec:	e0bffb17 	ldw	r2,-20(fp)
 401b2f0:	10800a17 	ldw	r2,40(r2)
 401b2f4:	e0fff917 	ldw	r3,-28(fp)
 401b2f8:	1809883a 	mov	r4,r3
 401b2fc:	e0fffb17 	ldw	r3,-20(fp)
 401b300:	1885883a 	add	r2,r3,r2
 401b304:	10800e04 	addi	r2,r2,56
 401b308:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401b30c:	e0bffb17 	ldw	r2,-20(fp)
 401b310:	10800a17 	ldw	r2,40(r2)
 401b314:	10800044 	addi	r2,r2,1
 401b318:	10c1ffcc 	andi	r3,r2,2047
 401b31c:	e0bffb17 	ldw	r2,-20(fp)
 401b320:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401b324:	003fe206 	br	401b2b0 <__alt_mem_epcs_flash_controller_0+0xfb01a2b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401b328:	0001883a 	nop
 401b32c:	00000106 	br	401b334 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401b330:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401b334:	e0bff917 	ldw	r2,-28(fp)
 401b338:	10bfffec 	andhi	r2,r2,65535
 401b33c:	10000f26 	beq	r2,zero,401b37c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401b340:	e0bffb17 	ldw	r2,-20(fp)
 401b344:	10c00817 	ldw	r3,32(r2)
 401b348:	00bfff84 	movi	r2,-2
 401b34c:	1886703a 	and	r3,r3,r2
 401b350:	e0bffb17 	ldw	r2,-20(fp)
 401b354:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401b358:	e0bffc17 	ldw	r2,-16(fp)
 401b35c:	10800104 	addi	r2,r2,4
 401b360:	1007883a 	mov	r3,r2
 401b364:	e0bffb17 	ldw	r2,-20(fp)
 401b368:	10800817 	ldw	r2,32(r2)
 401b36c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401b370:	e0bffc17 	ldw	r2,-16(fp)
 401b374:	10800104 	addi	r2,r2,4
 401b378:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401b37c:	e0bffd17 	ldw	r2,-12(fp)
 401b380:	1080800c 	andi	r2,r2,512
 401b384:	103fbe26 	beq	r2,zero,401b280 <__alt_mem_epcs_flash_controller_0+0xfb01a280>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401b388:	e0bffd17 	ldw	r2,-12(fp)
 401b38c:	1004d43a 	srli	r2,r2,16
 401b390:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401b394:	00001406 	br	401b3e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401b398:	e0bffc17 	ldw	r2,-16(fp)
 401b39c:	e0fffb17 	ldw	r3,-20(fp)
 401b3a0:	18c00d17 	ldw	r3,52(r3)
 401b3a4:	e13ffb17 	ldw	r4,-20(fp)
 401b3a8:	20c7883a 	add	r3,r4,r3
 401b3ac:	18c20e04 	addi	r3,r3,2104
 401b3b0:	18c00003 	ldbu	r3,0(r3)
 401b3b4:	18c03fcc 	andi	r3,r3,255
 401b3b8:	18c0201c 	xori	r3,r3,128
 401b3bc:	18ffe004 	addi	r3,r3,-128
 401b3c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401b3c4:	e0bffb17 	ldw	r2,-20(fp)
 401b3c8:	10800d17 	ldw	r2,52(r2)
 401b3cc:	10800044 	addi	r2,r2,1
 401b3d0:	10c1ffcc 	andi	r3,r2,2047
 401b3d4:	e0bffb17 	ldw	r2,-20(fp)
 401b3d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401b3dc:	e0bffa17 	ldw	r2,-24(fp)
 401b3e0:	10bfffc4 	addi	r2,r2,-1
 401b3e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401b3e8:	e0bffa17 	ldw	r2,-24(fp)
 401b3ec:	10000526 	beq	r2,zero,401b404 <altera_avalon_jtag_uart_irq+0x1a8>
 401b3f0:	e0bffb17 	ldw	r2,-20(fp)
 401b3f4:	10c00d17 	ldw	r3,52(r2)
 401b3f8:	e0bffb17 	ldw	r2,-20(fp)
 401b3fc:	10800c17 	ldw	r2,48(r2)
 401b400:	18bfe51e 	bne	r3,r2,401b398 <__alt_mem_epcs_flash_controller_0+0xfb01a398>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401b404:	e0bffa17 	ldw	r2,-24(fp)
 401b408:	103f9d26 	beq	r2,zero,401b280 <__alt_mem_epcs_flash_controller_0+0xfb01a280>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401b40c:	e0bffb17 	ldw	r2,-20(fp)
 401b410:	10c00817 	ldw	r3,32(r2)
 401b414:	00bfff44 	movi	r2,-3
 401b418:	1886703a 	and	r3,r3,r2
 401b41c:	e0bffb17 	ldw	r2,-20(fp)
 401b420:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401b424:	e0bffb17 	ldw	r2,-20(fp)
 401b428:	10800017 	ldw	r2,0(r2)
 401b42c:	10800104 	addi	r2,r2,4
 401b430:	1007883a 	mov	r3,r2
 401b434:	e0bffb17 	ldw	r2,-20(fp)
 401b438:	10800817 	ldw	r2,32(r2)
 401b43c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401b440:	e0bffc17 	ldw	r2,-16(fp)
 401b444:	10800104 	addi	r2,r2,4
 401b448:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401b44c:	003f8c06 	br	401b280 <__alt_mem_epcs_flash_controller_0+0xfb01a280>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401b450:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401b454:	0001883a 	nop
 401b458:	e037883a 	mov	sp,fp
 401b45c:	df000017 	ldw	fp,0(sp)
 401b460:	dec00104 	addi	sp,sp,4
 401b464:	f800283a 	ret

0401b468 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401b468:	defff804 	addi	sp,sp,-32
 401b46c:	df000715 	stw	fp,28(sp)
 401b470:	df000704 	addi	fp,sp,28
 401b474:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401b478:	e0bffb17 	ldw	r2,-20(fp)
 401b47c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401b480:	e0bff917 	ldw	r2,-28(fp)
 401b484:	10800017 	ldw	r2,0(r2)
 401b488:	10800104 	addi	r2,r2,4
 401b48c:	10800037 	ldwio	r2,0(r2)
 401b490:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401b494:	e0bffa17 	ldw	r2,-24(fp)
 401b498:	1081000c 	andi	r2,r2,1024
 401b49c:	10000b26 	beq	r2,zero,401b4cc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401b4a0:	e0bff917 	ldw	r2,-28(fp)
 401b4a4:	10800017 	ldw	r2,0(r2)
 401b4a8:	10800104 	addi	r2,r2,4
 401b4ac:	1007883a 	mov	r3,r2
 401b4b0:	e0bff917 	ldw	r2,-28(fp)
 401b4b4:	10800817 	ldw	r2,32(r2)
 401b4b8:	10810014 	ori	r2,r2,1024
 401b4bc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401b4c0:	e0bff917 	ldw	r2,-28(fp)
 401b4c4:	10000915 	stw	zero,36(r2)
 401b4c8:	00000a06 	br	401b4f4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401b4cc:	e0bff917 	ldw	r2,-28(fp)
 401b4d0:	10c00917 	ldw	r3,36(r2)
 401b4d4:	00a00034 	movhi	r2,32768
 401b4d8:	10bfff04 	addi	r2,r2,-4
 401b4dc:	10c00536 	bltu	r2,r3,401b4f4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401b4e0:	e0bff917 	ldw	r2,-28(fp)
 401b4e4:	10800917 	ldw	r2,36(r2)
 401b4e8:	10c00044 	addi	r3,r2,1
 401b4ec:	e0bff917 	ldw	r2,-28(fp)
 401b4f0:	10c00915 	stw	r3,36(r2)
 401b4f4:	d0a02117 	ldw	r2,-32636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401b4f8:	e037883a 	mov	sp,fp
 401b4fc:	df000017 	ldw	fp,0(sp)
 401b500:	dec00104 	addi	sp,sp,4
 401b504:	f800283a 	ret

0401b508 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401b508:	defffd04 	addi	sp,sp,-12
 401b50c:	df000215 	stw	fp,8(sp)
 401b510:	df000204 	addi	fp,sp,8
 401b514:	e13ffe15 	stw	r4,-8(fp)
 401b518:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401b51c:	00000506 	br	401b534 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401b520:	e0bfff17 	ldw	r2,-4(fp)
 401b524:	1090000c 	andi	r2,r2,16384
 401b528:	10000226 	beq	r2,zero,401b534 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401b52c:	00bffd44 	movi	r2,-11
 401b530:	00000b06 	br	401b560 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401b534:	e0bffe17 	ldw	r2,-8(fp)
 401b538:	10c00d17 	ldw	r3,52(r2)
 401b53c:	e0bffe17 	ldw	r2,-8(fp)
 401b540:	10800c17 	ldw	r2,48(r2)
 401b544:	18800526 	beq	r3,r2,401b55c <altera_avalon_jtag_uart_close+0x54>
 401b548:	e0bffe17 	ldw	r2,-8(fp)
 401b54c:	10c00917 	ldw	r3,36(r2)
 401b550:	e0bffe17 	ldw	r2,-8(fp)
 401b554:	10800117 	ldw	r2,4(r2)
 401b558:	18bff136 	bltu	r3,r2,401b520 <__alt_mem_epcs_flash_controller_0+0xfb01a520>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401b55c:	0005883a 	mov	r2,zero
}
 401b560:	e037883a 	mov	sp,fp
 401b564:	df000017 	ldw	fp,0(sp)
 401b568:	dec00104 	addi	sp,sp,4
 401b56c:	f800283a 	ret

0401b570 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401b570:	defffa04 	addi	sp,sp,-24
 401b574:	df000515 	stw	fp,20(sp)
 401b578:	df000504 	addi	fp,sp,20
 401b57c:	e13ffd15 	stw	r4,-12(fp)
 401b580:	e17ffe15 	stw	r5,-8(fp)
 401b584:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401b588:	00bff9c4 	movi	r2,-25
 401b58c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401b590:	e0bffe17 	ldw	r2,-8(fp)
 401b594:	10da8060 	cmpeqi	r3,r2,27137
 401b598:	1800031e 	bne	r3,zero,401b5a8 <altera_avalon_jtag_uart_ioctl+0x38>
 401b59c:	109a80a0 	cmpeqi	r2,r2,27138
 401b5a0:	1000181e 	bne	r2,zero,401b604 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401b5a4:	00002906 	br	401b64c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401b5a8:	e0bffd17 	ldw	r2,-12(fp)
 401b5ac:	10c00117 	ldw	r3,4(r2)
 401b5b0:	00a00034 	movhi	r2,32768
 401b5b4:	10bfffc4 	addi	r2,r2,-1
 401b5b8:	18802126 	beq	r3,r2,401b640 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401b5bc:	e0bfff17 	ldw	r2,-4(fp)
 401b5c0:	10800017 	ldw	r2,0(r2)
 401b5c4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401b5c8:	e0bffc17 	ldw	r2,-16(fp)
 401b5cc:	10800090 	cmplti	r2,r2,2
 401b5d0:	1000061e 	bne	r2,zero,401b5ec <altera_avalon_jtag_uart_ioctl+0x7c>
 401b5d4:	e0fffc17 	ldw	r3,-16(fp)
 401b5d8:	00a00034 	movhi	r2,32768
 401b5dc:	10bfffc4 	addi	r2,r2,-1
 401b5e0:	18800226 	beq	r3,r2,401b5ec <altera_avalon_jtag_uart_ioctl+0x7c>
 401b5e4:	e0bffc17 	ldw	r2,-16(fp)
 401b5e8:	00000206 	br	401b5f4 <altera_avalon_jtag_uart_ioctl+0x84>
 401b5ec:	00a00034 	movhi	r2,32768
 401b5f0:	10bfff84 	addi	r2,r2,-2
 401b5f4:	e0fffd17 	ldw	r3,-12(fp)
 401b5f8:	18800115 	stw	r2,4(r3)
      rc = 0;
 401b5fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401b600:	00000f06 	br	401b640 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401b604:	e0bffd17 	ldw	r2,-12(fp)
 401b608:	10c00117 	ldw	r3,4(r2)
 401b60c:	00a00034 	movhi	r2,32768
 401b610:	10bfffc4 	addi	r2,r2,-1
 401b614:	18800c26 	beq	r3,r2,401b648 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401b618:	e0bffd17 	ldw	r2,-12(fp)
 401b61c:	10c00917 	ldw	r3,36(r2)
 401b620:	e0bffd17 	ldw	r2,-12(fp)
 401b624:	10800117 	ldw	r2,4(r2)
 401b628:	1885803a 	cmpltu	r2,r3,r2
 401b62c:	10c03fcc 	andi	r3,r2,255
 401b630:	e0bfff17 	ldw	r2,-4(fp)
 401b634:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401b638:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401b63c:	00000206 	br	401b648 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401b640:	0001883a 	nop
 401b644:	00000106 	br	401b64c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401b648:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401b64c:	e0bffb17 	ldw	r2,-20(fp)
}
 401b650:	e037883a 	mov	sp,fp
 401b654:	df000017 	ldw	fp,0(sp)
 401b658:	dec00104 	addi	sp,sp,4
 401b65c:	f800283a 	ret

0401b660 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401b660:	defff304 	addi	sp,sp,-52
 401b664:	dfc00c15 	stw	ra,48(sp)
 401b668:	df000b15 	stw	fp,44(sp)
 401b66c:	df000b04 	addi	fp,sp,44
 401b670:	e13ffc15 	stw	r4,-16(fp)
 401b674:	e17ffd15 	stw	r5,-12(fp)
 401b678:	e1bffe15 	stw	r6,-8(fp)
 401b67c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401b680:	e0bffd17 	ldw	r2,-12(fp)
 401b684:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401b688:	00004706 	br	401b7a8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401b68c:	e0bffc17 	ldw	r2,-16(fp)
 401b690:	10800a17 	ldw	r2,40(r2)
 401b694:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401b698:	e0bffc17 	ldw	r2,-16(fp)
 401b69c:	10800b17 	ldw	r2,44(r2)
 401b6a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401b6a4:	e0fff717 	ldw	r3,-36(fp)
 401b6a8:	e0bff817 	ldw	r2,-32(fp)
 401b6ac:	18800536 	bltu	r3,r2,401b6c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401b6b0:	e0fff717 	ldw	r3,-36(fp)
 401b6b4:	e0bff817 	ldw	r2,-32(fp)
 401b6b8:	1885c83a 	sub	r2,r3,r2
 401b6bc:	e0bff615 	stw	r2,-40(fp)
 401b6c0:	00000406 	br	401b6d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401b6c4:	00c20004 	movi	r3,2048
 401b6c8:	e0bff817 	ldw	r2,-32(fp)
 401b6cc:	1885c83a 	sub	r2,r3,r2
 401b6d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401b6d4:	e0bff617 	ldw	r2,-40(fp)
 401b6d8:	10001e26 	beq	r2,zero,401b754 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401b6dc:	e0fffe17 	ldw	r3,-8(fp)
 401b6e0:	e0bff617 	ldw	r2,-40(fp)
 401b6e4:	1880022e 	bgeu	r3,r2,401b6f0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401b6e8:	e0bffe17 	ldw	r2,-8(fp)
 401b6ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401b6f0:	e0bffc17 	ldw	r2,-16(fp)
 401b6f4:	10c00e04 	addi	r3,r2,56
 401b6f8:	e0bff817 	ldw	r2,-32(fp)
 401b6fc:	1885883a 	add	r2,r3,r2
 401b700:	e1bff617 	ldw	r6,-40(fp)
 401b704:	100b883a 	mov	r5,r2
 401b708:	e13ff517 	ldw	r4,-44(fp)
 401b70c:	400c2dc0 	call	400c2dc <memcpy>
      ptr   += n;
 401b710:	e0fff517 	ldw	r3,-44(fp)
 401b714:	e0bff617 	ldw	r2,-40(fp)
 401b718:	1885883a 	add	r2,r3,r2
 401b71c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401b720:	e0fffe17 	ldw	r3,-8(fp)
 401b724:	e0bff617 	ldw	r2,-40(fp)
 401b728:	1885c83a 	sub	r2,r3,r2
 401b72c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401b730:	e0fff817 	ldw	r3,-32(fp)
 401b734:	e0bff617 	ldw	r2,-40(fp)
 401b738:	1885883a 	add	r2,r3,r2
 401b73c:	10c1ffcc 	andi	r3,r2,2047
 401b740:	e0bffc17 	ldw	r2,-16(fp)
 401b744:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401b748:	e0bffe17 	ldw	r2,-8(fp)
 401b74c:	00bfcf16 	blt	zero,r2,401b68c <__alt_mem_epcs_flash_controller_0+0xfb01a68c>
 401b750:	00000106 	br	401b758 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401b754:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401b758:	e0fff517 	ldw	r3,-44(fp)
 401b75c:	e0bffd17 	ldw	r2,-12(fp)
 401b760:	1880141e 	bne	r3,r2,401b7b4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401b764:	e0bfff17 	ldw	r2,-4(fp)
 401b768:	1090000c 	andi	r2,r2,16384
 401b76c:	1000131e 	bne	r2,zero,401b7bc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401b770:	0001883a 	nop
 401b774:	e0bffc17 	ldw	r2,-16(fp)
 401b778:	10c00a17 	ldw	r3,40(r2)
 401b77c:	e0bff717 	ldw	r2,-36(fp)
 401b780:	1880051e 	bne	r3,r2,401b798 <altera_avalon_jtag_uart_read+0x138>
 401b784:	e0bffc17 	ldw	r2,-16(fp)
 401b788:	10c00917 	ldw	r3,36(r2)
 401b78c:	e0bffc17 	ldw	r2,-16(fp)
 401b790:	10800117 	ldw	r2,4(r2)
 401b794:	18bff736 	bltu	r3,r2,401b774 <__alt_mem_epcs_flash_controller_0+0xfb01a774>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401b798:	e0bffc17 	ldw	r2,-16(fp)
 401b79c:	10c00a17 	ldw	r3,40(r2)
 401b7a0:	e0bff717 	ldw	r2,-36(fp)
 401b7a4:	18800726 	beq	r3,r2,401b7c4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401b7a8:	e0bffe17 	ldw	r2,-8(fp)
 401b7ac:	00bfb716 	blt	zero,r2,401b68c <__alt_mem_epcs_flash_controller_0+0xfb01a68c>
 401b7b0:	00000506 	br	401b7c8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401b7b4:	0001883a 	nop
 401b7b8:	00000306 	br	401b7c8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401b7bc:	0001883a 	nop
 401b7c0:	00000106 	br	401b7c8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401b7c4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401b7c8:	e0fff517 	ldw	r3,-44(fp)
 401b7cc:	e0bffd17 	ldw	r2,-12(fp)
 401b7d0:	18801826 	beq	r3,r2,401b834 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b7d4:	0005303a 	rdctl	r2,status
 401b7d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b7dc:	e0fffb17 	ldw	r3,-20(fp)
 401b7e0:	00bfff84 	movi	r2,-2
 401b7e4:	1884703a 	and	r2,r3,r2
 401b7e8:	1001703a 	wrctl	status,r2
  
  return context;
 401b7ec:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401b7f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401b7f4:	e0bffc17 	ldw	r2,-16(fp)
 401b7f8:	10800817 	ldw	r2,32(r2)
 401b7fc:	10c00054 	ori	r3,r2,1
 401b800:	e0bffc17 	ldw	r2,-16(fp)
 401b804:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401b808:	e0bffc17 	ldw	r2,-16(fp)
 401b80c:	10800017 	ldw	r2,0(r2)
 401b810:	10800104 	addi	r2,r2,4
 401b814:	1007883a 	mov	r3,r2
 401b818:	e0bffc17 	ldw	r2,-16(fp)
 401b81c:	10800817 	ldw	r2,32(r2)
 401b820:	18800035 	stwio	r2,0(r3)
 401b824:	e0bffa17 	ldw	r2,-24(fp)
 401b828:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b82c:	e0bff917 	ldw	r2,-28(fp)
 401b830:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401b834:	e0fff517 	ldw	r3,-44(fp)
 401b838:	e0bffd17 	ldw	r2,-12(fp)
 401b83c:	18800426 	beq	r3,r2,401b850 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401b840:	e0fff517 	ldw	r3,-44(fp)
 401b844:	e0bffd17 	ldw	r2,-12(fp)
 401b848:	1885c83a 	sub	r2,r3,r2
 401b84c:	00000606 	br	401b868 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401b850:	e0bfff17 	ldw	r2,-4(fp)
 401b854:	1090000c 	andi	r2,r2,16384
 401b858:	10000226 	beq	r2,zero,401b864 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401b85c:	00bffd44 	movi	r2,-11
 401b860:	00000106 	br	401b868 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401b864:	00bffec4 	movi	r2,-5
}
 401b868:	e037883a 	mov	sp,fp
 401b86c:	dfc00117 	ldw	ra,4(sp)
 401b870:	df000017 	ldw	fp,0(sp)
 401b874:	dec00204 	addi	sp,sp,8
 401b878:	f800283a 	ret

0401b87c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401b87c:	defff304 	addi	sp,sp,-52
 401b880:	dfc00c15 	stw	ra,48(sp)
 401b884:	df000b15 	stw	fp,44(sp)
 401b888:	df000b04 	addi	fp,sp,44
 401b88c:	e13ffc15 	stw	r4,-16(fp)
 401b890:	e17ffd15 	stw	r5,-12(fp)
 401b894:	e1bffe15 	stw	r6,-8(fp)
 401b898:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401b89c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401b8a0:	e0bffd17 	ldw	r2,-12(fp)
 401b8a4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401b8a8:	00003706 	br	401b988 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401b8ac:	e0bffc17 	ldw	r2,-16(fp)
 401b8b0:	10800c17 	ldw	r2,48(r2)
 401b8b4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401b8b8:	e0bffc17 	ldw	r2,-16(fp)
 401b8bc:	10800d17 	ldw	r2,52(r2)
 401b8c0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401b8c4:	e0fff917 	ldw	r3,-28(fp)
 401b8c8:	e0bff517 	ldw	r2,-44(fp)
 401b8cc:	1880062e 	bgeu	r3,r2,401b8e8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401b8d0:	e0fff517 	ldw	r3,-44(fp)
 401b8d4:	e0bff917 	ldw	r2,-28(fp)
 401b8d8:	1885c83a 	sub	r2,r3,r2
 401b8dc:	10bfffc4 	addi	r2,r2,-1
 401b8e0:	e0bff615 	stw	r2,-40(fp)
 401b8e4:	00000b06 	br	401b914 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401b8e8:	e0bff517 	ldw	r2,-44(fp)
 401b8ec:	10000526 	beq	r2,zero,401b904 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401b8f0:	00c20004 	movi	r3,2048
 401b8f4:	e0bff917 	ldw	r2,-28(fp)
 401b8f8:	1885c83a 	sub	r2,r3,r2
 401b8fc:	e0bff615 	stw	r2,-40(fp)
 401b900:	00000406 	br	401b914 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401b904:	00c1ffc4 	movi	r3,2047
 401b908:	e0bff917 	ldw	r2,-28(fp)
 401b90c:	1885c83a 	sub	r2,r3,r2
 401b910:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401b914:	e0bff617 	ldw	r2,-40(fp)
 401b918:	10001e26 	beq	r2,zero,401b994 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401b91c:	e0fffe17 	ldw	r3,-8(fp)
 401b920:	e0bff617 	ldw	r2,-40(fp)
 401b924:	1880022e 	bgeu	r3,r2,401b930 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401b928:	e0bffe17 	ldw	r2,-8(fp)
 401b92c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401b930:	e0bffc17 	ldw	r2,-16(fp)
 401b934:	10c20e04 	addi	r3,r2,2104
 401b938:	e0bff917 	ldw	r2,-28(fp)
 401b93c:	1885883a 	add	r2,r3,r2
 401b940:	e1bff617 	ldw	r6,-40(fp)
 401b944:	e17ffd17 	ldw	r5,-12(fp)
 401b948:	1009883a 	mov	r4,r2
 401b94c:	400c2dc0 	call	400c2dc <memcpy>
      ptr   += n;
 401b950:	e0fffd17 	ldw	r3,-12(fp)
 401b954:	e0bff617 	ldw	r2,-40(fp)
 401b958:	1885883a 	add	r2,r3,r2
 401b95c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401b960:	e0fffe17 	ldw	r3,-8(fp)
 401b964:	e0bff617 	ldw	r2,-40(fp)
 401b968:	1885c83a 	sub	r2,r3,r2
 401b96c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401b970:	e0fff917 	ldw	r3,-28(fp)
 401b974:	e0bff617 	ldw	r2,-40(fp)
 401b978:	1885883a 	add	r2,r3,r2
 401b97c:	10c1ffcc 	andi	r3,r2,2047
 401b980:	e0bffc17 	ldw	r2,-16(fp)
 401b984:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401b988:	e0bffe17 	ldw	r2,-8(fp)
 401b98c:	00bfc716 	blt	zero,r2,401b8ac <__alt_mem_epcs_flash_controller_0+0xfb01a8ac>
 401b990:	00000106 	br	401b998 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401b994:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b998:	0005303a 	rdctl	r2,status
 401b99c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b9a0:	e0fffb17 	ldw	r3,-20(fp)
 401b9a4:	00bfff84 	movi	r2,-2
 401b9a8:	1884703a 	and	r2,r3,r2
 401b9ac:	1001703a 	wrctl	status,r2
  
  return context;
 401b9b0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401b9b4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401b9b8:	e0bffc17 	ldw	r2,-16(fp)
 401b9bc:	10800817 	ldw	r2,32(r2)
 401b9c0:	10c00094 	ori	r3,r2,2
 401b9c4:	e0bffc17 	ldw	r2,-16(fp)
 401b9c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401b9cc:	e0bffc17 	ldw	r2,-16(fp)
 401b9d0:	10800017 	ldw	r2,0(r2)
 401b9d4:	10800104 	addi	r2,r2,4
 401b9d8:	1007883a 	mov	r3,r2
 401b9dc:	e0bffc17 	ldw	r2,-16(fp)
 401b9e0:	10800817 	ldw	r2,32(r2)
 401b9e4:	18800035 	stwio	r2,0(r3)
 401b9e8:	e0bffa17 	ldw	r2,-24(fp)
 401b9ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b9f0:	e0bff817 	ldw	r2,-32(fp)
 401b9f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401b9f8:	e0bffe17 	ldw	r2,-8(fp)
 401b9fc:	0080100e 	bge	zero,r2,401ba40 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401ba00:	e0bfff17 	ldw	r2,-4(fp)
 401ba04:	1090000c 	andi	r2,r2,16384
 401ba08:	1000101e 	bne	r2,zero,401ba4c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401ba0c:	0001883a 	nop
 401ba10:	e0bffc17 	ldw	r2,-16(fp)
 401ba14:	10c00d17 	ldw	r3,52(r2)
 401ba18:	e0bff517 	ldw	r2,-44(fp)
 401ba1c:	1880051e 	bne	r3,r2,401ba34 <altera_avalon_jtag_uart_write+0x1b8>
 401ba20:	e0bffc17 	ldw	r2,-16(fp)
 401ba24:	10c00917 	ldw	r3,36(r2)
 401ba28:	e0bffc17 	ldw	r2,-16(fp)
 401ba2c:	10800117 	ldw	r2,4(r2)
 401ba30:	18bff736 	bltu	r3,r2,401ba10 <__alt_mem_epcs_flash_controller_0+0xfb01aa10>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401ba34:	e0bffc17 	ldw	r2,-16(fp)
 401ba38:	10800917 	ldw	r2,36(r2)
 401ba3c:	1000051e 	bne	r2,zero,401ba54 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401ba40:	e0bffe17 	ldw	r2,-8(fp)
 401ba44:	00bfd016 	blt	zero,r2,401b988 <__alt_mem_epcs_flash_controller_0+0xfb01a988>
 401ba48:	00000306 	br	401ba58 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401ba4c:	0001883a 	nop
 401ba50:	00000106 	br	401ba58 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401ba54:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401ba58:	e0fffd17 	ldw	r3,-12(fp)
 401ba5c:	e0bff717 	ldw	r2,-36(fp)
 401ba60:	18800426 	beq	r3,r2,401ba74 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401ba64:	e0fffd17 	ldw	r3,-12(fp)
 401ba68:	e0bff717 	ldw	r2,-36(fp)
 401ba6c:	1885c83a 	sub	r2,r3,r2
 401ba70:	00000606 	br	401ba8c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401ba74:	e0bfff17 	ldw	r2,-4(fp)
 401ba78:	1090000c 	andi	r2,r2,16384
 401ba7c:	10000226 	beq	r2,zero,401ba88 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401ba80:	00bffd44 	movi	r2,-11
 401ba84:	00000106 	br	401ba8c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401ba88:	00bffec4 	movi	r2,-5
}
 401ba8c:	e037883a 	mov	sp,fp
 401ba90:	dfc00117 	ldw	ra,4(sp)
 401ba94:	df000017 	ldw	fp,0(sp)
 401ba98:	dec00204 	addi	sp,sp,8
 401ba9c:	f800283a 	ret

0401baa0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401baa0:	defffa04 	addi	sp,sp,-24
 401baa4:	dfc00515 	stw	ra,20(sp)
 401baa8:	df000415 	stw	fp,16(sp)
 401baac:	df000404 	addi	fp,sp,16
 401bab0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401bab4:	0007883a 	mov	r3,zero
 401bab8:	e0bfff17 	ldw	r2,-4(fp)
 401babc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401bac0:	e0bfff17 	ldw	r2,-4(fp)
 401bac4:	10800104 	addi	r2,r2,4
 401bac8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bacc:	0005303a 	rdctl	r2,status
 401bad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bad4:	e0fffd17 	ldw	r3,-12(fp)
 401bad8:	00bfff84 	movi	r2,-2
 401badc:	1884703a 	and	r2,r3,r2
 401bae0:	1001703a 	wrctl	status,r2
  
  return context;
 401bae4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401bae8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401baec:	401a1f80 	call	401a1f8 <alt_tick>
 401baf0:	e0bffc17 	ldw	r2,-16(fp)
 401baf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401baf8:	e0bffe17 	ldw	r2,-8(fp)
 401bafc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401bb00:	0001883a 	nop
 401bb04:	e037883a 	mov	sp,fp
 401bb08:	dfc00117 	ldw	ra,4(sp)
 401bb0c:	df000017 	ldw	fp,0(sp)
 401bb10:	dec00204 	addi	sp,sp,8
 401bb14:	f800283a 	ret

0401bb18 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401bb18:	defff804 	addi	sp,sp,-32
 401bb1c:	dfc00715 	stw	ra,28(sp)
 401bb20:	df000615 	stw	fp,24(sp)
 401bb24:	df000604 	addi	fp,sp,24
 401bb28:	e13ffc15 	stw	r4,-16(fp)
 401bb2c:	e17ffd15 	stw	r5,-12(fp)
 401bb30:	e1bffe15 	stw	r6,-8(fp)
 401bb34:	e1ffff15 	stw	r7,-4(fp)
 401bb38:	e0bfff17 	ldw	r2,-4(fp)
 401bb3c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401bb40:	d0a02117 	ldw	r2,-32636(gp)
 401bb44:	1000021e 	bne	r2,zero,401bb50 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401bb48:	e0bffb17 	ldw	r2,-20(fp)
 401bb4c:	d0a02115 	stw	r2,-32636(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401bb50:	e0bffc17 	ldw	r2,-16(fp)
 401bb54:	10800104 	addi	r2,r2,4
 401bb58:	00c001c4 	movi	r3,7
 401bb5c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401bb60:	d8000015 	stw	zero,0(sp)
 401bb64:	e1fffc17 	ldw	r7,-16(fp)
 401bb68:	018100b4 	movhi	r6,1026
 401bb6c:	31aea804 	addi	r6,r6,-17760
 401bb70:	e17ffe17 	ldw	r5,-8(fp)
 401bb74:	e13ffd17 	ldw	r4,-12(fp)
 401bb78:	40199bc0 	call	40199bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401bb7c:	0001883a 	nop
 401bb80:	e037883a 	mov	sp,fp
 401bb84:	dfc00117 	ldw	ra,4(sp)
 401bb88:	df000017 	ldw	fp,0(sp)
 401bb8c:	dec00204 	addi	sp,sp,8
 401bb90:	f800283a 	ret

0401bb94 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 401bb94:	defff904 	addi	sp,sp,-28
 401bb98:	dfc00615 	stw	ra,24(sp)
 401bb9c:	df000515 	stw	fp,20(sp)
 401bba0:	df000504 	addi	fp,sp,20
 401bba4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 401bba8:	00800144 	movi	r2,5
 401bbac:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 401bbb0:	d8000215 	stw	zero,8(sp)
 401bbb4:	e0bffe44 	addi	r2,fp,-7
 401bbb8:	d8800115 	stw	r2,4(sp)
 401bbbc:	00800044 	movi	r2,1
 401bbc0:	d8800015 	stw	r2,0(sp)
 401bbc4:	e1fffe04 	addi	r7,fp,-8
 401bbc8:	01800044 	movi	r6,1
 401bbcc:	000b883a 	mov	r5,zero
 401bbd0:	e13fff17 	ldw	r4,-4(fp)
 401bbd4:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 401bbd8:	e0bffe43 	ldbu	r2,-7(fp)
}
 401bbdc:	e037883a 	mov	sp,fp
 401bbe0:	dfc00117 	ldw	ra,4(sp)
 401bbe4:	df000017 	ldw	fp,0(sp)
 401bbe8:	dec00204 	addi	sp,sp,8
 401bbec:	f800283a 	ret

0401bbf0 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 401bbf0:	defffd04 	addi	sp,sp,-12
 401bbf4:	dfc00215 	stw	ra,8(sp)
 401bbf8:	df000115 	stw	fp,4(sp)
 401bbfc:	df000104 	addi	fp,sp,4
 401bc00:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 401bc04:	e13fff17 	ldw	r4,-4(fp)
 401bc08:	401bb940 	call	401bb94 <epcs_read_status_register>
 401bc0c:	10803fcc 	andi	r2,r2,255
 401bc10:	1080004c 	andi	r2,r2,1
}
 401bc14:	e037883a 	mov	sp,fp
 401bc18:	dfc00117 	ldw	ra,4(sp)
 401bc1c:	df000017 	ldw	fp,0(sp)
 401bc20:	dec00204 	addi	sp,sp,8
 401bc24:	f800283a 	ret

0401bc28 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 401bc28:	defffd04 	addi	sp,sp,-12
 401bc2c:	dfc00215 	stw	ra,8(sp)
 401bc30:	df000115 	stw	fp,4(sp)
 401bc34:	df000104 	addi	fp,sp,4
 401bc38:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 401bc3c:	0001883a 	nop
 401bc40:	e13fff17 	ldw	r4,-4(fp)
 401bc44:	401bbf00 	call	401bbf0 <epcs_test_wip>
 401bc48:	103ffd1e 	bne	r2,zero,401bc40 <__alt_mem_epcs_flash_controller_0+0xfb01ac40>
  {
  }
}
 401bc4c:	0001883a 	nop
 401bc50:	e037883a 	mov	sp,fp
 401bc54:	dfc00117 	ldw	ra,4(sp)
 401bc58:	df000017 	ldw	fp,0(sp)
 401bc5c:	dec00204 	addi	sp,sp,8
 401bc60:	f800283a 	ret

0401bc64 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 401bc64:	defff604 	addi	sp,sp,-40
 401bc68:	dfc00915 	stw	ra,36(sp)
 401bc6c:	df000815 	stw	fp,32(sp)
 401bc70:	df000804 	addi	fp,sp,32
 401bc74:	e13ffd15 	stw	r4,-12(fp)
 401bc78:	e17ffe15 	stw	r5,-8(fp)
 401bc7c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 401bc80:	e0bfff17 	ldw	r2,-4(fp)
 401bc84:	10001226 	beq	r2,zero,401bcd0 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 401bc88:	00bff604 	movi	r2,-40
 401bc8c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 401bc90:	e0bffe17 	ldw	r2,-8(fp)
 401bc94:	1004d63a 	srli	r2,r2,24
 401bc98:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 401bc9c:	e0bffe17 	ldw	r2,-8(fp)
 401bca0:	1004d43a 	srli	r2,r2,16
 401bca4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 401bca8:	e0bffe17 	ldw	r2,-8(fp)
 401bcac:	1004d23a 	srli	r2,r2,8
 401bcb0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 401bcb4:	e0bffe17 	ldw	r2,-8(fp)
 401bcb8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 401bcbc:	00800144 	movi	r2,5
 401bcc0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 401bcc4:	e13ffd17 	ldw	r4,-12(fp)
 401bcc8:	401c1180 	call	401c118 <epcs_enter_4_bytes_mode>
 401bccc:	00000c06 	br	401bd00 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 401bcd0:	00bff604 	movi	r2,-40
 401bcd4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 401bcd8:	e0bffe17 	ldw	r2,-8(fp)
 401bcdc:	1004d43a 	srli	r2,r2,16
 401bce0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 401bce4:	e0bffe17 	ldw	r2,-8(fp)
 401bce8:	1004d23a 	srli	r2,r2,8
 401bcec:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 401bcf0:	e0bffe17 	ldw	r2,-8(fp)
 401bcf4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 401bcf8:	00800104 	movi	r2,4
 401bcfc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 401bd00:	e13ffd17 	ldw	r4,-12(fp)
 401bd04:	401be540 	call	401be54 <epcs_write_enable>

  alt_avalon_spi_command(
 401bd08:	e0bffb03 	ldbu	r2,-20(fp)
 401bd0c:	e0fffb44 	addi	r3,fp,-19
 401bd10:	d8000215 	stw	zero,8(sp)
 401bd14:	d8000115 	stw	zero,4(sp)
 401bd18:	d8000015 	stw	zero,0(sp)
 401bd1c:	180f883a 	mov	r7,r3
 401bd20:	100d883a 	mov	r6,r2
 401bd24:	000b883a 	mov	r5,zero
 401bd28:	e13ffd17 	ldw	r4,-12(fp)
 401bd2c:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 401bd30:	e13ffd17 	ldw	r4,-12(fp)
 401bd34:	401bc280 	call	401bc28 <epcs_await_wip_released>

  if(four_bytes_mode)
 401bd38:	e0bfff17 	ldw	r2,-4(fp)
 401bd3c:	10000226 	beq	r2,zero,401bd48 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 401bd40:	e13ffd17 	ldw	r4,-12(fp)
 401bd44:	401c1740 	call	401c174 <epcs_exit_4_bytes_mode>
  }
}
 401bd48:	0001883a 	nop
 401bd4c:	e037883a 	mov	sp,fp
 401bd50:	dfc00117 	ldw	ra,4(sp)
 401bd54:	df000017 	ldw	fp,0(sp)
 401bd58:	dec00204 	addi	sp,sp,8
 401bd5c:	f800283a 	ret

0401bd60 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 401bd60:	defff404 	addi	sp,sp,-48
 401bd64:	dfc00b15 	stw	ra,44(sp)
 401bd68:	df000a15 	stw	fp,40(sp)
 401bd6c:	df000a04 	addi	fp,sp,40
 401bd70:	e13ffc15 	stw	r4,-16(fp)
 401bd74:	e17ffd15 	stw	r5,-12(fp)
 401bd78:	e1bffe15 	stw	r6,-8(fp)
 401bd7c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 401bd80:	008000c4 	movi	r2,3
 401bd84:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 401bd88:	e0800217 	ldw	r2,8(fp)
 401bd8c:	10001026 	beq	r2,zero,401bdd0 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 401bd90:	e0bffd17 	ldw	r2,-12(fp)
 401bd94:	1004d63a 	srli	r2,r2,24
 401bd98:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 401bd9c:	e0bffd17 	ldw	r2,-12(fp)
 401bda0:	1005d43a 	srai	r2,r2,16
 401bda4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 401bda8:	e0bffd17 	ldw	r2,-12(fp)
 401bdac:	1005d23a 	srai	r2,r2,8
 401bdb0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 401bdb4:	e0bffd17 	ldw	r2,-12(fp)
 401bdb8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 401bdbc:	00800144 	movi	r2,5
 401bdc0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 401bdc4:	e13ffc17 	ldw	r4,-16(fp)
 401bdc8:	401c1180 	call	401c118 <epcs_enter_4_bytes_mode>
 401bdcc:	00000a06 	br	401bdf8 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 401bdd0:	e0bffd17 	ldw	r2,-12(fp)
 401bdd4:	1005d43a 	srai	r2,r2,16
 401bdd8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 401bddc:	e0bffd17 	ldw	r2,-12(fp)
 401bde0:	1005d23a 	srai	r2,r2,8
 401bde4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 401bde8:	e0bffd17 	ldw	r2,-12(fp)
 401bdec:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 401bdf0:	00800104 	movi	r2,4
 401bdf4:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 401bdf8:	e13ffc17 	ldw	r4,-16(fp)
 401bdfc:	401bc280 	call	401bc28 <epcs_await_wip_released>

  alt_avalon_spi_command(
 401be00:	e0bfff17 	ldw	r2,-4(fp)
 401be04:	e13ffa04 	addi	r4,fp,-24
 401be08:	d8000215 	stw	zero,8(sp)
 401be0c:	e0fffe17 	ldw	r3,-8(fp)
 401be10:	d8c00115 	stw	r3,4(sp)
 401be14:	d8800015 	stw	r2,0(sp)
 401be18:	200f883a 	mov	r7,r4
 401be1c:	e1bff917 	ldw	r6,-28(fp)
 401be20:	000b883a 	mov	r5,zero
 401be24:	e13ffc17 	ldw	r4,-16(fp)
 401be28:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 401be2c:	e0800217 	ldw	r2,8(fp)
 401be30:	10000226 	beq	r2,zero,401be3c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 401be34:	e13ffc17 	ldw	r4,-16(fp)
 401be38:	401c1740 	call	401c174 <epcs_exit_4_bytes_mode>
  }

  return length;
 401be3c:	e0bfff17 	ldw	r2,-4(fp)
}
 401be40:	e037883a 	mov	sp,fp
 401be44:	dfc00117 	ldw	ra,4(sp)
 401be48:	df000017 	ldw	fp,0(sp)
 401be4c:	dec00204 	addi	sp,sp,8
 401be50:	f800283a 	ret

0401be54 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 401be54:	defff904 	addi	sp,sp,-28
 401be58:	dfc00615 	stw	ra,24(sp)
 401be5c:	df000515 	stw	fp,20(sp)
 401be60:	df000504 	addi	fp,sp,20
 401be64:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 401be68:	00800184 	movi	r2,6
 401be6c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 401be70:	d8000215 	stw	zero,8(sp)
 401be74:	d8000115 	stw	zero,4(sp)
 401be78:	d8000015 	stw	zero,0(sp)
 401be7c:	e1fffe04 	addi	r7,fp,-8
 401be80:	01800044 	movi	r6,1
 401be84:	000b883a 	mov	r5,zero
 401be88:	e13fff17 	ldw	r4,-4(fp)
 401be8c:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 401be90:	0001883a 	nop
 401be94:	e037883a 	mov	sp,fp
 401be98:	dfc00117 	ldw	ra,4(sp)
 401be9c:	df000017 	ldw	fp,0(sp)
 401bea0:	dec00204 	addi	sp,sp,8
 401bea4:	f800283a 	ret

0401bea8 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 401bea8:	defff804 	addi	sp,sp,-32
 401beac:	dfc00715 	stw	ra,28(sp)
 401beb0:	df000615 	stw	fp,24(sp)
 401beb4:	df000604 	addi	fp,sp,24
 401beb8:	e13ffe15 	stw	r4,-8(fp)
 401bebc:	2805883a 	mov	r2,r5
 401bec0:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 401bec4:	00800044 	movi	r2,1
 401bec8:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 401becc:	e0bfff03 	ldbu	r2,-4(fp)
 401bed0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 401bed4:	d8000215 	stw	zero,8(sp)
 401bed8:	d8000115 	stw	zero,4(sp)
 401bedc:	d8000015 	stw	zero,0(sp)
 401bee0:	e1fffd04 	addi	r7,fp,-12
 401bee4:	01800084 	movi	r6,2
 401bee8:	000b883a 	mov	r5,zero
 401beec:	e13ffe17 	ldw	r4,-8(fp)
 401bef0:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 401bef4:	e13ffe17 	ldw	r4,-8(fp)
 401bef8:	401bc280 	call	401bc28 <epcs_await_wip_released>
}
 401befc:	0001883a 	nop
 401bf00:	e037883a 	mov	sp,fp
 401bf04:	dfc00117 	ldw	ra,4(sp)
 401bf08:	df000017 	ldw	fp,0(sp)
 401bf0c:	dec00204 	addi	sp,sp,8
 401bf10:	f800283a 	ret

0401bf14 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 401bf14:	defff404 	addi	sp,sp,-48
 401bf18:	dfc00b15 	stw	ra,44(sp)
 401bf1c:	df000a15 	stw	fp,40(sp)
 401bf20:	df000a04 	addi	fp,sp,40
 401bf24:	e13ffc15 	stw	r4,-16(fp)
 401bf28:	e17ffd15 	stw	r5,-12(fp)
 401bf2c:	e1bffe15 	stw	r6,-8(fp)
 401bf30:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 401bf34:	00800084 	movi	r2,2
 401bf38:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 401bf3c:	e0800217 	ldw	r2,8(fp)
 401bf40:	10001026 	beq	r2,zero,401bf84 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 401bf44:	e0bffd17 	ldw	r2,-12(fp)
 401bf48:	1004d63a 	srli	r2,r2,24
 401bf4c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 401bf50:	e0bffd17 	ldw	r2,-12(fp)
 401bf54:	1005d43a 	srai	r2,r2,16
 401bf58:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 401bf5c:	e0bffd17 	ldw	r2,-12(fp)
 401bf60:	1005d23a 	srai	r2,r2,8
 401bf64:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 401bf68:	e0bffd17 	ldw	r2,-12(fp)
 401bf6c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 401bf70:	00800144 	movi	r2,5
 401bf74:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 401bf78:	e13ffc17 	ldw	r4,-16(fp)
 401bf7c:	401c1180 	call	401c118 <epcs_enter_4_bytes_mode>
 401bf80:	00000a06 	br	401bfac <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 401bf84:	e0bffd17 	ldw	r2,-12(fp)
 401bf88:	1005d43a 	srai	r2,r2,16
 401bf8c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 401bf90:	e0bffd17 	ldw	r2,-12(fp)
 401bf94:	1005d23a 	srai	r2,r2,8
 401bf98:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 401bf9c:	e0bffd17 	ldw	r2,-12(fp)
 401bfa0:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 401bfa4:	00800104 	movi	r2,4
 401bfa8:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 401bfac:	e13ffc17 	ldw	r4,-16(fp)
 401bfb0:	401be540 	call	401be54 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 401bfb4:	e0fffa04 	addi	r3,fp,-24
 401bfb8:	00800044 	movi	r2,1
 401bfbc:	d8800215 	stw	r2,8(sp)
 401bfc0:	d8000115 	stw	zero,4(sp)
 401bfc4:	d8000015 	stw	zero,0(sp)
 401bfc8:	180f883a 	mov	r7,r3
 401bfcc:	e1bff917 	ldw	r6,-28(fp)
 401bfd0:	000b883a 	mov	r5,zero
 401bfd4:	e13ffc17 	ldw	r4,-16(fp)
 401bfd8:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 401bfdc:	e0bfff17 	ldw	r2,-4(fp)
 401bfe0:	d8000215 	stw	zero,8(sp)
 401bfe4:	d8000115 	stw	zero,4(sp)
 401bfe8:	d8000015 	stw	zero,0(sp)
 401bfec:	e1fffe17 	ldw	r7,-8(fp)
 401bff0:	100d883a 	mov	r6,r2
 401bff4:	000b883a 	mov	r5,zero
 401bff8:	e13ffc17 	ldw	r4,-16(fp)
 401bffc:	401cb040 	call	401cb04 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 401c000:	e13ffc17 	ldw	r4,-16(fp)
 401c004:	401bc280 	call	401bc28 <epcs_await_wip_released>

  if(four_bytes_mode)
 401c008:	e0800217 	ldw	r2,8(fp)
 401c00c:	10000226 	beq	r2,zero,401c018 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 401c010:	e13ffc17 	ldw	r4,-16(fp)
 401c014:	401c1740 	call	401c174 <epcs_exit_4_bytes_mode>
  }

  return length;
 401c018:	e0bfff17 	ldw	r2,-4(fp)
}
 401c01c:	e037883a 	mov	sp,fp
 401c020:	dfc00117 	ldw	ra,4(sp)
 401c024:	df000017 	ldw	fp,0(sp)
 401c028:	dec00204 	addi	sp,sp,8
 401c02c:	f800283a 	ret

0401c030 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 401c030:	defff804 	addi	sp,sp,-32
 401c034:	dfc00715 	stw	ra,28(sp)
 401c038:	df000615 	stw	fp,24(sp)
 401c03c:	df000604 	addi	fp,sp,24
 401c040:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 401c044:	00bfeac4 	movi	r2,-85
 401c048:	e0bffd05 	stb	r2,-12(fp)
 401c04c:	e03ffd45 	stb	zero,-11(fp)
 401c050:	e03ffd85 	stb	zero,-10(fp)
 401c054:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 401c058:	d8000215 	stw	zero,8(sp)
 401c05c:	e0bffe04 	addi	r2,fp,-8
 401c060:	d8800115 	stw	r2,4(sp)
 401c064:	00800044 	movi	r2,1
 401c068:	d8800015 	stw	r2,0(sp)
 401c06c:	e1fffd04 	addi	r7,fp,-12
 401c070:	01800104 	movi	r6,4
 401c074:	000b883a 	mov	r5,zero
 401c078:	e13fff17 	ldw	r4,-4(fp)
 401c07c:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 401c080:	e0bffe03 	ldbu	r2,-8(fp)
}
 401c084:	e037883a 	mov	sp,fp
 401c088:	dfc00117 	ldw	ra,4(sp)
 401c08c:	df000017 	ldw	fp,0(sp)
 401c090:	dec00204 	addi	sp,sp,8
 401c094:	f800283a 	ret

0401c098 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 401c098:	defff904 	addi	sp,sp,-28
 401c09c:	dfc00615 	stw	ra,24(sp)
 401c0a0:	df000515 	stw	fp,20(sp)
 401c0a4:	df000504 	addi	fp,sp,20
 401c0a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 401c0ac:	00bfe7c4 	movi	r2,-97
 401c0b0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 401c0b4:	d8000215 	stw	zero,8(sp)
 401c0b8:	e0bffe44 	addi	r2,fp,-7
 401c0bc:	d8800115 	stw	r2,4(sp)
 401c0c0:	008000c4 	movi	r2,3
 401c0c4:	d8800015 	stw	r2,0(sp)
 401c0c8:	e1fffe04 	addi	r7,fp,-8
 401c0cc:	01800044 	movi	r6,1
 401c0d0:	000b883a 	mov	r5,zero
 401c0d4:	e13fff17 	ldw	r4,-4(fp)
 401c0d8:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 401c0dc:	e0bffe43 	ldbu	r2,-7(fp)
 401c0e0:	10803fcc 	andi	r2,r2,255
 401c0e4:	1006943a 	slli	r3,r2,16
 401c0e8:	e0bffe83 	ldbu	r2,-6(fp)
 401c0ec:	10803fcc 	andi	r2,r2,255
 401c0f0:	1004923a 	slli	r2,r2,8
 401c0f4:	1886b03a 	or	r3,r3,r2
 401c0f8:	e0bffec3 	ldbu	r2,-5(fp)
 401c0fc:	10803fcc 	andi	r2,r2,255
 401c100:	1884b03a 	or	r2,r3,r2
}
 401c104:	e037883a 	mov	sp,fp
 401c108:	dfc00117 	ldw	ra,4(sp)
 401c10c:	df000017 	ldw	fp,0(sp)
 401c110:	dec00204 	addi	sp,sp,8
 401c114:	f800283a 	ret

0401c118 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 401c118:	defff904 	addi	sp,sp,-28
 401c11c:	dfc00615 	stw	ra,24(sp)
 401c120:	df000515 	stw	fp,20(sp)
 401c124:	df000504 	addi	fp,sp,20
 401c128:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 401c12c:	00bfedc4 	movi	r2,-73
 401c130:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 401c134:	e13fff17 	ldw	r4,-4(fp)
 401c138:	401be540 	call	401be54 <epcs_write_enable>

  alt_avalon_spi_command(
 401c13c:	d8000215 	stw	zero,8(sp)
 401c140:	d8000115 	stw	zero,4(sp)
 401c144:	d8000015 	stw	zero,0(sp)
 401c148:	e1fffe04 	addi	r7,fp,-8
 401c14c:	01800044 	movi	r6,1
 401c150:	000b883a 	mov	r5,zero
 401c154:	e13fff17 	ldw	r4,-4(fp)
 401c158:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 401c15c:	0001883a 	nop
}
 401c160:	e037883a 	mov	sp,fp
 401c164:	dfc00117 	ldw	ra,4(sp)
 401c168:	df000017 	ldw	fp,0(sp)
 401c16c:	dec00204 	addi	sp,sp,8
 401c170:	f800283a 	ret

0401c174 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 401c174:	defff904 	addi	sp,sp,-28
 401c178:	dfc00615 	stw	ra,24(sp)
 401c17c:	df000515 	stw	fp,20(sp)
 401c180:	df000504 	addi	fp,sp,20
 401c184:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 401c188:	00bffa44 	movi	r2,-23
 401c18c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 401c190:	e13fff17 	ldw	r4,-4(fp)
 401c194:	401be540 	call	401be54 <epcs_write_enable>

  alt_avalon_spi_command(
 401c198:	d8000215 	stw	zero,8(sp)
 401c19c:	d8000115 	stw	zero,4(sp)
 401c1a0:	d8000015 	stw	zero,0(sp)
 401c1a4:	e1fffe04 	addi	r7,fp,-8
 401c1a8:	01800044 	movi	r6,1
 401c1ac:	000b883a 	mov	r5,zero
 401c1b0:	e13fff17 	ldw	r4,-4(fp)
 401c1b4:	401cb040 	call	401cb04 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 401c1b8:	0001883a 	nop
}
 401c1bc:	e037883a 	mov	sp,fp
 401c1c0:	dfc00117 	ldw	ra,4(sp)
 401c1c4:	df000017 	ldw	fp,0(sp)
 401c1c8:	dec00204 	addi	sp,sp,8
 401c1cc:	f800283a 	ret

0401c1d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401c1d0:	defff504 	addi	sp,sp,-44
 401c1d4:	df000a15 	stw	fp,40(sp)
 401c1d8:	df000a04 	addi	fp,sp,40
 401c1dc:	e13ffc15 	stw	r4,-16(fp)
 401c1e0:	e17ffd15 	stw	r5,-12(fp)
 401c1e4:	e1bffe15 	stw	r6,-8(fp)
 401c1e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401c1ec:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401c1f0:	d0a02117 	ldw	r2,-32636(gp)
  
  if (alt_ticks_per_second ())
 401c1f4:	10003c26 	beq	r2,zero,401c2e8 <alt_alarm_start+0x118>
  {
    if (alarm)
 401c1f8:	e0bffc17 	ldw	r2,-16(fp)
 401c1fc:	10003826 	beq	r2,zero,401c2e0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401c200:	e0bffc17 	ldw	r2,-16(fp)
 401c204:	e0fffe17 	ldw	r3,-8(fp)
 401c208:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401c20c:	e0bffc17 	ldw	r2,-16(fp)
 401c210:	e0ffff17 	ldw	r3,-4(fp)
 401c214:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c218:	0005303a 	rdctl	r2,status
 401c21c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c220:	e0fff917 	ldw	r3,-28(fp)
 401c224:	00bfff84 	movi	r2,-2
 401c228:	1884703a 	and	r2,r3,r2
 401c22c:	1001703a 	wrctl	status,r2
  
  return context;
 401c230:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401c234:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401c238:	d0a02217 	ldw	r2,-32632(gp)
      
      current_nticks = alt_nticks();
 401c23c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401c240:	e0fffd17 	ldw	r3,-12(fp)
 401c244:	e0bff617 	ldw	r2,-40(fp)
 401c248:	1885883a 	add	r2,r3,r2
 401c24c:	10c00044 	addi	r3,r2,1
 401c250:	e0bffc17 	ldw	r2,-16(fp)
 401c254:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401c258:	e0bffc17 	ldw	r2,-16(fp)
 401c25c:	10c00217 	ldw	r3,8(r2)
 401c260:	e0bff617 	ldw	r2,-40(fp)
 401c264:	1880042e 	bgeu	r3,r2,401c278 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401c268:	e0bffc17 	ldw	r2,-16(fp)
 401c26c:	00c00044 	movi	r3,1
 401c270:	10c00405 	stb	r3,16(r2)
 401c274:	00000206 	br	401c280 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401c278:	e0bffc17 	ldw	r2,-16(fp)
 401c27c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401c280:	e0bffc17 	ldw	r2,-16(fp)
 401c284:	d0e01104 	addi	r3,gp,-32700
 401c288:	e0fffa15 	stw	r3,-24(fp)
 401c28c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401c290:	e0bffb17 	ldw	r2,-20(fp)
 401c294:	e0fffa17 	ldw	r3,-24(fp)
 401c298:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401c29c:	e0bffa17 	ldw	r2,-24(fp)
 401c2a0:	10c00017 	ldw	r3,0(r2)
 401c2a4:	e0bffb17 	ldw	r2,-20(fp)
 401c2a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401c2ac:	e0bffa17 	ldw	r2,-24(fp)
 401c2b0:	10800017 	ldw	r2,0(r2)
 401c2b4:	e0fffb17 	ldw	r3,-20(fp)
 401c2b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401c2bc:	e0bffa17 	ldw	r2,-24(fp)
 401c2c0:	e0fffb17 	ldw	r3,-20(fp)
 401c2c4:	10c00015 	stw	r3,0(r2)
 401c2c8:	e0bff817 	ldw	r2,-32(fp)
 401c2cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c2d0:	e0bff717 	ldw	r2,-36(fp)
 401c2d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401c2d8:	0005883a 	mov	r2,zero
 401c2dc:	00000306 	br	401c2ec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401c2e0:	00bffa84 	movi	r2,-22
 401c2e4:	00000106 	br	401c2ec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401c2e8:	00bfde84 	movi	r2,-134
  }
}
 401c2ec:	e037883a 	mov	sp,fp
 401c2f0:	df000017 	ldw	fp,0(sp)
 401c2f4:	dec00104 	addi	sp,sp,4
 401c2f8:	f800283a 	ret

0401c2fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401c2fc:	defffa04 	addi	sp,sp,-24
 401c300:	dfc00515 	stw	ra,20(sp)
 401c304:	df000415 	stw	fp,16(sp)
 401c308:	df000404 	addi	fp,sp,16
 401c30c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 401c310:	008000c4 	movi	r2,3
 401c314:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401c318:	e0fffd17 	ldw	r3,-12(fp)
 401c31c:	008003f4 	movhi	r2,15
 401c320:	10909004 	addi	r2,r2,16960
 401c324:	1885383a 	mul	r2,r3,r2
 401c328:	100b883a 	mov	r5,r2
 401c32c:	0101c9f4 	movhi	r4,1831
 401c330:	21038004 	addi	r4,r4,3584
 401c334:	40095800 	call	4009580 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401c338:	100b883a 	mov	r5,r2
 401c33c:	01200034 	movhi	r4,32768
 401c340:	213fffc4 	addi	r4,r4,-1
 401c344:	40095800 	call	4009580 <__udivsi3>
 401c348:	100b883a 	mov	r5,r2
 401c34c:	e13fff17 	ldw	r4,-4(fp)
 401c350:	40095800 	call	4009580 <__udivsi3>
 401c354:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401c358:	e0bffe17 	ldw	r2,-8(fp)
 401c35c:	10002a26 	beq	r2,zero,401c408 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401c360:	e03ffc15 	stw	zero,-16(fp)
 401c364:	00001706 	br	401c3c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401c368:	00a00034 	movhi	r2,32768
 401c36c:	10bfffc4 	addi	r2,r2,-1
 401c370:	10bfffc4 	addi	r2,r2,-1
 401c374:	103ffe1e 	bne	r2,zero,401c370 <__alt_mem_epcs_flash_controller_0+0xfb01b370>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401c378:	e0fffd17 	ldw	r3,-12(fp)
 401c37c:	008003f4 	movhi	r2,15
 401c380:	10909004 	addi	r2,r2,16960
 401c384:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401c388:	100b883a 	mov	r5,r2
 401c38c:	0101c9f4 	movhi	r4,1831
 401c390:	21038004 	addi	r4,r4,3584
 401c394:	40095800 	call	4009580 <__udivsi3>
 401c398:	100b883a 	mov	r5,r2
 401c39c:	01200034 	movhi	r4,32768
 401c3a0:	213fffc4 	addi	r4,r4,-1
 401c3a4:	40095800 	call	4009580 <__udivsi3>
 401c3a8:	1007883a 	mov	r3,r2
 401c3ac:	e0bfff17 	ldw	r2,-4(fp)
 401c3b0:	10c5c83a 	sub	r2,r2,r3
 401c3b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401c3b8:	e0bffc17 	ldw	r2,-16(fp)
 401c3bc:	10800044 	addi	r2,r2,1
 401c3c0:	e0bffc15 	stw	r2,-16(fp)
 401c3c4:	e0fffc17 	ldw	r3,-16(fp)
 401c3c8:	e0bffe17 	ldw	r2,-8(fp)
 401c3cc:	18bfe616 	blt	r3,r2,401c368 <__alt_mem_epcs_flash_controller_0+0xfb01b368>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401c3d0:	e0fffd17 	ldw	r3,-12(fp)
 401c3d4:	008003f4 	movhi	r2,15
 401c3d8:	10909004 	addi	r2,r2,16960
 401c3dc:	1885383a 	mul	r2,r3,r2
 401c3e0:	100b883a 	mov	r5,r2
 401c3e4:	0101c9f4 	movhi	r4,1831
 401c3e8:	21038004 	addi	r4,r4,3584
 401c3ec:	40095800 	call	4009580 <__udivsi3>
 401c3f0:	1007883a 	mov	r3,r2
 401c3f4:	e0bfff17 	ldw	r2,-4(fp)
 401c3f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401c3fc:	10bfffc4 	addi	r2,r2,-1
 401c400:	103ffe1e 	bne	r2,zero,401c3fc <__alt_mem_epcs_flash_controller_0+0xfb01b3fc>
 401c404:	00000d06 	br	401c43c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401c408:	e0fffd17 	ldw	r3,-12(fp)
 401c40c:	008003f4 	movhi	r2,15
 401c410:	10909004 	addi	r2,r2,16960
 401c414:	1885383a 	mul	r2,r3,r2
 401c418:	100b883a 	mov	r5,r2
 401c41c:	0101c9f4 	movhi	r4,1831
 401c420:	21038004 	addi	r4,r4,3584
 401c424:	40095800 	call	4009580 <__udivsi3>
 401c428:	1007883a 	mov	r3,r2
 401c42c:	e0bfff17 	ldw	r2,-4(fp)
 401c430:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401c434:	10bfffc4 	addi	r2,r2,-1
 401c438:	00bffe16 	blt	zero,r2,401c434 <__alt_mem_epcs_flash_controller_0+0xfb01b434>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401c43c:	0005883a 	mov	r2,zero
}
 401c440:	e037883a 	mov	sp,fp
 401c444:	dfc00117 	ldw	ra,4(sp)
 401c448:	df000017 	ldw	fp,0(sp)
 401c44c:	dec00204 	addi	sp,sp,8
 401c450:	f800283a 	ret

0401c454 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c454:	defffe04 	addi	sp,sp,-8
 401c458:	dfc00115 	stw	ra,4(sp)
 401c45c:	df000015 	stw	fp,0(sp)
 401c460:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c464:	d0a00e17 	ldw	r2,-32712(gp)
 401c468:	10000326 	beq	r2,zero,401c478 <alt_get_errno+0x24>
 401c46c:	d0a00e17 	ldw	r2,-32712(gp)
 401c470:	103ee83a 	callr	r2
 401c474:	00000106 	br	401c47c <alt_get_errno+0x28>
 401c478:	d0a01904 	addi	r2,gp,-32668
}
 401c47c:	e037883a 	mov	sp,fp
 401c480:	dfc00117 	ldw	ra,4(sp)
 401c484:	df000017 	ldw	fp,0(sp)
 401c488:	dec00204 	addi	sp,sp,8
 401c48c:	f800283a 	ret

0401c490 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401c490:	defffa04 	addi	sp,sp,-24
 401c494:	dfc00515 	stw	ra,20(sp)
 401c498:	df000415 	stw	fp,16(sp)
 401c49c:	df000404 	addi	fp,sp,16
 401c4a0:	e13ffe15 	stw	r4,-8(fp)
 401c4a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401c4a8:	e0bffe17 	ldw	r2,-8(fp)
 401c4ac:	10000326 	beq	r2,zero,401c4bc <alt_dev_llist_insert+0x2c>
 401c4b0:	e0bffe17 	ldw	r2,-8(fp)
 401c4b4:	10800217 	ldw	r2,8(r2)
 401c4b8:	1000061e 	bne	r2,zero,401c4d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401c4bc:	401c4540 	call	401c454 <alt_get_errno>
 401c4c0:	1007883a 	mov	r3,r2
 401c4c4:	00800584 	movi	r2,22
 401c4c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401c4cc:	00bffa84 	movi	r2,-22
 401c4d0:	00001306 	br	401c520 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401c4d4:	e0bffe17 	ldw	r2,-8(fp)
 401c4d8:	e0ffff17 	ldw	r3,-4(fp)
 401c4dc:	e0fffc15 	stw	r3,-16(fp)
 401c4e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401c4e4:	e0bffd17 	ldw	r2,-12(fp)
 401c4e8:	e0fffc17 	ldw	r3,-16(fp)
 401c4ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401c4f0:	e0bffc17 	ldw	r2,-16(fp)
 401c4f4:	10c00017 	ldw	r3,0(r2)
 401c4f8:	e0bffd17 	ldw	r2,-12(fp)
 401c4fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401c500:	e0bffc17 	ldw	r2,-16(fp)
 401c504:	10800017 	ldw	r2,0(r2)
 401c508:	e0fffd17 	ldw	r3,-12(fp)
 401c50c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401c510:	e0bffc17 	ldw	r2,-16(fp)
 401c514:	e0fffd17 	ldw	r3,-12(fp)
 401c518:	10c00015 	stw	r3,0(r2)

  return 0;  
 401c51c:	0005883a 	mov	r2,zero
}
 401c520:	e037883a 	mov	sp,fp
 401c524:	dfc00117 	ldw	ra,4(sp)
 401c528:	df000017 	ldw	fp,0(sp)
 401c52c:	dec00204 	addi	sp,sp,8
 401c530:	f800283a 	ret

0401c534 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401c534:	defffd04 	addi	sp,sp,-12
 401c538:	dfc00215 	stw	ra,8(sp)
 401c53c:	df000115 	stw	fp,4(sp)
 401c540:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401c544:	008100b4 	movhi	r2,1026
 401c548:	10b4b304 	addi	r2,r2,-11572
 401c54c:	e0bfff15 	stw	r2,-4(fp)
 401c550:	00000606 	br	401c56c <_do_ctors+0x38>
        (*ctor) (); 
 401c554:	e0bfff17 	ldw	r2,-4(fp)
 401c558:	10800017 	ldw	r2,0(r2)
 401c55c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401c560:	e0bfff17 	ldw	r2,-4(fp)
 401c564:	10bfff04 	addi	r2,r2,-4
 401c568:	e0bfff15 	stw	r2,-4(fp)
 401c56c:	e0ffff17 	ldw	r3,-4(fp)
 401c570:	008100b4 	movhi	r2,1026
 401c574:	10b4b404 	addi	r2,r2,-11568
 401c578:	18bff62e 	bgeu	r3,r2,401c554 <__alt_mem_epcs_flash_controller_0+0xfb01b554>
        (*ctor) (); 
}
 401c57c:	0001883a 	nop
 401c580:	e037883a 	mov	sp,fp
 401c584:	dfc00117 	ldw	ra,4(sp)
 401c588:	df000017 	ldw	fp,0(sp)
 401c58c:	dec00204 	addi	sp,sp,8
 401c590:	f800283a 	ret

0401c594 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401c594:	defffd04 	addi	sp,sp,-12
 401c598:	dfc00215 	stw	ra,8(sp)
 401c59c:	df000115 	stw	fp,4(sp)
 401c5a0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401c5a4:	008100b4 	movhi	r2,1026
 401c5a8:	10b4b304 	addi	r2,r2,-11572
 401c5ac:	e0bfff15 	stw	r2,-4(fp)
 401c5b0:	00000606 	br	401c5cc <_do_dtors+0x38>
        (*dtor) (); 
 401c5b4:	e0bfff17 	ldw	r2,-4(fp)
 401c5b8:	10800017 	ldw	r2,0(r2)
 401c5bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401c5c0:	e0bfff17 	ldw	r2,-4(fp)
 401c5c4:	10bfff04 	addi	r2,r2,-4
 401c5c8:	e0bfff15 	stw	r2,-4(fp)
 401c5cc:	e0ffff17 	ldw	r3,-4(fp)
 401c5d0:	008100b4 	movhi	r2,1026
 401c5d4:	10b4b404 	addi	r2,r2,-11568
 401c5d8:	18bff62e 	bgeu	r3,r2,401c5b4 <__alt_mem_epcs_flash_controller_0+0xfb01b5b4>
        (*dtor) (); 
}
 401c5dc:	0001883a 	nop
 401c5e0:	e037883a 	mov	sp,fp
 401c5e4:	dfc00117 	ldw	ra,4(sp)
 401c5e8:	df000017 	ldw	fp,0(sp)
 401c5ec:	dec00204 	addi	sp,sp,8
 401c5f0:	f800283a 	ret

0401c5f4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 401c5f4:	defffc04 	addi	sp,sp,-16
 401c5f8:	dfc00315 	stw	ra,12(sp)
 401c5fc:	df000215 	stw	fp,8(sp)
 401c600:	df000204 	addi	fp,sp,8
 401c604:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 401c608:	d1601304 	addi	r5,gp,-32692
 401c60c:	e13fff17 	ldw	r4,-4(fp)
 401c610:	401cd000 	call	401cd00 <alt_find_dev>
 401c614:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 401c618:	e0bffe17 	ldw	r2,-8(fp)
 401c61c:	10000926 	beq	r2,zero,401c644 <alt_flash_open_dev+0x50>
 401c620:	e0bffe17 	ldw	r2,-8(fp)
 401c624:	10800317 	ldw	r2,12(r2)
 401c628:	10000626 	beq	r2,zero,401c644 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 401c62c:	e0bffe17 	ldw	r2,-8(fp)
 401c630:	10800317 	ldw	r2,12(r2)
 401c634:	e17fff17 	ldw	r5,-4(fp)
 401c638:	e13ffe17 	ldw	r4,-8(fp)
 401c63c:	103ee83a 	callr	r2
 401c640:	00000106 	br	401c648 <alt_flash_open_dev+0x54>
  }

  return dev;
 401c644:	e0bffe17 	ldw	r2,-8(fp)
}
 401c648:	e037883a 	mov	sp,fp
 401c64c:	dfc00117 	ldw	ra,4(sp)
 401c650:	df000017 	ldw	fp,0(sp)
 401c654:	dec00204 	addi	sp,sp,8
 401c658:	f800283a 	ret

0401c65c <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 401c65c:	defffd04 	addi	sp,sp,-12
 401c660:	dfc00215 	stw	ra,8(sp)
 401c664:	df000115 	stw	fp,4(sp)
 401c668:	df000104 	addi	fp,sp,4
 401c66c:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 401c670:	e0bfff17 	ldw	r2,-4(fp)
 401c674:	10000826 	beq	r2,zero,401c698 <alt_flash_close_dev+0x3c>
 401c678:	e0bfff17 	ldw	r2,-4(fp)
 401c67c:	10800417 	ldw	r2,16(r2)
 401c680:	10000526 	beq	r2,zero,401c698 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 401c684:	e0bfff17 	ldw	r2,-4(fp)
 401c688:	10800417 	ldw	r2,16(r2)
 401c68c:	e13fff17 	ldw	r4,-4(fp)
 401c690:	103ee83a 	callr	r2
  }
  return;
 401c694:	0001883a 	nop
 401c698:	0001883a 	nop
}
 401c69c:	e037883a 	mov	sp,fp
 401c6a0:	dfc00117 	ldw	ra,4(sp)
 401c6a4:	df000017 	ldw	fp,0(sp)
 401c6a8:	dec00204 	addi	sp,sp,8
 401c6ac:	f800283a 	ret

0401c6b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401c6b0:	defffe04 	addi	sp,sp,-8
 401c6b4:	df000115 	stw	fp,4(sp)
 401c6b8:	df000104 	addi	fp,sp,4
 401c6bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401c6c0:	e0bfff17 	ldw	r2,-4(fp)
 401c6c4:	10bffe84 	addi	r2,r2,-6
 401c6c8:	10c00428 	cmpgeui	r3,r2,16
 401c6cc:	18001a1e 	bne	r3,zero,401c738 <alt_exception_cause_generated_bad_addr+0x88>
 401c6d0:	100690ba 	slli	r3,r2,2
 401c6d4:	008100b4 	movhi	r2,1026
 401c6d8:	10b1ba04 	addi	r2,r2,-14616
 401c6dc:	1885883a 	add	r2,r3,r2
 401c6e0:	10800017 	ldw	r2,0(r2)
 401c6e4:	1000683a 	jmp	r2
 401c6e8:	0401c728 	cmpgeui	r16,zero,1820
 401c6ec:	0401c728 	cmpgeui	r16,zero,1820
 401c6f0:	0401c738 	rdprs	r16,zero,1820
 401c6f4:	0401c738 	rdprs	r16,zero,1820
 401c6f8:	0401c738 	rdprs	r16,zero,1820
 401c6fc:	0401c728 	cmpgeui	r16,zero,1820
 401c700:	0401c730 	cmpltui	r16,zero,1820
 401c704:	0401c738 	rdprs	r16,zero,1820
 401c708:	0401c728 	cmpgeui	r16,zero,1820
 401c70c:	0401c728 	cmpgeui	r16,zero,1820
 401c710:	0401c738 	rdprs	r16,zero,1820
 401c714:	0401c728 	cmpgeui	r16,zero,1820
 401c718:	0401c730 	cmpltui	r16,zero,1820
 401c71c:	0401c738 	rdprs	r16,zero,1820
 401c720:	0401c738 	rdprs	r16,zero,1820
 401c724:	0401c728 	cmpgeui	r16,zero,1820
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401c728:	00800044 	movi	r2,1
 401c72c:	00000306 	br	401c73c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401c730:	0005883a 	mov	r2,zero
 401c734:	00000106 	br	401c73c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401c738:	0005883a 	mov	r2,zero
  }
}
 401c73c:	e037883a 	mov	sp,fp
 401c740:	df000017 	ldw	fp,0(sp)
 401c744:	dec00104 	addi	sp,sp,4
 401c748:	f800283a 	ret

0401c74c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401c74c:	defff904 	addi	sp,sp,-28
 401c750:	dfc00615 	stw	ra,24(sp)
 401c754:	df000515 	stw	fp,20(sp)
 401c758:	df000504 	addi	fp,sp,20
 401c75c:	e13ffc15 	stw	r4,-16(fp)
 401c760:	e17ffd15 	stw	r5,-12(fp)
 401c764:	e1bffe15 	stw	r6,-8(fp)
 401c768:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401c76c:	e1bfff17 	ldw	r6,-4(fp)
 401c770:	e17ffe17 	ldw	r5,-8(fp)
 401c774:	e13ffd17 	ldw	r4,-12(fp)
 401c778:	401c98c0 	call	401c98c <open>
 401c77c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 401c780:	e0bffb17 	ldw	r2,-20(fp)
 401c784:	10001c16 	blt	r2,zero,401c7f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 401c788:	00810234 	movhi	r2,1032
 401c78c:	10b99504 	addi	r2,r2,-6572
 401c790:	e0fffb17 	ldw	r3,-20(fp)
 401c794:	18c00324 	muli	r3,r3,12
 401c798:	10c5883a 	add	r2,r2,r3
 401c79c:	10c00017 	ldw	r3,0(r2)
 401c7a0:	e0bffc17 	ldw	r2,-16(fp)
 401c7a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401c7a8:	00810234 	movhi	r2,1032
 401c7ac:	10b99504 	addi	r2,r2,-6572
 401c7b0:	e0fffb17 	ldw	r3,-20(fp)
 401c7b4:	18c00324 	muli	r3,r3,12
 401c7b8:	10c5883a 	add	r2,r2,r3
 401c7bc:	10800104 	addi	r2,r2,4
 401c7c0:	10c00017 	ldw	r3,0(r2)
 401c7c4:	e0bffc17 	ldw	r2,-16(fp)
 401c7c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401c7cc:	00810234 	movhi	r2,1032
 401c7d0:	10b99504 	addi	r2,r2,-6572
 401c7d4:	e0fffb17 	ldw	r3,-20(fp)
 401c7d8:	18c00324 	muli	r3,r3,12
 401c7dc:	10c5883a 	add	r2,r2,r3
 401c7e0:	10800204 	addi	r2,r2,8
 401c7e4:	10c00017 	ldw	r3,0(r2)
 401c7e8:	e0bffc17 	ldw	r2,-16(fp)
 401c7ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401c7f0:	e13ffb17 	ldw	r4,-20(fp)
 401c7f4:	401a0480 	call	401a048 <alt_release_fd>
  }
} 
 401c7f8:	0001883a 	nop
 401c7fc:	e037883a 	mov	sp,fp
 401c800:	dfc00117 	ldw	ra,4(sp)
 401c804:	df000017 	ldw	fp,0(sp)
 401c808:	dec00204 	addi	sp,sp,8
 401c80c:	f800283a 	ret

0401c810 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401c810:	defffb04 	addi	sp,sp,-20
 401c814:	dfc00415 	stw	ra,16(sp)
 401c818:	df000315 	stw	fp,12(sp)
 401c81c:	df000304 	addi	fp,sp,12
 401c820:	e13ffd15 	stw	r4,-12(fp)
 401c824:	e17ffe15 	stw	r5,-8(fp)
 401c828:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401c82c:	01c07fc4 	movi	r7,511
 401c830:	01800044 	movi	r6,1
 401c834:	e17ffd17 	ldw	r5,-12(fp)
 401c838:	01010234 	movhi	r4,1032
 401c83c:	21399804 	addi	r4,r4,-6560
 401c840:	401c74c0 	call	401c74c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401c844:	01c07fc4 	movi	r7,511
 401c848:	000d883a 	mov	r6,zero
 401c84c:	e17ffe17 	ldw	r5,-8(fp)
 401c850:	01010234 	movhi	r4,1032
 401c854:	21399504 	addi	r4,r4,-6572
 401c858:	401c74c0 	call	401c74c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401c85c:	01c07fc4 	movi	r7,511
 401c860:	01800044 	movi	r6,1
 401c864:	e17fff17 	ldw	r5,-4(fp)
 401c868:	01010234 	movhi	r4,1032
 401c86c:	21399b04 	addi	r4,r4,-6548
 401c870:	401c74c0 	call	401c74c <alt_open_fd>
}  
 401c874:	0001883a 	nop
 401c878:	e037883a 	mov	sp,fp
 401c87c:	dfc00117 	ldw	ra,4(sp)
 401c880:	df000017 	ldw	fp,0(sp)
 401c884:	dec00204 	addi	sp,sp,8
 401c888:	f800283a 	ret

0401c88c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c88c:	defffe04 	addi	sp,sp,-8
 401c890:	dfc00115 	stw	ra,4(sp)
 401c894:	df000015 	stw	fp,0(sp)
 401c898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c89c:	d0a00e17 	ldw	r2,-32712(gp)
 401c8a0:	10000326 	beq	r2,zero,401c8b0 <alt_get_errno+0x24>
 401c8a4:	d0a00e17 	ldw	r2,-32712(gp)
 401c8a8:	103ee83a 	callr	r2
 401c8ac:	00000106 	br	401c8b4 <alt_get_errno+0x28>
 401c8b0:	d0a01904 	addi	r2,gp,-32668
}
 401c8b4:	e037883a 	mov	sp,fp
 401c8b8:	dfc00117 	ldw	ra,4(sp)
 401c8bc:	df000017 	ldw	fp,0(sp)
 401c8c0:	dec00204 	addi	sp,sp,8
 401c8c4:	f800283a 	ret

0401c8c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401c8c8:	defffd04 	addi	sp,sp,-12
 401c8cc:	df000215 	stw	fp,8(sp)
 401c8d0:	df000204 	addi	fp,sp,8
 401c8d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401c8d8:	e0bfff17 	ldw	r2,-4(fp)
 401c8dc:	10800217 	ldw	r2,8(r2)
 401c8e0:	10d00034 	orhi	r3,r2,16384
 401c8e4:	e0bfff17 	ldw	r2,-4(fp)
 401c8e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401c8ec:	e03ffe15 	stw	zero,-8(fp)
 401c8f0:	00001d06 	br	401c968 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401c8f4:	00810234 	movhi	r2,1032
 401c8f8:	10b99504 	addi	r2,r2,-6572
 401c8fc:	e0fffe17 	ldw	r3,-8(fp)
 401c900:	18c00324 	muli	r3,r3,12
 401c904:	10c5883a 	add	r2,r2,r3
 401c908:	10c00017 	ldw	r3,0(r2)
 401c90c:	e0bfff17 	ldw	r2,-4(fp)
 401c910:	10800017 	ldw	r2,0(r2)
 401c914:	1880111e 	bne	r3,r2,401c95c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401c918:	00810234 	movhi	r2,1032
 401c91c:	10b99504 	addi	r2,r2,-6572
 401c920:	e0fffe17 	ldw	r3,-8(fp)
 401c924:	18c00324 	muli	r3,r3,12
 401c928:	10c5883a 	add	r2,r2,r3
 401c92c:	10800204 	addi	r2,r2,8
 401c930:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401c934:	1000090e 	bge	r2,zero,401c95c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401c938:	e0bffe17 	ldw	r2,-8(fp)
 401c93c:	10c00324 	muli	r3,r2,12
 401c940:	00810234 	movhi	r2,1032
 401c944:	10b99504 	addi	r2,r2,-6572
 401c948:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401c94c:	e0bfff17 	ldw	r2,-4(fp)
 401c950:	18800226 	beq	r3,r2,401c95c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401c954:	00bffcc4 	movi	r2,-13
 401c958:	00000806 	br	401c97c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401c95c:	e0bffe17 	ldw	r2,-8(fp)
 401c960:	10800044 	addi	r2,r2,1
 401c964:	e0bffe15 	stw	r2,-8(fp)
 401c968:	d0a00d17 	ldw	r2,-32716(gp)
 401c96c:	1007883a 	mov	r3,r2
 401c970:	e0bffe17 	ldw	r2,-8(fp)
 401c974:	18bfdf2e 	bgeu	r3,r2,401c8f4 <__alt_mem_epcs_flash_controller_0+0xfb01b8f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401c978:	0005883a 	mov	r2,zero
}
 401c97c:	e037883a 	mov	sp,fp
 401c980:	df000017 	ldw	fp,0(sp)
 401c984:	dec00104 	addi	sp,sp,4
 401c988:	f800283a 	ret

0401c98c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401c98c:	defff604 	addi	sp,sp,-40
 401c990:	dfc00915 	stw	ra,36(sp)
 401c994:	df000815 	stw	fp,32(sp)
 401c998:	df000804 	addi	fp,sp,32
 401c99c:	e13ffd15 	stw	r4,-12(fp)
 401c9a0:	e17ffe15 	stw	r5,-8(fp)
 401c9a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401c9a8:	00bfffc4 	movi	r2,-1
 401c9ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401c9b0:	00bffb44 	movi	r2,-19
 401c9b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401c9b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401c9bc:	d1600b04 	addi	r5,gp,-32724
 401c9c0:	e13ffd17 	ldw	r4,-12(fp)
 401c9c4:	401cd000 	call	401cd00 <alt_find_dev>
 401c9c8:	e0bff815 	stw	r2,-32(fp)
 401c9cc:	e0bff817 	ldw	r2,-32(fp)
 401c9d0:	1000051e 	bne	r2,zero,401c9e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401c9d4:	e13ffd17 	ldw	r4,-12(fp)
 401c9d8:	401cd900 	call	401cd90 <alt_find_file>
 401c9dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401c9e0:	00800044 	movi	r2,1
 401c9e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401c9e8:	e0bff817 	ldw	r2,-32(fp)
 401c9ec:	10002926 	beq	r2,zero,401ca94 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401c9f0:	e13ff817 	ldw	r4,-32(fp)
 401c9f4:	401ce980 	call	401ce98 <alt_get_fd>
 401c9f8:	e0bff915 	stw	r2,-28(fp)
 401c9fc:	e0bff917 	ldw	r2,-28(fp)
 401ca00:	1000030e 	bge	r2,zero,401ca10 <open+0x84>
    {
      status = index;
 401ca04:	e0bff917 	ldw	r2,-28(fp)
 401ca08:	e0bffa15 	stw	r2,-24(fp)
 401ca0c:	00002306 	br	401ca9c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401ca10:	e0bff917 	ldw	r2,-28(fp)
 401ca14:	10c00324 	muli	r3,r2,12
 401ca18:	00810234 	movhi	r2,1032
 401ca1c:	10b99504 	addi	r2,r2,-6572
 401ca20:	1885883a 	add	r2,r3,r2
 401ca24:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401ca28:	e0fffe17 	ldw	r3,-8(fp)
 401ca2c:	00900034 	movhi	r2,16384
 401ca30:	10bfffc4 	addi	r2,r2,-1
 401ca34:	1886703a 	and	r3,r3,r2
 401ca38:	e0bffc17 	ldw	r2,-16(fp)
 401ca3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401ca40:	e0bffb17 	ldw	r2,-20(fp)
 401ca44:	1000051e 	bne	r2,zero,401ca5c <open+0xd0>
 401ca48:	e13ffc17 	ldw	r4,-16(fp)
 401ca4c:	401c8c80 	call	401c8c8 <alt_file_locked>
 401ca50:	e0bffa15 	stw	r2,-24(fp)
 401ca54:	e0bffa17 	ldw	r2,-24(fp)
 401ca58:	10001016 	blt	r2,zero,401ca9c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401ca5c:	e0bff817 	ldw	r2,-32(fp)
 401ca60:	10800317 	ldw	r2,12(r2)
 401ca64:	10000826 	beq	r2,zero,401ca88 <open+0xfc>
 401ca68:	e0bff817 	ldw	r2,-32(fp)
 401ca6c:	10800317 	ldw	r2,12(r2)
 401ca70:	e1ffff17 	ldw	r7,-4(fp)
 401ca74:	e1bffe17 	ldw	r6,-8(fp)
 401ca78:	e17ffd17 	ldw	r5,-12(fp)
 401ca7c:	e13ffc17 	ldw	r4,-16(fp)
 401ca80:	103ee83a 	callr	r2
 401ca84:	00000106 	br	401ca8c <open+0x100>
 401ca88:	0005883a 	mov	r2,zero
 401ca8c:	e0bffa15 	stw	r2,-24(fp)
 401ca90:	00000206 	br	401ca9c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401ca94:	00bffb44 	movi	r2,-19
 401ca98:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401ca9c:	e0bffa17 	ldw	r2,-24(fp)
 401caa0:	1000090e 	bge	r2,zero,401cac8 <open+0x13c>
  {
    alt_release_fd (index);  
 401caa4:	e13ff917 	ldw	r4,-28(fp)
 401caa8:	401a0480 	call	401a048 <alt_release_fd>
    ALT_ERRNO = -status;
 401caac:	401c88c0 	call	401c88c <alt_get_errno>
 401cab0:	1007883a 	mov	r3,r2
 401cab4:	e0bffa17 	ldw	r2,-24(fp)
 401cab8:	0085c83a 	sub	r2,zero,r2
 401cabc:	18800015 	stw	r2,0(r3)
    return -1;
 401cac0:	00bfffc4 	movi	r2,-1
 401cac4:	00000106 	br	401cacc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401cac8:	e0bff917 	ldw	r2,-28(fp)
}
 401cacc:	e037883a 	mov	sp,fp
 401cad0:	dfc00117 	ldw	ra,4(sp)
 401cad4:	df000017 	ldw	fp,0(sp)
 401cad8:	dec00204 	addi	sp,sp,8
 401cadc:	f800283a 	ret

0401cae0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401cae0:	deffff04 	addi	sp,sp,-4
 401cae4:	df000015 	stw	fp,0(sp)
 401cae8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401caec:	000170fa 	wrctl	ienable,zero
}
 401caf0:	0001883a 	nop
 401caf4:	e037883a 	mov	sp,fp
 401caf8:	df000017 	ldw	fp,0(sp)
 401cafc:	dec00104 	addi	sp,sp,4
 401cb00:	f800283a 	ret

0401cb04 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401cb04:	defff404 	addi	sp,sp,-48
 401cb08:	df000b15 	stw	fp,44(sp)
 401cb0c:	df000b04 	addi	fp,sp,44
 401cb10:	e13ffc15 	stw	r4,-16(fp)
 401cb14:	e17ffd15 	stw	r5,-12(fp)
 401cb18:	e1bffe15 	stw	r6,-8(fp)
 401cb1c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401cb20:	e0ffff17 	ldw	r3,-4(fp)
 401cb24:	e0bffe17 	ldw	r2,-8(fp)
 401cb28:	1885883a 	add	r2,r3,r2
 401cb2c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401cb30:	e0c00217 	ldw	r3,8(fp)
 401cb34:	e0800117 	ldw	r2,4(fp)
 401cb38:	1885883a 	add	r2,r3,r2
 401cb3c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401cb40:	e0800117 	ldw	r2,4(fp)
 401cb44:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401cb48:	e0bffe17 	ldw	r2,-8(fp)
 401cb4c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401cb50:	00800044 	movi	r2,1
 401cb54:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401cb58:	e0bffc17 	ldw	r2,-16(fp)
 401cb5c:	10800504 	addi	r2,r2,20
 401cb60:	1009883a 	mov	r4,r2
 401cb64:	00c00044 	movi	r3,1
 401cb68:	e0bffd17 	ldw	r2,-12(fp)
 401cb6c:	1884983a 	sll	r2,r3,r2
 401cb70:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401cb74:	e0800317 	ldw	r2,12(fp)
 401cb78:	1080008c 	andi	r2,r2,2
 401cb7c:	1000051e 	bne	r2,zero,401cb94 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401cb80:	e0bffc17 	ldw	r2,-16(fp)
 401cb84:	10800304 	addi	r2,r2,12
 401cb88:	1007883a 	mov	r3,r2
 401cb8c:	00810004 	movi	r2,1024
 401cb90:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401cb94:	e0bffc17 	ldw	r2,-16(fp)
 401cb98:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401cb9c:	e0bffc17 	ldw	r2,-16(fp)
 401cba0:	10800204 	addi	r2,r2,8
 401cba4:	10800037 	ldwio	r2,0(r2)
 401cba8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401cbac:	e0bffa17 	ldw	r2,-24(fp)
 401cbb0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401cbb4:	10000226 	beq	r2,zero,401cbc0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401cbb8:	e0bff717 	ldw	r2,-36(fp)
 401cbbc:	1000031e 	bne	r2,zero,401cbcc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401cbc0:	e0bffa17 	ldw	r2,-24(fp)
 401cbc4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401cbc8:	103ff426 	beq	r2,zero,401cb9c <__alt_mem_epcs_flash_controller_0+0xfb01bb9c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401cbcc:	e0bffa17 	ldw	r2,-24(fp)
 401cbd0:	1080100c 	andi	r2,r2,64
 401cbd4:	10001e26 	beq	r2,zero,401cc50 <alt_avalon_spi_command+0x14c>
 401cbd8:	e0bff717 	ldw	r2,-36(fp)
 401cbdc:	00801c0e 	bge	zero,r2,401cc50 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401cbe0:	e0bff717 	ldw	r2,-36(fp)
 401cbe4:	10bfffc4 	addi	r2,r2,-1
 401cbe8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401cbec:	e0ffff17 	ldw	r3,-4(fp)
 401cbf0:	e0bff817 	ldw	r2,-32(fp)
 401cbf4:	18800a2e 	bgeu	r3,r2,401cc20 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401cbf8:	e0bffc17 	ldw	r2,-16(fp)
 401cbfc:	10800104 	addi	r2,r2,4
 401cc00:	1009883a 	mov	r4,r2
 401cc04:	e0bfff17 	ldw	r2,-4(fp)
 401cc08:	10c00044 	addi	r3,r2,1
 401cc0c:	e0ffff15 	stw	r3,-4(fp)
 401cc10:	10800003 	ldbu	r2,0(r2)
 401cc14:	10803fcc 	andi	r2,r2,255
 401cc18:	20800035 	stwio	r2,0(r4)
 401cc1c:	00000c06 	br	401cc50 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401cc20:	e0bff517 	ldw	r2,-44(fp)
 401cc24:	10000826 	beq	r2,zero,401cc48 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401cc28:	e0bff517 	ldw	r2,-44(fp)
 401cc2c:	10bfffc4 	addi	r2,r2,-1
 401cc30:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401cc34:	e0bffc17 	ldw	r2,-16(fp)
 401cc38:	10800104 	addi	r2,r2,4
 401cc3c:	0007883a 	mov	r3,zero
 401cc40:	10c00035 	stwio	r3,0(r2)
 401cc44:	00000206 	br	401cc50 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401cc48:	00bf0004 	movi	r2,-1024
 401cc4c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401cc50:	e0bffa17 	ldw	r2,-24(fp)
 401cc54:	1080200c 	andi	r2,r2,128
 401cc58:	103fd026 	beq	r2,zero,401cb9c <__alt_mem_epcs_flash_controller_0+0xfb01bb9c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401cc5c:	e0bffc17 	ldw	r2,-16(fp)
 401cc60:	10800037 	ldwio	r2,0(r2)
 401cc64:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401cc68:	e0bff617 	ldw	r2,-40(fp)
 401cc6c:	10000426 	beq	r2,zero,401cc80 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401cc70:	e0bff617 	ldw	r2,-40(fp)
 401cc74:	10bfffc4 	addi	r2,r2,-1
 401cc78:	e0bff615 	stw	r2,-40(fp)
 401cc7c:	00000506 	br	401cc94 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401cc80:	e0800217 	ldw	r2,8(fp)
 401cc84:	10c00044 	addi	r3,r2,1
 401cc88:	e0c00215 	stw	r3,8(fp)
 401cc8c:	e0fffb17 	ldw	r3,-20(fp)
 401cc90:	10c00005 	stb	r3,0(r2)
      credits++;
 401cc94:	e0bff717 	ldw	r2,-36(fp)
 401cc98:	10800044 	addi	r2,r2,1
 401cc9c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401cca0:	e0bff617 	ldw	r2,-40(fp)
 401cca4:	103fbd1e 	bne	r2,zero,401cb9c <__alt_mem_epcs_flash_controller_0+0xfb01bb9c>
 401cca8:	e0c00217 	ldw	r3,8(fp)
 401ccac:	e0bff917 	ldw	r2,-28(fp)
 401ccb0:	18bfba1e 	bne	r3,r2,401cb9c <__alt_mem_epcs_flash_controller_0+0xfb01bb9c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401ccb4:	e0bffc17 	ldw	r2,-16(fp)
 401ccb8:	10800204 	addi	r2,r2,8
 401ccbc:	10800037 	ldwio	r2,0(r2)
 401ccc0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401ccc4:	e0bffa17 	ldw	r2,-24(fp)
 401ccc8:	1080080c 	andi	r2,r2,32
 401cccc:	103ff926 	beq	r2,zero,401ccb4 <__alt_mem_epcs_flash_controller_0+0xfb01bcb4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401ccd0:	e0800317 	ldw	r2,12(fp)
 401ccd4:	1080004c 	andi	r2,r2,1
 401ccd8:	1000041e 	bne	r2,zero,401ccec <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401ccdc:	e0bffc17 	ldw	r2,-16(fp)
 401cce0:	10800304 	addi	r2,r2,12
 401cce4:	0007883a 	mov	r3,zero
 401cce8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401ccec:	e0800117 	ldw	r2,4(fp)
}
 401ccf0:	e037883a 	mov	sp,fp
 401ccf4:	df000017 	ldw	fp,0(sp)
 401ccf8:	dec00104 	addi	sp,sp,4
 401ccfc:	f800283a 	ret

0401cd00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401cd00:	defffa04 	addi	sp,sp,-24
 401cd04:	dfc00515 	stw	ra,20(sp)
 401cd08:	df000415 	stw	fp,16(sp)
 401cd0c:	df000404 	addi	fp,sp,16
 401cd10:	e13ffe15 	stw	r4,-8(fp)
 401cd14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401cd18:	e0bfff17 	ldw	r2,-4(fp)
 401cd1c:	10800017 	ldw	r2,0(r2)
 401cd20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401cd24:	e13ffe17 	ldw	r4,-8(fp)
 401cd28:	400c8540 	call	400c854 <strlen>
 401cd2c:	10800044 	addi	r2,r2,1
 401cd30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401cd34:	00000d06 	br	401cd6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401cd38:	e0bffc17 	ldw	r2,-16(fp)
 401cd3c:	10800217 	ldw	r2,8(r2)
 401cd40:	e0fffd17 	ldw	r3,-12(fp)
 401cd44:	180d883a 	mov	r6,r3
 401cd48:	e17ffe17 	ldw	r5,-8(fp)
 401cd4c:	1009883a 	mov	r4,r2
 401cd50:	401cf880 	call	401cf88 <memcmp>
 401cd54:	1000021e 	bne	r2,zero,401cd60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401cd58:	e0bffc17 	ldw	r2,-16(fp)
 401cd5c:	00000706 	br	401cd7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401cd60:	e0bffc17 	ldw	r2,-16(fp)
 401cd64:	10800017 	ldw	r2,0(r2)
 401cd68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401cd6c:	e0fffc17 	ldw	r3,-16(fp)
 401cd70:	e0bfff17 	ldw	r2,-4(fp)
 401cd74:	18bff01e 	bne	r3,r2,401cd38 <__alt_mem_epcs_flash_controller_0+0xfb01bd38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401cd78:	0005883a 	mov	r2,zero
}
 401cd7c:	e037883a 	mov	sp,fp
 401cd80:	dfc00117 	ldw	ra,4(sp)
 401cd84:	df000017 	ldw	fp,0(sp)
 401cd88:	dec00204 	addi	sp,sp,8
 401cd8c:	f800283a 	ret

0401cd90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401cd90:	defffb04 	addi	sp,sp,-20
 401cd94:	dfc00415 	stw	ra,16(sp)
 401cd98:	df000315 	stw	fp,12(sp)
 401cd9c:	df000304 	addi	fp,sp,12
 401cda0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401cda4:	d0a00917 	ldw	r2,-32732(gp)
 401cda8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401cdac:	00003106 	br	401ce74 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401cdb0:	e0bffd17 	ldw	r2,-12(fp)
 401cdb4:	10800217 	ldw	r2,8(r2)
 401cdb8:	1009883a 	mov	r4,r2
 401cdbc:	400c8540 	call	400c854 <strlen>
 401cdc0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401cdc4:	e0bffd17 	ldw	r2,-12(fp)
 401cdc8:	10c00217 	ldw	r3,8(r2)
 401cdcc:	e0bffe17 	ldw	r2,-8(fp)
 401cdd0:	10bfffc4 	addi	r2,r2,-1
 401cdd4:	1885883a 	add	r2,r3,r2
 401cdd8:	10800003 	ldbu	r2,0(r2)
 401cddc:	10803fcc 	andi	r2,r2,255
 401cde0:	1080201c 	xori	r2,r2,128
 401cde4:	10bfe004 	addi	r2,r2,-128
 401cde8:	10800bd8 	cmpnei	r2,r2,47
 401cdec:	1000031e 	bne	r2,zero,401cdfc <alt_find_file+0x6c>
    {
      len -= 1;
 401cdf0:	e0bffe17 	ldw	r2,-8(fp)
 401cdf4:	10bfffc4 	addi	r2,r2,-1
 401cdf8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401cdfc:	e0bffe17 	ldw	r2,-8(fp)
 401ce00:	e0ffff17 	ldw	r3,-4(fp)
 401ce04:	1885883a 	add	r2,r3,r2
 401ce08:	10800003 	ldbu	r2,0(r2)
 401ce0c:	10803fcc 	andi	r2,r2,255
 401ce10:	1080201c 	xori	r2,r2,128
 401ce14:	10bfe004 	addi	r2,r2,-128
 401ce18:	10800be0 	cmpeqi	r2,r2,47
 401ce1c:	1000081e 	bne	r2,zero,401ce40 <alt_find_file+0xb0>
 401ce20:	e0bffe17 	ldw	r2,-8(fp)
 401ce24:	e0ffff17 	ldw	r3,-4(fp)
 401ce28:	1885883a 	add	r2,r3,r2
 401ce2c:	10800003 	ldbu	r2,0(r2)
 401ce30:	10803fcc 	andi	r2,r2,255
 401ce34:	1080201c 	xori	r2,r2,128
 401ce38:	10bfe004 	addi	r2,r2,-128
 401ce3c:	10000a1e 	bne	r2,zero,401ce68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401ce40:	e0bffd17 	ldw	r2,-12(fp)
 401ce44:	10800217 	ldw	r2,8(r2)
 401ce48:	e0fffe17 	ldw	r3,-8(fp)
 401ce4c:	180d883a 	mov	r6,r3
 401ce50:	e17fff17 	ldw	r5,-4(fp)
 401ce54:	1009883a 	mov	r4,r2
 401ce58:	401cf880 	call	401cf88 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401ce5c:	1000021e 	bne	r2,zero,401ce68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401ce60:	e0bffd17 	ldw	r2,-12(fp)
 401ce64:	00000706 	br	401ce84 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401ce68:	e0bffd17 	ldw	r2,-12(fp)
 401ce6c:	10800017 	ldw	r2,0(r2)
 401ce70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401ce74:	e0fffd17 	ldw	r3,-12(fp)
 401ce78:	d0a00904 	addi	r2,gp,-32732
 401ce7c:	18bfcc1e 	bne	r3,r2,401cdb0 <__alt_mem_epcs_flash_controller_0+0xfb01bdb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401ce80:	0005883a 	mov	r2,zero
}
 401ce84:	e037883a 	mov	sp,fp
 401ce88:	dfc00117 	ldw	ra,4(sp)
 401ce8c:	df000017 	ldw	fp,0(sp)
 401ce90:	dec00204 	addi	sp,sp,8
 401ce94:	f800283a 	ret

0401ce98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401ce98:	defffc04 	addi	sp,sp,-16
 401ce9c:	df000315 	stw	fp,12(sp)
 401cea0:	df000304 	addi	fp,sp,12
 401cea4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 401cea8:	00bffa04 	movi	r2,-24
 401ceac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401ceb0:	e03ffd15 	stw	zero,-12(fp)
 401ceb4:	00001906 	br	401cf1c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 401ceb8:	00810234 	movhi	r2,1032
 401cebc:	10b99504 	addi	r2,r2,-6572
 401cec0:	e0fffd17 	ldw	r3,-12(fp)
 401cec4:	18c00324 	muli	r3,r3,12
 401cec8:	10c5883a 	add	r2,r2,r3
 401cecc:	10800017 	ldw	r2,0(r2)
 401ced0:	10000f1e 	bne	r2,zero,401cf10 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 401ced4:	00810234 	movhi	r2,1032
 401ced8:	10b99504 	addi	r2,r2,-6572
 401cedc:	e0fffd17 	ldw	r3,-12(fp)
 401cee0:	18c00324 	muli	r3,r3,12
 401cee4:	10c5883a 	add	r2,r2,r3
 401cee8:	e0ffff17 	ldw	r3,-4(fp)
 401ceec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401cef0:	d0e00d17 	ldw	r3,-32716(gp)
 401cef4:	e0bffd17 	ldw	r2,-12(fp)
 401cef8:	1880020e 	bge	r3,r2,401cf04 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 401cefc:	e0bffd17 	ldw	r2,-12(fp)
 401cf00:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 401cf04:	e0bffd17 	ldw	r2,-12(fp)
 401cf08:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 401cf0c:	00000606 	br	401cf28 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401cf10:	e0bffd17 	ldw	r2,-12(fp)
 401cf14:	10800044 	addi	r2,r2,1
 401cf18:	e0bffd15 	stw	r2,-12(fp)
 401cf1c:	e0bffd17 	ldw	r2,-12(fp)
 401cf20:	10800810 	cmplti	r2,r2,32
 401cf24:	103fe41e 	bne	r2,zero,401ceb8 <__alt_mem_epcs_flash_controller_0+0xfb01beb8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401cf28:	e0bffe17 	ldw	r2,-8(fp)
}
 401cf2c:	e037883a 	mov	sp,fp
 401cf30:	df000017 	ldw	fp,0(sp)
 401cf34:	dec00104 	addi	sp,sp,4
 401cf38:	f800283a 	ret

0401cf3c <atexit>:
 401cf3c:	200b883a 	mov	r5,r4
 401cf40:	000f883a 	mov	r7,zero
 401cf44:	000d883a 	mov	r6,zero
 401cf48:	0009883a 	mov	r4,zero
 401cf4c:	401d0041 	jmpi	401d004 <__register_exitproc>

0401cf50 <exit>:
 401cf50:	defffe04 	addi	sp,sp,-8
 401cf54:	000b883a 	mov	r5,zero
 401cf58:	dc000015 	stw	r16,0(sp)
 401cf5c:	dfc00115 	stw	ra,4(sp)
 401cf60:	2021883a 	mov	r16,r4
 401cf64:	401d11c0 	call	401d11c <__call_exitprocs>
 401cf68:	00810234 	movhi	r2,1032
 401cf6c:	10be4304 	addi	r2,r2,-1780
 401cf70:	11000017 	ldw	r4,0(r2)
 401cf74:	20800f17 	ldw	r2,60(r4)
 401cf78:	10000126 	beq	r2,zero,401cf80 <exit+0x30>
 401cf7c:	103ee83a 	callr	r2
 401cf80:	8009883a 	mov	r4,r16
 401cf84:	401d29c0 	call	401d29c <_exit>

0401cf88 <memcmp>:
 401cf88:	01c000c4 	movi	r7,3
 401cf8c:	3980192e 	bgeu	r7,r6,401cff4 <memcmp+0x6c>
 401cf90:	2144b03a 	or	r2,r4,r5
 401cf94:	11c4703a 	and	r2,r2,r7
 401cf98:	10000f26 	beq	r2,zero,401cfd8 <memcmp+0x50>
 401cf9c:	20800003 	ldbu	r2,0(r4)
 401cfa0:	28c00003 	ldbu	r3,0(r5)
 401cfa4:	10c0151e 	bne	r2,r3,401cffc <memcmp+0x74>
 401cfa8:	31bfff84 	addi	r6,r6,-2
 401cfac:	01ffffc4 	movi	r7,-1
 401cfb0:	00000406 	br	401cfc4 <memcmp+0x3c>
 401cfb4:	20800003 	ldbu	r2,0(r4)
 401cfb8:	28c00003 	ldbu	r3,0(r5)
 401cfbc:	31bfffc4 	addi	r6,r6,-1
 401cfc0:	10c00e1e 	bne	r2,r3,401cffc <memcmp+0x74>
 401cfc4:	21000044 	addi	r4,r4,1
 401cfc8:	29400044 	addi	r5,r5,1
 401cfcc:	31fff91e 	bne	r6,r7,401cfb4 <__alt_mem_epcs_flash_controller_0+0xfb01bfb4>
 401cfd0:	0005883a 	mov	r2,zero
 401cfd4:	f800283a 	ret
 401cfd8:	20c00017 	ldw	r3,0(r4)
 401cfdc:	28800017 	ldw	r2,0(r5)
 401cfe0:	18bfee1e 	bne	r3,r2,401cf9c <__alt_mem_epcs_flash_controller_0+0xfb01bf9c>
 401cfe4:	31bfff04 	addi	r6,r6,-4
 401cfe8:	21000104 	addi	r4,r4,4
 401cfec:	29400104 	addi	r5,r5,4
 401cff0:	39bff936 	bltu	r7,r6,401cfd8 <__alt_mem_epcs_flash_controller_0+0xfb01bfd8>
 401cff4:	303fe91e 	bne	r6,zero,401cf9c <__alt_mem_epcs_flash_controller_0+0xfb01bf9c>
 401cff8:	003ff506 	br	401cfd0 <__alt_mem_epcs_flash_controller_0+0xfb01bfd0>
 401cffc:	10c5c83a 	sub	r2,r2,r3
 401d000:	f800283a 	ret

0401d004 <__register_exitproc>:
 401d004:	defffa04 	addi	sp,sp,-24
 401d008:	dc000315 	stw	r16,12(sp)
 401d00c:	04010234 	movhi	r16,1032
 401d010:	843e4304 	addi	r16,r16,-1780
 401d014:	80c00017 	ldw	r3,0(r16)
 401d018:	dc400415 	stw	r17,16(sp)
 401d01c:	dfc00515 	stw	ra,20(sp)
 401d020:	18805217 	ldw	r2,328(r3)
 401d024:	2023883a 	mov	r17,r4
 401d028:	10003726 	beq	r2,zero,401d108 <__register_exitproc+0x104>
 401d02c:	10c00117 	ldw	r3,4(r2)
 401d030:	010007c4 	movi	r4,31
 401d034:	20c00e16 	blt	r4,r3,401d070 <__register_exitproc+0x6c>
 401d038:	1a000044 	addi	r8,r3,1
 401d03c:	8800221e 	bne	r17,zero,401d0c8 <__register_exitproc+0xc4>
 401d040:	18c00084 	addi	r3,r3,2
 401d044:	18c7883a 	add	r3,r3,r3
 401d048:	18c7883a 	add	r3,r3,r3
 401d04c:	12000115 	stw	r8,4(r2)
 401d050:	10c7883a 	add	r3,r2,r3
 401d054:	19400015 	stw	r5,0(r3)
 401d058:	0005883a 	mov	r2,zero
 401d05c:	dfc00517 	ldw	ra,20(sp)
 401d060:	dc400417 	ldw	r17,16(sp)
 401d064:	dc000317 	ldw	r16,12(sp)
 401d068:	dec00604 	addi	sp,sp,24
 401d06c:	f800283a 	ret
 401d070:	00810074 	movhi	r2,1025
 401d074:	10aeaa04 	addi	r2,r2,-17752
 401d078:	10002626 	beq	r2,zero,401d114 <__register_exitproc+0x110>
 401d07c:	01006404 	movi	r4,400
 401d080:	d9400015 	stw	r5,0(sp)
 401d084:	d9800115 	stw	r6,4(sp)
 401d088:	d9c00215 	stw	r7,8(sp)
 401d08c:	400baa80 	call	400baa8 <malloc>
 401d090:	d9400017 	ldw	r5,0(sp)
 401d094:	d9800117 	ldw	r6,4(sp)
 401d098:	d9c00217 	ldw	r7,8(sp)
 401d09c:	10001d26 	beq	r2,zero,401d114 <__register_exitproc+0x110>
 401d0a0:	81000017 	ldw	r4,0(r16)
 401d0a4:	10000115 	stw	zero,4(r2)
 401d0a8:	02000044 	movi	r8,1
 401d0ac:	22405217 	ldw	r9,328(r4)
 401d0b0:	0007883a 	mov	r3,zero
 401d0b4:	12400015 	stw	r9,0(r2)
 401d0b8:	20805215 	stw	r2,328(r4)
 401d0bc:	10006215 	stw	zero,392(r2)
 401d0c0:	10006315 	stw	zero,396(r2)
 401d0c4:	883fde26 	beq	r17,zero,401d040 <__alt_mem_epcs_flash_controller_0+0xfb01c040>
 401d0c8:	18c9883a 	add	r4,r3,r3
 401d0cc:	2109883a 	add	r4,r4,r4
 401d0d0:	1109883a 	add	r4,r2,r4
 401d0d4:	21802215 	stw	r6,136(r4)
 401d0d8:	01800044 	movi	r6,1
 401d0dc:	12406217 	ldw	r9,392(r2)
 401d0e0:	30cc983a 	sll	r6,r6,r3
 401d0e4:	4992b03a 	or	r9,r9,r6
 401d0e8:	12406215 	stw	r9,392(r2)
 401d0ec:	21c04215 	stw	r7,264(r4)
 401d0f0:	01000084 	movi	r4,2
 401d0f4:	893fd21e 	bne	r17,r4,401d040 <__alt_mem_epcs_flash_controller_0+0xfb01c040>
 401d0f8:	11006317 	ldw	r4,396(r2)
 401d0fc:	218cb03a 	or	r6,r4,r6
 401d100:	11806315 	stw	r6,396(r2)
 401d104:	003fce06 	br	401d040 <__alt_mem_epcs_flash_controller_0+0xfb01c040>
 401d108:	18805304 	addi	r2,r3,332
 401d10c:	18805215 	stw	r2,328(r3)
 401d110:	003fc606 	br	401d02c <__alt_mem_epcs_flash_controller_0+0xfb01c02c>
 401d114:	00bfffc4 	movi	r2,-1
 401d118:	003fd006 	br	401d05c <__alt_mem_epcs_flash_controller_0+0xfb01c05c>

0401d11c <__call_exitprocs>:
 401d11c:	defff504 	addi	sp,sp,-44
 401d120:	df000915 	stw	fp,36(sp)
 401d124:	dd400615 	stw	r21,24(sp)
 401d128:	dc800315 	stw	r18,12(sp)
 401d12c:	dfc00a15 	stw	ra,40(sp)
 401d130:	ddc00815 	stw	r23,32(sp)
 401d134:	dd800715 	stw	r22,28(sp)
 401d138:	dd000515 	stw	r20,20(sp)
 401d13c:	dcc00415 	stw	r19,16(sp)
 401d140:	dc400215 	stw	r17,8(sp)
 401d144:	dc000115 	stw	r16,4(sp)
 401d148:	d9000015 	stw	r4,0(sp)
 401d14c:	2839883a 	mov	fp,r5
 401d150:	04800044 	movi	r18,1
 401d154:	057fffc4 	movi	r21,-1
 401d158:	00810234 	movhi	r2,1032
 401d15c:	10be4304 	addi	r2,r2,-1780
 401d160:	12000017 	ldw	r8,0(r2)
 401d164:	45005217 	ldw	r20,328(r8)
 401d168:	44c05204 	addi	r19,r8,328
 401d16c:	a0001c26 	beq	r20,zero,401d1e0 <__call_exitprocs+0xc4>
 401d170:	a0800117 	ldw	r2,4(r20)
 401d174:	15ffffc4 	addi	r23,r2,-1
 401d178:	b8000d16 	blt	r23,zero,401d1b0 <__call_exitprocs+0x94>
 401d17c:	14000044 	addi	r16,r2,1
 401d180:	8421883a 	add	r16,r16,r16
 401d184:	8421883a 	add	r16,r16,r16
 401d188:	84402004 	addi	r17,r16,128
 401d18c:	a463883a 	add	r17,r20,r17
 401d190:	a421883a 	add	r16,r20,r16
 401d194:	e0001e26 	beq	fp,zero,401d210 <__call_exitprocs+0xf4>
 401d198:	80804017 	ldw	r2,256(r16)
 401d19c:	e0801c26 	beq	fp,r2,401d210 <__call_exitprocs+0xf4>
 401d1a0:	bdffffc4 	addi	r23,r23,-1
 401d1a4:	843fff04 	addi	r16,r16,-4
 401d1a8:	8c7fff04 	addi	r17,r17,-4
 401d1ac:	bd7ff91e 	bne	r23,r21,401d194 <__alt_mem_epcs_flash_controller_0+0xfb01c194>
 401d1b0:	00810074 	movhi	r2,1025
 401d1b4:	10aeaf04 	addi	r2,r2,-17732
 401d1b8:	10000926 	beq	r2,zero,401d1e0 <__call_exitprocs+0xc4>
 401d1bc:	a0800117 	ldw	r2,4(r20)
 401d1c0:	1000301e 	bne	r2,zero,401d284 <__call_exitprocs+0x168>
 401d1c4:	a0800017 	ldw	r2,0(r20)
 401d1c8:	10003226 	beq	r2,zero,401d294 <__call_exitprocs+0x178>
 401d1cc:	a009883a 	mov	r4,r20
 401d1d0:	98800015 	stw	r2,0(r19)
 401d1d4:	400babc0 	call	400babc <free>
 401d1d8:	9d000017 	ldw	r20,0(r19)
 401d1dc:	a03fe41e 	bne	r20,zero,401d170 <__alt_mem_epcs_flash_controller_0+0xfb01c170>
 401d1e0:	dfc00a17 	ldw	ra,40(sp)
 401d1e4:	df000917 	ldw	fp,36(sp)
 401d1e8:	ddc00817 	ldw	r23,32(sp)
 401d1ec:	dd800717 	ldw	r22,28(sp)
 401d1f0:	dd400617 	ldw	r21,24(sp)
 401d1f4:	dd000517 	ldw	r20,20(sp)
 401d1f8:	dcc00417 	ldw	r19,16(sp)
 401d1fc:	dc800317 	ldw	r18,12(sp)
 401d200:	dc400217 	ldw	r17,8(sp)
 401d204:	dc000117 	ldw	r16,4(sp)
 401d208:	dec00b04 	addi	sp,sp,44
 401d20c:	f800283a 	ret
 401d210:	a0800117 	ldw	r2,4(r20)
 401d214:	80c00017 	ldw	r3,0(r16)
 401d218:	10bfffc4 	addi	r2,r2,-1
 401d21c:	15c01426 	beq	r2,r23,401d270 <__call_exitprocs+0x154>
 401d220:	80000015 	stw	zero,0(r16)
 401d224:	183fde26 	beq	r3,zero,401d1a0 <__alt_mem_epcs_flash_controller_0+0xfb01c1a0>
 401d228:	95c8983a 	sll	r4,r18,r23
 401d22c:	a0806217 	ldw	r2,392(r20)
 401d230:	a5800117 	ldw	r22,4(r20)
 401d234:	2084703a 	and	r2,r4,r2
 401d238:	10000b26 	beq	r2,zero,401d268 <__call_exitprocs+0x14c>
 401d23c:	a0806317 	ldw	r2,396(r20)
 401d240:	2088703a 	and	r4,r4,r2
 401d244:	20000c1e 	bne	r4,zero,401d278 <__call_exitprocs+0x15c>
 401d248:	89400017 	ldw	r5,0(r17)
 401d24c:	d9000017 	ldw	r4,0(sp)
 401d250:	183ee83a 	callr	r3
 401d254:	a0800117 	ldw	r2,4(r20)
 401d258:	15bfbf1e 	bne	r2,r22,401d158 <__alt_mem_epcs_flash_controller_0+0xfb01c158>
 401d25c:	98800017 	ldw	r2,0(r19)
 401d260:	153fcf26 	beq	r2,r20,401d1a0 <__alt_mem_epcs_flash_controller_0+0xfb01c1a0>
 401d264:	003fbc06 	br	401d158 <__alt_mem_epcs_flash_controller_0+0xfb01c158>
 401d268:	183ee83a 	callr	r3
 401d26c:	003ff906 	br	401d254 <__alt_mem_epcs_flash_controller_0+0xfb01c254>
 401d270:	a5c00115 	stw	r23,4(r20)
 401d274:	003feb06 	br	401d224 <__alt_mem_epcs_flash_controller_0+0xfb01c224>
 401d278:	89000017 	ldw	r4,0(r17)
 401d27c:	183ee83a 	callr	r3
 401d280:	003ff406 	br	401d254 <__alt_mem_epcs_flash_controller_0+0xfb01c254>
 401d284:	a0800017 	ldw	r2,0(r20)
 401d288:	a027883a 	mov	r19,r20
 401d28c:	1029883a 	mov	r20,r2
 401d290:	003fb606 	br	401d16c <__alt_mem_epcs_flash_controller_0+0xfb01c16c>
 401d294:	0005883a 	mov	r2,zero
 401d298:	003ffb06 	br	401d288 <__alt_mem_epcs_flash_controller_0+0xfb01c288>

0401d29c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401d29c:	defffd04 	addi	sp,sp,-12
 401d2a0:	df000215 	stw	fp,8(sp)
 401d2a4:	df000204 	addi	fp,sp,8
 401d2a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401d2ac:	0001883a 	nop
 401d2b0:	e0bfff17 	ldw	r2,-4(fp)
 401d2b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401d2b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401d2bc:	10000226 	beq	r2,zero,401d2c8 <_exit+0x2c>
    ALT_SIM_FAIL();
 401d2c0:	002af070 	cmpltui	zero,zero,43969
 401d2c4:	00000106 	br	401d2cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401d2c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401d2cc:	003fff06 	br	401d2cc <__alt_mem_epcs_flash_controller_0+0xfb01c2cc>
