
GUI_APP.elf:     file format elf32-littlenios2
GUI_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00116984 memsz 0x00116ae4 flags rwx
    LOAD off    0x00118000 vaddr 0x09001000 paddr 0x09001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  09001000  09001000  00118000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00022f10  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0005ef3c  04023154  04023154  00024154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00094914  04082090  04082090  00083090  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  041169a4  041169a4  001179a4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04116b04  04116b04  00118000  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  09001020  09001020  00118000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00118000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000015a0  00000000  00000000  00118028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000338cb  00000000  00000000  001195c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d075  00000000  00000000  0014ce93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011bfb  00000000  00000000  00159f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000410c  00000000  00000000  0016bb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007adc  00000000  00000000  0016fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00022670  00000000  00000000  001776ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  00199d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002250  00000000  00000000  00199db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  001a33e5  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  001a33e8  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  001a33f2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  001a33f3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  001a33f4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001a33f8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  001a33fc  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  001a3400  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  001a3409  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  001a3412  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  001a341b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003d  00000000  00000000  001a341f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a383d  00000000  00000000  001a345c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09001000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
04023154 l    d  .rodata	00000000 .rodata
04082090 l    d  .rwdata	00000000 .rwdata
041169a4 l    d  .bss	00000000 .bss
04116b04 l    d  .sdram	00000000 .sdram
09001020 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../GUI_APP_bsp//obj/HAL/src/crt0.o
04000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 gesture.c
00000000 l    df *ABS*	00000000 tahomabold_20.cpp
04067a44 l     O .rodata	000000b6 _ZL16tahomabold_20_33
04067afa l     O .rodata	00000104 _ZL16tahomabold_20_34
04067bfe l     O .rodata	000001a0 _ZL16tahomabold_20_35
04067d9e l     O .rodata	00000152 _ZL16tahomabold_20_36
04067ef0 l     O .rodata	00000270 _ZL16tahomabold_20_37
04068160 l     O .rodata	000001ba _ZL16tahomabold_20_38
0406831a l     O .rodata	0000009c _ZL16tahomabold_20_39
040683b6 l     O .rodata	000000ea _ZL16tahomabold_20_40
040684a0 l     O .rodata	000000ea _ZL16tahomabold_20_41
0406858a l     O .rodata	00000152 _ZL16tahomabold_20_42
040686dc l     O .rodata	000001a0 _ZL16tahomabold_20_43
0406887c l     O .rodata	0000009c _ZL16tahomabold_20_44
04068918 l     O .rodata	000000ea _ZL16tahomabold_20_45
04068a02 l     O .rodata	0000009c _ZL16tahomabold_20_46
04068a9e l     O .rodata	00000138 _ZL16tahomabold_20_47
04068bd6 l     O .rodata	00000152 _ZL16tahomabold_20_48
04068d28 l     O .rodata	00000152 _ZL16tahomabold_20_49
04068e7a l     O .rodata	00000152 _ZL16tahomabold_20_50
04068fcc l     O .rodata	00000152 _ZL16tahomabold_20_51
0406911e l     O .rodata	00000152 _ZL16tahomabold_20_52
04069270 l     O .rodata	00000152 _ZL16tahomabold_20_53
040693c2 l     O .rodata	00000152 _ZL16tahomabold_20_54
04069514 l     O .rodata	00000152 _ZL16tahomabold_20_55
04069666 l     O .rodata	00000152 _ZL16tahomabold_20_56
040697b8 l     O .rodata	00000152 _ZL16tahomabold_20_57
0406990a l     O .rodata	000000b6 _ZL16tahomabold_20_58
040699c0 l     O .rodata	000000b6 _ZL16tahomabold_20_59
04069a76 l     O .rodata	000001a0 _ZL16tahomabold_20_60
04069c16 l     O .rodata	000001a0 _ZL16tahomabold_20_61
04069db6 l     O .rodata	000001a0 _ZL16tahomabold_20_62
04069f56 l     O .rodata	0000011e _ZL16tahomabold_20_63
0406a074 l     O .rodata	000001d4 _ZL16tahomabold_20_64
0406a248 l     O .rodata	0000016c _ZL16tahomabold_20_65
0406a3b4 l     O .rodata	0000016c _ZL16tahomabold_20_66
0406a520 l     O .rodata	00000152 _ZL16tahomabold_20_67
0406a672 l     O .rodata	00000186 _ZL16tahomabold_20_68
0406a7f8 l     O .rodata	00000138 _ZL16tahomabold_20_69
0406a930 l     O .rodata	00000138 _ZL16tahomabold_20_70
0406aa68 l     O .rodata	00000186 _ZL16tahomabold_20_71
0406abee l     O .rodata	00000186 _ZL16tahomabold_20_72
0406ad74 l     O .rodata	00000104 _ZL16tahomabold_20_73
0406ae78 l     O .rodata	00000104 _ZL16tahomabold_20_74
0406af7c l     O .rodata	0000016c _ZL16tahomabold_20_75
0406b0e8 l     O .rodata	0000011e _ZL16tahomabold_20_76
0406b206 l     O .rodata	000001d4 _ZL16tahomabold_20_77
0406b3da l     O .rodata	00000186 _ZL16tahomabold_20_78
0406b560 l     O .rodata	00000186 _ZL16tahomabold_20_79
0406b6e6 l     O .rodata	00000152 _ZL16tahomabold_20_80
0406b838 l     O .rodata	00000186 _ZL16tahomabold_20_81
0406b9be l     O .rodata	00000186 _ZL16tahomabold_20_82
0406bb44 l     O .rodata	00000152 _ZL16tahomabold_20_83
0406bc96 l     O .rodata	00000138 _ZL16tahomabold_20_84
0406bdce l     O .rodata	00000186 _ZL16tahomabold_20_85
0406bf54 l     O .rodata	0000016c _ZL16tahomabold_20_86
0406c0c0 l     O .rodata	00000222 _ZL16tahomabold_20_87
0406c2e2 l     O .rodata	0000016c _ZL16tahomabold_20_88
0406c44e l     O .rodata	0000016c _ZL16tahomabold_20_89
0406c5ba l     O .rodata	00000138 _ZL16tahomabold_20_90
0406c6f2 l     O .rodata	000000ea _ZL16tahomabold_20_91
0406c7dc l     O .rodata	00000138 _ZL16tahomabold_20_92
0406c914 l     O .rodata	000000ea _ZL16tahomabold_20_93
0406c9fe l     O .rodata	000001a0 _ZL16tahomabold_20_94
0406cb9e l     O .rodata	00000152 _ZL16tahomabold_20_95
0406ccf0 l     O .rodata	0000011e _ZL16tahomabold_20_96
0406ce0e l     O .rodata	00000138 _ZL16tahomabold_20_97
0406cf46 l     O .rodata	00000152 _ZL16tahomabold_20_98
0406d098 l     O .rodata	0000011e _ZL16tahomabold_20_99
0406d1b6 l     O .rodata	00000152 _ZL17tahomabold_20_100
0406d308 l     O .rodata	00000138 _ZL17tahomabold_20_101
0406d440 l     O .rodata	000000d0 _ZL17tahomabold_20_102
0406d510 l     O .rodata	00000152 _ZL17tahomabold_20_103
0406d662 l     O .rodata	00000152 _ZL17tahomabold_20_104
0406d7b4 l     O .rodata	0000009c _ZL17tahomabold_20_105
0406d850 l     O .rodata	000000ea _ZL17tahomabold_20_106
0406d93a l     O .rodata	00000138 _ZL17tahomabold_20_107
0406da72 l     O .rodata	0000009c _ZL17tahomabold_20_108
0406db0e l     O .rodata	000001ee _ZL17tahomabold_20_109
0406dcfc l     O .rodata	00000152 _ZL17tahomabold_20_110
0406de4e l     O .rodata	00000138 _ZL17tahomabold_20_111
0406df86 l     O .rodata	00000152 _ZL17tahomabold_20_112
0406e0d8 l     O .rodata	00000152 _ZL17tahomabold_20_113
0406e22a l     O .rodata	000000ea _ZL17tahomabold_20_114
0406e314 l     O .rodata	00000104 _ZL17tahomabold_20_115
0406e418 l     O .rodata	000000d0 _ZL17tahomabold_20_116
0406e4e8 l     O .rodata	00000152 _ZL17tahomabold_20_117
0406e63a l     O .rodata	00000138 _ZL17tahomabold_20_118
0406e772 l     O .rodata	000001d4 _ZL17tahomabold_20_119
0406e946 l     O .rodata	00000138 _ZL17tahomabold_20_120
0406ea7e l     O .rodata	00000138 _ZL17tahomabold_20_121
0406ebb6 l     O .rodata	0000011e _ZL17tahomabold_20_122
0406ecd4 l     O .rodata	00000138 _ZL17tahomabold_20_123
0406ee0c l     O .rodata	00000152 _ZL17tahomabold_20_124
0406ef5e l     O .rodata	00000138 _ZL17tahomabold_20_125
0406f096 l     O .rodata	000001a0 _ZL17tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.cpp
0406f236 l     O .rodata	000001b8 _ZL16tahomabold_32_33
0406f3ee l     O .rodata	00000280 _ZL16tahomabold_32_34
0406f66e l     O .rodata	00000410 _ZL16tahomabold_32_35
0406fa7e l     O .rodata	00000320 _ZL16tahomabold_32_36
0406fd9e l     O .rodata	000005f0 _ZL16tahomabold_32_37
0407038e l     O .rodata	00000410 _ZL16tahomabold_32_38
0407079e l     O .rodata	00000168 _ZL16tahomabold_32_39
04070906 l     O .rodata	00000258 _ZL16tahomabold_32_40
04070b5e l     O .rodata	00000258 _ZL16tahomabold_32_41
04070db6 l     O .rodata	00000320 _ZL16tahomabold_32_42
040710d6 l     O .rodata	00000410 _ZL16tahomabold_32_43
040714e6 l     O .rodata	00000190 _ZL16tahomabold_32_44
04071676 l     O .rodata	00000230 _ZL16tahomabold_32_45
040718a6 l     O .rodata	00000190 _ZL16tahomabold_32_46
04071a36 l     O .rodata	000002d0 _ZL16tahomabold_32_47
04071d06 l     O .rodata	00000320 _ZL16tahomabold_32_48
04072026 l     O .rodata	00000320 _ZL16tahomabold_32_49
04072346 l     O .rodata	00000320 _ZL16tahomabold_32_50
04072666 l     O .rodata	00000320 _ZL16tahomabold_32_51
04072986 l     O .rodata	00000320 _ZL16tahomabold_32_52
04072ca6 l     O .rodata	00000320 _ZL16tahomabold_32_53
04072fc6 l     O .rodata	00000320 _ZL16tahomabold_32_54
040732e6 l     O .rodata	00000320 _ZL16tahomabold_32_55
04073606 l     O .rodata	00000320 _ZL16tahomabold_32_56
04073926 l     O .rodata	00000320 _ZL16tahomabold_32_57
04073c46 l     O .rodata	000001e0 _ZL16tahomabold_32_58
04073e26 l     O .rodata	000001e0 _ZL16tahomabold_32_59
04074006 l     O .rodata	00000410 _ZL16tahomabold_32_60
04074416 l     O .rodata	00000410 _ZL16tahomabold_32_61
04074826 l     O .rodata	00000410 _ZL16tahomabold_32_62
04074c36 l     O .rodata	000002d0 _ZL16tahomabold_32_63
04074f06 l     O .rodata	00000488 _ZL16tahomabold_32_64
0407538e l     O .rodata	00000370 _ZL16tahomabold_32_65
040756fe l     O .rodata	00000370 _ZL16tahomabold_32_66
04075a6e l     O .rodata	00000348 _ZL16tahomabold_32_67
04075db6 l     O .rodata	000003c0 _ZL16tahomabold_32_68
04076176 l     O .rodata	00000320 _ZL16tahomabold_32_69
04076496 l     O .rodata	000002f8 _ZL16tahomabold_32_70
0407678e l     O .rodata	000003c0 _ZL16tahomabold_32_71
04076b4e l     O .rodata	000003c0 _ZL16tahomabold_32_72
04076f0e l     O .rodata	00000258 _ZL16tahomabold_32_73
04077166 l     O .rodata	00000280 _ZL16tahomabold_32_74
040773e6 l     O .rodata	00000398 _ZL16tahomabold_32_75
0407777e l     O .rodata	000002d0 _ZL16tahomabold_32_76
04077a4e l     O .rodata	00000488 _ZL16tahomabold_32_77
04077ed6 l     O .rodata	000003e8 _ZL16tahomabold_32_78
040782be l     O .rodata	000003e8 _ZL16tahomabold_32_79
040786a6 l     O .rodata	00000348 _ZL16tahomabold_32_80
040789ee l     O .rodata	000003e8 _ZL16tahomabold_32_81
04078dd6 l     O .rodata	000003c0 _ZL16tahomabold_32_82
04079196 l     O .rodata	00000320 _ZL16tahomabold_32_83
040794b6 l     O .rodata	00000320 _ZL16tahomabold_32_84
040797d6 l     O .rodata	000003c0 _ZL16tahomabold_32_85
04079b96 l     O .rodata	00000370 _ZL16tahomabold_32_86
04079f06 l     O .rodata	00000528 _ZL16tahomabold_32_87
0407a42e l     O .rodata	00000370 _ZL16tahomabold_32_88
0407a79e l     O .rodata	00000370 _ZL16tahomabold_32_89
0407ab0e l     O .rodata	00000320 _ZL16tahomabold_32_90
0407ae2e l     O .rodata	00000258 _ZL16tahomabold_32_91
0407b086 l     O .rodata	000002d0 _ZL16tahomabold_32_92
0407b356 l     O .rodata	00000258 _ZL16tahomabold_32_93
0407b5ae l     O .rodata	00000410 _ZL16tahomabold_32_94
0407b9be l     O .rodata	00000320 _ZL16tahomabold_32_95
0407bcde l     O .rodata	000002a8 _ZL16tahomabold_32_96
0407bf86 l     O .rodata	000002f8 _ZL16tahomabold_32_97
0407c27e l     O .rodata	00000320 _ZL16tahomabold_32_98
0407c59e l     O .rodata	000002a8 _ZL16tahomabold_32_99
0407c846 l     O .rodata	00000320 _ZL17tahomabold_32_100
0407cb66 l     O .rodata	000002f8 _ZL17tahomabold_32_101
0407ce5e l     O .rodata	00000230 _ZL17tahomabold_32_102
0407d08e l     O .rodata	00000320 _ZL17tahomabold_32_103
0407d3ae l     O .rodata	00000320 _ZL17tahomabold_32_104
0407d6ce l     O .rodata	00000190 _ZL17tahomabold_32_105
0407d85e l     O .rodata	00000208 _ZL17tahomabold_32_106
0407da66 l     O .rodata	000002f8 _ZL17tahomabold_32_107
0407dd5e l     O .rodata	00000190 _ZL17tahomabold_32_108
0407deee l     O .rodata	000004d8 _ZL17tahomabold_32_109
0407e3c6 l     O .rodata	00000320 _ZL17tahomabold_32_110
0407e6e6 l     O .rodata	00000320 _ZL17tahomabold_32_111
0407ea06 l     O .rodata	00000320 _ZL17tahomabold_32_112
0407ed26 l     O .rodata	00000320 _ZL17tahomabold_32_113
0407f046 l     O .rodata	00000230 _ZL17tahomabold_32_114
0407f276 l     O .rodata	00000280 _ZL17tahomabold_32_115
0407f4f6 l     O .rodata	00000208 _ZL17tahomabold_32_116
0407f6fe l     O .rodata	00000320 _ZL17tahomabold_32_117
0407fa1e l     O .rodata	000002f8 _ZL17tahomabold_32_118
0407fd16 l     O .rodata	00000460 _ZL17tahomabold_32_119
04080176 l     O .rodata	000002f8 _ZL17tahomabold_32_120
0408046e l     O .rodata	000002d0 _ZL17tahomabold_32_121
0408073e l     O .rodata	000002a8 _ZL17tahomabold_32_122
040809e6 l     O .rodata	00000320 _ZL17tahomabold_32_123
04080d06 l     O .rodata	00000320 _ZL17tahomabold_32_124
04081026 l     O .rodata	00000320 _ZL17tahomabold_32_125
04081346 l     O .rodata	00000410 _ZL17tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.cpp
00000000 l    df *ABS*	00000000 gimp_bmp.cpp
00000000 l    df *ABS*	00000000 simple_graphics.cpp
00000000 l    df *ABS*	00000000 simple_text.cpp
00000000 l    df *ABS*	00000000 gui_compass.cpp
00000000 l    df *ABS*	00000000 compass.cpp
00000000 l    df *ABS*	00000000 rotate_xyz_360.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 mpu9250.cpp
00000000 l    df *ABS*	00000000 I2C_core.cpp
00000000 l    df *ABS*	00000000 Uart.cpp
00000000 l    df *ABS*	00000000 multi_touch2.cpp
04009c5c l     F .text	00000354 _ZL14mtc2_QueryDataP9MTC2_INFO
04009fb0 l     F .text	00000088 _ZL8mtc2_ISRPv
00000000 l    df *ABS*	00000000 queue.cpp
00000000 l    df *ABS*	00000000 vip_fr.cpp
00000000 l    df *ABS*	00000000 s_atan.c
04081b38 l     O .rodata	00000020 atanhi
04081b18 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
04081be0 l     O .rodata	00000108 two_over_pi
04081b60 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
04081d28 l     O .rodata	00000010 init_jk
04081ce8 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
04114ddc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04081e82 l     O .rodata	00000010 zeroes.4389
04081e92 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
04081ea2 l     O .rodata	00000010 zeroes.4404
04016df0 l     F .text	000000bc __sbprintf
04081eb2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04017000 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04018b30 l     F .text	00000008 __fp_unlock
04018b44 l     F .text	0000019c __sinit.part.1
04018ce0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04115628 l     O .rwdata	00000020 lc_ctype_charset
04115608 l     O .rwdata	00000020 lc_message_charset
04115648 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04081ee0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04082014 l     O .rodata	00000010 blanks.4332
04082004 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0401c9a4 l     F .text	000000fc __sprint_r.part.0
04082034 l     O .rodata	00000010 blanks.4348
04082024 l     O .rodata	00000010 zeroes.4349
0401df30 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401f478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0401f5cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0401f5f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
0401f754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401fae0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0401fbc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0401fd94 l     F .text	0000003c alt_get_errno
0401fdd0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0401ffe8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04116990 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04020408 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402053c l     F .text	00000034 alt_dev_reg
04115828 l     O .rwdata	000000cc epcs_flash_controller_0
041158f4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
04020614 l     F .text	00000034 alt_flash_device_register
0402069c l     F .text	000003f8 alt_epcs_flash_query
04020a94 l     F .text	000000ec alt_epcs_flash_memcmp
04020e6c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04021334 l     F .text	0000020c altera_avalon_jtag_uart_irq
04021540 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04021b78 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
04021cc8 l     F .text	00000038 epcs_test_wip
04021d00 l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402252c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04022a60 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
041169d8 g     O .bss	00000004 alt_instruction_exception_handler
04000698 g     F .text	000003e8 _Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi
0401aca4 g     F .text	00000074 _mprec_log10
040093e8 g     F .text	0000026c _Z13OC_I2CL_WritelhtPhi
04020de0 g     F .text	0000008c alt_epcs_flash_get_info
0400a60c g     F .text	000000d8 _Z10VIPFR_InitmPvS_mm
0401ad90 g     F .text	0000008c __any_on
0401e4cc g     F .text	00000054 _isatty_r
04081eec g     O .rodata	00000028 __mprec_tinytens
0401fcd0 g     F .text	0000007c alt_main
040128dc g     F .text	00000090 strcpy
040040ec g     F .text	00000260 _Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc
040126f0 g     F .text	000000c0 _puts_r
04116a04 g     O .bss	00000100 alt_irq
0400b3a8 g     F .text	00000014 fabs
0401e520 g     F .text	00000060 _lseek_r
0400b4b0 g     F .text	00000130 sqrt
04004534 g     F .text	000000e8 _Z29vid_string_pixel_length_alphaP15abc_font_structPc
04001dbc g     F .text	00000074 _Z13vid_get_pixeliiP16VIP_FRAME_READER
040104ec g     F .text	00000088 .hidden __eqdf2
04009a2c g     F .text	00000078 _Z9UART_ReadiPciPi
04000310 g     F .text	00000044 _Z5PtSetP5POINTii
04007c5c g     F .text	00000040 _ZN7MPU92506whoamiEv
0400461c  w    F .text	00000144 _Z23seperate_color_channelsiPhS_S_S_
04116b04 g       *ABS*	00000000 __alt_heap_start
0400ab54 g     F .text	00000048 _Z14FrameReader_Gomb
040126b4 g     F .text	0000003c printf
0401e738 g     F .text	0000009c _wcrtomb_r
0401b458 g     F .text	0000005c __sseek
04018e80 g     F .text	00000010 __sinit
0401e5e0 g     F .text	00000140 __swbuf_r
04019948 g     F .text	0000007c _setlocale_r
04018ce8 g     F .text	00000068 __sfmoreglue
0401fd70 g     F .text	00000024 __malloc_unlock
0400615c g     F .text	00001390 _Z11GUI_CompassP9MTC2_INFO
0400e230 g     F .text	00000440 .hidden __divsf3
040003b4 g     F .text	0000008c _Z11RectInflateP4RECTii
04019cc4 g     F .text	0000015c memmove
04018e68 g     F .text	00000018 _cleanup
04019e20 g     F .text	000000a8 _Balloc
04083810 g     O .rwdata	00000415 cour10_font_array
0400f0d4 g     F .text	00000070 .hidden __fixsfsi
040004cc g     F .text	00000068 _Z8RectCopyP4RECTS0_
04000534 g     F .text	00000034 _Z9RectWidthP4RECT
04009980 g     F .text	0000003c _Z10UART_Closei
04010574 g     F .text	000000dc .hidden __gtdf2
04022ba0 g     F .text	00000024 altera_nios2_gen2_irq_init
04011bd0 g     F .text	00000010 __errno
04021d3c g     F .text	000000fc epcs_sector_erase
09001000 g     F .entry	00000000 __reset
04000e50 g     F .text	00000170 _Z21copy_pix_map_24_to_32PvlllS_l
04000fc0 g     F .text	00000148 _Z21copy_pix_map_24_to_24PvlllS_l
0401e470 g     F .text	0000005c _fstat_r
0400145c g     F .text	00000368 _Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER
041169b0 g     O .bss	00000004 errno
0400d794 g     F .text	000001ec floor
0401b3d4 g     F .text	00000008 __seofread
0400a6e4 g     F .text	0000003c _Z12VIPFR_UnInitP16VIP_FRAME_READER
0401b768 g     F .text	0000123c ___svfiprintf_internal_r
0400aa6c g     F .text	000000a8 _Z21FrameReader_SetFrame1mmmmmmm
041169c8 g     O .bss	00000004 alt_argv
0411e954 g       *ABS*	00000000 _gp
040203d8 g     F .text	00000030 usleep
0400ebf0 g     F .text	000004e4 .hidden __subsf3
0400a834 g     F .text	00000050 _Z8VIPFR_GoP16VIP_FRAME_READERb
041156a8 g     O .rwdata	00000180 alt_fd_list
0400b8a0 g     F .text	0000076c __ieee754_rem_pio2
04021f80 g     F .text	0000006c epcs_write_status_register
040226cc g     F .text	00000090 alt_find_dev
04012414 g     F .text	00000148 memcpy
0400059c g     F .text	000000b4 _Z10PtDistanceP5POINTS0_
04018b38 g     F .text	0000000c _cleanup_r
040117d8 g     F .text	000000dc .hidden __floatsidf
04022b24 g     F .text	0000007c alt_io_redirect
0400028c g     F .text	00000084 _Z10IsPtInRectP5POINTP4RECT
04010650 g     F .text	000000f4 .hidden __ltdf2
04023154 g       *ABS*	00000000 __DTOR_END__
040127b0 g     F .text	00000014 puts
04004890  w    F .text	0000022c _Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER
040229c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04001b40 g     F .text	000000f0 _Z14vid_print_chariiicPcP16VIP_FRAME_READER
04020f78 g     F .text	00000100 alt_epcs_flash_write_block
0400d980 g     F .text	00000074 __fpclassifyd
0401ac00 g     F .text	000000a4 __ratio
0401df14 g     F .text	0000001c __vfiprintf_internal
04021738 g     F .text	0000021c altera_avalon_jtag_uart_read
04011be0 g     F .text	00000014 malloc
04012684 g     F .text	00000030 _printf_r
0400dcac g     F .text	00000064 .hidden __udivsi3
0401fb1c g     F .text	000000a4 isatty
040050f4 g     F .text	000000ec _Z9IsTouchedP9MTC2_INFOR4RECT
04081f3c g     O .rodata	000000c8 __mprec_tens
04002440 g     F .text	0000006c _Z22vid_color_convert16_24tPc
0400a4ac g     F .text	00000098 _Z10QUEUE_PushP12QUEUE_STRUCTm
04008b24 g     F .text	0000014c _Z14oc_i2c_init_exlll
04007b28 g     F .text	00000134 _ZN7MPU925014set_gyro_scaleEi
040199c4 g     F .text	0000000c __locale_charset
0400c294 g     F .text	000004a4 __kernel_cos
040092a0 g     F .text	00000148 _Z20OC_I2C_Read_ContinuelhPhi
0400e72c g     F .text	000000c8 .hidden __lesf2
041169ac g     O .bss	00000004 __malloc_top_pad
0411696c g     O .rwdata	00000004 __mb_cur_max
040199f4 g     F .text	0000000c _localeconv_r
04008064 g     F .text	00000108 _ZN7MPU92509calib_accEv
040081e4 g     F .text	000000e4 _ZN7MPU92509calib_magEv
0401a22c g     F .text	0000003c __i2b
04019304 g     F .text	000004bc __sfvwrite_r
04008a6c g     F .text	00000058 _Z11Read32_DatallPl
040127c4 g     F .text	00000054 _sbrk_r
0400a448 g     F .text	00000064 _Z12QUEUE_IsFullP12QUEUE_STRUCT
0400a884 g     F .text	00000044 _Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER
0401e580 g     F .text	00000060 _read_r
04116984 g     O .rwdata	00000004 alt_max_fd
0401e164 g     F .text	000000f0 _fclose_r
04018b00 g     F .text	00000030 fflush
041169a8 g     O .bss	00000004 __malloc_max_sbrked_mem
04002b04 g     F .text	000003bc _Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER
0400d4c8 g     F .text	000002cc __kernel_sin
040118b4 g     F .text	00000110 .hidden __extendsfdf2
04082c50 g     O .rwdata	00000bc0 tahomabold_32
0400f358 g     F .text	000008ac .hidden __adddf3
04020f00 g     F .text	00000078 alt_epcs_flash_erase_block
0401a9a8 g     F .text	0000010c __b2d
04009944 g     F .text	0000003c _Z9UART_OpenPc
0401ee98 g     F .text	00000538 .hidden __umoddi3
0401fbfc g     F .text	000000d4 lseek
040099bc g     F .text	00000070 _Z10UART_WriteiPci
04116958 g     O .rwdata	00000004 __fdlib_version
0411695c g     O .rwdata	00000004 _global_impure_ptr
0402224c g     F .text	0000005c epcs_exit_4_bytes_mode
0401ae1c g     F .text	00000564 _realloc_r
04116b04 g       *ABS*	00000000 __bss_end
0401f9f0 g     F .text	000000f0 alt_iic_isr_register
040202d0 g     F .text	00000108 alt_tick
0400ab14 g     F .text	00000040 _Z23FrameReader_SelectFramemh
0401e920 g     F .text	00000578 .hidden __udivdi3
04007f84 g     F .text	000000e0 _ZN7MPU92509read_tempEv
0401e3cc g     F .text	00000024 _fputwc_r
04081f14 g     O .rodata	00000028 __mprec_bigtens
0401a010 g     F .text	00000104 __s2b
0401f3d0 g     F .text	000000a8 .hidden __floatunsidf
0401a6e8 g     F .text	00000060 __mcmp
0400434c g     F .text	000001e8 _Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER
04018ea0 g     F .text	00000018 __fp_lock_all
0401f9a4 g     F .text	0000004c alt_ic_irq_enabled
0400206c g     F .text	000002e8 _Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER
04020234 g     F .text	0000009c alt_alarm_stop
04005474 g     F .text	00000ce8 _Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_
041169c0 g     O .bss	00000004 alt_irq_active
04003f30  w    F .text	00000054 _Z4min3iii
040000fc g     F .exceptions	000000d4 alt_irq_handler
04115680 g     O .rwdata	00000028 alt_dev_null
040023a0 g     F .text	000000a0 _Z22vid_color_convert24_16Pc
0400c738 g     F .text	00000d90 __kernel_rem_pio2
04008d88 g     F .text	0000007c _Z9ACK_checkl
0401f584 g     F .text	00000048 alt_dcache_flush_all
0401a114 g     F .text	00000068 __hi0bits
04011758 g     F .text	00000080 .hidden __fixdfsi
0411697c g     O .rwdata	00000008 alt_dev_list
04009aa4 g     F .text	00000104 _Z20UART_ReadWithTimeoutiPhtPtm
04020444 g     F .text	000000f8 write
0400b5e0 g     F .text	000002c0 __ieee754_atan2
04003fe8  w    F .text	00000104 _Z25vid_put_pixel_in_span_mapiiPi
0400e670 g     F .text	000000bc .hidden __gtsf2
04005304 g     F .text	00000170 _Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii
0401f790 g     F .text	000000b0 fstat
04010650 g     F .text	000000f4 .hidden __ledf2
040035fc g     F .text	00000240 _Z19vid_bres_scan_edgesiiiiPi
0401a460 g     F .text	00000140 __pow5mult
0401cab8 g     F .text	0000145c ___vfiprintf_internal_r
041169bc g     O .bss	00000004 __nlocale_changed
0400dd10 g     F .text	00000058 .hidden __umodsi3
040051e0 g     F .text	00000124 _Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc
04001c30 g     F .text	0000018c _Z13vid_set_pixeliijP16VIP_FRAME_READER
0400a1bc g     F .text	0000016c _Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_
04009ba8 g     F .text	00000070 _Z21UART_NoneBlockingReadiPhiPi
04022108 g     F .text	00000068 epcs_read_electronic_signature
04000a80 g     F .text	0000003c _Z18free_gimp_bmp_dataP13bitmap_struct
0400a3d4 g     F .text	00000034 _Z12QUEUE_DeleteP12QUEUE_STRUCT
04116b04 g       *ABS*	00000000 end
0400a364 g     F .text	00000070 _Z9QUEUE_Newi
04007e10 g     F .text	00000174 _ZN7MPU92509read_gyroEv
0400840c g     F .text	00000490 _ZN7MPU92508read_allEv
04000d14 g     F .text	0000013c _Z21copy_pix_map_32_to_16PvlllS_l
04008a14 g     F .text	00000058 _Z12Write32_Datalll
04021274 g     F .text	000000c0 altera_avalon_jtag_uart_init
04004abc  w    F .text	0000025c _Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04023154 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04021bf0 g     F .text	0000007c alt_avalon_timer_sc_init
04011b6c g     F .text	00000064 .hidden __clzsi2
04021954 g     F .text	00000224 altera_avalon_jtag_uart_write
0400b2bc g     F .text	000000ec cos
04003edc  w    F .text	00000054 _Z4max3iii
04018e90 g     F .text	00000004 __sfp_lock_acquire
04019be0 g     F .text	000000e4 memchr
04014bdc g     F .text	000021f8 ___vfprintf_internal_r
04012818 g     F .text	00000058 _sprintf_r
04008c70 g     F .text	0000008c _Z13oc_i2c_uninitl
04018ff4 g     F .text	00000310 _free_r
040199d0 g     F .text	00000010 __locale_mb_cur_max
04022fa0 g     F .text	00000180 __call_exitprocs
041169b8 g     O .bss	00000004 __mlocale_changed
04116964 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	00000048 _start
04007c9c g     F .text	00000174 _ZN7MPU92508read_accEv
041169d0 g     O .bss	00000004 _alt_tick_rate
0400b3bc g     F .text	000000f0 sin
0401a5a0 g     F .text	00000148 __lshift
04022bc4 g     F .text	000001fc alt_avalon_spi_command
04000bc4 g     F .text	00000150 _Z21copy_pix_map_32_to_24PvlllS_l
0400b4ac g     F .text	00000004 atan2
041169d4 g     O .bss	00000004 _alt_nticks
04020024 g     F .text	000000fc read
040205a8 g     F .text	0000006c alt_sys_init
0400f144 g     F .text	00000124 .hidden __floatsisf
0401b598 g     F .text	000001d0 __ssprint_r
0400274c g     F .text	00000270 _Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER
04022e88 g     F .text	00000118 __register_exitproc
04008cfc g     F .text	0000008c _Z16ACK_single_checkl
04008e04 g     F .text	0000024c _Z12OC_I2C_WritelhhPhi
040f8f2c g     O .rwdata	00000010 compass_image
0401a268 g     F .text	000001f8 __multiply
0400a954 g     F .text	00000070 _Z16DRAW_EraseScreenP16VIP_FRAME_READERm
040215e0 g     F .text	00000068 altera_avalon_jtag_uart_close
040077cc g     F .text	00000054 _ZN7MPU925014testConnectionEv
041169dc g     O .bss	00000028 __malloc_current_mallinfo
0401aab4 g     F .text	0000014c __d2b
04021c6c g     F .text	0000005c epcs_read_status_register
040075ac g     F .text	00000088 _ZN7MPU9250C1Emh
04007634 g     F .text	000000ac _ZN7MPU92508WriteRegEhh
0400ac8c g     F .text	000000a8 _Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER
04021110 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04022920 g     F .text	000000a4 alt_get_fd
040223d4 g     F .text	00000158 alt_busy_sleep
04003f84  w    F .text	00000064 _Z9max_diff3iii
0401e04c g     F .text	00000054 _close_r
040029bc g     F .text	00000148 _Z15vid_draw_circleiiiicP16VIP_FRAME_READER
04022170 g     F .text	00000080 epcs_read_device_id
04022e0c g     F .text	0000007c memcmp
040211d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04116b04 g       *ABS*	00000000 __alt_stack_base
04021220 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
09001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
04023154 g     O .rodata	000448f0 gesture_bmp
04016eac g     F .text	00000154 __swsetup_r
0400383c g     F .text	000003b4 _Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER
0400fc04 g     F .text	000008e8 .hidden __divdf3
04018d50 g     F .text	00000118 __sfp
0401ad18 g     F .text	00000078 __copybits
04000568 g     F .text	00000034 _Z10RectHeightP4RECT
04115200 g     O .rwdata	00000408 __malloc_av_
04018e9c g     F .text	00000004 __sinit_lock_release
0400ab9c g     F .text	00000048 _Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER
04010744 g     F .text	00000718 .hidden __muldf3
0401b380 g     F .text	00000054 __sread
0402275c g     F .text	00000108 alt_find_file
04022568 g     F .text	000000a4 alt_dev_llist_insert
0401fd4c g     F .text	00000024 __malloc_lock
04020184 g     F .text	000000b0 sbrk
04012a04 g     F .text	000021d8 ___svfprintf_internal_r
04018aa4 g     F .text	0000005c _fflush_r
0401e0a0 g     F .text	000000c4 _calloc_r
0411699c g     O .rwdata	00000008 alt_flash_dev_list
04000440 g     F .text	0000008c _Z10RectOffsetP4RECTii
041169a4 g       *ABS*	00000000 __bss_start
0401255c g     F .text	00000128 memset
04007528 g     F .text	00000084 main
0400a720 g     F .text	00000114 _Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii
041169cc g     O .bss	00000004 alt_envp
041169a4 g     O .bss	00000004 __malloc_max_total_mem
04021170 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0401e720 g     F .text	00000018 __swbuf
0400e72c g     F .text	000000c8 .hidden __ltsf2
04082090 g     O .rwdata	00000bc0 tahomabold_20
0400a170 g     F .text	0000004c _Z11MTC2_UnInitP9MTC2_INFO
0401b4b4 g     F .text	00000008 __sclose
0400d9f4 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0401e254 g     F .text	00000014 fclose
040119c4 g     F .text	000001a8 .hidden __truncdfsf2
04116954 g     O .rwdata	00000004 cour10_font
04017200 g     F .text	00001688 _dtoa_r
04011c08 g     F .text	0000080c _malloc_r
0401e894 g     F .text	00000030 __ascii_wctomb
04116988 g     O .rwdata	00000004 alt_errno
040197c0 g     F .text	000000c4 _fwalk
0400dbb4 g     F .text	00000084 .hidden __divsi3
04002ec0 g     F .text	0000073c _Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER
04018ed0 g     F .text	00000124 _malloc_trim_r
04023154 g       *ABS*	00000000 __CTOR_END__
0400e7f4 g     F .text	000003fc .hidden __mulsf3
040024ac g     F .text	000002a0 _Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER
040074ec g     F .text	0000003c _Z9MagViewerv
04020b80 g     F .text	00000260 alt_epcs_flash_write
0401b4bc g     F .text	000000dc strcmp
04023154 g       *ABS*	00000000 __DTOR_LIST__
0400a9c4 g     F .text	000000a8 _Z21FrameReader_SetFrame0mmmmmmm
0400db98 g     F .text	0000001c copysign
04001310 g     F .text	0000014c _Z22vid_scroll_string_initiiiiiPciS_
040104ec g     F .text	00000088 .hidden __nedf2
04020570 g     F .text	00000038 alt_irq_init
04020120 g     F .text	00000064 alt_release_fd
0400889c g     F .text	000000d0 _ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_
0400ad34 g     F .text	00000588 atan
04007758 g     F .text	00000074 _ZN7MPU92508ReadRegsEhPhj
04012870 g     F .text	0000006c sprintf
04081d38 g     O .rodata	00000100 .hidden __clz_tab
041169b4 g     O .bss	00000004 _PathLocale
040079fc g     F .text	0000012c _ZN7MPU925013set_acc_scaleEi
04022dc0 g     F .text	00000014 atexit
0400e670 g     F .text	000000bc .hidden __gesf2
040075ac g     F .text	00000088 _ZN7MPU9250C2Emh
04001108 g     F .text	00000160 _Z21copy_pix_map_24_to_16PvlllS_l
0401dfec g     F .text	00000060 _write_r
04083c28 g     O .rwdata	00075301 compass_rawdata
04019a00 g     F .text	00000018 setlocale
04000abc g     F .text	00000108 _Z21copy_pix_map_32_to_32PvlllS_l
04003e10  w    F .text	000000cc _Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER
04116960 g     O .rwdata	00000004 _impure_ptr
041169c4 g     O .bss	00000004 alt_argc
04018888 g     F .text	0000021c __sflush_r
0400d9fc g     F .text	0000019c scalbn
0402266c g     F .text	00000060 _do_dtors
040199ec g     F .text	00000008 __locale_cjk_lang
04004d18 g     F .text	000003dc _Z16Compass_Calcuatefffff
0400abe4 g     F .text	00000054 _Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv
04000020 g       .exceptions	00000000 alt_irq_entry
0401a944 g     F .text	00000064 __ulp
04018eb8 g     F .text	00000018 __fp_unlock_all
040090b4 g     F .text	000001ec _Z11OC_I2C_ReadlhhPhi
0400a328 g     F .text	0000003c _Z15MTC2_ClearEventP9MTC2_INFO
04003cdc g     F .text	00000134 _Z11CropImage16PsS_ssssssss
04116974 g     O .rwdata	00000008 alt_fs_list
0400a038 g     F .text	00000138 _Z9MTC2_Initmmmm
04000354 g     F .text	00000060 _Z7RectSetP4RECTiiii
04009050 g     F .text	00000064 _Z18ACK_judge_for_readl
04019a18 g     F .text	0000000c localeconv
04021e38 g     F .text	000000f4 epcs_read_buffer
0400c00c g     F .text	00000288 __ieee754_sqrt
040017c4 g     F .text	0000011c _Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER
04020648 g     F .text	00000054 alt_epcs_flash_init
0401f840 g     F .text	00000050 alt_ic_isr_register
041169a4 g       *ABS*	00000000 _edata
04114dcc g     O .rwdata	00000010 rotate_xyz_360_image
04116b04 g       *ABS*	00000000 _end
04022864 g     F .text	00000068 alt_flash_open_dev
0401e268 g     F .text	00000164 __fputwc
04021648 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400a544 g     F .text	00000094 _Z9QUEUE_PopP12QUEUE_STRUCT
04003bf0 g     F .text	000000ec _Z11CopyImage16PsS_ssss
0401f918 g     F .text	0000008c alt_ic_irq_disable
040221f0 g     F .text	0000005c epcs_enter_4_bytes_mode
040012cc g     F .text	00000044 _Z22vid_scroll_string_quitP22vid_text_scroll_struct
0401b3dc g     F .text	0000007c __swrite
04116968 g     O .rwdata	00000004 __malloc_trim_threshold
04008ac4 g     F .text	00000060 _Z11oc_i2c_initl
04001e30 g     F .text	0000023c _Z15vid_paint_blockiiiiiP16VIP_FRAME_READER
040199e0 g     F .text	0000000c __locale_msgcharset
040018e0 g     F .text	00000108 _Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_
04022dd4 g     F .text	00000038 exit
04019884 g     F .text	000000c4 _fwalk_reent
0400f268 g     F .text	000000f0 .hidden __floatunsisf
0401a748 g     F .text	000001fc __mdiff
040228cc g     F .text	00000054 alt_flash_close_dev
0400dc38 g     F .text	00000074 .hidden __modsi3
0400a408 g     F .text	00000040 _Z13QUEUE_IsEmptyP12QUEUE_STRUCT
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04018e94 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040f8f3c g     O .rwdata	0001be8f rotate_xyz_360_rawdata
0400896c g     F .text	000000a8 _ZN7MPU925010getMotion6EPfS0_S0_S0_S0_S0_
04000650 g     F .text	00000048 _Z6PtCopyP5POINTS0_
04023120 g     F .text	00000034 _exit
04004760  w    F .text	00000130 _Z20merge_color_channelsihhhPh
040222a8 g     F .text	0000012c alt_alarm_start
04002354 g     F .text	0000004c _Z16vid_merge_colorsiii
04019a24 g     F .text	000001bc __smakebuf_r
0400ac38 g     F .text	00000054 _Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv
0400816c g     F .text	00000078 _ZN7MPU925013AK8963_whoamiEv
0401296c g     F .text	00000098 strlen
04021f2c g     F .text	00000054 epcs_write_enable
0401fe94 g     F .text	00000154 open
04010574 g     F .text	000000dc .hidden __gedf2
04001268 g     F .text	00000064 _Z16vid_clean_screenP16VIP_FRAME_READERi
04116970 g     O .rwdata	00000004 __wctomb
0401caa0 g     F .text	00000018 __sprint_r
04009c18 g     F .text	00000044 _Z16UART_WriteStringiPc
040076e0 g     F .text	00000078 _ZN7MPU92507ReadRegEhh
040019e8 g     F .text	00000158 _Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER
0411698c g     O .rwdata	00000004 alt_priority_mask
04009654 g     F .text	000002f0 _Z12OC_I2CL_ReadlhtPhi
0401f890 g     F .text	00000088 alt_ic_irq_enable
04016dd4 g     F .text	0000001c __vfprintf_internal
0401e8c4 g     F .text	0000005c _wctomb_r
04010e5c g     F .text	000008fc .hidden __subdf3
04021078 g     F .text	00000098 alt_epcs_flash_read
0401f634 g     F .text	00000120 fcntl
0401a17c g     F .text	000000b0 __lo0bits
04007820 g     F .text	000001dc _ZN7MPU925010initializeEii
04116994 g     O .rwdata	00000008 alt_alarm_list
0402260c g     F .text	00000060 _do_ctors
0401e7d4 g     F .text	000000c0 wcrtomb
0400a8c8 g     F .text	0000008c _Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER
0400a5d8 g     F .text	00000034 _Z11QUEUE_EmptyP12QUEUE_STRUCT
0401f4b4 g     F .text	000000d0 close
0400dd68 g     F .text	000004c8 .hidden __addsf3
0401e3f0 g     F .text	00000080 fputwc
04011bf4 g     F .text	00000014 free
04018e98 g     F .text	00000004 __sinit_lock_acquire
04021fec g     F .text	0000011c epcs_write_buffer
040082c8 g     F .text	00000144 _ZN7MPU92508read_magEv
04019ef0 g     F .text	00000120 __multadd
04019ec8 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810474 	movhi	r2,1041
 4000140:	109a8104 	addi	r2,r2,27140
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810474 	movhi	r2,1041
 4000158:	109a8104 	addi	r2,r2,27140
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__reset+0xfafff12c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__reset+0xfafff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a02117 	ldw	r2,-32636(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a02117 	ldw	r2,-32636(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__reset+0xfafff248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810474 	movhi	gp,1041
    ori gp, gp, %lo(_gp)
 4000260:	d6ba5514 	ori	gp,gp,59732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810474 	movhi	r2,1041
    ori r2, r2, %lo(__bss_start)
 4000268:	109a6914 	ori	r2,r2,27044

    movhi r3, %hi(__bss_end)
 400026c:	00c10474 	movhi	r3,1041
    ori r3, r3, %lo(__bss_end)
 4000270:	18dac114 	ori	r3,r3,27396

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__reset+0xfafff278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000284:	401fcd00 	call	401fcd0 <alt_main>

04000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000288:	003fff06 	br	4000288 <__reset+0xfafff288>

0400028c <_Z10IsPtInRectP5POINTP4RECT>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 400028c:	defffc04 	addi	sp,sp,-16
 4000290:	df000315 	stw	fp,12(sp)
 4000294:	df000304 	addi	fp,sp,12
 4000298:	e13ffe15 	stw	r4,-8(fp)
 400029c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 40002a0:	e03ffd05 	stb	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 40002a4:	e0bffe17 	ldw	r2,-8(fp)
 40002a8:	10c00017 	ldw	r3,0(r2)
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	10800017 	ldw	r2,0(r2)
 40002b4:	18801116 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002b8:	e0bffe17 	ldw	r2,-8(fp)
 40002bc:	10800017 	ldw	r2,0(r2)
 40002c0:	e0ffff17 	ldw	r3,-4(fp)
 40002c4:	18c00117 	ldw	r3,4(r3)
 40002c8:	18800c16 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002cc:	e0bffe17 	ldw	r2,-8(fp)
 40002d0:	10c00117 	ldw	r3,4(r2)
 40002d4:	e0bfff17 	ldw	r2,-4(fp)
 40002d8:	10800217 	ldw	r2,8(r2)
 40002dc:	18800716 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
 40002e0:	e0bffe17 	ldw	r2,-8(fp)
 40002e4:	10800117 	ldw	r2,4(r2)
 40002e8:	e0ffff17 	ldw	r3,-4(fp)
 40002ec:	18c00317 	ldw	r3,12(r3)
 40002f0:	18800216 	blt	r3,r2,40002fc <_Z10IsPtInRectP5POINTP4RECT+0x70>
        bYes = TRUE;
 40002f4:	00800044 	movi	r2,1
 40002f8:	e0bffd05 	stb	r2,-12(fp)
    
    return bYes;
 40002fc:	e0bffd03 	ldbu	r2,-12(fp)
}
 4000300:	e037883a 	mov	sp,fp
 4000304:	df000017 	ldw	fp,0(sp)
 4000308:	dec00104 	addi	sp,sp,4
 400030c:	f800283a 	ret

04000310 <_Z5PtSetP5POINTii>:

void PtSet(POINT *pt, int x, int y){
 4000310:	defffc04 	addi	sp,sp,-16
 4000314:	df000315 	stw	fp,12(sp)
 4000318:	df000304 	addi	fp,sp,12
 400031c:	e13ffd15 	stw	r4,-12(fp)
 4000320:	e17ffe15 	stw	r5,-8(fp)
 4000324:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 4000328:	e0bffd17 	ldw	r2,-12(fp)
 400032c:	e0fffe17 	ldw	r3,-8(fp)
 4000330:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 4000334:	e0bffd17 	ldw	r2,-12(fp)
 4000338:	e0ffff17 	ldw	r3,-4(fp)
 400033c:	10c00115 	stw	r3,4(r2)
}
 4000340:	0001883a 	nop
 4000344:	e037883a 	mov	sp,fp
 4000348:	df000017 	ldw	fp,0(sp)
 400034c:	dec00104 	addi	sp,sp,4
 4000350:	f800283a 	ret

04000354 <_Z7RectSetP4RECTiiii>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 4000354:	defffb04 	addi	sp,sp,-20
 4000358:	df000415 	stw	fp,16(sp)
 400035c:	df000404 	addi	fp,sp,16
 4000360:	e13ffc15 	stw	r4,-16(fp)
 4000364:	e17ffd15 	stw	r5,-12(fp)
 4000368:	e1bffe15 	stw	r6,-8(fp)
 400036c:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 4000370:	e0bffc17 	ldw	r2,-16(fp)
 4000374:	e0fffd17 	ldw	r3,-12(fp)
 4000378:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 400037c:	e0bffc17 	ldw	r2,-16(fp)
 4000380:	e0fffe17 	ldw	r3,-8(fp)
 4000384:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	e0ffff17 	ldw	r3,-4(fp)
 4000390:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4000394:	e0bffc17 	ldw	r2,-16(fp)
 4000398:	e0c00117 	ldw	r3,4(fp)
 400039c:	10c00315 	stw	r3,12(r2)
}
 40003a0:	0001883a 	nop
 40003a4:	e037883a 	mov	sp,fp
 40003a8:	df000017 	ldw	fp,0(sp)
 40003ac:	dec00104 	addi	sp,sp,4
 40003b0:	f800283a 	ret

040003b4 <_Z11RectInflateP4RECTii>:

void RectInflate(RECT *rc, int x, int y){
 40003b4:	defffc04 	addi	sp,sp,-16
 40003b8:	df000315 	stw	fp,12(sp)
 40003bc:	df000304 	addi	fp,sp,12
 40003c0:	e13ffd15 	stw	r4,-12(fp)
 40003c4:	e17ffe15 	stw	r5,-8(fp)
 40003c8:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 40003cc:	e0bffd17 	ldw	r2,-12(fp)
 40003d0:	10c00017 	ldw	r3,0(r2)
 40003d4:	e0bffe17 	ldw	r2,-8(fp)
 40003d8:	1887c83a 	sub	r3,r3,r2
 40003dc:	e0bffd17 	ldw	r2,-12(fp)
 40003e0:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003e4:	e0bffd17 	ldw	r2,-12(fp)
 40003e8:	10c00117 	ldw	r3,4(r2)
 40003ec:	e0bffe17 	ldw	r2,-8(fp)
 40003f0:	1887883a 	add	r3,r3,r2
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 40003fc:	e0bffd17 	ldw	r2,-12(fp)
 4000400:	10c00217 	ldw	r3,8(r2)
 4000404:	e0bfff17 	ldw	r2,-4(fp)
 4000408:	1887c83a 	sub	r3,r3,r2
 400040c:	e0bffd17 	ldw	r2,-12(fp)
 4000410:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000414:	e0bffd17 	ldw	r2,-12(fp)
 4000418:	10c00317 	ldw	r3,12(r2)
 400041c:	e0bfff17 	ldw	r2,-4(fp)
 4000420:	1887883a 	add	r3,r3,r2
 4000424:	e0bffd17 	ldw	r2,-12(fp)
 4000428:	10c00315 	stw	r3,12(r2)
}
 400042c:	0001883a 	nop
 4000430:	e037883a 	mov	sp,fp
 4000434:	df000017 	ldw	fp,0(sp)
 4000438:	dec00104 	addi	sp,sp,4
 400043c:	f800283a 	ret

04000440 <_Z10RectOffsetP4RECTii>:

void RectOffset(RECT *rc, int x, int y){
 4000440:	defffc04 	addi	sp,sp,-16
 4000444:	df000315 	stw	fp,12(sp)
 4000448:	df000304 	addi	fp,sp,12
 400044c:	e13ffd15 	stw	r4,-12(fp)
 4000450:	e17ffe15 	stw	r5,-8(fp)
 4000454:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 4000458:	e0bffd17 	ldw	r2,-12(fp)
 400045c:	10c00017 	ldw	r3,0(r2)
 4000460:	e0bffe17 	ldw	r2,-8(fp)
 4000464:	1887883a 	add	r3,r3,r2
 4000468:	e0bffd17 	ldw	r2,-12(fp)
 400046c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000470:	e0bffd17 	ldw	r2,-12(fp)
 4000474:	10c00117 	ldw	r3,4(r2)
 4000478:	e0bffe17 	ldw	r2,-8(fp)
 400047c:	1887883a 	add	r3,r3,r2
 4000480:	e0bffd17 	ldw	r2,-12(fp)
 4000484:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 4000488:	e0bffd17 	ldw	r2,-12(fp)
 400048c:	10c00217 	ldw	r3,8(r2)
 4000490:	e0bfff17 	ldw	r2,-4(fp)
 4000494:	1887883a 	add	r3,r3,r2
 4000498:	e0bffd17 	ldw	r2,-12(fp)
 400049c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 40004a0:	e0bffd17 	ldw	r2,-12(fp)
 40004a4:	10c00317 	ldw	r3,12(r2)
 40004a8:	e0bfff17 	ldw	r2,-4(fp)
 40004ac:	1887883a 	add	r3,r3,r2
 40004b0:	e0bffd17 	ldw	r2,-12(fp)
 40004b4:	10c00315 	stw	r3,12(r2)
}
 40004b8:	0001883a 	nop
 40004bc:	e037883a 	mov	sp,fp
 40004c0:	df000017 	ldw	fp,0(sp)
 40004c4:	dec00104 	addi	sp,sp,4
 40004c8:	f800283a 	ret

040004cc <_Z8RectCopyP4RECTS0_>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 40004cc:	defffd04 	addi	sp,sp,-12
 40004d0:	df000215 	stw	fp,8(sp)
 40004d4:	df000204 	addi	fp,sp,8
 40004d8:	e13ffe15 	stw	r4,-8(fp)
 40004dc:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 40004e0:	e0bfff17 	ldw	r2,-4(fp)
 40004e4:	10c00017 	ldw	r3,0(r2)
 40004e8:	e0bffe17 	ldw	r2,-8(fp)
 40004ec:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 40004f0:	e0bfff17 	ldw	r2,-4(fp)
 40004f4:	10c00117 	ldw	r3,4(r2)
 40004f8:	e0bffe17 	ldw	r2,-8(fp)
 40004fc:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000500:	e0bfff17 	ldw	r2,-4(fp)
 4000504:	10c00217 	ldw	r3,8(r2)
 4000508:	e0bffe17 	ldw	r2,-8(fp)
 400050c:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000510:	e0bfff17 	ldw	r2,-4(fp)
 4000514:	10c00317 	ldw	r3,12(r2)
 4000518:	e0bffe17 	ldw	r2,-8(fp)
 400051c:	10c00315 	stw	r3,12(r2)
}
 4000520:	0001883a 	nop
 4000524:	e037883a 	mov	sp,fp
 4000528:	df000017 	ldw	fp,0(sp)
 400052c:	dec00104 	addi	sp,sp,4
 4000530:	f800283a 	ret

04000534 <_Z9RectWidthP4RECT>:

int RectWidth(RECT *rc){
 4000534:	defffe04 	addi	sp,sp,-8
 4000538:	df000115 	stw	fp,4(sp)
 400053c:	df000104 	addi	fp,sp,4
 4000540:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 4000544:	e0bfff17 	ldw	r2,-4(fp)
 4000548:	10c00117 	ldw	r3,4(r2)
 400054c:	e0bfff17 	ldw	r2,-4(fp)
 4000550:	10800017 	ldw	r2,0(r2)
 4000554:	1885c83a 	sub	r2,r3,r2
}
 4000558:	e037883a 	mov	sp,fp
 400055c:	df000017 	ldw	fp,0(sp)
 4000560:	dec00104 	addi	sp,sp,4
 4000564:	f800283a 	ret

04000568 <_Z10RectHeightP4RECT>:

int RectHeight(RECT *rc){
 4000568:	defffe04 	addi	sp,sp,-8
 400056c:	df000115 	stw	fp,4(sp)
 4000570:	df000104 	addi	fp,sp,4
 4000574:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 4000578:	e0bfff17 	ldw	r2,-4(fp)
 400057c:	10c00317 	ldw	r3,12(r2)
 4000580:	e0bfff17 	ldw	r2,-4(fp)
 4000584:	10800217 	ldw	r2,8(r2)
 4000588:	1885c83a 	sub	r2,r3,r2
}
 400058c:	e037883a 	mov	sp,fp
 4000590:	df000017 	ldw	fp,0(sp)
 4000594:	dec00104 	addi	sp,sp,4
 4000598:	f800283a 	ret

0400059c <_Z10PtDistanceP5POINTS0_>:

int PtDistance(POINT *pt1, POINT *pt2){
 400059c:	defff904 	addi	sp,sp,-28
 40005a0:	dfc00615 	stw	ra,24(sp)
 40005a4:	df000515 	stw	fp,20(sp)
 40005a8:	df000504 	addi	fp,sp,20
 40005ac:	e13ffe15 	stw	r4,-8(fp)
 40005b0:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 40005b4:	e0bffe17 	ldw	r2,-8(fp)
 40005b8:	10c00017 	ldw	r3,0(r2)
 40005bc:	e0bfff17 	ldw	r2,-4(fp)
 40005c0:	10800017 	ldw	r2,0(r2)
 40005c4:	1885c83a 	sub	r2,r3,r2
 40005c8:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10c00117 	ldw	r3,4(r2)
 40005d4:	e0bfff17 	ldw	r2,-4(fp)
 40005d8:	10800117 	ldw	r2,4(r2)
 40005dc:	1885c83a 	sub	r2,r3,r2
 40005e0:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 40005e4:	e0fffb17 	ldw	r3,-20(fp)
 40005e8:	e0bffb17 	ldw	r2,-20(fp)
 40005ec:	1887383a 	mul	r3,r3,r2
 40005f0:	e13ffc17 	ldw	r4,-16(fp)
 40005f4:	e0bffc17 	ldw	r2,-16(fp)
 40005f8:	2085383a 	mul	r2,r4,r2
 40005fc:	1885883a 	add	r2,r3,r2
 4000600:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 4000604:	e13ffd17 	ldw	r4,-12(fp)
 4000608:	40117d80 	call	40117d8 <__floatsidf>
 400060c:	100b883a 	mov	r5,r2
 4000610:	180d883a 	mov	r6,r3
 4000614:	2809883a 	mov	r4,r5
 4000618:	300b883a 	mov	r5,r6
 400061c:	400b4b00 	call	400b4b0 <sqrt>
 4000620:	100b883a 	mov	r5,r2
 4000624:	180d883a 	mov	r6,r3
 4000628:	2809883a 	mov	r4,r5
 400062c:	300b883a 	mov	r5,r6
 4000630:	40117580 	call	4011758 <__fixdfsi>
 4000634:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 4000638:	e0bffd17 	ldw	r2,-12(fp)
}
 400063c:	e037883a 	mov	sp,fp
 4000640:	dfc00117 	ldw	ra,4(sp)
 4000644:	df000017 	ldw	fp,0(sp)
 4000648:	dec00204 	addi	sp,sp,8
 400064c:	f800283a 	ret

04000650 <_Z6PtCopyP5POINTS0_>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 4000650:	defffd04 	addi	sp,sp,-12
 4000654:	df000215 	stw	fp,8(sp)
 4000658:	df000204 	addi	fp,sp,8
 400065c:	e13ffe15 	stw	r4,-8(fp)
 4000660:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 4000664:	e0bfff17 	ldw	r2,-4(fp)
 4000668:	10c00017 	ldw	r3,0(r2)
 400066c:	e0bffe17 	ldw	r2,-8(fp)
 4000670:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10c00117 	ldw	r3,4(r2)
 400067c:	e0bffe17 	ldw	r2,-8(fp)
 4000680:	10c00115 	stw	r3,4(r2)
}
 4000684:	0001883a 	nop
 4000688:	e037883a 	mov	sp,fp
 400068c:	df000017 	ldw	fp,0(sp)
 4000690:	dec00104 	addi	sp,sp,4
 4000694:	f800283a 	ret

04000698 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi>:
#include "gimp_bmp.h"

int load_gimp_bmp( GimpImage *gimp_image, 
                    bitmap_struct *bmp, 
                    int output_bits_per_pixel )
{
 4000698:	defff604 	addi	sp,sp,-40
 400069c:	dfc00915 	stw	ra,36(sp)
 40006a0:	df000815 	stw	fp,32(sp)
 40006a4:	df000804 	addi	fp,sp,32
 40006a8:	e13ffd15 	stw	r4,-12(fp)
 40006ac:	e17ffe15 	stw	r5,-8(fp)
 40006b0:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 40006b4:	e03ffa15 	stw	zero,-24(fp)
  
  int output_bytes_per_pixel = output_bits_per_pixel / 8;
 40006b8:	e0bfff17 	ldw	r2,-4(fp)
 40006bc:	1000010e 	bge	r2,zero,40006c4 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2c>
 40006c0:	108001c4 	addi	r2,r2,7
 40006c4:	1005d0fa 	srai	r2,r2,3
 40006c8:	e0bffb15 	stw	r2,-20(fp)
  int num_pixels = gimp_image->width * gimp_image->height;
 40006cc:	e0bffd17 	ldw	r2,-12(fp)
 40006d0:	10c00017 	ldw	r3,0(r2)
 40006d4:	e0bffd17 	ldw	r2,-12(fp)
 40006d8:	10800117 	ldw	r2,4(r2)
 40006dc:	1885383a 	mul	r2,r3,r2
 40006e0:	e0bffc15 	stw	r2,-16(fp)
  
  bmp->biWidth = gimp_image->width;
 40006e4:	e0bffd17 	ldw	r2,-12(fp)
 40006e8:	10800017 	ldw	r2,0(r2)
 40006ec:	1007883a 	mov	r3,r2
 40006f0:	e0bffe17 	ldw	r2,-8(fp)
 40006f4:	10c0000d 	sth	r3,0(r2)
  bmp->biHeight = gimp_image->height;
 40006f8:	e0bffd17 	ldw	r2,-12(fp)
 40006fc:	10800117 	ldw	r2,4(r2)
 4000700:	1007883a 	mov	r3,r2
 4000704:	e0bffe17 	ldw	r2,-8(fp)
 4000708:	10c0008d 	sth	r3,2(r2)
  bmp->biBitCount = output_bits_per_pixel;
 400070c:	e0bfff17 	ldw	r2,-4(fp)
 4000710:	1007883a 	mov	r3,r2
 4000714:	e0bffe17 	ldw	r2,-8(fp)
 4000718:	10c0010d 	sth	r3,4(r2)
  
  /* try to allocate memory for bitmap data */
  if ((bmp->data = (char *)malloc(num_pixels * output_bytes_per_pixel)) == NULL)
 400071c:	e0fffc17 	ldw	r3,-16(fp)
 4000720:	e0bffb17 	ldw	r2,-20(fp)
 4000724:	1885383a 	mul	r2,r3,r2
 4000728:	1009883a 	mov	r4,r2
 400072c:	4011be00 	call	4011be0 <malloc>
 4000730:	1007883a 	mov	r3,r2
 4000734:	e0bffe17 	ldw	r2,-8(fp)
 4000738:	10c00315 	stw	r3,12(r2)
 400073c:	e0bffe17 	ldw	r2,-8(fp)
 4000740:	10800317 	ldw	r2,12(r2)
 4000744:	1005003a 	cmpeq	r2,r2,zero
 4000748:	10803fcc 	andi	r2,r2,255
 400074c:	10000326 	beq	r2,zero,400075c <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0xc4>
  {
    ret_code = -1;
 4000750:	00bfffc4 	movi	r2,-1
 4000754:	e0bffa15 	stw	r2,-24(fp)
 4000758:	0000c306 	br	4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
  }
  else
  {
    if( output_bits_per_pixel == 16 )
 400075c:	e0bfff17 	ldw	r2,-4(fp)
 4000760:	10800418 	cmpnei	r2,r2,16
 4000764:	10003e1e 	bne	r2,zero,4000860 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x1c8>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 4000768:	e0bffd17 	ldw	r2,-12(fp)
 400076c:	10800217 	ldw	r2,8(r2)
 4000770:	10800118 	cmpnei	r2,r2,4
 4000774:	10001b1e 	bne	r2,zero,40007e4 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x14c>
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000778:	e0bffd17 	ldw	r2,-12(fp)
 400077c:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000780:	e0bffe17 	ldw	r2,-8(fp)
 4000784:	1080000b 	ldhu	r2,0(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000788:	117fffcc 	andi	r5,r2,65535
 400078c:	2960001c 	xori	r5,r5,32768
 4000790:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000794:	e0bffe17 	ldw	r2,-8(fp)
 4000798:	1080008b 	ldhu	r2,2(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 400079c:	11bfffcc 	andi	r6,r2,65535
 40007a0:	31a0001c 	xori	r6,r6,32768
 40007a4:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40007a8:	e0bffe17 	ldw	r2,-8(fp)
 40007ac:	1080000b 	ldhu	r2,0(r2)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007b0:	11ffffcc 	andi	r7,r2,65535
 40007b4:	39e0001c 	xori	r7,r7,32768
 40007b8:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40007bc:	e0bffe17 	ldw	r2,-8(fp)
 40007c0:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40007c4:	e0fffe17 	ldw	r3,-8(fp)
 40007c8:	18c0000b 	ldhu	r3,0(r3)
  {
    if( output_bits_per_pixel == 16 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007cc:	18ffffcc 	andi	r3,r3,65535
 40007d0:	18e0001c 	xori	r3,r3,32768
 40007d4:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40007d8:	d8c00115 	stw	r3,4(sp)
 40007dc:	d8800015 	stw	r2,0(sp)
 40007e0:	4000d140 	call	4000d14 <_Z21copy_pix_map_32_to_16PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40007e4:	e0bffd17 	ldw	r2,-12(fp)
 40007e8:	10800217 	ldw	r2,8(r2)
 40007ec:	108000d8 	cmpnei	r2,r2,3
 40007f0:	10001b1e 	bne	r2,zero,4000860 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x1c8>
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 40007f4:	e0bffd17 	ldw	r2,-12(fp)
 40007f8:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 40007fc:	e0bffe17 	ldw	r2,-8(fp)
 4000800:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000804:	117fffcc 	andi	r5,r2,65535
 4000808:	2960001c 	xori	r5,r5,32768
 400080c:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000810:	e0bffe17 	ldw	r2,-8(fp)
 4000814:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000818:	11bfffcc 	andi	r6,r2,65535
 400081c:	31a0001c 	xori	r6,r6,32768
 4000820:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000824:	e0bffe17 	ldw	r2,-8(fp)
 4000828:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 400082c:	11ffffcc 	andi	r7,r2,65535
 4000830:	39e0001c 	xori	r7,r7,32768
 4000834:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 4000838:	e0bffe17 	ldw	r2,-8(fp)
 400083c:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000840:	e0fffe17 	ldw	r3,-8(fp)
 4000844:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_16( gimp_image->pixel_data, //void *src_ptr,
 4000848:	18ffffcc 	andi	r3,r3,65535
 400084c:	18e0001c 	xori	r3,r3,32768
 4000850:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000854:	d8c00115 	stw	r3,4(sp)
 4000858:	d8800015 	stw	r2,0(sp)
 400085c:	40011080 	call	4001108 <_Z21copy_pix_map_24_to_16PvlllS_l>
  
      }
    }
    if( output_bits_per_pixel == 24 )
 4000860:	e0bfff17 	ldw	r2,-4(fp)
 4000864:	10800618 	cmpnei	r2,r2,24
 4000868:	10003e1e 	bne	r2,zero,4000964 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2cc>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 400086c:	e0bffd17 	ldw	r2,-12(fp)
 4000870:	10800217 	ldw	r2,8(r2)
 4000874:	10800118 	cmpnei	r2,r2,4
 4000878:	10001b1e 	bne	r2,zero,40008e8 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x250>
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 400087c:	e0bffd17 	ldw	r2,-12(fp)
 4000880:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000884:	e0bffe17 	ldw	r2,-8(fp)
 4000888:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 400088c:	117fffcc 	andi	r5,r2,65535
 4000890:	2960001c 	xori	r5,r5,32768
 4000894:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000898:	e0bffe17 	ldw	r2,-8(fp)
 400089c:	1080008b 	ldhu	r2,2(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008a0:	11bfffcc 	andi	r6,r2,65535
 40008a4:	31a0001c 	xori	r6,r6,32768
 40008a8:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40008ac:	e0bffe17 	ldw	r2,-8(fp)
 40008b0:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008b4:	11ffffcc 	andi	r7,r2,65535
 40008b8:	39e0001c 	xori	r7,r7,32768
 40008bc:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40008c0:	e0bffe17 	ldw	r2,-8(fp)
 40008c4:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40008c8:	e0fffe17 	ldw	r3,-8(fp)
 40008cc:	18c0000b 	ldhu	r3,0(r3)
    }
    if( output_bits_per_pixel == 24 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008d0:	18ffffcc 	andi	r3,r3,65535
 40008d4:	18e0001c 	xori	r3,r3,32768
 40008d8:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40008dc:	d8c00115 	stw	r3,4(sp)
 40008e0:	d8800015 	stw	r2,0(sp)
 40008e4:	4000bc40 	call	4000bc4 <_Z21copy_pix_map_32_to_24PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40008e8:	e0bffd17 	ldw	r2,-12(fp)
 40008ec:	10800217 	ldw	r2,8(r2)
 40008f0:	108000d8 	cmpnei	r2,r2,3
 40008f4:	10001b1e 	bne	r2,zero,4000964 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x2cc>
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 40008f8:	e0bffd17 	ldw	r2,-12(fp)
 40008fc:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000900:	e0bffe17 	ldw	r2,-8(fp)
 4000904:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 4000908:	117fffcc 	andi	r5,r2,65535
 400090c:	2960001c 	xori	r5,r5,32768
 4000910:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000914:	e0bffe17 	ldw	r2,-8(fp)
 4000918:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 400091c:	11bfffcc 	andi	r6,r2,65535
 4000920:	31a0001c 	xori	r6,r6,32768
 4000924:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000928:	e0bffe17 	ldw	r2,-8(fp)
 400092c:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 4000930:	11ffffcc 	andi	r7,r2,65535
 4000934:	39e0001c 	xori	r7,r7,32768
 4000938:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 400093c:	e0bffe17 	ldw	r2,-8(fp)
 4000940:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000944:	e0fffe17 	ldw	r3,-8(fp)
 4000948:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_24( gimp_image->pixel_data, //void *src_ptr,
 400094c:	18ffffcc 	andi	r3,r3,65535
 4000950:	18e0001c 	xori	r3,r3,32768
 4000954:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000958:	d8c00115 	stw	r3,4(sp)
 400095c:	d8800015 	stw	r2,0(sp)
 4000960:	4000fc00 	call	4000fc0 <_Z21copy_pix_map_24_to_24PvlllS_l>
  
      }
    }
    if( output_bits_per_pixel == 32 )
 4000964:	e0bfff17 	ldw	r2,-4(fp)
 4000968:	10800818 	cmpnei	r2,r2,32
 400096c:	10003e1e 	bne	r2,zero,4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
    {
      if( gimp_image->bytes_per_pixel == 4 )
 4000970:	e0bffd17 	ldw	r2,-12(fp)
 4000974:	10800217 	ldw	r2,8(r2)
 4000978:	10800118 	cmpnei	r2,r2,4
 400097c:	10001b1e 	bne	r2,zero,40009ec <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x354>
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000980:	e0bffd17 	ldw	r2,-12(fp)
 4000984:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000988:	e0bffe17 	ldw	r2,-8(fp)
 400098c:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000990:	117fffcc 	andi	r5,r2,65535
 4000994:	2960001c 	xori	r5,r5,32768
 4000998:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 400099c:	e0bffe17 	ldw	r2,-8(fp)
 40009a0:	1080008b 	ldhu	r2,2(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009a4:	11bfffcc 	andi	r6,r2,65535
 40009a8:	31a0001c 	xori	r6,r6,32768
 40009ac:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 40009b0:	e0bffe17 	ldw	r2,-8(fp)
 40009b4:	1080000b 	ldhu	r2,0(r2)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009b8:	11ffffcc 	andi	r7,r2,65535
 40009bc:	39e0001c 	xori	r7,r7,32768
 40009c0:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 40009c4:	e0bffe17 	ldw	r2,-8(fp)
 40009c8:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 40009cc:	e0fffe17 	ldw	r3,-8(fp)
 40009d0:	18c0000b 	ldhu	r3,0(r3)
    }
    if( output_bits_per_pixel == 32 )
    {
      if( gimp_image->bytes_per_pixel == 4 )
      {
        copy_pix_map_32_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009d4:	18ffffcc 	andi	r3,r3,65535
 40009d8:	18e0001c 	xori	r3,r3,32768
 40009dc:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 40009e0:	d8c00115 	stw	r3,4(sp)
 40009e4:	d8800015 	stw	r2,0(sp)
 40009e8:	4000abc0 	call	4000abc <_Z21copy_pix_map_32_to_32PvlllS_l>
      }
      if( gimp_image->bytes_per_pixel == 3 )
 40009ec:	e0bffd17 	ldw	r2,-12(fp)
 40009f0:	10800217 	ldw	r2,8(r2)
 40009f4:	108000d8 	cmpnei	r2,r2,3
 40009f8:	10001b1e 	bne	r2,zero,4000a68 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi+0x3d0>
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 40009fc:	e0bffd17 	ldw	r2,-12(fp)
 4000a00:	11000317 	ldw	r4,12(r2)
                               bmp->biWidth, //long src_active_width,
 4000a04:	e0bffe17 	ldw	r2,-8(fp)
 4000a08:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a0c:	117fffcc 	andi	r5,r2,65535
 4000a10:	2960001c 	xori	r5,r5,32768
 4000a14:	29600004 	addi	r5,r5,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
 4000a18:	e0bffe17 	ldw	r2,-8(fp)
 4000a1c:	1080008b 	ldhu	r2,2(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a20:	11bfffcc 	andi	r6,r2,65535
 4000a24:	31a0001c 	xori	r6,r6,32768
 4000a28:	31a00004 	addi	r6,r6,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
 4000a2c:	e0bffe17 	ldw	r2,-8(fp)
 4000a30:	1080000b 	ldhu	r2,0(r2)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a34:	11ffffcc 	andi	r7,r2,65535
 4000a38:	39e0001c 	xori	r7,r7,32768
 4000a3c:	39e00004 	addi	r7,r7,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
 4000a40:	e0bffe17 	ldw	r2,-8(fp)
 4000a44:	10800317 	ldw	r2,12(r2)
                               bmp->biWidth  );  //long dest_line_width
 4000a48:	e0fffe17 	ldw	r3,-8(fp)
 4000a4c:	18c0000b 	ldhu	r3,0(r3)
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
      }
      if( gimp_image->bytes_per_pixel == 3 )
      {
        copy_pix_map_24_to_32( gimp_image->pixel_data, //void *src_ptr,
 4000a50:	18ffffcc 	andi	r3,r3,65535
 4000a54:	18e0001c 	xori	r3,r3,32768
 4000a58:	18e00004 	addi	r3,r3,-32768
                               bmp->biWidth, //long src_active_width,
                               bmp->biHeight, // long src_active_height,
                               bmp->biWidth, //long src_line_width,
                               bmp->data, //void *dest_ptr,
                               bmp->biWidth  );  //long dest_line_width
 4000a5c:	d8c00115 	stw	r3,4(sp)
 4000a60:	d8800015 	stw	r2,0(sp)
 4000a64:	4000e500 	call	4000e50 <_Z21copy_pix_map_24_to_32PvlllS_l>
  
      }
    }
  }
  
  return( ret_code );
 4000a68:	e0bffa17 	ldw	r2,-24(fp)
}
 4000a6c:	e037883a 	mov	sp,fp
 4000a70:	dfc00117 	ldw	ra,4(sp)
 4000a74:	df000017 	ldw	fp,0(sp)
 4000a78:	dec00204 	addi	sp,sp,8
 4000a7c:	f800283a 	ret

04000a80 <_Z18free_gimp_bmp_dataP13bitmap_struct>:

void free_gimp_bmp_data( bitmap_struct *bmp )
{
 4000a80:	defffd04 	addi	sp,sp,-12
 4000a84:	dfc00215 	stw	ra,8(sp)
 4000a88:	df000115 	stw	fp,4(sp)
 4000a8c:	df000104 	addi	fp,sp,4
 4000a90:	e13fff15 	stw	r4,-4(fp)
  free( bmp->data );
 4000a94:	e0bfff17 	ldw	r2,-4(fp)
 4000a98:	10800317 	ldw	r2,12(r2)
 4000a9c:	1009883a 	mov	r4,r2
 4000aa0:	4011bf40 	call	4011bf4 <free>
}
 4000aa4:	0001883a 	nop
 4000aa8:	e037883a 	mov	sp,fp
 4000aac:	dfc00117 	ldw	ra,4(sp)
 4000ab0:	df000017 	ldw	fp,0(sp)
 4000ab4:	dec00204 	addi	sp,sp,8
 4000ab8:	f800283a 	ret

04000abc <_Z21copy_pix_map_32_to_32PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000abc:	defff504 	addi	sp,sp,-44
 4000ac0:	df000a15 	stw	fp,40(sp)
 4000ac4:	df000a04 	addi	fp,sp,40
 4000ac8:	e13ffc15 	stw	r4,-16(fp)
 4000acc:	e17ffd15 	stw	r5,-12(fp)
 4000ad0:	e1bffe15 	stw	r6,-8(fp)
 4000ad4:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000ad8:	e0ffff17 	ldw	r3,-4(fp)
 4000adc:	e0bfff17 	ldw	r2,-4(fp)
 4000ae0:	1887883a 	add	r3,r3,r2
 4000ae4:	e0bfff17 	ldw	r2,-4(fp)
 4000ae8:	1887883a 	add	r3,r3,r2
 4000aec:	e0bfff17 	ldw	r2,-4(fp)
 4000af0:	1885883a 	add	r2,r3,r2
 4000af4:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
 4000af8:	e0c00217 	ldw	r3,8(fp)
 4000afc:	e0800217 	ldw	r2,8(fp)
 4000b00:	1887883a 	add	r3,r3,r2
 4000b04:	e0800217 	ldw	r2,8(fp)
 4000b08:	1887883a 	add	r3,r3,r2
 4000b0c:	e0800217 	ldw	r2,8(fp)
 4000b10:	1885883a 	add	r2,r3,r2
 4000b14:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000b18:	e03ff615 	stw	zero,-40(fp)
 4000b1c:	e0fff617 	ldw	r3,-40(fp)
 4000b20:	e0bffe17 	ldw	r2,-8(fp)
 4000b24:	1880220e 	bge	r3,r2,4000bb0 <_Z21copy_pix_map_32_to_32PvlllS_l+0xf4>
  {
    src_line_ptr = src_ptr;
 4000b28:	e0bffc17 	ldw	r2,-16(fp)
 4000b2c:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000b30:	e0800117 	ldw	r2,4(fp)
 4000b34:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000b38:	e03ff715 	stw	zero,-36(fp)
 4000b3c:	e0fff717 	ldw	r3,-36(fp)
 4000b40:	e0bffd17 	ldw	r2,-12(fp)
 4000b44:	18800e0e 	bge	r3,r2,4000b80 <_Z21copy_pix_map_32_to_32PvlllS_l+0xc4>
    {
      *(unsigned long *)(dest_line_ptr) = *(unsigned long *)(src_line_ptr);
 4000b48:	e0bff817 	ldw	r2,-32(fp)
 4000b4c:	10c00017 	ldw	r3,0(r2)
 4000b50:	e0bff917 	ldw	r2,-28(fp)
 4000b54:	10c00015 	stw	r3,0(r2)
      src_line_ptr += 4;
 4000b58:	e0bff817 	ldw	r2,-32(fp)
 4000b5c:	10800104 	addi	r2,r2,4
 4000b60:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 4;
 4000b64:	e0bff917 	ldw	r2,-28(fp)
 4000b68:	10800104 	addi	r2,r2,4
 4000b6c:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000b70:	e0bff717 	ldw	r2,-36(fp)
 4000b74:	10800044 	addi	r2,r2,1
 4000b78:	e0bff715 	stw	r2,-36(fp)
 4000b7c:	003fef06 	br	4000b3c <__reset+0xfafffb3c>
    {
      *(unsigned long *)(dest_line_ptr) = *(unsigned long *)(src_line_ptr);
      src_line_ptr += 4;
      dest_line_ptr += 4;
    }
    src_ptr += src_increment;
 4000b80:	e0bffa17 	ldw	r2,-24(fp)
 4000b84:	e0fffc17 	ldw	r3,-16(fp)
 4000b88:	1885883a 	add	r2,r3,r2
 4000b8c:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000b90:	e0bffb17 	ldw	r2,-20(fp)
 4000b94:	e0c00117 	ldw	r3,4(fp)
 4000b98:	1885883a 	add	r2,r3,r2
 4000b9c:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000ba0:	e0bff617 	ldw	r2,-40(fp)
 4000ba4:	10800044 	addi	r2,r2,1
 4000ba8:	e0bff615 	stw	r2,-40(fp)
 4000bac:	003fdb06 	br	4000b1c <__reset+0xfafffb1c>
      dest_line_ptr += 4;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000bb0:	0001883a 	nop
 4000bb4:	e037883a 	mov	sp,fp
 4000bb8:	df000017 	ldw	fp,0(sp)
 4000bbc:	dec00104 	addi	sp,sp,4
 4000bc0:	f800283a 	ret

04000bc4 <_Z21copy_pix_map_32_to_24PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000bc4:	defff504 	addi	sp,sp,-44
 4000bc8:	df000a15 	stw	fp,40(sp)
 4000bcc:	df000a04 	addi	fp,sp,40
 4000bd0:	e13ffc15 	stw	r4,-16(fp)
 4000bd4:	e17ffd15 	stw	r5,-12(fp)
 4000bd8:	e1bffe15 	stw	r6,-8(fp)
 4000bdc:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000be0:	e0ffff17 	ldw	r3,-4(fp)
 4000be4:	e0bfff17 	ldw	r2,-4(fp)
 4000be8:	1887883a 	add	r3,r3,r2
 4000bec:	e0bfff17 	ldw	r2,-4(fp)
 4000bf0:	1887883a 	add	r3,r3,r2
 4000bf4:	e0bfff17 	ldw	r2,-4(fp)
 4000bf8:	1885883a 	add	r2,r3,r2
 4000bfc:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
 4000c00:	e0c00217 	ldw	r3,8(fp)
 4000c04:	e0800217 	ldw	r2,8(fp)
 4000c08:	1887883a 	add	r3,r3,r2
 4000c0c:	e0800217 	ldw	r2,8(fp)
 4000c10:	1885883a 	add	r2,r3,r2
 4000c14:	e0bffb15 	stw	r2,-20(fp)

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000c18:	e03ff615 	stw	zero,-40(fp)
 4000c1c:	e0fff617 	ldw	r3,-40(fp)
 4000c20:	e0bffe17 	ldw	r2,-8(fp)
 4000c24:	1880360e 	bge	r3,r2,4000d00 <_Z21copy_pix_map_32_to_24PvlllS_l+0x13c>
  {
    src_line_ptr = src_ptr;
 4000c28:	e0bffc17 	ldw	r2,-16(fp)
 4000c2c:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000c30:	e0800117 	ldw	r2,4(fp)
 4000c34:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000c38:	e03ff715 	stw	zero,-36(fp)
 4000c3c:	e0fff717 	ldw	r3,-36(fp)
 4000c40:	e0bffd17 	ldw	r2,-12(fp)
 4000c44:	1880220e 	bge	r3,r2,4000cd0 <_Z21copy_pix_map_32_to_24PvlllS_l+0x10c>
    {
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c48:	e0bff817 	ldw	r2,-32(fp)
 4000c4c:	10c00003 	ldbu	r3,0(r2)
 4000c50:	e0bff917 	ldw	r2,-28(fp)
 4000c54:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000c58:	e0bff817 	ldw	r2,-32(fp)
 4000c5c:	10800044 	addi	r2,r2,1
 4000c60:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000c64:	e0bff917 	ldw	r2,-28(fp)
 4000c68:	10800044 	addi	r2,r2,1
 4000c6c:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c70:	e0bff817 	ldw	r2,-32(fp)
 4000c74:	10c00003 	ldbu	r3,0(r2)
 4000c78:	e0bff917 	ldw	r2,-28(fp)
 4000c7c:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000c80:	e0bff817 	ldw	r2,-32(fp)
 4000c84:	10800044 	addi	r2,r2,1
 4000c88:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000c8c:	e0bff917 	ldw	r2,-28(fp)
 4000c90:	10800044 	addi	r2,r2,1
 4000c94:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
 4000c98:	e0bff817 	ldw	r2,-32(fp)
 4000c9c:	10c00003 	ldbu	r3,0(r2)
 4000ca0:	e0bff917 	ldw	r2,-28(fp)
 4000ca4:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 2;
 4000ca8:	e0bff817 	ldw	r2,-32(fp)
 4000cac:	10800084 	addi	r2,r2,2
 4000cb0:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000cb4:	e0bff917 	ldw	r2,-28(fp)
 4000cb8:	10800044 	addi	r2,r2,1
 4000cbc:	e0bff915 	stw	r2,-28(fp)

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000cc0:	e0bff717 	ldw	r2,-36(fp)
 4000cc4:	10800044 	addi	r2,r2,1
 4000cc8:	e0bff715 	stw	r2,-36(fp)
 4000ccc:	003fdb06 	br	4000c3c <__reset+0xfafffc3c>
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr) = *(unsigned char *)(src_line_ptr);
      src_line_ptr += 2;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 4000cd0:	e0bffa17 	ldw	r2,-24(fp)
 4000cd4:	e0fffc17 	ldw	r3,-16(fp)
 4000cd8:	1885883a 	add	r2,r3,r2
 4000cdc:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000ce0:	e0bffb17 	ldw	r2,-20(fp)
 4000ce4:	e0c00117 	ldw	r3,4(fp)
 4000ce8:	1885883a 	add	r2,r3,r2
 4000cec:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width;

  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000cf0:	e0bff617 	ldw	r2,-40(fp)
 4000cf4:	10800044 	addi	r2,r2,1
 4000cf8:	e0bff615 	stw	r2,-40(fp)
 4000cfc:	003fc706 	br	4000c1c <__reset+0xfafffc1c>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000d00:	0001883a 	nop
 4000d04:	e037883a 	mov	sp,fp
 4000d08:	df000017 	ldw	fp,0(sp)
 4000d0c:	dec00104 	addi	sp,sp,4
 4000d10:	f800283a 	ret

04000d14 <_Z21copy_pix_map_32_to_16PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000d14:	defff304 	addi	sp,sp,-52
 4000d18:	df000c15 	stw	fp,48(sp)
 4000d1c:	df000c04 	addi	fp,sp,48
 4000d20:	e13ffc15 	stw	r4,-16(fp)
 4000d24:	e17ffd15 	stw	r5,-12(fp)
 4000d28:	e1bffe15 	stw	r6,-8(fp)
 4000d2c:	e1ffff15 	stw	r7,-4(fp)
  unsigned long next_long_pixel;
  unsigned short next_short_pixel;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
 4000d30:	e0ffff17 	ldw	r3,-4(fp)
 4000d34:	e0bfff17 	ldw	r2,-4(fp)
 4000d38:	1887883a 	add	r3,r3,r2
 4000d3c:	e0bfff17 	ldw	r2,-4(fp)
 4000d40:	1887883a 	add	r3,r3,r2
 4000d44:	e0bfff17 	ldw	r2,-4(fp)
 4000d48:	1885883a 	add	r2,r3,r2
 4000d4c:	e0bff815 	stw	r2,-32(fp)
  dest_increment = dest_line_width + dest_line_width;
 4000d50:	e0c00217 	ldw	r3,8(fp)
 4000d54:	e0800217 	ldw	r2,8(fp)
 4000d58:	1885883a 	add	r2,r3,r2
 4000d5c:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000d60:	e03ff415 	stw	zero,-48(fp)
 4000d64:	e0fff417 	ldw	r3,-48(fp)
 4000d68:	e0bffe17 	ldw	r2,-8(fp)
 4000d6c:	1880330e 	bge	r3,r2,4000e3c <_Z21copy_pix_map_32_to_16PvlllS_l+0x128>
  {
    src_line_ptr = src_ptr;
 4000d70:	e0bffc17 	ldw	r2,-16(fp)
 4000d74:	e0bff615 	stw	r2,-40(fp)
    dest_line_ptr = dest_ptr;
 4000d78:	e0800117 	ldw	r2,4(fp)
 4000d7c:	e0bff715 	stw	r2,-36(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000d80:	e03ff515 	stw	zero,-44(fp)
 4000d84:	e0fff517 	ldw	r3,-44(fp)
 4000d88:	e0bffd17 	ldw	r2,-12(fp)
 4000d8c:	18801f0e 	bge	r3,r2,4000e0c <_Z21copy_pix_map_32_to_16PvlllS_l+0xf8>
    {
      next_long_pixel = *(unsigned long *)(src_line_ptr);
 4000d90:	e0bff617 	ldw	r2,-40(fp)
 4000d94:	10800017 	ldw	r2,0(r2)
 4000d98:	e0bffa15 	stw	r2,-24(fp)
      src_line_ptr += 4;
 4000d9c:	e0bff617 	ldw	r2,-40(fp)
 4000da0:	10800104 	addi	r2,r2,4
 4000da4:	e0bff615 	stw	r2,-40(fp)

      next_short_pixel =  (((next_long_pixel >> 3) & 0x1f) << 11) |
 4000da8:	e0bffa17 	ldw	r2,-24(fp)
 4000dac:	1004d0fa 	srli	r2,r2,3
                          (((next_long_pixel >> 10) & 0x3f) << 5) |
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;
 4000db0:	100492fa 	slli	r2,r2,11
 4000db4:	1007883a 	mov	r3,r2
    {
      next_long_pixel = *(unsigned long *)(src_line_ptr);
      src_line_ptr += 4;

      next_short_pixel =  (((next_long_pixel >> 3) & 0x1f) << 11) |
                          (((next_long_pixel >> 10) & 0x3f) << 5) |
 4000db8:	e0bffa17 	ldw	r2,-24(fp)
 4000dbc:	1004d2ba 	srli	r2,r2,10
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;
 4000dc0:	10800fcc 	andi	r2,r2,63
 4000dc4:	1004917a 	slli	r2,r2,5
 4000dc8:	1884b03a 	or	r2,r3,r2
 4000dcc:	1007883a 	mov	r3,r2
 4000dd0:	e0bffa17 	ldw	r2,-24(fp)
 4000dd4:	1004d4fa 	srli	r2,r2,19
 4000dd8:	108007cc 	andi	r2,r2,31
 4000ddc:	1884b03a 	or	r2,r3,r2
 4000de0:	e0bffb0d 	sth	r2,-20(fp)

      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
 4000de4:	e0bff717 	ldw	r2,-36(fp)
 4000de8:	e0fffb0b 	ldhu	r3,-20(fp)
 4000dec:	10c0000d 	sth	r3,0(r2)
      dest_line_ptr += 2;
 4000df0:	e0bff717 	ldw	r2,-36(fp)
 4000df4:	10800084 	addi	r2,r2,2
 4000df8:	e0bff715 	stw	r2,-36(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000dfc:	e0bff517 	ldw	r2,-44(fp)
 4000e00:	10800044 	addi	r2,r2,1
 4000e04:	e0bff515 	stw	r2,-44(fp)
 4000e08:	003fde06 	br	4000d84 <__reset+0xfafffd84>
                          (((next_long_pixel >> 19) & 0x1f) << 0) ;

      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
 4000e0c:	e0bff817 	ldw	r2,-32(fp)
 4000e10:	e0fffc17 	ldw	r3,-16(fp)
 4000e14:	1885883a 	add	r2,r3,r2
 4000e18:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000e1c:	e0bff917 	ldw	r2,-28(fp)
 4000e20:	e0c00117 	ldw	r3,4(fp)
 4000e24:	1885883a 	add	r2,r3,r2
 4000e28:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000e2c:	e0bff417 	ldw	r2,-48(fp)
 4000e30:	10800044 	addi	r2,r2,1
 4000e34:	e0bff415 	stw	r2,-48(fp)
 4000e38:	003fca06 	br	4000d64 <__reset+0xfafffd64>
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000e3c:	0001883a 	nop
 4000e40:	e037883a 	mov	sp,fp
 4000e44:	df000017 	ldw	fp,0(sp)
 4000e48:	dec00104 	addi	sp,sp,4
 4000e4c:	f800283a 	ret

04000e50 <_Z21copy_pix_map_24_to_32PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000e50:	defff504 	addi	sp,sp,-44
 4000e54:	df000a15 	stw	fp,40(sp)
 4000e58:	df000a04 	addi	fp,sp,40
 4000e5c:	e13ffc15 	stw	r4,-16(fp)
 4000e60:	e17ffd15 	stw	r5,-12(fp)
 4000e64:	e1bffe15 	stw	r6,-8(fp)
 4000e68:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width;
 4000e6c:	e0ffff17 	ldw	r3,-4(fp)
 4000e70:	e0bfff17 	ldw	r2,-4(fp)
 4000e74:	1887883a 	add	r3,r3,r2
 4000e78:	e0bfff17 	ldw	r2,-4(fp)
 4000e7c:	1885883a 	add	r2,r3,r2
 4000e80:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
 4000e84:	e0c00217 	ldw	r3,8(fp)
 4000e88:	e0800217 	ldw	r2,8(fp)
 4000e8c:	1887883a 	add	r3,r3,r2
 4000e90:	e0800217 	ldw	r2,8(fp)
 4000e94:	1887883a 	add	r3,r3,r2
 4000e98:	e0800217 	ldw	r2,8(fp)
 4000e9c:	1885883a 	add	r2,r3,r2
 4000ea0:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000ea4:	e03ff615 	stw	zero,-40(fp)
 4000ea8:	e0fff617 	ldw	r3,-40(fp)
 4000eac:	e0bffe17 	ldw	r2,-8(fp)
 4000eb0:	18803e0e 	bge	r3,r2,4000fac <_Z21copy_pix_map_24_to_32PvlllS_l+0x15c>
  {
    src_line_ptr = src_ptr;
 4000eb4:	e0bffc17 	ldw	r2,-16(fp)
 4000eb8:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4000ebc:	e0800117 	ldw	r2,4(fp)
 4000ec0:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000ec4:	e03ff715 	stw	zero,-36(fp)
 4000ec8:	e0fff717 	ldw	r3,-36(fp)
 4000ecc:	e0bffd17 	ldw	r2,-12(fp)
 4000ed0:	18802a0e 	bge	r3,r2,4000f7c <_Z21copy_pix_map_24_to_32PvlllS_l+0x12c>
    {
      *(unsigned char *)(dest_line_ptr + 2)  = *(unsigned char *)(src_line_ptr);
 4000ed4:	e0bff917 	ldw	r2,-28(fp)
 4000ed8:	10800084 	addi	r2,r2,2
 4000edc:	e0fff817 	ldw	r3,-32(fp)
 4000ee0:	18c00003 	ldbu	r3,0(r3)
 4000ee4:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000ee8:	e0bff817 	ldw	r2,-32(fp)
 4000eec:	10800044 	addi	r2,r2,1
 4000ef0:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000ef4:	e0bff917 	ldw	r2,-28(fp)
 4000ef8:	10800044 	addi	r2,r2,1
 4000efc:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr)  = *(unsigned char *)(src_line_ptr);
 4000f00:	e0bff817 	ldw	r2,-32(fp)
 4000f04:	10c00003 	ldbu	r3,0(r2)
 4000f08:	e0bff917 	ldw	r2,-28(fp)
 4000f0c:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000f10:	e0bff817 	ldw	r2,-32(fp)
 4000f14:	10800044 	addi	r2,r2,1
 4000f18:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000f1c:	e0bff917 	ldw	r2,-28(fp)
 4000f20:	10800044 	addi	r2,r2,1
 4000f24:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr - 2)  = *(unsigned char *)(src_line_ptr);
 4000f28:	e0bff917 	ldw	r2,-28(fp)
 4000f2c:	10bfff84 	addi	r2,r2,-2
 4000f30:	e0fff817 	ldw	r3,-32(fp)
 4000f34:	18c00003 	ldbu	r3,0(r3)
 4000f38:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4000f3c:	e0bff817 	ldw	r2,-32(fp)
 4000f40:	10800044 	addi	r2,r2,1
 4000f44:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4000f48:	e0bff917 	ldw	r2,-28(fp)
 4000f4c:	10800044 	addi	r2,r2,1
 4000f50:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr)  = 0xff;
 4000f54:	e0bff917 	ldw	r2,-28(fp)
 4000f58:	00ffffc4 	movi	r3,-1
 4000f5c:	10c00005 	stb	r3,0(r2)
      dest_line_ptr += 1;
 4000f60:	e0bff917 	ldw	r2,-28(fp)
 4000f64:	10800044 	addi	r2,r2,1
 4000f68:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4000f6c:	e0bff717 	ldw	r2,-36(fp)
 4000f70:	10800044 	addi	r2,r2,1
 4000f74:	e0bff715 	stw	r2,-36(fp)
 4000f78:	003fd306 	br	4000ec8 <__reset+0xfafffec8>
      src_line_ptr += 1;
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr)  = 0xff;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 4000f7c:	e0bffa17 	ldw	r2,-24(fp)
 4000f80:	e0fffc17 	ldw	r3,-16(fp)
 4000f84:	1885883a 	add	r2,r3,r2
 4000f88:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4000f8c:	e0bffb17 	ldw	r2,-20(fp)
 4000f90:	e0c00117 	ldw	r3,4(fp)
 4000f94:	1885883a 	add	r2,r3,r2
 4000f98:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;
  
  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4000f9c:	e0bff617 	ldw	r2,-40(fp)
 4000fa0:	10800044 	addi	r2,r2,1
 4000fa4:	e0bff615 	stw	r2,-40(fp)
 4000fa8:	003fbf06 	br	4000ea8 <__reset+0xfafffea8>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4000fac:	0001883a 	nop
 4000fb0:	e037883a 	mov	sp,fp
 4000fb4:	df000017 	ldw	fp,0(sp)
 4000fb8:	dec00104 	addi	sp,sp,4
 4000fbc:	f800283a 	ret

04000fc0 <_Z21copy_pix_map_24_to_24PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4000fc0:	defff504 	addi	sp,sp,-44
 4000fc4:	df000a15 	stw	fp,40(sp)
 4000fc8:	df000a04 	addi	fp,sp,40
 4000fcc:	e13ffc15 	stw	r4,-16(fp)
 4000fd0:	e17ffd15 	stw	r5,-12(fp)
 4000fd4:	e1bffe15 	stw	r6,-8(fp)
 4000fd8:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
 4000fdc:	e0ffff17 	ldw	r3,-4(fp)
 4000fe0:	e0bfff17 	ldw	r2,-4(fp)
 4000fe4:	1887883a 	add	r3,r3,r2
 4000fe8:	e0bfff17 	ldw	r2,-4(fp)
 4000fec:	1885883a 	add	r2,r3,r2
 4000ff0:	e0bffa15 	stw	r2,-24(fp)
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
 4000ff4:	e0c00217 	ldw	r3,8(fp)
 4000ff8:	e0800217 	ldw	r2,8(fp)
 4000ffc:	1887883a 	add	r3,r3,r2
 4001000:	e0800217 	ldw	r2,8(fp)
 4001004:	1885883a 	add	r2,r3,r2
 4001008:	e0bffb15 	stw	r2,-20(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 400100c:	e03ff615 	stw	zero,-40(fp)
 4001010:	e0fff617 	ldw	r3,-40(fp)
 4001014:	e0bffe17 	ldw	r2,-8(fp)
 4001018:	1880360e 	bge	r3,r2,40010f4 <_Z21copy_pix_map_24_to_24PvlllS_l+0x134>
  {
    src_line_ptr = src_ptr;
 400101c:	e0bffc17 	ldw	r2,-16(fp)
 4001020:	e0bff815 	stw	r2,-32(fp)
    dest_line_ptr = dest_ptr;
 4001024:	e0800117 	ldw	r2,4(fp)
 4001028:	e0bff915 	stw	r2,-28(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 400102c:	e03ff715 	stw	zero,-36(fp)
 4001030:	e0fff717 	ldw	r3,-36(fp)
 4001034:	e0bffd17 	ldw	r2,-12(fp)
 4001038:	1880220e 	bge	r3,r2,40010c4 <_Z21copy_pix_map_24_to_24PvlllS_l+0x104>
    {
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 400103c:	e0bff817 	ldw	r2,-32(fp)
 4001040:	10c00003 	ldbu	r3,0(r2)
 4001044:	e0bff917 	ldw	r2,-28(fp)
 4001048:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 400104c:	e0bff817 	ldw	r2,-32(fp)
 4001050:	10800044 	addi	r2,r2,1
 4001054:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4001058:	e0bff917 	ldw	r2,-28(fp)
 400105c:	10800044 	addi	r2,r2,1
 4001060:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 4001064:	e0bff817 	ldw	r2,-32(fp)
 4001068:	10c00003 	ldbu	r3,0(r2)
 400106c:	e0bff917 	ldw	r2,-28(fp)
 4001070:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 4001074:	e0bff817 	ldw	r2,-32(fp)
 4001078:	10800044 	addi	r2,r2,1
 400107c:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 4001080:	e0bff917 	ldw	r2,-28(fp)
 4001084:	10800044 	addi	r2,r2,1
 4001088:	e0bff915 	stw	r2,-28(fp)
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
 400108c:	e0bff817 	ldw	r2,-32(fp)
 4001090:	10c00003 	ldbu	r3,0(r2)
 4001094:	e0bff917 	ldw	r2,-28(fp)
 4001098:	10c00005 	stb	r3,0(r2)
      src_line_ptr += 1;
 400109c:	e0bff817 	ldw	r2,-32(fp)
 40010a0:	10800044 	addi	r2,r2,1
 40010a4:	e0bff815 	stw	r2,-32(fp)
      dest_line_ptr += 1;
 40010a8:	e0bff917 	ldw	r2,-28(fp)
 40010ac:	10800044 	addi	r2,r2,1
 40010b0:	e0bff915 	stw	r2,-28(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 40010b4:	e0bff717 	ldw	r2,-36(fp)
 40010b8:	10800044 	addi	r2,r2,1
 40010bc:	e0bff715 	stw	r2,-36(fp)
 40010c0:	003fdb06 	br	4001030 <__reset+0xfb000030>
      dest_line_ptr += 1;
      *(unsigned char *)(dest_line_ptr) = (*(unsigned char *)(src_line_ptr));
      src_line_ptr += 1;
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
 40010c4:	e0bffa17 	ldw	r2,-24(fp)
 40010c8:	e0fffc17 	ldw	r3,-16(fp)
 40010cc:	1885883a 	add	r2,r3,r2
 40010d0:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 40010d4:	e0bffb17 	ldw	r2,-20(fp)
 40010d8:	e0c00117 	ldw	r3,4(fp)
 40010dc:	1885883a 	add	r2,r3,r2
 40010e0:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 40010e4:	e0bff617 	ldw	r2,-40(fp)
 40010e8:	10800044 	addi	r2,r2,1
 40010ec:	e0bff615 	stw	r2,-40(fp)
 40010f0:	003fc706 	br	4001010 <__reset+0xfb000010>
      dest_line_ptr += 1;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 40010f4:	0001883a 	nop
 40010f8:	e037883a 	mov	sp,fp
 40010fc:	df000017 	ldw	fp,0(sp)
 4001100:	dec00104 	addi	sp,sp,4
 4001104:	f800283a 	ret

04001108 <_Z21copy_pix_map_24_to_16PvlllS_l>:
                    long src_active_height,
                    long src_line_width,
                    void *dest_ptr,
                    long dest_line_width
                  )
{
 4001108:	defff404 	addi	sp,sp,-48
 400110c:	df000b15 	stw	fp,44(sp)
 4001110:	df000b04 	addi	fp,sp,44
 4001114:	e13ffc15 	stw	r4,-16(fp)
 4001118:	e17ffd15 	stw	r5,-12(fp)
 400111c:	e1bffe15 	stw	r6,-8(fp)
 4001120:	e1ffff15 	stw	r7,-4(fp)
  int src_row, src_col;
  unsigned short next_short_pixel;
  void *src_line_ptr, *dest_line_ptr;
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
 4001124:	e0ffff17 	ldw	r3,-4(fp)
 4001128:	e0bfff17 	ldw	r2,-4(fp)
 400112c:	1887883a 	add	r3,r3,r2
 4001130:	e0bfff17 	ldw	r2,-4(fp)
 4001134:	1885883a 	add	r2,r3,r2
 4001138:	e0bff915 	stw	r2,-28(fp)
  dest_increment = dest_line_width + dest_line_width;
 400113c:	e0c00217 	ldw	r3,8(fp)
 4001140:	e0800217 	ldw	r2,8(fp)
 4001144:	1885883a 	add	r2,r3,r2
 4001148:	e0bffa15 	stw	r2,-24(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 400114c:	e03ff515 	stw	zero,-44(fp)
 4001150:	e0fff517 	ldw	r3,-44(fp)
 4001154:	e0bffe17 	ldw	r2,-8(fp)
 4001158:	18803e0e 	bge	r3,r2,4001254 <_Z21copy_pix_map_24_to_16PvlllS_l+0x14c>
  {
    src_line_ptr = src_ptr;
 400115c:	e0bffc17 	ldw	r2,-16(fp)
 4001160:	e0bff715 	stw	r2,-36(fp)
    dest_line_ptr = dest_ptr;
 4001164:	e0800117 	ldw	r2,4(fp)
 4001168:	e0bff815 	stw	r2,-32(fp)
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 400116c:	e03ff615 	stw	zero,-40(fp)
 4001170:	e0fff617 	ldw	r3,-40(fp)
 4001174:	e0bffd17 	ldw	r2,-12(fp)
 4001178:	18802a0e 	bge	r3,r2,4001224 <_Z21copy_pix_map_24_to_16PvlllS_l+0x11c>
    {
      next_short_pixel  = ((*(unsigned char *)(src_line_ptr)) & 0xf8) << 8 ;
 400117c:	e0bff717 	ldw	r2,-36(fp)
 4001180:	10800003 	ldbu	r2,0(r2)
 4001184:	10803fcc 	andi	r2,r2,255
 4001188:	10803e0c 	andi	r2,r2,248
 400118c:	1004923a 	slli	r2,r2,8
 4001190:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 4001194:	e0bff717 	ldw	r2,-36(fp)
 4001198:	10800044 	addi	r2,r2,1
 400119c:	e0bff715 	stw	r2,-36(fp)
      next_short_pixel |= ((*(unsigned char *)(src_line_ptr)) & 0xfc) << 3;
 40011a0:	e0bff717 	ldw	r2,-36(fp)
 40011a4:	10800003 	ldbu	r2,0(r2)
 40011a8:	10803fcc 	andi	r2,r2,255
 40011ac:	10803f0c 	andi	r2,r2,252
 40011b0:	100490fa 	slli	r2,r2,3
 40011b4:	1007883a 	mov	r3,r2
 40011b8:	e0bffb0b 	ldhu	r2,-20(fp)
 40011bc:	1884b03a 	or	r2,r3,r2
 40011c0:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 40011c4:	e0bff717 	ldw	r2,-36(fp)
 40011c8:	10800044 	addi	r2,r2,1
 40011cc:	e0bff715 	stw	r2,-36(fp)
      next_short_pixel |= ((*(unsigned char *)(src_line_ptr)) & 0xf8) >> 3;
 40011d0:	e0bff717 	ldw	r2,-36(fp)
 40011d4:	10800003 	ldbu	r2,0(r2)
 40011d8:	10803fcc 	andi	r2,r2,255
 40011dc:	1004d0fa 	srli	r2,r2,3
 40011e0:	10c03fcc 	andi	r3,r2,255
 40011e4:	e0bffb0b 	ldhu	r2,-20(fp)
 40011e8:	1884b03a 	or	r2,r3,r2
 40011ec:	e0bffb0d 	sth	r2,-20(fp)
      src_line_ptr += 1;
 40011f0:	e0bff717 	ldw	r2,-36(fp)
 40011f4:	10800044 	addi	r2,r2,1
 40011f8:	e0bff715 	stw	r2,-36(fp)
  
      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
 40011fc:	e0bff817 	ldw	r2,-32(fp)
 4001200:	e0fffb0b 	ldhu	r3,-20(fp)
 4001204:	10c0000d 	sth	r3,0(r2)
      dest_line_ptr += 2;
 4001208:	e0bff817 	ldw	r2,-32(fp)
 400120c:	10800084 	addi	r2,r2,2
 4001210:	e0bff815 	stw	r2,-32(fp)
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
  {
    src_line_ptr = src_ptr;
    dest_line_ptr = dest_ptr;
    for( src_col = 0 ; src_col < src_active_width ; src_col++ )
 4001214:	e0bff617 	ldw	r2,-40(fp)
 4001218:	10800044 	addi	r2,r2,1
 400121c:	e0bff615 	stw	r2,-40(fp)
 4001220:	003fd306 	br	4001170 <__reset+0xfb000170>
      src_line_ptr += 1;
  
      *(unsigned short *)(dest_line_ptr) = next_short_pixel;
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
 4001224:	e0bff917 	ldw	r2,-28(fp)
 4001228:	e0fffc17 	ldw	r3,-16(fp)
 400122c:	1885883a 	add	r2,r3,r2
 4001230:	e0bffc15 	stw	r2,-16(fp)
    dest_ptr += dest_increment;
 4001234:	e0bffa17 	ldw	r2,-24(fp)
 4001238:	e0c00117 	ldw	r3,4(fp)
 400123c:	1885883a 	add	r2,r3,r2
 4001240:	e0800115 	stw	r2,4(fp)
  long src_increment, dest_increment;

  src_increment = src_line_width + src_line_width + src_line_width;
  dest_increment = dest_line_width + dest_line_width;
  
  for( src_row = 0 ; src_row < src_active_height ; src_row++ )
 4001244:	e0bff517 	ldw	r2,-44(fp)
 4001248:	10800044 	addi	r2,r2,1
 400124c:	e0bff515 	stw	r2,-44(fp)
 4001250:	003fbf06 	br	4001150 <__reset+0xfb000150>
      dest_line_ptr += 2;
    }
    src_ptr += src_increment;
    dest_ptr += dest_increment;
  }
}
 4001254:	0001883a 	nop
 4001258:	e037883a 	mov	sp,fp
 400125c:	df000017 	ldw	fp,0(sp)
 4001260:	dec00104 	addi	sp,sp,4
 4001264:	f800283a 	ret

04001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>:
#include "sys/alt_cache.h"
#include "system.h"


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4001268:	defffa04 	addi	sp,sp,-24
 400126c:	dfc00515 	stw	ra,20(sp)
 4001270:	df000415 	stw	fp,16(sp)
 4001274:	df000404 	addi	fp,sp,16
 4001278:	e13ffe15 	stw	r4,-8(fp)
 400127c:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4001280:	e0bffe17 	ldw	r2,-8(fp)
 4001284:	10c00517 	ldw	r3,20(r2)
 4001288:	e0bffe17 	ldw	r2,-8(fp)
 400128c:	11000617 	ldw	r4,24(r2)
 4001290:	e0bffe17 	ldw	r2,-8(fp)
 4001294:	d8800115 	stw	r2,4(sp)
 4001298:	e0bfff17 	ldw	r2,-4(fp)
 400129c:	d8800015 	stw	r2,0(sp)
 40012a0:	200f883a 	mov	r7,r4
 40012a4:	180d883a 	mov	r6,r3
 40012a8:	000b883a 	mov	r5,zero
 40012ac:	0009883a 	mov	r4,zero
 40012b0:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
}
 40012b4:	0001883a 	nop
 40012b8:	e037883a 	mov	sp,fp
 40012bc:	dfc00117 	ldw	ra,4(sp)
 40012c0:	df000017 	ldw	fp,0(sp)
 40012c4:	dec00204 	addi	sp,sp,8
 40012c8:	f800283a 	ret

040012cc <_Z22vid_scroll_string_quitP22vid_text_scroll_struct>:
}



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 40012cc:	defffd04 	addi	sp,sp,-12
 40012d0:	dfc00215 	stw	ra,8(sp)
 40012d4:	df000115 	stw	fp,4(sp)
 40012d8:	df000104 	addi	fp,sp,4
 40012dc:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 40012e0:	e0bfff17 	ldw	r2,-4(fp)
 40012e4:	10800517 	ldw	r2,20(r2)
 40012e8:	1009883a 	mov	r4,r2
 40012ec:	4011bf40 	call	4011bf4 <free>
  free(scroll);
 40012f0:	e13fff17 	ldw	r4,-4(fp)
 40012f4:	4011bf40 	call	4011bf4 <free>
}
 40012f8:	0001883a 	nop
 40012fc:	e037883a 	mov	sp,fp
 4001300:	dfc00117 	ldw	ra,4(sp)
 4001304:	df000017 	ldw	fp,0(sp)
 4001308:	dec00204 	addi	sp,sp,8
 400130c:	f800283a 	ret

04001310 <_Z22vid_scroll_string_initiiiiiPciS_>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 4001310:	defff904 	addi	sp,sp,-28
 4001314:	dfc00615 	stw	ra,24(sp)
 4001318:	df000515 	stw	fp,20(sp)
 400131c:	df000504 	addi	fp,sp,20
 4001320:	e13ffc15 	stw	r4,-16(fp)
 4001324:	e17ffd15 	stw	r5,-12(fp)
 4001328:	e1bffe15 	stw	r6,-8(fp)
 400132c:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = (vid_text_scroll_struct *)malloc(sizeof (vid_text_scroll_struct));
 4001330:	01000f04 	movi	r4,60
 4001334:	4011be00 	call	4011be0 <malloc>
 4001338:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 400133c:	e0bffb17 	ldw	r2,-20(fp)
 4001340:	e0fffc17 	ldw	r3,-16(fp)
 4001344:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 4001348:	e0bffb17 	ldw	r2,-20(fp)
 400134c:	e0fffd17 	ldw	r3,-12(fp)
 4001350:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 4001354:	e0bffb17 	ldw	r2,-20(fp)
 4001358:	e0fffe17 	ldw	r3,-8(fp)
 400135c:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 4001360:	e0bffb17 	ldw	r2,-20(fp)
 4001364:	e0ffff17 	ldw	r3,-4(fp)
 4001368:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 400136c:	e0bffb17 	ldw	r2,-20(fp)
 4001370:	e0c00217 	ldw	r3,8(fp)
 4001374:	10c00415 	stw	r3,16(r2)
  scroll->string = (char *)malloc(strlen(string)+2);
 4001378:	e1000517 	ldw	r4,20(fp)
 400137c:	401296c0 	call	401296c <strlen>
 4001380:	10800084 	addi	r2,r2,2
 4001384:	1009883a 	mov	r4,r2
 4001388:	4011be00 	call	4011be0 <malloc>
 400138c:	1007883a 	mov	r3,r2
 4001390:	e0bffb17 	ldw	r2,-20(fp)
 4001394:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4001398:	e0bffb17 	ldw	r2,-20(fp)
 400139c:	10800517 	ldw	r2,20(r2)
 40013a0:	e1400517 	ldw	r5,20(fp)
 40013a4:	1009883a 	mov	r4,r2
 40013a8:	40128dc0 	call	40128dc <strcpy>
  scroll->font = font;
 40013ac:	e0bffb17 	ldw	r2,-20(fp)
 40013b0:	e0c00317 	ldw	r3,12(fp)
 40013b4:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 40013b8:	e0bffb17 	ldw	r2,-20(fp)
 40013bc:	e0c00417 	ldw	r3,16(fp)
 40013c0:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40013c4:	d0a02017 	ldw	r2,-32640(gp)
  scroll->ticks_at_last_move = alt_nticks();
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	e0bffb17 	ldw	r2,-20(fp)
 40013d0:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 40013d4:	e0bffb17 	ldw	r2,-20(fp)
 40013d8:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 40013dc:	e0bffb17 	ldw	r2,-20(fp)
 40013e0:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 40013e4:	e0bffb17 	ldw	r2,-20(fp)
 40013e8:	10c00217 	ldw	r3,8(r2)
 40013ec:	e0bffb17 	ldw	r2,-20(fp)
 40013f0:	10800017 	ldw	r2,0(r2)
 40013f4:	1887c83a 	sub	r3,r3,r2
 40013f8:	e0bffb17 	ldw	r2,-20(fp)
 40013fc:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 4001400:	e1000517 	ldw	r4,20(fp)
 4001404:	401296c0 	call	401296c <strlen>
 4001408:	1007883a 	mov	r3,r2
 400140c:	e0bffb17 	ldw	r2,-20(fp)
 4001410:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 4001414:	e0bffb17 	ldw	r2,-20(fp)
 4001418:	10800c17 	ldw	r2,48(r2)
 400141c:	100690fa 	slli	r3,r2,3
 4001420:	e0bffb17 	ldw	r2,-20(fp)
 4001424:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 4001428:	e0bffb17 	ldw	r2,-20(fp)
 400142c:	10c00b17 	ldw	r3,44(r2)
 4001430:	e0bffb17 	ldw	r2,-20(fp)
 4001434:	10800e17 	ldw	r2,56(r2)
 4001438:	1887883a 	add	r3,r3,r2
 400143c:	e0bffb17 	ldw	r2,-20(fp)
 4001440:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 4001444:	e0bffb17 	ldw	r2,-20(fp)
  
}
 4001448:	e037883a 	mov	sp,fp
 400144c:	dfc00117 	ldw	ra,4(sp)
 4001450:	df000017 	ldw	fp,0(sp)
 4001454:	dec00204 	addi	sp,sp,8
 4001458:	f800283a 	ret

0400145c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 400145c:	deffec04 	addi	sp,sp,-80
 4001460:	dfc01315 	stw	ra,76(sp)
 4001464:	df001215 	stw	fp,72(sp)
 4001468:	dc401115 	stw	r17,68(sp)
 400146c:	dc001015 	stw	r16,64(sp)
 4001470:	df001204 	addi	fp,sp,72
 4001474:	e13ffc15 	stw	r4,-16(fp)
 4001478:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 400147c:	00800044 	movi	r2,1
 4001480:	e0bff605 	stb	r2,-40(fp)
 4001484:	d4202017 	ldw	r16,-32640(gp)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4001488:	e0bffc17 	ldw	r2,-16(fp)
 400148c:	10800817 	ldw	r2,32(r2)
 4001490:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001494:	d0a01f17 	ldw	r2,-32644(gp)
 4001498:	e0fffc17 	ldw	r3,-16(fp)
 400149c:	18c00717 	ldw	r3,28(r3)
 40014a0:	10c5383a 	mul	r2,r2,r3
 40014a4:	0140fa04 	movi	r5,1000
 40014a8:	1009883a 	mov	r4,r2
 40014ac:	400dcac0 	call	400dcac <__udivsi3>
 40014b0:	8885883a 	add	r2,r17,r2
 40014b4:	8085403a 	cmpgeu	r2,r16,r2
 40014b8:	10803fcc 	andi	r2,r2,255
 40014bc:	1000b926 	beq	r2,zero,40017a4 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x348>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40014c0:	d0a02017 	ldw	r2,-32640(gp)
    scroll->ticks_at_last_move = alt_nticks();
 40014c4:	1007883a 	mov	r3,r2
 40014c8:	e0bffc17 	ldw	r2,-16(fp)
 40014cc:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 40014d0:	e0bffc17 	ldw	r2,-16(fp)
 40014d4:	10800a03 	ldbu	r2,40(r2)
 40014d8:	10803fcc 	andi	r2,r2,255
 40014dc:	1080201c 	xori	r2,r2,128
 40014e0:	10bfe004 	addi	r2,r2,-128
 40014e4:	1000061e 	bne	r2,zero,4001500 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xa4>
      scroll->text_scroll_index = 0;
 40014e8:	e0bffc17 	ldw	r2,-16(fp)
 40014ec:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 40014f0:	e0bffc17 	ldw	r2,-16(fp)
 40014f4:	00c00044 	movi	r3,1
 40014f8:	10c00a05 	stb	r3,40(r2)
 40014fc:	00000e06 	br	4001538 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xdc>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 4001500:	e0bffc17 	ldw	r2,-16(fp)
 4001504:	10c00917 	ldw	r3,36(r2)
 4001508:	e0bffc17 	ldw	r2,-16(fp)
 400150c:	10800d17 	ldw	r2,52(r2)
 4001510:	18800316 	blt	r3,r2,4001520 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xc4>
      scroll->text_scroll_started = 0;
 4001514:	e0bffc17 	ldw	r2,-16(fp)
 4001518:	10000a05 	stb	zero,40(r2)
 400151c:	00000606 	br	4001538 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0xdc>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 4001520:	e0bffc17 	ldw	r2,-16(fp)
 4001524:	10c00917 	ldw	r3,36(r2)
 4001528:	e0bff607 	ldb	r2,-40(fp)
 400152c:	1887883a 	add	r3,r3,r2
 4001530:	e0bffc17 	ldw	r2,-16(fp)
 4001534:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 4001538:	e0bffc17 	ldw	r2,-16(fp)
 400153c:	10c00917 	ldw	r3,36(r2)
 4001540:	e0bffc17 	ldw	r2,-16(fp)
 4001544:	10800b17 	ldw	r2,44(r2)
 4001548:	18800a0e 	bge	r3,r2,4001574 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x118>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 400154c:	e0bffc17 	ldw	r2,-16(fp)
 4001550:	10c00017 	ldw	r3,0(r2)
 4001554:	e0bffc17 	ldw	r2,-16(fp)
 4001558:	10800b17 	ldw	r2,44(r2)
 400155c:	1887883a 	add	r3,r3,r2
 4001560:	e0bffc17 	ldw	r2,-16(fp)
 4001564:	10800917 	ldw	r2,36(r2)
 4001568:	1885c83a 	sub	r2,r3,r2
 400156c:	e0bff115 	stw	r2,-60(fp)
 4001570:	00000306 	br	4001580 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x124>
    } else {
      x_start = scroll->hbegin;
 4001574:	e0bffc17 	ldw	r2,-16(fp)
 4001578:	10800017 	ldw	r2,0(r2)
 400157c:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4001580:	e0bffc17 	ldw	r2,-16(fp)
 4001584:	10800e17 	ldw	r2,56(r2)
 4001588:	e0fffc17 	ldw	r3,-16(fp)
 400158c:	18c00917 	ldw	r3,36(r3)
 4001590:	1880040e 	bge	r3,r2,40015a4 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x148>
      x_end = scroll->hend;
 4001594:	e0bffc17 	ldw	r2,-16(fp)
 4001598:	10800217 	ldw	r2,8(r2)
 400159c:	e0bff215 	stw	r2,-56(fp)
 40015a0:	00000906 	br	40015c8 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x16c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 40015a4:	e0bffc17 	ldw	r2,-16(fp)
 40015a8:	10c00217 	ldw	r3,8(r2)
 40015ac:	e0bffc17 	ldw	r2,-16(fp)
 40015b0:	10800917 	ldw	r2,36(r2)
 40015b4:	1887c83a 	sub	r3,r3,r2
 40015b8:	e0bffc17 	ldw	r2,-16(fp)
 40015bc:	10800e17 	ldw	r2,56(r2)
 40015c0:	1885883a 	add	r2,r3,r2
 40015c4:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 40015c8:	e0bff117 	ldw	r2,-60(fp)
 40015cc:	e0bff315 	stw	r2,-52(fp)
 40015d0:	e0fff317 	ldw	r3,-52(fp)
 40015d4:	e0bff217 	ldw	r2,-56(fp)
 40015d8:	1880610e 	bge	r3,r2,4001760 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x304>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 40015dc:	e0bffc17 	ldw	r2,-16(fp)
 40015e0:	10c00917 	ldw	r3,36(r2)
 40015e4:	e0bffc17 	ldw	r2,-16(fp)
 40015e8:	10800b17 	ldw	r2,44(r2)
 40015ec:	1880050e 	bge	r3,r2,4001604 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1a8>
        string_x_index = (x_index - x_start);
 40015f0:	e0fff317 	ldw	r3,-52(fp)
 40015f4:	e0bff117 	ldw	r2,-60(fp)
 40015f8:	1885c83a 	sub	r2,r3,r2
 40015fc:	e0bff415 	stw	r2,-48(fp)
 4001600:	00000a06 	br	400162c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1d0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 4001604:	e0bffc17 	ldw	r2,-16(fp)
 4001608:	10c00917 	ldw	r3,36(r2)
 400160c:	e0bffc17 	ldw	r2,-16(fp)
 4001610:	10800b17 	ldw	r2,44(r2)
 4001614:	1887c83a 	sub	r3,r3,r2
 4001618:	e0bff317 	ldw	r2,-52(fp)
 400161c:	1887883a 	add	r3,r3,r2
 4001620:	e0bff117 	ldw	r2,-60(fp)
 4001624:	1885c83a 	sub	r2,r3,r2
 4001628:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 400162c:	e0bff417 	ldw	r2,-48(fp)
 4001630:	1000010e 	bge	r2,zero,4001638 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x1dc>
 4001634:	108001c4 	addi	r2,r2,7
 4001638:	1005d0fa 	srai	r2,r2,3
 400163c:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 4001640:	e0bffc17 	ldw	r2,-16(fp)
 4001644:	10c00517 	ldw	r3,20(r2)
 4001648:	e0bff717 	ldw	r2,-36(fp)
 400164c:	1885883a 	add	r2,r3,r2
 4001650:	10800003 	ldbu	r2,0(r2)
 4001654:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 4001658:	e0fff417 	ldw	r3,-48(fp)
 400165c:	00a00034 	movhi	r2,32768
 4001660:	108001c4 	addi	r2,r2,7
 4001664:	1884703a 	and	r2,r3,r2
 4001668:	1000040e 	bge	r2,zero,400167c <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x220>
 400166c:	10bfffc4 	addi	r2,r2,-1
 4001670:	00fffe04 	movi	r3,-8
 4001674:	10c4b03a 	or	r2,r2,r3
 4001678:	10800044 	addi	r2,r2,1
 400167c:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 4001680:	00c02004 	movi	r3,128
 4001684:	e0bff917 	ldw	r2,-28(fp)
 4001688:	1884d83a 	srl	r2,r3,r2
 400168c:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 4001690:	e0bffc17 	ldw	r2,-16(fp)
 4001694:	10800617 	ldw	r2,24(r2)
 4001698:	e0fff807 	ldb	r3,-32(fp)
 400169c:	18fff804 	addi	r3,r3,-32
 40016a0:	18c002e4 	muli	r3,r3,11
 40016a4:	10c5883a 	add	r2,r2,r3
 40016a8:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 40016ac:	e03ff515 	stw	zero,-44(fp)
 40016b0:	e0bff517 	ldw	r2,-44(fp)
 40016b4:	108002c8 	cmpgei	r2,r2,11
 40016b8:	1000251e 	bne	r2,zero,4001750 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2f4>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 40016bc:	e0bff517 	ldw	r2,-44(fp)
 40016c0:	e0fffb17 	ldw	r3,-20(fp)
 40016c4:	1885883a 	add	r2,r3,r2
 40016c8:	10c00003 	ldbu	r3,0(r2)
 40016cc:	e0bffa03 	ldbu	r2,-24(fp)
 40016d0:	1884703a 	and	r2,r3,r2
 40016d4:	10803fcc 	andi	r2,r2,255
 40016d8:	1080201c 	xori	r2,r2,128
 40016dc:	10bfe004 	addi	r2,r2,-128
 40016e0:	10000c26 	beq	r2,zero,4001714 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2b8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 40016e4:	e0bffc17 	ldw	r2,-16(fp)
 40016e8:	10c00117 	ldw	r3,4(r2)
 40016ec:	e0bff517 	ldw	r2,-44(fp)
 40016f0:	1887883a 	add	r3,r3,r2
 40016f4:	e0bffc17 	ldw	r2,-16(fp)
 40016f8:	10800317 	ldw	r2,12(r2)
 40016fc:	e1fffd17 	ldw	r7,-12(fp)
 4001700:	100d883a 	mov	r6,r2
 4001704:	180b883a 	mov	r5,r3
 4001708:	e13ff317 	ldw	r4,-52(fp)
 400170c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
 4001710:	00000b06 	br	4001740 <_Z17vid_scroll_stringP22vid_text_scroll_structP16VIP_FRAME_READER+0x2e4>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 4001714:	e0bffc17 	ldw	r2,-16(fp)
 4001718:	10c00117 	ldw	r3,4(r2)
 400171c:	e0bff517 	ldw	r2,-44(fp)
 4001720:	1887883a 	add	r3,r3,r2
 4001724:	e0bffc17 	ldw	r2,-16(fp)
 4001728:	10800417 	ldw	r2,16(r2)
 400172c:	e1fffd17 	ldw	r7,-12(fp)
 4001730:	100d883a 	mov	r6,r2
 4001734:	180b883a 	mov	r5,r3
 4001738:	e13ff317 	ldw	r4,-52(fp)
 400173c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4001740:	e0bff517 	ldw	r2,-44(fp)
 4001744:	10800044 	addi	r2,r2,1
 4001748:	e0bff515 	stw	r2,-44(fp)
 400174c:	003fd806 	br	40016b0 <__reset+0xfb0006b0>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4001750:	e0bff317 	ldw	r2,-52(fp)
 4001754:	10800044 	addi	r2,r2,1
 4001758:	e0bff315 	stw	r2,-52(fp)
 400175c:	003f9c06 	br	40015d0 <__reset+0xfb0005d0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 4001760:	e0bffc17 	ldw	r2,-16(fp)
 4001764:	11000117 	ldw	r4,4(r2)
 4001768:	e0bffc17 	ldw	r2,-16(fp)
 400176c:	10800117 	ldw	r2,4(r2)
 4001770:	11400284 	addi	r5,r2,10
 4001774:	e0bffc17 	ldw	r2,-16(fp)
 4001778:	10800417 	ldw	r2,16(r2)
 400177c:	e0fffd17 	ldw	r3,-12(fp)
 4001780:	d8c00215 	stw	r3,8(sp)
 4001784:	d8800115 	stw	r2,4(sp)
 4001788:	00800044 	movi	r2,1
 400178c:	d8800015 	stw	r2,0(sp)
 4001790:	280f883a 	mov	r7,r5
 4001794:	e1bff217 	ldw	r6,-56(fp)
 4001798:	200b883a 	mov	r5,r4
 400179c:	e13ff217 	ldw	r4,-56(fp)
 40017a0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    // Log what time we moved the scroll.
  }
  return(0);
 40017a4:	0005883a 	mov	r2,zero
}
 40017a8:	e6fffe04 	addi	sp,fp,-8
 40017ac:	dfc00317 	ldw	ra,12(sp)
 40017b0:	df000217 	ldw	fp,8(sp)
 40017b4:	dc400117 	ldw	r17,4(sp)
 40017b8:	dc000017 	ldw	r16,0(sp)
 40017bc:	dec00404 	addi	sp,sp,16
 40017c0:	f800283a 	ret

040017c4 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 40017c4:	defff504 	addi	sp,sp,-44
 40017c8:	dfc00a15 	stw	ra,40(sp)
 40017cc:	df000915 	stw	fp,36(sp)
 40017d0:	df000904 	addi	fp,sp,36
 40017d4:	e13ffc15 	stw	r4,-16(fp)
 40017d8:	e17ffd15 	stw	r5,-12(fp)
 40017dc:	e1bffe15 	stw	r6,-8(fp)
 40017e0:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 40017e4:	e0800217 	ldw	r2,8(fp)
 40017e8:	00803716 	blt	zero,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
 40017ec:	e0800317 	ldw	r2,12(fp)
 40017f0:	00803516 	blt	zero,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40017f4:	e0bffd17 	ldw	r2,-12(fp)
 40017f8:	e0bff815 	stw	r2,-32(fp)
 40017fc:	e0fff817 	ldw	r3,-32(fp)
 4001800:	e0bfff17 	ldw	r2,-4(fp)
 4001804:	1880300e 	bge	r3,r2,40018c8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0x104>
      write_y = read_y + y_distance;
 4001808:	e0fff817 	ldw	r3,-32(fp)
 400180c:	e0800317 	ldw	r2,12(fp)
 4001810:	1885883a 	add	r2,r3,r2
 4001814:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 4001818:	e0bffc17 	ldw	r2,-16(fp)
 400181c:	e0bff715 	stw	r2,-36(fp)
 4001820:	e0fff717 	ldw	r3,-36(fp)
 4001824:	e0bffe17 	ldw	r2,-8(fp)
 4001828:	1880230e 	bge	r3,r2,40018b8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xf4>
        write_x = read_x + x_distance;
 400182c:	e0fff717 	ldw	r3,-36(fp)
 4001830:	e0800217 	ldw	r2,8(fp)
 4001834:	1885883a 	add	r2,r3,r2
 4001838:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 400183c:	e1800517 	ldw	r6,20(fp)
 4001840:	e17ff817 	ldw	r5,-32(fp)
 4001844:	e13ff717 	ldw	r4,-36(fp)
 4001848:	4001dbc0 	call	4001dbc <_Z13vid_get_pixeliiP16VIP_FRAME_READER>
 400184c:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 4001850:	e0bffb0f 	ldh	r2,-20(fp)
 4001854:	e1c00517 	ldw	r7,20(fp)
 4001858:	100d883a 	mov	r6,r2
 400185c:	e17ff917 	ldw	r5,-28(fp)
 4001860:	e13ffa17 	ldw	r4,-24(fp)
 4001864:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4001868:	e0fffe17 	ldw	r3,-8(fp)
 400186c:	e0800217 	ldw	r2,8(fp)
 4001870:	1885883a 	add	r2,r3,r2
 4001874:	e0fff717 	ldw	r3,-36(fp)
 4001878:	1880050e 	bge	r3,r2,4001890 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xcc>
 400187c:	e0ffff17 	ldw	r3,-4(fp)
 4001880:	e0800317 	ldw	r2,12(fp)
 4001884:	1885883a 	add	r2,r3,r2
 4001888:	e0fff817 	ldw	r3,-32(fp)
 400188c:	18800616 	blt	r3,r2,40018a8 <_Z14vid_move_blockiiiiiiiP16VIP_FRAME_READER+0xe4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4001890:	e0800417 	ldw	r2,16(fp)
 4001894:	e1c00517 	ldw	r7,20(fp)
 4001898:	100d883a 	mov	r6,r2
 400189c:	e17ff817 	ldw	r5,-32(fp)
 40018a0:	e13ff717 	ldw	r4,-36(fp)
 40018a4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 40018a8:	e0bff717 	ldw	r2,-36(fp)
 40018ac:	10800044 	addi	r2,r2,1
 40018b0:	e0bff715 	stw	r2,-36(fp)
 40018b4:	003fda06 	br	4001820 <__reset+0xfb000820>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40018b8:	e0bff817 	ldw	r2,-32(fp)
 40018bc:	10800044 	addi	r2,r2,1
 40018c0:	e0bff815 	stw	r2,-32(fp)
 40018c4:	003fcd06 	br	40017fc <__reset+0xfb0007fc>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 40018c8:	0005883a 	mov	r2,zero
}
 40018cc:	e037883a 	mov	sp,fp
 40018d0:	dfc00117 	ldw	ra,4(sp)
 40018d4:	df000017 	ldw	fp,0(sp)
 40018d8:	dec00204 	addi	sp,sp,8
 40018dc:	f800283a 	ret

040018e0 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 40018e0:	defff604 	addi	sp,sp,-40
 40018e4:	dfc00915 	stw	ra,36(sp)
 40018e8:	df000815 	stw	fp,32(sp)
 40018ec:	df000804 	addi	fp,sp,32
 40018f0:	e13ffc15 	stw	r4,-16(fp)
 40018f4:	e17ffd15 	stw	r5,-12(fp)
 40018f8:	e1bffe15 	stw	r6,-8(fp)
 40018fc:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4001900:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4001904:	e0bffc17 	ldw	r2,-16(fp)
 4001908:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 400190c:	e0bffa17 	ldw	r2,-24(fp)
 4001910:	e0c00317 	ldw	r3,12(fp)
 4001914:	1885883a 	add	r2,r3,r2
 4001918:	10800003 	ldbu	r2,0(r2)
 400191c:	10803fcc 	andi	r2,r2,255
 4001920:	1080201c 	xori	r2,r2,128
 4001924:	10bfe004 	addi	r2,r2,-128
 4001928:	10002926 	beq	r2,zero,40019d0 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0xf0>
    //Handle newline char here.
    if (string[i] == '\n') {
 400192c:	e0bffa17 	ldw	r2,-24(fp)
 4001930:	e0c00317 	ldw	r3,12(fp)
 4001934:	1885883a 	add	r2,r3,r2
 4001938:	10800003 	ldbu	r2,0(r2)
 400193c:	10803fcc 	andi	r2,r2,255
 4001940:	1080201c 	xori	r2,r2,128
 4001944:	10bfe004 	addi	r2,r2,-128
 4001948:	10800298 	cmpnei	r2,r2,10
 400194c:	1000091e 	bne	r2,zero,4001974 <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0x94>
      horiz_offset = original_horiz_offset;
 4001950:	e0bffb17 	ldw	r2,-20(fp)
 4001954:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 4001958:	e0bffd17 	ldw	r2,-12(fp)
 400195c:	10800304 	addi	r2,r2,12
 4001960:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4001964:	e0bffa17 	ldw	r2,-24(fp)
 4001968:	10800044 	addi	r2,r2,1
 400196c:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4001970:	00001606 	br	40019cc <_Z16vid_print_stringiiiPcP16VIP_FRAME_READERS_+0xec>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4001974:	e0bffa17 	ldw	r2,-24(fp)
 4001978:	e0c00317 	ldw	r3,12(fp)
 400197c:	1885883a 	add	r2,r3,r2
 4001980:	10800003 	ldbu	r2,0(r2)
 4001984:	10c03fcc 	andi	r3,r2,255
 4001988:	18c0201c 	xori	r3,r3,128
 400198c:	18ffe004 	addi	r3,r3,-128
 4001990:	e0800217 	ldw	r2,8(fp)
 4001994:	d8800115 	stw	r2,4(sp)
 4001998:	e0bfff17 	ldw	r2,-4(fp)
 400199c:	d8800015 	stw	r2,0(sp)
 40019a0:	180f883a 	mov	r7,r3
 40019a4:	e1bffe17 	ldw	r6,-8(fp)
 40019a8:	e17ffd17 	ldw	r5,-12(fp)
 40019ac:	e13ffc17 	ldw	r4,-16(fp)
 40019b0:	4001b400 	call	4001b40 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER>
    i++;
 40019b4:	e0bffa17 	ldw	r2,-24(fp)
 40019b8:	10800044 	addi	r2,r2,1
 40019bc:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 40019c0:	e0bffc17 	ldw	r2,-16(fp)
 40019c4:	10800204 	addi	r2,r2,8
 40019c8:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 40019cc:	003fcf06 	br	400190c <__reset+0xfb00090c>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 40019d0:	0005883a 	mov	r2,zero
}
 40019d4:	e037883a 	mov	sp,fp
 40019d8:	dfc00117 	ldw	ra,4(sp)
 40019dc:	df000017 	ldw	fp,0(sp)
 40019e0:	dec00204 	addi	sp,sp,8
 40019e4:	f800283a 	ret

040019e8 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 40019e8:	defff704 	addi	sp,sp,-36
 40019ec:	dfc00815 	stw	ra,32(sp)
 40019f0:	df000715 	stw	fp,28(sp)
 40019f4:	df000704 	addi	fp,sp,28
 40019f8:	e13ffc15 	stw	r4,-16(fp)
 40019fc:	e17ffd15 	stw	r5,-12(fp)
 4001a00:	e1bffe15 	stw	r6,-8(fp)
 4001a04:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 4001a08:	e0800317 	ldw	r2,12(fp)
 4001a0c:	10000a26 	beq	r2,zero,4001a38 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 4001a10:	e0800417 	ldw	r2,16(fp)
 4001a14:	d8800115 	stw	r2,4(sp)
 4001a18:	e0800217 	ldw	r2,8(fp)
 4001a1c:	d8800015 	stw	r2,0(sp)
 4001a20:	e1ffff17 	ldw	r7,-4(fp)
 4001a24:	e1bffe17 	ldw	r6,-8(fp)
 4001a28:	e17ffd17 	ldw	r5,-12(fp)
 4001a2c:	e13ffc17 	ldw	r4,-16(fp)
 4001a30:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
 4001a34:	00003c06 	br	4001b28 <_Z12vid_draw_boxiiiiiiP16VIP_FRAME_READER+0x140>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4001a38:	e0bfff17 	ldw	r2,-4(fp)
 4001a3c:	10ffffc4 	addi	r3,r2,-1
 4001a40:	e0800417 	ldw	r2,16(fp)
 4001a44:	d8800215 	stw	r2,8(sp)
 4001a48:	e0800217 	ldw	r2,8(fp)
 4001a4c:	d8800115 	stw	r2,4(sp)
 4001a50:	00800044 	movi	r2,1
 4001a54:	d8800015 	stw	r2,0(sp)
 4001a58:	180f883a 	mov	r7,r3
 4001a5c:	e1bffc17 	ldw	r6,-16(fp)
 4001a60:	e17ffd17 	ldw	r5,-12(fp)
 4001a64:	e13ffc17 	ldw	r4,-16(fp)
 4001a68:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4001a6c:	e0bffe17 	ldw	r2,-8(fp)
 4001a70:	10ffffc4 	addi	r3,r2,-1
 4001a74:	e0bffe17 	ldw	r2,-8(fp)
 4001a78:	113fffc4 	addi	r4,r2,-1
 4001a7c:	e0bfff17 	ldw	r2,-4(fp)
 4001a80:	117fffc4 	addi	r5,r2,-1
 4001a84:	e0800417 	ldw	r2,16(fp)
 4001a88:	d8800215 	stw	r2,8(sp)
 4001a8c:	e0800217 	ldw	r2,8(fp)
 4001a90:	d8800115 	stw	r2,4(sp)
 4001a94:	00800044 	movi	r2,1
 4001a98:	d8800015 	stw	r2,0(sp)
 4001a9c:	280f883a 	mov	r7,r5
 4001aa0:	200d883a 	mov	r6,r4
 4001aa4:	e17ffd17 	ldw	r5,-12(fp)
 4001aa8:	1809883a 	mov	r4,r3
 4001aac:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4001ab0:	e0bffe17 	ldw	r2,-8(fp)
 4001ab4:	10ffffc4 	addi	r3,r2,-1
 4001ab8:	e0800417 	ldw	r2,16(fp)
 4001abc:	d8800215 	stw	r2,8(sp)
 4001ac0:	e0800217 	ldw	r2,8(fp)
 4001ac4:	d8800115 	stw	r2,4(sp)
 4001ac8:	00800044 	movi	r2,1
 4001acc:	d8800015 	stw	r2,0(sp)
 4001ad0:	e1fffd17 	ldw	r7,-12(fp)
 4001ad4:	180d883a 	mov	r6,r3
 4001ad8:	e17ffd17 	ldw	r5,-12(fp)
 4001adc:	e13ffc17 	ldw	r4,-16(fp)
 4001ae0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 4001ae4:	e0bfff17 	ldw	r2,-4(fp)
 4001ae8:	10ffffc4 	addi	r3,r2,-1
 4001aec:	e0bffe17 	ldw	r2,-8(fp)
 4001af0:	113fffc4 	addi	r4,r2,-1
 4001af4:	e0bfff17 	ldw	r2,-4(fp)
 4001af8:	117fffc4 	addi	r5,r2,-1
 4001afc:	e0800417 	ldw	r2,16(fp)
 4001b00:	d8800215 	stw	r2,8(sp)
 4001b04:	e0800217 	ldw	r2,8(fp)
 4001b08:	d8800115 	stw	r2,4(sp)
 4001b0c:	00800044 	movi	r2,1
 4001b10:	d8800015 	stw	r2,0(sp)
 4001b14:	280f883a 	mov	r7,r5
 4001b18:	200d883a 	mov	r6,r4
 4001b1c:	180b883a 	mov	r5,r3
 4001b20:	e13ffc17 	ldw	r4,-16(fp)
 4001b24:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
  }

  return (0);
 4001b28:	0005883a 	mov	r2,zero
}
 4001b2c:	e037883a 	mov	sp,fp
 4001b30:	dfc00117 	ldw	ra,4(sp)
 4001b34:	df000017 	ldw	fp,0(sp)
 4001b38:	dec00204 	addi	sp,sp,8
 4001b3c:	f800283a 	ret

04001b40 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4001b40:	defff704 	addi	sp,sp,-36
 4001b44:	dfc00815 	stw	ra,32(sp)
 4001b48:	df000715 	stw	fp,28(sp)
 4001b4c:	df000704 	addi	fp,sp,28
 4001b50:	e13ffc15 	stw	r4,-16(fp)
 4001b54:	e17ffd15 	stw	r5,-12(fp)
 4001b58:	e1bffe15 	stw	r6,-8(fp)
 4001b5c:	3805883a 	mov	r2,r7
 4001b60:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4001b64:	e0bfff03 	ldbu	r2,-4(fp)
 4001b68:	10bff804 	addi	r2,r2,-32
 4001b6c:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001b70:	e03ff915 	stw	zero,-28(fp)
 4001b74:	e0bff917 	ldw	r2,-28(fp)
 4001b78:	108002c8 	cmpgei	r2,r2,11
 4001b7c:	1000261e 	bne	r2,zero,4001c18 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xd8>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4001b80:	e0bffb07 	ldb	r2,-20(fp)
 4001b84:	108002e4 	muli	r2,r2,11
 4001b88:	1007883a 	mov	r3,r2
 4001b8c:	e0bff917 	ldw	r2,-28(fp)
 4001b90:	1885883a 	add	r2,r3,r2
 4001b94:	e0c00217 	ldw	r3,8(fp)
 4001b98:	1885883a 	add	r2,r3,r2
 4001b9c:	10800003 	ldbu	r2,0(r2)
 4001ba0:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4001ba4:	e03ffa15 	stw	zero,-24(fp)
 4001ba8:	e0bffa17 	ldw	r2,-24(fp)
 4001bac:	10800208 	cmpgei	r2,r2,8
 4001bb0:	1000151e 	bne	r2,zero,4001c08 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xc8>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4001bb4:	e0fffb47 	ldb	r3,-19(fp)
 4001bb8:	01002004 	movi	r4,128
 4001bbc:	e0bffa17 	ldw	r2,-24(fp)
 4001bc0:	2085d83a 	sra	r2,r4,r2
 4001bc4:	1884703a 	and	r2,r3,r2
 4001bc8:	10000b26 	beq	r2,zero,4001bf8 <_Z14vid_print_chariiicPcP16VIP_FRAME_READER+0xb8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4001bcc:	e0fffc17 	ldw	r3,-16(fp)
 4001bd0:	e0bffa17 	ldw	r2,-24(fp)
 4001bd4:	1889883a 	add	r4,r3,r2
 4001bd8:	e0fffd17 	ldw	r3,-12(fp)
 4001bdc:	e0bff917 	ldw	r2,-28(fp)
 4001be0:	1885883a 	add	r2,r3,r2
 4001be4:	e0fffe17 	ldw	r3,-8(fp)
 4001be8:	e1c00317 	ldw	r7,12(fp)
 4001bec:	180d883a 	mov	r6,r3
 4001bf0:	100b883a 	mov	r5,r2
 4001bf4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 4001bf8:	e0bffa17 	ldw	r2,-24(fp)
 4001bfc:	10800044 	addi	r2,r2,1
 4001c00:	e0bffa15 	stw	r2,-24(fp)
 4001c04:	003fe806 	br	4001ba8 <__reset+0xfb000ba8>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001c08:	e0bff917 	ldw	r2,-28(fp)
 4001c0c:	10800044 	addi	r2,r2,1
 4001c10:	e0bff915 	stw	r2,-28(fp)
 4001c14:	003fd706 	br	4001b74 <__reset+0xfb000b74>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 4001c18:	0005883a 	mov	r2,zero
}
 4001c1c:	e037883a 	mov	sp,fp
 4001c20:	dfc00117 	ldw	ra,4(sp)
 4001c24:	df000017 	ldw	fp,0(sp)
 4001c28:	dec00204 	addi	sp,sp,8
 4001c2c:	f800283a 	ret

04001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 4001c30:	defff904 	addi	sp,sp,-28
 4001c34:	dfc00615 	stw	ra,24(sp)
 4001c38:	df000515 	stw	fp,20(sp)
 4001c3c:	df000504 	addi	fp,sp,20
 4001c40:	e13ffc15 	stw	r4,-16(fp)
 4001c44:	e17ffd15 	stw	r5,-12(fp)
 4001c48:	e1bffe15 	stw	r6,-8(fp)
 4001c4c:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 4001c50:	e0bfff17 	ldw	r2,-4(fp)
 4001c54:	10800417 	ldw	r2,16(r2)
 4001c58:	10800818 	cmpnei	r2,r2,32
 4001c5c:	1000141e 	bne	r2,zero,4001cb0 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x80>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
 4001c60:	e13fff17 	ldw	r4,-4(fp)
 4001c64:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001c68:	1007883a 	mov	r3,r2
 4001c6c:	e0bfff17 	ldw	r2,-4(fp)
 4001c70:	10800517 	ldw	r2,20(r2)
 4001c74:	1085883a 	add	r2,r2,r2
 4001c78:	1085883a 	add	r2,r2,r2
 4001c7c:	1009883a 	mov	r4,r2
 4001c80:	e0bffd17 	ldw	r2,-12(fp)
 4001c84:	2085383a 	mul	r2,r4,r2
 4001c88:	1887883a 	add	r3,r3,r2
 4001c8c:	e0bffc17 	ldw	r2,-16(fp)
 4001c90:	1085883a 	add	r2,r2,r2
 4001c94:	1085883a 	add	r2,r2,r2
 4001c98:	1885883a 	add	r2,r3,r2
 4001c9c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 4001ca0:	e0bffb17 	ldw	r2,-20(fp)
 4001ca4:	e0fffe17 	ldw	r3,-8(fp)
 4001ca8:	10c00035 	stwio	r3,0(r2)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 4001cac:	00003d06 	br	4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 4)) + horiz * 4);
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
  }
  
  else if( display->color_depth == 24 )
 4001cb0:	e0bfff17 	ldw	r2,-4(fp)
 4001cb4:	10800417 	ldw	r2,16(r2)
 4001cb8:	10800618 	cmpnei	r2,r2,24
 4001cbc:	1000241e 	bne	r2,zero,4001d50 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x120>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 3)) + horiz * 3);
 4001cc0:	e13fff17 	ldw	r4,-4(fp)
 4001cc4:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001cc8:	1009883a 	mov	r4,r2
 4001ccc:	e0bfff17 	ldw	r2,-4(fp)
 4001cd0:	10c00517 	ldw	r3,20(r2)
 4001cd4:	1805883a 	mov	r2,r3
 4001cd8:	1085883a 	add	r2,r2,r2
 4001cdc:	10c7883a 	add	r3,r2,r3
 4001ce0:	e0bffd17 	ldw	r2,-12(fp)
 4001ce4:	1885383a 	mul	r2,r3,r2
 4001ce8:	2089883a 	add	r4,r4,r2
 4001cec:	e0fffc17 	ldw	r3,-16(fp)
 4001cf0:	1805883a 	mov	r2,r3
 4001cf4:	1085883a 	add	r2,r2,r2
 4001cf8:	10c5883a 	add	r2,r2,r3
 4001cfc:	2085883a 	add	r2,r4,r2
 4001d00:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 4001d04:	e0bffb17 	ldw	r2,-20(fp)
 4001d08:	e0fffe17 	ldw	r3,-8(fp)
 4001d0c:	18c03fcc 	andi	r3,r3,255
 4001d10:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 4001d14:	e0bffb17 	ldw	r2,-20(fp)
 4001d18:	10800044 	addi	r2,r2,1
 4001d1c:	1007883a 	mov	r3,r2
 4001d20:	e0bffe17 	ldw	r2,-8(fp)
 4001d24:	1004d23a 	srli	r2,r2,8
 4001d28:	10803fcc 	andi	r2,r2,255
 4001d2c:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 4001d30:	e0bffb17 	ldw	r2,-20(fp)
 4001d34:	10800084 	addi	r2,r2,2
 4001d38:	1007883a 	mov	r3,r2
 4001d3c:	e0bffe17 	ldw	r2,-8(fp)
 4001d40:	1004d43a 	srli	r2,r2,16
 4001d44:	10803fcc 	andi	r2,r2,255
 4001d48:	18800025 	stbio	r2,0(r3)
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}


}
 4001d4c:	00001506 	br	4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
  }
  
  else if( display->color_depth == 16 )
 4001d50:	e0bfff17 	ldw	r2,-4(fp)
 4001d54:	10800417 	ldw	r2,16(r2)
 4001d58:	10800418 	cmpnei	r2,r2,16
 4001d5c:	1000111e 	bne	r2,zero,4001da4 <_Z13vid_set_pixeliijP16VIP_FRAME_READER+0x174>
  {
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001d60:	e13fff17 	ldw	r4,-4(fp)
 4001d64:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001d68:	1007883a 	mov	r3,r2
 4001d6c:	e0bfff17 	ldw	r2,-4(fp)
 4001d70:	10800517 	ldw	r2,20(r2)
 4001d74:	1085883a 	add	r2,r2,r2
 4001d78:	1009883a 	mov	r4,r2
 4001d7c:	e0bffd17 	ldw	r2,-12(fp)
 4001d80:	2085383a 	mul	r2,r4,r2
 4001d84:	1887883a 	add	r3,r3,r2
 4001d88:	e0bffc17 	ldw	r2,-16(fp)
 4001d8c:	1085883a 	add	r2,r2,r2
 4001d90:	1885883a 	add	r2,r3,r2
 4001d94:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
 4001d98:	e0bffb17 	ldw	r2,-20(fp)
 4001d9c:	e0fffe17 	ldw	r3,-8(fp)
 4001da0:	10c0002d 	sthio	r3,0(r2)
	}


}
 4001da4:	0001883a 	nop
 4001da8:	e037883a 	mov	sp,fp
 4001dac:	dfc00117 	ldw	ra,4(sp)
 4001db0:	df000017 	ldw	fp,0(sp)
 4001db4:	dec00204 	addi	sp,sp,8
 4001db8:	f800283a 	ret

04001dbc <_Z13vid_get_pixeliiP16VIP_FRAME_READER>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4001dbc:	defffa04 	addi	sp,sp,-24
 4001dc0:	dfc00515 	stw	ra,20(sp)
 4001dc4:	df000415 	stw	fp,16(sp)
 4001dc8:	df000404 	addi	fp,sp,16
 4001dcc:	e13ffd15 	stw	r4,-12(fp)
 4001dd0:	e17ffe15 	stw	r5,-8(fp)
 4001dd4:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
 4001dd8:	e13fff17 	ldw	r4,-4(fp)
 4001ddc:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001de0:	1007883a 	mov	r3,r2
 4001de4:	e0bfff17 	ldw	r2,-4(fp)
 4001de8:	10800517 	ldw	r2,20(r2)
 4001dec:	1085883a 	add	r2,r2,r2
 4001df0:	1009883a 	mov	r4,r2
 4001df4:	e0bffe17 	ldw	r2,-8(fp)
 4001df8:	2085383a 	mul	r2,r4,r2
 4001dfc:	1887883a 	add	r3,r3,r2
 4001e00:	e0bffd17 	ldw	r2,-12(fp)
 4001e04:	1085883a 	add	r2,r2,r2
 4001e08:	1885883a 	add	r2,r3,r2
 4001e0c:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
 4001e10:	e0bffc17 	ldw	r2,-16(fp)
 4001e14:	1080002b 	ldhuio	r2,0(r2)
 4001e18:	10bfffcc 	andi	r2,r2,65535

}
 4001e1c:	e037883a 	mov	sp,fp
 4001e20:	dfc00117 	ldw	ra,4(sp)
 4001e24:	df000017 	ldw	fp,0(sp)
 4001e28:	dec00204 	addi	sp,sp,8
 4001e2c:	f800283a 	ret

04001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 4001e30:	defff504 	addi	sp,sp,-44
 4001e34:	dfc00a15 	stw	ra,40(sp)
 4001e38:	df000915 	stw	fp,36(sp)
 4001e3c:	df000904 	addi	fp,sp,36
 4001e40:	e13ffc15 	stw	r4,-16(fp)
 4001e44:	e17ffd15 	stw	r5,-12(fp)
 4001e48:	e1bffe15 	stw	r6,-8(fp)
 4001e4c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  unsigned int addr; // richard add unsigned
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
 4001e50:	e0800317 	ldw	r2,12(fp)
 4001e54:	10800417 	ldw	r2,16(r2)
 4001e58:	1000010e 	bge	r2,zero,4001e60 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x30>
 4001e5c:	108001c4 	addi	r2,r2,7
 4001e60:	1005d0fa 	srai	r2,r2,3
 4001e64:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
 4001e68:	e0fffe17 	ldw	r3,-8(fp)
 4001e6c:	e0bffc17 	ldw	r2,-16(fp)
 4001e70:	1887c83a 	sub	r3,r3,r2
 4001e74:	e0bff917 	ldw	r2,-28(fp)
 4001e78:	1885383a 	mul	r2,r3,r2
 4001e7c:	e0bffa15 	stw	r2,-24(fp)

  line = (char *)malloc(bytes_per_line + 12);
 4001e80:	e0bffa17 	ldw	r2,-24(fp)
 4001e84:	10800304 	addi	r2,r2,12
 4001e88:	1009883a 	mov	r4,r2
 4001e8c:	4011be00 	call	4011be0 <malloc>
 4001e90:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
 4001e94:	e0800317 	ldw	r2,12(fp)
 4001e98:	10800417 	ldw	r2,16(r2)
 4001e9c:	10800418 	cmpnei	r2,r2,16
 4001ea0:	1000141e 	bne	r2,zero,4001ef4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0xc4>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001ea4:	e03ff715 	stw	zero,-36(fp)
 4001ea8:	e0fff717 	ldw	r3,-36(fp)
 4001eac:	e0bffa17 	ldw	r2,-24(fp)
 4001eb0:	1880400e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      *(line + i) = (unsigned char)color;
 4001eb4:	e0bff717 	ldw	r2,-36(fp)
 4001eb8:	e0fffb17 	ldw	r3,-20(fp)
 4001ebc:	1885883a 	add	r2,r3,r2
 4001ec0:	e0c00217 	ldw	r3,8(fp)
 4001ec4:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001ec8:	e0bff717 	ldw	r2,-36(fp)
 4001ecc:	10800044 	addi	r2,r2,1
 4001ed0:	e0fffb17 	ldw	r3,-20(fp)
 4001ed4:	1885883a 	add	r2,r3,r2
 4001ed8:	e0c00217 	ldw	r3,8(fp)
 4001edc:	1807d23a 	srai	r3,r3,8
 4001ee0:	10c00005 	stb	r3,0(r2)

  line = (char *)malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 4001ee4:	e0bff717 	ldw	r2,-36(fp)
 4001ee8:	10800084 	addi	r2,r2,2
 4001eec:	e0bff715 	stw	r2,-36(fp)
 4001ef0:	003fed06 	br	4001ea8 <__reset+0xfb000ea8>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
 4001ef4:	e0800317 	ldw	r2,12(fp)
 4001ef8:	10800417 	ldw	r2,16(r2)
 4001efc:	10800618 	cmpnei	r2,r2,24
 4001f00:	10001b1e 	bne	r2,zero,4001f70 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x140>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 4001f04:	e03ff715 	stw	zero,-36(fp)
 4001f08:	e0fff717 	ldw	r3,-36(fp)
 4001f0c:	e0bffa17 	ldw	r2,-24(fp)
 4001f10:	1880280e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      *(line + i) = (unsigned char)color;
 4001f14:	e0bff717 	ldw	r2,-36(fp)
 4001f18:	e0fffb17 	ldw	r3,-20(fp)
 4001f1c:	1885883a 	add	r2,r3,r2
 4001f20:	e0c00217 	ldw	r3,8(fp)
 4001f24:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 4001f28:	e0bff717 	ldw	r2,-36(fp)
 4001f2c:	10800044 	addi	r2,r2,1
 4001f30:	e0fffb17 	ldw	r3,-20(fp)
 4001f34:	1885883a 	add	r2,r3,r2
 4001f38:	e0c00217 	ldw	r3,8(fp)
 4001f3c:	1807d23a 	srai	r3,r3,8
 4001f40:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
 4001f44:	e0bff717 	ldw	r2,-36(fp)
 4001f48:	10800084 	addi	r2,r2,2
 4001f4c:	e0fffb17 	ldw	r3,-20(fp)
 4001f50:	1885883a 	add	r2,r3,r2
 4001f54:	e0c00217 	ldw	r3,8(fp)
 4001f58:	1807d43a 	srai	r3,r3,16
 4001f5c:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 4001f60:	e0bff717 	ldw	r2,-36(fp)
 4001f64:	108000c4 	addi	r2,r2,3
 4001f68:	e0bff715 	stw	r2,-36(fp)
 4001f6c:	003fe606 	br	4001f08 <__reset+0xfb000f08>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
 4001f70:	e0800317 	ldw	r2,12(fp)
 4001f74:	10800417 	ldw	r2,16(r2)
 4001f78:	10800818 	cmpnei	r2,r2,32
 4001f7c:	10000d1e 	bne	r2,zero,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001f80:	e03ff715 	stw	zero,-36(fp)
 4001f84:	e0fff717 	ldw	r3,-36(fp)
 4001f88:	e0bffa17 	ldw	r2,-24(fp)
 4001f8c:	1880090e 	bge	r3,r2,4001fb4 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x184>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
 4001f90:	e0bff717 	ldw	r2,-36(fp)
 4001f94:	e0fffb17 	ldw	r3,-20(fp)
 4001f98:	1885883a 	add	r2,r3,r2
 4001f9c:	e0c00217 	ldw	r3,8(fp)
 4001fa0:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 4001fa4:	e0bff717 	ldw	r2,-36(fp)
 4001fa8:	10800104 	addi	r2,r2,4
 4001fac:	e0bff715 	stw	r2,-36(fp)
 4001fb0:	003ff406 	br	4001f84 <__reset+0xfb000f84>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
 4001fb4:	e1000317 	ldw	r4,12(fp)
 4001fb8:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4001fbc:	100b883a 	mov	r5,r2
 4001fc0:	e0800317 	ldw	r2,12(fp)
 4001fc4:	10c00517 	ldw	r3,20(r2)
 4001fc8:	e0bff917 	ldw	r2,-28(fp)
 4001fcc:	1887383a 	mul	r3,r3,r2
 4001fd0:	e0bffd17 	ldw	r2,-12(fp)
 4001fd4:	1887383a 	mul	r3,r3,r2
 4001fd8:	e13ffc17 	ldw	r4,-16(fp)
 4001fdc:	e0bff917 	ldw	r2,-28(fp)
 4001fe0:	2085383a 	mul	r2,r4,r2
 4001fe4:	1885883a 	add	r2,r3,r2
 4001fe8:	2885883a 	add	r2,r5,r2
 4001fec:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
 4001ff0:	e0bffd17 	ldw	r2,-12(fp)
 4001ff4:	e0bff715 	stw	r2,-36(fp)
 4001ff8:	e0fff717 	ldw	r3,-36(fp)
 4001ffc:	e0bfff17 	ldw	r2,-4(fp)
 4002000:	1880120e 	bge	r3,r2,400204c <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER+0x21c>
  {
    memcpy( (void*)addr, line, bytes_per_line );
 4002004:	e0bff817 	ldw	r2,-32(fp)
 4002008:	e0fffa17 	ldw	r3,-24(fp)
 400200c:	180d883a 	mov	r6,r3
 4002010:	e17ffb17 	ldw	r5,-20(fp)
 4002014:	1009883a 	mov	r4,r2
 4002018:	40124140 	call	4012414 <memcpy>
    addr += (display->width * bytes_per_pixel);
 400201c:	e0800317 	ldw	r2,12(fp)
 4002020:	10c00517 	ldw	r3,20(r2)
 4002024:	e0bff917 	ldw	r2,-28(fp)
 4002028:	1885383a 	mul	r2,r3,r2
 400202c:	1007883a 	mov	r3,r2
 4002030:	e0bff817 	ldw	r2,-32(fp)
 4002034:	10c5883a 	add	r2,r2,r3
 4002038:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(VIPFR_GetDrawFrame(display)) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
 400203c:	e0bff717 	ldw	r2,-36(fp)
 4002040:	10800044 	addi	r2,r2,1
 4002044:	e0bff715 	stw	r2,-36(fp)
 4002048:	003feb06 	br	4001ff8 <__reset+0xfb000ff8>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
 400204c:	e13ffb17 	ldw	r4,-20(fp)
 4002050:	4011bf40 	call	4011bf4 <free>
}
 4002054:	0001883a 	nop
 4002058:	e037883a 	mov	sp,fp
 400205c:	dfc00117 	ldw	ra,4(sp)
 4002060:	df000017 	ldw	fp,0(sp)
 4002064:	dec00204 	addi	sp,sp,8
 4002068:	f800283a 	ret

0400206c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 400206c:	defff504 	addi	sp,sp,-44
 4002070:	dfc00a15 	stw	ra,40(sp)
 4002074:	df000915 	stw	fp,36(sp)
 4002078:	df000904 	addi	fp,sp,36
 400207c:	2007883a 	mov	r3,r4
 4002080:	2805883a 	mov	r2,r5
 4002084:	e1bffe15 	stw	r6,-8(fp)
 4002088:	e1ffff15 	stw	r7,-4(fp)
 400208c:	e0fffc0d 	sth	r3,-16(fp)
 4002090:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = (char *)malloc(1024 * 3);
 4002094:	01030004 	movi	r4,3072
 4002098:	4011be00 	call	4011be0 <malloc>
 400209c:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 40020a0:	e0bffc0f 	ldh	r2,-16(fp)
 40020a4:	e0fffd0f 	ldh	r3,-12(fp)
 40020a8:	1880060e 	bge	r3,r2,40020c4 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x58>
  {
    short temp = Hstart;
 40020ac:	e0bffc0b 	ldhu	r2,-16(fp)
 40020b0:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 40020b4:	e0bffd0b 	ldhu	r2,-12(fp)
 40020b8:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 40020bc:	e0bff90b 	ldhu	r2,-28(fp)
 40020c0:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 40020c4:	e0800217 	ldw	r2,8(fp)
 40020c8:	10800417 	ldw	r2,16(r2)
 40020cc:	10800818 	cmpnei	r2,r2,32
 40020d0:	1000291e 	bne	r2,zero,4002178 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x10c>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
 40020d4:	e1000217 	ldw	r4,8(fp)
 40020d8:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40020dc:	1009883a 	mov	r4,r2
 40020e0:	e0800217 	ldw	r2,8(fp)
 40020e4:	10800517 	ldw	r2,20(r2)
 40020e8:	1085883a 	add	r2,r2,r2
 40020ec:	1085883a 	add	r2,r2,r2
 40020f0:	1007883a 	mov	r3,r2
 40020f4:	e0bffe17 	ldw	r2,-8(fp)
 40020f8:	1887383a 	mul	r3,r3,r2
 40020fc:	e0bffc0f 	ldh	r2,-16(fp)
 4002100:	1085883a 	add	r2,r2,r2
 4002104:	1085883a 	add	r2,r2,r2
 4002108:	1885883a 	add	r2,r3,r2
 400210c:	2085883a 	add	r2,r4,r2
 4002110:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 4002114:	e0fffd0f 	ldh	r3,-12(fp)
 4002118:	e0bffc0f 	ldh	r2,-16(fp)
 400211c:	1885c83a 	sub	r2,r3,r2
 4002120:	1085883a 	add	r2,r2,r2
 4002124:	1085883a 	add	r2,r2,r2
 4002128:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 400212c:	e03ff715 	stw	zero,-36(fp)
 4002130:	e0fff717 	ldw	r3,-36(fp)
 4002134:	e0bffb17 	ldw	r2,-20(fp)
 4002138:	1880090e 	bge	r3,r2,4002160 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0xf4>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 400213c:	e0bff717 	ldw	r2,-36(fp)
 4002140:	e0fff817 	ldw	r3,-32(fp)
 4002144:	1885883a 	add	r2,r3,r2
 4002148:	e0ffff17 	ldw	r3,-4(fp)
 400214c:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 4002150:	e0bff717 	ldw	r2,-36(fp)
 4002154:	10800104 	addi	r2,r2,4
 4002158:	e0bff715 	stw	r2,-36(fp)
 400215c:	003ff406 	br	4002130 <__reset+0xfb001130>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4002160:	e0bffa17 	ldw	r2,-24(fp)
 4002164:	e0fffb17 	ldw	r3,-20(fp)
 4002168:	180d883a 	mov	r6,r3
 400216c:	e17ff817 	ldw	r5,-32(fp)
 4002170:	1009883a 	mov	r4,r2
 4002174:	40124140 	call	4012414 <memcpy>
  }
  if(display->color_depth == 24)
 4002178:	e0800217 	ldw	r2,8(fp)
 400217c:	10800417 	ldw	r2,16(r2)
 4002180:	10800618 	cmpnei	r2,r2,24
 4002184:	10003a1e 	bne	r2,zero,4002270 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x204>
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
 4002188:	e1000217 	ldw	r4,8(fp)
 400218c:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4002190:	100b883a 	mov	r5,r2
 4002194:	e0800217 	ldw	r2,8(fp)
 4002198:	10c00517 	ldw	r3,20(r2)
 400219c:	1805883a 	mov	r2,r3
 40021a0:	1085883a 	add	r2,r2,r2
 40021a4:	10c7883a 	add	r3,r2,r3
 40021a8:	e0bffe17 	ldw	r2,-8(fp)
 40021ac:	1889383a 	mul	r4,r3,r2
 40021b0:	e0fffc0f 	ldh	r3,-16(fp)
 40021b4:	1805883a 	mov	r2,r3
 40021b8:	1085883a 	add	r2,r2,r2
 40021bc:	10c5883a 	add	r2,r2,r3
 40021c0:	2085883a 	add	r2,r4,r2
 40021c4:	2885883a 	add	r2,r5,r2
 40021c8:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 40021cc:	e0fffd0f 	ldh	r3,-12(fp)
 40021d0:	e0bffc0f 	ldh	r2,-16(fp)
 40021d4:	1887c83a 	sub	r3,r3,r2
 40021d8:	1805883a 	mov	r2,r3
 40021dc:	1085883a 	add	r2,r2,r2
 40021e0:	10c5883a 	add	r2,r2,r3
 40021e4:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 40021e8:	e03ff715 	stw	zero,-36(fp)
 40021ec:	e0fff717 	ldw	r3,-36(fp)
 40021f0:	e0bffb17 	ldw	r2,-20(fp)
 40021f4:	1880170e 	bge	r3,r2,4002254 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x1e8>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40021f8:	e0bff717 	ldw	r2,-36(fp)
 40021fc:	e0fff817 	ldw	r3,-32(fp)
 4002200:	1885883a 	add	r2,r3,r2
 4002204:	e0ffff17 	ldw	r3,-4(fp)
 4002208:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 400220c:	e0bff717 	ldw	r2,-36(fp)
 4002210:	10800044 	addi	r2,r2,1
 4002214:	e0fff817 	ldw	r3,-32(fp)
 4002218:	1885883a 	add	r2,r3,r2
 400221c:	e0ffff17 	ldw	r3,-4(fp)
 4002220:	1807d23a 	srai	r3,r3,8
 4002224:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 4002228:	e0bff717 	ldw	r2,-36(fp)
 400222c:	10800084 	addi	r2,r2,2
 4002230:	e0fff817 	ldw	r3,-32(fp)
 4002234:	1885883a 	add	r2,r3,r2
 4002238:	e0ffff17 	ldw	r3,-4(fp)
 400223c:	1807d43a 	srai	r3,r3,16
 4002240:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 4002244:	e0bff717 	ldw	r2,-36(fp)
 4002248:	108000c4 	addi	r2,r2,3
 400224c:	e0bff715 	stw	r2,-36(fp)
 4002250:	003fe606 	br	40021ec <__reset+0xfb0011ec>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 4002254:	e0bffa17 	ldw	r2,-24(fp)
 4002258:	e0fffb17 	ldw	r3,-20(fp)
 400225c:	180d883a 	mov	r6,r3
 4002260:	e17ff817 	ldw	r5,-32(fp)
 4002264:	1009883a 	mov	r4,r2
 4002268:	40124140 	call	4012414 <memcpy>
 400226c:	00003106 	br	4002334 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2c8>
  }
  else if(display->color_depth == 16)
 4002270:	e0800217 	ldw	r2,8(fp)
 4002274:	10800417 	ldw	r2,16(r2)
 4002278:	10800418 	cmpnei	r2,r2,16
 400227c:	10002d1e 	bne	r2,zero,4002334 <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2c8>
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
 4002280:	e1000217 	ldw	r4,8(fp)
 4002284:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4002288:	1009883a 	mov	r4,r2
 400228c:	e0800217 	ldw	r2,8(fp)
 4002290:	10800517 	ldw	r2,20(r2)
 4002294:	1085883a 	add	r2,r2,r2
 4002298:	1007883a 	mov	r3,r2
 400229c:	e0bffe17 	ldw	r2,-8(fp)
 40022a0:	1887383a 	mul	r3,r3,r2
 40022a4:	e0bffc0f 	ldh	r2,-16(fp)
 40022a8:	1085883a 	add	r2,r2,r2
 40022ac:	1885883a 	add	r2,r3,r2
 40022b0:	2085883a 	add	r2,r4,r2
 40022b4:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 40022b8:	e0fffd0f 	ldh	r3,-12(fp)
 40022bc:	e0bffc0f 	ldh	r2,-16(fp)
 40022c0:	1885c83a 	sub	r2,r3,r2
 40022c4:	1085883a 	add	r2,r2,r2
 40022c8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 40022cc:	e03ff715 	stw	zero,-36(fp)
 40022d0:	e0fff717 	ldw	r3,-36(fp)
 40022d4:	e0bffb17 	ldw	r2,-20(fp)
 40022d8:	1880100e 	bge	r3,r2,400231c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER+0x2b0>
    {
      *(fast_buffer + i) = (unsigned char)color;
 40022dc:	e0bff717 	ldw	r2,-36(fp)
 40022e0:	e0fff817 	ldw	r3,-32(fp)
 40022e4:	1885883a 	add	r2,r3,r2
 40022e8:	e0ffff17 	ldw	r3,-4(fp)
 40022ec:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 40022f0:	e0bff717 	ldw	r2,-36(fp)
 40022f4:	10800044 	addi	r2,r2,1
 40022f8:	e0fff817 	ldw	r3,-32(fp)
 40022fc:	1885883a 	add	r2,r3,r2
 4002300:	e0ffff17 	ldw	r3,-4(fp)
 4002304:	1807d23a 	srai	r3,r3,8
 4002308:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(VIPFR_GetDrawFrame(display)) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 400230c:	e0bff717 	ldw	r2,-36(fp)
 4002310:	10800084 	addi	r2,r2,2
 4002314:	e0bff715 	stw	r2,-36(fp)
 4002318:	003fed06 	br	40022d0 <__reset+0xfb0012d0>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 400231c:	e0bffa17 	ldw	r2,-24(fp)
 4002320:	e0fffb17 	ldw	r3,-20(fp)
 4002324:	180d883a 	mov	r6,r3
 4002328:	e17ff817 	ldw	r5,-32(fp)
 400232c:	1009883a 	mov	r4,r2
 4002330:	40124140 	call	4012414 <memcpy>
  }
  free(fast_buffer);
 4002334:	e13ff817 	ldw	r4,-32(fp)
 4002338:	4011bf40 	call	4011bf4 <free>
}
 400233c:	0001883a 	nop
 4002340:	e037883a 	mov	sp,fp
 4002344:	dfc00117 	ldw	ra,4(sp)
 4002348:	df000017 	ldw	fp,0(sp)
 400234c:	dec00204 	addi	sp,sp,8
 4002350:	f800283a 	ret

04002354 <_Z16vid_merge_colorsiii>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4002354:	defffc04 	addi	sp,sp,-16
 4002358:	df000315 	stw	fp,12(sp)
 400235c:	df000304 	addi	fp,sp,12
 4002360:	e13ffd15 	stw	r4,-12(fp)
 4002364:	e17ffe15 	stw	r5,-8(fp)
 4002368:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 400236c:	e0bffe17 	ldw	r2,-8(fp)
 4002370:	1085883a 	add	r2,r2,r2
 4002374:	10800054 	ori	r2,r2,1
 4002378:	1006917a 	slli	r3,r2,5
 400237c:	e0bfff17 	ldw	r2,-4(fp)
 4002380:	1886b03a 	or	r3,r3,r2
 4002384:	e0bffd17 	ldw	r2,-12(fp)
 4002388:	100492fa 	slli	r2,r2,11
 400238c:	1884b03a 	or	r2,r3,r2
}
 4002390:	e037883a 	mov	sp,fp
 4002394:	df000017 	ldw	fp,0(sp)
 4002398:	dec00104 	addi	sp,sp,4
 400239c:	f800283a 	ret

040023a0 <_Z22vid_color_convert24_16Pc>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 40023a0:	defffc04 	addi	sp,sp,-16
 40023a4:	df000315 	stw	fp,12(sp)
 40023a8:	df000304 	addi	fp,sp,12
 40023ac:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 40023b0:	e0bfff17 	ldw	r2,-4(fp)
 40023b4:	10800003 	ldbu	r2,0(r2)
 40023b8:	1007883a 	mov	r3,r2
 40023bc:	00bffe04 	movi	r2,-8
 40023c0:	1884703a 	and	r2,r3,r2
 40023c4:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 40023c8:	e0bfff17 	ldw	r2,-4(fp)
 40023cc:	10800044 	addi	r2,r2,1
 40023d0:	10800003 	ldbu	r2,0(r2)
 40023d4:	1007883a 	mov	r3,r2
 40023d8:	00bfff04 	movi	r2,-4
 40023dc:	1884703a 	and	r2,r3,r2
 40023e0:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 40023e4:	e0bfff17 	ldw	r2,-4(fp)
 40023e8:	10800084 	addi	r2,r2,2
 40023ec:	10800003 	ldbu	r2,0(r2)
 40023f0:	1007883a 	mov	r3,r2
 40023f4:	00bffe04 	movi	r2,-8
 40023f8:	1884703a 	and	r2,r3,r2
 40023fc:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 4002400:	e0bffd83 	ldbu	r2,-10(fp)
 4002404:	1005d0fa 	srai	r2,r2,3
 4002408:	1007883a 	mov	r3,r2
 400240c:	e0bffd43 	ldbu	r2,-11(fp)
 4002410:	100490fa 	slli	r2,r2,3
 4002414:	1884b03a 	or	r2,r3,r2
 4002418:	1007883a 	mov	r3,r2
 400241c:	e0bffd03 	ldbu	r2,-12(fp)
 4002420:	1004923a 	slli	r2,r2,8
 4002424:	1884b03a 	or	r2,r3,r2
 4002428:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 400242c:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4002430:	e037883a 	mov	sp,fp
 4002434:	df000017 	ldw	fp,0(sp)
 4002438:	dec00104 	addi	sp,sp,4
 400243c:	f800283a 	ret

04002440 <_Z22vid_color_convert16_24tPc>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 4002440:	defffd04 	addi	sp,sp,-12
 4002444:	df000215 	stw	fp,8(sp)
 4002448:	df000204 	addi	fp,sp,8
 400244c:	2005883a 	mov	r2,r4
 4002450:	e17fff15 	stw	r5,-4(fp)
 4002454:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4002458:	e0bffe0b 	ldhu	r2,-8(fp)
 400245c:	1005d2fa 	srai	r2,r2,11
 4002460:	1007883a 	mov	r3,r2
 4002464:	e0bfff17 	ldw	r2,-4(fp)
 4002468:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 400246c:	e0bfff17 	ldw	r2,-4(fp)
 4002470:	10800044 	addi	r2,r2,1
 4002474:	e0fffe0b 	ldhu	r3,-8(fp)
 4002478:	18c00f8c 	andi	r3,r3,62
 400247c:	1807d17a 	srai	r3,r3,5
 4002480:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4002484:	e0bfff17 	ldw	r2,-4(fp)
 4002488:	10800084 	addi	r2,r2,2
 400248c:	e0fffe0b 	ldhu	r3,-8(fp)
 4002490:	18c007cc 	andi	r3,r3,31
 4002494:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4002498:	0005883a 	mov	r2,zero
}
 400249c:	e037883a 	mov	sp,fp
 40024a0:	df000017 	ldw	fp,0(sp)
 40024a4:	dec00104 	addi	sp,sp,4
 40024a8:	f800283a 	ret

040024ac <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 40024ac:	defff504 	addi	sp,sp,-44
 40024b0:	dfc00a15 	stw	ra,40(sp)
 40024b4:	df000915 	stw	fp,36(sp)
 40024b8:	df000904 	addi	fp,sp,36
 40024bc:	e13ffc15 	stw	r4,-16(fp)
 40024c0:	e17ffd15 	stw	r5,-12(fp)
 40024c4:	e1bffe15 	stw	r6,-8(fp)
 40024c8:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
 40024cc:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
 40024d0:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 40024d4:	e1000317 	ldw	r4,12(fp)
 40024d8:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40024dc:	100b883a 	mov	r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
 40024e0:	e0800317 	ldw	r2,12(fp)
 40024e4:	10c00517 	ldw	r3,20(r2)
 40024e8:	e0800317 	ldw	r2,12(fp)
 40024ec:	10800717 	ldw	r2,28(r2)
 40024f0:	1887383a 	mul	r3,r3,r2
 40024f4:	e0bffd17 	ldw	r2,-12(fp)
 40024f8:	1887383a 	mul	r3,r3,r2
    (x * (display->bytes_per_pixel)));
 40024fc:	e0800317 	ldw	r2,12(fp)
 4002500:	11000717 	ldw	r4,28(r2)
 4002504:	e0bffc17 	ldw	r2,-16(fp)
 4002508:	2085383a 	mul	r2,r4,r2
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
 400250c:	1885883a 	add	r2,r3,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(VIPFR_GetDrawFrame(display)) + 
 4002510:	2885883a 	add	r2,r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
 4002514:	e0bff915 	stw	r2,-28(fp)
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
 4002518:	e0800317 	ldw	r2,12(fp)
 400251c:	10c00717 	ldw	r3,28(r2)
 4002520:	e0bfff17 	ldw	r2,-4(fp)
 4002524:	1885383a 	mul	r2,r3,r2
 4002528:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
 400252c:	e0800217 	ldw	r2,8(fp)
 4002530:	10800618 	cmpnei	r2,r2,24
 4002534:	10004a1e 	bne	r2,zero,4002660 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x1b4>
  {
    if(display->color_depth == 16)
 4002538:	e0800317 	ldw	r2,12(fp)
 400253c:	10800417 	ldw	r2,16(r2)
 4002540:	10800418 	cmpnei	r2,r2,16
 4002544:	10003c1e 	bne	r2,zero,4002638 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x18c>
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
 4002548:	e13ffa17 	ldw	r4,-24(fp)
 400254c:	4011be00 	call	4011be0 <malloc>
 4002550:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
 4002554:	e0fff717 	ldw	r3,-36(fp)
 4002558:	e0bffa17 	ldw	r2,-24(fp)
 400255c:	18802e2e 	bgeu	r3,r2,4002618 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x16c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
 4002560:	e0bff817 	ldw	r2,-32(fp)
 4002564:	1085883a 	add	r2,r2,r2
 4002568:	1007883a 	mov	r3,r2
 400256c:	e0bffb17 	ldw	r2,-20(fp)
 4002570:	10c5883a 	add	r2,r2,r3
 4002574:	e0fff717 	ldw	r3,-36(fp)
 4002578:	18c00084 	addi	r3,r3,2
 400257c:	e13ffe17 	ldw	r4,-8(fp)
 4002580:	20c7883a 	add	r3,r4,r3
 4002584:	18c00003 	ldbu	r3,0(r3)
 4002588:	18c03fcc 	andi	r3,r3,255
 400258c:	18c0201c 	xori	r3,r3,128
 4002590:	18ffe004 	addi	r3,r3,-128
 4002594:	18c03e0c 	andi	r3,r3,248
 4002598:	1807d0fa 	srai	r3,r3,3
 400259c:	180b883a 	mov	r5,r3
 40025a0:	e0fff717 	ldw	r3,-36(fp)
 40025a4:	18c00044 	addi	r3,r3,1
 40025a8:	e13ffe17 	ldw	r4,-8(fp)
 40025ac:	20c7883a 	add	r3,r4,r3
 40025b0:	18c00003 	ldbu	r3,0(r3)
 40025b4:	18c03fcc 	andi	r3,r3,255
 40025b8:	18c0201c 	xori	r3,r3,128
 40025bc:	18ffe004 	addi	r3,r3,-128
 40025c0:	18c03f0c 	andi	r3,r3,252
 40025c4:	180690fa 	slli	r3,r3,3
 40025c8:	28c6b03a 	or	r3,r5,r3
 40025cc:	180b883a 	mov	r5,r3
 40025d0:	e0fff717 	ldw	r3,-36(fp)
 40025d4:	e13ffe17 	ldw	r4,-8(fp)
 40025d8:	20c7883a 	add	r3,r4,r3
 40025dc:	18c00003 	ldbu	r3,0(r3)
 40025e0:	18c03fcc 	andi	r3,r3,255
 40025e4:	18c0201c 	xori	r3,r3,128
 40025e8:	18ffe004 	addi	r3,r3,-128
 40025ec:	18c03e0c 	andi	r3,r3,248
 40025f0:	1806923a 	slli	r3,r3,8
 40025f4:	28c6b03a 	or	r3,r5,r3
 40025f8:	10c0000d 	sth	r3,0(r2)
        index_16++;
 40025fc:	e0bff817 	ldw	r2,-32(fp)
 4002600:	10800044 	addi	r2,r2,1
 4002604:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 4002608:	e0bff717 	ldw	r2,-36(fp)
 400260c:	108000c4 	addi	r2,r2,3
 4002610:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
 4002614:	003fcf06 	br	4002554 <__reset+0xfb001554>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 4002618:	e0bff917 	ldw	r2,-28(fp)
 400261c:	e1bffa17 	ldw	r6,-24(fp)
 4002620:	e17ffb17 	ldw	r5,-20(fp)
 4002624:	1009883a 	mov	r4,r2
 4002628:	40124140 	call	4012414 <memcpy>
      free(temp_line);
 400262c:	e13ffb17 	ldw	r4,-20(fp)
 4002630:	4011bf40 	call	4011bf4 <free>
 4002634:	00003f06 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    }
    else if(display->color_depth == 24)
 4002638:	e0800317 	ldw	r2,12(fp)
 400263c:	10800417 	ldw	r2,16(r2)
 4002640:	10800618 	cmpnei	r2,r2,24
 4002644:	10003b1e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4002648:	e0bff917 	ldw	r2,-28(fp)
 400264c:	e1bffa17 	ldw	r6,-24(fp)
 4002650:	e17ffe17 	ldw	r5,-8(fp)
 4002654:	1009883a 	mov	r4,r2
 4002658:	40124140 	call	4012414 <memcpy>
 400265c:	00003506 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    }
  }
  else if(source_color_depth == 16)
 4002660:	e0800217 	ldw	r2,8(fp)
 4002664:	10800418 	cmpnei	r2,r2,16
 4002668:	1000321e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
  {
    if(display->color_depth == 24)
 400266c:	e0800317 	ldw	r2,12(fp)
 4002670:	10800417 	ldw	r2,16(r2)
 4002674:	10800618 	cmpnei	r2,r2,24
 4002678:	1000251e 	bne	r2,zero,4002710 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x264>
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
 400267c:	e13ffa17 	ldw	r4,-24(fp)
 4002680:	4011be00 	call	4011be0 <malloc>
 4002684:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
 4002688:	e0fff817 	ldw	r3,-32(fp)
 400268c:	e0bfff17 	ldw	r2,-4(fp)
 4002690:	1880170e 	bge	r3,r2,40026f0 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x244>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
 4002694:	e0bff817 	ldw	r2,-32(fp)
 4002698:	e0fffe17 	ldw	r3,-8(fp)
 400269c:	1885883a 	add	r2,r3,r2
 40026a0:	10800003 	ldbu	r2,0(r2)
 40026a4:	10803fcc 	andi	r2,r2,255
 40026a8:	1080201c 	xori	r2,r2,128
 40026ac:	10bfe004 	addi	r2,r2,-128
 40026b0:	10ffffcc 	andi	r3,r2,65535
 40026b4:	e0bff717 	ldw	r2,-36(fp)
 40026b8:	1085883a 	add	r2,r2,r2
 40026bc:	1009883a 	mov	r4,r2
 40026c0:	e0bffb17 	ldw	r2,-20(fp)
 40026c4:	1105883a 	add	r2,r2,r4
 40026c8:	100b883a 	mov	r5,r2
 40026cc:	1809883a 	mov	r4,r3
 40026d0:	40024400 	call	4002440 <_Z22vid_color_convert16_24tPc>
        index_16++;
 40026d4:	e0bff817 	ldw	r2,-32(fp)
 40026d8:	10800044 	addi	r2,r2,1
 40026dc:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 40026e0:	e0bff717 	ldw	r2,-36(fp)
 40026e4:	108000c4 	addi	r2,r2,3
 40026e8:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = (unsigned short *)malloc(bytes_in_line);
      while(index_16 < num_pixels )
 40026ec:	003fe606 	br	4002688 <__reset+0xfb001688>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 40026f0:	e0bff917 	ldw	r2,-28(fp)
 40026f4:	e1bffa17 	ldw	r6,-24(fp)
 40026f8:	e17ffb17 	ldw	r5,-20(fp)
 40026fc:	1009883a 	mov	r4,r2
 4002700:	40124140 	call	4012414 <memcpy>
      free(temp_line);
 4002704:	e13ffb17 	ldw	r4,-20(fp)
 4002708:	4011bf40 	call	4011bf4 <free>
 400270c:	00000906 	br	4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
      
    }
    else if(display->color_depth == 16)
 4002710:	e0800317 	ldw	r2,12(fp)
 4002714:	10800417 	ldw	r2,16(r2)
 4002718:	10800418 	cmpnei	r2,r2,16
 400271c:	1000051e 	bne	r2,zero,4002734 <_Z29vid_copy_line_to_frame_bufferiiPciiP16VIP_FRAME_READER+0x288>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 4002720:	e0bff917 	ldw	r2,-28(fp)
 4002724:	e1bffa17 	ldw	r6,-24(fp)
 4002728:	e17ffe17 	ldw	r5,-8(fp)
 400272c:	1009883a 	mov	r4,r2
 4002730:	40124140 	call	4012414 <memcpy>
    }
  }
  return(0);
 4002734:	0005883a 	mov	r2,zero
}
 4002738:	e037883a 	mov	sp,fp
 400273c:	dfc00117 	ldw	ra,4(sp)
 4002740:	df000017 	ldw	fp,0(sp)
 4002744:	dec00204 	addi	sp,sp,8
 4002748:	f800283a 	ret

0400274c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 400274c:	deffef04 	addi	sp,sp,-68
 4002750:	dfc01015 	stw	ra,64(sp)
 4002754:	df000f15 	stw	fp,60(sp)
 4002758:	df000f04 	addi	fp,sp,60
 400275c:	2011883a 	mov	r8,r4
 4002760:	3009883a 	mov	r4,r6
 4002764:	3807883a 	mov	r3,r7
 4002768:	e0800217 	ldw	r2,8(fp)
 400276c:	e23ffb0d 	sth	r8,-20(fp)
 4002770:	e17ffc0d 	sth	r5,-16(fp)
 4002774:	e13ffd0d 	sth	r4,-12(fp)
 4002778:	e0fffe0d 	sth	r3,-8(fp)
 400277c:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4002780:	e0fffd0b 	ldhu	r3,-12(fp)
 4002784:	e0bffb0b 	ldhu	r2,-20(fp)
 4002788:	1885c83a 	sub	r2,r3,r2
 400278c:	1000010e 	bge	r2,zero,4002794 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x48>
 4002790:	0085c83a 	sub	r2,zero,r2
 4002794:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4002798:	e0fffe0b 	ldhu	r3,-8(fp)
 400279c:	e0bffc0b 	ldhu	r2,-16(fp)
 40027a0:	1885c83a 	sub	r2,r3,r2
 40027a4:	1000010e 	bge	r2,zero,40027ac <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x60>
 40027a8:	0085c83a 	sub	r2,zero,r2
 40027ac:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 40027b0:	e0bffb0b 	ldhu	r2,-20(fp)
 40027b4:	e0fffd0b 	ldhu	r3,-12(fp)
 40027b8:	1880032e 	bgeu	r3,r2,40027c8 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x7c>
 40027bc:	00bfffc4 	movi	r2,-1
 40027c0:	e0bff315 	stw	r2,-52(fp)
 40027c4:	00000206 	br	40027d0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x84>
 40027c8:	00800044 	movi	r2,1
 40027cc:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 40027d0:	e0bffc0b 	ldhu	r2,-16(fp)
 40027d4:	e0fffe0b 	ldhu	r3,-8(fp)
 40027d8:	1880032e 	bgeu	r3,r2,40027e8 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x9c>
 40027dc:	00bfffc4 	movi	r2,-1
 40027e0:	e0bff415 	stw	r2,-48(fp)
 40027e4:	00000206 	br	40027f0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0xa4>
 40027e8:	00800044 	movi	r2,1
 40027ec:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 40027f0:	e0fff117 	ldw	r3,-60(fp)
 40027f4:	e0bff217 	ldw	r2,-56(fp)
 40027f8:	18803516 	blt	r3,r2,40028d0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x184>
    int dPr   = vert_delta<<1;
 40027fc:	e0bff217 	ldw	r2,-56(fp)
 4002800:	1085883a 	add	r2,r2,r2
 4002804:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4002808:	e0bff117 	ldw	r2,-60(fp)
 400280c:	1085883a 	add	r2,r2,r2
 4002810:	1007883a 	mov	r3,r2
 4002814:	e0bff717 	ldw	r2,-36(fp)
 4002818:	10c5c83a 	sub	r2,r2,r3
 400281c:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 4002820:	e0fff717 	ldw	r3,-36(fp)
 4002824:	e0bff117 	ldw	r2,-60(fp)
 4002828:	1885c83a 	sub	r2,r3,r2
 400282c:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4002830:	e0bff117 	ldw	r2,-60(fp)
 4002834:	10005b16 	blt	r2,zero,40029a4 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x258>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4002838:	e0bffb0b 	ldhu	r2,-20(fp)
 400283c:	e0fffc0b 	ldhu	r3,-16(fp)
 4002840:	e1000317 	ldw	r4,12(fp)
 4002844:	e1c00417 	ldw	r7,16(fp)
 4002848:	200d883a 	mov	r6,r4
 400284c:	180b883a 	mov	r5,r3
 4002850:	1009883a 	mov	r4,r2
 4002854:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      // If we're moving both up and right
      if (P > 0) {
 4002858:	e0bff517 	ldw	r2,-44(fp)
 400285c:	00800f0e 	bge	zero,r2,400289c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x150>
        horiz_start+=horiz_incr;
 4002860:	e0bff317 	ldw	r2,-52(fp)
 4002864:	1007883a 	mov	r3,r2
 4002868:	e0bffb0b 	ldhu	r2,-20(fp)
 400286c:	1885883a 	add	r2,r3,r2
 4002870:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4002874:	e0bff417 	ldw	r2,-48(fp)
 4002878:	1007883a 	mov	r3,r2
 400287c:	e0bffc0b 	ldhu	r2,-16(fp)
 4002880:	1885883a 	add	r2,r3,r2
 4002884:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4002888:	e0fff517 	ldw	r3,-44(fp)
 400288c:	e0bff817 	ldw	r2,-32(fp)
 4002890:	1885883a 	add	r2,r3,r2
 4002894:	e0bff515 	stw	r2,-44(fp)
 4002898:	00000906 	br	40028c0 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x174>
      } else {
        horiz_start+=horiz_incr;
 400289c:	e0bff317 	ldw	r2,-52(fp)
 40028a0:	1007883a 	mov	r3,r2
 40028a4:	e0bffb0b 	ldhu	r2,-20(fp)
 40028a8:	1885883a 	add	r2,r3,r2
 40028ac:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 40028b0:	e0fff517 	ldw	r3,-44(fp)
 40028b4:	e0bff717 	ldw	r2,-36(fp)
 40028b8:	1885883a 	add	r2,r3,r2
 40028bc:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 40028c0:	e0bff117 	ldw	r2,-60(fp)
 40028c4:	10bfffc4 	addi	r2,r2,-1
 40028c8:	e0bff115 	stw	r2,-60(fp)
 40028cc:	003fd806 	br	4002830 <__reset+0xfb001830>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 40028d0:	e0bff117 	ldw	r2,-60(fp)
 40028d4:	1085883a 	add	r2,r2,r2
 40028d8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 40028dc:	e0bff217 	ldw	r2,-56(fp)
 40028e0:	1085883a 	add	r2,r2,r2
 40028e4:	1007883a 	mov	r3,r2
 40028e8:	e0bff917 	ldw	r2,-28(fp)
 40028ec:	10c5c83a 	sub	r2,r2,r3
 40028f0:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 40028f4:	e0fff917 	ldw	r3,-28(fp)
 40028f8:	e0bff217 	ldw	r2,-56(fp)
 40028fc:	1885c83a 	sub	r2,r3,r2
 4002900:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4002904:	e0bff217 	ldw	r2,-56(fp)
 4002908:	10002616 	blt	r2,zero,40029a4 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x258>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 400290c:	e0bffb0b 	ldhu	r2,-20(fp)
 4002910:	e0fffc0b 	ldhu	r3,-16(fp)
 4002914:	e1000317 	ldw	r4,12(fp)
 4002918:	e1c00417 	ldw	r7,16(fp)
 400291c:	200d883a 	mov	r6,r4
 4002920:	180b883a 	mov	r5,r3
 4002924:	1009883a 	mov	r4,r2
 4002928:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
      // If we're moving both up and right
      if (P > 0) {
 400292c:	e0bff617 	ldw	r2,-40(fp)
 4002930:	00800f0e 	bge	zero,r2,4002970 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x224>
        horiz_start+=horiz_incr;
 4002934:	e0bff317 	ldw	r2,-52(fp)
 4002938:	1007883a 	mov	r3,r2
 400293c:	e0bffb0b 	ldhu	r2,-20(fp)
 4002940:	1885883a 	add	r2,r3,r2
 4002944:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4002948:	e0bff417 	ldw	r2,-48(fp)
 400294c:	1007883a 	mov	r3,r2
 4002950:	e0bffc0b 	ldhu	r2,-16(fp)
 4002954:	1885883a 	add	r2,r3,r2
 4002958:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 400295c:	e0fff617 	ldw	r3,-40(fp)
 4002960:	e0bffa17 	ldw	r2,-24(fp)
 4002964:	1885883a 	add	r2,r3,r2
 4002968:	e0bff615 	stw	r2,-40(fp)
 400296c:	00000906 	br	4002994 <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER+0x248>
      } else {
        vert_start+=vert_incr;
 4002970:	e0bff417 	ldw	r2,-48(fp)
 4002974:	1007883a 	mov	r3,r2
 4002978:	e0bffc0b 	ldhu	r2,-16(fp)
 400297c:	1885883a 	add	r2,r3,r2
 4002980:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4002984:	e0fff617 	ldw	r3,-40(fp)
 4002988:	e0bff917 	ldw	r2,-28(fp)
 400298c:	1885883a 	add	r2,r3,r2
 4002990:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4002994:	e0bff217 	ldw	r2,-56(fp)
 4002998:	10bfffc4 	addi	r2,r2,-1
 400299c:	e0bff215 	stw	r2,-56(fp)
 40029a0:	003fd806 	br	4002904 <__reset+0xfb001904>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40029a4:	0001883a 	nop
 40029a8:	e037883a 	mov	sp,fp
 40029ac:	dfc00117 	ldw	ra,4(sp)
 40029b0:	df000017 	ldw	fp,0(sp)
 40029b4:	dec00204 	addi	sp,sp,8
 40029b8:	f800283a 	ret

040029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 40029bc:	defff104 	addi	sp,sp,-60
 40029c0:	dfc00e15 	stw	ra,56(sp)
 40029c4:	df000d15 	stw	fp,52(sp)
 40029c8:	df000d04 	addi	fp,sp,52
 40029cc:	e13ffb15 	stw	r4,-20(fp)
 40029d0:	e17ffc15 	stw	r5,-16(fp)
 40029d4:	e1bffd15 	stw	r6,-12(fp)
 40029d8:	e1fffe15 	stw	r7,-8(fp)
 40029dc:	e0800217 	ldw	r2,8(fp)
 40029e0:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 40029e4:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 40029e8:	e0bffd17 	ldw	r2,-12(fp)
 40029ec:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 40029f0:	e0bffd17 	ldw	r2,-12(fp)
 40029f4:	1085883a 	add	r2,r2,r2
 40029f8:	1085883a 	add	r2,r2,r2
 40029fc:	1007883a 	mov	r3,r2
 4002a00:	00800144 	movi	r2,5
 4002a04:	10c5c83a 	sub	r2,r2,r3
 4002a08:	1000010e 	bge	r2,zero,4002a10 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0x54>
 4002a0c:	108000c4 	addi	r2,r2,3
 4002a10:	1005d0ba 	srai	r2,r2,2
 4002a14:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4002a18:	e0bfff07 	ldb	r2,-4(fp)
 4002a1c:	e0c00317 	ldw	r3,12(fp)
 4002a20:	d8c00415 	stw	r3,16(sp)
 4002a24:	d8800315 	stw	r2,12(sp)
 4002a28:	e0bffe17 	ldw	r2,-8(fp)
 4002a2c:	d8800215 	stw	r2,8(sp)
 4002a30:	d8000115 	stw	zero,4(sp)
 4002a34:	d8000015 	stw	zero,0(sp)
 4002a38:	e1fff917 	ldw	r7,-28(fp)
 4002a3c:	e1bff817 	ldw	r6,-32(fp)
 4002a40:	e17ffc17 	ldw	r5,-16(fp)
 4002a44:	e13ffb17 	ldw	r4,-20(fp)
 4002a48:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002a4c:	e0fff817 	ldw	r3,-32(fp)
 4002a50:	e0bff917 	ldw	r2,-28(fp)
 4002a54:	1880250e 	bge	r3,r2,4002aec <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0x130>
    x++;
 4002a58:	e0bff817 	ldw	r2,-32(fp)
 4002a5c:	10800044 	addi	r2,r2,1
 4002a60:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4002a64:	e0bffa17 	ldw	r2,-24(fp)
 4002a68:	1000070e 	bge	r2,zero,4002a88 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0xcc>
      p += 2*x+1;
 4002a6c:	e0bff817 	ldw	r2,-32(fp)
 4002a70:	1085883a 	add	r2,r2,r2
 4002a74:	10800044 	addi	r2,r2,1
 4002a78:	e0fffa17 	ldw	r3,-24(fp)
 4002a7c:	1885883a 	add	r2,r3,r2
 4002a80:	e0bffa15 	stw	r2,-24(fp)
 4002a84:	00000b06 	br	4002ab4 <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER+0xf8>
    } else {
      y--;
 4002a88:	e0bff917 	ldw	r2,-28(fp)
 4002a8c:	10bfffc4 	addi	r2,r2,-1
 4002a90:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4002a94:	e0fff817 	ldw	r3,-32(fp)
 4002a98:	e0bff917 	ldw	r2,-28(fp)
 4002a9c:	1885c83a 	sub	r2,r3,r2
 4002aa0:	1085883a 	add	r2,r2,r2
 4002aa4:	10800044 	addi	r2,r2,1
 4002aa8:	e0fffa17 	ldw	r3,-24(fp)
 4002aac:	1885883a 	add	r2,r3,r2
 4002ab0:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4002ab4:	e0bfff07 	ldb	r2,-4(fp)
 4002ab8:	e0c00317 	ldw	r3,12(fp)
 4002abc:	d8c00415 	stw	r3,16(sp)
 4002ac0:	d8800315 	stw	r2,12(sp)
 4002ac4:	e0bffe17 	ldw	r2,-8(fp)
 4002ac8:	d8800215 	stw	r2,8(sp)
 4002acc:	d8000115 	stw	zero,4(sp)
 4002ad0:	d8000015 	stw	zero,0(sp)
 4002ad4:	e1fff917 	ldw	r7,-28(fp)
 4002ad8:	e1bff817 	ldw	r6,-32(fp)
 4002adc:	e17ffc17 	ldw	r5,-16(fp)
 4002ae0:	e13ffb17 	ldw	r4,-20(fp)
 4002ae4:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002ae8:	003fd806 	br	4002a4c <__reset+0xfb001a4c>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4002aec:	0005883a 	mov	r2,zero
}
 4002af0:	e037883a 	mov	sp,fp
 4002af4:	dfc00117 	ldw	ra,4(sp)
 4002af8:	df000017 	ldw	fp,0(sp)
 4002afc:	dec00204 	addi	sp,sp,8
 4002b00:	f800283a 	ret

04002b04 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 4002b04:	deffec04 	addi	sp,sp,-80
 4002b08:	dfc01315 	stw	ra,76(sp)
 4002b0c:	df001215 	stw	fp,72(sp)
 4002b10:	df001204 	addi	fp,sp,72
 4002b14:	e13ffc15 	stw	r4,-16(fp)
 4002b18:	e17ffd15 	stw	r5,-12(fp)
 4002b1c:	e1bffe15 	stw	r6,-8(fp)
 4002b20:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4002b24:	e0bffc17 	ldw	r2,-16(fp)
 4002b28:	e0fffe17 	ldw	r3,-8(fp)
 4002b2c:	1880060e 	bge	r3,r2,4002b48 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x44>
  {
    temp = horiz_end;
 4002b30:	e0bffe17 	ldw	r2,-8(fp)
 4002b34:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002b38:	e0bffc17 	ldw	r2,-16(fp)
 4002b3c:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 4002b40:	e0bff617 	ldw	r2,-40(fp)
 4002b44:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 4002b48:	e0bffd17 	ldw	r2,-12(fp)
 4002b4c:	e0ffff17 	ldw	r3,-4(fp)
 4002b50:	1880060e 	bge	r3,r2,4002b6c <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x68>
  {
    temp = vert_end;
 4002b54:	e0bfff17 	ldw	r2,-4(fp)
 4002b58:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4002b5c:	e0bffd17 	ldw	r2,-12(fp)
 4002b60:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 4002b64:	e0bff617 	ldw	r2,-40(fp)
 4002b68:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 4002b6c:	e0fffe17 	ldw	r3,-8(fp)
 4002b70:	e0bffc17 	ldw	r2,-16(fp)
 4002b74:	1885c83a 	sub	r2,r3,r2
 4002b78:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 4002b7c:	e0ffff17 	ldw	r3,-4(fp)
 4002b80:	e0bffd17 	ldw	r2,-12(fp)
 4002b84:	1885c83a 	sub	r2,r3,r2
 4002b88:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 4002b8c:	e0bff717 	ldw	r2,-36(fp)
 4002b90:	1006d07a 	srli	r3,r2,1
 4002b94:	e0800217 	ldw	r2,8(fp)
 4002b98:	1880032e 	bgeu	r3,r2,4002ba8 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0xa4>
    radius = width / 2;
 4002b9c:	e0bff717 	ldw	r2,-36(fp)
 4002ba0:	1004d07a 	srli	r2,r2,1
 4002ba4:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 4002ba8:	e0bff817 	ldw	r2,-32(fp)
 4002bac:	1006d07a 	srli	r3,r2,1
 4002bb0:	e0800217 	ldw	r2,8(fp)
 4002bb4:	1880032e 	bgeu	r3,r2,4002bc4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0xc0>
    radius = height / 2;
 4002bb8:	e0bff817 	ldw	r2,-32(fp)
 4002bbc:	1004d07a 	srli	r2,r2,1
 4002bc0:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 4002bc4:	e0800217 	ldw	r2,8(fp)
 4002bc8:	1085883a 	add	r2,r2,r2
 4002bcc:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 4002bd0:	e0bff917 	ldw	r2,-28(fp)
 4002bd4:	e0fff717 	ldw	r3,-36(fp)
 4002bd8:	1885c83a 	sub	r2,r3,r2
 4002bdc:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 4002be0:	e0bff917 	ldw	r2,-28(fp)
 4002be4:	e0fff817 	ldw	r3,-32(fp)
 4002be8:	1885c83a 	sub	r2,r3,r2
 4002bec:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 4002bf0:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 4002bf4:	e0800217 	ldw	r2,8(fp)
 4002bf8:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 4002bfc:	e0800217 	ldw	r2,8(fp)
 4002c00:	1085883a 	add	r2,r2,r2
 4002c04:	1085883a 	add	r2,r2,r2
 4002c08:	1007883a 	mov	r3,r2
 4002c0c:	00800144 	movi	r2,5
 4002c10:	10c5c83a 	sub	r2,r2,r3
 4002c14:	1000010e 	bge	r2,zero,4002c1c <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x118>
 4002c18:	108000c4 	addi	r2,r2,3
 4002c1c:	1005d0ba 	srai	r2,r2,2
 4002c20:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002c24:	e0fffc17 	ldw	r3,-16(fp)
 4002c28:	e0800217 	ldw	r2,8(fp)
 4002c2c:	1891883a 	add	r8,r3,r2
 4002c30:	e0fffd17 	ldw	r3,-12(fp)
 4002c34:	e0800217 	ldw	r2,8(fp)
 4002c38:	1893883a 	add	r9,r3,r2
 4002c3c:	e1bff317 	ldw	r6,-52(fp)
 4002c40:	e1fff417 	ldw	r7,-48(fp)
 4002c44:	e0bffa17 	ldw	r2,-24(fp)
 4002c48:	e0fffb17 	ldw	r3,-20(fp)
 4002c4c:	e1000417 	ldw	r4,16(fp)
 4002c50:	21003fcc 	andi	r4,r4,255
 4002c54:	2100201c 	xori	r4,r4,128
 4002c58:	213fe004 	addi	r4,r4,-128
                           straight_width, straight_height, color, fill, display );
 4002c5c:	e1400517 	ldw	r5,20(fp)
 4002c60:	d9400415 	stw	r5,16(sp)
 4002c64:	d9000315 	stw	r4,12(sp)
 4002c68:	e1000317 	ldw	r4,12(fp)
 4002c6c:	d9000215 	stw	r4,8(sp)
 4002c70:	d8c00115 	stw	r3,4(sp)
 4002c74:	d8800015 	stw	r2,0(sp)
 4002c78:	480b883a 	mov	r5,r9
 4002c7c:	4009883a 	mov	r4,r8
 4002c80:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002c84:	e0fff317 	ldw	r3,-52(fp)
 4002c88:	e0bff417 	ldw	r2,-48(fp)
 4002c8c:	1880322e 	bgeu	r3,r2,4002d58 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x254>
    x++;
 4002c90:	e0bff317 	ldw	r2,-52(fp)
 4002c94:	10800044 	addi	r2,r2,1
 4002c98:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 4002c9c:	e0bff517 	ldw	r2,-44(fp)
 4002ca0:	1000080e 	bge	r2,zero,4002cc4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x1c0>
      p += 2*x+1;
 4002ca4:	e0bff317 	ldw	r2,-52(fp)
 4002ca8:	1085883a 	add	r2,r2,r2
 4002cac:	1007883a 	mov	r3,r2
 4002cb0:	e0bff517 	ldw	r2,-44(fp)
 4002cb4:	1885883a 	add	r2,r3,r2
 4002cb8:	10800044 	addi	r2,r2,1
 4002cbc:	e0bff515 	stw	r2,-44(fp)
 4002cc0:	00000c06 	br	4002cf4 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x1f0>
    } else {
      y--;
 4002cc4:	e0bff417 	ldw	r2,-48(fp)
 4002cc8:	10bfffc4 	addi	r2,r2,-1
 4002ccc:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 4002cd0:	e0fff317 	ldw	r3,-52(fp)
 4002cd4:	e0bff417 	ldw	r2,-48(fp)
 4002cd8:	1885c83a 	sub	r2,r3,r2
 4002cdc:	1085883a 	add	r2,r2,r2
 4002ce0:	1007883a 	mov	r3,r2
 4002ce4:	e0bff517 	ldw	r2,-44(fp)
 4002ce8:	1885883a 	add	r2,r3,r2
 4002cec:	10800044 	addi	r2,r2,1
 4002cf0:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002cf4:	e0fffc17 	ldw	r3,-16(fp)
 4002cf8:	e0800217 	ldw	r2,8(fp)
 4002cfc:	1891883a 	add	r8,r3,r2
 4002d00:	e0fffd17 	ldw	r3,-12(fp)
 4002d04:	e0800217 	ldw	r2,8(fp)
 4002d08:	1893883a 	add	r9,r3,r2
 4002d0c:	e1bff317 	ldw	r6,-52(fp)
 4002d10:	e1fff417 	ldw	r7,-48(fp)
 4002d14:	e0bffa17 	ldw	r2,-24(fp)
 4002d18:	e0fffb17 	ldw	r3,-20(fp)
 4002d1c:	e1000417 	ldw	r4,16(fp)
 4002d20:	21003fcc 	andi	r4,r4,255
 4002d24:	2100201c 	xori	r4,r4,128
 4002d28:	213fe004 	addi	r4,r4,-128
                             straight_width, straight_height, color, fill, display);
 4002d2c:	e1400517 	ldw	r5,20(fp)
 4002d30:	d9400415 	stw	r5,16(sp)
 4002d34:	d9000315 	stw	r4,12(sp)
 4002d38:	e1000317 	ldw	r4,12(fp)
 4002d3c:	d9000215 	stw	r4,8(sp)
 4002d40:	d8c00115 	stw	r3,4(sp)
 4002d44:	d8800015 	stw	r2,0(sp)
 4002d48:	480b883a 	mov	r5,r9
 4002d4c:	4009883a 	mov	r4,r8
 4002d50:	4002ec00 	call	4002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002d54:	003fcb06 	br	4002c84 <__reset+0xfb001c84>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4002d58:	e0800417 	ldw	r2,16(fp)
 4002d5c:	10001026 	beq	r2,zero,4002da0 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x29c>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4002d60:	e0fffd17 	ldw	r3,-12(fp)
 4002d64:	e0800217 	ldw	r2,8(fp)
 4002d68:	1889883a 	add	r4,r3,r2
 4002d6c:	e0ffff17 	ldw	r3,-4(fp)
 4002d70:	e0800217 	ldw	r2,8(fp)
 4002d74:	1887c83a 	sub	r3,r3,r2
 4002d78:	e0800517 	ldw	r2,20(fp)
 4002d7c:	d8800115 	stw	r2,4(sp)
 4002d80:	e0800317 	ldw	r2,12(fp)
 4002d84:	d8800015 	stw	r2,0(sp)
 4002d88:	180f883a 	mov	r7,r3
 4002d8c:	e1bffe17 	ldw	r6,-8(fp)
 4002d90:	200b883a 	mov	r5,r4
 4002d94:	e13ffc17 	ldw	r4,-16(fp)
 4002d98:	4001e300 	call	4001e30 <_Z15vid_paint_blockiiiiiP16VIP_FRAME_READER>
 4002d9c:	00004206 	br	4002ea8 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER+0x3a4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 4002da0:	e0fffd17 	ldw	r3,-12(fp)
 4002da4:	e0800217 	ldw	r2,8(fp)
 4002da8:	1889883a 	add	r4,r3,r2
 4002dac:	e0ffff17 	ldw	r3,-4(fp)
 4002db0:	e0800217 	ldw	r2,8(fp)
 4002db4:	1887c83a 	sub	r3,r3,r2
 4002db8:	e0800517 	ldw	r2,20(fp)
 4002dbc:	d8800215 	stw	r2,8(sp)
 4002dc0:	e0800317 	ldw	r2,12(fp)
 4002dc4:	d8800115 	stw	r2,4(sp)
 4002dc8:	00800044 	movi	r2,1
 4002dcc:	d8800015 	stw	r2,0(sp)
 4002dd0:	180f883a 	mov	r7,r3
 4002dd4:	e1bffc17 	ldw	r6,-16(fp)
 4002dd8:	200b883a 	mov	r5,r4
 4002ddc:	e13ffc17 	ldw	r4,-16(fp)
 4002de0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 4002de4:	e0fffd17 	ldw	r3,-12(fp)
 4002de8:	e0800217 	ldw	r2,8(fp)
 4002dec:	1889883a 	add	r4,r3,r2
 4002df0:	e0ffff17 	ldw	r3,-4(fp)
 4002df4:	e0800217 	ldw	r2,8(fp)
 4002df8:	1887c83a 	sub	r3,r3,r2
 4002dfc:	e0800517 	ldw	r2,20(fp)
 4002e00:	d8800215 	stw	r2,8(sp)
 4002e04:	e0800317 	ldw	r2,12(fp)
 4002e08:	d8800115 	stw	r2,4(sp)
 4002e0c:	00800044 	movi	r2,1
 4002e10:	d8800015 	stw	r2,0(sp)
 4002e14:	180f883a 	mov	r7,r3
 4002e18:	e1bffe17 	ldw	r6,-8(fp)
 4002e1c:	200b883a 	mov	r5,r4
 4002e20:	e13ffe17 	ldw	r4,-8(fp)
 4002e24:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4002e28:	e0fffc17 	ldw	r3,-16(fp)
 4002e2c:	e0800217 	ldw	r2,8(fp)
 4002e30:	1889883a 	add	r4,r3,r2
 4002e34:	e0fffe17 	ldw	r3,-8(fp)
 4002e38:	e0800217 	ldw	r2,8(fp)
 4002e3c:	1887c83a 	sub	r3,r3,r2
 4002e40:	e0800517 	ldw	r2,20(fp)
 4002e44:	d8800215 	stw	r2,8(sp)
 4002e48:	e0800317 	ldw	r2,12(fp)
 4002e4c:	d8800115 	stw	r2,4(sp)
 4002e50:	00800044 	movi	r2,1
 4002e54:	d8800015 	stw	r2,0(sp)
 4002e58:	e1fffd17 	ldw	r7,-12(fp)
 4002e5c:	180d883a 	mov	r6,r3
 4002e60:	e17ffd17 	ldw	r5,-12(fp)
 4002e64:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 4002e68:	e0fffc17 	ldw	r3,-16(fp)
 4002e6c:	e0800217 	ldw	r2,8(fp)
 4002e70:	1889883a 	add	r4,r3,r2
 4002e74:	e0fffe17 	ldw	r3,-8(fp)
 4002e78:	e0800217 	ldw	r2,8(fp)
 4002e7c:	1887c83a 	sub	r3,r3,r2
 4002e80:	e0800517 	ldw	r2,20(fp)
 4002e84:	d8800215 	stw	r2,8(sp)
 4002e88:	e0800317 	ldw	r2,12(fp)
 4002e8c:	d8800115 	stw	r2,4(sp)
 4002e90:	00800044 	movi	r2,1
 4002e94:	d8800015 	stw	r2,0(sp)
 4002e98:	e1ffff17 	ldw	r7,-4(fp)
 4002e9c:	180d883a 	mov	r6,r3
 4002ea0:	e17fff17 	ldw	r5,-4(fp)
 4002ea4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
  }

  return (0);
 4002ea8:	0005883a 	mov	r2,zero
}
 4002eac:	e037883a 	mov	sp,fp
 4002eb0:	dfc00117 	ldw	ra,4(sp)
 4002eb4:	df000017 	ldw	fp,0(sp)
 4002eb8:	dec00204 	addi	sp,sp,8
 4002ebc:	f800283a 	ret

04002ec0 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 4002ec0:	defff604 	addi	sp,sp,-40
 4002ec4:	dfc00915 	stw	ra,36(sp)
 4002ec8:	df000815 	stw	fp,32(sp)
 4002ecc:	df000804 	addi	fp,sp,32
 4002ed0:	e13ffb15 	stw	r4,-20(fp)
 4002ed4:	e17ffc15 	stw	r5,-16(fp)
 4002ed8:	e1bffd15 	stw	r6,-12(fp)
 4002edc:	e1fffe15 	stw	r7,-8(fp)
 4002ee0:	e0800517 	ldw	r2,20(fp)
 4002ee4:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 4002ee8:	e0bffd17 	ldw	r2,-12(fp)
 4002eec:	1000841e 	bne	r2,zero,4003100 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 4002ef0:	e0fffc17 	ldw	r3,-16(fp)
 4002ef4:	e0bffe17 	ldw	r2,-8(fp)
 4002ef8:	1887883a 	add	r3,r3,r2
 4002efc:	e0800317 	ldw	r2,12(fp)
 4002f00:	1885883a 	add	r2,r3,r2
 4002f04:	e0c00417 	ldw	r3,16(fp)
 4002f08:	e1c00617 	ldw	r7,24(fp)
 4002f0c:	180d883a 	mov	r6,r3
 4002f10:	100b883a 	mov	r5,r2
 4002f14:	e13ffb17 	ldw	r4,-20(fp)
 4002f18:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 4002f1c:	e0fffb17 	ldw	r3,-20(fp)
 4002f20:	e0800217 	ldw	r2,8(fp)
 4002f24:	1889883a 	add	r4,r3,r2
 4002f28:	e0fffc17 	ldw	r3,-16(fp)
 4002f2c:	e0bffe17 	ldw	r2,-8(fp)
 4002f30:	1887883a 	add	r3,r3,r2
 4002f34:	e0800317 	ldw	r2,12(fp)
 4002f38:	1885883a 	add	r2,r3,r2
 4002f3c:	e0c00417 	ldw	r3,16(fp)
 4002f40:	e1c00617 	ldw	r7,24(fp)
 4002f44:	180d883a 	mov	r6,r3
 4002f48:	100b883a 	mov	r5,r2
 4002f4c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4002f50:	e0fffc17 	ldw	r3,-16(fp)
 4002f54:	e0bffe17 	ldw	r2,-8(fp)
 4002f58:	1885c83a 	sub	r2,r3,r2
 4002f5c:	e0c00417 	ldw	r3,16(fp)
 4002f60:	e1c00617 	ldw	r7,24(fp)
 4002f64:	180d883a 	mov	r6,r3
 4002f68:	100b883a 	mov	r5,r2
 4002f6c:	e13ffb17 	ldw	r4,-20(fp)
 4002f70:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 4002f74:	e0fffb17 	ldw	r3,-20(fp)
 4002f78:	e0800217 	ldw	r2,8(fp)
 4002f7c:	1889883a 	add	r4,r3,r2
 4002f80:	e0fffc17 	ldw	r3,-16(fp)
 4002f84:	e0bffe17 	ldw	r2,-8(fp)
 4002f88:	1885c83a 	sub	r2,r3,r2
 4002f8c:	e0c00417 	ldw	r3,16(fp)
 4002f90:	e1c00617 	ldw	r7,24(fp)
 4002f94:	180d883a 	mov	r6,r3
 4002f98:	100b883a 	mov	r5,r2
 4002f9c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>

        if(fill) {
 4002fa0:	e0bfff07 	ldb	r2,-4(fp)
 4002fa4:	10002926 	beq	r2,zero,400304c <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 4002fa8:	e0fffb17 	ldw	r3,-20(fp)
 4002fac:	e0bffe17 	ldw	r2,-8(fp)
 4002fb0:	1889c83a 	sub	r4,r3,r2
 4002fb4:	e0fffb17 	ldw	r3,-20(fp)
 4002fb8:	e0bffe17 	ldw	r2,-8(fp)
 4002fbc:	1887883a 	add	r3,r3,r2
 4002fc0:	e0800217 	ldw	r2,8(fp)
 4002fc4:	1887883a 	add	r3,r3,r2
 4002fc8:	e0800617 	ldw	r2,24(fp)
 4002fcc:	d8800215 	stw	r2,8(sp)
 4002fd0:	e0800417 	ldw	r2,16(fp)
 4002fd4:	d8800115 	stw	r2,4(sp)
 4002fd8:	00800044 	movi	r2,1
 4002fdc:	d8800015 	stw	r2,0(sp)
 4002fe0:	e1fffc17 	ldw	r7,-16(fp)
 4002fe4:	180d883a 	mov	r6,r3
 4002fe8:	e17ffc17 	ldw	r5,-16(fp)
 4002fec:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 4002ff0:	e0fffb17 	ldw	r3,-20(fp)
 4002ff4:	e0bffe17 	ldw	r2,-8(fp)
 4002ff8:	1889c83a 	sub	r4,r3,r2
 4002ffc:	e0fffc17 	ldw	r3,-16(fp)
 4003000:	e0800317 	ldw	r2,12(fp)
 4003004:	188b883a 	add	r5,r3,r2
 4003008:	e0fffb17 	ldw	r3,-20(fp)
 400300c:	e0bffe17 	ldw	r2,-8(fp)
 4003010:	1887883a 	add	r3,r3,r2
 4003014:	e0800217 	ldw	r2,8(fp)
 4003018:	188d883a 	add	r6,r3,r2
 400301c:	e0fffc17 	ldw	r3,-16(fp)
 4003020:	e0800317 	ldw	r2,12(fp)
 4003024:	1887883a 	add	r3,r3,r2
 4003028:	e0800617 	ldw	r2,24(fp)
 400302c:	d8800215 	stw	r2,8(sp)
 4003030:	e0800417 	ldw	r2,16(fp)
 4003034:	d8800115 	stw	r2,4(sp)
 4003038:	00800044 	movi	r2,1
 400303c:	d8800015 	stw	r2,0(sp)
 4003040:	180f883a 	mov	r7,r3
 4003044:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4003048:	00016606 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        if(fill) {
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 400304c:	e0fffb17 	ldw	r3,-20(fp)
 4003050:	e0bffe17 	ldw	r2,-8(fp)
 4003054:	1887883a 	add	r3,r3,r2
 4003058:	e0800217 	ldw	r2,8(fp)
 400305c:	1885883a 	add	r2,r3,r2
 4003060:	e0c00417 	ldw	r3,16(fp)
 4003064:	e1c00617 	ldw	r7,24(fp)
 4003068:	180d883a 	mov	r6,r3
 400306c:	e17ffc17 	ldw	r5,-16(fp)
 4003070:	1009883a 	mov	r4,r2
 4003074:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4003078:	e0fffb17 	ldw	r3,-20(fp)
 400307c:	e0bffe17 	ldw	r2,-8(fp)
 4003080:	1887883a 	add	r3,r3,r2
 4003084:	e0800217 	ldw	r2,8(fp)
 4003088:	1889883a 	add	r4,r3,r2
 400308c:	e0fffc17 	ldw	r3,-16(fp)
 4003090:	e0800317 	ldw	r2,12(fp)
 4003094:	1885883a 	add	r2,r3,r2
 4003098:	e0c00417 	ldw	r3,16(fp)
 400309c:	e1c00617 	ldw	r7,24(fp)
 40030a0:	180d883a 	mov	r6,r3
 40030a4:	100b883a 	mov	r5,r2
 40030a8:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 40030ac:	e0fffb17 	ldw	r3,-20(fp)
 40030b0:	e0bffe17 	ldw	r2,-8(fp)
 40030b4:	1885c83a 	sub	r2,r3,r2
 40030b8:	e0c00417 	ldw	r3,16(fp)
 40030bc:	e1c00617 	ldw	r7,24(fp)
 40030c0:	180d883a 	mov	r6,r3
 40030c4:	e17ffc17 	ldw	r5,-16(fp)
 40030c8:	1009883a 	mov	r4,r2
 40030cc:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 40030d0:	e0fffb17 	ldw	r3,-20(fp)
 40030d4:	e0bffe17 	ldw	r2,-8(fp)
 40030d8:	1889c83a 	sub	r4,r3,r2
 40030dc:	e0fffc17 	ldw	r3,-16(fp)
 40030e0:	e0800317 	ldw	r2,12(fp)
 40030e4:	1885883a 	add	r2,r3,r2
 40030e8:	e0c00417 	ldw	r3,16(fp)
 40030ec:	e1c00617 	ldw	r7,24(fp)
 40030f0:	180d883a 	mov	r6,r3
 40030f4:	100b883a 	mov	r5,r2
 40030f8:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40030fc:	00013906 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 4003100:	e0fffd17 	ldw	r3,-12(fp)
 4003104:	e0bffe17 	ldw	r2,-8(fp)
 4003108:	1880681e 	bne	r3,r2,40032ac <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x3ec>
      if(fill) {
 400310c:	e0bfff07 	ldb	r2,-4(fp)
 4003110:	10003126 	beq	r2,zero,40031d8 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 4003114:	e0fffb17 	ldw	r3,-20(fp)
 4003118:	e0bffd17 	ldw	r2,-12(fp)
 400311c:	1889c83a 	sub	r4,r3,r2
 4003120:	e0fffc17 	ldw	r3,-16(fp)
 4003124:	e0bffe17 	ldw	r2,-8(fp)
 4003128:	1887883a 	add	r3,r3,r2
 400312c:	e0800317 	ldw	r2,12(fp)
 4003130:	188b883a 	add	r5,r3,r2
 4003134:	e0fffb17 	ldw	r3,-20(fp)
 4003138:	e0bffd17 	ldw	r2,-12(fp)
 400313c:	1887883a 	add	r3,r3,r2
 4003140:	e0800217 	ldw	r2,8(fp)
 4003144:	188d883a 	add	r6,r3,r2
 4003148:	e0fffc17 	ldw	r3,-16(fp)
 400314c:	e0bffe17 	ldw	r2,-8(fp)
 4003150:	1887883a 	add	r3,r3,r2
 4003154:	e0800317 	ldw	r2,12(fp)
 4003158:	1887883a 	add	r3,r3,r2
 400315c:	e0800617 	ldw	r2,24(fp)
 4003160:	d8800215 	stw	r2,8(sp)
 4003164:	e0800417 	ldw	r2,16(fp)
 4003168:	d8800115 	stw	r2,4(sp)
 400316c:	00800044 	movi	r2,1
 4003170:	d8800015 	stw	r2,0(sp)
 4003174:	180f883a 	mov	r7,r3
 4003178:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 400317c:	e0fffb17 	ldw	r3,-20(fp)
 4003180:	e0bffd17 	ldw	r2,-12(fp)
 4003184:	1889c83a 	sub	r4,r3,r2
 4003188:	e0fffc17 	ldw	r3,-16(fp)
 400318c:	e0bffe17 	ldw	r2,-8(fp)
 4003190:	188bc83a 	sub	r5,r3,r2
 4003194:	e0fffb17 	ldw	r3,-20(fp)
 4003198:	e0bffd17 	ldw	r2,-12(fp)
 400319c:	1887883a 	add	r3,r3,r2
 40031a0:	e0800217 	ldw	r2,8(fp)
 40031a4:	188d883a 	add	r6,r3,r2
 40031a8:	e0fffc17 	ldw	r3,-16(fp)
 40031ac:	e0bffe17 	ldw	r2,-8(fp)
 40031b0:	1887c83a 	sub	r3,r3,r2
 40031b4:	e0800617 	ldw	r2,24(fp)
 40031b8:	d8800215 	stw	r2,8(sp)
 40031bc:	e0800417 	ldw	r2,16(fp)
 40031c0:	d8800115 	stw	r2,4(sp)
 40031c4:	00800044 	movi	r2,1
 40031c8:	d8800015 	stw	r2,0(sp)
 40031cc:	180f883a 	mov	r7,r3
 40031d0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40031d4:	00010306 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
      if(fill) {
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 40031d8:	e0fffb17 	ldw	r3,-20(fp)
 40031dc:	e0bffd17 	ldw	r2,-12(fp)
 40031e0:	1887883a 	add	r3,r3,r2
 40031e4:	e0800217 	ldw	r2,8(fp)
 40031e8:	1889883a 	add	r4,r3,r2
 40031ec:	e0fffc17 	ldw	r3,-16(fp)
 40031f0:	e0bffe17 	ldw	r2,-8(fp)
 40031f4:	1887883a 	add	r3,r3,r2
 40031f8:	e0800317 	ldw	r2,12(fp)
 40031fc:	1885883a 	add	r2,r3,r2
 4003200:	e0c00417 	ldw	r3,16(fp)
 4003204:	e1c00617 	ldw	r7,24(fp)
 4003208:	180d883a 	mov	r6,r3
 400320c:	100b883a 	mov	r5,r2
 4003210:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 4003214:	e0fffb17 	ldw	r3,-20(fp)
 4003218:	e0bffd17 	ldw	r2,-12(fp)
 400321c:	1889c83a 	sub	r4,r3,r2
 4003220:	e0fffc17 	ldw	r3,-16(fp)
 4003224:	e0bffe17 	ldw	r2,-8(fp)
 4003228:	1887883a 	add	r3,r3,r2
 400322c:	e0800317 	ldw	r2,12(fp)
 4003230:	1885883a 	add	r2,r3,r2
 4003234:	e0c00417 	ldw	r3,16(fp)
 4003238:	e1c00617 	ldw	r7,24(fp)
 400323c:	180d883a 	mov	r6,r3
 4003240:	100b883a 	mov	r5,r2
 4003244:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4003248:	e0fffb17 	ldw	r3,-20(fp)
 400324c:	e0bffd17 	ldw	r2,-12(fp)
 4003250:	1887883a 	add	r3,r3,r2
 4003254:	e0800217 	ldw	r2,8(fp)
 4003258:	1889883a 	add	r4,r3,r2
 400325c:	e0fffc17 	ldw	r3,-16(fp)
 4003260:	e0bffe17 	ldw	r2,-8(fp)
 4003264:	1885c83a 	sub	r2,r3,r2
 4003268:	e0c00417 	ldw	r3,16(fp)
 400326c:	e1c00617 	ldw	r7,24(fp)
 4003270:	180d883a 	mov	r6,r3
 4003274:	100b883a 	mov	r5,r2
 4003278:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 400327c:	e0fffb17 	ldw	r3,-20(fp)
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	1889c83a 	sub	r4,r3,r2
 4003288:	e0fffc17 	ldw	r3,-16(fp)
 400328c:	e0bffe17 	ldw	r2,-8(fp)
 4003290:	1885c83a 	sub	r2,r3,r2
 4003294:	e0c00417 	ldw	r3,16(fp)
 4003298:	e1c00617 	ldw	r7,24(fp)
 400329c:	180d883a 	mov	r6,r3
 40032a0:	100b883a 	mov	r5,r2
 40032a4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 40032a8:	0000ce06 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
        vid_set_pixel(cx - x, cy - y, color, display); // top left
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 40032ac:	e0fffd17 	ldw	r3,-12(fp)
 40032b0:	e0bffe17 	ldw	r2,-8(fp)
 40032b4:	1880cb0e 	bge	r3,r2,40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
        if(fill) {
 40032b8:	e0bfff07 	ldb	r2,-4(fp)
 40032bc:	10006126 	beq	r2,zero,4003444 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40032c0:	e0fffb17 	ldw	r3,-20(fp)
 40032c4:	e0bffd17 	ldw	r2,-12(fp)
 40032c8:	1889c83a 	sub	r4,r3,r2
 40032cc:	e0fffc17 	ldw	r3,-16(fp)
 40032d0:	e0bffe17 	ldw	r2,-8(fp)
 40032d4:	1887883a 	add	r3,r3,r2
 40032d8:	e0800317 	ldw	r2,12(fp)
 40032dc:	188b883a 	add	r5,r3,r2
 40032e0:	e0fffb17 	ldw	r3,-20(fp)
 40032e4:	e0bffd17 	ldw	r2,-12(fp)
 40032e8:	1887883a 	add	r3,r3,r2
 40032ec:	e0800217 	ldw	r2,8(fp)
 40032f0:	188d883a 	add	r6,r3,r2
 40032f4:	e0fffc17 	ldw	r3,-16(fp)
 40032f8:	e0bffe17 	ldw	r2,-8(fp)
 40032fc:	1887883a 	add	r3,r3,r2
 4003300:	e0800317 	ldw	r2,12(fp)
 4003304:	1887883a 	add	r3,r3,r2
 4003308:	e0800617 	ldw	r2,24(fp)
 400330c:	d8800215 	stw	r2,8(sp)
 4003310:	e0800417 	ldw	r2,16(fp)
 4003314:	d8800115 	stw	r2,4(sp)
 4003318:	00800044 	movi	r2,1
 400331c:	d8800015 	stw	r2,0(sp)
 4003320:	180f883a 	mov	r7,r3
 4003324:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4003328:	e0fffb17 	ldw	r3,-20(fp)
 400332c:	e0bffe17 	ldw	r2,-8(fp)
 4003330:	1889c83a 	sub	r4,r3,r2
 4003334:	e0fffc17 	ldw	r3,-16(fp)
 4003338:	e0bffd17 	ldw	r2,-12(fp)
 400333c:	1887883a 	add	r3,r3,r2
 4003340:	e0800317 	ldw	r2,12(fp)
 4003344:	188b883a 	add	r5,r3,r2
 4003348:	e0fffb17 	ldw	r3,-20(fp)
 400334c:	e0bffe17 	ldw	r2,-8(fp)
 4003350:	1887883a 	add	r3,r3,r2
 4003354:	e0800217 	ldw	r2,8(fp)
 4003358:	188d883a 	add	r6,r3,r2
 400335c:	e0fffc17 	ldw	r3,-16(fp)
 4003360:	e0bffd17 	ldw	r2,-12(fp)
 4003364:	1887883a 	add	r3,r3,r2
 4003368:	e0800317 	ldw	r2,12(fp)
 400336c:	1887883a 	add	r3,r3,r2
 4003370:	e0800617 	ldw	r2,24(fp)
 4003374:	d8800215 	stw	r2,8(sp)
 4003378:	e0800417 	ldw	r2,16(fp)
 400337c:	d8800115 	stw	r2,4(sp)
 4003380:	00800044 	movi	r2,1
 4003384:	d8800015 	stw	r2,0(sp)
 4003388:	180f883a 	mov	r7,r3
 400338c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4003390:	e0fffb17 	ldw	r3,-20(fp)
 4003394:	e0bffe17 	ldw	r2,-8(fp)
 4003398:	1889c83a 	sub	r4,r3,r2
 400339c:	e0fffc17 	ldw	r3,-16(fp)
 40033a0:	e0bffd17 	ldw	r2,-12(fp)
 40033a4:	188bc83a 	sub	r5,r3,r2
 40033a8:	e0fffb17 	ldw	r3,-20(fp)
 40033ac:	e0bffe17 	ldw	r2,-8(fp)
 40033b0:	1887883a 	add	r3,r3,r2
 40033b4:	e0800217 	ldw	r2,8(fp)
 40033b8:	188d883a 	add	r6,r3,r2
 40033bc:	e0fffc17 	ldw	r3,-16(fp)
 40033c0:	e0bffd17 	ldw	r2,-12(fp)
 40033c4:	1887c83a 	sub	r3,r3,r2
 40033c8:	e0800617 	ldw	r2,24(fp)
 40033cc:	d8800215 	stw	r2,8(sp)
 40033d0:	e0800417 	ldw	r2,16(fp)
 40033d4:	d8800115 	stw	r2,4(sp)
 40033d8:	00800044 	movi	r2,1
 40033dc:	d8800015 	stw	r2,0(sp)
 40033e0:	180f883a 	mov	r7,r3
 40033e4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 40033e8:	e0fffb17 	ldw	r3,-20(fp)
 40033ec:	e0bffd17 	ldw	r2,-12(fp)
 40033f0:	1889c83a 	sub	r4,r3,r2
 40033f4:	e0fffc17 	ldw	r3,-16(fp)
 40033f8:	e0bffe17 	ldw	r2,-8(fp)
 40033fc:	188bc83a 	sub	r5,r3,r2
 4003400:	e0fffb17 	ldw	r3,-20(fp)
 4003404:	e0bffd17 	ldw	r2,-12(fp)
 4003408:	1887883a 	add	r3,r3,r2
 400340c:	e0800217 	ldw	r2,8(fp)
 4003410:	188d883a 	add	r6,r3,r2
 4003414:	e0fffc17 	ldw	r3,-16(fp)
 4003418:	e0bffe17 	ldw	r2,-8(fp)
 400341c:	1887c83a 	sub	r3,r3,r2
 4003420:	e0800617 	ldw	r2,24(fp)
 4003424:	d8800215 	stw	r2,8(sp)
 4003428:	e0800417 	ldw	r2,16(fp)
 400342c:	d8800115 	stw	r2,4(sp)
 4003430:	00800044 	movi	r2,1
 4003434:	d8800015 	stw	r2,0(sp)
 4003438:	180f883a 	mov	r7,r3
 400343c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
          vid_set_pixel(cx - y, cy - x, color, display);
        }
    }
}
 4003440:	00006806 	br	40035e4 <_Z23vid_round_corner_pointsiiiiiiicP16VIP_FRAME_READER+0x724>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 4003444:	e0fffb17 	ldw	r3,-20(fp)
 4003448:	e0bffd17 	ldw	r2,-12(fp)
 400344c:	1887883a 	add	r3,r3,r2
 4003450:	e0800217 	ldw	r2,8(fp)
 4003454:	1889883a 	add	r4,r3,r2
 4003458:	e0fffc17 	ldw	r3,-16(fp)
 400345c:	e0bffe17 	ldw	r2,-8(fp)
 4003460:	1887883a 	add	r3,r3,r2
 4003464:	e0800317 	ldw	r2,12(fp)
 4003468:	1885883a 	add	r2,r3,r2
 400346c:	e0c00417 	ldw	r3,16(fp)
 4003470:	e1c00617 	ldw	r7,24(fp)
 4003474:	180d883a 	mov	r6,r3
 4003478:	100b883a 	mov	r5,r2
 400347c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4003480:	e0fffb17 	ldw	r3,-20(fp)
 4003484:	e0bffd17 	ldw	r2,-12(fp)
 4003488:	1889c83a 	sub	r4,r3,r2
 400348c:	e0fffc17 	ldw	r3,-16(fp)
 4003490:	e0bffe17 	ldw	r2,-8(fp)
 4003494:	1887883a 	add	r3,r3,r2
 4003498:	e0800317 	ldw	r2,12(fp)
 400349c:	1885883a 	add	r2,r3,r2
 40034a0:	e0c00417 	ldw	r3,16(fp)
 40034a4:	e1c00617 	ldw	r7,24(fp)
 40034a8:	180d883a 	mov	r6,r3
 40034ac:	100b883a 	mov	r5,r2
 40034b0:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 40034b4:	e0fffb17 	ldw	r3,-20(fp)
 40034b8:	e0bffd17 	ldw	r2,-12(fp)
 40034bc:	1887883a 	add	r3,r3,r2
 40034c0:	e0800217 	ldw	r2,8(fp)
 40034c4:	1889883a 	add	r4,r3,r2
 40034c8:	e0fffc17 	ldw	r3,-16(fp)
 40034cc:	e0bffe17 	ldw	r2,-8(fp)
 40034d0:	1885c83a 	sub	r2,r3,r2
 40034d4:	e0c00417 	ldw	r3,16(fp)
 40034d8:	e1c00617 	ldw	r7,24(fp)
 40034dc:	180d883a 	mov	r6,r3
 40034e0:	100b883a 	mov	r5,r2
 40034e4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - x, cy - y, color, display);
 40034e8:	e0fffb17 	ldw	r3,-20(fp)
 40034ec:	e0bffd17 	ldw	r2,-12(fp)
 40034f0:	1889c83a 	sub	r4,r3,r2
 40034f4:	e0fffc17 	ldw	r3,-16(fp)
 40034f8:	e0bffe17 	ldw	r2,-8(fp)
 40034fc:	1885c83a 	sub	r2,r3,r2
 4003500:	e0c00417 	ldw	r3,16(fp)
 4003504:	e1c00617 	ldw	r7,24(fp)
 4003508:	180d883a 	mov	r6,r3
 400350c:	100b883a 	mov	r5,r2
 4003510:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4003514:	e0fffb17 	ldw	r3,-20(fp)
 4003518:	e0bffe17 	ldw	r2,-8(fp)
 400351c:	1887883a 	add	r3,r3,r2
 4003520:	e0800217 	ldw	r2,8(fp)
 4003524:	1889883a 	add	r4,r3,r2
 4003528:	e0fffc17 	ldw	r3,-16(fp)
 400352c:	e0bffd17 	ldw	r2,-12(fp)
 4003530:	1887883a 	add	r3,r3,r2
 4003534:	e0800317 	ldw	r2,12(fp)
 4003538:	1885883a 	add	r2,r3,r2
 400353c:	e0c00417 	ldw	r3,16(fp)
 4003540:	e1c00617 	ldw	r7,24(fp)
 4003544:	180d883a 	mov	r6,r3
 4003548:	100b883a 	mov	r5,r2
 400354c:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4003550:	e0fffb17 	ldw	r3,-20(fp)
 4003554:	e0bffe17 	ldw	r2,-8(fp)
 4003558:	1889c83a 	sub	r4,r3,r2
 400355c:	e0fffc17 	ldw	r3,-16(fp)
 4003560:	e0bffd17 	ldw	r2,-12(fp)
 4003564:	1887883a 	add	r3,r3,r2
 4003568:	e0800317 	ldw	r2,12(fp)
 400356c:	1885883a 	add	r2,r3,r2
 4003570:	e0c00417 	ldw	r3,16(fp)
 4003574:	e1c00617 	ldw	r7,24(fp)
 4003578:	180d883a 	mov	r6,r3
 400357c:	100b883a 	mov	r5,r2
 4003580:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4003584:	e0fffb17 	ldw	r3,-20(fp)
 4003588:	e0bffe17 	ldw	r2,-8(fp)
 400358c:	1887883a 	add	r3,r3,r2
 4003590:	e0800217 	ldw	r2,8(fp)
 4003594:	1889883a 	add	r4,r3,r2
 4003598:	e0fffc17 	ldw	r3,-16(fp)
 400359c:	e0bffd17 	ldw	r2,-12(fp)
 40035a0:	1885c83a 	sub	r2,r3,r2
 40035a4:	e0c00417 	ldw	r3,16(fp)
 40035a8:	e1c00617 	ldw	r7,24(fp)
 40035ac:	180d883a 	mov	r6,r3
 40035b0:	100b883a 	mov	r5,r2
 40035b4:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
          vid_set_pixel(cx - y, cy - x, color, display);
 40035b8:	e0fffb17 	ldw	r3,-20(fp)
 40035bc:	e0bffe17 	ldw	r2,-8(fp)
 40035c0:	1889c83a 	sub	r4,r3,r2
 40035c4:	e0fffc17 	ldw	r3,-16(fp)
 40035c8:	e0bffd17 	ldw	r2,-12(fp)
 40035cc:	1885c83a 	sub	r2,r3,r2
 40035d0:	e0c00417 	ldw	r3,16(fp)
 40035d4:	e1c00617 	ldw	r7,24(fp)
 40035d8:	180d883a 	mov	r6,r3
 40035dc:	100b883a 	mov	r5,r2
 40035e0:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>
        }
    }
}
 40035e4:	0001883a 	nop
 40035e8:	e037883a 	mov	sp,fp
 40035ec:	dfc00117 	ldw	ra,4(sp)
 40035f0:	df000017 	ldw	fp,0(sp)
 40035f4:	dec00204 	addi	sp,sp,8
 40035f8:	f800283a 	ret

040035fc <_Z19vid_bres_scan_edgesiiiiPi>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 40035fc:	deffee04 	addi	sp,sp,-72
 4003600:	dfc01115 	stw	ra,68(sp)
 4003604:	df001015 	stw	fp,64(sp)
 4003608:	df001004 	addi	fp,sp,64
 400360c:	e13ffc15 	stw	r4,-16(fp)
 4003610:	e17ffd15 	stw	r5,-12(fp)
 4003614:	e1bffe15 	stw	r6,-8(fp)
 4003618:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 400361c:	e0bffc17 	ldw	r2,-16(fp)
 4003620:	e0fffe17 	ldw	r3,-8(fp)
 4003624:	18800c0e 	bge	r3,r2,4003658 <_Z19vid_bres_scan_edgesiiiiPi+0x5c>
  {
    int tempx = x2;
 4003628:	e0bffe17 	ldw	r2,-8(fp)
 400362c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4003630:	e0bffc17 	ldw	r2,-16(fp)
 4003634:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4003638:	e0bff517 	ldw	r2,-44(fp)
 400363c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4003640:	e0bfff17 	ldw	r2,-4(fp)
 4003644:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4003648:	e0bffd17 	ldw	r2,-12(fp)
 400364c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4003650:	e0bff617 	ldw	r2,-40(fp)
 4003654:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4003658:	e0fffd17 	ldw	r3,-12(fp)
 400365c:	e0bfff17 	ldw	r2,-4(fp)
 4003660:	1885c83a 	sub	r2,r3,r2
 4003664:	1000010e 	bge	r2,zero,400366c <_Z19vid_bres_scan_edgesiiiiPi+0x70>
 4003668:	0085c83a 	sub	r2,zero,r2
 400366c:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4003670:	e0fffe17 	ldw	r3,-8(fp)
 4003674:	e0bffc17 	ldw	r2,-16(fp)
 4003678:	1885c83a 	sub	r2,r3,r2
 400367c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4003680:	e0bffd17 	ldw	r2,-12(fp)
 4003684:	e0ffff17 	ldw	r3,-4(fp)
 4003688:	1880030e 	bge	r3,r2,4003698 <_Z19vid_bres_scan_edgesiiiiPi+0x9c>
 400368c:	00bfffc4 	movi	r2,-1
 4003690:	e0bff015 	stw	r2,-64(fp)
 4003694:	00000206 	br	40036a0 <_Z19vid_bres_scan_edgesiiiiPi+0xa4>
 4003698:	00800044 	movi	r2,1
 400369c:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 40036a0:	00800044 	movi	r2,1
 40036a4:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 40036a8:	e0fff217 	ldw	r3,-56(fp)
 40036ac:	e0bff117 	ldw	r2,-60(fp)
 40036b0:	18802e16 	blt	r3,r2,400376c <_Z19vid_bres_scan_edgesiiiiPi+0x170>
    int dPr   = y_delta<<1;
 40036b4:	e0bff117 	ldw	r2,-60(fp)
 40036b8:	1085883a 	add	r2,r2,r2
 40036bc:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 40036c0:	e0bff217 	ldw	r2,-56(fp)
 40036c4:	1085883a 	add	r2,r2,r2
 40036c8:	1007883a 	mov	r3,r2
 40036cc:	e0bff817 	ldw	r2,-32(fp)
 40036d0:	10c5c83a 	sub	r2,r2,r3
 40036d4:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 40036d8:	e0fff817 	ldw	r3,-32(fp)
 40036dc:	e0bff217 	ldw	r2,-56(fp)
 40036e0:	1885c83a 	sub	r2,r3,r2
 40036e4:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 40036e8:	e0bff217 	ldw	r2,-56(fp)
 40036ec:	10004d16 	blt	r2,zero,4003824 <_Z19vid_bres_scan_edgesiiiiPi+0x228>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 40036f0:	e1800217 	ldw	r6,8(fp)
 40036f4:	e17ffd17 	ldw	r5,-12(fp)
 40036f8:	e13ffc17 	ldw	r4,-16(fp)
 40036fc:	4003fe80 	call	4003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>
      // If we're moving along both axis
      if (P > 0) {
 4003700:	e0bff317 	ldw	r2,-52(fp)
 4003704:	00800d0e 	bge	zero,r2,400373c <_Z19vid_bres_scan_edgesiiiiPi+0x140>
        x1+=x_incr;
 4003708:	e0fffc17 	ldw	r3,-16(fp)
 400370c:	e0bff717 	ldw	r2,-36(fp)
 4003710:	1885883a 	add	r2,r3,r2
 4003714:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4003718:	e0fffd17 	ldw	r3,-12(fp)
 400371c:	e0bff017 	ldw	r2,-64(fp)
 4003720:	1885883a 	add	r2,r3,r2
 4003724:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4003728:	e0fff317 	ldw	r3,-52(fp)
 400372c:	e0bff917 	ldw	r2,-28(fp)
 4003730:	1885883a 	add	r2,r3,r2
 4003734:	e0bff315 	stw	r2,-52(fp)
 4003738:	00000806 	br	400375c <_Z19vid_bres_scan_edgesiiiiPi+0x160>
      } else {
        x1+=x_incr;
 400373c:	e0fffc17 	ldw	r3,-16(fp)
 4003740:	e0bff717 	ldw	r2,-36(fp)
 4003744:	1885883a 	add	r2,r3,r2
 4003748:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 400374c:	e0fff317 	ldw	r3,-52(fp)
 4003750:	e0bff817 	ldw	r2,-32(fp)
 4003754:	1885883a 	add	r2,r3,r2
 4003758:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 400375c:	e0bff217 	ldw	r2,-56(fp)
 4003760:	10bfffc4 	addi	r2,r2,-1
 4003764:	e0bff215 	stw	r2,-56(fp)
 4003768:	003fdf06 	br	40036e8 <__reset+0xfb0026e8>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 400376c:	e0bff217 	ldw	r2,-56(fp)
 4003770:	1085883a 	add	r2,r2,r2
 4003774:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 4003778:	e0bff117 	ldw	r2,-60(fp)
 400377c:	1085883a 	add	r2,r2,r2
 4003780:	1007883a 	mov	r3,r2
 4003784:	e0bffa17 	ldw	r2,-24(fp)
 4003788:	10c5c83a 	sub	r2,r2,r3
 400378c:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 4003790:	e0fffa17 	ldw	r3,-24(fp)
 4003794:	e0bff117 	ldw	r2,-60(fp)
 4003798:	1885c83a 	sub	r2,r3,r2
 400379c:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 40037a0:	e0bff117 	ldw	r2,-60(fp)
 40037a4:	10001f16 	blt	r2,zero,4003824 <_Z19vid_bres_scan_edgesiiiiPi+0x228>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 40037a8:	e1800217 	ldw	r6,8(fp)
 40037ac:	e17ffd17 	ldw	r5,-12(fp)
 40037b0:	e13ffc17 	ldw	r4,-16(fp)
 40037b4:	4003fe80 	call	4003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>
      // If we're moving along both axis
      if (P > 0) {
 40037b8:	e0bff417 	ldw	r2,-48(fp)
 40037bc:	00800d0e 	bge	zero,r2,40037f4 <_Z19vid_bres_scan_edgesiiiiPi+0x1f8>
        x1+=x_incr;
 40037c0:	e0fffc17 	ldw	r3,-16(fp)
 40037c4:	e0bff717 	ldw	r2,-36(fp)
 40037c8:	1885883a 	add	r2,r3,r2
 40037cc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 40037d0:	e0fffd17 	ldw	r3,-12(fp)
 40037d4:	e0bff017 	ldw	r2,-64(fp)
 40037d8:	1885883a 	add	r2,r3,r2
 40037dc:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 40037e0:	e0fff417 	ldw	r3,-48(fp)
 40037e4:	e0bffb17 	ldw	r2,-20(fp)
 40037e8:	1885883a 	add	r2,r3,r2
 40037ec:	e0bff415 	stw	r2,-48(fp)
 40037f0:	00000806 	br	4003814 <_Z19vid_bres_scan_edgesiiiiPi+0x218>
      } else {
        y1+=y_incr;
 40037f4:	e0fffd17 	ldw	r3,-12(fp)
 40037f8:	e0bff017 	ldw	r2,-64(fp)
 40037fc:	1885883a 	add	r2,r3,r2
 4003800:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 4003804:	e0fff417 	ldw	r3,-48(fp)
 4003808:	e0bffa17 	ldw	r2,-24(fp)
 400380c:	1885883a 	add	r2,r3,r2
 4003810:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4003814:	e0bff117 	ldw	r2,-60(fp)
 4003818:	10bfffc4 	addi	r2,r2,-1
 400381c:	e0bff115 	stw	r2,-60(fp)
 4003820:	003fdf06 	br	40037a0 <__reset+0xfb0027a0>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4003824:	0001883a 	nop
 4003828:	e037883a 	mov	sp,fp
 400382c:	dfc00117 	ldw	ra,4(sp)
 4003830:	df000017 	ldw	fp,0(sp)
 4003834:	dec00204 	addi	sp,sp,8
 4003838:	f800283a 	ret

0400383c <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 400383c:	defff804 	addi	sp,sp,-32
 4003840:	dfc00715 	stw	ra,28(sp)
 4003844:	df000615 	stw	fp,24(sp)
 4003848:	df000604 	addi	fp,sp,24
 400384c:	e13ffe15 	stw	r4,-8(fp)
 4003850:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4003854:	e0bffe17 	ldw	r2,-8(fp)
 4003858:	11000017 	ldw	r4,0(r2)
 400385c:	e0bffe17 	ldw	r2,-8(fp)
 4003860:	11400317 	ldw	r5,12(r2)
 4003864:	e0bffe17 	ldw	r2,-8(fp)
 4003868:	11800117 	ldw	r6,4(r2)
 400386c:	e0bffe17 	ldw	r2,-8(fp)
 4003870:	11c00417 	ldw	r7,16(r2)
 4003874:	e0bffe17 	ldw	r2,-8(fp)
 4003878:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
 400387c:	e0ffff17 	ldw	r3,-4(fp)
 4003880:	d8c00215 	stw	r3,8(sp)
 4003884:	d8800115 	stw	r2,4(sp)
 4003888:	00800044 	movi	r2,1
 400388c:	d8800015 	stw	r2,0(sp)
 4003890:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4003894:	e0bffe17 	ldw	r2,-8(fp)
 4003898:	11000117 	ldw	r4,4(r2)
 400389c:	e0bffe17 	ldw	r2,-8(fp)
 40038a0:	11400417 	ldw	r5,16(r2)
 40038a4:	e0bffe17 	ldw	r2,-8(fp)
 40038a8:	11800217 	ldw	r6,8(r2)
 40038ac:	e0bffe17 	ldw	r2,-8(fp)
 40038b0:	11c00517 	ldw	r7,20(r2)
 40038b4:	e0bffe17 	ldw	r2,-8(fp)
 40038b8:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
 40038bc:	e0ffff17 	ldw	r3,-4(fp)
 40038c0:	d8c00215 	stw	r3,8(sp)
 40038c4:	d8800115 	stw	r2,4(sp)
 40038c8:	00800044 	movi	r2,1
 40038cc:	d8800015 	stw	r2,0(sp)
 40038d0:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 40038d4:	e0bffe17 	ldw	r2,-8(fp)
 40038d8:	11000217 	ldw	r4,8(r2)
 40038dc:	e0bffe17 	ldw	r2,-8(fp)
 40038e0:	11400517 	ldw	r5,20(r2)
 40038e4:	e0bffe17 	ldw	r2,-8(fp)
 40038e8:	11800017 	ldw	r6,0(r2)
 40038ec:	e0bffe17 	ldw	r2,-8(fp)
 40038f0:	11c00317 	ldw	r7,12(r2)
 40038f4:	e0bffe17 	ldw	r2,-8(fp)
 40038f8:	10800a17 	ldw	r2,40(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
 40038fc:	e0ffff17 	ldw	r3,-4(fp)
 4003900:	d8c00215 	stw	r3,8(sp)
 4003904:	d8800115 	stw	r2,4(sp)
 4003908:	00800044 	movi	r2,1
 400390c:	d8800015 	stw	r2,0(sp)
 4003910:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4003914:	e0bffe17 	ldw	r2,-8(fp)
 4003918:	10800b17 	ldw	r2,44(r2)
 400391c:	10800058 	cmpnei	r2,r2,1
 4003920:	1000ad1e 	bne	r2,zero,4003bd8 <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x39c>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003924:	e0bffe17 	ldw	r2,-8(fp)
 4003928:	10c00317 	ldw	r3,12(r2)
 400392c:	e0bffe17 	ldw	r2,-8(fp)
 4003930:	11000417 	ldw	r4,16(r2)
 4003934:	e0bffe17 	ldw	r2,-8(fp)
 4003938:	10800517 	ldw	r2,20(r2)
 400393c:	100d883a 	mov	r6,r2
 4003940:	200b883a 	mov	r5,r4
 4003944:	1809883a 	mov	r4,r3
 4003948:	4003f300 	call	4003f30 <_Z4min3iii>
 400394c:	1007883a 	mov	r3,r2
 4003950:	e0bffe17 	ldw	r2,-8(fp)
 4003954:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003958:	e0bffe17 	ldw	r2,-8(fp)
 400395c:	10c00317 	ldw	r3,12(r2)
 4003960:	e0bffe17 	ldw	r2,-8(fp)
 4003964:	11000417 	ldw	r4,16(r2)
 4003968:	e0bffe17 	ldw	r2,-8(fp)
 400396c:	10800517 	ldw	r2,20(r2)
 4003970:	100d883a 	mov	r6,r2
 4003974:	200b883a 	mov	r5,r4
 4003978:	1809883a 	mov	r4,r3
 400397c:	4003edc0 	call	4003edc <_Z4max3iii>
 4003980:	1007883a 	mov	r3,r2
 4003984:	e0bffe17 	ldw	r2,-8(fp)
 4003988:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 400398c:	e0bffe17 	ldw	r2,-8(fp)
 4003990:	10c00317 	ldw	r3,12(r2)
 4003994:	e0bffe17 	ldw	r2,-8(fp)
 4003998:	11000417 	ldw	r4,16(r2)
 400399c:	e0bffe17 	ldw	r2,-8(fp)
 40039a0:	10800517 	ldw	r2,20(r2)
 40039a4:	100d883a 	mov	r6,r2
 40039a8:	200b883a 	mov	r5,r4
 40039ac:	1809883a 	mov	r4,r3
 40039b0:	4003f840 	call	4003f84 <_Z9max_diff3iii>
 40039b4:	1007883a 	mov	r3,r2
 40039b8:	e0bffe17 	ldw	r2,-8(fp)
 40039bc:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 40039c0:	e0bffe17 	ldw	r2,-8(fp)
 40039c4:	10c00017 	ldw	r3,0(r2)
 40039c8:	e0bffe17 	ldw	r2,-8(fp)
 40039cc:	11000117 	ldw	r4,4(r2)
 40039d0:	e0bffe17 	ldw	r2,-8(fp)
 40039d4:	10800217 	ldw	r2,8(r2)
 40039d8:	100d883a 	mov	r6,r2
 40039dc:	200b883a 	mov	r5,r4
 40039e0:	1809883a 	mov	r4,r3
 40039e4:	4003f840 	call	4003f84 <_Z9max_diff3iii>
 40039e8:	1007883a 	mov	r3,r2
 40039ec:	e0bffe17 	ldw	r2,-8(fp)
 40039f0:	10c00715 	stw	r3,28(r2)
    tri->span_array = (int *)malloc(display->height * 4 * 2);
 40039f4:	e0bfff17 	ldw	r2,-4(fp)
 40039f8:	10800617 	ldw	r2,24(r2)
 40039fc:	100490fa 	slli	r2,r2,3
 4003a00:	1009883a 	mov	r4,r2
 4003a04:	4011be00 	call	4011be0 <malloc>
 4003a08:	1007883a 	mov	r3,r2
 4003a0c:	e0bffe17 	ldw	r2,-8(fp)
 4003a10:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003a14:	e0bffe17 	ldw	r2,-8(fp)
 4003a18:	10800817 	ldw	r2,32(r2)
 4003a1c:	e0bffd15 	stw	r2,-12(fp)
 4003a20:	e0bffe17 	ldw	r2,-8(fp)
 4003a24:	10c00917 	ldw	r3,36(r2)
 4003a28:	e0bffd17 	ldw	r2,-12(fp)
 4003a2c:	18801316 	blt	r3,r2,4003a7c <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x240>
    {
      tri->span_array[i*2] = -1;
 4003a30:	e0bffe17 	ldw	r2,-8(fp)
 4003a34:	10800d17 	ldw	r2,52(r2)
 4003a38:	e0fffd17 	ldw	r3,-12(fp)
 4003a3c:	180690fa 	slli	r3,r3,3
 4003a40:	10c5883a 	add	r2,r2,r3
 4003a44:	00ffffc4 	movi	r3,-1
 4003a48:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 4003a4c:	e0bffe17 	ldw	r2,-8(fp)
 4003a50:	10c00d17 	ldw	r3,52(r2)
 4003a54:	e0bffd17 	ldw	r2,-12(fp)
 4003a58:	100490fa 	slli	r2,r2,3
 4003a5c:	10800104 	addi	r2,r2,4
 4003a60:	1885883a 	add	r2,r3,r2
 4003a64:	00ffffc4 	movi	r3,-1
 4003a68:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = (int *)malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003a6c:	e0bffd17 	ldw	r2,-12(fp)
 4003a70:	10800044 	addi	r2,r2,1
 4003a74:	e0bffd15 	stw	r2,-12(fp)
 4003a78:	003fe906 	br	4003a20 <__reset+0xfb002a20>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003a7c:	e0bffe17 	ldw	r2,-8(fp)
 4003a80:	10c00017 	ldw	r3,0(r2)
 4003a84:	e0bffe17 	ldw	r2,-8(fp)
 4003a88:	11000317 	ldw	r4,12(r2)
 4003a8c:	e0bffe17 	ldw	r2,-8(fp)
 4003a90:	11400117 	ldw	r5,4(r2)
 4003a94:	e0bffe17 	ldw	r2,-8(fp)
 4003a98:	11800417 	ldw	r6,16(r2)
 4003a9c:	e0bffe17 	ldw	r2,-8(fp)
 4003aa0:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 4003aa4:	d8800015 	stw	r2,0(sp)
 4003aa8:	300f883a 	mov	r7,r6
 4003aac:	280d883a 	mov	r6,r5
 4003ab0:	200b883a 	mov	r5,r4
 4003ab4:	1809883a 	mov	r4,r3
 4003ab8:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003abc:	e0bffe17 	ldw	r2,-8(fp)
 4003ac0:	10c00117 	ldw	r3,4(r2)
 4003ac4:	e0bffe17 	ldw	r2,-8(fp)
 4003ac8:	11000417 	ldw	r4,16(r2)
 4003acc:	e0bffe17 	ldw	r2,-8(fp)
 4003ad0:	11400217 	ldw	r5,8(r2)
 4003ad4:	e0bffe17 	ldw	r2,-8(fp)
 4003ad8:	11800517 	ldw	r6,20(r2)
 4003adc:	e0bffe17 	ldw	r2,-8(fp)
 4003ae0:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 4003ae4:	d8800015 	stw	r2,0(sp)
 4003ae8:	300f883a 	mov	r7,r6
 4003aec:	280d883a 	mov	r6,r5
 4003af0:	200b883a 	mov	r5,r4
 4003af4:	1809883a 	mov	r4,r3
 4003af8:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003afc:	e0bffe17 	ldw	r2,-8(fp)
 4003b00:	10c00217 	ldw	r3,8(r2)
 4003b04:	e0bffe17 	ldw	r2,-8(fp)
 4003b08:	11000517 	ldw	r4,20(r2)
 4003b0c:	e0bffe17 	ldw	r2,-8(fp)
 4003b10:	11400017 	ldw	r5,0(r2)
 4003b14:	e0bffe17 	ldw	r2,-8(fp)
 4003b18:	11800317 	ldw	r6,12(r2)
 4003b1c:	e0bffe17 	ldw	r2,-8(fp)
 4003b20:	10800d17 	ldw	r2,52(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 4003b24:	d8800015 	stw	r2,0(sp)
 4003b28:	300f883a 	mov	r7,r6
 4003b2c:	280d883a 	mov	r6,r5
 4003b30:	200b883a 	mov	r5,r4
 4003b34:	1809883a 	mov	r4,r3
 4003b38:	40035fc0 	call	40035fc <_Z19vid_bres_scan_edgesiiiiPi>
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003b3c:	e0bffe17 	ldw	r2,-8(fp)
 4003b40:	10800817 	ldw	r2,32(r2)
 4003b44:	e0bffd15 	stw	r2,-12(fp)
 4003b48:	e0bffe17 	ldw	r2,-8(fp)
 4003b4c:	10c00917 	ldw	r3,36(r2)
 4003b50:	e0bffd17 	ldw	r2,-12(fp)
 4003b54:	18801c16 	blt	r3,r2,4003bc8 <_Z17vid_draw_triangleP15triangle_structP16VIP_FRAME_READER+0x38c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4003b58:	e0bffe17 	ldw	r2,-8(fp)
 4003b5c:	10800d17 	ldw	r2,52(r2)
 4003b60:	e0fffd17 	ldw	r3,-12(fp)
 4003b64:	180690fa 	slli	r3,r3,3
 4003b68:	10c5883a 	add	r2,r2,r3
 4003b6c:	11000017 	ldw	r4,0(r2)
 4003b70:	e0bffe17 	ldw	r2,-8(fp)
 4003b74:	10c00d17 	ldw	r3,52(r2)
 4003b78:	e0bffd17 	ldw	r2,-12(fp)
 4003b7c:	100490fa 	slli	r2,r2,3
 4003b80:	10800104 	addi	r2,r2,4
 4003b84:	1885883a 	add	r2,r3,r2
 4003b88:	11400017 	ldw	r5,0(r2)
 4003b8c:	e0bffe17 	ldw	r2,-8(fp)
 4003b90:	10800a17 	ldw	r2,40(r2)
 4003b94:	e0ffff17 	ldw	r3,-4(fp)
 4003b98:	d8c00215 	stw	r3,8(sp)
 4003b9c:	d8800115 	stw	r2,4(sp)
 4003ba0:	00800044 	movi	r2,1
 4003ba4:	d8800015 	stw	r2,0(sp)
 4003ba8:	e1fffd17 	ldw	r7,-12(fp)
 4003bac:	280d883a 	mov	r6,r5
 4003bb0:	e17ffd17 	ldw	r5,-12(fp)
 4003bb4:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003bb8:	e0bffd17 	ldw	r2,-12(fp)
 4003bbc:	10800044 	addi	r2,r2,1
 4003bc0:	e0bffd15 	stw	r2,-12(fp)
 4003bc4:	003fe006 	br	4003b48 <__reset+0xfb002b48>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 4003bc8:	e0bffe17 	ldw	r2,-8(fp)
 4003bcc:	10800d17 	ldw	r2,52(r2)
 4003bd0:	1009883a 	mov	r4,r2
 4003bd4:	4011bf40 	call	4011bf4 <free>
  }
}
 4003bd8:	0001883a 	nop
 4003bdc:	e037883a 	mov	sp,fp
 4003be0:	dfc00117 	ldw	ra,4(sp)
 4003be4:	df000017 	ldw	fp,0(sp)
 4003be8:	dec00204 	addi	sp,sp,8
 4003bec:	f800283a 	ret

04003bf0 <_Z11CopyImage16PsS_ssss>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 4003bf0:	defff404 	addi	sp,sp,-48
 4003bf4:	dfc00b15 	stw	ra,44(sp)
 4003bf8:	df000a15 	stw	fp,40(sp)
 4003bfc:	df000a04 	addi	fp,sp,40
 4003c00:	e13ffa15 	stw	r4,-24(fp)
 4003c04:	e17ffb15 	stw	r5,-20(fp)
 4003c08:	300b883a 	mov	r5,r6
 4003c0c:	3809883a 	mov	r4,r7
 4003c10:	e0c00217 	ldw	r3,8(fp)
 4003c14:	e0800317 	ldw	r2,12(fp)
 4003c18:	e17ffc0d 	sth	r5,-16(fp)
 4003c1c:	e13ffd0d 	sth	r4,-12(fp)
 4003c20:	e0fffe0d 	sth	r3,-8(fp)
 4003c24:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 4003c28:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 4003c2c:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 4003c30:	e03ff615 	stw	zero,-40(fp)
 4003c34:	e03ff715 	stw	zero,-36(fp)
       y_src <= ( source_height  - 1 ); 
 4003c38:	e0bffd0f 	ldh	r2,-12(fp)
 4003c3c:	10ffffc4 	addi	r3,r2,-1
 4003c40:	e0bff617 	ldw	r2,-40(fp)
 4003c44:	18801f16 	blt	r3,r2,4003cc4 <_Z11CopyImage16PsS_ssss+0xd4>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003c48:	e0bff917 	ldw	r2,-28(fp)
 4003c4c:	1085883a 	add	r2,r2,r2
 4003c50:	1007883a 	mov	r3,r2
 4003c54:	e0bffb17 	ldw	r2,-20(fp)
 4003c58:	10c7883a 	add	r3,r2,r3
 4003c5c:	e0bff817 	ldw	r2,-32(fp)
 4003c60:	1085883a 	add	r2,r2,r2
 4003c64:	1009883a 	mov	r4,r2
 4003c68:	e0bffa17 	ldw	r2,-24(fp)
 4003c6c:	1109883a 	add	r4,r2,r4
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4003c70:	e0bffc0f 	ldh	r2,-16(fp)
 4003c74:	1085883a 	add	r2,r2,r2
 4003c78:	100d883a 	mov	r6,r2
 4003c7c:	200b883a 	mov	r5,r4
 4003c80:	1809883a 	mov	r4,r3
 4003c84:	40124140 	call	4012414 <memcpy>
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 4003c88:	e0bff617 	ldw	r2,-40(fp)
 4003c8c:	10800044 	addi	r2,r2,1
 4003c90:	e0bff615 	stw	r2,-40(fp)
 4003c94:	e0bff717 	ldw	r2,-36(fp)
 4003c98:	10800044 	addi	r2,r2,1
 4003c9c:	e0bff715 	stw	r2,-36(fp)
 4003ca0:	e0bffc0f 	ldh	r2,-16(fp)
 4003ca4:	e0fff817 	ldw	r3,-32(fp)
 4003ca8:	1885883a 	add	r2,r3,r2
 4003cac:	e0bff815 	stw	r2,-32(fp)
 4003cb0:	e0bffe0f 	ldh	r2,-8(fp)
 4003cb4:	e0fff917 	ldw	r3,-28(fp)
 4003cb8:	1885883a 	add	r2,r3,r2
 4003cbc:	e0bff915 	stw	r2,-28(fp)
 4003cc0:	003fdd06 	br	4003c38 <__reset+0xfb002c38>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 4003cc4:	0001883a 	nop
 4003cc8:	e037883a 	mov	sp,fp
 4003ccc:	dfc00117 	ldw	ra,4(sp)
 4003cd0:	df000017 	ldw	fp,0(sp)
 4003cd4:	dec00204 	addi	sp,sp,8
 4003cd8:	f800283a 	ret

04003cdc <_Z11CropImage16PsS_ssssssss>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 4003cdc:	defff004 	addi	sp,sp,-64
 4003ce0:	dfc00f15 	stw	ra,60(sp)
 4003ce4:	df000e15 	stw	fp,56(sp)
 4003ce8:	df000e04 	addi	fp,sp,56
 4003cec:	e13ff615 	stw	r4,-40(fp)
 4003cf0:	e17ff715 	stw	r5,-36(fp)
 4003cf4:	3013883a 	mov	r9,r6
 4003cf8:	3811883a 	mov	r8,r7
 4003cfc:	e1c00217 	ldw	r7,8(fp)
 4003d00:	e1800317 	ldw	r6,12(fp)
 4003d04:	e1400417 	ldw	r5,16(fp)
 4003d08:	e1000517 	ldw	r4,20(fp)
 4003d0c:	e0c00617 	ldw	r3,24(fp)
 4003d10:	e0800717 	ldw	r2,28(fp)
 4003d14:	e27ff80d 	sth	r9,-32(fp)
 4003d18:	e23ff90d 	sth	r8,-28(fp)
 4003d1c:	e1fffa0d 	sth	r7,-24(fp)
 4003d20:	e1bffb0d 	sth	r6,-20(fp)
 4003d24:	e17ffc0d 	sth	r5,-16(fp)
 4003d28:	e13ffd0d 	sth	r4,-12(fp)
 4003d2c:	e0fffe0d 	sth	r3,-8(fp)
 4003d30:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 4003d34:	e0fff80f 	ldh	r3,-32(fp)
 4003d38:	e0bffc0f 	ldh	r2,-16(fp)
 4003d3c:	1885383a 	mul	r2,r3,r2
 4003d40:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 4003d44:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4003d48:	e0bffc0f 	ldh	r2,-16(fp)
 4003d4c:	e0bff215 	stw	r2,-56(fp)
 4003d50:	e03ff315 	stw	zero,-52(fp)
       y_src <= ( source_height - crop_bottom - 1 ); 
 4003d54:	e0fff90f 	ldh	r3,-28(fp)
 4003d58:	e0bffd0f 	ldh	r2,-12(fp)
 4003d5c:	1885c83a 	sub	r2,r3,r2
 4003d60:	10ffffc4 	addi	r3,r2,-1
 4003d64:	e0bff217 	ldw	r2,-56(fp)
 4003d68:	18802316 	blt	r3,r2,4003df8 <_Z11CropImage16PsS_ssssssss+0x11c>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003d6c:	e0bff517 	ldw	r2,-44(fp)
 4003d70:	1085883a 	add	r2,r2,r2
 4003d74:	1007883a 	mov	r3,r2
 4003d78:	e0bff717 	ldw	r2,-36(fp)
 4003d7c:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 4003d80:	e0fffa0f 	ldh	r3,-24(fp)
 4003d84:	e0bff417 	ldw	r2,-48(fp)
 4003d88:	1885883a 	add	r2,r3,r2
 4003d8c:	1085883a 	add	r2,r2,r2
 4003d90:	1007883a 	mov	r3,r2
 4003d94:	e0bff617 	ldw	r2,-40(fp)
 4003d98:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 4003d9c:	e0fff80f 	ldh	r3,-32(fp)
 4003da0:	e0bffa0f 	ldh	r2,-24(fp)
 4003da4:	1887c83a 	sub	r3,r3,r2
 4003da8:	e0bffb0f 	ldh	r2,-20(fp)
 4003dac:	1885c83a 	sub	r2,r3,r2
 4003db0:	1085883a 	add	r2,r2,r2
 4003db4:	100d883a 	mov	r6,r2
 4003db8:	40124140 	call	4012414 <memcpy>
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 4003dbc:	e0bff217 	ldw	r2,-56(fp)
 4003dc0:	10800044 	addi	r2,r2,1
 4003dc4:	e0bff215 	stw	r2,-56(fp)
 4003dc8:	e0bff317 	ldw	r2,-52(fp)
 4003dcc:	10800044 	addi	r2,r2,1
 4003dd0:	e0bff315 	stw	r2,-52(fp)
 4003dd4:	e0bff80f 	ldh	r2,-32(fp)
 4003dd8:	e0fff417 	ldw	r3,-48(fp)
 4003ddc:	1885883a 	add	r2,r3,r2
 4003de0:	e0bff415 	stw	r2,-48(fp)
 4003de4:	e0bffe0f 	ldh	r2,-8(fp)
 4003de8:	e0fff517 	ldw	r3,-44(fp)
 4003dec:	1885883a 	add	r2,r3,r2
 4003df0:	e0bff515 	stw	r2,-44(fp)
 4003df4:	003fd706 	br	4003d54 <__reset+0xfb002d54>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 4003df8:	0001883a 	nop
 4003dfc:	e037883a 	mov	sp,fp
 4003e00:	dfc00117 	ldw	ra,4(sp)
 4003e04:	df000017 	ldw	fp,0(sp)
 4003e08:	dec00204 	addi	sp,sp,8
 4003e0c:	f800283a 	ret

04003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 4003e10:	defff704 	addi	sp,sp,-36
 4003e14:	dfc00815 	stw	ra,32(sp)
 4003e18:	df000715 	stw	fp,28(sp)
 4003e1c:	df000704 	addi	fp,sp,28
 4003e20:	e13ffc15 	stw	r4,-16(fp)
 4003e24:	e17ffd15 	stw	r5,-12(fp)
 4003e28:	e1bffe15 	stw	r6,-8(fp)
 4003e2c:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 4003e30:	e0fffd17 	ldw	r3,-12(fp)
 4003e34:	e0bfff17 	ldw	r2,-4(fp)
 4003e38:	1880121e 	bne	r3,r2,4003e84 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER+0x74>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4003e3c:	e0bffc17 	ldw	r2,-16(fp)
 4003e40:	10ffffcc 	andi	r3,r2,65535
 4003e44:	18e0001c 	xori	r3,r3,32768
 4003e48:	18e00004 	addi	r3,r3,-32768
 4003e4c:	e0bffe17 	ldw	r2,-8(fp)
 4003e50:	113fffcc 	andi	r4,r2,65535
 4003e54:	2120001c 	xori	r4,r4,32768
 4003e58:	21200004 	addi	r4,r4,-32768
 4003e5c:	e0bffd17 	ldw	r2,-12(fp)
 4003e60:	117fffcc 	andi	r5,r2,65535
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
                         color,
                         display );
 4003e64:	e0800417 	ldw	r2,16(fp)
 4003e68:	d8800015 	stw	r2,0(sp)
 4003e6c:	e1c00317 	ldw	r7,12(fp)
 4003e70:	280d883a 	mov	r6,r5
 4003e74:	200b883a 	mov	r5,r4
 4003e78:	1809883a 	mov	r4,r3
 4003e7c:	400206c0 	call	400206c <_Z19vid_draw_horiz_linessiiP16VIP_FRAME_READER>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4003e80:	00001006 	br	4003ec4 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER+0xb4>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4003e84:	e0bffc17 	ldw	r2,-16(fp)
 4003e88:	113fffcc 	andi	r4,r2,65535
 4003e8c:	e0bffd17 	ldw	r2,-12(fp)
 4003e90:	117fffcc 	andi	r5,r2,65535
 4003e94:	e0bffe17 	ldw	r2,-8(fp)
 4003e98:	11bfffcc 	andi	r6,r2,65535
 4003e9c:	e0bfff17 	ldw	r2,-4(fp)
 4003ea0:	11ffffcc 	andi	r7,r2,65535
 4003ea4:	e0800217 	ldw	r2,8(fp)
 4003ea8:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
 4003eac:	e0c00417 	ldw	r3,16(fp)
 4003eb0:	d8c00215 	stw	r3,8(sp)
 4003eb4:	e0c00317 	ldw	r3,12(fp)
 4003eb8:	d8c00115 	stw	r3,4(sp)
 4003ebc:	d8800015 	stw	r2,0(sp)
 4003ec0:	400274c0 	call	400274c <_Z20vid_draw_sloped_linetttttiP16VIP_FRAME_READER>
  }
}
 4003ec4:	0001883a 	nop
 4003ec8:	e037883a 	mov	sp,fp
 4003ecc:	dfc00117 	ldw	ra,4(sp)
 4003ed0:	df000017 	ldw	fp,0(sp)
 4003ed4:	dec00204 	addi	sp,sp,8
 4003ed8:	f800283a 	ret

04003edc <_Z4max3iii>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 4003edc:	defffc04 	addi	sp,sp,-16
 4003ee0:	df000315 	stw	fp,12(sp)
 4003ee4:	df000304 	addi	fp,sp,12
 4003ee8:	e13ffd15 	stw	r4,-12(fp)
 4003eec:	e17ffe15 	stw	r5,-8(fp)
 4003ef0:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4003ef4:	e0fffd17 	ldw	r3,-12(fp)
 4003ef8:	e0bffe17 	ldw	r2,-8(fp)
 4003efc:	1880020e 	bge	r3,r2,4003f08 <_Z4max3iii+0x2c>
    a = b;
 4003f00:	e0bffe17 	ldw	r2,-8(fp)
 4003f04:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4003f08:	e0fffd17 	ldw	r3,-12(fp)
 4003f0c:	e0bfff17 	ldw	r2,-4(fp)
 4003f10:	1880020e 	bge	r3,r2,4003f1c <_Z4max3iii+0x40>
    a = c;
 4003f14:	e0bfff17 	ldw	r2,-4(fp)
 4003f18:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4003f1c:	e0bffd17 	ldw	r2,-12(fp)
}
 4003f20:	e037883a 	mov	sp,fp
 4003f24:	df000017 	ldw	fp,0(sp)
 4003f28:	dec00104 	addi	sp,sp,4
 4003f2c:	f800283a 	ret

04003f30 <_Z4min3iii>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 4003f30:	defffc04 	addi	sp,sp,-16
 4003f34:	df000315 	stw	fp,12(sp)
 4003f38:	df000304 	addi	fp,sp,12
 4003f3c:	e13ffd15 	stw	r4,-12(fp)
 4003f40:	e17ffe15 	stw	r5,-8(fp)
 4003f44:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4003f48:	e0bffd17 	ldw	r2,-12(fp)
 4003f4c:	e0fffe17 	ldw	r3,-8(fp)
 4003f50:	1880020e 	bge	r3,r2,4003f5c <_Z4min3iii+0x2c>
    a = b;
 4003f54:	e0bffe17 	ldw	r2,-8(fp)
 4003f58:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4003f5c:	e0bffd17 	ldw	r2,-12(fp)
 4003f60:	e0ffff17 	ldw	r3,-4(fp)
 4003f64:	1880020e 	bge	r3,r2,4003f70 <_Z4min3iii+0x40>
    a = c;
 4003f68:	e0bfff17 	ldw	r2,-4(fp)
 4003f6c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4003f70:	e0bffd17 	ldw	r2,-12(fp)
}
 4003f74:	e037883a 	mov	sp,fp
 4003f78:	df000017 	ldw	fp,0(sp)
 4003f7c:	dec00104 	addi	sp,sp,4
 4003f80:	f800283a 	ret

04003f84 <_Z9max_diff3iii>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 4003f84:	defff904 	addi	sp,sp,-28
 4003f88:	dfc00615 	stw	ra,24(sp)
 4003f8c:	df000515 	stw	fp,20(sp)
 4003f90:	df000504 	addi	fp,sp,20
 4003f94:	e13ffd15 	stw	r4,-12(fp)
 4003f98:	e17ffe15 	stw	r5,-8(fp)
 4003f9c:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4003fa0:	e1bfff17 	ldw	r6,-4(fp)
 4003fa4:	e17ffe17 	ldw	r5,-8(fp)
 4003fa8:	e13ffd17 	ldw	r4,-12(fp)
 4003fac:	4003edc0 	call	4003edc <_Z4max3iii>
 4003fb0:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4003fb4:	e1bfff17 	ldw	r6,-4(fp)
 4003fb8:	e17ffe17 	ldw	r5,-8(fp)
 4003fbc:	e13ffd17 	ldw	r4,-12(fp)
 4003fc0:	4003f300 	call	4003f30 <_Z4min3iii>
 4003fc4:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4003fc8:	e0fffb17 	ldw	r3,-20(fp)
 4003fcc:	e0bffc17 	ldw	r2,-16(fp)
 4003fd0:	1885c83a 	sub	r2,r3,r2
}
 4003fd4:	e037883a 	mov	sp,fp
 4003fd8:	dfc00117 	ldw	ra,4(sp)
 4003fdc:	df000017 	ldw	fp,0(sp)
 4003fe0:	dec00204 	addi	sp,sp,8
 4003fe4:	f800283a 	ret

04003fe8 <_Z25vid_put_pixel_in_span_mapiiPi>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4003fe8:	defffc04 	addi	sp,sp,-16
 4003fec:	df000315 	stw	fp,12(sp)
 4003ff0:	df000304 	addi	fp,sp,12
 4003ff4:	e13ffd15 	stw	r4,-12(fp)
 4003ff8:	e17ffe15 	stw	r5,-8(fp)
 4003ffc:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4004000:	e0bffe17 	ldw	r2,-8(fp)
 4004004:	100490fa 	slli	r2,r2,3
 4004008:	1007883a 	mov	r3,r2
 400400c:	e0bfff17 	ldw	r2,-4(fp)
 4004010:	10c5883a 	add	r2,r2,r3
 4004014:	10800017 	ldw	r2,0(r2)
 4004018:	10bfffd8 	cmpnei	r2,r2,-1
 400401c:	10000f1e 	bne	r2,zero,400405c <_Z25vid_put_pixel_in_span_mapiiPi+0x74>
  {
    span_array[y*2] = x;
 4004020:	e0bffe17 	ldw	r2,-8(fp)
 4004024:	100490fa 	slli	r2,r2,3
 4004028:	1007883a 	mov	r3,r2
 400402c:	e0bfff17 	ldw	r2,-4(fp)
 4004030:	10c5883a 	add	r2,r2,r3
 4004034:	e0fffd17 	ldw	r3,-12(fp)
 4004038:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 400403c:	e0bffe17 	ldw	r2,-8(fp)
 4004040:	100490fa 	slli	r2,r2,3
 4004044:	10800104 	addi	r2,r2,4
 4004048:	e0ffff17 	ldw	r3,-4(fp)
 400404c:	1885883a 	add	r2,r3,r2
 4004050:	e0fffd17 	ldw	r3,-12(fp)
 4004054:	10c00015 	stw	r3,0(r2)
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4004058:	00001f06 	br	40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
  if (span_array[y*2] == -1)
  {
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
 400405c:	e0bffe17 	ldw	r2,-8(fp)
 4004060:	100490fa 	slli	r2,r2,3
 4004064:	1007883a 	mov	r3,r2
 4004068:	e0bfff17 	ldw	r2,-4(fp)
 400406c:	10c5883a 	add	r2,r2,r3
 4004070:	10800017 	ldw	r2,0(r2)
 4004074:	e0fffd17 	ldw	r3,-12(fp)
 4004078:	1880080e 	bge	r3,r2,400409c <_Z25vid_put_pixel_in_span_mapiiPi+0xb4>
    span_array[y*2] = x;
 400407c:	e0bffe17 	ldw	r2,-8(fp)
 4004080:	100490fa 	slli	r2,r2,3
 4004084:	1007883a 	mov	r3,r2
 4004088:	e0bfff17 	ldw	r2,-4(fp)
 400408c:	10c5883a 	add	r2,r2,r3
 4004090:	e0fffd17 	ldw	r3,-12(fp)
 4004094:	10c00015 	stw	r3,0(r2)
  else if( span_array[(y*2)+1] < x )
    span_array[(y*2)+1] = x;
}
 4004098:	00000f06 	br	40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
    span_array[y*2] = x;
    span_array[(y*2)+1] = x;
  }
  else if( span_array[y*2] > x )
    span_array[y*2] = x;
  else if( span_array[(y*2)+1] < x )
 400409c:	e0bffe17 	ldw	r2,-8(fp)
 40040a0:	100490fa 	slli	r2,r2,3
 40040a4:	10800104 	addi	r2,r2,4
 40040a8:	e0ffff17 	ldw	r3,-4(fp)
 40040ac:	1885883a 	add	r2,r3,r2
 40040b0:	10c00017 	ldw	r3,0(r2)
 40040b4:	e0bffd17 	ldw	r2,-12(fp)
 40040b8:	1880070e 	bge	r3,r2,40040d8 <_Z25vid_put_pixel_in_span_mapiiPi+0xf0>
    span_array[(y*2)+1] = x;
 40040bc:	e0bffe17 	ldw	r2,-8(fp)
 40040c0:	100490fa 	slli	r2,r2,3
 40040c4:	10800104 	addi	r2,r2,4
 40040c8:	e0ffff17 	ldw	r3,-4(fp)
 40040cc:	1885883a 	add	r2,r3,r2
 40040d0:	e0fffd17 	ldw	r3,-12(fp)
 40040d4:	10c00015 	stw	r3,0(r2)
}
 40040d8:	0001883a 	nop
 40040dc:	e037883a 	mov	sp,fp
 40040e0:	df000017 	ldw	fp,0(sp)
 40040e4:	dec00104 	addi	sp,sp,4
 40040e8:	f800283a 	ret

040040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 40040ec:	defff404 	addi	sp,sp,-48
 40040f0:	dfc00b15 	stw	ra,44(sp)
 40040f4:	df000a15 	stw	fp,40(sp)
 40040f8:	df000a04 	addi	fp,sp,40
 40040fc:	e13ffc15 	stw	r4,-16(fp)
 4004100:	e17ffd15 	stw	r5,-12(fp)
 4004104:	e1bffe15 	stw	r6,-8(fp)
 4004108:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 400410c:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4004110:	e0bffc17 	ldw	r2,-16(fp)
 4004114:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4004118:	e0bff917 	ldw	r2,-28(fp)
 400411c:	e0c00417 	ldw	r3,16(fp)
 4004120:	1885883a 	add	r2,r3,r2
 4004124:	10800003 	ldbu	r2,0(r2)
 4004128:	10803fcc 	andi	r2,r2,255
 400412c:	1080201c 	xori	r2,r2,128
 4004130:	10bfe004 	addi	r2,r2,-128
 4004134:	10007f26 	beq	r2,zero,4004334 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x248>
    //Handle newline char here.
    if (string[i] == '\n') {
 4004138:	e0bff917 	ldw	r2,-28(fp)
 400413c:	e0c00417 	ldw	r3,16(fp)
 4004140:	1885883a 	add	r2,r3,r2
 4004144:	10800003 	ldbu	r2,0(r2)
 4004148:	10803fcc 	andi	r2,r2,255
 400414c:	1080201c 	xori	r2,r2,128
 4004150:	10bfe004 	addi	r2,r2,-128
 4004154:	10800298 	cmpnei	r2,r2,10
 4004158:	10000c1e 	bne	r2,zero,400418c <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0xa0>
      horiz_offset = original_horiz_offset;
 400415c:	e0bffb17 	ldw	r2,-20(fp)
 4004160:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 4004164:	e0800217 	ldw	r2,8(fp)
 4004168:	1082d804 	addi	r2,r2,2912
 400416c:	10c00517 	ldw	r3,20(r2)
 4004170:	e0bffd17 	ldw	r2,-12(fp)
 4004174:	1885883a 	add	r2,r3,r2
 4004178:	e0bffd15 	stw	r2,-12(fp)
      i++;
 400417c:	e0bff917 	ldw	r2,-28(fp)
 4004180:	10800044 	addi	r2,r2,1
 4004184:	e0bff915 	stw	r2,-28(fp)
      continue;
 4004188:	00006906 	br	4004330 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x244>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 400418c:	e0bff917 	ldw	r2,-28(fp)
 4004190:	e0c00417 	ldw	r3,16(fp)
 4004194:	1885883a 	add	r2,r3,r2
 4004198:	10800003 	ldbu	r2,0(r2)
 400419c:	10803fcc 	andi	r2,r2,255
 40041a0:	1080201c 	xori	r2,r2,128
 40041a4:	10bfe004 	addi	r2,r2,-128
 40041a8:	10800818 	cmpnei	r2,r2,32
 40041ac:	1000151e 	bne	r2,zero,4004204 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x118>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40041b0:	e0bfff17 	ldw	r2,-4(fp)
 40041b4:	10bfffe0 	cmpeqi	r2,r2,-1
 40041b8:	10000b1e 	bne	r2,zero,40041e8 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0xfc>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40041bc:	e0800317 	ldw	r2,12(fp)
 40041c0:	d8800215 	stw	r2,8(sp)
 40041c4:	e0800217 	ldw	r2,8(fp)
 40041c8:	d8800115 	stw	r2,4(sp)
 40041cc:	e0bfff17 	ldw	r2,-4(fp)
 40041d0:	d8800015 	stw	r2,0(sp)
 40041d4:	01c00b44 	movi	r7,45
 40041d8:	e1bfff17 	ldw	r6,-4(fp)
 40041dc:	e17ffd17 	ldw	r5,-12(fp)
 40041e0:	e13ffc17 	ldw	r4,-16(fp)
 40041e4:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40041e8:	e0800217 	ldw	r2,8(fp)
 40041ec:	10806004 	addi	r2,r2,384
 40041f0:	10c00417 	ldw	r3,16(r2)
 40041f4:	e0bffc17 	ldw	r2,-16(fp)
 40041f8:	1885883a 	add	r2,r3,r2
 40041fc:	e0bffc15 	stw	r2,-16(fp)
 4004200:	00004806 	br	4004324 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x238>
    }
    else if(string[i] == '\t')  // this is a tab
 4004204:	e0bff917 	ldw	r2,-28(fp)
 4004208:	e0c00417 	ldw	r3,16(fp)
 400420c:	1885883a 	add	r2,r3,r2
 4004210:	10800003 	ldbu	r2,0(r2)
 4004214:	10803fcc 	andi	r2,r2,255
 4004218:	1080201c 	xori	r2,r2,128
 400421c:	10bfe004 	addi	r2,r2,-128
 4004220:	10800258 	cmpnei	r2,r2,9
 4004224:	10001c1e 	bne	r2,zero,4004298 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x1ac>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4004228:	e03ffa15 	stw	zero,-24(fp)
 400422c:	e0bffa17 	ldw	r2,-24(fp)
 4004230:	10800088 	cmpgei	r2,r2,2
 4004234:	10003b1e 	bne	r2,zero,4004324 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x238>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4004238:	e0bfff17 	ldw	r2,-4(fp)
 400423c:	10bfffe0 	cmpeqi	r2,r2,-1
 4004240:	10000b1e 	bne	r2,zero,4004270 <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc+0x184>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4004244:	e0800317 	ldw	r2,12(fp)
 4004248:	d8800215 	stw	r2,8(sp)
 400424c:	e0800217 	ldw	r2,8(fp)
 4004250:	d8800115 	stw	r2,4(sp)
 4004254:	e0bfff17 	ldw	r2,-4(fp)
 4004258:	d8800015 	stw	r2,0(sp)
 400425c:	01c00b44 	movi	r7,45
 4004260:	e1bfff17 	ldw	r6,-4(fp)
 4004264:	e17ffd17 	ldw	r5,-12(fp)
 4004268:	e13ffc17 	ldw	r4,-16(fp)
 400426c:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4004270:	e0800217 	ldw	r2,8(fp)
 4004274:	10806004 	addi	r2,r2,384
 4004278:	10c00417 	ldw	r3,16(r2)
 400427c:	e0bffc17 	ldw	r2,-16(fp)
 4004280:	1885883a 	add	r2,r3,r2
 4004284:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4004288:	e0bffa17 	ldw	r2,-24(fp)
 400428c:	10800044 	addi	r2,r2,1
 4004290:	e0bffa15 	stw	r2,-24(fp)
 4004294:	003fe506 	br	400422c <__reset+0xfb00322c>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 4004298:	e0bff917 	ldw	r2,-28(fp)
 400429c:	e0c00417 	ldw	r3,16(fp)
 40042a0:	1885883a 	add	r2,r3,r2
 40042a4:	10800003 	ldbu	r2,0(r2)
 40042a8:	10c03fcc 	andi	r3,r2,255
 40042ac:	18c0201c 	xori	r3,r3,128
 40042b0:	18ffe004 	addi	r3,r3,-128
 40042b4:	e0800317 	ldw	r2,12(fp)
 40042b8:	d8800215 	stw	r2,8(sp)
 40042bc:	e0800217 	ldw	r2,8(fp)
 40042c0:	d8800115 	stw	r2,4(sp)
 40042c4:	e0bfff17 	ldw	r2,-4(fp)
 40042c8:	d8800015 	stw	r2,0(sp)
 40042cc:	180f883a 	mov	r7,r3
 40042d0:	e1bffe17 	ldw	r6,-8(fp)
 40042d4:	e17ffd17 	ldw	r5,-12(fp)
 40042d8:	e13ffc17 	ldw	r4,-16(fp)
 40042dc:	400434c0 	call	400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>
      horiz_offset += font[string[i] - 33].bounds_width;
 40042e0:	e0bff917 	ldw	r2,-28(fp)
 40042e4:	e0c00417 	ldw	r3,16(fp)
 40042e8:	1885883a 	add	r2,r3,r2
 40042ec:	10800003 	ldbu	r2,0(r2)
 40042f0:	10c03fcc 	andi	r3,r2,255
 40042f4:	18c0201c 	xori	r3,r3,128
 40042f8:	18ffe004 	addi	r3,r3,-128
 40042fc:	00820034 	movhi	r2,2048
 4004300:	10bff7c4 	addi	r2,r2,-33
 4004304:	1885883a 	add	r2,r3,r2
 4004308:	1004917a 	slli	r2,r2,5
 400430c:	e0c00217 	ldw	r3,8(fp)
 4004310:	1885883a 	add	r2,r3,r2
 4004314:	10c00417 	ldw	r3,16(r2)
 4004318:	e0bffc17 	ldw	r2,-16(fp)
 400431c:	1885883a 	add	r2,r3,r2
 4004320:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4004324:	e0bff917 	ldw	r2,-28(fp)
 4004328:	10800044 	addi	r2,r2,1
 400432c:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4004330:	003f7906 	br	4004118 <__reset+0xfb003118>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4004334:	0005883a 	mov	r2,zero
}
 4004338:	e037883a 	mov	sp,fp
 400433c:	dfc00117 	ldw	ra,4(sp)
 4004340:	df000017 	ldw	fp,0(sp)
 4004344:	dec00204 	addi	sp,sp,8
 4004348:	f800283a 	ret

0400434c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 400434c:	defff004 	addi	sp,sp,-64
 4004350:	dfc00f15 	stw	ra,60(sp)
 4004354:	df000e15 	stw	fp,56(sp)
 4004358:	df000e04 	addi	fp,sp,56
 400435c:	e13ffc15 	stw	r4,-16(fp)
 4004360:	e17ffd15 	stw	r5,-12(fp)
 4004364:	e1bffe15 	stw	r6,-8(fp)
 4004368:	3805883a 	mov	r2,r7
 400436c:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4004370:	e0ffff07 	ldb	r3,-4(fp)
 4004374:	00820034 	movhi	r2,2048
 4004378:	10bff7c4 	addi	r2,r2,-33
 400437c:	1885883a 	add	r2,r3,r2
 4004380:	1004917a 	slli	r2,r2,5
 4004384:	e0c00317 	ldw	r3,12(fp)
 4004388:	1885883a 	add	r2,r3,r2
 400438c:	10800617 	ldw	r2,24(r2)
 4004390:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);
 4004394:	e0800417 	ldw	r2,16(fp)
 4004398:	10c00417 	ldw	r3,16(r2)
 400439c:	e1bff984 	addi	r6,fp,-26
 40043a0:	e17ff904 	addi	r5,fp,-28
 40043a4:	e13ffe04 	addi	r4,fp,-8
 40043a8:	e0bff944 	addi	r2,fp,-27
 40043ac:	d8800015 	stw	r2,0(sp)
 40043b0:	300f883a 	mov	r7,r6
 40043b4:	280d883a 	mov	r6,r5
 40043b8:	200b883a 	mov	r5,r4
 40043bc:	1809883a 	mov	r4,r3
 40043c0:	400461c0 	call	400461c <_Z23seperate_color_channelsiPhS_S_S_>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 40043c4:	e03ff615 	stw	zero,-40(fp)
 40043c8:	e0ffff07 	ldb	r3,-4(fp)
 40043cc:	00820034 	movhi	r2,2048
 40043d0:	10bff7c4 	addi	r2,r2,-33
 40043d4:	1885883a 	add	r2,r3,r2
 40043d8:	1004917a 	slli	r2,r2,5
 40043dc:	e0c00317 	ldw	r3,12(fp)
 40043e0:	1885883a 	add	r2,r3,r2
 40043e4:	10800517 	ldw	r2,20(r2)
 40043e8:	e0fff617 	ldw	r3,-40(fp)
 40043ec:	18804b2e 	bgeu	r3,r2,400451c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER+0x1d0>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 40043f0:	e03ff715 	stw	zero,-36(fp)
 40043f4:	e0ffff07 	ldb	r3,-4(fp)
 40043f8:	00820034 	movhi	r2,2048
 40043fc:	10bff7c4 	addi	r2,r2,-33
 4004400:	1885883a 	add	r2,r3,r2
 4004404:	1004917a 	slli	r2,r2,5
 4004408:	e0c00317 	ldw	r3,12(fp)
 400440c:	1885883a 	add	r2,r3,r2
 4004410:	10800417 	ldw	r2,16(r2)
 4004414:	e0fff717 	ldw	r3,-36(fp)
 4004418:	18803c2e 	bgeu	r3,r2,400450c <_Z20vid_print_char_alphaiiiciP15abc_font_structP16VIP_FRAME_READER+0x1c0>
      red = original_red;
 400441c:	e0bff903 	ldbu	r2,-28(fp)
 4004420:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4004424:	e0bff983 	ldbu	r2,-26(fp)
 4004428:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 400442c:	e0bff943 	ldbu	r2,-27(fp)
 4004430:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4004434:	e0fffc17 	ldw	r3,-16(fp)
 4004438:	e0bff717 	ldw	r2,-36(fp)
 400443c:	1889883a 	add	r4,r3,r2
 4004440:	e0fffd17 	ldw	r3,-12(fp)
 4004444:	e0bff617 	ldw	r2,-40(fp)
 4004448:	1887883a 	add	r3,r3,r2
 400444c:	e0bff817 	ldw	r2,-32(fp)
 4004450:	10800003 	ldbu	r2,0(r2)
 4004454:	11403fcc 	andi	r5,r2,255
 4004458:	e0800417 	ldw	r2,16(fp)
 400445c:	d8800315 	stw	r2,12(sp)
 4004460:	e0bffa44 	addi	r2,fp,-23
 4004464:	d8800215 	stw	r2,8(sp)
 4004468:	e0bffa04 	addi	r2,fp,-24
 400446c:	d8800115 	stw	r2,4(sp)
 4004470:	e0bff9c4 	addi	r2,fp,-25
 4004474:	d8800015 	stw	r2,0(sp)
 4004478:	280f883a 	mov	r7,r5
 400447c:	e1800217 	ldw	r6,8(fp)
 4004480:	180b883a 	mov	r5,r3
 4004484:	4004abc0 	call	4004abc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (unsigned char *)&new_color);
 4004488:	e0800417 	ldw	r2,16(fp)
 400448c:	10c00417 	ldw	r3,16(r2)
 4004490:	e0bff9c3 	ldbu	r2,-25(fp)
 4004494:	11003fcc 	andi	r4,r2,255
 4004498:	e0bffa03 	ldbu	r2,-24(fp)
 400449c:	11403fcc 	andi	r5,r2,255
 40044a0:	e0bffa43 	ldbu	r2,-23(fp)
 40044a4:	11803fcc 	andi	r6,r2,255
 40044a8:	e0bffb04 	addi	r2,fp,-20
 40044ac:	d8800015 	stw	r2,0(sp)
 40044b0:	300f883a 	mov	r7,r6
 40044b4:	280d883a 	mov	r6,r5
 40044b8:	200b883a 	mov	r5,r4
 40044bc:	1809883a 	mov	r4,r3
 40044c0:	40047600 	call	4004760 <_Z20merge_color_channelsihhhPh>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 40044c4:	e0fffc17 	ldw	r3,-16(fp)
 40044c8:	e0bff717 	ldw	r2,-36(fp)
 40044cc:	1889883a 	add	r4,r3,r2
 40044d0:	e0fffd17 	ldw	r3,-12(fp)
 40044d4:	e0bff617 	ldw	r2,-40(fp)
 40044d8:	1885883a 	add	r2,r3,r2
 40044dc:	e0fffb17 	ldw	r3,-20(fp)
 40044e0:	e1c00417 	ldw	r7,16(fp)
 40044e4:	180d883a 	mov	r6,r3
 40044e8:	100b883a 	mov	r5,r2
 40044ec:	4001c300 	call	4001c30 <_Z13vid_set_pixeliijP16VIP_FRAME_READER>

      alpha++;
 40044f0:	e0bff817 	ldw	r2,-32(fp)
 40044f4:	10800044 	addi	r2,r2,1
 40044f8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 40044fc:	e0bff717 	ldw	r2,-36(fp)
 4004500:	10800044 	addi	r2,r2,1
 4004504:	e0bff715 	stw	r2,-36(fp)
 4004508:	003fba06 	br	40043f4 <__reset+0xfb0033f4>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (unsigned char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 400450c:	e0bff617 	ldw	r2,-40(fp)
 4004510:	10800044 	addi	r2,r2,1
 4004514:	e0bff615 	stw	r2,-40(fp)
 4004518:	003fab06 	br	40043c8 <__reset+0xfb0033c8>

      alpha++;
    }
  }

  return(0);
 400451c:	0005883a 	mov	r2,zero
}
 4004520:	e037883a 	mov	sp,fp
 4004524:	dfc00117 	ldw	ra,4(sp)
 4004528:	df000017 	ldw	fp,0(sp)
 400452c:	dec00204 	addi	sp,sp,8
 4004530:	f800283a 	ret

04004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4004534:	defffb04 	addi	sp,sp,-20
 4004538:	df000415 	stw	fp,16(sp)
 400453c:	df000404 	addi	fp,sp,16
 4004540:	e13ffe15 	stw	r4,-8(fp)
 4004544:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4004548:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 400454c:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004550:	e03ffc15 	stw	zero,-16(fp)
 4004554:	e0bffc17 	ldw	r2,-16(fp)
 4004558:	e0ffff17 	ldw	r3,-4(fp)
 400455c:	1885883a 	add	r2,r3,r2
 4004560:	10800003 	ldbu	r2,0(r2)
 4004564:	10803fcc 	andi	r2,r2,255
 4004568:	1080201c 	xori	r2,r2,128
 400456c:	10bfe004 	addi	r2,r2,-128
 4004570:	10002526 	beq	r2,zero,4004608 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0xd4>
  {
    if( string[i] == ' ' )
 4004574:	e0bffc17 	ldw	r2,-16(fp)
 4004578:	e0ffff17 	ldw	r3,-4(fp)
 400457c:	1885883a 	add	r2,r3,r2
 4004580:	10800003 	ldbu	r2,0(r2)
 4004584:	10803fcc 	andi	r2,r2,255
 4004588:	1080201c 	xori	r2,r2,128
 400458c:	10bfe004 	addi	r2,r2,-128
 4004590:	10800818 	cmpnei	r2,r2,32
 4004594:	1000071e 	bne	r2,zero,40045b4 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0x80>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 4004598:	e0bffe17 	ldw	r2,-8(fp)
 400459c:	10806004 	addi	r2,r2,384
 40045a0:	10c00417 	ldw	r3,16(r2)
 40045a4:	e0bffd17 	ldw	r2,-12(fp)
 40045a8:	1885883a 	add	r2,r3,r2
 40045ac:	e0bffd15 	stw	r2,-12(fp)
 40045b0:	00001106 	br	40045f8 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc+0xc4>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 40045b4:	e0bffc17 	ldw	r2,-16(fp)
 40045b8:	e0ffff17 	ldw	r3,-4(fp)
 40045bc:	1885883a 	add	r2,r3,r2
 40045c0:	10800003 	ldbu	r2,0(r2)
 40045c4:	10c03fcc 	andi	r3,r2,255
 40045c8:	18c0201c 	xori	r3,r3,128
 40045cc:	18ffe004 	addi	r3,r3,-128
 40045d0:	00820034 	movhi	r2,2048
 40045d4:	10bff7c4 	addi	r2,r2,-33
 40045d8:	1885883a 	add	r2,r3,r2
 40045dc:	1004917a 	slli	r2,r2,5
 40045e0:	e0fffe17 	ldw	r3,-8(fp)
 40045e4:	1885883a 	add	r2,r3,r2
 40045e8:	10c00417 	ldw	r3,16(r2)
 40045ec:	e0bffd17 	ldw	r2,-12(fp)
 40045f0:	1885883a 	add	r2,r3,r2
 40045f4:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 40045f8:	e0bffc17 	ldw	r2,-16(fp)
 40045fc:	10800044 	addi	r2,r2,1
 4004600:	e0bffc15 	stw	r2,-16(fp)
 4004604:	003fd306 	br	4004554 <__reset+0xfb003554>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4004608:	e0bffd17 	ldw	r2,-12(fp)
}
 400460c:	e037883a 	mov	sp,fp
 4004610:	df000017 	ldw	fp,0(sp)
 4004614:	dec00104 	addi	sp,sp,4
 4004618:	f800283a 	ret

0400461c <_Z23seperate_color_channelsiPhS_S_S_>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 400461c:	defff904 	addi	sp,sp,-28
 4004620:	df000615 	stw	fp,24(sp)
 4004624:	df000604 	addi	fp,sp,24
 4004628:	e13ffc15 	stw	r4,-16(fp)
 400462c:	e17ffd15 	stw	r5,-12(fp)
 4004630:	e1bffe15 	stw	r6,-8(fp)
 4004634:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4004638:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 400463c:	e0bffc17 	ldw	r2,-16(fp)
 4004640:	10800418 	cmpnei	r2,r2,16
 4004644:	1000211e 	bne	r2,zero,40046cc <_Z23seperate_color_channelsiPhS_S_S_+0xb0>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4004648:	e0bffd17 	ldw	r2,-12(fp)
 400464c:	10c00044 	addi	r3,r2,1
 4004650:	e0fffd15 	stw	r3,-12(fp)
 4004654:	10800003 	ldbu	r2,0(r2)
 4004658:	10803fcc 	andi	r2,r2,255
 400465c:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 4004660:	e0bffd17 	ldw	r2,-12(fp)
 4004664:	10800003 	ldbu	r2,0(r2)
 4004668:	10803fcc 	andi	r2,r2,255
 400466c:	1004923a 	slli	r2,r2,8
 4004670:	1007883a 	mov	r3,r2
 4004674:	e0bffb0b 	ldhu	r2,-20(fp)
 4004678:	1885883a 	add	r2,r3,r2
 400467c:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 4004680:	e0bffb0b 	ldhu	r2,-20(fp)
 4004684:	108007cc 	andi	r2,r2,31
 4004688:	1007883a 	mov	r3,r2
 400468c:	e0800117 	ldw	r2,4(fp)
 4004690:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 4004694:	e0bffb0b 	ldhu	r2,-20(fp)
 4004698:	1005d17a 	srai	r2,r2,5
 400469c:	10800fcc 	andi	r2,r2,63
 40046a0:	1007883a 	mov	r3,r2
 40046a4:	e0bfff17 	ldw	r2,-4(fp)
 40046a8:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 40046ac:	e0bffb0b 	ldhu	r2,-20(fp)
 40046b0:	1004d2fa 	srli	r2,r2,11
 40046b4:	1007883a 	mov	r3,r2
 40046b8:	e0bffe17 	ldw	r2,-8(fp)
 40046bc:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40046c0:	00800044 	movi	r2,1
 40046c4:	e0bffa15 	stw	r2,-24(fp)
 40046c8:	00002006 	br	400474c <_Z23seperate_color_channelsiPhS_S_S_+0x130>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40046cc:	e0bffc17 	ldw	r2,-16(fp)
 40046d0:	10800620 	cmpeqi	r2,r2,24
 40046d4:	1000031e 	bne	r2,zero,40046e4 <_Z23seperate_color_channelsiPhS_S_S_+0xc8>
 40046d8:	e0bffc17 	ldw	r2,-16(fp)
 40046dc:	10800818 	cmpnei	r2,r2,32
 40046e0:	1000131e 	bne	r2,zero,4004730 <_Z23seperate_color_channelsiPhS_S_S_+0x114>
  {
    *blue = *color++;
 40046e4:	e0bffd17 	ldw	r2,-12(fp)
 40046e8:	10c00044 	addi	r3,r2,1
 40046ec:	e0fffd15 	stw	r3,-12(fp)
 40046f0:	10c00003 	ldbu	r3,0(r2)
 40046f4:	e0800117 	ldw	r2,4(fp)
 40046f8:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 40046fc:	e0bffd17 	ldw	r2,-12(fp)
 4004700:	10c00044 	addi	r3,r2,1
 4004704:	e0fffd15 	stw	r3,-12(fp)
 4004708:	10c00003 	ldbu	r3,0(r2)
 400470c:	e0bfff17 	ldw	r2,-4(fp)
 4004710:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 4004714:	e0bffd17 	ldw	r2,-12(fp)
 4004718:	10c00003 	ldbu	r3,0(r2)
 400471c:	e0bffe17 	ldw	r2,-8(fp)
 4004720:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004724:	00800044 	movi	r2,1
 4004728:	e0bffa15 	stw	r2,-24(fp)
 400472c:	00000706 	br	400474c <_Z23seperate_color_channelsiPhS_S_S_+0x130>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4004730:	e0bffe17 	ldw	r2,-8(fp)
 4004734:	10000005 	stb	zero,0(r2)
    *green = 0;
 4004738:	e0bfff17 	ldw	r2,-4(fp)
 400473c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4004740:	e0800117 	ldw	r2,4(fp)
 4004744:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4004748:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 400474c:	e0bffa17 	ldw	r2,-24(fp)
}
 4004750:	e037883a 	mov	sp,fp
 4004754:	df000017 	ldw	fp,0(sp)
 4004758:	dec00104 	addi	sp,sp,4
 400475c:	f800283a 	ret

04004760 <_Z20merge_color_channelsihhhPh>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4004760:	defff904 	addi	sp,sp,-28
 4004764:	df000615 	stw	fp,24(sp)
 4004768:	df000604 	addi	fp,sp,24
 400476c:	e13ffc15 	stw	r4,-16(fp)
 4004770:	2809883a 	mov	r4,r5
 4004774:	3007883a 	mov	r3,r6
 4004778:	3805883a 	mov	r2,r7
 400477c:	e13ffd05 	stb	r4,-12(fp)
 4004780:	e0fffe05 	stb	r3,-8(fp)
 4004784:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 4004788:	e0bffc17 	ldw	r2,-16(fp)
 400478c:	10800418 	cmpnei	r2,r2,16
 4004790:	1000191e 	bne	r2,zero,40047f8 <_Z20merge_color_channelsihhhPh+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4004794:	e0bfff03 	ldbu	r2,-4(fp)
 4004798:	108007cc 	andi	r2,r2,31
 400479c:	1007883a 	mov	r3,r2
 40047a0:	e0bffe03 	ldbu	r2,-8(fp)
 40047a4:	10800fcc 	andi	r2,r2,63
 40047a8:	1004917a 	slli	r2,r2,5
 40047ac:	1884b03a 	or	r2,r3,r2
 40047b0:	1007883a 	mov	r3,r2
 40047b4:	e0bffd03 	ldbu	r2,-12(fp)
 40047b8:	100492fa 	slli	r2,r2,11
 40047bc:	1884b03a 	or	r2,r3,r2
 40047c0:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 40047c4:	e0800117 	ldw	r2,4(fp)
 40047c8:	10c00044 	addi	r3,r2,1
 40047cc:	e0c00115 	stw	r3,4(fp)
 40047d0:	e0fffb0b 	ldhu	r3,-20(fp)
 40047d4:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 40047d8:	e0bffb0b 	ldhu	r2,-20(fp)
 40047dc:	1004d23a 	srli	r2,r2,8
 40047e0:	1007883a 	mov	r3,r2
 40047e4:	e0800117 	ldw	r2,4(fp)
 40047e8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40047ec:	00800044 	movi	r2,1
 40047f0:	e0bffa15 	stw	r2,-24(fp)
 40047f4:	00002106 	br	400487c <_Z20merge_color_channelsihhhPh+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40047f8:	e0bffc17 	ldw	r2,-16(fp)
 40047fc:	10800620 	cmpeqi	r2,r2,24
 4004800:	1000031e 	bne	r2,zero,4004810 <_Z20merge_color_channelsihhhPh+0xb0>
 4004804:	e0bffc17 	ldw	r2,-16(fp)
 4004808:	10800818 	cmpnei	r2,r2,32
 400480c:	1000101e 	bne	r2,zero,4004850 <_Z20merge_color_channelsihhhPh+0xf0>
  {
    *color++ = blue;
 4004810:	e0800117 	ldw	r2,4(fp)
 4004814:	10c00044 	addi	r3,r2,1
 4004818:	e0c00115 	stw	r3,4(fp)
 400481c:	e0ffff03 	ldbu	r3,-4(fp)
 4004820:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 4004824:	e0800117 	ldw	r2,4(fp)
 4004828:	10c00044 	addi	r3,r2,1
 400482c:	e0c00115 	stw	r3,4(fp)
 4004830:	e0fffe03 	ldbu	r3,-8(fp)
 4004834:	10c00005 	stb	r3,0(r2)
    *color = red;
 4004838:	e0800117 	ldw	r2,4(fp)
 400483c:	e0fffd03 	ldbu	r3,-12(fp)
 4004840:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004844:	00800044 	movi	r2,1
 4004848:	e0bffa15 	stw	r2,-24(fp)
 400484c:	00000b06 	br	400487c <_Z20merge_color_channelsihhhPh+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4004850:	e0800117 	ldw	r2,4(fp)
 4004854:	10c00044 	addi	r3,r2,1
 4004858:	e0c00115 	stw	r3,4(fp)
 400485c:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 4004860:	e0800117 	ldw	r2,4(fp)
 4004864:	10c00044 	addi	r3,r2,1
 4004868:	e0c00115 	stw	r3,4(fp)
 400486c:	10000005 	stb	zero,0(r2)
    *color = 0;
 4004870:	e0800117 	ldw	r2,4(fp)
 4004874:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4004878:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 400487c:	e0bffa17 	ldw	r2,-24(fp)
}
 4004880:	e037883a 	mov	sp,fp
 4004884:	df000017 	ldw	fp,0(sp)
 4004888:	dec00104 	addi	sp,sp,4
 400488c:	f800283a 	ret

04004890 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4004890:	defff704 	addi	sp,sp,-36
 4004894:	dfc00815 	stw	ra,32(sp)
 4004898:	df000715 	stw	fp,28(sp)
 400489c:	df000704 	addi	fp,sp,28
 40048a0:	e13ffc15 	stw	r4,-16(fp)
 40048a4:	e17ffd15 	stw	r5,-12(fp)
 40048a8:	e1bffe15 	stw	r6,-8(fp)
 40048ac:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
 40048b0:	e0800317 	ldw	r2,12(fp)
 40048b4:	10800417 	ldw	r2,16(r2)
 40048b8:	10800818 	cmpnei	r2,r2,32
 40048bc:	1000211e 	bne	r2,zero,4004944 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0xb4>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
 40048c0:	e1000317 	ldw	r4,12(fp)
 40048c4:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 40048c8:	1009883a 	mov	r4,r2
 40048cc:	e0800317 	ldw	r2,12(fp)
 40048d0:	10c00517 	ldw	r3,20(r2)
 40048d4:	e0bffd17 	ldw	r2,-12(fp)
 40048d8:	1887383a 	mul	r3,r3,r2
 40048dc:	e0bffc17 	ldw	r2,-16(fp)
 40048e0:	1885883a 	add	r2,r3,r2
 40048e4:	1085883a 	add	r2,r2,r2
 40048e8:	1085883a 	add	r2,r2,r2
 40048ec:	2085883a 	add	r2,r4,r2
 40048f0:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
 40048f4:	e0bffa17 	ldw	r2,-24(fp)
 40048f8:	10800037 	ldwio	r2,0(r2)
 40048fc:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
 4004900:	e0bffb17 	ldw	r2,-20(fp)
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0800217 	ldw	r2,8(fp)
 400490c:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
 4004910:	e0bffb17 	ldw	r2,-20(fp)
 4004914:	1004d23a 	srli	r2,r2,8
 4004918:	1007883a 	mov	r3,r2
 400491c:	e0bfff17 	ldw	r2,-4(fp)
 4004920:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
 4004924:	e0bffb17 	ldw	r2,-20(fp)
 4004928:	1004d43a 	srli	r2,r2,16
 400492c:	1007883a 	mov	r3,r2
 4004930:	e0bffe17 	ldw	r2,-8(fp)
 4004934:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004938:	00800044 	movi	r2,1
 400493c:	e0bff915 	stw	r2,-28(fp)
 4004940:	00005806 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else if( display->color_depth == 24 )
 4004944:	e0800317 	ldw	r2,12(fp)
 4004948:	10800417 	ldw	r2,16(r2)
 400494c:	10800618 	cmpnei	r2,r2,24
 4004950:	1000251e 	bne	r2,zero,40049e8 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x158>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
 4004954:	e1000317 	ldw	r4,12(fp)
 4004958:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400495c:	1009883a 	mov	r4,r2
 4004960:	e0800317 	ldw	r2,12(fp)
 4004964:	10c00517 	ldw	r3,20(r2)
 4004968:	e0bffd17 	ldw	r2,-12(fp)
 400496c:	1887383a 	mul	r3,r3,r2
 4004970:	e0bffc17 	ldw	r2,-16(fp)
 4004974:	1887883a 	add	r3,r3,r2
 4004978:	1805883a 	mov	r2,r3
 400497c:	1085883a 	add	r2,r2,r2
 4004980:	10c5883a 	add	r2,r2,r3
 4004984:	2085883a 	add	r2,r4,r2
 4004988:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
 400498c:	e0bffa17 	ldw	r2,-24(fp)
 4004990:	10800023 	ldbuio	r2,0(r2)
 4004994:	10803fcc 	andi	r2,r2,255
 4004998:	1007883a 	mov	r3,r2
 400499c:	e0800217 	ldw	r2,8(fp)
 40049a0:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
 40049a4:	e0bffa17 	ldw	r2,-24(fp)
 40049a8:	10800044 	addi	r2,r2,1
 40049ac:	10800023 	ldbuio	r2,0(r2)
 40049b0:	10803fcc 	andi	r2,r2,255
 40049b4:	1007883a 	mov	r3,r2
 40049b8:	e0bfff17 	ldw	r2,-4(fp)
 40049bc:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
 40049c0:	e0bffa17 	ldw	r2,-24(fp)
 40049c4:	10800084 	addi	r2,r2,2
 40049c8:	10800023 	ldbuio	r2,0(r2)
 40049cc:	10803fcc 	andi	r2,r2,255
 40049d0:	1007883a 	mov	r3,r2
 40049d4:	e0bffe17 	ldw	r2,-8(fp)
 40049d8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40049dc:	00800044 	movi	r2,1
 40049e0:	e0bff915 	stw	r2,-28(fp)
 40049e4:	00002f06 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else if( display->color_depth == 16 )
 40049e8:	e0800317 	ldw	r2,12(fp)
 40049ec:	10800417 	ldw	r2,16(r2)
 40049f0:	10800418 	cmpnei	r2,r2,16
 40049f4:	1000241e 	bne	r2,zero,4004a88 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x1f8>
  {
    addr = ((unsigned int)VIPFR_GetDrawFrame(display)) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
 40049f8:	e1000317 	ldw	r4,12(fp)
 40049fc:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4004a00:	1009883a 	mov	r4,r2
 4004a04:	e0800317 	ldw	r2,12(fp)
 4004a08:	10c00517 	ldw	r3,20(r2)
 4004a0c:	e0bffd17 	ldw	r2,-12(fp)
 4004a10:	1887383a 	mul	r3,r3,r2
 4004a14:	e0bffc17 	ldw	r2,-16(fp)
 4004a18:	1885883a 	add	r2,r3,r2
 4004a1c:	1085883a 	add	r2,r2,r2
 4004a20:	2085883a 	add	r2,r4,r2
 4004a24:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
 4004a28:	e0bffa17 	ldw	r2,-24(fp)
 4004a2c:	1080002b 	ldhuio	r2,0(r2)
 4004a30:	10bfffcc 	andi	r2,r2,65535
 4004a34:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
 4004a38:	e0bffb17 	ldw	r2,-20(fp)
 4004a3c:	108007cc 	andi	r2,r2,31
 4004a40:	1007883a 	mov	r3,r2
 4004a44:	e0800217 	ldw	r2,8(fp)
 4004a48:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
 4004a4c:	e0bffb17 	ldw	r2,-20(fp)
 4004a50:	1004d17a 	srli	r2,r2,5
 4004a54:	10800fcc 	andi	r2,r2,63
 4004a58:	1007883a 	mov	r3,r2
 4004a5c:	e0bfff17 	ldw	r2,-4(fp)
 4004a60:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
 4004a64:	e0bffb17 	ldw	r2,-20(fp)
 4004a68:	1004d2fa 	srli	r2,r2,11
 4004a6c:	108007cc 	andi	r2,r2,31
 4004a70:	1007883a 	mov	r3,r2
 4004a74:	e0bffe17 	ldw	r2,-8(fp)
 4004a78:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4004a7c:	00800044 	movi	r2,1
 4004a80:	e0bff915 	stw	r2,-28(fp)
 4004a84:	00000706 	br	4004aa4 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER+0x214>
  }
  else
  {
    *blue = 0;
 4004a88:	e0800217 	ldw	r2,8(fp)
 4004a8c:	10000005 	stb	zero,0(r2)
    *red = 0;
 4004a90:	e0bffe17 	ldw	r2,-8(fp)
 4004a94:	10000005 	stb	zero,0(r2)
    *green = 0;
 4004a98:	e0bfff17 	ldw	r2,-4(fp)
 4004a9c:	10000005 	stb	zero,0(r2)
    return_value = 0; 
 4004aa0:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
 4004aa4:	e0bff917 	ldw	r2,-28(fp)
}
 4004aa8:	e037883a 	mov	sp,fp
 4004aac:	dfc00117 	ldw	ra,4(sp)
 4004ab0:	df000017 	ldw	fp,0(sp)
 4004ab4:	dec00204 	addi	sp,sp,8
 4004ab8:	f800283a 	ret

04004abc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4004abc:	defff304 	addi	sp,sp,-52
 4004ac0:	dfc00c15 	stw	ra,48(sp)
 4004ac4:	df000b15 	stw	fp,44(sp)
 4004ac8:	df000b04 	addi	fp,sp,44
 4004acc:	e13ffc15 	stw	r4,-16(fp)
 4004ad0:	e17ffd15 	stw	r5,-12(fp)
 4004ad4:	e1bffe15 	stw	r6,-8(fp)
 4004ad8:	3805883a 	mov	r2,r7
 4004adc:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4004ae0:	e0bffe17 	ldw	r2,-8(fp)
 4004ae4:	10bfffd8 	cmpnei	r2,r2,-1
 4004ae8:	10000c1e 	bne	r2,zero,4004b1c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4004aec:	e13ffb44 	addi	r4,fp,-19
 4004af0:	e0fffb04 	addi	r3,fp,-20
 4004af4:	e0800517 	ldw	r2,20(fp)
 4004af8:	d8800115 	stw	r2,4(sp)
 4004afc:	e0bffb84 	addi	r2,fp,-18
 4004b00:	d8800015 	stw	r2,0(sp)
 4004b04:	200f883a 	mov	r7,r4
 4004b08:	180d883a 	mov	r6,r3
 4004b0c:	e17ffd17 	ldw	r5,-12(fp)
 4004b10:	e13ffc17 	ldw	r4,-16(fp)
 4004b14:	40048900 	call	4004890 <_Z15read_from_frameiiPhS_S_P16VIP_FRAME_READER>
 4004b18:	00000c06 	br	4004b4c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x90>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4004b1c:	e0800517 	ldw	r2,20(fp)
 4004b20:	10c00417 	ldw	r3,16(r2)
 4004b24:	e1bffb44 	addi	r6,fp,-19
 4004b28:	e17ffb04 	addi	r5,fp,-20
 4004b2c:	e13ffe04 	addi	r4,fp,-8
 4004b30:	e0bffb84 	addi	r2,fp,-18
 4004b34:	d8800015 	stw	r2,0(sp)
 4004b38:	300f883a 	mov	r7,r6
 4004b3c:	280d883a 	mov	r6,r5
 4004b40:	200b883a 	mov	r5,r4
 4004b44:	1809883a 	mov	r4,r3
 4004b48:	400461c0 	call	400461c <_Z23seperate_color_channelsiPhS_S_S_>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4004b4c:	e0800217 	ldw	r2,8(fp)
 4004b50:	10800003 	ldbu	r2,0(r2)
 4004b54:	10c03fcc 	andi	r3,r2,255
 4004b58:	e0bfff03 	ldbu	r2,-4(fp)
 4004b5c:	1887383a 	mul	r3,r3,r2
 4004b60:	e0bffb03 	ldbu	r2,-20(fp)
 4004b64:	11003fcc 	andi	r4,r2,255
 4004b68:	e0bfff03 	ldbu	r2,-4(fp)
 4004b6c:	01403fc4 	movi	r5,255
 4004b70:	2885c83a 	sub	r2,r5,r2
 4004b74:	2085383a 	mul	r2,r4,r2
 4004b78:	1885883a 	add	r2,r3,r2
 4004b7c:	01403fc4 	movi	r5,255
 4004b80:	1009883a 	mov	r4,r2
 4004b84:	400dbb40 	call	400dbb4 <__divsi3>
 4004b88:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4004b8c:	e0800317 	ldw	r2,12(fp)
 4004b90:	10800003 	ldbu	r2,0(r2)
 4004b94:	10c03fcc 	andi	r3,r2,255
 4004b98:	e0bfff03 	ldbu	r2,-4(fp)
 4004b9c:	1887383a 	mul	r3,r3,r2
 4004ba0:	e0bffb43 	ldbu	r2,-19(fp)
 4004ba4:	11003fcc 	andi	r4,r2,255
 4004ba8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bac:	01403fc4 	movi	r5,255
 4004bb0:	2885c83a 	sub	r2,r5,r2
 4004bb4:	2085383a 	mul	r2,r4,r2
 4004bb8:	1885883a 	add	r2,r3,r2
 4004bbc:	01403fc4 	movi	r5,255
 4004bc0:	1009883a 	mov	r4,r2
 4004bc4:	400dbb40 	call	400dbb4 <__divsi3>
 4004bc8:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4004bcc:	e0800417 	ldw	r2,16(fp)
 4004bd0:	10800003 	ldbu	r2,0(r2)
 4004bd4:	10c03fcc 	andi	r3,r2,255
 4004bd8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bdc:	1887383a 	mul	r3,r3,r2
 4004be0:	e0bffb83 	ldbu	r2,-18(fp)
 4004be4:	11003fcc 	andi	r4,r2,255
 4004be8:	e0bfff03 	ldbu	r2,-4(fp)
 4004bec:	01403fc4 	movi	r5,255
 4004bf0:	2885c83a 	sub	r2,r5,r2
 4004bf4:	2085383a 	mul	r2,r4,r2
 4004bf8:	1885883a 	add	r2,r3,r2
 4004bfc:	01403fc4 	movi	r5,255
 4004c00:	1009883a 	mov	r4,r2
 4004c04:	400dbb40 	call	400dbb4 <__divsi3>
 4004c08:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4004c0c:	e0800517 	ldw	r2,20(fp)
 4004c10:	10800417 	ldw	r2,16(r2)
 4004c14:	10800418 	cmpnei	r2,r2,16
 4004c18:	1000181e 	bne	r2,zero,4004c7c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1c0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4004c1c:	e0bff817 	ldw	r2,-32(fp)
 4004c20:	10c00830 	cmpltui	r3,r2,32
 4004c24:	1800011e 	bne	r3,zero,4004c2c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x170>
 4004c28:	008007c4 	movi	r2,31
 4004c2c:	1007883a 	mov	r3,r2
 4004c30:	e0800217 	ldw	r2,8(fp)
 4004c34:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4004c38:	e0bff917 	ldw	r2,-28(fp)
 4004c3c:	10c01030 	cmpltui	r3,r2,64
 4004c40:	1800011e 	bne	r3,zero,4004c48 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x18c>
 4004c44:	00800fc4 	movi	r2,63
 4004c48:	1007883a 	mov	r3,r2
 4004c4c:	e0800317 	ldw	r2,12(fp)
 4004c50:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4004c54:	e0bffa17 	ldw	r2,-24(fp)
 4004c58:	10c00830 	cmpltui	r3,r2,32
 4004c5c:	1800011e 	bne	r3,zero,4004c64 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1a8>
 4004c60:	008007c4 	movi	r2,31
 4004c64:	1007883a 	mov	r3,r2
 4004c68:	e0800417 	ldw	r2,16(fp)
 4004c6c:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4004c70:	00800044 	movi	r2,1
 4004c74:	e0bff715 	stw	r2,-36(fp)
 4004c78:	00002106 	br	4004d00 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x244>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4004c7c:	e0800517 	ldw	r2,20(fp)
 4004c80:	10800417 	ldw	r2,16(r2)
 4004c84:	10800620 	cmpeqi	r2,r2,24
 4004c88:	1000041e 	bne	r2,zero,4004c9c <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1e0>
 4004c8c:	e0800517 	ldw	r2,20(fp)
 4004c90:	10800417 	ldw	r2,16(r2)
 4004c94:	10800818 	cmpnei	r2,r2,32
 4004c98:	1000181e 	bne	r2,zero,4004cfc <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x240>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4004c9c:	e0bff817 	ldw	r2,-32(fp)
 4004ca0:	10c04030 	cmpltui	r3,r2,256
 4004ca4:	1800011e 	bne	r3,zero,4004cac <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x1f0>
 4004ca8:	00803fc4 	movi	r2,255
 4004cac:	1007883a 	mov	r3,r2
 4004cb0:	e0800217 	ldw	r2,8(fp)
 4004cb4:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4004cb8:	e0bff917 	ldw	r2,-28(fp)
 4004cbc:	10c04030 	cmpltui	r3,r2,256
 4004cc0:	1800011e 	bne	r3,zero,4004cc8 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x20c>
 4004cc4:	00803fc4 	movi	r2,255
 4004cc8:	1007883a 	mov	r3,r2
 4004ccc:	e0800317 	ldw	r2,12(fp)
 4004cd0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4004cd4:	e0bffa17 	ldw	r2,-24(fp)
 4004cd8:	10c04030 	cmpltui	r3,r2,256
 4004cdc:	1800011e 	bne	r3,zero,4004ce4 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x228>
 4004ce0:	00803fc4 	movi	r2,255
 4004ce4:	1007883a 	mov	r3,r2
 4004ce8:	e0800417 	ldw	r2,16(fp)
 4004cec:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4004cf0:	00800044 	movi	r2,1
 4004cf4:	e0bff715 	stw	r2,-36(fp)
 4004cf8:	00000106 	br	4004d00 <_Z14alpha_blendingiiihPhS_S_P16VIP_FRAME_READER+0x244>
  }
  else
  {
    return_value = 0;     
 4004cfc:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4004d00:	e0bff717 	ldw	r2,-36(fp)
} 
 4004d04:	e037883a 	mov	sp,fp
 4004d08:	dfc00117 	ldw	ra,4(sp)
 4004d0c:	df000017 	ldw	fp,0(sp)
 4004d10:	dec00204 	addi	sp,sp,8
 4004d14:	f800283a 	ret

04004d18 <_Z16Compass_Calcuatefffff>:
#define DOT_SIZE    6




float Compass_Calcuate(float pitch, float roll, float mx, float my, float mz){
 4004d18:	defff304 	addi	sp,sp,-52
 4004d1c:	dfc00c15 	stw	ra,48(sp)
 4004d20:	df000b15 	stw	fp,44(sp)
 4004d24:	dcc00a15 	stw	r19,40(sp)
 4004d28:	dc800915 	stw	r18,36(sp)
 4004d2c:	dc400815 	stw	r17,32(sp)
 4004d30:	dc000715 	stw	r16,28(sp)
 4004d34:	df000b04 	addi	fp,sp,44
 4004d38:	e13ff815 	stw	r4,-32(fp)
 4004d3c:	e17ff915 	stw	r5,-28(fp)
 4004d40:	e1bffa15 	stw	r6,-24(fp)
 4004d44:	e1fffb15 	stw	r7,-20(fp)


	//http://blog.sina.com.cn/s/blog_8240cbef0101i7gn.html


    xh=mx*cos(pitch)+my*sin(roll)*sin(pitch)-mz*sin(pitch)*cos(roll);
 4004d48:	e13ffa17 	ldw	r4,-24(fp)
 4004d4c:	40118b40 	call	40118b4 <__extendsfdf2>
 4004d50:	1021883a 	mov	r16,r2
 4004d54:	1823883a 	mov	r17,r3
 4004d58:	e13ff817 	ldw	r4,-32(fp)
 4004d5c:	40118b40 	call	40118b4 <__extendsfdf2>
 4004d60:	100b883a 	mov	r5,r2
 4004d64:	180d883a 	mov	r6,r3
 4004d68:	2809883a 	mov	r4,r5
 4004d6c:	300b883a 	mov	r5,r6
 4004d70:	400b2bc0 	call	400b2bc <cos>
 4004d74:	1009883a 	mov	r4,r2
 4004d78:	180b883a 	mov	r5,r3
 4004d7c:	200d883a 	mov	r6,r4
 4004d80:	280f883a 	mov	r7,r5
 4004d84:	8009883a 	mov	r4,r16
 4004d88:	880b883a 	mov	r5,r17
 4004d8c:	40107440 	call	4010744 <__muldf3>
 4004d90:	1009883a 	mov	r4,r2
 4004d94:	180b883a 	mov	r5,r3
 4004d98:	2021883a 	mov	r16,r4
 4004d9c:	2823883a 	mov	r17,r5
 4004da0:	e13ffb17 	ldw	r4,-20(fp)
 4004da4:	40118b40 	call	40118b4 <__extendsfdf2>
 4004da8:	1025883a 	mov	r18,r2
 4004dac:	1827883a 	mov	r19,r3
 4004db0:	e13ff917 	ldw	r4,-28(fp)
 4004db4:	40118b40 	call	40118b4 <__extendsfdf2>
 4004db8:	100b883a 	mov	r5,r2
 4004dbc:	180d883a 	mov	r6,r3
 4004dc0:	2809883a 	mov	r4,r5
 4004dc4:	300b883a 	mov	r5,r6
 4004dc8:	400b3bc0 	call	400b3bc <sin>
 4004dcc:	1009883a 	mov	r4,r2
 4004dd0:	180b883a 	mov	r5,r3
 4004dd4:	200d883a 	mov	r6,r4
 4004dd8:	280f883a 	mov	r7,r5
 4004ddc:	9009883a 	mov	r4,r18
 4004de0:	980b883a 	mov	r5,r19
 4004de4:	40107440 	call	4010744 <__muldf3>
 4004de8:	1009883a 	mov	r4,r2
 4004dec:	180b883a 	mov	r5,r3
 4004df0:	2025883a 	mov	r18,r4
 4004df4:	2827883a 	mov	r19,r5
 4004df8:	e13ff817 	ldw	r4,-32(fp)
 4004dfc:	40118b40 	call	40118b4 <__extendsfdf2>
 4004e00:	100b883a 	mov	r5,r2
 4004e04:	180d883a 	mov	r6,r3
 4004e08:	2809883a 	mov	r4,r5
 4004e0c:	300b883a 	mov	r5,r6
 4004e10:	400b3bc0 	call	400b3bc <sin>
 4004e14:	1009883a 	mov	r4,r2
 4004e18:	180b883a 	mov	r5,r3
 4004e1c:	200d883a 	mov	r6,r4
 4004e20:	280f883a 	mov	r7,r5
 4004e24:	9009883a 	mov	r4,r18
 4004e28:	980b883a 	mov	r5,r19
 4004e2c:	40107440 	call	4010744 <__muldf3>
 4004e30:	1009883a 	mov	r4,r2
 4004e34:	180b883a 	mov	r5,r3
 4004e38:	2005883a 	mov	r2,r4
 4004e3c:	2807883a 	mov	r3,r5
 4004e40:	100d883a 	mov	r6,r2
 4004e44:	180f883a 	mov	r7,r3
 4004e48:	8009883a 	mov	r4,r16
 4004e4c:	880b883a 	mov	r5,r17
 4004e50:	400f3580 	call	400f358 <__adddf3>
 4004e54:	1009883a 	mov	r4,r2
 4004e58:	180b883a 	mov	r5,r3
 4004e5c:	2021883a 	mov	r16,r4
 4004e60:	2823883a 	mov	r17,r5
 4004e64:	e1000217 	ldw	r4,8(fp)
 4004e68:	40118b40 	call	40118b4 <__extendsfdf2>
 4004e6c:	1025883a 	mov	r18,r2
 4004e70:	1827883a 	mov	r19,r3
 4004e74:	e13ff817 	ldw	r4,-32(fp)
 4004e78:	40118b40 	call	40118b4 <__extendsfdf2>
 4004e7c:	100b883a 	mov	r5,r2
 4004e80:	180d883a 	mov	r6,r3
 4004e84:	2809883a 	mov	r4,r5
 4004e88:	300b883a 	mov	r5,r6
 4004e8c:	400b3bc0 	call	400b3bc <sin>
 4004e90:	1009883a 	mov	r4,r2
 4004e94:	180b883a 	mov	r5,r3
 4004e98:	200d883a 	mov	r6,r4
 4004e9c:	280f883a 	mov	r7,r5
 4004ea0:	9009883a 	mov	r4,r18
 4004ea4:	980b883a 	mov	r5,r19
 4004ea8:	40107440 	call	4010744 <__muldf3>
 4004eac:	1009883a 	mov	r4,r2
 4004eb0:	180b883a 	mov	r5,r3
 4004eb4:	2025883a 	mov	r18,r4
 4004eb8:	2827883a 	mov	r19,r5
 4004ebc:	e13ff917 	ldw	r4,-28(fp)
 4004ec0:	40118b40 	call	40118b4 <__extendsfdf2>
 4004ec4:	100b883a 	mov	r5,r2
 4004ec8:	180d883a 	mov	r6,r3
 4004ecc:	2809883a 	mov	r4,r5
 4004ed0:	300b883a 	mov	r5,r6
 4004ed4:	400b2bc0 	call	400b2bc <cos>
 4004ed8:	1009883a 	mov	r4,r2
 4004edc:	180b883a 	mov	r5,r3
 4004ee0:	200d883a 	mov	r6,r4
 4004ee4:	280f883a 	mov	r7,r5
 4004ee8:	9009883a 	mov	r4,r18
 4004eec:	980b883a 	mov	r5,r19
 4004ef0:	40107440 	call	4010744 <__muldf3>
 4004ef4:	1009883a 	mov	r4,r2
 4004ef8:	180b883a 	mov	r5,r3
 4004efc:	2005883a 	mov	r2,r4
 4004f00:	2807883a 	mov	r3,r5
 4004f04:	100d883a 	mov	r6,r2
 4004f08:	180f883a 	mov	r7,r3
 4004f0c:	8009883a 	mov	r4,r16
 4004f10:	880b883a 	mov	r5,r17
 4004f14:	4010e5c0 	call	4010e5c <__subdf3>
 4004f18:	1009883a 	mov	r4,r2
 4004f1c:	180b883a 	mov	r5,r3
 4004f20:	2005883a 	mov	r2,r4
 4004f24:	2807883a 	mov	r3,r5
 4004f28:	1009883a 	mov	r4,r2
 4004f2c:	180b883a 	mov	r5,r3
 4004f30:	40119c40 	call	40119c4 <__truncdfsf2>
 4004f34:	1007883a 	mov	r3,r2
 4004f38:	e0fff615 	stw	r3,-40(fp)
    yh=my*cos(roll)+mz*sin(roll);
 4004f3c:	e13ffb17 	ldw	r4,-20(fp)
 4004f40:	40118b40 	call	40118b4 <__extendsfdf2>
 4004f44:	1021883a 	mov	r16,r2
 4004f48:	1823883a 	mov	r17,r3
 4004f4c:	e13ff917 	ldw	r4,-28(fp)
 4004f50:	40118b40 	call	40118b4 <__extendsfdf2>
 4004f54:	100b883a 	mov	r5,r2
 4004f58:	180d883a 	mov	r6,r3
 4004f5c:	2809883a 	mov	r4,r5
 4004f60:	300b883a 	mov	r5,r6
 4004f64:	400b2bc0 	call	400b2bc <cos>
 4004f68:	1009883a 	mov	r4,r2
 4004f6c:	180b883a 	mov	r5,r3
 4004f70:	200d883a 	mov	r6,r4
 4004f74:	280f883a 	mov	r7,r5
 4004f78:	8009883a 	mov	r4,r16
 4004f7c:	880b883a 	mov	r5,r17
 4004f80:	40107440 	call	4010744 <__muldf3>
 4004f84:	1009883a 	mov	r4,r2
 4004f88:	180b883a 	mov	r5,r3
 4004f8c:	2021883a 	mov	r16,r4
 4004f90:	2823883a 	mov	r17,r5
 4004f94:	e1000217 	ldw	r4,8(fp)
 4004f98:	40118b40 	call	40118b4 <__extendsfdf2>
 4004f9c:	1025883a 	mov	r18,r2
 4004fa0:	1827883a 	mov	r19,r3
 4004fa4:	e13ff917 	ldw	r4,-28(fp)
 4004fa8:	40118b40 	call	40118b4 <__extendsfdf2>
 4004fac:	100b883a 	mov	r5,r2
 4004fb0:	180d883a 	mov	r6,r3
 4004fb4:	2809883a 	mov	r4,r5
 4004fb8:	300b883a 	mov	r5,r6
 4004fbc:	400b3bc0 	call	400b3bc <sin>
 4004fc0:	1009883a 	mov	r4,r2
 4004fc4:	180b883a 	mov	r5,r3
 4004fc8:	200d883a 	mov	r6,r4
 4004fcc:	280f883a 	mov	r7,r5
 4004fd0:	9009883a 	mov	r4,r18
 4004fd4:	980b883a 	mov	r5,r19
 4004fd8:	40107440 	call	4010744 <__muldf3>
 4004fdc:	1009883a 	mov	r4,r2
 4004fe0:	180b883a 	mov	r5,r3
 4004fe4:	2005883a 	mov	r2,r4
 4004fe8:	2807883a 	mov	r3,r5
 4004fec:	100d883a 	mov	r6,r2
 4004ff0:	180f883a 	mov	r7,r3
 4004ff4:	8009883a 	mov	r4,r16
 4004ff8:	880b883a 	mov	r5,r17
 4004ffc:	400f3580 	call	400f358 <__adddf3>
 4005000:	1009883a 	mov	r4,r2
 4005004:	180b883a 	mov	r5,r3
 4005008:	2005883a 	mov	r2,r4
 400500c:	2807883a 	mov	r3,r5
 4005010:	1009883a 	mov	r4,r2
 4005014:	180b883a 	mov	r5,r3
 4005018:	40119c40 	call	40119c4 <__truncdfsf2>
 400501c:	1007883a 	mov	r3,r2
 4005020:	e0fff715 	stw	r3,-36(fp)
    //                |
    // mY  <--------- +
    //
    //

    var_compass=atan2((double)yh,(double)xh) * (180.0 / PI) ; // angle in degrees
 4005024:	e13ff717 	ldw	r4,-36(fp)
 4005028:	40118b40 	call	40118b4 <__extendsfdf2>
 400502c:	1021883a 	mov	r16,r2
 4005030:	1823883a 	mov	r17,r3
 4005034:	e13ff617 	ldw	r4,-40(fp)
 4005038:	40118b40 	call	40118b4 <__extendsfdf2>
 400503c:	1009883a 	mov	r4,r2
 4005040:	180b883a 	mov	r5,r3
 4005044:	200d883a 	mov	r6,r4
 4005048:	280f883a 	mov	r7,r5
 400504c:	8009883a 	mov	r4,r16
 4005050:	880b883a 	mov	r5,r17
 4005054:	400b4ac0 	call	400b4ac <atan2>
 4005058:	1011883a 	mov	r8,r2
 400505c:	1813883a 	mov	r9,r3
 4005060:	01ac1774 	movhi	r6,45149
 4005064:	31b0fa04 	addi	r6,r6,-15384
 4005068:	01d01374 	movhi	r7,16461
 400506c:	39e97744 	addi	r7,r7,-23075
 4005070:	4009883a 	mov	r4,r8
 4005074:	480b883a 	mov	r5,r9
 4005078:	40107440 	call	4010744 <__muldf3>
 400507c:	1009883a 	mov	r4,r2
 4005080:	180b883a 	mov	r5,r3
 4005084:	2005883a 	mov	r2,r4
 4005088:	2807883a 	mov	r3,r5
 400508c:	1009883a 	mov	r4,r2
 4005090:	180b883a 	mov	r5,r3
 4005094:	40119c40 	call	40119c4 <__truncdfsf2>
 4005098:	1007883a 	mov	r3,r2
 400509c:	e0fff515 	stw	r3,-44(fp)

    if (var_compass < 0.0)
 40050a0:	000b883a 	mov	r5,zero
 40050a4:	e13ff517 	ldw	r4,-44(fp)
 40050a8:	400e72c0 	call	400e72c <__lesf2>
 40050ac:	1000050e 	bge	r2,zero,40050c4 <_Z16Compass_Calcuatefffff+0x3ac>
    	var_compass += 360.0;
 40050b0:	0150ed34 	movhi	r5,17332
 40050b4:	e13ff517 	ldw	r4,-44(fp)
 40050b8:	400dd680 	call	400dd68 <__addsf3>
 40050bc:	1007883a 	mov	r3,r2
 40050c0:	e0fff515 	stw	r3,-44(fp)

    return var_compass;
 40050c4:	e0bff517 	ldw	r2,-44(fp)
 40050c8:	1007883a 	mov	r3,r2
}
 40050cc:	1805883a 	mov	r2,r3
 40050d0:	e6fffc04 	addi	sp,fp,-16
 40050d4:	dfc00517 	ldw	ra,20(sp)
 40050d8:	df000417 	ldw	fp,16(sp)
 40050dc:	dcc00317 	ldw	r19,12(sp)
 40050e0:	dc800217 	ldw	r18,8(sp)
 40050e4:	dc400117 	ldw	r17,4(sp)
 40050e8:	dc000017 	ldw	r16,0(sp)
 40050ec:	dec00604 	addi	sp,sp,24
 40050f0:	f800283a 	ret

040050f4 <_Z9IsTouchedP9MTC2_INFOR4RECT>:


bool IsTouched(MTC2_INFO *pTouch, RECT &rc){
 40050f4:	deffe504 	addi	sp,sp,-108
 40050f8:	dfc01a15 	stw	ra,104(sp)
 40050fc:	df001915 	stw	fp,100(sp)
 4005100:	df001904 	addi	fp,sp,100
 4005104:	e13ffe15 	stw	r4,-8(fp)
 4005108:	e17fff15 	stw	r5,-4(fp)
	bool bTouched = false;
 400510c:	e03ff005 	stb	zero,-64(fp)
	POINT pt;
	alt_u8 Event, TouchNum;
	int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;

	   if (MTC2_GetStatus(pTouch, &Event, &TouchNum,&X1, &Y1,&X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4005110:	e17ff404 	addi	r5,fp,-48
 4005114:	e13ff344 	addi	r4,fp,-51
 4005118:	e0fff304 	addi	r3,fp,-52
 400511c:	e0bffd04 	addi	r2,fp,-12
 4005120:	d8800815 	stw	r2,32(sp)
 4005124:	e0bffc04 	addi	r2,fp,-16
 4005128:	d8800715 	stw	r2,28(sp)
 400512c:	e0bffb04 	addi	r2,fp,-20
 4005130:	d8800615 	stw	r2,24(sp)
 4005134:	e0bffa04 	addi	r2,fp,-24
 4005138:	d8800515 	stw	r2,20(sp)
 400513c:	e0bff904 	addi	r2,fp,-28
 4005140:	d8800415 	stw	r2,16(sp)
 4005144:	e0bff804 	addi	r2,fp,-32
 4005148:	d8800315 	stw	r2,12(sp)
 400514c:	e0bff704 	addi	r2,fp,-36
 4005150:	d8800215 	stw	r2,8(sp)
 4005154:	e0bff604 	addi	r2,fp,-40
 4005158:	d8800115 	stw	r2,4(sp)
 400515c:	e0bff504 	addi	r2,fp,-44
 4005160:	d8800015 	stw	r2,0(sp)
 4005164:	280f883a 	mov	r7,r5
 4005168:	200d883a 	mov	r6,r4
 400516c:	180b883a 	mov	r5,r3
 4005170:	e13ffe17 	ldw	r4,-8(fp)
 4005174:	400a1bc0 	call	400a1bc <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_>
 4005178:	10803fcc 	andi	r2,r2,255
 400517c:	10001226 	beq	r2,zero,40051c8 <_Z9IsTouchedP9MTC2_INFOR4RECT+0xd4>
		   if (TouchNum == 1){
 4005180:	e0bff343 	ldbu	r2,-51(fp)
 4005184:	10803fcc 	andi	r2,r2,255
 4005188:	10800058 	cmpnei	r2,r2,1
 400518c:	10000e1e 	bne	r2,zero,40051c8 <_Z9IsTouchedP9MTC2_INFOR4RECT+0xd4>
			   pt.x = X1;
 4005190:	e0bff417 	ldw	r2,-48(fp)
 4005194:	e0bff115 	stw	r2,-60(fp)
			   pt.y = Y1;
 4005198:	e0bff517 	ldw	r2,-44(fp)
 400519c:	e0bff215 	stw	r2,-56(fp)
			   if (IsPtInRect(&pt, &rc)){
 40051a0:	e0bff104 	addi	r2,fp,-60
 40051a4:	e17fff17 	ldw	r5,-4(fp)
 40051a8:	1009883a 	mov	r4,r2
 40051ac:	400028c0 	call	400028c <_Z10IsPtInRectP5POINTP4RECT>
 40051b0:	10803fcc 	andi	r2,r2,255
 40051b4:	10000426 	beq	r2,zero,40051c8 <_Z9IsTouchedP9MTC2_INFOR4RECT+0xd4>
				   bTouched = true;
 40051b8:	00800044 	movi	r2,1
 40051bc:	e0bff005 	stb	r2,-64(fp)
				   MTC2_ClearEvent(pTouch);
 40051c0:	e13ffe17 	ldw	r4,-8(fp)
 40051c4:	400a3280 	call	400a328 <_Z15MTC2_ClearEventP9MTC2_INFO>
			   }
		   }
	   }

	   return bTouched;
 40051c8:	e0bff003 	ldbu	r2,-64(fp)
}
 40051cc:	e037883a 	mov	sp,fp
 40051d0:	dfc00117 	ldw	ra,4(sp)
 40051d4:	df000017 	ldw	fp,0(sp)
 40051d8:	dec00204 	addi	sp,sp,8
 40051dc:	f800283a 	ret

040051e0 <_Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc>:

void DrawButton(VIP_FRAME_READER *pReader, RECT &rcButton, const char *pText){
 40051e0:	deffd604 	addi	sp,sp,-168
 40051e4:	dfc02915 	stw	ra,164(sp)
 40051e8:	df002815 	stw	fp,160(sp)
 40051ec:	df002804 	addi	fp,sp,160
 40051f0:	e13ffd15 	stw	r4,-12(fp)
 40051f4:	e17ffe15 	stw	r5,-8(fp)
 40051f8:	e1bfff15 	stw	r6,-4(fp)
	char szText[128];
	int text_length;
    vid_draw_round_corner_box (rcButton.left, rcButton.top,
 40051fc:	e0bffe17 	ldw	r2,-8(fp)
 4005200:	10c00017 	ldw	r3,0(r2)
 4005204:	e0bffe17 	ldw	r2,-8(fp)
 4005208:	11000217 	ldw	r4,8(r2)
 400520c:	e0bffe17 	ldw	r2,-8(fp)
 4005210:	11400117 	ldw	r5,4(r2)
 4005214:	e0bffe17 	ldw	r2,-8(fp)
 4005218:	11800317 	ldw	r6,12(r2)
    							rcButton.right, rcButton.bottom,
                               10, COLOR_WHITE,  DO_NOT_FILL, pReader);
 400521c:	e0bffd17 	ldw	r2,-12(fp)
 4005220:	d8800315 	stw	r2,12(sp)
 4005224:	d8000215 	stw	zero,8(sp)
 4005228:	00804034 	movhi	r2,256
 400522c:	10bfffc4 	addi	r2,r2,-1
 4005230:	d8800115 	stw	r2,4(sp)
 4005234:	00800284 	movi	r2,10
 4005238:	d8800015 	stw	r2,0(sp)
 400523c:	300f883a 	mov	r7,r6
 4005240:	280d883a 	mov	r6,r5
 4005244:	200b883a 	mov	r5,r4
 4005248:	1809883a 	mov	r4,r3
 400524c:	4002b040 	call	4002b04 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER>
    sprintf(szText, "%s", pText);
 4005250:	e0bfdd04 	addi	r2,fp,-140
 4005254:	e17fff17 	ldw	r5,-4(fp)
 4005258:	1009883a 	mov	r4,r2
 400525c:	40128dc0 	call	40128dc <strcpy>
    text_length = vid_string_pixel_length_alpha(tahomabold_20, szText);
 4005260:	e0bfdd04 	addi	r2,fp,-140
 4005264:	100b883a 	mov	r5,r2
 4005268:	01010234 	movhi	r4,1032
 400526c:	21082404 	addi	r4,r4,8336
 4005270:	40045340 	call	4004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>
 4005274:	e0bfdc15 	stw	r2,-144(fp)
    vid_print_string_alpha(rcButton.left+((rcButton.right-rcButton.left)-text_length)/2, rcButton.top+15, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005278:	e0bffe17 	ldw	r2,-8(fp)
 400527c:	10c00017 	ldw	r3,0(r2)
 4005280:	e0bffe17 	ldw	r2,-8(fp)
 4005284:	11000117 	ldw	r4,4(r2)
 4005288:	e0bffe17 	ldw	r2,-8(fp)
 400528c:	10800017 	ldw	r2,0(r2)
 4005290:	2089c83a 	sub	r4,r4,r2
 4005294:	e0bfdc17 	ldw	r2,-144(fp)
 4005298:	2085c83a 	sub	r2,r4,r2
 400529c:	1008d7fa 	srli	r4,r2,31
 40052a0:	2085883a 	add	r2,r4,r2
 40052a4:	1005d07a 	srai	r2,r2,1
 40052a8:	1887883a 	add	r3,r3,r2
 40052ac:	e0bffe17 	ldw	r2,-8(fp)
 40052b0:	10800217 	ldw	r2,8(r2)
 40052b4:	110003c4 	addi	r4,r2,15
 40052b8:	e0bfdd04 	addi	r2,fp,-140
 40052bc:	d8800215 	stw	r2,8(sp)
 40052c0:	e0bffd17 	ldw	r2,-12(fp)
 40052c4:	d8800115 	stw	r2,4(sp)
 40052c8:	00810234 	movhi	r2,1032
 40052cc:	10882404 	addi	r2,r2,8336
 40052d0:	d8800015 	stw	r2,0(sp)
 40052d4:	000f883a 	mov	r7,zero
 40052d8:	01804034 	movhi	r6,256
 40052dc:	31bfffc4 	addi	r6,r6,-1
 40052e0:	200b883a 	mov	r5,r4
 40052e4:	1809883a 	mov	r4,r3
 40052e8:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

}
 40052ec:	0001883a 	nop
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	dfc00117 	ldw	ra,4(sp)
 40052f8:	df000017 	ldw	fp,0(sp)
 40052fc:	dec00204 	addi	sp,sp,8
 4005300:	f800283a 	ret

04005304 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>:

void DrawImage(VIP_FRAME_READER *pReader, struct gimp_image_struct* Terasic_image, int horiz, int vert )
{
 4005304:	defff504 	addi	sp,sp,-44
 4005308:	dfc00a15 	stw	ra,40(sp)
 400530c:	df000915 	stw	fp,36(sp)
 4005310:	df000904 	addi	fp,sp,36
 4005314:	e13ffc15 	stw	r4,-16(fp)
 4005318:	e17ffd15 	stw	r5,-12(fp)
 400531c:	e1bffe15 	stw	r6,-8(fp)
 4005320:	e1ffff15 	stw	r7,-4(fp)

  bitmap_struct* image;
  alt_u8 *pDes, *pSrc, *image_dest;
  int y;

  image = (bitmap_struct *)malloc(sizeof(bitmap_struct));
 4005324:	01000404 	movi	r4,16
 4005328:	4011be00 	call	4011be0 <malloc>
 400532c:	e0bffa15 	stw	r2,-24(fp)

  if( image != NULL )
 4005330:	e0bffa17 	ldw	r2,-24(fp)
 4005334:	10004926 	beq	r2,zero,400545c <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii+0x158>
  {
    // Load the CIII logo
    load_gimp_bmp( Terasic_image, image, 32);
 4005338:	01800804 	movi	r6,32
 400533c:	e17ffa17 	ldw	r5,-24(fp)
 4005340:	e13ffd17 	ldw	r4,-12(fp)
 4005344:	40006980 	call	4000698 <_Z13load_gimp_bmpP17gimp_image_structP13bitmap_structi>

    image_dest = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (vert*pReader->width*pReader->bytes_per_pixel) + (horiz*pReader->bytes_per_pixel);
 4005348:	e13ffc17 	ldw	r4,-16(fp)
 400534c:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 4005350:	1009883a 	mov	r4,r2
 4005354:	e0bffc17 	ldw	r2,-16(fp)
 4005358:	10c00517 	ldw	r3,20(r2)
 400535c:	e0bfff17 	ldw	r2,-4(fp)
 4005360:	1887383a 	mul	r3,r3,r2
 4005364:	e0bffc17 	ldw	r2,-16(fp)
 4005368:	10800717 	ldw	r2,28(r2)
 400536c:	1885383a 	mul	r2,r3,r2
 4005370:	100b883a 	mov	r5,r2
 4005374:	e0bffc17 	ldw	r2,-16(fp)
 4005378:	10c00717 	ldw	r3,28(r2)
 400537c:	e0bffe17 	ldw	r2,-8(fp)
 4005380:	1885383a 	mul	r2,r3,r2
 4005384:	2885883a 	add	r2,r5,r2
 4005388:	2085883a 	add	r2,r4,r2
 400538c:	e0bffb15 	stw	r2,-20(fp)

    pSrc = (alt_u8 *)image->data;
 4005390:	e0bffa17 	ldw	r2,-24(fp)
 4005394:	10800317 	ldw	r2,12(r2)
 4005398:	e0bff815 	stw	r2,-32(fp)
    pDes = image_dest;
 400539c:	e0bffb17 	ldw	r2,-20(fp)
 40053a0:	e0bff715 	stw	r2,-36(fp)
    for(y=0;y<image->biHeight;y++){
 40053a4:	e03ff915 	stw	zero,-28(fp)
 40053a8:	e0bffa17 	ldw	r2,-24(fp)
 40053ac:	1080008b 	ldhu	r2,2(r2)
 40053b0:	10bfffcc 	andi	r2,r2,65535
 40053b4:	10a0001c 	xori	r2,r2,32768
 40053b8:	10a00004 	addi	r2,r2,-32768
 40053bc:	e0fff917 	ldw	r3,-28(fp)
 40053c0:	1880220e 	bge	r3,r2,400544c <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii+0x148>
        memcpy(pDes, pSrc, image->biWidth * 4);
 40053c4:	e0bffa17 	ldw	r2,-24(fp)
 40053c8:	1080000b 	ldhu	r2,0(r2)
 40053cc:	10bfffcc 	andi	r2,r2,65535
 40053d0:	10a0001c 	xori	r2,r2,32768
 40053d4:	10a00004 	addi	r2,r2,-32768
 40053d8:	1085883a 	add	r2,r2,r2
 40053dc:	1085883a 	add	r2,r2,r2
 40053e0:	100d883a 	mov	r6,r2
 40053e4:	e17ff817 	ldw	r5,-32(fp)
 40053e8:	e13ff717 	ldw	r4,-36(fp)
 40053ec:	40124140 	call	4012414 <memcpy>
        pSrc += image->biWidth * 4;
 40053f0:	e0bffa17 	ldw	r2,-24(fp)
 40053f4:	1080000b 	ldhu	r2,0(r2)
 40053f8:	10bfffcc 	andi	r2,r2,65535
 40053fc:	10a0001c 	xori	r2,r2,32768
 4005400:	10a00004 	addi	r2,r2,-32768
 4005404:	1085883a 	add	r2,r2,r2
 4005408:	1085883a 	add	r2,r2,r2
 400540c:	1007883a 	mov	r3,r2
 4005410:	e0bff817 	ldw	r2,-32(fp)
 4005414:	10c5883a 	add	r2,r2,r3
 4005418:	e0bff815 	stw	r2,-32(fp)
        pDes += pReader->width * 4;
 400541c:	e0bffc17 	ldw	r2,-16(fp)
 4005420:	10800517 	ldw	r2,20(r2)
 4005424:	1085883a 	add	r2,r2,r2
 4005428:	1085883a 	add	r2,r2,r2
 400542c:	1007883a 	mov	r3,r2
 4005430:	e0bff717 	ldw	r2,-36(fp)
 4005434:	10c5883a 	add	r2,r2,r3
 4005438:	e0bff715 	stw	r2,-36(fp)

    image_dest = (alt_u8 *)VIPFR_GetDrawFrame(pReader) + (vert*pReader->width*pReader->bytes_per_pixel) + (horiz*pReader->bytes_per_pixel);

    pSrc = (alt_u8 *)image->data;
    pDes = image_dest;
    for(y=0;y<image->biHeight;y++){
 400543c:	e0bff917 	ldw	r2,-28(fp)
 4005440:	10800044 	addi	r2,r2,1
 4005444:	e0bff915 	stw	r2,-28(fp)
 4005448:	003fd706 	br	40053a8 <__reset+0xfb0043a8>
        memcpy(pDes, pSrc, image->biWidth * 4);
        pSrc += image->biWidth * 4;
        pDes += pReader->width * 4;
    }

    free_gimp_bmp_data( image );
 400544c:	e13ffa17 	ldw	r4,-24(fp)
 4005450:	4000a800 	call	4000a80 <_Z18free_gimp_bmp_dataP13bitmap_struct>
    free( image );
 4005454:	e13ffa17 	ldw	r4,-24(fp)
 4005458:	4011bf40 	call	4011bf4 <free>
  }
}
 400545c:	0001883a 	nop
 4005460:	e037883a 	mov	sp,fp
 4005464:	dfc00117 	ldw	ra,4(sp)
 4005468:	df000017 	ldw	fp,0(sp)
 400546c:	dec00204 	addi	sp,sp,8
 4005470:	f800283a 	ret

04005474 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_>:




bool MagCalibrate(VIP_FRAME_READER *pReader, MTC2_INFO *pTouch, float *pfXoffset, float *pfYoffset, float *pfZoffset){
 4005474:	deff6904 	addi	sp,sp,-604
 4005478:	dfc09615 	stw	ra,600(sp)
 400547c:	df009515 	stw	fp,596(sp)
 4005480:	dcc09415 	stw	r19,592(sp)
 4005484:	dc809315 	stw	r18,588(sp)
 4005488:	dc409215 	stw	r17,584(sp)
 400548c:	dc009115 	stw	r16,580(sp)
 4005490:	df009504 	addi	fp,sp,596
 4005494:	e13ff815 	stw	r4,-32(fp)
 4005498:	e17ff915 	stw	r5,-28(fp)
 400549c:	e1bffa15 	stw	r6,-24(fp)
 40054a0:	e1fffb15 	stw	r7,-20(fp)
	MPU9250 mpu(MPU_I2C_OPENCORES_BASE);
 40054a4:	e0bf7f04 	addi	r2,fp,-516
 40054a8:	01803404 	movi	r6,208
 40054ac:	01424034 	movhi	r5,2304
 40054b0:	29482004 	addi	r5,r5,8320
 40054b4:	1009883a 	mov	r4,r2
 40054b8:	40075ac0 	call	40075ac <_ZN7MPU9250C1Emh>
	bool bSuccess = false, bDone = false;
 40054bc:	e03f7405 	stb	zero,-560(fp)
 40054c0:	e03f7445 	stb	zero,-559(fp)
	float fXmaxi=-999, fXmini=999;
 40054c4:	00b11eb4 	movhi	r2,50298
 40054c8:	10b00004 	addi	r2,r2,-16384
 40054cc:	e0bf7515 	stw	r2,-556(fp)
 40054d0:	00911eb4 	movhi	r2,17530
 40054d4:	10b00004 	addi	r2,r2,-16384
 40054d8:	e0bf7615 	stw	r2,-552(fp)
	float fYmaxi=-999, fYmini=999;
 40054dc:	00b11eb4 	movhi	r2,50298
 40054e0:	10b00004 	addi	r2,r2,-16384
 40054e4:	e0bf7715 	stw	r2,-548(fp)
 40054e8:	00911eb4 	movhi	r2,17530
 40054ec:	10b00004 	addi	r2,r2,-16384
 40054f0:	e0bf7815 	stw	r2,-544(fp)
	float fZmaxi=-999, fZmini=999;
 40054f4:	00b11eb4 	movhi	r2,50298
 40054f8:	10b00004 	addi	r2,r2,-16384
 40054fc:	e0bf7915 	stw	r2,-540(fp)
 4005500:	00911eb4 	movhi	r2,17530
 4005504:	10b00004 	addi	r2,r2,-16384
 4005508:	e0bf7a15 	stw	r2,-536(fp)
	float ax, ay, az, gx, gy, gz, mx, my, mz;
	float fXavg,fYavg,fZavg;
	POINT pt, ptStart = {100,120};
 400550c:	00801904 	movi	r2,100
 4005510:	e0bf9f15 	stw	r2,-388(fp)
 4005514:	00801e04 	movi	r2,120
 4005518:	e0bfa015 	stw	r2,-384(fp)
	char szText[256];
	int count = 0;
 400551c:	e03f7b15 	stw	zero,-532(fp)

    // touch
	alt_u8 Event, TouchNum;
	int X1, Y1, X2, Y2, X3, Y3, X4, Y4, X5, Y5;

	RECT rcFinished = {400, 600, 250, 310};
 4005520:	00806404 	movi	r2,400
 4005524:	e0bfec15 	stw	r2,-80(fp)
 4005528:	00809604 	movi	r2,600
 400552c:	e0bfed15 	stw	r2,-76(fp)
 4005530:	00803e84 	movi	r2,250
 4005534:	e0bfee15 	stw	r2,-72(fp)
 4005538:	00804d84 	movi	r2,310
 400553c:	e0bfef15 	stw	r2,-68(fp)
	RECT rcYes = {100, 300, 350, 410};
 4005540:	00801904 	movi	r2,100
 4005544:	e0bff015 	stw	r2,-64(fp)
 4005548:	00804b04 	movi	r2,300
 400554c:	e0bff115 	stw	r2,-60(fp)
 4005550:	00805784 	movi	r2,350
 4005554:	e0bff215 	stw	r2,-56(fp)
 4005558:	00806684 	movi	r2,410
 400555c:	e0bff315 	stw	r2,-52(fp)
	RECT rcNo = {500, 700, 350, 410};
 4005560:	00807d04 	movi	r2,500
 4005564:	e0bff415 	stw	r2,-48(fp)
 4005568:	0080af04 	movi	r2,700
 400556c:	e0bff515 	stw	r2,-44(fp)
 4005570:	00805784 	movi	r2,350
 4005574:	e0bff615 	stw	r2,-40(fp)
 4005578:	00806684 	movi	r2,410
 400557c:	e0bff715 	stw	r2,-36(fp)

	/////////////////////////////////////
	// show hint
	vid_clean_screen(pReader, COLOR_BLACK);
 4005580:	000b883a 	mov	r5,zero
 4005584:	e13ff817 	ldw	r4,-32(fp)
 4005588:	40012680 	call	4001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>
	VIPFR_ActiveDrawFrame(pReader);
 400558c:	e13ff817 	ldw	r4,-32(fp)
 4005590:	400a8c80 	call	400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>

	vid_clean_screen(pReader, COLOR_BLACK);
 4005594:	000b883a 	mov	r5,zero
 4005598:	e13ff817 	ldw	r4,-32(fp)
 400559c:	40012680 	call	4001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>
	pt = ptStart;
 40055a0:	e0bf9f17 	ldw	r2,-388(fp)
 40055a4:	e0bf9d15 	stw	r2,-396(fp)
 40055a8:	e0bfa017 	ldw	r2,-384(fp)
 40055ac:	e0bf9e15 	stw	r2,-392(fp)

    sprintf(szText, "%s", "Rotate the VEEK-MTL2 1-2 times around each of");
 40055b0:	e0bfa104 	addi	r2,fp,-380
 40055b4:	00d85d34 	movhi	r3,24948
 40055b8:	18dbd484 	addi	r3,r3,28498
 40055bc:	10c00015 	stw	r3,0(r2)
 40055c0:	00dd0834 	movhi	r3,29728
 40055c4:	18d95d04 	addi	r3,r3,25972
 40055c8:	10c00115 	stw	r3,4(r2)
 40055cc:	00d58834 	movhi	r3,22048
 40055d0:	18d95a04 	addi	r3,r3,25960
 40055d4:	10c00215 	stw	r3,8(r2)
 40055d8:	00cb52f4 	movhi	r3,11595
 40055dc:	18d15144 	addi	r3,r3,17733
 40055e0:	10c00315 	stw	r3,12(r2)
 40055e4:	00cc9334 	movhi	r3,12876
 40055e8:	18d51344 	addi	r3,r3,21581
 40055ec:	10c00415 	stw	r3,16(r2)
 40055f0:	00cc8b74 	movhi	r3,12845
 40055f4:	18cc4804 	addi	r3,r3,12576
 40055f8:	10c00515 	stw	r3,20(r2)
 40055fc:	00db5a74 	movhi	r3,28009
 4005600:	18dd0804 	addi	r3,r3,29728
 4005604:	10c00615 	stw	r3,24(r2)
 4005608:	00d84834 	movhi	r3,24864
 400560c:	18dcd944 	addi	r3,r3,29541
 4005610:	10c00715 	stw	r3,28(r2)
 4005614:	00db9d74 	movhi	r3,28277
 4005618:	18dbdc84 	addi	r3,r3,28530
 400561c:	10c00815 	stw	r3,32(r2)
 4005620:	00d85974 	movhi	r3,24933
 4005624:	18c81904 	addi	r3,r3,8292
 4005628:	10c00915 	stw	r3,36(r2)
 400562c:	00dbc834 	movhi	r3,28448
 4005630:	18da18c4 	addi	r3,r3,26723
 4005634:	10c00a15 	stw	r3,40(r2)
 4005638:	00c01984 	movi	r3,102
 400563c:	10c00b0d 	sth	r3,44(r2)
    vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005640:	e0ff9d17 	ldw	r3,-396(fp)
 4005644:	e13f9e17 	ldw	r4,-392(fp)
 4005648:	e0bfa104 	addi	r2,fp,-380
 400564c:	d8800215 	stw	r2,8(sp)
 4005650:	e0bff817 	ldw	r2,-32(fp)
 4005654:	d8800115 	stw	r2,4(sp)
 4005658:	00810234 	movhi	r2,1032
 400565c:	10882404 	addi	r2,r2,8336
 4005660:	d8800015 	stw	r2,0(sp)
 4005664:	000f883a 	mov	r7,zero
 4005668:	01804034 	movhi	r6,256
 400566c:	31bfffc4 	addi	r6,r6,-1
 4005670:	200b883a 	mov	r5,r4
 4005674:	1809883a 	mov	r4,r3
 4005678:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    sprintf(szText, "%s", "its 3 axes then press FINISH button.");
 400567c:	e0bfa104 	addi	r2,fp,-380
 4005680:	00c81cf4 	movhi	r3,8307
 4005684:	18dd1a44 	addi	r3,r3,29801
 4005688:	10c00015 	stw	r3,0(r2)
 400568c:	00de1874 	movhi	r3,30817
 4005690:	18c80cc4 	addi	r3,r3,8243
 4005694:	10c00115 	stw	r3,4(r2)
 4005698:	00dd0834 	movhi	r3,29728
 400569c:	18dcd944 	addi	r3,r3,29541
 40056a0:	10c00215 	stw	r3,8(r2)
 40056a4:	00c81bb4 	movhi	r3,8302
 40056a8:	18d95a04 	addi	r3,r3,25960
 40056ac:	10c00315 	stw	r3,12(r2)
 40056b0:	00dcd974 	movhi	r3,29541
 40056b4:	18dc9c04 	addi	r3,r3,29296
 40056b8:	10c00415 	stw	r3,16(r2)
 40056bc:	00d251b4 	movhi	r3,18758
 40056c0:	18c81cc4 	addi	r3,r3,8307
 40056c4:	10c00515 	stw	r3,20(r2)
 40056c8:	00d214f4 	movhi	r3,18515
 40056cc:	18d25384 	addi	r3,r3,18766
 40056d0:	10c00615 	stw	r3,24(r2)
 40056d4:	00dd1d74 	movhi	r3,29813
 40056d8:	18d88804 	addi	r3,r3,25120
 40056dc:	10c00715 	stw	r3,28(r2)
 40056e0:	00cb9bb4 	movhi	r3,11886
 40056e4:	18dbdd04 	addi	r3,r3,28532
 40056e8:	10c00815 	stw	r3,32(r2)
 40056ec:	10000905 	stb	zero,36(r2)
    vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 40056f0:	e0ff9d17 	ldw	r3,-396(fp)
 40056f4:	e0bf9e17 	ldw	r2,-392(fp)
 40056f8:	11000784 	addi	r4,r2,30
 40056fc:	e0bfa104 	addi	r2,fp,-380
 4005700:	d8800215 	stw	r2,8(sp)
 4005704:	e0bff817 	ldw	r2,-32(fp)
 4005708:	d8800115 	stw	r2,4(sp)
 400570c:	00810234 	movhi	r2,1032
 4005710:	10882404 	addi	r2,r2,8336
 4005714:	d8800015 	stw	r2,0(sp)
 4005718:	000f883a 	mov	r7,zero
 400571c:	01804034 	movhi	r6,256
 4005720:	31bfffc4 	addi	r6,r6,-1
 4005724:	200b883a 	mov	r5,r4
 4005728:	1809883a 	mov	r4,r3
 400572c:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    // draw hint graphic
    DrawImage(pReader, &rotate_xyz_360_image, pt.x+30, pt.y+90);
 4005730:	e0bf9d17 	ldw	r2,-396(fp)
 4005734:	10c00784 	addi	r3,r2,30
 4005738:	e0bf9e17 	ldw	r2,-392(fp)
 400573c:	10801684 	addi	r2,r2,90
 4005740:	100f883a 	mov	r7,r2
 4005744:	180d883a 	mov	r6,r3
 4005748:	01410474 	movhi	r5,1041
 400574c:	29537304 	addi	r5,r5,19916
 4005750:	e13ff817 	ldw	r4,-32(fp)
 4005754:	40053040 	call	4005304 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>

    // draw Finished button
    DrawButton(pReader, rcFinished, "Finished");
 4005758:	e0bfec04 	addi	r2,fp,-80
 400575c:	01810234 	movhi	r6,1032
 4005760:	3185d604 	addi	r6,r6,5976
 4005764:	100b883a 	mov	r5,r2
 4005768:	e13ff817 	ldw	r4,-32(fp)
 400576c:	40051e00 	call	40051e0 <_Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc>

	VIPFR_ActiveDrawFrame(pReader);
 4005770:	e13ff817 	ldw	r4,-32(fp)
 4005774:	400a8c80 	call	400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>



	// recode data
	mpu.initialize();
 4005778:	e0bf7f04 	addi	r2,fp,-516
 400577c:	01800044 	movi	r6,1
 4005780:	01400044 	movi	r5,1
 4005784:	1009883a 	mov	r4,r2
 4005788:	40078200 	call	4007820 <_ZN7MPU925010initializeEii>
	while(!bDone){
 400578c:	e0bf7443 	ldbu	r2,-559(fp)
 4005790:	1000631e 	bne	r2,zero,4005920 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x4ac>
		count++;
 4005794:	e0bf7b17 	ldw	r2,-532(fp)
 4005798:	10800044 	addi	r2,r2,1
 400579c:	e0bf7b15 	stw	r2,-532(fp)
		mpu.getMotion9(&ax, &ay, &az, &gx, &gy, &gz, &mx, &my, &mz);
 40057a0:	e1bf9604 	addi	r6,fp,-424
 40057a4:	e17f9504 	addi	r5,fp,-428
 40057a8:	e13f9404 	addi	r4,fp,-432
 40057ac:	e0ff7f04 	addi	r3,fp,-516
 40057b0:	e0bf9c04 	addi	r2,fp,-400
 40057b4:	d8800515 	stw	r2,20(sp)
 40057b8:	e0bf9b04 	addi	r2,fp,-404
 40057bc:	d8800415 	stw	r2,16(sp)
 40057c0:	e0bf9a04 	addi	r2,fp,-408
 40057c4:	d8800315 	stw	r2,12(sp)
 40057c8:	e0bf9904 	addi	r2,fp,-412
 40057cc:	d8800215 	stw	r2,8(sp)
 40057d0:	e0bf9804 	addi	r2,fp,-416
 40057d4:	d8800115 	stw	r2,4(sp)
 40057d8:	e0bf9704 	addi	r2,fp,-420
 40057dc:	d8800015 	stw	r2,0(sp)
 40057e0:	300f883a 	mov	r7,r6
 40057e4:	280d883a 	mov	r6,r5
 40057e8:	200b883a 	mov	r5,r4
 40057ec:	1809883a 	mov	r4,r3
 40057f0:	400889c0 	call	400889c <_ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_>
		printf("%.2f,%.2f,%.2f\r\n", mx, my, mz);
 40057f4:	e0bf9a17 	ldw	r2,-408(fp)
 40057f8:	1009883a 	mov	r4,r2
 40057fc:	40118b40 	call	40118b4 <__extendsfdf2>
 4005800:	1025883a 	mov	r18,r2
 4005804:	1827883a 	mov	r19,r3
 4005808:	e0bf9b17 	ldw	r2,-404(fp)
 400580c:	1009883a 	mov	r4,r2
 4005810:	40118b40 	call	40118b4 <__extendsfdf2>
 4005814:	1021883a 	mov	r16,r2
 4005818:	1823883a 	mov	r17,r3
 400581c:	e0bf9c17 	ldw	r2,-400(fp)
 4005820:	1009883a 	mov	r4,r2
 4005824:	40118b40 	call	40118b4 <__extendsfdf2>
 4005828:	1009883a 	mov	r4,r2
 400582c:	180b883a 	mov	r5,r3
 4005830:	d9000115 	stw	r4,4(sp)
 4005834:	d9400215 	stw	r5,8(sp)
 4005838:	dc400015 	stw	r17,0(sp)
 400583c:	800f883a 	mov	r7,r16
 4005840:	900b883a 	mov	r5,r18
 4005844:	980d883a 	mov	r6,r19
 4005848:	01010234 	movhi	r4,1032
 400584c:	2105d904 	addi	r4,r4,5988
 4005850:	40126b40 	call	40126b4 <printf>

		// x
		if (mx > fXmaxi)
 4005854:	e0bf9a17 	ldw	r2,-408(fp)
 4005858:	e17f7517 	ldw	r5,-556(fp)
 400585c:	1009883a 	mov	r4,r2
 4005860:	400e6700 	call	400e670 <__gesf2>
 4005864:	0080030e 	bge	zero,r2,4005874 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x400>
			fXmaxi = mx;
 4005868:	e0bf9a17 	ldw	r2,-408(fp)
 400586c:	e0bf7515 	stw	r2,-556(fp)
 4005870:	00000706 	br	4005890 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x41c>
		else if (mx < fXmini)
 4005874:	e0bf9a17 	ldw	r2,-408(fp)
 4005878:	e17f7617 	ldw	r5,-552(fp)
 400587c:	1009883a 	mov	r4,r2
 4005880:	400e72c0 	call	400e72c <__lesf2>
 4005884:	1000020e 	bge	r2,zero,4005890 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x41c>
			fXmini = mx;
 4005888:	e0bf9a17 	ldw	r2,-408(fp)
 400588c:	e0bf7615 	stw	r2,-552(fp)

		// y
		if (my > fYmaxi)
 4005890:	e0bf9b17 	ldw	r2,-404(fp)
 4005894:	e17f7717 	ldw	r5,-548(fp)
 4005898:	1009883a 	mov	r4,r2
 400589c:	400e6700 	call	400e670 <__gesf2>
 40058a0:	0080030e 	bge	zero,r2,40058b0 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x43c>
			fYmaxi = my;
 40058a4:	e0bf9b17 	ldw	r2,-404(fp)
 40058a8:	e0bf7715 	stw	r2,-548(fp)
 40058ac:	00000706 	br	40058cc <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x458>
		else if (my < fYmini)
 40058b0:	e0bf9b17 	ldw	r2,-404(fp)
 40058b4:	e17f7817 	ldw	r5,-544(fp)
 40058b8:	1009883a 	mov	r4,r2
 40058bc:	400e72c0 	call	400e72c <__lesf2>
 40058c0:	1000020e 	bge	r2,zero,40058cc <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x458>
			fYmini = my;
 40058c4:	e0bf9b17 	ldw	r2,-404(fp)
 40058c8:	e0bf7815 	stw	r2,-544(fp)

		// z
		if (mz > fZmaxi)
 40058cc:	e0bf9c17 	ldw	r2,-400(fp)
 40058d0:	e17f7917 	ldw	r5,-540(fp)
 40058d4:	1009883a 	mov	r4,r2
 40058d8:	400e6700 	call	400e670 <__gesf2>
 40058dc:	0080030e 	bge	zero,r2,40058ec <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x478>
			fZmaxi = mz;
 40058e0:	e0bf9c17 	ldw	r2,-400(fp)
 40058e4:	e0bf7915 	stw	r2,-540(fp)
 40058e8:	00000706 	br	4005908 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x494>
		else if (mx < fZmini)
 40058ec:	e0bf9a17 	ldw	r2,-408(fp)
 40058f0:	e17f7a17 	ldw	r5,-536(fp)
 40058f4:	1009883a 	mov	r4,r2
 40058f8:	400e72c0 	call	400e72c <__lesf2>
 40058fc:	1000020e 	bge	r2,zero,4005908 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0x494>
			fZmini = mz;
 4005900:	e0bf9c17 	ldw	r2,-400(fp)
 4005904:	e0bf7a15 	stw	r2,-536(fp)

		bDone = IsTouched(pTouch, rcFinished);
 4005908:	e0bfec04 	addi	r2,fp,-80
 400590c:	100b883a 	mov	r5,r2
 4005910:	e13ff917 	ldw	r4,-28(fp)
 4005914:	40050f40 	call	40050f4 <_Z9IsTouchedP9MTC2_INFOR4RECT>
 4005918:	e0bf7445 	stb	r2,-559(fp)



	// recode data
	mpu.initialize();
	while(!bDone){
 400591c:	003f9b06 	br	400578c <__reset+0xfb00478c>

	}

	/////////////////////////////////////
	// show result and ask to confirm the result
	vid_clean_screen(pReader, COLOR_BLACK);
 4005920:	000b883a 	mov	r5,zero
 4005924:	e13ff817 	ldw	r4,-32(fp)
 4005928:	40012680 	call	4001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>

	fXavg = (fXmaxi + fXmini)/2.0;
 400592c:	e17f7617 	ldw	r5,-552(fp)
 4005930:	e13f7517 	ldw	r4,-556(fp)
 4005934:	400dd680 	call	400dd68 <__addsf3>
 4005938:	1007883a 	mov	r3,r2
 400593c:	1805883a 	mov	r2,r3
 4005940:	01500034 	movhi	r5,16384
 4005944:	1009883a 	mov	r4,r2
 4005948:	400e2300 	call	400e230 <__divsf3>
 400594c:	1007883a 	mov	r3,r2
 4005950:	e0ff7c15 	stw	r3,-528(fp)
	fYavg = (fYmaxi + fYmini)/2.0;
 4005954:	e17f7817 	ldw	r5,-544(fp)
 4005958:	e13f7717 	ldw	r4,-548(fp)
 400595c:	400dd680 	call	400dd68 <__addsf3>
 4005960:	1007883a 	mov	r3,r2
 4005964:	1805883a 	mov	r2,r3
 4005968:	01500034 	movhi	r5,16384
 400596c:	1009883a 	mov	r4,r2
 4005970:	400e2300 	call	400e230 <__divsf3>
 4005974:	1007883a 	mov	r3,r2
 4005978:	e0ff7d15 	stw	r3,-524(fp)
	fZavg = (fZmaxi + fZmini)/2.0;
 400597c:	e17f7a17 	ldw	r5,-536(fp)
 4005980:	e13f7917 	ldw	r4,-540(fp)
 4005984:	400dd680 	call	400dd68 <__addsf3>
 4005988:	1007883a 	mov	r3,r2
 400598c:	1805883a 	mov	r2,r3
 4005990:	01500034 	movhi	r5,16384
 4005994:	1009883a 	mov	r4,r2
 4005998:	400e2300 	call	400e230 <__divsf3>
 400599c:	1007883a 	mov	r3,r2
 40059a0:	e0ff7e15 	stw	r3,-520(fp)

	// count
    sprintf(szText, "Sample Number: %d", count);
 40059a4:	e0bfa104 	addi	r2,fp,-380
 40059a8:	e1bf7b17 	ldw	r6,-532(fp)
 40059ac:	01410234 	movhi	r5,1032
 40059b0:	2945de04 	addi	r5,r5,6008
 40059b4:	1009883a 	mov	r4,r2
 40059b8:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y-30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 40059bc:	e0ff9d17 	ldw	r3,-396(fp)
 40059c0:	e0bf9e17 	ldw	r2,-392(fp)
 40059c4:	113ff884 	addi	r4,r2,-30
 40059c8:	e0bfa104 	addi	r2,fp,-380
 40059cc:	d8800215 	stw	r2,8(sp)
 40059d0:	e0bff817 	ldw	r2,-32(fp)
 40059d4:	d8800115 	stw	r2,4(sp)
 40059d8:	00810234 	movhi	r2,1032
 40059dc:	10882404 	addi	r2,r2,8336
 40059e0:	d8800015 	stw	r2,0(sp)
 40059e4:	000f883a 	mov	r7,zero
 40059e8:	01804034 	movhi	r6,256
 40059ec:	31bfffc4 	addi	r6,r6,-1
 40059f0:	200b883a 	mov	r5,r4
 40059f4:	1809883a 	mov	r4,r3
 40059f8:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>



    // mini
    pt.x += 50;
 40059fc:	e0bf9d17 	ldw	r2,-396(fp)
 4005a00:	10800c84 	addi	r2,r2,50
 4005a04:	e0bf9d15 	stw	r2,-396(fp)
    sprintf(szText, "%s", "Minimum");
 4005a08:	e0ffa104 	addi	r3,fp,-380
 4005a0c:	009a5bb4 	movhi	r2,26990
 4005a10:	109a5344 	addi	r2,r2,26957
 4005a14:	18800015 	stw	r2,0(r3)
 4005a18:	00801b74 	movhi	r2,109
 4005a1c:	109d5b44 	addi	r2,r2,30061
 4005a20:	18800115 	stw	r2,4(r3)
    vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005a24:	e0ff9d17 	ldw	r3,-396(fp)
 4005a28:	e13f9e17 	ldw	r4,-392(fp)
 4005a2c:	e0bfa104 	addi	r2,fp,-380
 4005a30:	d8800215 	stw	r2,8(sp)
 4005a34:	e0bff817 	ldw	r2,-32(fp)
 4005a38:	d8800115 	stw	r2,4(sp)
 4005a3c:	00810234 	movhi	r2,1032
 4005a40:	10882404 	addi	r2,r2,8336
 4005a44:	d8800015 	stw	r2,0(sp)
 4005a48:	000f883a 	mov	r7,zero
 4005a4c:	01804034 	movhi	r6,256
 4005a50:	31bfffc4 	addi	r6,r6,-1
 4005a54:	200b883a 	mov	r5,r4
 4005a58:	1809883a 	mov	r4,r3
 4005a5c:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "x:%.2f", fXmini);
 4005a60:	e13f7617 	ldw	r4,-552(fp)
 4005a64:	40118b40 	call	40118b4 <__extendsfdf2>
 4005a68:	1009883a 	mov	r4,r2
 4005a6c:	180b883a 	mov	r5,r3
 4005a70:	e0bfa104 	addi	r2,fp,-380
 4005a74:	200d883a 	mov	r6,r4
 4005a78:	280f883a 	mov	r7,r5
 4005a7c:	01410234 	movhi	r5,1032
 4005a80:	2945e304 	addi	r5,r5,6028
 4005a84:	1009883a 	mov	r4,r2
 4005a88:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005a8c:	e0ff9d17 	ldw	r3,-396(fp)
 4005a90:	e0bf9e17 	ldw	r2,-392(fp)
 4005a94:	11000784 	addi	r4,r2,30
 4005a98:	e0bfa104 	addi	r2,fp,-380
 4005a9c:	d8800215 	stw	r2,8(sp)
 4005aa0:	e0bff817 	ldw	r2,-32(fp)
 4005aa4:	d8800115 	stw	r2,4(sp)
 4005aa8:	00810234 	movhi	r2,1032
 4005aac:	10882404 	addi	r2,r2,8336
 4005ab0:	d8800015 	stw	r2,0(sp)
 4005ab4:	000f883a 	mov	r7,zero
 4005ab8:	01804034 	movhi	r6,256
 4005abc:	31bfffc4 	addi	r6,r6,-1
 4005ac0:	200b883a 	mov	r5,r4
 4005ac4:	1809883a 	mov	r4,r3
 4005ac8:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "y:%.2f", fYmini);
 4005acc:	e13f7817 	ldw	r4,-544(fp)
 4005ad0:	40118b40 	call	40118b4 <__extendsfdf2>
 4005ad4:	1009883a 	mov	r4,r2
 4005ad8:	180b883a 	mov	r5,r3
 4005adc:	e0bfa104 	addi	r2,fp,-380
 4005ae0:	200d883a 	mov	r6,r4
 4005ae4:	280f883a 	mov	r7,r5
 4005ae8:	01410234 	movhi	r5,1032
 4005aec:	2945e504 	addi	r5,r5,6036
 4005af0:	1009883a 	mov	r4,r2
 4005af4:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+60, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005af8:	e0ff9d17 	ldw	r3,-396(fp)
 4005afc:	e0bf9e17 	ldw	r2,-392(fp)
 4005b00:	11000f04 	addi	r4,r2,60
 4005b04:	e0bfa104 	addi	r2,fp,-380
 4005b08:	d8800215 	stw	r2,8(sp)
 4005b0c:	e0bff817 	ldw	r2,-32(fp)
 4005b10:	d8800115 	stw	r2,4(sp)
 4005b14:	00810234 	movhi	r2,1032
 4005b18:	10882404 	addi	r2,r2,8336
 4005b1c:	d8800015 	stw	r2,0(sp)
 4005b20:	000f883a 	mov	r7,zero
 4005b24:	01804034 	movhi	r6,256
 4005b28:	31bfffc4 	addi	r6,r6,-1
 4005b2c:	200b883a 	mov	r5,r4
 4005b30:	1809883a 	mov	r4,r3
 4005b34:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "z:%.2f", fZmini);
 4005b38:	e13f7a17 	ldw	r4,-536(fp)
 4005b3c:	40118b40 	call	40118b4 <__extendsfdf2>
 4005b40:	1009883a 	mov	r4,r2
 4005b44:	180b883a 	mov	r5,r3
 4005b48:	e0bfa104 	addi	r2,fp,-380
 4005b4c:	200d883a 	mov	r6,r4
 4005b50:	280f883a 	mov	r7,r5
 4005b54:	01410234 	movhi	r5,1032
 4005b58:	2945e704 	addi	r5,r5,6044
 4005b5c:	1009883a 	mov	r4,r2
 4005b60:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+90, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005b64:	e0ff9d17 	ldw	r3,-396(fp)
 4005b68:	e0bf9e17 	ldw	r2,-392(fp)
 4005b6c:	11001684 	addi	r4,r2,90
 4005b70:	e0bfa104 	addi	r2,fp,-380
 4005b74:	d8800215 	stw	r2,8(sp)
 4005b78:	e0bff817 	ldw	r2,-32(fp)
 4005b7c:	d8800115 	stw	r2,4(sp)
 4005b80:	00810234 	movhi	r2,1032
 4005b84:	10882404 	addi	r2,r2,8336
 4005b88:	d8800015 	stw	r2,0(sp)
 4005b8c:	000f883a 	mov	r7,zero
 4005b90:	01804034 	movhi	r6,256
 4005b94:	31bfffc4 	addi	r6,r6,-1
 4005b98:	200b883a 	mov	r5,r4
 4005b9c:	1809883a 	mov	r4,r3
 4005ba0:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    // max
    pt.x += 180;
 4005ba4:	e0bf9d17 	ldw	r2,-396(fp)
 4005ba8:	10802d04 	addi	r2,r2,180
 4005bac:	e0bf9d15 	stw	r2,-396(fp)
    sprintf(szText, "%s", "Maximum");
 4005bb0:	e0ffa104 	addi	r3,fp,-380
 4005bb4:	009a5e34 	movhi	r2,27000
 4005bb8:	10985344 	addi	r2,r2,24909
 4005bbc:	18800015 	stw	r2,0(r3)
 4005bc0:	00801b74 	movhi	r2,109
 4005bc4:	109d5b44 	addi	r2,r2,30061
 4005bc8:	18800115 	stw	r2,4(r3)
    vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005bcc:	e0ff9d17 	ldw	r3,-396(fp)
 4005bd0:	e13f9e17 	ldw	r4,-392(fp)
 4005bd4:	e0bfa104 	addi	r2,fp,-380
 4005bd8:	d8800215 	stw	r2,8(sp)
 4005bdc:	e0bff817 	ldw	r2,-32(fp)
 4005be0:	d8800115 	stw	r2,4(sp)
 4005be4:	00810234 	movhi	r2,1032
 4005be8:	10882404 	addi	r2,r2,8336
 4005bec:	d8800015 	stw	r2,0(sp)
 4005bf0:	000f883a 	mov	r7,zero
 4005bf4:	01804034 	movhi	r6,256
 4005bf8:	31bfffc4 	addi	r6,r6,-1
 4005bfc:	200b883a 	mov	r5,r4
 4005c00:	1809883a 	mov	r4,r3
 4005c04:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "x:%.2f", fXmaxi);
 4005c08:	e13f7517 	ldw	r4,-556(fp)
 4005c0c:	40118b40 	call	40118b4 <__extendsfdf2>
 4005c10:	1009883a 	mov	r4,r2
 4005c14:	180b883a 	mov	r5,r3
 4005c18:	e0bfa104 	addi	r2,fp,-380
 4005c1c:	200d883a 	mov	r6,r4
 4005c20:	280f883a 	mov	r7,r5
 4005c24:	01410234 	movhi	r5,1032
 4005c28:	2945e304 	addi	r5,r5,6028
 4005c2c:	1009883a 	mov	r4,r2
 4005c30:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005c34:	e0ff9d17 	ldw	r3,-396(fp)
 4005c38:	e0bf9e17 	ldw	r2,-392(fp)
 4005c3c:	11000784 	addi	r4,r2,30
 4005c40:	e0bfa104 	addi	r2,fp,-380
 4005c44:	d8800215 	stw	r2,8(sp)
 4005c48:	e0bff817 	ldw	r2,-32(fp)
 4005c4c:	d8800115 	stw	r2,4(sp)
 4005c50:	00810234 	movhi	r2,1032
 4005c54:	10882404 	addi	r2,r2,8336
 4005c58:	d8800015 	stw	r2,0(sp)
 4005c5c:	000f883a 	mov	r7,zero
 4005c60:	01804034 	movhi	r6,256
 4005c64:	31bfffc4 	addi	r6,r6,-1
 4005c68:	200b883a 	mov	r5,r4
 4005c6c:	1809883a 	mov	r4,r3
 4005c70:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "y:%.2f", fYmaxi);
 4005c74:	e13f7717 	ldw	r4,-548(fp)
 4005c78:	40118b40 	call	40118b4 <__extendsfdf2>
 4005c7c:	1009883a 	mov	r4,r2
 4005c80:	180b883a 	mov	r5,r3
 4005c84:	e0bfa104 	addi	r2,fp,-380
 4005c88:	200d883a 	mov	r6,r4
 4005c8c:	280f883a 	mov	r7,r5
 4005c90:	01410234 	movhi	r5,1032
 4005c94:	2945e504 	addi	r5,r5,6036
 4005c98:	1009883a 	mov	r4,r2
 4005c9c:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+60, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005ca0:	e0ff9d17 	ldw	r3,-396(fp)
 4005ca4:	e0bf9e17 	ldw	r2,-392(fp)
 4005ca8:	11000f04 	addi	r4,r2,60
 4005cac:	e0bfa104 	addi	r2,fp,-380
 4005cb0:	d8800215 	stw	r2,8(sp)
 4005cb4:	e0bff817 	ldw	r2,-32(fp)
 4005cb8:	d8800115 	stw	r2,4(sp)
 4005cbc:	00810234 	movhi	r2,1032
 4005cc0:	10882404 	addi	r2,r2,8336
 4005cc4:	d8800015 	stw	r2,0(sp)
 4005cc8:	000f883a 	mov	r7,zero
 4005ccc:	01804034 	movhi	r6,256
 4005cd0:	31bfffc4 	addi	r6,r6,-1
 4005cd4:	200b883a 	mov	r5,r4
 4005cd8:	1809883a 	mov	r4,r3
 4005cdc:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "z:%.2f", fZmaxi);
 4005ce0:	e13f7917 	ldw	r4,-540(fp)
 4005ce4:	40118b40 	call	40118b4 <__extendsfdf2>
 4005ce8:	1009883a 	mov	r4,r2
 4005cec:	180b883a 	mov	r5,r3
 4005cf0:	e0bfa104 	addi	r2,fp,-380
 4005cf4:	200d883a 	mov	r6,r4
 4005cf8:	280f883a 	mov	r7,r5
 4005cfc:	01410234 	movhi	r5,1032
 4005d00:	2945e704 	addi	r5,r5,6044
 4005d04:	1009883a 	mov	r4,r2
 4005d08:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+90, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005d0c:	e0ff9d17 	ldw	r3,-396(fp)
 4005d10:	e0bf9e17 	ldw	r2,-392(fp)
 4005d14:	11001684 	addi	r4,r2,90
 4005d18:	e0bfa104 	addi	r2,fp,-380
 4005d1c:	d8800215 	stw	r2,8(sp)
 4005d20:	e0bff817 	ldw	r2,-32(fp)
 4005d24:	d8800115 	stw	r2,4(sp)
 4005d28:	00810234 	movhi	r2,1032
 4005d2c:	10882404 	addi	r2,r2,8336
 4005d30:	d8800015 	stw	r2,0(sp)
 4005d34:	000f883a 	mov	r7,zero
 4005d38:	01804034 	movhi	r6,256
 4005d3c:	31bfffc4 	addi	r6,r6,-1
 4005d40:	200b883a 	mov	r5,r4
 4005d44:	1809883a 	mov	r4,r3
 4005d48:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    // avg
    pt.x += 180;
 4005d4c:	e0bf9d17 	ldw	r2,-396(fp)
 4005d50:	10802d04 	addi	r2,r2,180
 4005d54:	e0bf9d15 	stw	r2,-396(fp)
    sprintf(szText, "%s", "Average");
 4005d58:	e0ffa104 	addi	r3,fp,-380
 4005d5c:	009c9974 	movhi	r2,29285
 4005d60:	109d9044 	addi	r2,r2,30273
 4005d64:	18800015 	stw	r2,0(r3)
 4005d68:	00801974 	movhi	r2,101
 4005d6c:	1099d844 	addi	r2,r2,26465
 4005d70:	18800115 	stw	r2,4(r3)
    vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005d74:	e0ff9d17 	ldw	r3,-396(fp)
 4005d78:	e13f9e17 	ldw	r4,-392(fp)
 4005d7c:	e0bfa104 	addi	r2,fp,-380
 4005d80:	d8800215 	stw	r2,8(sp)
 4005d84:	e0bff817 	ldw	r2,-32(fp)
 4005d88:	d8800115 	stw	r2,4(sp)
 4005d8c:	00810234 	movhi	r2,1032
 4005d90:	10882404 	addi	r2,r2,8336
 4005d94:	d8800015 	stw	r2,0(sp)
 4005d98:	000f883a 	mov	r7,zero
 4005d9c:	01804034 	movhi	r6,256
 4005da0:	31bfffc4 	addi	r6,r6,-1
 4005da4:	200b883a 	mov	r5,r4
 4005da8:	1809883a 	mov	r4,r3
 4005dac:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "x:%.2f", fXavg);
 4005db0:	e13f7c17 	ldw	r4,-528(fp)
 4005db4:	40118b40 	call	40118b4 <__extendsfdf2>
 4005db8:	1009883a 	mov	r4,r2
 4005dbc:	180b883a 	mov	r5,r3
 4005dc0:	e0bfa104 	addi	r2,fp,-380
 4005dc4:	200d883a 	mov	r6,r4
 4005dc8:	280f883a 	mov	r7,r5
 4005dcc:	01410234 	movhi	r5,1032
 4005dd0:	2945e304 	addi	r5,r5,6028
 4005dd4:	1009883a 	mov	r4,r2
 4005dd8:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005ddc:	e0ff9d17 	ldw	r3,-396(fp)
 4005de0:	e0bf9e17 	ldw	r2,-392(fp)
 4005de4:	11000784 	addi	r4,r2,30
 4005de8:	e0bfa104 	addi	r2,fp,-380
 4005dec:	d8800215 	stw	r2,8(sp)
 4005df0:	e0bff817 	ldw	r2,-32(fp)
 4005df4:	d8800115 	stw	r2,4(sp)
 4005df8:	00810234 	movhi	r2,1032
 4005dfc:	10882404 	addi	r2,r2,8336
 4005e00:	d8800015 	stw	r2,0(sp)
 4005e04:	000f883a 	mov	r7,zero
 4005e08:	01804034 	movhi	r6,256
 4005e0c:	31bfffc4 	addi	r6,r6,-1
 4005e10:	200b883a 	mov	r5,r4
 4005e14:	1809883a 	mov	r4,r3
 4005e18:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "y:%.2f", fYavg);
 4005e1c:	e13f7d17 	ldw	r4,-524(fp)
 4005e20:	40118b40 	call	40118b4 <__extendsfdf2>
 4005e24:	1009883a 	mov	r4,r2
 4005e28:	180b883a 	mov	r5,r3
 4005e2c:	e0bfa104 	addi	r2,fp,-380
 4005e30:	200d883a 	mov	r6,r4
 4005e34:	280f883a 	mov	r7,r5
 4005e38:	01410234 	movhi	r5,1032
 4005e3c:	2945e504 	addi	r5,r5,6036
 4005e40:	1009883a 	mov	r4,r2
 4005e44:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+60, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005e48:	e0ff9d17 	ldw	r3,-396(fp)
 4005e4c:	e0bf9e17 	ldw	r2,-392(fp)
 4005e50:	11000f04 	addi	r4,r2,60
 4005e54:	e0bfa104 	addi	r2,fp,-380
 4005e58:	d8800215 	stw	r2,8(sp)
 4005e5c:	e0bff817 	ldw	r2,-32(fp)
 4005e60:	d8800115 	stw	r2,4(sp)
 4005e64:	00810234 	movhi	r2,1032
 4005e68:	10882404 	addi	r2,r2,8336
 4005e6c:	d8800015 	stw	r2,0(sp)
 4005e70:	000f883a 	mov	r7,zero
 4005e74:	01804034 	movhi	r6,256
 4005e78:	31bfffc4 	addi	r6,r6,-1
 4005e7c:	200b883a 	mov	r5,r4
 4005e80:	1809883a 	mov	r4,r3
 4005e84:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
    sprintf(szText, "z:%.2f", fZavg);
 4005e88:	e13f7e17 	ldw	r4,-520(fp)
 4005e8c:	40118b40 	call	40118b4 <__extendsfdf2>
 4005e90:	1009883a 	mov	r4,r2
 4005e94:	180b883a 	mov	r5,r3
 4005e98:	e0bfa104 	addi	r2,fp,-380
 4005e9c:	200d883a 	mov	r6,r4
 4005ea0:	280f883a 	mov	r7,r5
 4005ea4:	01410234 	movhi	r5,1032
 4005ea8:	2945e704 	addi	r5,r5,6044
 4005eac:	1009883a 	mov	r4,r2
 4005eb0:	40128700 	call	4012870 <sprintf>
    vid_print_string_alpha(pt.x, pt.y+90, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005eb4:	e0ff9d17 	ldw	r3,-396(fp)
 4005eb8:	e0bf9e17 	ldw	r2,-392(fp)
 4005ebc:	11001684 	addi	r4,r2,90
 4005ec0:	e0bfa104 	addi	r2,fp,-380
 4005ec4:	d8800215 	stw	r2,8(sp)
 4005ec8:	e0bff817 	ldw	r2,-32(fp)
 4005ecc:	d8800115 	stw	r2,4(sp)
 4005ed0:	00810234 	movhi	r2,1032
 4005ed4:	10882404 	addi	r2,r2,8336
 4005ed8:	d8800015 	stw	r2,0(sp)
 4005edc:	000f883a 	mov	r7,zero
 4005ee0:	01804034 	movhi	r6,256
 4005ee4:	31bfffc4 	addi	r6,r6,-1
 4005ee8:	200b883a 	mov	r5,r4
 4005eec:	1809883a 	mov	r4,r3
 4005ef0:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    pt.x = ptStart.x;
 4005ef4:	e0bf9f17 	ldw	r2,-388(fp)
 4005ef8:	e0bf9d15 	stw	r2,-396(fp)
    pt.y = ptStart.y + 150;
 4005efc:	e0bfa017 	ldw	r2,-384(fp)
 4005f00:	10802584 	addi	r2,r2,150
 4005f04:	e0bf9e15 	stw	r2,-392(fp)
    sprintf(szText, "%s", "Do you want to apply this calibration result?");
 4005f08:	e0bfa104 	addi	r2,fp,-380
 4005f0c:	00de4834 	movhi	r3,31008
 4005f10:	18dbd104 	addi	r3,r3,28484
 4005f14:	10c00015 	stw	r3,0(r2)
 4005f18:	00ddc834 	movhi	r3,30496
 4005f1c:	18dd5bc4 	addi	r3,r3,30063
 4005f20:	10c00115 	stw	r3,4(r2)
 4005f24:	00c81d34 	movhi	r3,8308
 4005f28:	18db9844 	addi	r3,r3,28257
 4005f2c:	10c00215 	stw	r3,8(r2)
 4005f30:	00d84834 	movhi	r3,24864
 4005f34:	18dbdd04 	addi	r3,r3,28532
 4005f38:	10c00315 	stw	r3,12(r2)
 4005f3c:	00de5b34 	movhi	r3,31084
 4005f40:	18dc1c04 	addi	r3,r3,28784
 4005f44:	10c00415 	stw	r3,16(r2)
 4005f48:	00da5a34 	movhi	r3,26984
 4005f4c:	18dd0804 	addi	r3,r3,29728
 4005f50:	10c00515 	stw	r3,20(r2)
 4005f54:	00d858f4 	movhi	r3,24931
 4005f58:	18c81cc4 	addi	r3,r3,8307
 4005f5c:	10c00615 	stw	r3,24(r2)
 4005f60:	00dc98b4 	movhi	r3,29282
 4005f64:	18da5b04 	addi	r3,r3,26988
 4005f68:	10c00715 	stw	r3,28(r2)
 4005f6c:	00dbda74 	movhi	r3,28521
 4005f70:	18dd1844 	addi	r3,r3,29793
 4005f74:	10c00815 	stw	r3,32(r2)
 4005f78:	00d95cb4 	movhi	r3,25970
 4005f7c:	18c81b84 	addi	r3,r3,8302
 4005f80:	10c00915 	stw	r3,36(r2)
 4005f84:	00dd1b34 	movhi	r3,29804
 4005f88:	18dd5cc4 	addi	r3,r3,30067
 4005f8c:	10c00a15 	stw	r3,40(r2)
 4005f90:	00c00fc4 	movi	r3,63
 4005f94:	10c00b0d 	sth	r3,44(r2)
    vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4005f98:	e0ff9d17 	ldw	r3,-396(fp)
 4005f9c:	e13f9e17 	ldw	r4,-392(fp)
 4005fa0:	e0bfa104 	addi	r2,fp,-380
 4005fa4:	d8800215 	stw	r2,8(sp)
 4005fa8:	e0bff817 	ldw	r2,-32(fp)
 4005fac:	d8800115 	stw	r2,4(sp)
 4005fb0:	00810234 	movhi	r2,1032
 4005fb4:	10882404 	addi	r2,r2,8336
 4005fb8:	d8800015 	stw	r2,0(sp)
 4005fbc:	000f883a 	mov	r7,zero
 4005fc0:	01804034 	movhi	r6,256
 4005fc4:	31bfffc4 	addi	r6,r6,-1
 4005fc8:	200b883a 	mov	r5,r4
 4005fcc:	1809883a 	mov	r4,r3
 4005fd0:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

    // draw buttons
    DrawButton(pReader, rcYes, "Yes");
 4005fd4:	e0bff004 	addi	r2,fp,-64
 4005fd8:	01810234 	movhi	r6,1032
 4005fdc:	3185e904 	addi	r6,r6,6052
 4005fe0:	100b883a 	mov	r5,r2
 4005fe4:	e13ff817 	ldw	r4,-32(fp)
 4005fe8:	40051e00 	call	40051e0 <_Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc>
    DrawButton(pReader, rcNo, "No");
 4005fec:	e0bff404 	addi	r2,fp,-48
 4005ff0:	01810234 	movhi	r6,1032
 4005ff4:	3185ea04 	addi	r6,r6,6056
 4005ff8:	100b883a 	mov	r5,r2
 4005ffc:	e13ff817 	ldw	r4,-32(fp)
 4006000:	40051e00 	call	40051e0 <_Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc>


    VIPFR_ActiveDrawFrame(pReader);
 4006004:	e13ff817 	ldw	r4,-32(fp)
 4006008:	400a8c80 	call	400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>

    //////////////////////////////
    // wait user confirm
    bDone = false;
 400600c:	e03f7445 	stb	zero,-559(fp)
    while(!bDone){
 4006010:	e0bf7443 	ldbu	r2,-559(fp)
 4006014:	10003a1e 	bne	r2,zero,4006100 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0xc8c>
	   if (MTC2_GetStatus(pTouch, &Event, &TouchNum,&X1, &Y1,&X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)){
 4006018:	e17fe204 	addi	r5,fp,-120
 400601c:	e13fe144 	addi	r4,fp,-123
 4006020:	e0ffe104 	addi	r3,fp,-124
 4006024:	e0bfeb04 	addi	r2,fp,-84
 4006028:	d8800815 	stw	r2,32(sp)
 400602c:	e0bfea04 	addi	r2,fp,-88
 4006030:	d8800715 	stw	r2,28(sp)
 4006034:	e0bfe904 	addi	r2,fp,-92
 4006038:	d8800615 	stw	r2,24(sp)
 400603c:	e0bfe804 	addi	r2,fp,-96
 4006040:	d8800515 	stw	r2,20(sp)
 4006044:	e0bfe704 	addi	r2,fp,-100
 4006048:	d8800415 	stw	r2,16(sp)
 400604c:	e0bfe604 	addi	r2,fp,-104
 4006050:	d8800315 	stw	r2,12(sp)
 4006054:	e0bfe504 	addi	r2,fp,-108
 4006058:	d8800215 	stw	r2,8(sp)
 400605c:	e0bfe404 	addi	r2,fp,-112
 4006060:	d8800115 	stw	r2,4(sp)
 4006064:	e0bfe304 	addi	r2,fp,-116
 4006068:	d8800015 	stw	r2,0(sp)
 400606c:	280f883a 	mov	r7,r5
 4006070:	200d883a 	mov	r6,r4
 4006074:	180b883a 	mov	r5,r3
 4006078:	e13ff917 	ldw	r4,-28(fp)
 400607c:	400a1bc0 	call	400a1bc <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_>
 4006080:	10803fcc 	andi	r2,r2,255
 4006084:	103fe226 	beq	r2,zero,4006010 <__reset+0xfb005010>
		   if (TouchNum == 1){
 4006088:	e0bfe143 	ldbu	r2,-123(fp)
 400608c:	10803fcc 	andi	r2,r2,255
 4006090:	10800058 	cmpnei	r2,r2,1
 4006094:	103fde1e 	bne	r2,zero,4006010 <__reset+0xfb005010>
			   pt.x = X1;
 4006098:	e0bfe217 	ldw	r2,-120(fp)
 400609c:	e0bf9d15 	stw	r2,-396(fp)
			   pt.y = Y1;
 40060a0:	e0bfe317 	ldw	r2,-116(fp)
 40060a4:	e0bf9e15 	stw	r2,-392(fp)
			   if (IsPtInRect(&pt, &rcYes)){
 40060a8:	e0fff004 	addi	r3,fp,-64
 40060ac:	e0bf9d04 	addi	r2,fp,-396
 40060b0:	180b883a 	mov	r5,r3
 40060b4:	1009883a 	mov	r4,r2
 40060b8:	400028c0 	call	400028c <_Z10IsPtInRectP5POINTP4RECT>
 40060bc:	10803fcc 	andi	r2,r2,255
 40060c0:	10000526 	beq	r2,zero,40060d8 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0xc64>
				   bSuccess = true;
 40060c4:	00800044 	movi	r2,1
 40060c8:	e0bf7405 	stb	r2,-560(fp)
				   bDone = true;
 40060cc:	00800044 	movi	r2,1
 40060d0:	e0bf7445 	stb	r2,-559(fp)
 40060d4:	003fce06 	br	4006010 <__reset+0xfb005010>
			   }else  if (IsPtInRect(&pt, &rcNo)){
 40060d8:	e0fff404 	addi	r3,fp,-48
 40060dc:	e0bf9d04 	addi	r2,fp,-396
 40060e0:	180b883a 	mov	r5,r3
 40060e4:	1009883a 	mov	r4,r2
 40060e8:	400028c0 	call	400028c <_Z10IsPtInRectP5POINTP4RECT>
 40060ec:	10803fcc 	andi	r2,r2,255
 40060f0:	103fc726 	beq	r2,zero,4006010 <__reset+0xfb005010>
				   bDone = true;
 40060f4:	00800044 	movi	r2,1
 40060f8:	e0bf7445 	stb	r2,-559(fp)
    VIPFR_ActiveDrawFrame(pReader);

    //////////////////////////////
    // wait user confirm
    bDone = false;
    while(!bDone){
 40060fc:	003fc406 	br	4006010 <__reset+0xfb005010>
				   bDone = true;
			   }
		   } // if
	   }  // if
	} // while
    MTC2_ClearEvent(pTouch);
 4006100:	e13ff917 	ldw	r4,-28(fp)
 4006104:	400a3280 	call	400a328 <_Z15MTC2_ClearEventP9MTC2_INFO>


	if (bSuccess){
 4006108:	e0bf7403 	ldbu	r2,-560(fp)
 400610c:	10000926 	beq	r2,zero,4006134 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_+0xcc0>
		*pfXoffset = fXavg;
 4006110:	e0bffa17 	ldw	r2,-24(fp)
 4006114:	e0ff7c17 	ldw	r3,-528(fp)
 4006118:	10c00015 	stw	r3,0(r2)
		*pfYoffset = fYavg;
 400611c:	e0bffb17 	ldw	r2,-20(fp)
 4006120:	e0ff7d17 	ldw	r3,-524(fp)
 4006124:	10c00015 	stw	r3,0(r2)
		*pfZoffset = fZavg;
 4006128:	e0800217 	ldw	r2,8(fp)
 400612c:	e0ff7e17 	ldw	r3,-520(fp)
 4006130:	10c00015 	stw	r3,0(r2)
	}


	return bSuccess;
 4006134:	e0bf7403 	ldbu	r2,-560(fp)
}
 4006138:	e6fffc04 	addi	sp,fp,-16
 400613c:	dfc00517 	ldw	ra,20(sp)
 4006140:	df000417 	ldw	fp,16(sp)
 4006144:	dcc00317 	ldw	r19,12(sp)
 4006148:	dc800217 	ldw	r18,8(sp)
 400614c:	dc400117 	ldw	r17,4(sp)
 4006150:	dc000017 	ldw	r16,0(sp)
 4006154:	dec00604 	addi	sp,sp,24
 4006158:	f800283a 	ret

0400615c <_Z11GUI_CompassP9MTC2_INFO>:





void GUI_Compass(MTC2_INFO *pTouch){
 400615c:	deff8f04 	addi	sp,sp,-452
 4006160:	dfc07015 	stw	ra,448(sp)
 4006164:	df006f15 	stw	fp,444(sp)
 4006168:	dc806e15 	stw	r18,440(sp)
 400616c:	dc406d15 	stw	r17,436(sp)
 4006170:	dc006c15 	stw	r16,432(sp)
 4006174:	df006f04 	addi	fp,sp,444
 4006178:	e13ffc15 	stw	r4,-16(fp)
    VIP_FRAME_READER *pReader;
    void *pBackgroundBuffer = (void *)FR_FRAME_BACKGROUND;
 400617c:	00810bf4 	movhi	r2,1071
 4006180:	10b80004 	addi	r2,r2,-8192
 4006184:	e0bf9a15 	stw	r2,-408(fp)
    int text_length;
    float dx, dy, fHead, dh, dv;
    POINT pt;
    const int nPenSize = 1;
 4006188:	00800044 	movi	r2,1
 400618c:	e0bf9b15 	stw	r2,-404(fp)
    float pitch, roll;

    // mpu
    MPU9250 mpu(MPU_I2C_OPENCORES_BASE);
 4006190:	e0bfad04 	addi	r2,fp,-332
 4006194:	01803404 	movi	r6,208
 4006198:	01424034 	movhi	r5,2304
 400619c:	29482004 	addi	r5,r5,8320
 40061a0:	1009883a 	mov	r4,r2
 40061a4:	40075ac0 	call	40075ac <_ZN7MPU9250C1Emh>
    		{-0.225,5.423,-0.144},
    		{0.93,2.079,4.539}
    };
#else

    float fmxOffset = 8.0;
 40061a8:	00904034 	movhi	r2,16640
 40061ac:	e0bf9715 	stw	r2,-420(fp)
    float fmyOffset = 75.395;
 40061b0:	0090a5f4 	movhi	r2,17047
 40061b4:	10b28f44 	addi	r2,r2,-13763
 40061b8:	e0bf9815 	stw	r2,-416(fp)
    float fmzOffset = -30.575;
 40061bc:	00b07d74 	movhi	r2,49653
 40061c0:	10a66684 	addi	r2,r2,-26214
 40061c4:	e0bf9915 	stw	r2,-412(fp)
#endif


    // magnetometer
    POINT ptStart, ptEnd, ptCenter={FRAME_WIDTH/2, FRAME_HEIGHT/2};
 40061c8:	00806404 	movi	r2,400
 40061cc:	e0bfef15 	stw	r2,-68(fp)
 40061d0:	00803c04 	movi	r2,240
 40061d4:	e0bff015 	stw	r2,-64(fp)
    const int nRadius = 200;
 40061d8:	00803204 	movi	r2,200
 40061dc:	e0bf9c15 	stw	r2,-400(fp)

    // accelerometer
    POINT ptCenter_GSensor = {90,90}, ptBubble;
 40061e0:	00801684 	movi	r2,90
 40061e4:	e0bff115 	stw	r2,-60(fp)
 40061e8:	00801684 	movi	r2,90
 40061ec:	e0bff215 	stw	r2,-56(fp)
    const int nRadius_GSensor = 40;
 40061f0:	00800a04 	movi	r2,40
 40061f4:	e0bf9d15 	stw	r2,-396(fp)
    const int nBarGap_GSensor = 15;
 40061f8:	008003c4 	movi	r2,15
 40061fc:	e0bf9e15 	stw	r2,-392(fp)
    const int nBarWidth_GSensor = 20;
 4006200:	00800504 	movi	r2,20
 4006204:	e0bf9f15 	stw	r2,-388(fp)
    const int nAreaSize_GSensor = 20;
 4006208:	00800504 	movi	r2,20
 400620c:	e0bfa015 	stw	r2,-384(fp)

    // calibration button
    RECT rcCalibrate = {600, 780, 400, 460};
 4006210:	00809604 	movi	r2,600
 4006214:	e0bff515 	stw	r2,-44(fp)
 4006218:	0080c304 	movi	r2,780
 400621c:	e0bff615 	stw	r2,-40(fp)
 4006220:	00806404 	movi	r2,400
 4006224:	e0bff715 	stw	r2,-36(fp)
 4006228:	00807304 	movi	r2,460
 400622c:	e0bff815 	stw	r2,-32(fp)



    printf("===== Welcome to E-Compass demo program =====\n");
 4006230:	01010234 	movhi	r4,1032
 4006234:	2105eb04 	addi	r4,r4,6060
 4006238:	40127b00 	call	40127b0 <puts>

    // init frame reader
    pReader =  VIPFR_Init(ALT_VIP_VFR_0_BASE, (void *)FR_FRAME_0, (void *)FR_FRAME_1, FRAME_WIDTH, FRAME_HEIGHT);
 400623c:	00807804 	movi	r2,480
 4006240:	d8800015 	stw	r2,0(sp)
 4006244:	01c0c804 	movi	r7,800
 4006248:	018185f4 	movhi	r6,1559
 400624c:	319c0004 	addi	r6,r6,28672
 4006250:	01418034 	movhi	r5,1536
 4006254:	01024034 	movhi	r4,2304
 4006258:	21080004 	addi	r4,r4,8192
 400625c:	400a60c0 	call	400a60c <_Z10VIPFR_InitmPvS_mm>
 4006260:	e0bfa115 	stw	r2,-380(fp)
    VIPFR_Go(pReader, TRUE);
 4006264:	01400044 	movi	r5,1
 4006268:	e13fa117 	ldw	r4,-380(fp)
 400626c:	400a8340 	call	400a834 <_Z8VIPFR_GoP16VIP_FRAME_READERb>
    
    
   // draw desktop background
    vid_clean_screen(pReader, COLOR_BLACK);
 4006270:	000b883a 	mov	r5,zero
 4006274:	e13fa117 	ldw	r4,-380(fp)
 4006278:	40012680 	call	4001268 <_Z16vid_clean_screenP16VIP_FRAME_READERi>

    ////////////////////////////////////////
    // draw back ground of accelerometer

    // big circle
    vid_draw_circle(ptCenter_GSensor.x, ptCenter_GSensor.y, nRadius_GSensor, COLOR_G, DO_FILL, pReader);
 400627c:	e0fff117 	ldw	r3,-60(fp)
 4006280:	e13ff217 	ldw	r4,-56(fp)
 4006284:	e0bfa117 	ldw	r2,-380(fp)
 4006288:	d8800115 	stw	r2,4(sp)
 400628c:	00800044 	movi	r2,1
 4006290:	d8800015 	stw	r2,0(sp)
 4006294:	01ffc014 	movui	r7,65280
 4006298:	01800a04 	movi	r6,40
 400629c:	200b883a 	mov	r5,r4
 40062a0:	1809883a 	mov	r4,r3
 40062a4:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>
    vid_draw_circle(ptCenter_GSensor.x, ptCenter_GSensor.y, nAreaSize_GSensor/2, COLOR_BLACK, DO_NOT_FILL, pReader);
 40062a8:	e0fff117 	ldw	r3,-60(fp)
 40062ac:	e13ff217 	ldw	r4,-56(fp)
 40062b0:	e0bfa117 	ldw	r2,-380(fp)
 40062b4:	d8800115 	stw	r2,4(sp)
 40062b8:	d8000015 	stw	zero,0(sp)
 40062bc:	000f883a 	mov	r7,zero
 40062c0:	01800284 	movi	r6,10
 40062c4:	200b883a 	mov	r5,r4
 40062c8:	1809883a 	mov	r4,r3
 40062cc:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x, ptCenter_GSensor.y-nRadius_GSensor, ptCenter_GSensor.x, ptCenter_GSensor.y+nRadius_GSensor, 3, COLOR_BLACK, pReader);
 40062d0:	e0fff117 	ldw	r3,-60(fp)
 40062d4:	e0bff217 	ldw	r2,-56(fp)
 40062d8:	113ff604 	addi	r4,r2,-40
 40062dc:	e17ff117 	ldw	r5,-60(fp)
 40062e0:	e0bff217 	ldw	r2,-56(fp)
 40062e4:	11800a04 	addi	r6,r2,40
 40062e8:	e0bfa117 	ldw	r2,-380(fp)
 40062ec:	d8800215 	stw	r2,8(sp)
 40062f0:	d8000115 	stw	zero,4(sp)
 40062f4:	008000c4 	movi	r2,3
 40062f8:	d8800015 	stw	r2,0(sp)
 40062fc:	300f883a 	mov	r7,r6
 4006300:	280d883a 	mov	r6,r5
 4006304:	200b883a 	mov	r5,r4
 4006308:	1809883a 	mov	r4,r3
 400630c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x-nRadius_GSensor, ptCenter_GSensor.y, ptCenter_GSensor.x+nRadius_GSensor, ptCenter_GSensor.y, 3, COLOR_BLACK, pReader);
 4006310:	e0bff117 	ldw	r2,-60(fp)
 4006314:	10fff604 	addi	r3,r2,-40
 4006318:	e13ff217 	ldw	r4,-56(fp)
 400631c:	e0bff117 	ldw	r2,-60(fp)
 4006320:	11400a04 	addi	r5,r2,40
 4006324:	e1bff217 	ldw	r6,-56(fp)
 4006328:	e0bfa117 	ldw	r2,-380(fp)
 400632c:	d8800215 	stw	r2,8(sp)
 4006330:	d8000115 	stw	zero,4(sp)
 4006334:	008000c4 	movi	r2,3
 4006338:	d8800015 	stw	r2,0(sp)
 400633c:	300f883a 	mov	r7,r6
 4006340:	280d883a 	mov	r6,r5
 4006344:	200b883a 	mov	r5,r4
 4006348:	1809883a 	mov	r4,r3
 400634c:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>

    // right box
    vid_draw_round_corner_box (ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y- nRadius_GSensor,
 4006350:	e0bff117 	ldw	r2,-60(fp)
 4006354:	10c00dc4 	addi	r3,r2,55
 4006358:	e0bff217 	ldw	r2,-56(fp)
 400635c:	113ff604 	addi	r4,r2,-40
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
 4006360:	e0bff117 	ldw	r2,-60(fp)
    vid_draw_circle(ptCenter_GSensor.x, ptCenter_GSensor.y, nAreaSize_GSensor/2, COLOR_BLACK, DO_NOT_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x, ptCenter_GSensor.y-nRadius_GSensor, ptCenter_GSensor.x, ptCenter_GSensor.y+nRadius_GSensor, 3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x-nRadius_GSensor, ptCenter_GSensor.y, ptCenter_GSensor.x+nRadius_GSensor, ptCenter_GSensor.y, 3, COLOR_BLACK, pReader);

    // right box
    vid_draw_round_corner_box (ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y- nRadius_GSensor,
 4006364:	114012c4 	addi	r5,r2,75
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
 4006368:	e0bff217 	ldw	r2,-56(fp)
    vid_draw_circle(ptCenter_GSensor.x, ptCenter_GSensor.y, nAreaSize_GSensor/2, COLOR_BLACK, DO_NOT_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x, ptCenter_GSensor.y-nRadius_GSensor, ptCenter_GSensor.x, ptCenter_GSensor.y+nRadius_GSensor, 3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x-nRadius_GSensor, ptCenter_GSensor.y, ptCenter_GSensor.x+nRadius_GSensor, ptCenter_GSensor.y, 3, COLOR_BLACK, pReader);

    // right box
    vid_draw_round_corner_box (ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y- nRadius_GSensor,
 400636c:	11800a04 	addi	r6,r2,40
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
 4006370:	e0bfa117 	ldw	r2,-380(fp)
 4006374:	d8800315 	stw	r2,12(sp)
 4006378:	00800044 	movi	r2,1
 400637c:	d8800215 	stw	r2,8(sp)
 4006380:	00bfc014 	movui	r2,65280
 4006384:	d8800115 	stw	r2,4(sp)
 4006388:	00800284 	movi	r2,10
 400638c:	d8800015 	stw	r2,0(sp)
 4006390:	300f883a 	mov	r7,r6
 4006394:	280d883a 	mov	r6,r5
 4006398:	200b883a 	mov	r5,r4
 400639c:	1809883a 	mov	r4,r3
 40063a0:	4002b040 	call	4002b04 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
 40063a4:	e0bff117 	ldw	r2,-60(fp)
 40063a8:	10c00dc4 	addi	r3,r2,55
 40063ac:	e0bff217 	ldw	r2,-56(fp)
 40063b0:	113ffd84 	addi	r4,r2,-10
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
 40063b4:	e0bff117 	ldw	r2,-60(fp)

    // right box
    vid_draw_round_corner_box (ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y- nRadius_GSensor,
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
 40063b8:	114012c4 	addi	r5,r2,75
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
 40063bc:	e0bff217 	ldw	r2,-56(fp)

    // right box
    vid_draw_round_corner_box (ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y- nRadius_GSensor,
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
 40063c0:	11bffd84 	addi	r6,r2,-10
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);
 40063c4:	e0bfa117 	ldw	r2,-380(fp)
 40063c8:	d8800215 	stw	r2,8(sp)
 40063cc:	d8000115 	stw	zero,4(sp)
 40063d0:	008000c4 	movi	r2,3
 40063d4:	d8800015 	stw	r2,0(sp)
 40063d8:	300f883a 	mov	r7,r6
 40063dc:	280d883a 	mov	r6,r5
 40063e0:	200b883a 	mov	r5,r4
 40063e4:	1809883a 	mov	r4,r3
 40063e8:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
 40063ec:	e0bff117 	ldw	r2,-60(fp)
 40063f0:	10c00dc4 	addi	r3,r2,55
 40063f4:	e0bff217 	ldw	r2,-56(fp)
 40063f8:	11000284 	addi	r4,r2,10
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
 40063fc:	e0bff117 	ldw	r2,-60(fp)
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
 4006400:	114012c4 	addi	r5,r2,75
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
 4006404:	e0bff217 	ldw	r2,-56(fp)
    		                   ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y + nRadius_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y-nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
 4006408:	11800284 	addi	r6,r2,10
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);
 400640c:	e0bfa117 	ldw	r2,-380(fp)
 4006410:	d8800215 	stw	r2,8(sp)
 4006414:	d8000115 	stw	zero,4(sp)
 4006418:	008000c4 	movi	r2,3
 400641c:	d8800015 	stw	r2,0(sp)
 4006420:	300f883a 	mov	r7,r6
 4006424:	280d883a 	mov	r6,r5
 4006428:	200b883a 	mov	r5,r4
 400642c:	1809883a 	mov	r4,r3
 4006430:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>

    // bottom box
    vid_draw_round_corner_box (ptCenter_GSensor.x - nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 4006434:	e0bff117 	ldw	r2,-60(fp)
 4006438:	10fff604 	addi	r3,r2,-40
 400643c:	e0bff217 	ldw	r2,-56(fp)
 4006440:	11000dc4 	addi	r4,r2,55
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 4006444:	e0bff117 	ldw	r2,-60(fp)
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);

    // bottom box
    vid_draw_round_corner_box (ptCenter_GSensor.x - nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 4006448:	11400a04 	addi	r5,r2,40
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 400644c:	e0bff217 	ldw	r2,-56(fp)
    vid_draw_line(ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
    		      ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor, ptCenter_GSensor.y+nAreaSize_GSensor/2,
    		      3, COLOR_BLACK, pReader);

    // bottom box
    vid_draw_round_corner_box (ptCenter_GSensor.x - nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 4006450:	118012c4 	addi	r6,r2,75
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
 4006454:	e0bfa117 	ldw	r2,-380(fp)
 4006458:	d8800315 	stw	r2,12(sp)
 400645c:	00800044 	movi	r2,1
 4006460:	d8800215 	stw	r2,8(sp)
 4006464:	00bfc014 	movui	r2,65280
 4006468:	d8800115 	stw	r2,4(sp)
 400646c:	00800284 	movi	r2,10
 4006470:	d8800015 	stw	r2,0(sp)
 4006474:	300f883a 	mov	r7,r6
 4006478:	280d883a 	mov	r6,r5
 400647c:	200b883a 	mov	r5,r4
 4006480:	1809883a 	mov	r4,r3
 4006484:	4002b040 	call	4002b04 <_Z25vid_draw_round_corner_boxiiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 4006488:	e0bff117 	ldw	r2,-60(fp)
 400648c:	10fffd84 	addi	r3,r2,-10
 4006490:	e0bff217 	ldw	r2,-56(fp)
 4006494:	11000dc4 	addi	r4,r2,55
		              ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 4006498:	e0bff117 	ldw	r2,-60(fp)

    // bottom box
    vid_draw_round_corner_box (ptCenter_GSensor.x - nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 400649c:	117ffd84 	addi	r5,r2,-10
		              ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 40064a0:	e0bff217 	ldw	r2,-56(fp)

    // bottom box
    vid_draw_round_corner_box (ptCenter_GSensor.x - nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 40064a4:	118012c4 	addi	r6,r2,75
		              ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
		              3, COLOR_BLACK, pReader);
 40064a8:	e0bfa117 	ldw	r2,-380(fp)
 40064ac:	d8800215 	stw	r2,8(sp)
 40064b0:	d8000115 	stw	zero,4(sp)
 40064b4:	008000c4 	movi	r2,3
 40064b8:	d8800015 	stw	r2,0(sp)
 40064bc:	300f883a 	mov	r7,r6
 40064c0:	280d883a 	mov	r6,r5
 40064c4:	200b883a 	mov	r5,r4
 40064c8:	1809883a 	mov	r4,r3
 40064cc:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>
    vid_draw_line(ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 40064d0:	e0bff117 	ldw	r2,-60(fp)
 40064d4:	10c00284 	addi	r3,r2,10
 40064d8:	e0bff217 	ldw	r2,-56(fp)
 40064dc:	11000dc4 	addi	r4,r2,55
		              ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 40064e0:	e0bff117 	ldw	r2,-60(fp)
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
		              ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
		              3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 40064e4:	11400284 	addi	r5,r2,10
		              ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
 40064e8:	e0bff217 	ldw	r2,-56(fp)
    		                   ptCenter_GSensor.x + nRadius_GSensor, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
                               10, COLOR_G,  DO_FILL, pReader);
    vid_draw_line(ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
		              ptCenter_GSensor.x - nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
		              3, COLOR_BLACK, pReader);
    vid_draw_line(ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor,
 40064ec:	118012c4 	addi	r6,r2,75
		              ptCenter_GSensor.x + nAreaSize_GSensor/2, ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor,
		              3, COLOR_BLACK, pReader);
 40064f0:	e0bfa117 	ldw	r2,-380(fp)
 40064f4:	d8800215 	stw	r2,8(sp)
 40064f8:	d8000115 	stw	zero,4(sp)
 40064fc:	008000c4 	movi	r2,3
 4006500:	d8800015 	stw	r2,0(sp)
 4006504:	300f883a 	mov	r7,r6
 4006508:	280d883a 	mov	r6,r5
 400650c:	200b883a 	mov	r5,r4
 4006510:	1809883a 	mov	r4,r3
 4006514:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>

    ////////////////////////////////////////
    // draw back ground of magnetometer

    // draw compass
    DrawImage(pReader, &compass_image, FRAME_WIDTH/2-nRadius, FRAME_HEIGHT/2-nRadius);
 4006518:	01c00a04 	movi	r7,40
 400651c:	01803204 	movi	r6,200
 4006520:	01410434 	movhi	r5,1040
 4006524:	2963cb04 	addi	r5,r5,-28884
 4006528:	e13fa117 	ldw	r4,-380(fp)
 400652c:	40053040 	call	4005304 <_Z9DrawImageP16VIP_FRAME_READERP17gimp_image_structii>


    // draw calibration button
    DrawButton(pReader, rcCalibrate, "Calibrate");
 4006530:	e0bff504 	addi	r2,fp,-44
 4006534:	01810234 	movhi	r6,1032
 4006538:	3185f704 	addi	r6,r6,6108
 400653c:	100b883a 	mov	r5,r2
 4006540:	e13fa117 	ldw	r4,-380(fp)
 4006544:	40051e00 	call	40051e0 <_Z10DrawButtonP16VIP_FRAME_READERR4RECTPKc>


    ////////////////////////////////////////
    // save background to a buffer
    VIPFR_ReadDrawFrame(pReader, pBackgroundBuffer);
 4006548:	e17f9a17 	ldw	r5,-408(fp)
 400654c:	e13fa117 	ldw	r4,-380(fp)
 4006550:	400abe40 	call	400abe4 <_Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv>
    VIPFR_ActiveDrawFrame(pReader);
 4006554:	e13fa117 	ldw	r4,-380(fp)
 4006558:	400a8c80 	call	400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>

    mpu.initialize();
 400655c:	e0bfad04 	addi	r2,fp,-332
 4006560:	01800044 	movi	r6,1
 4006564:	01400044 	movi	r5,1
 4006568:	1009883a 	mov	r4,r2
 400656c:	40078200 	call	4007820 <_ZN7MPU925010initializeEii>


   while(1){
	   if (IsTouched(pTouch, rcCalibrate)){
 4006570:	e0bff504 	addi	r2,fp,-44
 4006574:	100b883a 	mov	r5,r2
 4006578:	e13ffc17 	ldw	r4,-16(fp)
 400657c:	40050f40 	call	40050f4 <_Z9IsTouchedP9MTC2_INFOR4RECT>
 4006580:	10803fcc 	andi	r2,r2,255
 4006584:	10001126 	beq	r2,zero,40065cc <_Z11GUI_CompassP9MTC2_INFO+0x470>
		   float x, y, z;
		   if (MagCalibrate(pReader, pTouch, &x, &y, &z)){
 4006588:	e13ffa04 	addi	r4,fp,-24
 400658c:	e0fff904 	addi	r3,fp,-28
 4006590:	e0bffb04 	addi	r2,fp,-20
 4006594:	d8800015 	stw	r2,0(sp)
 4006598:	200f883a 	mov	r7,r4
 400659c:	180d883a 	mov	r6,r3
 40065a0:	e17ffc17 	ldw	r5,-16(fp)
 40065a4:	e13fa117 	ldw	r4,-380(fp)
 40065a8:	40054740 	call	4005474 <_Z12MagCalibrateP16VIP_FRAME_READERP9MTC2_INFOPfS3_S3_>
 40065ac:	10803fcc 	andi	r2,r2,255
 40065b0:	10000626 	beq	r2,zero,40065cc <_Z11GUI_CompassP9MTC2_INFO+0x470>
			   fmxOffset = x;
 40065b4:	e0bff917 	ldw	r2,-28(fp)
 40065b8:	e0bf9715 	stw	r2,-420(fp)
			   fmyOffset = y;
 40065bc:	e0bffa17 	ldw	r2,-24(fp)
 40065c0:	e0bf9815 	stw	r2,-416(fp)
			   fmzOffset = z;
 40065c4:	e0bffb17 	ldw	r2,-20(fp)
 40065c8:	e0bf9915 	stw	r2,-412(fp)
		   }
	   }


	   mpu.getMotion9(&ax, &ay, &az, &gx, &gy, &gz, &mx, &my, &mz);
 40065cc:	e1bfc404 	addi	r6,fp,-240
 40065d0:	e17fc304 	addi	r5,fp,-244
 40065d4:	e13fc204 	addi	r4,fp,-248
 40065d8:	e0ffad04 	addi	r3,fp,-332
 40065dc:	e0bfca04 	addi	r2,fp,-216
 40065e0:	d8800515 	stw	r2,20(sp)
 40065e4:	e0bfc904 	addi	r2,fp,-220
 40065e8:	d8800415 	stw	r2,16(sp)
 40065ec:	e0bfc804 	addi	r2,fp,-224
 40065f0:	d8800315 	stw	r2,12(sp)
 40065f4:	e0bfc704 	addi	r2,fp,-228
 40065f8:	d8800215 	stw	r2,8(sp)
 40065fc:	e0bfc604 	addi	r2,fp,-232
 4006600:	d8800115 	stw	r2,4(sp)
 4006604:	e0bfc504 	addi	r2,fp,-236
 4006608:	d8800015 	stw	r2,0(sp)
 400660c:	300f883a 	mov	r7,r6
 4006610:	280d883a 	mov	r6,r5
 4006614:	200b883a 	mov	r5,r4
 4006618:	1809883a 	mov	r4,r3
 400661c:	400889c0 	call	400889c <_ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_>
		  mzb = mz - B[2];
		  mx = M[0][0]*mxb + M[0][1]*myb+M[0][2]*mzb;
		  my = M[1][0]*mxb + M[1][1]*myb+M[1][2]*mzb;
		  mz = M[2][0]*mxb + M[2][1]*myb+M[2][2]*mzb;
#else
	  mx = mx - fmxOffset;
 4006620:	e0bfc817 	ldw	r2,-224(fp)
 4006624:	e17f9717 	ldw	r5,-420(fp)
 4006628:	1009883a 	mov	r4,r2
 400662c:	400ebf00 	call	400ebf0 <__subsf3>
 4006630:	1007883a 	mov	r3,r2
 4006634:	1805883a 	mov	r2,r3
 4006638:	e0bfc815 	stw	r2,-224(fp)
	  my = my - fmyOffset;
 400663c:	e0bfc917 	ldw	r2,-220(fp)
 4006640:	e17f9817 	ldw	r5,-416(fp)
 4006644:	1009883a 	mov	r4,r2
 4006648:	400ebf00 	call	400ebf0 <__subsf3>
 400664c:	1007883a 	mov	r3,r2
 4006650:	1805883a 	mov	r2,r3
 4006654:	e0bfc915 	stw	r2,-220(fp)
	  mz = mz - fmzOffset;
 4006658:	e0bfca17 	ldw	r2,-216(fp)
 400665c:	e17f9917 	ldw	r5,-412(fp)
 4006660:	1009883a 	mov	r4,r2
 4006664:	400ebf00 	call	400ebf0 <__subsf3>
 4006668:	1007883a 	mov	r3,r2
 400666c:	1805883a 	mov	r2,r3
 4006670:	e0bfca15 	stw	r2,-216(fp)
#endif

	  pitch = atan(ay/sqrt(ax*ax+az*az));
 4006674:	e0bfc317 	ldw	r2,-244(fp)
 4006678:	1009883a 	mov	r4,r2
 400667c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006680:	1021883a 	mov	r16,r2
 4006684:	1823883a 	mov	r17,r3
 4006688:	e0bfc217 	ldw	r2,-248(fp)
 400668c:	e0ffc217 	ldw	r3,-248(fp)
 4006690:	180b883a 	mov	r5,r3
 4006694:	1009883a 	mov	r4,r2
 4006698:	400e7f40 	call	400e7f4 <__mulsf3>
 400669c:	1007883a 	mov	r3,r2
 40066a0:	1825883a 	mov	r18,r3
 40066a4:	e0bfc417 	ldw	r2,-240(fp)
 40066a8:	e0ffc417 	ldw	r3,-240(fp)
 40066ac:	180b883a 	mov	r5,r3
 40066b0:	1009883a 	mov	r4,r2
 40066b4:	400e7f40 	call	400e7f4 <__mulsf3>
 40066b8:	1007883a 	mov	r3,r2
 40066bc:	1805883a 	mov	r2,r3
 40066c0:	100b883a 	mov	r5,r2
 40066c4:	9009883a 	mov	r4,r18
 40066c8:	400dd680 	call	400dd68 <__addsf3>
 40066cc:	1007883a 	mov	r3,r2
 40066d0:	1805883a 	mov	r2,r3
 40066d4:	1009883a 	mov	r4,r2
 40066d8:	40118b40 	call	40118b4 <__extendsfdf2>
 40066dc:	100b883a 	mov	r5,r2
 40066e0:	180d883a 	mov	r6,r3
 40066e4:	2809883a 	mov	r4,r5
 40066e8:	300b883a 	mov	r5,r6
 40066ec:	400b4b00 	call	400b4b0 <sqrt>
 40066f0:	1009883a 	mov	r4,r2
 40066f4:	180b883a 	mov	r5,r3
 40066f8:	200d883a 	mov	r6,r4
 40066fc:	280f883a 	mov	r7,r5
 4006700:	8009883a 	mov	r4,r16
 4006704:	880b883a 	mov	r5,r17
 4006708:	400fc040 	call	400fc04 <__divdf3>
 400670c:	1009883a 	mov	r4,r2
 4006710:	180b883a 	mov	r5,r3
 4006714:	2005883a 	mov	r2,r4
 4006718:	2807883a 	mov	r3,r5
 400671c:	1009883a 	mov	r4,r2
 4006720:	180b883a 	mov	r5,r3
 4006724:	400ad340 	call	400ad34 <atan>
 4006728:	100b883a 	mov	r5,r2
 400672c:	180d883a 	mov	r6,r3
 4006730:	2809883a 	mov	r4,r5
 4006734:	300b883a 	mov	r5,r6
 4006738:	40119c40 	call	40119c4 <__truncdfsf2>
 400673c:	1007883a 	mov	r3,r2
 4006740:	e0ffa215 	stw	r3,-376(fp)
	  roll = atan(ax/sqrt(ax*ax+az*az));
 4006744:	e0bfc217 	ldw	r2,-248(fp)
 4006748:	1009883a 	mov	r4,r2
 400674c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006750:	1021883a 	mov	r16,r2
 4006754:	1823883a 	mov	r17,r3
 4006758:	e0bfc217 	ldw	r2,-248(fp)
 400675c:	e0ffc217 	ldw	r3,-248(fp)
 4006760:	180b883a 	mov	r5,r3
 4006764:	1009883a 	mov	r4,r2
 4006768:	400e7f40 	call	400e7f4 <__mulsf3>
 400676c:	1007883a 	mov	r3,r2
 4006770:	1825883a 	mov	r18,r3
 4006774:	e0bfc417 	ldw	r2,-240(fp)
 4006778:	e0ffc417 	ldw	r3,-240(fp)
 400677c:	180b883a 	mov	r5,r3
 4006780:	1009883a 	mov	r4,r2
 4006784:	400e7f40 	call	400e7f4 <__mulsf3>
 4006788:	1007883a 	mov	r3,r2
 400678c:	1805883a 	mov	r2,r3
 4006790:	100b883a 	mov	r5,r2
 4006794:	9009883a 	mov	r4,r18
 4006798:	400dd680 	call	400dd68 <__addsf3>
 400679c:	1007883a 	mov	r3,r2
 40067a0:	1805883a 	mov	r2,r3
 40067a4:	1009883a 	mov	r4,r2
 40067a8:	40118b40 	call	40118b4 <__extendsfdf2>
 40067ac:	100b883a 	mov	r5,r2
 40067b0:	180d883a 	mov	r6,r3
 40067b4:	2809883a 	mov	r4,r5
 40067b8:	300b883a 	mov	r5,r6
 40067bc:	400b4b00 	call	400b4b0 <sqrt>
 40067c0:	1009883a 	mov	r4,r2
 40067c4:	180b883a 	mov	r5,r3
 40067c8:	200d883a 	mov	r6,r4
 40067cc:	280f883a 	mov	r7,r5
 40067d0:	8009883a 	mov	r4,r16
 40067d4:	880b883a 	mov	r5,r17
 40067d8:	400fc040 	call	400fc04 <__divdf3>
 40067dc:	1009883a 	mov	r4,r2
 40067e0:	180b883a 	mov	r5,r3
 40067e4:	2005883a 	mov	r2,r4
 40067e8:	2807883a 	mov	r3,r5
 40067ec:	1009883a 	mov	r4,r2
 40067f0:	180b883a 	mov	r5,r3
 40067f4:	400ad340 	call	400ad34 <atan>
 40067f8:	100b883a 	mov	r5,r2
 40067fc:	180d883a 	mov	r6,r3
 4006800:	2809883a 	mov	r4,r5
 4006804:	300b883a 	mov	r5,r6
 4006808:	40119c40 	call	40119c4 <__truncdfsf2>
 400680c:	1007883a 	mov	r3,r2
 4006810:	e0ffa315 	stw	r3,-372(fp)

	 // printf("pitch:%.1f, roll:%.1f\r\n", pitch*(180.0 / PI), roll*(180.0 / PI));

	  var_compass = Compass_Calcuate(pitch, roll, mx, my, mz);
 4006814:	e0ffc817 	ldw	r3,-224(fp)
 4006818:	e13fc917 	ldw	r4,-220(fp)
 400681c:	e0bfca17 	ldw	r2,-216(fp)
 4006820:	d8800015 	stw	r2,0(sp)
 4006824:	200f883a 	mov	r7,r4
 4006828:	180d883a 	mov	r6,r3
 400682c:	e17fa317 	ldw	r5,-372(fp)
 4006830:	e13fa217 	ldw	r4,-376(fp)
 4006834:	4004d180 	call	4004d18 <_Z16Compass_Calcuatefffff>
 4006838:	e0bfa415 	stw	r2,-368(fp)


	   // printf("  acceleromter(m/s^2): ax=%f, ay=%f, az=%f\r\n", ax, ay, az);
	   // printf("  gyroscope (degree/second): gx=%f, gy=%f, gz=%f\r\n", gx, gy, gz);
	   // printf("  magnetometer(uT ?): mx=%f, my=%f, mz=%f\r\n", mx, my, mz);
	    printf("compass:%.1f\r\n", var_compass);
 400683c:	e13fa417 	ldw	r4,-368(fp)
 4006840:	40118b40 	call	40118b4 <__extendsfdf2>
 4006844:	100d883a 	mov	r6,r2
 4006848:	180f883a 	mov	r7,r3
 400684c:	300b883a 	mov	r5,r6
 4006850:	380d883a 	mov	r6,r7
 4006854:	01010234 	movhi	r4,1032
 4006858:	2105fa04 	addi	r4,r4,6120
 400685c:	40126b40 	call	40126b4 <printf>



	    // restore background
        VIPFR_WriteDrawFrame(pReader, pBackgroundBuffer); /// restore background
 4006860:	e17f9a17 	ldw	r5,-408(fp)
 4006864:	e13fa117 	ldw	r4,-380(fp)
 4006868:	400ac380 	call	400ac38 <_Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv>

        ///////////////////////////////////
        // accelerometer

        // draw text
        pt.x = ptCenter_GSensor.x - nRadius_GSensor;
 400686c:	e0bff117 	ldw	r2,-60(fp)
 4006870:	10bff604 	addi	r2,r2,-40
 4006874:	e0bfab15 	stw	r2,-340(fp)
        pt.y = ptCenter_GSensor.y +  nRadius_GSensor + nBarGap_GSensor + nBarWidth_GSensor*2;
 4006878:	e0bff217 	ldw	r2,-56(fp)
 400687c:	108017c4 	addi	r2,r2,95
 4006880:	e0bfac15 	stw	r2,-336(fp)
        sprintf(szText, "x:%.2f", ax);
 4006884:	e0bfc217 	ldw	r2,-248(fp)
 4006888:	1009883a 	mov	r4,r2
 400688c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006890:	1009883a 	mov	r4,r2
 4006894:	180b883a 	mov	r5,r3
 4006898:	e0bfcb04 	addi	r2,fp,-212
 400689c:	200d883a 	mov	r6,r4
 40068a0:	280f883a 	mov	r7,r5
 40068a4:	01410234 	movhi	r5,1032
 40068a8:	2945e304 	addi	r5,r5,6028
 40068ac:	1009883a 	mov	r4,r2
 40068b0:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 40068b4:	e0ffab17 	ldw	r3,-340(fp)
 40068b8:	e13fac17 	ldw	r4,-336(fp)
 40068bc:	e0bfcb04 	addi	r2,fp,-212
 40068c0:	d8800215 	stw	r2,8(sp)
 40068c4:	e0bfa117 	ldw	r2,-380(fp)
 40068c8:	d8800115 	stw	r2,4(sp)
 40068cc:	00810234 	movhi	r2,1032
 40068d0:	10882404 	addi	r2,r2,8336
 40068d4:	d8800015 	stw	r2,0(sp)
 40068d8:	000f883a 	mov	r7,zero
 40068dc:	01804034 	movhi	r6,256
 40068e0:	31bfffc4 	addi	r6,r6,-1
 40068e4:	200b883a 	mov	r5,r4
 40068e8:	1809883a 	mov	r4,r3
 40068ec:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        sprintf(szText, "y:%.2f", ay);
 40068f0:	e0bfc317 	ldw	r2,-244(fp)
 40068f4:	1009883a 	mov	r4,r2
 40068f8:	40118b40 	call	40118b4 <__extendsfdf2>
 40068fc:	1009883a 	mov	r4,r2
 4006900:	180b883a 	mov	r5,r3
 4006904:	e0bfcb04 	addi	r2,fp,-212
 4006908:	200d883a 	mov	r6,r4
 400690c:	280f883a 	mov	r7,r5
 4006910:	01410234 	movhi	r5,1032
 4006914:	2945e504 	addi	r5,r5,6036
 4006918:	1009883a 	mov	r4,r2
 400691c:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006920:	e0ffab17 	ldw	r3,-340(fp)
 4006924:	e0bfac17 	ldw	r2,-336(fp)
 4006928:	11000784 	addi	r4,r2,30
 400692c:	e0bfcb04 	addi	r2,fp,-212
 4006930:	d8800215 	stw	r2,8(sp)
 4006934:	e0bfa117 	ldw	r2,-380(fp)
 4006938:	d8800115 	stw	r2,4(sp)
 400693c:	00810234 	movhi	r2,1032
 4006940:	10882404 	addi	r2,r2,8336
 4006944:	d8800015 	stw	r2,0(sp)
 4006948:	000f883a 	mov	r7,zero
 400694c:	01804034 	movhi	r6,256
 4006950:	31bfffc4 	addi	r6,r6,-1
 4006954:	200b883a 	mov	r5,r4
 4006958:	1809883a 	mov	r4,r3
 400695c:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        sprintf(szText, "z:%.2f", az);
 4006960:	e0bfc417 	ldw	r2,-240(fp)
 4006964:	1009883a 	mov	r4,r2
 4006968:	40118b40 	call	40118b4 <__extendsfdf2>
 400696c:	1009883a 	mov	r4,r2
 4006970:	180b883a 	mov	r5,r3
 4006974:	e0bfcb04 	addi	r2,fp,-212
 4006978:	200d883a 	mov	r6,r4
 400697c:	280f883a 	mov	r7,r5
 4006980:	01410234 	movhi	r5,1032
 4006984:	2945e704 	addi	r5,r5,6044
 4006988:	1009883a 	mov	r4,r2
 400698c:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y+60, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006990:	e0ffab17 	ldw	r3,-340(fp)
 4006994:	e0bfac17 	ldw	r2,-336(fp)
 4006998:	11000f04 	addi	r4,r2,60
 400699c:	e0bfcb04 	addi	r2,fp,-212
 40069a0:	d8800215 	stw	r2,8(sp)
 40069a4:	e0bfa117 	ldw	r2,-380(fp)
 40069a8:	d8800115 	stw	r2,4(sp)
 40069ac:	00810234 	movhi	r2,1032
 40069b0:	10882404 	addi	r2,r2,8336
 40069b4:	d8800015 	stw	r2,0(sp)
 40069b8:	000f883a 	mov	r7,zero
 40069bc:	01804034 	movhi	r6,256
 40069c0:	31bfffc4 	addi	r6,r6,-1
 40069c4:	200b883a 	mov	r5,r4
 40069c8:	1809883a 	mov	r4,r3
 40069cc:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>


        // draw bubble
        dh = nRadius_GSensor * sin(roll); // horizontal
 40069d0:	e13fa317 	ldw	r4,-372(fp)
 40069d4:	40118b40 	call	40118b4 <__extendsfdf2>
 40069d8:	100b883a 	mov	r5,r2
 40069dc:	180d883a 	mov	r6,r3
 40069e0:	2809883a 	mov	r4,r5
 40069e4:	300b883a 	mov	r5,r6
 40069e8:	400b3bc0 	call	400b3bc <sin>
 40069ec:	1011883a 	mov	r8,r2
 40069f0:	1813883a 	mov	r9,r3
 40069f4:	000d883a 	mov	r6,zero
 40069f8:	01d01134 	movhi	r7,16452
 40069fc:	4009883a 	mov	r4,r8
 4006a00:	480b883a 	mov	r5,r9
 4006a04:	40107440 	call	4010744 <__muldf3>
 4006a08:	1009883a 	mov	r4,r2
 4006a0c:	180b883a 	mov	r5,r3
 4006a10:	2005883a 	mov	r2,r4
 4006a14:	2807883a 	mov	r3,r5
 4006a18:	1009883a 	mov	r4,r2
 4006a1c:	180b883a 	mov	r5,r3
 4006a20:	40119c40 	call	40119c4 <__truncdfsf2>
 4006a24:	1007883a 	mov	r3,r2
 4006a28:	e0ffa515 	stw	r3,-364(fp)
        dv = nRadius_GSensor * sin(pitch); // vertical
 4006a2c:	e13fa217 	ldw	r4,-376(fp)
 4006a30:	40118b40 	call	40118b4 <__extendsfdf2>
 4006a34:	100b883a 	mov	r5,r2
 4006a38:	180d883a 	mov	r6,r3
 4006a3c:	2809883a 	mov	r4,r5
 4006a40:	300b883a 	mov	r5,r6
 4006a44:	400b3bc0 	call	400b3bc <sin>
 4006a48:	1011883a 	mov	r8,r2
 4006a4c:	1813883a 	mov	r9,r3
 4006a50:	000d883a 	mov	r6,zero
 4006a54:	01d01134 	movhi	r7,16452
 4006a58:	4009883a 	mov	r4,r8
 4006a5c:	480b883a 	mov	r5,r9
 4006a60:	40107440 	call	4010744 <__muldf3>
 4006a64:	1009883a 	mov	r4,r2
 4006a68:	180b883a 	mov	r5,r3
 4006a6c:	2005883a 	mov	r2,r4
 4006a70:	2807883a 	mov	r3,r5
 4006a74:	1009883a 	mov	r4,r2
 4006a78:	180b883a 	mov	r5,r3
 4006a7c:	40119c40 	call	40119c4 <__truncdfsf2>
 4006a80:	1007883a 	mov	r3,r2
 4006a84:	e0ffa615 	stw	r3,-360(fp)

        // x/y 2-d
        ptBubble.x = ptCenter_GSensor.x - dh;
 4006a88:	e0bff117 	ldw	r2,-60(fp)
 4006a8c:	1009883a 	mov	r4,r2
 4006a90:	400f1440 	call	400f144 <__floatsisf>
 4006a94:	1007883a 	mov	r3,r2
 4006a98:	e17fa517 	ldw	r5,-364(fp)
 4006a9c:	1809883a 	mov	r4,r3
 4006aa0:	400ebf00 	call	400ebf0 <__subsf3>
 4006aa4:	1007883a 	mov	r3,r2
 4006aa8:	1805883a 	mov	r2,r3
 4006aac:	1009883a 	mov	r4,r2
 4006ab0:	400f0d40 	call	400f0d4 <__fixsfsi>
 4006ab4:	e0bff315 	stw	r2,-52(fp)
        ptBubble.y = ptCenter_GSensor.y - dv;
 4006ab8:	e0bff217 	ldw	r2,-56(fp)
 4006abc:	1009883a 	mov	r4,r2
 4006ac0:	400f1440 	call	400f144 <__floatsisf>
 4006ac4:	1007883a 	mov	r3,r2
 4006ac8:	e17fa617 	ldw	r5,-360(fp)
 4006acc:	1809883a 	mov	r4,r3
 4006ad0:	400ebf00 	call	400ebf0 <__subsf3>
 4006ad4:	1007883a 	mov	r3,r2
 4006ad8:	1805883a 	mov	r2,r3
 4006adc:	1009883a 	mov	r4,r2
 4006ae0:	400f0d40 	call	400f0d4 <__fixsfsi>
 4006ae4:	e0bff415 	stw	r2,-48(fp)
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_WHITE, DO_FILL, pReader);
 4006ae8:	e0fff317 	ldw	r3,-52(fp)
 4006aec:	e13ff417 	ldw	r4,-48(fp)
 4006af0:	e0bfa117 	ldw	r2,-380(fp)
 4006af4:	d8800115 	stw	r2,4(sp)
 4006af8:	00800044 	movi	r2,1
 4006afc:	d8800015 	stw	r2,0(sp)
 4006b00:	01c04034 	movhi	r7,256
 4006b04:	39ffffc4 	addi	r7,r7,-1
 4006b08:	01800244 	movi	r6,9
 4006b0c:	200b883a 	mov	r5,r4
 4006b10:	1809883a 	mov	r4,r3
 4006b14:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_BLACK, DO_NOT_FILL, pReader);
 4006b18:	e0fff317 	ldw	r3,-52(fp)
 4006b1c:	e13ff417 	ldw	r4,-48(fp)
 4006b20:	e0bfa117 	ldw	r2,-380(fp)
 4006b24:	d8800115 	stw	r2,4(sp)
 4006b28:	d8000015 	stw	zero,0(sp)
 4006b2c:	000f883a 	mov	r7,zero
 4006b30:	01800244 	movi	r6,9
 4006b34:	200b883a 	mov	r5,r4
 4006b38:	1809883a 	mov	r4,r3
 4006b3c:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>

        // y (right)
        ptBubble.x = ptCenter_GSensor.x + nRadius_GSensor + nBarGap_GSensor + nBarWidth_GSensor/2;
 4006b40:	e0bff117 	ldw	r2,-60(fp)
 4006b44:	10801044 	addi	r2,r2,65
 4006b48:	e0bff315 	stw	r2,-52(fp)
        ptBubble.y = ptCenter_GSensor.y - dv;
 4006b4c:	e0bff217 	ldw	r2,-56(fp)
 4006b50:	1009883a 	mov	r4,r2
 4006b54:	400f1440 	call	400f144 <__floatsisf>
 4006b58:	1007883a 	mov	r3,r2
 4006b5c:	e17fa617 	ldw	r5,-360(fp)
 4006b60:	1809883a 	mov	r4,r3
 4006b64:	400ebf00 	call	400ebf0 <__subsf3>
 4006b68:	1007883a 	mov	r3,r2
 4006b6c:	1805883a 	mov	r2,r3
 4006b70:	1009883a 	mov	r4,r2
 4006b74:	400f0d40 	call	400f0d4 <__fixsfsi>
 4006b78:	e0bff415 	stw	r2,-48(fp)
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_WHITE, DO_FILL, pReader);
 4006b7c:	e0fff317 	ldw	r3,-52(fp)
 4006b80:	e13ff417 	ldw	r4,-48(fp)
 4006b84:	e0bfa117 	ldw	r2,-380(fp)
 4006b88:	d8800115 	stw	r2,4(sp)
 4006b8c:	00800044 	movi	r2,1
 4006b90:	d8800015 	stw	r2,0(sp)
 4006b94:	01c04034 	movhi	r7,256
 4006b98:	39ffffc4 	addi	r7,r7,-1
 4006b9c:	01800244 	movi	r6,9
 4006ba0:	200b883a 	mov	r5,r4
 4006ba4:	1809883a 	mov	r4,r3
 4006ba8:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_BLACK, DO_NOT_FILL, pReader);
 4006bac:	e0fff317 	ldw	r3,-52(fp)
 4006bb0:	e13ff417 	ldw	r4,-48(fp)
 4006bb4:	e0bfa117 	ldw	r2,-380(fp)
 4006bb8:	d8800115 	stw	r2,4(sp)
 4006bbc:	d8000015 	stw	zero,0(sp)
 4006bc0:	000f883a 	mov	r7,zero
 4006bc4:	01800244 	movi	r6,9
 4006bc8:	200b883a 	mov	r5,r4
 4006bcc:	1809883a 	mov	r4,r3
 4006bd0:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>

        // x (bottom)
        ptBubble.x = ptCenter_GSensor.x - dh;
 4006bd4:	e0bff117 	ldw	r2,-60(fp)
 4006bd8:	1009883a 	mov	r4,r2
 4006bdc:	400f1440 	call	400f144 <__floatsisf>
 4006be0:	1007883a 	mov	r3,r2
 4006be4:	e17fa517 	ldw	r5,-364(fp)
 4006be8:	1809883a 	mov	r4,r3
 4006bec:	400ebf00 	call	400ebf0 <__subsf3>
 4006bf0:	1007883a 	mov	r3,r2
 4006bf4:	1805883a 	mov	r2,r3
 4006bf8:	1009883a 	mov	r4,r2
 4006bfc:	400f0d40 	call	400f0d4 <__fixsfsi>
 4006c00:	e0bff315 	stw	r2,-52(fp)
        ptBubble.y = ptCenter_GSensor.y + nRadius_GSensor + nBarGap_GSensor+nBarWidth_GSensor/2;
 4006c04:	e0bff217 	ldw	r2,-56(fp)
 4006c08:	10801044 	addi	r2,r2,65
 4006c0c:	e0bff415 	stw	r2,-48(fp)
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_WHITE, DO_FILL, pReader);
 4006c10:	e0fff317 	ldw	r3,-52(fp)
 4006c14:	e13ff417 	ldw	r4,-48(fp)
 4006c18:	e0bfa117 	ldw	r2,-380(fp)
 4006c1c:	d8800115 	stw	r2,4(sp)
 4006c20:	00800044 	movi	r2,1
 4006c24:	d8800015 	stw	r2,0(sp)
 4006c28:	01c04034 	movhi	r7,256
 4006c2c:	39ffffc4 	addi	r7,r7,-1
 4006c30:	01800244 	movi	r6,9
 4006c34:	200b883a 	mov	r5,r4
 4006c38:	1809883a 	mov	r4,r3
 4006c3c:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>
        vid_draw_circle(ptBubble.x, ptBubble.y, nAreaSize_GSensor/2-1, COLOR_BLACK, DO_NOT_FILL, pReader);
 4006c40:	e0fff317 	ldw	r3,-52(fp)
 4006c44:	e13ff417 	ldw	r4,-48(fp)
 4006c48:	e0bfa117 	ldw	r2,-380(fp)
 4006c4c:	d8800115 	stw	r2,4(sp)
 4006c50:	d8000015 	stw	zero,0(sp)
 4006c54:	000f883a 	mov	r7,zero
 4006c58:	01800244 	movi	r6,9
 4006c5c:	200b883a 	mov	r5,r4
 4006c60:	1809883a 	mov	r4,r3
 4006c64:	40029bc0 	call	40029bc <_Z15vid_draw_circleiiiicP16VIP_FRAME_READER>



        ///////////////////////////////////
        // magnetometer
        fHead = var_compass/180.0*PI;
 4006c68:	e13fa417 	ldw	r4,-368(fp)
 4006c6c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006c70:	1011883a 	mov	r8,r2
 4006c74:	1813883a 	mov	r9,r3
 4006c78:	000d883a 	mov	r6,zero
 4006c7c:	01d019f4 	movhi	r7,16487
 4006c80:	39e00004 	addi	r7,r7,-32768
 4006c84:	4009883a 	mov	r4,r8
 4006c88:	480b883a 	mov	r5,r9
 4006c8c:	400fc040 	call	400fc04 <__divdf3>
 4006c90:	1009883a 	mov	r4,r2
 4006c94:	180b883a 	mov	r5,r3
 4006c98:	2005883a 	mov	r2,r4
 4006c9c:	2807883a 	mov	r3,r5
 4006ca0:	01bc0734 	movhi	r6,61468
 4006ca4:	31a19b84 	addi	r6,r6,-31122
 4006ca8:	01d00274 	movhi	r7,16393
 4006cac:	39c87e44 	addi	r7,r7,8697
 4006cb0:	1009883a 	mov	r4,r2
 4006cb4:	180b883a 	mov	r5,r3
 4006cb8:	40107440 	call	4010744 <__muldf3>
 4006cbc:	1009883a 	mov	r4,r2
 4006cc0:	180b883a 	mov	r5,r3
 4006cc4:	2005883a 	mov	r2,r4
 4006cc8:	2807883a 	mov	r3,r5
 4006ccc:	1009883a 	mov	r4,r2
 4006cd0:	180b883a 	mov	r5,r3
 4006cd4:	40119c40 	call	40119c4 <__truncdfsf2>
 4006cd8:	1007883a 	mov	r3,r2
 4006cdc:	e0ffa715 	stw	r3,-356(fp)

	    // display text
        sprintf(szText, "%d", (int)(var_compass + 0.5));
 4006ce0:	e13fa417 	ldw	r4,-368(fp)
 4006ce4:	40118b40 	call	40118b4 <__extendsfdf2>
 4006ce8:	1011883a 	mov	r8,r2
 4006cec:	1813883a 	mov	r9,r3
 4006cf0:	000d883a 	mov	r6,zero
 4006cf4:	01cff834 	movhi	r7,16352
 4006cf8:	4009883a 	mov	r4,r8
 4006cfc:	480b883a 	mov	r5,r9
 4006d00:	400f3580 	call	400f358 <__adddf3>
 4006d04:	1009883a 	mov	r4,r2
 4006d08:	180b883a 	mov	r5,r3
 4006d0c:	2005883a 	mov	r2,r4
 4006d10:	2807883a 	mov	r3,r5
 4006d14:	1009883a 	mov	r4,r2
 4006d18:	180b883a 	mov	r5,r3
 4006d1c:	40117580 	call	4011758 <__fixdfsi>
 4006d20:	1007883a 	mov	r3,r2
 4006d24:	e0bfcb04 	addi	r2,fp,-212
 4006d28:	180d883a 	mov	r6,r3
 4006d2c:	01410234 	movhi	r5,1032
 4006d30:	2945fe04 	addi	r5,r5,6136
 4006d34:	1009883a 	mov	r4,r2
 4006d38:	40128700 	call	4012870 <sprintf>
        text_length = vid_string_pixel_length_alpha(tahomabold_20, szText);
 4006d3c:	e0bfcb04 	addi	r2,fp,-212
 4006d40:	100b883a 	mov	r5,r2
 4006d44:	01010234 	movhi	r4,1032
 4006d48:	21082404 	addi	r4,r4,8336
 4006d4c:	40045340 	call	4004534 <_Z29vid_string_pixel_length_alphaP15abc_font_structPc>
 4006d50:	e0bfa815 	stw	r2,-352(fp)
        vid_print_string_alpha(ptCenter.x-text_length/2, 10, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006d54:	e0ffef17 	ldw	r3,-68(fp)
 4006d58:	e0bfa817 	ldw	r2,-352(fp)
 4006d5c:	1008d7fa 	srli	r4,r2,31
 4006d60:	2085883a 	add	r2,r4,r2
 4006d64:	1005d07a 	srai	r2,r2,1
 4006d68:	1887c83a 	sub	r3,r3,r2
 4006d6c:	e0bfcb04 	addi	r2,fp,-212
 4006d70:	d8800215 	stw	r2,8(sp)
 4006d74:	e0bfa117 	ldw	r2,-380(fp)
 4006d78:	d8800115 	stw	r2,4(sp)
 4006d7c:	00810234 	movhi	r2,1032
 4006d80:	10882404 	addi	r2,r2,8336
 4006d84:	d8800015 	stw	r2,0(sp)
 4006d88:	000f883a 	mov	r7,zero
 4006d8c:	01804034 	movhi	r6,256
 4006d90:	31bfffc4 	addi	r6,r6,-1
 4006d94:	01400284 	movi	r5,10
 4006d98:	1809883a 	mov	r4,r3
 4006d9c:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>



        pt.x = ptCenter.x + nRadius + 30;
 4006da0:	e0bfef17 	ldw	r2,-68(fp)
 4006da4:	10803984 	addi	r2,r2,230
 4006da8:	e0bfab15 	stw	r2,-340(fp)
        pt.y = ptCenter.y - 45;
 4006dac:	e0bff017 	ldw	r2,-64(fp)
 4006db0:	10bff4c4 	addi	r2,r2,-45
 4006db4:	e0bfac15 	stw	r2,-336(fp)
        sprintf(szText, "x:%.2f", mx);
 4006db8:	e0bfc817 	ldw	r2,-224(fp)
 4006dbc:	1009883a 	mov	r4,r2
 4006dc0:	40118b40 	call	40118b4 <__extendsfdf2>
 4006dc4:	1009883a 	mov	r4,r2
 4006dc8:	180b883a 	mov	r5,r3
 4006dcc:	e0bfcb04 	addi	r2,fp,-212
 4006dd0:	200d883a 	mov	r6,r4
 4006dd4:	280f883a 	mov	r7,r5
 4006dd8:	01410234 	movhi	r5,1032
 4006ddc:	2945e304 	addi	r5,r5,6028
 4006de0:	1009883a 	mov	r4,r2
 4006de4:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006de8:	e0ffab17 	ldw	r3,-340(fp)
 4006dec:	e13fac17 	ldw	r4,-336(fp)
 4006df0:	e0bfcb04 	addi	r2,fp,-212
 4006df4:	d8800215 	stw	r2,8(sp)
 4006df8:	e0bfa117 	ldw	r2,-380(fp)
 4006dfc:	d8800115 	stw	r2,4(sp)
 4006e00:	00810234 	movhi	r2,1032
 4006e04:	10882404 	addi	r2,r2,8336
 4006e08:	d8800015 	stw	r2,0(sp)
 4006e0c:	000f883a 	mov	r7,zero
 4006e10:	01804034 	movhi	r6,256
 4006e14:	31bfffc4 	addi	r6,r6,-1
 4006e18:	200b883a 	mov	r5,r4
 4006e1c:	1809883a 	mov	r4,r3
 4006e20:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        sprintf(szText, "y:%.2f", my);
 4006e24:	e0bfc917 	ldw	r2,-220(fp)
 4006e28:	1009883a 	mov	r4,r2
 4006e2c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006e30:	1009883a 	mov	r4,r2
 4006e34:	180b883a 	mov	r5,r3
 4006e38:	e0bfcb04 	addi	r2,fp,-212
 4006e3c:	200d883a 	mov	r6,r4
 4006e40:	280f883a 	mov	r7,r5
 4006e44:	01410234 	movhi	r5,1032
 4006e48:	2945e504 	addi	r5,r5,6036
 4006e4c:	1009883a 	mov	r4,r2
 4006e50:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y+30, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006e54:	e0ffab17 	ldw	r3,-340(fp)
 4006e58:	e0bfac17 	ldw	r2,-336(fp)
 4006e5c:	11000784 	addi	r4,r2,30
 4006e60:	e0bfcb04 	addi	r2,fp,-212
 4006e64:	d8800215 	stw	r2,8(sp)
 4006e68:	e0bfa117 	ldw	r2,-380(fp)
 4006e6c:	d8800115 	stw	r2,4(sp)
 4006e70:	00810234 	movhi	r2,1032
 4006e74:	10882404 	addi	r2,r2,8336
 4006e78:	d8800015 	stw	r2,0(sp)
 4006e7c:	000f883a 	mov	r7,zero
 4006e80:	01804034 	movhi	r6,256
 4006e84:	31bfffc4 	addi	r6,r6,-1
 4006e88:	200b883a 	mov	r5,r4
 4006e8c:	1809883a 	mov	r4,r3
 4006e90:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>
        sprintf(szText, "z:%.2f", mz);
 4006e94:	e0bfca17 	ldw	r2,-216(fp)
 4006e98:	1009883a 	mov	r4,r2
 4006e9c:	40118b40 	call	40118b4 <__extendsfdf2>
 4006ea0:	1009883a 	mov	r4,r2
 4006ea4:	180b883a 	mov	r5,r3
 4006ea8:	e0bfcb04 	addi	r2,fp,-212
 4006eac:	200d883a 	mov	r6,r4
 4006eb0:	280f883a 	mov	r7,r5
 4006eb4:	01410234 	movhi	r5,1032
 4006eb8:	2945e704 	addi	r5,r5,6044
 4006ebc:	1009883a 	mov	r4,r2
 4006ec0:	40128700 	call	4012870 <sprintf>
        vid_print_string_alpha(pt.x, pt.y+60, COLOR_WHITE,COLOR_BLACK, tahomabold_20, pReader, szText);
 4006ec4:	e0ffab17 	ldw	r3,-340(fp)
 4006ec8:	e0bfac17 	ldw	r2,-336(fp)
 4006ecc:	11000f04 	addi	r4,r2,60
 4006ed0:	e0bfcb04 	addi	r2,fp,-212
 4006ed4:	d8800215 	stw	r2,8(sp)
 4006ed8:	e0bfa117 	ldw	r2,-380(fp)
 4006edc:	d8800115 	stw	r2,4(sp)
 4006ee0:	00810234 	movhi	r2,1032
 4006ee4:	10882404 	addi	r2,r2,8336
 4006ee8:	d8800015 	stw	r2,0(sp)
 4006eec:	000f883a 	mov	r7,zero
 4006ef0:	01804034 	movhi	r6,256
 4006ef4:	31bfffc4 	addi	r6,r6,-1
 4006ef8:	200b883a 	mov	r5,r4
 4006efc:	1809883a 	mov	r4,r3
 4006f00:	40040ec0 	call	40040ec <_Z22vid_print_string_alphaiiiiP15abc_font_structP16VIP_FRAME_READERPc>

        // draw graphic
       // vid_draw_circle(ptCenter.x, ptCenter.y, nRadius, COLOR_WHITE, 0x00 /* not fill */, pReader);

        dx = (28.0)*sin(fHead);
 4006f04:	e13fa717 	ldw	r4,-356(fp)
 4006f08:	40118b40 	call	40118b4 <__extendsfdf2>
 4006f0c:	100b883a 	mov	r5,r2
 4006f10:	180d883a 	mov	r6,r3
 4006f14:	2809883a 	mov	r4,r5
 4006f18:	300b883a 	mov	r5,r6
 4006f1c:	400b3bc0 	call	400b3bc <sin>
 4006f20:	1011883a 	mov	r8,r2
 4006f24:	1813883a 	mov	r9,r3
 4006f28:	000d883a 	mov	r6,zero
 4006f2c:	01d00f34 	movhi	r7,16444
 4006f30:	4009883a 	mov	r4,r8
 4006f34:	480b883a 	mov	r5,r9
 4006f38:	40107440 	call	4010744 <__muldf3>
 4006f3c:	1009883a 	mov	r4,r2
 4006f40:	180b883a 	mov	r5,r3
 4006f44:	2005883a 	mov	r2,r4
 4006f48:	2807883a 	mov	r3,r5
 4006f4c:	1009883a 	mov	r4,r2
 4006f50:	180b883a 	mov	r5,r3
 4006f54:	40119c40 	call	40119c4 <__truncdfsf2>
 4006f58:	1007883a 	mov	r3,r2
 4006f5c:	e0ffa915 	stw	r3,-348(fp)
        dy = (28.0)*cos(fHead);
 4006f60:	e13fa717 	ldw	r4,-356(fp)
 4006f64:	40118b40 	call	40118b4 <__extendsfdf2>
 4006f68:	100b883a 	mov	r5,r2
 4006f6c:	180d883a 	mov	r6,r3
 4006f70:	2809883a 	mov	r4,r5
 4006f74:	300b883a 	mov	r5,r6
 4006f78:	400b2bc0 	call	400b2bc <cos>
 4006f7c:	1011883a 	mov	r8,r2
 4006f80:	1813883a 	mov	r9,r3
 4006f84:	000d883a 	mov	r6,zero
 4006f88:	01d00f34 	movhi	r7,16444
 4006f8c:	4009883a 	mov	r4,r8
 4006f90:	480b883a 	mov	r5,r9
 4006f94:	40107440 	call	4010744 <__muldf3>
 4006f98:	1009883a 	mov	r4,r2
 4006f9c:	180b883a 	mov	r5,r3
 4006fa0:	2005883a 	mov	r2,r4
 4006fa4:	2807883a 	mov	r3,r5
 4006fa8:	1009883a 	mov	r4,r2
 4006fac:	180b883a 	mov	r5,r3
 4006fb0:	40119c40 	call	40119c4 <__truncdfsf2>
 4006fb4:	1007883a 	mov	r3,r2
 4006fb8:	e0ffaa15 	stw	r3,-344(fp)
        ptStart.x = ptCenter.x - dx;
 4006fbc:	e0bfef17 	ldw	r2,-68(fp)
 4006fc0:	1009883a 	mov	r4,r2
 4006fc4:	400f1440 	call	400f144 <__floatsisf>
 4006fc8:	1007883a 	mov	r3,r2
 4006fcc:	e17fa917 	ldw	r5,-348(fp)
 4006fd0:	1809883a 	mov	r4,r3
 4006fd4:	400ebf00 	call	400ebf0 <__subsf3>
 4006fd8:	1007883a 	mov	r3,r2
 4006fdc:	1805883a 	mov	r2,r3
 4006fe0:	1009883a 	mov	r4,r2
 4006fe4:	400f0d40 	call	400f0d4 <__fixsfsi>
 4006fe8:	e0bfeb15 	stw	r2,-84(fp)
        ptStart.y = ptCenter.y - dy;
 4006fec:	e0bff017 	ldw	r2,-64(fp)
 4006ff0:	1009883a 	mov	r4,r2
 4006ff4:	400f1440 	call	400f144 <__floatsisf>
 4006ff8:	1007883a 	mov	r3,r2
 4006ffc:	e17faa17 	ldw	r5,-344(fp)
 4007000:	1809883a 	mov	r4,r3
 4007004:	400ebf00 	call	400ebf0 <__subsf3>
 4007008:	1007883a 	mov	r3,r2
 400700c:	1805883a 	mov	r2,r3
 4007010:	1009883a 	mov	r4,r2
 4007014:	400f0d40 	call	400f0d4 <__fixsfsi>
 4007018:	e0bfec15 	stw	r2,-80(fp)

        dx = (nRadius-50.0)*sin(fHead);
 400701c:	e13fa717 	ldw	r4,-356(fp)
 4007020:	40118b40 	call	40118b4 <__extendsfdf2>
 4007024:	100b883a 	mov	r5,r2
 4007028:	180d883a 	mov	r6,r3
 400702c:	2809883a 	mov	r4,r5
 4007030:	300b883a 	mov	r5,r6
 4007034:	400b3bc0 	call	400b3bc <sin>
 4007038:	1011883a 	mov	r8,r2
 400703c:	1813883a 	mov	r9,r3
 4007040:	000d883a 	mov	r6,zero
 4007044:	01d018f4 	movhi	r7,16483
 4007048:	39f00004 	addi	r7,r7,-16384
 400704c:	4009883a 	mov	r4,r8
 4007050:	480b883a 	mov	r5,r9
 4007054:	40107440 	call	4010744 <__muldf3>
 4007058:	1009883a 	mov	r4,r2
 400705c:	180b883a 	mov	r5,r3
 4007060:	2005883a 	mov	r2,r4
 4007064:	2807883a 	mov	r3,r5
 4007068:	1009883a 	mov	r4,r2
 400706c:	180b883a 	mov	r5,r3
 4007070:	40119c40 	call	40119c4 <__truncdfsf2>
 4007074:	1007883a 	mov	r3,r2
 4007078:	e0ffa915 	stw	r3,-348(fp)
        dy = (nRadius-50.0)*cos(fHead);
 400707c:	e13fa717 	ldw	r4,-356(fp)
 4007080:	40118b40 	call	40118b4 <__extendsfdf2>
 4007084:	100b883a 	mov	r5,r2
 4007088:	180d883a 	mov	r6,r3
 400708c:	2809883a 	mov	r4,r5
 4007090:	300b883a 	mov	r5,r6
 4007094:	400b2bc0 	call	400b2bc <cos>
 4007098:	1011883a 	mov	r8,r2
 400709c:	1813883a 	mov	r9,r3
 40070a0:	000d883a 	mov	r6,zero
 40070a4:	01d018f4 	movhi	r7,16483
 40070a8:	39f00004 	addi	r7,r7,-16384
 40070ac:	4009883a 	mov	r4,r8
 40070b0:	480b883a 	mov	r5,r9
 40070b4:	40107440 	call	4010744 <__muldf3>
 40070b8:	1009883a 	mov	r4,r2
 40070bc:	180b883a 	mov	r5,r3
 40070c0:	2005883a 	mov	r2,r4
 40070c4:	2807883a 	mov	r3,r5
 40070c8:	1009883a 	mov	r4,r2
 40070cc:	180b883a 	mov	r5,r3
 40070d0:	40119c40 	call	40119c4 <__truncdfsf2>
 40070d4:	1007883a 	mov	r3,r2
 40070d8:	e0ffaa15 	stw	r3,-344(fp)
        ptEnd.x = ptCenter.x - dx;
 40070dc:	e0bfef17 	ldw	r2,-68(fp)
 40070e0:	1009883a 	mov	r4,r2
 40070e4:	400f1440 	call	400f144 <__floatsisf>
 40070e8:	1007883a 	mov	r3,r2
 40070ec:	e17fa917 	ldw	r5,-348(fp)
 40070f0:	1809883a 	mov	r4,r3
 40070f4:	400ebf00 	call	400ebf0 <__subsf3>
 40070f8:	1007883a 	mov	r3,r2
 40070fc:	1805883a 	mov	r2,r3
 4007100:	1009883a 	mov	r4,r2
 4007104:	400f0d40 	call	400f0d4 <__fixsfsi>
 4007108:	e0bfed15 	stw	r2,-76(fp)
        ptEnd.y = ptCenter.y - dy;
 400710c:	e0bff017 	ldw	r2,-64(fp)
 4007110:	1009883a 	mov	r4,r2
 4007114:	400f1440 	call	400f144 <__floatsisf>
 4007118:	1007883a 	mov	r3,r2
 400711c:	e17faa17 	ldw	r5,-344(fp)
 4007120:	1809883a 	mov	r4,r3
 4007124:	400ebf00 	call	400ebf0 <__subsf3>
 4007128:	1007883a 	mov	r3,r2
 400712c:	1805883a 	mov	r2,r3
 4007130:	1009883a 	mov	r4,r2
 4007134:	400f0d40 	call	400f0d4 <__fixsfsi>
 4007138:	e0bfee15 	stw	r2,-72(fp)
        vid_draw_line(ptStart.x, ptStart.y, ptEnd.x, ptEnd.y, nPenSize , COLOR_B, pReader);
 400713c:	e0ffeb17 	ldw	r3,-84(fp)
 4007140:	e13fec17 	ldw	r4,-80(fp)
 4007144:	e17fed17 	ldw	r5,-76(fp)
 4007148:	e1bfee17 	ldw	r6,-72(fp)
 400714c:	e0bfa117 	ldw	r2,-380(fp)
 4007150:	d8800215 	stw	r2,8(sp)
 4007154:	00803fc4 	movi	r2,255
 4007158:	d8800115 	stw	r2,4(sp)
 400715c:	00800044 	movi	r2,1
 4007160:	d8800015 	stw	r2,0(sp)
 4007164:	300f883a 	mov	r7,r6
 4007168:	280d883a 	mov	r6,r5
 400716c:	200b883a 	mov	r5,r4
 4007170:	1809883a 	mov	r4,r3
 4007174:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>

        // draw arrow
        ptStart.x = ptEnd.x + 10.0*sin(fHead-PI/6.0);
 4007178:	e0bfed17 	ldw	r2,-76(fp)
 400717c:	1009883a 	mov	r4,r2
 4007180:	40117d80 	call	40117d8 <__floatsidf>
 4007184:	1021883a 	mov	r16,r2
 4007188:	1823883a 	mov	r17,r3
 400718c:	e13fa717 	ldw	r4,-356(fp)
 4007190:	40118b40 	call	40118b4 <__extendsfdf2>
 4007194:	1011883a 	mov	r8,r2
 4007198:	1813883a 	mov	r9,r3
 400719c:	0192af74 	movhi	r6,19133
 40071a0:	31811244 	addi	r6,r6,1097
 40071a4:	01cff874 	movhi	r7,16353
 40071a8:	39f05444 	addi	r7,r7,-16047
 40071ac:	4009883a 	mov	r4,r8
 40071b0:	480b883a 	mov	r5,r9
 40071b4:	4010e5c0 	call	4010e5c <__subdf3>
 40071b8:	1009883a 	mov	r4,r2
 40071bc:	180b883a 	mov	r5,r3
 40071c0:	2005883a 	mov	r2,r4
 40071c4:	2807883a 	mov	r3,r5
 40071c8:	1009883a 	mov	r4,r2
 40071cc:	180b883a 	mov	r5,r3
 40071d0:	400b3bc0 	call	400b3bc <sin>
 40071d4:	1011883a 	mov	r8,r2
 40071d8:	1813883a 	mov	r9,r3
 40071dc:	000d883a 	mov	r6,zero
 40071e0:	01d00934 	movhi	r7,16420
 40071e4:	4009883a 	mov	r4,r8
 40071e8:	480b883a 	mov	r5,r9
 40071ec:	40107440 	call	4010744 <__muldf3>
 40071f0:	1009883a 	mov	r4,r2
 40071f4:	180b883a 	mov	r5,r3
 40071f8:	2005883a 	mov	r2,r4
 40071fc:	2807883a 	mov	r3,r5
 4007200:	100d883a 	mov	r6,r2
 4007204:	180f883a 	mov	r7,r3
 4007208:	8009883a 	mov	r4,r16
 400720c:	880b883a 	mov	r5,r17
 4007210:	400f3580 	call	400f358 <__adddf3>
 4007214:	1009883a 	mov	r4,r2
 4007218:	180b883a 	mov	r5,r3
 400721c:	2005883a 	mov	r2,r4
 4007220:	2807883a 	mov	r3,r5
 4007224:	1009883a 	mov	r4,r2
 4007228:	180b883a 	mov	r5,r3
 400722c:	40117580 	call	4011758 <__fixdfsi>
 4007230:	e0bfeb15 	stw	r2,-84(fp)
        ptStart.y = ptEnd.y + 10.0*cos(fHead-PI/6.0);
 4007234:	e0bfee17 	ldw	r2,-72(fp)
 4007238:	1009883a 	mov	r4,r2
 400723c:	40117d80 	call	40117d8 <__floatsidf>
 4007240:	1021883a 	mov	r16,r2
 4007244:	1823883a 	mov	r17,r3
 4007248:	e13fa717 	ldw	r4,-356(fp)
 400724c:	40118b40 	call	40118b4 <__extendsfdf2>
 4007250:	1011883a 	mov	r8,r2
 4007254:	1813883a 	mov	r9,r3
 4007258:	0192af74 	movhi	r6,19133
 400725c:	31811244 	addi	r6,r6,1097
 4007260:	01cff874 	movhi	r7,16353
 4007264:	39f05444 	addi	r7,r7,-16047
 4007268:	4009883a 	mov	r4,r8
 400726c:	480b883a 	mov	r5,r9
 4007270:	4010e5c0 	call	4010e5c <__subdf3>
 4007274:	1009883a 	mov	r4,r2
 4007278:	180b883a 	mov	r5,r3
 400727c:	2005883a 	mov	r2,r4
 4007280:	2807883a 	mov	r3,r5
 4007284:	1009883a 	mov	r4,r2
 4007288:	180b883a 	mov	r5,r3
 400728c:	400b2bc0 	call	400b2bc <cos>
 4007290:	1011883a 	mov	r8,r2
 4007294:	1813883a 	mov	r9,r3
 4007298:	000d883a 	mov	r6,zero
 400729c:	01d00934 	movhi	r7,16420
 40072a0:	4009883a 	mov	r4,r8
 40072a4:	480b883a 	mov	r5,r9
 40072a8:	40107440 	call	4010744 <__muldf3>
 40072ac:	1009883a 	mov	r4,r2
 40072b0:	180b883a 	mov	r5,r3
 40072b4:	2005883a 	mov	r2,r4
 40072b8:	2807883a 	mov	r3,r5
 40072bc:	100d883a 	mov	r6,r2
 40072c0:	180f883a 	mov	r7,r3
 40072c4:	8009883a 	mov	r4,r16
 40072c8:	880b883a 	mov	r5,r17
 40072cc:	400f3580 	call	400f358 <__adddf3>
 40072d0:	1009883a 	mov	r4,r2
 40072d4:	180b883a 	mov	r5,r3
 40072d8:	2005883a 	mov	r2,r4
 40072dc:	2807883a 	mov	r3,r5
 40072e0:	1009883a 	mov	r4,r2
 40072e4:	180b883a 	mov	r5,r3
 40072e8:	40117580 	call	4011758 <__fixdfsi>
 40072ec:	e0bfec15 	stw	r2,-80(fp)
        vid_draw_line(ptStart.x, ptStart.y, ptEnd.x, ptEnd.y, nPenSize , COLOR_B, pReader);
 40072f0:	e0ffeb17 	ldw	r3,-84(fp)
 40072f4:	e13fec17 	ldw	r4,-80(fp)
 40072f8:	e17fed17 	ldw	r5,-76(fp)
 40072fc:	e1bfee17 	ldw	r6,-72(fp)
 4007300:	e0bfa117 	ldw	r2,-380(fp)
 4007304:	d8800215 	stw	r2,8(sp)
 4007308:	00803fc4 	movi	r2,255
 400730c:	d8800115 	stw	r2,4(sp)
 4007310:	00800044 	movi	r2,1
 4007314:	d8800015 	stw	r2,0(sp)
 4007318:	300f883a 	mov	r7,r6
 400731c:	280d883a 	mov	r6,r5
 4007320:	200b883a 	mov	r5,r4
 4007324:	1809883a 	mov	r4,r3
 4007328:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>

        ptStart.x = ptEnd.x + 10.0*sin(fHead+PI/6.0);
 400732c:	e0bfed17 	ldw	r2,-76(fp)
 4007330:	1009883a 	mov	r4,r2
 4007334:	40117d80 	call	40117d8 <__floatsidf>
 4007338:	1021883a 	mov	r16,r2
 400733c:	1823883a 	mov	r17,r3
 4007340:	e13fa717 	ldw	r4,-356(fp)
 4007344:	40118b40 	call	40118b4 <__extendsfdf2>
 4007348:	1011883a 	mov	r8,r2
 400734c:	1813883a 	mov	r9,r3
 4007350:	0192af74 	movhi	r6,19133
 4007354:	31811244 	addi	r6,r6,1097
 4007358:	01cff874 	movhi	r7,16353
 400735c:	39f05444 	addi	r7,r7,-16047
 4007360:	4009883a 	mov	r4,r8
 4007364:	480b883a 	mov	r5,r9
 4007368:	400f3580 	call	400f358 <__adddf3>
 400736c:	1009883a 	mov	r4,r2
 4007370:	180b883a 	mov	r5,r3
 4007374:	2005883a 	mov	r2,r4
 4007378:	2807883a 	mov	r3,r5
 400737c:	1009883a 	mov	r4,r2
 4007380:	180b883a 	mov	r5,r3
 4007384:	400b3bc0 	call	400b3bc <sin>
 4007388:	1011883a 	mov	r8,r2
 400738c:	1813883a 	mov	r9,r3
 4007390:	000d883a 	mov	r6,zero
 4007394:	01d00934 	movhi	r7,16420
 4007398:	4009883a 	mov	r4,r8
 400739c:	480b883a 	mov	r5,r9
 40073a0:	40107440 	call	4010744 <__muldf3>
 40073a4:	1009883a 	mov	r4,r2
 40073a8:	180b883a 	mov	r5,r3
 40073ac:	2005883a 	mov	r2,r4
 40073b0:	2807883a 	mov	r3,r5
 40073b4:	100d883a 	mov	r6,r2
 40073b8:	180f883a 	mov	r7,r3
 40073bc:	8009883a 	mov	r4,r16
 40073c0:	880b883a 	mov	r5,r17
 40073c4:	400f3580 	call	400f358 <__adddf3>
 40073c8:	1009883a 	mov	r4,r2
 40073cc:	180b883a 	mov	r5,r3
 40073d0:	2005883a 	mov	r2,r4
 40073d4:	2807883a 	mov	r3,r5
 40073d8:	1009883a 	mov	r4,r2
 40073dc:	180b883a 	mov	r5,r3
 40073e0:	40117580 	call	4011758 <__fixdfsi>
 40073e4:	e0bfeb15 	stw	r2,-84(fp)
        ptStart.y = ptEnd.y + 10.0*cos(fHead+PI/6.0);
 40073e8:	e0bfee17 	ldw	r2,-72(fp)
 40073ec:	1009883a 	mov	r4,r2
 40073f0:	40117d80 	call	40117d8 <__floatsidf>
 40073f4:	1021883a 	mov	r16,r2
 40073f8:	1823883a 	mov	r17,r3
 40073fc:	e13fa717 	ldw	r4,-356(fp)
 4007400:	40118b40 	call	40118b4 <__extendsfdf2>
 4007404:	1011883a 	mov	r8,r2
 4007408:	1813883a 	mov	r9,r3
 400740c:	0192af74 	movhi	r6,19133
 4007410:	31811244 	addi	r6,r6,1097
 4007414:	01cff874 	movhi	r7,16353
 4007418:	39f05444 	addi	r7,r7,-16047
 400741c:	4009883a 	mov	r4,r8
 4007420:	480b883a 	mov	r5,r9
 4007424:	400f3580 	call	400f358 <__adddf3>
 4007428:	1009883a 	mov	r4,r2
 400742c:	180b883a 	mov	r5,r3
 4007430:	2005883a 	mov	r2,r4
 4007434:	2807883a 	mov	r3,r5
 4007438:	1009883a 	mov	r4,r2
 400743c:	180b883a 	mov	r5,r3
 4007440:	400b2bc0 	call	400b2bc <cos>
 4007444:	1011883a 	mov	r8,r2
 4007448:	1813883a 	mov	r9,r3
 400744c:	000d883a 	mov	r6,zero
 4007450:	01d00934 	movhi	r7,16420
 4007454:	4009883a 	mov	r4,r8
 4007458:	480b883a 	mov	r5,r9
 400745c:	40107440 	call	4010744 <__muldf3>
 4007460:	1009883a 	mov	r4,r2
 4007464:	180b883a 	mov	r5,r3
 4007468:	2005883a 	mov	r2,r4
 400746c:	2807883a 	mov	r3,r5
 4007470:	100d883a 	mov	r6,r2
 4007474:	180f883a 	mov	r7,r3
 4007478:	8009883a 	mov	r4,r16
 400747c:	880b883a 	mov	r5,r17
 4007480:	400f3580 	call	400f358 <__adddf3>
 4007484:	1009883a 	mov	r4,r2
 4007488:	180b883a 	mov	r5,r3
 400748c:	2005883a 	mov	r2,r4
 4007490:	2807883a 	mov	r3,r5
 4007494:	1009883a 	mov	r4,r2
 4007498:	180b883a 	mov	r5,r3
 400749c:	40117580 	call	4011758 <__fixdfsi>
 40074a0:	e0bfec15 	stw	r2,-80(fp)
        vid_draw_line(ptStart.x, ptStart.y, ptEnd.x, ptEnd.y, nPenSize , COLOR_B, pReader);
 40074a4:	e0ffeb17 	ldw	r3,-84(fp)
 40074a8:	e13fec17 	ldw	r4,-80(fp)
 40074ac:	e17fed17 	ldw	r5,-76(fp)
 40074b0:	e1bfee17 	ldw	r6,-72(fp)
 40074b4:	e0bfa117 	ldw	r2,-380(fp)
 40074b8:	d8800215 	stw	r2,8(sp)
 40074bc:	00803fc4 	movi	r2,255
 40074c0:	d8800115 	stw	r2,4(sp)
 40074c4:	00800044 	movi	r2,1
 40074c8:	d8800015 	stw	r2,0(sp)
 40074cc:	300f883a 	mov	r7,r6
 40074d0:	280d883a 	mov	r6,r5
 40074d4:	200b883a 	mov	r5,r4
 40074d8:	1809883a 	mov	r4,r3
 40074dc:	4003e100 	call	4003e10 <_Z13vid_draw_lineiiiiiiP16VIP_FRAME_READER>



        // update gui now
        VIPFR_ActiveDrawFrame(pReader);
 40074e0:	e13fa117 	ldw	r4,-380(fp)
 40074e4:	400a8c80 	call	400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>
    VIPFR_ActiveDrawFrame(pReader);

    mpu.initialize();


   while(1){
 40074e8:	003c2106 	br	4006570 <__reset+0xfb005570>

040074ec <_Z9MagViewerv>:
#include "system.h"
#include "mpu9250.h"
#include "uart.h"


void MagViewer(void){
 40074ec:	deffc904 	addi	sp,sp,-220
 40074f0:	dfc03615 	stw	ra,216(sp)
 40074f4:	df003515 	stw	fp,212(sp)
 40074f8:	df003504 	addi	fp,sp,212
	MPU9250 mpu(MPU_I2C_OPENCORES_BASE);
 40074fc:	01803404 	movi	r6,208
 4007500:	01424034 	movhi	r5,2304
 4007504:	29482004 	addi	r5,r5,8320
 4007508:	e13fcb04 	addi	r4,fp,-212
 400750c:	40075ac0 	call	40075ac <_ZN7MPU9250C1Emh>
	}

	if (hUart)
		UART_Close(hUart);
*/
}
 4007510:	0001883a 	nop
 4007514:	e037883a 	mov	sp,fp
 4007518:	dfc00117 	ldw	ra,4(sp)
 400751c:	df000017 	ldw	fp,0(sp)
 4007520:	dec00204 	addi	sp,sp,8
 4007524:	f800283a 	ret

04007528 <main>:


int main()
{
 4007528:	defffd04 	addi	sp,sp,-12
 400752c:	dfc00215 	stw	ra,8(sp)
 4007530:	df000115 	stw	fp,4(sp)
 4007534:	df000104 	addi	fp,sp,4

    // touch
    MTC2_INFO *pTouch;


    IOWR(LED_BASE, 0x00, 0xFF); // high-active
 4007538:	00c03fc4 	movi	r3,255
 400753c:	00820034 	movhi	r2,2048
 4007540:	10801004 	addi	r2,r2,64
 4007544:	10c00035 	stwio	r3,0(r2)


    //MagViewer();

    // init touch
    pTouch=MTC2_Init(TOUCH_I2C_OPENCORES_BASE,TOUCH_INT_N_BASE,TOUCH_INT_N_IRQ, TOUCH_INT_N_IRQ_INTERRUPT_CONTROLLER_ID);
 4007548:	000f883a 	mov	r7,zero
 400754c:	01800244 	movi	r6,9
 4007550:	01424034 	movhi	r5,2304
 4007554:	29483404 	addi	r5,r5,8400
 4007558:	01024034 	movhi	r4,2304
 400755c:	21082804 	addi	r4,r4,8352
 4007560:	400a0380 	call	400a038 <_Z9MTC2_Initmmmm>
 4007564:	e0bfff15 	stw	r2,-4(fp)
    if (!pTouch){
 4007568:	e0bfff17 	ldw	r2,-4(fp)
 400756c:	1000041e 	bne	r2,zero,4007580 <main+0x58>
        printf("Failed to init multi-touch\r\n");
 4007570:	01010234 	movhi	r4,1032
 4007574:	2105ff04 	addi	r4,r4,6140
 4007578:	40127b00 	call	40127b0 <puts>
 400757c:	00000306 	br	400758c <main+0x64>
    }else{
        printf("Init touch successfully\r\n");
 4007580:	01010234 	movhi	r4,1032
 4007584:	21060604 	addi	r4,r4,6168
 4007588:	40127b00 	call	40127b0 <puts>

    }
    GUI_Compass(pTouch);
 400758c:	e13fff17 	ldw	r4,-4(fp)
 4007590:	400615c0 	call	400615c <_Z11GUI_CompassP9MTC2_INFO>
  return 0;
 4007594:	0005883a 	mov	r2,zero
}
 4007598:	e037883a 	mov	sp,fp
 400759c:	dfc00117 	ldw	ra,4(sp)
 40075a0:	df000017 	ldw	fp,0(sp)
 40075a4:	dec00204 	addi	sp,sp,8
 40075a8:	f800283a 	ret

040075ac <_ZN7MPU9250C1Emh>:

#define G_SI 9.80665
#define PI  3.14159
//-----------------------------------------------------------------------------------------------

MPU9250::MPU9250(uint32_t ControllerAddr, uint8_t DeviceAddr):
 40075ac:	defff904 	addi	sp,sp,-28
 40075b0:	dfc00615 	stw	ra,24(sp)
 40075b4:	df000515 	stw	fp,20(sp)
 40075b8:	df000504 	addi	fp,sp,20
 40075bc:	e13ffd15 	stw	r4,-12(fp)
 40075c0:	e17ffe15 	stw	r5,-8(fp)
 40075c4:	3005883a 	mov	r2,r6
 40075c8:	e0bfff05 	stb	r2,-4(fp)
m_ControllerAddr(ControllerAddr),
devAddr(DeviceAddr)
 40075cc:	e0bffd17 	ldw	r2,-12(fp)
 40075d0:	e0fffe17 	ldw	r3,-8(fp)
 40075d4:	10c01315 	stw	r3,76(r2)
 40075d8:	e0bffd17 	ldw	r2,-12(fp)
 40075dc:	e0ffff03 	ldbu	r3,-4(fp)
 40075e0:	10c01405 	stb	r3,80(r2)
{
	const int ref_clk = 50*1000*1000; // 50Mhz
 40075e4:	0080bef4 	movhi	r2,763
 40075e8:	10bc2004 	addi	r2,r2,-3968
 40075ec:	e0bffb15 	stw	r2,-20(fp)
	const int i2c_clk = 100*1000; // 100KHz
 40075f0:	008000b4 	movhi	r2,2
 40075f4:	10a1a804 	addi	r2,r2,-31072
 40075f8:	e0bffc15 	stw	r2,-16(fp)
	oc_i2c_init_ex(m_ControllerAddr, ref_clk, i2c_clk);
 40075fc:	e0bffd17 	ldw	r2,-12(fp)
 4007600:	10801317 	ldw	r2,76(r2)
 4007604:	018000b4 	movhi	r6,2
 4007608:	31a1a804 	addi	r6,r6,-31072
 400760c:	0140bef4 	movhi	r5,763
 4007610:	297c2004 	addi	r5,r5,-3968
 4007614:	1009883a 	mov	r4,r2
 4007618:	4008b240 	call	4008b24 <_Z14oc_i2c_init_exlll>
}
 400761c:	0001883a 	nop
 4007620:	e037883a 	mov	sp,fp
 4007624:	dfc00117 	ldw	ra,4(sp)
 4007628:	df000017 	ldw	fp,0(sp)
 400762c:	dec00204 	addi	sp,sp,8
 4007630:	f800283a 	ret

04007634 <_ZN7MPU92508WriteRegEhh>:
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
 4007634:	defffa04 	addi	sp,sp,-24
 4007638:	dfc00515 	stw	ra,20(sp)
 400763c:	df000415 	stw	fp,16(sp)
 4007640:	df000404 	addi	fp,sp,16
 4007644:	e13ffd15 	stw	r4,-12(fp)
 4007648:	2807883a 	mov	r3,r5
 400764c:	3005883a 	mov	r2,r6
 4007650:	e0fffe05 	stb	r3,-8(fp)
 4007654:	e0bfff05 	stb	r2,-4(fp)
#if 1
	if (WriteAddr & READ_FLAG)
 4007658:	e0bffe03 	ldbu	r2,-8(fp)
 400765c:	10803fcc 	andi	r2,r2,255
 4007660:	1080201c 	xori	r2,r2,128
 4007664:	10bfe004 	addi	r2,r2,-128
 4007668:	1000080e 	bge	r2,zero,400768c <_ZN7MPU92508WriteRegEhh+0x58>
		return ReadReg(WriteAddr, WriteData);
 400766c:	e0bffe03 	ldbu	r2,-8(fp)
 4007670:	e0ffff03 	ldbu	r3,-4(fp)
 4007674:	18c03fcc 	andi	r3,r3,255
 4007678:	180d883a 	mov	r6,r3
 400767c:	100b883a 	mov	r5,r2
 4007680:	e13ffd17 	ldw	r4,-12(fp)
 4007684:	40076e00 	call	40076e0 <_ZN7MPU92507ReadRegEhh>
 4007688:	00001006 	br	40076cc <_ZN7MPU92508WriteRegEhh+0x98>
	OC_I2C_Write(m_ControllerAddr,devAddr, WriteAddr, &WriteData, sizeof(WriteData));
 400768c:	e0bffd17 	ldw	r2,-12(fp)
 4007690:	10801317 	ldw	r2,76(r2)
 4007694:	1011883a 	mov	r8,r2
 4007698:	e0bffd17 	ldw	r2,-12(fp)
 400769c:	10801403 	ldbu	r2,80(r2)
 40076a0:	10c03fcc 	andi	r3,r2,255
 40076a4:	e13ffe03 	ldbu	r4,-8(fp)
 40076a8:	00800044 	movi	r2,1
 40076ac:	e17fff04 	addi	r5,fp,-4
 40076b0:	d8800015 	stw	r2,0(sp)
 40076b4:	280f883a 	mov	r7,r5
 40076b8:	200d883a 	mov	r6,r4
 40076bc:	180b883a 	mov	r5,r3
 40076c0:	4009883a 	mov	r4,r8
 40076c4:	4008e040 	call	4008e04 <_Z12OC_I2C_WritelhhPhi>
	return 0x00;
 40076c8:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
 40076cc:	e037883a 	mov	sp,fp
 40076d0:	dfc00117 	ldw	ra,4(sp)
 40076d4:	df000017 	ldw	fp,0(sp)
 40076d8:	dec00204 	addi	sp,sp,8
 40076dc:	f800283a 	ret

040076e0 <_ZN7MPU92507ReadRegEhh>:

//-----------------------------------------------------------------------------------------------

unsigned int  MPU9250::ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
 40076e0:	defff904 	addi	sp,sp,-28
 40076e4:	dfc00615 	stw	ra,24(sp)
 40076e8:	df000515 	stw	fp,20(sp)
 40076ec:	df000504 	addi	fp,sp,20
 40076f0:	e13ffd15 	stw	r4,-12(fp)
 40076f4:	2807883a 	mov	r3,r5
 40076f8:	3005883a 	mov	r2,r6
 40076fc:	e0fffe05 	stb	r3,-8(fp)
 4007700:	e0bfff05 	stb	r2,-4(fp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(m_ControllerAddr,devAddr,WriteAddr, &ReadData, sizeof(ReadData));
 4007704:	e0bffd17 	ldw	r2,-12(fp)
 4007708:	10801317 	ldw	r2,76(r2)
 400770c:	1011883a 	mov	r8,r2
 4007710:	e0bffd17 	ldw	r2,-12(fp)
 4007714:	10801403 	ldbu	r2,80(r2)
 4007718:	10c03fcc 	andi	r3,r2,255
 400771c:	e13ffe03 	ldbu	r4,-8(fp)
 4007720:	00800044 	movi	r2,1
 4007724:	d8800015 	stw	r2,0(sp)
 4007728:	e1fffc04 	addi	r7,fp,-16
 400772c:	200d883a 	mov	r6,r4
 4007730:	180b883a 	mov	r5,r3
 4007734:	4009883a 	mov	r4,r8
 4007738:	40090b40 	call	40090b4 <_Z11OC_I2C_ReadlhhPhi>
	return ReadData;
 400773c:	e0bffc03 	ldbu	r2,-16(fp)
 4007740:	10803fcc 	andi	r2,r2,255
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
 4007744:	e037883a 	mov	sp,fp
 4007748:	dfc00117 	ldw	ra,4(sp)
 400774c:	df000017 	ldw	fp,0(sp)
 4007750:	dec00204 	addi	sp,sp,8
 4007754:	f800283a 	ret

04007758 <_ZN7MPU92508ReadRegsEhPhj>:

//-----------------------------------------------------------------------------------------------

void MPU9250::ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 4007758:	defff904 	addi	sp,sp,-28
 400775c:	dfc00615 	stw	ra,24(sp)
 4007760:	df000515 	stw	fp,20(sp)
 4007764:	df000504 	addi	fp,sp,20
 4007768:	e13ffc15 	stw	r4,-16(fp)
 400776c:	2805883a 	mov	r2,r5
 4007770:	e1bffe15 	stw	r6,-8(fp)
 4007774:	e1ffff15 	stw	r7,-4(fp)
 4007778:	e0bffd05 	stb	r2,-12(fp)
#if 1
	OC_I2C_Read(m_ControllerAddr,devAddr,ReadAddr, ReadBuf, Bytes);
 400777c:	e0bffc17 	ldw	r2,-16(fp)
 4007780:	10801317 	ldw	r2,76(r2)
 4007784:	1011883a 	mov	r8,r2
 4007788:	e0bffc17 	ldw	r2,-16(fp)
 400778c:	10801403 	ldbu	r2,80(r2)
 4007790:	10c03fcc 	andi	r3,r2,255
 4007794:	e13ffd03 	ldbu	r4,-12(fp)
 4007798:	e0bfff17 	ldw	r2,-4(fp)
 400779c:	d8800015 	stw	r2,0(sp)
 40077a0:	e1fffe17 	ldw	r7,-8(fp)
 40077a4:	200d883a 	mov	r6,r4
 40077a8:	180b883a 	mov	r5,r3
 40077ac:	4009883a 	mov	r4,r8
 40077b0:	40090b40 	call	40090b4 <_Z11OC_I2C_ReadlhhPhi>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
 40077b4:	0001883a 	nop
 40077b8:	e037883a 	mov	sp,fp
 40077bc:	dfc00117 	ldw	ra,4(sp)
 40077c0:	df000017 	ldw	fp,0(sp)
 40077c4:	dec00204 	addi	sp,sp,8
 40077c8:	f800283a 	ret

040077cc <_ZN7MPU925014testConnectionEv>:
usage: call this function to know if SPI and MPU9250 are working correctly.
returns true if mpu9250 answers
-----------------------------------------------------------------------------------------------*/

bool MPU9250::testConnection()
{
 40077cc:	defffc04 	addi	sp,sp,-16
 40077d0:	dfc00315 	stw	ra,12(sp)
 40077d4:	df000215 	stw	fp,8(sp)
 40077d8:	df000204 	addi	fp,sp,8
 40077dc:	e13fff15 	stw	r4,-4(fp)
    unsigned int response;
    response=WriteReg(MPUREG_WHOAMI|READ_FLAG, 0x00);
 40077e0:	000d883a 	mov	r6,zero
 40077e4:	01403d44 	movi	r5,245
 40077e8:	e13fff17 	ldw	r4,-4(fp)
 40077ec:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 40077f0:	e0bffe15 	stw	r2,-8(fp)

    if (response == 0x71)
 40077f4:	e0bffe17 	ldw	r2,-8(fp)
 40077f8:	10801c58 	cmpnei	r2,r2,113
 40077fc:	1000021e 	bne	r2,zero,4007808 <_ZN7MPU925014testConnectionEv+0x3c>
        return true;
 4007800:	00800044 	movi	r2,1
 4007804:	00000106 	br	400780c <_ZN7MPU925014testConnectionEv+0x40>
    else
        return false;
 4007808:	0005883a 	mov	r2,zero
}
 400780c:	e037883a 	mov	sp,fp
 4007810:	dfc00117 	ldw	ra,4(sp)
 4007814:	df000017 	ldw	fp,0(sp)
 4007818:	dec00204 	addi	sp,sp,8
 400781c:	f800283a 	ret

04007820 <_ZN7MPU925010initializeEii>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250::initialize(int sample_rate_div, int low_pass_filter)
{
 4007820:	defff204 	addi	sp,sp,-56
 4007824:	dfc00d15 	stw	ra,52(sp)
 4007828:	df000c15 	stw	fp,48(sp)
 400782c:	df000c04 	addi	fp,sp,48
 4007830:	e13ffd15 	stw	r4,-12(fp)
 4007834:	e17ffe15 	stw	r5,-8(fp)
 4007838:	e1bfff15 	stw	r6,-4(fp)
    uint8_t i = 0;
 400783c:	e03ff405 	stb	zero,-48(fp)

        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte

    };
 4007840:	e0bff444 	addi	r2,fp,-47
 4007844:	00c00804 	movi	r3,32
 4007848:	180d883a 	mov	r6,r3
 400784c:	000b883a 	mov	r5,zero
 4007850:	1009883a 	mov	r4,r2
 4007854:	401255c0 	call	401255c <memset>
 4007858:	00800044 	movi	r2,1
 400785c:	e0bff445 	stb	r2,-47(fp)
 4007860:	00801ac4 	movi	r2,107
 4007864:	e0bff485 	stb	r2,-46(fp)
 4007868:	00801b04 	movi	r2,108
 400786c:	e0bff505 	stb	r2,-44(fp)
 4007870:	00800684 	movi	r2,26
 4007874:	e0bff585 	stb	r2,-42(fp)
 4007878:	00800604 	movi	r2,24
 400787c:	e0bff5c5 	stb	r2,-41(fp)
 4007880:	008006c4 	movi	r2,27
 4007884:	e0bff605 	stb	r2,-40(fp)
 4007888:	00800204 	movi	r2,8
 400788c:	e0bff645 	stb	r2,-39(fp)
 4007890:	00800704 	movi	r2,28
 4007894:	e0bff685 	stb	r2,-38(fp)
 4007898:	00800244 	movi	r2,9
 400789c:	e0bff6c5 	stb	r2,-37(fp)
 40078a0:	00800744 	movi	r2,29
 40078a4:	e0bff705 	stb	r2,-36(fp)
 40078a8:	00800c04 	movi	r2,48
 40078ac:	e0bff745 	stb	r2,-35(fp)
 40078b0:	00800dc4 	movi	r2,55
 40078b4:	e0bff785 	stb	r2,-34(fp)
 40078b8:	00800804 	movi	r2,32
 40078bc:	e0bff7c5 	stb	r2,-33(fp)
 40078c0:	00801a84 	movi	r2,106
 40078c4:	e0bff805 	stb	r2,-32(fp)
 40078c8:	00800344 	movi	r2,13
 40078cc:	e0bff845 	stb	r2,-31(fp)
 40078d0:	00800904 	movi	r2,36
 40078d4:	e0bff885 	stb	r2,-30(fp)
 40078d8:	00800304 	movi	r2,12
 40078dc:	e0bff8c5 	stb	r2,-29(fp)
 40078e0:	00800944 	movi	r2,37
 40078e4:	e0bff905 	stb	r2,-28(fp)
 40078e8:	008002c4 	movi	r2,11
 40078ec:	e0bff945 	stb	r2,-27(fp)
 40078f0:	00800984 	movi	r2,38
 40078f4:	e0bff985 	stb	r2,-26(fp)
 40078f8:	00800044 	movi	r2,1
 40078fc:	e0bff9c5 	stb	r2,-25(fp)
 4007900:	008018c4 	movi	r2,99
 4007904:	e0bffa05 	stb	r2,-24(fp)
 4007908:	00bfe044 	movi	r2,-127
 400790c:	e0bffa45 	stb	r2,-23(fp)
 4007910:	008009c4 	movi	r2,39
 4007914:	e0bffa85 	stb	r2,-22(fp)
 4007918:	00800284 	movi	r2,10
 400791c:	e0bffac5 	stb	r2,-21(fp)
 4007920:	00800984 	movi	r2,38
 4007924:	e0bffb05 	stb	r2,-20(fp)
 4007928:	00800484 	movi	r2,18
 400792c:	e0bffb45 	stb	r2,-19(fp)
 4007930:	008018c4 	movi	r2,99
 4007934:	e0bffb85 	stb	r2,-18(fp)
 4007938:	00bfe044 	movi	r2,-127
 400793c:	e0bffbc5 	stb	r2,-17(fp)
 4007940:	008009c4 	movi	r2,39
 4007944:	e0bffc05 	stb	r2,-16(fp)
 4007948:	e0bfff17 	ldw	r2,-4(fp)
 400794c:	e0bff545 	stb	r2,-43(fp)
    //spi.format(8,0);
    //spi.frequency(1000000);

    for(i=0; i<MPU_InitRegNum; i++) {
 4007950:	e03ff405 	stb	zero,-48(fp)
 4007954:	e0bff403 	ldbu	r2,-48(fp)
 4007958:	10800428 	cmpgeui	r2,r2,16
 400795c:	1000191e 	bne	r2,zero,40079c4 <_ZN7MPU925010initializeEii+0x1a4>
        WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 4007960:	e0bff403 	ldbu	r2,-48(fp)
 4007964:	1085883a 	add	r2,r2,r2
 4007968:	e0fff404 	addi	r3,fp,-48
 400796c:	1885883a 	add	r2,r3,r2
 4007970:	10800084 	addi	r2,r2,2
 4007974:	10800003 	ldbu	r2,0(r2)
 4007978:	10c03fcc 	andi	r3,r2,255
 400797c:	e0bff403 	ldbu	r2,-48(fp)
 4007980:	1085883a 	add	r2,r2,r2
 4007984:	e13ff404 	addi	r4,fp,-48
 4007988:	2085883a 	add	r2,r4,r2
 400798c:	10800044 	addi	r2,r2,1
 4007990:	10800003 	ldbu	r2,0(r2)
 4007994:	10803fcc 	andi	r2,r2,255
 4007998:	100d883a 	mov	r6,r2
 400799c:	180b883a 	mov	r5,r3
 40079a0:	e13ffd17 	ldw	r4,-12(fp)
 40079a4:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
        usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
 40079a8:	010000b4 	movhi	r4,2
 40079ac:	2121a804 	addi	r4,r4,-31072
 40079b0:	40203d80 	call	40203d8 <usleep>

    };
    //spi.format(8,0);
    //spi.frequency(1000000);

    for(i=0; i<MPU_InitRegNum; i++) {
 40079b4:	e0bff403 	ldbu	r2,-48(fp)
 40079b8:	10800044 	addi	r2,r2,1
 40079bc:	e0bff405 	stb	r2,-48(fp)
 40079c0:	003fe406 	br	4007954 <__reset+0xfb006954>
        WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
        usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
    }

    set_acc_scale(BITS_FS_16G);
 40079c4:	01400604 	movi	r5,24
 40079c8:	e13ffd17 	ldw	r4,-12(fp)
 40079cc:	40079fc0 	call	40079fc <_ZN7MPU925013set_acc_scaleEi>
    set_gyro_scale(BITS_FS_2000DPS);
 40079d0:	01400604 	movi	r5,24
 40079d4:	e13ffd17 	ldw	r4,-12(fp)
 40079d8:	4007b280 	call	4007b28 <_ZN7MPU925014set_gyro_scaleEi>

    calib_mag();
 40079dc:	e13ffd17 	ldw	r4,-12(fp)
 40079e0:	40081e40 	call	40081e4 <_ZN7MPU92509calib_magEv>
    return 0;
 40079e4:	0005883a 	mov	r2,zero
}
 40079e8:	e037883a 	mov	sp,fp
 40079ec:	dfc00117 	ldw	ra,4(sp)
 40079f0:	df000017 	ldw	fp,0(sp)
 40079f4:	dec00204 	addi	sp,sp,8
 40079f8:	f800283a 	ret

040079fc <_ZN7MPU925013set_acc_scaleEi>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::set_acc_scale(int scale)
{
 40079fc:	defffb04 	addi	sp,sp,-20
 4007a00:	dfc00415 	stw	ra,16(sp)
 4007a04:	df000315 	stw	fp,12(sp)
 4007a08:	df000304 	addi	fp,sp,12
 4007a0c:	e13ffe15 	stw	r4,-8(fp)
 4007a10:	e17fff15 	stw	r5,-4(fp)
    unsigned int temp_scale;
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
 4007a14:	e0bfff17 	ldw	r2,-4(fp)
 4007a18:	10803fcc 	andi	r2,r2,255
 4007a1c:	100d883a 	mov	r6,r2
 4007a20:	01400704 	movi	r5,28
 4007a24:	e13ffe17 	ldw	r4,-8(fp)
 4007a28:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>

    switch (scale){
 4007a2c:	e0bfff17 	ldw	r2,-4(fp)
 4007a30:	10c00220 	cmpeqi	r3,r2,8
 4007a34:	18000d1e 	bne	r3,zero,4007a6c <_ZN7MPU925013set_acc_scaleEi+0x70>
 4007a38:	10c00248 	cmpgei	r3,r2,9
 4007a3c:	1800021e 	bne	r3,zero,4007a48 <_ZN7MPU925013set_acc_scaleEi+0x4c>
 4007a40:	10000626 	beq	r2,zero,4007a5c <_ZN7MPU925013set_acc_scaleEi+0x60>
 4007a44:	00001506 	br	4007a9c <_ZN7MPU925013set_acc_scaleEi+0xa0>
 4007a48:	10c00420 	cmpeqi	r3,r2,16
 4007a4c:	18000b1e 	bne	r3,zero,4007a7c <_ZN7MPU925013set_acc_scaleEi+0x80>
 4007a50:	10800620 	cmpeqi	r2,r2,24
 4007a54:	10000d1e 	bne	r2,zero,4007a8c <_ZN7MPU925013set_acc_scaleEi+0x90>
 4007a58:	00001006 	br	4007a9c <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_2G:
            acc_divider=16384;
 4007a5c:	e0bffe17 	ldw	r2,-8(fp)
 4007a60:	00d1a034 	movhi	r3,18048
 4007a64:	10c00015 	stw	r3,0(r2)
        break;
 4007a68:	00000c06 	br	4007a9c <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_4G:
            acc_divider=8192;
 4007a6c:	e0bffe17 	ldw	r2,-8(fp)
 4007a70:	00d18034 	movhi	r3,17920
 4007a74:	10c00015 	stw	r3,0(r2)
        break;
 4007a78:	00000806 	br	4007a9c <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_8G:
            acc_divider=4096;
 4007a7c:	e0bffe17 	ldw	r2,-8(fp)
 4007a80:	00d16034 	movhi	r3,17792
 4007a84:	10c00015 	stw	r3,0(r2)
        break;
 4007a88:	00000406 	br	4007a9c <_ZN7MPU925013set_acc_scaleEi+0xa0>
        case BITS_FS_16G:
            acc_divider=2048;
 4007a8c:	e0bffe17 	ldw	r2,-8(fp)
 4007a90:	00d14034 	movhi	r3,17664
 4007a94:	10c00015 	stw	r3,0(r2)
        break;
 4007a98:	0001883a 	nop
    }
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 4007a9c:	000d883a 	mov	r6,zero
 4007aa0:	01402704 	movi	r5,156
 4007aa4:	e13ffe17 	ldw	r4,-8(fp)
 4007aa8:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 4007aac:	e0bffd15 	stw	r2,-12(fp)

    switch (temp_scale){
 4007ab0:	e0bffd17 	ldw	r2,-12(fp)
 4007ab4:	10c00220 	cmpeqi	r3,r2,8
 4007ab8:	18000c1e 	bne	r3,zero,4007aec <_ZN7MPU925013set_acc_scaleEi+0xf0>
 4007abc:	10c00268 	cmpgeui	r3,r2,9
 4007ac0:	1800021e 	bne	r3,zero,4007acc <_ZN7MPU925013set_acc_scaleEi+0xd0>
 4007ac4:	10000626 	beq	r2,zero,4007ae0 <_ZN7MPU925013set_acc_scaleEi+0xe4>
 4007ac8:	00001106 	br	4007b10 <_ZN7MPU925013set_acc_scaleEi+0x114>
 4007acc:	10c00420 	cmpeqi	r3,r2,16
 4007ad0:	1800091e 	bne	r3,zero,4007af8 <_ZN7MPU925013set_acc_scaleEi+0xfc>
 4007ad4:	10800620 	cmpeqi	r2,r2,24
 4007ad8:	10000a1e 	bne	r2,zero,4007b04 <_ZN7MPU925013set_acc_scaleEi+0x108>
 4007adc:	00000c06 	br	4007b10 <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_2G:
            temp_scale=2;
 4007ae0:	00800084 	movi	r2,2
 4007ae4:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007ae8:	00000906 	br	4007b10 <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_4G:
            temp_scale=4;
 4007aec:	00800104 	movi	r2,4
 4007af0:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007af4:	00000606 	br	4007b10 <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_8G:
            temp_scale=8;
 4007af8:	00800204 	movi	r2,8
 4007afc:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007b00:	00000306 	br	4007b10 <_ZN7MPU925013set_acc_scaleEi+0x114>
        case BITS_FS_16G:
            temp_scale=16;
 4007b04:	00800404 	movi	r2,16
 4007b08:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007b0c:	0001883a 	nop
    }
    return temp_scale;
 4007b10:	e0bffd17 	ldw	r2,-12(fp)
}
 4007b14:	e037883a 	mov	sp,fp
 4007b18:	dfc00117 	ldw	ra,4(sp)
 4007b1c:	df000017 	ldw	fp,0(sp)
 4007b20:	dec00204 	addi	sp,sp,8
 4007b24:	f800283a 	ret

04007b28 <_ZN7MPU925014set_gyro_scaleEi>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::set_gyro_scale(int scale)
{
 4007b28:	defffb04 	addi	sp,sp,-20
 4007b2c:	dfc00415 	stw	ra,16(sp)
 4007b30:	df000315 	stw	fp,12(sp)
 4007b34:	df000304 	addi	fp,sp,12
 4007b38:	e13ffe15 	stw	r4,-8(fp)
 4007b3c:	e17fff15 	stw	r5,-4(fp)
    unsigned int temp_scale;
    WriteReg(MPUREG_GYRO_CONFIG, scale);
 4007b40:	e0bfff17 	ldw	r2,-4(fp)
 4007b44:	10803fcc 	andi	r2,r2,255
 4007b48:	100d883a 	mov	r6,r2
 4007b4c:	014006c4 	movi	r5,27
 4007b50:	e13ffe17 	ldw	r4,-8(fp)
 4007b54:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    switch (scale){
 4007b58:	e0bfff17 	ldw	r2,-4(fp)
 4007b5c:	10c00220 	cmpeqi	r3,r2,8
 4007b60:	18000d1e 	bne	r3,zero,4007b98 <_ZN7MPU925014set_gyro_scaleEi+0x70>
 4007b64:	10c00248 	cmpgei	r3,r2,9
 4007b68:	1800021e 	bne	r3,zero,4007b74 <_ZN7MPU925014set_gyro_scaleEi+0x4c>
 4007b6c:	10000626 	beq	r2,zero,4007b88 <_ZN7MPU925014set_gyro_scaleEi+0x60>
 4007b70:	00001706 	br	4007bd0 <_ZN7MPU925014set_gyro_scaleEi+0xa8>
 4007b74:	10c00420 	cmpeqi	r3,r2,16
 4007b78:	18000b1e 	bne	r3,zero,4007ba8 <_ZN7MPU925014set_gyro_scaleEi+0x80>
 4007b7c:	10800620 	cmpeqi	r2,r2,24
 4007b80:	10000e1e 	bne	r2,zero,4007bbc <_ZN7MPU925014set_gyro_scaleEi+0x94>
 4007b84:	00001206 	br	4007bd0 <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_250DPS:
            gyro_divider=131;
 4007b88:	e0bffe17 	ldw	r2,-8(fp)
 4007b8c:	00d0c0f4 	movhi	r3,17155
 4007b90:	10c00115 	stw	r3,4(r2)
        break;
 4007b94:	00000e06 	br	4007bd0 <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
 4007b98:	e0bffe17 	ldw	r2,-8(fp)
 4007b9c:	00d0a0f4 	movhi	r3,17027
 4007ba0:	10c00115 	stw	r3,4(r2)
        break;
 4007ba4:	00000a06 	br	4007bd0 <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
 4007ba8:	e0fffe17 	ldw	r3,-8(fp)
 4007bac:	009080f4 	movhi	r2,16899
 4007bb0:	108cccc4 	addi	r2,r2,13107
 4007bb4:	18800115 	stw	r2,4(r3)
        break;
 4007bb8:	00000506 	br	4007bd0 <_ZN7MPU925014set_gyro_scaleEi+0xa8>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
 4007bbc:	e0fffe17 	ldw	r3,-8(fp)
 4007bc0:	009060f4 	movhi	r2,16771
 4007bc4:	108cccc4 	addi	r2,r2,13107
 4007bc8:	18800115 	stw	r2,4(r3)
        break;
 4007bcc:	0001883a 	nop
    }
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
 4007bd0:	000d883a 	mov	r6,zero
 4007bd4:	014026c4 	movi	r5,155
 4007bd8:	e13ffe17 	ldw	r4,-8(fp)
 4007bdc:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 4007be0:	e0bffd15 	stw	r2,-12(fp)
    switch (temp_scale){
 4007be4:	e0bffd17 	ldw	r2,-12(fp)
 4007be8:	10c00220 	cmpeqi	r3,r2,8
 4007bec:	18000c1e 	bne	r3,zero,4007c20 <_ZN7MPU925014set_gyro_scaleEi+0xf8>
 4007bf0:	10c00268 	cmpgeui	r3,r2,9
 4007bf4:	1800021e 	bne	r3,zero,4007c00 <_ZN7MPU925014set_gyro_scaleEi+0xd8>
 4007bf8:	10000626 	beq	r2,zero,4007c14 <_ZN7MPU925014set_gyro_scaleEi+0xec>
 4007bfc:	00001106 	br	4007c44 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
 4007c00:	10c00420 	cmpeqi	r3,r2,16
 4007c04:	1800091e 	bne	r3,zero,4007c2c <_ZN7MPU925014set_gyro_scaleEi+0x104>
 4007c08:	10800620 	cmpeqi	r2,r2,24
 4007c0c:	10000a1e 	bne	r2,zero,4007c38 <_ZN7MPU925014set_gyro_scaleEi+0x110>
 4007c10:	00000c06 	br	4007c44 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_250DPS:
            temp_scale=250;
 4007c14:	00803e84 	movi	r2,250
 4007c18:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007c1c:	00000906 	br	4007c44 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_500DPS:
            temp_scale=500;
 4007c20:	00807d04 	movi	r2,500
 4007c24:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007c28:	00000606 	br	4007c44 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_1000DPS:
            temp_scale=1000;
 4007c2c:	0080fa04 	movi	r2,1000
 4007c30:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007c34:	00000306 	br	4007c44 <_ZN7MPU925014set_gyro_scaleEi+0x11c>
        case BITS_FS_2000DPS:
            temp_scale=2000;
 4007c38:	0081f404 	movi	r2,2000
 4007c3c:	e0bffd15 	stw	r2,-12(fp)
        break;
 4007c40:	0001883a 	nop
    }
    return temp_scale;
 4007c44:	e0bffd17 	ldw	r2,-12(fp)
}
 4007c48:	e037883a 	mov	sp,fp
 4007c4c:	dfc00117 	ldw	ra,4(sp)
 4007c50:	df000017 	ldw	fp,0(sp)
 4007c54:	dec00204 	addi	sp,sp,8
 4007c58:	f800283a 	ret

04007c5c <_ZN7MPU92506whoamiEv>:
mpu9250 which should be 104 when in SPI mode.
returns the I2C address (104)
-----------------------------------------------------------------------------------------------*/

unsigned int MPU9250::whoami()
{
 4007c5c:	defffc04 	addi	sp,sp,-16
 4007c60:	dfc00315 	stw	ra,12(sp)
 4007c64:	df000215 	stw	fp,8(sp)
 4007c68:	df000204 	addi	fp,sp,8
 4007c6c:	e13fff15 	stw	r4,-4(fp)
    unsigned int response;
    response=WriteReg(MPUREG_WHOAMI|READ_FLAG, 0x00);
 4007c70:	000d883a 	mov	r6,zero
 4007c74:	01403d44 	movi	r5,245
 4007c78:	e13fff17 	ldw	r4,-4(fp)
 4007c7c:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 4007c80:	e0bffe15 	stw	r2,-8(fp)
    return response;
 4007c84:	e0bffe17 	ldw	r2,-8(fp)
}
 4007c88:	e037883a 	mov	sp,fp
 4007c8c:	dfc00117 	ldw	ra,4(sp)
 4007c90:	df000017 	ldw	fp,0(sp)
 4007c94:	dec00204 	addi	sp,sp,8
 4007c98:	f800283a 	ret

04007c9c <_ZN7MPU92508read_accEv>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_acc()
{
 4007c9c:	defff604 	addi	sp,sp,-40
 4007ca0:	dfc00915 	stw	ra,36(sp)
 4007ca4:	df000815 	stw	fp,32(sp)
 4007ca8:	dc400715 	stw	r17,28(sp)
 4007cac:	dc000615 	stw	r16,24(sp)
 4007cb0:	df000804 	addi	fp,sp,32
 4007cb4:	e13ffd15 	stw	r4,-12(fp)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
 4007cb8:	e0bffb04 	addi	r2,fp,-20
 4007cbc:	01c00184 	movi	r7,6
 4007cc0:	100d883a 	mov	r6,r2
 4007cc4:	01400ec4 	movi	r5,59
 4007cc8:	e13ffd17 	ldw	r4,-12(fp)
 4007ccc:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>
    for(i=0; i<3; i++) {
 4007cd0:	e03ff815 	stw	zero,-32(fp)
 4007cd4:	e0bff817 	ldw	r2,-32(fp)
 4007cd8:	108000c8 	cmpgei	r2,r2,3
 4007cdc:	1000441e 	bne	r2,zero,4007df0 <_ZN7MPU92508read_accEv+0x154>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4007ce0:	e0bff817 	ldw	r2,-32(fp)
 4007ce4:	1085883a 	add	r2,r2,r2
 4007ce8:	1007883a 	mov	r3,r2
 4007cec:	e0bffb04 	addi	r2,fp,-20
 4007cf0:	10c5883a 	add	r2,r2,r3
 4007cf4:	10800003 	ldbu	r2,0(r2)
 4007cf8:	10803fcc 	andi	r2,r2,255
 4007cfc:	1004923a 	slli	r2,r2,8
 4007d00:	1009883a 	mov	r4,r2
 4007d04:	e0bff817 	ldw	r2,-32(fp)
 4007d08:	1085883a 	add	r2,r2,r2
 4007d0c:	10800044 	addi	r2,r2,1
 4007d10:	e0fffb04 	addi	r3,fp,-20
 4007d14:	1885883a 	add	r2,r3,r2
 4007d18:	10800003 	ldbu	r2,0(r2)
 4007d1c:	10803fcc 	andi	r2,r2,255
 4007d20:	2084b03a 	or	r2,r4,r2
 4007d24:	e0bff90d 	sth	r2,-28(fp)
        data = (float)bit_data;
 4007d28:	e0bff90f 	ldh	r2,-28(fp)
 4007d2c:	1009883a 	mov	r4,r2
 4007d30:	400f1440 	call	400f144 <__floatsisf>
 4007d34:	1007883a 	mov	r3,r2
 4007d38:	e0fffa15 	stw	r3,-24(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
 4007d3c:	e13ffa17 	ldw	r4,-24(fp)
 4007d40:	40118b40 	call	40118b4 <__extendsfdf2>
 4007d44:	1011883a 	mov	r8,r2
 4007d48:	1813883a 	mov	r9,r3
 4007d4c:	018ea4f4 	movhi	r6,14995
 4007d50:	31a8c144 	addi	r6,r6,-23803
 4007d54:	01d00934 	movhi	r7,16420
 4007d58:	39e74044 	addi	r7,r7,-25343
 4007d5c:	4009883a 	mov	r4,r8
 4007d60:	480b883a 	mov	r5,r9
 4007d64:	40107440 	call	4010744 <__muldf3>
 4007d68:	1009883a 	mov	r4,r2
 4007d6c:	180b883a 	mov	r5,r3
 4007d70:	2021883a 	mov	r16,r4
 4007d74:	2823883a 	mov	r17,r5
 4007d78:	e0bffd17 	ldw	r2,-12(fp)
 4007d7c:	10c00017 	ldw	r3,0(r2)
 4007d80:	1809883a 	mov	r4,r3
 4007d84:	40118b40 	call	40118b4 <__extendsfdf2>
 4007d88:	1009883a 	mov	r4,r2
 4007d8c:	180b883a 	mov	r5,r3
 4007d90:	200d883a 	mov	r6,r4
 4007d94:	280f883a 	mov	r7,r5
 4007d98:	8009883a 	mov	r4,r16
 4007d9c:	880b883a 	mov	r5,r17
 4007da0:	400fc040 	call	400fc04 <__divdf3>
 4007da4:	1009883a 	mov	r4,r2
 4007da8:	180b883a 	mov	r5,r3
 4007dac:	2005883a 	mov	r2,r4
 4007db0:	2807883a 	mov	r3,r5
 4007db4:	1009883a 	mov	r4,r2
 4007db8:	180b883a 	mov	r5,r3
 4007dbc:	40119c40 	call	40119c4 <__truncdfsf2>
 4007dc0:	1009883a 	mov	r4,r2
 4007dc4:	e0fffd17 	ldw	r3,-12(fp)
 4007dc8:	e0bff817 	ldw	r2,-32(fp)
 4007dcc:	10800244 	addi	r2,r2,9
 4007dd0:	1085883a 	add	r2,r2,r2
 4007dd4:	1085883a 	add	r2,r2,r2
 4007dd8:	1885883a 	add	r2,r3,r2
 4007ddc:	11000015 	stw	r4,0(r2)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
 4007de0:	e0bff817 	ldw	r2,-32(fp)
 4007de4:	10800044 	addi	r2,r2,1
 4007de8:	e0bff815 	stw	r2,-32(fp)
 4007dec:	003fb906 	br	4007cd4 <__reset+0xfb006cd4>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }

}
 4007df0:	0001883a 	nop
 4007df4:	e6fffe04 	addi	sp,fp,-8
 4007df8:	dfc00317 	ldw	ra,12(sp)
 4007dfc:	df000217 	ldw	fp,8(sp)
 4007e00:	dc400117 	ldw	r17,4(sp)
 4007e04:	dc000017 	ldw	r16,0(sp)
 4007e08:	dec00404 	addi	sp,sp,16
 4007e0c:	f800283a 	ret

04007e10 <_ZN7MPU92509read_gyroEv>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_gyro()
{
 4007e10:	defff604 	addi	sp,sp,-40
 4007e14:	dfc00915 	stw	ra,36(sp)
 4007e18:	df000815 	stw	fp,32(sp)
 4007e1c:	dc400715 	stw	r17,28(sp)
 4007e20:	dc000615 	stw	r16,24(sp)
 4007e24:	df000804 	addi	fp,sp,32
 4007e28:	e13ffd15 	stw	r4,-12(fp)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
 4007e2c:	e0bffb04 	addi	r2,fp,-20
 4007e30:	01c00184 	movi	r7,6
 4007e34:	100d883a 	mov	r6,r2
 4007e38:	014010c4 	movi	r5,67
 4007e3c:	e13ffd17 	ldw	r4,-12(fp)
 4007e40:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>
    for(i=0; i<3; i++) {
 4007e44:	e03ff815 	stw	zero,-32(fp)
 4007e48:	e0bff817 	ldw	r2,-32(fp)
 4007e4c:	108000c8 	cmpgei	r2,r2,3
 4007e50:	1000441e 	bne	r2,zero,4007f64 <_ZN7MPU92509read_gyroEv+0x154>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4007e54:	e0bff817 	ldw	r2,-32(fp)
 4007e58:	1085883a 	add	r2,r2,r2
 4007e5c:	1007883a 	mov	r3,r2
 4007e60:	e0bffb04 	addi	r2,fp,-20
 4007e64:	10c5883a 	add	r2,r2,r3
 4007e68:	10800003 	ldbu	r2,0(r2)
 4007e6c:	10803fcc 	andi	r2,r2,255
 4007e70:	1004923a 	slli	r2,r2,8
 4007e74:	1009883a 	mov	r4,r2
 4007e78:	e0bff817 	ldw	r2,-32(fp)
 4007e7c:	1085883a 	add	r2,r2,r2
 4007e80:	10800044 	addi	r2,r2,1
 4007e84:	e0fffb04 	addi	r3,fp,-20
 4007e88:	1885883a 	add	r2,r3,r2
 4007e8c:	10800003 	ldbu	r2,0(r2)
 4007e90:	10803fcc 	andi	r2,r2,255
 4007e94:	2084b03a 	or	r2,r4,r2
 4007e98:	e0bff90d 	sth	r2,-28(fp)
        data = (float)bit_data;
 4007e9c:	e0bff90f 	ldh	r2,-28(fp)
 4007ea0:	1009883a 	mov	r4,r2
 4007ea4:	400f1440 	call	400f144 <__floatsisf>
 4007ea8:	1007883a 	mov	r3,r2
 4007eac:	e0fffa15 	stw	r3,-24(fp)
        gyroscope_data[i] = (PI / 180) * data / gyro_divider;
 4007eb0:	e13ffa17 	ldw	r4,-24(fp)
 4007eb4:	40118b40 	call	40118b4 <__extendsfdf2>
 4007eb8:	1011883a 	mov	r8,r2
 4007ebc:	1813883a 	mov	r9,r3
 4007ec0:	01a943b4 	movhi	r6,42254
 4007ec4:	31b89c04 	addi	r6,r6,-7568
 4007ec8:	01cfe4b4 	movhi	r7,16274
 4007ecc:	39f7d144 	addi	r7,r7,-8379
 4007ed0:	4009883a 	mov	r4,r8
 4007ed4:	480b883a 	mov	r5,r9
 4007ed8:	40107440 	call	4010744 <__muldf3>
 4007edc:	1009883a 	mov	r4,r2
 4007ee0:	180b883a 	mov	r5,r3
 4007ee4:	2021883a 	mov	r16,r4
 4007ee8:	2823883a 	mov	r17,r5
 4007eec:	e0bffd17 	ldw	r2,-12(fp)
 4007ef0:	10c00117 	ldw	r3,4(r2)
 4007ef4:	1809883a 	mov	r4,r3
 4007ef8:	40118b40 	call	40118b4 <__extendsfdf2>
 4007efc:	1009883a 	mov	r4,r2
 4007f00:	180b883a 	mov	r5,r3
 4007f04:	200d883a 	mov	r6,r4
 4007f08:	280f883a 	mov	r7,r5
 4007f0c:	8009883a 	mov	r4,r16
 4007f10:	880b883a 	mov	r5,r17
 4007f14:	400fc040 	call	400fc04 <__divdf3>
 4007f18:	1009883a 	mov	r4,r2
 4007f1c:	180b883a 	mov	r5,r3
 4007f20:	2005883a 	mov	r2,r4
 4007f24:	2807883a 	mov	r3,r5
 4007f28:	1009883a 	mov	r4,r2
 4007f2c:	180b883a 	mov	r5,r3
 4007f30:	40119c40 	call	40119c4 <__truncdfsf2>
 4007f34:	1009883a 	mov	r4,r2
 4007f38:	e0fffd17 	ldw	r3,-12(fp)
 4007f3c:	e0bff817 	ldw	r2,-32(fp)
 4007f40:	10800304 	addi	r2,r2,12
 4007f44:	1085883a 	add	r2,r2,r2
 4007f48:	1085883a 	add	r2,r2,r2
 4007f4c:	1885883a 	add	r2,r3,r2
 4007f50:	11000015 	stw	r4,0(r2)
    uint8_t response[6];
    int16_t bit_data;
    float data;
    int i;
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
 4007f54:	e0bff817 	ldw	r2,-32(fp)
 4007f58:	10800044 	addi	r2,r2,1
 4007f5c:	e0bff815 	stw	r2,-32(fp)
 4007f60:	003fb906 	br	4007e48 <__reset+0xfb006e48>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i] = (PI / 180) * data / gyro_divider;
    }

}
 4007f64:	0001883a 	nop
 4007f68:	e6fffe04 	addi	sp,fp,-8
 4007f6c:	dfc00317 	ldw	ra,12(sp)
 4007f70:	df000217 	ldw	fp,8(sp)
 4007f74:	dc400117 	ldw	r17,4(sp)
 4007f78:	dc000017 	ldw	r16,0(sp)
 4007f7c:	dec00404 	addi	sp,sp,16
 4007f80:	f800283a 	ret

04007f84 <_ZN7MPU92509read_tempEv>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void MPU9250::read_temp()
{
 4007f84:	defffa04 	addi	sp,sp,-24
 4007f88:	dfc00515 	stw	ra,20(sp)
 4007f8c:	df000415 	stw	fp,16(sp)
 4007f90:	df000404 	addi	fp,sp,16
 4007f94:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[2];
    int16_t bit_data;
    float data;
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);
 4007f98:	e0bffe04 	addi	r2,fp,-8
 4007f9c:	01c00084 	movi	r7,2
 4007fa0:	100d883a 	mov	r6,r2
 4007fa4:	01401044 	movi	r5,65
 4007fa8:	e13fff17 	ldw	r4,-4(fp)
 4007fac:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>

    bit_data=((int16_t)response[0]<<8)|response[1];
 4007fb0:	e0bffe03 	ldbu	r2,-8(fp)
 4007fb4:	10803fcc 	andi	r2,r2,255
 4007fb8:	1004923a 	slli	r2,r2,8
 4007fbc:	1007883a 	mov	r3,r2
 4007fc0:	e0bffe43 	ldbu	r2,-7(fp)
 4007fc4:	10803fcc 	andi	r2,r2,255
 4007fc8:	1884b03a 	or	r2,r3,r2
 4007fcc:	e0bffc0d 	sth	r2,-16(fp)
    data=(float)bit_data;
 4007fd0:	e0bffc0f 	ldh	r2,-16(fp)
 4007fd4:	1009883a 	mov	r4,r2
 4007fd8:	400f1440 	call	400f144 <__floatsisf>
 4007fdc:	1007883a 	mov	r3,r2
 4007fe0:	e0fffd15 	stw	r3,-12(fp)
    temperature=(data/340)+36.53;
 4007fe4:	0150eab4 	movhi	r5,17322
 4007fe8:	e13ffd17 	ldw	r4,-12(fp)
 4007fec:	400e2300 	call	400e230 <__divsf3>
 4007ff0:	1007883a 	mov	r3,r2
 4007ff4:	1805883a 	mov	r2,r3
 4007ff8:	1009883a 	mov	r4,r2
 4007ffc:	40118b40 	call	40118b4 <__extendsfdf2>
 4008000:	1011883a 	mov	r8,r2
 4008004:	1813883a 	mov	r9,r3
 4008008:	01828f74 	movhi	r6,2621
 400800c:	319c2904 	addi	r6,r6,28836
 4008010:	01d010b4 	movhi	r7,16450
 4008014:	39d0f5c4 	addi	r7,r7,17367
 4008018:	4009883a 	mov	r4,r8
 400801c:	480b883a 	mov	r5,r9
 4008020:	400f3580 	call	400f358 <__adddf3>
 4008024:	1009883a 	mov	r4,r2
 4008028:	180b883a 	mov	r5,r3
 400802c:	2005883a 	mov	r2,r4
 4008030:	2807883a 	mov	r3,r5
 4008034:	1009883a 	mov	r4,r2
 4008038:	180b883a 	mov	r5,r3
 400803c:	40119c40 	call	40119c4 <__truncdfsf2>
 4008040:	1007883a 	mov	r3,r2
 4008044:	e0bfff17 	ldw	r2,-4(fp)
 4008048:	10c00815 	stw	r3,32(r2)
}
 400804c:	0001883a 	nop
 4008050:	e037883a 	mov	sp,fp
 4008054:	dfc00117 	ldw	ra,4(sp)
 4008058:	df000017 	ldw	fp,0(sp)
 400805c:	dec00204 	addi	sp,sp,8
 4008060:	f800283a 	ret

04008064 <_ZN7MPU92509calib_accEv>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void MPU9250::calib_acc()
{
 4008064:	defffb04 	addi	sp,sp,-20
 4008068:	dfc00415 	stw	ra,16(sp)
 400806c:	df000315 	stw	fp,12(sp)
 4008070:	df000304 	addi	fp,sp,12
 4008074:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
 4008078:	000d883a 	mov	r6,zero
 400807c:	01402704 	movi	r5,156
 4008080:	e13fff17 	ldw	r4,-4(fp)
 4008084:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 4008088:	e0bffd15 	stw	r2,-12(fp)
    set_acc_scale(BITS_FS_8G);
 400808c:	01400404 	movi	r5,16
 4008090:	e13fff17 	ldw	r4,-4(fp)
 4008094:	40079fc0 	call	40079fc <_ZN7MPU925013set_acc_scaleEi>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

    ReadRegs(MPUREG_SELF_TEST_X,response,4);
 4008098:	e0bffe04 	addi	r2,fp,-8
 400809c:	01c00104 	movi	r7,4
 40080a0:	100d883a 	mov	r6,r2
 40080a4:	01400344 	movi	r5,13
 40080a8:	e13fff17 	ldw	r4,-4(fp)
 40080ac:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
 40080b0:	e0bffe03 	ldbu	r2,-8(fp)
 40080b4:	10c03fcc 	andi	r3,r2,255
 40080b8:	00802a74 	movhi	r2,169
 40080bc:	1097d804 	addi	r2,r2,24416
 40080c0:	1884703a 	and	r2,r3,r2
 40080c4:	1007d0fa 	srai	r3,r2,3
 40080c8:	e0bffec3 	ldbu	r2,-5(fp)
 40080cc:	10803fcc 	andi	r2,r2,255
 40080d0:	10a4000c 	andi	r2,r2,36864
 40080d4:	1005d13a 	srai	r2,r2,4
 40080d8:	1886b03a 	or	r3,r3,r2
 40080dc:	e0bfff17 	ldw	r2,-4(fp)
 40080e0:	10c00215 	stw	r3,8(r2)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
 40080e4:	e0bffe43 	ldbu	r2,-7(fp)
 40080e8:	10c03fcc 	andi	r3,r2,255
 40080ec:	00802a74 	movhi	r2,169
 40080f0:	1097d804 	addi	r2,r2,24416
 40080f4:	1884703a 	and	r2,r3,r2
 40080f8:	1007d0fa 	srai	r3,r2,3
 40080fc:	e0bffec3 	ldbu	r2,-5(fp)
 4008100:	10803fcc 	andi	r2,r2,255
 4008104:	1080900c 	andi	r2,r2,576
 4008108:	1005d0ba 	srai	r2,r2,2
 400810c:	1886b03a 	or	r3,r3,r2
 4008110:	e0bfff17 	ldw	r2,-4(fp)
 4008114:	10c00315 	stw	r3,12(r2)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
 4008118:	e0bffe83 	ldbu	r2,-6(fp)
 400811c:	10c03fcc 	andi	r3,r2,255
 4008120:	00802a74 	movhi	r2,169
 4008124:	1097d804 	addi	r2,r2,24416
 4008128:	1884703a 	and	r2,r3,r2
 400812c:	1007d0fa 	srai	r3,r2,3
 4008130:	e0bffec3 	ldbu	r2,-5(fp)
 4008134:	10803fcc 	andi	r2,r2,255
 4008138:	1080024c 	andi	r2,r2,9
 400813c:	1886b03a 	or	r3,r3,r2
 4008140:	e0bfff17 	ldw	r2,-4(fp)
 4008144:	10c00415 	stw	r3,16(r2)

    set_acc_scale(temp_scale);
 4008148:	e17ffd17 	ldw	r5,-12(fp)
 400814c:	e13fff17 	ldw	r4,-4(fp)
 4008150:	40079fc0 	call	40079fc <_ZN7MPU925013set_acc_scaleEi>
}
 4008154:	0001883a 	nop
 4008158:	e037883a 	mov	sp,fp
 400815c:	dfc00117 	ldw	ra,4(sp)
 4008160:	df000017 	ldw	fp,0(sp)
 4008164:	dec00204 	addi	sp,sp,8
 4008168:	f800283a 	ret

0400816c <_ZN7MPU925013AK8963_whoamiEv>:

//-----------------------------------------------------------------------------------------------

uint8_t MPU9250::AK8963_whoami(){
 400816c:	defffc04 	addi	sp,sp,-16
 4008170:	dfc00315 	stw	ra,12(sp)
 4008174:	df000215 	stw	fp,8(sp)
 4008178:	df000204 	addi	fp,sp,8
 400817c:	e13fff15 	stw	r4,-4(fp)
    uint8_t response;
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 4008180:	01802304 	movi	r6,140
 4008184:	01400944 	movi	r5,37
 4008188:	e13fff17 	ldw	r4,-4(fp)
 400818c:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_WIA); //I2C slave 0 register address from where to begin data transfer
 4008190:	000d883a 	mov	r6,zero
 4008194:	01400984 	movi	r5,38
 4008198:	e13fff17 	ldw	r4,-4(fp)
 400819c:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81); //Read 1 byte from the magnetometer
 40081a0:	01802044 	movi	r6,129
 40081a4:	014009c4 	movi	r5,39
 40081a8:	e13fff17 	ldw	r4,-4(fp)
 40081ac:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>

    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
 40081b0:	0109c404 	movi	r4,10000
 40081b4:	40203d80 	call	40203d8 <usleep>
    response=WriteReg(MPUREG_EXT_SENS_DATA_00|READ_FLAG, 0x00);    //Read I2C
 40081b8:	000d883a 	mov	r6,zero
 40081bc:	01403244 	movi	r5,201
 40081c0:	e13fff17 	ldw	r4,-4(fp)
 40081c4:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
 40081c8:	e0bffe05 	stb	r2,-8(fp)
    //ReadRegs(MPUREG_EXT_SENS_DATA_00,response,1);
    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C

    return response;
 40081cc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40081d0:	e037883a 	mov	sp,fp
 40081d4:	dfc00117 	ldw	ra,4(sp)
 40081d8:	df000017 	ldw	fp,0(sp)
 40081dc:	dec00204 	addi	sp,sp,8
 40081e0:	f800283a 	ret

040081e4 <_ZN7MPU92509calib_magEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::calib_mag(){
 40081e4:	defffa04 	addi	sp,sp,-24
 40081e8:	dfc00515 	stw	ra,20(sp)
 40081ec:	df000415 	stw	fp,16(sp)
 40081f0:	df000404 	addi	fp,sp,16
 40081f4:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 40081f8:	01802304 	movi	r6,140
 40081fc:	01400944 	movi	r5,37
 4008200:	e13fff17 	ldw	r4,-4(fp)
 4008204:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
 4008208:	01800404 	movi	r6,16
 400820c:	01400984 	movi	r5,38
 4008210:	e13fff17 	ldw	r4,-4(fp)
 4008214:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
 4008218:	018020c4 	movi	r6,131
 400821c:	014009c4 	movi	r5,39
 4008220:	e13fff17 	ldw	r4,-4(fp)
 4008224:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>

    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
 4008228:	0109c404 	movi	r4,10000
 400822c:	40203d80 	call	40203d8 <usleep>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
 4008230:	e0bffe04 	addi	r2,fp,-8
 4008234:	01c000c4 	movi	r7,3
 4008238:	100d883a 	mov	r6,r2
 400823c:	01401244 	movi	r5,73
 4008240:	e13fff17 	ldw	r4,-4(fp)
 4008244:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
 4008248:	e03ffc15 	stw	zero,-16(fp)
 400824c:	e0bffc17 	ldw	r2,-16(fp)
 4008250:	108000c8 	cmpgei	r2,r2,3
 4008254:	1000161e 	bne	r2,zero,40082b0 <_ZN7MPU92509calib_magEv+0xcc>
        data=response[i];
 4008258:	e0fffe04 	addi	r3,fp,-8
 400825c:	e0bffc17 	ldw	r2,-16(fp)
 4008260:	1885883a 	add	r2,r3,r2
 4008264:	10800003 	ldbu	r2,0(r2)
 4008268:	10803fcc 	andi	r2,r2,255
 400826c:	1009883a 	mov	r4,r2
 4008270:	400f2680 	call	400f268 <__floatunsisf>
 4008274:	1007883a 	mov	r3,r2
 4008278:	e0fffd15 	stw	r3,-12(fp)
//        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
        magnetometer_ASA[i] = Magnetometer_Sensitivity_Scale_Factor;
 400827c:	e0ffff17 	ldw	r3,-4(fp)
 4008280:	e0bffc17 	ldw	r2,-16(fp)
 4008284:	10800144 	addi	r2,r2,5
 4008288:	1085883a 	add	r2,r2,r2
 400828c:	1085883a 	add	r2,r2,r2
 4008290:	1887883a 	add	r3,r3,r2
 4008294:	008f86b4 	movhi	r2,15898
 4008298:	10a66684 	addi	r2,r2,-26214
 400829c:	18800015 	stw	r2,0(r3)
    usleep(10000);
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
 40082a0:	e0bffc17 	ldw	r2,-16(fp)
 40082a4:	10800044 	addi	r2,r2,1
 40082a8:	e0bffc15 	stw	r2,-16(fp)
 40082ac:	003fe706 	br	400824c <__reset+0xfb00724c>
        data=response[i];
//        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
        magnetometer_ASA[i] = Magnetometer_Sensitivity_Scale_Factor;
    }
}
 40082b0:	0001883a 	nop
 40082b4:	e037883a 	mov	sp,fp
 40082b8:	dfc00117 	ldw	ra,4(sp)
 40082bc:	df000017 	ldw	fp,0(sp)
 40082c0:	dec00204 	addi	sp,sp,8
 40082c4:	f800283a 	ret

040082c8 <_ZN7MPU92508read_magEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::read_mag(){
 40082c8:	defff804 	addi	sp,sp,-32
 40082cc:	dfc00715 	stw	ra,28(sp)
 40082d0:	df000615 	stw	fp,24(sp)
 40082d4:	df000604 	addi	fp,sp,24
 40082d8:	e13fff15 	stw	r4,-4(fp)
    uint8_t response[7];
    int16_t bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 40082dc:	01802304 	movi	r6,140
 40082e0:	01400944 	movi	r5,37
 40082e4:	e13fff17 	ldw	r4,-4(fp)
 40082e8:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
 40082ec:	018000c4 	movi	r6,3
 40082f0:	01400984 	movi	r5,38
 40082f4:	e13fff17 	ldw	r4,-4(fp)
 40082f8:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
 40082fc:	018021c4 	movi	r6,135
 4008300:	014009c4 	movi	r5,39
 4008304:	e13fff17 	ldw	r4,-4(fp)
 4008308:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>

    usleep(10000);
 400830c:	0109c404 	movi	r4,10000
 4008310:	40203d80 	call	40203d8 <usleep>
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
 4008314:	e0bffd04 	addi	r2,fp,-12
 4008318:	01c001c4 	movi	r7,7
 400831c:	100d883a 	mov	r6,r2
 4008320:	01401244 	movi	r5,73
 4008324:	e13fff17 	ldw	r4,-4(fp)
 4008328:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
 400832c:	e03ffa15 	stw	zero,-24(fp)
 4008330:	e0bffa17 	ldw	r2,-24(fp)
 4008334:	108000c8 	cmpgei	r2,r2,3
 4008338:	10002e1e 	bne	r2,zero,40083f4 <_ZN7MPU92508read_magEv+0x12c>
        bit_data=((int16_t)response[i*2+1]<<8)|response[i*2];
 400833c:	e0bffa17 	ldw	r2,-24(fp)
 4008340:	1085883a 	add	r2,r2,r2
 4008344:	10800044 	addi	r2,r2,1
 4008348:	e0fffd04 	addi	r3,fp,-12
 400834c:	1885883a 	add	r2,r3,r2
 4008350:	10800003 	ldbu	r2,0(r2)
 4008354:	10803fcc 	andi	r2,r2,255
 4008358:	1004923a 	slli	r2,r2,8
 400835c:	1007883a 	mov	r3,r2
 4008360:	e0bffa17 	ldw	r2,-24(fp)
 4008364:	1085883a 	add	r2,r2,r2
 4008368:	1009883a 	mov	r4,r2
 400836c:	e0bffd04 	addi	r2,fp,-12
 4008370:	1105883a 	add	r2,r2,r4
 4008374:	10800003 	ldbu	r2,0(r2)
 4008378:	10803fcc 	andi	r2,r2,255
 400837c:	1884b03a 	or	r2,r3,r2
 4008380:	e0bffb0d 	sth	r2,-20(fp)
        data=(float)bit_data;
 4008384:	e0bffb0f 	ldh	r2,-20(fp)
 4008388:	1009883a 	mov	r4,r2
 400838c:	400f1440 	call	400f144 <__floatsisf>
 4008390:	1007883a 	mov	r3,r2
 4008394:	e0fffc15 	stw	r3,-16(fp)
        magnetometer_data[i]=data*magnetometer_ASA[i];
 4008398:	e0ffff17 	ldw	r3,-4(fp)
 400839c:	e0bffa17 	ldw	r2,-24(fp)
 40083a0:	10800144 	addi	r2,r2,5
 40083a4:	1085883a 	add	r2,r2,r2
 40083a8:	1085883a 	add	r2,r2,r2
 40083ac:	1885883a 	add	r2,r3,r2
 40083b0:	10c00017 	ldw	r3,0(r2)
 40083b4:	e17ffc17 	ldw	r5,-16(fp)
 40083b8:	1809883a 	mov	r4,r3
 40083bc:	400e7f40 	call	400e7f4 <__mulsf3>
 40083c0:	1007883a 	mov	r3,r2
 40083c4:	1809883a 	mov	r4,r3
 40083c8:	e0ffff17 	ldw	r3,-4(fp)
 40083cc:	e0bffa17 	ldw	r2,-24(fp)
 40083d0:	108003c4 	addi	r2,r2,15
 40083d4:	1085883a 	add	r2,r2,r2
 40083d8:	1085883a 	add	r2,r2,r2
 40083dc:	1885883a 	add	r2,r3,r2
 40083e0:	11000015 	stw	r4,0(r2)
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer

    usleep(10000);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
 40083e4:	e0bffa17 	ldw	r2,-24(fp)
 40083e8:	10800044 	addi	r2,r2,1
 40083ec:	e0bffa15 	stw	r2,-24(fp)
 40083f0:	003fcf06 	br	4008330 <__reset+0xfb007330>
        bit_data=((int16_t)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    }
}
 40083f4:	0001883a 	nop
 40083f8:	e037883a 	mov	sp,fp
 40083fc:	dfc00117 	ldw	ra,4(sp)
 4008400:	df000017 	ldw	fp,0(sp)
 4008404:	dec00204 	addi	sp,sp,8
 4008408:	f800283a 	ret

0400840c <_ZN7MPU92508read_allEv>:

//-----------------------------------------------------------------------------------------------

void MPU9250::read_all(){
 400840c:	defff104 	addi	sp,sp,-60
 4008410:	dfc00e15 	stw	ra,56(sp)
 4008414:	df000d15 	stw	fp,52(sp)
 4008418:	dc800c15 	stw	r18,48(sp)
 400841c:	dc400b15 	stw	r17,44(sp)
 4008420:	dc000a15 	stw	r16,40(sp)
 4008424:	df000d04 	addi	fp,sp,52
 4008428:	e13ffc15 	stw	r4,-16(fp)
    int16_t bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
 400842c:	01802304 	movi	r6,140
 4008430:	01400944 	movi	r5,37
 4008434:	e13ffc17 	ldw	r4,-16(fp)
 4008438:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
 400843c:	018000c4 	movi	r6,3
 4008440:	01400984 	movi	r5,38
 4008444:	e13ffc17 	ldw	r4,-16(fp)
 4008448:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
 400844c:	018021c4 	movi	r6,135
 4008450:	014009c4 	movi	r5,39
 4008454:	e13ffc17 	ldw	r4,-16(fp)
 4008458:	40076340 	call	4007634 <_ZN7MPU92508WriteRegEhh>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.

    //wait(0.001);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
 400845c:	e0bff604 	addi	r2,fp,-40
 4008460:	01c00544 	movi	r7,21
 4008464:	100d883a 	mov	r6,r2
 4008468:	01400ec4 	movi	r5,59
 400846c:	e13ffc17 	ldw	r4,-16(fp)
 4008470:	40077580 	call	4007758 <_ZN7MPU92508ReadRegsEhPhj>
    //Get accelerometer value
    for(i=0; i<3; i++) {
 4008474:	e03ff315 	stw	zero,-52(fp)
 4008478:	e0bff317 	ldw	r2,-52(fp)
 400847c:	108000c8 	cmpgei	r2,r2,3
 4008480:	1000441e 	bne	r2,zero,4008594 <_ZN7MPU92508read_allEv+0x188>
        bit_data = ((int16_t)response[i*2] << 8)|response[i*2+1];
 4008484:	e0bff317 	ldw	r2,-52(fp)
 4008488:	1085883a 	add	r2,r2,r2
 400848c:	1007883a 	mov	r3,r2
 4008490:	e0bff604 	addi	r2,fp,-40
 4008494:	10c5883a 	add	r2,r2,r3
 4008498:	10800003 	ldbu	r2,0(r2)
 400849c:	10803fcc 	andi	r2,r2,255
 40084a0:	1004923a 	slli	r2,r2,8
 40084a4:	1009883a 	mov	r4,r2
 40084a8:	e0bff317 	ldw	r2,-52(fp)
 40084ac:	1085883a 	add	r2,r2,r2
 40084b0:	10800044 	addi	r2,r2,1
 40084b4:	e0fff604 	addi	r3,fp,-40
 40084b8:	1885883a 	add	r2,r3,r2
 40084bc:	10800003 	ldbu	r2,0(r2)
 40084c0:	10803fcc 	andi	r2,r2,255
 40084c4:	2084b03a 	or	r2,r4,r2
 40084c8:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 40084cc:	e0bff40f 	ldh	r2,-48(fp)
 40084d0:	1009883a 	mov	r4,r2
 40084d4:	400f1440 	call	400f144 <__floatsisf>
 40084d8:	1007883a 	mov	r3,r2
 40084dc:	e0fff515 	stw	r3,-44(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
 40084e0:	e13ff517 	ldw	r4,-44(fp)
 40084e4:	40118b40 	call	40118b4 <__extendsfdf2>
 40084e8:	1011883a 	mov	r8,r2
 40084ec:	1813883a 	mov	r9,r3
 40084f0:	018ea4f4 	movhi	r6,14995
 40084f4:	31a8c144 	addi	r6,r6,-23803
 40084f8:	01d00934 	movhi	r7,16420
 40084fc:	39e74044 	addi	r7,r7,-25343
 4008500:	4009883a 	mov	r4,r8
 4008504:	480b883a 	mov	r5,r9
 4008508:	40107440 	call	4010744 <__muldf3>
 400850c:	1009883a 	mov	r4,r2
 4008510:	180b883a 	mov	r5,r3
 4008514:	2021883a 	mov	r16,r4
 4008518:	2823883a 	mov	r17,r5
 400851c:	e0bffc17 	ldw	r2,-16(fp)
 4008520:	10c00017 	ldw	r3,0(r2)
 4008524:	1809883a 	mov	r4,r3
 4008528:	40118b40 	call	40118b4 <__extendsfdf2>
 400852c:	1009883a 	mov	r4,r2
 4008530:	180b883a 	mov	r5,r3
 4008534:	200d883a 	mov	r6,r4
 4008538:	280f883a 	mov	r7,r5
 400853c:	8009883a 	mov	r4,r16
 4008540:	880b883a 	mov	r5,r17
 4008544:	400fc040 	call	400fc04 <__divdf3>
 4008548:	1009883a 	mov	r4,r2
 400854c:	180b883a 	mov	r5,r3
 4008550:	2005883a 	mov	r2,r4
 4008554:	2807883a 	mov	r3,r5
 4008558:	1009883a 	mov	r4,r2
 400855c:	180b883a 	mov	r5,r3
 4008560:	40119c40 	call	40119c4 <__truncdfsf2>
 4008564:	1009883a 	mov	r4,r2
 4008568:	e0fffc17 	ldw	r3,-16(fp)
 400856c:	e0bff317 	ldw	r2,-52(fp)
 4008570:	10800244 	addi	r2,r2,9
 4008574:	1085883a 	add	r2,r2,r2
 4008578:	1085883a 	add	r2,r2,r2
 400857c:	1885883a 	add	r2,r3,r2
 4008580:	11000015 	stw	r4,0(r2)
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.

    //wait(0.001);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
 4008584:	e0bff317 	ldw	r2,-52(fp)
 4008588:	10800044 	addi	r2,r2,1
 400858c:	e0bff315 	stw	r2,-52(fp)
 4008590:	003fb906 	br	4008478 <__reset+0xfb007478>
        bit_data = ((int16_t)response[i*2] << 8)|response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }
    //Get temperature
    bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4008594:	e0bff317 	ldw	r2,-52(fp)
 4008598:	1085883a 	add	r2,r2,r2
 400859c:	1007883a 	mov	r3,r2
 40085a0:	e0bff604 	addi	r2,fp,-40
 40085a4:	10c5883a 	add	r2,r2,r3
 40085a8:	10800003 	ldbu	r2,0(r2)
 40085ac:	10803fcc 	andi	r2,r2,255
 40085b0:	1004923a 	slli	r2,r2,8
 40085b4:	1009883a 	mov	r4,r2
 40085b8:	e0bff317 	ldw	r2,-52(fp)
 40085bc:	1085883a 	add	r2,r2,r2
 40085c0:	10800044 	addi	r2,r2,1
 40085c4:	e0fff604 	addi	r3,fp,-40
 40085c8:	1885883a 	add	r2,r3,r2
 40085cc:	10800003 	ldbu	r2,0(r2)
 40085d0:	10803fcc 	andi	r2,r2,255
 40085d4:	2084b03a 	or	r2,r4,r2
 40085d8:	e0bff40d 	sth	r2,-48(fp)
    data = (float)bit_data;
 40085dc:	e0bff40f 	ldh	r2,-48(fp)
 40085e0:	1009883a 	mov	r4,r2
 40085e4:	400f1440 	call	400f144 <__floatsisf>
 40085e8:	1007883a 	mov	r3,r2
 40085ec:	e0fff515 	stw	r3,-44(fp)
    temperature = ((data - 21) / 333.87) + 21;
 40085f0:	01506a34 	movhi	r5,16808
 40085f4:	e13ff517 	ldw	r4,-44(fp)
 40085f8:	400ebf00 	call	400ebf0 <__subsf3>
 40085fc:	1007883a 	mov	r3,r2
 4008600:	1805883a 	mov	r2,r3
 4008604:	1009883a 	mov	r4,r2
 4008608:	40118b40 	call	40118b4 <__extendsfdf2>
 400860c:	1011883a 	mov	r8,r2
 4008610:	1813883a 	mov	r9,r3
 4008614:	01a147f4 	movhi	r6,34079
 4008618:	31ae1484 	addi	r6,r6,-18350
 400861c:	01d01d74 	movhi	r7,16501
 4008620:	39f77ac4 	addi	r7,r7,-8725
 4008624:	4009883a 	mov	r4,r8
 4008628:	480b883a 	mov	r5,r9
 400862c:	400fc040 	call	400fc04 <__divdf3>
 4008630:	1009883a 	mov	r4,r2
 4008634:	180b883a 	mov	r5,r3
 4008638:	2005883a 	mov	r2,r4
 400863c:	2807883a 	mov	r3,r5
 4008640:	000d883a 	mov	r6,zero
 4008644:	01d00d74 	movhi	r7,16437
 4008648:	1009883a 	mov	r4,r2
 400864c:	180b883a 	mov	r5,r3
 4008650:	400f3580 	call	400f358 <__adddf3>
 4008654:	1009883a 	mov	r4,r2
 4008658:	180b883a 	mov	r5,r3
 400865c:	2005883a 	mov	r2,r4
 4008660:	2807883a 	mov	r3,r5
 4008664:	1009883a 	mov	r4,r2
 4008668:	180b883a 	mov	r5,r3
 400866c:	40119c40 	call	40119c4 <__truncdfsf2>
 4008670:	1007883a 	mov	r3,r2
 4008674:	e0bffc17 	ldw	r2,-16(fp)
 4008678:	10c00815 	stw	r3,32(r2)
    //Get gyroscope value
    for(i=4; i<7; i++) {
 400867c:	00800104 	movi	r2,4
 4008680:	e0bff315 	stw	r2,-52(fp)
 4008684:	e0bff317 	ldw	r2,-52(fp)
 4008688:	108001c8 	cmpgei	r2,r2,7
 400868c:	1000451e 	bne	r2,zero,40087a4 <_ZN7MPU92508read_allEv+0x398>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
 4008690:	e0bff317 	ldw	r2,-52(fp)
 4008694:	1085883a 	add	r2,r2,r2
 4008698:	1007883a 	mov	r3,r2
 400869c:	e0bff604 	addi	r2,fp,-40
 40086a0:	10c5883a 	add	r2,r2,r3
 40086a4:	10800003 	ldbu	r2,0(r2)
 40086a8:	10803fcc 	andi	r2,r2,255
 40086ac:	1004923a 	slli	r2,r2,8
 40086b0:	1009883a 	mov	r4,r2
 40086b4:	e0bff317 	ldw	r2,-52(fp)
 40086b8:	1085883a 	add	r2,r2,r2
 40086bc:	10800044 	addi	r2,r2,1
 40086c0:	e0fff604 	addi	r3,fp,-40
 40086c4:	1885883a 	add	r2,r3,r2
 40086c8:	10800003 	ldbu	r2,0(r2)
 40086cc:	10803fcc 	andi	r2,r2,255
 40086d0:	2084b03a 	or	r2,r4,r2
 40086d4:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 40086d8:	e0bff40f 	ldh	r2,-48(fp)
 40086dc:	1009883a 	mov	r4,r2
 40086e0:	400f1440 	call	400f144 <__floatsisf>
 40086e4:	1007883a 	mov	r3,r2
 40086e8:	e0fff515 	stw	r3,-44(fp)
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
 40086ec:	e0bff317 	ldw	r2,-52(fp)
 40086f0:	14bfff04 	addi	r18,r2,-4
 40086f4:	e13ff517 	ldw	r4,-44(fp)
 40086f8:	40118b40 	call	40118b4 <__extendsfdf2>
 40086fc:	1011883a 	mov	r8,r2
 4008700:	1813883a 	mov	r9,r3
 4008704:	01a943b4 	movhi	r6,42254
 4008708:	31b89c04 	addi	r6,r6,-7568
 400870c:	01cfe4b4 	movhi	r7,16274
 4008710:	39f7d144 	addi	r7,r7,-8379
 4008714:	4009883a 	mov	r4,r8
 4008718:	480b883a 	mov	r5,r9
 400871c:	40107440 	call	4010744 <__muldf3>
 4008720:	1009883a 	mov	r4,r2
 4008724:	180b883a 	mov	r5,r3
 4008728:	2021883a 	mov	r16,r4
 400872c:	2823883a 	mov	r17,r5
 4008730:	e0bffc17 	ldw	r2,-16(fp)
 4008734:	10c00117 	ldw	r3,4(r2)
 4008738:	1809883a 	mov	r4,r3
 400873c:	40118b40 	call	40118b4 <__extendsfdf2>
 4008740:	1009883a 	mov	r4,r2
 4008744:	180b883a 	mov	r5,r3
 4008748:	200d883a 	mov	r6,r4
 400874c:	280f883a 	mov	r7,r5
 4008750:	8009883a 	mov	r4,r16
 4008754:	880b883a 	mov	r5,r17
 4008758:	400fc040 	call	400fc04 <__divdf3>
 400875c:	1009883a 	mov	r4,r2
 4008760:	180b883a 	mov	r5,r3
 4008764:	2005883a 	mov	r2,r4
 4008768:	2807883a 	mov	r3,r5
 400876c:	1009883a 	mov	r4,r2
 4008770:	180b883a 	mov	r5,r3
 4008774:	40119c40 	call	40119c4 <__truncdfsf2>
 4008778:	1009883a 	mov	r4,r2
 400877c:	e0fffc17 	ldw	r3,-16(fp)
 4008780:	90800304 	addi	r2,r18,12
 4008784:	1085883a 	add	r2,r2,r2
 4008788:	1085883a 	add	r2,r2,r2
 400878c:	1885883a 	add	r2,r3,r2
 4008790:	11000015 	stw	r4,0(r2)
    //Get temperature
    bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    //Get gyroscope value
    for(i=4; i<7; i++) {
 4008794:	e0bff317 	ldw	r2,-52(fp)
 4008798:	10800044 	addi	r2,r2,1
 400879c:	e0bff315 	stw	r2,-52(fp)
 40087a0:	003fb806 	br	4008684 <__reset+0xfb007684>
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
 40087a4:	008001c4 	movi	r2,7
 40087a8:	e0bff315 	stw	r2,-52(fp)
 40087ac:	e0bff317 	ldw	r2,-52(fp)
 40087b0:	10800288 	cmpgei	r2,r2,10
 40087b4:	1000301e 	bne	r2,zero,4008878 <_ZN7MPU92508read_allEv+0x46c>
        bit_data = ((int16_t)response[i*2+1] << 8) | response[i*2];
 40087b8:	e0bff317 	ldw	r2,-52(fp)
 40087bc:	1085883a 	add	r2,r2,r2
 40087c0:	10800044 	addi	r2,r2,1
 40087c4:	e0fff604 	addi	r3,fp,-40
 40087c8:	1885883a 	add	r2,r3,r2
 40087cc:	10800003 	ldbu	r2,0(r2)
 40087d0:	10803fcc 	andi	r2,r2,255
 40087d4:	1004923a 	slli	r2,r2,8
 40087d8:	1007883a 	mov	r3,r2
 40087dc:	e0bff317 	ldw	r2,-52(fp)
 40087e0:	1085883a 	add	r2,r2,r2
 40087e4:	1009883a 	mov	r4,r2
 40087e8:	e0bff604 	addi	r2,fp,-40
 40087ec:	1105883a 	add	r2,r2,r4
 40087f0:	10800003 	ldbu	r2,0(r2)
 40087f4:	10803fcc 	andi	r2,r2,255
 40087f8:	1884b03a 	or	r2,r3,r2
 40087fc:	e0bff40d 	sth	r2,-48(fp)
        data = (float)bit_data;
 4008800:	e0bff40f 	ldh	r2,-48(fp)
 4008804:	1009883a 	mov	r4,r2
 4008808:	400f1440 	call	400f144 <__floatsisf>
 400880c:	1007883a 	mov	r3,r2
 4008810:	e0fff515 	stw	r3,-44(fp)
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
 4008814:	e0bff317 	ldw	r2,-52(fp)
 4008818:	143ffe44 	addi	r16,r2,-7
 400881c:	e0bff317 	ldw	r2,-52(fp)
 4008820:	10bffe44 	addi	r2,r2,-7
 4008824:	e0fffc17 	ldw	r3,-16(fp)
 4008828:	10800144 	addi	r2,r2,5
 400882c:	1085883a 	add	r2,r2,r2
 4008830:	1085883a 	add	r2,r2,r2
 4008834:	1885883a 	add	r2,r3,r2
 4008838:	10c00017 	ldw	r3,0(r2)
 400883c:	e17ff517 	ldw	r5,-44(fp)
 4008840:	1809883a 	mov	r4,r3
 4008844:	400e7f40 	call	400e7f4 <__mulsf3>
 4008848:	1007883a 	mov	r3,r2
 400884c:	1809883a 	mov	r4,r3
 4008850:	e0fffc17 	ldw	r3,-16(fp)
 4008854:	808003c4 	addi	r2,r16,15
 4008858:	1085883a 	add	r2,r2,r2
 400885c:	1085883a 	add	r2,r2,r2
 4008860:	1885883a 	add	r2,r3,r2
 4008864:	11000015 	stw	r4,0(r2)
        bit_data = ((int16_t)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
 4008868:	e0bff317 	ldw	r2,-52(fp)
 400886c:	10800044 	addi	r2,r2,1
 4008870:	e0bff315 	stw	r2,-52(fp)
 4008874:	003fcd06 	br	40087ac <__reset+0xfb0077ac>
        bit_data = ((int16_t)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    }
}
 4008878:	0001883a 	nop
 400887c:	e6fffd04 	addi	sp,fp,-12
 4008880:	dfc00417 	ldw	ra,16(sp)
 4008884:	df000317 	ldw	fp,12(sp)
 4008888:	dc800217 	ldw	r18,8(sp)
 400888c:	dc400117 	ldw	r17,4(sp)
 4008890:	dc000017 	ldw	r16,0(sp)
 4008894:	dec00504 	addi	sp,sp,20
 4008898:	f800283a 	ret

0400889c <_ZN7MPU925010getMotion9EPfS0_S0_S0_S0_S0_S0_S0_S0_>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void MPU9250::getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
 400889c:	defffa04 	addi	sp,sp,-24
 40088a0:	dfc00515 	stw	ra,20(sp)
 40088a4:	df000415 	stw	fp,16(sp)
 40088a8:	df000404 	addi	fp,sp,16
 40088ac:	e13ffc15 	stw	r4,-16(fp)
 40088b0:	e17ffd15 	stw	r5,-12(fp)
 40088b4:	e1bffe15 	stw	r6,-8(fp)
 40088b8:	e1ffff15 	stw	r7,-4(fp)
    read_all();
 40088bc:	e13ffc17 	ldw	r4,-16(fp)
 40088c0:	400840c0 	call	400840c <_ZN7MPU92508read_allEv>
    *ax = accelerometer_data[0];
 40088c4:	e0bffc17 	ldw	r2,-16(fp)
 40088c8:	10c00917 	ldw	r3,36(r2)
 40088cc:	e0bffd17 	ldw	r2,-12(fp)
 40088d0:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
 40088d4:	e0bffc17 	ldw	r2,-16(fp)
 40088d8:	10c00a17 	ldw	r3,40(r2)
 40088dc:	e0bffe17 	ldw	r2,-8(fp)
 40088e0:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
 40088e4:	e0bffc17 	ldw	r2,-16(fp)
 40088e8:	10c00b17 	ldw	r3,44(r2)
 40088ec:	e0bfff17 	ldw	r2,-4(fp)
 40088f0:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
 40088f4:	e0bffc17 	ldw	r2,-16(fp)
 40088f8:	10c00c17 	ldw	r3,48(r2)
 40088fc:	e0800217 	ldw	r2,8(fp)
 4008900:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
 4008904:	e0bffc17 	ldw	r2,-16(fp)
 4008908:	10c00d17 	ldw	r3,52(r2)
 400890c:	e0800317 	ldw	r2,12(fp)
 4008910:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
 4008914:	e0bffc17 	ldw	r2,-16(fp)
 4008918:	10c00e17 	ldw	r3,56(r2)
 400891c:	e0800417 	ldw	r2,16(fp)
 4008920:	10c00015 	stw	r3,0(r2)
    *mx = magnetometer_data[0];
 4008924:	e0bffc17 	ldw	r2,-16(fp)
 4008928:	10c00f17 	ldw	r3,60(r2)
 400892c:	e0800517 	ldw	r2,20(fp)
 4008930:	10c00015 	stw	r3,0(r2)
    *my = magnetometer_data[1];
 4008934:	e0bffc17 	ldw	r2,-16(fp)
 4008938:	10c01017 	ldw	r3,64(r2)
 400893c:	e0800617 	ldw	r2,24(fp)
 4008940:	10c00015 	stw	r3,0(r2)
    *mz = magnetometer_data[2];
 4008944:	e0bffc17 	ldw	r2,-16(fp)
 4008948:	10c01117 	ldw	r3,68(r2)
 400894c:	e0800717 	ldw	r2,28(fp)
 4008950:	10c00015 	stw	r3,0(r2)
}
 4008954:	0001883a 	nop
 4008958:	e037883a 	mov	sp,fp
 400895c:	dfc00117 	ldw	ra,4(sp)
 4008960:	df000017 	ldw	fp,0(sp)
 4008964:	dec00204 	addi	sp,sp,8
 4008968:	f800283a 	ret

0400896c <_ZN7MPU925010getMotion6EPfS0_S0_S0_S0_S0_>:

//-----------------------------------------------------------------------------------------------

void MPU9250::getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
 400896c:	defffa04 	addi	sp,sp,-24
 4008970:	dfc00515 	stw	ra,20(sp)
 4008974:	df000415 	stw	fp,16(sp)
 4008978:	df000404 	addi	fp,sp,16
 400897c:	e13ffc15 	stw	r4,-16(fp)
 4008980:	e17ffd15 	stw	r5,-12(fp)
 4008984:	e1bffe15 	stw	r6,-8(fp)
 4008988:	e1ffff15 	stw	r7,-4(fp)
    read_acc();
 400898c:	e13ffc17 	ldw	r4,-16(fp)
 4008990:	4007c9c0 	call	4007c9c <_ZN7MPU92508read_accEv>
    read_gyro();
 4008994:	e13ffc17 	ldw	r4,-16(fp)
 4008998:	4007e100 	call	4007e10 <_ZN7MPU92509read_gyroEv>
    *ax = accelerometer_data[0];
 400899c:	e0bffc17 	ldw	r2,-16(fp)
 40089a0:	10c00917 	ldw	r3,36(r2)
 40089a4:	e0bffd17 	ldw	r2,-12(fp)
 40089a8:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
 40089ac:	e0bffc17 	ldw	r2,-16(fp)
 40089b0:	10c00a17 	ldw	r3,40(r2)
 40089b4:	e0bffe17 	ldw	r2,-8(fp)
 40089b8:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
 40089bc:	e0bffc17 	ldw	r2,-16(fp)
 40089c0:	10c00b17 	ldw	r3,44(r2)
 40089c4:	e0bfff17 	ldw	r2,-4(fp)
 40089c8:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
 40089cc:	e0bffc17 	ldw	r2,-16(fp)
 40089d0:	10c00c17 	ldw	r3,48(r2)
 40089d4:	e0800217 	ldw	r2,8(fp)
 40089d8:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
 40089dc:	e0bffc17 	ldw	r2,-16(fp)
 40089e0:	10c00d17 	ldw	r3,52(r2)
 40089e4:	e0800317 	ldw	r2,12(fp)
 40089e8:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
 40089ec:	e0bffc17 	ldw	r2,-16(fp)
 40089f0:	10c00e17 	ldw	r3,56(r2)
 40089f4:	e0800417 	ldw	r2,16(fp)
 40089f8:	10c00015 	stw	r3,0(r2)
}
 40089fc:	0001883a 	nop
 4008a00:	e037883a 	mov	sp,fp
 4008a04:	dfc00117 	ldw	ra,4(sp)
 4008a08:	df000017 	ldw	fp,0(sp)
 4008a0c:	dec00204 	addi	sp,sp,8
 4008a10:	f800283a 	ret

04008a14 <_Z12Write32_Datalll>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
 4008a14:	defffb04 	addi	sp,sp,-20
 4008a18:	df000415 	stw	fp,16(sp)
 4008a1c:	df000404 	addi	fp,sp,16
 4008a20:	e13ffd15 	stw	r4,-12(fp)
 4008a24:	e17ffe15 	stw	r5,-8(fp)
 4008a28:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
 4008a2c:	e0bffe17 	ldw	r2,-8(fp)
 4008a30:	1085883a 	add	r2,r2,r2
 4008a34:	1085883a 	add	r2,r2,r2
 4008a38:	1007883a 	mov	r3,r2
 4008a3c:	e0bffd17 	ldw	r2,-12(fp)
 4008a40:	1885883a 	add	r2,r3,r2
 4008a44:	1007883a 	mov	r3,r2
 4008a48:	e0bfff17 	ldw	r2,-4(fp)
 4008a4c:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
 4008a50:	00800044 	movi	r2,1
 4008a54:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 4008a58:	e0bffc03 	ldbu	r2,-16(fp)
}
 4008a5c:	e037883a 	mov	sp,fp
 4008a60:	df000017 	ldw	fp,0(sp)
 4008a64:	dec00104 	addi	sp,sp,4
 4008a68:	f800283a 	ret

04008a6c <_Z11Read32_DatallPl>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 4008a6c:	defffb04 	addi	sp,sp,-20
 4008a70:	df000415 	stw	fp,16(sp)
 4008a74:	df000404 	addi	fp,sp,16
 4008a78:	e13ffd15 	stw	r4,-12(fp)
 4008a7c:	e17ffe15 	stw	r5,-8(fp)
 4008a80:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 4008a84:	e0bffe17 	ldw	r2,-8(fp)
 4008a88:	1085883a 	add	r2,r2,r2
 4008a8c:	1085883a 	add	r2,r2,r2
 4008a90:	1007883a 	mov	r3,r2
 4008a94:	e0bffd17 	ldw	r2,-12(fp)
 4008a98:	1885883a 	add	r2,r3,r2
 4008a9c:	10c00037 	ldwio	r3,0(r2)
 4008aa0:	e0bfff17 	ldw	r2,-4(fp)
 4008aa4:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 4008aa8:	00800044 	movi	r2,1
 4008aac:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
 4008ab0:	e0bffc03 	ldbu	r2,-16(fp)
}
 4008ab4:	e037883a 	mov	sp,fp
 4008ab8:	df000017 	ldw	fp,0(sp)
 4008abc:	dec00104 	addi	sp,sp,4
 4008ac0:	f800283a 	ret

04008ac4 <_Z11oc_i2c_initl>:

bool oc_i2c_init(alt_32 i2c_base){
 4008ac4:	defffa04 	addi	sp,sp,-24
 4008ac8:	dfc00515 	stw	ra,20(sp)
 4008acc:	df000415 	stw	fp,16(sp)
 4008ad0:	df000404 	addi	fp,sp,16
 4008ad4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
 4008ad8:	0080bef4 	movhi	r2,763
 4008adc:	10bc2004 	addi	r2,r2,-3968
 4008ae0:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
 4008ae4:	008001b4 	movhi	r2,6
 4008ae8:	1086a004 	addi	r2,r2,6784
 4008aec:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
 4008af0:	018001b4 	movhi	r6,6
 4008af4:	3186a004 	addi	r6,r6,6784
 4008af8:	0140bef4 	movhi	r5,763
 4008afc:	297c2004 	addi	r5,r5,-3968
 4008b00:	e13fff17 	ldw	r4,-4(fp)
 4008b04:	4008b240 	call	4008b24 <_Z14oc_i2c_init_exlll>
 4008b08:	e0bffe05 	stb	r2,-8(fp)

	return bSuccess;
 4008b0c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4008b10:	e037883a 	mov	sp,fp
 4008b14:	dfc00117 	ldw	ra,4(sp)
 4008b18:	df000017 	ldw	fp,0(sp)
 4008b1c:	dec00204 	addi	sp,sp,8
 4008b20:	f800283a 	ret

04008b24 <_Z14oc_i2c_init_exlll>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
 4008b24:	defff704 	addi	sp,sp,-36
 4008b28:	dfc00815 	stw	ra,32(sp)
 4008b2c:	df000715 	stw	fp,28(sp)
 4008b30:	df000704 	addi	fp,sp,28
 4008b34:	e13ffd15 	stw	r4,-12(fp)
 4008b38:	e17ffe15 	stw	r5,-8(fp)
 4008b3c:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
 4008b40:	00800044 	movi	r2,1
 4008b44:	e0bff905 	stb	r2,-28(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
 4008b48:	00bfe004 	movi	r2,-128
 4008b4c:	e0bff945 	stb	r2,-27(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
 4008b50:	e0bfff17 	ldw	r2,-4(fp)
 4008b54:	10800164 	muli	r2,r2,5
 4008b58:	100b883a 	mov	r5,r2
 4008b5c:	e13ffe17 	ldw	r4,-8(fp)
 4008b60:	400dbb40 	call	400dbb4 <__divsi3>
 4008b64:	10bfffc4 	addi	r2,r2,-1
 4008b68:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
 4008b6c:	e0bffa17 	ldw	r2,-24(fp)
 4008b70:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
 4008b74:	e0bffa17 	ldw	r2,-24(fp)
 4008b78:	1005d23a 	srai	r2,r2,8
 4008b7c:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
 4008b80:	e0bffd17 	ldw	r2,-12(fp)
 4008b84:	e0fffb03 	ldbu	r3,-20(fp)
 4008b88:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
 4008b8c:	e0bffd17 	ldw	r2,-12(fp)
 4008b90:	10800104 	addi	r2,r2,4
 4008b94:	1007883a 	mov	r3,r2
 4008b98:	e0bffb43 	ldbu	r2,-19(fp)
 4008b9c:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
 4008ba0:	e0bffd17 	ldw	r2,-12(fp)
 4008ba4:	10800204 	addi	r2,r2,8
 4008ba8:	1007883a 	mov	r3,r2
 4008bac:	00802004 	movi	r2,128
 4008bb0:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
 4008bb4:	e0bff903 	ldbu	r2,-28(fp)
 4008bb8:	10000826 	beq	r2,zero,4008bdc <_Z14oc_i2c_init_exlll+0xb8>
    	read_data =IORD(i2c_base, 0);
 4008bbc:	e0bffd17 	ldw	r2,-12(fp)
 4008bc0:	10800037 	ldwio	r2,0(r2)
 4008bc4:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
 4008bc8:	e0bffc17 	ldw	r2,-16(fp)
 4008bcc:	10c03fcc 	andi	r3,r2,255
 4008bd0:	e0bffb03 	ldbu	r2,-20(fp)
 4008bd4:	18800126 	beq	r3,r2,4008bdc <_Z14oc_i2c_init_exlll+0xb8>
            bSuccess = FALSE;
 4008bd8:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
 4008bdc:	e0bff903 	ldbu	r2,-28(fp)
 4008be0:	10000926 	beq	r2,zero,4008c08 <_Z14oc_i2c_init_exlll+0xe4>
    	read_data =IORD(i2c_base, 1);
 4008be4:	e0bffd17 	ldw	r2,-12(fp)
 4008be8:	10800104 	addi	r2,r2,4
 4008bec:	10800037 	ldwio	r2,0(r2)
 4008bf0:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
 4008bf4:	e0bffc17 	ldw	r2,-16(fp)
 4008bf8:	10c03fcc 	andi	r3,r2,255
 4008bfc:	e0bffb43 	ldbu	r2,-19(fp)
 4008c00:	18800126 	beq	r3,r2,4008c08 <_Z14oc_i2c_init_exlll+0xe4>
            bSuccess = FALSE;
 4008c04:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check control
    if (bSuccess){
 4008c08:	e0bff903 	ldbu	r2,-28(fp)
 4008c0c:	10000926 	beq	r2,zero,4008c34 <_Z14oc_i2c_init_exlll+0x110>
    	read_data =IORD(i2c_base, 2);
 4008c10:	e0bffd17 	ldw	r2,-12(fp)
 4008c14:	10800204 	addi	r2,r2,8
 4008c18:	10800037 	ldwio	r2,0(r2)
 4008c1c:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
 4008c20:	e0bffc17 	ldw	r2,-16(fp)
 4008c24:	10803fcc 	andi	r2,r2,255
 4008c28:	10802020 	cmpeqi	r2,r2,128
 4008c2c:	1000011e 	bne	r2,zero,4008c34 <_Z14oc_i2c_init_exlll+0x110>
            bSuccess = FALSE;
 4008c30:	e03ff905 	stb	zero,-28(fp)
        }
    }

   if (bSuccess)
 4008c34:	e0bff903 	ldbu	r2,-28(fp)
 4008c38:	10000426 	beq	r2,zero,4008c4c <_Z14oc_i2c_init_exlll+0x128>
       printf("\nI2C core is enabled! \r\n");
 4008c3c:	01010234 	movhi	r4,1032
 4008c40:	21060d04 	addi	r4,r4,6196
 4008c44:	40127b00 	call	40127b0 <puts>
 4008c48:	00000306 	br	4008c58 <_Z14oc_i2c_init_exlll+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
 4008c4c:	01010234 	movhi	r4,1032
 4008c50:	21061304 	addi	r4,r4,6220
 4008c54:	40127b00 	call	40127b0 <puts>

   return bSuccess;
 4008c58:	e0bff903 	ldbu	r2,-28(fp)

}
 4008c5c:	e037883a 	mov	sp,fp
 4008c60:	dfc00117 	ldw	ra,4(sp)
 4008c64:	df000017 	ldw	fp,0(sp)
 4008c68:	dec00204 	addi	sp,sp,8
 4008c6c:	f800283a 	ret

04008c70 <_Z13oc_i2c_uninitl>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
 4008c70:	defffb04 	addi	sp,sp,-20
 4008c74:	dfc00415 	stw	ra,16(sp)
 4008c78:	df000315 	stw	fp,12(sp)
 4008c7c:	df000304 	addi	fp,sp,12
 4008c80:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 4008c84:	00800044 	movi	r2,1
 4008c88:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
 4008c8c:	e03ffd45 	stb	zero,-11(fp)

    IOWR( i2c_base, 2, ControlValue);
 4008c90:	e0bfff17 	ldw	r2,-4(fp)
 4008c94:	10800204 	addi	r2,r2,8
 4008c98:	0007883a 	mov	r3,zero
 4008c9c:	10c00035 	stwio	r3,0(r2)
   	read_data =IORD(i2c_base, 2);
 4008ca0:	e0bfff17 	ldw	r2,-4(fp)
 4008ca4:	10800204 	addi	r2,r2,8
 4008ca8:	10800037 	ldwio	r2,0(r2)
 4008cac:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
 4008cb0:	e0bffe17 	ldw	r2,-8(fp)
 4008cb4:	10803fcc 	andi	r2,r2,255
 4008cb8:	10000126 	beq	r2,zero,4008cc0 <_Z13oc_i2c_uninitl+0x50>
            bSuccess = FALSE;
 4008cbc:	e03ffd05 	stb	zero,-12(fp)
    }

   if (bSuccess)
 4008cc0:	e0bffd03 	ldbu	r2,-12(fp)
 4008cc4:	10000426 	beq	r2,zero,4008cd8 <_Z13oc_i2c_uninitl+0x68>
       printf("\I2C core  is disabled! \r\n");
 4008cc8:	01010234 	movhi	r4,1032
 4008ccc:	21061e04 	addi	r4,r4,6264
 4008cd0:	40127b00 	call	40127b0 <puts>
 4008cd4:	00000306 	br	4008ce4 <_Z13oc_i2c_uninitl+0x74>
   else
       printf("\I2C core is failed to disable! \r\n");
 4008cd8:	01010234 	movhi	r4,1032
 4008cdc:	21062504 	addi	r4,r4,6292
 4008ce0:	40127b00 	call	40127b0 <puts>

   return bSuccess;
 4008ce4:	e0bffd03 	ldbu	r2,-12(fp)

}
 4008ce8:	e037883a 	mov	sp,fp
 4008cec:	dfc00117 	ldw	ra,4(sp)
 4008cf0:	df000017 	ldw	fp,0(sp)
 4008cf4:	dec00204 	addi	sp,sp,8
 4008cf8:	f800283a 	ret

04008cfc <_Z16ACK_single_checkl>:




bool  ACK_single_check(alt_32 i2c_base)
{
 4008cfc:	defffb04 	addi	sp,sp,-20
 4008d00:	dfc00415 	stw	ra,16(sp)
 4008d04:	df000315 	stw	fp,12(sp)
 4008d08:	df000304 	addi	fp,sp,12
 4008d0c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 4008d10:	00800044 	movi	r2,1
 4008d14:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
 4008d18:	01003e84 	movi	r4,250
 4008d1c:	40203d80 	call	40203d8 <usleep>
    read_data =IORD(i2c_base, 4);
 4008d20:	e0bfff17 	ldw	r2,-4(fp)
 4008d24:	10800404 	addi	r2,r2,16
 4008d28:	10800037 	ldwio	r2,0(r2)
 4008d2c:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 4008d30:	e0bffe17 	ldw	r2,-8(fp)
 4008d34:	1080008c 	andi	r2,r2,2
 4008d38:	10000126 	beq	r2,zero,4008d40 <_Z16ACK_single_checkl+0x44>
            bSuccess = FALSE;
 4008d3c:	e03ffd05 	stb	zero,-12(fp)
     if (bSuccess){
 4008d40:	e0bffd03 	ldbu	r2,-12(fp)
 4008d44:	10000a26 	beq	r2,zero,4008d70 <_Z16ACK_single_checkl+0x74>
            usleep(ACK_SLEEP_TIME);
 4008d48:	01003e84 	movi	r4,250
 4008d4c:	40203d80 	call	40203d8 <usleep>
            read_data =IORD(i2c_base, 4);
 4008d50:	e0bfff17 	ldw	r2,-4(fp)
 4008d54:	10800404 	addi	r2,r2,16
 4008d58:	10800037 	ldwio	r2,0(r2)
 4008d5c:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 4008d60:	e0bffe17 	ldw	r2,-8(fp)
 4008d64:	1080200c 	andi	r2,r2,128
 4008d68:	10000126 	beq	r2,zero,4008d70 <_Z16ACK_single_checkl+0x74>
                    bSuccess = FALSE;
 4008d6c:	e03ffd05 	stb	zero,-12(fp)
     }
    return bSuccess;
 4008d70:	e0bffd03 	ldbu	r2,-12(fp)
}
 4008d74:	e037883a 	mov	sp,fp
 4008d78:	dfc00117 	ldw	ra,4(sp)
 4008d7c:	df000017 	ldw	fp,0(sp)
 4008d80:	dec00204 	addi	sp,sp,8
 4008d84:	f800283a 	ret

04008d88 <_Z9ACK_checkl>:


bool  ACK_check(alt_32 i2c_base){
 4008d88:	defffb04 	addi	sp,sp,-20
 4008d8c:	dfc00415 	stw	ra,16(sp)
 4008d90:	df000315 	stw	fp,12(sp)
 4008d94:	df000304 	addi	fp,sp,12
 4008d98:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 4008d9c:	e03ffd05 	stb	zero,-12(fp)
    int i=0;
 4008da0:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 4008da4:	e0bffd03 	ldbu	r2,-12(fp)
 4008da8:	1080005c 	xori	r2,r2,1
 4008dac:	10803fcc 	andi	r2,r2,255
 4008db0:	10000726 	beq	r2,zero,4008dd0 <_Z9ACK_checkl+0x48>
 4008db4:	e0bffe17 	ldw	r2,-8(fp)
 4008db8:	10c00044 	addi	r3,r2,1
 4008dbc:	e0fffe15 	stw	r3,-8(fp)
 4008dc0:	10800288 	cmpgei	r2,r2,10
 4008dc4:	1000021e 	bne	r2,zero,4008dd0 <_Z9ACK_checkl+0x48>
 4008dc8:	00800044 	movi	r2,1
 4008dcc:	00000106 	br	4008dd4 <_Z9ACK_checkl+0x4c>
 4008dd0:	0005883a 	mov	r2,zero
 4008dd4:	10803fcc 	andi	r2,r2,255
 4008dd8:	10000426 	beq	r2,zero,4008dec <_Z9ACK_checkl+0x64>
        bSuccess = ACK_single_check(i2c_base);
 4008ddc:	e13fff17 	ldw	r4,-4(fp)
 4008de0:	4008cfc0 	call	4008cfc <_Z16ACK_single_checkl>
 4008de4:	e0bffd05 	stb	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 4008de8:	003fee06 	br	4008da4 <__reset+0xfb007da4>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 4008dec:	e0bffd03 	ldbu	r2,-12(fp)
}
 4008df0:	e037883a 	mov	sp,fp
 4008df4:	dfc00117 	ldw	ra,4(sp)
 4008df8:	df000017 	ldw	fp,0(sp)
 4008dfc:	dec00204 	addi	sp,sp,8
 4008e00:	f800283a 	ret

04008e04 <_Z12OC_I2C_WritelhhPhi>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
 4008e04:	defff904 	addi	sp,sp,-28
 4008e08:	dfc00615 	stw	ra,24(sp)
 4008e0c:	df000515 	stw	fp,20(sp)
 4008e10:	df000504 	addi	fp,sp,20
 4008e14:	e13ffc15 	stw	r4,-16(fp)
 4008e18:	2807883a 	mov	r3,r5
 4008e1c:	3005883a 	mov	r2,r6
 4008e20:	e1ffff15 	stw	r7,-4(fp)
 4008e24:	e0fffd05 	stb	r3,-12(fp)
 4008e28:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
 4008e2c:	e0bffd03 	ldbu	r2,-12(fp)
 4008e30:	100d883a 	mov	r6,r2
 4008e34:	014000c4 	movi	r5,3
 4008e38:	e13ffc17 	ldw	r4,-16(fp)
 4008e3c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008e40:	1080005c 	xori	r2,r2,1
 4008e44:	10803fcc 	andi	r2,r2,255
 4008e48:	10000526 	beq	r2,zero,4008e60 <_Z12OC_I2C_WritelhhPhi+0x5c>
       printf("OC_I2C_Write error[0]\r\n");
 4008e4c:	01010234 	movhi	r4,1032
 4008e50:	21062e04 	addi	r4,r4,6328
 4008e54:	40127b00 	call	40127b0 <puts>
       return FALSE;
 4008e58:	0005883a 	mov	r2,zero
 4008e5c:	00007706 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
 4008e60:	01802404 	movi	r6,144
 4008e64:	01400104 	movi	r5,4
 4008e68:	e13ffc17 	ldw	r4,-16(fp)
 4008e6c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008e70:	1080005c 	xori	r2,r2,1
 4008e74:	10803fcc 	andi	r2,r2,255
 4008e78:	10000526 	beq	r2,zero,4008e90 <_Z12OC_I2C_WritelhhPhi+0x8c>
       printf("OC_I2C_Write error[1]\r\n");
 4008e7c:	01010234 	movhi	r4,1032
 4008e80:	21063404 	addi	r4,r4,6352
 4008e84:	40127b00 	call	40127b0 <puts>
       return FALSE;
 4008e88:	0005883a 	mov	r2,zero
 4008e8c:	00006b06 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4008e90:	e13ffc17 	ldw	r4,-16(fp)
 4008e94:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4008e98:	1080005c 	xori	r2,r2,1
 4008e9c:	10803fcc 	andi	r2,r2,255
 4008ea0:	10000526 	beq	r2,zero,4008eb8 <_Z12OC_I2C_WritelhhPhi+0xb4>
        printf("OC_I2C_Write error[2]\r\n");
 4008ea4:	01010234 	movhi	r4,1032
 4008ea8:	21063a04 	addi	r4,r4,6376
 4008eac:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4008eb0:	0005883a 	mov	r2,zero
 4008eb4:	00006106 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
 4008eb8:	e0bffe03 	ldbu	r2,-8(fp)
 4008ebc:	100d883a 	mov	r6,r2
 4008ec0:	014000c4 	movi	r5,3
 4008ec4:	e13ffc17 	ldw	r4,-16(fp)
 4008ec8:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008ecc:	1080005c 	xori	r2,r2,1
 4008ed0:	10803fcc 	andi	r2,r2,255
 4008ed4:	10000526 	beq	r2,zero,4008eec <_Z12OC_I2C_WritelhhPhi+0xe8>
       printf("OC_I2C_Write error[3]\r\n");
 4008ed8:	01010234 	movhi	r4,1032
 4008edc:	21064004 	addi	r4,r4,6400
 4008ee0:	40127b00 	call	40127b0 <puts>
       return FALSE;
 4008ee4:	0005883a 	mov	r2,zero
 4008ee8:	00005406 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
 4008eec:	01800404 	movi	r6,16
 4008ef0:	01400104 	movi	r5,4
 4008ef4:	e13ffc17 	ldw	r4,-16(fp)
 4008ef8:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008efc:	1080005c 	xori	r2,r2,1
 4008f00:	10803fcc 	andi	r2,r2,255
 4008f04:	10000526 	beq	r2,zero,4008f1c <_Z12OC_I2C_WritelhhPhi+0x118>
        printf("OC_I2C_Write error[4]\r\n");
 4008f08:	01010234 	movhi	r4,1032
 4008f0c:	21064604 	addi	r4,r4,6424
 4008f10:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4008f14:	0005883a 	mov	r2,zero
 4008f18:	00004806 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4008f1c:	e13ffc17 	ldw	r4,-16(fp)
 4008f20:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4008f24:	1080005c 	xori	r2,r2,1
 4008f28:	10803fcc 	andi	r2,r2,255
 4008f2c:	10000526 	beq	r2,zero,4008f44 <_Z12OC_I2C_WritelhhPhi+0x140>
        printf("OC_I2C_Write error[5]\r\n");
 4008f30:	01010234 	movhi	r4,1032
 4008f34:	21064c04 	addi	r4,r4,6448
 4008f38:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4008f3c:	0005883a 	mov	r2,zero
 4008f40:	00003e06 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 4008f44:	e03ffb15 	stw	zero,-20(fp)
 4008f48:	e0fffb17 	ldw	r3,-20(fp)
 4008f4c:	e0800217 	ldw	r2,8(fp)
 4008f50:	18802b0e 	bge	r3,r2,4009000 <_Z12OC_I2C_WritelhhPhi+0x1fc>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
 4008f54:	e0bffb17 	ldw	r2,-20(fp)
 4008f58:	e0ffff17 	ldw	r3,-4(fp)
 4008f5c:	1885883a 	add	r2,r3,r2
 4008f60:	10800003 	ldbu	r2,0(r2)
 4008f64:	10803fcc 	andi	r2,r2,255
 4008f68:	100d883a 	mov	r6,r2
 4008f6c:	014000c4 	movi	r5,3
 4008f70:	e13ffc17 	ldw	r4,-16(fp)
 4008f74:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008f78:	1080005c 	xori	r2,r2,1
 4008f7c:	10803fcc 	andi	r2,r2,255
 4008f80:	10000526 	beq	r2,zero,4008f98 <_Z12OC_I2C_WritelhhPhi+0x194>
              printf("OC_I2C_Write error[6]\r\n");
 4008f84:	01010234 	movhi	r4,1032
 4008f88:	21065204 	addi	r4,r4,6472
 4008f8c:	40127b00 	call	40127b0 <puts>
              return FALSE;
 4008f90:	0005883a 	mov	r2,zero
 4008f94:	00002906 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
 4008f98:	01800404 	movi	r6,16
 4008f9c:	01400104 	movi	r5,4
 4008fa0:	e13ffc17 	ldw	r4,-16(fp)
 4008fa4:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4008fa8:	1080005c 	xori	r2,r2,1
 4008fac:	10803fcc 	andi	r2,r2,255
 4008fb0:	10000526 	beq	r2,zero,4008fc8 <_Z12OC_I2C_WritelhhPhi+0x1c4>
             printf("OC_I2C_Write error[7]\r\n");
 4008fb4:	01010234 	movhi	r4,1032
 4008fb8:	21065804 	addi	r4,r4,6496
 4008fbc:	40127b00 	call	40127b0 <puts>
              return FALSE;
 4008fc0:	0005883a 	mov	r2,zero
 4008fc4:	00001d06 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
 4008fc8:	e13ffc17 	ldw	r4,-16(fp)
 4008fcc:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4008fd0:	1080005c 	xori	r2,r2,1
 4008fd4:	10803fcc 	andi	r2,r2,255
 4008fd8:	10000526 	beq	r2,zero,4008ff0 <_Z12OC_I2C_WritelhhPhi+0x1ec>
              printf("OC_I2C_Write error[8]\r\n");
 4008fdc:	01010234 	movhi	r4,1032
 4008fe0:	21065e04 	addi	r4,r4,6520
 4008fe4:	40127b00 	call	40127b0 <puts>
              return FALSE;
 4008fe8:	0005883a 	mov	r2,zero
 4008fec:	00001306 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
 4008ff0:	e0bffb17 	ldw	r2,-20(fp)
 4008ff4:	10800044 	addi	r2,r2,1
 4008ff8:	e0bffb15 	stw	r2,-20(fp)
 4008ffc:	003fd206 	br	4008f48 <__reset+0xfb007f48>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
 4009000:	01801004 	movi	r6,64
 4009004:	01400104 	movi	r5,4
 4009008:	e13ffc17 	ldw	r4,-16(fp)
 400900c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009010:	1080005c 	xori	r2,r2,1
 4009014:	10803fcc 	andi	r2,r2,255
 4009018:	10000526 	beq	r2,zero,4009030 <_Z12OC_I2C_WritelhhPhi+0x22c>
         printf("OC_I2C_Write error[9]\r\n");
 400901c:	01010234 	movhi	r4,1032
 4009020:	21066404 	addi	r4,r4,6544
 4009024:	40127b00 	call	40127b0 <puts>
         return FALSE;
 4009028:	0005883a 	mov	r2,zero
 400902c:	00000306 	br	400903c <_Z12OC_I2C_WritelhhPhi+0x238>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
 4009030:	01003e84 	movi	r4,250
 4009034:	40203d80 	call	40203d8 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
 4009038:	00800044 	movi	r2,1

}
 400903c:	e037883a 	mov	sp,fp
 4009040:	dfc00117 	ldw	ra,4(sp)
 4009044:	df000017 	ldw	fp,0(sp)
 4009048:	dec00204 	addi	sp,sp,8
 400904c:	f800283a 	ret

04009050 <_Z18ACK_judge_for_readl>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
 4009050:	defffb04 	addi	sp,sp,-20
 4009054:	dfc00415 	stw	ra,16(sp)
 4009058:	df000315 	stw	fp,12(sp)
 400905c:	df000304 	addi	fp,sp,12
 4009060:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
 4009064:	01003e84 	movi	r4,250
 4009068:	40203d80 	call	40203d8 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 400906c:	e0bffe04 	addi	r2,fp,-8
 4009070:	100d883a 	mov	r6,r2
 4009074:	01400104 	movi	r5,4
 4009078:	e13fff17 	ldw	r4,-4(fp)
 400907c:	4008a6c0 	call	4008a6c <_Z11Read32_DatallPl>
 4009080:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess){
 4009084:	e0bffd03 	ldbu	r2,-12(fp)
 4009088:	10000426 	beq	r2,zero,400909c <_Z18ACK_judge_for_readl+0x4c>
        if(this_data & 0x02)
 400908c:	e0bffe17 	ldw	r2,-8(fp)
 4009090:	1080008c 	andi	r2,r2,2
 4009094:	10000126 	beq	r2,zero,400909c <_Z18ACK_judge_for_readl+0x4c>
            bSuccess = FALSE;
 4009098:	e03ffd05 	stb	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 400909c:	e0bffd03 	ldbu	r2,-12(fp)

}
 40090a0:	e037883a 	mov	sp,fp
 40090a4:	dfc00117 	ldw	ra,4(sp)
 40090a8:	df000017 	ldw	fp,0(sp)
 40090ac:	dec00204 	addi	sp,sp,8
 40090b0:	f800283a 	ret

040090b4 <_Z11OC_I2C_ReadlhhPhi>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 40090b4:	defff804 	addi	sp,sp,-32
 40090b8:	dfc00715 	stw	ra,28(sp)
 40090bc:	df000615 	stw	fp,24(sp)
 40090c0:	df000604 	addi	fp,sp,24
 40090c4:	e13ffc15 	stw	r4,-16(fp)
 40090c8:	2807883a 	mov	r3,r5
 40090cc:	3005883a 	mov	r2,r6
 40090d0:	e1ffff15 	stw	r7,-4(fp)
 40090d4:	e0fffd05 	stb	r3,-12(fp)
 40090d8:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 40090dc:	e0bffc17 	ldw	r2,-16(fp)
 40090e0:	10800304 	addi	r2,r2,12
 40090e4:	1007883a 	mov	r3,r2
 40090e8:	e0bffd03 	ldbu	r2,-12(fp)
 40090ec:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 40090f0:	e0bffc17 	ldw	r2,-16(fp)
 40090f4:	10800404 	addi	r2,r2,16
 40090f8:	1007883a 	mov	r3,r2
 40090fc:	00802404 	movi	r2,144
 4009100:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 4009104:	e13ffc17 	ldw	r4,-16(fp)
 4009108:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 400910c:	1080005c 	xori	r2,r2,1
 4009110:	10803fcc 	andi	r2,r2,255
 4009114:	10000526 	beq	r2,zero,400912c <_Z11OC_I2C_ReadlhhPhi+0x78>
       printf("OC_I2C_Read error[2]\r\n");
 4009118:	01010234 	movhi	r4,1032
 400911c:	21066a04 	addi	r4,r4,6568
 4009120:	40127b00 	call	40127b0 <puts>
       return FALSE;
 4009124:	0005883a 	mov	r2,zero
 4009128:	00005806 	br	400928c <_Z11OC_I2C_ReadlhhPhi+0x1d8>
   }
   IOWR(i2c_base, 3,sub_address);
 400912c:	e0bffc17 	ldw	r2,-16(fp)
 4009130:	10800304 	addi	r2,r2,12
 4009134:	1007883a 	mov	r3,r2
 4009138:	e0bffe03 	ldbu	r2,-8(fp)
 400913c:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 4009140:	e0bffc17 	ldw	r2,-16(fp)
 4009144:	10800404 	addi	r2,r2,16
 4009148:	1007883a 	mov	r3,r2
 400914c:	00800404 	movi	r2,16
 4009150:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 4009154:	e13ffc17 	ldw	r4,-16(fp)
 4009158:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 400915c:	1080005c 	xori	r2,r2,1
 4009160:	10803fcc 	andi	r2,r2,255
 4009164:	10000526 	beq	r2,zero,400917c <_Z11OC_I2C_ReadlhhPhi+0xc8>
        printf("OC_I2C_Read error[5]\r\n");
 4009168:	01010234 	movhi	r4,1032
 400916c:	21067004 	addi	r4,r4,6592
 4009170:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009174:	0005883a 	mov	r2,zero
 4009178:	00004406 	br	400928c <_Z11OC_I2C_ReadlhhPhi+0x1d8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
 400917c:	e0bffc17 	ldw	r2,-16(fp)
 4009180:	10800304 	addi	r2,r2,12
 4009184:	1007883a 	mov	r3,r2
 4009188:	e0bffd03 	ldbu	r2,-12(fp)
 400918c:	10800054 	ori	r2,r2,1
 4009190:	10803fcc 	andi	r2,r2,255
 4009194:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 4009198:	e0bffc17 	ldw	r2,-16(fp)
 400919c:	10800404 	addi	r2,r2,16
 40091a0:	1007883a 	mov	r3,r2
 40091a4:	00802404 	movi	r2,144
 40091a8:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 40091ac:	e13ffc17 	ldw	r4,-16(fp)
 40091b0:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40091b4:	1080005c 	xori	r2,r2,1
 40091b8:	10803fcc 	andi	r2,r2,255
 40091bc:	10000526 	beq	r2,zero,40091d4 <_Z11OC_I2C_ReadlhhPhi+0x120>
        printf("OC_I2C_Read error[8]\r\n");
 40091c0:	01010234 	movhi	r4,1032
 40091c4:	21067604 	addi	r4,r4,6616
 40091c8:	40127b00 	call	40127b0 <puts>
        return FALSE;
 40091cc:	0005883a 	mov	r2,zero
 40091d0:	00002e06 	br	400928c <_Z11OC_I2C_ReadlhhPhi+0x1d8>
    }

    for(i=0;i<nReadLength;i++){
 40091d4:	e03ffa15 	stw	zero,-24(fp)
 40091d8:	e0fffa17 	ldw	r3,-24(fp)
 40091dc:	e0800217 	ldw	r2,8(fp)
 40091e0:	1880220e 	bge	r3,r2,400926c <_Z11OC_I2C_ReadlhhPhi+0x1b8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 40091e4:	e0bffc17 	ldw	r2,-16(fp)
 40091e8:	10800404 	addi	r2,r2,16
 40091ec:	1009883a 	mov	r4,r2
 40091f0:	e0bffa17 	ldw	r2,-24(fp)
 40091f4:	10c00044 	addi	r3,r2,1
 40091f8:	e0800217 	ldw	r2,8(fp)
 40091fc:	1880021e 	bne	r3,r2,4009208 <_Z11OC_I2C_ReadlhhPhi+0x154>
 4009200:	00800a04 	movi	r2,40
 4009204:	00000106 	br	400920c <_Z11OC_I2C_ReadlhhPhi+0x158>
 4009208:	00800804 	movi	r2,32
 400920c:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4009210:	e13ffc17 	ldw	r4,-16(fp)
 4009214:	40090500 	call	4009050 <_Z18ACK_judge_for_readl>
 4009218:	1080005c 	xori	r2,r2,1
 400921c:	10803fcc 	andi	r2,r2,255
 4009220:	10000526 	beq	r2,zero,4009238 <_Z11OC_I2C_ReadlhhPhi+0x184>
            printf("OC_I2C_Read error[10]\r\n");
 4009224:	01010234 	movhi	r4,1032
 4009228:	21067c04 	addi	r4,r4,6640
 400922c:	40127b00 	call	40127b0 <puts>
            return FALSE;
 4009230:	0005883a 	mov	r2,zero
 4009234:	00001506 	br	400928c <_Z11OC_I2C_ReadlhhPhi+0x1d8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4009238:	e0bffc17 	ldw	r2,-16(fp)
 400923c:	10800304 	addi	r2,r2,12
 4009240:	10800037 	ldwio	r2,0(r2)
 4009244:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4009248:	e0bffa17 	ldw	r2,-24(fp)
 400924c:	e0ffff17 	ldw	r3,-4(fp)
 4009250:	1885883a 	add	r2,r3,r2
 4009254:	e0fffb17 	ldw	r3,-20(fp)
 4009258:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 400925c:	e0bffa17 	ldw	r2,-24(fp)
 4009260:	10800044 	addi	r2,r2,1
 4009264:	e0bffa15 	stw	r2,-24(fp)
 4009268:	003fdb06 	br	40091d8 <__reset+0xfb0081d8>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 400926c:	e0bffc17 	ldw	r2,-16(fp)
 4009270:	10800404 	addi	r2,r2,16
 4009274:	1007883a 	mov	r3,r2
 4009278:	00801004 	movi	r2,64
 400927c:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4009280:	01003e84 	movi	r4,250
 4009284:	40203d80 	call	40203d8 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 4009288:	00800044 	movi	r2,1

}
 400928c:	e037883a 	mov	sp,fp
 4009290:	dfc00117 	ldw	ra,4(sp)
 4009294:	df000017 	ldw	fp,0(sp)
 4009298:	dec00204 	addi	sp,sp,8
 400929c:	f800283a 	ret

040092a0 <_Z20OC_I2C_Read_ContinuelhPhi>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
 40092a0:	defff804 	addi	sp,sp,-32
 40092a4:	dfc00715 	stw	ra,28(sp)
 40092a8:	df000615 	stw	fp,24(sp)
 40092ac:	df000604 	addi	fp,sp,24
 40092b0:	e13ffc15 	stw	r4,-16(fp)
 40092b4:	2805883a 	mov	r2,r5
 40092b8:	e1bffe15 	stw	r6,-8(fp)
 40092bc:	e1ffff15 	stw	r7,-4(fp)
 40092c0:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
 40092c4:	e0bffc17 	ldw	r2,-16(fp)
 40092c8:	10800304 	addi	r2,r2,12
 40092cc:	1007883a 	mov	r3,r2
 40092d0:	e0bffd03 	ldbu	r2,-12(fp)
 40092d4:	10800054 	ori	r2,r2,1
 40092d8:	10803fcc 	andi	r2,r2,255
 40092dc:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 40092e0:	e0bffc17 	ldw	r2,-16(fp)
 40092e4:	10800404 	addi	r2,r2,16
 40092e8:	1007883a 	mov	r3,r2
 40092ec:	00802404 	movi	r2,144
 40092f0:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 40092f4:	e13ffc17 	ldw	r4,-16(fp)
 40092f8:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40092fc:	1080005c 	xori	r2,r2,1
 4009300:	10803fcc 	andi	r2,r2,255
 4009304:	10000526 	beq	r2,zero,400931c <_Z20OC_I2C_Read_ContinuelhPhi+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
 4009308:	01010234 	movhi	r4,1032
 400930c:	21067604 	addi	r4,r4,6616
 4009310:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009314:	0005883a 	mov	r2,zero
 4009318:	00002e06 	br	40093d4 <_Z20OC_I2C_Read_ContinuelhPhi+0x134>
    }

    for(i=0;i<nReadLength;i++){
 400931c:	e03ffa15 	stw	zero,-24(fp)
 4009320:	e0fffa17 	ldw	r3,-24(fp)
 4009324:	e0bfff17 	ldw	r2,-4(fp)
 4009328:	1880220e 	bge	r3,r2,40093b4 <_Z20OC_I2C_Read_ContinuelhPhi+0x114>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 400932c:	e0bffc17 	ldw	r2,-16(fp)
 4009330:	10800404 	addi	r2,r2,16
 4009334:	1009883a 	mov	r4,r2
 4009338:	e0bffa17 	ldw	r2,-24(fp)
 400933c:	10c00044 	addi	r3,r2,1
 4009340:	e0bfff17 	ldw	r2,-4(fp)
 4009344:	1880021e 	bne	r3,r2,4009350 <_Z20OC_I2C_Read_ContinuelhPhi+0xb0>
 4009348:	00800a04 	movi	r2,40
 400934c:	00000106 	br	4009354 <_Z20OC_I2C_Read_ContinuelhPhi+0xb4>
 4009350:	00800804 	movi	r2,32
 4009354:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 4009358:	e13ffc17 	ldw	r4,-16(fp)
 400935c:	40090500 	call	4009050 <_Z18ACK_judge_for_readl>
 4009360:	1080005c 	xori	r2,r2,1
 4009364:	10803fcc 	andi	r2,r2,255
 4009368:	10000526 	beq	r2,zero,4009380 <_Z20OC_I2C_Read_ContinuelhPhi+0xe0>
            printf("OC_I2C_Read error[10]\r\n");
 400936c:	01010234 	movhi	r4,1032
 4009370:	21067c04 	addi	r4,r4,6640
 4009374:	40127b00 	call	40127b0 <puts>
            return FALSE;
 4009378:	0005883a 	mov	r2,zero
 400937c:	00001506 	br	40093d4 <_Z20OC_I2C_Read_ContinuelhPhi+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 4009380:	e0bffc17 	ldw	r2,-16(fp)
 4009384:	10800304 	addi	r2,r2,12
 4009388:	10800037 	ldwio	r2,0(r2)
 400938c:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 4009390:	e0bffa17 	ldw	r2,-24(fp)
 4009394:	e0fffe17 	ldw	r3,-8(fp)
 4009398:	1885883a 	add	r2,r3,r2
 400939c:	e0fffb17 	ldw	r3,-20(fp)
 40093a0:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 40093a4:	e0bffa17 	ldw	r2,-24(fp)
 40093a8:	10800044 	addi	r2,r2,1
 40093ac:	e0bffa15 	stw	r2,-24(fp)
 40093b0:	003fdb06 	br	4009320 <__reset+0xfb008320>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 40093b4:	e0bffc17 	ldw	r2,-16(fp)
 40093b8:	10800404 	addi	r2,r2,16
 40093bc:	1007883a 	mov	r3,r2
 40093c0:	00801004 	movi	r2,64
 40093c4:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 40093c8:	01003e84 	movi	r4,250
 40093cc:	40203d80 	call	40203d8 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 40093d0:	00800044 	movi	r2,1

}
 40093d4:	e037883a 	mov	sp,fp
 40093d8:	dfc00117 	ldw	ra,4(sp)
 40093dc:	df000017 	ldw	fp,0(sp)
 40093e0:	dec00204 	addi	sp,sp,8
 40093e4:	f800283a 	ret

040093e8 <_Z13OC_I2CL_WritelhtPhi>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
 40093e8:	defff804 	addi	sp,sp,-32
 40093ec:	dfc00715 	stw	ra,28(sp)
 40093f0:	df000615 	stw	fp,24(sp)
 40093f4:	df000604 	addi	fp,sp,24
 40093f8:	e13ffc15 	stw	r4,-16(fp)
 40093fc:	2807883a 	mov	r3,r5
 4009400:	3005883a 	mov	r2,r6
 4009404:	e1ffff15 	stw	r7,-4(fp)
 4009408:	e0fffd05 	stb	r3,-12(fp)
 400940c:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
 4009410:	e0bffe0b 	ldhu	r2,-8(fp)
 4009414:	1004d23a 	srli	r2,r2,8
 4009418:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
 400941c:	e0bffe0b 	ldhu	r2,-8(fp)
 4009420:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4009424:	e0bffd03 	ldbu	r2,-12(fp)
 4009428:	100d883a 	mov	r6,r2
 400942c:	014000c4 	movi	r5,3
 4009430:	e13ffc17 	ldw	r4,-16(fp)
 4009434:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009438:	1080005c 	xori	r2,r2,1
 400943c:	10803fcc 	andi	r2,r2,255
 4009440:	10000226 	beq	r2,zero,400944c <_Z13OC_I2CL_WritelhtPhi+0x64>
       return FALSE;
 4009444:	0005883a 	mov	r2,zero
 4009448:	00007d06 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
 400944c:	01802404 	movi	r6,144
 4009450:	01400104 	movi	r5,4
 4009454:	e13ffc17 	ldw	r4,-16(fp)
 4009458:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 400945c:	1080005c 	xori	r2,r2,1
 4009460:	10803fcc 	andi	r2,r2,255
 4009464:	10000226 	beq	r2,zero,4009470 <_Z13OC_I2CL_WritelhtPhi+0x88>
       return FALSE;
 4009468:	0005883a 	mov	r2,zero
 400946c:	00007406 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4009470:	e13ffc17 	ldw	r4,-16(fp)
 4009474:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4009478:	1080005c 	xori	r2,r2,1
 400947c:	10803fcc 	andi	r2,r2,255
 4009480:	10000526 	beq	r2,zero,4009498 <_Z13OC_I2CL_WritelhtPhi+0xb0>
        printf("OC_I2CL_Write error[0]\r\n");
 4009484:	01010234 	movhi	r4,1032
 4009488:	21068204 	addi	r4,r4,6664
 400948c:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009490:	0005883a 	mov	r2,zero
 4009494:	00006a06 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4009498:	e0bffb03 	ldbu	r2,-20(fp)
 400949c:	100d883a 	mov	r6,r2
 40094a0:	014000c4 	movi	r5,3
 40094a4:	e13ffc17 	ldw	r4,-16(fp)
 40094a8:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40094ac:	1080005c 	xori	r2,r2,1
 40094b0:	10803fcc 	andi	r2,r2,255
 40094b4:	10000226 	beq	r2,zero,40094c0 <_Z13OC_I2CL_WritelhtPhi+0xd8>
       return FALSE;
 40094b8:	0005883a 	mov	r2,zero
 40094bc:	00006006 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 40094c0:	01800404 	movi	r6,16
 40094c4:	01400104 	movi	r5,4
 40094c8:	e13ffc17 	ldw	r4,-16(fp)
 40094cc:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40094d0:	1080005c 	xori	r2,r2,1
 40094d4:	10803fcc 	andi	r2,r2,255
 40094d8:	10000226 	beq	r2,zero,40094e4 <_Z13OC_I2CL_WritelhtPhi+0xfc>
        return FALSE;
 40094dc:	0005883a 	mov	r2,zero
 40094e0:	00005706 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40094e4:	e13ffc17 	ldw	r4,-16(fp)
 40094e8:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40094ec:	1080005c 	xori	r2,r2,1
 40094f0:	10803fcc 	andi	r2,r2,255
 40094f4:	10000526 	beq	r2,zero,400950c <_Z13OC_I2CL_WritelhtPhi+0x124>
        printf("OC_I2CL_Write error[1]\r\n");
 40094f8:	01010234 	movhi	r4,1032
 40094fc:	21068804 	addi	r4,r4,6688
 4009500:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009504:	0005883a 	mov	r2,zero
 4009508:	00004d06 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
 400950c:	e0bffb43 	ldbu	r2,-19(fp)
 4009510:	100d883a 	mov	r6,r2
 4009514:	014000c4 	movi	r5,3
 4009518:	e13ffc17 	ldw	r4,-16(fp)
 400951c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009520:	1080005c 	xori	r2,r2,1
 4009524:	10803fcc 	andi	r2,r2,255
 4009528:	10000226 	beq	r2,zero,4009534 <_Z13OC_I2CL_WritelhtPhi+0x14c>
       return FALSE;
 400952c:	0005883a 	mov	r2,zero
 4009530:	00004306 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
 4009534:	01800404 	movi	r6,16
 4009538:	01400104 	movi	r5,4
 400953c:	e13ffc17 	ldw	r4,-16(fp)
 4009540:	4008a140 	call	4008a14 <_Z12Write32_Datalll>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4009544:	e13ffc17 	ldw	r4,-16(fp)
 4009548:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 400954c:	1080005c 	xori	r2,r2,1
 4009550:	10803fcc 	andi	r2,r2,255
 4009554:	10000526 	beq	r2,zero,400956c <_Z13OC_I2CL_WritelhtPhi+0x184>
        printf("OC_I2CL_Write error[2]\r\n");
 4009558:	01010234 	movhi	r4,1032
 400955c:	21068e04 	addi	r4,r4,6712
 4009560:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009564:	0005883a 	mov	r2,zero
 4009568:	00003506 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 400956c:	e03ffa15 	stw	zero,-24(fp)
 4009570:	e0fffa17 	ldw	r3,-24(fp)
 4009574:	e0800217 	ldw	r2,8(fp)
 4009578:	1880250e 	bge	r3,r2,4009610 <_Z13OC_I2CL_WritelhtPhi+0x228>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
 400957c:	e0bffa17 	ldw	r2,-24(fp)
 4009580:	e0ffff17 	ldw	r3,-4(fp)
 4009584:	1885883a 	add	r2,r3,r2
 4009588:	10800003 	ldbu	r2,0(r2)
 400958c:	10803fcc 	andi	r2,r2,255
 4009590:	100d883a 	mov	r6,r2
 4009594:	014000c4 	movi	r5,3
 4009598:	e13ffc17 	ldw	r4,-16(fp)
 400959c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40095a0:	1080005c 	xori	r2,r2,1
 40095a4:	10803fcc 	andi	r2,r2,255
 40095a8:	10000226 	beq	r2,zero,40095b4 <_Z13OC_I2CL_WritelhtPhi+0x1cc>
            return FALSE;
 40095ac:	0005883a 	mov	r2,zero
 40095b0:	00002306 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
 40095b4:	01800404 	movi	r6,16
 40095b8:	01400104 	movi	r5,4
 40095bc:	e13ffc17 	ldw	r4,-16(fp)
 40095c0:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40095c4:	1080005c 	xori	r2,r2,1
 40095c8:	10803fcc 	andi	r2,r2,255
 40095cc:	10000226 	beq	r2,zero,40095d8 <_Z13OC_I2CL_WritelhtPhi+0x1f0>
            return FALSE;
 40095d0:	0005883a 	mov	r2,zero
 40095d4:	00001a06 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
 40095d8:	e13ffc17 	ldw	r4,-16(fp)
 40095dc:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40095e0:	1080005c 	xori	r2,r2,1
 40095e4:	10803fcc 	andi	r2,r2,255
 40095e8:	10000526 	beq	r2,zero,4009600 <_Z13OC_I2CL_WritelhtPhi+0x218>
             printf("OC_I2CL_Write error[3]\r\n");
 40095ec:	01010234 	movhi	r4,1032
 40095f0:	21069404 	addi	r4,r4,6736
 40095f4:	40127b00 	call	40127b0 <puts>
             return FALSE;
 40095f8:	0005883a 	mov	r2,zero
 40095fc:	00001006 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
 4009600:	e0bffa17 	ldw	r2,-24(fp)
 4009604:	10800044 	addi	r2,r2,1
 4009608:	e0bffa15 	stw	r2,-24(fp)
 400960c:	003fd806 	br	4009570 <__reset+0xfb008570>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
 4009610:	01801004 	movi	r6,64
 4009614:	01400104 	movi	r5,4
 4009618:	e13ffc17 	ldw	r4,-16(fp)
 400961c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009620:	1080005c 	xori	r2,r2,1
 4009624:	10803fcc 	andi	r2,r2,255
 4009628:	10000226 	beq	r2,zero,4009634 <_Z13OC_I2CL_WritelhtPhi+0x24c>
         return FALSE;
 400962c:	0005883a 	mov	r2,zero
 4009630:	00000306 	br	4009640 <_Z13OC_I2CL_WritelhtPhi+0x258>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
 4009634:	01003e84 	movi	r4,250
 4009638:	40203d80 	call	40203d8 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
 400963c:	00800044 	movi	r2,1
}
 4009640:	e037883a 	mov	sp,fp
 4009644:	dfc00117 	ldw	ra,4(sp)
 4009648:	df000017 	ldw	fp,0(sp)
 400964c:	dec00204 	addi	sp,sp,8
 4009650:	f800283a 	ret

04009654 <_Z12OC_I2CL_ReadlhtPhi>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
 4009654:	defff704 	addi	sp,sp,-36
 4009658:	dfc00815 	stw	ra,32(sp)
 400965c:	df000715 	stw	fp,28(sp)
 4009660:	df000704 	addi	fp,sp,28
 4009664:	e13ffc15 	stw	r4,-16(fp)
 4009668:	2807883a 	mov	r3,r5
 400966c:	3005883a 	mov	r2,r6
 4009670:	e1ffff15 	stw	r7,-4(fp)
 4009674:	e0fffd05 	stb	r3,-12(fp)
 4009678:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
 400967c:	e0bffe0b 	ldhu	r2,-8(fp)
 4009680:	1004d23a 	srli	r2,r2,8
 4009684:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
 4009688:	e0bffe0b 	ldhu	r2,-8(fp)
 400968c:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
 4009690:	e0bffd03 	ldbu	r2,-12(fp)
 4009694:	100d883a 	mov	r6,r2
 4009698:	014000c4 	movi	r5,3
 400969c:	e13ffc17 	ldw	r4,-16(fp)
 40096a0:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40096a4:	1080005c 	xori	r2,r2,1
 40096a8:	10803fcc 	andi	r2,r2,255
 40096ac:	10000226 	beq	r2,zero,40096b8 <_Z12OC_I2CL_ReadlhtPhi+0x64>
       return FALSE;
 40096b0:	0005883a 	mov	r2,zero
 40096b4:	00009e06 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
 40096b8:	01802404 	movi	r6,144
 40096bc:	01400104 	movi	r5,4
 40096c0:	e13ffc17 	ldw	r4,-16(fp)
 40096c4:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40096c8:	1080005c 	xori	r2,r2,1
 40096cc:	10803fcc 	andi	r2,r2,255
 40096d0:	10000226 	beq	r2,zero,40096dc <_Z12OC_I2CL_ReadlhtPhi+0x88>
       return FALSE;
 40096d4:	0005883a 	mov	r2,zero
 40096d8:	00009506 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40096dc:	e13ffc17 	ldw	r4,-16(fp)
 40096e0:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40096e4:	1080005c 	xori	r2,r2,1
 40096e8:	10803fcc 	andi	r2,r2,255
 40096ec:	10000526 	beq	r2,zero,4009704 <_Z12OC_I2CL_ReadlhtPhi+0xb0>
        printf("OC_I2CL_Read error[0]\r\n");
 40096f0:	01010234 	movhi	r4,1032
 40096f4:	21069a04 	addi	r4,r4,6760
 40096f8:	40127b00 	call	40127b0 <puts>
        return FALSE;
 40096fc:	0005883a 	mov	r2,zero
 4009700:	00008b06 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
 4009704:	e0bffa03 	ldbu	r2,-24(fp)
 4009708:	100d883a 	mov	r6,r2
 400970c:	014000c4 	movi	r5,3
 4009710:	e13ffc17 	ldw	r4,-16(fp)
 4009714:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009718:	1080005c 	xori	r2,r2,1
 400971c:	10803fcc 	andi	r2,r2,255
 4009720:	10000226 	beq	r2,zero,400972c <_Z12OC_I2CL_ReadlhtPhi+0xd8>
       return FALSE;
 4009724:	0005883a 	mov	r2,zero
 4009728:	00008106 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 400972c:	01800404 	movi	r6,16
 4009730:	01400104 	movi	r5,4
 4009734:	e13ffc17 	ldw	r4,-16(fp)
 4009738:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 400973c:	1080005c 	xori	r2,r2,1
 4009740:	10803fcc 	andi	r2,r2,255
 4009744:	10000226 	beq	r2,zero,4009750 <_Z12OC_I2CL_ReadlhtPhi+0xfc>
        return FALSE;
 4009748:	0005883a 	mov	r2,zero
 400974c:	00007806 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4009750:	e13ffc17 	ldw	r4,-16(fp)
 4009754:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4009758:	1080005c 	xori	r2,r2,1
 400975c:	10803fcc 	andi	r2,r2,255
 4009760:	10000526 	beq	r2,zero,4009778 <_Z12OC_I2CL_ReadlhtPhi+0x124>
        printf("OC_I2CL_Read error[1]\r\n");
 4009764:	01010234 	movhi	r4,1032
 4009768:	2106a004 	addi	r4,r4,6784
 400976c:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009770:	0005883a 	mov	r2,zero
 4009774:	00006e06 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
 4009778:	e0bffa43 	ldbu	r2,-23(fp)
 400977c:	100d883a 	mov	r6,r2
 4009780:	014000c4 	movi	r5,3
 4009784:	e13ffc17 	ldw	r4,-16(fp)
 4009788:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 400978c:	1080005c 	xori	r2,r2,1
 4009790:	10803fcc 	andi	r2,r2,255
 4009794:	10000226 	beq	r2,zero,40097a0 <_Z12OC_I2CL_ReadlhtPhi+0x14c>
       return FALSE;
 4009798:	0005883a 	mov	r2,zero
 400979c:	00006406 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
 40097a0:	01800404 	movi	r6,16
 40097a4:	01400104 	movi	r5,4
 40097a8:	e13ffc17 	ldw	r4,-16(fp)
 40097ac:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 40097b0:	1080005c 	xori	r2,r2,1
 40097b4:	10803fcc 	andi	r2,r2,255
 40097b8:	10000226 	beq	r2,zero,40097c4 <_Z12OC_I2CL_ReadlhtPhi+0x170>
        return FALSE;
 40097bc:	0005883a 	mov	r2,zero
 40097c0:	00005b06 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 40097c4:	e13ffc17 	ldw	r4,-16(fp)
 40097c8:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 40097cc:	1080005c 	xori	r2,r2,1
 40097d0:	10803fcc 	andi	r2,r2,255
 40097d4:	10000526 	beq	r2,zero,40097ec <_Z12OC_I2CL_ReadlhtPhi+0x198>
        printf("OC_I2CL_Read error[2]\r\n");
 40097d8:	01010234 	movhi	r4,1032
 40097dc:	2106a604 	addi	r4,r4,6808
 40097e0:	40127b00 	call	40127b0 <puts>
        return FALSE;
 40097e4:	0005883a 	mov	r2,zero
 40097e8:	00005106 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
 40097ec:	e0bffd03 	ldbu	r2,-12(fp)
 40097f0:	10800054 	ori	r2,r2,1
 40097f4:	10803fcc 	andi	r2,r2,255
 40097f8:	100d883a 	mov	r6,r2
 40097fc:	014000c4 	movi	r5,3
 4009800:	e13ffc17 	ldw	r4,-16(fp)
 4009804:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009808:	1080005c 	xori	r2,r2,1
 400980c:	10803fcc 	andi	r2,r2,255
 4009810:	10000226 	beq	r2,zero,400981c <_Z12OC_I2CL_ReadlhtPhi+0x1c8>
         return FALSE;
 4009814:	0005883a 	mov	r2,zero
 4009818:	00004506 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
 400981c:	01802404 	movi	r6,144
 4009820:	01400104 	movi	r5,4
 4009824:	e13ffc17 	ldw	r4,-16(fp)
 4009828:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 400982c:	1080005c 	xori	r2,r2,1
 4009830:	10803fcc 	andi	r2,r2,255
 4009834:	10000226 	beq	r2,zero,4009840 <_Z12OC_I2CL_ReadlhtPhi+0x1ec>
         return FALSE;
 4009838:	0005883a 	mov	r2,zero
 400983c:	00003c06 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
 4009840:	e13ffc17 	ldw	r4,-16(fp)
 4009844:	4008d880 	call	4008d88 <_Z9ACK_checkl>
 4009848:	1080005c 	xori	r2,r2,1
 400984c:	10803fcc 	andi	r2,r2,255
 4009850:	10000526 	beq	r2,zero,4009868 <_Z12OC_I2CL_ReadlhtPhi+0x214>
        printf("OC_I2CL_Read error[3]\r\n");
 4009854:	01010234 	movhi	r4,1032
 4009858:	2106ac04 	addi	r4,r4,6832
 400985c:	40127b00 	call	40127b0 <puts>
        return FALSE;
 4009860:	0005883a 	mov	r2,zero
 4009864:	00003206 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 4009868:	e03ff915 	stw	zero,-28(fp)
 400986c:	e0fff917 	ldw	r3,-28(fp)
 4009870:	e0800217 	ldw	r2,8(fp)
 4009874:	1880220e 	bge	r3,r2,4009900 <_Z12OC_I2CL_ReadlhtPhi+0x2ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 4009878:	e0bffc17 	ldw	r2,-16(fp)
 400987c:	10800404 	addi	r2,r2,16
 4009880:	1009883a 	mov	r4,r2
 4009884:	e0bff917 	ldw	r2,-28(fp)
 4009888:	10c00044 	addi	r3,r2,1
 400988c:	e0800217 	ldw	r2,8(fp)
 4009890:	1880021e 	bne	r3,r2,400989c <_Z12OC_I2CL_ReadlhtPhi+0x248>
 4009894:	00800a04 	movi	r2,40
 4009898:	00000106 	br	40098a0 <_Z12OC_I2CL_ReadlhtPhi+0x24c>
 400989c:	00800804 	movi	r2,32
 40098a0:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 40098a4:	e13ffc17 	ldw	r4,-16(fp)
 40098a8:	40090500 	call	4009050 <_Z18ACK_judge_for_readl>
 40098ac:	1080005c 	xori	r2,r2,1
 40098b0:	10803fcc 	andi	r2,r2,255
 40098b4:	10000526 	beq	r2,zero,40098cc <_Z12OC_I2CL_ReadlhtPhi+0x278>
            printf("OC_I2CL_Read error[4]\r\n");
 40098b8:	01010234 	movhi	r4,1032
 40098bc:	2106b204 	addi	r4,r4,6856
 40098c0:	40127b00 	call	40127b0 <puts>
            return FALSE;
 40098c4:	0005883a 	mov	r2,zero
 40098c8:	00001906 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 40098cc:	e0bffc17 	ldw	r2,-16(fp)
 40098d0:	10800304 	addi	r2,r2,12
 40098d4:	10800037 	ldwio	r2,0(r2)
 40098d8:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 40098dc:	e0bff917 	ldw	r2,-28(fp)
 40098e0:	e0ffff17 	ldw	r3,-4(fp)
 40098e4:	1885883a 	add	r2,r3,r2
 40098e8:	e0fffb17 	ldw	r3,-20(fp)
 40098ec:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
 40098f0:	e0bff917 	ldw	r2,-28(fp)
 40098f4:	10800044 	addi	r2,r2,1
 40098f8:	e0bff915 	stw	r2,-28(fp)
 40098fc:	003fdb06 	br	400986c <__reset+0xfb00886c>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
 4009900:	01801004 	movi	r6,64
 4009904:	01400104 	movi	r5,4
 4009908:	e13ffc17 	ldw	r4,-16(fp)
 400990c:	4008a140 	call	4008a14 <_Z12Write32_Datalll>
 4009910:	1080005c 	xori	r2,r2,1
 4009914:	10803fcc 	andi	r2,r2,255
 4009918:	10000226 	beq	r2,zero,4009924 <_Z12OC_I2CL_ReadlhtPhi+0x2d0>
       return FALSE;
 400991c:	0005883a 	mov	r2,zero
 4009920:	00000306 	br	4009930 <_Z12OC_I2CL_ReadlhtPhi+0x2dc>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
 4009924:	01003e84 	movi	r4,250
 4009928:	40203d80 	call	40203d8 <usleep>

   return TRUE;
 400992c:	00800044 	movi	r2,1

}
 4009930:	e037883a 	mov	sp,fp
 4009934:	dfc00117 	ldw	ra,4(sp)
 4009938:	df000017 	ldw	fp,0(sp)
 400993c:	dec00204 	addi	sp,sp,8
 4009940:	f800283a 	ret

04009944 <_Z9UART_OpenPc>:
#ifdef SUPPORT_NON_BLOCKING_UART

//static int pUart=0;


int UART_Open(char *pDeviceName){
 4009944:	defffc04 	addi	sp,sp,-16
 4009948:	dfc00315 	stw	ra,12(sp)
 400994c:	df000215 	stw	fp,8(sp)
 4009950:	df000204 	addi	fp,sp,8
 4009954:	e13fff15 	stw	r4,-4(fp)
    int UartHandle;
   // bool bNoneBlocking = FALSE;
//    UART_Close();
    
    UartHandle = open(pDeviceName, O_ACCMODE); // open file for reading and writing
 4009958:	014000c4 	movi	r5,3
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	401fe940 	call	401fe94 <open>
 4009964:	e0bffe15 	stw	r2,-8(fp)
    if (UartHandle){
//        int i = fcntl(pJtagUart, F_SETFL, O_NONBLOCK);
//        printf("fcntl = %d\r\n", i);
  //      bSuccess = TRUE;
    }        
    return UartHandle;
 4009968:	e0bffe17 	ldw	r2,-8(fp)
}
 400996c:	e037883a 	mov	sp,fp
 4009970:	dfc00117 	ldw	ra,4(sp)
 4009974:	df000017 	ldw	fp,0(sp)
 4009978:	dec00204 	addi	sp,sp,8
 400997c:	f800283a 	ret

04009980 <_Z10UART_Closei>:


void UART_Close(int UartHandle){
 4009980:	defffd04 	addi	sp,sp,-12
 4009984:	dfc00215 	stw	ra,8(sp)
 4009988:	df000115 	stw	fp,4(sp)
 400998c:	df000104 	addi	fp,sp,4
 4009990:	e13fff15 	stw	r4,-4(fp)
    if (UartHandle){
 4009994:	e0bfff17 	ldw	r2,-4(fp)
 4009998:	10000226 	beq	r2,zero,40099a4 <_Z10UART_Closei+0x24>
        close(UartHandle);
 400999c:	e13fff17 	ldw	r4,-4(fp)
 40099a0:	401f4b40 	call	401f4b4 <close>
       // pUart = 0;
    }
}
 40099a4:	0001883a 	nop
 40099a8:	e037883a 	mov	sp,fp
 40099ac:	dfc00117 	ldw	ra,4(sp)
 40099b0:	df000017 	ldw	fp,0(sp)
 40099b4:	dec00204 	addi	sp,sp,8
 40099b8:	f800283a 	ret

040099bc <_Z10UART_WriteiPci>:


bool UART_Write(int UartHandle, char *pData, int nDataSize){
 40099bc:	defffa04 	addi	sp,sp,-24
 40099c0:	dfc00515 	stw	ra,20(sp)
 40099c4:	df000415 	stw	fp,16(sp)
 40099c8:	df000404 	addi	fp,sp,16
 40099cc:	e13ffd15 	stw	r4,-12(fp)
 40099d0:	e17ffe15 	stw	r5,-8(fp)
 40099d4:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = FALSE;
 40099d8:	e03ffc05 	stb	zero,-16(fp)
    if (UartHandle){
 40099dc:	e0bffd17 	ldw	r2,-12(fp)
 40099e0:	10000c26 	beq	r2,zero,4009a14 <_Z10UART_WriteiPci+0x58>
        if (write(UartHandle, pData, nDataSize) == nDataSize)
 40099e4:	e0bfff17 	ldw	r2,-4(fp)
 40099e8:	100d883a 	mov	r6,r2
 40099ec:	e17ffe17 	ldw	r5,-8(fp)
 40099f0:	e13ffd17 	ldw	r4,-12(fp)
 40099f4:	40204440 	call	4020444 <write>
 40099f8:	1007883a 	mov	r3,r2
 40099fc:	e0bfff17 	ldw	r2,-4(fp)
 4009a00:	1885003a 	cmpeq	r2,r3,r2
 4009a04:	10803fcc 	andi	r2,r2,255
 4009a08:	10000226 	beq	r2,zero,4009a14 <_Z10UART_WriteiPci+0x58>
            bSuccess = TRUE;
 4009a0c:	00800044 	movi	r2,1
 4009a10:	e0bffc05 	stb	r2,-16(fp)
    }            
    return bSuccess;        
 4009a14:	e0bffc03 	ldbu	r2,-16(fp)
        
}
 4009a18:	e037883a 	mov	sp,fp
 4009a1c:	dfc00117 	ldw	ra,4(sp)
 4009a20:	df000017 	ldw	fp,0(sp)
 4009a24:	dec00204 	addi	sp,sp,8
 4009a28:	f800283a 	ret

04009a2c <_Z9UART_ReadiPciPi>:

bool UART_Read(int UartHandle, char *pBuffer, int nBufferSize, int *prx_len){
 4009a2c:	defff804 	addi	sp,sp,-32
 4009a30:	dfc00715 	stw	ra,28(sp)
 4009a34:	df000615 	stw	fp,24(sp)
 4009a38:	df000604 	addi	fp,sp,24
 4009a3c:	e13ffc15 	stw	r4,-16(fp)
 4009a40:	e17ffd15 	stw	r5,-12(fp)
 4009a44:	e1bffe15 	stw	r6,-8(fp)
 4009a48:	e1ffff15 	stw	r7,-4(fp)
    int nResult;
    bool bSuccess = FALSE;
 4009a4c:	e03ffa05 	stb	zero,-24(fp)
    if (UartHandle){
 4009a50:	e0bffc17 	ldw	r2,-16(fp)
 4009a54:	10000d26 	beq	r2,zero,4009a8c <_Z9UART_ReadiPciPi+0x60>
        nResult = read(UartHandle, pBuffer, nBufferSize);
 4009a58:	e0bffe17 	ldw	r2,-8(fp)
 4009a5c:	100d883a 	mov	r6,r2
 4009a60:	e17ffd17 	ldw	r5,-12(fp)
 4009a64:	e13ffc17 	ldw	r4,-16(fp)
 4009a68:	40200240 	call	4020024 <read>
 4009a6c:	e0bffb15 	stw	r2,-20(fp)
        if (nResult >= 0){
 4009a70:	e0bffb17 	ldw	r2,-20(fp)
 4009a74:	10000516 	blt	r2,zero,4009a8c <_Z9UART_ReadiPciPi+0x60>
            *prx_len = nResult;
 4009a78:	e0bfff17 	ldw	r2,-4(fp)
 4009a7c:	e0fffb17 	ldw	r3,-20(fp)
 4009a80:	10c00015 	stw	r3,0(r2)
            bSuccess = TRUE; 
 4009a84:	00800044 	movi	r2,1
 4009a88:	e0bffa05 	stb	r2,-24(fp)
            //if (*prx_len == nBufferSize)
            //    bSuccess = TRUE;
        }            
    }            
    return bSuccess;      
 4009a8c:	e0bffa03 	ldbu	r2,-24(fp)
}
 4009a90:	e037883a 	mov	sp,fp
 4009a94:	dfc00117 	ldw	ra,4(sp)
 4009a98:	df000017 	ldw	fp,0(sp)
 4009a9c:	dec00204 	addi	sp,sp,8
 4009aa0:	f800283a 	ret

04009aa4 <_Z20UART_ReadWithTimeoutiPhtPtm>:

bool UART_ReadWithTimeout(int UartHandle, alt_u8 *pBuffer, alt_u16 nBufferSize, alt_u16 *prx_len, alt_u32 timeout){
 4009aa4:	defff504 	addi	sp,sp,-44
 4009aa8:	dfc00a15 	stw	ra,40(sp)
 4009aac:	df000915 	stw	fp,36(sp)
 4009ab0:	df000904 	addi	fp,sp,36
 4009ab4:	e13ffc15 	stw	r4,-16(fp)
 4009ab8:	e17ffd15 	stw	r5,-12(fp)
 4009abc:	3005883a 	mov	r2,r6
 4009ac0:	e1ffff15 	stw	r7,-4(fp)
 4009ac4:	e0bffe0d 	sth	r2,-8(fp)
    bool bSuccess = FALSE;
 4009ac8:	e03ff705 	stb	zero,-36(fp)
    if (UartHandle){
 4009acc:	e0bffc17 	ldw	r2,-16(fp)
 4009ad0:	10002f26 	beq	r2,zero,4009b90 <_Z20UART_ReadWithTimeoutiPhtPtm+0xec>
        int rx_total_cnt = 0, rx_cnt;
 4009ad4:	e03ff815 	stw	zero,-32(fp)
        alt_u32 time_start;
        bool bTimeout = FALSE;
 4009ad8:	e03ff905 	stb	zero,-28(fp)
 4009adc:	d0a02017 	ldw	r2,-32640(gp)
        time_start = alt_nticks();
 4009ae0:	e0bffa15 	stw	r2,-24(fp)
        while(!bSuccess && !bTimeout){
 4009ae4:	e0bff703 	ldbu	r2,-36(fp)
 4009ae8:	1000251e 	bne	r2,zero,4009b80 <_Z20UART_ReadWithTimeoutiPhtPtm+0xdc>
 4009aec:	e0bff903 	ldbu	r2,-28(fp)
 4009af0:	1000231e 	bne	r2,zero,4009b80 <_Z20UART_ReadWithTimeoutiPhtPtm+0xdc>
            UART_NoneBlockingRead(UartHandle, pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt, &rx_cnt);
 4009af4:	e0bff817 	ldw	r2,-32(fp)
 4009af8:	e0fffd17 	ldw	r3,-12(fp)
 4009afc:	1889883a 	add	r4,r3,r2
 4009b00:	e0fffe0b 	ldhu	r3,-8(fp)
 4009b04:	e0bff817 	ldw	r2,-32(fp)
 4009b08:	1885c83a 	sub	r2,r3,r2
 4009b0c:	e0fffb04 	addi	r3,fp,-20
 4009b10:	180f883a 	mov	r7,r3
 4009b14:	100d883a 	mov	r6,r2
 4009b18:	200b883a 	mov	r5,r4
 4009b1c:	e13ffc17 	ldw	r4,-16(fp)
 4009b20:	4009ba80 	call	4009ba8 <_Z21UART_NoneBlockingReadiPhiPi>
            //rx_cnt = read(pUart, pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt);
            rx_total_cnt += rx_cnt;
 4009b24:	e0bffb17 	ldw	r2,-20(fp)
 4009b28:	e0fff817 	ldw	r3,-32(fp)
 4009b2c:	1885883a 	add	r2,r3,r2
 4009b30:	e0bff815 	stw	r2,-32(fp)
            if (rx_total_cnt == nBufferSize)
 4009b34:	e0fffe0b 	ldhu	r3,-8(fp)
 4009b38:	e0bff817 	ldw	r2,-32(fp)
 4009b3c:	1880031e 	bne	r3,r2,4009b4c <_Z20UART_ReadWithTimeoutiPhtPtm+0xa8>
                bSuccess = TRUE;
 4009b40:	00800044 	movi	r2,1
 4009b44:	e0bff705 	stb	r2,-36(fp)
 4009b48:	003fe606 	br	4009ae4 <__reset+0xfb008ae4>
 4009b4c:	d0e02017 	ldw	r3,-32640(gp)
            else if ((alt_nticks() - time_start) > timeout)
 4009b50:	e0bffa17 	ldw	r2,-24(fp)
 4009b54:	1885c83a 	sub	r2,r3,r2
 4009b58:	e0c00217 	ldw	r3,8(fp)
 4009b5c:	1885803a 	cmpltu	r2,r3,r2
 4009b60:	10803fcc 	andi	r2,r2,255
 4009b64:	10000326 	beq	r2,zero,4009b74 <_Z20UART_ReadWithTimeoutiPhtPtm+0xd0>
                bTimeout = TRUE;    
 4009b68:	00800044 	movi	r2,1
 4009b6c:	e0bff905 	stb	r2,-28(fp)
 4009b70:	003fdc06 	br	4009ae4 <__reset+0xfb008ae4>
            else
                usleep(1);                
 4009b74:	01000044 	movi	r4,1
 4009b78:	40203d80 	call	40203d8 <usleep>
    if (UartHandle){
        int rx_total_cnt = 0, rx_cnt;
        alt_u32 time_start;
        bool bTimeout = FALSE;
        time_start = alt_nticks();
        while(!bSuccess && !bTimeout){
 4009b7c:	003fd906 	br	4009ae4 <__reset+0xfb008ae4>
            else if ((alt_nticks() - time_start) > timeout)
                bTimeout = TRUE;    
            else
                usleep(1);                
        }
        *prx_len = rx_total_cnt;                
 4009b80:	e0bff817 	ldw	r2,-32(fp)
 4009b84:	1007883a 	mov	r3,r2
 4009b88:	e0bfff17 	ldw	r2,-4(fp)
 4009b8c:	10c0000d 	sth	r3,0(r2)
    }            
    return bSuccess;      
 4009b90:	e0bff703 	ldbu	r2,-36(fp)
}
 4009b94:	e037883a 	mov	sp,fp
 4009b98:	dfc00117 	ldw	ra,4(sp)
 4009b9c:	df000017 	ldw	fp,0(sp)
 4009ba0:	dec00204 	addi	sp,sp,8
 4009ba4:	f800283a 	ret

04009ba8 <_Z21UART_NoneBlockingReadiPhiPi>:

bool UART_NoneBlockingRead(int UartHandle, alt_u8 *pBuffer, int nBufferSize, int *prx_len){
 4009ba8:	defff904 	addi	sp,sp,-28
 4009bac:	dfc00615 	stw	ra,24(sp)
 4009bb0:	df000515 	stw	fp,20(sp)
 4009bb4:	df000504 	addi	fp,sp,20
 4009bb8:	e13ffc15 	stw	r4,-16(fp)
 4009bbc:	e17ffd15 	stw	r5,-12(fp)
 4009bc0:	e1bffe15 	stw	r6,-8(fp)
 4009bc4:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess;
    fcntl(UartHandle, F_SETFL, O_ACCMODE | O_NONBLOCK);
 4009bc8:	019000c4 	movi	r6,16387
 4009bcc:	01400104 	movi	r5,4
 4009bd0:	e13ffc17 	ldw	r4,-16(fp)
 4009bd4:	401f6340 	call	401f634 <fcntl>
    bSuccess = UART_Read(UartHandle, (char *)pBuffer, nBufferSize, prx_len);
 4009bd8:	e1ffff17 	ldw	r7,-4(fp)
 4009bdc:	e1bffe17 	ldw	r6,-8(fp)
 4009be0:	e17ffd17 	ldw	r5,-12(fp)
 4009be4:	e13ffc17 	ldw	r4,-16(fp)
 4009be8:	4009a2c0 	call	4009a2c <_Z9UART_ReadiPciPi>
 4009bec:	e0bffb05 	stb	r2,-20(fp)
    fcntl(UartHandle, F_SETFL, O_ACCMODE);
 4009bf0:	018000c4 	movi	r6,3
 4009bf4:	01400104 	movi	r5,4
 4009bf8:	e13ffc17 	ldw	r4,-16(fp)
 4009bfc:	401f6340 	call	401f634 <fcntl>
    return bSuccess;
 4009c00:	e0bffb03 	ldbu	r2,-20(fp)
}
 4009c04:	e037883a 	mov	sp,fp
 4009c08:	dfc00117 	ldw	ra,4(sp)
 4009c0c:	df000017 	ldw	fp,0(sp)
 4009c10:	dec00204 	addi	sp,sp,8
 4009c14:	f800283a 	ret

04009c18 <_Z16UART_WriteStringiPc>:
    return size;
}*/

#endif //#ifdef SUPPORT_NON_BLOCKING_UART

bool UART_WriteString(int UartHandle, char *pString){
 4009c18:	defffc04 	addi	sp,sp,-16
 4009c1c:	dfc00315 	stw	ra,12(sp)
 4009c20:	df000215 	stw	fp,8(sp)
 4009c24:	df000204 	addi	fp,sp,8
 4009c28:	e13ffe15 	stw	r4,-8(fp)
 4009c2c:	e17fff15 	stw	r5,-4(fp)
    return UART_Write(UartHandle, pString, strlen(pString));
 4009c30:	e13fff17 	ldw	r4,-4(fp)
 4009c34:	401296c0 	call	401296c <strlen>
 4009c38:	100d883a 	mov	r6,r2
 4009c3c:	e17fff17 	ldw	r5,-4(fp)
 4009c40:	e13ffe17 	ldw	r4,-8(fp)
 4009c44:	40099bc0 	call	40099bc <_Z10UART_WriteiPci>
}
 4009c48:	e037883a 	mov	sp,fp
 4009c4c:	dfc00117 	ldw	ra,4(sp)
 4009c50:	df000017 	ldw	fp,0(sp)
 4009c54:	dec00204 	addi	sp,sp,8
 4009c58:	f800283a 	ret

04009c5c <_ZL14mtc2_QueryDataP9MTC2_INFO>:
#define TRUE 1


#define I2C_FT5316_ADDR    0x70

static void mtc2_QueryData(MTC2_INFO *p){
 4009c5c:	deffe804 	addi	sp,sp,-96
 4009c60:	dfc01715 	stw	ra,92(sp)
 4009c64:	df001615 	stw	fp,88(sp)
 4009c68:	df001604 	addi	fp,sp,88
 4009c6c:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;

    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
 4009c70:	e0bfff17 	ldw	r2,-4(fp)
 4009c74:	10800017 	ldw	r2,0(r2)
 4009c78:	1009883a 	mov	r4,r2
 4009c7c:	e0fff704 	addi	r3,fp,-36
 4009c80:	008007c4 	movi	r2,31
 4009c84:	d8800015 	stw	r2,0(sp)
 4009c88:	180f883a 	mov	r7,r3
 4009c8c:	000d883a 	mov	r6,zero
 4009c90:	01401c04 	movi	r5,112
 4009c94:	40090b40 	call	40090b4 <_Z11OC_I2C_ReadlhhPhi>
 4009c98:	10803fcc 	andi	r2,r2,255
 4009c9c:	10009f26 	beq	r2,zero,4009f1c <_ZL14mtc2_QueryDataP9MTC2_INFO+0x2c0>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
 4009ca0:	01000584 	movi	r4,22
 4009ca4:	4011be00 	call	4011be0 <malloc>
 4009ca8:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
 4009cac:	e0fff743 	ldbu	r3,-35(fp)
 4009cb0:	e0bfeb17 	ldw	r2,-84(fp)
 4009cb4:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
 4009cb8:	e0fff783 	ldbu	r3,-34(fp)
 4009cbc:	e0bfeb17 	ldw	r2,-84(fp)
 4009cc0:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
 4009cc4:	e0bff7c3 	ldbu	r2,-33(fp)
 4009cc8:	10803fcc 	andi	r2,r2,255
 4009ccc:	108003cc 	andi	r2,r2,15
 4009cd0:	1006923a 	slli	r3,r2,8
 4009cd4:	e0bff803 	ldbu	r2,-32(fp)
 4009cd8:	10803fcc 	andi	r2,r2,255
 4009cdc:	1884b03a 	or	r2,r3,r2
 4009ce0:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
 4009ce4:	e0bff843 	ldbu	r2,-31(fp)
 4009ce8:	10803fcc 	andi	r2,r2,255
 4009cec:	108003cc 	andi	r2,r2,15
 4009cf0:	1006923a 	slli	r3,r2,8
 4009cf4:	e0bff883 	ldbu	r2,-30(fp)
 4009cf8:	10803fcc 	andi	r2,r2,255
 4009cfc:	1884b03a 	or	r2,r3,r2
 4009d00:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
 4009d04:	e0bff943 	ldbu	r2,-27(fp)
 4009d08:	10803fcc 	andi	r2,r2,255
 4009d0c:	108003cc 	andi	r2,r2,15
 4009d10:	1006923a 	slli	r3,r2,8
 4009d14:	e0bff983 	ldbu	r2,-26(fp)
 4009d18:	10803fcc 	andi	r2,r2,255
 4009d1c:	1884b03a 	or	r2,r3,r2
 4009d20:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
 4009d24:	e0bff9c3 	ldbu	r2,-25(fp)
 4009d28:	10803fcc 	andi	r2,r2,255
 4009d2c:	108003cc 	andi	r2,r2,15
 4009d30:	1006923a 	slli	r3,r2,8
 4009d34:	e0bffa03 	ldbu	r2,-24(fp)
 4009d38:	10803fcc 	andi	r2,r2,255
 4009d3c:	1884b03a 	or	r2,r3,r2
 4009d40:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
 4009d44:	e0bffac3 	ldbu	r2,-21(fp)
 4009d48:	10803fcc 	andi	r2,r2,255
 4009d4c:	108003cc 	andi	r2,r2,15
 4009d50:	1006923a 	slli	r3,r2,8
 4009d54:	e0bffb03 	ldbu	r2,-20(fp)
 4009d58:	10803fcc 	andi	r2,r2,255
 4009d5c:	1884b03a 	or	r2,r3,r2
 4009d60:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
 4009d64:	e0bffb43 	ldbu	r2,-19(fp)
 4009d68:	10803fcc 	andi	r2,r2,255
 4009d6c:	108003cc 	andi	r2,r2,15
 4009d70:	1006923a 	slli	r3,r2,8
 4009d74:	e0bffb83 	ldbu	r2,-18(fp)
 4009d78:	10803fcc 	andi	r2,r2,255
 4009d7c:	1884b03a 	or	r2,r3,r2
 4009d80:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
 4009d84:	e0bffc43 	ldbu	r2,-15(fp)
 4009d88:	10803fcc 	andi	r2,r2,255
 4009d8c:	108003cc 	andi	r2,r2,15
 4009d90:	1006923a 	slli	r3,r2,8
 4009d94:	e0bffc83 	ldbu	r2,-14(fp)
 4009d98:	10803fcc 	andi	r2,r2,255
 4009d9c:	1884b03a 	or	r2,r3,r2
 4009da0:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
 4009da4:	e0bffcc3 	ldbu	r2,-13(fp)
 4009da8:	10803fcc 	andi	r2,r2,255
 4009dac:	108003cc 	andi	r2,r2,15
 4009db0:	1006923a 	slli	r3,r2,8
 4009db4:	e0bffd03 	ldbu	r2,-12(fp)
 4009db8:	10803fcc 	andi	r2,r2,255
 4009dbc:	1884b03a 	or	r2,r3,r2
 4009dc0:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
 4009dc4:	e0bffdc3 	ldbu	r2,-9(fp)
 4009dc8:	10803fcc 	andi	r2,r2,255
 4009dcc:	108003cc 	andi	r2,r2,15
 4009dd0:	1006923a 	slli	r3,r2,8
 4009dd4:	e0bffe03 	ldbu	r2,-8(fp)
 4009dd8:	10803fcc 	andi	r2,r2,255
 4009ddc:	1884b03a 	or	r2,r3,r2
 4009de0:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
 4009de4:	e0bffe43 	ldbu	r2,-7(fp)
 4009de8:	10803fcc 	andi	r2,r2,255
 4009dec:	108003cc 	andi	r2,r2,15
 4009df0:	1006923a 	slli	r3,r2,8
 4009df4:	e0bffe83 	ldbu	r2,-6(fp)
 4009df8:	10803fcc 	andi	r2,r2,255
 4009dfc:	1884b03a 	or	r2,r3,r2
 4009e00:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
 4009e04:	e0bfec17 	ldw	r2,-80(fp)
 4009e08:	1080c824 	muli	r2,r2,800
 4009e0c:	1004d2ba 	srli	r2,r2,10
 4009e10:	1007883a 	mov	r3,r2
 4009e14:	e0bfeb17 	ldw	r2,-84(fp)
 4009e18:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
 4009e1c:	e0bfed17 	ldw	r2,-76(fp)
 4009e20:	01400284 	movi	r5,10
 4009e24:	1009883a 	mov	r4,r2
 4009e28:	400dcac0 	call	400dcac <__udivsi3>
 4009e2c:	100490fa 	slli	r2,r2,3
 4009e30:	1007883a 	mov	r3,r2
 4009e34:	e0bfeb17 	ldw	r2,-84(fp)
 4009e38:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
 4009e3c:	e0bfee17 	ldw	r2,-72(fp)
 4009e40:	1080c824 	muli	r2,r2,800
 4009e44:	1004d2ba 	srli	r2,r2,10
 4009e48:	1007883a 	mov	r3,r2
 4009e4c:	e0bfeb17 	ldw	r2,-84(fp)
 4009e50:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
 4009e54:	e0bfef17 	ldw	r2,-68(fp)
 4009e58:	01400284 	movi	r5,10
 4009e5c:	1009883a 	mov	r4,r2
 4009e60:	400dcac0 	call	400dcac <__udivsi3>
 4009e64:	100490fa 	slli	r2,r2,3
 4009e68:	1007883a 	mov	r3,r2
 4009e6c:	e0bfeb17 	ldw	r2,-84(fp)
 4009e70:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
 4009e74:	e0bff017 	ldw	r2,-64(fp)
 4009e78:	1080c824 	muli	r2,r2,800
 4009e7c:	1004d2ba 	srli	r2,r2,10
 4009e80:	1007883a 	mov	r3,r2
 4009e84:	e0bfeb17 	ldw	r2,-84(fp)
 4009e88:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
 4009e8c:	e0bff117 	ldw	r2,-60(fp)
 4009e90:	01400284 	movi	r5,10
 4009e94:	1009883a 	mov	r4,r2
 4009e98:	400dcac0 	call	400dcac <__udivsi3>
 4009e9c:	100490fa 	slli	r2,r2,3
 4009ea0:	1007883a 	mov	r3,r2
 4009ea4:	e0bfeb17 	ldw	r2,-84(fp)
 4009ea8:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
 4009eac:	e0bff217 	ldw	r2,-56(fp)
 4009eb0:	1080c824 	muli	r2,r2,800
 4009eb4:	1004d2ba 	srli	r2,r2,10
 4009eb8:	1007883a 	mov	r3,r2
 4009ebc:	e0bfeb17 	ldw	r2,-84(fp)
 4009ec0:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
 4009ec4:	e0bff317 	ldw	r2,-52(fp)
 4009ec8:	01400284 	movi	r5,10
 4009ecc:	1009883a 	mov	r4,r2
 4009ed0:	400dcac0 	call	400dcac <__udivsi3>
 4009ed4:	100490fa 	slli	r2,r2,3
 4009ed8:	1007883a 	mov	r3,r2
 4009edc:	e0bfeb17 	ldw	r2,-84(fp)
 4009ee0:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
 4009ee4:	e0bff417 	ldw	r2,-48(fp)
 4009ee8:	1080c824 	muli	r2,r2,800
 4009eec:	1004d2ba 	srli	r2,r2,10
 4009ef0:	1007883a 	mov	r3,r2
 4009ef4:	e0bfeb17 	ldw	r2,-84(fp)
 4009ef8:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
 4009efc:	e0bff517 	ldw	r2,-44(fp)
 4009f00:	01400284 	movi	r5,10
 4009f04:	1009883a 	mov	r4,r2
 4009f08:	400dcac0 	call	400dcac <__udivsi3>
 4009f0c:	100490fa 	slli	r2,r2,3
 4009f10:	1007883a 	mov	r3,r2
 4009f14:	e0bfeb17 	ldw	r2,-84(fp)
 4009f18:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
 4009f1c:	e0bfeb17 	ldw	r2,-84(fp)
 4009f20:	10800043 	ldbu	r2,1(r2)
 4009f24:	10803fcc 	andi	r2,r2,255
 4009f28:	10001926 	beq	r2,zero,4009f90 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x334>
 4009f2c:	e0bfeb17 	ldw	r2,-84(fp)
 4009f30:	10800043 	ldbu	r2,1(r2)
 4009f34:	10803fcc 	andi	r2,r2,255
 4009f38:	108001a8 	cmpgeui	r2,r2,6
 4009f3c:	1000141e 	bne	r2,zero,4009f90 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x334>
    {
		if (QUEUE_IsFull(p->pQueue)){
 4009f40:	e0bfff17 	ldw	r2,-4(fp)
 4009f44:	10800417 	ldw	r2,16(r2)
 4009f48:	1009883a 	mov	r4,r2
 4009f4c:	400a4480 	call	400a448 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>
 4009f50:	10803fcc 	andi	r2,r2,255
 4009f54:	10000726 	beq	r2,zero,4009f74 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x318>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 4009f58:	e0bfff17 	ldw	r2,-4(fp)
 4009f5c:	10800417 	ldw	r2,16(r2)
 4009f60:	1009883a 	mov	r4,r2
 4009f64:	400a5440 	call	400a544 <_Z9QUEUE_PopP12QUEUE_STRUCT>
 4009f68:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
 4009f6c:	e13ff617 	ldw	r4,-40(fp)
 4009f70:	4011bf40 	call	4011bf4 <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
 4009f74:	e0bfff17 	ldw	r2,-4(fp)
 4009f78:	10800417 	ldw	r2,16(r2)
 4009f7c:	e0ffeb17 	ldw	r3,-84(fp)
 4009f80:	180b883a 	mov	r5,r3
 4009f84:	1009883a 	mov	r4,r2
 4009f88:	400a4ac0 	call	400a4ac <_Z10QUEUE_PushP12QUEUE_STRUCTm>
 4009f8c:	00000206 	br	4009f98 <_ZL14mtc2_QueryDataP9MTC2_INFO+0x33c>
    }
    else
    	free(pEvent);
 4009f90:	e13feb17 	ldw	r4,-84(fp)
 4009f94:	4011bf40 	call	4011bf4 <free>
}
 4009f98:	0001883a 	nop
 4009f9c:	e037883a 	mov	sp,fp
 4009fa0:	dfc00117 	ldw	ra,4(sp)
 4009fa4:	df000017 	ldw	fp,0(sp)
 4009fa8:	dec00204 	addi	sp,sp,8
 4009fac:	f800283a 	ret

04009fb0 <_ZL8mtc2_ISRPv>:


static void mtc2_ISR(void* context){
 4009fb0:	defffc04 	addi	sp,sp,-16
 4009fb4:	dfc00315 	stw	ra,12(sp)
 4009fb8:	df000215 	stw	fp,8(sp)
 4009fbc:	df000204 	addi	fp,sp,8
 4009fc0:	e13fff15 	stw	r4,-4(fp)


   MTC2_INFO *p = (MTC2_INFO *)context;
 4009fc4:	e0bfff17 	ldw	r2,-4(fp)
 4009fc8:	e0bffe15 	stw	r2,-8(fp)

   alt_ic_irq_disable(p->TOUCH_INT_CONTROLLER_ID,p->INT_IRQ_NUM);
 4009fcc:	e0bffe17 	ldw	r2,-8(fp)
 4009fd0:	10c00317 	ldw	r3,12(r2)
 4009fd4:	e0bffe17 	ldw	r2,-8(fp)
 4009fd8:	10800217 	ldw	r2,8(r2)
 4009fdc:	100b883a 	mov	r5,r2
 4009fe0:	1809883a 	mov	r4,r3
 4009fe4:	401f9180 	call	401f918 <alt_ic_irq_disable>
   mtc2_QueryData(p);
 4009fe8:	e13ffe17 	ldw	r4,-8(fp)
 4009fec:	4009c5c0 	call	4009c5c <_ZL14mtc2_QueryDataP9MTC2_INFO>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
 4009ff0:	e0bffe17 	ldw	r2,-8(fp)
 4009ff4:	10800117 	ldw	r2,4(r2)
 4009ff8:	10800304 	addi	r2,r2,12
 4009ffc:	0007883a 	mov	r3,zero
 400a000:	10c00035 	stwio	r3,0(r2)

    alt_ic_irq_enable(p->TOUCH_INT_CONTROLLER_ID,p->INT_IRQ_NUM);
 400a004:	e0bffe17 	ldw	r2,-8(fp)
 400a008:	10c00317 	ldw	r3,12(r2)
 400a00c:	e0bffe17 	ldw	r2,-8(fp)
 400a010:	10800217 	ldw	r2,8(r2)
 400a014:	100b883a 	mov	r5,r2
 400a018:	1809883a 	mov	r4,r3
 400a01c:	401f8900 	call	401f890 <alt_ic_irq_enable>
 }
 400a020:	0001883a 	nop
 400a024:	e037883a 	mov	sp,fp
 400a028:	dfc00117 	ldw	ra,4(sp)
 400a02c:	df000017 	ldw	fp,0(sp)
 400a030:	dec00204 	addi	sp,sp,8
 400a034:	f800283a 	ret

0400a038 <_Z9MTC2_Initmmmm>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM, alt_u32 TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID)
{
 400a038:	defff804 	addi	sp,sp,-32
 400a03c:	dfc00715 	stw	ra,28(sp)
 400a040:	df000615 	stw	fp,24(sp)
 400a044:	df000604 	addi	fp,sp,24
 400a048:	e13ffc15 	stw	r4,-16(fp)
 400a04c:	e17ffd15 	stw	r5,-12(fp)
 400a050:	e1bffe15 	stw	r6,-8(fp)
 400a054:	e1ffff15 	stw	r7,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
 400a058:	01000504 	movi	r4,20
 400a05c:	4011be00 	call	4011be0 <malloc>
 400a060:	e0bffb15 	stw	r2,-20(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
 400a064:	e0bffb17 	ldw	r2,-20(fp)
 400a068:	e0fffc17 	ldw	r3,-16(fp)
 400a06c:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
 400a070:	e0bffb17 	ldw	r2,-20(fp)
 400a074:	e0fffd17 	ldw	r3,-12(fp)
 400a078:	10c00115 	stw	r3,4(r2)
    p->TOUCH_INT_CONTROLLER_ID=TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID;
 400a07c:	e0bffb17 	ldw	r2,-20(fp)
 400a080:	e0ffff17 	ldw	r3,-4(fp)
 400a084:	10c00315 	stw	r3,12(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
 400a088:	e0bffb17 	ldw	r2,-20(fp)
 400a08c:	e0fffe17 	ldw	r3,-8(fp)
 400a090:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
 400a094:	01000804 	movi	r4,32
 400a098:	400a3640 	call	400a364 <_Z9QUEUE_Newi>
 400a09c:	1007883a 	mov	r3,r2
 400a0a0:	e0bffb17 	ldw	r2,-20(fp)
 400a0a4:	10c00415 	stw	r3,16(r2)


    // init i2c for i2c_opencore
    oc_i2c_init_ex(TOUCH_I2C_BASE,  50*1000*1000 /* 50MHz */, 400*1000 /* 400K */);
 400a0a8:	e0bffc17 	ldw	r2,-16(fp)
 400a0ac:	018001b4 	movhi	r6,6
 400a0b0:	3186a004 	addi	r6,r6,6784
 400a0b4:	0140bef4 	movhi	r5,763
 400a0b8:	297c2004 	addi	r5,r5,-3968
 400a0bc:	1009883a 	mov	r4,r2
 400a0c0:	4008b240 	call	4008b24 <_Z14oc_i2c_init_exlll>


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
 400a0c4:	e0bffb17 	ldw	r2,-20(fp)
 400a0c8:	10800117 	ldw	r2,4(r2)
 400a0cc:	10800204 	addi	r2,r2,8
 400a0d0:	0007883a 	mov	r3,zero
 400a0d4:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 400a0d8:	e0bffb17 	ldw	r2,-20(fp)
 400a0dc:	10800117 	ldw	r2,4(r2)
 400a0e0:	10800304 	addi	r2,r2,12
 400a0e4:	0007883a 	mov	r3,zero
 400a0e8:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
  if ((alt_ic_isr_register(p->TOUCH_INT_CONTROLLER_ID,
 400a0ec:	e0bffb17 	ldw	r2,-20(fp)
 400a0f0:	10c00317 	ldw	r3,12(r2)
 400a0f4:	e0bffb17 	ldw	r2,-20(fp)
 400a0f8:	10800217 	ldw	r2,8(r2)
 400a0fc:	d8000015 	stw	zero,0(sp)
 400a100:	e1fffb17 	ldw	r7,-20(fp)
 400a104:	01810074 	movhi	r6,1025
 400a108:	31a7ec04 	addi	r6,r6,-24656
 400a10c:	100b883a 	mov	r5,r2
 400a110:	1809883a 	mov	r4,r3
 400a114:	401f8400 	call	401f840 <alt_ic_isr_register>
 400a118:	1004c03a 	cmpne	r2,r2,zero
 400a11c:	10803fcc 	andi	r2,r2,255
 400a120:	10000426 	beq	r2,zero,400a134 <_Z9MTC2_Initmmmm+0xfc>
		                   mtc2_ISR,
		                   (void *)p,
		                   NULL
		                   ) != 0)){

	  printf(("[TOUCH]register IRQ fail\n"));
 400a124:	01010234 	movhi	r4,1032
 400a128:	2106b804 	addi	r4,r4,6880
 400a12c:	40127b00 	call	40127b0 <puts>
 400a130:	00000306 	br	400a140 <_Z9MTC2_Initmmmm+0x108>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
 400a134:	01010234 	movhi	r4,1032
 400a138:	2106bf04 	addi	r4,r4,6908
 400a13c:	40127b00 	call	40127b0 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
 400a140:	e0bffb17 	ldw	r2,-20(fp)
 400a144:	10800117 	ldw	r2,4(r2)
 400a148:	10800204 	addi	r2,r2,8
 400a14c:	1007883a 	mov	r3,r2
 400a150:	00800044 	movi	r2,1
 400a154:	18800035 	stwio	r2,0(r3)
    return p;
 400a158:	e0bffb17 	ldw	r2,-20(fp)
}
 400a15c:	e037883a 	mov	sp,fp
 400a160:	dfc00117 	ldw	ra,4(sp)
 400a164:	df000017 	ldw	fp,0(sp)
 400a168:	dec00204 	addi	sp,sp,8
 400a16c:	f800283a 	ret

0400a170 <_Z11MTC2_UnInitP9MTC2_INFO>:

void MTC2_UnInit(MTC2_INFO *p){
 400a170:	defffd04 	addi	sp,sp,-12
 400a174:	dfc00215 	stw	ra,8(sp)
 400a178:	df000115 	stw	fp,4(sp)
 400a17c:	df000104 	addi	fp,sp,4
 400a180:	e13fff15 	stw	r4,-4(fp)
    if (p){
 400a184:	e0bfff17 	ldw	r2,-4(fp)
 400a188:	10000626 	beq	r2,zero,400a1a4 <_Z11MTC2_UnInitP9MTC2_INFO+0x34>
        QUEUE_Delete(p->pQueue);
 400a18c:	e0bfff17 	ldw	r2,-4(fp)
 400a190:	10800417 	ldw	r2,16(r2)
 400a194:	1009883a 	mov	r4,r2
 400a198:	400a3d40 	call	400a3d4 <_Z12QUEUE_DeleteP12QUEUE_STRUCT>
        free(p);
 400a19c:	e13fff17 	ldw	r4,-4(fp)
 400a1a0:	4011bf40 	call	4011bf4 <free>
    }
}
 400a1a4:	0001883a 	nop
 400a1a8:	e037883a 	mov	sp,fp
 400a1ac:	dfc00117 	ldw	ra,4(sp)
 400a1b0:	df000017 	ldw	fp,0(sp)
 400a1b4:	dec00204 	addi	sp,sp,8
 400a1b8:	f800283a 	ret

0400a1bc <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
 400a1bc:	defff804 	addi	sp,sp,-32
 400a1c0:	dfc00715 	stw	ra,28(sp)
 400a1c4:	df000615 	stw	fp,24(sp)
 400a1c8:	df000604 	addi	fp,sp,24
 400a1cc:	e13ffc15 	stw	r4,-16(fp)
 400a1d0:	e17ffd15 	stw	r5,-12(fp)
 400a1d4:	e1bffe15 	stw	r6,-8(fp)
 400a1d8:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
 400a1dc:	e0bffc17 	ldw	r2,-16(fp)
 400a1e0:	10800417 	ldw	r2,16(r2)
 400a1e4:	1009883a 	mov	r4,r2
 400a1e8:	400a4080 	call	400a408 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>
 400a1ec:	10803fcc 	andi	r2,r2,255
 400a1f0:	10000226 	beq	r2,zero,400a1fc <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x40>
 400a1f4:	0005883a 	mov	r2,zero
 400a1f8:	00000106 	br	400a200 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x44>
 400a1fc:	00800044 	movi	r2,1
 400a200:	e0bffa05 	stb	r2,-24(fp)
    if (bFind){
 400a204:	e0bffa03 	ldbu	r2,-24(fp)
 400a208:	10004126 	beq	r2,zero,400a310 <_Z14MTC2_GetStatusP9MTC2_INFOPhS1_PiS2_S2_S2_S2_S2_S2_S2_S2_S2_+0x154>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 400a20c:	e0bffc17 	ldw	r2,-16(fp)
 400a210:	10800417 	ldw	r2,16(r2)
 400a214:	1009883a 	mov	r4,r2
 400a218:	400a5440 	call	400a544 <_Z9QUEUE_PopP12QUEUE_STRUCT>
 400a21c:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
 400a220:	e0bffb17 	ldw	r2,-20(fp)
 400a224:	10c00003 	ldbu	r3,0(r2)
 400a228:	e0bffd17 	ldw	r2,-12(fp)
 400a22c:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
 400a230:	e0bffb17 	ldw	r2,-20(fp)
 400a234:	10c00043 	ldbu	r3,1(r2)
 400a238:	e0bffe17 	ldw	r2,-8(fp)
 400a23c:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
 400a240:	e0bffb17 	ldw	r2,-20(fp)
 400a244:	1080008b 	ldhu	r2,2(r2)
 400a248:	10ffffcc 	andi	r3,r2,65535
 400a24c:	e0bfff17 	ldw	r2,-4(fp)
 400a250:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
 400a254:	e0bffb17 	ldw	r2,-20(fp)
 400a258:	1080010b 	ldhu	r2,4(r2)
 400a25c:	10ffffcc 	andi	r3,r2,65535
 400a260:	e0800217 	ldw	r2,8(fp)
 400a264:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
 400a268:	e0bffb17 	ldw	r2,-20(fp)
 400a26c:	1080018b 	ldhu	r2,6(r2)
 400a270:	10ffffcc 	andi	r3,r2,65535
 400a274:	e0800317 	ldw	r2,12(fp)
 400a278:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
 400a27c:	e0bffb17 	ldw	r2,-20(fp)
 400a280:	1080020b 	ldhu	r2,8(r2)
 400a284:	10ffffcc 	andi	r3,r2,65535
 400a288:	e0800417 	ldw	r2,16(fp)
 400a28c:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
 400a290:	e0bffb17 	ldw	r2,-20(fp)
 400a294:	1080028b 	ldhu	r2,10(r2)
 400a298:	10ffffcc 	andi	r3,r2,65535
 400a29c:	e0800517 	ldw	r2,20(fp)
 400a2a0:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
 400a2a4:	e0bffb17 	ldw	r2,-20(fp)
 400a2a8:	1080030b 	ldhu	r2,12(r2)
 400a2ac:	10ffffcc 	andi	r3,r2,65535
 400a2b0:	e0800617 	ldw	r2,24(fp)
 400a2b4:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
 400a2b8:	e0bffb17 	ldw	r2,-20(fp)
 400a2bc:	1080038b 	ldhu	r2,14(r2)
 400a2c0:	10ffffcc 	andi	r3,r2,65535
 400a2c4:	e0800717 	ldw	r2,28(fp)
 400a2c8:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
 400a2cc:	e0bffb17 	ldw	r2,-20(fp)
 400a2d0:	1080040b 	ldhu	r2,16(r2)
 400a2d4:	10ffffcc 	andi	r3,r2,65535
 400a2d8:	e0800817 	ldw	r2,32(fp)
 400a2dc:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
 400a2e0:	e0bffb17 	ldw	r2,-20(fp)
 400a2e4:	1080048b 	ldhu	r2,18(r2)
 400a2e8:	10ffffcc 	andi	r3,r2,65535
 400a2ec:	e0800917 	ldw	r2,36(fp)
 400a2f0:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
 400a2f4:	e0bffb17 	ldw	r2,-20(fp)
 400a2f8:	1080050b 	ldhu	r2,20(r2)
 400a2fc:	10ffffcc 	andi	r3,r2,65535
 400a300:	e0800a17 	ldw	r2,40(fp)
 400a304:	10c00015 	stw	r3,0(r2)
        free(pEvent);
 400a308:	e13ffb17 	ldw	r4,-20(fp)
 400a30c:	4011bf40 	call	4011bf4 <free>
    }
    return bFind;
 400a310:	e0bffa03 	ldbu	r2,-24(fp)
}
 400a314:	e037883a 	mov	sp,fp
 400a318:	dfc00117 	ldw	ra,4(sp)
 400a31c:	df000017 	ldw	fp,0(sp)
 400a320:	dec00204 	addi	sp,sp,8
 400a324:	f800283a 	ret

0400a328 <_Z15MTC2_ClearEventP9MTC2_INFO>:


void MTC2_ClearEvent(MTC2_INFO *p){
 400a328:	defffd04 	addi	sp,sp,-12
 400a32c:	dfc00215 	stw	ra,8(sp)
 400a330:	df000115 	stw	fp,4(sp)
 400a334:	df000104 	addi	fp,sp,4
 400a338:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
 400a33c:	e0bfff17 	ldw	r2,-4(fp)
 400a340:	10800417 	ldw	r2,16(r2)
 400a344:	1009883a 	mov	r4,r2
 400a348:	400a5d80 	call	400a5d8 <_Z11QUEUE_EmptyP12QUEUE_STRUCT>
}
 400a34c:	0001883a 	nop
 400a350:	e037883a 	mov	sp,fp
 400a354:	dfc00117 	ldw	ra,4(sp)
 400a358:	df000017 	ldw	fp,0(sp)
 400a35c:	dec00204 	addi	sp,sp,8
 400a360:	f800283a 	ret

0400a364 <_Z9QUEUE_Newi>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 400a364:	defffb04 	addi	sp,sp,-20
 400a368:	dfc00415 	stw	ra,16(sp)
 400a36c:	df000315 	stw	fp,12(sp)
 400a370:	df000304 	addi	fp,sp,12
 400a374:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 400a378:	e0bfff17 	ldw	r2,-4(fp)
 400a37c:	1085883a 	add	r2,r2,r2
 400a380:	1085883a 	add	r2,r2,r2
 400a384:	10800504 	addi	r2,r2,20
 400a388:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 400a38c:	e0bffd17 	ldw	r2,-12(fp)
 400a390:	1009883a 	mov	r4,r2
 400a394:	4011be00 	call	4011be0 <malloc>
 400a398:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 400a39c:	e0bffd17 	ldw	r2,-12(fp)
 400a3a0:	100d883a 	mov	r6,r2
 400a3a4:	000b883a 	mov	r5,zero
 400a3a8:	e13ffe17 	ldw	r4,-8(fp)
 400a3ac:	401255c0 	call	401255c <memset>
    pQueue->num = nQueueNum;
 400a3b0:	e0ffff17 	ldw	r3,-4(fp)
 400a3b4:	e0bffe17 	ldw	r2,-8(fp)
 400a3b8:	10c00015 	stw	r3,0(r2)
    return pQueue;
 400a3bc:	e0bffe17 	ldw	r2,-8(fp)
}
 400a3c0:	e037883a 	mov	sp,fp
 400a3c4:	dfc00117 	ldw	ra,4(sp)
 400a3c8:	df000017 	ldw	fp,0(sp)
 400a3cc:	dec00204 	addi	sp,sp,8
 400a3d0:	f800283a 	ret

0400a3d4 <_Z12QUEUE_DeleteP12QUEUE_STRUCT>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 400a3d4:	defffd04 	addi	sp,sp,-12
 400a3d8:	dfc00215 	stw	ra,8(sp)
 400a3dc:	df000115 	stw	fp,4(sp)
 400a3e0:	df000104 	addi	fp,sp,4
 400a3e4:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 400a3e8:	e13fff17 	ldw	r4,-4(fp)
 400a3ec:	4011bf40 	call	4011bf4 <free>
}
 400a3f0:	0001883a 	nop
 400a3f4:	e037883a 	mov	sp,fp
 400a3f8:	dfc00117 	ldw	ra,4(sp)
 400a3fc:	df000017 	ldw	fp,0(sp)
 400a400:	dec00204 	addi	sp,sp,8
 400a404:	f800283a 	ret

0400a408 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 400a408:	defffe04 	addi	sp,sp,-8
 400a40c:	df000115 	stw	fp,4(sp)
 400a410:	df000104 	addi	fp,sp,4
 400a414:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 400a418:	e0bfff17 	ldw	r2,-4(fp)
 400a41c:	10c00117 	ldw	r3,4(r2)
 400a420:	e0bfff17 	ldw	r2,-4(fp)
 400a424:	10800217 	ldw	r2,8(r2)
 400a428:	1880021e 	bne	r3,r2,400a434 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT+0x2c>
        return TRUE;
 400a42c:	00800044 	movi	r2,1
 400a430:	00000106 	br	400a438 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT+0x30>
    return FALSE;
 400a434:	0005883a 	mov	r2,zero
}
 400a438:	e037883a 	mov	sp,fp
 400a43c:	df000017 	ldw	fp,0(sp)
 400a440:	dec00104 	addi	sp,sp,4
 400a444:	f800283a 	ret

0400a448 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 400a448:	defffd04 	addi	sp,sp,-12
 400a44c:	dfc00215 	stw	ra,8(sp)
 400a450:	df000115 	stw	fp,4(sp)
 400a454:	df000104 	addi	fp,sp,4
 400a458:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 400a45c:	e0bfff17 	ldw	r2,-4(fp)
 400a460:	10800117 	ldw	r2,4(r2)
 400a464:	10c00044 	addi	r3,r2,1
 400a468:	e0bfff17 	ldw	r2,-4(fp)
 400a46c:	10800017 	ldw	r2,0(r2)
 400a470:	100b883a 	mov	r5,r2
 400a474:	1809883a 	mov	r4,r3
 400a478:	400dd100 	call	400dd10 <__umodsi3>
 400a47c:	1007883a 	mov	r3,r2
 400a480:	e0bfff17 	ldw	r2,-4(fp)
 400a484:	10800217 	ldw	r2,8(r2)
 400a488:	1880021e 	bne	r3,r2,400a494 <_Z12QUEUE_IsFullP12QUEUE_STRUCT+0x4c>
        return TRUE;
 400a48c:	00800044 	movi	r2,1
 400a490:	00000106 	br	400a498 <_Z12QUEUE_IsFullP12QUEUE_STRUCT+0x50>
    return FALSE;
 400a494:	0005883a 	mov	r2,zero
}
 400a498:	e037883a 	mov	sp,fp
 400a49c:	dfc00117 	ldw	ra,4(sp)
 400a4a0:	df000017 	ldw	fp,0(sp)
 400a4a4:	dec00204 	addi	sp,sp,8
 400a4a8:	f800283a 	ret

0400a4ac <_Z10QUEUE_PushP12QUEUE_STRUCTm>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 400a4ac:	defffc04 	addi	sp,sp,-16
 400a4b0:	dfc00315 	stw	ra,12(sp)
 400a4b4:	df000215 	stw	fp,8(sp)
 400a4b8:	df000204 	addi	fp,sp,8
 400a4bc:	e13ffe15 	stw	r4,-8(fp)
 400a4c0:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 400a4c4:	e13ffe17 	ldw	r4,-8(fp)
 400a4c8:	400a4480 	call	400a448 <_Z12QUEUE_IsFullP12QUEUE_STRUCT>
 400a4cc:	10803fcc 	andi	r2,r2,255
 400a4d0:	10000226 	beq	r2,zero,400a4dc <_Z10QUEUE_PushP12QUEUE_STRUCTm+0x30>
        return FALSE;
 400a4d4:	0005883a 	mov	r2,zero
 400a4d8:	00001506 	br	400a530 <_Z10QUEUE_PushP12QUEUE_STRUCTm+0x84>
    pQueue->data[pQueue->front] = data32;
 400a4dc:	e0bffe17 	ldw	r2,-8(fp)
 400a4e0:	10800117 	ldw	r2,4(r2)
 400a4e4:	e0fffe17 	ldw	r3,-8(fp)
 400a4e8:	108000c4 	addi	r2,r2,3
 400a4ec:	1085883a 	add	r2,r2,r2
 400a4f0:	1085883a 	add	r2,r2,r2
 400a4f4:	1885883a 	add	r2,r3,r2
 400a4f8:	e0ffff17 	ldw	r3,-4(fp)
 400a4fc:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 400a500:	e0bffe17 	ldw	r2,-8(fp)
 400a504:	10800117 	ldw	r2,4(r2)
 400a508:	10c00044 	addi	r3,r2,1
 400a50c:	e0bffe17 	ldw	r2,-8(fp)
 400a510:	10800017 	ldw	r2,0(r2)
 400a514:	100b883a 	mov	r5,r2
 400a518:	1809883a 	mov	r4,r3
 400a51c:	400dd100 	call	400dd10 <__umodsi3>
 400a520:	1007883a 	mov	r3,r2
 400a524:	e0bffe17 	ldw	r2,-8(fp)
 400a528:	10c00115 	stw	r3,4(r2)
    return TRUE;
 400a52c:	00800044 	movi	r2,1
}
 400a530:	e037883a 	mov	sp,fp
 400a534:	dfc00117 	ldw	ra,4(sp)
 400a538:	df000017 	ldw	fp,0(sp)
 400a53c:	dec00204 	addi	sp,sp,8
 400a540:	f800283a 	ret

0400a544 <_Z9QUEUE_PopP12QUEUE_STRUCT>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 400a544:	defffc04 	addi	sp,sp,-16
 400a548:	dfc00315 	stw	ra,12(sp)
 400a54c:	df000215 	stw	fp,8(sp)
 400a550:	df000204 	addi	fp,sp,8
 400a554:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 400a558:	e13fff17 	ldw	r4,-4(fp)
 400a55c:	400a4080 	call	400a408 <_Z13QUEUE_IsEmptyP12QUEUE_STRUCT>
 400a560:	10803fcc 	andi	r2,r2,255
 400a564:	10000226 	beq	r2,zero,400a570 <_Z9QUEUE_PopP12QUEUE_STRUCT+0x2c>
        return 0;
 400a568:	0005883a 	mov	r2,zero
 400a56c:	00001506 	br	400a5c4 <_Z9QUEUE_PopP12QUEUE_STRUCT+0x80>
    data32 = pQueue->data[pQueue->rear];
 400a570:	e0bfff17 	ldw	r2,-4(fp)
 400a574:	10800217 	ldw	r2,8(r2)
 400a578:	e0ffff17 	ldw	r3,-4(fp)
 400a57c:	108000c4 	addi	r2,r2,3
 400a580:	1085883a 	add	r2,r2,r2
 400a584:	1085883a 	add	r2,r2,r2
 400a588:	1885883a 	add	r2,r3,r2
 400a58c:	10800017 	ldw	r2,0(r2)
 400a590:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 400a594:	e0bfff17 	ldw	r2,-4(fp)
 400a598:	10800217 	ldw	r2,8(r2)
 400a59c:	10c00044 	addi	r3,r2,1
 400a5a0:	e0bfff17 	ldw	r2,-4(fp)
 400a5a4:	10800017 	ldw	r2,0(r2)
 400a5a8:	100b883a 	mov	r5,r2
 400a5ac:	1809883a 	mov	r4,r3
 400a5b0:	400dd100 	call	400dd10 <__umodsi3>
 400a5b4:	1007883a 	mov	r3,r2
 400a5b8:	e0bfff17 	ldw	r2,-4(fp)
 400a5bc:	10c00215 	stw	r3,8(r2)
    return data32;
 400a5c0:	e0bffe17 	ldw	r2,-8(fp)
}
 400a5c4:	e037883a 	mov	sp,fp
 400a5c8:	dfc00117 	ldw	ra,4(sp)
 400a5cc:	df000017 	ldw	fp,0(sp)
 400a5d0:	dec00204 	addi	sp,sp,8
 400a5d4:	f800283a 	ret

0400a5d8 <_Z11QUEUE_EmptyP12QUEUE_STRUCT>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 400a5d8:	defffe04 	addi	sp,sp,-8
 400a5dc:	df000115 	stw	fp,4(sp)
 400a5e0:	df000104 	addi	fp,sp,4
 400a5e4:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 400a5e8:	e0bfff17 	ldw	r2,-4(fp)
 400a5ec:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 400a5f0:	e0bfff17 	ldw	r2,-4(fp)
 400a5f4:	10000215 	stw	zero,8(r2)
}
 400a5f8:	0001883a 	nop
 400a5fc:	e037883a 	mov	sp,fp
 400a600:	df000017 	ldw	fp,0(sp)
 400a604:	dec00104 	addi	sp,sp,4
 400a608:	f800283a 	ret

0400a60c <_Z10VIPFR_InitmPvS_mm>:
void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex);
void FrameReader_Go(alt_u32 VipBase, bool bGO);



VIP_FRAME_READER* VIPFR_Init(alt_u32 VipBase, void* Frame0_Base, void* Frame1_Base, alt_u32 Frame_Width, alt_u32 Frame_Height){
 400a60c:	defff904 	addi	sp,sp,-28
 400a610:	dfc00615 	stw	ra,24(sp)
 400a614:	df000515 	stw	fp,20(sp)
 400a618:	df000504 	addi	fp,sp,20
 400a61c:	e13ffc15 	stw	r4,-16(fp)
 400a620:	e17ffd15 	stw	r5,-12(fp)
 400a624:	e1bffe15 	stw	r6,-8(fp)
 400a628:	e1ffff15 	stw	r7,-4(fp)

    VIP_FRAME_READER *p;
    
    p = (VIP_FRAME_READER *)malloc(sizeof(VIP_FRAME_READER));
 400a62c:	01000904 	movi	r4,36
 400a630:	4011be00 	call	4011be0 <malloc>
 400a634:	e0bffb15 	stw	r2,-20(fp)
    p->VipBase = VipBase;
 400a638:	e0bffb17 	ldw	r2,-20(fp)
 400a63c:	e0fffc17 	ldw	r3,-16(fp)
 400a640:	10c00015 	stw	r3,0(r2)
    p->Frame0_Base = Frame0_Base;
 400a644:	e0bffb17 	ldw	r2,-20(fp)
 400a648:	e0fffd17 	ldw	r3,-12(fp)
 400a64c:	10c00115 	stw	r3,4(r2)
    p->Frame1_Base = Frame1_Base;
 400a650:	e0bffb17 	ldw	r2,-20(fp)
 400a654:	e0fffe17 	ldw	r3,-8(fp)
 400a658:	10c00215 	stw	r3,8(r2)
    p->DisplayFrame = 0;
 400a65c:	e0bffb17 	ldw	r2,-20(fp)
 400a660:	10000305 	stb	zero,12(r2)
     
    p->bytes_per_pixel = 4;
 400a664:	e0bffb17 	ldw	r2,-20(fp)
 400a668:	00c00104 	movi	r3,4
 400a66c:	10c00715 	stw	r3,28(r2)
    p->color_depth = 32;
 400a670:	e0bffb17 	ldw	r2,-20(fp)
 400a674:	00c00804 	movi	r3,32
 400a678:	10c00415 	stw	r3,16(r2)
    p->interlace = 0;
 400a67c:	e0bffb17 	ldw	r2,-20(fp)
 400a680:	10000815 	stw	zero,32(r2)
    
    FrameReader_Go(VipBase, FALSE); // stop for config
 400a684:	000b883a 	mov	r5,zero
 400a688:	e13ffc17 	ldw	r4,-16(fp)
 400a68c:	400ab540 	call	400ab54 <_Z14FrameReader_Gomb>
    
    VIPFR_SetFrameSize(p, Frame_Width, Frame_Height);
 400a690:	e0bfff17 	ldw	r2,-4(fp)
 400a694:	e0c00217 	ldw	r3,8(fp)
 400a698:	180d883a 	mov	r6,r3
 400a69c:	100b883a 	mov	r5,r2
 400a6a0:	e13ffb17 	ldw	r4,-20(fp)
 400a6a4:	400a7200 	call	400a720 <_Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii>
    
    FrameReader_SelectFrame(VipBase, p->DisplayFrame);
 400a6a8:	e0bffb17 	ldw	r2,-20(fp)
 400a6ac:	10800303 	ldbu	r2,12(r2)
 400a6b0:	10803fcc 	andi	r2,r2,255
 400a6b4:	100b883a 	mov	r5,r2
 400a6b8:	e13ffc17 	ldw	r4,-16(fp)
 400a6bc:	400ab140 	call	400ab14 <_Z23FrameReader_SelectFramemh>
    //
    FrameReader_Go(VipBase, TRUE); // go
 400a6c0:	01400044 	movi	r5,1
 400a6c4:	e13ffc17 	ldw	r4,-16(fp)
 400a6c8:	400ab540 	call	400ab54 <_Z14FrameReader_Gomb>
    
    return p;
 400a6cc:	e0bffb17 	ldw	r2,-20(fp)
}
 400a6d0:	e037883a 	mov	sp,fp
 400a6d4:	dfc00117 	ldw	ra,4(sp)
 400a6d8:	df000017 	ldw	fp,0(sp)
 400a6dc:	dec00204 	addi	sp,sp,8
 400a6e0:	f800283a 	ret

0400a6e4 <_Z12VIPFR_UnInitP16VIP_FRAME_READER>:

void VIPFR_UnInit(VIP_FRAME_READER* p){
 400a6e4:	defffd04 	addi	sp,sp,-12
 400a6e8:	dfc00215 	stw	ra,8(sp)
 400a6ec:	df000115 	stw	fp,4(sp)
 400a6f0:	df000104 	addi	fp,sp,4
 400a6f4:	e13fff15 	stw	r4,-4(fp)
    if (p)
 400a6f8:	e0bfff17 	ldw	r2,-4(fp)
 400a6fc:	10000226 	beq	r2,zero,400a708 <_Z12VIPFR_UnInitP16VIP_FRAME_READER+0x24>
        free(p);
 400a700:	e13fff17 	ldw	r4,-4(fp)
 400a704:	4011bf40 	call	4011bf4 <free>
}
 400a708:	0001883a 	nop
 400a70c:	e037883a 	mov	sp,fp
 400a710:	dfc00117 	ldw	ra,4(sp)
 400a714:	df000017 	ldw	fp,0(sp)
 400a718:	dec00204 	addi	sp,sp,8
 400a71c:	f800283a 	ret

0400a720 <_Z18VIPFR_SetFrameSizeP16VIP_FRAME_READERii>:

void VIPFR_SetFrameSize(VIP_FRAME_READER* p, int width, int height){
 400a720:	defff604 	addi	sp,sp,-40
 400a724:	dfc00915 	stw	ra,36(sp)
 400a728:	df000815 	stw	fp,32(sp)
 400a72c:	df000804 	addi	fp,sp,32
 400a730:	e13ffd15 	stw	r4,-12(fp)
 400a734:	e17ffe15 	stw	r5,-8(fp)
 400a738:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 words, cycle;
    words = width*height;
 400a73c:	e0fffe17 	ldw	r3,-8(fp)
 400a740:	e0bfff17 	ldw	r2,-4(fp)
 400a744:	1885383a 	mul	r2,r3,r2
 400a748:	e0bffb15 	stw	r2,-20(fp)
    cycle = width*height;
 400a74c:	e0fffe17 	ldw	r3,-8(fp)
 400a750:	e0bfff17 	ldw	r2,-4(fp)
 400a754:	1885383a 	mul	r2,r3,r2
 400a758:	e0bffc15 	stw	r2,-16(fp)
    
  //  p->Frame_Width = width;
  //  p->Frame_Height = height;
    //
    p->width = width;
 400a75c:	e0bffd17 	ldw	r2,-12(fp)
 400a760:	e0fffe17 	ldw	r3,-8(fp)
 400a764:	10c00515 	stw	r3,20(r2)
    p->height = height;
 400a768:	e0bffd17 	ldw	r2,-12(fp)
 400a76c:	e0ffff17 	ldw	r3,-4(fp)
 400a770:	10c00615 	stw	r3,24(r2)
    //
    FrameReader_SetFrame0(p->VipBase, (alt_u32)p->Frame0_Base, words, cycle, p->width, p->height, p->interlace);
 400a774:	e0bffd17 	ldw	r2,-12(fp)
 400a778:	10c00017 	ldw	r3,0(r2)
 400a77c:	e0bffd17 	ldw	r2,-12(fp)
 400a780:	10800117 	ldw	r2,4(r2)
 400a784:	1011883a 	mov	r8,r2
 400a788:	e0bffd17 	ldw	r2,-12(fp)
 400a78c:	10800517 	ldw	r2,20(r2)
 400a790:	1009883a 	mov	r4,r2
 400a794:	e0bffd17 	ldw	r2,-12(fp)
 400a798:	10800617 	ldw	r2,24(r2)
 400a79c:	100b883a 	mov	r5,r2
 400a7a0:	e0bffd17 	ldw	r2,-12(fp)
 400a7a4:	10800817 	ldw	r2,32(r2)
 400a7a8:	d8800215 	stw	r2,8(sp)
 400a7ac:	d9400115 	stw	r5,4(sp)
 400a7b0:	d9000015 	stw	r4,0(sp)
 400a7b4:	e1fffc17 	ldw	r7,-16(fp)
 400a7b8:	e1bffb17 	ldw	r6,-20(fp)
 400a7bc:	400b883a 	mov	r5,r8
 400a7c0:	1809883a 	mov	r4,r3
 400a7c4:	400a9c40 	call	400a9c4 <_Z21FrameReader_SetFrame0mmmmmmm>
    FrameReader_SetFrame1(p->VipBase, (alt_u32)p->Frame1_Base, words, cycle, p->width, p->height, p->interlace);
 400a7c8:	e0bffd17 	ldw	r2,-12(fp)
 400a7cc:	10c00017 	ldw	r3,0(r2)
 400a7d0:	e0bffd17 	ldw	r2,-12(fp)
 400a7d4:	10800217 	ldw	r2,8(r2)
 400a7d8:	1011883a 	mov	r8,r2
 400a7dc:	e0bffd17 	ldw	r2,-12(fp)
 400a7e0:	10800517 	ldw	r2,20(r2)
 400a7e4:	1009883a 	mov	r4,r2
 400a7e8:	e0bffd17 	ldw	r2,-12(fp)
 400a7ec:	10800617 	ldw	r2,24(r2)
 400a7f0:	100b883a 	mov	r5,r2
 400a7f4:	e0bffd17 	ldw	r2,-12(fp)
 400a7f8:	10800817 	ldw	r2,32(r2)
 400a7fc:	d8800215 	stw	r2,8(sp)
 400a800:	d9400115 	stw	r5,4(sp)
 400a804:	d9000015 	stw	r4,0(sp)
 400a808:	e1fffc17 	ldw	r7,-16(fp)
 400a80c:	e1bffb17 	ldw	r6,-20(fp)
 400a810:	400b883a 	mov	r5,r8
 400a814:	1809883a 	mov	r4,r3
 400a818:	400aa6c0 	call	400aa6c <_Z21FrameReader_SetFrame1mmmmmmm>
    
}
 400a81c:	0001883a 	nop
 400a820:	e037883a 	mov	sp,fp
 400a824:	dfc00117 	ldw	ra,4(sp)
 400a828:	df000017 	ldw	fp,0(sp)
 400a82c:	dec00204 	addi	sp,sp,8
 400a830:	f800283a 	ret

0400a834 <_Z8VIPFR_GoP16VIP_FRAME_READERb>:

void VIPFR_Go(VIP_FRAME_READER* p, bool bGo){
 400a834:	defffd04 	addi	sp,sp,-12
 400a838:	df000215 	stw	fp,8(sp)
 400a83c:	df000204 	addi	fp,sp,8
 400a840:	e13ffe15 	stw	r4,-8(fp)
 400a844:	2805883a 	mov	r2,r5
 400a848:	e0bfff05 	stb	r2,-4(fp)
    IOWR(p->VipBase, 0x00, bGo?0x01:0x00);
 400a84c:	e0bffe17 	ldw	r2,-8(fp)
 400a850:	10800017 	ldw	r2,0(r2)
 400a854:	1007883a 	mov	r3,r2
 400a858:	e0bfff03 	ldbu	r2,-4(fp)
 400a85c:	10000226 	beq	r2,zero,400a868 <_Z8VIPFR_GoP16VIP_FRAME_READERb+0x34>
 400a860:	00800044 	movi	r2,1
 400a864:	00000106 	br	400a86c <_Z8VIPFR_GoP16VIP_FRAME_READERb+0x38>
 400a868:	0005883a 	mov	r2,zero
 400a86c:	18800035 	stwio	r2,0(r3)
}
 400a870:	0001883a 	nop
 400a874:	e037883a 	mov	sp,fp
 400a878:	df000017 	ldw	fp,0(sp)
 400a87c:	dec00104 	addi	sp,sp,4
 400a880:	f800283a 	ret

0400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>:

void* VIPFR_GetDrawFrame(VIP_FRAME_READER* p){
 400a884:	defffe04 	addi	sp,sp,-8
 400a888:	df000115 	stw	fp,4(sp)
 400a88c:	df000104 	addi	fp,sp,4
 400a890:	e13fff15 	stw	r4,-4(fp)
        if (p->DisplayFrame == 0)
 400a894:	e0bfff17 	ldw	r2,-4(fp)
 400a898:	10800303 	ldbu	r2,12(r2)
 400a89c:	10803fcc 	andi	r2,r2,255
 400a8a0:	1000031e 	bne	r2,zero,400a8b0 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER+0x2c>
            return p->Frame1_Base;
 400a8a4:	e0bfff17 	ldw	r2,-4(fp)
 400a8a8:	10800217 	ldw	r2,8(r2)
 400a8ac:	00000206 	br	400a8b8 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER+0x34>
        return p->Frame0_Base;
 400a8b0:	e0bfff17 	ldw	r2,-4(fp)
 400a8b4:	10800117 	ldw	r2,4(r2)
}
 400a8b8:	e037883a 	mov	sp,fp
 400a8bc:	df000017 	ldw	fp,0(sp)
 400a8c0:	dec00104 	addi	sp,sp,4
 400a8c4:	f800283a 	ret

0400a8c8 <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER>:
void VIPFR_ActiveDrawFrame(VIP_FRAME_READER* p){
 400a8c8:	defffd04 	addi	sp,sp,-12
 400a8cc:	dfc00215 	stw	ra,8(sp)
 400a8d0:	df000115 	stw	fp,4(sp)
 400a8d4:	df000104 	addi	fp,sp,4
 400a8d8:	e13fff15 	stw	r4,-4(fp)
     p->DisplayFrame =  (p->DisplayFrame+1)%2;
 400a8dc:	e0bfff17 	ldw	r2,-4(fp)
 400a8e0:	10800303 	ldbu	r2,12(r2)
 400a8e4:	10803fcc 	andi	r2,r2,255
 400a8e8:	10c00044 	addi	r3,r2,1
 400a8ec:	00a00034 	movhi	r2,32768
 400a8f0:	10800044 	addi	r2,r2,1
 400a8f4:	1884703a 	and	r2,r3,r2
 400a8f8:	1000040e 	bge	r2,zero,400a90c <_Z21VIPFR_ActiveDrawFrameP16VIP_FRAME_READER+0x44>
 400a8fc:	10bfffc4 	addi	r2,r2,-1
 400a900:	00ffff84 	movi	r3,-2
 400a904:	10c4b03a 	or	r2,r2,r3
 400a908:	10800044 	addi	r2,r2,1
 400a90c:	1007883a 	mov	r3,r2
 400a910:	e0bfff17 	ldw	r2,-4(fp)
 400a914:	10c00305 	stb	r3,12(r2)
     FrameReader_SelectFrame(p->VipBase, p->DisplayFrame);
 400a918:	e0bfff17 	ldw	r2,-4(fp)
 400a91c:	10c00017 	ldw	r3,0(r2)
 400a920:	e0bfff17 	ldw	r2,-4(fp)
 400a924:	10800303 	ldbu	r2,12(r2)
 400a928:	10803fcc 	andi	r2,r2,255
 400a92c:	100b883a 	mov	r5,r2
 400a930:	1809883a 	mov	r4,r3
 400a934:	400ab140 	call	400ab14 <_Z23FrameReader_SelectFramemh>
     alt_dcache_flush_all();
 400a938:	401f5840 	call	401f584 <alt_dcache_flush_all>
}
 400a93c:	0001883a 	nop
 400a940:	e037883a 	mov	sp,fp
 400a944:	dfc00117 	ldw	ra,4(sp)
 400a948:	df000017 	ldw	fp,0(sp)
 400a94c:	dec00204 	addi	sp,sp,8
 400a950:	f800283a 	ret

0400a954 <_Z16DRAW_EraseScreenP16VIP_FRAME_READERm>:

void DRAW_EraseScreen(VIP_FRAME_READER *p, alt_u32 Color){
 400a954:	defffc04 	addi	sp,sp,-16
 400a958:	dfc00315 	stw	ra,12(sp)
 400a95c:	df000215 	stw	fp,8(sp)
 400a960:	df000204 	addi	fp,sp,8
 400a964:	e13ffe15 	stw	r4,-8(fp)
 400a968:	e17fff15 	stw	r5,-4(fp)
    memset(VIPFR_GetDrawFrame(p), Color, p->width*p->height*p->bytes_per_pixel);
 400a96c:	e13ffe17 	ldw	r4,-8(fp)
 400a970:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400a974:	100f883a 	mov	r7,r2
 400a978:	e13fff17 	ldw	r4,-4(fp)
 400a97c:	e0bffe17 	ldw	r2,-8(fp)
 400a980:	10c00517 	ldw	r3,20(r2)
 400a984:	e0bffe17 	ldw	r2,-8(fp)
 400a988:	10800617 	ldw	r2,24(r2)
 400a98c:	1887383a 	mul	r3,r3,r2
 400a990:	e0bffe17 	ldw	r2,-8(fp)
 400a994:	10800717 	ldw	r2,28(r2)
 400a998:	1885383a 	mul	r2,r3,r2
 400a99c:	100d883a 	mov	r6,r2
 400a9a0:	200b883a 	mov	r5,r4
 400a9a4:	3809883a 	mov	r4,r7
 400a9a8:	401255c0 	call	401255c <memset>
}
 400a9ac:	0001883a 	nop
 400a9b0:	e037883a 	mov	sp,fp
 400a9b4:	dfc00117 	ldw	ra,4(sp)
 400a9b8:	df000017 	ldw	fp,0(sp)
 400a9bc:	dec00204 	addi	sp,sp,8
 400a9c0:	f800283a 	ret

0400a9c4 <_Z21FrameReader_SetFrame0mmmmmmm>:
////////////////////////////////////////////////////////////////////
// internal function
////////////////////////////////////////////////////////////////////


void FrameReader_SetFrame0(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 400a9c4:	defffb04 	addi	sp,sp,-20
 400a9c8:	df000415 	stw	fp,16(sp)
 400a9cc:	df000404 	addi	fp,sp,16
 400a9d0:	e13ffc15 	stw	r4,-16(fp)
 400a9d4:	e17ffd15 	stw	r5,-12(fp)
 400a9d8:	e1bffe15 	stw	r6,-8(fp)
 400a9dc:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 4, FrameBase); // frame0 base address
 400a9e0:	e0bffc17 	ldw	r2,-16(fp)
 400a9e4:	10800404 	addi	r2,r2,16
 400a9e8:	1007883a 	mov	r3,r2
 400a9ec:	e0bffd17 	ldw	r2,-12(fp)
 400a9f0:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 5, words); // frame0 words
 400a9f4:	e0bffc17 	ldw	r2,-16(fp)
 400a9f8:	10800504 	addi	r2,r2,20
 400a9fc:	1007883a 	mov	r3,r2
 400aa00:	e0bffe17 	ldw	r2,-8(fp)
 400aa04:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 6, cycle); // frame0 single cylce color pattern
 400aa08:	e0bffc17 	ldw	r2,-16(fp)
 400aa0c:	10800604 	addi	r2,r2,24
 400aa10:	1007883a 	mov	r3,r2
 400aa14:	e0bfff17 	ldw	r2,-4(fp)
 400aa18:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 8, width); // frame0 width
 400aa1c:	e0bffc17 	ldw	r2,-16(fp)
 400aa20:	10800804 	addi	r2,r2,32
 400aa24:	1007883a 	mov	r3,r2
 400aa28:	e0800117 	ldw	r2,4(fp)
 400aa2c:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 9, height); // frame0 height
 400aa30:	e0bffc17 	ldw	r2,-16(fp)
 400aa34:	10800904 	addi	r2,r2,36
 400aa38:	1007883a 	mov	r3,r2
 400aa3c:	e0800217 	ldw	r2,8(fp)
 400aa40:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 10, interlace); // frame0 interlaced
 400aa44:	e0bffc17 	ldw	r2,-16(fp)
 400aa48:	10800a04 	addi	r2,r2,40
 400aa4c:	1007883a 	mov	r3,r2
 400aa50:	e0800317 	ldw	r2,12(fp)
 400aa54:	18800035 	stwio	r2,0(r3)
}
 400aa58:	0001883a 	nop
 400aa5c:	e037883a 	mov	sp,fp
 400aa60:	df000017 	ldw	fp,0(sp)
 400aa64:	dec00104 	addi	sp,sp,4
 400aa68:	f800283a 	ret

0400aa6c <_Z21FrameReader_SetFrame1mmmmmmm>:

void FrameReader_SetFrame1(alt_u32 VipBase, alt_u32 FrameBase, alt_u32 words, alt_u32 cycle, alt_u32 width, alt_u32 height, alt_u32 interlace){
 400aa6c:	defffb04 	addi	sp,sp,-20
 400aa70:	df000415 	stw	fp,16(sp)
 400aa74:	df000404 	addi	fp,sp,16
 400aa78:	e13ffc15 	stw	r4,-16(fp)
 400aa7c:	e17ffd15 	stw	r5,-12(fp)
 400aa80:	e1bffe15 	stw	r6,-8(fp)
 400aa84:	e1ffff15 	stw	r7,-4(fp)
    IOWR(VipBase, 11, FrameBase); // frame0 base address
 400aa88:	e0bffc17 	ldw	r2,-16(fp)
 400aa8c:	10800b04 	addi	r2,r2,44
 400aa90:	1007883a 	mov	r3,r2
 400aa94:	e0bffd17 	ldw	r2,-12(fp)
 400aa98:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 12, words); // frame0 words
 400aa9c:	e0bffc17 	ldw	r2,-16(fp)
 400aaa0:	10800c04 	addi	r2,r2,48
 400aaa4:	1007883a 	mov	r3,r2
 400aaa8:	e0bffe17 	ldw	r2,-8(fp)
 400aaac:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 13, cycle); // frame0 single cylce color pattern
 400aab0:	e0bffc17 	ldw	r2,-16(fp)
 400aab4:	10800d04 	addi	r2,r2,52
 400aab8:	1007883a 	mov	r3,r2
 400aabc:	e0bfff17 	ldw	r2,-4(fp)
 400aac0:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 15, width); // frame0 width
 400aac4:	e0bffc17 	ldw	r2,-16(fp)
 400aac8:	10800f04 	addi	r2,r2,60
 400aacc:	1007883a 	mov	r3,r2
 400aad0:	e0800117 	ldw	r2,4(fp)
 400aad4:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 16, height); // frame0 height
 400aad8:	e0bffc17 	ldw	r2,-16(fp)
 400aadc:	10801004 	addi	r2,r2,64
 400aae0:	1007883a 	mov	r3,r2
 400aae4:	e0800217 	ldw	r2,8(fp)
 400aae8:	18800035 	stwio	r2,0(r3)
    IOWR(VipBase, 17, interlace); // frame0 interlaced
 400aaec:	e0bffc17 	ldw	r2,-16(fp)
 400aaf0:	10801104 	addi	r2,r2,68
 400aaf4:	1007883a 	mov	r3,r2
 400aaf8:	e0800317 	ldw	r2,12(fp)
 400aafc:	18800035 	stwio	r2,0(r3)
}
 400ab00:	0001883a 	nop
 400ab04:	e037883a 	mov	sp,fp
 400ab08:	df000017 	ldw	fp,0(sp)
 400ab0c:	dec00104 	addi	sp,sp,4
 400ab10:	f800283a 	ret

0400ab14 <_Z23FrameReader_SelectFramemh>:

void FrameReader_SelectFrame(alt_u32 VipBase, alt_u8 FrameIndex){
 400ab14:	defffd04 	addi	sp,sp,-12
 400ab18:	df000215 	stw	fp,8(sp)
 400ab1c:	df000204 	addi	fp,sp,8
 400ab20:	e13ffe15 	stw	r4,-8(fp)
 400ab24:	2805883a 	mov	r2,r5
 400ab28:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 3, FrameIndex);
 400ab2c:	e0bffe17 	ldw	r2,-8(fp)
 400ab30:	10800304 	addi	r2,r2,12
 400ab34:	1007883a 	mov	r3,r2
 400ab38:	e0bfff03 	ldbu	r2,-4(fp)
 400ab3c:	18800035 	stwio	r2,0(r3)
}        
 400ab40:	0001883a 	nop
 400ab44:	e037883a 	mov	sp,fp
 400ab48:	df000017 	ldw	fp,0(sp)
 400ab4c:	dec00104 	addi	sp,sp,4
 400ab50:	f800283a 	ret

0400ab54 <_Z14FrameReader_Gomb>:

void FrameReader_Go(alt_u32 VipBase, bool bGO){
 400ab54:	defffd04 	addi	sp,sp,-12
 400ab58:	df000215 	stw	fp,8(sp)
 400ab5c:	df000204 	addi	fp,sp,8
 400ab60:	e13ffe15 	stw	r4,-8(fp)
 400ab64:	2805883a 	mov	r2,r5
 400ab68:	e0bfff05 	stb	r2,-4(fp)
    IOWR(VipBase, 0, bGO?0x01:0x00);
 400ab6c:	e0fffe17 	ldw	r3,-8(fp)
 400ab70:	e0bfff03 	ldbu	r2,-4(fp)
 400ab74:	10000226 	beq	r2,zero,400ab80 <_Z14FrameReader_Gomb+0x2c>
 400ab78:	00800044 	movi	r2,1
 400ab7c:	00000106 	br	400ab84 <_Z14FrameReader_Gomb+0x30>
 400ab80:	0005883a 	mov	r2,zero
 400ab84:	18800035 	stwio	r2,0(r3)
}
 400ab88:	0001883a 	nop
 400ab8c:	e037883a 	mov	sp,fp
 400ab90:	df000017 	ldw	fp,0(sp)
 400ab94:	dec00104 	addi	sp,sp,4
 400ab98:	f800283a 	ret

0400ab9c <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>:


alt_u32 VIPFR_GetFrameSize(VIP_FRAME_READER* p){
 400ab9c:	defffd04 	addi	sp,sp,-12
 400aba0:	df000215 	stw	fp,8(sp)
 400aba4:	df000204 	addi	fp,sp,8
 400aba8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ByteLength;
	ByteLength = p->width*p->height * p->bytes_per_pixel;
 400abac:	e0bfff17 	ldw	r2,-4(fp)
 400abb0:	10c00517 	ldw	r3,20(r2)
 400abb4:	e0bfff17 	ldw	r2,-4(fp)
 400abb8:	10800617 	ldw	r2,24(r2)
 400abbc:	1887383a 	mul	r3,r3,r2
 400abc0:	e0bfff17 	ldw	r2,-4(fp)
 400abc4:	10800717 	ldw	r2,28(r2)
 400abc8:	1885383a 	mul	r2,r3,r2
 400abcc:	e0bffe15 	stw	r2,-8(fp)
	return ByteLength;
 400abd0:	e0bffe17 	ldw	r2,-8(fp)
}
 400abd4:	e037883a 	mov	sp,fp
 400abd8:	df000017 	ldw	fp,0(sp)
 400abdc:	dec00104 	addi	sp,sp,4
 400abe0:	f800283a 	ret

0400abe4 <_Z19VIPFR_ReadDrawFrameP16VIP_FRAME_READERPv>:

void VIPFR_ReadDrawFrame(VIP_FRAME_READER* p, void *pFrame){
 400abe4:	defffb04 	addi	sp,sp,-20
 400abe8:	dfc00415 	stw	ra,16(sp)
 400abec:	df000315 	stw	fp,12(sp)
 400abf0:	df000304 	addi	fp,sp,12
 400abf4:	e13ffe15 	stw	r4,-8(fp)
 400abf8:	e17fff15 	stw	r5,-4(fp)
	alt_u32 FrameByteLength;
	FrameByteLength = VIPFR_GetFrameSize(p);
 400abfc:	e13ffe17 	ldw	r4,-8(fp)
 400ac00:	400ab9c0 	call	400ab9c <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>
 400ac04:	e0bffd15 	stw	r2,-12(fp)
	memcpy(pFrame, VIPFR_GetDrawFrame(p), FrameByteLength);
 400ac08:	e13ffe17 	ldw	r4,-8(fp)
 400ac0c:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400ac10:	e1bffd17 	ldw	r6,-12(fp)
 400ac14:	100b883a 	mov	r5,r2
 400ac18:	e13fff17 	ldw	r4,-4(fp)
 400ac1c:	40124140 	call	4012414 <memcpy>
}
 400ac20:	0001883a 	nop
 400ac24:	e037883a 	mov	sp,fp
 400ac28:	dfc00117 	ldw	ra,4(sp)
 400ac2c:	df000017 	ldw	fp,0(sp)
 400ac30:	dec00204 	addi	sp,sp,8
 400ac34:	f800283a 	ret

0400ac38 <_Z20VIPFR_WriteDrawFrameP16VIP_FRAME_READERPv>:

void VIPFR_WriteDrawFrame(VIP_FRAME_READER* p, void *pFrame){
 400ac38:	defffb04 	addi	sp,sp,-20
 400ac3c:	dfc00415 	stw	ra,16(sp)
 400ac40:	df000315 	stw	fp,12(sp)
 400ac44:	df000304 	addi	fp,sp,12
 400ac48:	e13ffe15 	stw	r4,-8(fp)
 400ac4c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 FrameByteLength;
	FrameByteLength = VIPFR_GetFrameSize(p);
 400ac50:	e13ffe17 	ldw	r4,-8(fp)
 400ac54:	400ab9c0 	call	400ab9c <_Z18VIPFR_GetFrameSizeP16VIP_FRAME_READER>
 400ac58:	e0bffd15 	stw	r2,-12(fp)
	memcpy(VIPFR_GetDrawFrame(p), pFrame, FrameByteLength);
 400ac5c:	e13ffe17 	ldw	r4,-8(fp)
 400ac60:	400a8840 	call	400a884 <_Z18VIPFR_GetDrawFrameP16VIP_FRAME_READER>
 400ac64:	e1bffd17 	ldw	r6,-12(fp)
 400ac68:	e17fff17 	ldw	r5,-4(fp)
 400ac6c:	1009883a 	mov	r4,r2
 400ac70:	40124140 	call	4012414 <memcpy>
}
 400ac74:	0001883a 	nop
 400ac78:	e037883a 	mov	sp,fp
 400ac7c:	dfc00117 	ldw	ra,4(sp)
 400ac80:	df000017 	ldw	fp,0(sp)
 400ac84:	dec00204 	addi	sp,sp,8
 400ac88:	f800283a 	ret

0400ac8c <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER>:


///////////////////////////////////////////////////////////////


void VIPFR_ReserveBackground(VIP_FRAME_READER* p){
 400ac8c:	defffa04 	addi	sp,sp,-24
 400ac90:	dfc00515 	stw	ra,20(sp)
 400ac94:	df000415 	stw	fp,16(sp)
 400ac98:	df000404 	addi	fp,sp,16
 400ac9c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 *pSrc, *pDes;
    int nSize;
    
    nSize = p->width * p->height * p->bytes_per_pixel;
 400aca0:	e0bfff17 	ldw	r2,-4(fp)
 400aca4:	10c00517 	ldw	r3,20(r2)
 400aca8:	e0bfff17 	ldw	r2,-4(fp)
 400acac:	10800617 	ldw	r2,24(r2)
 400acb0:	1887383a 	mul	r3,r3,r2
 400acb4:	e0bfff17 	ldw	r2,-4(fp)
 400acb8:	10800717 	ldw	r2,28(r2)
 400acbc:	1885383a 	mul	r2,r3,r2
 400acc0:	e0bffe15 	stw	r2,-8(fp)
        
    
    if (p->DisplayFrame == 0){
 400acc4:	e0bfff17 	ldw	r2,-4(fp)
 400acc8:	10800303 	ldbu	r2,12(r2)
 400accc:	10803fcc 	andi	r2,r2,255
 400acd0:	1000071e 	bne	r2,zero,400acf0 <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER+0x64>
        pSrc = (alt_u32*)p->Frame0_Base;
 400acd4:	e0bfff17 	ldw	r2,-4(fp)
 400acd8:	10800117 	ldw	r2,4(r2)
 400acdc:	e0bffc15 	stw	r2,-16(fp)
        pDes = (alt_u32*)p->Frame1_Base;
 400ace0:	e0bfff17 	ldw	r2,-4(fp)
 400ace4:	10800217 	ldw	r2,8(r2)
 400ace8:	e0bffd15 	stw	r2,-12(fp)
 400acec:	00000606 	br	400ad08 <_Z23VIPFR_ReserveBackgroundP16VIP_FRAME_READER+0x7c>
    }else{
        pDes = (alt_u32*)p->Frame0_Base;
 400acf0:	e0bfff17 	ldw	r2,-4(fp)
 400acf4:	10800117 	ldw	r2,4(r2)
 400acf8:	e0bffd15 	stw	r2,-12(fp)
        pSrc = (alt_u32*)p->Frame1_Base;
 400acfc:	e0bfff17 	ldw	r2,-4(fp)
 400ad00:	10800217 	ldw	r2,8(r2)
 400ad04:	e0bffc15 	stw	r2,-16(fp)
    }
#ifdef ENABLE_DMA    
    my_memcpy(pDes, pSrc, nSize);
#else    
    memcpy(pDes, pSrc, nSize);
 400ad08:	e0bffe17 	ldw	r2,-8(fp)
 400ad0c:	100d883a 	mov	r6,r2
 400ad10:	e17ffc17 	ldw	r5,-16(fp)
 400ad14:	e13ffd17 	ldw	r4,-12(fp)
 400ad18:	40124140 	call	4012414 <memcpy>
#endif //ENABLE_DMA    
}
 400ad1c:	0001883a 	nop
 400ad20:	e037883a 	mov	sp,fp
 400ad24:	dfc00117 	ldw	ra,4(sp)
 400ad28:	df000017 	ldw	fp,0(sp)
 400ad2c:	dec00204 	addi	sp,sp,8
 400ad30:	f800283a 	ret

0400ad34 <atan>:
 400ad34:	defff704 	addi	sp,sp,-36
 400ad38:	dc400115 	stw	r17,4(sp)
 400ad3c:	04600034 	movhi	r17,32768
 400ad40:	8c7fffc4 	addi	r17,r17,-1
 400ad44:	00910434 	movhi	r2,17424
 400ad48:	dc800215 	stw	r18,8(sp)
 400ad4c:	dc000015 	stw	r16,0(sp)
 400ad50:	dfc00815 	stw	ra,32(sp)
 400ad54:	ddc00715 	stw	r23,28(sp)
 400ad58:	dd800615 	stw	r22,24(sp)
 400ad5c:	dd400515 	stw	r21,20(sp)
 400ad60:	dd000415 	stw	r20,16(sp)
 400ad64:	dcc00315 	stw	r19,12(sp)
 400ad68:	2c62703a 	and	r17,r5,r17
 400ad6c:	10bfffc4 	addi	r2,r2,-1
 400ad70:	2821883a 	mov	r16,r5
 400ad74:	2025883a 	mov	r18,r4
 400ad78:	1440090e 	bge	r2,r17,400ada0 <atan+0x6c>
 400ad7c:	009ffc34 	movhi	r2,32752
 400ad80:	1440bf16 	blt	r2,r17,400b080 <atan+0x34c>
 400ad84:	8880bd26 	beq	r17,r2,400b07c <atan+0x348>
 400ad88:	00951134 	movhi	r2,21572
 400ad8c:	108b4604 	addi	r2,r2,11544
 400ad90:	0400fc0e 	bge	zero,r16,400b184 <atan+0x450>
 400ad94:	00cffe74 	movhi	r3,16377
 400ad98:	18c87ec4 	addi	r3,r3,8699
 400ad9c:	0000bd06 	br	400b094 <atan+0x360>
 400ada0:	008ff734 	movhi	r2,16348
 400ada4:	10bfffc4 	addi	r2,r2,-1
 400ada8:	282b883a 	mov	r21,r5
 400adac:	1440d216 	blt	r2,r17,400b0f8 <atan+0x3c4>
 400adb0:	008f8834 	movhi	r2,15904
 400adb4:	10bfffc4 	addi	r2,r2,-1
 400adb8:	1440c10e 	bge	r2,r17,400b0c0 <atan+0x38c>
 400adbc:	053fffc4 	movi	r20,-1
 400adc0:	900d883a 	mov	r6,r18
 400adc4:	800f883a 	mov	r7,r16
 400adc8:	9009883a 	mov	r4,r18
 400adcc:	800b883a 	mov	r5,r16
 400add0:	40107440 	call	4010744 <__muldf3>
 400add4:	100d883a 	mov	r6,r2
 400add8:	180f883a 	mov	r7,r3
 400addc:	1009883a 	mov	r4,r2
 400ade0:	180b883a 	mov	r5,r3
 400ade4:	102f883a 	mov	r23,r2
 400ade8:	182d883a 	mov	r22,r3
 400adec:	40107440 	call	4010744 <__muldf3>
 400adf0:	01b8c8f4 	movhi	r6,58147
 400adf4:	01cfe474 	movhi	r7,16273
 400adf8:	31b68444 	addi	r6,r6,-9711
 400adfc:	39eb4e84 	addi	r7,r7,-21190
 400ae00:	1009883a 	mov	r4,r2
 400ae04:	180b883a 	mov	r5,r3
 400ae08:	1027883a 	mov	r19,r2
 400ae0c:	1823883a 	mov	r17,r3
 400ae10:	40107440 	call	4010744 <__muldf3>
 400ae14:	01891db4 	movhi	r6,9334
 400ae18:	01cfea74 	movhi	r7,16297
 400ae1c:	31837ac4 	addi	r6,r6,3563
 400ae20:	39ded2c4 	addi	r7,r7,31563
 400ae24:	1009883a 	mov	r4,r2
 400ae28:	180b883a 	mov	r5,r3
 400ae2c:	400f3580 	call	400f358 <__adddf3>
 400ae30:	980d883a 	mov	r6,r19
 400ae34:	880f883a 	mov	r7,r17
 400ae38:	1009883a 	mov	r4,r2
 400ae3c:	180b883a 	mov	r5,r3
 400ae40:	40107440 	call	4010744 <__muldf3>
 400ae44:	01a83434 	movhi	r6,41168
 400ae48:	01cfec74 	movhi	r7,16305
 400ae4c:	318f5444 	addi	r6,r6,15697
 400ae50:	39c35984 	addi	r7,r7,3430
 400ae54:	1009883a 	mov	r4,r2
 400ae58:	180b883a 	mov	r5,r3
 400ae5c:	400f3580 	call	400f358 <__adddf3>
 400ae60:	980d883a 	mov	r6,r19
 400ae64:	880f883a 	mov	r7,r17
 400ae68:	1009883a 	mov	r4,r2
 400ae6c:	180b883a 	mov	r5,r3
 400ae70:	40107440 	call	4010744 <__muldf3>
 400ae74:	01b15334 	movhi	r6,50508
 400ae78:	01cfedf4 	movhi	r7,16311
 400ae7c:	31881b84 	addi	r6,r6,8302
 400ae80:	39d17344 	addi	r7,r7,17869
 400ae84:	1009883a 	mov	r4,r2
 400ae88:	180b883a 	mov	r5,r3
 400ae8c:	400f3580 	call	400f358 <__adddf3>
 400ae90:	980d883a 	mov	r6,r19
 400ae94:	880f883a 	mov	r7,r17
 400ae98:	1009883a 	mov	r4,r2
 400ae9c:	180b883a 	mov	r5,r3
 400aea0:	40107440 	call	4010744 <__muldf3>
 400aea4:	01a48074 	movhi	r6,37377
 400aea8:	01cff0b4 	movhi	r7,16322
 400aeac:	31a0ffc4 	addi	r6,r6,-31745
 400aeb0:	39d24904 	addi	r7,r7,18724
 400aeb4:	1009883a 	mov	r4,r2
 400aeb8:	180b883a 	mov	r5,r3
 400aebc:	400f3580 	call	400f358 <__adddf3>
 400aec0:	980d883a 	mov	r6,r19
 400aec4:	880f883a 	mov	r7,r17
 400aec8:	1009883a 	mov	r4,r2
 400aecc:	180b883a 	mov	r5,r3
 400aed0:	40107440 	call	4010744 <__muldf3>
 400aed4:	01955574 	movhi	r6,21845
 400aed8:	01cff574 	movhi	r7,16341
 400aedc:	31954344 	addi	r6,r6,21773
 400aee0:	39d55544 	addi	r7,r7,21845
 400aee4:	1009883a 	mov	r4,r2
 400aee8:	180b883a 	mov	r5,r3
 400aeec:	400f3580 	call	400f358 <__adddf3>
 400aef0:	b80d883a 	mov	r6,r23
 400aef4:	b00f883a 	mov	r7,r22
 400aef8:	1009883a 	mov	r4,r2
 400aefc:	180b883a 	mov	r5,r3
 400af00:	40107440 	call	4010744 <__muldf3>
 400af04:	018b1ab4 	movhi	r6,11370
 400af08:	01efe8f4 	movhi	r7,49059
 400af0c:	319b0bc4 	addi	r6,r6,27695
 400af10:	39ed1104 	addi	r7,r7,-19388
 400af14:	9809883a 	mov	r4,r19
 400af18:	880b883a 	mov	r5,r17
 400af1c:	102f883a 	mov	r23,r2
 400af20:	182d883a 	mov	r22,r3
 400af24:	40107440 	call	4010744 <__muldf3>
 400af28:	0194b7f4 	movhi	r6,21215
 400af2c:	01cfebb4 	movhi	r7,16302
 400af30:	31bf6684 	addi	r6,r6,-614
 400af34:	39f78b44 	addi	r7,r7,-8659
 400af38:	1009883a 	mov	r4,r2
 400af3c:	180b883a 	mov	r5,r3
 400af40:	4010e5c0 	call	4010e5c <__subdf3>
 400af44:	980d883a 	mov	r6,r19
 400af48:	880f883a 	mov	r7,r17
 400af4c:	1009883a 	mov	r4,r2
 400af50:	180b883a 	mov	r5,r3
 400af54:	40107440 	call	4010744 <__muldf3>
 400af58:	01abdd74 	movhi	r6,44917
 400af5c:	01cfed34 	movhi	r7,16308
 400af60:	31a69b44 	addi	r6,r6,-26003
 400af64:	39ec3c84 	addi	r7,r7,-20238
 400af68:	1009883a 	mov	r4,r2
 400af6c:	180b883a 	mov	r5,r3
 400af70:	4010e5c0 	call	4010e5c <__subdf3>
 400af74:	980d883a 	mov	r6,r19
 400af78:	880f883a 	mov	r7,r17
 400af7c:	1009883a 	mov	r4,r2
 400af80:	180b883a 	mov	r5,r3
 400af84:	40107440 	call	4010744 <__muldf3>
 400af88:	01bf88f4 	movhi	r6,65059
 400af8c:	01cfef34 	movhi	r7,16316
 400af90:	31859c44 	addi	r6,r6,5745
 400af94:	39dc7184 	addi	r7,r7,29126
 400af98:	1009883a 	mov	r4,r2
 400af9c:	180b883a 	mov	r5,r3
 400afa0:	4010e5c0 	call	4010e5c <__subdf3>
 400afa4:	980d883a 	mov	r6,r19
 400afa8:	880f883a 	mov	r7,r17
 400afac:	1009883a 	mov	r4,r2
 400afb0:	180b883a 	mov	r5,r3
 400afb4:	40107440 	call	4010744 <__muldf3>
 400afb8:	01a66674 	movhi	r6,39321
 400afbc:	01cff2b4 	movhi	r7,16330
 400afc0:	31baf104 	addi	r6,r6,-5180
 400afc4:	39e66644 	addi	r7,r7,-26215
 400afc8:	1009883a 	mov	r4,r2
 400afcc:	180b883a 	mov	r5,r3
 400afd0:	4010e5c0 	call	4010e5c <__subdf3>
 400afd4:	1009883a 	mov	r4,r2
 400afd8:	980d883a 	mov	r6,r19
 400afdc:	880f883a 	mov	r7,r17
 400afe0:	180b883a 	mov	r5,r3
 400afe4:	40107440 	call	4010744 <__muldf3>
 400afe8:	013fffc4 	movi	r4,-1
 400afec:	a1006826 	beq	r20,r4,400b190 <atan+0x45c>
 400aff0:	100d883a 	mov	r6,r2
 400aff4:	180f883a 	mov	r7,r3
 400aff8:	b809883a 	mov	r4,r23
 400affc:	b00b883a 	mov	r5,r22
 400b000:	400f3580 	call	400f358 <__adddf3>
 400b004:	900d883a 	mov	r6,r18
 400b008:	800f883a 	mov	r7,r16
 400b00c:	1009883a 	mov	r4,r2
 400b010:	180b883a 	mov	r5,r3
 400b014:	40107440 	call	4010744 <__muldf3>
 400b018:	a02890fa 	slli	r20,r20,3
 400b01c:	1009883a 	mov	r4,r2
 400b020:	04410234 	movhi	r17,1032
 400b024:	00810234 	movhi	r2,1032
 400b028:	1086c604 	addi	r2,r2,6936
 400b02c:	8c46ce04 	addi	r17,r17,6968
 400b030:	8d23883a 	add	r17,r17,r20
 400b034:	1529883a 	add	r20,r2,r20
 400b038:	a1800017 	ldw	r6,0(r20)
 400b03c:	a1c00117 	ldw	r7,4(r20)
 400b040:	180b883a 	mov	r5,r3
 400b044:	4010e5c0 	call	4010e5c <__subdf3>
 400b048:	900d883a 	mov	r6,r18
 400b04c:	800f883a 	mov	r7,r16
 400b050:	1009883a 	mov	r4,r2
 400b054:	180b883a 	mov	r5,r3
 400b058:	4010e5c0 	call	4010e5c <__subdf3>
 400b05c:	89000017 	ldw	r4,0(r17)
 400b060:	89400117 	ldw	r5,4(r17)
 400b064:	100d883a 	mov	r6,r2
 400b068:	180f883a 	mov	r7,r3
 400b06c:	4010e5c0 	call	4010e5c <__subdf3>
 400b070:	a800080e 	bge	r21,zero,400b094 <atan+0x360>
 400b074:	18e0003c 	xorhi	r3,r3,32768
 400b078:	00000606 	br	400b094 <atan+0x360>
 400b07c:	203f4226 	beq	r4,zero,400ad88 <__reset+0xfb009d88>
 400b080:	900d883a 	mov	r6,r18
 400b084:	800f883a 	mov	r7,r16
 400b088:	9009883a 	mov	r4,r18
 400b08c:	800b883a 	mov	r5,r16
 400b090:	400f3580 	call	400f358 <__adddf3>
 400b094:	dfc00817 	ldw	ra,32(sp)
 400b098:	ddc00717 	ldw	r23,28(sp)
 400b09c:	dd800617 	ldw	r22,24(sp)
 400b0a0:	dd400517 	ldw	r21,20(sp)
 400b0a4:	dd000417 	ldw	r20,16(sp)
 400b0a8:	dcc00317 	ldw	r19,12(sp)
 400b0ac:	dc800217 	ldw	r18,8(sp)
 400b0b0:	dc400117 	ldw	r17,4(sp)
 400b0b4:	dc000017 	ldw	r16,0(sp)
 400b0b8:	dec00904 	addi	sp,sp,36
 400b0bc:	f800283a 	ret
 400b0c0:	01a20034 	movhi	r6,34816
 400b0c4:	01df8e34 	movhi	r7,32312
 400b0c8:	319d6704 	addi	r6,r6,30108
 400b0cc:	39f90f04 	addi	r7,r7,-7108
 400b0d0:	400f3580 	call	400f358 <__adddf3>
 400b0d4:	000d883a 	mov	r6,zero
 400b0d8:	01cffc34 	movhi	r7,16368
 400b0dc:	1009883a 	mov	r4,r2
 400b0e0:	180b883a 	mov	r5,r3
 400b0e4:	40105740 	call	4010574 <__gedf2>
 400b0e8:	00bf340e 	bge	zero,r2,400adbc <__reset+0xfb009dbc>
 400b0ec:	9005883a 	mov	r2,r18
 400b0f0:	8007883a 	mov	r3,r16
 400b0f4:	003fe706 	br	400b094 <__reset+0xfb00a094>
 400b0f8:	400b3a80 	call	400b3a8 <fabs>
 400b0fc:	1025883a 	mov	r18,r2
 400b100:	008ffcf4 	movhi	r2,16371
 400b104:	10bfffc4 	addi	r2,r2,-1
 400b108:	1821883a 	mov	r16,r3
 400b10c:	14403016 	blt	r2,r17,400b1d0 <atan+0x49c>
 400b110:	008ff9b4 	movhi	r2,16358
 400b114:	10bfffc4 	addi	r2,r2,-1
 400b118:	14405316 	blt	r2,r17,400b268 <atan+0x534>
 400b11c:	900d883a 	mov	r6,r18
 400b120:	9009883a 	mov	r4,r18
 400b124:	180f883a 	mov	r7,r3
 400b128:	180b883a 	mov	r5,r3
 400b12c:	400f3580 	call	400f358 <__adddf3>
 400b130:	000d883a 	mov	r6,zero
 400b134:	01cffc34 	movhi	r7,16368
 400b138:	1009883a 	mov	r4,r2
 400b13c:	180b883a 	mov	r5,r3
 400b140:	4010e5c0 	call	4010e5c <__subdf3>
 400b144:	9009883a 	mov	r4,r18
 400b148:	800b883a 	mov	r5,r16
 400b14c:	000d883a 	mov	r6,zero
 400b150:	01d00034 	movhi	r7,16384
 400b154:	1027883a 	mov	r19,r2
 400b158:	1823883a 	mov	r17,r3
 400b15c:	400f3580 	call	400f358 <__adddf3>
 400b160:	100d883a 	mov	r6,r2
 400b164:	180f883a 	mov	r7,r3
 400b168:	9809883a 	mov	r4,r19
 400b16c:	880b883a 	mov	r5,r17
 400b170:	400fc040 	call	400fc04 <__divdf3>
 400b174:	1025883a 	mov	r18,r2
 400b178:	1821883a 	mov	r16,r3
 400b17c:	0029883a 	mov	r20,zero
 400b180:	003f0f06 	br	400adc0 <__reset+0xfb009dc0>
 400b184:	00effe74 	movhi	r3,49145
 400b188:	18c87ec4 	addi	r3,r3,8699
 400b18c:	003fc106 	br	400b094 <__reset+0xfb00a094>
 400b190:	b809883a 	mov	r4,r23
 400b194:	b00b883a 	mov	r5,r22
 400b198:	100d883a 	mov	r6,r2
 400b19c:	180f883a 	mov	r7,r3
 400b1a0:	400f3580 	call	400f358 <__adddf3>
 400b1a4:	900d883a 	mov	r6,r18
 400b1a8:	800f883a 	mov	r7,r16
 400b1ac:	1009883a 	mov	r4,r2
 400b1b0:	180b883a 	mov	r5,r3
 400b1b4:	40107440 	call	4010744 <__muldf3>
 400b1b8:	100d883a 	mov	r6,r2
 400b1bc:	180f883a 	mov	r7,r3
 400b1c0:	9009883a 	mov	r4,r18
 400b1c4:	800b883a 	mov	r5,r16
 400b1c8:	4010e5c0 	call	4010e5c <__subdf3>
 400b1cc:	003fb106 	br	400b094 <__reset+0xfb00a094>
 400b1d0:	009000f4 	movhi	r2,16387
 400b1d4:	109fffc4 	addi	r2,r2,32767
 400b1d8:	14401a16 	blt	r2,r17,400b244 <atan+0x510>
 400b1dc:	9009883a 	mov	r4,r18
 400b1e0:	000d883a 	mov	r6,zero
 400b1e4:	01cffe34 	movhi	r7,16376
 400b1e8:	180b883a 	mov	r5,r3
 400b1ec:	4010e5c0 	call	4010e5c <__subdf3>
 400b1f0:	9009883a 	mov	r4,r18
 400b1f4:	800b883a 	mov	r5,r16
 400b1f8:	000d883a 	mov	r6,zero
 400b1fc:	01cffe34 	movhi	r7,16376
 400b200:	1027883a 	mov	r19,r2
 400b204:	1823883a 	mov	r17,r3
 400b208:	40107440 	call	4010744 <__muldf3>
 400b20c:	000d883a 	mov	r6,zero
 400b210:	01cffc34 	movhi	r7,16368
 400b214:	1009883a 	mov	r4,r2
 400b218:	180b883a 	mov	r5,r3
 400b21c:	400f3580 	call	400f358 <__adddf3>
 400b220:	100d883a 	mov	r6,r2
 400b224:	180f883a 	mov	r7,r3
 400b228:	9809883a 	mov	r4,r19
 400b22c:	880b883a 	mov	r5,r17
 400b230:	400fc040 	call	400fc04 <__divdf3>
 400b234:	1025883a 	mov	r18,r2
 400b238:	1821883a 	mov	r16,r3
 400b23c:	05000084 	movi	r20,2
 400b240:	003edf06 	br	400adc0 <__reset+0xfb009dc0>
 400b244:	900d883a 	mov	r6,r18
 400b248:	180f883a 	mov	r7,r3
 400b24c:	0009883a 	mov	r4,zero
 400b250:	016ffc34 	movhi	r5,49136
 400b254:	400fc040 	call	400fc04 <__divdf3>
 400b258:	1025883a 	mov	r18,r2
 400b25c:	1821883a 	mov	r16,r3
 400b260:	050000c4 	movi	r20,3
 400b264:	003ed606 	br	400adc0 <__reset+0xfb009dc0>
 400b268:	9009883a 	mov	r4,r18
 400b26c:	000d883a 	mov	r6,zero
 400b270:	01cffc34 	movhi	r7,16368
 400b274:	180b883a 	mov	r5,r3
 400b278:	4010e5c0 	call	4010e5c <__subdf3>
 400b27c:	9009883a 	mov	r4,r18
 400b280:	800b883a 	mov	r5,r16
 400b284:	000d883a 	mov	r6,zero
 400b288:	01cffc34 	movhi	r7,16368
 400b28c:	1027883a 	mov	r19,r2
 400b290:	1823883a 	mov	r17,r3
 400b294:	400f3580 	call	400f358 <__adddf3>
 400b298:	100d883a 	mov	r6,r2
 400b29c:	180f883a 	mov	r7,r3
 400b2a0:	9809883a 	mov	r4,r19
 400b2a4:	880b883a 	mov	r5,r17
 400b2a8:	400fc040 	call	400fc04 <__divdf3>
 400b2ac:	1025883a 	mov	r18,r2
 400b2b0:	1821883a 	mov	r16,r3
 400b2b4:	05000044 	movi	r20,1
 400b2b8:	003ec106 	br	400adc0 <__reset+0xfb009dc0>

0400b2bc <cos>:
 400b2bc:	00a00034 	movhi	r2,32768
 400b2c0:	defffa04 	addi	sp,sp,-24
 400b2c4:	10bfffc4 	addi	r2,r2,-1
 400b2c8:	00cffa74 	movhi	r3,16361
 400b2cc:	dfc00515 	stw	ra,20(sp)
 400b2d0:	2884703a 	and	r2,r5,r2
 400b2d4:	18c87ec4 	addi	r3,r3,8699
 400b2d8:	1880180e 	bge	r3,r2,400b33c <cos+0x80>
 400b2dc:	00dffc34 	movhi	r3,32752
 400b2e0:	18ffffc4 	addi	r3,r3,-1
 400b2e4:	1880060e 	bge	r3,r2,400b300 <cos+0x44>
 400b2e8:	280f883a 	mov	r7,r5
 400b2ec:	200d883a 	mov	r6,r4
 400b2f0:	4010e5c0 	call	4010e5c <__subdf3>
 400b2f4:	dfc00517 	ldw	ra,20(sp)
 400b2f8:	dec00604 	addi	sp,sp,24
 400b2fc:	f800283a 	ret
 400b300:	d9800104 	addi	r6,sp,4
 400b304:	400b8a00 	call	400b8a0 <__ieee754_rem_pio2>
 400b308:	108000cc 	andi	r2,r2,3
 400b30c:	00c00044 	movi	r3,1
 400b310:	10c01726 	beq	r2,r3,400b370 <cos+0xb4>
 400b314:	01000084 	movi	r4,2
 400b318:	11000e26 	beq	r2,r4,400b354 <cos+0x98>
 400b31c:	10001c26 	beq	r2,zero,400b390 <cos+0xd4>
 400b320:	d9800317 	ldw	r6,12(sp)
 400b324:	d9c00417 	ldw	r7,16(sp)
 400b328:	d9000117 	ldw	r4,4(sp)
 400b32c:	d9400217 	ldw	r5,8(sp)
 400b330:	d8c00015 	stw	r3,0(sp)
 400b334:	400d4c80 	call	400d4c8 <__kernel_sin>
 400b338:	003fee06 	br	400b2f4 <__reset+0xfb00a2f4>
 400b33c:	000d883a 	mov	r6,zero
 400b340:	000f883a 	mov	r7,zero
 400b344:	400c2940 	call	400c294 <__kernel_cos>
 400b348:	dfc00517 	ldw	ra,20(sp)
 400b34c:	dec00604 	addi	sp,sp,24
 400b350:	f800283a 	ret
 400b354:	d9800317 	ldw	r6,12(sp)
 400b358:	d9c00417 	ldw	r7,16(sp)
 400b35c:	d9000117 	ldw	r4,4(sp)
 400b360:	d9400217 	ldw	r5,8(sp)
 400b364:	400c2940 	call	400c294 <__kernel_cos>
 400b368:	18e0003c 	xorhi	r3,r3,32768
 400b36c:	003fe106 	br	400b2f4 <__reset+0xfb00a2f4>
 400b370:	d9800317 	ldw	r6,12(sp)
 400b374:	d9c00417 	ldw	r7,16(sp)
 400b378:	d9000117 	ldw	r4,4(sp)
 400b37c:	d9400217 	ldw	r5,8(sp)
 400b380:	d8800015 	stw	r2,0(sp)
 400b384:	400d4c80 	call	400d4c8 <__kernel_sin>
 400b388:	18e0003c 	xorhi	r3,r3,32768
 400b38c:	003fd906 	br	400b2f4 <__reset+0xfb00a2f4>
 400b390:	d9800317 	ldw	r6,12(sp)
 400b394:	d9c00417 	ldw	r7,16(sp)
 400b398:	d9000117 	ldw	r4,4(sp)
 400b39c:	d9400217 	ldw	r5,8(sp)
 400b3a0:	400c2940 	call	400c294 <__kernel_cos>
 400b3a4:	003fd306 	br	400b2f4 <__reset+0xfb00a2f4>

0400b3a8 <fabs>:
 400b3a8:	00e00034 	movhi	r3,32768
 400b3ac:	18ffffc4 	addi	r3,r3,-1
 400b3b0:	2005883a 	mov	r2,r4
 400b3b4:	28c6703a 	and	r3,r5,r3
 400b3b8:	f800283a 	ret

0400b3bc <sin>:
 400b3bc:	00a00034 	movhi	r2,32768
 400b3c0:	defffa04 	addi	sp,sp,-24
 400b3c4:	10bfffc4 	addi	r2,r2,-1
 400b3c8:	00cffa74 	movhi	r3,16361
 400b3cc:	dfc00515 	stw	ra,20(sp)
 400b3d0:	2884703a 	and	r2,r5,r2
 400b3d4:	18c87ec4 	addi	r3,r3,8699
 400b3d8:	1880180e 	bge	r3,r2,400b43c <sin+0x80>
 400b3dc:	00dffc34 	movhi	r3,32752
 400b3e0:	18ffffc4 	addi	r3,r3,-1
 400b3e4:	1880060e 	bge	r3,r2,400b400 <sin+0x44>
 400b3e8:	280f883a 	mov	r7,r5
 400b3ec:	200d883a 	mov	r6,r4
 400b3f0:	4010e5c0 	call	4010e5c <__subdf3>
 400b3f4:	dfc00517 	ldw	ra,20(sp)
 400b3f8:	dec00604 	addi	sp,sp,24
 400b3fc:	f800283a 	ret
 400b400:	d9800104 	addi	r6,sp,4
 400b404:	400b8a00 	call	400b8a0 <__ieee754_rem_pio2>
 400b408:	108000cc 	andi	r2,r2,3
 400b40c:	00c00044 	movi	r3,1
 400b410:	10c01926 	beq	r2,r3,400b478 <sin+0xbc>
 400b414:	01000084 	movi	r4,2
 400b418:	11000f26 	beq	r2,r4,400b458 <sin+0x9c>
 400b41c:	10001c26 	beq	r2,zero,400b490 <sin+0xd4>
 400b420:	d9800317 	ldw	r6,12(sp)
 400b424:	d9c00417 	ldw	r7,16(sp)
 400b428:	d9000117 	ldw	r4,4(sp)
 400b42c:	d9400217 	ldw	r5,8(sp)
 400b430:	400c2940 	call	400c294 <__kernel_cos>
 400b434:	18e0003c 	xorhi	r3,r3,32768
 400b438:	003fee06 	br	400b3f4 <__reset+0xfb00a3f4>
 400b43c:	d8000015 	stw	zero,0(sp)
 400b440:	000d883a 	mov	r6,zero
 400b444:	000f883a 	mov	r7,zero
 400b448:	400d4c80 	call	400d4c8 <__kernel_sin>
 400b44c:	dfc00517 	ldw	ra,20(sp)
 400b450:	dec00604 	addi	sp,sp,24
 400b454:	f800283a 	ret
 400b458:	d9800317 	ldw	r6,12(sp)
 400b45c:	d9c00417 	ldw	r7,16(sp)
 400b460:	d9000117 	ldw	r4,4(sp)
 400b464:	d9400217 	ldw	r5,8(sp)
 400b468:	d8c00015 	stw	r3,0(sp)
 400b46c:	400d4c80 	call	400d4c8 <__kernel_sin>
 400b470:	18e0003c 	xorhi	r3,r3,32768
 400b474:	003fdf06 	br	400b3f4 <__reset+0xfb00a3f4>
 400b478:	d9800317 	ldw	r6,12(sp)
 400b47c:	d9c00417 	ldw	r7,16(sp)
 400b480:	d9000117 	ldw	r4,4(sp)
 400b484:	d9400217 	ldw	r5,8(sp)
 400b488:	400c2940 	call	400c294 <__kernel_cos>
 400b48c:	003fd906 	br	400b3f4 <__reset+0xfb00a3f4>
 400b490:	d9800317 	ldw	r6,12(sp)
 400b494:	d9c00417 	ldw	r7,16(sp)
 400b498:	d9000117 	ldw	r4,4(sp)
 400b49c:	d9400217 	ldw	r5,8(sp)
 400b4a0:	d8c00015 	stw	r3,0(sp)
 400b4a4:	400d4c80 	call	400d4c8 <__kernel_sin>
 400b4a8:	003fd206 	br	400b3f4 <__reset+0xfb00a3f4>

0400b4ac <atan2>:
 400b4ac:	400b5e01 	jmpi	400b5e0 <__ieee754_atan2>

0400b4b0 <sqrt>:
 400b4b0:	defff104 	addi	sp,sp,-60
 400b4b4:	dd000d15 	stw	r20,52(sp)
 400b4b8:	05010474 	movhi	r20,1041
 400b4bc:	dcc00c15 	stw	r19,48(sp)
 400b4c0:	dc800b15 	stw	r18,44(sp)
 400b4c4:	dc400a15 	stw	r17,40(sp)
 400b4c8:	dc000915 	stw	r16,36(sp)
 400b4cc:	dfc00e15 	stw	ra,56(sp)
 400b4d0:	a51a5604 	addi	r20,r20,26968
 400b4d4:	2027883a 	mov	r19,r4
 400b4d8:	2825883a 	mov	r18,r5
 400b4dc:	400c00c0 	call	400c00c <__ieee754_sqrt>
 400b4e0:	1821883a 	mov	r16,r3
 400b4e4:	a0c00017 	ldw	r3,0(r20)
 400b4e8:	1023883a 	mov	r17,r2
 400b4ec:	00bfffc4 	movi	r2,-1
 400b4f0:	18800a26 	beq	r3,r2,400b51c <sqrt+0x6c>
 400b4f4:	9809883a 	mov	r4,r19
 400b4f8:	900b883a 	mov	r5,r18
 400b4fc:	400d9800 	call	400d980 <__fpclassifyd>
 400b500:	10000626 	beq	r2,zero,400b51c <sqrt+0x6c>
 400b504:	000d883a 	mov	r6,zero
 400b508:	000f883a 	mov	r7,zero
 400b50c:	9809883a 	mov	r4,r19
 400b510:	900b883a 	mov	r5,r18
 400b514:	40106500 	call	4010650 <__ledf2>
 400b518:	10000a16 	blt	r2,zero,400b544 <sqrt+0x94>
 400b51c:	8805883a 	mov	r2,r17
 400b520:	8007883a 	mov	r3,r16
 400b524:	dfc00e17 	ldw	ra,56(sp)
 400b528:	dd000d17 	ldw	r20,52(sp)
 400b52c:	dcc00c17 	ldw	r19,48(sp)
 400b530:	dc800b17 	ldw	r18,44(sp)
 400b534:	dc400a17 	ldw	r17,40(sp)
 400b538:	dc000917 	ldw	r16,36(sp)
 400b53c:	dec00f04 	addi	sp,sp,60
 400b540:	f800283a 	ret
 400b544:	00800044 	movi	r2,1
 400b548:	d8800015 	stw	r2,0(sp)
 400b54c:	a4000017 	ldw	r16,0(r20)
 400b550:	00810234 	movhi	r2,1032
 400b554:	1086d604 	addi	r2,r2,7000
 400b558:	d8800115 	stw	r2,4(sp)
 400b55c:	d8000815 	stw	zero,32(sp)
 400b560:	dcc00415 	stw	r19,16(sp)
 400b564:	dc800515 	stw	r18,20(sp)
 400b568:	dcc00215 	stw	r19,8(sp)
 400b56c:	dc800315 	stw	r18,12(sp)
 400b570:	80000a1e 	bne	r16,zero,400b59c <sqrt+0xec>
 400b574:	d8000615 	stw	zero,24(sp)
 400b578:	d8000715 	stw	zero,28(sp)
 400b57c:	d809883a 	mov	r4,sp
 400b580:	400d9f40 	call	400d9f4 <matherr>
 400b584:	10000e26 	beq	r2,zero,400b5c0 <sqrt+0x110>
 400b588:	d8800817 	ldw	r2,32(sp)
 400b58c:	1000101e 	bne	r2,zero,400b5d0 <sqrt+0x120>
 400b590:	d8800617 	ldw	r2,24(sp)
 400b594:	d8c00717 	ldw	r3,28(sp)
 400b598:	003fe206 	br	400b524 <__reset+0xfb00a524>
 400b59c:	000d883a 	mov	r6,zero
 400b5a0:	000f883a 	mov	r7,zero
 400b5a4:	0009883a 	mov	r4,zero
 400b5a8:	000b883a 	mov	r5,zero
 400b5ac:	400fc040 	call	400fc04 <__divdf3>
 400b5b0:	d8800615 	stw	r2,24(sp)
 400b5b4:	d8c00715 	stw	r3,28(sp)
 400b5b8:	00800084 	movi	r2,2
 400b5bc:	80bfef1e 	bne	r16,r2,400b57c <__reset+0xfb00a57c>
 400b5c0:	4011bd00 	call	4011bd0 <__errno>
 400b5c4:	00c00844 	movi	r3,33
 400b5c8:	10c00015 	stw	r3,0(r2)
 400b5cc:	003fee06 	br	400b588 <__reset+0xfb00a588>
 400b5d0:	4011bd00 	call	4011bd0 <__errno>
 400b5d4:	d8c00817 	ldw	r3,32(sp)
 400b5d8:	10c00015 	stw	r3,0(r2)
 400b5dc:	003fec06 	br	400b590 <__reset+0xfb00a590>

0400b5e0 <__ieee754_atan2>:
 400b5e0:	3013883a 	mov	r9,r6
 400b5e4:	0185c83a 	sub	r2,zero,r6
 400b5e8:	1244b03a 	or	r2,r2,r9
 400b5ec:	01a00034 	movhi	r6,32768
 400b5f0:	1004d7fa 	srli	r2,r2,31
 400b5f4:	31bfffc4 	addi	r6,r6,-1
 400b5f8:	defffe04 	addi	sp,sp,-8
 400b5fc:	3996703a 	and	r11,r7,r6
 400b600:	3815883a 	mov	r10,r7
 400b604:	dfc00115 	stw	ra,4(sp)
 400b608:	dc000015 	stw	r16,0(sp)
 400b60c:	12c4b03a 	or	r2,r2,r11
 400b610:	01dffc34 	movhi	r7,32752
 400b614:	2011883a 	mov	r8,r4
 400b618:	2807883a 	mov	r3,r5
 400b61c:	38803836 	bltu	r7,r2,400b700 <__ieee754_atan2+0x120>
 400b620:	0105c83a 	sub	r2,zero,r4
 400b624:	1104b03a 	or	r2,r2,r4
 400b628:	1004d7fa 	srli	r2,r2,31
 400b62c:	298c703a 	and	r6,r5,r6
 400b630:	1184b03a 	or	r2,r2,r6
 400b634:	38803236 	bltu	r7,r2,400b700 <__ieee754_atan2+0x120>
 400b638:	00b00434 	movhi	r2,49168
 400b63c:	5085883a 	add	r2,r10,r2
 400b640:	1244b03a 	or	r2,r2,r9
 400b644:	10004626 	beq	r2,zero,400b760 <__ieee754_atan2+0x180>
 400b648:	5005d7ba 	srai	r2,r10,30
 400b64c:	2820d7fa 	srli	r16,r5,31
 400b650:	2188b03a 	or	r4,r4,r6
 400b654:	1080008c 	andi	r2,r2,2
 400b658:	1420b03a 	or	r16,r2,r16
 400b65c:	20003126 	beq	r4,zero,400b724 <__ieee754_atan2+0x144>
 400b660:	4ac4b03a 	or	r2,r9,r11
 400b664:	10003826 	beq	r2,zero,400b748 <__ieee754_atan2+0x168>
 400b668:	59c05026 	beq	r11,r7,400b7ac <__ieee754_atan2+0x1cc>
 400b66c:	31c03626 	beq	r6,r7,400b748 <__ieee754_atan2+0x168>
 400b670:	32cdc83a 	sub	r6,r6,r11
 400b674:	300dd53a 	srai	r6,r6,20
 400b678:	00800f04 	movi	r2,60
 400b67c:	11803e16 	blt	r2,r6,400b778 <__ieee754_atan2+0x198>
 400b680:	50006616 	blt	r10,zero,400b81c <__ieee754_atan2+0x23c>
 400b684:	4009883a 	mov	r4,r8
 400b688:	480d883a 	mov	r6,r9
 400b68c:	500f883a 	mov	r7,r10
 400b690:	180b883a 	mov	r5,r3
 400b694:	400fc040 	call	400fc04 <__divdf3>
 400b698:	1009883a 	mov	r4,r2
 400b69c:	180b883a 	mov	r5,r3
 400b6a0:	400b3a80 	call	400b3a8 <fabs>
 400b6a4:	180b883a 	mov	r5,r3
 400b6a8:	1009883a 	mov	r4,r2
 400b6ac:	400ad340 	call	400ad34 <atan>
 400b6b0:	180b883a 	mov	r5,r3
 400b6b4:	01000044 	movi	r4,1
 400b6b8:	81005626 	beq	r16,r4,400b814 <__ieee754_atan2+0x234>
 400b6bc:	01000084 	movi	r4,2
 400b6c0:	81004626 	beq	r16,r4,400b7dc <__ieee754_atan2+0x1fc>
 400b6c4:	80004326 	beq	r16,zero,400b7d4 <__ieee754_atan2+0x1f4>
 400b6c8:	018cc534 	movhi	r6,13076
 400b6cc:	01cf28b4 	movhi	r7,15522
 400b6d0:	319701c4 	addi	r6,r6,23559
 400b6d4:	39e98984 	addi	r7,r7,-23002
 400b6d8:	1009883a 	mov	r4,r2
 400b6dc:	4010e5c0 	call	4010e5c <__subdf3>
 400b6e0:	01951134 	movhi	r6,21572
 400b6e4:	01d00274 	movhi	r7,16393
 400b6e8:	318b4604 	addi	r6,r6,11544
 400b6ec:	39c87ec4 	addi	r7,r7,8699
 400b6f0:	1009883a 	mov	r4,r2
 400b6f4:	180b883a 	mov	r5,r3
 400b6f8:	4010e5c0 	call	4010e5c <__subdf3>
 400b6fc:	00000506 	br	400b714 <__ieee754_atan2+0x134>
 400b700:	400d883a 	mov	r6,r8
 400b704:	180f883a 	mov	r7,r3
 400b708:	4809883a 	mov	r4,r9
 400b70c:	500b883a 	mov	r5,r10
 400b710:	400f3580 	call	400f358 <__adddf3>
 400b714:	dfc00117 	ldw	ra,4(sp)
 400b718:	dc000017 	ldw	r16,0(sp)
 400b71c:	dec00204 	addi	sp,sp,8
 400b720:	f800283a 	ret
 400b724:	00800084 	movi	r2,2
 400b728:	80801826 	beq	r16,r2,400b78c <__ieee754_atan2+0x1ac>
 400b72c:	008000c4 	movi	r2,3
 400b730:	80800f1e 	bne	r16,r2,400b770 <__ieee754_atan2+0x190>
 400b734:	00951134 	movhi	r2,21572
 400b738:	00f00274 	movhi	r3,49161
 400b73c:	108b4604 	addi	r2,r2,11544
 400b740:	18c87ec4 	addi	r3,r3,8699
 400b744:	003ff306 	br	400b714 <__reset+0xfb00a714>
 400b748:	00951134 	movhi	r2,21572
 400b74c:	108b4604 	addi	r2,r2,11544
 400b750:	18001316 	blt	r3,zero,400b7a0 <__ieee754_atan2+0x1c0>
 400b754:	00cffe74 	movhi	r3,16377
 400b758:	18c87ec4 	addi	r3,r3,8699
 400b75c:	003fed06 	br	400b714 <__reset+0xfb00a714>
 400b760:	dfc00117 	ldw	ra,4(sp)
 400b764:	dc000017 	ldw	r16,0(sp)
 400b768:	dec00204 	addi	sp,sp,8
 400b76c:	400ad341 	jmpi	400ad34 <atan>
 400b770:	4005883a 	mov	r2,r8
 400b774:	003fe706 	br	400b714 <__reset+0xfb00a714>
 400b778:	00951134 	movhi	r2,21572
 400b77c:	014ffe74 	movhi	r5,16377
 400b780:	108b4604 	addi	r2,r2,11544
 400b784:	29487ec4 	addi	r5,r5,8699
 400b788:	003fca06 	br	400b6b4 <__reset+0xfb00a6b4>
 400b78c:	00951134 	movhi	r2,21572
 400b790:	00d00274 	movhi	r3,16393
 400b794:	108b4604 	addi	r2,r2,11544
 400b798:	18c87ec4 	addi	r3,r3,8699
 400b79c:	003fdd06 	br	400b714 <__reset+0xfb00a714>
 400b7a0:	00effe74 	movhi	r3,49145
 400b7a4:	18c87ec4 	addi	r3,r3,8699
 400b7a8:	003fda06 	br	400b714 <__reset+0xfb00a714>
 400b7ac:	00800084 	movi	r2,2
 400b7b0:	32c01f26 	beq	r6,r11,400b830 <__ieee754_atan2+0x250>
 400b7b4:	80bff526 	beq	r16,r2,400b78c <__reset+0xfb00a78c>
 400b7b8:	008000c4 	movi	r2,3
 400b7bc:	80bfdd26 	beq	r16,r2,400b734 <__reset+0xfb00a734>
 400b7c0:	00800044 	movi	r2,1
 400b7c4:	80802426 	beq	r16,r2,400b858 <__ieee754_atan2+0x278>
 400b7c8:	0005883a 	mov	r2,zero
 400b7cc:	0007883a 	mov	r3,zero
 400b7d0:	003fd006 	br	400b714 <__reset+0xfb00a714>
 400b7d4:	2807883a 	mov	r3,r5
 400b7d8:	003fce06 	br	400b714 <__reset+0xfb00a714>
 400b7dc:	018cc534 	movhi	r6,13076
 400b7e0:	01cf28b4 	movhi	r7,15522
 400b7e4:	319701c4 	addi	r6,r6,23559
 400b7e8:	39e98984 	addi	r7,r7,-23002
 400b7ec:	1009883a 	mov	r4,r2
 400b7f0:	4010e5c0 	call	4010e5c <__subdf3>
 400b7f4:	01151134 	movhi	r4,21572
 400b7f8:	01500274 	movhi	r5,16393
 400b7fc:	100d883a 	mov	r6,r2
 400b800:	180f883a 	mov	r7,r3
 400b804:	210b4604 	addi	r4,r4,11544
 400b808:	29487ec4 	addi	r5,r5,8699
 400b80c:	4010e5c0 	call	4010e5c <__subdf3>
 400b810:	003fc006 	br	400b714 <__reset+0xfb00a714>
 400b814:	28e0003c 	xorhi	r3,r5,32768
 400b818:	003fbe06 	br	400b714 <__reset+0xfb00a714>
 400b81c:	00bff104 	movi	r2,-60
 400b820:	30bf980e 	bge	r6,r2,400b684 <__reset+0xfb00a684>
 400b824:	0005883a 	mov	r2,zero
 400b828:	000b883a 	mov	r5,zero
 400b82c:	003fa106 	br	400b6b4 <__reset+0xfb00a6b4>
 400b830:	80801626 	beq	r16,r2,400b88c <__ieee754_atan2+0x2ac>
 400b834:	008000c4 	movi	r2,3
 400b838:	80800f26 	beq	r16,r2,400b878 <__ieee754_atan2+0x298>
 400b83c:	00800044 	movi	r2,1
 400b840:	80800826 	beq	r16,r2,400b864 <__ieee754_atan2+0x284>
 400b844:	00951134 	movhi	r2,21572
 400b848:	00cffa74 	movhi	r3,16361
 400b84c:	108b4604 	addi	r2,r2,11544
 400b850:	18c87ec4 	addi	r3,r3,8699
 400b854:	003faf06 	br	400b714 <__reset+0xfb00a714>
 400b858:	0005883a 	mov	r2,zero
 400b85c:	00e00034 	movhi	r3,32768
 400b860:	003fac06 	br	400b714 <__reset+0xfb00a714>
 400b864:	00951134 	movhi	r2,21572
 400b868:	00effa74 	movhi	r3,49129
 400b86c:	108b4604 	addi	r2,r2,11544
 400b870:	18c87ec4 	addi	r3,r3,8699
 400b874:	003fa706 	br	400b714 <__reset+0xfb00a714>
 400b878:	009fccf4 	movhi	r2,32563
 400b87c:	00f000f4 	movhi	r3,49155
 400b880:	10887484 	addi	r2,r2,8658
 400b884:	18f65f04 	addi	r3,r3,-9860
 400b888:	003fa206 	br	400b714 <__reset+0xfb00a714>
 400b88c:	009fccf4 	movhi	r2,32563
 400b890:	00d000f4 	movhi	r3,16387
 400b894:	10887484 	addi	r2,r2,8658
 400b898:	18f65f04 	addi	r3,r3,-9860
 400b89c:	003f9d06 	br	400b714 <__reset+0xfb00a714>

0400b8a0 <__ieee754_rem_pio2>:
 400b8a0:	02200034 	movhi	r8,32768
 400b8a4:	deffea04 	addi	sp,sp,-88
 400b8a8:	423fffc4 	addi	r8,r8,-1
 400b8ac:	00cffa74 	movhi	r3,16361
 400b8b0:	ddc01315 	stw	r23,76(sp)
 400b8b4:	dc400d15 	stw	r17,52(sp)
 400b8b8:	dfc01515 	stw	ra,84(sp)
 400b8bc:	df001415 	stw	fp,80(sp)
 400b8c0:	dd801215 	stw	r22,72(sp)
 400b8c4:	dd401115 	stw	r21,68(sp)
 400b8c8:	dd001015 	stw	r20,64(sp)
 400b8cc:	dcc00f15 	stw	r19,60(sp)
 400b8d0:	dc800e15 	stw	r18,56(sp)
 400b8d4:	dc000c15 	stw	r16,48(sp)
 400b8d8:	2a2e703a 	and	r23,r5,r8
 400b8dc:	18c87ec4 	addi	r3,r3,8699
 400b8e0:	2823883a 	mov	r17,r5
 400b8e4:	1dc0790e 	bge	r3,r23,400bacc <__ieee754_rem_pio2+0x22c>
 400b8e8:	009000f4 	movhi	r2,16387
 400b8ec:	10b65ec4 	addi	r2,r2,-9861
 400b8f0:	3021883a 	mov	r16,r6
 400b8f4:	2027883a 	mov	r19,r4
 400b8f8:	15c02316 	blt	r2,r23,400b988 <__ieee754_rem_pio2+0xe8>
 400b8fc:	01cffe74 	movhi	r7,16377
 400b900:	39c87ec4 	addi	r7,r7,8699
 400b904:	01951034 	movhi	r6,21568
 400b908:	01417a0e 	bge	zero,r5,400bef4 <__ieee754_rem_pio2+0x654>
 400b90c:	4010e5c0 	call	4010e5c <__subdf3>
 400b910:	1025883a 	mov	r18,r2
 400b914:	008ffe74 	movhi	r2,16377
 400b918:	10887ec4 	addi	r2,r2,8699
 400b91c:	1823883a 	mov	r17,r3
 400b920:	b8808426 	beq	r23,r2,400bb34 <__ieee754_rem_pio2+0x294>
 400b924:	018698b4 	movhi	r6,6754
 400b928:	01cf7474 	movhi	r7,15825
 400b92c:	3198cc44 	addi	r6,r6,25393
 400b930:	39ed1844 	addi	r7,r7,-19359
 400b934:	9009883a 	mov	r4,r18
 400b938:	180b883a 	mov	r5,r3
 400b93c:	4010e5c0 	call	4010e5c <__subdf3>
 400b940:	100d883a 	mov	r6,r2
 400b944:	180f883a 	mov	r7,r3
 400b948:	9009883a 	mov	r4,r18
 400b94c:	880b883a 	mov	r5,r17
 400b950:	80800015 	stw	r2,0(r16)
 400b954:	80c00115 	stw	r3,4(r16)
 400b958:	4010e5c0 	call	4010e5c <__subdf3>
 400b95c:	018698b4 	movhi	r6,6754
 400b960:	01cf7474 	movhi	r7,15825
 400b964:	3198cc44 	addi	r6,r6,25393
 400b968:	39ed1844 	addi	r7,r7,-19359
 400b96c:	1009883a 	mov	r4,r2
 400b970:	180b883a 	mov	r5,r3
 400b974:	4010e5c0 	call	4010e5c <__subdf3>
 400b978:	80800215 	stw	r2,8(r16)
 400b97c:	80c00315 	stw	r3,12(r16)
 400b980:	00800044 	movi	r2,1
 400b984:	00005606 	br	400bae0 <__ieee754_rem_pio2+0x240>
 400b988:	00904e74 	movhi	r2,16697
 400b98c:	10887ec4 	addi	r2,r2,8699
 400b990:	15c0830e 	bge	r2,r23,400bba0 <__ieee754_rem_pio2+0x300>
 400b994:	009ffc34 	movhi	r2,32752
 400b998:	10bfffc4 	addi	r2,r2,-1
 400b99c:	15c05c16 	blt	r2,r23,400bb10 <__ieee754_rem_pio2+0x270>
 400b9a0:	b829d53a 	srai	r20,r23,20
 400b9a4:	a53efa84 	addi	r20,r20,-1046
 400b9a8:	a024953a 	slli	r18,r20,20
 400b9ac:	bca5c83a 	sub	r18,r23,r18
 400b9b0:	900b883a 	mov	r5,r18
 400b9b4:	40117580 	call	4011758 <__fixdfsi>
 400b9b8:	1009883a 	mov	r4,r2
 400b9bc:	40117d80 	call	40117d8 <__floatsidf>
 400b9c0:	9809883a 	mov	r4,r19
 400b9c4:	900b883a 	mov	r5,r18
 400b9c8:	100d883a 	mov	r6,r2
 400b9cc:	180f883a 	mov	r7,r3
 400b9d0:	d8800215 	stw	r2,8(sp)
 400b9d4:	d8c00315 	stw	r3,12(sp)
 400b9d8:	4010e5c0 	call	4010e5c <__subdf3>
 400b9dc:	000d883a 	mov	r6,zero
 400b9e0:	01d05c34 	movhi	r7,16752
 400b9e4:	1009883a 	mov	r4,r2
 400b9e8:	180b883a 	mov	r5,r3
 400b9ec:	40107440 	call	4010744 <__muldf3>
 400b9f0:	180b883a 	mov	r5,r3
 400b9f4:	1009883a 	mov	r4,r2
 400b9f8:	182b883a 	mov	r21,r3
 400b9fc:	102d883a 	mov	r22,r2
 400ba00:	40117580 	call	4011758 <__fixdfsi>
 400ba04:	1009883a 	mov	r4,r2
 400ba08:	40117d80 	call	40117d8 <__floatsidf>
 400ba0c:	100d883a 	mov	r6,r2
 400ba10:	180f883a 	mov	r7,r3
 400ba14:	b009883a 	mov	r4,r22
 400ba18:	a80b883a 	mov	r5,r21
 400ba1c:	1027883a 	mov	r19,r2
 400ba20:	1825883a 	mov	r18,r3
 400ba24:	d8800415 	stw	r2,16(sp)
 400ba28:	d8c00515 	stw	r3,20(sp)
 400ba2c:	4010e5c0 	call	4010e5c <__subdf3>
 400ba30:	000d883a 	mov	r6,zero
 400ba34:	01d05c34 	movhi	r7,16752
 400ba38:	1009883a 	mov	r4,r2
 400ba3c:	180b883a 	mov	r5,r3
 400ba40:	40107440 	call	4010744 <__muldf3>
 400ba44:	000d883a 	mov	r6,zero
 400ba48:	000f883a 	mov	r7,zero
 400ba4c:	1009883a 	mov	r4,r2
 400ba50:	180b883a 	mov	r5,r3
 400ba54:	d8800615 	stw	r2,24(sp)
 400ba58:	d8c00715 	stw	r3,28(sp)
 400ba5c:	40104ec0 	call	40104ec <__eqdf2>
 400ba60:	1001431e 	bne	r2,zero,400bf70 <__ieee754_rem_pio2+0x6d0>
 400ba64:	000f883a 	mov	r7,zero
 400ba68:	000d883a 	mov	r6,zero
 400ba6c:	9809883a 	mov	r4,r19
 400ba70:	900b883a 	mov	r5,r18
 400ba74:	40104ec0 	call	40104ec <__eqdf2>
 400ba78:	100f003a 	cmpeq	r7,r2,zero
 400ba7c:	00800084 	movi	r2,2
 400ba80:	11cfc83a 	sub	r7,r2,r7
 400ba84:	00800084 	movi	r2,2
 400ba88:	d8800015 	stw	r2,0(sp)
 400ba8c:	00810234 	movhi	r2,1032
 400ba90:	1086f804 	addi	r2,r2,7136
 400ba94:	d8800115 	stw	r2,4(sp)
 400ba98:	a00d883a 	mov	r6,r20
 400ba9c:	800b883a 	mov	r5,r16
 400baa0:	d9000204 	addi	r4,sp,8
 400baa4:	400c7380 	call	400c738 <__kernel_rem_pio2>
 400baa8:	88000d0e 	bge	r17,zero,400bae0 <__ieee754_rem_pio2+0x240>
 400baac:	81000117 	ldw	r4,4(r16)
 400bab0:	80c00317 	ldw	r3,12(r16)
 400bab4:	0085c83a 	sub	r2,zero,r2
 400bab8:	2120003c 	xorhi	r4,r4,32768
 400babc:	18e0003c 	xorhi	r3,r3,32768
 400bac0:	81000115 	stw	r4,4(r16)
 400bac4:	80c00315 	stw	r3,12(r16)
 400bac8:	00000506 	br	400bae0 <__ieee754_rem_pio2+0x240>
 400bacc:	31000015 	stw	r4,0(r6)
 400bad0:	31400115 	stw	r5,4(r6)
 400bad4:	30000215 	stw	zero,8(r6)
 400bad8:	30000315 	stw	zero,12(r6)
 400badc:	0005883a 	mov	r2,zero
 400bae0:	dfc01517 	ldw	ra,84(sp)
 400bae4:	df001417 	ldw	fp,80(sp)
 400bae8:	ddc01317 	ldw	r23,76(sp)
 400baec:	dd801217 	ldw	r22,72(sp)
 400baf0:	dd401117 	ldw	r21,68(sp)
 400baf4:	dd001017 	ldw	r20,64(sp)
 400baf8:	dcc00f17 	ldw	r19,60(sp)
 400bafc:	dc800e17 	ldw	r18,56(sp)
 400bb00:	dc400d17 	ldw	r17,52(sp)
 400bb04:	dc000c17 	ldw	r16,48(sp)
 400bb08:	dec01604 	addi	sp,sp,88
 400bb0c:	f800283a 	ret
 400bb10:	200d883a 	mov	r6,r4
 400bb14:	280f883a 	mov	r7,r5
 400bb18:	4010e5c0 	call	4010e5c <__subdf3>
 400bb1c:	80800215 	stw	r2,8(r16)
 400bb20:	80800015 	stw	r2,0(r16)
 400bb24:	80c00315 	stw	r3,12(r16)
 400bb28:	80c00115 	stw	r3,4(r16)
 400bb2c:	0005883a 	mov	r2,zero
 400bb30:	003feb06 	br	400bae0 <__reset+0xfb00aae0>
 400bb34:	01cf7474 	movhi	r7,15825
 400bb38:	9009883a 	mov	r4,r18
 400bb3c:	39ed1844 	addi	r7,r7,-19359
 400bb40:	01869834 	movhi	r6,6752
 400bb44:	180b883a 	mov	r5,r3
 400bb48:	4010e5c0 	call	4010e5c <__subdf3>
 400bb4c:	018b80f4 	movhi	r6,11779
 400bb50:	01cee8f4 	movhi	r7,15267
 400bb54:	319c1cc4 	addi	r6,r6,28787
 400bb58:	39c66284 	addi	r7,r7,6538
 400bb5c:	1009883a 	mov	r4,r2
 400bb60:	180b883a 	mov	r5,r3
 400bb64:	1025883a 	mov	r18,r2
 400bb68:	1823883a 	mov	r17,r3
 400bb6c:	4010e5c0 	call	4010e5c <__subdf3>
 400bb70:	100d883a 	mov	r6,r2
 400bb74:	180f883a 	mov	r7,r3
 400bb78:	9009883a 	mov	r4,r18
 400bb7c:	880b883a 	mov	r5,r17
 400bb80:	80800015 	stw	r2,0(r16)
 400bb84:	80c00115 	stw	r3,4(r16)
 400bb88:	4010e5c0 	call	4010e5c <__subdf3>
 400bb8c:	018b80f4 	movhi	r6,11779
 400bb90:	01cee8f4 	movhi	r7,15267
 400bb94:	319c1cc4 	addi	r6,r6,28787
 400bb98:	39c66284 	addi	r7,r7,6538
 400bb9c:	003f7306 	br	400b96c <__reset+0xfb00a96c>
 400bba0:	400b3a80 	call	400b3a8 <fabs>
 400bba4:	019b72b4 	movhi	r6,28106
 400bba8:	01cff934 	movhi	r7,16356
 400bbac:	31b220c4 	addi	r6,r6,-14205
 400bbb0:	39d7cc04 	addi	r7,r7,24368
 400bbb4:	1009883a 	mov	r4,r2
 400bbb8:	180b883a 	mov	r5,r3
 400bbbc:	102d883a 	mov	r22,r2
 400bbc0:	182b883a 	mov	r21,r3
 400bbc4:	40107440 	call	4010744 <__muldf3>
 400bbc8:	000d883a 	mov	r6,zero
 400bbcc:	01cff834 	movhi	r7,16352
 400bbd0:	1009883a 	mov	r4,r2
 400bbd4:	180b883a 	mov	r5,r3
 400bbd8:	400f3580 	call	400f358 <__adddf3>
 400bbdc:	180b883a 	mov	r5,r3
 400bbe0:	1009883a 	mov	r4,r2
 400bbe4:	40117580 	call	4011758 <__fixdfsi>
 400bbe8:	1009883a 	mov	r4,r2
 400bbec:	1025883a 	mov	r18,r2
 400bbf0:	40117d80 	call	40117d8 <__floatsidf>
 400bbf4:	01cffe74 	movhi	r7,16377
 400bbf8:	39c87ec4 	addi	r7,r7,8699
 400bbfc:	01951034 	movhi	r6,21568
 400bc00:	1009883a 	mov	r4,r2
 400bc04:	180b883a 	mov	r5,r3
 400bc08:	1029883a 	mov	r20,r2
 400bc0c:	1827883a 	mov	r19,r3
 400bc10:	40107440 	call	4010744 <__muldf3>
 400bc14:	b009883a 	mov	r4,r22
 400bc18:	a80b883a 	mov	r5,r21
 400bc1c:	100d883a 	mov	r6,r2
 400bc20:	180f883a 	mov	r7,r3
 400bc24:	4010e5c0 	call	4010e5c <__subdf3>
 400bc28:	018698b4 	movhi	r6,6754
 400bc2c:	01cf7474 	movhi	r7,15825
 400bc30:	a009883a 	mov	r4,r20
 400bc34:	3198cc44 	addi	r6,r6,25393
 400bc38:	39ed1844 	addi	r7,r7,-19359
 400bc3c:	980b883a 	mov	r5,r19
 400bc40:	1039883a 	mov	fp,r2
 400bc44:	d8c00815 	stw	r3,32(sp)
 400bc48:	40107440 	call	4010744 <__muldf3>
 400bc4c:	010007c4 	movi	r4,31
 400bc50:	e017883a 	mov	r11,fp
 400bc54:	da800817 	ldw	r10,32(sp)
 400bc58:	102d883a 	mov	r22,r2
 400bc5c:	182b883a 	mov	r21,r3
 400bc60:	24802816 	blt	r4,r18,400bd04 <__ieee754_rem_pio2+0x464>
 400bc64:	913fffc4 	addi	r4,r18,-1
 400bc68:	2109883a 	add	r4,r4,r4
 400bc6c:	01410234 	movhi	r5,1032
 400bc70:	2109883a 	add	r4,r4,r4
 400bc74:	2946d804 	addi	r5,r5,7008
 400bc78:	2909883a 	add	r4,r5,r4
 400bc7c:	21000017 	ldw	r4,0(r4)
 400bc80:	b9002026 	beq	r23,r4,400bd04 <__ieee754_rem_pio2+0x464>
 400bc84:	100d883a 	mov	r6,r2
 400bc88:	180f883a 	mov	r7,r3
 400bc8c:	e009883a 	mov	r4,fp
 400bc90:	500b883a 	mov	r5,r10
 400bc94:	da800b15 	stw	r10,44(sp)
 400bc98:	df000a15 	stw	fp,40(sp)
 400bc9c:	4010e5c0 	call	4010e5c <__subdf3>
 400bca0:	da800b17 	ldw	r10,44(sp)
 400bca4:	dac00a17 	ldw	r11,40(sp)
 400bca8:	1019883a 	mov	r12,r2
 400bcac:	1813883a 	mov	r9,r3
 400bcb0:	80800015 	stw	r2,0(r16)
 400bcb4:	80c00115 	stw	r3,4(r16)
 400bcb8:	600d883a 	mov	r6,r12
 400bcbc:	480f883a 	mov	r7,r9
 400bcc0:	5809883a 	mov	r4,r11
 400bcc4:	500b883a 	mov	r5,r10
 400bcc8:	da400b15 	stw	r9,44(sp)
 400bccc:	db000a15 	stw	r12,40(sp)
 400bcd0:	4010e5c0 	call	4010e5c <__subdf3>
 400bcd4:	b00d883a 	mov	r6,r22
 400bcd8:	a80f883a 	mov	r7,r21
 400bcdc:	1009883a 	mov	r4,r2
 400bce0:	180b883a 	mov	r5,r3
 400bce4:	4010e5c0 	call	4010e5c <__subdf3>
 400bce8:	80800215 	stw	r2,8(r16)
 400bcec:	80c00315 	stw	r3,12(r16)
 400bcf0:	da400b17 	ldw	r9,44(sp)
 400bcf4:	db000a17 	ldw	r12,40(sp)
 400bcf8:	88009f16 	blt	r17,zero,400bf78 <__ieee754_rem_pio2+0x6d8>
 400bcfc:	9005883a 	mov	r2,r18
 400bd00:	003f7706 	br	400bae0 <__reset+0xfb00aae0>
 400bd04:	d9400817 	ldw	r5,32(sp)
 400bd08:	100d883a 	mov	r6,r2
 400bd0c:	180f883a 	mov	r7,r3
 400bd10:	e009883a 	mov	r4,fp
 400bd14:	da800b15 	stw	r10,44(sp)
 400bd18:	dac00a15 	stw	r11,40(sp)
 400bd1c:	4010e5c0 	call	4010e5c <__subdf3>
 400bd20:	1019883a 	mov	r12,r2
 400bd24:	1804d53a 	srli	r2,r3,20
 400bd28:	b811d53a 	srai	r8,r23,20
 400bd2c:	1813883a 	mov	r9,r3
 400bd30:	1081ffcc 	andi	r2,r2,2047
 400bd34:	80c00115 	stw	r3,4(r16)
 400bd38:	83000015 	stw	r12,0(r16)
 400bd3c:	4085c83a 	sub	r2,r8,r2
 400bd40:	00c00404 	movi	r3,16
 400bd44:	da800b17 	ldw	r10,44(sp)
 400bd48:	dac00a17 	ldw	r11,40(sp)
 400bd4c:	18bfda0e 	bge	r3,r2,400bcb8 <__reset+0xfb00acb8>
 400bd50:	01cf7474 	movhi	r7,15825
 400bd54:	39ed1844 	addi	r7,r7,-19359
 400bd58:	01869834 	movhi	r6,6752
 400bd5c:	a009883a 	mov	r4,r20
 400bd60:	980b883a 	mov	r5,r19
 400bd64:	da000a15 	stw	r8,40(sp)
 400bd68:	40107440 	call	4010744 <__muldf3>
 400bd6c:	d9400817 	ldw	r5,32(sp)
 400bd70:	100d883a 	mov	r6,r2
 400bd74:	180f883a 	mov	r7,r3
 400bd78:	e009883a 	mov	r4,fp
 400bd7c:	102d883a 	mov	r22,r2
 400bd80:	182b883a 	mov	r21,r3
 400bd84:	4010e5c0 	call	4010e5c <__subdf3>
 400bd88:	d9400817 	ldw	r5,32(sp)
 400bd8c:	100d883a 	mov	r6,r2
 400bd90:	180f883a 	mov	r7,r3
 400bd94:	e009883a 	mov	r4,fp
 400bd98:	182f883a 	mov	r23,r3
 400bd9c:	d8800915 	stw	r2,36(sp)
 400bda0:	4010e5c0 	call	4010e5c <__subdf3>
 400bda4:	b00d883a 	mov	r6,r22
 400bda8:	a80f883a 	mov	r7,r21
 400bdac:	1009883a 	mov	r4,r2
 400bdb0:	180b883a 	mov	r5,r3
 400bdb4:	4010e5c0 	call	4010e5c <__subdf3>
 400bdb8:	018b80f4 	movhi	r6,11779
 400bdbc:	01cee8f4 	movhi	r7,15267
 400bdc0:	319c1cc4 	addi	r6,r6,28787
 400bdc4:	39c66284 	addi	r7,r7,6538
 400bdc8:	a009883a 	mov	r4,r20
 400bdcc:	980b883a 	mov	r5,r19
 400bdd0:	102d883a 	mov	r22,r2
 400bdd4:	182b883a 	mov	r21,r3
 400bdd8:	40107440 	call	4010744 <__muldf3>
 400bddc:	b00d883a 	mov	r6,r22
 400bde0:	a80f883a 	mov	r7,r21
 400bde4:	1009883a 	mov	r4,r2
 400bde8:	180b883a 	mov	r5,r3
 400bdec:	4010e5c0 	call	4010e5c <__subdf3>
 400bdf0:	d9000917 	ldw	r4,36(sp)
 400bdf4:	100d883a 	mov	r6,r2
 400bdf8:	180f883a 	mov	r7,r3
 400bdfc:	b80b883a 	mov	r5,r23
 400be00:	102d883a 	mov	r22,r2
 400be04:	182b883a 	mov	r21,r3
 400be08:	4010e5c0 	call	4010e5c <__subdf3>
 400be0c:	1019883a 	mov	r12,r2
 400be10:	1804d53a 	srli	r2,r3,20
 400be14:	da000a17 	ldw	r8,40(sp)
 400be18:	83000015 	stw	r12,0(r16)
 400be1c:	1081ffcc 	andi	r2,r2,2047
 400be20:	4091c83a 	sub	r8,r8,r2
 400be24:	80c00115 	stw	r3,4(r16)
 400be28:	00800c44 	movi	r2,49
 400be2c:	1813883a 	mov	r9,r3
 400be30:	1200730e 	bge	r2,r8,400c000 <__ieee754_rem_pio2+0x760>
 400be34:	01cee8f4 	movhi	r7,15267
 400be38:	39c66284 	addi	r7,r7,6538
 400be3c:	018b8034 	movhi	r6,11776
 400be40:	a009883a 	mov	r4,r20
 400be44:	980b883a 	mov	r5,r19
 400be48:	40107440 	call	4010744 <__muldf3>
 400be4c:	d9000917 	ldw	r4,36(sp)
 400be50:	100d883a 	mov	r6,r2
 400be54:	180f883a 	mov	r7,r3
 400be58:	b80b883a 	mov	r5,r23
 400be5c:	102d883a 	mov	r22,r2
 400be60:	182b883a 	mov	r21,r3
 400be64:	4010e5c0 	call	4010e5c <__subdf3>
 400be68:	d9000917 	ldw	r4,36(sp)
 400be6c:	100d883a 	mov	r6,r2
 400be70:	180f883a 	mov	r7,r3
 400be74:	b80b883a 	mov	r5,r23
 400be78:	d8c00b15 	stw	r3,44(sp)
 400be7c:	d8800a15 	stw	r2,40(sp)
 400be80:	4010e5c0 	call	4010e5c <__subdf3>
 400be84:	b00d883a 	mov	r6,r22
 400be88:	a80f883a 	mov	r7,r21
 400be8c:	1009883a 	mov	r4,r2
 400be90:	180b883a 	mov	r5,r3
 400be94:	4010e5c0 	call	4010e5c <__subdf3>
 400be98:	01894834 	movhi	r6,9504
 400be9c:	01ce5f34 	movhi	r7,14716
 400bea0:	31927044 	addi	r6,r6,18881
 400bea4:	39e0e684 	addi	r7,r7,-31846
 400bea8:	a009883a 	mov	r4,r20
 400beac:	980b883a 	mov	r5,r19
 400beb0:	102d883a 	mov	r22,r2
 400beb4:	182b883a 	mov	r21,r3
 400beb8:	40107440 	call	4010744 <__muldf3>
 400bebc:	b00d883a 	mov	r6,r22
 400bec0:	a80f883a 	mov	r7,r21
 400bec4:	1009883a 	mov	r4,r2
 400bec8:	180b883a 	mov	r5,r3
 400becc:	4010e5c0 	call	4010e5c <__subdf3>
 400bed0:	dac00a17 	ldw	r11,40(sp)
 400bed4:	da800b17 	ldw	r10,44(sp)
 400bed8:	102d883a 	mov	r22,r2
 400bedc:	182b883a 	mov	r21,r3
 400bee0:	100d883a 	mov	r6,r2
 400bee4:	180f883a 	mov	r7,r3
 400bee8:	5809883a 	mov	r4,r11
 400beec:	500b883a 	mov	r5,r10
 400bef0:	003f6a06 	br	400bc9c <__reset+0xfb00ac9c>
 400bef4:	400f3580 	call	400f358 <__adddf3>
 400bef8:	1025883a 	mov	r18,r2
 400befc:	008ffe74 	movhi	r2,16377
 400bf00:	10887ec4 	addi	r2,r2,8699
 400bf04:	1823883a 	mov	r17,r3
 400bf08:	b8802226 	beq	r23,r2,400bf94 <__ieee754_rem_pio2+0x6f4>
 400bf0c:	018698b4 	movhi	r6,6754
 400bf10:	01cf7474 	movhi	r7,15825
 400bf14:	3198cc44 	addi	r6,r6,25393
 400bf18:	39ed1844 	addi	r7,r7,-19359
 400bf1c:	9009883a 	mov	r4,r18
 400bf20:	180b883a 	mov	r5,r3
 400bf24:	400f3580 	call	400f358 <__adddf3>
 400bf28:	100d883a 	mov	r6,r2
 400bf2c:	180f883a 	mov	r7,r3
 400bf30:	9009883a 	mov	r4,r18
 400bf34:	880b883a 	mov	r5,r17
 400bf38:	80800015 	stw	r2,0(r16)
 400bf3c:	80c00115 	stw	r3,4(r16)
 400bf40:	4010e5c0 	call	4010e5c <__subdf3>
 400bf44:	018698b4 	movhi	r6,6754
 400bf48:	01cf7474 	movhi	r7,15825
 400bf4c:	3198cc44 	addi	r6,r6,25393
 400bf50:	39ed1844 	addi	r7,r7,-19359
 400bf54:	1009883a 	mov	r4,r2
 400bf58:	180b883a 	mov	r5,r3
 400bf5c:	400f3580 	call	400f358 <__adddf3>
 400bf60:	80800215 	stw	r2,8(r16)
 400bf64:	80c00315 	stw	r3,12(r16)
 400bf68:	00bfffc4 	movi	r2,-1
 400bf6c:	003edc06 	br	400bae0 <__reset+0xfb00aae0>
 400bf70:	01c000c4 	movi	r7,3
 400bf74:	003ec306 	br	400ba84 <__reset+0xfb00aa84>
 400bf78:	4a60003c 	xorhi	r9,r9,32768
 400bf7c:	18e0003c 	xorhi	r3,r3,32768
 400bf80:	83000015 	stw	r12,0(r16)
 400bf84:	82400115 	stw	r9,4(r16)
 400bf88:	80c00315 	stw	r3,12(r16)
 400bf8c:	0485c83a 	sub	r2,zero,r18
 400bf90:	003ed306 	br	400bae0 <__reset+0xfb00aae0>
 400bf94:	01cf7474 	movhi	r7,15825
 400bf98:	9009883a 	mov	r4,r18
 400bf9c:	39ed1844 	addi	r7,r7,-19359
 400bfa0:	01869834 	movhi	r6,6752
 400bfa4:	180b883a 	mov	r5,r3
 400bfa8:	400f3580 	call	400f358 <__adddf3>
 400bfac:	018b80f4 	movhi	r6,11779
 400bfb0:	01cee8f4 	movhi	r7,15267
 400bfb4:	319c1cc4 	addi	r6,r6,28787
 400bfb8:	39c66284 	addi	r7,r7,6538
 400bfbc:	1009883a 	mov	r4,r2
 400bfc0:	180b883a 	mov	r5,r3
 400bfc4:	1025883a 	mov	r18,r2
 400bfc8:	1823883a 	mov	r17,r3
 400bfcc:	400f3580 	call	400f358 <__adddf3>
 400bfd0:	100d883a 	mov	r6,r2
 400bfd4:	180f883a 	mov	r7,r3
 400bfd8:	9009883a 	mov	r4,r18
 400bfdc:	880b883a 	mov	r5,r17
 400bfe0:	80800015 	stw	r2,0(r16)
 400bfe4:	80c00115 	stw	r3,4(r16)
 400bfe8:	4010e5c0 	call	4010e5c <__subdf3>
 400bfec:	018b80f4 	movhi	r6,11779
 400bff0:	01cee8f4 	movhi	r7,15267
 400bff4:	319c1cc4 	addi	r6,r6,28787
 400bff8:	39c66284 	addi	r7,r7,6538
 400bffc:	003fd506 	br	400bf54 <__reset+0xfb00af54>
 400c000:	dac00917 	ldw	r11,36(sp)
 400c004:	b815883a 	mov	r10,r23
 400c008:	003f2b06 	br	400bcb8 <__reset+0xfb00acb8>

0400c00c <__ieee754_sqrt>:
 400c00c:	defffd04 	addi	sp,sp,-12
 400c010:	dc400115 	stw	r17,4(sp)
 400c014:	dc000015 	stw	r16,0(sp)
 400c018:	dfc00215 	stw	ra,8(sp)
 400c01c:	28dffc2c 	andhi	r3,r5,32752
 400c020:	009ffc34 	movhi	r2,32752
 400c024:	2821883a 	mov	r16,r5
 400c028:	2023883a 	mov	r17,r4
 400c02c:	200d883a 	mov	r6,r4
 400c030:	18807b26 	beq	r3,r2,400c220 <__ieee754_sqrt+0x214>
 400c034:	01405f0e 	bge	zero,r5,400c1b4 <__ieee754_sqrt+0x1a8>
 400c038:	2815d53a 	srai	r10,r5,20
 400c03c:	50006a26 	beq	r10,zero,400c1e8 <__ieee754_sqrt+0x1dc>
 400c040:	00c00434 	movhi	r3,16
 400c044:	52bf0044 	addi	r10,r10,-1023
 400c048:	18ffffc4 	addi	r3,r3,-1
 400c04c:	80c6703a 	and	r3,r16,r3
 400c050:	5080004c 	andi	r2,r10,1
 400c054:	18c00434 	orhi	r3,r3,16
 400c058:	1000511e 	bne	r2,zero,400c1a0 <__ieee754_sqrt+0x194>
 400c05c:	3004d7fa 	srli	r2,r6,31
 400c060:	5015d07a 	srai	r10,r10,1
 400c064:	18c7883a 	add	r3,r3,r3
 400c068:	10c5883a 	add	r2,r2,r3
 400c06c:	01400584 	movi	r5,22
 400c070:	3187883a 	add	r3,r6,r6
 400c074:	0013883a 	mov	r9,zero
 400c078:	000f883a 	mov	r7,zero
 400c07c:	01000834 	movhi	r4,32
 400c080:	390d883a 	add	r6,r7,r4
 400c084:	1810d7fa 	srli	r8,r3,31
 400c088:	297fffc4 	addi	r5,r5,-1
 400c08c:	11800316 	blt	r2,r6,400c09c <__ieee754_sqrt+0x90>
 400c090:	1185c83a 	sub	r2,r2,r6
 400c094:	310f883a 	add	r7,r6,r4
 400c098:	4913883a 	add	r9,r9,r4
 400c09c:	1085883a 	add	r2,r2,r2
 400c0a0:	4085883a 	add	r2,r8,r2
 400c0a4:	18c7883a 	add	r3,r3,r3
 400c0a8:	2008d07a 	srli	r4,r4,1
 400c0ac:	283ff41e 	bne	r5,zero,400c080 <__reset+0xfb00b080>
 400c0b0:	01200034 	movhi	r4,32768
 400c0b4:	01800804 	movi	r6,32
 400c0b8:	0011883a 	mov	r8,zero
 400c0bc:	0019883a 	mov	r12,zero
 400c0c0:	201b883a 	mov	r13,r4
 400c0c4:	00000806 	br	400c0e8 <__ieee754_sqrt+0xdc>
 400c0c8:	38801726 	beq	r7,r2,400c128 <__ieee754_sqrt+0x11c>
 400c0cc:	180ad7fa 	srli	r5,r3,31
 400c0d0:	1085883a 	add	r2,r2,r2
 400c0d4:	31bfffc4 	addi	r6,r6,-1
 400c0d8:	2885883a 	add	r2,r5,r2
 400c0dc:	18c7883a 	add	r3,r3,r3
 400c0e0:	2008d07a 	srli	r4,r4,1
 400c0e4:	30001726 	beq	r6,zero,400c144 <__ieee754_sqrt+0x138>
 400c0e8:	230b883a 	add	r5,r4,r12
 400c0ec:	38bff60e 	bge	r7,r2,400c0c8 <__reset+0xfb00b0c8>
 400c0f0:	2ae0002c 	andhi	r11,r5,32768
 400c0f4:	2919883a 	add	r12,r5,r4
 400c0f8:	5b400826 	beq	r11,r13,400c11c <__ieee754_sqrt+0x110>
 400c0fc:	3817883a 	mov	r11,r7
 400c100:	11c5c83a 	sub	r2,r2,r7
 400c104:	1940012e 	bgeu	r3,r5,400c10c <__ieee754_sqrt+0x100>
 400c108:	10bfffc4 	addi	r2,r2,-1
 400c10c:	1947c83a 	sub	r3,r3,r5
 400c110:	4111883a 	add	r8,r8,r4
 400c114:	580f883a 	mov	r7,r11
 400c118:	003fec06 	br	400c0cc <__reset+0xfb00b0cc>
 400c11c:	603ff716 	blt	r12,zero,400c0fc <__reset+0xfb00b0fc>
 400c120:	3ac00044 	addi	r11,r7,1
 400c124:	003ff606 	br	400c100 <__reset+0xfb00b100>
 400c128:	19401936 	bltu	r3,r5,400c190 <__ieee754_sqrt+0x184>
 400c12c:	2ae0002c 	andhi	r11,r5,32768
 400c130:	2919883a 	add	r12,r5,r4
 400c134:	5b404526 	beq	r11,r13,400c24c <__ieee754_sqrt+0x240>
 400c138:	1017883a 	mov	r11,r2
 400c13c:	0005883a 	mov	r2,zero
 400c140:	003ff206 	br	400c10c <__reset+0xfb00b10c>
 400c144:	10c4b03a 	or	r2,r2,r3
 400c148:	10000426 	beq	r2,zero,400c15c <__ieee754_sqrt+0x150>
 400c14c:	00bfffc4 	movi	r2,-1
 400c150:	40804026 	beq	r8,r2,400c254 <__ieee754_sqrt+0x248>
 400c154:	4080004c 	andi	r2,r8,1
 400c158:	4091883a 	add	r8,r8,r2
 400c15c:	4004d07a 	srli	r2,r8,1
 400c160:	4807d07a 	srai	r3,r9,1
 400c164:	010ff834 	movhi	r4,16352
 400c168:	4a40004c 	andi	r9,r9,1
 400c16c:	1909883a 	add	r4,r3,r4
 400c170:	4800091e 	bne	r9,zero,400c198 <__ieee754_sqrt+0x18c>
 400c174:	5006953a 	slli	r3,r10,20
 400c178:	1907883a 	add	r3,r3,r4
 400c17c:	dfc00217 	ldw	ra,8(sp)
 400c180:	dc400117 	ldw	r17,4(sp)
 400c184:	dc000017 	ldw	r16,0(sp)
 400c188:	dec00304 	addi	sp,sp,12
 400c18c:	f800283a 	ret
 400c190:	3805883a 	mov	r2,r7
 400c194:	003fcd06 	br	400c0cc <__reset+0xfb00b0cc>
 400c198:	10a00034 	orhi	r2,r2,32768
 400c19c:	003ff506 	br	400c174 <__reset+0xfb00b174>
 400c1a0:	3004d7fa 	srli	r2,r6,31
 400c1a4:	18c7883a 	add	r3,r3,r3
 400c1a8:	318d883a 	add	r6,r6,r6
 400c1ac:	10c7883a 	add	r3,r2,r3
 400c1b0:	003faa06 	br	400c05c <__reset+0xfb00b05c>
 400c1b4:	00a00034 	movhi	r2,32768
 400c1b8:	10bfffc4 	addi	r2,r2,-1
 400c1bc:	2884703a 	and	r2,r5,r2
 400c1c0:	1104b03a 	or	r2,r2,r4
 400c1c4:	10001e26 	beq	r2,zero,400c240 <__ieee754_sqrt+0x234>
 400c1c8:	2800291e 	bne	r5,zero,400c270 <__ieee754_sqrt+0x264>
 400c1cc:	0015883a 	mov	r10,zero
 400c1d0:	3020d2fa 	srli	r16,r6,11
 400c1d4:	52bffac4 	addi	r10,r10,-21
 400c1d8:	300c957a 	slli	r6,r6,21
 400c1dc:	803ffc26 	beq	r16,zero,400c1d0 <__reset+0xfb00b1d0>
 400c1e0:	8080042c 	andhi	r2,r16,16
 400c1e4:	10001e1e 	bne	r2,zero,400c260 <__ieee754_sqrt+0x254>
 400c1e8:	0005883a 	mov	r2,zero
 400c1ec:	00000106 	br	400c1f4 <__ieee754_sqrt+0x1e8>
 400c1f0:	1805883a 	mov	r2,r3
 400c1f4:	8421883a 	add	r16,r16,r16
 400c1f8:	8100042c 	andhi	r4,r16,16
 400c1fc:	10c00044 	addi	r3,r2,1
 400c200:	203ffb26 	beq	r4,zero,400c1f0 <__reset+0xfb00b1f0>
 400c204:	01000804 	movi	r4,32
 400c208:	20c9c83a 	sub	r4,r4,r3
 400c20c:	3108d83a 	srl	r4,r6,r4
 400c210:	5095c83a 	sub	r10,r10,r2
 400c214:	30cc983a 	sll	r6,r6,r3
 400c218:	2420b03a 	or	r16,r4,r16
 400c21c:	003f8806 	br	400c040 <__reset+0xfb00b040>
 400c220:	280f883a 	mov	r7,r5
 400c224:	40107440 	call	4010744 <__muldf3>
 400c228:	880d883a 	mov	r6,r17
 400c22c:	800f883a 	mov	r7,r16
 400c230:	1009883a 	mov	r4,r2
 400c234:	180b883a 	mov	r5,r3
 400c238:	400f3580 	call	400f358 <__adddf3>
 400c23c:	003fcf06 	br	400c17c <__reset+0xfb00b17c>
 400c240:	2005883a 	mov	r2,r4
 400c244:	2807883a 	mov	r3,r5
 400c248:	003fcc06 	br	400c17c <__reset+0xfb00b17c>
 400c24c:	603fba16 	blt	r12,zero,400c138 <__reset+0xfb00b138>
 400c250:	003fb306 	br	400c120 <__reset+0xfb00b120>
 400c254:	4a400044 	addi	r9,r9,1
 400c258:	0005883a 	mov	r2,zero
 400c25c:	003fc006 	br	400c160 <__reset+0xfb00b160>
 400c260:	01000804 	movi	r4,32
 400c264:	00bfffc4 	movi	r2,-1
 400c268:	0007883a 	mov	r3,zero
 400c26c:	003fe706 	br	400c20c <__reset+0xfb00b20c>
 400c270:	200d883a 	mov	r6,r4
 400c274:	280f883a 	mov	r7,r5
 400c278:	4010e5c0 	call	4010e5c <__subdf3>
 400c27c:	100d883a 	mov	r6,r2
 400c280:	180f883a 	mov	r7,r3
 400c284:	1009883a 	mov	r4,r2
 400c288:	180b883a 	mov	r5,r3
 400c28c:	400fc040 	call	400fc04 <__divdf3>
 400c290:	003fba06 	br	400c17c <__reset+0xfb00b17c>

0400c294 <__kernel_cos>:
 400c294:	defff304 	addi	sp,sp,-52
 400c298:	dc000315 	stw	r16,12(sp)
 400c29c:	04200034 	movhi	r16,32768
 400c2a0:	843fffc4 	addi	r16,r16,-1
 400c2a4:	008f9034 	movhi	r2,15936
 400c2a8:	df000b15 	stw	fp,44(sp)
 400c2ac:	ddc00a15 	stw	r23,40(sp)
 400c2b0:	dd800915 	stw	r22,36(sp)
 400c2b4:	dcc00615 	stw	r19,24(sp)
 400c2b8:	dfc00c15 	stw	ra,48(sp)
 400c2bc:	dd400815 	stw	r21,32(sp)
 400c2c0:	dd000715 	stw	r20,28(sp)
 400c2c4:	dc800515 	stw	r18,20(sp)
 400c2c8:	dc400415 	stw	r17,16(sp)
 400c2cc:	2c20703a 	and	r16,r5,r16
 400c2d0:	10bfffc4 	addi	r2,r2,-1
 400c2d4:	2827883a 	mov	r19,r5
 400c2d8:	202d883a 	mov	r22,r4
 400c2dc:	302f883a 	mov	r23,r6
 400c2e0:	3839883a 	mov	fp,r7
 400c2e4:	14007516 	blt	r2,r16,400c4bc <__kernel_cos+0x228>
 400c2e8:	40117580 	call	4011758 <__fixdfsi>
 400c2ec:	10010f26 	beq	r2,zero,400c72c <__kernel_cos+0x498>
 400c2f0:	b00d883a 	mov	r6,r22
 400c2f4:	980f883a 	mov	r7,r19
 400c2f8:	b009883a 	mov	r4,r22
 400c2fc:	980b883a 	mov	r5,r19
 400c300:	40107440 	call	4010744 <__muldf3>
 400c304:	01afa234 	movhi	r6,48776
 400c308:	01ef6a74 	movhi	r7,48553
 400c30c:	318e3504 	addi	r6,r6,14548
 400c310:	39feba44 	addi	r7,r7,-1303
 400c314:	1009883a 	mov	r4,r2
 400c318:	180b883a 	mov	r5,r3
 400c31c:	102b883a 	mov	r21,r2
 400c320:	1829883a 	mov	r20,r3
 400c324:	40107440 	call	4010744 <__muldf3>
 400c328:	01af6d74 	movhi	r6,48565
 400c32c:	01cf88b4 	movhi	r7,15906
 400c330:	31ac7104 	addi	r6,r6,-20028
 400c334:	39fba784 	addi	r7,r7,-4450
 400c338:	1009883a 	mov	r4,r2
 400c33c:	180b883a 	mov	r5,r3
 400c340:	400f3580 	call	400f358 <__adddf3>
 400c344:	a80d883a 	mov	r6,r21
 400c348:	a00f883a 	mov	r7,r20
 400c34c:	1009883a 	mov	r4,r2
 400c350:	180b883a 	mov	r5,r3
 400c354:	40107440 	call	4010744 <__muldf3>
 400c358:	01a02734 	movhi	r6,32924
 400c35c:	01cfa4b4 	movhi	r7,16018
 400c360:	3194ab44 	addi	r6,r6,21165
 400c364:	39df93c4 	addi	r7,r7,32335
 400c368:	1009883a 	mov	r4,r2
 400c36c:	180b883a 	mov	r5,r3
 400c370:	4010e5c0 	call	4010e5c <__subdf3>
 400c374:	a80d883a 	mov	r6,r21
 400c378:	a00f883a 	mov	r7,r20
 400c37c:	1009883a 	mov	r4,r2
 400c380:	180b883a 	mov	r5,r3
 400c384:	40107440 	call	4010744 <__muldf3>
 400c388:	018672f4 	movhi	r6,6603
 400c38c:	01cfbeb4 	movhi	r7,16122
 400c390:	31856404 	addi	r6,r6,5520
 400c394:	39c06804 	addi	r7,r7,416
 400c398:	1009883a 	mov	r4,r2
 400c39c:	180b883a 	mov	r5,r3
 400c3a0:	400f3580 	call	400f358 <__adddf3>
 400c3a4:	a80d883a 	mov	r6,r21
 400c3a8:	a00f883a 	mov	r7,r20
 400c3ac:	1009883a 	mov	r4,r2
 400c3b0:	180b883a 	mov	r5,r3
 400c3b4:	40107440 	call	4010744 <__muldf3>
 400c3b8:	0185b074 	movhi	r6,5825
 400c3bc:	01cfd5f4 	movhi	r7,16215
 400c3c0:	31945dc4 	addi	r6,r6,20855
 400c3c4:	39f05b04 	addi	r7,r7,-16020
 400c3c8:	1009883a 	mov	r4,r2
 400c3cc:	180b883a 	mov	r5,r3
 400c3d0:	4010e5c0 	call	4010e5c <__subdf3>
 400c3d4:	a80d883a 	mov	r6,r21
 400c3d8:	a00f883a 	mov	r7,r20
 400c3dc:	1009883a 	mov	r4,r2
 400c3e0:	180b883a 	mov	r5,r3
 400c3e4:	40107440 	call	4010744 <__muldf3>
 400c3e8:	01955574 	movhi	r6,21845
 400c3ec:	01cfe974 	movhi	r7,16293
 400c3f0:	31955304 	addi	r6,r6,21836
 400c3f4:	39d55544 	addi	r7,r7,21845
 400c3f8:	1009883a 	mov	r4,r2
 400c3fc:	180b883a 	mov	r5,r3
 400c400:	400f3580 	call	400f358 <__adddf3>
 400c404:	a80d883a 	mov	r6,r21
 400c408:	a00f883a 	mov	r7,r20
 400c40c:	1009883a 	mov	r4,r2
 400c410:	180b883a 	mov	r5,r3
 400c414:	40107440 	call	4010744 <__muldf3>
 400c418:	1017883a 	mov	r11,r2
 400c41c:	1815883a 	mov	r10,r3
 400c420:	a809883a 	mov	r4,r21
 400c424:	a00b883a 	mov	r5,r20
 400c428:	000d883a 	mov	r6,zero
 400c42c:	01cff834 	movhi	r7,16352
 400c430:	da800215 	stw	r10,8(sp)
 400c434:	dac00115 	stw	r11,4(sp)
 400c438:	40107440 	call	4010744 <__muldf3>
 400c43c:	dac00117 	ldw	r11,4(sp)
 400c440:	da800217 	ldw	r10,8(sp)
 400c444:	a809883a 	mov	r4,r21
 400c448:	580d883a 	mov	r6,r11
 400c44c:	500f883a 	mov	r7,r10
 400c450:	a00b883a 	mov	r5,r20
 400c454:	1023883a 	mov	r17,r2
 400c458:	1821883a 	mov	r16,r3
 400c45c:	40107440 	call	4010744 <__muldf3>
 400c460:	b80d883a 	mov	r6,r23
 400c464:	e00f883a 	mov	r7,fp
 400c468:	b009883a 	mov	r4,r22
 400c46c:	980b883a 	mov	r5,r19
 400c470:	1029883a 	mov	r20,r2
 400c474:	1825883a 	mov	r18,r3
 400c478:	40107440 	call	4010744 <__muldf3>
 400c47c:	a009883a 	mov	r4,r20
 400c480:	900b883a 	mov	r5,r18
 400c484:	100d883a 	mov	r6,r2
 400c488:	180f883a 	mov	r7,r3
 400c48c:	4010e5c0 	call	4010e5c <__subdf3>
 400c490:	8809883a 	mov	r4,r17
 400c494:	800b883a 	mov	r5,r16
 400c498:	100d883a 	mov	r6,r2
 400c49c:	180f883a 	mov	r7,r3
 400c4a0:	4010e5c0 	call	4010e5c <__subdf3>
 400c4a4:	100d883a 	mov	r6,r2
 400c4a8:	180f883a 	mov	r7,r3
 400c4ac:	0009883a 	mov	r4,zero
 400c4b0:	014ffc34 	movhi	r5,16368
 400c4b4:	4010e5c0 	call	4010e5c <__subdf3>
 400c4b8:	00008b06 	br	400c6e8 <__kernel_cos+0x454>
 400c4bc:	200d883a 	mov	r6,r4
 400c4c0:	280f883a 	mov	r7,r5
 400c4c4:	40107440 	call	4010744 <__muldf3>
 400c4c8:	01afa234 	movhi	r6,48776
 400c4cc:	01ef6a74 	movhi	r7,48553
 400c4d0:	318e3504 	addi	r6,r6,14548
 400c4d4:	39feba44 	addi	r7,r7,-1303
 400c4d8:	1009883a 	mov	r4,r2
 400c4dc:	180b883a 	mov	r5,r3
 400c4e0:	1025883a 	mov	r18,r2
 400c4e4:	1823883a 	mov	r17,r3
 400c4e8:	40107440 	call	4010744 <__muldf3>
 400c4ec:	01af6d74 	movhi	r6,48565
 400c4f0:	01cf88b4 	movhi	r7,15906
 400c4f4:	31ac7104 	addi	r6,r6,-20028
 400c4f8:	39fba784 	addi	r7,r7,-4450
 400c4fc:	1009883a 	mov	r4,r2
 400c500:	180b883a 	mov	r5,r3
 400c504:	400f3580 	call	400f358 <__adddf3>
 400c508:	900d883a 	mov	r6,r18
 400c50c:	880f883a 	mov	r7,r17
 400c510:	1009883a 	mov	r4,r2
 400c514:	180b883a 	mov	r5,r3
 400c518:	40107440 	call	4010744 <__muldf3>
 400c51c:	01a02734 	movhi	r6,32924
 400c520:	01cfa4b4 	movhi	r7,16018
 400c524:	3194ab44 	addi	r6,r6,21165
 400c528:	39df93c4 	addi	r7,r7,32335
 400c52c:	1009883a 	mov	r4,r2
 400c530:	180b883a 	mov	r5,r3
 400c534:	4010e5c0 	call	4010e5c <__subdf3>
 400c538:	900d883a 	mov	r6,r18
 400c53c:	880f883a 	mov	r7,r17
 400c540:	1009883a 	mov	r4,r2
 400c544:	180b883a 	mov	r5,r3
 400c548:	40107440 	call	4010744 <__muldf3>
 400c54c:	018672f4 	movhi	r6,6603
 400c550:	01cfbeb4 	movhi	r7,16122
 400c554:	31856404 	addi	r6,r6,5520
 400c558:	39c06804 	addi	r7,r7,416
 400c55c:	1009883a 	mov	r4,r2
 400c560:	180b883a 	mov	r5,r3
 400c564:	400f3580 	call	400f358 <__adddf3>
 400c568:	900d883a 	mov	r6,r18
 400c56c:	880f883a 	mov	r7,r17
 400c570:	1009883a 	mov	r4,r2
 400c574:	180b883a 	mov	r5,r3
 400c578:	40107440 	call	4010744 <__muldf3>
 400c57c:	0185b074 	movhi	r6,5825
 400c580:	01cfd5f4 	movhi	r7,16215
 400c584:	31945dc4 	addi	r6,r6,20855
 400c588:	39f05b04 	addi	r7,r7,-16020
 400c58c:	1009883a 	mov	r4,r2
 400c590:	180b883a 	mov	r5,r3
 400c594:	4010e5c0 	call	4010e5c <__subdf3>
 400c598:	900d883a 	mov	r6,r18
 400c59c:	880f883a 	mov	r7,r17
 400c5a0:	1009883a 	mov	r4,r2
 400c5a4:	180b883a 	mov	r5,r3
 400c5a8:	40107440 	call	4010744 <__muldf3>
 400c5ac:	01955574 	movhi	r6,21845
 400c5b0:	01cfe974 	movhi	r7,16293
 400c5b4:	31955304 	addi	r6,r6,21836
 400c5b8:	39d55544 	addi	r7,r7,21845
 400c5bc:	1009883a 	mov	r4,r2
 400c5c0:	180b883a 	mov	r5,r3
 400c5c4:	400f3580 	call	400f358 <__adddf3>
 400c5c8:	900d883a 	mov	r6,r18
 400c5cc:	880f883a 	mov	r7,r17
 400c5d0:	1009883a 	mov	r4,r2
 400c5d4:	180b883a 	mov	r5,r3
 400c5d8:	40107440 	call	4010744 <__muldf3>
 400c5dc:	1013883a 	mov	r9,r2
 400c5e0:	1017883a 	mov	r11,r2
 400c5e4:	008ff4f4 	movhi	r2,16339
 400c5e8:	108ccc84 	addi	r2,r2,13106
 400c5ec:	1811883a 	mov	r8,r3
 400c5f0:	902b883a 	mov	r21,r18
 400c5f4:	8829883a 	mov	r20,r17
 400c5f8:	1815883a 	mov	r10,r3
 400c5fc:	143f880e 	bge	r2,r16,400c420 <__reset+0xfb00b420>
 400c600:	008ffa74 	movhi	r2,16361
 400c604:	14004416 	blt	r2,r16,400c718 <__kernel_cos+0x484>
 400c608:	00bff834 	movhi	r2,65504
 400c60c:	80a1883a 	add	r16,r16,r2
 400c610:	000d883a 	mov	r6,zero
 400c614:	800f883a 	mov	r7,r16
 400c618:	0009883a 	mov	r4,zero
 400c61c:	014ffc34 	movhi	r5,16368
 400c620:	da400115 	stw	r9,4(sp)
 400c624:	d8c00215 	stw	r3,8(sp)
 400c628:	4010e5c0 	call	4010e5c <__subdf3>
 400c62c:	da000217 	ldw	r8,8(sp)
 400c630:	da400117 	ldw	r9,4(sp)
 400c634:	102b883a 	mov	r21,r2
 400c638:	d8c00015 	stw	r3,0(sp)
 400c63c:	9009883a 	mov	r4,r18
 400c640:	880b883a 	mov	r5,r17
 400c644:	000d883a 	mov	r6,zero
 400c648:	01cff834 	movhi	r7,16352
 400c64c:	da000215 	stw	r8,8(sp)
 400c650:	da400115 	stw	r9,4(sp)
 400c654:	40107440 	call	4010744 <__muldf3>
 400c658:	800f883a 	mov	r7,r16
 400c65c:	000d883a 	mov	r6,zero
 400c660:	1009883a 	mov	r4,r2
 400c664:	180b883a 	mov	r5,r3
 400c668:	4010e5c0 	call	4010e5c <__subdf3>
 400c66c:	da400117 	ldw	r9,4(sp)
 400c670:	da000217 	ldw	r8,8(sp)
 400c674:	9009883a 	mov	r4,r18
 400c678:	480d883a 	mov	r6,r9
 400c67c:	400f883a 	mov	r7,r8
 400c680:	880b883a 	mov	r5,r17
 400c684:	1029883a 	mov	r20,r2
 400c688:	1821883a 	mov	r16,r3
 400c68c:	40107440 	call	4010744 <__muldf3>
 400c690:	b80d883a 	mov	r6,r23
 400c694:	e00f883a 	mov	r7,fp
 400c698:	b009883a 	mov	r4,r22
 400c69c:	980b883a 	mov	r5,r19
 400c6a0:	1025883a 	mov	r18,r2
 400c6a4:	1823883a 	mov	r17,r3
 400c6a8:	40107440 	call	4010744 <__muldf3>
 400c6ac:	100d883a 	mov	r6,r2
 400c6b0:	180f883a 	mov	r7,r3
 400c6b4:	9009883a 	mov	r4,r18
 400c6b8:	880b883a 	mov	r5,r17
 400c6bc:	4010e5c0 	call	4010e5c <__subdf3>
 400c6c0:	100d883a 	mov	r6,r2
 400c6c4:	180f883a 	mov	r7,r3
 400c6c8:	a009883a 	mov	r4,r20
 400c6cc:	800b883a 	mov	r5,r16
 400c6d0:	4010e5c0 	call	4010e5c <__subdf3>
 400c6d4:	d9400017 	ldw	r5,0(sp)
 400c6d8:	100d883a 	mov	r6,r2
 400c6dc:	180f883a 	mov	r7,r3
 400c6e0:	a809883a 	mov	r4,r21
 400c6e4:	4010e5c0 	call	4010e5c <__subdf3>
 400c6e8:	dfc00c17 	ldw	ra,48(sp)
 400c6ec:	df000b17 	ldw	fp,44(sp)
 400c6f0:	ddc00a17 	ldw	r23,40(sp)
 400c6f4:	dd800917 	ldw	r22,36(sp)
 400c6f8:	dd400817 	ldw	r21,32(sp)
 400c6fc:	dd000717 	ldw	r20,28(sp)
 400c700:	dcc00617 	ldw	r19,24(sp)
 400c704:	dc800517 	ldw	r18,20(sp)
 400c708:	dc400417 	ldw	r17,16(sp)
 400c70c:	dc000317 	ldw	r16,12(sp)
 400c710:	dec00d04 	addi	sp,sp,52
 400c714:	f800283a 	ret
 400c718:	008ff9f4 	movhi	r2,16359
 400c71c:	002b883a 	mov	r21,zero
 400c720:	d8800015 	stw	r2,0(sp)
 400c724:	040ff4b4 	movhi	r16,16338
 400c728:	003fc406 	br	400c63c <__reset+0xfb00b63c>
 400c72c:	0005883a 	mov	r2,zero
 400c730:	00cffc34 	movhi	r3,16368
 400c734:	003fec06 	br	400c6e8 <__reset+0xfb00b6e8>

0400c738 <__kernel_rem_pio2>:
 400c738:	deff5a04 	addi	sp,sp,-664
 400c73c:	da00a617 	ldw	r8,664(sp)
 400c740:	00c10234 	movhi	r3,1032
 400c744:	18c74a04 	addi	r3,r3,7464
 400c748:	4205883a 	add	r2,r8,r8
 400c74c:	1085883a 	add	r2,r2,r2
 400c750:	1885883a 	add	r2,r3,r2
 400c754:	d9008e15 	stw	r4,568(sp)
 400c758:	d9408f15 	stw	r5,572(sp)
 400c75c:	313fff44 	addi	r4,r6,-3
 400c760:	01400604 	movi	r5,24
 400c764:	dd80a215 	stw	r22,648(sp)
 400c768:	dc009c15 	stw	r16,624(sp)
 400c76c:	dfc0a515 	stw	ra,660(sp)
 400c770:	df00a415 	stw	fp,656(sp)
 400c774:	ddc0a315 	stw	r23,652(sp)
 400c778:	dd40a115 	stw	r21,644(sp)
 400c77c:	dd00a015 	stw	r20,640(sp)
 400c780:	dcc09f15 	stw	r19,636(sp)
 400c784:	dc809e15 	stw	r18,632(sp)
 400c788:	dc409d15 	stw	r17,628(sp)
 400c78c:	3021883a 	mov	r16,r6
 400c790:	d9c09315 	stw	r7,588(sp)
 400c794:	15800017 	ldw	r22,0(r2)
 400c798:	400dbb40 	call	400dbb4 <__divsi3>
 400c79c:	da009317 	ldw	r8,588(sp)
 400c7a0:	d8809215 	stw	r2,584(sp)
 400c7a4:	423fffc4 	addi	r8,r8,-1
 400c7a8:	da008d15 	stw	r8,564(sp)
 400c7ac:	10033b16 	blt	r2,zero,400d49c <__kernel_rem_pio2+0xd64>
 400c7b0:	da009217 	ldw	r8,584(sp)
 400c7b4:	d9009217 	ldw	r4,584(sp)
 400c7b8:	42000044 	addi	r8,r8,1
 400c7bc:	40fffa24 	muli	r3,r8,-24
 400c7c0:	da009515 	stw	r8,596(sp)
 400c7c4:	da008d17 	ldw	r8,564(sp)
 400c7c8:	1c07883a 	add	r3,r3,r16
 400c7cc:	d8c09015 	stw	r3,576(sp)
 400c7d0:	b205883a 	add	r2,r22,r8
 400c7d4:	2223c83a 	sub	r17,r4,r8
 400c7d8:	10001016 	blt	r2,zero,400c81c <__kernel_rem_pio2+0xe4>
 400c7dc:	da00a717 	ldw	r8,668(sp)
 400c7e0:	8c65883a 	add	r18,r17,r17
 400c7e4:	94a5883a 	add	r18,r18,r18
 400c7e8:	1445883a 	add	r2,r2,r17
 400c7ec:	dcc05004 	addi	r19,sp,320
 400c7f0:	44a5883a 	add	r18,r8,r18
 400c7f4:	14000044 	addi	r16,r2,1
 400c7f8:	88015316 	blt	r17,zero,400cd48 <__kernel_rem_pio2+0x610>
 400c7fc:	91000017 	ldw	r4,0(r18)
 400c800:	40117d80 	call	40117d8 <__floatsidf>
 400c804:	98800015 	stw	r2,0(r19)
 400c808:	98c00115 	stw	r3,4(r19)
 400c80c:	8c400044 	addi	r17,r17,1
 400c810:	9cc00204 	addi	r19,r19,8
 400c814:	94800104 	addi	r18,r18,4
 400c818:	8c3ff71e 	bne	r17,r16,400c7f8 <__reset+0xfb00b7f8>
 400c81c:	b0002816 	blt	r22,zero,400c8c0 <__kernel_rem_pio2+0x188>
 400c820:	da008d17 	ldw	r8,564(sp)
 400c824:	b4c00044 	addi	r19,r22,1
 400c828:	982690fa 	slli	r19,r19,3
 400c82c:	402490fa 	slli	r18,r8,3
 400c830:	da008e17 	ldw	r8,568(sp)
 400c834:	d8805004 	addi	r2,sp,320
 400c838:	94000204 	addi	r16,r18,8
 400c83c:	d823883a 	mov	r17,sp
 400c840:	14a5883a 	add	r18,r2,r18
 400c844:	dcef883a 	add	r23,sp,r19
 400c848:	4421883a 	add	r16,r8,r16
 400c84c:	dd809115 	stw	r22,580(sp)
 400c850:	4039883a 	mov	fp,r8
 400c854:	da008d17 	ldw	r8,564(sp)
 400c858:	40016016 	blt	r8,zero,400cddc <__kernel_rem_pio2+0x6a4>
 400c85c:	e027883a 	mov	r19,fp
 400c860:	9029883a 	mov	r20,r18
 400c864:	002d883a 	mov	r22,zero
 400c868:	002b883a 	mov	r21,zero
 400c86c:	a1800017 	ldw	r6,0(r20)
 400c870:	a1c00117 	ldw	r7,4(r20)
 400c874:	99000017 	ldw	r4,0(r19)
 400c878:	99400117 	ldw	r5,4(r19)
 400c87c:	9cc00204 	addi	r19,r19,8
 400c880:	a53ffe04 	addi	r20,r20,-8
 400c884:	40107440 	call	4010744 <__muldf3>
 400c888:	b009883a 	mov	r4,r22
 400c88c:	a80b883a 	mov	r5,r21
 400c890:	100d883a 	mov	r6,r2
 400c894:	180f883a 	mov	r7,r3
 400c898:	400f3580 	call	400f358 <__adddf3>
 400c89c:	102d883a 	mov	r22,r2
 400c8a0:	182b883a 	mov	r21,r3
 400c8a4:	9c3ff11e 	bne	r19,r16,400c86c <__reset+0xfb00b86c>
 400c8a8:	8d800015 	stw	r22,0(r17)
 400c8ac:	8d400115 	stw	r21,4(r17)
 400c8b0:	8c400204 	addi	r17,r17,8
 400c8b4:	94800204 	addi	r18,r18,8
 400c8b8:	8dffe61e 	bne	r17,r23,400c854 <__reset+0xfb00b854>
 400c8bc:	dd809117 	ldw	r22,580(sp)
 400c8c0:	00d00034 	movhi	r3,16384
 400c8c4:	da009317 	ldw	r8,588(sp)
 400c8c8:	18ffff84 	addi	r3,r3,-2
 400c8cc:	b0c7883a 	add	r3,r22,r3
 400c8d0:	18c7883a 	add	r3,r3,r3
 400c8d4:	402090fa 	slli	r16,r8,3
 400c8d8:	18c7883a 	add	r3,r3,r3
 400c8dc:	da007804 	addi	r8,sp,480
 400c8e0:	40d1883a 	add	r8,r8,r3
 400c8e4:	b0bfffc4 	addi	r2,r22,-1
 400c8e8:	da009615 	stw	r8,600(sp)
 400c8ec:	da008e17 	ldw	r8,568(sp)
 400c8f0:	1085883a 	add	r2,r2,r2
 400c8f4:	1085883a 	add	r2,r2,r2
 400c8f8:	19000104 	addi	r4,r3,4
 400c8fc:	d885883a 	add	r2,sp,r2
 400c900:	4421883a 	add	r16,r8,r16
 400c904:	da007804 	addi	r8,sp,480
 400c908:	4111883a 	add	r8,r8,r4
 400c90c:	10807804 	addi	r2,r2,480
 400c910:	da009715 	stw	r8,604(sp)
 400c914:	b025883a 	mov	r18,r22
 400c918:	d8809815 	stw	r2,608(sp)
 400c91c:	dd809415 	stw	r22,592(sp)
 400c920:	900490fa 	slli	r2,r18,3
 400c924:	d885883a 	add	r2,sp,r2
 400c928:	17000017 	ldw	fp,0(r2)
 400c92c:	15400117 	ldw	r21,4(r2)
 400c930:	04802b0e 	bge	zero,r18,400c9e0 <__kernel_rem_pio2+0x2a8>
 400c934:	00880034 	movhi	r2,8192
 400c938:	10bfffc4 	addi	r2,r2,-1
 400c93c:	90a9883a 	add	r20,r18,r2
 400c940:	a02890fa 	slli	r20,r20,3
 400c944:	dc407804 	addi	r17,sp,480
 400c948:	dcfffe04 	addi	r19,sp,-8
 400c94c:	dd29883a 	add	r20,sp,r20
 400c950:	000d883a 	mov	r6,zero
 400c954:	01cf9c34 	movhi	r7,15984
 400c958:	e009883a 	mov	r4,fp
 400c95c:	a80b883a 	mov	r5,r21
 400c960:	40107440 	call	4010744 <__muldf3>
 400c964:	180b883a 	mov	r5,r3
 400c968:	1009883a 	mov	r4,r2
 400c96c:	40117580 	call	4011758 <__fixdfsi>
 400c970:	1009883a 	mov	r4,r2
 400c974:	40117d80 	call	40117d8 <__floatsidf>
 400c978:	000d883a 	mov	r6,zero
 400c97c:	01d05c34 	movhi	r7,16752
 400c980:	1009883a 	mov	r4,r2
 400c984:	180b883a 	mov	r5,r3
 400c988:	102f883a 	mov	r23,r2
 400c98c:	182d883a 	mov	r22,r3
 400c990:	40107440 	call	4010744 <__muldf3>
 400c994:	100d883a 	mov	r6,r2
 400c998:	180f883a 	mov	r7,r3
 400c99c:	e009883a 	mov	r4,fp
 400c9a0:	a80b883a 	mov	r5,r21
 400c9a4:	4010e5c0 	call	4010e5c <__subdf3>
 400c9a8:	180b883a 	mov	r5,r3
 400c9ac:	1009883a 	mov	r4,r2
 400c9b0:	40117580 	call	4011758 <__fixdfsi>
 400c9b4:	a1800017 	ldw	r6,0(r20)
 400c9b8:	a1c00117 	ldw	r7,4(r20)
 400c9bc:	88800015 	stw	r2,0(r17)
 400c9c0:	b809883a 	mov	r4,r23
 400c9c4:	b00b883a 	mov	r5,r22
 400c9c8:	400f3580 	call	400f358 <__adddf3>
 400c9cc:	a53ffe04 	addi	r20,r20,-8
 400c9d0:	1039883a 	mov	fp,r2
 400c9d4:	182b883a 	mov	r21,r3
 400c9d8:	8c400104 	addi	r17,r17,4
 400c9dc:	a4ffdc1e 	bne	r20,r19,400c950 <__reset+0xfb00b950>
 400c9e0:	d9809017 	ldw	r6,576(sp)
 400c9e4:	a80b883a 	mov	r5,r21
 400c9e8:	e009883a 	mov	r4,fp
 400c9ec:	400d9fc0 	call	400d9fc <scalbn>
 400c9f0:	000d883a 	mov	r6,zero
 400c9f4:	01cff034 	movhi	r7,16320
 400c9f8:	1009883a 	mov	r4,r2
 400c9fc:	180b883a 	mov	r5,r3
 400ca00:	1027883a 	mov	r19,r2
 400ca04:	1823883a 	mov	r17,r3
 400ca08:	40107440 	call	4010744 <__muldf3>
 400ca0c:	1009883a 	mov	r4,r2
 400ca10:	180b883a 	mov	r5,r3
 400ca14:	400d7940 	call	400d794 <floor>
 400ca18:	000d883a 	mov	r6,zero
 400ca1c:	01d00834 	movhi	r7,16416
 400ca20:	1009883a 	mov	r4,r2
 400ca24:	180b883a 	mov	r5,r3
 400ca28:	40107440 	call	4010744 <__muldf3>
 400ca2c:	100d883a 	mov	r6,r2
 400ca30:	180f883a 	mov	r7,r3
 400ca34:	9809883a 	mov	r4,r19
 400ca38:	880b883a 	mov	r5,r17
 400ca3c:	4010e5c0 	call	4010e5c <__subdf3>
 400ca40:	180b883a 	mov	r5,r3
 400ca44:	1009883a 	mov	r4,r2
 400ca48:	1827883a 	mov	r19,r3
 400ca4c:	1029883a 	mov	r20,r2
 400ca50:	40117580 	call	4011758 <__fixdfsi>
 400ca54:	1009883a 	mov	r4,r2
 400ca58:	1023883a 	mov	r17,r2
 400ca5c:	40117d80 	call	40117d8 <__floatsidf>
 400ca60:	a009883a 	mov	r4,r20
 400ca64:	100d883a 	mov	r6,r2
 400ca68:	180f883a 	mov	r7,r3
 400ca6c:	980b883a 	mov	r5,r19
 400ca70:	4010e5c0 	call	4010e5c <__subdf3>
 400ca74:	d9009017 	ldw	r4,576(sp)
 400ca78:	1013883a 	mov	r9,r2
 400ca7c:	102b883a 	mov	r21,r2
 400ca80:	1811883a 	mov	r8,r3
 400ca84:	0100b30e 	bge	zero,r4,400cd54 <__kernel_rem_pio2+0x61c>
 400ca88:	90bfffc4 	addi	r2,r18,-1
 400ca8c:	1085883a 	add	r2,r2,r2
 400ca90:	1085883a 	add	r2,r2,r2
 400ca94:	d885883a 	add	r2,sp,r2
 400ca98:	10807804 	addi	r2,r2,480
 400ca9c:	d9809017 	ldw	r6,576(sp)
 400caa0:	11400017 	ldw	r5,0(r2)
 400caa4:	01000604 	movi	r4,24
 400caa8:	2189c83a 	sub	r4,r4,r6
 400caac:	290dd83a 	sra	r6,r5,r4
 400cab0:	d9c09017 	ldw	r7,576(sp)
 400cab4:	04c005c4 	movi	r19,23
 400cab8:	3108983a 	sll	r4,r6,r4
 400cabc:	99e7c83a 	sub	r19,r19,r7
 400cac0:	89a3883a 	add	r17,r17,r6
 400cac4:	2909c83a 	sub	r4,r5,r4
 400cac8:	24e7d83a 	sra	r19,r4,r19
 400cacc:	11000015 	stw	r4,0(r2)
 400cad0:	04c02a0e 	bge	zero,r19,400cb7c <__kernel_rem_pio2+0x444>
 400cad4:	8c400044 	addi	r17,r17,1
 400cad8:	0481570e 	bge	zero,r18,400d038 <__kernel_rem_pio2+0x900>
 400cadc:	02804034 	movhi	r10,256
 400cae0:	52bfffc4 	addi	r10,r10,-1
 400cae4:	d8807804 	addi	r2,sp,480
 400cae8:	000b883a 	mov	r5,zero
 400caec:	0029883a 	mov	r20,zero
 400caf0:	01c04034 	movhi	r7,256
 400caf4:	00000706 	br	400cb14 <__kernel_rem_pio2+0x3dc>
 400caf8:	390dc83a 	sub	r6,r7,r4
 400cafc:	20000226 	beq	r4,zero,400cb08 <__kernel_rem_pio2+0x3d0>
 400cb00:	11800015 	stw	r6,0(r2)
 400cb04:	05000044 	movi	r20,1
 400cb08:	29400044 	addi	r5,r5,1
 400cb0c:	10800104 	addi	r2,r2,4
 400cb10:	2c80080e 	bge	r5,r18,400cb34 <__kernel_rem_pio2+0x3fc>
 400cb14:	11000017 	ldw	r4,0(r2)
 400cb18:	a03ff726 	beq	r20,zero,400caf8 <__reset+0xfb00baf8>
 400cb1c:	5109c83a 	sub	r4,r10,r4
 400cb20:	11000015 	stw	r4,0(r2)
 400cb24:	29400044 	addi	r5,r5,1
 400cb28:	05000044 	movi	r20,1
 400cb2c:	10800104 	addi	r2,r2,4
 400cb30:	2cbff816 	blt	r5,r18,400cb14 <__reset+0xfb00bb14>
 400cb34:	d9009017 	ldw	r4,576(sp)
 400cb38:	01000e0e 	bge	zero,r4,400cb74 <__kernel_rem_pio2+0x43c>
 400cb3c:	00800044 	movi	r2,1
 400cb40:	20808d26 	beq	r4,r2,400cd78 <__kernel_rem_pio2+0x640>
 400cb44:	00800084 	movi	r2,2
 400cb48:	20800a1e 	bne	r4,r2,400cb74 <__kernel_rem_pio2+0x43c>
 400cb4c:	90bfffc4 	addi	r2,r18,-1
 400cb50:	1085883a 	add	r2,r2,r2
 400cb54:	1085883a 	add	r2,r2,r2
 400cb58:	d885883a 	add	r2,sp,r2
 400cb5c:	10807804 	addi	r2,r2,480
 400cb60:	11400017 	ldw	r5,0(r2)
 400cb64:	01001034 	movhi	r4,64
 400cb68:	213fffc4 	addi	r4,r4,-1
 400cb6c:	2908703a 	and	r4,r5,r4
 400cb70:	11000015 	stw	r4,0(r2)
 400cb74:	00800084 	movi	r2,2
 400cb78:	98805d26 	beq	r19,r2,400ccf0 <__kernel_rem_pio2+0x5b8>
 400cb7c:	400b883a 	mov	r5,r8
 400cb80:	000d883a 	mov	r6,zero
 400cb84:	000f883a 	mov	r7,zero
 400cb88:	a809883a 	mov	r4,r21
 400cb8c:	da009b15 	stw	r8,620(sp)
 400cb90:	40104ec0 	call	40104ec <__eqdf2>
 400cb94:	da009b17 	ldw	r8,620(sp)
 400cb98:	10012b1e 	bne	r2,zero,400d048 <__kernel_rem_pio2+0x910>
 400cb9c:	da009417 	ldw	r8,592(sp)
 400cba0:	917fffc4 	addi	r5,r18,-1
 400cba4:	2a000e16 	blt	r5,r8,400cbe0 <__kernel_rem_pio2+0x4a8>
 400cba8:	00900034 	movhi	r2,16384
 400cbac:	10bfffc4 	addi	r2,r2,-1
 400cbb0:	9085883a 	add	r2,r18,r2
 400cbb4:	1085883a 	add	r2,r2,r2
 400cbb8:	d9809717 	ldw	r6,604(sp)
 400cbbc:	1085883a 	add	r2,r2,r2
 400cbc0:	d9007804 	addi	r4,sp,480
 400cbc4:	0007883a 	mov	r3,zero
 400cbc8:	2085883a 	add	r2,r4,r2
 400cbcc:	11000017 	ldw	r4,0(r2)
 400cbd0:	10bfff04 	addi	r2,r2,-4
 400cbd4:	1906b03a 	or	r3,r3,r4
 400cbd8:	11bffc1e 	bne	r2,r6,400cbcc <__reset+0xfb00bbcc>
 400cbdc:	1800821e 	bne	r3,zero,400cde8 <__kernel_rem_pio2+0x6b0>
 400cbe0:	da009817 	ldw	r8,608(sp)
 400cbe4:	40800017 	ldw	r2,0(r8)
 400cbe8:	1001151e 	bne	r2,zero,400d040 <__kernel_rem_pio2+0x908>
 400cbec:	d8809617 	ldw	r2,600(sp)
 400cbf0:	05000044 	movi	r20,1
 400cbf4:	10bfff04 	addi	r2,r2,-4
 400cbf8:	10c00117 	ldw	r3,4(r2)
 400cbfc:	a5000044 	addi	r20,r20,1
 400cc00:	183ffc26 	beq	r3,zero,400cbf4 <__reset+0xfb00bbf4>
 400cc04:	9529883a 	add	r20,r18,r20
 400cc08:	90800044 	addi	r2,r18,1
 400cc0c:	dd009115 	stw	r20,580(sp)
 400cc10:	a0803216 	blt	r20,r2,400ccdc <__kernel_rem_pio2+0x5a4>
 400cc14:	da009317 	ldw	r8,588(sp)
 400cc18:	d8c09117 	ldw	r3,580(sp)
 400cc1c:	44a3883a 	add	r17,r8,r18
 400cc20:	da009217 	ldw	r8,584(sp)
 400cc24:	882290fa 	slli	r17,r17,3
 400cc28:	40a5883a 	add	r18,r8,r2
 400cc2c:	da009517 	ldw	r8,596(sp)
 400cc30:	100490fa 	slli	r2,r2,3
 400cc34:	94a5883a 	add	r18,r18,r18
 400cc38:	40eb883a 	add	r21,r8,r3
 400cc3c:	da00a717 	ldw	r8,668(sp)
 400cc40:	ad6b883a 	add	r21,r21,r21
 400cc44:	94a5883a 	add	r18,r18,r18
 400cc48:	ad6b883a 	add	r21,r21,r21
 400cc4c:	d8c05004 	addi	r3,sp,320
 400cc50:	44a5883a 	add	r18,r8,r18
 400cc54:	1c63883a 	add	r17,r3,r17
 400cc58:	d8a7883a 	add	r19,sp,r2
 400cc5c:	456b883a 	add	r21,r8,r21
 400cc60:	91000017 	ldw	r4,0(r18)
 400cc64:	40117d80 	call	40117d8 <__floatsidf>
 400cc68:	da008d17 	ldw	r8,564(sp)
 400cc6c:	88800015 	stw	r2,0(r17)
 400cc70:	88c00115 	stw	r3,4(r17)
 400cc74:	40001b16 	blt	r8,zero,400cce4 <__kernel_rem_pio2+0x5ac>
 400cc78:	dd008e17 	ldw	r20,568(sp)
 400cc7c:	882d883a 	mov	r22,r17
 400cc80:	002f883a 	mov	r23,zero
 400cc84:	0039883a 	mov	fp,zero
 400cc88:	b1800017 	ldw	r6,0(r22)
 400cc8c:	b1c00117 	ldw	r7,4(r22)
 400cc90:	a1000017 	ldw	r4,0(r20)
 400cc94:	a1400117 	ldw	r5,4(r20)
 400cc98:	a5000204 	addi	r20,r20,8
 400cc9c:	b5bffe04 	addi	r22,r22,-8
 400cca0:	40107440 	call	4010744 <__muldf3>
 400cca4:	b809883a 	mov	r4,r23
 400cca8:	e00b883a 	mov	r5,fp
 400ccac:	100d883a 	mov	r6,r2
 400ccb0:	180f883a 	mov	r7,r3
 400ccb4:	400f3580 	call	400f358 <__adddf3>
 400ccb8:	102f883a 	mov	r23,r2
 400ccbc:	1839883a 	mov	fp,r3
 400ccc0:	a43ff11e 	bne	r20,r16,400cc88 <__reset+0xfb00bc88>
 400ccc4:	9dc00015 	stw	r23,0(r19)
 400ccc8:	9f000115 	stw	fp,4(r19)
 400cccc:	94800104 	addi	r18,r18,4
 400ccd0:	8c400204 	addi	r17,r17,8
 400ccd4:	9cc00204 	addi	r19,r19,8
 400ccd8:	957fe11e 	bne	r18,r21,400cc60 <__reset+0xfb00bc60>
 400ccdc:	dc809117 	ldw	r18,580(sp)
 400cce0:	003f0f06 	br	400c920 <__reset+0xfb00b920>
 400cce4:	002f883a 	mov	r23,zero
 400cce8:	0039883a 	mov	fp,zero
 400ccec:	003ff506 	br	400ccc4 <__reset+0xfb00bcc4>
 400ccf0:	480d883a 	mov	r6,r9
 400ccf4:	180f883a 	mov	r7,r3
 400ccf8:	0009883a 	mov	r4,zero
 400ccfc:	014ffc34 	movhi	r5,16368
 400cd00:	4010e5c0 	call	4010e5c <__subdf3>
 400cd04:	102b883a 	mov	r21,r2
 400cd08:	1811883a 	mov	r8,r3
 400cd0c:	a03f9b26 	beq	r20,zero,400cb7c <__reset+0xfb00bb7c>
 400cd10:	d9809017 	ldw	r6,576(sp)
 400cd14:	0009883a 	mov	r4,zero
 400cd18:	014ffc34 	movhi	r5,16368
 400cd1c:	d8c09b15 	stw	r3,620(sp)
 400cd20:	400d9fc0 	call	400d9fc <scalbn>
 400cd24:	da009b17 	ldw	r8,620(sp)
 400cd28:	a809883a 	mov	r4,r21
 400cd2c:	100d883a 	mov	r6,r2
 400cd30:	400b883a 	mov	r5,r8
 400cd34:	180f883a 	mov	r7,r3
 400cd38:	4010e5c0 	call	4010e5c <__subdf3>
 400cd3c:	102b883a 	mov	r21,r2
 400cd40:	1811883a 	mov	r8,r3
 400cd44:	003f8d06 	br	400cb7c <__reset+0xfb00bb7c>
 400cd48:	0005883a 	mov	r2,zero
 400cd4c:	0007883a 	mov	r3,zero
 400cd50:	003eac06 	br	400c804 <__reset+0xfb00b804>
 400cd54:	d8809017 	ldw	r2,576(sp)
 400cd58:	1000121e 	bne	r2,zero,400cda4 <__kernel_rem_pio2+0x66c>
 400cd5c:	90bfffc4 	addi	r2,r18,-1
 400cd60:	1085883a 	add	r2,r2,r2
 400cd64:	1085883a 	add	r2,r2,r2
 400cd68:	d885883a 	add	r2,sp,r2
 400cd6c:	14c07817 	ldw	r19,480(r2)
 400cd70:	9827d5fa 	srai	r19,r19,23
 400cd74:	003f5606 	br	400cad0 <__reset+0xfb00bad0>
 400cd78:	90bfffc4 	addi	r2,r18,-1
 400cd7c:	1085883a 	add	r2,r2,r2
 400cd80:	1085883a 	add	r2,r2,r2
 400cd84:	d885883a 	add	r2,sp,r2
 400cd88:	10807804 	addi	r2,r2,480
 400cd8c:	11000017 	ldw	r4,0(r2)
 400cd90:	01402034 	movhi	r5,128
 400cd94:	297fffc4 	addi	r5,r5,-1
 400cd98:	2148703a 	and	r4,r4,r5
 400cd9c:	11000015 	stw	r4,0(r2)
 400cda0:	003f7406 	br	400cb74 <__reset+0xfb00bb74>
 400cda4:	4809883a 	mov	r4,r9
 400cda8:	180b883a 	mov	r5,r3
 400cdac:	000d883a 	mov	r6,zero
 400cdb0:	01cff834 	movhi	r7,16352
 400cdb4:	d8c09a15 	stw	r3,616(sp)
 400cdb8:	d8c09b15 	stw	r3,620(sp)
 400cdbc:	da409915 	stw	r9,612(sp)
 400cdc0:	40105740 	call	4010574 <__gedf2>
 400cdc4:	d8c09a17 	ldw	r3,616(sp)
 400cdc8:	da009b17 	ldw	r8,620(sp)
 400cdcc:	da409917 	ldw	r9,612(sp)
 400cdd0:	1000920e 	bge	r2,zero,400d01c <__kernel_rem_pio2+0x8e4>
 400cdd4:	0027883a 	mov	r19,zero
 400cdd8:	003f6806 	br	400cb7c <__reset+0xfb00bb7c>
 400cddc:	002d883a 	mov	r22,zero
 400cde0:	002b883a 	mov	r21,zero
 400cde4:	003eb006 	br	400c8a8 <__reset+0xfb00b8a8>
 400cde8:	2945883a 	add	r2,r5,r5
 400cdec:	da009017 	ldw	r8,576(sp)
 400cdf0:	1085883a 	add	r2,r2,r2
 400cdf4:	d885883a 	add	r2,sp,r2
 400cdf8:	10807817 	ldw	r2,480(r2)
 400cdfc:	423ffa04 	addi	r8,r8,-24
 400ce00:	dc409115 	stw	r17,580(sp)
 400ce04:	dcc08d15 	stw	r19,564(sp)
 400ce08:	da009015 	stw	r8,576(sp)
 400ce0c:	dd809417 	ldw	r22,592(sp)
 400ce10:	2823883a 	mov	r17,r5
 400ce14:	10000e1e 	bne	r2,zero,400ce50 <__kernel_rem_pio2+0x718>
 400ce18:	00900034 	movhi	r2,16384
 400ce1c:	10bfffc4 	addi	r2,r2,-1
 400ce20:	2885883a 	add	r2,r5,r2
 400ce24:	1085883a 	add	r2,r2,r2
 400ce28:	d8c07804 	addi	r3,sp,480
 400ce2c:	1085883a 	add	r2,r2,r2
 400ce30:	1885883a 	add	r2,r3,r2
 400ce34:	4007883a 	mov	r3,r8
 400ce38:	10bfff04 	addi	r2,r2,-4
 400ce3c:	11000117 	ldw	r4,4(r2)
 400ce40:	8c7fffc4 	addi	r17,r17,-1
 400ce44:	18fffa04 	addi	r3,r3,-24
 400ce48:	203ffb26 	beq	r4,zero,400ce38 <__reset+0xfb00be38>
 400ce4c:	d8c09015 	stw	r3,576(sp)
 400ce50:	d9809017 	ldw	r6,576(sp)
 400ce54:	0009883a 	mov	r4,zero
 400ce58:	014ffc34 	movhi	r5,16368
 400ce5c:	400d9fc0 	call	400d9fc <scalbn>
 400ce60:	1029883a 	mov	r20,r2
 400ce64:	182b883a 	mov	r21,r3
 400ce68:	88018416 	blt	r17,zero,400d47c <__kernel_rem_pio2+0xd44>
 400ce6c:	881090fa 	slli	r8,r17,3
 400ce70:	d8c07804 	addi	r3,sp,480
 400ce74:	da008e15 	stw	r8,568(sp)
 400ce78:	d8808e17 	ldw	r2,568(sp)
 400ce7c:	8c51883a 	add	r8,r17,r17
 400ce80:	4211883a 	add	r8,r8,r8
 400ce84:	d8a1883a 	add	r16,sp,r2
 400ce88:	1a25883a 	add	r18,r3,r8
 400ce8c:	da3ffe04 	addi	r8,sp,-8
 400ce90:	da008c15 	stw	r8,560(sp)
 400ce94:	8039883a 	mov	fp,r16
 400ce98:	91000017 	ldw	r4,0(r18)
 400ce9c:	e73ffe04 	addi	fp,fp,-8
 400cea0:	94bfff04 	addi	r18,r18,-4
 400cea4:	40117d80 	call	40117d8 <__floatsidf>
 400cea8:	a00d883a 	mov	r6,r20
 400ceac:	a80f883a 	mov	r7,r21
 400ceb0:	1009883a 	mov	r4,r2
 400ceb4:	180b883a 	mov	r5,r3
 400ceb8:	40107440 	call	4010744 <__muldf3>
 400cebc:	a009883a 	mov	r4,r20
 400cec0:	a80b883a 	mov	r5,r21
 400cec4:	e0800215 	stw	r2,8(fp)
 400cec8:	e0c00315 	stw	r3,12(fp)
 400cecc:	000d883a 	mov	r6,zero
 400ced0:	01cf9c34 	movhi	r7,15984
 400ced4:	40107440 	call	4010744 <__muldf3>
 400ced8:	da008c17 	ldw	r8,560(sp)
 400cedc:	1029883a 	mov	r20,r2
 400cee0:	182b883a 	mov	r21,r3
 400cee4:	e23fec1e 	bne	fp,r8,400ce98 <__reset+0xfb00be98>
 400cee8:	0029883a 	mov	r20,zero
 400ceec:	b0004f16 	blt	r22,zero,400d02c <__kernel_rem_pio2+0x8f4>
 400cef0:	05410234 	movhi	r21,1032
 400cef4:	014ffe74 	movhi	r5,16377
 400cef8:	ad473c04 	addi	r21,r21,7408
 400cefc:	8027883a 	mov	r19,r16
 400cf00:	01100034 	movhi	r4,16384
 400cf04:	29487ec4 	addi	r5,r5,8699
 400cf08:	0039883a 	mov	fp,zero
 400cf0c:	002f883a 	mov	r23,zero
 400cf10:	0025883a 	mov	r18,zero
 400cf14:	00000506 	br	400cf2c <__kernel_rem_pio2+0x7f4>
 400cf18:	9cc00204 	addi	r19,r19,8
 400cf1c:	a4800f16 	blt	r20,r18,400cf5c <__kernel_rem_pio2+0x824>
 400cf20:	a9000017 	ldw	r4,0(r21)
 400cf24:	a9400117 	ldw	r5,4(r21)
 400cf28:	ad400204 	addi	r21,r21,8
 400cf2c:	99800017 	ldw	r6,0(r19)
 400cf30:	99c00117 	ldw	r7,4(r19)
 400cf34:	94800044 	addi	r18,r18,1
 400cf38:	40107440 	call	4010744 <__muldf3>
 400cf3c:	e009883a 	mov	r4,fp
 400cf40:	b80b883a 	mov	r5,r23
 400cf44:	100d883a 	mov	r6,r2
 400cf48:	180f883a 	mov	r7,r3
 400cf4c:	400f3580 	call	400f358 <__adddf3>
 400cf50:	1039883a 	mov	fp,r2
 400cf54:	182f883a 	mov	r23,r3
 400cf58:	b4bfef0e 	bge	r22,r18,400cf18 <__reset+0xfb00bf18>
 400cf5c:	a00490fa 	slli	r2,r20,3
 400cf60:	da008c17 	ldw	r8,560(sp)
 400cf64:	843ffe04 	addi	r16,r16,-8
 400cf68:	d885883a 	add	r2,sp,r2
 400cf6c:	10802804 	addi	r2,r2,160
 400cf70:	17000015 	stw	fp,0(r2)
 400cf74:	15c00115 	stw	r23,4(r2)
 400cf78:	a5000044 	addi	r20,r20,1
 400cf7c:	823fdb1e 	bne	r16,r8,400ceec <__reset+0xfb00beec>
 400cf80:	da00a617 	ldw	r8,664(sp)
 400cf84:	00800084 	movi	r2,2
 400cf88:	12006616 	blt	r2,r8,400d124 <__kernel_rem_pio2+0x9ec>
 400cf8c:	0200de16 	blt	zero,r8,400d308 <__kernel_rem_pio2+0xbd0>
 400cf90:	4000141e 	bne	r8,zero,400cfe4 <__kernel_rem_pio2+0x8ac>
 400cf94:	da008e17 	ldw	r8,568(sp)
 400cf98:	d8802804 	addi	r2,sp,160
 400cf9c:	0007883a 	mov	r3,zero
 400cfa0:	1225883a 	add	r18,r2,r8
 400cfa4:	043fffc4 	movi	r16,-1
 400cfa8:	0005883a 	mov	r2,zero
 400cfac:	91800017 	ldw	r6,0(r18)
 400cfb0:	91c00117 	ldw	r7,4(r18)
 400cfb4:	1009883a 	mov	r4,r2
 400cfb8:	180b883a 	mov	r5,r3
 400cfbc:	8c7fffc4 	addi	r17,r17,-1
 400cfc0:	400f3580 	call	400f358 <__adddf3>
 400cfc4:	94bffe04 	addi	r18,r18,-8
 400cfc8:	8c3ff81e 	bne	r17,r16,400cfac <__reset+0xfb00bfac>
 400cfcc:	da008d17 	ldw	r8,564(sp)
 400cfd0:	40000126 	beq	r8,zero,400cfd8 <__kernel_rem_pio2+0x8a0>
 400cfd4:	18e0003c 	xorhi	r3,r3,32768
 400cfd8:	da008f17 	ldw	r8,572(sp)
 400cfdc:	40800015 	stw	r2,0(r8)
 400cfe0:	40c00115 	stw	r3,4(r8)
 400cfe4:	da009117 	ldw	r8,580(sp)
 400cfe8:	408001cc 	andi	r2,r8,7
 400cfec:	dfc0a517 	ldw	ra,660(sp)
 400cff0:	df00a417 	ldw	fp,656(sp)
 400cff4:	ddc0a317 	ldw	r23,652(sp)
 400cff8:	dd80a217 	ldw	r22,648(sp)
 400cffc:	dd40a117 	ldw	r21,644(sp)
 400d000:	dd00a017 	ldw	r20,640(sp)
 400d004:	dcc09f17 	ldw	r19,636(sp)
 400d008:	dc809e17 	ldw	r18,632(sp)
 400d00c:	dc409d17 	ldw	r17,628(sp)
 400d010:	dc009c17 	ldw	r16,624(sp)
 400d014:	dec0a604 	addi	sp,sp,664
 400d018:	f800283a 	ret
 400d01c:	8c400044 	addi	r17,r17,1
 400d020:	04810d0e 	bge	zero,r18,400d458 <__kernel_rem_pio2+0xd20>
 400d024:	04c00084 	movi	r19,2
 400d028:	003eac06 	br	400cadc <__reset+0xfb00badc>
 400d02c:	0039883a 	mov	fp,zero
 400d030:	002f883a 	mov	r23,zero
 400d034:	003fc906 	br	400cf5c <__reset+0xfb00bf5c>
 400d038:	0029883a 	mov	r20,zero
 400d03c:	003ebd06 	br	400cb34 <__reset+0xfb00bb34>
 400d040:	05000044 	movi	r20,1
 400d044:	003eef06 	br	400cc04 <__reset+0xfb00bc04>
 400d048:	4029883a 	mov	r20,r8
 400d04c:	da009017 	ldw	r8,576(sp)
 400d050:	a809883a 	mov	r4,r21
 400d054:	a00b883a 	mov	r5,r20
 400d058:	020dc83a 	sub	r6,zero,r8
 400d05c:	dc409115 	stw	r17,580(sp)
 400d060:	dd809417 	ldw	r22,592(sp)
 400d064:	dcc08d15 	stw	r19,564(sp)
 400d068:	400d9fc0 	call	400d9fc <scalbn>
 400d06c:	000d883a 	mov	r6,zero
 400d070:	01d05c34 	movhi	r7,16752
 400d074:	1009883a 	mov	r4,r2
 400d078:	180b883a 	mov	r5,r3
 400d07c:	102b883a 	mov	r21,r2
 400d080:	1823883a 	mov	r17,r3
 400d084:	40105740 	call	4010574 <__gedf2>
 400d088:	1000e916 	blt	r2,zero,400d430 <__kernel_rem_pio2+0xcf8>
 400d08c:	000d883a 	mov	r6,zero
 400d090:	01cf9c34 	movhi	r7,15984
 400d094:	880b883a 	mov	r5,r17
 400d098:	a809883a 	mov	r4,r21
 400d09c:	40107440 	call	4010744 <__muldf3>
 400d0a0:	180b883a 	mov	r5,r3
 400d0a4:	1009883a 	mov	r4,r2
 400d0a8:	40117580 	call	4011758 <__fixdfsi>
 400d0ac:	1029883a 	mov	r20,r2
 400d0b0:	9485883a 	add	r2,r18,r18
 400d0b4:	1085883a 	add	r2,r2,r2
 400d0b8:	a009883a 	mov	r4,r20
 400d0bc:	d8a1883a 	add	r16,sp,r2
 400d0c0:	40117d80 	call	40117d8 <__floatsidf>
 400d0c4:	000d883a 	mov	r6,zero
 400d0c8:	01d05c34 	movhi	r7,16752
 400d0cc:	1009883a 	mov	r4,r2
 400d0d0:	180b883a 	mov	r5,r3
 400d0d4:	40107440 	call	4010744 <__muldf3>
 400d0d8:	880b883a 	mov	r5,r17
 400d0dc:	100d883a 	mov	r6,r2
 400d0e0:	180f883a 	mov	r7,r3
 400d0e4:	a809883a 	mov	r4,r21
 400d0e8:	4010e5c0 	call	4010e5c <__subdf3>
 400d0ec:	180b883a 	mov	r5,r3
 400d0f0:	1009883a 	mov	r4,r2
 400d0f4:	40117580 	call	4011758 <__fixdfsi>
 400d0f8:	da009017 	ldw	r8,576(sp)
 400d0fc:	94400044 	addi	r17,r18,1
 400d100:	8c47883a 	add	r3,r17,r17
 400d104:	84007804 	addi	r16,r16,480
 400d108:	18c7883a 	add	r3,r3,r3
 400d10c:	80800015 	stw	r2,0(r16)
 400d110:	d8c7883a 	add	r3,sp,r3
 400d114:	42000604 	addi	r8,r8,24
 400d118:	da009015 	stw	r8,576(sp)
 400d11c:	1d007815 	stw	r20,480(r3)
 400d120:	003f4b06 	br	400ce50 <__reset+0xfb00be50>
 400d124:	da00a617 	ldw	r8,664(sp)
 400d128:	008000c4 	movi	r2,3
 400d12c:	40bfad1e 	bne	r8,r2,400cfe4 <__reset+0xfb00bfe4>
 400d130:	0440bc0e 	bge	zero,r17,400d424 <__kernel_rem_pio2+0xcec>
 400d134:	da008e17 	ldw	r8,568(sp)
 400d138:	882090fa 	slli	r16,r17,3
 400d13c:	dd402804 	addi	r21,sp,160
 400d140:	da05883a 	add	r2,sp,r8
 400d144:	10802804 	addi	r2,r2,160
 400d148:	15c00017 	ldw	r23,0(r2)
 400d14c:	15800117 	ldw	r22,4(r2)
 400d150:	8029883a 	mov	r20,r16
 400d154:	843ffe04 	addi	r16,r16,-8
 400d158:	ac21883a 	add	r16,r21,r16
 400d15c:	ad29883a 	add	r20,r21,r20
 400d160:	dac02604 	addi	r11,sp,152
 400d164:	8811883a 	mov	r8,r17
 400d168:	84400017 	ldw	r17,0(r16)
 400d16c:	87000117 	ldw	fp,4(r16)
 400d170:	b80d883a 	mov	r6,r23
 400d174:	b00f883a 	mov	r7,r22
 400d178:	8809883a 	mov	r4,r17
 400d17c:	e00b883a 	mov	r5,fp
 400d180:	da009b15 	stw	r8,620(sp)
 400d184:	dac09915 	stw	r11,612(sp)
 400d188:	400f3580 	call	400f358 <__adddf3>
 400d18c:	100d883a 	mov	r6,r2
 400d190:	180f883a 	mov	r7,r3
 400d194:	8809883a 	mov	r4,r17
 400d198:	e00b883a 	mov	r5,fp
 400d19c:	1027883a 	mov	r19,r2
 400d1a0:	1825883a 	mov	r18,r3
 400d1a4:	4010e5c0 	call	4010e5c <__subdf3>
 400d1a8:	b80d883a 	mov	r6,r23
 400d1ac:	b00f883a 	mov	r7,r22
 400d1b0:	1009883a 	mov	r4,r2
 400d1b4:	180b883a 	mov	r5,r3
 400d1b8:	400f3580 	call	400f358 <__adddf3>
 400d1bc:	dac09917 	ldw	r11,612(sp)
 400d1c0:	a0800015 	stw	r2,0(r20)
 400d1c4:	a0c00115 	stw	r3,4(r20)
 400d1c8:	84c00015 	stw	r19,0(r16)
 400d1cc:	84800115 	stw	r18,4(r16)
 400d1d0:	843ffe04 	addi	r16,r16,-8
 400d1d4:	a53ffe04 	addi	r20,r20,-8
 400d1d8:	982f883a 	mov	r23,r19
 400d1dc:	902d883a 	mov	r22,r18
 400d1e0:	da009b17 	ldw	r8,620(sp)
 400d1e4:	5c3fe01e 	bne	r11,r16,400d168 <__reset+0xfb00c168>
 400d1e8:	00800044 	movi	r2,1
 400d1ec:	12008d0e 	bge	r2,r8,400d424 <__kernel_rem_pio2+0xcec>
 400d1f0:	402090fa 	slli	r16,r8,3
 400d1f4:	da008e17 	ldw	r8,568(sp)
 400d1f8:	8023883a 	mov	r17,r16
 400d1fc:	da05883a 	add	r2,sp,r8
 400d200:	10802804 	addi	r2,r2,160
 400d204:	15800017 	ldw	r22,0(r2)
 400d208:	15000117 	ldw	r20,4(r2)
 400d20c:	ac63883a 	add	r17,r21,r17
 400d210:	843ffe04 	addi	r16,r16,-8
 400d214:	ac21883a 	add	r16,r21,r16
 400d218:	8825883a 	mov	r18,r17
 400d21c:	8811883a 	mov	r8,r17
 400d220:	84400017 	ldw	r17,0(r16)
 400d224:	87000117 	ldw	fp,4(r16)
 400d228:	b009883a 	mov	r4,r22
 400d22c:	a00b883a 	mov	r5,r20
 400d230:	880d883a 	mov	r6,r17
 400d234:	e00f883a 	mov	r7,fp
 400d238:	da009b15 	stw	r8,620(sp)
 400d23c:	400f3580 	call	400f358 <__adddf3>
 400d240:	100d883a 	mov	r6,r2
 400d244:	180f883a 	mov	r7,r3
 400d248:	8809883a 	mov	r4,r17
 400d24c:	e00b883a 	mov	r5,fp
 400d250:	102f883a 	mov	r23,r2
 400d254:	1827883a 	mov	r19,r3
 400d258:	4010e5c0 	call	4010e5c <__subdf3>
 400d25c:	b00d883a 	mov	r6,r22
 400d260:	a00f883a 	mov	r7,r20
 400d264:	1009883a 	mov	r4,r2
 400d268:	180b883a 	mov	r5,r3
 400d26c:	400f3580 	call	400f358 <__adddf3>
 400d270:	90800015 	stw	r2,0(r18)
 400d274:	90c00115 	stw	r3,4(r18)
 400d278:	85c00015 	stw	r23,0(r16)
 400d27c:	84c00115 	stw	r19,4(r16)
 400d280:	843ffe04 	addi	r16,r16,-8
 400d284:	94bffe04 	addi	r18,r18,-8
 400d288:	b82d883a 	mov	r22,r23
 400d28c:	9829883a 	mov	r20,r19
 400d290:	da009b17 	ldw	r8,620(sp)
 400d294:	ac3fe21e 	bne	r21,r16,400d220 <__reset+0xfb00c220>
 400d298:	4023883a 	mov	r17,r8
 400d29c:	dc002a04 	addi	r16,sp,168
 400d2a0:	0005883a 	mov	r2,zero
 400d2a4:	0007883a 	mov	r3,zero
 400d2a8:	89800017 	ldw	r6,0(r17)
 400d2ac:	89c00117 	ldw	r7,4(r17)
 400d2b0:	1009883a 	mov	r4,r2
 400d2b4:	8c7ffe04 	addi	r17,r17,-8
 400d2b8:	180b883a 	mov	r5,r3
 400d2bc:	400f3580 	call	400f358 <__adddf3>
 400d2c0:	847ff91e 	bne	r16,r17,400d2a8 <__reset+0xfb00c2a8>
 400d2c4:	da008d17 	ldw	r8,564(sp)
 400d2c8:	40004726 	beq	r8,zero,400d3e8 <__kernel_rem_pio2+0xcb0>
 400d2cc:	d9002b17 	ldw	r4,172(sp)
 400d2d0:	d9402917 	ldw	r5,164(sp)
 400d2d4:	d9802a17 	ldw	r6,168(sp)
 400d2d8:	da008f17 	ldw	r8,572(sp)
 400d2dc:	d9c02817 	ldw	r7,160(sp)
 400d2e0:	2960003c 	xorhi	r5,r5,32768
 400d2e4:	2120003c 	xorhi	r4,r4,32768
 400d2e8:	18e0003c 	xorhi	r3,r3,32768
 400d2ec:	41c00015 	stw	r7,0(r8)
 400d2f0:	41400115 	stw	r5,4(r8)
 400d2f4:	41800215 	stw	r6,8(r8)
 400d2f8:	41000315 	stw	r4,12(r8)
 400d2fc:	40800415 	stw	r2,16(r8)
 400d300:	40c00515 	stw	r3,20(r8)
 400d304:	003f3706 	br	400cfe4 <__reset+0xfb00bfe4>
 400d308:	da008e17 	ldw	r8,568(sp)
 400d30c:	d8802804 	addi	r2,sp,160
 400d310:	dc002604 	addi	r16,sp,152
 400d314:	1225883a 	add	r18,r2,r8
 400d318:	0007883a 	mov	r3,zero
 400d31c:	0005883a 	mov	r2,zero
 400d320:	91800017 	ldw	r6,0(r18)
 400d324:	91c00117 	ldw	r7,4(r18)
 400d328:	1009883a 	mov	r4,r2
 400d32c:	94bffe04 	addi	r18,r18,-8
 400d330:	180b883a 	mov	r5,r3
 400d334:	400f3580 	call	400f358 <__adddf3>
 400d338:	943ff91e 	bne	r18,r16,400d320 <__reset+0xfb00c320>
 400d33c:	da008d17 	ldw	r8,564(sp)
 400d340:	d9002817 	ldw	r4,160(sp)
 400d344:	d9402917 	ldw	r5,164(sp)
 400d348:	40001a26 	beq	r8,zero,400d3b4 <__kernel_rem_pio2+0xc7c>
 400d34c:	da008f17 	ldw	r8,572(sp)
 400d350:	19a0003c 	xorhi	r6,r3,32768
 400d354:	180f883a 	mov	r7,r3
 400d358:	41800115 	stw	r6,4(r8)
 400d35c:	40800015 	stw	r2,0(r8)
 400d360:	100d883a 	mov	r6,r2
 400d364:	4010e5c0 	call	4010e5c <__subdf3>
 400d368:	04400c0e 	bge	zero,r17,400d39c <__kernel_rem_pio2+0xc64>
 400d36c:	dc002a04 	addi	r16,sp,168
 400d370:	04800044 	movi	r18,1
 400d374:	81800017 	ldw	r6,0(r16)
 400d378:	81c00117 	ldw	r7,4(r16)
 400d37c:	1009883a 	mov	r4,r2
 400d380:	180b883a 	mov	r5,r3
 400d384:	94800044 	addi	r18,r18,1
 400d388:	400f3580 	call	400f358 <__adddf3>
 400d38c:	84000204 	addi	r16,r16,8
 400d390:	8cbff80e 	bge	r17,r18,400d374 <__reset+0xfb00c374>
 400d394:	da008d17 	ldw	r8,564(sp)
 400d398:	40004226 	beq	r8,zero,400d4a4 <__kernel_rem_pio2+0xd6c>
 400d39c:	da008f17 	ldw	r8,572(sp)
 400d3a0:	1009883a 	mov	r4,r2
 400d3a4:	18a0003c 	xorhi	r2,r3,32768
 400d3a8:	41000215 	stw	r4,8(r8)
 400d3ac:	40800315 	stw	r2,12(r8)
 400d3b0:	003f0c06 	br	400cfe4 <__reset+0xfb00bfe4>
 400d3b4:	da008f17 	ldw	r8,572(sp)
 400d3b8:	100d883a 	mov	r6,r2
 400d3bc:	180f883a 	mov	r7,r3
 400d3c0:	40800015 	stw	r2,0(r8)
 400d3c4:	40c00115 	stw	r3,4(r8)
 400d3c8:	4010e5c0 	call	4010e5c <__subdf3>
 400d3cc:	047fe716 	blt	zero,r17,400d36c <__reset+0xfb00c36c>
 400d3d0:	da008f17 	ldw	r8,572(sp)
 400d3d4:	1009883a 	mov	r4,r2
 400d3d8:	1805883a 	mov	r2,r3
 400d3dc:	41000215 	stw	r4,8(r8)
 400d3e0:	40800315 	stw	r2,12(r8)
 400d3e4:	003eff06 	br	400cfe4 <__reset+0xfb00bfe4>
 400d3e8:	da008f17 	ldw	r8,572(sp)
 400d3ec:	d9802817 	ldw	r6,160(sp)
 400d3f0:	d9402a17 	ldw	r5,168(sp)
 400d3f4:	d9002b17 	ldw	r4,172(sp)
 400d3f8:	41800015 	stw	r6,0(r8)
 400d3fc:	d9802917 	ldw	r6,164(sp)
 400d400:	41400215 	stw	r5,8(r8)
 400d404:	41000315 	stw	r4,12(r8)
 400d408:	41800115 	stw	r6,4(r8)
 400d40c:	40800415 	stw	r2,16(r8)
 400d410:	40c00515 	stw	r3,20(r8)
 400d414:	003ef306 	br	400cfe4 <__reset+0xfb00bfe4>
 400d418:	da00a617 	ldw	r8,664(sp)
 400d41c:	008000c4 	movi	r2,3
 400d420:	40bef01e 	bne	r8,r2,400cfe4 <__reset+0xfb00bfe4>
 400d424:	0005883a 	mov	r2,zero
 400d428:	0007883a 	mov	r3,zero
 400d42c:	003fa506 	br	400d2c4 <__reset+0xfb00c2c4>
 400d430:	9485883a 	add	r2,r18,r18
 400d434:	1085883a 	add	r2,r2,r2
 400d438:	d8a1883a 	add	r16,sp,r2
 400d43c:	880b883a 	mov	r5,r17
 400d440:	a809883a 	mov	r4,r21
 400d444:	84007804 	addi	r16,r16,480
 400d448:	40117580 	call	4011758 <__fixdfsi>
 400d44c:	80800015 	stw	r2,0(r16)
 400d450:	9023883a 	mov	r17,r18
 400d454:	003e7e06 	br	400ce50 <__reset+0xfb00be50>
 400d458:	a80d883a 	mov	r6,r21
 400d45c:	400f883a 	mov	r7,r8
 400d460:	0009883a 	mov	r4,zero
 400d464:	014ffc34 	movhi	r5,16368
 400d468:	4010e5c0 	call	4010e5c <__subdf3>
 400d46c:	102b883a 	mov	r21,r2
 400d470:	1811883a 	mov	r8,r3
 400d474:	04c00084 	movi	r19,2
 400d478:	003dc006 	br	400cb7c <__reset+0xfb00bb7c>
 400d47c:	da00a617 	ldw	r8,664(sp)
 400d480:	00800084 	movi	r2,2
 400d484:	123fe416 	blt	r2,r8,400d418 <__reset+0xfb00c418>
 400d488:	02000c16 	blt	zero,r8,400d4bc <__kernel_rem_pio2+0xd84>
 400d48c:	403ed51e 	bne	r8,zero,400cfe4 <__reset+0xfb00bfe4>
 400d490:	0005883a 	mov	r2,zero
 400d494:	0007883a 	mov	r3,zero
 400d498:	003ecc06 	br	400cfcc <__reset+0xfb00bfcc>
 400d49c:	d8009215 	stw	zero,584(sp)
 400d4a0:	003cc306 	br	400c7b0 <__reset+0xfb00b7b0>
 400d4a4:	da008f17 	ldw	r8,572(sp)
 400d4a8:	1009883a 	mov	r4,r2
 400d4ac:	1805883a 	mov	r2,r3
 400d4b0:	41000215 	stw	r4,8(r8)
 400d4b4:	40800315 	stw	r2,12(r8)
 400d4b8:	003eca06 	br	400cfe4 <__reset+0xfb00bfe4>
 400d4bc:	0005883a 	mov	r2,zero
 400d4c0:	0007883a 	mov	r3,zero
 400d4c4:	003f9d06 	br	400d33c <__reset+0xfb00c33c>

0400d4c8 <__kernel_sin>:
 400d4c8:	00a00034 	movhi	r2,32768
 400d4cc:	defff404 	addi	sp,sp,-48
 400d4d0:	10bfffc4 	addi	r2,r2,-1
 400d4d4:	00cf9034 	movhi	r3,15936
 400d4d8:	ddc00915 	stw	r23,36(sp)
 400d4dc:	dd800815 	stw	r22,32(sp)
 400d4e0:	dc400315 	stw	r17,12(sp)
 400d4e4:	dc000215 	stw	r16,8(sp)
 400d4e8:	dfc00b15 	stw	ra,44(sp)
 400d4ec:	df000a15 	stw	fp,40(sp)
 400d4f0:	dd400715 	stw	r21,28(sp)
 400d4f4:	dd000615 	stw	r20,24(sp)
 400d4f8:	dcc00515 	stw	r19,20(sp)
 400d4fc:	dc800415 	stw	r18,16(sp)
 400d500:	2884703a 	and	r2,r5,r2
 400d504:	18ffffc4 	addi	r3,r3,-1
 400d508:	2821883a 	mov	r16,r5
 400d50c:	2023883a 	mov	r17,r4
 400d510:	302f883a 	mov	r23,r6
 400d514:	382d883a 	mov	r22,r7
 400d518:	18800216 	blt	r3,r2,400d524 <__kernel_sin+0x5c>
 400d51c:	40117580 	call	4011758 <__fixdfsi>
 400d520:	10009926 	beq	r2,zero,400d788 <__kernel_sin+0x2c0>
 400d524:	880d883a 	mov	r6,r17
 400d528:	800f883a 	mov	r7,r16
 400d52c:	8809883a 	mov	r4,r17
 400d530:	800b883a 	mov	r5,r16
 400d534:	40107440 	call	4010744 <__muldf3>
 400d538:	100d883a 	mov	r6,r2
 400d53c:	180f883a 	mov	r7,r3
 400d540:	8809883a 	mov	r4,r17
 400d544:	800b883a 	mov	r5,r16
 400d548:	1027883a 	mov	r19,r2
 400d54c:	1825883a 	mov	r18,r3
 400d550:	40107440 	call	4010744 <__muldf3>
 400d554:	0196b434 	movhi	r6,23248
 400d558:	01cf79b4 	movhi	r7,15846
 400d55c:	31b55f04 	addi	r6,r6,-10884
 400d560:	39f64e84 	addi	r7,r7,-9926
 400d564:	9809883a 	mov	r4,r19
 400d568:	900b883a 	mov	r5,r18
 400d56c:	102b883a 	mov	r21,r2
 400d570:	1829883a 	mov	r20,r3
 400d574:	40107440 	call	4010744 <__muldf3>
 400d578:	01a28b34 	movhi	r6,35372
 400d57c:	01cf96f4 	movhi	r7,15963
 400d580:	31a73ac4 	addi	r6,r6,-25365
 400d584:	39f97984 	addi	r7,r7,-6682
 400d588:	1009883a 	mov	r4,r2
 400d58c:	180b883a 	mov	r5,r3
 400d590:	4010e5c0 	call	4010e5c <__subdf3>
 400d594:	980d883a 	mov	r6,r19
 400d598:	900f883a 	mov	r7,r18
 400d59c:	1009883a 	mov	r4,r2
 400d5a0:	180b883a 	mov	r5,r3
 400d5a4:	40107440 	call	4010744 <__muldf3>
 400d5a8:	0195ecb4 	movhi	r6,22450
 400d5ac:	01cfb1f4 	movhi	r7,16071
 400d5b0:	31bf9f44 	addi	r6,r6,-387
 400d5b4:	39c778c4 	addi	r7,r7,7651
 400d5b8:	1009883a 	mov	r4,r2
 400d5bc:	180b883a 	mov	r5,r3
 400d5c0:	400f3580 	call	400f358 <__adddf3>
 400d5c4:	980d883a 	mov	r6,r19
 400d5c8:	900f883a 	mov	r7,r18
 400d5cc:	1009883a 	mov	r4,r2
 400d5d0:	180b883a 	mov	r5,r3
 400d5d4:	40107440 	call	4010744 <__muldf3>
 400d5d8:	01867074 	movhi	r6,6593
 400d5dc:	01cfcab4 	movhi	r7,16170
 400d5e0:	31987544 	addi	r6,r6,25045
 400d5e4:	39c06804 	addi	r7,r7,416
 400d5e8:	1009883a 	mov	r4,r2
 400d5ec:	180b883a 	mov	r5,r3
 400d5f0:	4010e5c0 	call	4010e5c <__subdf3>
 400d5f4:	980d883a 	mov	r6,r19
 400d5f8:	900f883a 	mov	r7,r18
 400d5fc:	1009883a 	mov	r4,r2
 400d600:	180b883a 	mov	r5,r3
 400d604:	40107440 	call	4010744 <__muldf3>
 400d608:	01844474 	movhi	r6,4369
 400d60c:	01cfe074 	movhi	r7,16257
 400d610:	31be2984 	addi	r6,r6,-1882
 400d614:	39c44444 	addi	r7,r7,4369
 400d618:	1009883a 	mov	r4,r2
 400d61c:	180b883a 	mov	r5,r3
 400d620:	400f3580 	call	400f358 <__adddf3>
 400d624:	1011883a 	mov	r8,r2
 400d628:	d8800c17 	ldw	r2,48(sp)
 400d62c:	1839883a 	mov	fp,r3
 400d630:	10003e26 	beq	r2,zero,400d72c <__kernel_sin+0x264>
 400d634:	000d883a 	mov	r6,zero
 400d638:	01cff834 	movhi	r7,16352
 400d63c:	b809883a 	mov	r4,r23
 400d640:	b00b883a 	mov	r5,r22
 400d644:	da000015 	stw	r8,0(sp)
 400d648:	40107440 	call	4010744 <__muldf3>
 400d64c:	da000017 	ldw	r8,0(sp)
 400d650:	e00f883a 	mov	r7,fp
 400d654:	a809883a 	mov	r4,r21
 400d658:	400d883a 	mov	r6,r8
 400d65c:	a00b883a 	mov	r5,r20
 400d660:	d8c00115 	stw	r3,4(sp)
 400d664:	d8800015 	stw	r2,0(sp)
 400d668:	40107440 	call	4010744 <__muldf3>
 400d66c:	da800017 	ldw	r10,0(sp)
 400d670:	da400117 	ldw	r9,4(sp)
 400d674:	100d883a 	mov	r6,r2
 400d678:	5009883a 	mov	r4,r10
 400d67c:	480b883a 	mov	r5,r9
 400d680:	180f883a 	mov	r7,r3
 400d684:	4010e5c0 	call	4010e5c <__subdf3>
 400d688:	980d883a 	mov	r6,r19
 400d68c:	900f883a 	mov	r7,r18
 400d690:	1009883a 	mov	r4,r2
 400d694:	180b883a 	mov	r5,r3
 400d698:	40107440 	call	4010744 <__muldf3>
 400d69c:	b80d883a 	mov	r6,r23
 400d6a0:	b00f883a 	mov	r7,r22
 400d6a4:	1009883a 	mov	r4,r2
 400d6a8:	180b883a 	mov	r5,r3
 400d6ac:	4010e5c0 	call	4010e5c <__subdf3>
 400d6b0:	01955574 	movhi	r6,21845
 400d6b4:	01cff174 	movhi	r7,16325
 400d6b8:	31955244 	addi	r6,r6,21833
 400d6bc:	39d55544 	addi	r7,r7,21845
 400d6c0:	a809883a 	mov	r4,r21
 400d6c4:	a00b883a 	mov	r5,r20
 400d6c8:	1027883a 	mov	r19,r2
 400d6cc:	1825883a 	mov	r18,r3
 400d6d0:	40107440 	call	4010744 <__muldf3>
 400d6d4:	100d883a 	mov	r6,r2
 400d6d8:	180f883a 	mov	r7,r3
 400d6dc:	9809883a 	mov	r4,r19
 400d6e0:	900b883a 	mov	r5,r18
 400d6e4:	400f3580 	call	400f358 <__adddf3>
 400d6e8:	100d883a 	mov	r6,r2
 400d6ec:	180f883a 	mov	r7,r3
 400d6f0:	8809883a 	mov	r4,r17
 400d6f4:	800b883a 	mov	r5,r16
 400d6f8:	4010e5c0 	call	4010e5c <__subdf3>
 400d6fc:	dfc00b17 	ldw	ra,44(sp)
 400d700:	df000a17 	ldw	fp,40(sp)
 400d704:	ddc00917 	ldw	r23,36(sp)
 400d708:	dd800817 	ldw	r22,32(sp)
 400d70c:	dd400717 	ldw	r21,28(sp)
 400d710:	dd000617 	ldw	r20,24(sp)
 400d714:	dcc00517 	ldw	r19,20(sp)
 400d718:	dc800417 	ldw	r18,16(sp)
 400d71c:	dc400317 	ldw	r17,12(sp)
 400d720:	dc000217 	ldw	r16,8(sp)
 400d724:	dec00c04 	addi	sp,sp,48
 400d728:	f800283a 	ret
 400d72c:	400d883a 	mov	r6,r8
 400d730:	9809883a 	mov	r4,r19
 400d734:	900b883a 	mov	r5,r18
 400d738:	180f883a 	mov	r7,r3
 400d73c:	40107440 	call	4010744 <__muldf3>
 400d740:	01955574 	movhi	r6,21845
 400d744:	01cff174 	movhi	r7,16325
 400d748:	31955244 	addi	r6,r6,21833
 400d74c:	39d55544 	addi	r7,r7,21845
 400d750:	1009883a 	mov	r4,r2
 400d754:	180b883a 	mov	r5,r3
 400d758:	4010e5c0 	call	4010e5c <__subdf3>
 400d75c:	a80d883a 	mov	r6,r21
 400d760:	a00f883a 	mov	r7,r20
 400d764:	1009883a 	mov	r4,r2
 400d768:	180b883a 	mov	r5,r3
 400d76c:	40107440 	call	4010744 <__muldf3>
 400d770:	880d883a 	mov	r6,r17
 400d774:	800f883a 	mov	r7,r16
 400d778:	1009883a 	mov	r4,r2
 400d77c:	180b883a 	mov	r5,r3
 400d780:	400f3580 	call	400f358 <__adddf3>
 400d784:	003fdd06 	br	400d6fc <__reset+0xfb00c6fc>
 400d788:	8805883a 	mov	r2,r17
 400d78c:	8007883a 	mov	r3,r16
 400d790:	003fda06 	br	400d6fc <__reset+0xfb00c6fc>

0400d794 <floor>:
 400d794:	2811d53a 	srai	r8,r5,20
 400d798:	defffa04 	addi	sp,sp,-24
 400d79c:	dcc00315 	stw	r19,12(sp)
 400d7a0:	4201ffcc 	andi	r8,r8,2047
 400d7a4:	dc800215 	stw	r18,8(sp)
 400d7a8:	dc400115 	stw	r17,4(sp)
 400d7ac:	dc000015 	stw	r16,0(sp)
 400d7b0:	dfc00515 	stw	ra,20(sp)
 400d7b4:	dd000415 	stw	r20,16(sp)
 400d7b8:	44bf0044 	addi	r18,r8,-1023
 400d7bc:	018004c4 	movi	r6,19
 400d7c0:	2821883a 	mov	r16,r5
 400d7c4:	2005883a 	mov	r2,r4
 400d7c8:	280f883a 	mov	r7,r5
 400d7cc:	2827883a 	mov	r19,r5
 400d7d0:	2023883a 	mov	r17,r4
 400d7d4:	34801916 	blt	r6,r18,400d83c <floor+0xa8>
 400d7d8:	90003c16 	blt	r18,zero,400d8cc <floor+0x138>
 400d7dc:	05000434 	movhi	r20,16
 400d7e0:	a53fffc4 	addi	r20,r20,-1
 400d7e4:	a4a9d83a 	sra	r20,r20,r18
 400d7e8:	2d0c703a 	and	r6,r5,r20
 400d7ec:	310cb03a 	or	r6,r6,r4
 400d7f0:	30001626 	beq	r6,zero,400d84c <floor+0xb8>
 400d7f4:	01a20034 	movhi	r6,34816
 400d7f8:	01df8e34 	movhi	r7,32312
 400d7fc:	319d6704 	addi	r6,r6,30108
 400d800:	39f90f04 	addi	r7,r7,-7108
 400d804:	400f3580 	call	400f358 <__adddf3>
 400d808:	000d883a 	mov	r6,zero
 400d80c:	000f883a 	mov	r7,zero
 400d810:	1009883a 	mov	r4,r2
 400d814:	180b883a 	mov	r5,r3
 400d818:	40105740 	call	4010574 <__gedf2>
 400d81c:	0080040e 	bge	zero,r2,400d830 <floor+0x9c>
 400d820:	80003c16 	blt	r16,zero,400d914 <floor+0x180>
 400d824:	0520303a 	nor	r16,zero,r20
 400d828:	84e0703a 	and	r16,r16,r19
 400d82c:	0023883a 	mov	r17,zero
 400d830:	8805883a 	mov	r2,r17
 400d834:	8007883a 	mov	r3,r16
 400d838:	00000506 	br	400d850 <floor+0xbc>
 400d83c:	01800cc4 	movi	r6,51
 400d840:	34800b0e 	bge	r6,r18,400d870 <floor+0xdc>
 400d844:	01810004 	movi	r6,1024
 400d848:	91802f26 	beq	r18,r6,400d908 <floor+0x174>
 400d84c:	3807883a 	mov	r3,r7
 400d850:	dfc00517 	ldw	ra,20(sp)
 400d854:	dd000417 	ldw	r20,16(sp)
 400d858:	dcc00317 	ldw	r19,12(sp)
 400d85c:	dc800217 	ldw	r18,8(sp)
 400d860:	dc400117 	ldw	r17,4(sp)
 400d864:	dc000017 	ldw	r16,0(sp)
 400d868:	dec00604 	addi	sp,sp,24
 400d86c:	f800283a 	ret
 400d870:	423efb44 	addi	r8,r8,-1043
 400d874:	053fffc4 	movi	r20,-1
 400d878:	a228d83a 	srl	r20,r20,r8
 400d87c:	250c703a 	and	r6,r4,r20
 400d880:	303ff226 	beq	r6,zero,400d84c <__reset+0xfb00c84c>
 400d884:	01a20034 	movhi	r6,34816
 400d888:	01df8e34 	movhi	r7,32312
 400d88c:	319d6704 	addi	r6,r6,30108
 400d890:	39f90f04 	addi	r7,r7,-7108
 400d894:	400f3580 	call	400f358 <__adddf3>
 400d898:	000d883a 	mov	r6,zero
 400d89c:	000f883a 	mov	r7,zero
 400d8a0:	1009883a 	mov	r4,r2
 400d8a4:	180b883a 	mov	r5,r3
 400d8a8:	40105740 	call	4010574 <__gedf2>
 400d8ac:	00bfe00e 	bge	zero,r2,400d830 <__reset+0xfb00c830>
 400d8b0:	80001c16 	blt	r16,zero,400d924 <floor+0x190>
 400d8b4:	0510303a 	nor	r8,zero,r20
 400d8b8:	9821883a 	mov	r16,r19
 400d8bc:	8a22703a 	and	r17,r17,r8
 400d8c0:	8805883a 	mov	r2,r17
 400d8c4:	8007883a 	mov	r3,r16
 400d8c8:	003fe106 	br	400d850 <__reset+0xfb00c850>
 400d8cc:	01a20034 	movhi	r6,34816
 400d8d0:	01df8e34 	movhi	r7,32312
 400d8d4:	319d6704 	addi	r6,r6,30108
 400d8d8:	39f90f04 	addi	r7,r7,-7108
 400d8dc:	400f3580 	call	400f358 <__adddf3>
 400d8e0:	000d883a 	mov	r6,zero
 400d8e4:	000f883a 	mov	r7,zero
 400d8e8:	1009883a 	mov	r4,r2
 400d8ec:	180b883a 	mov	r5,r3
 400d8f0:	40105740 	call	4010574 <__gedf2>
 400d8f4:	00bfce0e 	bge	zero,r2,400d830 <__reset+0xfb00c830>
 400d8f8:	80001516 	blt	r16,zero,400d950 <floor+0x1bc>
 400d8fc:	0023883a 	mov	r17,zero
 400d900:	0021883a 	mov	r16,zero
 400d904:	003fca06 	br	400d830 <__reset+0xfb00c830>
 400d908:	200d883a 	mov	r6,r4
 400d90c:	400f3580 	call	400f358 <__adddf3>
 400d910:	003fcf06 	br	400d850 <__reset+0xfb00c850>
 400d914:	00800434 	movhi	r2,16
 400d918:	14a5d83a 	sra	r18,r2,r18
 400d91c:	84a7883a 	add	r19,r16,r18
 400d920:	003fc006 	br	400d824 <__reset+0xfb00c824>
 400d924:	00800504 	movi	r2,20
 400d928:	90801326 	beq	r18,r2,400d978 <floor+0x1e4>
 400d92c:	00800d04 	movi	r2,52
 400d930:	14a5c83a 	sub	r18,r2,r18
 400d934:	00800044 	movi	r2,1
 400d938:	1484983a 	sll	r2,r2,r18
 400d93c:	1445883a 	add	r2,r2,r17
 400d940:	14400b2e 	bgeu	r2,r17,400d970 <floor+0x1dc>
 400d944:	84c00044 	addi	r19,r16,1
 400d948:	1023883a 	mov	r17,r2
 400d94c:	003fd906 	br	400d8b4 <__reset+0xfb00c8b4>
 400d950:	00a00034 	movhi	r2,32768
 400d954:	10bfffc4 	addi	r2,r2,-1
 400d958:	8084703a 	and	r2,r16,r2
 400d95c:	1462b03a 	or	r17,r2,r17
 400d960:	883fb326 	beq	r17,zero,400d830 <__reset+0xfb00c830>
 400d964:	0023883a 	mov	r17,zero
 400d968:	042ffc34 	movhi	r16,49136
 400d96c:	003fb006 	br	400d830 <__reset+0xfb00c830>
 400d970:	1023883a 	mov	r17,r2
 400d974:	003fcf06 	br	400d8b4 <__reset+0xfb00c8b4>
 400d978:	84c00044 	addi	r19,r16,1
 400d97c:	003fcd06 	br	400d8b4 <__reset+0xfb00c8b4>

0400d980 <__fpclassifyd>:
 400d980:	00a00034 	movhi	r2,32768
 400d984:	10bfffc4 	addi	r2,r2,-1
 400d988:	2884703a 	and	r2,r5,r2
 400d98c:	10000726 	beq	r2,zero,400d9ac <__fpclassifyd+0x2c>
 400d990:	00fffc34 	movhi	r3,65520
 400d994:	019ff834 	movhi	r6,32736
 400d998:	28c7883a 	add	r3,r5,r3
 400d99c:	31bfffc4 	addi	r6,r6,-1
 400d9a0:	30c00536 	bltu	r6,r3,400d9b8 <__fpclassifyd+0x38>
 400d9a4:	00800104 	movi	r2,4
 400d9a8:	f800283a 	ret
 400d9ac:	2000021e 	bne	r4,zero,400d9b8 <__fpclassifyd+0x38>
 400d9b0:	00800084 	movi	r2,2
 400d9b4:	f800283a 	ret
 400d9b8:	00dffc34 	movhi	r3,32752
 400d9bc:	019ff834 	movhi	r6,32736
 400d9c0:	28cb883a 	add	r5,r5,r3
 400d9c4:	31bfffc4 	addi	r6,r6,-1
 400d9c8:	317ff62e 	bgeu	r6,r5,400d9a4 <__reset+0xfb00c9a4>
 400d9cc:	01400434 	movhi	r5,16
 400d9d0:	297fffc4 	addi	r5,r5,-1
 400d9d4:	28800236 	bltu	r5,r2,400d9e0 <__fpclassifyd+0x60>
 400d9d8:	008000c4 	movi	r2,3
 400d9dc:	f800283a 	ret
 400d9e0:	10c00226 	beq	r2,r3,400d9ec <__fpclassifyd+0x6c>
 400d9e4:	0005883a 	mov	r2,zero
 400d9e8:	f800283a 	ret
 400d9ec:	2005003a 	cmpeq	r2,r4,zero
 400d9f0:	f800283a 	ret

0400d9f4 <matherr>:
 400d9f4:	0005883a 	mov	r2,zero
 400d9f8:	f800283a 	ret

0400d9fc <scalbn>:
 400d9fc:	2a1ffc2c 	andhi	r8,r5,32752
 400da00:	4011d53a 	srai	r8,r8,20
 400da04:	defffe04 	addi	sp,sp,-8
 400da08:	dc000015 	stw	r16,0(sp)
 400da0c:	dfc00115 	stw	ra,4(sp)
 400da10:	280f883a 	mov	r7,r5
 400da14:	2015883a 	mov	r10,r4
 400da18:	3021883a 	mov	r16,r6
 400da1c:	40001e1e 	bne	r8,zero,400da98 <scalbn+0x9c>
 400da20:	00a00034 	movhi	r2,32768
 400da24:	10bfffc4 	addi	r2,r2,-1
 400da28:	2884703a 	and	r2,r5,r2
 400da2c:	1104b03a 	or	r2,r2,r4
 400da30:	10002226 	beq	r2,zero,400dabc <scalbn+0xc0>
 400da34:	01d0d434 	movhi	r7,17232
 400da38:	000d883a 	mov	r6,zero
 400da3c:	40107440 	call	4010744 <__muldf3>
 400da40:	013ffff4 	movhi	r4,65535
 400da44:	210f2c04 	addi	r4,r4,15536
 400da48:	1015883a 	mov	r10,r2
 400da4c:	180f883a 	mov	r7,r3
 400da50:	81002a16 	blt	r16,r4,400dafc <scalbn+0x100>
 400da54:	191ffc2c 	andhi	r4,r3,32752
 400da58:	2009d53a 	srai	r4,r4,20
 400da5c:	223ff284 	addi	r8,r4,-54
 400da60:	8211883a 	add	r8,r16,r8
 400da64:	0081ff84 	movi	r2,2046
 400da68:	12002f16 	blt	r2,r8,400db28 <scalbn+0x12c>
 400da6c:	0200190e 	bge	zero,r8,400dad4 <scalbn+0xd8>
 400da70:	4010953a 	slli	r8,r8,20
 400da74:	01600434 	movhi	r5,32784
 400da78:	297fffc4 	addi	r5,r5,-1
 400da7c:	194e703a 	and	r7,r3,r5
 400da80:	5005883a 	mov	r2,r10
 400da84:	3a06b03a 	or	r3,r7,r8
 400da88:	dfc00117 	ldw	ra,4(sp)
 400da8c:	dc000017 	ldw	r16,0(sp)
 400da90:	dec00204 	addi	sp,sp,8
 400da94:	f800283a 	ret
 400da98:	0081ffc4 	movi	r2,2047
 400da9c:	2807883a 	mov	r3,r5
 400daa0:	40bfef1e 	bne	r8,r2,400da60 <__reset+0xfb00ca60>
 400daa4:	200d883a 	mov	r6,r4
 400daa8:	400f3580 	call	400f358 <__adddf3>
 400daac:	dfc00117 	ldw	ra,4(sp)
 400dab0:	dc000017 	ldw	r16,0(sp)
 400dab4:	dec00204 	addi	sp,sp,8
 400dab8:	f800283a 	ret
 400dabc:	2005883a 	mov	r2,r4
 400dac0:	2807883a 	mov	r3,r5
 400dac4:	dfc00117 	ldw	ra,4(sp)
 400dac8:	dc000017 	ldw	r16,0(sp)
 400dacc:	dec00204 	addi	sp,sp,8
 400dad0:	f800283a 	ret
 400dad4:	00bff2c4 	movi	r2,-53
 400dad8:	4080240e 	bge	r8,r2,400db6c <scalbn+0x170>
 400dadc:	00b0d414 	movui	r2,50000
 400dae0:	14001116 	blt	r2,r16,400db28 <scalbn+0x12c>
 400dae4:	0130be74 	movhi	r4,49913
 400dae8:	01406974 	movhi	r5,421
 400daec:	213cd644 	addi	r4,r4,-3239
 400daf0:	295b87c4 	addi	r5,r5,28191
 400daf4:	500d883a 	mov	r6,r10
 400daf8:	400db980 	call	400db98 <copysign>
 400dafc:	01b0be74 	movhi	r6,49913
 400db00:	01c06974 	movhi	r7,421
 400db04:	31bcd644 	addi	r6,r6,-3239
 400db08:	39db87c4 	addi	r7,r7,28191
 400db0c:	1009883a 	mov	r4,r2
 400db10:	180b883a 	mov	r5,r3
 400db14:	40107440 	call	4010744 <__muldf3>
 400db18:	dfc00117 	ldw	ra,4(sp)
 400db1c:	dc000017 	ldw	r16,0(sp)
 400db20:	dec00204 	addi	sp,sp,8
 400db24:	f800283a 	ret
 400db28:	01220034 	movhi	r4,34816
 400db2c:	015f8e34 	movhi	r5,32312
 400db30:	500d883a 	mov	r6,r10
 400db34:	211d6704 	addi	r4,r4,30108
 400db38:	29790f04 	addi	r5,r5,-7108
 400db3c:	400db980 	call	400db98 <copysign>
 400db40:	01a20034 	movhi	r6,34816
 400db44:	01df8e34 	movhi	r7,32312
 400db48:	319d6704 	addi	r6,r6,30108
 400db4c:	39f90f04 	addi	r7,r7,-7108
 400db50:	1009883a 	mov	r4,r2
 400db54:	180b883a 	mov	r5,r3
 400db58:	40107440 	call	4010744 <__muldf3>
 400db5c:	dfc00117 	ldw	ra,4(sp)
 400db60:	dc000017 	ldw	r16,0(sp)
 400db64:	dec00204 	addi	sp,sp,8
 400db68:	f800283a 	ret
 400db6c:	42000d84 	addi	r8,r8,54
 400db70:	4012953a 	slli	r9,r8,20
 400db74:	01e00434 	movhi	r7,32784
 400db78:	39ffffc4 	addi	r7,r7,-1
 400db7c:	19ca703a 	and	r5,r3,r7
 400db80:	000d883a 	mov	r6,zero
 400db84:	01cf2434 	movhi	r7,15504
 400db88:	5009883a 	mov	r4,r10
 400db8c:	494ab03a 	or	r5,r9,r5
 400db90:	40107440 	call	4010744 <__muldf3>
 400db94:	003fbc06 	br	400da88 <__reset+0xfb00ca88>

0400db98 <copysign>:
 400db98:	2005883a 	mov	r2,r4
 400db9c:	01200034 	movhi	r4,32768
 400dba0:	213fffc4 	addi	r4,r4,-1
 400dba4:	38e0002c 	andhi	r3,r7,32768
 400dba8:	290a703a 	and	r5,r5,r4
 400dbac:	28c6b03a 	or	r3,r5,r3
 400dbb0:	f800283a 	ret

0400dbb4 <__divsi3>:
 400dbb4:	20001b16 	blt	r4,zero,400dc24 <__divsi3+0x70>
 400dbb8:	000f883a 	mov	r7,zero
 400dbbc:	28001616 	blt	r5,zero,400dc18 <__divsi3+0x64>
 400dbc0:	200d883a 	mov	r6,r4
 400dbc4:	29001a2e 	bgeu	r5,r4,400dc30 <__divsi3+0x7c>
 400dbc8:	00800804 	movi	r2,32
 400dbcc:	00c00044 	movi	r3,1
 400dbd0:	00000106 	br	400dbd8 <__divsi3+0x24>
 400dbd4:	10000d26 	beq	r2,zero,400dc0c <__divsi3+0x58>
 400dbd8:	294b883a 	add	r5,r5,r5
 400dbdc:	10bfffc4 	addi	r2,r2,-1
 400dbe0:	18c7883a 	add	r3,r3,r3
 400dbe4:	293ffb36 	bltu	r5,r4,400dbd4 <__reset+0xfb00cbd4>
 400dbe8:	0005883a 	mov	r2,zero
 400dbec:	18000726 	beq	r3,zero,400dc0c <__divsi3+0x58>
 400dbf0:	0005883a 	mov	r2,zero
 400dbf4:	31400236 	bltu	r6,r5,400dc00 <__divsi3+0x4c>
 400dbf8:	314dc83a 	sub	r6,r6,r5
 400dbfc:	10c4b03a 	or	r2,r2,r3
 400dc00:	1806d07a 	srli	r3,r3,1
 400dc04:	280ad07a 	srli	r5,r5,1
 400dc08:	183ffa1e 	bne	r3,zero,400dbf4 <__reset+0xfb00cbf4>
 400dc0c:	38000126 	beq	r7,zero,400dc14 <__divsi3+0x60>
 400dc10:	0085c83a 	sub	r2,zero,r2
 400dc14:	f800283a 	ret
 400dc18:	014bc83a 	sub	r5,zero,r5
 400dc1c:	39c0005c 	xori	r7,r7,1
 400dc20:	003fe706 	br	400dbc0 <__reset+0xfb00cbc0>
 400dc24:	0109c83a 	sub	r4,zero,r4
 400dc28:	01c00044 	movi	r7,1
 400dc2c:	003fe306 	br	400dbbc <__reset+0xfb00cbbc>
 400dc30:	00c00044 	movi	r3,1
 400dc34:	003fee06 	br	400dbf0 <__reset+0xfb00cbf0>

0400dc38 <__modsi3>:
 400dc38:	20001716 	blt	r4,zero,400dc98 <__modsi3+0x60>
 400dc3c:	000f883a 	mov	r7,zero
 400dc40:	2005883a 	mov	r2,r4
 400dc44:	28001216 	blt	r5,zero,400dc90 <__modsi3+0x58>
 400dc48:	2900162e 	bgeu	r5,r4,400dca4 <__modsi3+0x6c>
 400dc4c:	01800804 	movi	r6,32
 400dc50:	00c00044 	movi	r3,1
 400dc54:	00000106 	br	400dc5c <__modsi3+0x24>
 400dc58:	30000a26 	beq	r6,zero,400dc84 <__modsi3+0x4c>
 400dc5c:	294b883a 	add	r5,r5,r5
 400dc60:	31bfffc4 	addi	r6,r6,-1
 400dc64:	18c7883a 	add	r3,r3,r3
 400dc68:	293ffb36 	bltu	r5,r4,400dc58 <__reset+0xfb00cc58>
 400dc6c:	18000526 	beq	r3,zero,400dc84 <__modsi3+0x4c>
 400dc70:	1806d07a 	srli	r3,r3,1
 400dc74:	11400136 	bltu	r2,r5,400dc7c <__modsi3+0x44>
 400dc78:	1145c83a 	sub	r2,r2,r5
 400dc7c:	280ad07a 	srli	r5,r5,1
 400dc80:	183ffb1e 	bne	r3,zero,400dc70 <__reset+0xfb00cc70>
 400dc84:	38000126 	beq	r7,zero,400dc8c <__modsi3+0x54>
 400dc88:	0085c83a 	sub	r2,zero,r2
 400dc8c:	f800283a 	ret
 400dc90:	014bc83a 	sub	r5,zero,r5
 400dc94:	003fec06 	br	400dc48 <__reset+0xfb00cc48>
 400dc98:	0109c83a 	sub	r4,zero,r4
 400dc9c:	01c00044 	movi	r7,1
 400dca0:	003fe706 	br	400dc40 <__reset+0xfb00cc40>
 400dca4:	00c00044 	movi	r3,1
 400dca8:	003ff106 	br	400dc70 <__reset+0xfb00cc70>

0400dcac <__udivsi3>:
 400dcac:	200d883a 	mov	r6,r4
 400dcb0:	2900152e 	bgeu	r5,r4,400dd08 <__udivsi3+0x5c>
 400dcb4:	28001416 	blt	r5,zero,400dd08 <__udivsi3+0x5c>
 400dcb8:	00800804 	movi	r2,32
 400dcbc:	00c00044 	movi	r3,1
 400dcc0:	00000206 	br	400dccc <__udivsi3+0x20>
 400dcc4:	10000e26 	beq	r2,zero,400dd00 <__udivsi3+0x54>
 400dcc8:	28000516 	blt	r5,zero,400dce0 <__udivsi3+0x34>
 400dccc:	294b883a 	add	r5,r5,r5
 400dcd0:	10bfffc4 	addi	r2,r2,-1
 400dcd4:	18c7883a 	add	r3,r3,r3
 400dcd8:	293ffa36 	bltu	r5,r4,400dcc4 <__reset+0xfb00ccc4>
 400dcdc:	18000826 	beq	r3,zero,400dd00 <__udivsi3+0x54>
 400dce0:	0005883a 	mov	r2,zero
 400dce4:	31400236 	bltu	r6,r5,400dcf0 <__udivsi3+0x44>
 400dce8:	314dc83a 	sub	r6,r6,r5
 400dcec:	10c4b03a 	or	r2,r2,r3
 400dcf0:	1806d07a 	srli	r3,r3,1
 400dcf4:	280ad07a 	srli	r5,r5,1
 400dcf8:	183ffa1e 	bne	r3,zero,400dce4 <__reset+0xfb00cce4>
 400dcfc:	f800283a 	ret
 400dd00:	0005883a 	mov	r2,zero
 400dd04:	f800283a 	ret
 400dd08:	00c00044 	movi	r3,1
 400dd0c:	003ff406 	br	400dce0 <__reset+0xfb00cce0>

0400dd10 <__umodsi3>:
 400dd10:	2005883a 	mov	r2,r4
 400dd14:	2900122e 	bgeu	r5,r4,400dd60 <__umodsi3+0x50>
 400dd18:	28001116 	blt	r5,zero,400dd60 <__umodsi3+0x50>
 400dd1c:	01800804 	movi	r6,32
 400dd20:	00c00044 	movi	r3,1
 400dd24:	00000206 	br	400dd30 <__umodsi3+0x20>
 400dd28:	30000c26 	beq	r6,zero,400dd5c <__umodsi3+0x4c>
 400dd2c:	28000516 	blt	r5,zero,400dd44 <__umodsi3+0x34>
 400dd30:	294b883a 	add	r5,r5,r5
 400dd34:	31bfffc4 	addi	r6,r6,-1
 400dd38:	18c7883a 	add	r3,r3,r3
 400dd3c:	293ffa36 	bltu	r5,r4,400dd28 <__reset+0xfb00cd28>
 400dd40:	18000626 	beq	r3,zero,400dd5c <__umodsi3+0x4c>
 400dd44:	1806d07a 	srli	r3,r3,1
 400dd48:	11400136 	bltu	r2,r5,400dd50 <__umodsi3+0x40>
 400dd4c:	1145c83a 	sub	r2,r2,r5
 400dd50:	280ad07a 	srli	r5,r5,1
 400dd54:	183ffb1e 	bne	r3,zero,400dd44 <__reset+0xfb00cd44>
 400dd58:	f800283a 	ret
 400dd5c:	f800283a 	ret
 400dd60:	00c00044 	movi	r3,1
 400dd64:	003ff706 	br	400dd44 <__reset+0xfb00cd44>

0400dd68 <__addsf3>:
 400dd68:	defffc04 	addi	sp,sp,-16
 400dd6c:	2004d7fa 	srli	r2,r4,31
 400dd70:	280cd5fa 	srli	r6,r5,23
 400dd74:	dc000015 	stw	r16,0(sp)
 400dd78:	00c02034 	movhi	r3,128
 400dd7c:	2020d5fa 	srli	r16,r4,23
 400dd80:	280ed7fa 	srli	r7,r5,31
 400dd84:	18ffffc4 	addi	r3,r3,-1
 400dd88:	dc400115 	stw	r17,4(sp)
 400dd8c:	1908703a 	and	r4,r3,r4
 400dd90:	194a703a 	and	r5,r3,r5
 400dd94:	dfc00315 	stw	ra,12(sp)
 400dd98:	dc800215 	stw	r18,8(sp)
 400dd9c:	14403fcc 	andi	r17,r2,255
 400dda0:	84003fcc 	andi	r16,r16,255
 400dda4:	200890fa 	slli	r4,r4,3
 400dda8:	31803fcc 	andi	r6,r6,255
 400ddac:	280a90fa 	slli	r5,r5,3
 400ddb0:	89c05026 	beq	r17,r7,400def4 <__addsf3+0x18c>
 400ddb4:	8185c83a 	sub	r2,r16,r6
 400ddb8:	00807a0e 	bge	zero,r2,400dfa4 <__addsf3+0x23c>
 400ddbc:	30001e1e 	bne	r6,zero,400de38 <__addsf3+0xd0>
 400ddc0:	28006d1e 	bne	r5,zero,400df78 <__addsf3+0x210>
 400ddc4:	208001cc 	andi	r2,r4,7
 400ddc8:	10000426 	beq	r2,zero,400dddc <__addsf3+0x74>
 400ddcc:	208003cc 	andi	r2,r4,15
 400ddd0:	00c00104 	movi	r3,4
 400ddd4:	10c00126 	beq	r2,r3,400dddc <__addsf3+0x74>
 400ddd8:	20c9883a 	add	r4,r4,r3
 400dddc:	2081002c 	andhi	r2,r4,1024
 400dde0:	10003926 	beq	r2,zero,400dec8 <__addsf3+0x160>
 400dde4:	84000044 	addi	r16,r16,1
 400dde8:	00803fc4 	movi	r2,255
 400ddec:	80807826 	beq	r16,r2,400dfd0 <__addsf3+0x268>
 400ddf0:	200891ba 	slli	r4,r4,6
 400ddf4:	8805883a 	mov	r2,r17
 400ddf8:	2008d27a 	srli	r4,r4,9
 400ddfc:	84003fcc 	andi	r16,r16,255
 400de00:	800695fa 	slli	r3,r16,23
 400de04:	10803fcc 	andi	r2,r2,255
 400de08:	04002034 	movhi	r16,128
 400de0c:	843fffc4 	addi	r16,r16,-1
 400de10:	100497fa 	slli	r2,r2,31
 400de14:	2408703a 	and	r4,r4,r16
 400de18:	20e0b03a 	or	r16,r4,r3
 400de1c:	8084b03a 	or	r2,r16,r2
 400de20:	dfc00317 	ldw	ra,12(sp)
 400de24:	dc800217 	ldw	r18,8(sp)
 400de28:	dc400117 	ldw	r17,4(sp)
 400de2c:	dc000017 	ldw	r16,0(sp)
 400de30:	dec00404 	addi	sp,sp,16
 400de34:	f800283a 	ret
 400de38:	00c03fc4 	movi	r3,255
 400de3c:	80ffe126 	beq	r16,r3,400ddc4 <__reset+0xfb00cdc4>
 400de40:	29410034 	orhi	r5,r5,1024
 400de44:	00c006c4 	movi	r3,27
 400de48:	18807516 	blt	r3,r2,400e020 <__addsf3+0x2b8>
 400de4c:	00c00804 	movi	r3,32
 400de50:	1887c83a 	sub	r3,r3,r2
 400de54:	28c6983a 	sll	r3,r5,r3
 400de58:	288ad83a 	srl	r5,r5,r2
 400de5c:	1804c03a 	cmpne	r2,r3,zero
 400de60:	288ab03a 	or	r5,r5,r2
 400de64:	2149c83a 	sub	r4,r4,r5
 400de68:	2081002c 	andhi	r2,r4,1024
 400de6c:	10001426 	beq	r2,zero,400dec0 <__addsf3+0x158>
 400de70:	04810034 	movhi	r18,1024
 400de74:	94bfffc4 	addi	r18,r18,-1
 400de78:	24a4703a 	and	r18,r4,r18
 400de7c:	9009883a 	mov	r4,r18
 400de80:	4011b6c0 	call	4011b6c <__clzsi2>
 400de84:	10bffec4 	addi	r2,r2,-5
 400de88:	90a4983a 	sll	r18,r18,r2
 400de8c:	14005416 	blt	r2,r16,400dfe0 <__addsf3+0x278>
 400de90:	1405c83a 	sub	r2,r2,r16
 400de94:	11000044 	addi	r4,r2,1
 400de98:	00800804 	movi	r2,32
 400de9c:	1105c83a 	sub	r2,r2,r4
 400dea0:	9084983a 	sll	r2,r18,r2
 400dea4:	9124d83a 	srl	r18,r18,r4
 400dea8:	0021883a 	mov	r16,zero
 400deac:	1008c03a 	cmpne	r4,r2,zero
 400deb0:	9108b03a 	or	r4,r18,r4
 400deb4:	003fc306 	br	400ddc4 <__reset+0xfb00cdc4>
 400deb8:	1000db26 	beq	r2,zero,400e228 <__addsf3+0x4c0>
 400debc:	1009883a 	mov	r4,r2
 400dec0:	208001cc 	andi	r2,r4,7
 400dec4:	103fc11e 	bne	r2,zero,400ddcc <__reset+0xfb00cdcc>
 400dec8:	2006d0fa 	srli	r3,r4,3
 400decc:	01003fc4 	movi	r4,255
 400ded0:	8805883a 	mov	r2,r17
 400ded4:	8100241e 	bne	r16,r4,400df68 <__addsf3+0x200>
 400ded8:	18006e26 	beq	r3,zero,400e094 <__addsf3+0x32c>
 400dedc:	19001034 	orhi	r4,r3,64
 400dee0:	00c02034 	movhi	r3,128
 400dee4:	18ffffc4 	addi	r3,r3,-1
 400dee8:	043fffc4 	movi	r16,-1
 400deec:	20c8703a 	and	r4,r4,r3
 400def0:	003fc206 	br	400ddfc <__reset+0xfb00cdfc>
 400def4:	8187c83a 	sub	r3,r16,r6
 400def8:	00c03e0e 	bge	zero,r3,400dff4 <__addsf3+0x28c>
 400defc:	30002326 	beq	r6,zero,400df8c <__addsf3+0x224>
 400df00:	01803fc4 	movi	r6,255
 400df04:	81bfaf26 	beq	r16,r6,400ddc4 <__reset+0xfb00cdc4>
 400df08:	29410034 	orhi	r5,r5,1024
 400df0c:	018006c4 	movi	r6,27
 400df10:	30c07416 	blt	r6,r3,400e0e4 <__addsf3+0x37c>
 400df14:	01800804 	movi	r6,32
 400df18:	30cdc83a 	sub	r6,r6,r3
 400df1c:	298c983a 	sll	r6,r5,r6
 400df20:	28cad83a 	srl	r5,r5,r3
 400df24:	3006c03a 	cmpne	r3,r6,zero
 400df28:	28cab03a 	or	r5,r5,r3
 400df2c:	2149883a 	add	r4,r4,r5
 400df30:	20c1002c 	andhi	r3,r4,1024
 400df34:	183fe226 	beq	r3,zero,400dec0 <__reset+0xfb00cec0>
 400df38:	84000044 	addi	r16,r16,1
 400df3c:	00c03fc4 	movi	r3,255
 400df40:	80c05426 	beq	r16,r3,400e094 <__addsf3+0x32c>
 400df44:	00bf0034 	movhi	r2,64512
 400df48:	10bfffc4 	addi	r2,r2,-1
 400df4c:	20c0004c 	andi	r3,r4,1
 400df50:	2088703a 	and	r4,r4,r2
 400df54:	2008d07a 	srli	r4,r4,1
 400df58:	20c8b03a 	or	r4,r4,r3
 400df5c:	003f9906 	br	400ddc4 <__reset+0xfb00cdc4>
 400df60:	0007883a 	mov	r3,zero
 400df64:	0005883a 	mov	r2,zero
 400df68:	01002034 	movhi	r4,128
 400df6c:	213fffc4 	addi	r4,r4,-1
 400df70:	1908703a 	and	r4,r3,r4
 400df74:	003fa106 	br	400ddfc <__reset+0xfb00cdfc>
 400df78:	10bfffc4 	addi	r2,r2,-1
 400df7c:	103fb926 	beq	r2,zero,400de64 <__reset+0xfb00ce64>
 400df80:	00c03fc4 	movi	r3,255
 400df84:	80ffaf1e 	bne	r16,r3,400de44 <__reset+0xfb00ce44>
 400df88:	003f8e06 	br	400ddc4 <__reset+0xfb00cdc4>
 400df8c:	283f8d26 	beq	r5,zero,400ddc4 <__reset+0xfb00cdc4>
 400df90:	18ffffc4 	addi	r3,r3,-1
 400df94:	183fe526 	beq	r3,zero,400df2c <__reset+0xfb00cf2c>
 400df98:	01803fc4 	movi	r6,255
 400df9c:	81bfdb1e 	bne	r16,r6,400df0c <__reset+0xfb00cf0c>
 400dfa0:	003f8806 	br	400ddc4 <__reset+0xfb00cdc4>
 400dfa4:	1000201e 	bne	r2,zero,400e028 <__addsf3+0x2c0>
 400dfa8:	80800044 	addi	r2,r16,1
 400dfac:	10803fcc 	andi	r2,r2,255
 400dfb0:	01800044 	movi	r6,1
 400dfb4:	3080450e 	bge	r6,r2,400e0cc <__addsf3+0x364>
 400dfb8:	2165c83a 	sub	r18,r4,r5
 400dfbc:	90c1002c 	andhi	r3,r18,1024
 400dfc0:	18002b26 	beq	r3,zero,400e070 <__addsf3+0x308>
 400dfc4:	2925c83a 	sub	r18,r5,r4
 400dfc8:	3823883a 	mov	r17,r7
 400dfcc:	003fab06 	br	400de7c <__reset+0xfb00ce7c>
 400dfd0:	8805883a 	mov	r2,r17
 400dfd4:	043fffc4 	movi	r16,-1
 400dfd8:	0009883a 	mov	r4,zero
 400dfdc:	003f8706 	br	400ddfc <__reset+0xfb00cdfc>
 400dfe0:	013f0034 	movhi	r4,64512
 400dfe4:	213fffc4 	addi	r4,r4,-1
 400dfe8:	80a1c83a 	sub	r16,r16,r2
 400dfec:	9108703a 	and	r4,r18,r4
 400dff0:	003f7406 	br	400ddc4 <__reset+0xfb00cdc4>
 400dff4:	1800411e 	bne	r3,zero,400e0fc <__addsf3+0x394>
 400dff8:	80c00044 	addi	r3,r16,1
 400dffc:	19c03fcc 	andi	r7,r3,255
 400e000:	01800044 	movi	r6,1
 400e004:	31c0260e 	bge	r6,r7,400e0a0 <__addsf3+0x338>
 400e008:	01803fc4 	movi	r6,255
 400e00c:	19802126 	beq	r3,r6,400e094 <__addsf3+0x32c>
 400e010:	2149883a 	add	r4,r4,r5
 400e014:	2008d07a 	srli	r4,r4,1
 400e018:	1821883a 	mov	r16,r3
 400e01c:	003f6906 	br	400ddc4 <__reset+0xfb00cdc4>
 400e020:	01400044 	movi	r5,1
 400e024:	003f8f06 	br	400de64 <__reset+0xfb00ce64>
 400e028:	8000151e 	bne	r16,zero,400e080 <__addsf3+0x318>
 400e02c:	20002f26 	beq	r4,zero,400e0ec <__addsf3+0x384>
 400e030:	0084303a 	nor	r2,zero,r2
 400e034:	10000a26 	beq	r2,zero,400e060 <__addsf3+0x2f8>
 400e038:	00c03fc4 	movi	r3,255
 400e03c:	30c02b26 	beq	r6,r3,400e0ec <__addsf3+0x384>
 400e040:	00c006c4 	movi	r3,27
 400e044:	18806d16 	blt	r3,r2,400e1fc <__addsf3+0x494>
 400e048:	00c00804 	movi	r3,32
 400e04c:	1887c83a 	sub	r3,r3,r2
 400e050:	20c6983a 	sll	r3,r4,r3
 400e054:	2084d83a 	srl	r2,r4,r2
 400e058:	1808c03a 	cmpne	r4,r3,zero
 400e05c:	1108b03a 	or	r4,r2,r4
 400e060:	2909c83a 	sub	r4,r5,r4
 400e064:	3021883a 	mov	r16,r6
 400e068:	3823883a 	mov	r17,r7
 400e06c:	003f7e06 	br	400de68 <__reset+0xfb00ce68>
 400e070:	903f821e 	bne	r18,zero,400de7c <__reset+0xfb00ce7c>
 400e074:	0005883a 	mov	r2,zero
 400e078:	0021883a 	mov	r16,zero
 400e07c:	003fba06 	br	400df68 <__reset+0xfb00cf68>
 400e080:	00c03fc4 	movi	r3,255
 400e084:	30c01926 	beq	r6,r3,400e0ec <__addsf3+0x384>
 400e088:	0085c83a 	sub	r2,zero,r2
 400e08c:	21010034 	orhi	r4,r4,1024
 400e090:	003feb06 	br	400e040 <__reset+0xfb00d040>
 400e094:	043fffc4 	movi	r16,-1
 400e098:	0009883a 	mov	r4,zero
 400e09c:	003f5706 	br	400ddfc <__reset+0xfb00cdfc>
 400e0a0:	80004a1e 	bne	r16,zero,400e1cc <__addsf3+0x464>
 400e0a4:	20005926 	beq	r4,zero,400e20c <__addsf3+0x4a4>
 400e0a8:	283f4626 	beq	r5,zero,400ddc4 <__reset+0xfb00cdc4>
 400e0ac:	2149883a 	add	r4,r4,r5
 400e0b0:	2081002c 	andhi	r2,r4,1024
 400e0b4:	103f8226 	beq	r2,zero,400dec0 <__reset+0xfb00cec0>
 400e0b8:	00bf0034 	movhi	r2,64512
 400e0bc:	10bfffc4 	addi	r2,r2,-1
 400e0c0:	3021883a 	mov	r16,r6
 400e0c4:	2088703a 	and	r4,r4,r2
 400e0c8:	003f3e06 	br	400ddc4 <__reset+0xfb00cdc4>
 400e0cc:	8000121e 	bne	r16,zero,400e118 <__addsf3+0x3b0>
 400e0d0:	2000261e 	bne	r4,zero,400e16c <__addsf3+0x404>
 400e0d4:	283fa226 	beq	r5,zero,400df60 <__reset+0xfb00cf60>
 400e0d8:	2809883a 	mov	r4,r5
 400e0dc:	3823883a 	mov	r17,r7
 400e0e0:	003f3806 	br	400ddc4 <__reset+0xfb00cdc4>
 400e0e4:	01400044 	movi	r5,1
 400e0e8:	003f9006 	br	400df2c <__reset+0xfb00cf2c>
 400e0ec:	2809883a 	mov	r4,r5
 400e0f0:	3021883a 	mov	r16,r6
 400e0f4:	3823883a 	mov	r17,r7
 400e0f8:	003f3206 	br	400ddc4 <__reset+0xfb00cdc4>
 400e0fc:	80000c1e 	bne	r16,zero,400e130 <__addsf3+0x3c8>
 400e100:	20002f26 	beq	r4,zero,400e1c0 <__addsf3+0x458>
 400e104:	00c6303a 	nor	r3,zero,r3
 400e108:	18002b1e 	bne	r3,zero,400e1b8 <__addsf3+0x450>
 400e10c:	2149883a 	add	r4,r4,r5
 400e110:	3021883a 	mov	r16,r6
 400e114:	003f8606 	br	400df30 <__reset+0xfb00cf30>
 400e118:	20001b1e 	bne	r4,zero,400e188 <__addsf3+0x420>
 400e11c:	28003926 	beq	r5,zero,400e204 <__addsf3+0x49c>
 400e120:	2809883a 	mov	r4,r5
 400e124:	3823883a 	mov	r17,r7
 400e128:	04003fc4 	movi	r16,255
 400e12c:	003f2506 	br	400ddc4 <__reset+0xfb00cdc4>
 400e130:	01c03fc4 	movi	r7,255
 400e134:	31c02226 	beq	r6,r7,400e1c0 <__addsf3+0x458>
 400e138:	00c7c83a 	sub	r3,zero,r3
 400e13c:	21010034 	orhi	r4,r4,1024
 400e140:	01c006c4 	movi	r7,27
 400e144:	38c03616 	blt	r7,r3,400e220 <__addsf3+0x4b8>
 400e148:	01c00804 	movi	r7,32
 400e14c:	38cfc83a 	sub	r7,r7,r3
 400e150:	21ce983a 	sll	r7,r4,r7
 400e154:	20c6d83a 	srl	r3,r4,r3
 400e158:	3808c03a 	cmpne	r4,r7,zero
 400e15c:	1906b03a 	or	r3,r3,r4
 400e160:	1949883a 	add	r4,r3,r5
 400e164:	3021883a 	mov	r16,r6
 400e168:	003f7106 	br	400df30 <__reset+0xfb00cf30>
 400e16c:	283f1526 	beq	r5,zero,400ddc4 <__reset+0xfb00cdc4>
 400e170:	2145c83a 	sub	r2,r4,r5
 400e174:	10c1002c 	andhi	r3,r2,1024
 400e178:	183f4f26 	beq	r3,zero,400deb8 <__reset+0xfb00ceb8>
 400e17c:	2909c83a 	sub	r4,r5,r4
 400e180:	3823883a 	mov	r17,r7
 400e184:	003f0f06 	br	400ddc4 <__reset+0xfb00cdc4>
 400e188:	28001a26 	beq	r5,zero,400e1f4 <__addsf3+0x48c>
 400e18c:	2008d0fa 	srli	r4,r4,3
 400e190:	2080102c 	andhi	r2,r4,64
 400e194:	10000526 	beq	r2,zero,400e1ac <__addsf3+0x444>
 400e198:	280ad0fa 	srli	r5,r5,3
 400e19c:	2880102c 	andhi	r2,r5,64
 400e1a0:	1000021e 	bne	r2,zero,400e1ac <__addsf3+0x444>
 400e1a4:	2809883a 	mov	r4,r5
 400e1a8:	3823883a 	mov	r17,r7
 400e1ac:	200890fa 	slli	r4,r4,3
 400e1b0:	04003fc4 	movi	r16,255
 400e1b4:	003f0306 	br	400ddc4 <__reset+0xfb00cdc4>
 400e1b8:	01c03fc4 	movi	r7,255
 400e1bc:	31ffe01e 	bne	r6,r7,400e140 <__reset+0xfb00d140>
 400e1c0:	2809883a 	mov	r4,r5
 400e1c4:	3021883a 	mov	r16,r6
 400e1c8:	003efe06 	br	400ddc4 <__reset+0xfb00cdc4>
 400e1cc:	20001126 	beq	r4,zero,400e214 <__addsf3+0x4ac>
 400e1d0:	28000826 	beq	r5,zero,400e1f4 <__addsf3+0x48c>
 400e1d4:	2008d0fa 	srli	r4,r4,3
 400e1d8:	2080102c 	andhi	r2,r4,64
 400e1dc:	103ff326 	beq	r2,zero,400e1ac <__reset+0xfb00d1ac>
 400e1e0:	280ad0fa 	srli	r5,r5,3
 400e1e4:	2880102c 	andhi	r2,r5,64
 400e1e8:	103ff01e 	bne	r2,zero,400e1ac <__reset+0xfb00d1ac>
 400e1ec:	2809883a 	mov	r4,r5
 400e1f0:	003fee06 	br	400e1ac <__reset+0xfb00d1ac>
 400e1f4:	04003fc4 	movi	r16,255
 400e1f8:	003ef206 	br	400ddc4 <__reset+0xfb00cdc4>
 400e1fc:	01000044 	movi	r4,1
 400e200:	003f9706 	br	400e060 <__reset+0xfb00d060>
 400e204:	0005883a 	mov	r2,zero
 400e208:	003f3406 	br	400dedc <__reset+0xfb00cedc>
 400e20c:	2809883a 	mov	r4,r5
 400e210:	003eec06 	br	400ddc4 <__reset+0xfb00cdc4>
 400e214:	2809883a 	mov	r4,r5
 400e218:	04003fc4 	movi	r16,255
 400e21c:	003ee906 	br	400ddc4 <__reset+0xfb00cdc4>
 400e220:	00c00044 	movi	r3,1
 400e224:	003fce06 	br	400e160 <__reset+0xfb00d160>
 400e228:	0005883a 	mov	r2,zero
 400e22c:	003f4e06 	br	400df68 <__reset+0xfb00cf68>

0400e230 <__divsf3>:
 400e230:	defff504 	addi	sp,sp,-44
 400e234:	200cd5fa 	srli	r6,r4,23
 400e238:	dcc00415 	stw	r19,16(sp)
 400e23c:	2026d7fa 	srli	r19,r4,31
 400e240:	00c02034 	movhi	r3,128
 400e244:	dd800715 	stw	r22,28(sp)
 400e248:	dd000515 	stw	r20,20(sp)
 400e24c:	dc800315 	stw	r18,12(sp)
 400e250:	18ffffc4 	addi	r3,r3,-1
 400e254:	dfc00a15 	stw	ra,40(sp)
 400e258:	df000915 	stw	fp,36(sp)
 400e25c:	ddc00815 	stw	r23,32(sp)
 400e260:	dd400615 	stw	r21,24(sp)
 400e264:	dc400215 	stw	r17,8(sp)
 400e268:	dc000115 	stw	r16,4(sp)
 400e26c:	35003fcc 	andi	r20,r6,255
 400e270:	1924703a 	and	r18,r3,r4
 400e274:	9d803fcc 	andi	r22,r19,255
 400e278:	a0005226 	beq	r20,zero,400e3c4 <__divsf3+0x194>
 400e27c:	00803fc4 	movi	r2,255
 400e280:	a0802e26 	beq	r20,r2,400e33c <__divsf3+0x10c>
 400e284:	91002034 	orhi	r4,r18,128
 400e288:	202490fa 	slli	r18,r4,3
 400e28c:	a53fe044 	addi	r20,r20,-127
 400e290:	0021883a 	mov	r16,zero
 400e294:	002f883a 	mov	r23,zero
 400e298:	280cd5fa 	srli	r6,r5,23
 400e29c:	282ad7fa 	srli	r21,r5,31
 400e2a0:	00c02034 	movhi	r3,128
 400e2a4:	18ffffc4 	addi	r3,r3,-1
 400e2a8:	31803fcc 	andi	r6,r6,255
 400e2ac:	1962703a 	and	r17,r3,r5
 400e2b0:	af003fcc 	andi	fp,r21,255
 400e2b4:	30004a26 	beq	r6,zero,400e3e0 <__divsf3+0x1b0>
 400e2b8:	00803fc4 	movi	r2,255
 400e2bc:	30804526 	beq	r6,r2,400e3d4 <__divsf3+0x1a4>
 400e2c0:	89402034 	orhi	r5,r17,128
 400e2c4:	282290fa 	slli	r17,r5,3
 400e2c8:	31bfe044 	addi	r6,r6,-127
 400e2cc:	000b883a 	mov	r5,zero
 400e2d0:	2c20b03a 	or	r16,r5,r16
 400e2d4:	802090ba 	slli	r16,r16,2
 400e2d8:	00810074 	movhi	r2,1025
 400e2dc:	10b8bf04 	addi	r2,r2,-7428
 400e2e0:	80a1883a 	add	r16,r16,r2
 400e2e4:	81000017 	ldw	r4,0(r16)
 400e2e8:	9d46f03a 	xor	r3,r19,r21
 400e2ec:	180f883a 	mov	r7,r3
 400e2f0:	18803fcc 	andi	r2,r3,255
 400e2f4:	a18dc83a 	sub	r6,r20,r6
 400e2f8:	2000683a 	jmp	r4
 400e2fc:	0400e4e0 	cmpeqi	r16,zero,915
 400e300:	0400e364 	muli	r16,zero,909
 400e304:	0400e4d4 	movui	r16,915
 400e308:	0400e350 	cmplti	r16,zero,909
 400e30c:	0400e4d4 	movui	r16,915
 400e310:	0400e4ac 	andhi	r16,zero,914
 400e314:	0400e4d4 	movui	r16,915
 400e318:	0400e350 	cmplti	r16,zero,909
 400e31c:	0400e364 	muli	r16,zero,909
 400e320:	0400e364 	muli	r16,zero,909
 400e324:	0400e4ac 	andhi	r16,zero,914
 400e328:	0400e350 	cmplti	r16,zero,909
 400e32c:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e330:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e334:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e338:	0400e574 	movhi	r16,917
 400e33c:	9000581e 	bne	r18,zero,400e4a0 <__divsf3+0x270>
 400e340:	04000204 	movi	r16,8
 400e344:	05c00084 	movi	r23,2
 400e348:	003fd306 	br	400e298 <__reset+0xfb00d298>
 400e34c:	0023883a 	mov	r17,zero
 400e350:	e02d883a 	mov	r22,fp
 400e354:	282f883a 	mov	r23,r5
 400e358:	00800084 	movi	r2,2
 400e35c:	b8808f1e 	bne	r23,r2,400e59c <__divsf3+0x36c>
 400e360:	b005883a 	mov	r2,r22
 400e364:	11c0004c 	andi	r7,r2,1
 400e368:	013fffc4 	movi	r4,-1
 400e36c:	000d883a 	mov	r6,zero
 400e370:	21003fcc 	andi	r4,r4,255
 400e374:	200895fa 	slli	r4,r4,23
 400e378:	38803fcc 	andi	r2,r7,255
 400e37c:	00c02034 	movhi	r3,128
 400e380:	100497fa 	slli	r2,r2,31
 400e384:	18ffffc4 	addi	r3,r3,-1
 400e388:	30c6703a 	and	r3,r6,r3
 400e38c:	1906b03a 	or	r3,r3,r4
 400e390:	1884b03a 	or	r2,r3,r2
 400e394:	dfc00a17 	ldw	ra,40(sp)
 400e398:	df000917 	ldw	fp,36(sp)
 400e39c:	ddc00817 	ldw	r23,32(sp)
 400e3a0:	dd800717 	ldw	r22,28(sp)
 400e3a4:	dd400617 	ldw	r21,24(sp)
 400e3a8:	dd000517 	ldw	r20,20(sp)
 400e3ac:	dcc00417 	ldw	r19,16(sp)
 400e3b0:	dc800317 	ldw	r18,12(sp)
 400e3b4:	dc400217 	ldw	r17,8(sp)
 400e3b8:	dc000117 	ldw	r16,4(sp)
 400e3bc:	dec00b04 	addi	sp,sp,44
 400e3c0:	f800283a 	ret
 400e3c4:	90002b1e 	bne	r18,zero,400e474 <__divsf3+0x244>
 400e3c8:	04000104 	movi	r16,4
 400e3cc:	05c00044 	movi	r23,1
 400e3d0:	003fb106 	br	400e298 <__reset+0xfb00d298>
 400e3d4:	8800251e 	bne	r17,zero,400e46c <__divsf3+0x23c>
 400e3d8:	01400084 	movi	r5,2
 400e3dc:	00000206 	br	400e3e8 <__divsf3+0x1b8>
 400e3e0:	88001a1e 	bne	r17,zero,400e44c <__divsf3+0x21c>
 400e3e4:	01400044 	movi	r5,1
 400e3e8:	8160b03a 	or	r16,r16,r5
 400e3ec:	802090ba 	slli	r16,r16,2
 400e3f0:	00c10074 	movhi	r3,1025
 400e3f4:	18f90304 	addi	r3,r3,-7156
 400e3f8:	80e1883a 	add	r16,r16,r3
 400e3fc:	80c00017 	ldw	r3,0(r16)
 400e400:	9d44f03a 	xor	r2,r19,r21
 400e404:	a18dc83a 	sub	r6,r20,r6
 400e408:	1800683a 	jmp	r3
 400e40c:	0400e364 	muli	r16,zero,909
 400e410:	0400e364 	muli	r16,zero,909
 400e414:	0400e5b0 	cmpltui	r16,zero,918
 400e418:	0400e34c 	andi	r16,zero,909
 400e41c:	0400e5b0 	cmpltui	r16,zero,918
 400e420:	0400e4ac 	andhi	r16,zero,914
 400e424:	0400e5b0 	cmpltui	r16,zero,918
 400e428:	0400e34c 	andi	r16,zero,909
 400e42c:	0400e364 	muli	r16,zero,909
 400e430:	0400e364 	muli	r16,zero,909
 400e434:	0400e4ac 	andhi	r16,zero,914
 400e438:	0400e34c 	andi	r16,zero,909
 400e43c:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e440:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e444:	0400e5c0 	call	400e5c <__alt_mem_sdram-0x3bff1a4>
 400e448:	0400e5d8 	cmpnei	r16,zero,919
 400e44c:	8809883a 	mov	r4,r17
 400e450:	4011b6c0 	call	4011b6c <__clzsi2>
 400e454:	10fffec4 	addi	r3,r2,-5
 400e458:	10801d84 	addi	r2,r2,118
 400e45c:	88e2983a 	sll	r17,r17,r3
 400e460:	008dc83a 	sub	r6,zero,r2
 400e464:	000b883a 	mov	r5,zero
 400e468:	003f9906 	br	400e2d0 <__reset+0xfb00d2d0>
 400e46c:	014000c4 	movi	r5,3
 400e470:	003f9706 	br	400e2d0 <__reset+0xfb00d2d0>
 400e474:	9009883a 	mov	r4,r18
 400e478:	d9400015 	stw	r5,0(sp)
 400e47c:	4011b6c0 	call	4011b6c <__clzsi2>
 400e480:	10fffec4 	addi	r3,r2,-5
 400e484:	11801d84 	addi	r6,r2,118
 400e488:	90e4983a 	sll	r18,r18,r3
 400e48c:	01a9c83a 	sub	r20,zero,r6
 400e490:	0021883a 	mov	r16,zero
 400e494:	002f883a 	mov	r23,zero
 400e498:	d9400017 	ldw	r5,0(sp)
 400e49c:	003f7e06 	br	400e298 <__reset+0xfb00d298>
 400e4a0:	04000304 	movi	r16,12
 400e4a4:	05c000c4 	movi	r23,3
 400e4a8:	003f7b06 	br	400e298 <__reset+0xfb00d298>
 400e4ac:	01802034 	movhi	r6,128
 400e4b0:	000f883a 	mov	r7,zero
 400e4b4:	31bfffc4 	addi	r6,r6,-1
 400e4b8:	013fffc4 	movi	r4,-1
 400e4bc:	003fac06 	br	400e370 <__reset+0xfb00d370>
 400e4c0:	01400044 	movi	r5,1
 400e4c4:	2909c83a 	sub	r4,r5,r4
 400e4c8:	00c006c4 	movi	r3,27
 400e4cc:	19004b0e 	bge	r3,r4,400e5fc <__divsf3+0x3cc>
 400e4d0:	114e703a 	and	r7,r2,r5
 400e4d4:	0009883a 	mov	r4,zero
 400e4d8:	000d883a 	mov	r6,zero
 400e4dc:	003fa406 	br	400e370 <__reset+0xfb00d370>
 400e4e0:	9006917a 	slli	r3,r18,5
 400e4e4:	8822917a 	slli	r17,r17,5
 400e4e8:	1c40372e 	bgeu	r3,r17,400e5c8 <__divsf3+0x398>
 400e4ec:	31bfffc4 	addi	r6,r6,-1
 400e4f0:	010006c4 	movi	r4,27
 400e4f4:	000b883a 	mov	r5,zero
 400e4f8:	180f883a 	mov	r7,r3
 400e4fc:	294b883a 	add	r5,r5,r5
 400e500:	18c7883a 	add	r3,r3,r3
 400e504:	38000116 	blt	r7,zero,400e50c <__divsf3+0x2dc>
 400e508:	1c400236 	bltu	r3,r17,400e514 <__divsf3+0x2e4>
 400e50c:	1c47c83a 	sub	r3,r3,r17
 400e510:	29400054 	ori	r5,r5,1
 400e514:	213fffc4 	addi	r4,r4,-1
 400e518:	203ff71e 	bne	r4,zero,400e4f8 <__reset+0xfb00d4f8>
 400e51c:	1806c03a 	cmpne	r3,r3,zero
 400e520:	1962b03a 	or	r17,r3,r5
 400e524:	31001fc4 	addi	r4,r6,127
 400e528:	013fe50e 	bge	zero,r4,400e4c0 <__reset+0xfb00d4c0>
 400e52c:	88c001cc 	andi	r3,r17,7
 400e530:	18000426 	beq	r3,zero,400e544 <__divsf3+0x314>
 400e534:	88c003cc 	andi	r3,r17,15
 400e538:	01400104 	movi	r5,4
 400e53c:	19400126 	beq	r3,r5,400e544 <__divsf3+0x314>
 400e540:	8963883a 	add	r17,r17,r5
 400e544:	88c2002c 	andhi	r3,r17,2048
 400e548:	18000426 	beq	r3,zero,400e55c <__divsf3+0x32c>
 400e54c:	00fe0034 	movhi	r3,63488
 400e550:	18ffffc4 	addi	r3,r3,-1
 400e554:	31002004 	addi	r4,r6,128
 400e558:	88e2703a 	and	r17,r17,r3
 400e55c:	00c03f84 	movi	r3,254
 400e560:	193f8016 	blt	r3,r4,400e364 <__reset+0xfb00d364>
 400e564:	880c91ba 	slli	r6,r17,6
 400e568:	11c0004c 	andi	r7,r2,1
 400e56c:	300cd27a 	srli	r6,r6,9
 400e570:	003f7f06 	br	400e370 <__reset+0xfb00d370>
 400e574:	9080102c 	andhi	r2,r18,64
 400e578:	10000226 	beq	r2,zero,400e584 <__divsf3+0x354>
 400e57c:	8880102c 	andhi	r2,r17,64
 400e580:	10001826 	beq	r2,zero,400e5e4 <__divsf3+0x3b4>
 400e584:	00802034 	movhi	r2,128
 400e588:	91801034 	orhi	r6,r18,64
 400e58c:	10bfffc4 	addi	r2,r2,-1
 400e590:	980f883a 	mov	r7,r19
 400e594:	308c703a 	and	r6,r6,r2
 400e598:	003fc706 	br	400e4b8 <__reset+0xfb00d4b8>
 400e59c:	008000c4 	movi	r2,3
 400e5a0:	b8802d26 	beq	r23,r2,400e658 <__divsf3+0x428>
 400e5a4:	00c00044 	movi	r3,1
 400e5a8:	b005883a 	mov	r2,r22
 400e5ac:	b8ffdd1e 	bne	r23,r3,400e524 <__reset+0xfb00d524>
 400e5b0:	11c0004c 	andi	r7,r2,1
 400e5b4:	0009883a 	mov	r4,zero
 400e5b8:	000d883a 	mov	r6,zero
 400e5bc:	003f6c06 	br	400e370 <__reset+0xfb00d370>
 400e5c0:	9023883a 	mov	r17,r18
 400e5c4:	003f6406 	br	400e358 <__reset+0xfb00d358>
 400e5c8:	1c47c83a 	sub	r3,r3,r17
 400e5cc:	01000684 	movi	r4,26
 400e5d0:	01400044 	movi	r5,1
 400e5d4:	003fc806 	br	400e4f8 <__reset+0xfb00d4f8>
 400e5d8:	9080102c 	andhi	r2,r18,64
 400e5dc:	103fe926 	beq	r2,zero,400e584 <__reset+0xfb00d584>
 400e5e0:	0023883a 	mov	r17,zero
 400e5e4:	00802034 	movhi	r2,128
 400e5e8:	89801034 	orhi	r6,r17,64
 400e5ec:	10bfffc4 	addi	r2,r2,-1
 400e5f0:	a80f883a 	mov	r7,r21
 400e5f4:	308c703a 	and	r6,r6,r2
 400e5f8:	003faf06 	br	400e4b8 <__reset+0xfb00d4b8>
 400e5fc:	01c00804 	movi	r7,32
 400e600:	390fc83a 	sub	r7,r7,r4
 400e604:	89ce983a 	sll	r7,r17,r7
 400e608:	890ad83a 	srl	r5,r17,r4
 400e60c:	380ec03a 	cmpne	r7,r7,zero
 400e610:	29cab03a 	or	r5,r5,r7
 400e614:	28c001cc 	andi	r3,r5,7
 400e618:	18000426 	beq	r3,zero,400e62c <__divsf3+0x3fc>
 400e61c:	28c003cc 	andi	r3,r5,15
 400e620:	01000104 	movi	r4,4
 400e624:	19000126 	beq	r3,r4,400e62c <__divsf3+0x3fc>
 400e628:	290b883a 	add	r5,r5,r4
 400e62c:	28c1002c 	andhi	r3,r5,1024
 400e630:	18000426 	beq	r3,zero,400e644 <__divsf3+0x414>
 400e634:	11c0004c 	andi	r7,r2,1
 400e638:	01000044 	movi	r4,1
 400e63c:	000d883a 	mov	r6,zero
 400e640:	003f4b06 	br	400e370 <__reset+0xfb00d370>
 400e644:	280a91ba 	slli	r5,r5,6
 400e648:	11c0004c 	andi	r7,r2,1
 400e64c:	0009883a 	mov	r4,zero
 400e650:	280cd27a 	srli	r6,r5,9
 400e654:	003f4606 	br	400e370 <__reset+0xfb00d370>
 400e658:	00802034 	movhi	r2,128
 400e65c:	89801034 	orhi	r6,r17,64
 400e660:	10bfffc4 	addi	r2,r2,-1
 400e664:	b00f883a 	mov	r7,r22
 400e668:	308c703a 	and	r6,r6,r2
 400e66c:	003f9206 	br	400e4b8 <__reset+0xfb00d4b8>

0400e670 <__gesf2>:
 400e670:	2004d5fa 	srli	r2,r4,23
 400e674:	2806d5fa 	srli	r3,r5,23
 400e678:	01802034 	movhi	r6,128
 400e67c:	31bfffc4 	addi	r6,r6,-1
 400e680:	10803fcc 	andi	r2,r2,255
 400e684:	01c03fc4 	movi	r7,255
 400e688:	3110703a 	and	r8,r6,r4
 400e68c:	18c03fcc 	andi	r3,r3,255
 400e690:	314c703a 	and	r6,r6,r5
 400e694:	2008d7fa 	srli	r4,r4,31
 400e698:	280ad7fa 	srli	r5,r5,31
 400e69c:	11c01926 	beq	r2,r7,400e704 <__gesf2+0x94>
 400e6a0:	01c03fc4 	movi	r7,255
 400e6a4:	19c00f26 	beq	r3,r7,400e6e4 <__gesf2+0x74>
 400e6a8:	1000061e 	bne	r2,zero,400e6c4 <__gesf2+0x54>
 400e6ac:	400f003a 	cmpeq	r7,r8,zero
 400e6b0:	1800071e 	bne	r3,zero,400e6d0 <__gesf2+0x60>
 400e6b4:	3000061e 	bne	r6,zero,400e6d0 <__gesf2+0x60>
 400e6b8:	0005883a 	mov	r2,zero
 400e6bc:	40000e1e 	bne	r8,zero,400e6f8 <__gesf2+0x88>
 400e6c0:	f800283a 	ret
 400e6c4:	18000a1e 	bne	r3,zero,400e6f0 <__gesf2+0x80>
 400e6c8:	30000b26 	beq	r6,zero,400e6f8 <__gesf2+0x88>
 400e6cc:	000f883a 	mov	r7,zero
 400e6d0:	29403fcc 	andi	r5,r5,255
 400e6d4:	38000726 	beq	r7,zero,400e6f4 <__gesf2+0x84>
 400e6d8:	28000826 	beq	r5,zero,400e6fc <__gesf2+0x8c>
 400e6dc:	00800044 	movi	r2,1
 400e6e0:	f800283a 	ret
 400e6e4:	303ff026 	beq	r6,zero,400e6a8 <__reset+0xfb00d6a8>
 400e6e8:	00bfff84 	movi	r2,-2
 400e6ec:	f800283a 	ret
 400e6f0:	29403fcc 	andi	r5,r5,255
 400e6f4:	21400526 	beq	r4,r5,400e70c <__gesf2+0x9c>
 400e6f8:	203ff826 	beq	r4,zero,400e6dc <__reset+0xfb00d6dc>
 400e6fc:	00bfffc4 	movi	r2,-1
 400e700:	f800283a 	ret
 400e704:	403fe626 	beq	r8,zero,400e6a0 <__reset+0xfb00d6a0>
 400e708:	003ff706 	br	400e6e8 <__reset+0xfb00d6e8>
 400e70c:	18bffa16 	blt	r3,r2,400e6f8 <__reset+0xfb00d6f8>
 400e710:	10c00216 	blt	r2,r3,400e71c <__gesf2+0xac>
 400e714:	323ff836 	bltu	r6,r8,400e6f8 <__reset+0xfb00d6f8>
 400e718:	4180022e 	bgeu	r8,r6,400e724 <__gesf2+0xb4>
 400e71c:	203fef1e 	bne	r4,zero,400e6dc <__reset+0xfb00d6dc>
 400e720:	003ff606 	br	400e6fc <__reset+0xfb00d6fc>
 400e724:	0005883a 	mov	r2,zero
 400e728:	f800283a 	ret

0400e72c <__lesf2>:
 400e72c:	2004d5fa 	srli	r2,r4,23
 400e730:	280cd5fa 	srli	r6,r5,23
 400e734:	00c02034 	movhi	r3,128
 400e738:	18ffffc4 	addi	r3,r3,-1
 400e73c:	10803fcc 	andi	r2,r2,255
 400e740:	01c03fc4 	movi	r7,255
 400e744:	1910703a 	and	r8,r3,r4
 400e748:	31803fcc 	andi	r6,r6,255
 400e74c:	1946703a 	and	r3,r3,r5
 400e750:	2008d7fa 	srli	r4,r4,31
 400e754:	280ad7fa 	srli	r5,r5,31
 400e758:	11c01b26 	beq	r2,r7,400e7c8 <__lesf2+0x9c>
 400e75c:	01c03fc4 	movi	r7,255
 400e760:	31c01126 	beq	r6,r7,400e7a8 <__lesf2+0x7c>
 400e764:	1000071e 	bne	r2,zero,400e784 <__lesf2+0x58>
 400e768:	400f003a 	cmpeq	r7,r8,zero
 400e76c:	21003fcc 	andi	r4,r4,255
 400e770:	3000081e 	bne	r6,zero,400e794 <__lesf2+0x68>
 400e774:	1800071e 	bne	r3,zero,400e794 <__lesf2+0x68>
 400e778:	0005883a 	mov	r2,zero
 400e77c:	40000f1e 	bne	r8,zero,400e7bc <__lesf2+0x90>
 400e780:	f800283a 	ret
 400e784:	21003fcc 	andi	r4,r4,255
 400e788:	30000a1e 	bne	r6,zero,400e7b4 <__lesf2+0x88>
 400e78c:	18000b26 	beq	r3,zero,400e7bc <__lesf2+0x90>
 400e790:	000f883a 	mov	r7,zero
 400e794:	29403fcc 	andi	r5,r5,255
 400e798:	38000726 	beq	r7,zero,400e7b8 <__lesf2+0x8c>
 400e79c:	28000826 	beq	r5,zero,400e7c0 <__lesf2+0x94>
 400e7a0:	00800044 	movi	r2,1
 400e7a4:	f800283a 	ret
 400e7a8:	183fee26 	beq	r3,zero,400e764 <__reset+0xfb00d764>
 400e7ac:	00800084 	movi	r2,2
 400e7b0:	f800283a 	ret
 400e7b4:	29403fcc 	andi	r5,r5,255
 400e7b8:	21400626 	beq	r4,r5,400e7d4 <__lesf2+0xa8>
 400e7bc:	203ff826 	beq	r4,zero,400e7a0 <__reset+0xfb00d7a0>
 400e7c0:	00bfffc4 	movi	r2,-1
 400e7c4:	f800283a 	ret
 400e7c8:	403fe426 	beq	r8,zero,400e75c <__reset+0xfb00d75c>
 400e7cc:	00800084 	movi	r2,2
 400e7d0:	f800283a 	ret
 400e7d4:	30bff916 	blt	r6,r2,400e7bc <__reset+0xfb00d7bc>
 400e7d8:	11800216 	blt	r2,r6,400e7e4 <__lesf2+0xb8>
 400e7dc:	1a3ff736 	bltu	r3,r8,400e7bc <__reset+0xfb00d7bc>
 400e7e0:	40c0022e 	bgeu	r8,r3,400e7ec <__lesf2+0xc0>
 400e7e4:	203fee1e 	bne	r4,zero,400e7a0 <__reset+0xfb00d7a0>
 400e7e8:	003ff506 	br	400e7c0 <__reset+0xfb00d7c0>
 400e7ec:	0005883a 	mov	r2,zero
 400e7f0:	f800283a 	ret

0400e7f4 <__mulsf3>:
 400e7f4:	defff504 	addi	sp,sp,-44
 400e7f8:	dc000115 	stw	r16,4(sp)
 400e7fc:	2020d5fa 	srli	r16,r4,23
 400e800:	dd400615 	stw	r21,24(sp)
 400e804:	202ad7fa 	srli	r21,r4,31
 400e808:	dc800315 	stw	r18,12(sp)
 400e80c:	04802034 	movhi	r18,128
 400e810:	df000915 	stw	fp,36(sp)
 400e814:	dd000515 	stw	r20,20(sp)
 400e818:	94bfffc4 	addi	r18,r18,-1
 400e81c:	dfc00a15 	stw	ra,40(sp)
 400e820:	ddc00815 	stw	r23,32(sp)
 400e824:	dd800715 	stw	r22,28(sp)
 400e828:	dcc00415 	stw	r19,16(sp)
 400e82c:	dc400215 	stw	r17,8(sp)
 400e830:	84003fcc 	andi	r16,r16,255
 400e834:	9124703a 	and	r18,r18,r4
 400e838:	a829883a 	mov	r20,r21
 400e83c:	af003fcc 	andi	fp,r21,255
 400e840:	80005426 	beq	r16,zero,400e994 <__mulsf3+0x1a0>
 400e844:	00803fc4 	movi	r2,255
 400e848:	80802f26 	beq	r16,r2,400e908 <__mulsf3+0x114>
 400e84c:	91002034 	orhi	r4,r18,128
 400e850:	202490fa 	slli	r18,r4,3
 400e854:	843fe044 	addi	r16,r16,-127
 400e858:	0023883a 	mov	r17,zero
 400e85c:	002f883a 	mov	r23,zero
 400e860:	2804d5fa 	srli	r2,r5,23
 400e864:	282cd7fa 	srli	r22,r5,31
 400e868:	01002034 	movhi	r4,128
 400e86c:	213fffc4 	addi	r4,r4,-1
 400e870:	10803fcc 	andi	r2,r2,255
 400e874:	2166703a 	and	r19,r4,r5
 400e878:	b1803fcc 	andi	r6,r22,255
 400e87c:	10004c26 	beq	r2,zero,400e9b0 <__mulsf3+0x1bc>
 400e880:	00c03fc4 	movi	r3,255
 400e884:	10c04726 	beq	r2,r3,400e9a4 <__mulsf3+0x1b0>
 400e888:	99002034 	orhi	r4,r19,128
 400e88c:	202690fa 	slli	r19,r4,3
 400e890:	10bfe044 	addi	r2,r2,-127
 400e894:	0007883a 	mov	r3,zero
 400e898:	80a1883a 	add	r16,r16,r2
 400e89c:	010003c4 	movi	r4,15
 400e8a0:	1c44b03a 	or	r2,r3,r17
 400e8a4:	b56af03a 	xor	r21,r22,r21
 400e8a8:	81c00044 	addi	r7,r16,1
 400e8ac:	20806b36 	bltu	r4,r2,400ea5c <__mulsf3+0x268>
 400e8b0:	100490ba 	slli	r2,r2,2
 400e8b4:	01010074 	movhi	r4,1025
 400e8b8:	213a3204 	addi	r4,r4,-5944
 400e8bc:	1105883a 	add	r2,r2,r4
 400e8c0:	10800017 	ldw	r2,0(r2)
 400e8c4:	1000683a 	jmp	r2
 400e8c8:	0400ea5c 	xori	r16,zero,937
 400e8cc:	0400e91c 	xori	r16,zero,932
 400e8d0:	0400e91c 	xori	r16,zero,932
 400e8d4:	0400e918 	cmpnei	r16,zero,932
 400e8d8:	0400ea40 	call	400ea4 <__alt_mem_sdram-0x3bff15c>
 400e8dc:	0400ea40 	call	400ea4 <__alt_mem_sdram-0x3bff15c>
 400e8e0:	0400ea2c 	andhi	r16,zero,936
 400e8e4:	0400e918 	cmpnei	r16,zero,932
 400e8e8:	0400ea40 	call	400ea4 <__alt_mem_sdram-0x3bff15c>
 400e8ec:	0400ea2c 	andhi	r16,zero,936
 400e8f0:	0400ea40 	call	400ea4 <__alt_mem_sdram-0x3bff15c>
 400e8f4:	0400e918 	cmpnei	r16,zero,932
 400e8f8:	0400ea4c 	andi	r16,zero,937
 400e8fc:	0400ea4c 	andi	r16,zero,937
 400e900:	0400ea4c 	andi	r16,zero,937
 400e904:	0400eb28 	cmpgeui	r16,zero,940
 400e908:	90003b1e 	bne	r18,zero,400e9f8 <__mulsf3+0x204>
 400e90c:	04400204 	movi	r17,8
 400e910:	05c00084 	movi	r23,2
 400e914:	003fd206 	br	400e860 <__reset+0xfb00d860>
 400e918:	302b883a 	mov	r21,r6
 400e91c:	00800084 	movi	r2,2
 400e920:	18802626 	beq	r3,r2,400e9bc <__mulsf3+0x1c8>
 400e924:	008000c4 	movi	r2,3
 400e928:	1880ab26 	beq	r3,r2,400ebd8 <__mulsf3+0x3e4>
 400e92c:	00800044 	movi	r2,1
 400e930:	1880a21e 	bne	r3,r2,400ebbc <__mulsf3+0x3c8>
 400e934:	a829883a 	mov	r20,r21
 400e938:	0007883a 	mov	r3,zero
 400e93c:	0009883a 	mov	r4,zero
 400e940:	18803fcc 	andi	r2,r3,255
 400e944:	100695fa 	slli	r3,r2,23
 400e948:	a0803fcc 	andi	r2,r20,255
 400e94c:	100a97fa 	slli	r5,r2,31
 400e950:	00802034 	movhi	r2,128
 400e954:	10bfffc4 	addi	r2,r2,-1
 400e958:	2084703a 	and	r2,r4,r2
 400e95c:	10c4b03a 	or	r2,r2,r3
 400e960:	1144b03a 	or	r2,r2,r5
 400e964:	dfc00a17 	ldw	ra,40(sp)
 400e968:	df000917 	ldw	fp,36(sp)
 400e96c:	ddc00817 	ldw	r23,32(sp)
 400e970:	dd800717 	ldw	r22,28(sp)
 400e974:	dd400617 	ldw	r21,24(sp)
 400e978:	dd000517 	ldw	r20,20(sp)
 400e97c:	dcc00417 	ldw	r19,16(sp)
 400e980:	dc800317 	ldw	r18,12(sp)
 400e984:	dc400217 	ldw	r17,8(sp)
 400e988:	dc000117 	ldw	r16,4(sp)
 400e98c:	dec00b04 	addi	sp,sp,44
 400e990:	f800283a 	ret
 400e994:	90000d1e 	bne	r18,zero,400e9cc <__mulsf3+0x1d8>
 400e998:	04400104 	movi	r17,4
 400e99c:	05c00044 	movi	r23,1
 400e9a0:	003faf06 	br	400e860 <__reset+0xfb00d860>
 400e9a4:	9806c03a 	cmpne	r3,r19,zero
 400e9a8:	18c00084 	addi	r3,r3,2
 400e9ac:	003fba06 	br	400e898 <__reset+0xfb00d898>
 400e9b0:	9800141e 	bne	r19,zero,400ea04 <__mulsf3+0x210>
 400e9b4:	00c00044 	movi	r3,1
 400e9b8:	003fb706 	br	400e898 <__reset+0xfb00d898>
 400e9bc:	a829883a 	mov	r20,r21
 400e9c0:	00ffffc4 	movi	r3,-1
 400e9c4:	0009883a 	mov	r4,zero
 400e9c8:	003fdd06 	br	400e940 <__reset+0xfb00d940>
 400e9cc:	9009883a 	mov	r4,r18
 400e9d0:	d9400015 	stw	r5,0(sp)
 400e9d4:	4011b6c0 	call	4011b6c <__clzsi2>
 400e9d8:	10fffec4 	addi	r3,r2,-5
 400e9dc:	10801d84 	addi	r2,r2,118
 400e9e0:	90e4983a 	sll	r18,r18,r3
 400e9e4:	00a1c83a 	sub	r16,zero,r2
 400e9e8:	0023883a 	mov	r17,zero
 400e9ec:	002f883a 	mov	r23,zero
 400e9f0:	d9400017 	ldw	r5,0(sp)
 400e9f4:	003f9a06 	br	400e860 <__reset+0xfb00d860>
 400e9f8:	04400304 	movi	r17,12
 400e9fc:	05c000c4 	movi	r23,3
 400ea00:	003f9706 	br	400e860 <__reset+0xfb00d860>
 400ea04:	9809883a 	mov	r4,r19
 400ea08:	d9800015 	stw	r6,0(sp)
 400ea0c:	4011b6c0 	call	4011b6c <__clzsi2>
 400ea10:	10fffec4 	addi	r3,r2,-5
 400ea14:	10801d84 	addi	r2,r2,118
 400ea18:	98e6983a 	sll	r19,r19,r3
 400ea1c:	0085c83a 	sub	r2,zero,r2
 400ea20:	0007883a 	mov	r3,zero
 400ea24:	d9800017 	ldw	r6,0(sp)
 400ea28:	003f9b06 	br	400e898 <__reset+0xfb00d898>
 400ea2c:	01002034 	movhi	r4,128
 400ea30:	0029883a 	mov	r20,zero
 400ea34:	213fffc4 	addi	r4,r4,-1
 400ea38:	00ffffc4 	movi	r3,-1
 400ea3c:	003fc006 	br	400e940 <__reset+0xfb00d940>
 400ea40:	9027883a 	mov	r19,r18
 400ea44:	b807883a 	mov	r3,r23
 400ea48:	003fb406 	br	400e91c <__reset+0xfb00d91c>
 400ea4c:	9027883a 	mov	r19,r18
 400ea50:	e02b883a 	mov	r21,fp
 400ea54:	b807883a 	mov	r3,r23
 400ea58:	003fb006 	br	400e91c <__reset+0xfb00d91c>
 400ea5c:	9004d43a 	srli	r2,r18,16
 400ea60:	9810d43a 	srli	r8,r19,16
 400ea64:	94bfffcc 	andi	r18,r18,65535
 400ea68:	993fffcc 	andi	r4,r19,65535
 400ea6c:	910d383a 	mul	r6,r18,r4
 400ea70:	20a7383a 	mul	r19,r4,r2
 400ea74:	9225383a 	mul	r18,r18,r8
 400ea78:	3006d43a 	srli	r3,r6,16
 400ea7c:	1211383a 	mul	r8,r2,r8
 400ea80:	94e5883a 	add	r18,r18,r19
 400ea84:	1c87883a 	add	r3,r3,r18
 400ea88:	1cc0022e 	bgeu	r3,r19,400ea94 <__mulsf3+0x2a0>
 400ea8c:	00800074 	movhi	r2,1
 400ea90:	4091883a 	add	r8,r8,r2
 400ea94:	1804943a 	slli	r2,r3,16
 400ea98:	31bfffcc 	andi	r6,r6,65535
 400ea9c:	1806d43a 	srli	r3,r3,16
 400eaa0:	1185883a 	add	r2,r2,r6
 400eaa4:	102691ba 	slli	r19,r2,6
 400eaa8:	1a07883a 	add	r3,r3,r8
 400eaac:	1004d6ba 	srli	r2,r2,26
 400eab0:	180891ba 	slli	r4,r3,6
 400eab4:	9826c03a 	cmpne	r19,r19,zero
 400eab8:	9884b03a 	or	r2,r19,r2
 400eabc:	1126b03a 	or	r19,r2,r4
 400eac0:	9882002c 	andhi	r2,r19,2048
 400eac4:	10000426 	beq	r2,zero,400ead8 <__mulsf3+0x2e4>
 400eac8:	9804d07a 	srli	r2,r19,1
 400eacc:	9900004c 	andi	r4,r19,1
 400ead0:	3821883a 	mov	r16,r7
 400ead4:	1126b03a 	or	r19,r2,r4
 400ead8:	80c01fc4 	addi	r3,r16,127
 400eadc:	00c0210e 	bge	zero,r3,400eb64 <__mulsf3+0x370>
 400eae0:	988001cc 	andi	r2,r19,7
 400eae4:	10000426 	beq	r2,zero,400eaf8 <__mulsf3+0x304>
 400eae8:	988003cc 	andi	r2,r19,15
 400eaec:	01000104 	movi	r4,4
 400eaf0:	11000126 	beq	r2,r4,400eaf8 <__mulsf3+0x304>
 400eaf4:	9927883a 	add	r19,r19,r4
 400eaf8:	9882002c 	andhi	r2,r19,2048
 400eafc:	10000426 	beq	r2,zero,400eb10 <__mulsf3+0x31c>
 400eb00:	00be0034 	movhi	r2,63488
 400eb04:	10bfffc4 	addi	r2,r2,-1
 400eb08:	80c02004 	addi	r3,r16,128
 400eb0c:	98a6703a 	and	r19,r19,r2
 400eb10:	00803f84 	movi	r2,254
 400eb14:	10ffa916 	blt	r2,r3,400e9bc <__reset+0xfb00d9bc>
 400eb18:	980891ba 	slli	r4,r19,6
 400eb1c:	a829883a 	mov	r20,r21
 400eb20:	2008d27a 	srli	r4,r4,9
 400eb24:	003f8606 	br	400e940 <__reset+0xfb00d940>
 400eb28:	9080102c 	andhi	r2,r18,64
 400eb2c:	10000826 	beq	r2,zero,400eb50 <__mulsf3+0x35c>
 400eb30:	9880102c 	andhi	r2,r19,64
 400eb34:	1000061e 	bne	r2,zero,400eb50 <__mulsf3+0x35c>
 400eb38:	00802034 	movhi	r2,128
 400eb3c:	99001034 	orhi	r4,r19,64
 400eb40:	10bfffc4 	addi	r2,r2,-1
 400eb44:	b029883a 	mov	r20,r22
 400eb48:	2088703a 	and	r4,r4,r2
 400eb4c:	003fba06 	br	400ea38 <__reset+0xfb00da38>
 400eb50:	00802034 	movhi	r2,128
 400eb54:	91001034 	orhi	r4,r18,64
 400eb58:	10bfffc4 	addi	r2,r2,-1
 400eb5c:	2088703a 	and	r4,r4,r2
 400eb60:	003fb506 	br	400ea38 <__reset+0xfb00da38>
 400eb64:	00800044 	movi	r2,1
 400eb68:	10c7c83a 	sub	r3,r2,r3
 400eb6c:	008006c4 	movi	r2,27
 400eb70:	10ff7016 	blt	r2,r3,400e934 <__reset+0xfb00d934>
 400eb74:	00800804 	movi	r2,32
 400eb78:	10c5c83a 	sub	r2,r2,r3
 400eb7c:	9884983a 	sll	r2,r19,r2
 400eb80:	98c6d83a 	srl	r3,r19,r3
 400eb84:	1004c03a 	cmpne	r2,r2,zero
 400eb88:	1884b03a 	or	r2,r3,r2
 400eb8c:	10c001cc 	andi	r3,r2,7
 400eb90:	18000426 	beq	r3,zero,400eba4 <__mulsf3+0x3b0>
 400eb94:	10c003cc 	andi	r3,r2,15
 400eb98:	01000104 	movi	r4,4
 400eb9c:	19000126 	beq	r3,r4,400eba4 <__mulsf3+0x3b0>
 400eba0:	1105883a 	add	r2,r2,r4
 400eba4:	10c1002c 	andhi	r3,r2,1024
 400eba8:	18000626 	beq	r3,zero,400ebc4 <__mulsf3+0x3d0>
 400ebac:	a829883a 	mov	r20,r21
 400ebb0:	00c00044 	movi	r3,1
 400ebb4:	0009883a 	mov	r4,zero
 400ebb8:	003f6106 	br	400e940 <__reset+0xfb00d940>
 400ebbc:	3821883a 	mov	r16,r7
 400ebc0:	003fc506 	br	400ead8 <__reset+0xfb00dad8>
 400ebc4:	100491ba 	slli	r2,r2,6
 400ebc8:	a829883a 	mov	r20,r21
 400ebcc:	0007883a 	mov	r3,zero
 400ebd0:	1008d27a 	srli	r4,r2,9
 400ebd4:	003f5a06 	br	400e940 <__reset+0xfb00d940>
 400ebd8:	00802034 	movhi	r2,128
 400ebdc:	99001034 	orhi	r4,r19,64
 400ebe0:	10bfffc4 	addi	r2,r2,-1
 400ebe4:	a829883a 	mov	r20,r21
 400ebe8:	2088703a 	and	r4,r4,r2
 400ebec:	003f9206 	br	400ea38 <__reset+0xfb00da38>

0400ebf0 <__subsf3>:
 400ebf0:	defffc04 	addi	sp,sp,-16
 400ebf4:	280cd5fa 	srli	r6,r5,23
 400ebf8:	dc000015 	stw	r16,0(sp)
 400ebfc:	01c02034 	movhi	r7,128
 400ec00:	2020d5fa 	srli	r16,r4,23
 400ec04:	39ffffc4 	addi	r7,r7,-1
 400ec08:	3906703a 	and	r3,r7,r4
 400ec0c:	dc400115 	stw	r17,4(sp)
 400ec10:	394e703a 	and	r7,r7,r5
 400ec14:	2022d7fa 	srli	r17,r4,31
 400ec18:	dfc00315 	stw	ra,12(sp)
 400ec1c:	dc800215 	stw	r18,8(sp)
 400ec20:	31803fcc 	andi	r6,r6,255
 400ec24:	01003fc4 	movi	r4,255
 400ec28:	84003fcc 	andi	r16,r16,255
 400ec2c:	180690fa 	slli	r3,r3,3
 400ec30:	2804d7fa 	srli	r2,r5,31
 400ec34:	380e90fa 	slli	r7,r7,3
 400ec38:	31006d26 	beq	r6,r4,400edf0 <__subsf3+0x200>
 400ec3c:	1080005c 	xori	r2,r2,1
 400ec40:	8189c83a 	sub	r4,r16,r6
 400ec44:	14404f26 	beq	r2,r17,400ed84 <__subsf3+0x194>
 400ec48:	0100770e 	bge	zero,r4,400ee28 <__subsf3+0x238>
 400ec4c:	30001e1e 	bne	r6,zero,400ecc8 <__subsf3+0xd8>
 400ec50:	38006a1e 	bne	r7,zero,400edfc <__subsf3+0x20c>
 400ec54:	188001cc 	andi	r2,r3,7
 400ec58:	10000426 	beq	r2,zero,400ec6c <__subsf3+0x7c>
 400ec5c:	188003cc 	andi	r2,r3,15
 400ec60:	01000104 	movi	r4,4
 400ec64:	11000126 	beq	r2,r4,400ec6c <__subsf3+0x7c>
 400ec68:	1907883a 	add	r3,r3,r4
 400ec6c:	1881002c 	andhi	r2,r3,1024
 400ec70:	10003926 	beq	r2,zero,400ed58 <__subsf3+0x168>
 400ec74:	84000044 	addi	r16,r16,1
 400ec78:	00803fc4 	movi	r2,255
 400ec7c:	80807526 	beq	r16,r2,400ee54 <__subsf3+0x264>
 400ec80:	180691ba 	slli	r3,r3,6
 400ec84:	8880004c 	andi	r2,r17,1
 400ec88:	180ad27a 	srli	r5,r3,9
 400ec8c:	84003fcc 	andi	r16,r16,255
 400ec90:	800695fa 	slli	r3,r16,23
 400ec94:	10803fcc 	andi	r2,r2,255
 400ec98:	01002034 	movhi	r4,128
 400ec9c:	213fffc4 	addi	r4,r4,-1
 400eca0:	100497fa 	slli	r2,r2,31
 400eca4:	2920703a 	and	r16,r5,r4
 400eca8:	80e0b03a 	or	r16,r16,r3
 400ecac:	8084b03a 	or	r2,r16,r2
 400ecb0:	dfc00317 	ldw	ra,12(sp)
 400ecb4:	dc800217 	ldw	r18,8(sp)
 400ecb8:	dc400117 	ldw	r17,4(sp)
 400ecbc:	dc000017 	ldw	r16,0(sp)
 400ecc0:	dec00404 	addi	sp,sp,16
 400ecc4:	f800283a 	ret
 400ecc8:	00803fc4 	movi	r2,255
 400eccc:	80bfe126 	beq	r16,r2,400ec54 <__reset+0xfb00dc54>
 400ecd0:	39c10034 	orhi	r7,r7,1024
 400ecd4:	008006c4 	movi	r2,27
 400ecd8:	11007416 	blt	r2,r4,400eeac <__subsf3+0x2bc>
 400ecdc:	00800804 	movi	r2,32
 400ece0:	1105c83a 	sub	r2,r2,r4
 400ece4:	3884983a 	sll	r2,r7,r2
 400ece8:	390ed83a 	srl	r7,r7,r4
 400ecec:	1008c03a 	cmpne	r4,r2,zero
 400ecf0:	390eb03a 	or	r7,r7,r4
 400ecf4:	19c7c83a 	sub	r3,r3,r7
 400ecf8:	1881002c 	andhi	r2,r3,1024
 400ecfc:	10001426 	beq	r2,zero,400ed50 <__subsf3+0x160>
 400ed00:	04810034 	movhi	r18,1024
 400ed04:	94bfffc4 	addi	r18,r18,-1
 400ed08:	1ca4703a 	and	r18,r3,r18
 400ed0c:	9009883a 	mov	r4,r18
 400ed10:	4011b6c0 	call	4011b6c <__clzsi2>
 400ed14:	10bffec4 	addi	r2,r2,-5
 400ed18:	90a4983a 	sll	r18,r18,r2
 400ed1c:	14005116 	blt	r2,r16,400ee64 <__subsf3+0x274>
 400ed20:	1405c83a 	sub	r2,r2,r16
 400ed24:	10c00044 	addi	r3,r2,1
 400ed28:	00800804 	movi	r2,32
 400ed2c:	10c5c83a 	sub	r2,r2,r3
 400ed30:	9084983a 	sll	r2,r18,r2
 400ed34:	90e4d83a 	srl	r18,r18,r3
 400ed38:	0021883a 	mov	r16,zero
 400ed3c:	1006c03a 	cmpne	r3,r2,zero
 400ed40:	90c6b03a 	or	r3,r18,r3
 400ed44:	003fc306 	br	400ec54 <__reset+0xfb00dc54>
 400ed48:	2000e026 	beq	r4,zero,400f0cc <__subsf3+0x4dc>
 400ed4c:	2007883a 	mov	r3,r4
 400ed50:	188001cc 	andi	r2,r3,7
 400ed54:	103fc11e 	bne	r2,zero,400ec5c <__reset+0xfb00dc5c>
 400ed58:	180ad0fa 	srli	r5,r3,3
 400ed5c:	00c03fc4 	movi	r3,255
 400ed60:	8880004c 	andi	r2,r17,1
 400ed64:	80c0031e 	bne	r16,r3,400ed74 <__subsf3+0x184>
 400ed68:	28006d26 	beq	r5,zero,400ef20 <__subsf3+0x330>
 400ed6c:	29401034 	orhi	r5,r5,64
 400ed70:	043fffc4 	movi	r16,-1
 400ed74:	00c02034 	movhi	r3,128
 400ed78:	18ffffc4 	addi	r3,r3,-1
 400ed7c:	28ca703a 	and	r5,r5,r3
 400ed80:	003fc206 	br	400ec8c <__reset+0xfb00dc8c>
 400ed84:	01003c0e 	bge	zero,r4,400ee78 <__subsf3+0x288>
 400ed88:	30002126 	beq	r6,zero,400ee10 <__subsf3+0x220>
 400ed8c:	01403fc4 	movi	r5,255
 400ed90:	817fb026 	beq	r16,r5,400ec54 <__reset+0xfb00dc54>
 400ed94:	39c10034 	orhi	r7,r7,1024
 400ed98:	014006c4 	movi	r5,27
 400ed9c:	29007416 	blt	r5,r4,400ef70 <__subsf3+0x380>
 400eda0:	01400804 	movi	r5,32
 400eda4:	290bc83a 	sub	r5,r5,r4
 400eda8:	394a983a 	sll	r5,r7,r5
 400edac:	390ed83a 	srl	r7,r7,r4
 400edb0:	2808c03a 	cmpne	r4,r5,zero
 400edb4:	390eb03a 	or	r7,r7,r4
 400edb8:	19c7883a 	add	r3,r3,r7
 400edbc:	1901002c 	andhi	r4,r3,1024
 400edc0:	20003826 	beq	r4,zero,400eea4 <__subsf3+0x2b4>
 400edc4:	84000044 	addi	r16,r16,1
 400edc8:	01003fc4 	movi	r4,255
 400edcc:	81005426 	beq	r16,r4,400ef20 <__subsf3+0x330>
 400edd0:	1023883a 	mov	r17,r2
 400edd4:	00bf0034 	movhi	r2,64512
 400edd8:	10bfffc4 	addi	r2,r2,-1
 400eddc:	1900004c 	andi	r4,r3,1
 400ede0:	1886703a 	and	r3,r3,r2
 400ede4:	1806d07a 	srli	r3,r3,1
 400ede8:	1906b03a 	or	r3,r3,r4
 400edec:	003f9906 	br	400ec54 <__reset+0xfb00dc54>
 400edf0:	383f9226 	beq	r7,zero,400ec3c <__reset+0xfb00dc3c>
 400edf4:	10803fcc 	andi	r2,r2,255
 400edf8:	003f9106 	br	400ec40 <__reset+0xfb00dc40>
 400edfc:	213fffc4 	addi	r4,r4,-1
 400ee00:	203fbc26 	beq	r4,zero,400ecf4 <__reset+0xfb00dcf4>
 400ee04:	00803fc4 	movi	r2,255
 400ee08:	80bfb21e 	bne	r16,r2,400ecd4 <__reset+0xfb00dcd4>
 400ee0c:	003f9106 	br	400ec54 <__reset+0xfb00dc54>
 400ee10:	383f9026 	beq	r7,zero,400ec54 <__reset+0xfb00dc54>
 400ee14:	213fffc4 	addi	r4,r4,-1
 400ee18:	203fe726 	beq	r4,zero,400edb8 <__reset+0xfb00ddb8>
 400ee1c:	01403fc4 	movi	r5,255
 400ee20:	817fdd1e 	bne	r16,r5,400ed98 <__reset+0xfb00dd98>
 400ee24:	003f8b06 	br	400ec54 <__reset+0xfb00dc54>
 400ee28:	2000221e 	bne	r4,zero,400eeb4 <__subsf3+0x2c4>
 400ee2c:	81000044 	addi	r4,r16,1
 400ee30:	21003fcc 	andi	r4,r4,255
 400ee34:	01400044 	movi	r5,1
 400ee38:	2900470e 	bge	r5,r4,400ef58 <__subsf3+0x368>
 400ee3c:	19e5c83a 	sub	r18,r3,r7
 400ee40:	9141002c 	andhi	r5,r18,1024
 400ee44:	28002d26 	beq	r5,zero,400eefc <__subsf3+0x30c>
 400ee48:	38e5c83a 	sub	r18,r7,r3
 400ee4c:	1023883a 	mov	r17,r2
 400ee50:	003fae06 	br	400ed0c <__reset+0xfb00dd0c>
 400ee54:	8880004c 	andi	r2,r17,1
 400ee58:	043fffc4 	movi	r16,-1
 400ee5c:	000b883a 	mov	r5,zero
 400ee60:	003f8a06 	br	400ec8c <__reset+0xfb00dc8c>
 400ee64:	00ff0034 	movhi	r3,64512
 400ee68:	18ffffc4 	addi	r3,r3,-1
 400ee6c:	80a1c83a 	sub	r16,r16,r2
 400ee70:	90c6703a 	and	r3,r18,r3
 400ee74:	003f7706 	br	400ec54 <__reset+0xfb00dc54>
 400ee78:	2000431e 	bne	r4,zero,400ef88 <__subsf3+0x398>
 400ee7c:	81000044 	addi	r4,r16,1
 400ee80:	21803fcc 	andi	r6,r4,255
 400ee84:	01400044 	movi	r5,1
 400ee88:	2980280e 	bge	r5,r6,400ef2c <__subsf3+0x33c>
 400ee8c:	01403fc4 	movi	r5,255
 400ee90:	21402326 	beq	r4,r5,400ef20 <__subsf3+0x330>
 400ee94:	19c7883a 	add	r3,r3,r7
 400ee98:	1806d07a 	srli	r3,r3,1
 400ee9c:	2021883a 	mov	r16,r4
 400eea0:	003f6c06 	br	400ec54 <__reset+0xfb00dc54>
 400eea4:	1023883a 	mov	r17,r2
 400eea8:	003fa906 	br	400ed50 <__reset+0xfb00dd50>
 400eeac:	01c00044 	movi	r7,1
 400eeb0:	003f9006 	br	400ecf4 <__reset+0xfb00dcf4>
 400eeb4:	8000151e 	bne	r16,zero,400ef0c <__subsf3+0x31c>
 400eeb8:	18002f26 	beq	r3,zero,400ef78 <__subsf3+0x388>
 400eebc:	0108303a 	nor	r4,zero,r4
 400eec0:	20000a26 	beq	r4,zero,400eeec <__subsf3+0x2fc>
 400eec4:	01403fc4 	movi	r5,255
 400eec8:	31402b26 	beq	r6,r5,400ef78 <__subsf3+0x388>
 400eecc:	014006c4 	movi	r5,27
 400eed0:	29006e16 	blt	r5,r4,400f08c <__subsf3+0x49c>
 400eed4:	01400804 	movi	r5,32
 400eed8:	290bc83a 	sub	r5,r5,r4
 400eedc:	194a983a 	sll	r5,r3,r5
 400eee0:	1908d83a 	srl	r4,r3,r4
 400eee4:	2806c03a 	cmpne	r3,r5,zero
 400eee8:	20c6b03a 	or	r3,r4,r3
 400eeec:	38c7c83a 	sub	r3,r7,r3
 400eef0:	3021883a 	mov	r16,r6
 400eef4:	1023883a 	mov	r17,r2
 400eef8:	003f7f06 	br	400ecf8 <__reset+0xfb00dcf8>
 400eefc:	903f831e 	bne	r18,zero,400ed0c <__reset+0xfb00dd0c>
 400ef00:	0005883a 	mov	r2,zero
 400ef04:	0021883a 	mov	r16,zero
 400ef08:	003f9a06 	br	400ed74 <__reset+0xfb00dd74>
 400ef0c:	01403fc4 	movi	r5,255
 400ef10:	31401926 	beq	r6,r5,400ef78 <__subsf3+0x388>
 400ef14:	0109c83a 	sub	r4,zero,r4
 400ef18:	18c10034 	orhi	r3,r3,1024
 400ef1c:	003feb06 	br	400eecc <__reset+0xfb00decc>
 400ef20:	043fffc4 	movi	r16,-1
 400ef24:	000b883a 	mov	r5,zero
 400ef28:	003f5806 	br	400ec8c <__reset+0xfb00dc8c>
 400ef2c:	8000481e 	bne	r16,zero,400f050 <__subsf3+0x460>
 400ef30:	18006226 	beq	r3,zero,400f0bc <__subsf3+0x4cc>
 400ef34:	383f4726 	beq	r7,zero,400ec54 <__reset+0xfb00dc54>
 400ef38:	19c7883a 	add	r3,r3,r7
 400ef3c:	1881002c 	andhi	r2,r3,1024
 400ef40:	103f8326 	beq	r2,zero,400ed50 <__reset+0xfb00dd50>
 400ef44:	00bf0034 	movhi	r2,64512
 400ef48:	10bfffc4 	addi	r2,r2,-1
 400ef4c:	2821883a 	mov	r16,r5
 400ef50:	1886703a 	and	r3,r3,r2
 400ef54:	003f3f06 	br	400ec54 <__reset+0xfb00dc54>
 400ef58:	80001c1e 	bne	r16,zero,400efcc <__subsf3+0x3dc>
 400ef5c:	1800261e 	bne	r3,zero,400eff8 <__subsf3+0x408>
 400ef60:	38004c26 	beq	r7,zero,400f094 <__subsf3+0x4a4>
 400ef64:	3807883a 	mov	r3,r7
 400ef68:	1023883a 	mov	r17,r2
 400ef6c:	003f3906 	br	400ec54 <__reset+0xfb00dc54>
 400ef70:	01c00044 	movi	r7,1
 400ef74:	003f9006 	br	400edb8 <__reset+0xfb00ddb8>
 400ef78:	3807883a 	mov	r3,r7
 400ef7c:	3021883a 	mov	r16,r6
 400ef80:	1023883a 	mov	r17,r2
 400ef84:	003f3306 	br	400ec54 <__reset+0xfb00dc54>
 400ef88:	8000161e 	bne	r16,zero,400efe4 <__subsf3+0x3f4>
 400ef8c:	18002d26 	beq	r3,zero,400f044 <__subsf3+0x454>
 400ef90:	0108303a 	nor	r4,zero,r4
 400ef94:	20000a26 	beq	r4,zero,400efc0 <__subsf3+0x3d0>
 400ef98:	01403fc4 	movi	r5,255
 400ef9c:	31402926 	beq	r6,r5,400f044 <__subsf3+0x454>
 400efa0:	014006c4 	movi	r5,27
 400efa4:	29004716 	blt	r5,r4,400f0c4 <__subsf3+0x4d4>
 400efa8:	01400804 	movi	r5,32
 400efac:	290bc83a 	sub	r5,r5,r4
 400efb0:	194a983a 	sll	r5,r3,r5
 400efb4:	1908d83a 	srl	r4,r3,r4
 400efb8:	2806c03a 	cmpne	r3,r5,zero
 400efbc:	20c6b03a 	or	r3,r4,r3
 400efc0:	19c7883a 	add	r3,r3,r7
 400efc4:	3021883a 	mov	r16,r6
 400efc8:	003f7c06 	br	400edbc <__reset+0xfb00ddbc>
 400efcc:	1800111e 	bne	r3,zero,400f014 <__subsf3+0x424>
 400efd0:	38003326 	beq	r7,zero,400f0a0 <__subsf3+0x4b0>
 400efd4:	3807883a 	mov	r3,r7
 400efd8:	1023883a 	mov	r17,r2
 400efdc:	04003fc4 	movi	r16,255
 400efe0:	003f1c06 	br	400ec54 <__reset+0xfb00dc54>
 400efe4:	01403fc4 	movi	r5,255
 400efe8:	31401626 	beq	r6,r5,400f044 <__subsf3+0x454>
 400efec:	0109c83a 	sub	r4,zero,r4
 400eff0:	18c10034 	orhi	r3,r3,1024
 400eff4:	003fea06 	br	400efa0 <__reset+0xfb00dfa0>
 400eff8:	383f1626 	beq	r7,zero,400ec54 <__reset+0xfb00dc54>
 400effc:	19c9c83a 	sub	r4,r3,r7
 400f000:	2141002c 	andhi	r5,r4,1024
 400f004:	283f5026 	beq	r5,zero,400ed48 <__reset+0xfb00dd48>
 400f008:	38c7c83a 	sub	r3,r7,r3
 400f00c:	1023883a 	mov	r17,r2
 400f010:	003f1006 	br	400ec54 <__reset+0xfb00dc54>
 400f014:	38001b26 	beq	r7,zero,400f084 <__subsf3+0x494>
 400f018:	1806d0fa 	srli	r3,r3,3
 400f01c:	1900102c 	andhi	r4,r3,64
 400f020:	20000526 	beq	r4,zero,400f038 <__subsf3+0x448>
 400f024:	380ed0fa 	srli	r7,r7,3
 400f028:	3900102c 	andhi	r4,r7,64
 400f02c:	2000021e 	bne	r4,zero,400f038 <__subsf3+0x448>
 400f030:	3807883a 	mov	r3,r7
 400f034:	1023883a 	mov	r17,r2
 400f038:	180690fa 	slli	r3,r3,3
 400f03c:	04003fc4 	movi	r16,255
 400f040:	003f0406 	br	400ec54 <__reset+0xfb00dc54>
 400f044:	3807883a 	mov	r3,r7
 400f048:	3021883a 	mov	r16,r6
 400f04c:	003f0106 	br	400ec54 <__reset+0xfb00dc54>
 400f050:	18001726 	beq	r3,zero,400f0b0 <__subsf3+0x4c0>
 400f054:	38000b26 	beq	r7,zero,400f084 <__subsf3+0x494>
 400f058:	1806d0fa 	srli	r3,r3,3
 400f05c:	1900102c 	andhi	r4,r3,64
 400f060:	20000426 	beq	r4,zero,400f074 <__subsf3+0x484>
 400f064:	380ed0fa 	srli	r7,r7,3
 400f068:	3900102c 	andhi	r4,r7,64
 400f06c:	2000011e 	bne	r4,zero,400f074 <__subsf3+0x484>
 400f070:	3807883a 	mov	r3,r7
 400f074:	180690fa 	slli	r3,r3,3
 400f078:	1023883a 	mov	r17,r2
 400f07c:	04003fc4 	movi	r16,255
 400f080:	003ef406 	br	400ec54 <__reset+0xfb00dc54>
 400f084:	04003fc4 	movi	r16,255
 400f088:	003ef206 	br	400ec54 <__reset+0xfb00dc54>
 400f08c:	00c00044 	movi	r3,1
 400f090:	003f9606 	br	400eeec <__reset+0xfb00deec>
 400f094:	000b883a 	mov	r5,zero
 400f098:	0005883a 	mov	r2,zero
 400f09c:	003f3506 	br	400ed74 <__reset+0xfb00dd74>
 400f0a0:	01402034 	movhi	r5,128
 400f0a4:	297fffc4 	addi	r5,r5,-1
 400f0a8:	0005883a 	mov	r2,zero
 400f0ac:	003f2f06 	br	400ed6c <__reset+0xfb00dd6c>
 400f0b0:	3807883a 	mov	r3,r7
 400f0b4:	04003fc4 	movi	r16,255
 400f0b8:	003ee606 	br	400ec54 <__reset+0xfb00dc54>
 400f0bc:	3807883a 	mov	r3,r7
 400f0c0:	003ee406 	br	400ec54 <__reset+0xfb00dc54>
 400f0c4:	00c00044 	movi	r3,1
 400f0c8:	003fbd06 	br	400efc0 <__reset+0xfb00dfc0>
 400f0cc:	0005883a 	mov	r2,zero
 400f0d0:	003f2806 	br	400ed74 <__reset+0xfb00dd74>

0400f0d4 <__fixsfsi>:
 400f0d4:	200ad5fa 	srli	r5,r4,23
 400f0d8:	00c02034 	movhi	r3,128
 400f0dc:	18ffffc4 	addi	r3,r3,-1
 400f0e0:	29403fcc 	andi	r5,r5,255
 400f0e4:	00801f84 	movi	r2,126
 400f0e8:	1906703a 	and	r3,r3,r4
 400f0ec:	2008d7fa 	srli	r4,r4,31
 400f0f0:	11400e0e 	bge	r2,r5,400f12c <__fixsfsi+0x58>
 400f0f4:	00802744 	movi	r2,157
 400f0f8:	11400816 	blt	r2,r5,400f11c <__fixsfsi+0x48>
 400f0fc:	00802544 	movi	r2,149
 400f100:	18c02034 	orhi	r3,r3,128
 400f104:	11400b0e 	bge	r2,r5,400f134 <__fixsfsi+0x60>
 400f108:	28bfda84 	addi	r2,r5,-150
 400f10c:	1884983a 	sll	r2,r3,r2
 400f110:	20000726 	beq	r4,zero,400f130 <__fixsfsi+0x5c>
 400f114:	0085c83a 	sub	r2,zero,r2
 400f118:	f800283a 	ret
 400f11c:	00a00034 	movhi	r2,32768
 400f120:	10bfffc4 	addi	r2,r2,-1
 400f124:	2085883a 	add	r2,r4,r2
 400f128:	f800283a 	ret
 400f12c:	0005883a 	mov	r2,zero
 400f130:	f800283a 	ret
 400f134:	00802584 	movi	r2,150
 400f138:	1145c83a 	sub	r2,r2,r5
 400f13c:	1884d83a 	srl	r2,r3,r2
 400f140:	003ff306 	br	400f110 <__reset+0xfb00e110>

0400f144 <__floatsisf>:
 400f144:	defffd04 	addi	sp,sp,-12
 400f148:	dfc00215 	stw	ra,8(sp)
 400f14c:	dc400115 	stw	r17,4(sp)
 400f150:	dc000015 	stw	r16,0(sp)
 400f154:	20003526 	beq	r4,zero,400f22c <__floatsisf+0xe8>
 400f158:	2021883a 	mov	r16,r4
 400f15c:	2022d7fa 	srli	r17,r4,31
 400f160:	20003616 	blt	r4,zero,400f23c <__floatsisf+0xf8>
 400f164:	8009883a 	mov	r4,r16
 400f168:	4011b6c0 	call	4011b6c <__clzsi2>
 400f16c:	00c02784 	movi	r3,158
 400f170:	1887c83a 	sub	r3,r3,r2
 400f174:	01002584 	movi	r4,150
 400f178:	20c01416 	blt	r4,r3,400f1cc <__floatsisf+0x88>
 400f17c:	20c9c83a 	sub	r4,r4,r3
 400f180:	8120983a 	sll	r16,r16,r4
 400f184:	00802034 	movhi	r2,128
 400f188:	10bfffc4 	addi	r2,r2,-1
 400f18c:	8809883a 	mov	r4,r17
 400f190:	80a0703a 	and	r16,r16,r2
 400f194:	18803fcc 	andi	r2,r3,255
 400f198:	100695fa 	slli	r3,r2,23
 400f19c:	20803fcc 	andi	r2,r4,255
 400f1a0:	100897fa 	slli	r4,r2,31
 400f1a4:	00802034 	movhi	r2,128
 400f1a8:	10bfffc4 	addi	r2,r2,-1
 400f1ac:	8084703a 	and	r2,r16,r2
 400f1b0:	10c4b03a 	or	r2,r2,r3
 400f1b4:	1104b03a 	or	r2,r2,r4
 400f1b8:	dfc00217 	ldw	ra,8(sp)
 400f1bc:	dc400117 	ldw	r17,4(sp)
 400f1c0:	dc000017 	ldw	r16,0(sp)
 400f1c4:	dec00304 	addi	sp,sp,12
 400f1c8:	f800283a 	ret
 400f1cc:	01002644 	movi	r4,153
 400f1d0:	20c01c16 	blt	r4,r3,400f244 <__floatsisf+0x100>
 400f1d4:	20c9c83a 	sub	r4,r4,r3
 400f1d8:	8120983a 	sll	r16,r16,r4
 400f1dc:	013f0034 	movhi	r4,64512
 400f1e0:	213fffc4 	addi	r4,r4,-1
 400f1e4:	814001cc 	andi	r5,r16,7
 400f1e8:	8108703a 	and	r4,r16,r4
 400f1ec:	28000426 	beq	r5,zero,400f200 <__floatsisf+0xbc>
 400f1f0:	840003cc 	andi	r16,r16,15
 400f1f4:	01400104 	movi	r5,4
 400f1f8:	81400126 	beq	r16,r5,400f200 <__floatsisf+0xbc>
 400f1fc:	2149883a 	add	r4,r4,r5
 400f200:	2141002c 	andhi	r5,r4,1024
 400f204:	28000526 	beq	r5,zero,400f21c <__floatsisf+0xd8>
 400f208:	00c027c4 	movi	r3,159
 400f20c:	1887c83a 	sub	r3,r3,r2
 400f210:	00bf0034 	movhi	r2,64512
 400f214:	10bfffc4 	addi	r2,r2,-1
 400f218:	2088703a 	and	r4,r4,r2
 400f21c:	202091ba 	slli	r16,r4,6
 400f220:	8809883a 	mov	r4,r17
 400f224:	8020d27a 	srli	r16,r16,9
 400f228:	003fda06 	br	400f194 <__reset+0xfb00e194>
 400f22c:	0009883a 	mov	r4,zero
 400f230:	0007883a 	mov	r3,zero
 400f234:	0021883a 	mov	r16,zero
 400f238:	003fd606 	br	400f194 <__reset+0xfb00e194>
 400f23c:	0121c83a 	sub	r16,zero,r4
 400f240:	003fc806 	br	400f164 <__reset+0xfb00e164>
 400f244:	01002e44 	movi	r4,185
 400f248:	20c9c83a 	sub	r4,r4,r3
 400f24c:	01400144 	movi	r5,5
 400f250:	8108983a 	sll	r4,r16,r4
 400f254:	288bc83a 	sub	r5,r5,r2
 400f258:	8160d83a 	srl	r16,r16,r5
 400f25c:	2008c03a 	cmpne	r4,r4,zero
 400f260:	8120b03a 	or	r16,r16,r4
 400f264:	003fdd06 	br	400f1dc <__reset+0xfb00e1dc>

0400f268 <__floatunsisf>:
 400f268:	defffe04 	addi	sp,sp,-8
 400f26c:	dfc00115 	stw	ra,4(sp)
 400f270:	dc000015 	stw	r16,0(sp)
 400f274:	20002c26 	beq	r4,zero,400f328 <__floatunsisf+0xc0>
 400f278:	2021883a 	mov	r16,r4
 400f27c:	4011b6c0 	call	4011b6c <__clzsi2>
 400f280:	00c02784 	movi	r3,158
 400f284:	1887c83a 	sub	r3,r3,r2
 400f288:	01002584 	movi	r4,150
 400f28c:	20c00f16 	blt	r4,r3,400f2cc <__floatunsisf+0x64>
 400f290:	20c9c83a 	sub	r4,r4,r3
 400f294:	8108983a 	sll	r4,r16,r4
 400f298:	00802034 	movhi	r2,128
 400f29c:	10bfffc4 	addi	r2,r2,-1
 400f2a0:	2088703a 	and	r4,r4,r2
 400f2a4:	18803fcc 	andi	r2,r3,255
 400f2a8:	100695fa 	slli	r3,r2,23
 400f2ac:	00802034 	movhi	r2,128
 400f2b0:	10bfffc4 	addi	r2,r2,-1
 400f2b4:	2084703a 	and	r2,r4,r2
 400f2b8:	10c4b03a 	or	r2,r2,r3
 400f2bc:	dfc00117 	ldw	ra,4(sp)
 400f2c0:	dc000017 	ldw	r16,0(sp)
 400f2c4:	dec00204 	addi	sp,sp,8
 400f2c8:	f800283a 	ret
 400f2cc:	01002644 	movi	r4,153
 400f2d0:	20c01816 	blt	r4,r3,400f334 <__floatunsisf+0xcc>
 400f2d4:	20c9c83a 	sub	r4,r4,r3
 400f2d8:	8108983a 	sll	r4,r16,r4
 400f2dc:	017f0034 	movhi	r5,64512
 400f2e0:	297fffc4 	addi	r5,r5,-1
 400f2e4:	218001cc 	andi	r6,r4,7
 400f2e8:	214a703a 	and	r5,r4,r5
 400f2ec:	30000426 	beq	r6,zero,400f300 <__floatunsisf+0x98>
 400f2f0:	210003cc 	andi	r4,r4,15
 400f2f4:	01800104 	movi	r6,4
 400f2f8:	21800126 	beq	r4,r6,400f300 <__floatunsisf+0x98>
 400f2fc:	298b883a 	add	r5,r5,r6
 400f300:	2901002c 	andhi	r4,r5,1024
 400f304:	20000526 	beq	r4,zero,400f31c <__floatunsisf+0xb4>
 400f308:	00c027c4 	movi	r3,159
 400f30c:	1887c83a 	sub	r3,r3,r2
 400f310:	00bf0034 	movhi	r2,64512
 400f314:	10bfffc4 	addi	r2,r2,-1
 400f318:	288a703a 	and	r5,r5,r2
 400f31c:	280891ba 	slli	r4,r5,6
 400f320:	2008d27a 	srli	r4,r4,9
 400f324:	003fdf06 	br	400f2a4 <__reset+0xfb00e2a4>
 400f328:	0007883a 	mov	r3,zero
 400f32c:	0009883a 	mov	r4,zero
 400f330:	003fdc06 	br	400f2a4 <__reset+0xfb00e2a4>
 400f334:	01402e44 	movi	r5,185
 400f338:	28cbc83a 	sub	r5,r5,r3
 400f33c:	01000144 	movi	r4,5
 400f340:	2089c83a 	sub	r4,r4,r2
 400f344:	814a983a 	sll	r5,r16,r5
 400f348:	8108d83a 	srl	r4,r16,r4
 400f34c:	2820c03a 	cmpne	r16,r5,zero
 400f350:	2408b03a 	or	r4,r4,r16
 400f354:	003fe106 	br	400f2dc <__reset+0xfb00e2dc>

0400f358 <__adddf3>:
 400f358:	02c00434 	movhi	r11,16
 400f35c:	5affffc4 	addi	r11,r11,-1
 400f360:	2806d7fa 	srli	r3,r5,31
 400f364:	2ad4703a 	and	r10,r5,r11
 400f368:	3ad2703a 	and	r9,r7,r11
 400f36c:	3804d53a 	srli	r2,r7,20
 400f370:	3018d77a 	srli	r12,r6,29
 400f374:	280ad53a 	srli	r5,r5,20
 400f378:	501490fa 	slli	r10,r10,3
 400f37c:	2010d77a 	srli	r8,r4,29
 400f380:	481290fa 	slli	r9,r9,3
 400f384:	380ed7fa 	srli	r7,r7,31
 400f388:	defffb04 	addi	sp,sp,-20
 400f38c:	dc800215 	stw	r18,8(sp)
 400f390:	dc400115 	stw	r17,4(sp)
 400f394:	dc000015 	stw	r16,0(sp)
 400f398:	dfc00415 	stw	ra,16(sp)
 400f39c:	dcc00315 	stw	r19,12(sp)
 400f3a0:	1c803fcc 	andi	r18,r3,255
 400f3a4:	2c01ffcc 	andi	r16,r5,2047
 400f3a8:	5210b03a 	or	r8,r10,r8
 400f3ac:	202290fa 	slli	r17,r4,3
 400f3b0:	1081ffcc 	andi	r2,r2,2047
 400f3b4:	4b12b03a 	or	r9,r9,r12
 400f3b8:	300c90fa 	slli	r6,r6,3
 400f3bc:	91c07526 	beq	r18,r7,400f594 <__adddf3+0x23c>
 400f3c0:	8087c83a 	sub	r3,r16,r2
 400f3c4:	00c0ab0e 	bge	zero,r3,400f674 <__adddf3+0x31c>
 400f3c8:	10002a1e 	bne	r2,zero,400f474 <__adddf3+0x11c>
 400f3cc:	4984b03a 	or	r2,r9,r6
 400f3d0:	1000961e 	bne	r2,zero,400f62c <__adddf3+0x2d4>
 400f3d4:	888001cc 	andi	r2,r17,7
 400f3d8:	10000726 	beq	r2,zero,400f3f8 <__adddf3+0xa0>
 400f3dc:	888003cc 	andi	r2,r17,15
 400f3e0:	00c00104 	movi	r3,4
 400f3e4:	10c00426 	beq	r2,r3,400f3f8 <__adddf3+0xa0>
 400f3e8:	88c7883a 	add	r3,r17,r3
 400f3ec:	1c63803a 	cmpltu	r17,r3,r17
 400f3f0:	4451883a 	add	r8,r8,r17
 400f3f4:	1823883a 	mov	r17,r3
 400f3f8:	4080202c 	andhi	r2,r8,128
 400f3fc:	10005926 	beq	r2,zero,400f564 <__adddf3+0x20c>
 400f400:	84000044 	addi	r16,r16,1
 400f404:	0081ffc4 	movi	r2,2047
 400f408:	8080ba26 	beq	r16,r2,400f6f4 <__adddf3+0x39c>
 400f40c:	00bfe034 	movhi	r2,65408
 400f410:	10bfffc4 	addi	r2,r2,-1
 400f414:	4090703a 	and	r8,r8,r2
 400f418:	4004977a 	slli	r2,r8,29
 400f41c:	4010927a 	slli	r8,r8,9
 400f420:	8822d0fa 	srli	r17,r17,3
 400f424:	8401ffcc 	andi	r16,r16,2047
 400f428:	4010d33a 	srli	r8,r8,12
 400f42c:	9007883a 	mov	r3,r18
 400f430:	1444b03a 	or	r2,r2,r17
 400f434:	8401ffcc 	andi	r16,r16,2047
 400f438:	8020953a 	slli	r16,r16,20
 400f43c:	18c03fcc 	andi	r3,r3,255
 400f440:	01000434 	movhi	r4,16
 400f444:	213fffc4 	addi	r4,r4,-1
 400f448:	180697fa 	slli	r3,r3,31
 400f44c:	4110703a 	and	r8,r8,r4
 400f450:	4410b03a 	or	r8,r8,r16
 400f454:	40c6b03a 	or	r3,r8,r3
 400f458:	dfc00417 	ldw	ra,16(sp)
 400f45c:	dcc00317 	ldw	r19,12(sp)
 400f460:	dc800217 	ldw	r18,8(sp)
 400f464:	dc400117 	ldw	r17,4(sp)
 400f468:	dc000017 	ldw	r16,0(sp)
 400f46c:	dec00504 	addi	sp,sp,20
 400f470:	f800283a 	ret
 400f474:	0081ffc4 	movi	r2,2047
 400f478:	80bfd626 	beq	r16,r2,400f3d4 <__reset+0xfb00e3d4>
 400f47c:	4a402034 	orhi	r9,r9,128
 400f480:	00800e04 	movi	r2,56
 400f484:	10c09f16 	blt	r2,r3,400f704 <__adddf3+0x3ac>
 400f488:	008007c4 	movi	r2,31
 400f48c:	10c0c216 	blt	r2,r3,400f798 <__adddf3+0x440>
 400f490:	00800804 	movi	r2,32
 400f494:	10c5c83a 	sub	r2,r2,r3
 400f498:	488a983a 	sll	r5,r9,r2
 400f49c:	30c8d83a 	srl	r4,r6,r3
 400f4a0:	3084983a 	sll	r2,r6,r2
 400f4a4:	48c6d83a 	srl	r3,r9,r3
 400f4a8:	290cb03a 	or	r6,r5,r4
 400f4ac:	1004c03a 	cmpne	r2,r2,zero
 400f4b0:	308cb03a 	or	r6,r6,r2
 400f4b4:	898dc83a 	sub	r6,r17,r6
 400f4b8:	89a3803a 	cmpltu	r17,r17,r6
 400f4bc:	40d1c83a 	sub	r8,r8,r3
 400f4c0:	4451c83a 	sub	r8,r8,r17
 400f4c4:	3023883a 	mov	r17,r6
 400f4c8:	4080202c 	andhi	r2,r8,128
 400f4cc:	10002326 	beq	r2,zero,400f55c <__adddf3+0x204>
 400f4d0:	04c02034 	movhi	r19,128
 400f4d4:	9cffffc4 	addi	r19,r19,-1
 400f4d8:	44e6703a 	and	r19,r8,r19
 400f4dc:	98007626 	beq	r19,zero,400f6b8 <__adddf3+0x360>
 400f4e0:	9809883a 	mov	r4,r19
 400f4e4:	4011b6c0 	call	4011b6c <__clzsi2>
 400f4e8:	10fffe04 	addi	r3,r2,-8
 400f4ec:	010007c4 	movi	r4,31
 400f4f0:	20c07716 	blt	r4,r3,400f6d0 <__adddf3+0x378>
 400f4f4:	00800804 	movi	r2,32
 400f4f8:	10c5c83a 	sub	r2,r2,r3
 400f4fc:	8884d83a 	srl	r2,r17,r2
 400f500:	98d0983a 	sll	r8,r19,r3
 400f504:	88e2983a 	sll	r17,r17,r3
 400f508:	1204b03a 	or	r2,r2,r8
 400f50c:	1c007416 	blt	r3,r16,400f6e0 <__adddf3+0x388>
 400f510:	1c21c83a 	sub	r16,r3,r16
 400f514:	82000044 	addi	r8,r16,1
 400f518:	00c007c4 	movi	r3,31
 400f51c:	1a009116 	blt	r3,r8,400f764 <__adddf3+0x40c>
 400f520:	00c00804 	movi	r3,32
 400f524:	1a07c83a 	sub	r3,r3,r8
 400f528:	8a08d83a 	srl	r4,r17,r8
 400f52c:	88e2983a 	sll	r17,r17,r3
 400f530:	10c6983a 	sll	r3,r2,r3
 400f534:	1210d83a 	srl	r8,r2,r8
 400f538:	8804c03a 	cmpne	r2,r17,zero
 400f53c:	1906b03a 	or	r3,r3,r4
 400f540:	18a2b03a 	or	r17,r3,r2
 400f544:	0021883a 	mov	r16,zero
 400f548:	003fa206 	br	400f3d4 <__reset+0xfb00e3d4>
 400f54c:	1890b03a 	or	r8,r3,r2
 400f550:	40017d26 	beq	r8,zero,400fb48 <__adddf3+0x7f0>
 400f554:	1011883a 	mov	r8,r2
 400f558:	1823883a 	mov	r17,r3
 400f55c:	888001cc 	andi	r2,r17,7
 400f560:	103f9e1e 	bne	r2,zero,400f3dc <__reset+0xfb00e3dc>
 400f564:	4004977a 	slli	r2,r8,29
 400f568:	8822d0fa 	srli	r17,r17,3
 400f56c:	4010d0fa 	srli	r8,r8,3
 400f570:	9007883a 	mov	r3,r18
 400f574:	1444b03a 	or	r2,r2,r17
 400f578:	0101ffc4 	movi	r4,2047
 400f57c:	81002426 	beq	r16,r4,400f610 <__adddf3+0x2b8>
 400f580:	8120703a 	and	r16,r16,r4
 400f584:	01000434 	movhi	r4,16
 400f588:	213fffc4 	addi	r4,r4,-1
 400f58c:	4110703a 	and	r8,r8,r4
 400f590:	003fa806 	br	400f434 <__reset+0xfb00e434>
 400f594:	8089c83a 	sub	r4,r16,r2
 400f598:	01005e0e 	bge	zero,r4,400f714 <__adddf3+0x3bc>
 400f59c:	10002b26 	beq	r2,zero,400f64c <__adddf3+0x2f4>
 400f5a0:	0081ffc4 	movi	r2,2047
 400f5a4:	80bf8b26 	beq	r16,r2,400f3d4 <__reset+0xfb00e3d4>
 400f5a8:	4a402034 	orhi	r9,r9,128
 400f5ac:	00800e04 	movi	r2,56
 400f5b0:	1100a40e 	bge	r2,r4,400f844 <__adddf3+0x4ec>
 400f5b4:	498cb03a 	or	r6,r9,r6
 400f5b8:	300ac03a 	cmpne	r5,r6,zero
 400f5bc:	0013883a 	mov	r9,zero
 400f5c0:	2c4b883a 	add	r5,r5,r17
 400f5c4:	2c63803a 	cmpltu	r17,r5,r17
 400f5c8:	4a11883a 	add	r8,r9,r8
 400f5cc:	8a11883a 	add	r8,r17,r8
 400f5d0:	2823883a 	mov	r17,r5
 400f5d4:	4080202c 	andhi	r2,r8,128
 400f5d8:	103fe026 	beq	r2,zero,400f55c <__reset+0xfb00e55c>
 400f5dc:	84000044 	addi	r16,r16,1
 400f5e0:	0081ffc4 	movi	r2,2047
 400f5e4:	8080d226 	beq	r16,r2,400f930 <__adddf3+0x5d8>
 400f5e8:	00bfe034 	movhi	r2,65408
 400f5ec:	10bfffc4 	addi	r2,r2,-1
 400f5f0:	4090703a 	and	r8,r8,r2
 400f5f4:	880ad07a 	srli	r5,r17,1
 400f5f8:	400897fa 	slli	r4,r8,31
 400f5fc:	88c0004c 	andi	r3,r17,1
 400f600:	28e2b03a 	or	r17,r5,r3
 400f604:	4010d07a 	srli	r8,r8,1
 400f608:	2462b03a 	or	r17,r4,r17
 400f60c:	003f7106 	br	400f3d4 <__reset+0xfb00e3d4>
 400f610:	4088b03a 	or	r4,r8,r2
 400f614:	20014526 	beq	r4,zero,400fb2c <__adddf3+0x7d4>
 400f618:	01000434 	movhi	r4,16
 400f61c:	42000234 	orhi	r8,r8,8
 400f620:	213fffc4 	addi	r4,r4,-1
 400f624:	4110703a 	and	r8,r8,r4
 400f628:	003f8206 	br	400f434 <__reset+0xfb00e434>
 400f62c:	18ffffc4 	addi	r3,r3,-1
 400f630:	1800491e 	bne	r3,zero,400f758 <__adddf3+0x400>
 400f634:	898bc83a 	sub	r5,r17,r6
 400f638:	8963803a 	cmpltu	r17,r17,r5
 400f63c:	4251c83a 	sub	r8,r8,r9
 400f640:	4451c83a 	sub	r8,r8,r17
 400f644:	2823883a 	mov	r17,r5
 400f648:	003f9f06 	br	400f4c8 <__reset+0xfb00e4c8>
 400f64c:	4984b03a 	or	r2,r9,r6
 400f650:	103f6026 	beq	r2,zero,400f3d4 <__reset+0xfb00e3d4>
 400f654:	213fffc4 	addi	r4,r4,-1
 400f658:	2000931e 	bne	r4,zero,400f8a8 <__adddf3+0x550>
 400f65c:	898d883a 	add	r6,r17,r6
 400f660:	3463803a 	cmpltu	r17,r6,r17
 400f664:	4251883a 	add	r8,r8,r9
 400f668:	8a11883a 	add	r8,r17,r8
 400f66c:	3023883a 	mov	r17,r6
 400f670:	003fd806 	br	400f5d4 <__reset+0xfb00e5d4>
 400f674:	1800541e 	bne	r3,zero,400f7c8 <__adddf3+0x470>
 400f678:	80800044 	addi	r2,r16,1
 400f67c:	1081ffcc 	andi	r2,r2,2047
 400f680:	00c00044 	movi	r3,1
 400f684:	1880a00e 	bge	r3,r2,400f908 <__adddf3+0x5b0>
 400f688:	8989c83a 	sub	r4,r17,r6
 400f68c:	8905803a 	cmpltu	r2,r17,r4
 400f690:	4267c83a 	sub	r19,r8,r9
 400f694:	98a7c83a 	sub	r19,r19,r2
 400f698:	9880202c 	andhi	r2,r19,128
 400f69c:	10006326 	beq	r2,zero,400f82c <__adddf3+0x4d4>
 400f6a0:	3463c83a 	sub	r17,r6,r17
 400f6a4:	4a07c83a 	sub	r3,r9,r8
 400f6a8:	344d803a 	cmpltu	r6,r6,r17
 400f6ac:	19a7c83a 	sub	r19,r3,r6
 400f6b0:	3825883a 	mov	r18,r7
 400f6b4:	983f8a1e 	bne	r19,zero,400f4e0 <__reset+0xfb00e4e0>
 400f6b8:	8809883a 	mov	r4,r17
 400f6bc:	4011b6c0 	call	4011b6c <__clzsi2>
 400f6c0:	10800804 	addi	r2,r2,32
 400f6c4:	10fffe04 	addi	r3,r2,-8
 400f6c8:	010007c4 	movi	r4,31
 400f6cc:	20ff890e 	bge	r4,r3,400f4f4 <__reset+0xfb00e4f4>
 400f6d0:	10bff604 	addi	r2,r2,-40
 400f6d4:	8884983a 	sll	r2,r17,r2
 400f6d8:	0023883a 	mov	r17,zero
 400f6dc:	1c3f8c0e 	bge	r3,r16,400f510 <__reset+0xfb00e510>
 400f6e0:	023fe034 	movhi	r8,65408
 400f6e4:	423fffc4 	addi	r8,r8,-1
 400f6e8:	80e1c83a 	sub	r16,r16,r3
 400f6ec:	1210703a 	and	r8,r2,r8
 400f6f0:	003f3806 	br	400f3d4 <__reset+0xfb00e3d4>
 400f6f4:	9007883a 	mov	r3,r18
 400f6f8:	0011883a 	mov	r8,zero
 400f6fc:	0005883a 	mov	r2,zero
 400f700:	003f4c06 	br	400f434 <__reset+0xfb00e434>
 400f704:	498cb03a 	or	r6,r9,r6
 400f708:	300cc03a 	cmpne	r6,r6,zero
 400f70c:	0007883a 	mov	r3,zero
 400f710:	003f6806 	br	400f4b4 <__reset+0xfb00e4b4>
 400f714:	20009c1e 	bne	r4,zero,400f988 <__adddf3+0x630>
 400f718:	80800044 	addi	r2,r16,1
 400f71c:	1141ffcc 	andi	r5,r2,2047
 400f720:	01000044 	movi	r4,1
 400f724:	2140670e 	bge	r4,r5,400f8c4 <__adddf3+0x56c>
 400f728:	0101ffc4 	movi	r4,2047
 400f72c:	11007f26 	beq	r2,r4,400f92c <__adddf3+0x5d4>
 400f730:	898d883a 	add	r6,r17,r6
 400f734:	4247883a 	add	r3,r8,r9
 400f738:	3451803a 	cmpltu	r8,r6,r17
 400f73c:	40d1883a 	add	r8,r8,r3
 400f740:	402297fa 	slli	r17,r8,31
 400f744:	300cd07a 	srli	r6,r6,1
 400f748:	4010d07a 	srli	r8,r8,1
 400f74c:	1021883a 	mov	r16,r2
 400f750:	89a2b03a 	or	r17,r17,r6
 400f754:	003f1f06 	br	400f3d4 <__reset+0xfb00e3d4>
 400f758:	0081ffc4 	movi	r2,2047
 400f75c:	80bf481e 	bne	r16,r2,400f480 <__reset+0xfb00e480>
 400f760:	003f1c06 	br	400f3d4 <__reset+0xfb00e3d4>
 400f764:	843ff844 	addi	r16,r16,-31
 400f768:	01000804 	movi	r4,32
 400f76c:	1406d83a 	srl	r3,r2,r16
 400f770:	41005026 	beq	r8,r4,400f8b4 <__adddf3+0x55c>
 400f774:	01001004 	movi	r4,64
 400f778:	2211c83a 	sub	r8,r4,r8
 400f77c:	1204983a 	sll	r2,r2,r8
 400f780:	88a2b03a 	or	r17,r17,r2
 400f784:	8822c03a 	cmpne	r17,r17,zero
 400f788:	1c62b03a 	or	r17,r3,r17
 400f78c:	0011883a 	mov	r8,zero
 400f790:	0021883a 	mov	r16,zero
 400f794:	003f7106 	br	400f55c <__reset+0xfb00e55c>
 400f798:	193ff804 	addi	r4,r3,-32
 400f79c:	00800804 	movi	r2,32
 400f7a0:	4908d83a 	srl	r4,r9,r4
 400f7a4:	18804526 	beq	r3,r2,400f8bc <__adddf3+0x564>
 400f7a8:	00801004 	movi	r2,64
 400f7ac:	10c5c83a 	sub	r2,r2,r3
 400f7b0:	4886983a 	sll	r3,r9,r2
 400f7b4:	198cb03a 	or	r6,r3,r6
 400f7b8:	300cc03a 	cmpne	r6,r6,zero
 400f7bc:	218cb03a 	or	r6,r4,r6
 400f7c0:	0007883a 	mov	r3,zero
 400f7c4:	003f3b06 	br	400f4b4 <__reset+0xfb00e4b4>
 400f7c8:	80002a26 	beq	r16,zero,400f874 <__adddf3+0x51c>
 400f7cc:	0101ffc4 	movi	r4,2047
 400f7d0:	11006826 	beq	r2,r4,400f974 <__adddf3+0x61c>
 400f7d4:	00c7c83a 	sub	r3,zero,r3
 400f7d8:	42002034 	orhi	r8,r8,128
 400f7dc:	01000e04 	movi	r4,56
 400f7e0:	20c07c16 	blt	r4,r3,400f9d4 <__adddf3+0x67c>
 400f7e4:	010007c4 	movi	r4,31
 400f7e8:	20c0da16 	blt	r4,r3,400fb54 <__adddf3+0x7fc>
 400f7ec:	01000804 	movi	r4,32
 400f7f0:	20c9c83a 	sub	r4,r4,r3
 400f7f4:	4114983a 	sll	r10,r8,r4
 400f7f8:	88cad83a 	srl	r5,r17,r3
 400f7fc:	8908983a 	sll	r4,r17,r4
 400f800:	40c6d83a 	srl	r3,r8,r3
 400f804:	5162b03a 	or	r17,r10,r5
 400f808:	2008c03a 	cmpne	r4,r4,zero
 400f80c:	8922b03a 	or	r17,r17,r4
 400f810:	3463c83a 	sub	r17,r6,r17
 400f814:	48c7c83a 	sub	r3,r9,r3
 400f818:	344d803a 	cmpltu	r6,r6,r17
 400f81c:	1991c83a 	sub	r8,r3,r6
 400f820:	1021883a 	mov	r16,r2
 400f824:	3825883a 	mov	r18,r7
 400f828:	003f2706 	br	400f4c8 <__reset+0xfb00e4c8>
 400f82c:	24d0b03a 	or	r8,r4,r19
 400f830:	40001b1e 	bne	r8,zero,400f8a0 <__adddf3+0x548>
 400f834:	0005883a 	mov	r2,zero
 400f838:	0007883a 	mov	r3,zero
 400f83c:	0021883a 	mov	r16,zero
 400f840:	003f4d06 	br	400f578 <__reset+0xfb00e578>
 400f844:	008007c4 	movi	r2,31
 400f848:	11003c16 	blt	r2,r4,400f93c <__adddf3+0x5e4>
 400f84c:	00800804 	movi	r2,32
 400f850:	1105c83a 	sub	r2,r2,r4
 400f854:	488e983a 	sll	r7,r9,r2
 400f858:	310ad83a 	srl	r5,r6,r4
 400f85c:	3084983a 	sll	r2,r6,r2
 400f860:	4912d83a 	srl	r9,r9,r4
 400f864:	394ab03a 	or	r5,r7,r5
 400f868:	1004c03a 	cmpne	r2,r2,zero
 400f86c:	288ab03a 	or	r5,r5,r2
 400f870:	003f5306 	br	400f5c0 <__reset+0xfb00e5c0>
 400f874:	4448b03a 	or	r4,r8,r17
 400f878:	20003e26 	beq	r4,zero,400f974 <__adddf3+0x61c>
 400f87c:	00c6303a 	nor	r3,zero,r3
 400f880:	18003a1e 	bne	r3,zero,400f96c <__adddf3+0x614>
 400f884:	3463c83a 	sub	r17,r6,r17
 400f888:	4a07c83a 	sub	r3,r9,r8
 400f88c:	344d803a 	cmpltu	r6,r6,r17
 400f890:	1991c83a 	sub	r8,r3,r6
 400f894:	1021883a 	mov	r16,r2
 400f898:	3825883a 	mov	r18,r7
 400f89c:	003f0a06 	br	400f4c8 <__reset+0xfb00e4c8>
 400f8a0:	2023883a 	mov	r17,r4
 400f8a4:	003f0d06 	br	400f4dc <__reset+0xfb00e4dc>
 400f8a8:	0081ffc4 	movi	r2,2047
 400f8ac:	80bf3f1e 	bne	r16,r2,400f5ac <__reset+0xfb00e5ac>
 400f8b0:	003ec806 	br	400f3d4 <__reset+0xfb00e3d4>
 400f8b4:	0005883a 	mov	r2,zero
 400f8b8:	003fb106 	br	400f780 <__reset+0xfb00e780>
 400f8bc:	0007883a 	mov	r3,zero
 400f8c0:	003fbc06 	br	400f7b4 <__reset+0xfb00e7b4>
 400f8c4:	4444b03a 	or	r2,r8,r17
 400f8c8:	8000871e 	bne	r16,zero,400fae8 <__adddf3+0x790>
 400f8cc:	1000ba26 	beq	r2,zero,400fbb8 <__adddf3+0x860>
 400f8d0:	4984b03a 	or	r2,r9,r6
 400f8d4:	103ebf26 	beq	r2,zero,400f3d4 <__reset+0xfb00e3d4>
 400f8d8:	8985883a 	add	r2,r17,r6
 400f8dc:	4247883a 	add	r3,r8,r9
 400f8e0:	1451803a 	cmpltu	r8,r2,r17
 400f8e4:	40d1883a 	add	r8,r8,r3
 400f8e8:	40c0202c 	andhi	r3,r8,128
 400f8ec:	1023883a 	mov	r17,r2
 400f8f0:	183f1a26 	beq	r3,zero,400f55c <__reset+0xfb00e55c>
 400f8f4:	00bfe034 	movhi	r2,65408
 400f8f8:	10bfffc4 	addi	r2,r2,-1
 400f8fc:	2021883a 	mov	r16,r4
 400f900:	4090703a 	and	r8,r8,r2
 400f904:	003eb306 	br	400f3d4 <__reset+0xfb00e3d4>
 400f908:	4444b03a 	or	r2,r8,r17
 400f90c:	8000291e 	bne	r16,zero,400f9b4 <__adddf3+0x65c>
 400f910:	10004b1e 	bne	r2,zero,400fa40 <__adddf3+0x6e8>
 400f914:	4990b03a 	or	r8,r9,r6
 400f918:	40008b26 	beq	r8,zero,400fb48 <__adddf3+0x7f0>
 400f91c:	4811883a 	mov	r8,r9
 400f920:	3023883a 	mov	r17,r6
 400f924:	3825883a 	mov	r18,r7
 400f928:	003eaa06 	br	400f3d4 <__reset+0xfb00e3d4>
 400f92c:	1021883a 	mov	r16,r2
 400f930:	0011883a 	mov	r8,zero
 400f934:	0005883a 	mov	r2,zero
 400f938:	003f0f06 	br	400f578 <__reset+0xfb00e578>
 400f93c:	217ff804 	addi	r5,r4,-32
 400f940:	00800804 	movi	r2,32
 400f944:	494ad83a 	srl	r5,r9,r5
 400f948:	20807d26 	beq	r4,r2,400fb40 <__adddf3+0x7e8>
 400f94c:	00801004 	movi	r2,64
 400f950:	1109c83a 	sub	r4,r2,r4
 400f954:	4912983a 	sll	r9,r9,r4
 400f958:	498cb03a 	or	r6,r9,r6
 400f95c:	300cc03a 	cmpne	r6,r6,zero
 400f960:	298ab03a 	or	r5,r5,r6
 400f964:	0013883a 	mov	r9,zero
 400f968:	003f1506 	br	400f5c0 <__reset+0xfb00e5c0>
 400f96c:	0101ffc4 	movi	r4,2047
 400f970:	113f9a1e 	bne	r2,r4,400f7dc <__reset+0xfb00e7dc>
 400f974:	4811883a 	mov	r8,r9
 400f978:	3023883a 	mov	r17,r6
 400f97c:	1021883a 	mov	r16,r2
 400f980:	3825883a 	mov	r18,r7
 400f984:	003e9306 	br	400f3d4 <__reset+0xfb00e3d4>
 400f988:	8000161e 	bne	r16,zero,400f9e4 <__adddf3+0x68c>
 400f98c:	444ab03a 	or	r5,r8,r17
 400f990:	28005126 	beq	r5,zero,400fad8 <__adddf3+0x780>
 400f994:	0108303a 	nor	r4,zero,r4
 400f998:	20004d1e 	bne	r4,zero,400fad0 <__adddf3+0x778>
 400f99c:	89a3883a 	add	r17,r17,r6
 400f9a0:	4253883a 	add	r9,r8,r9
 400f9a4:	898d803a 	cmpltu	r6,r17,r6
 400f9a8:	3251883a 	add	r8,r6,r9
 400f9ac:	1021883a 	mov	r16,r2
 400f9b0:	003f0806 	br	400f5d4 <__reset+0xfb00e5d4>
 400f9b4:	1000301e 	bne	r2,zero,400fa78 <__adddf3+0x720>
 400f9b8:	4984b03a 	or	r2,r9,r6
 400f9bc:	10007126 	beq	r2,zero,400fb84 <__adddf3+0x82c>
 400f9c0:	4811883a 	mov	r8,r9
 400f9c4:	3023883a 	mov	r17,r6
 400f9c8:	3825883a 	mov	r18,r7
 400f9cc:	0401ffc4 	movi	r16,2047
 400f9d0:	003e8006 	br	400f3d4 <__reset+0xfb00e3d4>
 400f9d4:	4462b03a 	or	r17,r8,r17
 400f9d8:	8822c03a 	cmpne	r17,r17,zero
 400f9dc:	0007883a 	mov	r3,zero
 400f9e0:	003f8b06 	br	400f810 <__reset+0xfb00e810>
 400f9e4:	0141ffc4 	movi	r5,2047
 400f9e8:	11403b26 	beq	r2,r5,400fad8 <__adddf3+0x780>
 400f9ec:	0109c83a 	sub	r4,zero,r4
 400f9f0:	42002034 	orhi	r8,r8,128
 400f9f4:	01400e04 	movi	r5,56
 400f9f8:	29006716 	blt	r5,r4,400fb98 <__adddf3+0x840>
 400f9fc:	014007c4 	movi	r5,31
 400fa00:	29007016 	blt	r5,r4,400fbc4 <__adddf3+0x86c>
 400fa04:	01400804 	movi	r5,32
 400fa08:	290bc83a 	sub	r5,r5,r4
 400fa0c:	4154983a 	sll	r10,r8,r5
 400fa10:	890ed83a 	srl	r7,r17,r4
 400fa14:	894a983a 	sll	r5,r17,r5
 400fa18:	4108d83a 	srl	r4,r8,r4
 400fa1c:	51e2b03a 	or	r17,r10,r7
 400fa20:	280ac03a 	cmpne	r5,r5,zero
 400fa24:	8962b03a 	or	r17,r17,r5
 400fa28:	89a3883a 	add	r17,r17,r6
 400fa2c:	2253883a 	add	r9,r4,r9
 400fa30:	898d803a 	cmpltu	r6,r17,r6
 400fa34:	3251883a 	add	r8,r6,r9
 400fa38:	1021883a 	mov	r16,r2
 400fa3c:	003ee506 	br	400f5d4 <__reset+0xfb00e5d4>
 400fa40:	4984b03a 	or	r2,r9,r6
 400fa44:	103e6326 	beq	r2,zero,400f3d4 <__reset+0xfb00e3d4>
 400fa48:	8987c83a 	sub	r3,r17,r6
 400fa4c:	88c9803a 	cmpltu	r4,r17,r3
 400fa50:	4245c83a 	sub	r2,r8,r9
 400fa54:	1105c83a 	sub	r2,r2,r4
 400fa58:	1100202c 	andhi	r4,r2,128
 400fa5c:	203ebb26 	beq	r4,zero,400f54c <__reset+0xfb00e54c>
 400fa60:	3463c83a 	sub	r17,r6,r17
 400fa64:	4a07c83a 	sub	r3,r9,r8
 400fa68:	344d803a 	cmpltu	r6,r6,r17
 400fa6c:	1991c83a 	sub	r8,r3,r6
 400fa70:	3825883a 	mov	r18,r7
 400fa74:	003e5706 	br	400f3d4 <__reset+0xfb00e3d4>
 400fa78:	4984b03a 	or	r2,r9,r6
 400fa7c:	10002e26 	beq	r2,zero,400fb38 <__adddf3+0x7e0>
 400fa80:	4004d0fa 	srli	r2,r8,3
 400fa84:	8822d0fa 	srli	r17,r17,3
 400fa88:	4010977a 	slli	r8,r8,29
 400fa8c:	10c0022c 	andhi	r3,r2,8
 400fa90:	4462b03a 	or	r17,r8,r17
 400fa94:	18000826 	beq	r3,zero,400fab8 <__adddf3+0x760>
 400fa98:	4808d0fa 	srli	r4,r9,3
 400fa9c:	20c0022c 	andhi	r3,r4,8
 400faa0:	1800051e 	bne	r3,zero,400fab8 <__adddf3+0x760>
 400faa4:	300cd0fa 	srli	r6,r6,3
 400faa8:	4806977a 	slli	r3,r9,29
 400faac:	2005883a 	mov	r2,r4
 400fab0:	3825883a 	mov	r18,r7
 400fab4:	19a2b03a 	or	r17,r3,r6
 400fab8:	8810d77a 	srli	r8,r17,29
 400fabc:	100490fa 	slli	r2,r2,3
 400fac0:	882290fa 	slli	r17,r17,3
 400fac4:	0401ffc4 	movi	r16,2047
 400fac8:	4090b03a 	or	r8,r8,r2
 400facc:	003e4106 	br	400f3d4 <__reset+0xfb00e3d4>
 400fad0:	0141ffc4 	movi	r5,2047
 400fad4:	117fc71e 	bne	r2,r5,400f9f4 <__reset+0xfb00e9f4>
 400fad8:	4811883a 	mov	r8,r9
 400fadc:	3023883a 	mov	r17,r6
 400fae0:	1021883a 	mov	r16,r2
 400fae4:	003e3b06 	br	400f3d4 <__reset+0xfb00e3d4>
 400fae8:	10002f26 	beq	r2,zero,400fba8 <__adddf3+0x850>
 400faec:	4984b03a 	or	r2,r9,r6
 400faf0:	10001126 	beq	r2,zero,400fb38 <__adddf3+0x7e0>
 400faf4:	4004d0fa 	srli	r2,r8,3
 400faf8:	8822d0fa 	srli	r17,r17,3
 400fafc:	4010977a 	slli	r8,r8,29
 400fb00:	10c0022c 	andhi	r3,r2,8
 400fb04:	4462b03a 	or	r17,r8,r17
 400fb08:	183feb26 	beq	r3,zero,400fab8 <__reset+0xfb00eab8>
 400fb0c:	4808d0fa 	srli	r4,r9,3
 400fb10:	20c0022c 	andhi	r3,r4,8
 400fb14:	183fe81e 	bne	r3,zero,400fab8 <__reset+0xfb00eab8>
 400fb18:	300cd0fa 	srli	r6,r6,3
 400fb1c:	4806977a 	slli	r3,r9,29
 400fb20:	2005883a 	mov	r2,r4
 400fb24:	19a2b03a 	or	r17,r3,r6
 400fb28:	003fe306 	br	400fab8 <__reset+0xfb00eab8>
 400fb2c:	0011883a 	mov	r8,zero
 400fb30:	0005883a 	mov	r2,zero
 400fb34:	003e3f06 	br	400f434 <__reset+0xfb00e434>
 400fb38:	0401ffc4 	movi	r16,2047
 400fb3c:	003e2506 	br	400f3d4 <__reset+0xfb00e3d4>
 400fb40:	0013883a 	mov	r9,zero
 400fb44:	003f8406 	br	400f958 <__reset+0xfb00e958>
 400fb48:	0005883a 	mov	r2,zero
 400fb4c:	0007883a 	mov	r3,zero
 400fb50:	003e8906 	br	400f578 <__reset+0xfb00e578>
 400fb54:	197ff804 	addi	r5,r3,-32
 400fb58:	01000804 	movi	r4,32
 400fb5c:	414ad83a 	srl	r5,r8,r5
 400fb60:	19002426 	beq	r3,r4,400fbf4 <__adddf3+0x89c>
 400fb64:	01001004 	movi	r4,64
 400fb68:	20c7c83a 	sub	r3,r4,r3
 400fb6c:	40c6983a 	sll	r3,r8,r3
 400fb70:	1c46b03a 	or	r3,r3,r17
 400fb74:	1806c03a 	cmpne	r3,r3,zero
 400fb78:	28e2b03a 	or	r17,r5,r3
 400fb7c:	0007883a 	mov	r3,zero
 400fb80:	003f2306 	br	400f810 <__reset+0xfb00e810>
 400fb84:	0007883a 	mov	r3,zero
 400fb88:	5811883a 	mov	r8,r11
 400fb8c:	00bfffc4 	movi	r2,-1
 400fb90:	0401ffc4 	movi	r16,2047
 400fb94:	003e7806 	br	400f578 <__reset+0xfb00e578>
 400fb98:	4462b03a 	or	r17,r8,r17
 400fb9c:	8822c03a 	cmpne	r17,r17,zero
 400fba0:	0009883a 	mov	r4,zero
 400fba4:	003fa006 	br	400fa28 <__reset+0xfb00ea28>
 400fba8:	4811883a 	mov	r8,r9
 400fbac:	3023883a 	mov	r17,r6
 400fbb0:	0401ffc4 	movi	r16,2047
 400fbb4:	003e0706 	br	400f3d4 <__reset+0xfb00e3d4>
 400fbb8:	4811883a 	mov	r8,r9
 400fbbc:	3023883a 	mov	r17,r6
 400fbc0:	003e0406 	br	400f3d4 <__reset+0xfb00e3d4>
 400fbc4:	21fff804 	addi	r7,r4,-32
 400fbc8:	01400804 	movi	r5,32
 400fbcc:	41ced83a 	srl	r7,r8,r7
 400fbd0:	21400a26 	beq	r4,r5,400fbfc <__adddf3+0x8a4>
 400fbd4:	01401004 	movi	r5,64
 400fbd8:	2909c83a 	sub	r4,r5,r4
 400fbdc:	4108983a 	sll	r4,r8,r4
 400fbe0:	2448b03a 	or	r4,r4,r17
 400fbe4:	2008c03a 	cmpne	r4,r4,zero
 400fbe8:	3922b03a 	or	r17,r7,r4
 400fbec:	0009883a 	mov	r4,zero
 400fbf0:	003f8d06 	br	400fa28 <__reset+0xfb00ea28>
 400fbf4:	0007883a 	mov	r3,zero
 400fbf8:	003fdd06 	br	400fb70 <__reset+0xfb00eb70>
 400fbfc:	0009883a 	mov	r4,zero
 400fc00:	003ff706 	br	400fbe0 <__reset+0xfb00ebe0>

0400fc04 <__divdf3>:
 400fc04:	defff204 	addi	sp,sp,-56
 400fc08:	dd400915 	stw	r21,36(sp)
 400fc0c:	282ad53a 	srli	r21,r5,20
 400fc10:	dd000815 	stw	r20,32(sp)
 400fc14:	2828d7fa 	srli	r20,r5,31
 400fc18:	dc000415 	stw	r16,16(sp)
 400fc1c:	04000434 	movhi	r16,16
 400fc20:	df000c15 	stw	fp,48(sp)
 400fc24:	843fffc4 	addi	r16,r16,-1
 400fc28:	dfc00d15 	stw	ra,52(sp)
 400fc2c:	ddc00b15 	stw	r23,44(sp)
 400fc30:	dd800a15 	stw	r22,40(sp)
 400fc34:	dcc00715 	stw	r19,28(sp)
 400fc38:	dc800615 	stw	r18,24(sp)
 400fc3c:	dc400515 	stw	r17,20(sp)
 400fc40:	ad41ffcc 	andi	r21,r21,2047
 400fc44:	2c20703a 	and	r16,r5,r16
 400fc48:	a7003fcc 	andi	fp,r20,255
 400fc4c:	a8006126 	beq	r21,zero,400fdd4 <__divdf3+0x1d0>
 400fc50:	0081ffc4 	movi	r2,2047
 400fc54:	2025883a 	mov	r18,r4
 400fc58:	a8803726 	beq	r21,r2,400fd38 <__divdf3+0x134>
 400fc5c:	80800434 	orhi	r2,r16,16
 400fc60:	100490fa 	slli	r2,r2,3
 400fc64:	2020d77a 	srli	r16,r4,29
 400fc68:	202490fa 	slli	r18,r4,3
 400fc6c:	ad7f0044 	addi	r21,r21,-1023
 400fc70:	80a0b03a 	or	r16,r16,r2
 400fc74:	0027883a 	mov	r19,zero
 400fc78:	0013883a 	mov	r9,zero
 400fc7c:	3804d53a 	srli	r2,r7,20
 400fc80:	382cd7fa 	srli	r22,r7,31
 400fc84:	04400434 	movhi	r17,16
 400fc88:	8c7fffc4 	addi	r17,r17,-1
 400fc8c:	1081ffcc 	andi	r2,r2,2047
 400fc90:	3011883a 	mov	r8,r6
 400fc94:	3c62703a 	and	r17,r7,r17
 400fc98:	b5c03fcc 	andi	r23,r22,255
 400fc9c:	10006c26 	beq	r2,zero,400fe50 <__divdf3+0x24c>
 400fca0:	00c1ffc4 	movi	r3,2047
 400fca4:	10c06426 	beq	r2,r3,400fe38 <__divdf3+0x234>
 400fca8:	88c00434 	orhi	r3,r17,16
 400fcac:	180690fa 	slli	r3,r3,3
 400fcb0:	3022d77a 	srli	r17,r6,29
 400fcb4:	301090fa 	slli	r8,r6,3
 400fcb8:	10bf0044 	addi	r2,r2,-1023
 400fcbc:	88e2b03a 	or	r17,r17,r3
 400fcc0:	000f883a 	mov	r7,zero
 400fcc4:	a58cf03a 	xor	r6,r20,r22
 400fcc8:	3cc8b03a 	or	r4,r7,r19
 400fccc:	a8abc83a 	sub	r21,r21,r2
 400fcd0:	008003c4 	movi	r2,15
 400fcd4:	3007883a 	mov	r3,r6
 400fcd8:	34c03fcc 	andi	r19,r6,255
 400fcdc:	11009036 	bltu	r2,r4,400ff20 <__divdf3+0x31c>
 400fce0:	200890ba 	slli	r4,r4,2
 400fce4:	00810074 	movhi	r2,1025
 400fce8:	10bf3e04 	addi	r2,r2,-776
 400fcec:	2089883a 	add	r4,r4,r2
 400fcf0:	20800017 	ldw	r2,0(r4)
 400fcf4:	1000683a 	jmp	r2
 400fcf8:	0400ff20 	cmpeqi	r16,zero,1020
 400fcfc:	0400fd70 	cmpltui	r16,zero,1013
 400fd00:	0400ff10 	cmplti	r16,zero,1020
 400fd04:	0400fd64 	muli	r16,zero,1013
 400fd08:	0400ff10 	cmplti	r16,zero,1020
 400fd0c:	0400fee4 	muli	r16,zero,1019
 400fd10:	0400ff10 	cmplti	r16,zero,1020
 400fd14:	0400fd64 	muli	r16,zero,1013
 400fd18:	0400fd70 	cmpltui	r16,zero,1013
 400fd1c:	0400fd70 	cmpltui	r16,zero,1013
 400fd20:	0400fee4 	muli	r16,zero,1019
 400fd24:	0400fd64 	muli	r16,zero,1013
 400fd28:	0400fd54 	movui	r16,1013
 400fd2c:	0400fd54 	movui	r16,1013
 400fd30:	0400fd54 	movui	r16,1013
 400fd34:	04010204 	movi	r16,1032
 400fd38:	2404b03a 	or	r2,r4,r16
 400fd3c:	1000661e 	bne	r2,zero,400fed8 <__divdf3+0x2d4>
 400fd40:	04c00204 	movi	r19,8
 400fd44:	0021883a 	mov	r16,zero
 400fd48:	0025883a 	mov	r18,zero
 400fd4c:	02400084 	movi	r9,2
 400fd50:	003fca06 	br	400fc7c <__reset+0xfb00ec7c>
 400fd54:	8023883a 	mov	r17,r16
 400fd58:	9011883a 	mov	r8,r18
 400fd5c:	e02f883a 	mov	r23,fp
 400fd60:	480f883a 	mov	r7,r9
 400fd64:	00800084 	movi	r2,2
 400fd68:	3881311e 	bne	r7,r2,4010230 <__divdf3+0x62c>
 400fd6c:	b827883a 	mov	r19,r23
 400fd70:	98c0004c 	andi	r3,r19,1
 400fd74:	0081ffc4 	movi	r2,2047
 400fd78:	000b883a 	mov	r5,zero
 400fd7c:	0025883a 	mov	r18,zero
 400fd80:	1004953a 	slli	r2,r2,20
 400fd84:	18c03fcc 	andi	r3,r3,255
 400fd88:	04400434 	movhi	r17,16
 400fd8c:	8c7fffc4 	addi	r17,r17,-1
 400fd90:	180697fa 	slli	r3,r3,31
 400fd94:	2c4a703a 	and	r5,r5,r17
 400fd98:	288ab03a 	or	r5,r5,r2
 400fd9c:	28c6b03a 	or	r3,r5,r3
 400fda0:	9005883a 	mov	r2,r18
 400fda4:	dfc00d17 	ldw	ra,52(sp)
 400fda8:	df000c17 	ldw	fp,48(sp)
 400fdac:	ddc00b17 	ldw	r23,44(sp)
 400fdb0:	dd800a17 	ldw	r22,40(sp)
 400fdb4:	dd400917 	ldw	r21,36(sp)
 400fdb8:	dd000817 	ldw	r20,32(sp)
 400fdbc:	dcc00717 	ldw	r19,28(sp)
 400fdc0:	dc800617 	ldw	r18,24(sp)
 400fdc4:	dc400517 	ldw	r17,20(sp)
 400fdc8:	dc000417 	ldw	r16,16(sp)
 400fdcc:	dec00e04 	addi	sp,sp,56
 400fdd0:	f800283a 	ret
 400fdd4:	2404b03a 	or	r2,r4,r16
 400fdd8:	2027883a 	mov	r19,r4
 400fddc:	10003926 	beq	r2,zero,400fec4 <__divdf3+0x2c0>
 400fde0:	80012e26 	beq	r16,zero,401029c <__divdf3+0x698>
 400fde4:	8009883a 	mov	r4,r16
 400fde8:	d9800315 	stw	r6,12(sp)
 400fdec:	d9c00215 	stw	r7,8(sp)
 400fdf0:	4011b6c0 	call	4011b6c <__clzsi2>
 400fdf4:	d9800317 	ldw	r6,12(sp)
 400fdf8:	d9c00217 	ldw	r7,8(sp)
 400fdfc:	113ffd44 	addi	r4,r2,-11
 400fe00:	00c00704 	movi	r3,28
 400fe04:	19012116 	blt	r3,r4,401028c <__divdf3+0x688>
 400fe08:	00c00744 	movi	r3,29
 400fe0c:	147ffe04 	addi	r17,r2,-8
 400fe10:	1907c83a 	sub	r3,r3,r4
 400fe14:	8460983a 	sll	r16,r16,r17
 400fe18:	98c6d83a 	srl	r3,r19,r3
 400fe1c:	9c64983a 	sll	r18,r19,r17
 400fe20:	1c20b03a 	or	r16,r3,r16
 400fe24:	1080fcc4 	addi	r2,r2,1011
 400fe28:	00abc83a 	sub	r21,zero,r2
 400fe2c:	0027883a 	mov	r19,zero
 400fe30:	0013883a 	mov	r9,zero
 400fe34:	003f9106 	br	400fc7c <__reset+0xfb00ec7c>
 400fe38:	3446b03a 	or	r3,r6,r17
 400fe3c:	18001f1e 	bne	r3,zero,400febc <__divdf3+0x2b8>
 400fe40:	0023883a 	mov	r17,zero
 400fe44:	0011883a 	mov	r8,zero
 400fe48:	01c00084 	movi	r7,2
 400fe4c:	003f9d06 	br	400fcc4 <__reset+0xfb00ecc4>
 400fe50:	3446b03a 	or	r3,r6,r17
 400fe54:	18001526 	beq	r3,zero,400feac <__divdf3+0x2a8>
 400fe58:	88011b26 	beq	r17,zero,40102c8 <__divdf3+0x6c4>
 400fe5c:	8809883a 	mov	r4,r17
 400fe60:	d9800315 	stw	r6,12(sp)
 400fe64:	da400115 	stw	r9,4(sp)
 400fe68:	4011b6c0 	call	4011b6c <__clzsi2>
 400fe6c:	d9800317 	ldw	r6,12(sp)
 400fe70:	da400117 	ldw	r9,4(sp)
 400fe74:	113ffd44 	addi	r4,r2,-11
 400fe78:	00c00704 	movi	r3,28
 400fe7c:	19010e16 	blt	r3,r4,40102b8 <__divdf3+0x6b4>
 400fe80:	00c00744 	movi	r3,29
 400fe84:	123ffe04 	addi	r8,r2,-8
 400fe88:	1907c83a 	sub	r3,r3,r4
 400fe8c:	8a22983a 	sll	r17,r17,r8
 400fe90:	30c6d83a 	srl	r3,r6,r3
 400fe94:	3210983a 	sll	r8,r6,r8
 400fe98:	1c62b03a 	or	r17,r3,r17
 400fe9c:	1080fcc4 	addi	r2,r2,1011
 400fea0:	0085c83a 	sub	r2,zero,r2
 400fea4:	000f883a 	mov	r7,zero
 400fea8:	003f8606 	br	400fcc4 <__reset+0xfb00ecc4>
 400feac:	0023883a 	mov	r17,zero
 400feb0:	0011883a 	mov	r8,zero
 400feb4:	01c00044 	movi	r7,1
 400feb8:	003f8206 	br	400fcc4 <__reset+0xfb00ecc4>
 400febc:	01c000c4 	movi	r7,3
 400fec0:	003f8006 	br	400fcc4 <__reset+0xfb00ecc4>
 400fec4:	04c00104 	movi	r19,4
 400fec8:	0021883a 	mov	r16,zero
 400fecc:	0025883a 	mov	r18,zero
 400fed0:	02400044 	movi	r9,1
 400fed4:	003f6906 	br	400fc7c <__reset+0xfb00ec7c>
 400fed8:	04c00304 	movi	r19,12
 400fedc:	024000c4 	movi	r9,3
 400fee0:	003f6606 	br	400fc7c <__reset+0xfb00ec7c>
 400fee4:	01400434 	movhi	r5,16
 400fee8:	0007883a 	mov	r3,zero
 400feec:	297fffc4 	addi	r5,r5,-1
 400fef0:	04bfffc4 	movi	r18,-1
 400fef4:	0081ffc4 	movi	r2,2047
 400fef8:	003fa106 	br	400fd80 <__reset+0xfb00ed80>
 400fefc:	00c00044 	movi	r3,1
 400ff00:	1887c83a 	sub	r3,r3,r2
 400ff04:	01000e04 	movi	r4,56
 400ff08:	20c1210e 	bge	r4,r3,4010390 <__divdf3+0x78c>
 400ff0c:	98c0004c 	andi	r3,r19,1
 400ff10:	0005883a 	mov	r2,zero
 400ff14:	000b883a 	mov	r5,zero
 400ff18:	0025883a 	mov	r18,zero
 400ff1c:	003f9806 	br	400fd80 <__reset+0xfb00ed80>
 400ff20:	8c00fd36 	bltu	r17,r16,4010318 <__divdf3+0x714>
 400ff24:	8440fb26 	beq	r16,r17,4010314 <__divdf3+0x710>
 400ff28:	8007883a 	mov	r3,r16
 400ff2c:	ad7fffc4 	addi	r21,r21,-1
 400ff30:	0021883a 	mov	r16,zero
 400ff34:	4004d63a 	srli	r2,r8,24
 400ff38:	8822923a 	slli	r17,r17,8
 400ff3c:	1809883a 	mov	r4,r3
 400ff40:	402c923a 	slli	r22,r8,8
 400ff44:	88b8b03a 	or	fp,r17,r2
 400ff48:	e028d43a 	srli	r20,fp,16
 400ff4c:	d8c00015 	stw	r3,0(sp)
 400ff50:	e5ffffcc 	andi	r23,fp,65535
 400ff54:	a00b883a 	mov	r5,r20
 400ff58:	400dcac0 	call	400dcac <__udivsi3>
 400ff5c:	d8c00017 	ldw	r3,0(sp)
 400ff60:	a00b883a 	mov	r5,r20
 400ff64:	d8800315 	stw	r2,12(sp)
 400ff68:	1809883a 	mov	r4,r3
 400ff6c:	400dd100 	call	400dd10 <__umodsi3>
 400ff70:	d9800317 	ldw	r6,12(sp)
 400ff74:	1006943a 	slli	r3,r2,16
 400ff78:	9004d43a 	srli	r2,r18,16
 400ff7c:	b9a3383a 	mul	r17,r23,r6
 400ff80:	10c4b03a 	or	r2,r2,r3
 400ff84:	1440062e 	bgeu	r2,r17,400ffa0 <__divdf3+0x39c>
 400ff88:	1705883a 	add	r2,r2,fp
 400ff8c:	30ffffc4 	addi	r3,r6,-1
 400ff90:	1700ee36 	bltu	r2,fp,401034c <__divdf3+0x748>
 400ff94:	1440ed2e 	bgeu	r2,r17,401034c <__divdf3+0x748>
 400ff98:	31bfff84 	addi	r6,r6,-2
 400ff9c:	1705883a 	add	r2,r2,fp
 400ffa0:	1463c83a 	sub	r17,r2,r17
 400ffa4:	a00b883a 	mov	r5,r20
 400ffa8:	8809883a 	mov	r4,r17
 400ffac:	d9800315 	stw	r6,12(sp)
 400ffb0:	400dcac0 	call	400dcac <__udivsi3>
 400ffb4:	a00b883a 	mov	r5,r20
 400ffb8:	8809883a 	mov	r4,r17
 400ffbc:	d8800215 	stw	r2,8(sp)
 400ffc0:	400dd100 	call	400dd10 <__umodsi3>
 400ffc4:	d9c00217 	ldw	r7,8(sp)
 400ffc8:	1004943a 	slli	r2,r2,16
 400ffcc:	94bfffcc 	andi	r18,r18,65535
 400ffd0:	b9d1383a 	mul	r8,r23,r7
 400ffd4:	90a4b03a 	or	r18,r18,r2
 400ffd8:	d9800317 	ldw	r6,12(sp)
 400ffdc:	9200062e 	bgeu	r18,r8,400fff8 <__divdf3+0x3f4>
 400ffe0:	9725883a 	add	r18,r18,fp
 400ffe4:	38bfffc4 	addi	r2,r7,-1
 400ffe8:	9700d636 	bltu	r18,fp,4010344 <__divdf3+0x740>
 400ffec:	9200d52e 	bgeu	r18,r8,4010344 <__divdf3+0x740>
 400fff0:	39ffff84 	addi	r7,r7,-2
 400fff4:	9725883a 	add	r18,r18,fp
 400fff8:	3004943a 	slli	r2,r6,16
 400fffc:	b012d43a 	srli	r9,r22,16
 4010000:	b1bfffcc 	andi	r6,r22,65535
 4010004:	11e2b03a 	or	r17,r2,r7
 4010008:	8806d43a 	srli	r3,r17,16
 401000c:	893fffcc 	andi	r4,r17,65535
 4010010:	218b383a 	mul	r5,r4,r6
 4010014:	30c5383a 	mul	r2,r6,r3
 4010018:	2249383a 	mul	r4,r4,r9
 401001c:	280ed43a 	srli	r7,r5,16
 4010020:	9225c83a 	sub	r18,r18,r8
 4010024:	2089883a 	add	r4,r4,r2
 4010028:	3909883a 	add	r4,r7,r4
 401002c:	1a47383a 	mul	r3,r3,r9
 4010030:	2080022e 	bgeu	r4,r2,401003c <__divdf3+0x438>
 4010034:	00800074 	movhi	r2,1
 4010038:	1887883a 	add	r3,r3,r2
 401003c:	2004d43a 	srli	r2,r4,16
 4010040:	2008943a 	slli	r4,r4,16
 4010044:	297fffcc 	andi	r5,r5,65535
 4010048:	10c7883a 	add	r3,r2,r3
 401004c:	2149883a 	add	r4,r4,r5
 4010050:	90c0a536 	bltu	r18,r3,40102e8 <__divdf3+0x6e4>
 4010054:	90c0bf26 	beq	r18,r3,4010354 <__divdf3+0x750>
 4010058:	90c7c83a 	sub	r3,r18,r3
 401005c:	810fc83a 	sub	r7,r16,r4
 4010060:	81e5803a 	cmpltu	r18,r16,r7
 4010064:	1ca5c83a 	sub	r18,r3,r18
 4010068:	e480c126 	beq	fp,r18,4010370 <__divdf3+0x76c>
 401006c:	a00b883a 	mov	r5,r20
 4010070:	9009883a 	mov	r4,r18
 4010074:	d9800315 	stw	r6,12(sp)
 4010078:	d9c00215 	stw	r7,8(sp)
 401007c:	da400115 	stw	r9,4(sp)
 4010080:	400dcac0 	call	400dcac <__udivsi3>
 4010084:	a00b883a 	mov	r5,r20
 4010088:	9009883a 	mov	r4,r18
 401008c:	d8800015 	stw	r2,0(sp)
 4010090:	400dd100 	call	400dd10 <__umodsi3>
 4010094:	d9c00217 	ldw	r7,8(sp)
 4010098:	da000017 	ldw	r8,0(sp)
 401009c:	1006943a 	slli	r3,r2,16
 40100a0:	3804d43a 	srli	r2,r7,16
 40100a4:	ba21383a 	mul	r16,r23,r8
 40100a8:	d9800317 	ldw	r6,12(sp)
 40100ac:	10c4b03a 	or	r2,r2,r3
 40100b0:	da400117 	ldw	r9,4(sp)
 40100b4:	1400062e 	bgeu	r2,r16,40100d0 <__divdf3+0x4cc>
 40100b8:	1705883a 	add	r2,r2,fp
 40100bc:	40ffffc4 	addi	r3,r8,-1
 40100c0:	1700ad36 	bltu	r2,fp,4010378 <__divdf3+0x774>
 40100c4:	1400ac2e 	bgeu	r2,r16,4010378 <__divdf3+0x774>
 40100c8:	423fff84 	addi	r8,r8,-2
 40100cc:	1705883a 	add	r2,r2,fp
 40100d0:	1421c83a 	sub	r16,r2,r16
 40100d4:	a00b883a 	mov	r5,r20
 40100d8:	8009883a 	mov	r4,r16
 40100dc:	d9800315 	stw	r6,12(sp)
 40100e0:	d9c00215 	stw	r7,8(sp)
 40100e4:	da000015 	stw	r8,0(sp)
 40100e8:	da400115 	stw	r9,4(sp)
 40100ec:	400dcac0 	call	400dcac <__udivsi3>
 40100f0:	8009883a 	mov	r4,r16
 40100f4:	a00b883a 	mov	r5,r20
 40100f8:	1025883a 	mov	r18,r2
 40100fc:	400dd100 	call	400dd10 <__umodsi3>
 4010100:	d9c00217 	ldw	r7,8(sp)
 4010104:	1004943a 	slli	r2,r2,16
 4010108:	bcaf383a 	mul	r23,r23,r18
 401010c:	393fffcc 	andi	r4,r7,65535
 4010110:	2088b03a 	or	r4,r4,r2
 4010114:	d9800317 	ldw	r6,12(sp)
 4010118:	da000017 	ldw	r8,0(sp)
 401011c:	da400117 	ldw	r9,4(sp)
 4010120:	25c0062e 	bgeu	r4,r23,401013c <__divdf3+0x538>
 4010124:	2709883a 	add	r4,r4,fp
 4010128:	90bfffc4 	addi	r2,r18,-1
 401012c:	27009436 	bltu	r4,fp,4010380 <__divdf3+0x77c>
 4010130:	25c0932e 	bgeu	r4,r23,4010380 <__divdf3+0x77c>
 4010134:	94bfff84 	addi	r18,r18,-2
 4010138:	2709883a 	add	r4,r4,fp
 401013c:	4004943a 	slli	r2,r8,16
 4010140:	25efc83a 	sub	r23,r4,r23
 4010144:	1490b03a 	or	r8,r2,r18
 4010148:	4008d43a 	srli	r4,r8,16
 401014c:	40ffffcc 	andi	r3,r8,65535
 4010150:	30c5383a 	mul	r2,r6,r3
 4010154:	1a47383a 	mul	r3,r3,r9
 4010158:	310d383a 	mul	r6,r6,r4
 401015c:	100ad43a 	srli	r5,r2,16
 4010160:	4913383a 	mul	r9,r9,r4
 4010164:	1987883a 	add	r3,r3,r6
 4010168:	28c7883a 	add	r3,r5,r3
 401016c:	1980022e 	bgeu	r3,r6,4010178 <__divdf3+0x574>
 4010170:	01000074 	movhi	r4,1
 4010174:	4913883a 	add	r9,r9,r4
 4010178:	1808d43a 	srli	r4,r3,16
 401017c:	1806943a 	slli	r3,r3,16
 4010180:	10bfffcc 	andi	r2,r2,65535
 4010184:	2253883a 	add	r9,r4,r9
 4010188:	1887883a 	add	r3,r3,r2
 401018c:	ba403836 	bltu	r23,r9,4010270 <__divdf3+0x66c>
 4010190:	ba403626 	beq	r23,r9,401026c <__divdf3+0x668>
 4010194:	42000054 	ori	r8,r8,1
 4010198:	a880ffc4 	addi	r2,r21,1023
 401019c:	00bf570e 	bge	zero,r2,400fefc <__reset+0xfb00eefc>
 40101a0:	40c001cc 	andi	r3,r8,7
 40101a4:	18000726 	beq	r3,zero,40101c4 <__divdf3+0x5c0>
 40101a8:	40c003cc 	andi	r3,r8,15
 40101ac:	01000104 	movi	r4,4
 40101b0:	19000426 	beq	r3,r4,40101c4 <__divdf3+0x5c0>
 40101b4:	4107883a 	add	r3,r8,r4
 40101b8:	1a11803a 	cmpltu	r8,r3,r8
 40101bc:	8a23883a 	add	r17,r17,r8
 40101c0:	1811883a 	mov	r8,r3
 40101c4:	88c0402c 	andhi	r3,r17,256
 40101c8:	18000426 	beq	r3,zero,40101dc <__divdf3+0x5d8>
 40101cc:	00ffc034 	movhi	r3,65280
 40101d0:	18ffffc4 	addi	r3,r3,-1
 40101d4:	a8810004 	addi	r2,r21,1024
 40101d8:	88e2703a 	and	r17,r17,r3
 40101dc:	00c1ff84 	movi	r3,2046
 40101e0:	18bee316 	blt	r3,r2,400fd70 <__reset+0xfb00ed70>
 40101e4:	8824977a 	slli	r18,r17,29
 40101e8:	4010d0fa 	srli	r8,r8,3
 40101ec:	8822927a 	slli	r17,r17,9
 40101f0:	1081ffcc 	andi	r2,r2,2047
 40101f4:	9224b03a 	or	r18,r18,r8
 40101f8:	880ad33a 	srli	r5,r17,12
 40101fc:	98c0004c 	andi	r3,r19,1
 4010200:	003edf06 	br	400fd80 <__reset+0xfb00ed80>
 4010204:	8080022c 	andhi	r2,r16,8
 4010208:	10001226 	beq	r2,zero,4010254 <__divdf3+0x650>
 401020c:	8880022c 	andhi	r2,r17,8
 4010210:	1000101e 	bne	r2,zero,4010254 <__divdf3+0x650>
 4010214:	00800434 	movhi	r2,16
 4010218:	89400234 	orhi	r5,r17,8
 401021c:	10bfffc4 	addi	r2,r2,-1
 4010220:	b007883a 	mov	r3,r22
 4010224:	288a703a 	and	r5,r5,r2
 4010228:	4025883a 	mov	r18,r8
 401022c:	003f3106 	br	400fef4 <__reset+0xfb00eef4>
 4010230:	008000c4 	movi	r2,3
 4010234:	3880a626 	beq	r7,r2,40104d0 <__divdf3+0x8cc>
 4010238:	00800044 	movi	r2,1
 401023c:	3880521e 	bne	r7,r2,4010388 <__divdf3+0x784>
 4010240:	b807883a 	mov	r3,r23
 4010244:	0005883a 	mov	r2,zero
 4010248:	000b883a 	mov	r5,zero
 401024c:	0025883a 	mov	r18,zero
 4010250:	003ecb06 	br	400fd80 <__reset+0xfb00ed80>
 4010254:	00800434 	movhi	r2,16
 4010258:	81400234 	orhi	r5,r16,8
 401025c:	10bfffc4 	addi	r2,r2,-1
 4010260:	a007883a 	mov	r3,r20
 4010264:	288a703a 	and	r5,r5,r2
 4010268:	003f2206 	br	400fef4 <__reset+0xfb00eef4>
 401026c:	183fca26 	beq	r3,zero,4010198 <__reset+0xfb00f198>
 4010270:	e5ef883a 	add	r23,fp,r23
 4010274:	40bfffc4 	addi	r2,r8,-1
 4010278:	bf00392e 	bgeu	r23,fp,4010360 <__divdf3+0x75c>
 401027c:	1011883a 	mov	r8,r2
 4010280:	ba7fc41e 	bne	r23,r9,4010194 <__reset+0xfb00f194>
 4010284:	b0ffc31e 	bne	r22,r3,4010194 <__reset+0xfb00f194>
 4010288:	003fc306 	br	4010198 <__reset+0xfb00f198>
 401028c:	143ff604 	addi	r16,r2,-40
 4010290:	9c20983a 	sll	r16,r19,r16
 4010294:	0025883a 	mov	r18,zero
 4010298:	003ee206 	br	400fe24 <__reset+0xfb00ee24>
 401029c:	d9800315 	stw	r6,12(sp)
 40102a0:	d9c00215 	stw	r7,8(sp)
 40102a4:	4011b6c0 	call	4011b6c <__clzsi2>
 40102a8:	10800804 	addi	r2,r2,32
 40102ac:	d9c00217 	ldw	r7,8(sp)
 40102b0:	d9800317 	ldw	r6,12(sp)
 40102b4:	003ed106 	br	400fdfc <__reset+0xfb00edfc>
 40102b8:	147ff604 	addi	r17,r2,-40
 40102bc:	3462983a 	sll	r17,r6,r17
 40102c0:	0011883a 	mov	r8,zero
 40102c4:	003ef506 	br	400fe9c <__reset+0xfb00ee9c>
 40102c8:	3009883a 	mov	r4,r6
 40102cc:	d9800315 	stw	r6,12(sp)
 40102d0:	da400115 	stw	r9,4(sp)
 40102d4:	4011b6c0 	call	4011b6c <__clzsi2>
 40102d8:	10800804 	addi	r2,r2,32
 40102dc:	da400117 	ldw	r9,4(sp)
 40102e0:	d9800317 	ldw	r6,12(sp)
 40102e4:	003ee306 	br	400fe74 <__reset+0xfb00ee74>
 40102e8:	85a1883a 	add	r16,r16,r22
 40102ec:	8585803a 	cmpltu	r2,r16,r22
 40102f0:	1705883a 	add	r2,r2,fp
 40102f4:	14a5883a 	add	r18,r2,r18
 40102f8:	88bfffc4 	addi	r2,r17,-1
 40102fc:	e4800c2e 	bgeu	fp,r18,4010330 <__divdf3+0x72c>
 4010300:	90c03e36 	bltu	r18,r3,40103fc <__divdf3+0x7f8>
 4010304:	1c806926 	beq	r3,r18,40104ac <__divdf3+0x8a8>
 4010308:	90c7c83a 	sub	r3,r18,r3
 401030c:	1023883a 	mov	r17,r2
 4010310:	003f5206 	br	401005c <__reset+0xfb00f05c>
 4010314:	923f0436 	bltu	r18,r8,400ff28 <__reset+0xfb00ef28>
 4010318:	800897fa 	slli	r4,r16,31
 401031c:	9004d07a 	srli	r2,r18,1
 4010320:	8006d07a 	srli	r3,r16,1
 4010324:	902097fa 	slli	r16,r18,31
 4010328:	20a4b03a 	or	r18,r4,r2
 401032c:	003f0106 	br	400ff34 <__reset+0xfb00ef34>
 4010330:	e4bff51e 	bne	fp,r18,4010308 <__reset+0xfb00f308>
 4010334:	85bff22e 	bgeu	r16,r22,4010300 <__reset+0xfb00f300>
 4010338:	e0c7c83a 	sub	r3,fp,r3
 401033c:	1023883a 	mov	r17,r2
 4010340:	003f4606 	br	401005c <__reset+0xfb00f05c>
 4010344:	100f883a 	mov	r7,r2
 4010348:	003f2b06 	br	400fff8 <__reset+0xfb00eff8>
 401034c:	180d883a 	mov	r6,r3
 4010350:	003f1306 	br	400ffa0 <__reset+0xfb00efa0>
 4010354:	813fe436 	bltu	r16,r4,40102e8 <__reset+0xfb00f2e8>
 4010358:	0007883a 	mov	r3,zero
 401035c:	003f3f06 	br	401005c <__reset+0xfb00f05c>
 4010360:	ba402c36 	bltu	r23,r9,4010414 <__divdf3+0x810>
 4010364:	4dc05426 	beq	r9,r23,40104b8 <__divdf3+0x8b4>
 4010368:	1011883a 	mov	r8,r2
 401036c:	003f8906 	br	4010194 <__reset+0xfb00f194>
 4010370:	023fffc4 	movi	r8,-1
 4010374:	003f8806 	br	4010198 <__reset+0xfb00f198>
 4010378:	1811883a 	mov	r8,r3
 401037c:	003f5406 	br	40100d0 <__reset+0xfb00f0d0>
 4010380:	1025883a 	mov	r18,r2
 4010384:	003f6d06 	br	401013c <__reset+0xfb00f13c>
 4010388:	b827883a 	mov	r19,r23
 401038c:	003f8206 	br	4010198 <__reset+0xfb00f198>
 4010390:	010007c4 	movi	r4,31
 4010394:	20c02616 	blt	r4,r3,4010430 <__divdf3+0x82c>
 4010398:	00800804 	movi	r2,32
 401039c:	10c5c83a 	sub	r2,r2,r3
 40103a0:	888a983a 	sll	r5,r17,r2
 40103a4:	40c8d83a 	srl	r4,r8,r3
 40103a8:	4084983a 	sll	r2,r8,r2
 40103ac:	88e2d83a 	srl	r17,r17,r3
 40103b0:	2906b03a 	or	r3,r5,r4
 40103b4:	1004c03a 	cmpne	r2,r2,zero
 40103b8:	1886b03a 	or	r3,r3,r2
 40103bc:	188001cc 	andi	r2,r3,7
 40103c0:	10000726 	beq	r2,zero,40103e0 <__divdf3+0x7dc>
 40103c4:	188003cc 	andi	r2,r3,15
 40103c8:	01000104 	movi	r4,4
 40103cc:	11000426 	beq	r2,r4,40103e0 <__divdf3+0x7dc>
 40103d0:	1805883a 	mov	r2,r3
 40103d4:	10c00104 	addi	r3,r2,4
 40103d8:	1885803a 	cmpltu	r2,r3,r2
 40103dc:	88a3883a 	add	r17,r17,r2
 40103e0:	8880202c 	andhi	r2,r17,128
 40103e4:	10002726 	beq	r2,zero,4010484 <__divdf3+0x880>
 40103e8:	98c0004c 	andi	r3,r19,1
 40103ec:	00800044 	movi	r2,1
 40103f0:	000b883a 	mov	r5,zero
 40103f4:	0025883a 	mov	r18,zero
 40103f8:	003e6106 	br	400fd80 <__reset+0xfb00ed80>
 40103fc:	85a1883a 	add	r16,r16,r22
 4010400:	8585803a 	cmpltu	r2,r16,r22
 4010404:	1705883a 	add	r2,r2,fp
 4010408:	14a5883a 	add	r18,r2,r18
 401040c:	8c7fff84 	addi	r17,r17,-2
 4010410:	003f1106 	br	4010058 <__reset+0xfb00f058>
 4010414:	b589883a 	add	r4,r22,r22
 4010418:	25ad803a 	cmpltu	r22,r4,r22
 401041c:	b739883a 	add	fp,r22,fp
 4010420:	40bfff84 	addi	r2,r8,-2
 4010424:	bf2f883a 	add	r23,r23,fp
 4010428:	202d883a 	mov	r22,r4
 401042c:	003f9306 	br	401027c <__reset+0xfb00f27c>
 4010430:	013ff844 	movi	r4,-31
 4010434:	2085c83a 	sub	r2,r4,r2
 4010438:	8888d83a 	srl	r4,r17,r2
 401043c:	00800804 	movi	r2,32
 4010440:	18802126 	beq	r3,r2,40104c8 <__divdf3+0x8c4>
 4010444:	00801004 	movi	r2,64
 4010448:	10c5c83a 	sub	r2,r2,r3
 401044c:	8884983a 	sll	r2,r17,r2
 4010450:	1204b03a 	or	r2,r2,r8
 4010454:	1004c03a 	cmpne	r2,r2,zero
 4010458:	2084b03a 	or	r2,r4,r2
 401045c:	144001cc 	andi	r17,r2,7
 4010460:	88000d1e 	bne	r17,zero,4010498 <__divdf3+0x894>
 4010464:	000b883a 	mov	r5,zero
 4010468:	1024d0fa 	srli	r18,r2,3
 401046c:	98c0004c 	andi	r3,r19,1
 4010470:	0005883a 	mov	r2,zero
 4010474:	9464b03a 	or	r18,r18,r17
 4010478:	003e4106 	br	400fd80 <__reset+0xfb00ed80>
 401047c:	1007883a 	mov	r3,r2
 4010480:	0023883a 	mov	r17,zero
 4010484:	880a927a 	slli	r5,r17,9
 4010488:	1805883a 	mov	r2,r3
 401048c:	8822977a 	slli	r17,r17,29
 4010490:	280ad33a 	srli	r5,r5,12
 4010494:	003ff406 	br	4010468 <__reset+0xfb00f468>
 4010498:	10c003cc 	andi	r3,r2,15
 401049c:	01000104 	movi	r4,4
 40104a0:	193ff626 	beq	r3,r4,401047c <__reset+0xfb00f47c>
 40104a4:	0023883a 	mov	r17,zero
 40104a8:	003fca06 	br	40103d4 <__reset+0xfb00f3d4>
 40104ac:	813fd336 	bltu	r16,r4,40103fc <__reset+0xfb00f3fc>
 40104b0:	1023883a 	mov	r17,r2
 40104b4:	003fa806 	br	4010358 <__reset+0xfb00f358>
 40104b8:	b0ffd636 	bltu	r22,r3,4010414 <__reset+0xfb00f414>
 40104bc:	1011883a 	mov	r8,r2
 40104c0:	b0ff341e 	bne	r22,r3,4010194 <__reset+0xfb00f194>
 40104c4:	003f3406 	br	4010198 <__reset+0xfb00f198>
 40104c8:	0005883a 	mov	r2,zero
 40104cc:	003fe006 	br	4010450 <__reset+0xfb00f450>
 40104d0:	00800434 	movhi	r2,16
 40104d4:	89400234 	orhi	r5,r17,8
 40104d8:	10bfffc4 	addi	r2,r2,-1
 40104dc:	b807883a 	mov	r3,r23
 40104e0:	288a703a 	and	r5,r5,r2
 40104e4:	4025883a 	mov	r18,r8
 40104e8:	003e8206 	br	400fef4 <__reset+0xfb00eef4>

040104ec <__eqdf2>:
 40104ec:	2804d53a 	srli	r2,r5,20
 40104f0:	3806d53a 	srli	r3,r7,20
 40104f4:	02000434 	movhi	r8,16
 40104f8:	423fffc4 	addi	r8,r8,-1
 40104fc:	1081ffcc 	andi	r2,r2,2047
 4010500:	0281ffc4 	movi	r10,2047
 4010504:	2a12703a 	and	r9,r5,r8
 4010508:	18c1ffcc 	andi	r3,r3,2047
 401050c:	3a10703a 	and	r8,r7,r8
 4010510:	280ad7fa 	srli	r5,r5,31
 4010514:	380ed7fa 	srli	r7,r7,31
 4010518:	12801026 	beq	r2,r10,401055c <__eqdf2+0x70>
 401051c:	0281ffc4 	movi	r10,2047
 4010520:	1a800a26 	beq	r3,r10,401054c <__eqdf2+0x60>
 4010524:	10c00226 	beq	r2,r3,4010530 <__eqdf2+0x44>
 4010528:	00800044 	movi	r2,1
 401052c:	f800283a 	ret
 4010530:	4a3ffd1e 	bne	r9,r8,4010528 <__reset+0xfb00f528>
 4010534:	21bffc1e 	bne	r4,r6,4010528 <__reset+0xfb00f528>
 4010538:	29c00c26 	beq	r5,r7,401056c <__eqdf2+0x80>
 401053c:	103ffa1e 	bne	r2,zero,4010528 <__reset+0xfb00f528>
 4010540:	2244b03a 	or	r2,r4,r9
 4010544:	1004c03a 	cmpne	r2,r2,zero
 4010548:	f800283a 	ret
 401054c:	3214b03a 	or	r10,r6,r8
 4010550:	503ff426 	beq	r10,zero,4010524 <__reset+0xfb00f524>
 4010554:	00800044 	movi	r2,1
 4010558:	f800283a 	ret
 401055c:	2254b03a 	or	r10,r4,r9
 4010560:	503fee26 	beq	r10,zero,401051c <__reset+0xfb00f51c>
 4010564:	00800044 	movi	r2,1
 4010568:	f800283a 	ret
 401056c:	0005883a 	mov	r2,zero
 4010570:	f800283a 	ret

04010574 <__gedf2>:
 4010574:	2804d53a 	srli	r2,r5,20
 4010578:	3806d53a 	srli	r3,r7,20
 401057c:	02000434 	movhi	r8,16
 4010580:	423fffc4 	addi	r8,r8,-1
 4010584:	1081ffcc 	andi	r2,r2,2047
 4010588:	0241ffc4 	movi	r9,2047
 401058c:	2a14703a 	and	r10,r5,r8
 4010590:	18c1ffcc 	andi	r3,r3,2047
 4010594:	3a10703a 	and	r8,r7,r8
 4010598:	280ad7fa 	srli	r5,r5,31
 401059c:	380ed7fa 	srli	r7,r7,31
 40105a0:	12401d26 	beq	r2,r9,4010618 <__gedf2+0xa4>
 40105a4:	0241ffc4 	movi	r9,2047
 40105a8:	1a401226 	beq	r3,r9,40105f4 <__gedf2+0x80>
 40105ac:	1000081e 	bne	r2,zero,40105d0 <__gedf2+0x5c>
 40105b0:	2296b03a 	or	r11,r4,r10
 40105b4:	5813003a 	cmpeq	r9,r11,zero
 40105b8:	1800091e 	bne	r3,zero,40105e0 <__gedf2+0x6c>
 40105bc:	3218b03a 	or	r12,r6,r8
 40105c0:	6000071e 	bne	r12,zero,40105e0 <__gedf2+0x6c>
 40105c4:	0005883a 	mov	r2,zero
 40105c8:	5800101e 	bne	r11,zero,401060c <__gedf2+0x98>
 40105cc:	f800283a 	ret
 40105d0:	18000c1e 	bne	r3,zero,4010604 <__gedf2+0x90>
 40105d4:	3212b03a 	or	r9,r6,r8
 40105d8:	48000c26 	beq	r9,zero,401060c <__gedf2+0x98>
 40105dc:	0013883a 	mov	r9,zero
 40105e0:	39c03fcc 	andi	r7,r7,255
 40105e4:	48000826 	beq	r9,zero,4010608 <__gedf2+0x94>
 40105e8:	38000926 	beq	r7,zero,4010610 <__gedf2+0x9c>
 40105ec:	00800044 	movi	r2,1
 40105f0:	f800283a 	ret
 40105f4:	3212b03a 	or	r9,r6,r8
 40105f8:	483fec26 	beq	r9,zero,40105ac <__reset+0xfb00f5ac>
 40105fc:	00bfff84 	movi	r2,-2
 4010600:	f800283a 	ret
 4010604:	39c03fcc 	andi	r7,r7,255
 4010608:	29c00626 	beq	r5,r7,4010624 <__gedf2+0xb0>
 401060c:	283ff726 	beq	r5,zero,40105ec <__reset+0xfb00f5ec>
 4010610:	00bfffc4 	movi	r2,-1
 4010614:	f800283a 	ret
 4010618:	2292b03a 	or	r9,r4,r10
 401061c:	483fe126 	beq	r9,zero,40105a4 <__reset+0xfb00f5a4>
 4010620:	003ff606 	br	40105fc <__reset+0xfb00f5fc>
 4010624:	18bff916 	blt	r3,r2,401060c <__reset+0xfb00f60c>
 4010628:	10c00316 	blt	r2,r3,4010638 <__gedf2+0xc4>
 401062c:	42bff736 	bltu	r8,r10,401060c <__reset+0xfb00f60c>
 4010630:	52000326 	beq	r10,r8,4010640 <__gedf2+0xcc>
 4010634:	5200042e 	bgeu	r10,r8,4010648 <__gedf2+0xd4>
 4010638:	283fec1e 	bne	r5,zero,40105ec <__reset+0xfb00f5ec>
 401063c:	003ff406 	br	4010610 <__reset+0xfb00f610>
 4010640:	313ff236 	bltu	r6,r4,401060c <__reset+0xfb00f60c>
 4010644:	21bffc36 	bltu	r4,r6,4010638 <__reset+0xfb00f638>
 4010648:	0005883a 	mov	r2,zero
 401064c:	f800283a 	ret

04010650 <__ledf2>:
 4010650:	2804d53a 	srli	r2,r5,20
 4010654:	3810d53a 	srli	r8,r7,20
 4010658:	00c00434 	movhi	r3,16
 401065c:	18ffffc4 	addi	r3,r3,-1
 4010660:	1081ffcc 	andi	r2,r2,2047
 4010664:	0241ffc4 	movi	r9,2047
 4010668:	28d4703a 	and	r10,r5,r3
 401066c:	4201ffcc 	andi	r8,r8,2047
 4010670:	38c6703a 	and	r3,r7,r3
 4010674:	280ad7fa 	srli	r5,r5,31
 4010678:	380ed7fa 	srli	r7,r7,31
 401067c:	12401f26 	beq	r2,r9,40106fc <__ledf2+0xac>
 4010680:	0241ffc4 	movi	r9,2047
 4010684:	42401426 	beq	r8,r9,40106d8 <__ledf2+0x88>
 4010688:	1000091e 	bne	r2,zero,40106b0 <__ledf2+0x60>
 401068c:	2296b03a 	or	r11,r4,r10
 4010690:	5813003a 	cmpeq	r9,r11,zero
 4010694:	29403fcc 	andi	r5,r5,255
 4010698:	40000a1e 	bne	r8,zero,40106c4 <__ledf2+0x74>
 401069c:	30d8b03a 	or	r12,r6,r3
 40106a0:	6000081e 	bne	r12,zero,40106c4 <__ledf2+0x74>
 40106a4:	0005883a 	mov	r2,zero
 40106a8:	5800111e 	bne	r11,zero,40106f0 <__ledf2+0xa0>
 40106ac:	f800283a 	ret
 40106b0:	29403fcc 	andi	r5,r5,255
 40106b4:	40000c1e 	bne	r8,zero,40106e8 <__ledf2+0x98>
 40106b8:	30d2b03a 	or	r9,r6,r3
 40106bc:	48000c26 	beq	r9,zero,40106f0 <__ledf2+0xa0>
 40106c0:	0013883a 	mov	r9,zero
 40106c4:	39c03fcc 	andi	r7,r7,255
 40106c8:	48000826 	beq	r9,zero,40106ec <__ledf2+0x9c>
 40106cc:	38001126 	beq	r7,zero,4010714 <__ledf2+0xc4>
 40106d0:	00800044 	movi	r2,1
 40106d4:	f800283a 	ret
 40106d8:	30d2b03a 	or	r9,r6,r3
 40106dc:	483fea26 	beq	r9,zero,4010688 <__reset+0xfb00f688>
 40106e0:	00800084 	movi	r2,2
 40106e4:	f800283a 	ret
 40106e8:	39c03fcc 	andi	r7,r7,255
 40106ec:	39400726 	beq	r7,r5,401070c <__ledf2+0xbc>
 40106f0:	2800081e 	bne	r5,zero,4010714 <__ledf2+0xc4>
 40106f4:	00800044 	movi	r2,1
 40106f8:	f800283a 	ret
 40106fc:	2292b03a 	or	r9,r4,r10
 4010700:	483fdf26 	beq	r9,zero,4010680 <__reset+0xfb00f680>
 4010704:	00800084 	movi	r2,2
 4010708:	f800283a 	ret
 401070c:	4080030e 	bge	r8,r2,401071c <__ledf2+0xcc>
 4010710:	383fef26 	beq	r7,zero,40106d0 <__reset+0xfb00f6d0>
 4010714:	00bfffc4 	movi	r2,-1
 4010718:	f800283a 	ret
 401071c:	123feb16 	blt	r2,r8,40106cc <__reset+0xfb00f6cc>
 4010720:	1abff336 	bltu	r3,r10,40106f0 <__reset+0xfb00f6f0>
 4010724:	50c00326 	beq	r10,r3,4010734 <__ledf2+0xe4>
 4010728:	50c0042e 	bgeu	r10,r3,401073c <__ledf2+0xec>
 401072c:	283fe81e 	bne	r5,zero,40106d0 <__reset+0xfb00f6d0>
 4010730:	003ff806 	br	4010714 <__reset+0xfb00f714>
 4010734:	313fee36 	bltu	r6,r4,40106f0 <__reset+0xfb00f6f0>
 4010738:	21bffc36 	bltu	r4,r6,401072c <__reset+0xfb00f72c>
 401073c:	0005883a 	mov	r2,zero
 4010740:	f800283a 	ret

04010744 <__muldf3>:
 4010744:	defff304 	addi	sp,sp,-52
 4010748:	2804d53a 	srli	r2,r5,20
 401074c:	dd800915 	stw	r22,36(sp)
 4010750:	282cd7fa 	srli	r22,r5,31
 4010754:	dc000315 	stw	r16,12(sp)
 4010758:	04000434 	movhi	r16,16
 401075c:	dd400815 	stw	r21,32(sp)
 4010760:	dc800515 	stw	r18,20(sp)
 4010764:	843fffc4 	addi	r16,r16,-1
 4010768:	dfc00c15 	stw	ra,48(sp)
 401076c:	df000b15 	stw	fp,44(sp)
 4010770:	ddc00a15 	stw	r23,40(sp)
 4010774:	dd000715 	stw	r20,28(sp)
 4010778:	dcc00615 	stw	r19,24(sp)
 401077c:	dc400415 	stw	r17,16(sp)
 4010780:	1481ffcc 	andi	r18,r2,2047
 4010784:	2c20703a 	and	r16,r5,r16
 4010788:	b02b883a 	mov	r21,r22
 401078c:	b2403fcc 	andi	r9,r22,255
 4010790:	90006026 	beq	r18,zero,4010914 <__muldf3+0x1d0>
 4010794:	0081ffc4 	movi	r2,2047
 4010798:	2029883a 	mov	r20,r4
 401079c:	90803626 	beq	r18,r2,4010878 <__muldf3+0x134>
 40107a0:	80800434 	orhi	r2,r16,16
 40107a4:	100490fa 	slli	r2,r2,3
 40107a8:	2020d77a 	srli	r16,r4,29
 40107ac:	202890fa 	slli	r20,r4,3
 40107b0:	94bf0044 	addi	r18,r18,-1023
 40107b4:	80a0b03a 	or	r16,r16,r2
 40107b8:	0027883a 	mov	r19,zero
 40107bc:	0039883a 	mov	fp,zero
 40107c0:	3804d53a 	srli	r2,r7,20
 40107c4:	382ed7fa 	srli	r23,r7,31
 40107c8:	04400434 	movhi	r17,16
 40107cc:	8c7fffc4 	addi	r17,r17,-1
 40107d0:	1081ffcc 	andi	r2,r2,2047
 40107d4:	3011883a 	mov	r8,r6
 40107d8:	3c62703a 	and	r17,r7,r17
 40107dc:	ba803fcc 	andi	r10,r23,255
 40107e0:	10006d26 	beq	r2,zero,4010998 <__muldf3+0x254>
 40107e4:	00c1ffc4 	movi	r3,2047
 40107e8:	10c06526 	beq	r2,r3,4010980 <__muldf3+0x23c>
 40107ec:	88c00434 	orhi	r3,r17,16
 40107f0:	180690fa 	slli	r3,r3,3
 40107f4:	3022d77a 	srli	r17,r6,29
 40107f8:	301090fa 	slli	r8,r6,3
 40107fc:	10bf0044 	addi	r2,r2,-1023
 4010800:	88e2b03a 	or	r17,r17,r3
 4010804:	000b883a 	mov	r5,zero
 4010808:	9085883a 	add	r2,r18,r2
 401080c:	2cc8b03a 	or	r4,r5,r19
 4010810:	00c003c4 	movi	r3,15
 4010814:	bdacf03a 	xor	r22,r23,r22
 4010818:	12c00044 	addi	r11,r2,1
 401081c:	19009936 	bltu	r3,r4,4010a84 <__muldf3+0x340>
 4010820:	200890ba 	slli	r4,r4,2
 4010824:	00c10074 	movhi	r3,1025
 4010828:	18c20e04 	addi	r3,r3,2104
 401082c:	20c9883a 	add	r4,r4,r3
 4010830:	20c00017 	ldw	r3,0(r4)
 4010834:	1800683a 	jmp	r3
 4010838:	04010a84 	movi	r16,1066
 401083c:	04010898 	cmpnei	r16,zero,1058
 4010840:	04010898 	cmpnei	r16,zero,1058
 4010844:	04010894 	movui	r16,1058
 4010848:	04010a60 	cmpeqi	r16,zero,1065
 401084c:	04010a60 	cmpeqi	r16,zero,1065
 4010850:	04010a48 	cmpgei	r16,zero,1065
 4010854:	04010894 	movui	r16,1058
 4010858:	04010a60 	cmpeqi	r16,zero,1065
 401085c:	04010a48 	cmpgei	r16,zero,1065
 4010860:	04010a60 	cmpeqi	r16,zero,1065
 4010864:	04010894 	movui	r16,1058
 4010868:	04010a70 	cmpltui	r16,zero,1065
 401086c:	04010a70 	cmpltui	r16,zero,1065
 4010870:	04010a70 	cmpltui	r16,zero,1065
 4010874:	04010c8c 	andi	r16,zero,1074
 4010878:	2404b03a 	or	r2,r4,r16
 401087c:	10006f1e 	bne	r2,zero,4010a3c <__muldf3+0x2f8>
 4010880:	04c00204 	movi	r19,8
 4010884:	0021883a 	mov	r16,zero
 4010888:	0029883a 	mov	r20,zero
 401088c:	07000084 	movi	fp,2
 4010890:	003fcb06 	br	40107c0 <__reset+0xfb00f7c0>
 4010894:	502d883a 	mov	r22,r10
 4010898:	00800084 	movi	r2,2
 401089c:	28805726 	beq	r5,r2,40109fc <__muldf3+0x2b8>
 40108a0:	008000c4 	movi	r2,3
 40108a4:	28816626 	beq	r5,r2,4010e40 <__muldf3+0x6fc>
 40108a8:	00800044 	movi	r2,1
 40108ac:	2881411e 	bne	r5,r2,4010db4 <__muldf3+0x670>
 40108b0:	b02b883a 	mov	r21,r22
 40108b4:	0005883a 	mov	r2,zero
 40108b8:	000b883a 	mov	r5,zero
 40108bc:	0029883a 	mov	r20,zero
 40108c0:	1004953a 	slli	r2,r2,20
 40108c4:	a8c03fcc 	andi	r3,r21,255
 40108c8:	04400434 	movhi	r17,16
 40108cc:	8c7fffc4 	addi	r17,r17,-1
 40108d0:	180697fa 	slli	r3,r3,31
 40108d4:	2c4a703a 	and	r5,r5,r17
 40108d8:	288ab03a 	or	r5,r5,r2
 40108dc:	28c6b03a 	or	r3,r5,r3
 40108e0:	a005883a 	mov	r2,r20
 40108e4:	dfc00c17 	ldw	ra,48(sp)
 40108e8:	df000b17 	ldw	fp,44(sp)
 40108ec:	ddc00a17 	ldw	r23,40(sp)
 40108f0:	dd800917 	ldw	r22,36(sp)
 40108f4:	dd400817 	ldw	r21,32(sp)
 40108f8:	dd000717 	ldw	r20,28(sp)
 40108fc:	dcc00617 	ldw	r19,24(sp)
 4010900:	dc800517 	ldw	r18,20(sp)
 4010904:	dc400417 	ldw	r17,16(sp)
 4010908:	dc000317 	ldw	r16,12(sp)
 401090c:	dec00d04 	addi	sp,sp,52
 4010910:	f800283a 	ret
 4010914:	2404b03a 	or	r2,r4,r16
 4010918:	2027883a 	mov	r19,r4
 401091c:	10004226 	beq	r2,zero,4010a28 <__muldf3+0x2e4>
 4010920:	8000fc26 	beq	r16,zero,4010d14 <__muldf3+0x5d0>
 4010924:	8009883a 	mov	r4,r16
 4010928:	d9800215 	stw	r6,8(sp)
 401092c:	d9c00015 	stw	r7,0(sp)
 4010930:	da400115 	stw	r9,4(sp)
 4010934:	4011b6c0 	call	4011b6c <__clzsi2>
 4010938:	d9800217 	ldw	r6,8(sp)
 401093c:	d9c00017 	ldw	r7,0(sp)
 4010940:	da400117 	ldw	r9,4(sp)
 4010944:	113ffd44 	addi	r4,r2,-11
 4010948:	00c00704 	movi	r3,28
 401094c:	1900ed16 	blt	r3,r4,4010d04 <__muldf3+0x5c0>
 4010950:	00c00744 	movi	r3,29
 4010954:	147ffe04 	addi	r17,r2,-8
 4010958:	1907c83a 	sub	r3,r3,r4
 401095c:	8460983a 	sll	r16,r16,r17
 4010960:	98c6d83a 	srl	r3,r19,r3
 4010964:	9c68983a 	sll	r20,r19,r17
 4010968:	1c20b03a 	or	r16,r3,r16
 401096c:	1080fcc4 	addi	r2,r2,1011
 4010970:	00a5c83a 	sub	r18,zero,r2
 4010974:	0027883a 	mov	r19,zero
 4010978:	0039883a 	mov	fp,zero
 401097c:	003f9006 	br	40107c0 <__reset+0xfb00f7c0>
 4010980:	3446b03a 	or	r3,r6,r17
 4010984:	1800261e 	bne	r3,zero,4010a20 <__muldf3+0x2dc>
 4010988:	0023883a 	mov	r17,zero
 401098c:	0011883a 	mov	r8,zero
 4010990:	01400084 	movi	r5,2
 4010994:	003f9c06 	br	4010808 <__reset+0xfb00f808>
 4010998:	3446b03a 	or	r3,r6,r17
 401099c:	18001c26 	beq	r3,zero,4010a10 <__muldf3+0x2cc>
 40109a0:	8800ce26 	beq	r17,zero,4010cdc <__muldf3+0x598>
 40109a4:	8809883a 	mov	r4,r17
 40109a8:	d9800215 	stw	r6,8(sp)
 40109ac:	da400115 	stw	r9,4(sp)
 40109b0:	da800015 	stw	r10,0(sp)
 40109b4:	4011b6c0 	call	4011b6c <__clzsi2>
 40109b8:	d9800217 	ldw	r6,8(sp)
 40109bc:	da400117 	ldw	r9,4(sp)
 40109c0:	da800017 	ldw	r10,0(sp)
 40109c4:	113ffd44 	addi	r4,r2,-11
 40109c8:	00c00704 	movi	r3,28
 40109cc:	1900bf16 	blt	r3,r4,4010ccc <__muldf3+0x588>
 40109d0:	00c00744 	movi	r3,29
 40109d4:	123ffe04 	addi	r8,r2,-8
 40109d8:	1907c83a 	sub	r3,r3,r4
 40109dc:	8a22983a 	sll	r17,r17,r8
 40109e0:	30c6d83a 	srl	r3,r6,r3
 40109e4:	3210983a 	sll	r8,r6,r8
 40109e8:	1c62b03a 	or	r17,r3,r17
 40109ec:	1080fcc4 	addi	r2,r2,1011
 40109f0:	0085c83a 	sub	r2,zero,r2
 40109f4:	000b883a 	mov	r5,zero
 40109f8:	003f8306 	br	4010808 <__reset+0xfb00f808>
 40109fc:	b02b883a 	mov	r21,r22
 4010a00:	0081ffc4 	movi	r2,2047
 4010a04:	000b883a 	mov	r5,zero
 4010a08:	0029883a 	mov	r20,zero
 4010a0c:	003fac06 	br	40108c0 <__reset+0xfb00f8c0>
 4010a10:	0023883a 	mov	r17,zero
 4010a14:	0011883a 	mov	r8,zero
 4010a18:	01400044 	movi	r5,1
 4010a1c:	003f7a06 	br	4010808 <__reset+0xfb00f808>
 4010a20:	014000c4 	movi	r5,3
 4010a24:	003f7806 	br	4010808 <__reset+0xfb00f808>
 4010a28:	04c00104 	movi	r19,4
 4010a2c:	0021883a 	mov	r16,zero
 4010a30:	0029883a 	mov	r20,zero
 4010a34:	07000044 	movi	fp,1
 4010a38:	003f6106 	br	40107c0 <__reset+0xfb00f7c0>
 4010a3c:	04c00304 	movi	r19,12
 4010a40:	070000c4 	movi	fp,3
 4010a44:	003f5e06 	br	40107c0 <__reset+0xfb00f7c0>
 4010a48:	01400434 	movhi	r5,16
 4010a4c:	002b883a 	mov	r21,zero
 4010a50:	297fffc4 	addi	r5,r5,-1
 4010a54:	053fffc4 	movi	r20,-1
 4010a58:	0081ffc4 	movi	r2,2047
 4010a5c:	003f9806 	br	40108c0 <__reset+0xfb00f8c0>
 4010a60:	8023883a 	mov	r17,r16
 4010a64:	a011883a 	mov	r8,r20
 4010a68:	e00b883a 	mov	r5,fp
 4010a6c:	003f8a06 	br	4010898 <__reset+0xfb00f898>
 4010a70:	8023883a 	mov	r17,r16
 4010a74:	a011883a 	mov	r8,r20
 4010a78:	482d883a 	mov	r22,r9
 4010a7c:	e00b883a 	mov	r5,fp
 4010a80:	003f8506 	br	4010898 <__reset+0xfb00f898>
 4010a84:	a00ad43a 	srli	r5,r20,16
 4010a88:	401ad43a 	srli	r13,r8,16
 4010a8c:	a53fffcc 	andi	r20,r20,65535
 4010a90:	423fffcc 	andi	r8,r8,65535
 4010a94:	4519383a 	mul	r12,r8,r20
 4010a98:	4147383a 	mul	r3,r8,r5
 4010a9c:	6d09383a 	mul	r4,r13,r20
 4010aa0:	600cd43a 	srli	r6,r12,16
 4010aa4:	2b5d383a 	mul	r14,r5,r13
 4010aa8:	20c9883a 	add	r4,r4,r3
 4010aac:	310d883a 	add	r6,r6,r4
 4010ab0:	30c0022e 	bgeu	r6,r3,4010abc <__muldf3+0x378>
 4010ab4:	00c00074 	movhi	r3,1
 4010ab8:	70dd883a 	add	r14,r14,r3
 4010abc:	8826d43a 	srli	r19,r17,16
 4010ac0:	8bffffcc 	andi	r15,r17,65535
 4010ac4:	7d23383a 	mul	r17,r15,r20
 4010ac8:	7949383a 	mul	r4,r15,r5
 4010acc:	9d29383a 	mul	r20,r19,r20
 4010ad0:	8814d43a 	srli	r10,r17,16
 4010ad4:	3012943a 	slli	r9,r6,16
 4010ad8:	a129883a 	add	r20,r20,r4
 4010adc:	633fffcc 	andi	r12,r12,65535
 4010ae0:	5515883a 	add	r10,r10,r20
 4010ae4:	3006d43a 	srli	r3,r6,16
 4010ae8:	4b13883a 	add	r9,r9,r12
 4010aec:	2ccb383a 	mul	r5,r5,r19
 4010af0:	5100022e 	bgeu	r10,r4,4010afc <__muldf3+0x3b8>
 4010af4:	01000074 	movhi	r4,1
 4010af8:	290b883a 	add	r5,r5,r4
 4010afc:	802ad43a 	srli	r21,r16,16
 4010b00:	843fffcc 	andi	r16,r16,65535
 4010b04:	440d383a 	mul	r6,r8,r16
 4010b08:	4565383a 	mul	r18,r8,r21
 4010b0c:	8349383a 	mul	r4,r16,r13
 4010b10:	500e943a 	slli	r7,r10,16
 4010b14:	3010d43a 	srli	r8,r6,16
 4010b18:	5028d43a 	srli	r20,r10,16
 4010b1c:	2489883a 	add	r4,r4,r18
 4010b20:	8abfffcc 	andi	r10,r17,65535
 4010b24:	3a95883a 	add	r10,r7,r10
 4010b28:	4119883a 	add	r12,r8,r4
 4010b2c:	a169883a 	add	r20,r20,r5
 4010b30:	1a87883a 	add	r3,r3,r10
 4010b34:	6d5b383a 	mul	r13,r13,r21
 4010b38:	6480022e 	bgeu	r12,r18,4010b44 <__muldf3+0x400>
 4010b3c:	01000074 	movhi	r4,1
 4010b40:	691b883a 	add	r13,r13,r4
 4010b44:	7c25383a 	mul	r18,r15,r16
 4010b48:	7d4b383a 	mul	r5,r15,r21
 4010b4c:	84cf383a 	mul	r7,r16,r19
 4010b50:	901ed43a 	srli	r15,r18,16
 4010b54:	6008d43a 	srli	r4,r12,16
 4010b58:	6010943a 	slli	r8,r12,16
 4010b5c:	394f883a 	add	r7,r7,r5
 4010b60:	333fffcc 	andi	r12,r6,65535
 4010b64:	79df883a 	add	r15,r15,r7
 4010b68:	235b883a 	add	r13,r4,r13
 4010b6c:	9d63383a 	mul	r17,r19,r21
 4010b70:	4309883a 	add	r4,r8,r12
 4010b74:	7940022e 	bgeu	r15,r5,4010b80 <__muldf3+0x43c>
 4010b78:	01400074 	movhi	r5,1
 4010b7c:	8963883a 	add	r17,r17,r5
 4010b80:	780a943a 	slli	r5,r15,16
 4010b84:	91bfffcc 	andi	r6,r18,65535
 4010b88:	70c7883a 	add	r3,r14,r3
 4010b8c:	298d883a 	add	r6,r5,r6
 4010b90:	1a8f803a 	cmpltu	r7,r3,r10
 4010b94:	350b883a 	add	r5,r6,r20
 4010b98:	20c7883a 	add	r3,r4,r3
 4010b9c:	3955883a 	add	r10,r7,r5
 4010ba0:	1909803a 	cmpltu	r4,r3,r4
 4010ba4:	6a91883a 	add	r8,r13,r10
 4010ba8:	780cd43a 	srli	r6,r15,16
 4010bac:	2219883a 	add	r12,r4,r8
 4010bb0:	2d0b803a 	cmpltu	r5,r5,r20
 4010bb4:	51cf803a 	cmpltu	r7,r10,r7
 4010bb8:	29ceb03a 	or	r7,r5,r7
 4010bbc:	4351803a 	cmpltu	r8,r8,r13
 4010bc0:	610b803a 	cmpltu	r5,r12,r4
 4010bc4:	4148b03a 	or	r4,r8,r5
 4010bc8:	398f883a 	add	r7,r7,r6
 4010bcc:	3909883a 	add	r4,r7,r4
 4010bd0:	1810927a 	slli	r8,r3,9
 4010bd4:	2449883a 	add	r4,r4,r17
 4010bd8:	2008927a 	slli	r4,r4,9
 4010bdc:	6022d5fa 	srli	r17,r12,23
 4010be0:	1806d5fa 	srli	r3,r3,23
 4010be4:	4252b03a 	or	r9,r8,r9
 4010be8:	600a927a 	slli	r5,r12,9
 4010bec:	4810c03a 	cmpne	r8,r9,zero
 4010bf0:	2462b03a 	or	r17,r4,r17
 4010bf4:	40c6b03a 	or	r3,r8,r3
 4010bf8:	8900402c 	andhi	r4,r17,256
 4010bfc:	1950b03a 	or	r8,r3,r5
 4010c00:	20000726 	beq	r4,zero,4010c20 <__muldf3+0x4dc>
 4010c04:	4006d07a 	srli	r3,r8,1
 4010c08:	880497fa 	slli	r2,r17,31
 4010c0c:	4200004c 	andi	r8,r8,1
 4010c10:	8822d07a 	srli	r17,r17,1
 4010c14:	1a10b03a 	or	r8,r3,r8
 4010c18:	1210b03a 	or	r8,r2,r8
 4010c1c:	5805883a 	mov	r2,r11
 4010c20:	1140ffc4 	addi	r5,r2,1023
 4010c24:	0140440e 	bge	zero,r5,4010d38 <__muldf3+0x5f4>
 4010c28:	40c001cc 	andi	r3,r8,7
 4010c2c:	18000726 	beq	r3,zero,4010c4c <__muldf3+0x508>
 4010c30:	40c003cc 	andi	r3,r8,15
 4010c34:	01000104 	movi	r4,4
 4010c38:	19000426 	beq	r3,r4,4010c4c <__muldf3+0x508>
 4010c3c:	4107883a 	add	r3,r8,r4
 4010c40:	1a11803a 	cmpltu	r8,r3,r8
 4010c44:	8a23883a 	add	r17,r17,r8
 4010c48:	1811883a 	mov	r8,r3
 4010c4c:	88c0402c 	andhi	r3,r17,256
 4010c50:	18000426 	beq	r3,zero,4010c64 <__muldf3+0x520>
 4010c54:	11410004 	addi	r5,r2,1024
 4010c58:	00bfc034 	movhi	r2,65280
 4010c5c:	10bfffc4 	addi	r2,r2,-1
 4010c60:	88a2703a 	and	r17,r17,r2
 4010c64:	0081ff84 	movi	r2,2046
 4010c68:	117f6416 	blt	r2,r5,40109fc <__reset+0xfb00f9fc>
 4010c6c:	8828977a 	slli	r20,r17,29
 4010c70:	4010d0fa 	srli	r8,r8,3
 4010c74:	8822927a 	slli	r17,r17,9
 4010c78:	2881ffcc 	andi	r2,r5,2047
 4010c7c:	a228b03a 	or	r20,r20,r8
 4010c80:	880ad33a 	srli	r5,r17,12
 4010c84:	b02b883a 	mov	r21,r22
 4010c88:	003f0d06 	br	40108c0 <__reset+0xfb00f8c0>
 4010c8c:	8080022c 	andhi	r2,r16,8
 4010c90:	10000926 	beq	r2,zero,4010cb8 <__muldf3+0x574>
 4010c94:	8880022c 	andhi	r2,r17,8
 4010c98:	1000071e 	bne	r2,zero,4010cb8 <__muldf3+0x574>
 4010c9c:	00800434 	movhi	r2,16
 4010ca0:	89400234 	orhi	r5,r17,8
 4010ca4:	10bfffc4 	addi	r2,r2,-1
 4010ca8:	b82b883a 	mov	r21,r23
 4010cac:	288a703a 	and	r5,r5,r2
 4010cb0:	4029883a 	mov	r20,r8
 4010cb4:	003f6806 	br	4010a58 <__reset+0xfb00fa58>
 4010cb8:	00800434 	movhi	r2,16
 4010cbc:	81400234 	orhi	r5,r16,8
 4010cc0:	10bfffc4 	addi	r2,r2,-1
 4010cc4:	288a703a 	and	r5,r5,r2
 4010cc8:	003f6306 	br	4010a58 <__reset+0xfb00fa58>
 4010ccc:	147ff604 	addi	r17,r2,-40
 4010cd0:	3462983a 	sll	r17,r6,r17
 4010cd4:	0011883a 	mov	r8,zero
 4010cd8:	003f4406 	br	40109ec <__reset+0xfb00f9ec>
 4010cdc:	3009883a 	mov	r4,r6
 4010ce0:	d9800215 	stw	r6,8(sp)
 4010ce4:	da400115 	stw	r9,4(sp)
 4010ce8:	da800015 	stw	r10,0(sp)
 4010cec:	4011b6c0 	call	4011b6c <__clzsi2>
 4010cf0:	10800804 	addi	r2,r2,32
 4010cf4:	da800017 	ldw	r10,0(sp)
 4010cf8:	da400117 	ldw	r9,4(sp)
 4010cfc:	d9800217 	ldw	r6,8(sp)
 4010d00:	003f3006 	br	40109c4 <__reset+0xfb00f9c4>
 4010d04:	143ff604 	addi	r16,r2,-40
 4010d08:	9c20983a 	sll	r16,r19,r16
 4010d0c:	0029883a 	mov	r20,zero
 4010d10:	003f1606 	br	401096c <__reset+0xfb00f96c>
 4010d14:	d9800215 	stw	r6,8(sp)
 4010d18:	d9c00015 	stw	r7,0(sp)
 4010d1c:	da400115 	stw	r9,4(sp)
 4010d20:	4011b6c0 	call	4011b6c <__clzsi2>
 4010d24:	10800804 	addi	r2,r2,32
 4010d28:	da400117 	ldw	r9,4(sp)
 4010d2c:	d9c00017 	ldw	r7,0(sp)
 4010d30:	d9800217 	ldw	r6,8(sp)
 4010d34:	003f0306 	br	4010944 <__reset+0xfb00f944>
 4010d38:	00c00044 	movi	r3,1
 4010d3c:	1947c83a 	sub	r3,r3,r5
 4010d40:	00800e04 	movi	r2,56
 4010d44:	10feda16 	blt	r2,r3,40108b0 <__reset+0xfb00f8b0>
 4010d48:	008007c4 	movi	r2,31
 4010d4c:	10c01b16 	blt	r2,r3,4010dbc <__muldf3+0x678>
 4010d50:	00800804 	movi	r2,32
 4010d54:	10c5c83a 	sub	r2,r2,r3
 4010d58:	888a983a 	sll	r5,r17,r2
 4010d5c:	40c8d83a 	srl	r4,r8,r3
 4010d60:	4084983a 	sll	r2,r8,r2
 4010d64:	88e2d83a 	srl	r17,r17,r3
 4010d68:	2906b03a 	or	r3,r5,r4
 4010d6c:	1004c03a 	cmpne	r2,r2,zero
 4010d70:	1886b03a 	or	r3,r3,r2
 4010d74:	188001cc 	andi	r2,r3,7
 4010d78:	10000726 	beq	r2,zero,4010d98 <__muldf3+0x654>
 4010d7c:	188003cc 	andi	r2,r3,15
 4010d80:	01000104 	movi	r4,4
 4010d84:	11000426 	beq	r2,r4,4010d98 <__muldf3+0x654>
 4010d88:	1805883a 	mov	r2,r3
 4010d8c:	10c00104 	addi	r3,r2,4
 4010d90:	1885803a 	cmpltu	r2,r3,r2
 4010d94:	88a3883a 	add	r17,r17,r2
 4010d98:	8880202c 	andhi	r2,r17,128
 4010d9c:	10001c26 	beq	r2,zero,4010e10 <__muldf3+0x6cc>
 4010da0:	b02b883a 	mov	r21,r22
 4010da4:	00800044 	movi	r2,1
 4010da8:	000b883a 	mov	r5,zero
 4010dac:	0029883a 	mov	r20,zero
 4010db0:	003ec306 	br	40108c0 <__reset+0xfb00f8c0>
 4010db4:	5805883a 	mov	r2,r11
 4010db8:	003f9906 	br	4010c20 <__reset+0xfb00fc20>
 4010dbc:	00bff844 	movi	r2,-31
 4010dc0:	1145c83a 	sub	r2,r2,r5
 4010dc4:	8888d83a 	srl	r4,r17,r2
 4010dc8:	00800804 	movi	r2,32
 4010dcc:	18801a26 	beq	r3,r2,4010e38 <__muldf3+0x6f4>
 4010dd0:	00801004 	movi	r2,64
 4010dd4:	10c5c83a 	sub	r2,r2,r3
 4010dd8:	8884983a 	sll	r2,r17,r2
 4010ddc:	1204b03a 	or	r2,r2,r8
 4010de0:	1004c03a 	cmpne	r2,r2,zero
 4010de4:	2084b03a 	or	r2,r4,r2
 4010de8:	144001cc 	andi	r17,r2,7
 4010dec:	88000d1e 	bne	r17,zero,4010e24 <__muldf3+0x6e0>
 4010df0:	000b883a 	mov	r5,zero
 4010df4:	1028d0fa 	srli	r20,r2,3
 4010df8:	b02b883a 	mov	r21,r22
 4010dfc:	0005883a 	mov	r2,zero
 4010e00:	a468b03a 	or	r20,r20,r17
 4010e04:	003eae06 	br	40108c0 <__reset+0xfb00f8c0>
 4010e08:	1007883a 	mov	r3,r2
 4010e0c:	0023883a 	mov	r17,zero
 4010e10:	880a927a 	slli	r5,r17,9
 4010e14:	1805883a 	mov	r2,r3
 4010e18:	8822977a 	slli	r17,r17,29
 4010e1c:	280ad33a 	srli	r5,r5,12
 4010e20:	003ff406 	br	4010df4 <__reset+0xfb00fdf4>
 4010e24:	10c003cc 	andi	r3,r2,15
 4010e28:	01000104 	movi	r4,4
 4010e2c:	193ff626 	beq	r3,r4,4010e08 <__reset+0xfb00fe08>
 4010e30:	0023883a 	mov	r17,zero
 4010e34:	003fd506 	br	4010d8c <__reset+0xfb00fd8c>
 4010e38:	0005883a 	mov	r2,zero
 4010e3c:	003fe706 	br	4010ddc <__reset+0xfb00fddc>
 4010e40:	00800434 	movhi	r2,16
 4010e44:	89400234 	orhi	r5,r17,8
 4010e48:	10bfffc4 	addi	r2,r2,-1
 4010e4c:	b02b883a 	mov	r21,r22
 4010e50:	288a703a 	and	r5,r5,r2
 4010e54:	4029883a 	mov	r20,r8
 4010e58:	003eff06 	br	4010a58 <__reset+0xfb00fa58>

04010e5c <__subdf3>:
 4010e5c:	02000434 	movhi	r8,16
 4010e60:	423fffc4 	addi	r8,r8,-1
 4010e64:	defffb04 	addi	sp,sp,-20
 4010e68:	2a14703a 	and	r10,r5,r8
 4010e6c:	3812d53a 	srli	r9,r7,20
 4010e70:	3a10703a 	and	r8,r7,r8
 4010e74:	2006d77a 	srli	r3,r4,29
 4010e78:	3004d77a 	srli	r2,r6,29
 4010e7c:	dc000015 	stw	r16,0(sp)
 4010e80:	501490fa 	slli	r10,r10,3
 4010e84:	2820d53a 	srli	r16,r5,20
 4010e88:	401090fa 	slli	r8,r8,3
 4010e8c:	dc800215 	stw	r18,8(sp)
 4010e90:	dc400115 	stw	r17,4(sp)
 4010e94:	dfc00415 	stw	ra,16(sp)
 4010e98:	202290fa 	slli	r17,r4,3
 4010e9c:	dcc00315 	stw	r19,12(sp)
 4010ea0:	4a41ffcc 	andi	r9,r9,2047
 4010ea4:	0101ffc4 	movi	r4,2047
 4010ea8:	2824d7fa 	srli	r18,r5,31
 4010eac:	8401ffcc 	andi	r16,r16,2047
 4010eb0:	50c6b03a 	or	r3,r10,r3
 4010eb4:	380ed7fa 	srli	r7,r7,31
 4010eb8:	408ab03a 	or	r5,r8,r2
 4010ebc:	300c90fa 	slli	r6,r6,3
 4010ec0:	49009626 	beq	r9,r4,401111c <__subdf3+0x2c0>
 4010ec4:	39c0005c 	xori	r7,r7,1
 4010ec8:	8245c83a 	sub	r2,r16,r9
 4010ecc:	3c807426 	beq	r7,r18,40110a0 <__subdf3+0x244>
 4010ed0:	0080af0e 	bge	zero,r2,4011190 <__subdf3+0x334>
 4010ed4:	48002a1e 	bne	r9,zero,4010f80 <__subdf3+0x124>
 4010ed8:	2988b03a 	or	r4,r5,r6
 4010edc:	20009a1e 	bne	r4,zero,4011148 <__subdf3+0x2ec>
 4010ee0:	888001cc 	andi	r2,r17,7
 4010ee4:	10000726 	beq	r2,zero,4010f04 <__subdf3+0xa8>
 4010ee8:	888003cc 	andi	r2,r17,15
 4010eec:	01000104 	movi	r4,4
 4010ef0:	11000426 	beq	r2,r4,4010f04 <__subdf3+0xa8>
 4010ef4:	890b883a 	add	r5,r17,r4
 4010ef8:	2c63803a 	cmpltu	r17,r5,r17
 4010efc:	1c47883a 	add	r3,r3,r17
 4010f00:	2823883a 	mov	r17,r5
 4010f04:	1880202c 	andhi	r2,r3,128
 4010f08:	10005926 	beq	r2,zero,4011070 <__subdf3+0x214>
 4010f0c:	84000044 	addi	r16,r16,1
 4010f10:	0081ffc4 	movi	r2,2047
 4010f14:	8080be26 	beq	r16,r2,4011210 <__subdf3+0x3b4>
 4010f18:	017fe034 	movhi	r5,65408
 4010f1c:	297fffc4 	addi	r5,r5,-1
 4010f20:	1946703a 	and	r3,r3,r5
 4010f24:	1804977a 	slli	r2,r3,29
 4010f28:	1806927a 	slli	r3,r3,9
 4010f2c:	8822d0fa 	srli	r17,r17,3
 4010f30:	8401ffcc 	andi	r16,r16,2047
 4010f34:	180ad33a 	srli	r5,r3,12
 4010f38:	9100004c 	andi	r4,r18,1
 4010f3c:	1444b03a 	or	r2,r2,r17
 4010f40:	80c1ffcc 	andi	r3,r16,2047
 4010f44:	1820953a 	slli	r16,r3,20
 4010f48:	20c03fcc 	andi	r3,r4,255
 4010f4c:	180897fa 	slli	r4,r3,31
 4010f50:	00c00434 	movhi	r3,16
 4010f54:	18ffffc4 	addi	r3,r3,-1
 4010f58:	28c6703a 	and	r3,r5,r3
 4010f5c:	1c06b03a 	or	r3,r3,r16
 4010f60:	1906b03a 	or	r3,r3,r4
 4010f64:	dfc00417 	ldw	ra,16(sp)
 4010f68:	dcc00317 	ldw	r19,12(sp)
 4010f6c:	dc800217 	ldw	r18,8(sp)
 4010f70:	dc400117 	ldw	r17,4(sp)
 4010f74:	dc000017 	ldw	r16,0(sp)
 4010f78:	dec00504 	addi	sp,sp,20
 4010f7c:	f800283a 	ret
 4010f80:	0101ffc4 	movi	r4,2047
 4010f84:	813fd626 	beq	r16,r4,4010ee0 <__reset+0xfb00fee0>
 4010f88:	29402034 	orhi	r5,r5,128
 4010f8c:	01000e04 	movi	r4,56
 4010f90:	2080a316 	blt	r4,r2,4011220 <__subdf3+0x3c4>
 4010f94:	010007c4 	movi	r4,31
 4010f98:	2080c616 	blt	r4,r2,40112b4 <__subdf3+0x458>
 4010f9c:	01000804 	movi	r4,32
 4010fa0:	2089c83a 	sub	r4,r4,r2
 4010fa4:	2910983a 	sll	r8,r5,r4
 4010fa8:	308ed83a 	srl	r7,r6,r2
 4010fac:	3108983a 	sll	r4,r6,r4
 4010fb0:	2884d83a 	srl	r2,r5,r2
 4010fb4:	41ccb03a 	or	r6,r8,r7
 4010fb8:	2008c03a 	cmpne	r4,r4,zero
 4010fbc:	310cb03a 	or	r6,r6,r4
 4010fc0:	898dc83a 	sub	r6,r17,r6
 4010fc4:	89a3803a 	cmpltu	r17,r17,r6
 4010fc8:	1887c83a 	sub	r3,r3,r2
 4010fcc:	1c47c83a 	sub	r3,r3,r17
 4010fd0:	3023883a 	mov	r17,r6
 4010fd4:	1880202c 	andhi	r2,r3,128
 4010fd8:	10002326 	beq	r2,zero,4011068 <__subdf3+0x20c>
 4010fdc:	04c02034 	movhi	r19,128
 4010fe0:	9cffffc4 	addi	r19,r19,-1
 4010fe4:	1ce6703a 	and	r19,r3,r19
 4010fe8:	98007a26 	beq	r19,zero,40111d4 <__subdf3+0x378>
 4010fec:	9809883a 	mov	r4,r19
 4010ff0:	4011b6c0 	call	4011b6c <__clzsi2>
 4010ff4:	113ffe04 	addi	r4,r2,-8
 4010ff8:	00c007c4 	movi	r3,31
 4010ffc:	19007b16 	blt	r3,r4,40111ec <__subdf3+0x390>
 4011000:	00800804 	movi	r2,32
 4011004:	1105c83a 	sub	r2,r2,r4
 4011008:	8884d83a 	srl	r2,r17,r2
 401100c:	9906983a 	sll	r3,r19,r4
 4011010:	8922983a 	sll	r17,r17,r4
 4011014:	10c4b03a 	or	r2,r2,r3
 4011018:	24007816 	blt	r4,r16,40111fc <__subdf3+0x3a0>
 401101c:	2421c83a 	sub	r16,r4,r16
 4011020:	80c00044 	addi	r3,r16,1
 4011024:	010007c4 	movi	r4,31
 4011028:	20c09516 	blt	r4,r3,4011280 <__subdf3+0x424>
 401102c:	01400804 	movi	r5,32
 4011030:	28cbc83a 	sub	r5,r5,r3
 4011034:	88c8d83a 	srl	r4,r17,r3
 4011038:	8962983a 	sll	r17,r17,r5
 401103c:	114a983a 	sll	r5,r2,r5
 4011040:	10c6d83a 	srl	r3,r2,r3
 4011044:	8804c03a 	cmpne	r2,r17,zero
 4011048:	290ab03a 	or	r5,r5,r4
 401104c:	28a2b03a 	or	r17,r5,r2
 4011050:	0021883a 	mov	r16,zero
 4011054:	003fa206 	br	4010ee0 <__reset+0xfb00fee0>
 4011058:	2090b03a 	or	r8,r4,r2
 401105c:	40018e26 	beq	r8,zero,4011698 <__subdf3+0x83c>
 4011060:	1007883a 	mov	r3,r2
 4011064:	2023883a 	mov	r17,r4
 4011068:	888001cc 	andi	r2,r17,7
 401106c:	103f9e1e 	bne	r2,zero,4010ee8 <__reset+0xfb00fee8>
 4011070:	1804977a 	slli	r2,r3,29
 4011074:	8822d0fa 	srli	r17,r17,3
 4011078:	1810d0fa 	srli	r8,r3,3
 401107c:	9100004c 	andi	r4,r18,1
 4011080:	1444b03a 	or	r2,r2,r17
 4011084:	00c1ffc4 	movi	r3,2047
 4011088:	80c02826 	beq	r16,r3,401112c <__subdf3+0x2d0>
 401108c:	01400434 	movhi	r5,16
 4011090:	297fffc4 	addi	r5,r5,-1
 4011094:	80e0703a 	and	r16,r16,r3
 4011098:	414a703a 	and	r5,r8,r5
 401109c:	003fa806 	br	4010f40 <__reset+0xfb00ff40>
 40110a0:	0080630e 	bge	zero,r2,4011230 <__subdf3+0x3d4>
 40110a4:	48003026 	beq	r9,zero,4011168 <__subdf3+0x30c>
 40110a8:	0101ffc4 	movi	r4,2047
 40110ac:	813f8c26 	beq	r16,r4,4010ee0 <__reset+0xfb00fee0>
 40110b0:	29402034 	orhi	r5,r5,128
 40110b4:	01000e04 	movi	r4,56
 40110b8:	2080a90e 	bge	r4,r2,4011360 <__subdf3+0x504>
 40110bc:	298cb03a 	or	r6,r5,r6
 40110c0:	3012c03a 	cmpne	r9,r6,zero
 40110c4:	0005883a 	mov	r2,zero
 40110c8:	4c53883a 	add	r9,r9,r17
 40110cc:	4c63803a 	cmpltu	r17,r9,r17
 40110d0:	10c7883a 	add	r3,r2,r3
 40110d4:	88c7883a 	add	r3,r17,r3
 40110d8:	4823883a 	mov	r17,r9
 40110dc:	1880202c 	andhi	r2,r3,128
 40110e0:	1000d026 	beq	r2,zero,4011424 <__subdf3+0x5c8>
 40110e4:	84000044 	addi	r16,r16,1
 40110e8:	0081ffc4 	movi	r2,2047
 40110ec:	8080fe26 	beq	r16,r2,40114e8 <__subdf3+0x68c>
 40110f0:	00bfe034 	movhi	r2,65408
 40110f4:	10bfffc4 	addi	r2,r2,-1
 40110f8:	1886703a 	and	r3,r3,r2
 40110fc:	880ad07a 	srli	r5,r17,1
 4011100:	180497fa 	slli	r2,r3,31
 4011104:	8900004c 	andi	r4,r17,1
 4011108:	2922b03a 	or	r17,r5,r4
 401110c:	1806d07a 	srli	r3,r3,1
 4011110:	1462b03a 	or	r17,r2,r17
 4011114:	3825883a 	mov	r18,r7
 4011118:	003f7106 	br	4010ee0 <__reset+0xfb00fee0>
 401111c:	2984b03a 	or	r2,r5,r6
 4011120:	103f6826 	beq	r2,zero,4010ec4 <__reset+0xfb00fec4>
 4011124:	39c03fcc 	andi	r7,r7,255
 4011128:	003f6706 	br	4010ec8 <__reset+0xfb00fec8>
 401112c:	4086b03a 	or	r3,r8,r2
 4011130:	18015226 	beq	r3,zero,401167c <__subdf3+0x820>
 4011134:	00c00434 	movhi	r3,16
 4011138:	41400234 	orhi	r5,r8,8
 401113c:	18ffffc4 	addi	r3,r3,-1
 4011140:	28ca703a 	and	r5,r5,r3
 4011144:	003f7e06 	br	4010f40 <__reset+0xfb00ff40>
 4011148:	10bfffc4 	addi	r2,r2,-1
 401114c:	1000491e 	bne	r2,zero,4011274 <__subdf3+0x418>
 4011150:	898fc83a 	sub	r7,r17,r6
 4011154:	89e3803a 	cmpltu	r17,r17,r7
 4011158:	1947c83a 	sub	r3,r3,r5
 401115c:	1c47c83a 	sub	r3,r3,r17
 4011160:	3823883a 	mov	r17,r7
 4011164:	003f9b06 	br	4010fd4 <__reset+0xfb00ffd4>
 4011168:	2988b03a 	or	r4,r5,r6
 401116c:	203f5c26 	beq	r4,zero,4010ee0 <__reset+0xfb00fee0>
 4011170:	10bfffc4 	addi	r2,r2,-1
 4011174:	1000931e 	bne	r2,zero,40113c4 <__subdf3+0x568>
 4011178:	898d883a 	add	r6,r17,r6
 401117c:	3463803a 	cmpltu	r17,r6,r17
 4011180:	1947883a 	add	r3,r3,r5
 4011184:	88c7883a 	add	r3,r17,r3
 4011188:	3023883a 	mov	r17,r6
 401118c:	003fd306 	br	40110dc <__reset+0xfb0100dc>
 4011190:	1000541e 	bne	r2,zero,40112e4 <__subdf3+0x488>
 4011194:	80800044 	addi	r2,r16,1
 4011198:	1081ffcc 	andi	r2,r2,2047
 401119c:	01000044 	movi	r4,1
 40111a0:	2080a20e 	bge	r4,r2,401142c <__subdf3+0x5d0>
 40111a4:	8989c83a 	sub	r4,r17,r6
 40111a8:	8905803a 	cmpltu	r2,r17,r4
 40111ac:	1967c83a 	sub	r19,r3,r5
 40111b0:	98a7c83a 	sub	r19,r19,r2
 40111b4:	9880202c 	andhi	r2,r19,128
 40111b8:	10006326 	beq	r2,zero,4011348 <__subdf3+0x4ec>
 40111bc:	3463c83a 	sub	r17,r6,r17
 40111c0:	28c7c83a 	sub	r3,r5,r3
 40111c4:	344d803a 	cmpltu	r6,r6,r17
 40111c8:	19a7c83a 	sub	r19,r3,r6
 40111cc:	3825883a 	mov	r18,r7
 40111d0:	983f861e 	bne	r19,zero,4010fec <__reset+0xfb00ffec>
 40111d4:	8809883a 	mov	r4,r17
 40111d8:	4011b6c0 	call	4011b6c <__clzsi2>
 40111dc:	10800804 	addi	r2,r2,32
 40111e0:	113ffe04 	addi	r4,r2,-8
 40111e4:	00c007c4 	movi	r3,31
 40111e8:	193f850e 	bge	r3,r4,4011000 <__reset+0xfb010000>
 40111ec:	10bff604 	addi	r2,r2,-40
 40111f0:	8884983a 	sll	r2,r17,r2
 40111f4:	0023883a 	mov	r17,zero
 40111f8:	243f880e 	bge	r4,r16,401101c <__reset+0xfb01001c>
 40111fc:	00ffe034 	movhi	r3,65408
 4011200:	18ffffc4 	addi	r3,r3,-1
 4011204:	8121c83a 	sub	r16,r16,r4
 4011208:	10c6703a 	and	r3,r2,r3
 401120c:	003f3406 	br	4010ee0 <__reset+0xfb00fee0>
 4011210:	9100004c 	andi	r4,r18,1
 4011214:	000b883a 	mov	r5,zero
 4011218:	0005883a 	mov	r2,zero
 401121c:	003f4806 	br	4010f40 <__reset+0xfb00ff40>
 4011220:	298cb03a 	or	r6,r5,r6
 4011224:	300cc03a 	cmpne	r6,r6,zero
 4011228:	0005883a 	mov	r2,zero
 401122c:	003f6406 	br	4010fc0 <__reset+0xfb00ffc0>
 4011230:	10009a1e 	bne	r2,zero,401149c <__subdf3+0x640>
 4011234:	82400044 	addi	r9,r16,1
 4011238:	4881ffcc 	andi	r2,r9,2047
 401123c:	02800044 	movi	r10,1
 4011240:	5080670e 	bge	r10,r2,40113e0 <__subdf3+0x584>
 4011244:	0081ffc4 	movi	r2,2047
 4011248:	4880af26 	beq	r9,r2,4011508 <__subdf3+0x6ac>
 401124c:	898d883a 	add	r6,r17,r6
 4011250:	1945883a 	add	r2,r3,r5
 4011254:	3447803a 	cmpltu	r3,r6,r17
 4011258:	1887883a 	add	r3,r3,r2
 401125c:	182297fa 	slli	r17,r3,31
 4011260:	300cd07a 	srli	r6,r6,1
 4011264:	1806d07a 	srli	r3,r3,1
 4011268:	4821883a 	mov	r16,r9
 401126c:	89a2b03a 	or	r17,r17,r6
 4011270:	003f1b06 	br	4010ee0 <__reset+0xfb00fee0>
 4011274:	0101ffc4 	movi	r4,2047
 4011278:	813f441e 	bne	r16,r4,4010f8c <__reset+0xfb00ff8c>
 401127c:	003f1806 	br	4010ee0 <__reset+0xfb00fee0>
 4011280:	843ff844 	addi	r16,r16,-31
 4011284:	01400804 	movi	r5,32
 4011288:	1408d83a 	srl	r4,r2,r16
 401128c:	19405026 	beq	r3,r5,40113d0 <__subdf3+0x574>
 4011290:	01401004 	movi	r5,64
 4011294:	28c7c83a 	sub	r3,r5,r3
 4011298:	10c4983a 	sll	r2,r2,r3
 401129c:	88a2b03a 	or	r17,r17,r2
 40112a0:	8822c03a 	cmpne	r17,r17,zero
 40112a4:	2462b03a 	or	r17,r4,r17
 40112a8:	0007883a 	mov	r3,zero
 40112ac:	0021883a 	mov	r16,zero
 40112b0:	003f6d06 	br	4011068 <__reset+0xfb010068>
 40112b4:	11fff804 	addi	r7,r2,-32
 40112b8:	01000804 	movi	r4,32
 40112bc:	29ced83a 	srl	r7,r5,r7
 40112c0:	11004526 	beq	r2,r4,40113d8 <__subdf3+0x57c>
 40112c4:	01001004 	movi	r4,64
 40112c8:	2089c83a 	sub	r4,r4,r2
 40112cc:	2904983a 	sll	r2,r5,r4
 40112d0:	118cb03a 	or	r6,r2,r6
 40112d4:	300cc03a 	cmpne	r6,r6,zero
 40112d8:	398cb03a 	or	r6,r7,r6
 40112dc:	0005883a 	mov	r2,zero
 40112e0:	003f3706 	br	4010fc0 <__reset+0xfb00ffc0>
 40112e4:	80002a26 	beq	r16,zero,4011390 <__subdf3+0x534>
 40112e8:	0101ffc4 	movi	r4,2047
 40112ec:	49006626 	beq	r9,r4,4011488 <__subdf3+0x62c>
 40112f0:	0085c83a 	sub	r2,zero,r2
 40112f4:	18c02034 	orhi	r3,r3,128
 40112f8:	01000e04 	movi	r4,56
 40112fc:	20807e16 	blt	r4,r2,40114f8 <__subdf3+0x69c>
 4011300:	010007c4 	movi	r4,31
 4011304:	2080e716 	blt	r4,r2,40116a4 <__subdf3+0x848>
 4011308:	01000804 	movi	r4,32
 401130c:	2089c83a 	sub	r4,r4,r2
 4011310:	1914983a 	sll	r10,r3,r4
 4011314:	8890d83a 	srl	r8,r17,r2
 4011318:	8908983a 	sll	r4,r17,r4
 401131c:	1884d83a 	srl	r2,r3,r2
 4011320:	5222b03a 	or	r17,r10,r8
 4011324:	2006c03a 	cmpne	r3,r4,zero
 4011328:	88e2b03a 	or	r17,r17,r3
 401132c:	3463c83a 	sub	r17,r6,r17
 4011330:	2885c83a 	sub	r2,r5,r2
 4011334:	344d803a 	cmpltu	r6,r6,r17
 4011338:	1187c83a 	sub	r3,r2,r6
 401133c:	4821883a 	mov	r16,r9
 4011340:	3825883a 	mov	r18,r7
 4011344:	003f2306 	br	4010fd4 <__reset+0xfb00ffd4>
 4011348:	24d0b03a 	or	r8,r4,r19
 401134c:	40001b1e 	bne	r8,zero,40113bc <__subdf3+0x560>
 4011350:	0005883a 	mov	r2,zero
 4011354:	0009883a 	mov	r4,zero
 4011358:	0021883a 	mov	r16,zero
 401135c:	003f4906 	br	4011084 <__reset+0xfb010084>
 4011360:	010007c4 	movi	r4,31
 4011364:	20803a16 	blt	r4,r2,4011450 <__subdf3+0x5f4>
 4011368:	01000804 	movi	r4,32
 401136c:	2089c83a 	sub	r4,r4,r2
 4011370:	2912983a 	sll	r9,r5,r4
 4011374:	3090d83a 	srl	r8,r6,r2
 4011378:	3108983a 	sll	r4,r6,r4
 401137c:	2884d83a 	srl	r2,r5,r2
 4011380:	4a12b03a 	or	r9,r9,r8
 4011384:	2008c03a 	cmpne	r4,r4,zero
 4011388:	4912b03a 	or	r9,r9,r4
 401138c:	003f4e06 	br	40110c8 <__reset+0xfb0100c8>
 4011390:	1c48b03a 	or	r4,r3,r17
 4011394:	20003c26 	beq	r4,zero,4011488 <__subdf3+0x62c>
 4011398:	0084303a 	nor	r2,zero,r2
 401139c:	1000381e 	bne	r2,zero,4011480 <__subdf3+0x624>
 40113a0:	3463c83a 	sub	r17,r6,r17
 40113a4:	28c5c83a 	sub	r2,r5,r3
 40113a8:	344d803a 	cmpltu	r6,r6,r17
 40113ac:	1187c83a 	sub	r3,r2,r6
 40113b0:	4821883a 	mov	r16,r9
 40113b4:	3825883a 	mov	r18,r7
 40113b8:	003f0606 	br	4010fd4 <__reset+0xfb00ffd4>
 40113bc:	2023883a 	mov	r17,r4
 40113c0:	003f0906 	br	4010fe8 <__reset+0xfb00ffe8>
 40113c4:	0101ffc4 	movi	r4,2047
 40113c8:	813f3a1e 	bne	r16,r4,40110b4 <__reset+0xfb0100b4>
 40113cc:	003ec406 	br	4010ee0 <__reset+0xfb00fee0>
 40113d0:	0005883a 	mov	r2,zero
 40113d4:	003fb106 	br	401129c <__reset+0xfb01029c>
 40113d8:	0005883a 	mov	r2,zero
 40113dc:	003fbc06 	br	40112d0 <__reset+0xfb0102d0>
 40113e0:	1c44b03a 	or	r2,r3,r17
 40113e4:	80008e1e 	bne	r16,zero,4011620 <__subdf3+0x7c4>
 40113e8:	1000c826 	beq	r2,zero,401170c <__subdf3+0x8b0>
 40113ec:	2984b03a 	or	r2,r5,r6
 40113f0:	103ebb26 	beq	r2,zero,4010ee0 <__reset+0xfb00fee0>
 40113f4:	8989883a 	add	r4,r17,r6
 40113f8:	1945883a 	add	r2,r3,r5
 40113fc:	2447803a 	cmpltu	r3,r4,r17
 4011400:	1887883a 	add	r3,r3,r2
 4011404:	1880202c 	andhi	r2,r3,128
 4011408:	2023883a 	mov	r17,r4
 401140c:	103f1626 	beq	r2,zero,4011068 <__reset+0xfb010068>
 4011410:	00bfe034 	movhi	r2,65408
 4011414:	10bfffc4 	addi	r2,r2,-1
 4011418:	5021883a 	mov	r16,r10
 401141c:	1886703a 	and	r3,r3,r2
 4011420:	003eaf06 	br	4010ee0 <__reset+0xfb00fee0>
 4011424:	3825883a 	mov	r18,r7
 4011428:	003f0f06 	br	4011068 <__reset+0xfb010068>
 401142c:	1c44b03a 	or	r2,r3,r17
 4011430:	8000251e 	bne	r16,zero,40114c8 <__subdf3+0x66c>
 4011434:	1000661e 	bne	r2,zero,40115d0 <__subdf3+0x774>
 4011438:	2990b03a 	or	r8,r5,r6
 401143c:	40009626 	beq	r8,zero,4011698 <__subdf3+0x83c>
 4011440:	2807883a 	mov	r3,r5
 4011444:	3023883a 	mov	r17,r6
 4011448:	3825883a 	mov	r18,r7
 401144c:	003ea406 	br	4010ee0 <__reset+0xfb00fee0>
 4011450:	127ff804 	addi	r9,r2,-32
 4011454:	01000804 	movi	r4,32
 4011458:	2a52d83a 	srl	r9,r5,r9
 401145c:	11008c26 	beq	r2,r4,4011690 <__subdf3+0x834>
 4011460:	01001004 	movi	r4,64
 4011464:	2085c83a 	sub	r2,r4,r2
 4011468:	2884983a 	sll	r2,r5,r2
 401146c:	118cb03a 	or	r6,r2,r6
 4011470:	300cc03a 	cmpne	r6,r6,zero
 4011474:	4992b03a 	or	r9,r9,r6
 4011478:	0005883a 	mov	r2,zero
 401147c:	003f1206 	br	40110c8 <__reset+0xfb0100c8>
 4011480:	0101ffc4 	movi	r4,2047
 4011484:	493f9c1e 	bne	r9,r4,40112f8 <__reset+0xfb0102f8>
 4011488:	2807883a 	mov	r3,r5
 401148c:	3023883a 	mov	r17,r6
 4011490:	4821883a 	mov	r16,r9
 4011494:	3825883a 	mov	r18,r7
 4011498:	003e9106 	br	4010ee0 <__reset+0xfb00fee0>
 401149c:	80001f1e 	bne	r16,zero,401151c <__subdf3+0x6c0>
 40114a0:	1c48b03a 	or	r4,r3,r17
 40114a4:	20005a26 	beq	r4,zero,4011610 <__subdf3+0x7b4>
 40114a8:	0084303a 	nor	r2,zero,r2
 40114ac:	1000561e 	bne	r2,zero,4011608 <__subdf3+0x7ac>
 40114b0:	89a3883a 	add	r17,r17,r6
 40114b4:	1945883a 	add	r2,r3,r5
 40114b8:	898d803a 	cmpltu	r6,r17,r6
 40114bc:	3087883a 	add	r3,r6,r2
 40114c0:	4821883a 	mov	r16,r9
 40114c4:	003f0506 	br	40110dc <__reset+0xfb0100dc>
 40114c8:	10002b1e 	bne	r2,zero,4011578 <__subdf3+0x71c>
 40114cc:	2984b03a 	or	r2,r5,r6
 40114d0:	10008026 	beq	r2,zero,40116d4 <__subdf3+0x878>
 40114d4:	2807883a 	mov	r3,r5
 40114d8:	3023883a 	mov	r17,r6
 40114dc:	3825883a 	mov	r18,r7
 40114e0:	0401ffc4 	movi	r16,2047
 40114e4:	003e7e06 	br	4010ee0 <__reset+0xfb00fee0>
 40114e8:	3809883a 	mov	r4,r7
 40114ec:	0011883a 	mov	r8,zero
 40114f0:	0005883a 	mov	r2,zero
 40114f4:	003ee306 	br	4011084 <__reset+0xfb010084>
 40114f8:	1c62b03a 	or	r17,r3,r17
 40114fc:	8822c03a 	cmpne	r17,r17,zero
 4011500:	0005883a 	mov	r2,zero
 4011504:	003f8906 	br	401132c <__reset+0xfb01032c>
 4011508:	3809883a 	mov	r4,r7
 401150c:	4821883a 	mov	r16,r9
 4011510:	0011883a 	mov	r8,zero
 4011514:	0005883a 	mov	r2,zero
 4011518:	003eda06 	br	4011084 <__reset+0xfb010084>
 401151c:	0101ffc4 	movi	r4,2047
 4011520:	49003b26 	beq	r9,r4,4011610 <__subdf3+0x7b4>
 4011524:	0085c83a 	sub	r2,zero,r2
 4011528:	18c02034 	orhi	r3,r3,128
 401152c:	01000e04 	movi	r4,56
 4011530:	20806e16 	blt	r4,r2,40116ec <__subdf3+0x890>
 4011534:	010007c4 	movi	r4,31
 4011538:	20807716 	blt	r4,r2,4011718 <__subdf3+0x8bc>
 401153c:	01000804 	movi	r4,32
 4011540:	2089c83a 	sub	r4,r4,r2
 4011544:	1914983a 	sll	r10,r3,r4
 4011548:	8890d83a 	srl	r8,r17,r2
 401154c:	8908983a 	sll	r4,r17,r4
 4011550:	1884d83a 	srl	r2,r3,r2
 4011554:	5222b03a 	or	r17,r10,r8
 4011558:	2006c03a 	cmpne	r3,r4,zero
 401155c:	88e2b03a 	or	r17,r17,r3
 4011560:	89a3883a 	add	r17,r17,r6
 4011564:	1145883a 	add	r2,r2,r5
 4011568:	898d803a 	cmpltu	r6,r17,r6
 401156c:	3087883a 	add	r3,r6,r2
 4011570:	4821883a 	mov	r16,r9
 4011574:	003ed906 	br	40110dc <__reset+0xfb0100dc>
 4011578:	2984b03a 	or	r2,r5,r6
 401157c:	10004226 	beq	r2,zero,4011688 <__subdf3+0x82c>
 4011580:	1808d0fa 	srli	r4,r3,3
 4011584:	8822d0fa 	srli	r17,r17,3
 4011588:	1806977a 	slli	r3,r3,29
 401158c:	2080022c 	andhi	r2,r4,8
 4011590:	1c62b03a 	or	r17,r3,r17
 4011594:	10000826 	beq	r2,zero,40115b8 <__subdf3+0x75c>
 4011598:	2812d0fa 	srli	r9,r5,3
 401159c:	4880022c 	andhi	r2,r9,8
 40115a0:	1000051e 	bne	r2,zero,40115b8 <__subdf3+0x75c>
 40115a4:	300cd0fa 	srli	r6,r6,3
 40115a8:	2804977a 	slli	r2,r5,29
 40115ac:	4809883a 	mov	r4,r9
 40115b0:	3825883a 	mov	r18,r7
 40115b4:	11a2b03a 	or	r17,r2,r6
 40115b8:	8806d77a 	srli	r3,r17,29
 40115bc:	200890fa 	slli	r4,r4,3
 40115c0:	882290fa 	slli	r17,r17,3
 40115c4:	0401ffc4 	movi	r16,2047
 40115c8:	1906b03a 	or	r3,r3,r4
 40115cc:	003e4406 	br	4010ee0 <__reset+0xfb00fee0>
 40115d0:	2984b03a 	or	r2,r5,r6
 40115d4:	103e4226 	beq	r2,zero,4010ee0 <__reset+0xfb00fee0>
 40115d8:	8989c83a 	sub	r4,r17,r6
 40115dc:	8911803a 	cmpltu	r8,r17,r4
 40115e0:	1945c83a 	sub	r2,r3,r5
 40115e4:	1205c83a 	sub	r2,r2,r8
 40115e8:	1200202c 	andhi	r8,r2,128
 40115ec:	403e9a26 	beq	r8,zero,4011058 <__reset+0xfb010058>
 40115f0:	3463c83a 	sub	r17,r6,r17
 40115f4:	28c5c83a 	sub	r2,r5,r3
 40115f8:	344d803a 	cmpltu	r6,r6,r17
 40115fc:	1187c83a 	sub	r3,r2,r6
 4011600:	3825883a 	mov	r18,r7
 4011604:	003e3606 	br	4010ee0 <__reset+0xfb00fee0>
 4011608:	0101ffc4 	movi	r4,2047
 401160c:	493fc71e 	bne	r9,r4,401152c <__reset+0xfb01052c>
 4011610:	2807883a 	mov	r3,r5
 4011614:	3023883a 	mov	r17,r6
 4011618:	4821883a 	mov	r16,r9
 401161c:	003e3006 	br	4010ee0 <__reset+0xfb00fee0>
 4011620:	10003626 	beq	r2,zero,40116fc <__subdf3+0x8a0>
 4011624:	2984b03a 	or	r2,r5,r6
 4011628:	10001726 	beq	r2,zero,4011688 <__subdf3+0x82c>
 401162c:	1808d0fa 	srli	r4,r3,3
 4011630:	8822d0fa 	srli	r17,r17,3
 4011634:	1806977a 	slli	r3,r3,29
 4011638:	2080022c 	andhi	r2,r4,8
 401163c:	1c62b03a 	or	r17,r3,r17
 4011640:	10000726 	beq	r2,zero,4011660 <__subdf3+0x804>
 4011644:	2812d0fa 	srli	r9,r5,3
 4011648:	4880022c 	andhi	r2,r9,8
 401164c:	1000041e 	bne	r2,zero,4011660 <__subdf3+0x804>
 4011650:	300cd0fa 	srli	r6,r6,3
 4011654:	2804977a 	slli	r2,r5,29
 4011658:	4809883a 	mov	r4,r9
 401165c:	11a2b03a 	or	r17,r2,r6
 4011660:	8806d77a 	srli	r3,r17,29
 4011664:	200890fa 	slli	r4,r4,3
 4011668:	882290fa 	slli	r17,r17,3
 401166c:	3825883a 	mov	r18,r7
 4011670:	1906b03a 	or	r3,r3,r4
 4011674:	0401ffc4 	movi	r16,2047
 4011678:	003e1906 	br	4010ee0 <__reset+0xfb00fee0>
 401167c:	000b883a 	mov	r5,zero
 4011680:	0005883a 	mov	r2,zero
 4011684:	003e2e06 	br	4010f40 <__reset+0xfb00ff40>
 4011688:	0401ffc4 	movi	r16,2047
 401168c:	003e1406 	br	4010ee0 <__reset+0xfb00fee0>
 4011690:	0005883a 	mov	r2,zero
 4011694:	003f7506 	br	401146c <__reset+0xfb01046c>
 4011698:	0005883a 	mov	r2,zero
 401169c:	0009883a 	mov	r4,zero
 40116a0:	003e7806 	br	4011084 <__reset+0xfb010084>
 40116a4:	123ff804 	addi	r8,r2,-32
 40116a8:	01000804 	movi	r4,32
 40116ac:	1a10d83a 	srl	r8,r3,r8
 40116b0:	11002526 	beq	r2,r4,4011748 <__subdf3+0x8ec>
 40116b4:	01001004 	movi	r4,64
 40116b8:	2085c83a 	sub	r2,r4,r2
 40116bc:	1884983a 	sll	r2,r3,r2
 40116c0:	1444b03a 	or	r2,r2,r17
 40116c4:	1004c03a 	cmpne	r2,r2,zero
 40116c8:	40a2b03a 	or	r17,r8,r2
 40116cc:	0005883a 	mov	r2,zero
 40116d0:	003f1606 	br	401132c <__reset+0xfb01032c>
 40116d4:	02000434 	movhi	r8,16
 40116d8:	0009883a 	mov	r4,zero
 40116dc:	423fffc4 	addi	r8,r8,-1
 40116e0:	00bfffc4 	movi	r2,-1
 40116e4:	0401ffc4 	movi	r16,2047
 40116e8:	003e6606 	br	4011084 <__reset+0xfb010084>
 40116ec:	1c62b03a 	or	r17,r3,r17
 40116f0:	8822c03a 	cmpne	r17,r17,zero
 40116f4:	0005883a 	mov	r2,zero
 40116f8:	003f9906 	br	4011560 <__reset+0xfb010560>
 40116fc:	2807883a 	mov	r3,r5
 4011700:	3023883a 	mov	r17,r6
 4011704:	0401ffc4 	movi	r16,2047
 4011708:	003df506 	br	4010ee0 <__reset+0xfb00fee0>
 401170c:	2807883a 	mov	r3,r5
 4011710:	3023883a 	mov	r17,r6
 4011714:	003df206 	br	4010ee0 <__reset+0xfb00fee0>
 4011718:	123ff804 	addi	r8,r2,-32
 401171c:	01000804 	movi	r4,32
 4011720:	1a10d83a 	srl	r8,r3,r8
 4011724:	11000a26 	beq	r2,r4,4011750 <__subdf3+0x8f4>
 4011728:	01001004 	movi	r4,64
 401172c:	2085c83a 	sub	r2,r4,r2
 4011730:	1884983a 	sll	r2,r3,r2
 4011734:	1444b03a 	or	r2,r2,r17
 4011738:	1004c03a 	cmpne	r2,r2,zero
 401173c:	40a2b03a 	or	r17,r8,r2
 4011740:	0005883a 	mov	r2,zero
 4011744:	003f8606 	br	4011560 <__reset+0xfb010560>
 4011748:	0005883a 	mov	r2,zero
 401174c:	003fdc06 	br	40116c0 <__reset+0xfb0106c0>
 4011750:	0005883a 	mov	r2,zero
 4011754:	003ff706 	br	4011734 <__reset+0xfb010734>

04011758 <__fixdfsi>:
 4011758:	280cd53a 	srli	r6,r5,20
 401175c:	00c00434 	movhi	r3,16
 4011760:	18ffffc4 	addi	r3,r3,-1
 4011764:	3181ffcc 	andi	r6,r6,2047
 4011768:	01c0ff84 	movi	r7,1022
 401176c:	28c6703a 	and	r3,r5,r3
 4011770:	280ad7fa 	srli	r5,r5,31
 4011774:	3980120e 	bge	r7,r6,40117c0 <__fixdfsi+0x68>
 4011778:	00810744 	movi	r2,1053
 401177c:	11800c16 	blt	r2,r6,40117b0 <__fixdfsi+0x58>
 4011780:	00810cc4 	movi	r2,1075
 4011784:	1185c83a 	sub	r2,r2,r6
 4011788:	01c007c4 	movi	r7,31
 401178c:	18c00434 	orhi	r3,r3,16
 4011790:	38800d16 	blt	r7,r2,40117c8 <__fixdfsi+0x70>
 4011794:	31befb44 	addi	r6,r6,-1043
 4011798:	2084d83a 	srl	r2,r4,r2
 401179c:	1986983a 	sll	r3,r3,r6
 40117a0:	1884b03a 	or	r2,r3,r2
 40117a4:	28000726 	beq	r5,zero,40117c4 <__fixdfsi+0x6c>
 40117a8:	0085c83a 	sub	r2,zero,r2
 40117ac:	f800283a 	ret
 40117b0:	00a00034 	movhi	r2,32768
 40117b4:	10bfffc4 	addi	r2,r2,-1
 40117b8:	2885883a 	add	r2,r5,r2
 40117bc:	f800283a 	ret
 40117c0:	0005883a 	mov	r2,zero
 40117c4:	f800283a 	ret
 40117c8:	008104c4 	movi	r2,1043
 40117cc:	1185c83a 	sub	r2,r2,r6
 40117d0:	1884d83a 	srl	r2,r3,r2
 40117d4:	003ff306 	br	40117a4 <__reset+0xfb0107a4>

040117d8 <__floatsidf>:
 40117d8:	defffd04 	addi	sp,sp,-12
 40117dc:	dfc00215 	stw	ra,8(sp)
 40117e0:	dc400115 	stw	r17,4(sp)
 40117e4:	dc000015 	stw	r16,0(sp)
 40117e8:	20002b26 	beq	r4,zero,4011898 <__floatsidf+0xc0>
 40117ec:	2023883a 	mov	r17,r4
 40117f0:	2020d7fa 	srli	r16,r4,31
 40117f4:	20002d16 	blt	r4,zero,40118ac <__floatsidf+0xd4>
 40117f8:	8809883a 	mov	r4,r17
 40117fc:	4011b6c0 	call	4011b6c <__clzsi2>
 4011800:	01410784 	movi	r5,1054
 4011804:	288bc83a 	sub	r5,r5,r2
 4011808:	01010cc4 	movi	r4,1075
 401180c:	2149c83a 	sub	r4,r4,r5
 4011810:	00c007c4 	movi	r3,31
 4011814:	1900160e 	bge	r3,r4,4011870 <__floatsidf+0x98>
 4011818:	00c104c4 	movi	r3,1043
 401181c:	1947c83a 	sub	r3,r3,r5
 4011820:	88c6983a 	sll	r3,r17,r3
 4011824:	00800434 	movhi	r2,16
 4011828:	10bfffc4 	addi	r2,r2,-1
 401182c:	1886703a 	and	r3,r3,r2
 4011830:	2941ffcc 	andi	r5,r5,2047
 4011834:	800d883a 	mov	r6,r16
 4011838:	0005883a 	mov	r2,zero
 401183c:	280a953a 	slli	r5,r5,20
 4011840:	31803fcc 	andi	r6,r6,255
 4011844:	01000434 	movhi	r4,16
 4011848:	300c97fa 	slli	r6,r6,31
 401184c:	213fffc4 	addi	r4,r4,-1
 4011850:	1906703a 	and	r3,r3,r4
 4011854:	1946b03a 	or	r3,r3,r5
 4011858:	1986b03a 	or	r3,r3,r6
 401185c:	dfc00217 	ldw	ra,8(sp)
 4011860:	dc400117 	ldw	r17,4(sp)
 4011864:	dc000017 	ldw	r16,0(sp)
 4011868:	dec00304 	addi	sp,sp,12
 401186c:	f800283a 	ret
 4011870:	00c002c4 	movi	r3,11
 4011874:	1887c83a 	sub	r3,r3,r2
 4011878:	88c6d83a 	srl	r3,r17,r3
 401187c:	8904983a 	sll	r2,r17,r4
 4011880:	01000434 	movhi	r4,16
 4011884:	213fffc4 	addi	r4,r4,-1
 4011888:	2941ffcc 	andi	r5,r5,2047
 401188c:	1906703a 	and	r3,r3,r4
 4011890:	800d883a 	mov	r6,r16
 4011894:	003fe906 	br	401183c <__reset+0xfb01083c>
 4011898:	000d883a 	mov	r6,zero
 401189c:	000b883a 	mov	r5,zero
 40118a0:	0007883a 	mov	r3,zero
 40118a4:	0005883a 	mov	r2,zero
 40118a8:	003fe406 	br	401183c <__reset+0xfb01083c>
 40118ac:	0123c83a 	sub	r17,zero,r4
 40118b0:	003fd106 	br	40117f8 <__reset+0xfb0107f8>

040118b4 <__extendsfdf2>:
 40118b4:	200ad5fa 	srli	r5,r4,23
 40118b8:	defffd04 	addi	sp,sp,-12
 40118bc:	dc400115 	stw	r17,4(sp)
 40118c0:	29403fcc 	andi	r5,r5,255
 40118c4:	29800044 	addi	r6,r5,1
 40118c8:	04402034 	movhi	r17,128
 40118cc:	dc000015 	stw	r16,0(sp)
 40118d0:	8c7fffc4 	addi	r17,r17,-1
 40118d4:	dfc00215 	stw	ra,8(sp)
 40118d8:	31803fcc 	andi	r6,r6,255
 40118dc:	00800044 	movi	r2,1
 40118e0:	8922703a 	and	r17,r17,r4
 40118e4:	2020d7fa 	srli	r16,r4,31
 40118e8:	1180110e 	bge	r2,r6,4011930 <__extendsfdf2+0x7c>
 40118ec:	880cd0fa 	srli	r6,r17,3
 40118f0:	8822977a 	slli	r17,r17,29
 40118f4:	2940e004 	addi	r5,r5,896
 40118f8:	2941ffcc 	andi	r5,r5,2047
 40118fc:	2804953a 	slli	r2,r5,20
 4011900:	01400434 	movhi	r5,16
 4011904:	800697fa 	slli	r3,r16,31
 4011908:	297fffc4 	addi	r5,r5,-1
 401190c:	314a703a 	and	r5,r6,r5
 4011910:	288ab03a 	or	r5,r5,r2
 4011914:	28c6b03a 	or	r3,r5,r3
 4011918:	8805883a 	mov	r2,r17
 401191c:	dfc00217 	ldw	ra,8(sp)
 4011920:	dc400117 	ldw	r17,4(sp)
 4011924:	dc000017 	ldw	r16,0(sp)
 4011928:	dec00304 	addi	sp,sp,12
 401192c:	f800283a 	ret
 4011930:	2800111e 	bne	r5,zero,4011978 <__extendsfdf2+0xc4>
 4011934:	88001c26 	beq	r17,zero,40119a8 <__extendsfdf2+0xf4>
 4011938:	8809883a 	mov	r4,r17
 401193c:	4011b6c0 	call	4011b6c <__clzsi2>
 4011940:	00c00284 	movi	r3,10
 4011944:	18801b16 	blt	r3,r2,40119b4 <__extendsfdf2+0x100>
 4011948:	018002c4 	movi	r6,11
 401194c:	308dc83a 	sub	r6,r6,r2
 4011950:	11000544 	addi	r4,r2,21
 4011954:	8986d83a 	srl	r3,r17,r6
 4011958:	8922983a 	sll	r17,r17,r4
 401195c:	0180e244 	movi	r6,905
 4011960:	01400434 	movhi	r5,16
 4011964:	3085c83a 	sub	r2,r6,r2
 4011968:	297fffc4 	addi	r5,r5,-1
 401196c:	194c703a 	and	r6,r3,r5
 4011970:	1141ffcc 	andi	r5,r2,2047
 4011974:	003fe006 	br	40118f8 <__reset+0xfb0108f8>
 4011978:	88000826 	beq	r17,zero,401199c <__extendsfdf2+0xe8>
 401197c:	880cd0fa 	srli	r6,r17,3
 4011980:	00800434 	movhi	r2,16
 4011984:	10bfffc4 	addi	r2,r2,-1
 4011988:	31800234 	orhi	r6,r6,8
 401198c:	8822977a 	slli	r17,r17,29
 4011990:	308c703a 	and	r6,r6,r2
 4011994:	0141ffc4 	movi	r5,2047
 4011998:	003fd706 	br	40118f8 <__reset+0xfb0108f8>
 401199c:	0141ffc4 	movi	r5,2047
 40119a0:	000d883a 	mov	r6,zero
 40119a4:	003fd406 	br	40118f8 <__reset+0xfb0108f8>
 40119a8:	000b883a 	mov	r5,zero
 40119ac:	000d883a 	mov	r6,zero
 40119b0:	003fd106 	br	40118f8 <__reset+0xfb0108f8>
 40119b4:	11bffd44 	addi	r6,r2,-11
 40119b8:	8986983a 	sll	r3,r17,r6
 40119bc:	0023883a 	mov	r17,zero
 40119c0:	003fe606 	br	401195c <__reset+0xfb01095c>

040119c4 <__truncdfsf2>:
 40119c4:	2810d53a 	srli	r8,r5,20
 40119c8:	01c00434 	movhi	r7,16
 40119cc:	39ffffc4 	addi	r7,r7,-1
 40119d0:	29ce703a 	and	r7,r5,r7
 40119d4:	4201ffcc 	andi	r8,r8,2047
 40119d8:	380e90fa 	slli	r7,r7,3
 40119dc:	200cd77a 	srli	r6,r4,29
 40119e0:	42400044 	addi	r9,r8,1
 40119e4:	4a41ffcc 	andi	r9,r9,2047
 40119e8:	00c00044 	movi	r3,1
 40119ec:	280ad7fa 	srli	r5,r5,31
 40119f0:	31ceb03a 	or	r7,r6,r7
 40119f4:	200490fa 	slli	r2,r4,3
 40119f8:	1a40230e 	bge	r3,r9,4011a88 <__truncdfsf2+0xc4>
 40119fc:	40ff2004 	addi	r3,r8,-896
 4011a00:	01803f84 	movi	r6,254
 4011a04:	30c01516 	blt	r6,r3,4011a5c <__truncdfsf2+0x98>
 4011a08:	00c0380e 	bge	zero,r3,4011aec <__truncdfsf2+0x128>
 4011a0c:	200c91ba 	slli	r6,r4,6
 4011a10:	380e90fa 	slli	r7,r7,3
 4011a14:	1004d77a 	srli	r2,r2,29
 4011a18:	300cc03a 	cmpne	r6,r6,zero
 4011a1c:	31ccb03a 	or	r6,r6,r7
 4011a20:	308cb03a 	or	r6,r6,r2
 4011a24:	308001cc 	andi	r2,r6,7
 4011a28:	10000426 	beq	r2,zero,4011a3c <__truncdfsf2+0x78>
 4011a2c:	308003cc 	andi	r2,r6,15
 4011a30:	01000104 	movi	r4,4
 4011a34:	11000126 	beq	r2,r4,4011a3c <__truncdfsf2+0x78>
 4011a38:	31800104 	addi	r6,r6,4
 4011a3c:	3081002c 	andhi	r2,r6,1024
 4011a40:	10001626 	beq	r2,zero,4011a9c <__truncdfsf2+0xd8>
 4011a44:	18c00044 	addi	r3,r3,1
 4011a48:	00803fc4 	movi	r2,255
 4011a4c:	18800326 	beq	r3,r2,4011a5c <__truncdfsf2+0x98>
 4011a50:	300c91ba 	slli	r6,r6,6
 4011a54:	300cd27a 	srli	r6,r6,9
 4011a58:	00000206 	br	4011a64 <__truncdfsf2+0xa0>
 4011a5c:	00ffffc4 	movi	r3,-1
 4011a60:	000d883a 	mov	r6,zero
 4011a64:	18c03fcc 	andi	r3,r3,255
 4011a68:	180895fa 	slli	r4,r3,23
 4011a6c:	00c02034 	movhi	r3,128
 4011a70:	280a97fa 	slli	r5,r5,31
 4011a74:	18ffffc4 	addi	r3,r3,-1
 4011a78:	30c6703a 	and	r3,r6,r3
 4011a7c:	1906b03a 	or	r3,r3,r4
 4011a80:	1944b03a 	or	r2,r3,r5
 4011a84:	f800283a 	ret
 4011a88:	40000b1e 	bne	r8,zero,4011ab8 <__truncdfsf2+0xf4>
 4011a8c:	388cb03a 	or	r6,r7,r2
 4011a90:	0007883a 	mov	r3,zero
 4011a94:	30000426 	beq	r6,zero,4011aa8 <__truncdfsf2+0xe4>
 4011a98:	01800144 	movi	r6,5
 4011a9c:	00803fc4 	movi	r2,255
 4011aa0:	300cd0fa 	srli	r6,r6,3
 4011aa4:	18800a26 	beq	r3,r2,4011ad0 <__truncdfsf2+0x10c>
 4011aa8:	00802034 	movhi	r2,128
 4011aac:	10bfffc4 	addi	r2,r2,-1
 4011ab0:	308c703a 	and	r6,r6,r2
 4011ab4:	003feb06 	br	4011a64 <__reset+0xfb010a64>
 4011ab8:	3888b03a 	or	r4,r7,r2
 4011abc:	203fe726 	beq	r4,zero,4011a5c <__reset+0xfb010a5c>
 4011ac0:	380c90fa 	slli	r6,r7,3
 4011ac4:	00c03fc4 	movi	r3,255
 4011ac8:	31808034 	orhi	r6,r6,512
 4011acc:	003fd506 	br	4011a24 <__reset+0xfb010a24>
 4011ad0:	303fe226 	beq	r6,zero,4011a5c <__reset+0xfb010a5c>
 4011ad4:	00802034 	movhi	r2,128
 4011ad8:	31801034 	orhi	r6,r6,64
 4011adc:	10bfffc4 	addi	r2,r2,-1
 4011ae0:	00ffffc4 	movi	r3,-1
 4011ae4:	308c703a 	and	r6,r6,r2
 4011ae8:	003fde06 	br	4011a64 <__reset+0xfb010a64>
 4011aec:	013ffa44 	movi	r4,-23
 4011af0:	19000e16 	blt	r3,r4,4011b2c <__truncdfsf2+0x168>
 4011af4:	01000784 	movi	r4,30
 4011af8:	20c9c83a 	sub	r4,r4,r3
 4011afc:	018007c4 	movi	r6,31
 4011b00:	39c02034 	orhi	r7,r7,128
 4011b04:	31000b16 	blt	r6,r4,4011b34 <__truncdfsf2+0x170>
 4011b08:	423f2084 	addi	r8,r8,-894
 4011b0c:	120c983a 	sll	r6,r2,r8
 4011b10:	3a0e983a 	sll	r7,r7,r8
 4011b14:	1104d83a 	srl	r2,r2,r4
 4011b18:	300cc03a 	cmpne	r6,r6,zero
 4011b1c:	31ceb03a 	or	r7,r6,r7
 4011b20:	388cb03a 	or	r6,r7,r2
 4011b24:	0007883a 	mov	r3,zero
 4011b28:	003fbe06 	br	4011a24 <__reset+0xfb010a24>
 4011b2c:	0007883a 	mov	r3,zero
 4011b30:	003fd906 	br	4011a98 <__reset+0xfb010a98>
 4011b34:	01bfff84 	movi	r6,-2
 4011b38:	30cdc83a 	sub	r6,r6,r3
 4011b3c:	00c00804 	movi	r3,32
 4011b40:	398cd83a 	srl	r6,r7,r6
 4011b44:	20c00726 	beq	r4,r3,4011b64 <__truncdfsf2+0x1a0>
 4011b48:	423f2884 	addi	r8,r8,-862
 4011b4c:	3a0e983a 	sll	r7,r7,r8
 4011b50:	3884b03a 	or	r2,r7,r2
 4011b54:	1004c03a 	cmpne	r2,r2,zero
 4011b58:	118cb03a 	or	r6,r2,r6
 4011b5c:	0007883a 	mov	r3,zero
 4011b60:	003fb006 	br	4011a24 <__reset+0xfb010a24>
 4011b64:	000f883a 	mov	r7,zero
 4011b68:	003ff906 	br	4011b50 <__reset+0xfb010b50>

04011b6c <__clzsi2>:
 4011b6c:	00bfffd4 	movui	r2,65535
 4011b70:	11000536 	bltu	r2,r4,4011b88 <__clzsi2+0x1c>
 4011b74:	00803fc4 	movi	r2,255
 4011b78:	11000f36 	bltu	r2,r4,4011bb8 <__clzsi2+0x4c>
 4011b7c:	00800804 	movi	r2,32
 4011b80:	0007883a 	mov	r3,zero
 4011b84:	00000506 	br	4011b9c <__clzsi2+0x30>
 4011b88:	00804034 	movhi	r2,256
 4011b8c:	10bfffc4 	addi	r2,r2,-1
 4011b90:	11000c2e 	bgeu	r2,r4,4011bc4 <__clzsi2+0x58>
 4011b94:	00800204 	movi	r2,8
 4011b98:	00c00604 	movi	r3,24
 4011b9c:	20c8d83a 	srl	r4,r4,r3
 4011ba0:	00c10234 	movhi	r3,1032
 4011ba4:	18c74e04 	addi	r3,r3,7480
 4011ba8:	1909883a 	add	r4,r3,r4
 4011bac:	20c00003 	ldbu	r3,0(r4)
 4011bb0:	10c5c83a 	sub	r2,r2,r3
 4011bb4:	f800283a 	ret
 4011bb8:	00800604 	movi	r2,24
 4011bbc:	00c00204 	movi	r3,8
 4011bc0:	003ff606 	br	4011b9c <__reset+0xfb010b9c>
 4011bc4:	00800404 	movi	r2,16
 4011bc8:	1007883a 	mov	r3,r2
 4011bcc:	003ff306 	br	4011b9c <__reset+0xfb010b9c>

04011bd0 <__errno>:
 4011bd0:	00810474 	movhi	r2,1041
 4011bd4:	109a5804 	addi	r2,r2,26976
 4011bd8:	10800017 	ldw	r2,0(r2)
 4011bdc:	f800283a 	ret

04011be0 <malloc>:
 4011be0:	00810474 	movhi	r2,1041
 4011be4:	109a5804 	addi	r2,r2,26976
 4011be8:	200b883a 	mov	r5,r4
 4011bec:	11000017 	ldw	r4,0(r2)
 4011bf0:	4011c081 	jmpi	4011c08 <_malloc_r>

04011bf4 <free>:
 4011bf4:	00810474 	movhi	r2,1041
 4011bf8:	109a5804 	addi	r2,r2,26976
 4011bfc:	200b883a 	mov	r5,r4
 4011c00:	11000017 	ldw	r4,0(r2)
 4011c04:	4018ff41 	jmpi	4018ff4 <_free_r>

04011c08 <_malloc_r>:
 4011c08:	defff504 	addi	sp,sp,-44
 4011c0c:	dc800315 	stw	r18,12(sp)
 4011c10:	dfc00a15 	stw	ra,40(sp)
 4011c14:	df000915 	stw	fp,36(sp)
 4011c18:	ddc00815 	stw	r23,32(sp)
 4011c1c:	dd800715 	stw	r22,28(sp)
 4011c20:	dd400615 	stw	r21,24(sp)
 4011c24:	dd000515 	stw	r20,20(sp)
 4011c28:	dcc00415 	stw	r19,16(sp)
 4011c2c:	dc400215 	stw	r17,8(sp)
 4011c30:	dc000115 	stw	r16,4(sp)
 4011c34:	288002c4 	addi	r2,r5,11
 4011c38:	00c00584 	movi	r3,22
 4011c3c:	2025883a 	mov	r18,r4
 4011c40:	18807f2e 	bgeu	r3,r2,4011e40 <_malloc_r+0x238>
 4011c44:	047ffe04 	movi	r17,-8
 4011c48:	1462703a 	and	r17,r2,r17
 4011c4c:	8800a316 	blt	r17,zero,4011edc <_malloc_r+0x2d4>
 4011c50:	8940a236 	bltu	r17,r5,4011edc <_malloc_r+0x2d4>
 4011c54:	401fd4c0 	call	401fd4c <__malloc_lock>
 4011c58:	00807dc4 	movi	r2,503
 4011c5c:	1441e92e 	bgeu	r2,r17,4012404 <_malloc_r+0x7fc>
 4011c60:	8804d27a 	srli	r2,r17,9
 4011c64:	1000a126 	beq	r2,zero,4011eec <_malloc_r+0x2e4>
 4011c68:	00c00104 	movi	r3,4
 4011c6c:	18811e36 	bltu	r3,r2,40120e8 <_malloc_r+0x4e0>
 4011c70:	8804d1ba 	srli	r2,r17,6
 4011c74:	12000e44 	addi	r8,r2,57
 4011c78:	11c00e04 	addi	r7,r2,56
 4011c7c:	4209883a 	add	r4,r8,r8
 4011c80:	04c10474 	movhi	r19,1041
 4011c84:	2109883a 	add	r4,r4,r4
 4011c88:	9cd48004 	addi	r19,r19,20992
 4011c8c:	2109883a 	add	r4,r4,r4
 4011c90:	9909883a 	add	r4,r19,r4
 4011c94:	24000117 	ldw	r16,4(r4)
 4011c98:	213ffe04 	addi	r4,r4,-8
 4011c9c:	24009726 	beq	r4,r16,4011efc <_malloc_r+0x2f4>
 4011ca0:	80800117 	ldw	r2,4(r16)
 4011ca4:	01bfff04 	movi	r6,-4
 4011ca8:	014003c4 	movi	r5,15
 4011cac:	1184703a 	and	r2,r2,r6
 4011cb0:	1447c83a 	sub	r3,r2,r17
 4011cb4:	28c00716 	blt	r5,r3,4011cd4 <_malloc_r+0xcc>
 4011cb8:	1800920e 	bge	r3,zero,4011f04 <_malloc_r+0x2fc>
 4011cbc:	84000317 	ldw	r16,12(r16)
 4011cc0:	24008e26 	beq	r4,r16,4011efc <_malloc_r+0x2f4>
 4011cc4:	80800117 	ldw	r2,4(r16)
 4011cc8:	1184703a 	and	r2,r2,r6
 4011ccc:	1447c83a 	sub	r3,r2,r17
 4011cd0:	28fff90e 	bge	r5,r3,4011cb8 <__reset+0xfb010cb8>
 4011cd4:	3809883a 	mov	r4,r7
 4011cd8:	01810474 	movhi	r6,1041
 4011cdc:	9c000417 	ldw	r16,16(r19)
 4011ce0:	31948004 	addi	r6,r6,20992
 4011ce4:	32000204 	addi	r8,r6,8
 4011ce8:	82013426 	beq	r16,r8,40121bc <_malloc_r+0x5b4>
 4011cec:	80c00117 	ldw	r3,4(r16)
 4011cf0:	00bfff04 	movi	r2,-4
 4011cf4:	188e703a 	and	r7,r3,r2
 4011cf8:	3c45c83a 	sub	r2,r7,r17
 4011cfc:	00c003c4 	movi	r3,15
 4011d00:	18811f16 	blt	r3,r2,4012180 <_malloc_r+0x578>
 4011d04:	32000515 	stw	r8,20(r6)
 4011d08:	32000415 	stw	r8,16(r6)
 4011d0c:	10007f0e 	bge	r2,zero,4011f0c <_malloc_r+0x304>
 4011d10:	00807fc4 	movi	r2,511
 4011d14:	11c0fd36 	bltu	r2,r7,401210c <_malloc_r+0x504>
 4011d18:	3806d0fa 	srli	r3,r7,3
 4011d1c:	01c00044 	movi	r7,1
 4011d20:	30800117 	ldw	r2,4(r6)
 4011d24:	19400044 	addi	r5,r3,1
 4011d28:	294b883a 	add	r5,r5,r5
 4011d2c:	1807d0ba 	srai	r3,r3,2
 4011d30:	294b883a 	add	r5,r5,r5
 4011d34:	294b883a 	add	r5,r5,r5
 4011d38:	298b883a 	add	r5,r5,r6
 4011d3c:	38c6983a 	sll	r3,r7,r3
 4011d40:	29c00017 	ldw	r7,0(r5)
 4011d44:	2a7ffe04 	addi	r9,r5,-8
 4011d48:	1886b03a 	or	r3,r3,r2
 4011d4c:	82400315 	stw	r9,12(r16)
 4011d50:	81c00215 	stw	r7,8(r16)
 4011d54:	30c00115 	stw	r3,4(r6)
 4011d58:	2c000015 	stw	r16,0(r5)
 4011d5c:	3c000315 	stw	r16,12(r7)
 4011d60:	2005d0ba 	srai	r2,r4,2
 4011d64:	01400044 	movi	r5,1
 4011d68:	288a983a 	sll	r5,r5,r2
 4011d6c:	19406f36 	bltu	r3,r5,4011f2c <_malloc_r+0x324>
 4011d70:	28c4703a 	and	r2,r5,r3
 4011d74:	10000a1e 	bne	r2,zero,4011da0 <_malloc_r+0x198>
 4011d78:	00bfff04 	movi	r2,-4
 4011d7c:	294b883a 	add	r5,r5,r5
 4011d80:	2088703a 	and	r4,r4,r2
 4011d84:	28c4703a 	and	r2,r5,r3
 4011d88:	21000104 	addi	r4,r4,4
 4011d8c:	1000041e 	bne	r2,zero,4011da0 <_malloc_r+0x198>
 4011d90:	294b883a 	add	r5,r5,r5
 4011d94:	28c4703a 	and	r2,r5,r3
 4011d98:	21000104 	addi	r4,r4,4
 4011d9c:	103ffc26 	beq	r2,zero,4011d90 <__reset+0xfb010d90>
 4011da0:	02bfff04 	movi	r10,-4
 4011da4:	024003c4 	movi	r9,15
 4011da8:	21800044 	addi	r6,r4,1
 4011dac:	318d883a 	add	r6,r6,r6
 4011db0:	318d883a 	add	r6,r6,r6
 4011db4:	318d883a 	add	r6,r6,r6
 4011db8:	998d883a 	add	r6,r19,r6
 4011dbc:	333ffe04 	addi	r12,r6,-8
 4011dc0:	2017883a 	mov	r11,r4
 4011dc4:	31800104 	addi	r6,r6,4
 4011dc8:	34000017 	ldw	r16,0(r6)
 4011dcc:	31fffd04 	addi	r7,r6,-12
 4011dd0:	81c0041e 	bne	r16,r7,4011de4 <_malloc_r+0x1dc>
 4011dd4:	0000fb06 	br	40121c4 <_malloc_r+0x5bc>
 4011dd8:	1801030e 	bge	r3,zero,40121e8 <_malloc_r+0x5e0>
 4011ddc:	84000317 	ldw	r16,12(r16)
 4011de0:	81c0f826 	beq	r16,r7,40121c4 <_malloc_r+0x5bc>
 4011de4:	80800117 	ldw	r2,4(r16)
 4011de8:	1284703a 	and	r2,r2,r10
 4011dec:	1447c83a 	sub	r3,r2,r17
 4011df0:	48fff90e 	bge	r9,r3,4011dd8 <__reset+0xfb010dd8>
 4011df4:	80800317 	ldw	r2,12(r16)
 4011df8:	81000217 	ldw	r4,8(r16)
 4011dfc:	89400054 	ori	r5,r17,1
 4011e00:	81400115 	stw	r5,4(r16)
 4011e04:	20800315 	stw	r2,12(r4)
 4011e08:	11000215 	stw	r4,8(r2)
 4011e0c:	8463883a 	add	r17,r16,r17
 4011e10:	9c400515 	stw	r17,20(r19)
 4011e14:	9c400415 	stw	r17,16(r19)
 4011e18:	18800054 	ori	r2,r3,1
 4011e1c:	88800115 	stw	r2,4(r17)
 4011e20:	8a000315 	stw	r8,12(r17)
 4011e24:	8a000215 	stw	r8,8(r17)
 4011e28:	88e3883a 	add	r17,r17,r3
 4011e2c:	88c00015 	stw	r3,0(r17)
 4011e30:	9009883a 	mov	r4,r18
 4011e34:	401fd700 	call	401fd70 <__malloc_unlock>
 4011e38:	80800204 	addi	r2,r16,8
 4011e3c:	00001b06 	br	4011eac <_malloc_r+0x2a4>
 4011e40:	04400404 	movi	r17,16
 4011e44:	89402536 	bltu	r17,r5,4011edc <_malloc_r+0x2d4>
 4011e48:	401fd4c0 	call	401fd4c <__malloc_lock>
 4011e4c:	00800184 	movi	r2,6
 4011e50:	01000084 	movi	r4,2
 4011e54:	04c10474 	movhi	r19,1041
 4011e58:	1085883a 	add	r2,r2,r2
 4011e5c:	9cd48004 	addi	r19,r19,20992
 4011e60:	1085883a 	add	r2,r2,r2
 4011e64:	9885883a 	add	r2,r19,r2
 4011e68:	14000117 	ldw	r16,4(r2)
 4011e6c:	10fffe04 	addi	r3,r2,-8
 4011e70:	80c0d926 	beq	r16,r3,40121d8 <_malloc_r+0x5d0>
 4011e74:	80c00117 	ldw	r3,4(r16)
 4011e78:	81000317 	ldw	r4,12(r16)
 4011e7c:	00bfff04 	movi	r2,-4
 4011e80:	1884703a 	and	r2,r3,r2
 4011e84:	81400217 	ldw	r5,8(r16)
 4011e88:	8085883a 	add	r2,r16,r2
 4011e8c:	10c00117 	ldw	r3,4(r2)
 4011e90:	29000315 	stw	r4,12(r5)
 4011e94:	21400215 	stw	r5,8(r4)
 4011e98:	18c00054 	ori	r3,r3,1
 4011e9c:	10c00115 	stw	r3,4(r2)
 4011ea0:	9009883a 	mov	r4,r18
 4011ea4:	401fd700 	call	401fd70 <__malloc_unlock>
 4011ea8:	80800204 	addi	r2,r16,8
 4011eac:	dfc00a17 	ldw	ra,40(sp)
 4011eb0:	df000917 	ldw	fp,36(sp)
 4011eb4:	ddc00817 	ldw	r23,32(sp)
 4011eb8:	dd800717 	ldw	r22,28(sp)
 4011ebc:	dd400617 	ldw	r21,24(sp)
 4011ec0:	dd000517 	ldw	r20,20(sp)
 4011ec4:	dcc00417 	ldw	r19,16(sp)
 4011ec8:	dc800317 	ldw	r18,12(sp)
 4011ecc:	dc400217 	ldw	r17,8(sp)
 4011ed0:	dc000117 	ldw	r16,4(sp)
 4011ed4:	dec00b04 	addi	sp,sp,44
 4011ed8:	f800283a 	ret
 4011edc:	00800304 	movi	r2,12
 4011ee0:	90800015 	stw	r2,0(r18)
 4011ee4:	0005883a 	mov	r2,zero
 4011ee8:	003ff006 	br	4011eac <__reset+0xfb010eac>
 4011eec:	01002004 	movi	r4,128
 4011ef0:	02001004 	movi	r8,64
 4011ef4:	01c00fc4 	movi	r7,63
 4011ef8:	003f6106 	br	4011c80 <__reset+0xfb010c80>
 4011efc:	4009883a 	mov	r4,r8
 4011f00:	003f7506 	br	4011cd8 <__reset+0xfb010cd8>
 4011f04:	81000317 	ldw	r4,12(r16)
 4011f08:	003fde06 	br	4011e84 <__reset+0xfb010e84>
 4011f0c:	81c5883a 	add	r2,r16,r7
 4011f10:	11400117 	ldw	r5,4(r2)
 4011f14:	9009883a 	mov	r4,r18
 4011f18:	29400054 	ori	r5,r5,1
 4011f1c:	11400115 	stw	r5,4(r2)
 4011f20:	401fd700 	call	401fd70 <__malloc_unlock>
 4011f24:	80800204 	addi	r2,r16,8
 4011f28:	003fe006 	br	4011eac <__reset+0xfb010eac>
 4011f2c:	9c000217 	ldw	r16,8(r19)
 4011f30:	00bfff04 	movi	r2,-4
 4011f34:	85800117 	ldw	r22,4(r16)
 4011f38:	b0ac703a 	and	r22,r22,r2
 4011f3c:	b4400336 	bltu	r22,r17,4011f4c <_malloc_r+0x344>
 4011f40:	b445c83a 	sub	r2,r22,r17
 4011f44:	00c003c4 	movi	r3,15
 4011f48:	18805d16 	blt	r3,r2,40120c0 <_malloc_r+0x4b8>
 4011f4c:	05c10474 	movhi	r23,1041
 4011f50:	00810474 	movhi	r2,1041
 4011f54:	109a6b04 	addi	r2,r2,27052
 4011f58:	bdda5904 	addi	r23,r23,26980
 4011f5c:	15400017 	ldw	r21,0(r2)
 4011f60:	b8c00017 	ldw	r3,0(r23)
 4011f64:	00bfffc4 	movi	r2,-1
 4011f68:	858d883a 	add	r6,r16,r22
 4011f6c:	8d6b883a 	add	r21,r17,r21
 4011f70:	1880ea26 	beq	r3,r2,401231c <_malloc_r+0x714>
 4011f74:	ad4403c4 	addi	r21,r21,4111
 4011f78:	00bc0004 	movi	r2,-4096
 4011f7c:	a8aa703a 	and	r21,r21,r2
 4011f80:	a80b883a 	mov	r5,r21
 4011f84:	9009883a 	mov	r4,r18
 4011f88:	d9800015 	stw	r6,0(sp)
 4011f8c:	40127c40 	call	40127c4 <_sbrk_r>
 4011f90:	1029883a 	mov	r20,r2
 4011f94:	00bfffc4 	movi	r2,-1
 4011f98:	d9800017 	ldw	r6,0(sp)
 4011f9c:	a080e826 	beq	r20,r2,4012340 <_malloc_r+0x738>
 4011fa0:	a180a636 	bltu	r20,r6,401223c <_malloc_r+0x634>
 4011fa4:	07010474 	movhi	fp,1041
 4011fa8:	e71a7704 	addi	fp,fp,27100
 4011fac:	e0800017 	ldw	r2,0(fp)
 4011fb0:	a887883a 	add	r3,r21,r2
 4011fb4:	e0c00015 	stw	r3,0(fp)
 4011fb8:	3500e626 	beq	r6,r20,4012354 <_malloc_r+0x74c>
 4011fbc:	b9000017 	ldw	r4,0(r23)
 4011fc0:	00bfffc4 	movi	r2,-1
 4011fc4:	2080ee26 	beq	r4,r2,4012380 <_malloc_r+0x778>
 4011fc8:	a185c83a 	sub	r2,r20,r6
 4011fcc:	10c5883a 	add	r2,r2,r3
 4011fd0:	e0800015 	stw	r2,0(fp)
 4011fd4:	a0c001cc 	andi	r3,r20,7
 4011fd8:	1800bc26 	beq	r3,zero,40122cc <_malloc_r+0x6c4>
 4011fdc:	a0e9c83a 	sub	r20,r20,r3
 4011fe0:	00840204 	movi	r2,4104
 4011fe4:	a5000204 	addi	r20,r20,8
 4011fe8:	10c7c83a 	sub	r3,r2,r3
 4011fec:	a545883a 	add	r2,r20,r21
 4011ff0:	1083ffcc 	andi	r2,r2,4095
 4011ff4:	18abc83a 	sub	r21,r3,r2
 4011ff8:	a80b883a 	mov	r5,r21
 4011ffc:	9009883a 	mov	r4,r18
 4012000:	40127c40 	call	40127c4 <_sbrk_r>
 4012004:	00ffffc4 	movi	r3,-1
 4012008:	10c0e126 	beq	r2,r3,4012390 <_malloc_r+0x788>
 401200c:	1505c83a 	sub	r2,r2,r20
 4012010:	1545883a 	add	r2,r2,r21
 4012014:	10800054 	ori	r2,r2,1
 4012018:	e0c00017 	ldw	r3,0(fp)
 401201c:	9d000215 	stw	r20,8(r19)
 4012020:	a0800115 	stw	r2,4(r20)
 4012024:	a8c7883a 	add	r3,r21,r3
 4012028:	e0c00015 	stw	r3,0(fp)
 401202c:	84c00e26 	beq	r16,r19,4012068 <_malloc_r+0x460>
 4012030:	018003c4 	movi	r6,15
 4012034:	3580a72e 	bgeu	r6,r22,40122d4 <_malloc_r+0x6cc>
 4012038:	81400117 	ldw	r5,4(r16)
 401203c:	013ffe04 	movi	r4,-8
 4012040:	b0bffd04 	addi	r2,r22,-12
 4012044:	1104703a 	and	r2,r2,r4
 4012048:	2900004c 	andi	r4,r5,1
 401204c:	2088b03a 	or	r4,r4,r2
 4012050:	81000115 	stw	r4,4(r16)
 4012054:	01400144 	movi	r5,5
 4012058:	8089883a 	add	r4,r16,r2
 401205c:	21400115 	stw	r5,4(r4)
 4012060:	21400215 	stw	r5,8(r4)
 4012064:	3080cd36 	bltu	r6,r2,401239c <_malloc_r+0x794>
 4012068:	00810474 	movhi	r2,1041
 401206c:	109a6a04 	addi	r2,r2,27048
 4012070:	11000017 	ldw	r4,0(r2)
 4012074:	20c0012e 	bgeu	r4,r3,401207c <_malloc_r+0x474>
 4012078:	10c00015 	stw	r3,0(r2)
 401207c:	00810474 	movhi	r2,1041
 4012080:	109a6904 	addi	r2,r2,27044
 4012084:	11000017 	ldw	r4,0(r2)
 4012088:	9c000217 	ldw	r16,8(r19)
 401208c:	20c0012e 	bgeu	r4,r3,4012094 <_malloc_r+0x48c>
 4012090:	10c00015 	stw	r3,0(r2)
 4012094:	80c00117 	ldw	r3,4(r16)
 4012098:	00bfff04 	movi	r2,-4
 401209c:	1886703a 	and	r3,r3,r2
 40120a0:	1c45c83a 	sub	r2,r3,r17
 40120a4:	1c400236 	bltu	r3,r17,40120b0 <_malloc_r+0x4a8>
 40120a8:	00c003c4 	movi	r3,15
 40120ac:	18800416 	blt	r3,r2,40120c0 <_malloc_r+0x4b8>
 40120b0:	9009883a 	mov	r4,r18
 40120b4:	401fd700 	call	401fd70 <__malloc_unlock>
 40120b8:	0005883a 	mov	r2,zero
 40120bc:	003f7b06 	br	4011eac <__reset+0xfb010eac>
 40120c0:	88c00054 	ori	r3,r17,1
 40120c4:	80c00115 	stw	r3,4(r16)
 40120c8:	8463883a 	add	r17,r16,r17
 40120cc:	10800054 	ori	r2,r2,1
 40120d0:	9c400215 	stw	r17,8(r19)
 40120d4:	88800115 	stw	r2,4(r17)
 40120d8:	9009883a 	mov	r4,r18
 40120dc:	401fd700 	call	401fd70 <__malloc_unlock>
 40120e0:	80800204 	addi	r2,r16,8
 40120e4:	003f7106 	br	4011eac <__reset+0xfb010eac>
 40120e8:	00c00504 	movi	r3,20
 40120ec:	18804a2e 	bgeu	r3,r2,4012218 <_malloc_r+0x610>
 40120f0:	00c01504 	movi	r3,84
 40120f4:	18806e36 	bltu	r3,r2,40122b0 <_malloc_r+0x6a8>
 40120f8:	8804d33a 	srli	r2,r17,12
 40120fc:	12001bc4 	addi	r8,r2,111
 4012100:	11c01b84 	addi	r7,r2,110
 4012104:	4209883a 	add	r4,r8,r8
 4012108:	003edd06 	br	4011c80 <__reset+0xfb010c80>
 401210c:	3804d27a 	srli	r2,r7,9
 4012110:	00c00104 	movi	r3,4
 4012114:	1880442e 	bgeu	r3,r2,4012228 <_malloc_r+0x620>
 4012118:	00c00504 	movi	r3,20
 401211c:	18808136 	bltu	r3,r2,4012324 <_malloc_r+0x71c>
 4012120:	11401704 	addi	r5,r2,92
 4012124:	10c016c4 	addi	r3,r2,91
 4012128:	294b883a 	add	r5,r5,r5
 401212c:	294b883a 	add	r5,r5,r5
 4012130:	294b883a 	add	r5,r5,r5
 4012134:	994b883a 	add	r5,r19,r5
 4012138:	28800017 	ldw	r2,0(r5)
 401213c:	01810474 	movhi	r6,1041
 4012140:	297ffe04 	addi	r5,r5,-8
 4012144:	31948004 	addi	r6,r6,20992
 4012148:	28806526 	beq	r5,r2,40122e0 <_malloc_r+0x6d8>
 401214c:	01bfff04 	movi	r6,-4
 4012150:	10c00117 	ldw	r3,4(r2)
 4012154:	1986703a 	and	r3,r3,r6
 4012158:	38c0022e 	bgeu	r7,r3,4012164 <_malloc_r+0x55c>
 401215c:	10800217 	ldw	r2,8(r2)
 4012160:	28bffb1e 	bne	r5,r2,4012150 <__reset+0xfb011150>
 4012164:	11400317 	ldw	r5,12(r2)
 4012168:	98c00117 	ldw	r3,4(r19)
 401216c:	81400315 	stw	r5,12(r16)
 4012170:	80800215 	stw	r2,8(r16)
 4012174:	2c000215 	stw	r16,8(r5)
 4012178:	14000315 	stw	r16,12(r2)
 401217c:	003ef806 	br	4011d60 <__reset+0xfb010d60>
 4012180:	88c00054 	ori	r3,r17,1
 4012184:	80c00115 	stw	r3,4(r16)
 4012188:	8463883a 	add	r17,r16,r17
 401218c:	34400515 	stw	r17,20(r6)
 4012190:	34400415 	stw	r17,16(r6)
 4012194:	10c00054 	ori	r3,r2,1
 4012198:	8a000315 	stw	r8,12(r17)
 401219c:	8a000215 	stw	r8,8(r17)
 40121a0:	88c00115 	stw	r3,4(r17)
 40121a4:	88a3883a 	add	r17,r17,r2
 40121a8:	88800015 	stw	r2,0(r17)
 40121ac:	9009883a 	mov	r4,r18
 40121b0:	401fd700 	call	401fd70 <__malloc_unlock>
 40121b4:	80800204 	addi	r2,r16,8
 40121b8:	003f3c06 	br	4011eac <__reset+0xfb010eac>
 40121bc:	30c00117 	ldw	r3,4(r6)
 40121c0:	003ee706 	br	4011d60 <__reset+0xfb010d60>
 40121c4:	5ac00044 	addi	r11,r11,1
 40121c8:	588000cc 	andi	r2,r11,3
 40121cc:	31800204 	addi	r6,r6,8
 40121d0:	103efd1e 	bne	r2,zero,4011dc8 <__reset+0xfb010dc8>
 40121d4:	00002406 	br	4012268 <_malloc_r+0x660>
 40121d8:	14000317 	ldw	r16,12(r2)
 40121dc:	143f251e 	bne	r2,r16,4011e74 <__reset+0xfb010e74>
 40121e0:	21000084 	addi	r4,r4,2
 40121e4:	003ebc06 	br	4011cd8 <__reset+0xfb010cd8>
 40121e8:	8085883a 	add	r2,r16,r2
 40121ec:	10c00117 	ldw	r3,4(r2)
 40121f0:	81000317 	ldw	r4,12(r16)
 40121f4:	81400217 	ldw	r5,8(r16)
 40121f8:	18c00054 	ori	r3,r3,1
 40121fc:	10c00115 	stw	r3,4(r2)
 4012200:	29000315 	stw	r4,12(r5)
 4012204:	21400215 	stw	r5,8(r4)
 4012208:	9009883a 	mov	r4,r18
 401220c:	401fd700 	call	401fd70 <__malloc_unlock>
 4012210:	80800204 	addi	r2,r16,8
 4012214:	003f2506 	br	4011eac <__reset+0xfb010eac>
 4012218:	12001704 	addi	r8,r2,92
 401221c:	11c016c4 	addi	r7,r2,91
 4012220:	4209883a 	add	r4,r8,r8
 4012224:	003e9606 	br	4011c80 <__reset+0xfb010c80>
 4012228:	3804d1ba 	srli	r2,r7,6
 401222c:	11400e44 	addi	r5,r2,57
 4012230:	10c00e04 	addi	r3,r2,56
 4012234:	294b883a 	add	r5,r5,r5
 4012238:	003fbc06 	br	401212c <__reset+0xfb01112c>
 401223c:	84ff5926 	beq	r16,r19,4011fa4 <__reset+0xfb010fa4>
 4012240:	00810474 	movhi	r2,1041
 4012244:	10948004 	addi	r2,r2,20992
 4012248:	14000217 	ldw	r16,8(r2)
 401224c:	00bfff04 	movi	r2,-4
 4012250:	80c00117 	ldw	r3,4(r16)
 4012254:	1886703a 	and	r3,r3,r2
 4012258:	003f9106 	br	40120a0 <__reset+0xfb0110a0>
 401225c:	60800217 	ldw	r2,8(r12)
 4012260:	213fffc4 	addi	r4,r4,-1
 4012264:	1300651e 	bne	r2,r12,40123fc <_malloc_r+0x7f4>
 4012268:	208000cc 	andi	r2,r4,3
 401226c:	633ffe04 	addi	r12,r12,-8
 4012270:	103ffa1e 	bne	r2,zero,401225c <__reset+0xfb01125c>
 4012274:	98800117 	ldw	r2,4(r19)
 4012278:	0146303a 	nor	r3,zero,r5
 401227c:	1884703a 	and	r2,r3,r2
 4012280:	98800115 	stw	r2,4(r19)
 4012284:	294b883a 	add	r5,r5,r5
 4012288:	117f2836 	bltu	r2,r5,4011f2c <__reset+0xfb010f2c>
 401228c:	283f2726 	beq	r5,zero,4011f2c <__reset+0xfb010f2c>
 4012290:	2886703a 	and	r3,r5,r2
 4012294:	5809883a 	mov	r4,r11
 4012298:	183ec31e 	bne	r3,zero,4011da8 <__reset+0xfb010da8>
 401229c:	294b883a 	add	r5,r5,r5
 40122a0:	2886703a 	and	r3,r5,r2
 40122a4:	21000104 	addi	r4,r4,4
 40122a8:	183ffc26 	beq	r3,zero,401229c <__reset+0xfb01129c>
 40122ac:	003ebe06 	br	4011da8 <__reset+0xfb010da8>
 40122b0:	00c05504 	movi	r3,340
 40122b4:	18801236 	bltu	r3,r2,4012300 <_malloc_r+0x6f8>
 40122b8:	8804d3fa 	srli	r2,r17,15
 40122bc:	12001e04 	addi	r8,r2,120
 40122c0:	11c01dc4 	addi	r7,r2,119
 40122c4:	4209883a 	add	r4,r8,r8
 40122c8:	003e6d06 	br	4011c80 <__reset+0xfb010c80>
 40122cc:	00c40004 	movi	r3,4096
 40122d0:	003f4606 	br	4011fec <__reset+0xfb010fec>
 40122d4:	00800044 	movi	r2,1
 40122d8:	a0800115 	stw	r2,4(r20)
 40122dc:	003f7406 	br	40120b0 <__reset+0xfb0110b0>
 40122e0:	1805d0ba 	srai	r2,r3,2
 40122e4:	01c00044 	movi	r7,1
 40122e8:	30c00117 	ldw	r3,4(r6)
 40122ec:	388e983a 	sll	r7,r7,r2
 40122f0:	2805883a 	mov	r2,r5
 40122f4:	38c6b03a 	or	r3,r7,r3
 40122f8:	30c00115 	stw	r3,4(r6)
 40122fc:	003f9b06 	br	401216c <__reset+0xfb01116c>
 4012300:	00c15504 	movi	r3,1364
 4012304:	18801a36 	bltu	r3,r2,4012370 <_malloc_r+0x768>
 4012308:	8804d4ba 	srli	r2,r17,18
 401230c:	12001f44 	addi	r8,r2,125
 4012310:	11c01f04 	addi	r7,r2,124
 4012314:	4209883a 	add	r4,r8,r8
 4012318:	003e5906 	br	4011c80 <__reset+0xfb010c80>
 401231c:	ad400404 	addi	r21,r21,16
 4012320:	003f1706 	br	4011f80 <__reset+0xfb010f80>
 4012324:	00c01504 	movi	r3,84
 4012328:	18802336 	bltu	r3,r2,40123b8 <_malloc_r+0x7b0>
 401232c:	3804d33a 	srli	r2,r7,12
 4012330:	11401bc4 	addi	r5,r2,111
 4012334:	10c01b84 	addi	r3,r2,110
 4012338:	294b883a 	add	r5,r5,r5
 401233c:	003f7b06 	br	401212c <__reset+0xfb01112c>
 4012340:	9c000217 	ldw	r16,8(r19)
 4012344:	00bfff04 	movi	r2,-4
 4012348:	80c00117 	ldw	r3,4(r16)
 401234c:	1886703a 	and	r3,r3,r2
 4012350:	003f5306 	br	40120a0 <__reset+0xfb0110a0>
 4012354:	3083ffcc 	andi	r2,r6,4095
 4012358:	103f181e 	bne	r2,zero,4011fbc <__reset+0xfb010fbc>
 401235c:	99000217 	ldw	r4,8(r19)
 4012360:	b545883a 	add	r2,r22,r21
 4012364:	10800054 	ori	r2,r2,1
 4012368:	20800115 	stw	r2,4(r4)
 401236c:	003f3e06 	br	4012068 <__reset+0xfb011068>
 4012370:	01003f84 	movi	r4,254
 4012374:	02001fc4 	movi	r8,127
 4012378:	01c01f84 	movi	r7,126
 401237c:	003e4006 	br	4011c80 <__reset+0xfb010c80>
 4012380:	00810474 	movhi	r2,1041
 4012384:	109a5904 	addi	r2,r2,26980
 4012388:	15000015 	stw	r20,0(r2)
 401238c:	003f1106 	br	4011fd4 <__reset+0xfb010fd4>
 4012390:	00800044 	movi	r2,1
 4012394:	002b883a 	mov	r21,zero
 4012398:	003f1f06 	br	4012018 <__reset+0xfb011018>
 401239c:	81400204 	addi	r5,r16,8
 40123a0:	9009883a 	mov	r4,r18
 40123a4:	4018ff40 	call	4018ff4 <_free_r>
 40123a8:	00810474 	movhi	r2,1041
 40123ac:	109a7704 	addi	r2,r2,27100
 40123b0:	10c00017 	ldw	r3,0(r2)
 40123b4:	003f2c06 	br	4012068 <__reset+0xfb011068>
 40123b8:	00c05504 	movi	r3,340
 40123bc:	18800536 	bltu	r3,r2,40123d4 <_malloc_r+0x7cc>
 40123c0:	3804d3fa 	srli	r2,r7,15
 40123c4:	11401e04 	addi	r5,r2,120
 40123c8:	10c01dc4 	addi	r3,r2,119
 40123cc:	294b883a 	add	r5,r5,r5
 40123d0:	003f5606 	br	401212c <__reset+0xfb01112c>
 40123d4:	00c15504 	movi	r3,1364
 40123d8:	18800536 	bltu	r3,r2,40123f0 <_malloc_r+0x7e8>
 40123dc:	3804d4ba 	srli	r2,r7,18
 40123e0:	11401f44 	addi	r5,r2,125
 40123e4:	10c01f04 	addi	r3,r2,124
 40123e8:	294b883a 	add	r5,r5,r5
 40123ec:	003f4f06 	br	401212c <__reset+0xfb01112c>
 40123f0:	01403f84 	movi	r5,254
 40123f4:	00c01f84 	movi	r3,126
 40123f8:	003f4c06 	br	401212c <__reset+0xfb01112c>
 40123fc:	98800117 	ldw	r2,4(r19)
 4012400:	003fa006 	br	4012284 <__reset+0xfb011284>
 4012404:	8808d0fa 	srli	r4,r17,3
 4012408:	20800044 	addi	r2,r4,1
 401240c:	1085883a 	add	r2,r2,r2
 4012410:	003e9006 	br	4011e54 <__reset+0xfb010e54>

04012414 <memcpy>:
 4012414:	defffd04 	addi	sp,sp,-12
 4012418:	dfc00215 	stw	ra,8(sp)
 401241c:	dc400115 	stw	r17,4(sp)
 4012420:	dc000015 	stw	r16,0(sp)
 4012424:	00c003c4 	movi	r3,15
 4012428:	2005883a 	mov	r2,r4
 401242c:	1980452e 	bgeu	r3,r6,4012544 <memcpy+0x130>
 4012430:	2906b03a 	or	r3,r5,r4
 4012434:	18c000cc 	andi	r3,r3,3
 4012438:	1800441e 	bne	r3,zero,401254c <memcpy+0x138>
 401243c:	347ffc04 	addi	r17,r6,-16
 4012440:	8822d13a 	srli	r17,r17,4
 4012444:	28c00104 	addi	r3,r5,4
 4012448:	23400104 	addi	r13,r4,4
 401244c:	8820913a 	slli	r16,r17,4
 4012450:	2b000204 	addi	r12,r5,8
 4012454:	22c00204 	addi	r11,r4,8
 4012458:	84000504 	addi	r16,r16,20
 401245c:	2a800304 	addi	r10,r5,12
 4012460:	22400304 	addi	r9,r4,12
 4012464:	2c21883a 	add	r16,r5,r16
 4012468:	2811883a 	mov	r8,r5
 401246c:	200f883a 	mov	r7,r4
 4012470:	41000017 	ldw	r4,0(r8)
 4012474:	1fc00017 	ldw	ra,0(r3)
 4012478:	63c00017 	ldw	r15,0(r12)
 401247c:	39000015 	stw	r4,0(r7)
 4012480:	53800017 	ldw	r14,0(r10)
 4012484:	6fc00015 	stw	ra,0(r13)
 4012488:	5bc00015 	stw	r15,0(r11)
 401248c:	4b800015 	stw	r14,0(r9)
 4012490:	18c00404 	addi	r3,r3,16
 4012494:	39c00404 	addi	r7,r7,16
 4012498:	42000404 	addi	r8,r8,16
 401249c:	6b400404 	addi	r13,r13,16
 40124a0:	63000404 	addi	r12,r12,16
 40124a4:	5ac00404 	addi	r11,r11,16
 40124a8:	52800404 	addi	r10,r10,16
 40124ac:	4a400404 	addi	r9,r9,16
 40124b0:	1c3fef1e 	bne	r3,r16,4012470 <__reset+0xfb011470>
 40124b4:	89c00044 	addi	r7,r17,1
 40124b8:	380e913a 	slli	r7,r7,4
 40124bc:	310003cc 	andi	r4,r6,15
 40124c0:	02c000c4 	movi	r11,3
 40124c4:	11c7883a 	add	r3,r2,r7
 40124c8:	29cb883a 	add	r5,r5,r7
 40124cc:	5900212e 	bgeu	r11,r4,4012554 <memcpy+0x140>
 40124d0:	1813883a 	mov	r9,r3
 40124d4:	2811883a 	mov	r8,r5
 40124d8:	200f883a 	mov	r7,r4
 40124dc:	42800017 	ldw	r10,0(r8)
 40124e0:	4a400104 	addi	r9,r9,4
 40124e4:	39ffff04 	addi	r7,r7,-4
 40124e8:	4abfff15 	stw	r10,-4(r9)
 40124ec:	42000104 	addi	r8,r8,4
 40124f0:	59fffa36 	bltu	r11,r7,40124dc <__reset+0xfb0114dc>
 40124f4:	213fff04 	addi	r4,r4,-4
 40124f8:	2008d0ba 	srli	r4,r4,2
 40124fc:	318000cc 	andi	r6,r6,3
 4012500:	21000044 	addi	r4,r4,1
 4012504:	2109883a 	add	r4,r4,r4
 4012508:	2109883a 	add	r4,r4,r4
 401250c:	1907883a 	add	r3,r3,r4
 4012510:	290b883a 	add	r5,r5,r4
 4012514:	30000626 	beq	r6,zero,4012530 <memcpy+0x11c>
 4012518:	198d883a 	add	r6,r3,r6
 401251c:	29c00003 	ldbu	r7,0(r5)
 4012520:	18c00044 	addi	r3,r3,1
 4012524:	29400044 	addi	r5,r5,1
 4012528:	19ffffc5 	stb	r7,-1(r3)
 401252c:	19bffb1e 	bne	r3,r6,401251c <__reset+0xfb01151c>
 4012530:	dfc00217 	ldw	ra,8(sp)
 4012534:	dc400117 	ldw	r17,4(sp)
 4012538:	dc000017 	ldw	r16,0(sp)
 401253c:	dec00304 	addi	sp,sp,12
 4012540:	f800283a 	ret
 4012544:	2007883a 	mov	r3,r4
 4012548:	003ff206 	br	4012514 <__reset+0xfb011514>
 401254c:	2007883a 	mov	r3,r4
 4012550:	003ff106 	br	4012518 <__reset+0xfb011518>
 4012554:	200d883a 	mov	r6,r4
 4012558:	003fee06 	br	4012514 <__reset+0xfb011514>

0401255c <memset>:
 401255c:	20c000cc 	andi	r3,r4,3
 4012560:	2005883a 	mov	r2,r4
 4012564:	18004426 	beq	r3,zero,4012678 <memset+0x11c>
 4012568:	31ffffc4 	addi	r7,r6,-1
 401256c:	30004026 	beq	r6,zero,4012670 <memset+0x114>
 4012570:	2813883a 	mov	r9,r5
 4012574:	200d883a 	mov	r6,r4
 4012578:	2007883a 	mov	r3,r4
 401257c:	00000406 	br	4012590 <memset+0x34>
 4012580:	3a3fffc4 	addi	r8,r7,-1
 4012584:	31800044 	addi	r6,r6,1
 4012588:	38003926 	beq	r7,zero,4012670 <memset+0x114>
 401258c:	400f883a 	mov	r7,r8
 4012590:	18c00044 	addi	r3,r3,1
 4012594:	32400005 	stb	r9,0(r6)
 4012598:	1a0000cc 	andi	r8,r3,3
 401259c:	403ff81e 	bne	r8,zero,4012580 <__reset+0xfb011580>
 40125a0:	010000c4 	movi	r4,3
 40125a4:	21c02d2e 	bgeu	r4,r7,401265c <memset+0x100>
 40125a8:	29003fcc 	andi	r4,r5,255
 40125ac:	200c923a 	slli	r6,r4,8
 40125b0:	3108b03a 	or	r4,r6,r4
 40125b4:	200c943a 	slli	r6,r4,16
 40125b8:	218cb03a 	or	r6,r4,r6
 40125bc:	010003c4 	movi	r4,15
 40125c0:	21c0182e 	bgeu	r4,r7,4012624 <memset+0xc8>
 40125c4:	3b3ffc04 	addi	r12,r7,-16
 40125c8:	6018d13a 	srli	r12,r12,4
 40125cc:	1a000104 	addi	r8,r3,4
 40125d0:	1ac00204 	addi	r11,r3,8
 40125d4:	6008913a 	slli	r4,r12,4
 40125d8:	1a800304 	addi	r10,r3,12
 40125dc:	1813883a 	mov	r9,r3
 40125e0:	21000504 	addi	r4,r4,20
 40125e4:	1909883a 	add	r4,r3,r4
 40125e8:	49800015 	stw	r6,0(r9)
 40125ec:	41800015 	stw	r6,0(r8)
 40125f0:	59800015 	stw	r6,0(r11)
 40125f4:	51800015 	stw	r6,0(r10)
 40125f8:	42000404 	addi	r8,r8,16
 40125fc:	4a400404 	addi	r9,r9,16
 4012600:	5ac00404 	addi	r11,r11,16
 4012604:	52800404 	addi	r10,r10,16
 4012608:	413ff71e 	bne	r8,r4,40125e8 <__reset+0xfb0115e8>
 401260c:	63000044 	addi	r12,r12,1
 4012610:	6018913a 	slli	r12,r12,4
 4012614:	39c003cc 	andi	r7,r7,15
 4012618:	010000c4 	movi	r4,3
 401261c:	1b07883a 	add	r3,r3,r12
 4012620:	21c00e2e 	bgeu	r4,r7,401265c <memset+0x100>
 4012624:	1813883a 	mov	r9,r3
 4012628:	3811883a 	mov	r8,r7
 401262c:	010000c4 	movi	r4,3
 4012630:	49800015 	stw	r6,0(r9)
 4012634:	423fff04 	addi	r8,r8,-4
 4012638:	4a400104 	addi	r9,r9,4
 401263c:	223ffc36 	bltu	r4,r8,4012630 <__reset+0xfb011630>
 4012640:	393fff04 	addi	r4,r7,-4
 4012644:	2008d0ba 	srli	r4,r4,2
 4012648:	39c000cc 	andi	r7,r7,3
 401264c:	21000044 	addi	r4,r4,1
 4012650:	2109883a 	add	r4,r4,r4
 4012654:	2109883a 	add	r4,r4,r4
 4012658:	1907883a 	add	r3,r3,r4
 401265c:	38000526 	beq	r7,zero,4012674 <memset+0x118>
 4012660:	19cf883a 	add	r7,r3,r7
 4012664:	19400005 	stb	r5,0(r3)
 4012668:	18c00044 	addi	r3,r3,1
 401266c:	38fffd1e 	bne	r7,r3,4012664 <__reset+0xfb011664>
 4012670:	f800283a 	ret
 4012674:	f800283a 	ret
 4012678:	2007883a 	mov	r3,r4
 401267c:	300f883a 	mov	r7,r6
 4012680:	003fc706 	br	40125a0 <__reset+0xfb0115a0>

04012684 <_printf_r>:
 4012684:	defffd04 	addi	sp,sp,-12
 4012688:	2805883a 	mov	r2,r5
 401268c:	dfc00015 	stw	ra,0(sp)
 4012690:	d9800115 	stw	r6,4(sp)
 4012694:	d9c00215 	stw	r7,8(sp)
 4012698:	21400217 	ldw	r5,8(r4)
 401269c:	d9c00104 	addi	r7,sp,4
 40126a0:	100d883a 	mov	r6,r2
 40126a4:	4014bdc0 	call	4014bdc <___vfprintf_internal_r>
 40126a8:	dfc00017 	ldw	ra,0(sp)
 40126ac:	dec00304 	addi	sp,sp,12
 40126b0:	f800283a 	ret

040126b4 <printf>:
 40126b4:	defffc04 	addi	sp,sp,-16
 40126b8:	dfc00015 	stw	ra,0(sp)
 40126bc:	d9400115 	stw	r5,4(sp)
 40126c0:	d9800215 	stw	r6,8(sp)
 40126c4:	d9c00315 	stw	r7,12(sp)
 40126c8:	00810474 	movhi	r2,1041
 40126cc:	109a5804 	addi	r2,r2,26976
 40126d0:	10800017 	ldw	r2,0(r2)
 40126d4:	200b883a 	mov	r5,r4
 40126d8:	d9800104 	addi	r6,sp,4
 40126dc:	11000217 	ldw	r4,8(r2)
 40126e0:	4016dd40 	call	4016dd4 <__vfprintf_internal>
 40126e4:	dfc00017 	ldw	ra,0(sp)
 40126e8:	dec00404 	addi	sp,sp,16
 40126ec:	f800283a 	ret

040126f0 <_puts_r>:
 40126f0:	defff604 	addi	sp,sp,-40
 40126f4:	dc000715 	stw	r16,28(sp)
 40126f8:	2021883a 	mov	r16,r4
 40126fc:	2809883a 	mov	r4,r5
 4012700:	dc400815 	stw	r17,32(sp)
 4012704:	dfc00915 	stw	ra,36(sp)
 4012708:	2823883a 	mov	r17,r5
 401270c:	401296c0 	call	401296c <strlen>
 4012710:	10c00044 	addi	r3,r2,1
 4012714:	d8800115 	stw	r2,4(sp)
 4012718:	00810234 	movhi	r2,1032
 401271c:	10878f04 	addi	r2,r2,7740
 4012720:	d8800215 	stw	r2,8(sp)
 4012724:	00800044 	movi	r2,1
 4012728:	d8800315 	stw	r2,12(sp)
 401272c:	00800084 	movi	r2,2
 4012730:	dc400015 	stw	r17,0(sp)
 4012734:	d8c00615 	stw	r3,24(sp)
 4012738:	dec00415 	stw	sp,16(sp)
 401273c:	d8800515 	stw	r2,20(sp)
 4012740:	80000226 	beq	r16,zero,401274c <_puts_r+0x5c>
 4012744:	80800e17 	ldw	r2,56(r16)
 4012748:	10001426 	beq	r2,zero,401279c <_puts_r+0xac>
 401274c:	81400217 	ldw	r5,8(r16)
 4012750:	2880030b 	ldhu	r2,12(r5)
 4012754:	10c8000c 	andi	r3,r2,8192
 4012758:	1800061e 	bne	r3,zero,4012774 <_puts_r+0x84>
 401275c:	29001917 	ldw	r4,100(r5)
 4012760:	00f7ffc4 	movi	r3,-8193
 4012764:	10880014 	ori	r2,r2,8192
 4012768:	20c6703a 	and	r3,r4,r3
 401276c:	2880030d 	sth	r2,12(r5)
 4012770:	28c01915 	stw	r3,100(r5)
 4012774:	d9800404 	addi	r6,sp,16
 4012778:	8009883a 	mov	r4,r16
 401277c:	40193040 	call	4019304 <__sfvwrite_r>
 4012780:	1000091e 	bne	r2,zero,40127a8 <_puts_r+0xb8>
 4012784:	00800284 	movi	r2,10
 4012788:	dfc00917 	ldw	ra,36(sp)
 401278c:	dc400817 	ldw	r17,32(sp)
 4012790:	dc000717 	ldw	r16,28(sp)
 4012794:	dec00a04 	addi	sp,sp,40
 4012798:	f800283a 	ret
 401279c:	8009883a 	mov	r4,r16
 40127a0:	4018e800 	call	4018e80 <__sinit>
 40127a4:	003fe906 	br	401274c <__reset+0xfb01174c>
 40127a8:	00bfffc4 	movi	r2,-1
 40127ac:	003ff606 	br	4012788 <__reset+0xfb011788>

040127b0 <puts>:
 40127b0:	00810474 	movhi	r2,1041
 40127b4:	109a5804 	addi	r2,r2,26976
 40127b8:	200b883a 	mov	r5,r4
 40127bc:	11000017 	ldw	r4,0(r2)
 40127c0:	40126f01 	jmpi	40126f0 <_puts_r>

040127c4 <_sbrk_r>:
 40127c4:	defffd04 	addi	sp,sp,-12
 40127c8:	dc000015 	stw	r16,0(sp)
 40127cc:	04010474 	movhi	r16,1041
 40127d0:	dc400115 	stw	r17,4(sp)
 40127d4:	841a6c04 	addi	r16,r16,27056
 40127d8:	2023883a 	mov	r17,r4
 40127dc:	2809883a 	mov	r4,r5
 40127e0:	dfc00215 	stw	ra,8(sp)
 40127e4:	80000015 	stw	zero,0(r16)
 40127e8:	40201840 	call	4020184 <sbrk>
 40127ec:	00ffffc4 	movi	r3,-1
 40127f0:	10c00526 	beq	r2,r3,4012808 <_sbrk_r+0x44>
 40127f4:	dfc00217 	ldw	ra,8(sp)
 40127f8:	dc400117 	ldw	r17,4(sp)
 40127fc:	dc000017 	ldw	r16,0(sp)
 4012800:	dec00304 	addi	sp,sp,12
 4012804:	f800283a 	ret
 4012808:	80c00017 	ldw	r3,0(r16)
 401280c:	183ff926 	beq	r3,zero,40127f4 <__reset+0xfb0117f4>
 4012810:	88c00015 	stw	r3,0(r17)
 4012814:	003ff706 	br	40127f4 <__reset+0xfb0117f4>

04012818 <_sprintf_r>:
 4012818:	deffe404 	addi	sp,sp,-112
 401281c:	2807883a 	mov	r3,r5
 4012820:	dfc01a15 	stw	ra,104(sp)
 4012824:	d9c01b15 	stw	r7,108(sp)
 4012828:	00a00034 	movhi	r2,32768
 401282c:	10bfffc4 	addi	r2,r2,-1
 4012830:	02008204 	movi	r8,520
 4012834:	d8800215 	stw	r2,8(sp)
 4012838:	d8800515 	stw	r2,20(sp)
 401283c:	d9c01b04 	addi	r7,sp,108
 4012840:	d80b883a 	mov	r5,sp
 4012844:	00bfffc4 	movi	r2,-1
 4012848:	d8c00015 	stw	r3,0(sp)
 401284c:	d8c00415 	stw	r3,16(sp)
 4012850:	da00030d 	sth	r8,12(sp)
 4012854:	d880038d 	sth	r2,14(sp)
 4012858:	4012a040 	call	4012a04 <___svfprintf_internal_r>
 401285c:	d8c00017 	ldw	r3,0(sp)
 4012860:	18000005 	stb	zero,0(r3)
 4012864:	dfc01a17 	ldw	ra,104(sp)
 4012868:	dec01c04 	addi	sp,sp,112
 401286c:	f800283a 	ret

04012870 <sprintf>:
 4012870:	deffe304 	addi	sp,sp,-116
 4012874:	2007883a 	mov	r3,r4
 4012878:	dfc01a15 	stw	ra,104(sp)
 401287c:	d9801b15 	stw	r6,108(sp)
 4012880:	d9c01c15 	stw	r7,112(sp)
 4012884:	01010474 	movhi	r4,1041
 4012888:	211a5804 	addi	r4,r4,26976
 401288c:	21000017 	ldw	r4,0(r4)
 4012890:	00a00034 	movhi	r2,32768
 4012894:	10bfffc4 	addi	r2,r2,-1
 4012898:	280d883a 	mov	r6,r5
 401289c:	02008204 	movi	r8,520
 40128a0:	d8800215 	stw	r2,8(sp)
 40128a4:	d8800515 	stw	r2,20(sp)
 40128a8:	d9c01b04 	addi	r7,sp,108
 40128ac:	d80b883a 	mov	r5,sp
 40128b0:	00bfffc4 	movi	r2,-1
 40128b4:	d8c00015 	stw	r3,0(sp)
 40128b8:	d8c00415 	stw	r3,16(sp)
 40128bc:	da00030d 	sth	r8,12(sp)
 40128c0:	d880038d 	sth	r2,14(sp)
 40128c4:	4012a040 	call	4012a04 <___svfprintf_internal_r>
 40128c8:	d8c00017 	ldw	r3,0(sp)
 40128cc:	18000005 	stb	zero,0(r3)
 40128d0:	dfc01a17 	ldw	ra,104(sp)
 40128d4:	dec01d04 	addi	sp,sp,116
 40128d8:	f800283a 	ret

040128dc <strcpy>:
 40128dc:	2906b03a 	or	r3,r5,r4
 40128e0:	18c000cc 	andi	r3,r3,3
 40128e4:	2005883a 	mov	r2,r4
 40128e8:	1800161e 	bne	r3,zero,4012944 <strcpy+0x68>
 40128ec:	29c00017 	ldw	r7,0(r5)
 40128f0:	02ffbff4 	movhi	r11,65279
 40128f4:	5affbfc4 	addi	r11,r11,-257
 40128f8:	02a02074 	movhi	r10,32897
 40128fc:	01c6303a 	nor	r3,zero,r7
 4012900:	3ac9883a 	add	r4,r7,r11
 4012904:	52a02004 	addi	r10,r10,-32640
 4012908:	20c6703a 	and	r3,r4,r3
 401290c:	1a86703a 	and	r3,r3,r10
 4012910:	18000c1e 	bne	r3,zero,4012944 <strcpy+0x68>
 4012914:	1011883a 	mov	r8,r2
 4012918:	41c00015 	stw	r7,0(r8)
 401291c:	29400104 	addi	r5,r5,4
 4012920:	29c00017 	ldw	r7,0(r5)
 4012924:	41800104 	addi	r6,r8,4
 4012928:	3011883a 	mov	r8,r6
 401292c:	3ad3883a 	add	r9,r7,r11
 4012930:	01c6303a 	nor	r3,zero,r7
 4012934:	48c6703a 	and	r3,r9,r3
 4012938:	1a86703a 	and	r3,r3,r10
 401293c:	183ff626 	beq	r3,zero,4012918 <__reset+0xfb011918>
 4012940:	00000106 	br	4012948 <strcpy+0x6c>
 4012944:	100d883a 	mov	r6,r2
 4012948:	28c00003 	ldbu	r3,0(r5)
 401294c:	31800044 	addi	r6,r6,1
 4012950:	29400044 	addi	r5,r5,1
 4012954:	30ffffc5 	stb	r3,-1(r6)
 4012958:	18c03fcc 	andi	r3,r3,255
 401295c:	18c0201c 	xori	r3,r3,128
 4012960:	18ffe004 	addi	r3,r3,-128
 4012964:	183ff81e 	bne	r3,zero,4012948 <__reset+0xfb011948>
 4012968:	f800283a 	ret

0401296c <strlen>:
 401296c:	208000cc 	andi	r2,r4,3
 4012970:	10002026 	beq	r2,zero,40129f4 <strlen+0x88>
 4012974:	20800007 	ldb	r2,0(r4)
 4012978:	10002026 	beq	r2,zero,40129fc <strlen+0x90>
 401297c:	2005883a 	mov	r2,r4
 4012980:	00000206 	br	401298c <strlen+0x20>
 4012984:	10c00007 	ldb	r3,0(r2)
 4012988:	18001826 	beq	r3,zero,40129ec <strlen+0x80>
 401298c:	10800044 	addi	r2,r2,1
 4012990:	10c000cc 	andi	r3,r2,3
 4012994:	183ffb1e 	bne	r3,zero,4012984 <__reset+0xfb011984>
 4012998:	10c00017 	ldw	r3,0(r2)
 401299c:	01ffbff4 	movhi	r7,65279
 40129a0:	39ffbfc4 	addi	r7,r7,-257
 40129a4:	00ca303a 	nor	r5,zero,r3
 40129a8:	01a02074 	movhi	r6,32897
 40129ac:	19c7883a 	add	r3,r3,r7
 40129b0:	31a02004 	addi	r6,r6,-32640
 40129b4:	1946703a 	and	r3,r3,r5
 40129b8:	1986703a 	and	r3,r3,r6
 40129bc:	1800091e 	bne	r3,zero,40129e4 <strlen+0x78>
 40129c0:	10800104 	addi	r2,r2,4
 40129c4:	10c00017 	ldw	r3,0(r2)
 40129c8:	19cb883a 	add	r5,r3,r7
 40129cc:	00c6303a 	nor	r3,zero,r3
 40129d0:	28c6703a 	and	r3,r5,r3
 40129d4:	1986703a 	and	r3,r3,r6
 40129d8:	183ff926 	beq	r3,zero,40129c0 <__reset+0xfb0119c0>
 40129dc:	00000106 	br	40129e4 <strlen+0x78>
 40129e0:	10800044 	addi	r2,r2,1
 40129e4:	10c00007 	ldb	r3,0(r2)
 40129e8:	183ffd1e 	bne	r3,zero,40129e0 <__reset+0xfb0119e0>
 40129ec:	1105c83a 	sub	r2,r2,r4
 40129f0:	f800283a 	ret
 40129f4:	2005883a 	mov	r2,r4
 40129f8:	003fe706 	br	4012998 <__reset+0xfb011998>
 40129fc:	0005883a 	mov	r2,zero
 4012a00:	f800283a 	ret

04012a04 <___svfprintf_internal_r>:
 4012a04:	deffb704 	addi	sp,sp,-292
 4012a08:	dfc04815 	stw	ra,288(sp)
 4012a0c:	ddc04615 	stw	r23,280(sp)
 4012a10:	d9402c15 	stw	r5,176(sp)
 4012a14:	d9003915 	stw	r4,228(sp)
 4012a18:	302f883a 	mov	r23,r6
 4012a1c:	d9c02d15 	stw	r7,180(sp)
 4012a20:	df004715 	stw	fp,284(sp)
 4012a24:	dd804515 	stw	r22,276(sp)
 4012a28:	dd404415 	stw	r21,272(sp)
 4012a2c:	dd004315 	stw	r20,268(sp)
 4012a30:	dcc04215 	stw	r19,264(sp)
 4012a34:	dc804115 	stw	r18,260(sp)
 4012a38:	dc404015 	stw	r17,256(sp)
 4012a3c:	dc003f15 	stw	r16,252(sp)
 4012a40:	40199f40 	call	40199f4 <_localeconv_r>
 4012a44:	10800017 	ldw	r2,0(r2)
 4012a48:	1009883a 	mov	r4,r2
 4012a4c:	d8803415 	stw	r2,208(sp)
 4012a50:	401296c0 	call	401296c <strlen>
 4012a54:	d8c02c17 	ldw	r3,176(sp)
 4012a58:	d8803815 	stw	r2,224(sp)
 4012a5c:	1880030b 	ldhu	r2,12(r3)
 4012a60:	1080200c 	andi	r2,r2,128
 4012a64:	10000226 	beq	r2,zero,4012a70 <___svfprintf_internal_r+0x6c>
 4012a68:	18800417 	ldw	r2,16(r3)
 4012a6c:	10067f26 	beq	r2,zero,401446c <___svfprintf_internal_r+0x1a68>
 4012a70:	dcc03917 	ldw	r19,228(sp)
 4012a74:	d8c00404 	addi	r3,sp,16
 4012a78:	05410234 	movhi	r21,1032
 4012a7c:	d9001e04 	addi	r4,sp,120
 4012a80:	ad47a084 	addi	r21,r21,7810
 4012a84:	d8c01e15 	stw	r3,120(sp)
 4012a88:	d8002015 	stw	zero,128(sp)
 4012a8c:	d8001f15 	stw	zero,124(sp)
 4012a90:	d8003315 	stw	zero,204(sp)
 4012a94:	d8003615 	stw	zero,216(sp)
 4012a98:	d8003715 	stw	zero,220(sp)
 4012a9c:	1811883a 	mov	r8,r3
 4012aa0:	d8003a15 	stw	zero,232(sp)
 4012aa4:	d8003b15 	stw	zero,236(sp)
 4012aa8:	d8002f15 	stw	zero,188(sp)
 4012aac:	d9002815 	stw	r4,160(sp)
 4012ab0:	b8800007 	ldb	r2,0(r23)
 4012ab4:	10026726 	beq	r2,zero,4013454 <___svfprintf_internal_r+0xa50>
 4012ab8:	00c00944 	movi	r3,37
 4012abc:	b821883a 	mov	r16,r23
 4012ac0:	10c0021e 	bne	r2,r3,4012acc <___svfprintf_internal_r+0xc8>
 4012ac4:	00001406 	br	4012b18 <___svfprintf_internal_r+0x114>
 4012ac8:	10c00326 	beq	r2,r3,4012ad8 <___svfprintf_internal_r+0xd4>
 4012acc:	84000044 	addi	r16,r16,1
 4012ad0:	80800007 	ldb	r2,0(r16)
 4012ad4:	103ffc1e 	bne	r2,zero,4012ac8 <__reset+0xfb011ac8>
 4012ad8:	85e3c83a 	sub	r17,r16,r23
 4012adc:	88000e26 	beq	r17,zero,4012b18 <___svfprintf_internal_r+0x114>
 4012ae0:	d8c02017 	ldw	r3,128(sp)
 4012ae4:	d8801f17 	ldw	r2,124(sp)
 4012ae8:	45c00015 	stw	r23,0(r8)
 4012aec:	1c47883a 	add	r3,r3,r17
 4012af0:	10800044 	addi	r2,r2,1
 4012af4:	d8c02015 	stw	r3,128(sp)
 4012af8:	44400115 	stw	r17,4(r8)
 4012afc:	d8801f15 	stw	r2,124(sp)
 4012b00:	00c001c4 	movi	r3,7
 4012b04:	18809716 	blt	r3,r2,4012d64 <___svfprintf_internal_r+0x360>
 4012b08:	42000204 	addi	r8,r8,8
 4012b0c:	d9402f17 	ldw	r5,188(sp)
 4012b10:	2c4b883a 	add	r5,r5,r17
 4012b14:	d9402f15 	stw	r5,188(sp)
 4012b18:	80800007 	ldb	r2,0(r16)
 4012b1c:	10009826 	beq	r2,zero,4012d80 <___svfprintf_internal_r+0x37c>
 4012b20:	84400047 	ldb	r17,1(r16)
 4012b24:	00bfffc4 	movi	r2,-1
 4012b28:	85c00044 	addi	r23,r16,1
 4012b2c:	d8002785 	stb	zero,158(sp)
 4012b30:	0007883a 	mov	r3,zero
 4012b34:	000f883a 	mov	r7,zero
 4012b38:	d8802915 	stw	r2,164(sp)
 4012b3c:	d8003115 	stw	zero,196(sp)
 4012b40:	0025883a 	mov	r18,zero
 4012b44:	01401604 	movi	r5,88
 4012b48:	01800244 	movi	r6,9
 4012b4c:	02800a84 	movi	r10,42
 4012b50:	02401b04 	movi	r9,108
 4012b54:	bdc00044 	addi	r23,r23,1
 4012b58:	88bff804 	addi	r2,r17,-32
 4012b5c:	2882f036 	bltu	r5,r2,4013720 <___svfprintf_internal_r+0xd1c>
 4012b60:	100490ba 	slli	r2,r2,2
 4012b64:	01010074 	movhi	r4,1025
 4012b68:	210ade04 	addi	r4,r4,11128
 4012b6c:	1105883a 	add	r2,r2,r4
 4012b70:	10800017 	ldw	r2,0(r2)
 4012b74:	1000683a 	jmp	r2
 4012b78:	04013688 	cmpgei	r16,zero,1242
 4012b7c:	04013720 	cmpeqi	r16,zero,1244
 4012b80:	04013720 	cmpeqi	r16,zero,1244
 4012b84:	0401367c 	xorhi	r16,zero,1241
 4012b88:	04013720 	cmpeqi	r16,zero,1244
 4012b8c:	04013720 	cmpeqi	r16,zero,1244
 4012b90:	04013720 	cmpeqi	r16,zero,1244
 4012b94:	04013720 	cmpeqi	r16,zero,1244
 4012b98:	04013720 	cmpeqi	r16,zero,1244
 4012b9c:	04013720 	cmpeqi	r16,zero,1244
 4012ba0:	04012ddc 	xori	r16,zero,1207
 4012ba4:	040135b8 	rdprs	r16,zero,1238
 4012ba8:	04013720 	cmpeqi	r16,zero,1244
 4012bac:	04012cec 	andhi	r16,zero,1203
 4012bb0:	04012e04 	movi	r16,1208
 4012bb4:	04013720 	cmpeqi	r16,zero,1244
 4012bb8:	04012e78 	rdprs	r16,zero,1209
 4012bbc:	04012e44 	movi	r16,1209
 4012bc0:	04012e44 	movi	r16,1209
 4012bc4:	04012e44 	movi	r16,1209
 4012bc8:	04012e44 	movi	r16,1209
 4012bcc:	04012e44 	movi	r16,1209
 4012bd0:	04012e44 	movi	r16,1209
 4012bd4:	04012e44 	movi	r16,1209
 4012bd8:	04012e44 	movi	r16,1209
 4012bdc:	04012e44 	movi	r16,1209
 4012be0:	04013720 	cmpeqi	r16,zero,1244
 4012be4:	04013720 	cmpeqi	r16,zero,1244
 4012be8:	04013720 	cmpeqi	r16,zero,1244
 4012bec:	04013720 	cmpeqi	r16,zero,1244
 4012bf0:	04013720 	cmpeqi	r16,zero,1244
 4012bf4:	04013720 	cmpeqi	r16,zero,1244
 4012bf8:	04013720 	cmpeqi	r16,zero,1244
 4012bfc:	04013720 	cmpeqi	r16,zero,1244
 4012c00:	04013720 	cmpeqi	r16,zero,1244
 4012c04:	04013720 	cmpeqi	r16,zero,1244
 4012c08:	04012f30 	cmpltui	r16,zero,1212
 4012c0c:	04012e84 	movi	r16,1210
 4012c10:	04013720 	cmpeqi	r16,zero,1244
 4012c14:	04012e84 	movi	r16,1210
 4012c18:	04013720 	cmpeqi	r16,zero,1244
 4012c1c:	04013720 	cmpeqi	r16,zero,1244
 4012c20:	04013720 	cmpeqi	r16,zero,1244
 4012c24:	04013720 	cmpeqi	r16,zero,1244
 4012c28:	04012f24 	muli	r16,zero,1212
 4012c2c:	04013720 	cmpeqi	r16,zero,1244
 4012c30:	04013720 	cmpeqi	r16,zero,1244
 4012c34:	04012fec 	andhi	r16,zero,1215
 4012c38:	04013720 	cmpeqi	r16,zero,1244
 4012c3c:	04013720 	cmpeqi	r16,zero,1244
 4012c40:	04013720 	cmpeqi	r16,zero,1244
 4012c44:	04013720 	cmpeqi	r16,zero,1244
 4012c48:	04013720 	cmpeqi	r16,zero,1244
 4012c4c:	0401345c 	xori	r16,zero,1233
 4012c50:	04013720 	cmpeqi	r16,zero,1244
 4012c54:	04013720 	cmpeqi	r16,zero,1244
 4012c58:	040134bc 	xorhi	r16,zero,1234
 4012c5c:	04013720 	cmpeqi	r16,zero,1244
 4012c60:	04013720 	cmpeqi	r16,zero,1244
 4012c64:	04013720 	cmpeqi	r16,zero,1244
 4012c68:	04013720 	cmpeqi	r16,zero,1244
 4012c6c:	04013720 	cmpeqi	r16,zero,1244
 4012c70:	04013720 	cmpeqi	r16,zero,1244
 4012c74:	04013720 	cmpeqi	r16,zero,1244
 4012c78:	04013720 	cmpeqi	r16,zero,1244
 4012c7c:	04013720 	cmpeqi	r16,zero,1244
 4012c80:	04013720 	cmpeqi	r16,zero,1244
 4012c84:	0401356c 	andhi	r16,zero,1237
 4012c88:	040136a8 	cmpgeui	r16,zero,1242
 4012c8c:	04012e84 	movi	r16,1210
 4012c90:	04012e84 	movi	r16,1210
 4012c94:	04012e84 	movi	r16,1210
 4012c98:	040136fc 	xorhi	r16,zero,1243
 4012c9c:	040136a8 	cmpgeui	r16,zero,1242
 4012ca0:	04013720 	cmpeqi	r16,zero,1244
 4012ca4:	04013720 	cmpeqi	r16,zero,1244
 4012ca8:	040136b8 	rdprs	r16,zero,1242
 4012cac:	04013720 	cmpeqi	r16,zero,1244
 4012cb0:	040136c8 	cmpgei	r16,zero,1243
 4012cb4:	040135a8 	cmpgeui	r16,zero,1238
 4012cb8:	04012cf8 	rdprs	r16,zero,1203
 4012cbc:	040135c8 	cmpgei	r16,zero,1239
 4012cc0:	04013720 	cmpeqi	r16,zero,1244
 4012cc4:	040135d4 	movui	r16,1239
 4012cc8:	04013720 	cmpeqi	r16,zero,1244
 4012ccc:	04013630 	cmpltui	r16,zero,1240
 4012cd0:	04013720 	cmpeqi	r16,zero,1244
 4012cd4:	04013720 	cmpeqi	r16,zero,1244
 4012cd8:	04013640 	call	401364 <__alt_mem_sdram-0x3bfec9c>
 4012cdc:	d9003117 	ldw	r4,196(sp)
 4012ce0:	d8802d15 	stw	r2,180(sp)
 4012ce4:	0109c83a 	sub	r4,zero,r4
 4012ce8:	d9003115 	stw	r4,196(sp)
 4012cec:	94800114 	ori	r18,r18,4
 4012cf0:	bc400007 	ldb	r17,0(r23)
 4012cf4:	003f9706 	br	4012b54 <__reset+0xfb011b54>
 4012cf8:	00800c04 	movi	r2,48
 4012cfc:	d9002d17 	ldw	r4,180(sp)
 4012d00:	d9402917 	ldw	r5,164(sp)
 4012d04:	d8802705 	stb	r2,156(sp)
 4012d08:	00801e04 	movi	r2,120
 4012d0c:	d8802745 	stb	r2,157(sp)
 4012d10:	d8002785 	stb	zero,158(sp)
 4012d14:	20c00104 	addi	r3,r4,4
 4012d18:	25000017 	ldw	r20,0(r4)
 4012d1c:	002d883a 	mov	r22,zero
 4012d20:	90800094 	ori	r2,r18,2
 4012d24:	28028616 	blt	r5,zero,4013740 <___svfprintf_internal_r+0xd3c>
 4012d28:	00bfdfc4 	movi	r2,-129
 4012d2c:	90a4703a 	and	r18,r18,r2
 4012d30:	d8c02d15 	stw	r3,180(sp)
 4012d34:	94800094 	ori	r18,r18,2
 4012d38:	a002731e 	bne	r20,zero,4013708 <___svfprintf_internal_r+0xd04>
 4012d3c:	00810234 	movhi	r2,1032
 4012d40:	10879904 	addi	r2,r2,7780
 4012d44:	d8803a15 	stw	r2,232(sp)
 4012d48:	04401e04 	movi	r17,120
 4012d4c:	d8c02917 	ldw	r3,164(sp)
 4012d50:	0039883a 	mov	fp,zero
 4012d54:	1801d526 	beq	r3,zero,40134ac <___svfprintf_internal_r+0xaa8>
 4012d58:	0029883a 	mov	r20,zero
 4012d5c:	002d883a 	mov	r22,zero
 4012d60:	0001f106 	br	4013528 <___svfprintf_internal_r+0xb24>
 4012d64:	d9402c17 	ldw	r5,176(sp)
 4012d68:	d9801e04 	addi	r6,sp,120
 4012d6c:	9809883a 	mov	r4,r19
 4012d70:	401b5980 	call	401b598 <__ssprint_r>
 4012d74:	1000081e 	bne	r2,zero,4012d98 <___svfprintf_internal_r+0x394>
 4012d78:	da000404 	addi	r8,sp,16
 4012d7c:	003f6306 	br	4012b0c <__reset+0xfb011b0c>
 4012d80:	d8802017 	ldw	r2,128(sp)
 4012d84:	10000426 	beq	r2,zero,4012d98 <___svfprintf_internal_r+0x394>
 4012d88:	d9402c17 	ldw	r5,176(sp)
 4012d8c:	d9003917 	ldw	r4,228(sp)
 4012d90:	d9801e04 	addi	r6,sp,120
 4012d94:	401b5980 	call	401b598 <__ssprint_r>
 4012d98:	d8802c17 	ldw	r2,176(sp)
 4012d9c:	10c0030b 	ldhu	r3,12(r2)
 4012da0:	d8802f17 	ldw	r2,188(sp)
 4012da4:	18c0100c 	andi	r3,r3,64
 4012da8:	1805f51e 	bne	r3,zero,4014580 <___svfprintf_internal_r+0x1b7c>
 4012dac:	dfc04817 	ldw	ra,288(sp)
 4012db0:	df004717 	ldw	fp,284(sp)
 4012db4:	ddc04617 	ldw	r23,280(sp)
 4012db8:	dd804517 	ldw	r22,276(sp)
 4012dbc:	dd404417 	ldw	r21,272(sp)
 4012dc0:	dd004317 	ldw	r20,268(sp)
 4012dc4:	dcc04217 	ldw	r19,264(sp)
 4012dc8:	dc804117 	ldw	r18,260(sp)
 4012dcc:	dc404017 	ldw	r17,256(sp)
 4012dd0:	dc003f17 	ldw	r16,252(sp)
 4012dd4:	dec04904 	addi	sp,sp,292
 4012dd8:	f800283a 	ret
 4012ddc:	d8802d17 	ldw	r2,180(sp)
 4012de0:	d9002d17 	ldw	r4,180(sp)
 4012de4:	10800017 	ldw	r2,0(r2)
 4012de8:	d8803115 	stw	r2,196(sp)
 4012dec:	20800104 	addi	r2,r4,4
 4012df0:	d9003117 	ldw	r4,196(sp)
 4012df4:	203fb916 	blt	r4,zero,4012cdc <__reset+0xfb011cdc>
 4012df8:	d8802d15 	stw	r2,180(sp)
 4012dfc:	bc400007 	ldb	r17,0(r23)
 4012e00:	003f5406 	br	4012b54 <__reset+0xfb011b54>
 4012e04:	bc400007 	ldb	r17,0(r23)
 4012e08:	bac00044 	addi	r11,r23,1
 4012e0c:	8a873926 	beq	r17,r10,4014af4 <___svfprintf_internal_r+0x20f0>
 4012e10:	88bff404 	addi	r2,r17,-48
 4012e14:	0009883a 	mov	r4,zero
 4012e18:	30868836 	bltu	r6,r2,401483c <___svfprintf_internal_r+0x1e38>
 4012e1c:	5c400007 	ldb	r17,0(r11)
 4012e20:	210002a4 	muli	r4,r4,10
 4012e24:	5dc00044 	addi	r23,r11,1
 4012e28:	b817883a 	mov	r11,r23
 4012e2c:	2089883a 	add	r4,r4,r2
 4012e30:	88bff404 	addi	r2,r17,-48
 4012e34:	30bff92e 	bgeu	r6,r2,4012e1c <__reset+0xfb011e1c>
 4012e38:	2005d716 	blt	r4,zero,4014598 <___svfprintf_internal_r+0x1b94>
 4012e3c:	d9002915 	stw	r4,164(sp)
 4012e40:	003f4506 	br	4012b58 <__reset+0xfb011b58>
 4012e44:	b809883a 	mov	r4,r23
 4012e48:	d8003115 	stw	zero,196(sp)
 4012e4c:	88bff404 	addi	r2,r17,-48
 4012e50:	0017883a 	mov	r11,zero
 4012e54:	24400007 	ldb	r17,0(r4)
 4012e58:	5ac002a4 	muli	r11,r11,10
 4012e5c:	bdc00044 	addi	r23,r23,1
 4012e60:	b809883a 	mov	r4,r23
 4012e64:	12d7883a 	add	r11,r2,r11
 4012e68:	88bff404 	addi	r2,r17,-48
 4012e6c:	30bff92e 	bgeu	r6,r2,4012e54 <__reset+0xfb011e54>
 4012e70:	dac03115 	stw	r11,196(sp)
 4012e74:	003f3806 	br	4012b58 <__reset+0xfb011b58>
 4012e78:	94802014 	ori	r18,r18,128
 4012e7c:	bc400007 	ldb	r17,0(r23)
 4012e80:	003f3406 	br	4012b54 <__reset+0xfb011b54>
 4012e84:	18c03fcc 	andi	r3,r3,255
 4012e88:	1807471e 	bne	r3,zero,4014ba8 <___svfprintf_internal_r+0x21a4>
 4012e8c:	9080020c 	andi	r2,r18,8
 4012e90:	10047d26 	beq	r2,zero,4014088 <___svfprintf_internal_r+0x1684>
 4012e94:	d8c02d17 	ldw	r3,180(sp)
 4012e98:	d9002d17 	ldw	r4,180(sp)
 4012e9c:	d9402d17 	ldw	r5,180(sp)
 4012ea0:	18c00017 	ldw	r3,0(r3)
 4012ea4:	21000117 	ldw	r4,4(r4)
 4012ea8:	29400204 	addi	r5,r5,8
 4012eac:	d8c03615 	stw	r3,216(sp)
 4012eb0:	d9003715 	stw	r4,220(sp)
 4012eb4:	d9402d15 	stw	r5,180(sp)
 4012eb8:	d9003617 	ldw	r4,216(sp)
 4012ebc:	d9403717 	ldw	r5,220(sp)
 4012ec0:	da003e15 	stw	r8,248(sp)
 4012ec4:	04000044 	movi	r16,1
 4012ec8:	400d9800 	call	400d980 <__fpclassifyd>
 4012ecc:	da003e17 	ldw	r8,248(sp)
 4012ed0:	14044b1e 	bne	r2,r16,4014000 <___svfprintf_internal_r+0x15fc>
 4012ed4:	d9003617 	ldw	r4,216(sp)
 4012ed8:	d9403717 	ldw	r5,220(sp)
 4012edc:	000d883a 	mov	r6,zero
 4012ee0:	000f883a 	mov	r7,zero
 4012ee4:	40106500 	call	4010650 <__ledf2>
 4012ee8:	da003e17 	ldw	r8,248(sp)
 4012eec:	1005f316 	blt	r2,zero,40146bc <___svfprintf_internal_r+0x1cb8>
 4012ef0:	df002783 	ldbu	fp,158(sp)
 4012ef4:	008011c4 	movi	r2,71
 4012ef8:	1445590e 	bge	r2,r17,4014460 <___svfprintf_internal_r+0x1a5c>
 4012efc:	04010234 	movhi	r16,1032
 4012f00:	84079104 	addi	r16,r16,7748
 4012f04:	00c000c4 	movi	r3,3
 4012f08:	00bfdfc4 	movi	r2,-129
 4012f0c:	d8c02a15 	stw	r3,168(sp)
 4012f10:	90a4703a 	and	r18,r18,r2
 4012f14:	d8c02e15 	stw	r3,184(sp)
 4012f18:	d8002915 	stw	zero,164(sp)
 4012f1c:	d8003215 	stw	zero,200(sp)
 4012f20:	00006606 	br	40130bc <___svfprintf_internal_r+0x6b8>
 4012f24:	94800214 	ori	r18,r18,8
 4012f28:	bc400007 	ldb	r17,0(r23)
 4012f2c:	003f0906 	br	4012b54 <__reset+0xfb011b54>
 4012f30:	18c03fcc 	andi	r3,r3,255
 4012f34:	1807181e 	bne	r3,zero,4014b98 <___svfprintf_internal_r+0x2194>
 4012f38:	94800414 	ori	r18,r18,16
 4012f3c:	9080080c 	andi	r2,r18,32
 4012f40:	10039626 	beq	r2,zero,4013d9c <___svfprintf_internal_r+0x1398>
 4012f44:	d9402d17 	ldw	r5,180(sp)
 4012f48:	28800117 	ldw	r2,4(r5)
 4012f4c:	2d000017 	ldw	r20,0(r5)
 4012f50:	29400204 	addi	r5,r5,8
 4012f54:	d9402d15 	stw	r5,180(sp)
 4012f58:	102d883a 	mov	r22,r2
 4012f5c:	10039816 	blt	r2,zero,4013dc0 <___svfprintf_internal_r+0x13bc>
 4012f60:	d9402917 	ldw	r5,164(sp)
 4012f64:	df002783 	ldbu	fp,158(sp)
 4012f68:	2803ab16 	blt	r5,zero,4013e18 <___svfprintf_internal_r+0x1414>
 4012f6c:	00ffdfc4 	movi	r3,-129
 4012f70:	a584b03a 	or	r2,r20,r22
 4012f74:	90e4703a 	and	r18,r18,r3
 4012f78:	10014a26 	beq	r2,zero,40134a4 <___svfprintf_internal_r+0xaa0>
 4012f7c:	b0034b26 	beq	r22,zero,4013cac <___svfprintf_internal_r+0x12a8>
 4012f80:	dc402a15 	stw	r17,168(sp)
 4012f84:	dc001e04 	addi	r16,sp,120
 4012f88:	b023883a 	mov	r17,r22
 4012f8c:	402d883a 	mov	r22,r8
 4012f90:	a009883a 	mov	r4,r20
 4012f94:	880b883a 	mov	r5,r17
 4012f98:	01800284 	movi	r6,10
 4012f9c:	000f883a 	mov	r7,zero
 4012fa0:	401ee980 	call	401ee98 <__umoddi3>
 4012fa4:	10800c04 	addi	r2,r2,48
 4012fa8:	843fffc4 	addi	r16,r16,-1
 4012fac:	a009883a 	mov	r4,r20
 4012fb0:	880b883a 	mov	r5,r17
 4012fb4:	80800005 	stb	r2,0(r16)
 4012fb8:	01800284 	movi	r6,10
 4012fbc:	000f883a 	mov	r7,zero
 4012fc0:	401e9200 	call	401e920 <__udivdi3>
 4012fc4:	1029883a 	mov	r20,r2
 4012fc8:	10c4b03a 	or	r2,r2,r3
 4012fcc:	1823883a 	mov	r17,r3
 4012fd0:	103fef1e 	bne	r2,zero,4012f90 <__reset+0xfb011f90>
 4012fd4:	d8c02817 	ldw	r3,160(sp)
 4012fd8:	dc402a17 	ldw	r17,168(sp)
 4012fdc:	b011883a 	mov	r8,r22
 4012fe0:	1c07c83a 	sub	r3,r3,r16
 4012fe4:	d8c02e15 	stw	r3,184(sp)
 4012fe8:	00002e06 	br	40130a4 <___svfprintf_internal_r+0x6a0>
 4012fec:	18c03fcc 	andi	r3,r3,255
 4012ff0:	1806e71e 	bne	r3,zero,4014b90 <___svfprintf_internal_r+0x218c>
 4012ff4:	94800414 	ori	r18,r18,16
 4012ff8:	9080080c 	andi	r2,r18,32
 4012ffc:	1002d426 	beq	r2,zero,4013b50 <___svfprintf_internal_r+0x114c>
 4013000:	d9402d17 	ldw	r5,180(sp)
 4013004:	d8c02917 	ldw	r3,164(sp)
 4013008:	d8002785 	stb	zero,158(sp)
 401300c:	28800204 	addi	r2,r5,8
 4013010:	2d000017 	ldw	r20,0(r5)
 4013014:	2d800117 	ldw	r22,4(r5)
 4013018:	18041516 	blt	r3,zero,4014070 <___svfprintf_internal_r+0x166c>
 401301c:	013fdfc4 	movi	r4,-129
 4013020:	a586b03a 	or	r3,r20,r22
 4013024:	d8802d15 	stw	r2,180(sp)
 4013028:	9124703a 	and	r18,r18,r4
 401302c:	1802d51e 	bne	r3,zero,4013b84 <___svfprintf_internal_r+0x1180>
 4013030:	d9402917 	ldw	r5,164(sp)
 4013034:	0039883a 	mov	fp,zero
 4013038:	2806be26 	beq	r5,zero,4014b34 <___svfprintf_internal_r+0x2130>
 401303c:	0029883a 	mov	r20,zero
 4013040:	002d883a 	mov	r22,zero
 4013044:	dc001e04 	addi	r16,sp,120
 4013048:	a006d0fa 	srli	r3,r20,3
 401304c:	b008977a 	slli	r4,r22,29
 4013050:	b02cd0fa 	srli	r22,r22,3
 4013054:	a50001cc 	andi	r20,r20,7
 4013058:	a0800c04 	addi	r2,r20,48
 401305c:	843fffc4 	addi	r16,r16,-1
 4013060:	20e8b03a 	or	r20,r4,r3
 4013064:	80800005 	stb	r2,0(r16)
 4013068:	a586b03a 	or	r3,r20,r22
 401306c:	183ff61e 	bne	r3,zero,4013048 <__reset+0xfb012048>
 4013070:	90c0004c 	andi	r3,r18,1
 4013074:	18013926 	beq	r3,zero,401355c <___svfprintf_internal_r+0xb58>
 4013078:	10803fcc 	andi	r2,r2,255
 401307c:	1080201c 	xori	r2,r2,128
 4013080:	10bfe004 	addi	r2,r2,-128
 4013084:	00c00c04 	movi	r3,48
 4013088:	10c13426 	beq	r2,r3,401355c <___svfprintf_internal_r+0xb58>
 401308c:	80ffffc5 	stb	r3,-1(r16)
 4013090:	d8c02817 	ldw	r3,160(sp)
 4013094:	80bfffc4 	addi	r2,r16,-1
 4013098:	1021883a 	mov	r16,r2
 401309c:	1887c83a 	sub	r3,r3,r2
 40130a0:	d8c02e15 	stw	r3,184(sp)
 40130a4:	d8802e17 	ldw	r2,184(sp)
 40130a8:	d9002917 	ldw	r4,164(sp)
 40130ac:	1100010e 	bge	r2,r4,40130b4 <___svfprintf_internal_r+0x6b0>
 40130b0:	2005883a 	mov	r2,r4
 40130b4:	d8802a15 	stw	r2,168(sp)
 40130b8:	d8003215 	stw	zero,200(sp)
 40130bc:	e7003fcc 	andi	fp,fp,255
 40130c0:	e700201c 	xori	fp,fp,128
 40130c4:	e73fe004 	addi	fp,fp,-128
 40130c8:	e0000326 	beq	fp,zero,40130d8 <___svfprintf_internal_r+0x6d4>
 40130cc:	d8c02a17 	ldw	r3,168(sp)
 40130d0:	18c00044 	addi	r3,r3,1
 40130d4:	d8c02a15 	stw	r3,168(sp)
 40130d8:	90c0008c 	andi	r3,r18,2
 40130dc:	d8c02b15 	stw	r3,172(sp)
 40130e0:	18000326 	beq	r3,zero,40130f0 <___svfprintf_internal_r+0x6ec>
 40130e4:	d8c02a17 	ldw	r3,168(sp)
 40130e8:	18c00084 	addi	r3,r3,2
 40130ec:	d8c02a15 	stw	r3,168(sp)
 40130f0:	90c0210c 	andi	r3,r18,132
 40130f4:	d8c03015 	stw	r3,192(sp)
 40130f8:	1801a11e 	bne	r3,zero,4013780 <___svfprintf_internal_r+0xd7c>
 40130fc:	d9003117 	ldw	r4,196(sp)
 4013100:	d8c02a17 	ldw	r3,168(sp)
 4013104:	20e9c83a 	sub	r20,r4,r3
 4013108:	05019d0e 	bge	zero,r20,4013780 <___svfprintf_internal_r+0xd7c>
 401310c:	02400404 	movi	r9,16
 4013110:	d8c02017 	ldw	r3,128(sp)
 4013114:	d8801f17 	ldw	r2,124(sp)
 4013118:	4d051b0e 	bge	r9,r20,4014588 <___svfprintf_internal_r+0x1b84>
 401311c:	01410234 	movhi	r5,1032
 4013120:	2947a484 	addi	r5,r5,7826
 4013124:	dc403c15 	stw	r17,240(sp)
 4013128:	d9403515 	stw	r5,212(sp)
 401312c:	a023883a 	mov	r17,r20
 4013130:	482d883a 	mov	r22,r9
 4013134:	9029883a 	mov	r20,r18
 4013138:	070001c4 	movi	fp,7
 401313c:	8025883a 	mov	r18,r16
 4013140:	dc002c17 	ldw	r16,176(sp)
 4013144:	00000306 	br	4013154 <___svfprintf_internal_r+0x750>
 4013148:	8c7ffc04 	addi	r17,r17,-16
 401314c:	42000204 	addi	r8,r8,8
 4013150:	b440130e 	bge	r22,r17,40131a0 <___svfprintf_internal_r+0x79c>
 4013154:	01010234 	movhi	r4,1032
 4013158:	18c00404 	addi	r3,r3,16
 401315c:	10800044 	addi	r2,r2,1
 4013160:	2107a484 	addi	r4,r4,7826
 4013164:	41000015 	stw	r4,0(r8)
 4013168:	45800115 	stw	r22,4(r8)
 401316c:	d8c02015 	stw	r3,128(sp)
 4013170:	d8801f15 	stw	r2,124(sp)
 4013174:	e0bff40e 	bge	fp,r2,4013148 <__reset+0xfb012148>
 4013178:	d9801e04 	addi	r6,sp,120
 401317c:	800b883a 	mov	r5,r16
 4013180:	9809883a 	mov	r4,r19
 4013184:	401b5980 	call	401b598 <__ssprint_r>
 4013188:	103f031e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 401318c:	8c7ffc04 	addi	r17,r17,-16
 4013190:	d8c02017 	ldw	r3,128(sp)
 4013194:	d8801f17 	ldw	r2,124(sp)
 4013198:	da000404 	addi	r8,sp,16
 401319c:	b47fed16 	blt	r22,r17,4013154 <__reset+0xfb012154>
 40131a0:	9021883a 	mov	r16,r18
 40131a4:	a025883a 	mov	r18,r20
 40131a8:	8829883a 	mov	r20,r17
 40131ac:	dc403c17 	ldw	r17,240(sp)
 40131b0:	d9403517 	ldw	r5,212(sp)
 40131b4:	a0c7883a 	add	r3,r20,r3
 40131b8:	10800044 	addi	r2,r2,1
 40131bc:	41400015 	stw	r5,0(r8)
 40131c0:	45000115 	stw	r20,4(r8)
 40131c4:	d8c02015 	stw	r3,128(sp)
 40131c8:	d8801f15 	stw	r2,124(sp)
 40131cc:	010001c4 	movi	r4,7
 40131d0:	20829f16 	blt	r4,r2,4013c50 <___svfprintf_internal_r+0x124c>
 40131d4:	df002787 	ldb	fp,158(sp)
 40131d8:	42000204 	addi	r8,r8,8
 40131dc:	e0000c26 	beq	fp,zero,4013210 <___svfprintf_internal_r+0x80c>
 40131e0:	d8801f17 	ldw	r2,124(sp)
 40131e4:	d9002784 	addi	r4,sp,158
 40131e8:	18c00044 	addi	r3,r3,1
 40131ec:	10800044 	addi	r2,r2,1
 40131f0:	41000015 	stw	r4,0(r8)
 40131f4:	01000044 	movi	r4,1
 40131f8:	41000115 	stw	r4,4(r8)
 40131fc:	d8c02015 	stw	r3,128(sp)
 4013200:	d8801f15 	stw	r2,124(sp)
 4013204:	010001c4 	movi	r4,7
 4013208:	20823816 	blt	r4,r2,4013aec <___svfprintf_internal_r+0x10e8>
 401320c:	42000204 	addi	r8,r8,8
 4013210:	d8802b17 	ldw	r2,172(sp)
 4013214:	10000c26 	beq	r2,zero,4013248 <___svfprintf_internal_r+0x844>
 4013218:	d8801f17 	ldw	r2,124(sp)
 401321c:	d9002704 	addi	r4,sp,156
 4013220:	18c00084 	addi	r3,r3,2
 4013224:	10800044 	addi	r2,r2,1
 4013228:	41000015 	stw	r4,0(r8)
 401322c:	01000084 	movi	r4,2
 4013230:	41000115 	stw	r4,4(r8)
 4013234:	d8c02015 	stw	r3,128(sp)
 4013238:	d8801f15 	stw	r2,124(sp)
 401323c:	010001c4 	movi	r4,7
 4013240:	20823216 	blt	r4,r2,4013b0c <___svfprintf_internal_r+0x1108>
 4013244:	42000204 	addi	r8,r8,8
 4013248:	d9003017 	ldw	r4,192(sp)
 401324c:	00802004 	movi	r2,128
 4013250:	20819726 	beq	r4,r2,40138b0 <___svfprintf_internal_r+0xeac>
 4013254:	d9402917 	ldw	r5,164(sp)
 4013258:	d8802e17 	ldw	r2,184(sp)
 401325c:	28adc83a 	sub	r22,r5,r2
 4013260:	05802f0e 	bge	zero,r22,4013320 <___svfprintf_internal_r+0x91c>
 4013264:	07000404 	movi	fp,16
 4013268:	d8801f17 	ldw	r2,124(sp)
 401326c:	e583c00e 	bge	fp,r22,4014170 <___svfprintf_internal_r+0x176c>
 4013270:	01410234 	movhi	r5,1032
 4013274:	2947a084 	addi	r5,r5,7810
 4013278:	dc402915 	stw	r17,164(sp)
 401327c:	d9402b15 	stw	r5,172(sp)
 4013280:	b023883a 	mov	r17,r22
 4013284:	050001c4 	movi	r20,7
 4013288:	902d883a 	mov	r22,r18
 401328c:	8025883a 	mov	r18,r16
 4013290:	dc002c17 	ldw	r16,176(sp)
 4013294:	00000306 	br	40132a4 <___svfprintf_internal_r+0x8a0>
 4013298:	8c7ffc04 	addi	r17,r17,-16
 401329c:	42000204 	addi	r8,r8,8
 40132a0:	e440110e 	bge	fp,r17,40132e8 <___svfprintf_internal_r+0x8e4>
 40132a4:	18c00404 	addi	r3,r3,16
 40132a8:	10800044 	addi	r2,r2,1
 40132ac:	45400015 	stw	r21,0(r8)
 40132b0:	47000115 	stw	fp,4(r8)
 40132b4:	d8c02015 	stw	r3,128(sp)
 40132b8:	d8801f15 	stw	r2,124(sp)
 40132bc:	a0bff60e 	bge	r20,r2,4013298 <__reset+0xfb012298>
 40132c0:	d9801e04 	addi	r6,sp,120
 40132c4:	800b883a 	mov	r5,r16
 40132c8:	9809883a 	mov	r4,r19
 40132cc:	401b5980 	call	401b598 <__ssprint_r>
 40132d0:	103eb11e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 40132d4:	8c7ffc04 	addi	r17,r17,-16
 40132d8:	d8c02017 	ldw	r3,128(sp)
 40132dc:	d8801f17 	ldw	r2,124(sp)
 40132e0:	da000404 	addi	r8,sp,16
 40132e4:	e47fef16 	blt	fp,r17,40132a4 <__reset+0xfb0122a4>
 40132e8:	9021883a 	mov	r16,r18
 40132ec:	b025883a 	mov	r18,r22
 40132f0:	882d883a 	mov	r22,r17
 40132f4:	dc402917 	ldw	r17,164(sp)
 40132f8:	d9002b17 	ldw	r4,172(sp)
 40132fc:	1d87883a 	add	r3,r3,r22
 4013300:	10800044 	addi	r2,r2,1
 4013304:	41000015 	stw	r4,0(r8)
 4013308:	45800115 	stw	r22,4(r8)
 401330c:	d8c02015 	stw	r3,128(sp)
 4013310:	d8801f15 	stw	r2,124(sp)
 4013314:	010001c4 	movi	r4,7
 4013318:	2081ec16 	blt	r4,r2,4013acc <___svfprintf_internal_r+0x10c8>
 401331c:	42000204 	addi	r8,r8,8
 4013320:	9080400c 	andi	r2,r18,256
 4013324:	1001181e 	bne	r2,zero,4013788 <___svfprintf_internal_r+0xd84>
 4013328:	d9402e17 	ldw	r5,184(sp)
 401332c:	d8801f17 	ldw	r2,124(sp)
 4013330:	44000015 	stw	r16,0(r8)
 4013334:	1947883a 	add	r3,r3,r5
 4013338:	10800044 	addi	r2,r2,1
 401333c:	41400115 	stw	r5,4(r8)
 4013340:	d8c02015 	stw	r3,128(sp)
 4013344:	d8801f15 	stw	r2,124(sp)
 4013348:	010001c4 	movi	r4,7
 401334c:	2081d116 	blt	r4,r2,4013a94 <___svfprintf_internal_r+0x1090>
 4013350:	42000204 	addi	r8,r8,8
 4013354:	9480010c 	andi	r18,r18,4
 4013358:	90003226 	beq	r18,zero,4013424 <___svfprintf_internal_r+0xa20>
 401335c:	d9403117 	ldw	r5,196(sp)
 4013360:	d8802a17 	ldw	r2,168(sp)
 4013364:	28a1c83a 	sub	r16,r5,r2
 4013368:	04002e0e 	bge	zero,r16,4013424 <___svfprintf_internal_r+0xa20>
 401336c:	04400404 	movi	r17,16
 4013370:	d8801f17 	ldw	r2,124(sp)
 4013374:	8c04b90e 	bge	r17,r16,401465c <___svfprintf_internal_r+0x1c58>
 4013378:	01410234 	movhi	r5,1032
 401337c:	2947a484 	addi	r5,r5,7826
 4013380:	d9403515 	stw	r5,212(sp)
 4013384:	048001c4 	movi	r18,7
 4013388:	dd002c17 	ldw	r20,176(sp)
 401338c:	00000306 	br	401339c <___svfprintf_internal_r+0x998>
 4013390:	843ffc04 	addi	r16,r16,-16
 4013394:	42000204 	addi	r8,r8,8
 4013398:	8c00130e 	bge	r17,r16,40133e8 <___svfprintf_internal_r+0x9e4>
 401339c:	01010234 	movhi	r4,1032
 40133a0:	18c00404 	addi	r3,r3,16
 40133a4:	10800044 	addi	r2,r2,1
 40133a8:	2107a484 	addi	r4,r4,7826
 40133ac:	41000015 	stw	r4,0(r8)
 40133b0:	44400115 	stw	r17,4(r8)
 40133b4:	d8c02015 	stw	r3,128(sp)
 40133b8:	d8801f15 	stw	r2,124(sp)
 40133bc:	90bff40e 	bge	r18,r2,4013390 <__reset+0xfb012390>
 40133c0:	d9801e04 	addi	r6,sp,120
 40133c4:	a00b883a 	mov	r5,r20
 40133c8:	9809883a 	mov	r4,r19
 40133cc:	401b5980 	call	401b598 <__ssprint_r>
 40133d0:	103e711e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 40133d4:	843ffc04 	addi	r16,r16,-16
 40133d8:	d8c02017 	ldw	r3,128(sp)
 40133dc:	d8801f17 	ldw	r2,124(sp)
 40133e0:	da000404 	addi	r8,sp,16
 40133e4:	8c3fed16 	blt	r17,r16,401339c <__reset+0xfb01239c>
 40133e8:	d9403517 	ldw	r5,212(sp)
 40133ec:	1c07883a 	add	r3,r3,r16
 40133f0:	10800044 	addi	r2,r2,1
 40133f4:	41400015 	stw	r5,0(r8)
 40133f8:	44000115 	stw	r16,4(r8)
 40133fc:	d8c02015 	stw	r3,128(sp)
 4013400:	d8801f15 	stw	r2,124(sp)
 4013404:	010001c4 	movi	r4,7
 4013408:	2080060e 	bge	r4,r2,4013424 <___svfprintf_internal_r+0xa20>
 401340c:	d9402c17 	ldw	r5,176(sp)
 4013410:	d9801e04 	addi	r6,sp,120
 4013414:	9809883a 	mov	r4,r19
 4013418:	401b5980 	call	401b598 <__ssprint_r>
 401341c:	103e5e1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013420:	d8c02017 	ldw	r3,128(sp)
 4013424:	d8803117 	ldw	r2,196(sp)
 4013428:	d9002a17 	ldw	r4,168(sp)
 401342c:	1100010e 	bge	r2,r4,4013434 <___svfprintf_internal_r+0xa30>
 4013430:	2005883a 	mov	r2,r4
 4013434:	d9402f17 	ldw	r5,188(sp)
 4013438:	288b883a 	add	r5,r5,r2
 401343c:	d9402f15 	stw	r5,188(sp)
 4013440:	18019c1e 	bne	r3,zero,4013ab4 <___svfprintf_internal_r+0x10b0>
 4013444:	b8800007 	ldb	r2,0(r23)
 4013448:	d8001f15 	stw	zero,124(sp)
 401344c:	da000404 	addi	r8,sp,16
 4013450:	103d991e 	bne	r2,zero,4012ab8 <__reset+0xfb011ab8>
 4013454:	b821883a 	mov	r16,r23
 4013458:	003daf06 	br	4012b18 <__reset+0xfb011b18>
 401345c:	18c03fcc 	andi	r3,r3,255
 4013460:	1805c71e 	bne	r3,zero,4014b80 <___svfprintf_internal_r+0x217c>
 4013464:	94800414 	ori	r18,r18,16
 4013468:	9080080c 	andi	r2,r18,32
 401346c:	10020126 	beq	r2,zero,4013c74 <___svfprintf_internal_r+0x1270>
 4013470:	d8802d17 	ldw	r2,180(sp)
 4013474:	d9002917 	ldw	r4,164(sp)
 4013478:	d8002785 	stb	zero,158(sp)
 401347c:	10c00204 	addi	r3,r2,8
 4013480:	15000017 	ldw	r20,0(r2)
 4013484:	15800117 	ldw	r22,4(r2)
 4013488:	20038e16 	blt	r4,zero,40142c4 <___svfprintf_internal_r+0x18c0>
 401348c:	013fdfc4 	movi	r4,-129
 4013490:	a584b03a 	or	r2,r20,r22
 4013494:	d8c02d15 	stw	r3,180(sp)
 4013498:	9124703a 	and	r18,r18,r4
 401349c:	0039883a 	mov	fp,zero
 40134a0:	103eb61e 	bne	r2,zero,4012f7c <__reset+0xfb011f7c>
 40134a4:	d8802917 	ldw	r2,164(sp)
 40134a8:	1002c81e 	bne	r2,zero,4013fcc <___svfprintf_internal_r+0x15c8>
 40134ac:	d8002915 	stw	zero,164(sp)
 40134b0:	d8002e15 	stw	zero,184(sp)
 40134b4:	dc001e04 	addi	r16,sp,120
 40134b8:	003efa06 	br	40130a4 <__reset+0xfb0120a4>
 40134bc:	18c03fcc 	andi	r3,r3,255
 40134c0:	1805ad1e 	bne	r3,zero,4014b78 <___svfprintf_internal_r+0x2174>
 40134c4:	01410234 	movhi	r5,1032
 40134c8:	29479404 	addi	r5,r5,7760
 40134cc:	d9403a15 	stw	r5,232(sp)
 40134d0:	9080080c 	andi	r2,r18,32
 40134d4:	10006126 	beq	r2,zero,401365c <___svfprintf_internal_r+0xc58>
 40134d8:	d8802d17 	ldw	r2,180(sp)
 40134dc:	15000017 	ldw	r20,0(r2)
 40134e0:	15800117 	ldw	r22,4(r2)
 40134e4:	10800204 	addi	r2,r2,8
 40134e8:	d8802d15 	stw	r2,180(sp)
 40134ec:	9080004c 	andi	r2,r18,1
 40134f0:	10018e26 	beq	r2,zero,4013b2c <___svfprintf_internal_r+0x1128>
 40134f4:	a584b03a 	or	r2,r20,r22
 40134f8:	10030926 	beq	r2,zero,4014120 <___svfprintf_internal_r+0x171c>
 40134fc:	d8c02917 	ldw	r3,164(sp)
 4013500:	00800c04 	movi	r2,48
 4013504:	d8802705 	stb	r2,156(sp)
 4013508:	dc402745 	stb	r17,157(sp)
 401350c:	d8002785 	stb	zero,158(sp)
 4013510:	90800094 	ori	r2,r18,2
 4013514:	18048716 	blt	r3,zero,4014734 <___svfprintf_internal_r+0x1d30>
 4013518:	00bfdfc4 	movi	r2,-129
 401351c:	90a4703a 	and	r18,r18,r2
 4013520:	94800094 	ori	r18,r18,2
 4013524:	0039883a 	mov	fp,zero
 4013528:	d9003a17 	ldw	r4,232(sp)
 401352c:	dc001e04 	addi	r16,sp,120
 4013530:	a08003cc 	andi	r2,r20,15
 4013534:	b006973a 	slli	r3,r22,28
 4013538:	2085883a 	add	r2,r4,r2
 401353c:	a028d13a 	srli	r20,r20,4
 4013540:	10800003 	ldbu	r2,0(r2)
 4013544:	b02cd13a 	srli	r22,r22,4
 4013548:	843fffc4 	addi	r16,r16,-1
 401354c:	1d28b03a 	or	r20,r3,r20
 4013550:	80800005 	stb	r2,0(r16)
 4013554:	a584b03a 	or	r2,r20,r22
 4013558:	103ff51e 	bne	r2,zero,4013530 <__reset+0xfb012530>
 401355c:	d8c02817 	ldw	r3,160(sp)
 4013560:	1c07c83a 	sub	r3,r3,r16
 4013564:	d8c02e15 	stw	r3,184(sp)
 4013568:	003ece06 	br	40130a4 <__reset+0xfb0120a4>
 401356c:	d8c02d17 	ldw	r3,180(sp)
 4013570:	d9002d17 	ldw	r4,180(sp)
 4013574:	d8002785 	stb	zero,158(sp)
 4013578:	18800017 	ldw	r2,0(r3)
 401357c:	21000104 	addi	r4,r4,4
 4013580:	00c00044 	movi	r3,1
 4013584:	d8c02a15 	stw	r3,168(sp)
 4013588:	d8801405 	stb	r2,80(sp)
 401358c:	d9002d15 	stw	r4,180(sp)
 4013590:	d8c02e15 	stw	r3,184(sp)
 4013594:	d8002915 	stw	zero,164(sp)
 4013598:	d8003215 	stw	zero,200(sp)
 401359c:	dc001404 	addi	r16,sp,80
 40135a0:	0039883a 	mov	fp,zero
 40135a4:	003ecc06 	br	40130d8 <__reset+0xfb0120d8>
 40135a8:	18c03fcc 	andi	r3,r3,255
 40135ac:	183e9226 	beq	r3,zero,4012ff8 <__reset+0xfb011ff8>
 40135b0:	d9c02785 	stb	r7,158(sp)
 40135b4:	003e9006 	br	4012ff8 <__reset+0xfb011ff8>
 40135b8:	00c00044 	movi	r3,1
 40135bc:	01c00ac4 	movi	r7,43
 40135c0:	bc400007 	ldb	r17,0(r23)
 40135c4:	003d6306 	br	4012b54 <__reset+0xfb011b54>
 40135c8:	94800814 	ori	r18,r18,32
 40135cc:	bc400007 	ldb	r17,0(r23)
 40135d0:	003d6006 	br	4012b54 <__reset+0xfb011b54>
 40135d4:	d8c02d17 	ldw	r3,180(sp)
 40135d8:	d8002785 	stb	zero,158(sp)
 40135dc:	1c000017 	ldw	r16,0(r3)
 40135e0:	1d000104 	addi	r20,r3,4
 40135e4:	80040f26 	beq	r16,zero,4014624 <___svfprintf_internal_r+0x1c20>
 40135e8:	d9002917 	ldw	r4,164(sp)
 40135ec:	2003dc16 	blt	r4,zero,4014560 <___svfprintf_internal_r+0x1b5c>
 40135f0:	200d883a 	mov	r6,r4
 40135f4:	000b883a 	mov	r5,zero
 40135f8:	8009883a 	mov	r4,r16
 40135fc:	da003e15 	stw	r8,248(sp)
 4013600:	4019be00 	call	4019be0 <memchr>
 4013604:	da003e17 	ldw	r8,248(sp)
 4013608:	10045826 	beq	r2,zero,401476c <___svfprintf_internal_r+0x1d68>
 401360c:	1405c83a 	sub	r2,r2,r16
 4013610:	d8802e15 	stw	r2,184(sp)
 4013614:	1003d816 	blt	r2,zero,4014578 <___svfprintf_internal_r+0x1b74>
 4013618:	df002783 	ldbu	fp,158(sp)
 401361c:	d8802a15 	stw	r2,168(sp)
 4013620:	dd002d15 	stw	r20,180(sp)
 4013624:	d8002915 	stw	zero,164(sp)
 4013628:	d8003215 	stw	zero,200(sp)
 401362c:	003ea306 	br	40130bc <__reset+0xfb0120bc>
 4013630:	18c03fcc 	andi	r3,r3,255
 4013634:	183f8c26 	beq	r3,zero,4013468 <__reset+0xfb012468>
 4013638:	d9c02785 	stb	r7,158(sp)
 401363c:	003f8a06 	br	4013468 <__reset+0xfb012468>
 4013640:	18c03fcc 	andi	r3,r3,255
 4013644:	1805631e 	bne	r3,zero,4014bd4 <___svfprintf_internal_r+0x21d0>
 4013648:	01410234 	movhi	r5,1032
 401364c:	29479904 	addi	r5,r5,7780
 4013650:	d9403a15 	stw	r5,232(sp)
 4013654:	9080080c 	andi	r2,r18,32
 4013658:	103f9f1e 	bne	r2,zero,40134d8 <__reset+0xfb0124d8>
 401365c:	9080040c 	andi	r2,r18,16
 4013660:	10029c26 	beq	r2,zero,40140d4 <___svfprintf_internal_r+0x16d0>
 4013664:	d8c02d17 	ldw	r3,180(sp)
 4013668:	002d883a 	mov	r22,zero
 401366c:	1d000017 	ldw	r20,0(r3)
 4013670:	18c00104 	addi	r3,r3,4
 4013674:	d8c02d15 	stw	r3,180(sp)
 4013678:	003f9c06 	br	40134ec <__reset+0xfb0124ec>
 401367c:	94800054 	ori	r18,r18,1
 4013680:	bc400007 	ldb	r17,0(r23)
 4013684:	003d3306 	br	4012b54 <__reset+0xfb011b54>
 4013688:	38803fcc 	andi	r2,r7,255
 401368c:	1080201c 	xori	r2,r2,128
 4013690:	10bfe004 	addi	r2,r2,-128
 4013694:	1002971e 	bne	r2,zero,40140f4 <___svfprintf_internal_r+0x16f0>
 4013698:	00c00044 	movi	r3,1
 401369c:	01c00804 	movi	r7,32
 40136a0:	bc400007 	ldb	r17,0(r23)
 40136a4:	003d2b06 	br	4012b54 <__reset+0xfb011b54>
 40136a8:	18c03fcc 	andi	r3,r3,255
 40136ac:	183e2326 	beq	r3,zero,4012f3c <__reset+0xfb011f3c>
 40136b0:	d9c02785 	stb	r7,158(sp)
 40136b4:	003e2106 	br	4012f3c <__reset+0xfb011f3c>
 40136b8:	bc400007 	ldb	r17,0(r23)
 40136bc:	8a430426 	beq	r17,r9,40142d0 <___svfprintf_internal_r+0x18cc>
 40136c0:	94800414 	ori	r18,r18,16
 40136c4:	003d2306 	br	4012b54 <__reset+0xfb011b54>
 40136c8:	18c03fcc 	andi	r3,r3,255
 40136cc:	18053f1e 	bne	r3,zero,4014bcc <___svfprintf_internal_r+0x21c8>
 40136d0:	9080080c 	andi	r2,r18,32
 40136d4:	10028926 	beq	r2,zero,40140fc <___svfprintf_internal_r+0x16f8>
 40136d8:	d9402d17 	ldw	r5,180(sp)
 40136dc:	d9002f17 	ldw	r4,188(sp)
 40136e0:	28800017 	ldw	r2,0(r5)
 40136e4:	2007d7fa 	srai	r3,r4,31
 40136e8:	29400104 	addi	r5,r5,4
 40136ec:	d9402d15 	stw	r5,180(sp)
 40136f0:	11000015 	stw	r4,0(r2)
 40136f4:	10c00115 	stw	r3,4(r2)
 40136f8:	003ced06 	br	4012ab0 <__reset+0xfb011ab0>
 40136fc:	94801014 	ori	r18,r18,64
 4013700:	bc400007 	ldb	r17,0(r23)
 4013704:	003d1306 	br	4012b54 <__reset+0xfb011b54>
 4013708:	01010234 	movhi	r4,1032
 401370c:	21079904 	addi	r4,r4,7780
 4013710:	0039883a 	mov	fp,zero
 4013714:	d9003a15 	stw	r4,232(sp)
 4013718:	04401e04 	movi	r17,120
 401371c:	003f8206 	br	4013528 <__reset+0xfb012528>
 4013720:	18c03fcc 	andi	r3,r3,255
 4013724:	1805221e 	bne	r3,zero,4014bb0 <___svfprintf_internal_r+0x21ac>
 4013728:	883d9526 	beq	r17,zero,4012d80 <__reset+0xfb011d80>
 401372c:	00c00044 	movi	r3,1
 4013730:	d8c02a15 	stw	r3,168(sp)
 4013734:	dc401405 	stb	r17,80(sp)
 4013738:	d8002785 	stb	zero,158(sp)
 401373c:	003f9406 	br	4013590 <__reset+0xfb012590>
 4013740:	01010234 	movhi	r4,1032
 4013744:	21079904 	addi	r4,r4,7780
 4013748:	d9003a15 	stw	r4,232(sp)
 401374c:	d8c02d15 	stw	r3,180(sp)
 4013750:	1025883a 	mov	r18,r2
 4013754:	04401e04 	movi	r17,120
 4013758:	a584b03a 	or	r2,r20,r22
 401375c:	1000fa1e 	bne	r2,zero,4013b48 <___svfprintf_internal_r+0x1144>
 4013760:	0039883a 	mov	fp,zero
 4013764:	00800084 	movi	r2,2
 4013768:	10803fcc 	andi	r2,r2,255
 401376c:	00c00044 	movi	r3,1
 4013770:	10c21626 	beq	r2,r3,4013fcc <___svfprintf_internal_r+0x15c8>
 4013774:	00c00084 	movi	r3,2
 4013778:	10fe301e 	bne	r2,r3,401303c <__reset+0xfb01203c>
 401377c:	003d7606 	br	4012d58 <__reset+0xfb011d58>
 4013780:	d8c02017 	ldw	r3,128(sp)
 4013784:	003e9506 	br	40131dc <__reset+0xfb0121dc>
 4013788:	00801944 	movi	r2,101
 401378c:	14407c0e 	bge	r2,r17,4013980 <___svfprintf_internal_r+0xf7c>
 4013790:	d9003617 	ldw	r4,216(sp)
 4013794:	d9403717 	ldw	r5,220(sp)
 4013798:	000d883a 	mov	r6,zero
 401379c:	000f883a 	mov	r7,zero
 40137a0:	d8c03d15 	stw	r3,244(sp)
 40137a4:	da003e15 	stw	r8,248(sp)
 40137a8:	40104ec0 	call	40104ec <__eqdf2>
 40137ac:	d8c03d17 	ldw	r3,244(sp)
 40137b0:	da003e17 	ldw	r8,248(sp)
 40137b4:	1000f51e 	bne	r2,zero,4013b8c <___svfprintf_internal_r+0x1188>
 40137b8:	d8801f17 	ldw	r2,124(sp)
 40137bc:	01010234 	movhi	r4,1032
 40137c0:	2107a004 	addi	r4,r4,7808
 40137c4:	18c00044 	addi	r3,r3,1
 40137c8:	10800044 	addi	r2,r2,1
 40137cc:	41000015 	stw	r4,0(r8)
 40137d0:	01000044 	movi	r4,1
 40137d4:	41000115 	stw	r4,4(r8)
 40137d8:	d8c02015 	stw	r3,128(sp)
 40137dc:	d8801f15 	stw	r2,124(sp)
 40137e0:	010001c4 	movi	r4,7
 40137e4:	20826616 	blt	r4,r2,4014180 <___svfprintf_internal_r+0x177c>
 40137e8:	42000204 	addi	r8,r8,8
 40137ec:	d8802617 	ldw	r2,152(sp)
 40137f0:	d9403317 	ldw	r5,204(sp)
 40137f4:	11400216 	blt	r2,r5,4013800 <___svfprintf_internal_r+0xdfc>
 40137f8:	9080004c 	andi	r2,r18,1
 40137fc:	103ed526 	beq	r2,zero,4013354 <__reset+0xfb012354>
 4013800:	d8803817 	ldw	r2,224(sp)
 4013804:	d9003417 	ldw	r4,208(sp)
 4013808:	d9403817 	ldw	r5,224(sp)
 401380c:	1887883a 	add	r3,r3,r2
 4013810:	d8801f17 	ldw	r2,124(sp)
 4013814:	41000015 	stw	r4,0(r8)
 4013818:	41400115 	stw	r5,4(r8)
 401381c:	10800044 	addi	r2,r2,1
 4013820:	d8c02015 	stw	r3,128(sp)
 4013824:	d8801f15 	stw	r2,124(sp)
 4013828:	010001c4 	movi	r4,7
 401382c:	2082af16 	blt	r4,r2,40142ec <___svfprintf_internal_r+0x18e8>
 4013830:	42000204 	addi	r8,r8,8
 4013834:	d8803317 	ldw	r2,204(sp)
 4013838:	143fffc4 	addi	r16,r2,-1
 401383c:	043ec50e 	bge	zero,r16,4013354 <__reset+0xfb012354>
 4013840:	04400404 	movi	r17,16
 4013844:	d8801f17 	ldw	r2,124(sp)
 4013848:	8c00860e 	bge	r17,r16,4013a64 <___svfprintf_internal_r+0x1060>
 401384c:	01410234 	movhi	r5,1032
 4013850:	2947a084 	addi	r5,r5,7810
 4013854:	d9402b15 	stw	r5,172(sp)
 4013858:	058001c4 	movi	r22,7
 401385c:	dd002c17 	ldw	r20,176(sp)
 4013860:	00000306 	br	4013870 <___svfprintf_internal_r+0xe6c>
 4013864:	42000204 	addi	r8,r8,8
 4013868:	843ffc04 	addi	r16,r16,-16
 401386c:	8c00800e 	bge	r17,r16,4013a70 <___svfprintf_internal_r+0x106c>
 4013870:	18c00404 	addi	r3,r3,16
 4013874:	10800044 	addi	r2,r2,1
 4013878:	45400015 	stw	r21,0(r8)
 401387c:	44400115 	stw	r17,4(r8)
 4013880:	d8c02015 	stw	r3,128(sp)
 4013884:	d8801f15 	stw	r2,124(sp)
 4013888:	b0bff60e 	bge	r22,r2,4013864 <__reset+0xfb012864>
 401388c:	d9801e04 	addi	r6,sp,120
 4013890:	a00b883a 	mov	r5,r20
 4013894:	9809883a 	mov	r4,r19
 4013898:	401b5980 	call	401b598 <__ssprint_r>
 401389c:	103d3e1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 40138a0:	d8c02017 	ldw	r3,128(sp)
 40138a4:	d8801f17 	ldw	r2,124(sp)
 40138a8:	da000404 	addi	r8,sp,16
 40138ac:	003fee06 	br	4013868 <__reset+0xfb012868>
 40138b0:	d9403117 	ldw	r5,196(sp)
 40138b4:	d8802a17 	ldw	r2,168(sp)
 40138b8:	28adc83a 	sub	r22,r5,r2
 40138bc:	05be650e 	bge	zero,r22,4013254 <__reset+0xfb012254>
 40138c0:	07000404 	movi	fp,16
 40138c4:	d8801f17 	ldw	r2,124(sp)
 40138c8:	e583a20e 	bge	fp,r22,4014754 <___svfprintf_internal_r+0x1d50>
 40138cc:	01410234 	movhi	r5,1032
 40138d0:	2947a084 	addi	r5,r5,7810
 40138d4:	dc403015 	stw	r17,192(sp)
 40138d8:	d9402b15 	stw	r5,172(sp)
 40138dc:	b023883a 	mov	r17,r22
 40138e0:	050001c4 	movi	r20,7
 40138e4:	902d883a 	mov	r22,r18
 40138e8:	8025883a 	mov	r18,r16
 40138ec:	dc002c17 	ldw	r16,176(sp)
 40138f0:	00000306 	br	4013900 <___svfprintf_internal_r+0xefc>
 40138f4:	8c7ffc04 	addi	r17,r17,-16
 40138f8:	42000204 	addi	r8,r8,8
 40138fc:	e440110e 	bge	fp,r17,4013944 <___svfprintf_internal_r+0xf40>
 4013900:	18c00404 	addi	r3,r3,16
 4013904:	10800044 	addi	r2,r2,1
 4013908:	45400015 	stw	r21,0(r8)
 401390c:	47000115 	stw	fp,4(r8)
 4013910:	d8c02015 	stw	r3,128(sp)
 4013914:	d8801f15 	stw	r2,124(sp)
 4013918:	a0bff60e 	bge	r20,r2,40138f4 <__reset+0xfb0128f4>
 401391c:	d9801e04 	addi	r6,sp,120
 4013920:	800b883a 	mov	r5,r16
 4013924:	9809883a 	mov	r4,r19
 4013928:	401b5980 	call	401b598 <__ssprint_r>
 401392c:	103d1a1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013930:	8c7ffc04 	addi	r17,r17,-16
 4013934:	d8c02017 	ldw	r3,128(sp)
 4013938:	d8801f17 	ldw	r2,124(sp)
 401393c:	da000404 	addi	r8,sp,16
 4013940:	e47fef16 	blt	fp,r17,4013900 <__reset+0xfb012900>
 4013944:	9021883a 	mov	r16,r18
 4013948:	b025883a 	mov	r18,r22
 401394c:	882d883a 	mov	r22,r17
 4013950:	dc403017 	ldw	r17,192(sp)
 4013954:	d9002b17 	ldw	r4,172(sp)
 4013958:	1d87883a 	add	r3,r3,r22
 401395c:	10800044 	addi	r2,r2,1
 4013960:	41000015 	stw	r4,0(r8)
 4013964:	45800115 	stw	r22,4(r8)
 4013968:	d8c02015 	stw	r3,128(sp)
 401396c:	d8801f15 	stw	r2,124(sp)
 4013970:	010001c4 	movi	r4,7
 4013974:	20819a16 	blt	r4,r2,4013fe0 <___svfprintf_internal_r+0x15dc>
 4013978:	42000204 	addi	r8,r8,8
 401397c:	003e3506 	br	4013254 <__reset+0xfb012254>
 4013980:	d9403317 	ldw	r5,204(sp)
 4013984:	00800044 	movi	r2,1
 4013988:	18c00044 	addi	r3,r3,1
 401398c:	1141710e 	bge	r2,r5,4013f54 <___svfprintf_internal_r+0x1550>
 4013990:	dc401f17 	ldw	r17,124(sp)
 4013994:	00800044 	movi	r2,1
 4013998:	40800115 	stw	r2,4(r8)
 401399c:	8c400044 	addi	r17,r17,1
 40139a0:	44000015 	stw	r16,0(r8)
 40139a4:	d8c02015 	stw	r3,128(sp)
 40139a8:	dc401f15 	stw	r17,124(sp)
 40139ac:	008001c4 	movi	r2,7
 40139b0:	14417416 	blt	r2,r17,4013f84 <___svfprintf_internal_r+0x1580>
 40139b4:	42000204 	addi	r8,r8,8
 40139b8:	d8803817 	ldw	r2,224(sp)
 40139bc:	d9003417 	ldw	r4,208(sp)
 40139c0:	8c400044 	addi	r17,r17,1
 40139c4:	10c7883a 	add	r3,r2,r3
 40139c8:	40800115 	stw	r2,4(r8)
 40139cc:	41000015 	stw	r4,0(r8)
 40139d0:	d8c02015 	stw	r3,128(sp)
 40139d4:	dc401f15 	stw	r17,124(sp)
 40139d8:	008001c4 	movi	r2,7
 40139dc:	14417216 	blt	r2,r17,4013fa8 <___svfprintf_internal_r+0x15a4>
 40139e0:	45800204 	addi	r22,r8,8
 40139e4:	d9003617 	ldw	r4,216(sp)
 40139e8:	d9403717 	ldw	r5,220(sp)
 40139ec:	000d883a 	mov	r6,zero
 40139f0:	000f883a 	mov	r7,zero
 40139f4:	d8c03d15 	stw	r3,244(sp)
 40139f8:	40104ec0 	call	40104ec <__eqdf2>
 40139fc:	d8c03d17 	ldw	r3,244(sp)
 4013a00:	1000b326 	beq	r2,zero,4013cd0 <___svfprintf_internal_r+0x12cc>
 4013a04:	d9403317 	ldw	r5,204(sp)
 4013a08:	84000044 	addi	r16,r16,1
 4013a0c:	8c400044 	addi	r17,r17,1
 4013a10:	28bfffc4 	addi	r2,r5,-1
 4013a14:	1887883a 	add	r3,r3,r2
 4013a18:	b0800115 	stw	r2,4(r22)
 4013a1c:	b4000015 	stw	r16,0(r22)
 4013a20:	d8c02015 	stw	r3,128(sp)
 4013a24:	dc401f15 	stw	r17,124(sp)
 4013a28:	008001c4 	movi	r2,7
 4013a2c:	1440d216 	blt	r2,r17,4013d78 <___svfprintf_internal_r+0x1374>
 4013a30:	b5800204 	addi	r22,r22,8
 4013a34:	d9003b17 	ldw	r4,236(sp)
 4013a38:	df0022c4 	addi	fp,sp,139
 4013a3c:	8c400044 	addi	r17,r17,1
 4013a40:	20c7883a 	add	r3,r4,r3
 4013a44:	b7000015 	stw	fp,0(r22)
 4013a48:	b1000115 	stw	r4,4(r22)
 4013a4c:	d8c02015 	stw	r3,128(sp)
 4013a50:	dc401f15 	stw	r17,124(sp)
 4013a54:	008001c4 	movi	r2,7
 4013a58:	14400e16 	blt	r2,r17,4013a94 <___svfprintf_internal_r+0x1090>
 4013a5c:	b2000204 	addi	r8,r22,8
 4013a60:	003e3c06 	br	4013354 <__reset+0xfb012354>
 4013a64:	01010234 	movhi	r4,1032
 4013a68:	2107a084 	addi	r4,r4,7810
 4013a6c:	d9002b15 	stw	r4,172(sp)
 4013a70:	d9002b17 	ldw	r4,172(sp)
 4013a74:	1c07883a 	add	r3,r3,r16
 4013a78:	44000115 	stw	r16,4(r8)
 4013a7c:	41000015 	stw	r4,0(r8)
 4013a80:	10800044 	addi	r2,r2,1
 4013a84:	d8c02015 	stw	r3,128(sp)
 4013a88:	d8801f15 	stw	r2,124(sp)
 4013a8c:	010001c4 	movi	r4,7
 4013a90:	20be2f0e 	bge	r4,r2,4013350 <__reset+0xfb012350>
 4013a94:	d9402c17 	ldw	r5,176(sp)
 4013a98:	d9801e04 	addi	r6,sp,120
 4013a9c:	9809883a 	mov	r4,r19
 4013aa0:	401b5980 	call	401b598 <__ssprint_r>
 4013aa4:	103cbc1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013aa8:	d8c02017 	ldw	r3,128(sp)
 4013aac:	da000404 	addi	r8,sp,16
 4013ab0:	003e2806 	br	4013354 <__reset+0xfb012354>
 4013ab4:	d9402c17 	ldw	r5,176(sp)
 4013ab8:	d9801e04 	addi	r6,sp,120
 4013abc:	9809883a 	mov	r4,r19
 4013ac0:	401b5980 	call	401b598 <__ssprint_r>
 4013ac4:	103e5f26 	beq	r2,zero,4013444 <__reset+0xfb012444>
 4013ac8:	003cb306 	br	4012d98 <__reset+0xfb011d98>
 4013acc:	d9402c17 	ldw	r5,176(sp)
 4013ad0:	d9801e04 	addi	r6,sp,120
 4013ad4:	9809883a 	mov	r4,r19
 4013ad8:	401b5980 	call	401b598 <__ssprint_r>
 4013adc:	103cae1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013ae0:	d8c02017 	ldw	r3,128(sp)
 4013ae4:	da000404 	addi	r8,sp,16
 4013ae8:	003e0d06 	br	4013320 <__reset+0xfb012320>
 4013aec:	d9402c17 	ldw	r5,176(sp)
 4013af0:	d9801e04 	addi	r6,sp,120
 4013af4:	9809883a 	mov	r4,r19
 4013af8:	401b5980 	call	401b598 <__ssprint_r>
 4013afc:	103ca61e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013b00:	d8c02017 	ldw	r3,128(sp)
 4013b04:	da000404 	addi	r8,sp,16
 4013b08:	003dc106 	br	4013210 <__reset+0xfb012210>
 4013b0c:	d9402c17 	ldw	r5,176(sp)
 4013b10:	d9801e04 	addi	r6,sp,120
 4013b14:	9809883a 	mov	r4,r19
 4013b18:	401b5980 	call	401b598 <__ssprint_r>
 4013b1c:	103c9e1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013b20:	d8c02017 	ldw	r3,128(sp)
 4013b24:	da000404 	addi	r8,sp,16
 4013b28:	003dc706 	br	4013248 <__reset+0xfb012248>
 4013b2c:	d8802917 	ldw	r2,164(sp)
 4013b30:	d8002785 	stb	zero,158(sp)
 4013b34:	103f0816 	blt	r2,zero,4013758 <__reset+0xfb012758>
 4013b38:	00ffdfc4 	movi	r3,-129
 4013b3c:	a584b03a 	or	r2,r20,r22
 4013b40:	90e4703a 	and	r18,r18,r3
 4013b44:	103c8126 	beq	r2,zero,4012d4c <__reset+0xfb011d4c>
 4013b48:	0039883a 	mov	fp,zero
 4013b4c:	003e7606 	br	4013528 <__reset+0xfb012528>
 4013b50:	9080040c 	andi	r2,r18,16
 4013b54:	10013d26 	beq	r2,zero,401404c <___svfprintf_internal_r+0x1648>
 4013b58:	d9002d17 	ldw	r4,180(sp)
 4013b5c:	d9402917 	ldw	r5,164(sp)
 4013b60:	d8002785 	stb	zero,158(sp)
 4013b64:	20800104 	addi	r2,r4,4
 4013b68:	25000017 	ldw	r20,0(r4)
 4013b6c:	002d883a 	mov	r22,zero
 4013b70:	28013f16 	blt	r5,zero,4014070 <___svfprintf_internal_r+0x166c>
 4013b74:	00ffdfc4 	movi	r3,-129
 4013b78:	d8802d15 	stw	r2,180(sp)
 4013b7c:	90e4703a 	and	r18,r18,r3
 4013b80:	a03d2b26 	beq	r20,zero,4013030 <__reset+0xfb012030>
 4013b84:	0039883a 	mov	fp,zero
 4013b88:	003d2e06 	br	4013044 <__reset+0xfb012044>
 4013b8c:	dc402617 	ldw	r17,152(sp)
 4013b90:	0441830e 	bge	zero,r17,40141a0 <___svfprintf_internal_r+0x179c>
 4013b94:	dc403217 	ldw	r17,200(sp)
 4013b98:	d8803317 	ldw	r2,204(sp)
 4013b9c:	1440010e 	bge	r2,r17,4013ba4 <___svfprintf_internal_r+0x11a0>
 4013ba0:	1023883a 	mov	r17,r2
 4013ba4:	04400a0e 	bge	zero,r17,4013bd0 <___svfprintf_internal_r+0x11cc>
 4013ba8:	d8801f17 	ldw	r2,124(sp)
 4013bac:	1c47883a 	add	r3,r3,r17
 4013bb0:	44000015 	stw	r16,0(r8)
 4013bb4:	10800044 	addi	r2,r2,1
 4013bb8:	44400115 	stw	r17,4(r8)
 4013bbc:	d8c02015 	stw	r3,128(sp)
 4013bc0:	d8801f15 	stw	r2,124(sp)
 4013bc4:	010001c4 	movi	r4,7
 4013bc8:	20827516 	blt	r4,r2,40145a0 <___svfprintf_internal_r+0x1b9c>
 4013bcc:	42000204 	addi	r8,r8,8
 4013bd0:	88027b16 	blt	r17,zero,40145c0 <___svfprintf_internal_r+0x1bbc>
 4013bd4:	d9003217 	ldw	r4,200(sp)
 4013bd8:	2463c83a 	sub	r17,r4,r17
 4013bdc:	0440990e 	bge	zero,r17,4013e44 <___svfprintf_internal_r+0x1440>
 4013be0:	05800404 	movi	r22,16
 4013be4:	d8801f17 	ldw	r2,124(sp)
 4013be8:	b441530e 	bge	r22,r17,4014138 <___svfprintf_internal_r+0x1734>
 4013bec:	01010234 	movhi	r4,1032
 4013bf0:	2107a084 	addi	r4,r4,7810
 4013bf4:	d9002b15 	stw	r4,172(sp)
 4013bf8:	070001c4 	movi	fp,7
 4013bfc:	dd002c17 	ldw	r20,176(sp)
 4013c00:	00000306 	br	4013c10 <___svfprintf_internal_r+0x120c>
 4013c04:	42000204 	addi	r8,r8,8
 4013c08:	8c7ffc04 	addi	r17,r17,-16
 4013c0c:	b4414d0e 	bge	r22,r17,4014144 <___svfprintf_internal_r+0x1740>
 4013c10:	18c00404 	addi	r3,r3,16
 4013c14:	10800044 	addi	r2,r2,1
 4013c18:	45400015 	stw	r21,0(r8)
 4013c1c:	45800115 	stw	r22,4(r8)
 4013c20:	d8c02015 	stw	r3,128(sp)
 4013c24:	d8801f15 	stw	r2,124(sp)
 4013c28:	e0bff60e 	bge	fp,r2,4013c04 <__reset+0xfb012c04>
 4013c2c:	d9801e04 	addi	r6,sp,120
 4013c30:	a00b883a 	mov	r5,r20
 4013c34:	9809883a 	mov	r4,r19
 4013c38:	401b5980 	call	401b598 <__ssprint_r>
 4013c3c:	103c561e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013c40:	d8c02017 	ldw	r3,128(sp)
 4013c44:	d8801f17 	ldw	r2,124(sp)
 4013c48:	da000404 	addi	r8,sp,16
 4013c4c:	003fee06 	br	4013c08 <__reset+0xfb012c08>
 4013c50:	d9402c17 	ldw	r5,176(sp)
 4013c54:	d9801e04 	addi	r6,sp,120
 4013c58:	9809883a 	mov	r4,r19
 4013c5c:	401b5980 	call	401b598 <__ssprint_r>
 4013c60:	103c4d1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013c64:	d8c02017 	ldw	r3,128(sp)
 4013c68:	df002787 	ldb	fp,158(sp)
 4013c6c:	da000404 	addi	r8,sp,16
 4013c70:	003d5a06 	br	40131dc <__reset+0xfb0121dc>
 4013c74:	9080040c 	andi	r2,r18,16
 4013c78:	10005c26 	beq	r2,zero,4013dec <___svfprintf_internal_r+0x13e8>
 4013c7c:	d9402d17 	ldw	r5,180(sp)
 4013c80:	d8c02917 	ldw	r3,164(sp)
 4013c84:	d8002785 	stb	zero,158(sp)
 4013c88:	28800104 	addi	r2,r5,4
 4013c8c:	2d000017 	ldw	r20,0(r5)
 4013c90:	002d883a 	mov	r22,zero
 4013c94:	18005e16 	blt	r3,zero,4013e10 <___svfprintf_internal_r+0x140c>
 4013c98:	00ffdfc4 	movi	r3,-129
 4013c9c:	d8802d15 	stw	r2,180(sp)
 4013ca0:	90e4703a 	and	r18,r18,r3
 4013ca4:	0039883a 	mov	fp,zero
 4013ca8:	a03dfe26 	beq	r20,zero,40134a4 <__reset+0xfb0124a4>
 4013cac:	00800244 	movi	r2,9
 4013cb0:	153cb336 	bltu	r2,r20,4012f80 <__reset+0xfb011f80>
 4013cb4:	a5000c04 	addi	r20,r20,48
 4013cb8:	dc001dc4 	addi	r16,sp,119
 4013cbc:	dd001dc5 	stb	r20,119(sp)
 4013cc0:	d8c02817 	ldw	r3,160(sp)
 4013cc4:	1c07c83a 	sub	r3,r3,r16
 4013cc8:	d8c02e15 	stw	r3,184(sp)
 4013ccc:	003cf506 	br	40130a4 <__reset+0xfb0120a4>
 4013cd0:	d8803317 	ldw	r2,204(sp)
 4013cd4:	143fffc4 	addi	r16,r2,-1
 4013cd8:	043f560e 	bge	zero,r16,4013a34 <__reset+0xfb012a34>
 4013cdc:	07000404 	movi	fp,16
 4013ce0:	e403530e 	bge	fp,r16,4014a30 <___svfprintf_internal_r+0x202c>
 4013ce4:	01410234 	movhi	r5,1032
 4013ce8:	2947a084 	addi	r5,r5,7810
 4013cec:	d9402b15 	stw	r5,172(sp)
 4013cf0:	01c001c4 	movi	r7,7
 4013cf4:	dd002c17 	ldw	r20,176(sp)
 4013cf8:	00000306 	br	4013d08 <___svfprintf_internal_r+0x1304>
 4013cfc:	843ffc04 	addi	r16,r16,-16
 4013d00:	b5800204 	addi	r22,r22,8
 4013d04:	e400130e 	bge	fp,r16,4013d54 <___svfprintf_internal_r+0x1350>
 4013d08:	18c00404 	addi	r3,r3,16
 4013d0c:	8c400044 	addi	r17,r17,1
 4013d10:	b5400015 	stw	r21,0(r22)
 4013d14:	b7000115 	stw	fp,4(r22)
 4013d18:	d8c02015 	stw	r3,128(sp)
 4013d1c:	dc401f15 	stw	r17,124(sp)
 4013d20:	3c7ff60e 	bge	r7,r17,4013cfc <__reset+0xfb012cfc>
 4013d24:	d9801e04 	addi	r6,sp,120
 4013d28:	a00b883a 	mov	r5,r20
 4013d2c:	9809883a 	mov	r4,r19
 4013d30:	d9c03d15 	stw	r7,244(sp)
 4013d34:	401b5980 	call	401b598 <__ssprint_r>
 4013d38:	d9c03d17 	ldw	r7,244(sp)
 4013d3c:	103c161e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013d40:	843ffc04 	addi	r16,r16,-16
 4013d44:	d8c02017 	ldw	r3,128(sp)
 4013d48:	dc401f17 	ldw	r17,124(sp)
 4013d4c:	dd800404 	addi	r22,sp,16
 4013d50:	e43fed16 	blt	fp,r16,4013d08 <__reset+0xfb012d08>
 4013d54:	d8802b17 	ldw	r2,172(sp)
 4013d58:	1c07883a 	add	r3,r3,r16
 4013d5c:	8c400044 	addi	r17,r17,1
 4013d60:	b0800015 	stw	r2,0(r22)
 4013d64:	b4000115 	stw	r16,4(r22)
 4013d68:	d8c02015 	stw	r3,128(sp)
 4013d6c:	dc401f15 	stw	r17,124(sp)
 4013d70:	008001c4 	movi	r2,7
 4013d74:	147f2e0e 	bge	r2,r17,4013a30 <__reset+0xfb012a30>
 4013d78:	d9402c17 	ldw	r5,176(sp)
 4013d7c:	d9801e04 	addi	r6,sp,120
 4013d80:	9809883a 	mov	r4,r19
 4013d84:	401b5980 	call	401b598 <__ssprint_r>
 4013d88:	103c031e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013d8c:	d8c02017 	ldw	r3,128(sp)
 4013d90:	dc401f17 	ldw	r17,124(sp)
 4013d94:	dd800404 	addi	r22,sp,16
 4013d98:	003f2606 	br	4013a34 <__reset+0xfb012a34>
 4013d9c:	9080040c 	andi	r2,r18,16
 4013da0:	1000c326 	beq	r2,zero,40140b0 <___svfprintf_internal_r+0x16ac>
 4013da4:	d8802d17 	ldw	r2,180(sp)
 4013da8:	15000017 	ldw	r20,0(r2)
 4013dac:	10800104 	addi	r2,r2,4
 4013db0:	d8802d15 	stw	r2,180(sp)
 4013db4:	a02dd7fa 	srai	r22,r20,31
 4013db8:	b005883a 	mov	r2,r22
 4013dbc:	103c680e 	bge	r2,zero,4012f60 <__reset+0xfb011f60>
 4013dc0:	0529c83a 	sub	r20,zero,r20
 4013dc4:	a004c03a 	cmpne	r2,r20,zero
 4013dc8:	05adc83a 	sub	r22,zero,r22
 4013dcc:	b0adc83a 	sub	r22,r22,r2
 4013dd0:	d8802917 	ldw	r2,164(sp)
 4013dd4:	07000b44 	movi	fp,45
 4013dd8:	df002785 	stb	fp,158(sp)
 4013ddc:	10022e16 	blt	r2,zero,4014698 <___svfprintf_internal_r+0x1c94>
 4013de0:	00bfdfc4 	movi	r2,-129
 4013de4:	90a4703a 	and	r18,r18,r2
 4013de8:	003c6406 	br	4012f7c <__reset+0xfb011f7c>
 4013dec:	9080100c 	andi	r2,r18,64
 4013df0:	d8002785 	stb	zero,158(sp)
 4013df4:	10012526 	beq	r2,zero,401428c <___svfprintf_internal_r+0x1888>
 4013df8:	d9002d17 	ldw	r4,180(sp)
 4013dfc:	d9402917 	ldw	r5,164(sp)
 4013e00:	002d883a 	mov	r22,zero
 4013e04:	20800104 	addi	r2,r4,4
 4013e08:	2500000b 	ldhu	r20,0(r4)
 4013e0c:	283fa20e 	bge	r5,zero,4013c98 <__reset+0xfb012c98>
 4013e10:	d8802d15 	stw	r2,180(sp)
 4013e14:	0039883a 	mov	fp,zero
 4013e18:	a584b03a 	or	r2,r20,r22
 4013e1c:	103c571e 	bne	r2,zero,4012f7c <__reset+0xfb011f7c>
 4013e20:	00800044 	movi	r2,1
 4013e24:	003e5006 	br	4013768 <__reset+0xfb012768>
 4013e28:	d9402c17 	ldw	r5,176(sp)
 4013e2c:	d9801e04 	addi	r6,sp,120
 4013e30:	9809883a 	mov	r4,r19
 4013e34:	401b5980 	call	401b598 <__ssprint_r>
 4013e38:	103bd71e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013e3c:	d8c02017 	ldw	r3,128(sp)
 4013e40:	da000404 	addi	r8,sp,16
 4013e44:	d9003217 	ldw	r4,200(sp)
 4013e48:	d8802617 	ldw	r2,152(sp)
 4013e4c:	d9403317 	ldw	r5,204(sp)
 4013e50:	8123883a 	add	r17,r16,r4
 4013e54:	11400216 	blt	r2,r5,4013e60 <___svfprintf_internal_r+0x145c>
 4013e58:	9100004c 	andi	r4,r18,1
 4013e5c:	20000d26 	beq	r4,zero,4013e94 <___svfprintf_internal_r+0x1490>
 4013e60:	d9003817 	ldw	r4,224(sp)
 4013e64:	d9403417 	ldw	r5,208(sp)
 4013e68:	1907883a 	add	r3,r3,r4
 4013e6c:	d9001f17 	ldw	r4,124(sp)
 4013e70:	41400015 	stw	r5,0(r8)
 4013e74:	d9403817 	ldw	r5,224(sp)
 4013e78:	21000044 	addi	r4,r4,1
 4013e7c:	d8c02015 	stw	r3,128(sp)
 4013e80:	41400115 	stw	r5,4(r8)
 4013e84:	d9001f15 	stw	r4,124(sp)
 4013e88:	014001c4 	movi	r5,7
 4013e8c:	2901dc16 	blt	r5,r4,4014600 <___svfprintf_internal_r+0x1bfc>
 4013e90:	42000204 	addi	r8,r8,8
 4013e94:	d9003317 	ldw	r4,204(sp)
 4013e98:	8121883a 	add	r16,r16,r4
 4013e9c:	2085c83a 	sub	r2,r4,r2
 4013ea0:	8461c83a 	sub	r16,r16,r17
 4013ea4:	1400010e 	bge	r2,r16,4013eac <___svfprintf_internal_r+0x14a8>
 4013ea8:	1021883a 	mov	r16,r2
 4013eac:	04000a0e 	bge	zero,r16,4013ed8 <___svfprintf_internal_r+0x14d4>
 4013eb0:	d9001f17 	ldw	r4,124(sp)
 4013eb4:	1c07883a 	add	r3,r3,r16
 4013eb8:	44400015 	stw	r17,0(r8)
 4013ebc:	21000044 	addi	r4,r4,1
 4013ec0:	44000115 	stw	r16,4(r8)
 4013ec4:	d8c02015 	stw	r3,128(sp)
 4013ec8:	d9001f15 	stw	r4,124(sp)
 4013ecc:	014001c4 	movi	r5,7
 4013ed0:	2901e616 	blt	r5,r4,401466c <___svfprintf_internal_r+0x1c68>
 4013ed4:	42000204 	addi	r8,r8,8
 4013ed8:	8001f616 	blt	r16,zero,40146b4 <___svfprintf_internal_r+0x1cb0>
 4013edc:	1421c83a 	sub	r16,r2,r16
 4013ee0:	043d1c0e 	bge	zero,r16,4013354 <__reset+0xfb012354>
 4013ee4:	04400404 	movi	r17,16
 4013ee8:	d8801f17 	ldw	r2,124(sp)
 4013eec:	8c3edd0e 	bge	r17,r16,4013a64 <__reset+0xfb012a64>
 4013ef0:	01410234 	movhi	r5,1032
 4013ef4:	2947a084 	addi	r5,r5,7810
 4013ef8:	d9402b15 	stw	r5,172(sp)
 4013efc:	058001c4 	movi	r22,7
 4013f00:	dd002c17 	ldw	r20,176(sp)
 4013f04:	00000306 	br	4013f14 <___svfprintf_internal_r+0x1510>
 4013f08:	42000204 	addi	r8,r8,8
 4013f0c:	843ffc04 	addi	r16,r16,-16
 4013f10:	8c3ed70e 	bge	r17,r16,4013a70 <__reset+0xfb012a70>
 4013f14:	18c00404 	addi	r3,r3,16
 4013f18:	10800044 	addi	r2,r2,1
 4013f1c:	45400015 	stw	r21,0(r8)
 4013f20:	44400115 	stw	r17,4(r8)
 4013f24:	d8c02015 	stw	r3,128(sp)
 4013f28:	d8801f15 	stw	r2,124(sp)
 4013f2c:	b0bff60e 	bge	r22,r2,4013f08 <__reset+0xfb012f08>
 4013f30:	d9801e04 	addi	r6,sp,120
 4013f34:	a00b883a 	mov	r5,r20
 4013f38:	9809883a 	mov	r4,r19
 4013f3c:	401b5980 	call	401b598 <__ssprint_r>
 4013f40:	103b951e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013f44:	d8c02017 	ldw	r3,128(sp)
 4013f48:	d8801f17 	ldw	r2,124(sp)
 4013f4c:	da000404 	addi	r8,sp,16
 4013f50:	003fee06 	br	4013f0c <__reset+0xfb012f0c>
 4013f54:	9088703a 	and	r4,r18,r2
 4013f58:	203e8d1e 	bne	r4,zero,4013990 <__reset+0xfb012990>
 4013f5c:	dc401f17 	ldw	r17,124(sp)
 4013f60:	40800115 	stw	r2,4(r8)
 4013f64:	44000015 	stw	r16,0(r8)
 4013f68:	8c400044 	addi	r17,r17,1
 4013f6c:	d8c02015 	stw	r3,128(sp)
 4013f70:	dc401f15 	stw	r17,124(sp)
 4013f74:	008001c4 	movi	r2,7
 4013f78:	147f7f16 	blt	r2,r17,4013d78 <__reset+0xfb012d78>
 4013f7c:	45800204 	addi	r22,r8,8
 4013f80:	003eac06 	br	4013a34 <__reset+0xfb012a34>
 4013f84:	d9402c17 	ldw	r5,176(sp)
 4013f88:	d9801e04 	addi	r6,sp,120
 4013f8c:	9809883a 	mov	r4,r19
 4013f90:	401b5980 	call	401b598 <__ssprint_r>
 4013f94:	103b801e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013f98:	d8c02017 	ldw	r3,128(sp)
 4013f9c:	dc401f17 	ldw	r17,124(sp)
 4013fa0:	da000404 	addi	r8,sp,16
 4013fa4:	003e8406 	br	40139b8 <__reset+0xfb0129b8>
 4013fa8:	d9402c17 	ldw	r5,176(sp)
 4013fac:	d9801e04 	addi	r6,sp,120
 4013fb0:	9809883a 	mov	r4,r19
 4013fb4:	401b5980 	call	401b598 <__ssprint_r>
 4013fb8:	103b771e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013fbc:	d8c02017 	ldw	r3,128(sp)
 4013fc0:	dc401f17 	ldw	r17,124(sp)
 4013fc4:	dd800404 	addi	r22,sp,16
 4013fc8:	003e8606 	br	40139e4 <__reset+0xfb0129e4>
 4013fcc:	0029883a 	mov	r20,zero
 4013fd0:	a5000c04 	addi	r20,r20,48
 4013fd4:	dc001dc4 	addi	r16,sp,119
 4013fd8:	dd001dc5 	stb	r20,119(sp)
 4013fdc:	003f3806 	br	4013cc0 <__reset+0xfb012cc0>
 4013fe0:	d9402c17 	ldw	r5,176(sp)
 4013fe4:	d9801e04 	addi	r6,sp,120
 4013fe8:	9809883a 	mov	r4,r19
 4013fec:	401b5980 	call	401b598 <__ssprint_r>
 4013ff0:	103b691e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4013ff4:	d8c02017 	ldw	r3,128(sp)
 4013ff8:	da000404 	addi	r8,sp,16
 4013ffc:	003c9506 	br	4013254 <__reset+0xfb012254>
 4014000:	d9003617 	ldw	r4,216(sp)
 4014004:	d9403717 	ldw	r5,220(sp)
 4014008:	da003e15 	stw	r8,248(sp)
 401400c:	400d9800 	call	400d980 <__fpclassifyd>
 4014010:	da003e17 	ldw	r8,248(sp)
 4014014:	1000bd1e 	bne	r2,zero,401430c <___svfprintf_internal_r+0x1908>
 4014018:	008011c4 	movi	r2,71
 401401c:	14411e0e 	bge	r2,r17,4014498 <___svfprintf_internal_r+0x1a94>
 4014020:	04010234 	movhi	r16,1032
 4014024:	84079304 	addi	r16,r16,7756
 4014028:	00c000c4 	movi	r3,3
 401402c:	00bfdfc4 	movi	r2,-129
 4014030:	d8c02a15 	stw	r3,168(sp)
 4014034:	90a4703a 	and	r18,r18,r2
 4014038:	df002783 	ldbu	fp,158(sp)
 401403c:	d8c02e15 	stw	r3,184(sp)
 4014040:	d8002915 	stw	zero,164(sp)
 4014044:	d8003215 	stw	zero,200(sp)
 4014048:	003c1c06 	br	40130bc <__reset+0xfb0120bc>
 401404c:	9080100c 	andi	r2,r18,64
 4014050:	d8002785 	stb	zero,158(sp)
 4014054:	10009426 	beq	r2,zero,40142a8 <___svfprintf_internal_r+0x18a4>
 4014058:	d8c02d17 	ldw	r3,180(sp)
 401405c:	d9002917 	ldw	r4,164(sp)
 4014060:	002d883a 	mov	r22,zero
 4014064:	18800104 	addi	r2,r3,4
 4014068:	1d00000b 	ldhu	r20,0(r3)
 401406c:	203ec10e 	bge	r4,zero,4013b74 <__reset+0xfb012b74>
 4014070:	a586b03a 	or	r3,r20,r22
 4014074:	d8802d15 	stw	r2,180(sp)
 4014078:	183ec21e 	bne	r3,zero,4013b84 <__reset+0xfb012b84>
 401407c:	0039883a 	mov	fp,zero
 4014080:	0005883a 	mov	r2,zero
 4014084:	003db806 	br	4013768 <__reset+0xfb012768>
 4014088:	d8802d17 	ldw	r2,180(sp)
 401408c:	d8c02d17 	ldw	r3,180(sp)
 4014090:	d9002d17 	ldw	r4,180(sp)
 4014094:	10800017 	ldw	r2,0(r2)
 4014098:	18c00117 	ldw	r3,4(r3)
 401409c:	21000204 	addi	r4,r4,8
 40140a0:	d8803615 	stw	r2,216(sp)
 40140a4:	d8c03715 	stw	r3,220(sp)
 40140a8:	d9002d15 	stw	r4,180(sp)
 40140ac:	003b8206 	br	4012eb8 <__reset+0xfb011eb8>
 40140b0:	9080100c 	andi	r2,r18,64
 40140b4:	10010726 	beq	r2,zero,40144d4 <___svfprintf_internal_r+0x1ad0>
 40140b8:	d8c02d17 	ldw	r3,180(sp)
 40140bc:	1d00000f 	ldh	r20,0(r3)
 40140c0:	18c00104 	addi	r3,r3,4
 40140c4:	d8c02d15 	stw	r3,180(sp)
 40140c8:	a02dd7fa 	srai	r22,r20,31
 40140cc:	b005883a 	mov	r2,r22
 40140d0:	003ba206 	br	4012f5c <__reset+0xfb011f5c>
 40140d4:	9080100c 	andi	r2,r18,64
 40140d8:	10010526 	beq	r2,zero,40144f0 <___svfprintf_internal_r+0x1aec>
 40140dc:	d9002d17 	ldw	r4,180(sp)
 40140e0:	002d883a 	mov	r22,zero
 40140e4:	2500000b 	ldhu	r20,0(r4)
 40140e8:	21000104 	addi	r4,r4,4
 40140ec:	d9002d15 	stw	r4,180(sp)
 40140f0:	003cfe06 	br	40134ec <__reset+0xfb0124ec>
 40140f4:	bc400007 	ldb	r17,0(r23)
 40140f8:	003a9606 	br	4012b54 <__reset+0xfb011b54>
 40140fc:	9080040c 	andi	r2,r18,16
 4014100:	10010126 	beq	r2,zero,4014508 <___svfprintf_internal_r+0x1b04>
 4014104:	d9402d17 	ldw	r5,180(sp)
 4014108:	d8c02f17 	ldw	r3,188(sp)
 401410c:	28800017 	ldw	r2,0(r5)
 4014110:	29400104 	addi	r5,r5,4
 4014114:	d9402d15 	stw	r5,180(sp)
 4014118:	10c00015 	stw	r3,0(r2)
 401411c:	003a6406 	br	4012ab0 <__reset+0xfb011ab0>
 4014120:	d9002917 	ldw	r4,164(sp)
 4014124:	d8002785 	stb	zero,158(sp)
 4014128:	203d8d16 	blt	r4,zero,4013760 <__reset+0xfb012760>
 401412c:	00bfdfc4 	movi	r2,-129
 4014130:	90a4703a 	and	r18,r18,r2
 4014134:	003b0506 	br	4012d4c <__reset+0xfb011d4c>
 4014138:	01410234 	movhi	r5,1032
 401413c:	2947a084 	addi	r5,r5,7810
 4014140:	d9402b15 	stw	r5,172(sp)
 4014144:	d9402b17 	ldw	r5,172(sp)
 4014148:	1c47883a 	add	r3,r3,r17
 401414c:	10800044 	addi	r2,r2,1
 4014150:	41400015 	stw	r5,0(r8)
 4014154:	44400115 	stw	r17,4(r8)
 4014158:	d8c02015 	stw	r3,128(sp)
 401415c:	d8801f15 	stw	r2,124(sp)
 4014160:	010001c4 	movi	r4,7
 4014164:	20bf3016 	blt	r4,r2,4013e28 <__reset+0xfb012e28>
 4014168:	42000204 	addi	r8,r8,8
 401416c:	003f3506 	br	4013e44 <__reset+0xfb012e44>
 4014170:	01010234 	movhi	r4,1032
 4014174:	2107a084 	addi	r4,r4,7810
 4014178:	d9002b15 	stw	r4,172(sp)
 401417c:	003c5e06 	br	40132f8 <__reset+0xfb0122f8>
 4014180:	d9402c17 	ldw	r5,176(sp)
 4014184:	d9801e04 	addi	r6,sp,120
 4014188:	9809883a 	mov	r4,r19
 401418c:	401b5980 	call	401b598 <__ssprint_r>
 4014190:	103b011e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014194:	d8c02017 	ldw	r3,128(sp)
 4014198:	da000404 	addi	r8,sp,16
 401419c:	003d9306 	br	40137ec <__reset+0xfb0127ec>
 40141a0:	d8801f17 	ldw	r2,124(sp)
 40141a4:	01410234 	movhi	r5,1032
 40141a8:	01000044 	movi	r4,1
 40141ac:	18c00044 	addi	r3,r3,1
 40141b0:	10800044 	addi	r2,r2,1
 40141b4:	2947a004 	addi	r5,r5,7808
 40141b8:	41000115 	stw	r4,4(r8)
 40141bc:	41400015 	stw	r5,0(r8)
 40141c0:	d8c02015 	stw	r3,128(sp)
 40141c4:	d8801f15 	stw	r2,124(sp)
 40141c8:	010001c4 	movi	r4,7
 40141cc:	2080b516 	blt	r4,r2,40144a4 <___svfprintf_internal_r+0x1aa0>
 40141d0:	42000204 	addi	r8,r8,8
 40141d4:	8800041e 	bne	r17,zero,40141e8 <___svfprintf_internal_r+0x17e4>
 40141d8:	d8803317 	ldw	r2,204(sp)
 40141dc:	1000021e 	bne	r2,zero,40141e8 <___svfprintf_internal_r+0x17e4>
 40141e0:	9080004c 	andi	r2,r18,1
 40141e4:	103c5b26 	beq	r2,zero,4013354 <__reset+0xfb012354>
 40141e8:	d9003817 	ldw	r4,224(sp)
 40141ec:	d8801f17 	ldw	r2,124(sp)
 40141f0:	d9403417 	ldw	r5,208(sp)
 40141f4:	20c7883a 	add	r3,r4,r3
 40141f8:	10800044 	addi	r2,r2,1
 40141fc:	41000115 	stw	r4,4(r8)
 4014200:	41400015 	stw	r5,0(r8)
 4014204:	d8c02015 	stw	r3,128(sp)
 4014208:	d8801f15 	stw	r2,124(sp)
 401420c:	010001c4 	movi	r4,7
 4014210:	20818016 	blt	r4,r2,4014814 <___svfprintf_internal_r+0x1e10>
 4014214:	42000204 	addi	r8,r8,8
 4014218:	0463c83a 	sub	r17,zero,r17
 401421c:	0440cb0e 	bge	zero,r17,401454c <___svfprintf_internal_r+0x1b48>
 4014220:	05800404 	movi	r22,16
 4014224:	b440e80e 	bge	r22,r17,40145c8 <___svfprintf_internal_r+0x1bc4>
 4014228:	01410234 	movhi	r5,1032
 401422c:	2947a084 	addi	r5,r5,7810
 4014230:	d9402b15 	stw	r5,172(sp)
 4014234:	070001c4 	movi	fp,7
 4014238:	dd002c17 	ldw	r20,176(sp)
 401423c:	00000306 	br	401424c <___svfprintf_internal_r+0x1848>
 4014240:	42000204 	addi	r8,r8,8
 4014244:	8c7ffc04 	addi	r17,r17,-16
 4014248:	b440e20e 	bge	r22,r17,40145d4 <___svfprintf_internal_r+0x1bd0>
 401424c:	18c00404 	addi	r3,r3,16
 4014250:	10800044 	addi	r2,r2,1
 4014254:	45400015 	stw	r21,0(r8)
 4014258:	45800115 	stw	r22,4(r8)
 401425c:	d8c02015 	stw	r3,128(sp)
 4014260:	d8801f15 	stw	r2,124(sp)
 4014264:	e0bff60e 	bge	fp,r2,4014240 <__reset+0xfb013240>
 4014268:	d9801e04 	addi	r6,sp,120
 401426c:	a00b883a 	mov	r5,r20
 4014270:	9809883a 	mov	r4,r19
 4014274:	401b5980 	call	401b598 <__ssprint_r>
 4014278:	103ac71e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 401427c:	d8c02017 	ldw	r3,128(sp)
 4014280:	d8801f17 	ldw	r2,124(sp)
 4014284:	da000404 	addi	r8,sp,16
 4014288:	003fee06 	br	4014244 <__reset+0xfb013244>
 401428c:	d8c02d17 	ldw	r3,180(sp)
 4014290:	d9002917 	ldw	r4,164(sp)
 4014294:	002d883a 	mov	r22,zero
 4014298:	18800104 	addi	r2,r3,4
 401429c:	1d000017 	ldw	r20,0(r3)
 40142a0:	203e7d0e 	bge	r4,zero,4013c98 <__reset+0xfb012c98>
 40142a4:	003eda06 	br	4013e10 <__reset+0xfb012e10>
 40142a8:	d9402d17 	ldw	r5,180(sp)
 40142ac:	d8c02917 	ldw	r3,164(sp)
 40142b0:	002d883a 	mov	r22,zero
 40142b4:	28800104 	addi	r2,r5,4
 40142b8:	2d000017 	ldw	r20,0(r5)
 40142bc:	183e2d0e 	bge	r3,zero,4013b74 <__reset+0xfb012b74>
 40142c0:	003f6b06 	br	4014070 <__reset+0xfb013070>
 40142c4:	d8c02d15 	stw	r3,180(sp)
 40142c8:	0039883a 	mov	fp,zero
 40142cc:	003ed206 	br	4013e18 <__reset+0xfb012e18>
 40142d0:	bc400043 	ldbu	r17,1(r23)
 40142d4:	94800814 	ori	r18,r18,32
 40142d8:	bdc00044 	addi	r23,r23,1
 40142dc:	8c403fcc 	andi	r17,r17,255
 40142e0:	8c40201c 	xori	r17,r17,128
 40142e4:	8c7fe004 	addi	r17,r17,-128
 40142e8:	003a1a06 	br	4012b54 <__reset+0xfb011b54>
 40142ec:	d9402c17 	ldw	r5,176(sp)
 40142f0:	d9801e04 	addi	r6,sp,120
 40142f4:	9809883a 	mov	r4,r19
 40142f8:	401b5980 	call	401b598 <__ssprint_r>
 40142fc:	103aa61e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014300:	d8c02017 	ldw	r3,128(sp)
 4014304:	da000404 	addi	r8,sp,16
 4014308:	003d4a06 	br	4013834 <__reset+0xfb012834>
 401430c:	d9002917 	ldw	r4,164(sp)
 4014310:	05bff7c4 	movi	r22,-33
 4014314:	00bfffc4 	movi	r2,-1
 4014318:	8dac703a 	and	r22,r17,r22
 401431c:	20806a26 	beq	r4,r2,40144c8 <___svfprintf_internal_r+0x1ac4>
 4014320:	008011c4 	movi	r2,71
 4014324:	b0813726 	beq	r22,r2,4014804 <___svfprintf_internal_r+0x1e00>
 4014328:	d9003717 	ldw	r4,220(sp)
 401432c:	90c04014 	ori	r3,r18,256
 4014330:	d8c02b15 	stw	r3,172(sp)
 4014334:	20015d16 	blt	r4,zero,40148ac <___svfprintf_internal_r+0x1ea8>
 4014338:	dd003717 	ldw	r20,220(sp)
 401433c:	d8002a05 	stb	zero,168(sp)
 4014340:	00801984 	movi	r2,102
 4014344:	88814026 	beq	r17,r2,4014848 <___svfprintf_internal_r+0x1e44>
 4014348:	00801184 	movi	r2,70
 401434c:	88817126 	beq	r17,r2,4014914 <___svfprintf_internal_r+0x1f10>
 4014350:	00801144 	movi	r2,69
 4014354:	b0816226 	beq	r22,r2,40148e0 <___svfprintf_internal_r+0x1edc>
 4014358:	d8c02917 	ldw	r3,164(sp)
 401435c:	d8802104 	addi	r2,sp,132
 4014360:	d8800315 	stw	r2,12(sp)
 4014364:	d9403617 	ldw	r5,216(sp)
 4014368:	d8802504 	addi	r2,sp,148
 401436c:	d8800215 	stw	r2,8(sp)
 4014370:	d8802604 	addi	r2,sp,152
 4014374:	d8c00015 	stw	r3,0(sp)
 4014378:	d8800115 	stw	r2,4(sp)
 401437c:	01c00084 	movi	r7,2
 4014380:	a00d883a 	mov	r6,r20
 4014384:	9809883a 	mov	r4,r19
 4014388:	d8c03d15 	stw	r3,244(sp)
 401438c:	da003e15 	stw	r8,248(sp)
 4014390:	40172000 	call	4017200 <_dtoa_r>
 4014394:	1021883a 	mov	r16,r2
 4014398:	008019c4 	movi	r2,103
 401439c:	d8c03d17 	ldw	r3,244(sp)
 40143a0:	da003e17 	ldw	r8,248(sp)
 40143a4:	8880e726 	beq	r17,r2,4014744 <___svfprintf_internal_r+0x1d40>
 40143a8:	008011c4 	movi	r2,71
 40143ac:	8880d426 	beq	r17,r2,4014700 <___svfprintf_internal_r+0x1cfc>
 40143b0:	80f9883a 	add	fp,r16,r3
 40143b4:	d9003617 	ldw	r4,216(sp)
 40143b8:	000d883a 	mov	r6,zero
 40143bc:	000f883a 	mov	r7,zero
 40143c0:	a00b883a 	mov	r5,r20
 40143c4:	da003e15 	stw	r8,248(sp)
 40143c8:	40104ec0 	call	40104ec <__eqdf2>
 40143cc:	da003e17 	ldw	r8,248(sp)
 40143d0:	1000e426 	beq	r2,zero,4014764 <___svfprintf_internal_r+0x1d60>
 40143d4:	d8802117 	ldw	r2,132(sp)
 40143d8:	1700062e 	bgeu	r2,fp,40143f4 <___svfprintf_internal_r+0x19f0>
 40143dc:	01000c04 	movi	r4,48
 40143e0:	10c00044 	addi	r3,r2,1
 40143e4:	d8c02115 	stw	r3,132(sp)
 40143e8:	11000005 	stb	r4,0(r2)
 40143ec:	d8802117 	ldw	r2,132(sp)
 40143f0:	173ffb36 	bltu	r2,fp,40143e0 <__reset+0xfb0133e0>
 40143f4:	1405c83a 	sub	r2,r2,r16
 40143f8:	d8803315 	stw	r2,204(sp)
 40143fc:	008011c4 	movi	r2,71
 4014400:	b080c526 	beq	r22,r2,4014718 <___svfprintf_internal_r+0x1d14>
 4014404:	00801944 	movi	r2,101
 4014408:	1441d90e 	bge	r2,r17,4014b70 <___svfprintf_internal_r+0x216c>
 401440c:	d8c02617 	ldw	r3,152(sp)
 4014410:	00801984 	movi	r2,102
 4014414:	d8c03215 	stw	r3,200(sp)
 4014418:	88813426 	beq	r17,r2,40148ec <___svfprintf_internal_r+0x1ee8>
 401441c:	d8c03217 	ldw	r3,200(sp)
 4014420:	d9003317 	ldw	r4,204(sp)
 4014424:	19012516 	blt	r3,r4,40148bc <___svfprintf_internal_r+0x1eb8>
 4014428:	9480004c 	andi	r18,r18,1
 401442c:	9001841e 	bne	r18,zero,4014a40 <___svfprintf_internal_r+0x203c>
 4014430:	1805883a 	mov	r2,r3
 4014434:	1801cc16 	blt	r3,zero,4014b68 <___svfprintf_internal_r+0x2164>
 4014438:	d8c03217 	ldw	r3,200(sp)
 401443c:	044019c4 	movi	r17,103
 4014440:	d8c02e15 	stw	r3,184(sp)
 4014444:	df002a07 	ldb	fp,168(sp)
 4014448:	e000a61e 	bne	fp,zero,40146e4 <___svfprintf_internal_r+0x1ce0>
 401444c:	df002783 	ldbu	fp,158(sp)
 4014450:	d8802a15 	stw	r2,168(sp)
 4014454:	dc802b17 	ldw	r18,172(sp)
 4014458:	d8002915 	stw	zero,164(sp)
 401445c:	003b1706 	br	40130bc <__reset+0xfb0120bc>
 4014460:	04010234 	movhi	r16,1032
 4014464:	84079004 	addi	r16,r16,7744
 4014468:	003aa606 	br	4012f04 <__reset+0xfb011f04>
 401446c:	d9003917 	ldw	r4,228(sp)
 4014470:	04001004 	movi	r16,64
 4014474:	800b883a 	mov	r5,r16
 4014478:	4011c080 	call	4011c08 <_malloc_r>
 401447c:	d9002c17 	ldw	r4,176(sp)
 4014480:	20800015 	stw	r2,0(r4)
 4014484:	20800415 	stw	r2,16(r4)
 4014488:	1001cb26 	beq	r2,zero,4014bb8 <___svfprintf_internal_r+0x21b4>
 401448c:	d8802c17 	ldw	r2,176(sp)
 4014490:	14000515 	stw	r16,20(r2)
 4014494:	00397606 	br	4012a70 <__reset+0xfb011a70>
 4014498:	04010234 	movhi	r16,1032
 401449c:	84079204 	addi	r16,r16,7752
 40144a0:	003ee106 	br	4014028 <__reset+0xfb013028>
 40144a4:	d9402c17 	ldw	r5,176(sp)
 40144a8:	d9801e04 	addi	r6,sp,120
 40144ac:	9809883a 	mov	r4,r19
 40144b0:	401b5980 	call	401b598 <__ssprint_r>
 40144b4:	103a381e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 40144b8:	dc402617 	ldw	r17,152(sp)
 40144bc:	d8c02017 	ldw	r3,128(sp)
 40144c0:	da000404 	addi	r8,sp,16
 40144c4:	003f4306 	br	40141d4 <__reset+0xfb0131d4>
 40144c8:	01400184 	movi	r5,6
 40144cc:	d9402915 	stw	r5,164(sp)
 40144d0:	003f9506 	br	4014328 <__reset+0xfb013328>
 40144d4:	d9002d17 	ldw	r4,180(sp)
 40144d8:	25000017 	ldw	r20,0(r4)
 40144dc:	21000104 	addi	r4,r4,4
 40144e0:	d9002d15 	stw	r4,180(sp)
 40144e4:	a02dd7fa 	srai	r22,r20,31
 40144e8:	b005883a 	mov	r2,r22
 40144ec:	003a9b06 	br	4012f5c <__reset+0xfb011f5c>
 40144f0:	d9402d17 	ldw	r5,180(sp)
 40144f4:	002d883a 	mov	r22,zero
 40144f8:	2d000017 	ldw	r20,0(r5)
 40144fc:	29400104 	addi	r5,r5,4
 4014500:	d9402d15 	stw	r5,180(sp)
 4014504:	003bf906 	br	40134ec <__reset+0xfb0124ec>
 4014508:	9480100c 	andi	r18,r18,64
 401450c:	90006e26 	beq	r18,zero,40146c8 <___svfprintf_internal_r+0x1cc4>
 4014510:	d9002d17 	ldw	r4,180(sp)
 4014514:	d9402f17 	ldw	r5,188(sp)
 4014518:	20800017 	ldw	r2,0(r4)
 401451c:	21000104 	addi	r4,r4,4
 4014520:	d9002d15 	stw	r4,180(sp)
 4014524:	1140000d 	sth	r5,0(r2)
 4014528:	00396106 	br	4012ab0 <__reset+0xfb011ab0>
 401452c:	d9402c17 	ldw	r5,176(sp)
 4014530:	d9801e04 	addi	r6,sp,120
 4014534:	9809883a 	mov	r4,r19
 4014538:	401b5980 	call	401b598 <__ssprint_r>
 401453c:	103a161e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014540:	d8c02017 	ldw	r3,128(sp)
 4014544:	d8801f17 	ldw	r2,124(sp)
 4014548:	da000404 	addi	r8,sp,16
 401454c:	d9403317 	ldw	r5,204(sp)
 4014550:	10800044 	addi	r2,r2,1
 4014554:	44000015 	stw	r16,0(r8)
 4014558:	28c7883a 	add	r3,r5,r3
 401455c:	003b7706 	br	401333c <__reset+0xfb01233c>
 4014560:	8009883a 	mov	r4,r16
 4014564:	da003e15 	stw	r8,248(sp)
 4014568:	401296c0 	call	401296c <strlen>
 401456c:	d8802e15 	stw	r2,184(sp)
 4014570:	da003e17 	ldw	r8,248(sp)
 4014574:	103c280e 	bge	r2,zero,4013618 <__reset+0xfb012618>
 4014578:	0005883a 	mov	r2,zero
 401457c:	003c2606 	br	4013618 <__reset+0xfb012618>
 4014580:	00bfffc4 	movi	r2,-1
 4014584:	003a0906 	br	4012dac <__reset+0xfb011dac>
 4014588:	01010234 	movhi	r4,1032
 401458c:	2107a484 	addi	r4,r4,7826
 4014590:	d9003515 	stw	r4,212(sp)
 4014594:	003b0606 	br	40131b0 <__reset+0xfb0121b0>
 4014598:	013fffc4 	movi	r4,-1
 401459c:	003a2706 	br	4012e3c <__reset+0xfb011e3c>
 40145a0:	d9402c17 	ldw	r5,176(sp)
 40145a4:	d9801e04 	addi	r6,sp,120
 40145a8:	9809883a 	mov	r4,r19
 40145ac:	401b5980 	call	401b598 <__ssprint_r>
 40145b0:	1039f91e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 40145b4:	d8c02017 	ldw	r3,128(sp)
 40145b8:	da000404 	addi	r8,sp,16
 40145bc:	003d8406 	br	4013bd0 <__reset+0xfb012bd0>
 40145c0:	0023883a 	mov	r17,zero
 40145c4:	003d8306 	br	4013bd4 <__reset+0xfb012bd4>
 40145c8:	01010234 	movhi	r4,1032
 40145cc:	2107a084 	addi	r4,r4,7810
 40145d0:	d9002b15 	stw	r4,172(sp)
 40145d4:	d9002b17 	ldw	r4,172(sp)
 40145d8:	1c47883a 	add	r3,r3,r17
 40145dc:	10800044 	addi	r2,r2,1
 40145e0:	41000015 	stw	r4,0(r8)
 40145e4:	44400115 	stw	r17,4(r8)
 40145e8:	d8c02015 	stw	r3,128(sp)
 40145ec:	d8801f15 	stw	r2,124(sp)
 40145f0:	010001c4 	movi	r4,7
 40145f4:	20bfcd16 	blt	r4,r2,401452c <__reset+0xfb01352c>
 40145f8:	42000204 	addi	r8,r8,8
 40145fc:	003fd306 	br	401454c <__reset+0xfb01354c>
 4014600:	d9402c17 	ldw	r5,176(sp)
 4014604:	d9801e04 	addi	r6,sp,120
 4014608:	9809883a 	mov	r4,r19
 401460c:	401b5980 	call	401b598 <__ssprint_r>
 4014610:	1039e11e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014614:	d8802617 	ldw	r2,152(sp)
 4014618:	d8c02017 	ldw	r3,128(sp)
 401461c:	da000404 	addi	r8,sp,16
 4014620:	003e1c06 	br	4013e94 <__reset+0xfb012e94>
 4014624:	d8802917 	ldw	r2,164(sp)
 4014628:	00c00184 	movi	r3,6
 401462c:	1880012e 	bgeu	r3,r2,4014634 <___svfprintf_internal_r+0x1c30>
 4014630:	1805883a 	mov	r2,r3
 4014634:	d8802e15 	stw	r2,184(sp)
 4014638:	1000f316 	blt	r2,zero,4014a08 <___svfprintf_internal_r+0x2004>
 401463c:	04010234 	movhi	r16,1032
 4014640:	d8802a15 	stw	r2,168(sp)
 4014644:	dd002d15 	stw	r20,180(sp)
 4014648:	d8002915 	stw	zero,164(sp)
 401464c:	d8003215 	stw	zero,200(sp)
 4014650:	84079e04 	addi	r16,r16,7800
 4014654:	0039883a 	mov	fp,zero
 4014658:	003a9f06 	br	40130d8 <__reset+0xfb0120d8>
 401465c:	01010234 	movhi	r4,1032
 4014660:	2107a484 	addi	r4,r4,7826
 4014664:	d9003515 	stw	r4,212(sp)
 4014668:	003b5f06 	br	40133e8 <__reset+0xfb0123e8>
 401466c:	d9402c17 	ldw	r5,176(sp)
 4014670:	d9801e04 	addi	r6,sp,120
 4014674:	9809883a 	mov	r4,r19
 4014678:	401b5980 	call	401b598 <__ssprint_r>
 401467c:	1039c61e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014680:	d8802617 	ldw	r2,152(sp)
 4014684:	d9403317 	ldw	r5,204(sp)
 4014688:	d8c02017 	ldw	r3,128(sp)
 401468c:	da000404 	addi	r8,sp,16
 4014690:	2885c83a 	sub	r2,r5,r2
 4014694:	003e1006 	br	4013ed8 <__reset+0xfb012ed8>
 4014698:	00800044 	movi	r2,1
 401469c:	10803fcc 	andi	r2,r2,255
 40146a0:	00c00044 	movi	r3,1
 40146a4:	10fa3526 	beq	r2,r3,4012f7c <__reset+0xfb011f7c>
 40146a8:	00c00084 	movi	r3,2
 40146ac:	10fb9e26 	beq	r2,r3,4013528 <__reset+0xfb012528>
 40146b0:	003a6406 	br	4013044 <__reset+0xfb012044>
 40146b4:	0021883a 	mov	r16,zero
 40146b8:	003e0806 	br	4013edc <__reset+0xfb012edc>
 40146bc:	07000b44 	movi	fp,45
 40146c0:	df002785 	stb	fp,158(sp)
 40146c4:	003a0b06 	br	4012ef4 <__reset+0xfb011ef4>
 40146c8:	d8c02d17 	ldw	r3,180(sp)
 40146cc:	d9002f17 	ldw	r4,188(sp)
 40146d0:	18800017 	ldw	r2,0(r3)
 40146d4:	18c00104 	addi	r3,r3,4
 40146d8:	d8c02d15 	stw	r3,180(sp)
 40146dc:	11000015 	stw	r4,0(r2)
 40146e0:	0038f306 	br	4012ab0 <__reset+0xfb011ab0>
 40146e4:	00c00b44 	movi	r3,45
 40146e8:	d8c02785 	stb	r3,158(sp)
 40146ec:	d8802a15 	stw	r2,168(sp)
 40146f0:	dc802b17 	ldw	r18,172(sp)
 40146f4:	d8002915 	stw	zero,164(sp)
 40146f8:	07000b44 	movi	fp,45
 40146fc:	003a7306 	br	40130cc <__reset+0xfb0120cc>
 4014700:	9080004c 	andi	r2,r18,1
 4014704:	1000941e 	bne	r2,zero,4014958 <___svfprintf_internal_r+0x1f54>
 4014708:	d8802117 	ldw	r2,132(sp)
 401470c:	1405c83a 	sub	r2,r2,r16
 4014710:	d8803315 	stw	r2,204(sp)
 4014714:	b441161e 	bne	r22,r17,4014b70 <___svfprintf_internal_r+0x216c>
 4014718:	dd802617 	ldw	r22,152(sp)
 401471c:	00bfff44 	movi	r2,-3
 4014720:	b0801a16 	blt	r22,r2,401478c <___svfprintf_internal_r+0x1d88>
 4014724:	d9402917 	ldw	r5,164(sp)
 4014728:	2d801816 	blt	r5,r22,401478c <___svfprintf_internal_r+0x1d88>
 401472c:	dd803215 	stw	r22,200(sp)
 4014730:	003f3a06 	br	401441c <__reset+0xfb01341c>
 4014734:	1025883a 	mov	r18,r2
 4014738:	0039883a 	mov	fp,zero
 401473c:	00800084 	movi	r2,2
 4014740:	003fd606 	br	401469c <__reset+0xfb01369c>
 4014744:	9080004c 	andi	r2,r18,1
 4014748:	103f191e 	bne	r2,zero,40143b0 <__reset+0xfb0133b0>
 401474c:	d8802117 	ldw	r2,132(sp)
 4014750:	003f2806 	br	40143f4 <__reset+0xfb0133f4>
 4014754:	01010234 	movhi	r4,1032
 4014758:	2107a084 	addi	r4,r4,7810
 401475c:	d9002b15 	stw	r4,172(sp)
 4014760:	003c7c06 	br	4013954 <__reset+0xfb012954>
 4014764:	e005883a 	mov	r2,fp
 4014768:	003f2206 	br	40143f4 <__reset+0xfb0133f4>
 401476c:	d9402917 	ldw	r5,164(sp)
 4014770:	df002783 	ldbu	fp,158(sp)
 4014774:	dd002d15 	stw	r20,180(sp)
 4014778:	d9402a15 	stw	r5,168(sp)
 401477c:	d9402e15 	stw	r5,184(sp)
 4014780:	d8002915 	stw	zero,164(sp)
 4014784:	d8003215 	stw	zero,200(sp)
 4014788:	003a4c06 	br	40130bc <__reset+0xfb0120bc>
 401478c:	8c7fff84 	addi	r17,r17,-2
 4014790:	b5bfffc4 	addi	r22,r22,-1
 4014794:	dd802615 	stw	r22,152(sp)
 4014798:	dc4022c5 	stb	r17,139(sp)
 401479c:	b000c316 	blt	r22,zero,4014aac <___svfprintf_internal_r+0x20a8>
 40147a0:	00800ac4 	movi	r2,43
 40147a4:	d8802305 	stb	r2,140(sp)
 40147a8:	00800244 	movi	r2,9
 40147ac:	15806e16 	blt	r2,r22,4014968 <___svfprintf_internal_r+0x1f64>
 40147b0:	00800c04 	movi	r2,48
 40147b4:	b5800c04 	addi	r22,r22,48
 40147b8:	d8802345 	stb	r2,141(sp)
 40147bc:	dd802385 	stb	r22,142(sp)
 40147c0:	d88023c4 	addi	r2,sp,143
 40147c4:	df0022c4 	addi	fp,sp,139
 40147c8:	d8c03317 	ldw	r3,204(sp)
 40147cc:	1739c83a 	sub	fp,r2,fp
 40147d0:	d9003317 	ldw	r4,204(sp)
 40147d4:	e0c7883a 	add	r3,fp,r3
 40147d8:	df003b15 	stw	fp,236(sp)
 40147dc:	d8c02e15 	stw	r3,184(sp)
 40147e0:	00800044 	movi	r2,1
 40147e4:	1100b70e 	bge	r2,r4,4014ac4 <___svfprintf_internal_r+0x20c0>
 40147e8:	d8c02e17 	ldw	r3,184(sp)
 40147ec:	18c00044 	addi	r3,r3,1
 40147f0:	d8c02e15 	stw	r3,184(sp)
 40147f4:	1805883a 	mov	r2,r3
 40147f8:	1800b016 	blt	r3,zero,4014abc <___svfprintf_internal_r+0x20b8>
 40147fc:	d8003215 	stw	zero,200(sp)
 4014800:	003f1006 	br	4014444 <__reset+0xfb013444>
 4014804:	d8802917 	ldw	r2,164(sp)
 4014808:	103ec71e 	bne	r2,zero,4014328 <__reset+0xfb013328>
 401480c:	dc002915 	stw	r16,164(sp)
 4014810:	003ec506 	br	4014328 <__reset+0xfb013328>
 4014814:	d9402c17 	ldw	r5,176(sp)
 4014818:	d9801e04 	addi	r6,sp,120
 401481c:	9809883a 	mov	r4,r19
 4014820:	401b5980 	call	401b598 <__ssprint_r>
 4014824:	10395c1e 	bne	r2,zero,4012d98 <__reset+0xfb011d98>
 4014828:	dc402617 	ldw	r17,152(sp)
 401482c:	d8c02017 	ldw	r3,128(sp)
 4014830:	d8801f17 	ldw	r2,124(sp)
 4014834:	da000404 	addi	r8,sp,16
 4014838:	003e7706 	br	4014218 <__reset+0xfb013218>
 401483c:	582f883a 	mov	r23,r11
 4014840:	d8002915 	stw	zero,164(sp)
 4014844:	0038c406 	br	4012b58 <__reset+0xfb011b58>
 4014848:	d8c02917 	ldw	r3,164(sp)
 401484c:	d8802104 	addi	r2,sp,132
 4014850:	d8800315 	stw	r2,12(sp)
 4014854:	d9403617 	ldw	r5,216(sp)
 4014858:	d8802504 	addi	r2,sp,148
 401485c:	d8800215 	stw	r2,8(sp)
 4014860:	d8802604 	addi	r2,sp,152
 4014864:	d8c00015 	stw	r3,0(sp)
 4014868:	9809883a 	mov	r4,r19
 401486c:	d8800115 	stw	r2,4(sp)
 4014870:	01c000c4 	movi	r7,3
 4014874:	a00d883a 	mov	r6,r20
 4014878:	da003e15 	stw	r8,248(sp)
 401487c:	40172000 	call	4017200 <_dtoa_r>
 4014880:	d9002917 	ldw	r4,164(sp)
 4014884:	da003e17 	ldw	r8,248(sp)
 4014888:	1021883a 	mov	r16,r2
 401488c:	1139883a 	add	fp,r2,r4
 4014890:	2007883a 	mov	r3,r4
 4014894:	81000007 	ldb	r4,0(r16)
 4014898:	00800c04 	movi	r2,48
 401489c:	20806f26 	beq	r4,r2,4014a5c <___svfprintf_internal_r+0x2058>
 40148a0:	d8c02617 	ldw	r3,152(sp)
 40148a4:	e0f9883a 	add	fp,fp,r3
 40148a8:	003ec206 	br	40143b4 <__reset+0xfb0133b4>
 40148ac:	00c00b44 	movi	r3,45
 40148b0:	2520003c 	xorhi	r20,r4,32768
 40148b4:	d8c02a05 	stb	r3,168(sp)
 40148b8:	003ea106 	br	4014340 <__reset+0xfb013340>
 40148bc:	d8c03217 	ldw	r3,200(sp)
 40148c0:	00c0890e 	bge	zero,r3,4014ae8 <___svfprintf_internal_r+0x20e4>
 40148c4:	00800044 	movi	r2,1
 40148c8:	d9003317 	ldw	r4,204(sp)
 40148cc:	1105883a 	add	r2,r2,r4
 40148d0:	d8802e15 	stw	r2,184(sp)
 40148d4:	10005f16 	blt	r2,zero,4014a54 <___svfprintf_internal_r+0x2050>
 40148d8:	044019c4 	movi	r17,103
 40148dc:	003ed906 	br	4014444 <__reset+0xfb013444>
 40148e0:	d9002917 	ldw	r4,164(sp)
 40148e4:	20c00044 	addi	r3,r4,1
 40148e8:	003e9c06 	br	401435c <__reset+0xfb01335c>
 40148ec:	d9002917 	ldw	r4,164(sp)
 40148f0:	00c0680e 	bge	zero,r3,4014a94 <___svfprintf_internal_r+0x2090>
 40148f4:	2000461e 	bne	r4,zero,4014a10 <___svfprintf_internal_r+0x200c>
 40148f8:	9480004c 	andi	r18,r18,1
 40148fc:	9000441e 	bne	r18,zero,4014a10 <___svfprintf_internal_r+0x200c>
 4014900:	1805883a 	mov	r2,r3
 4014904:	1800a016 	blt	r3,zero,4014b88 <___svfprintf_internal_r+0x2184>
 4014908:	d8c03217 	ldw	r3,200(sp)
 401490c:	d8c02e15 	stw	r3,184(sp)
 4014910:	003ecc06 	br	4014444 <__reset+0xfb013444>
 4014914:	d9402917 	ldw	r5,164(sp)
 4014918:	d8802104 	addi	r2,sp,132
 401491c:	d8800315 	stw	r2,12(sp)
 4014920:	d9400015 	stw	r5,0(sp)
 4014924:	d8802504 	addi	r2,sp,148
 4014928:	d9403617 	ldw	r5,216(sp)
 401492c:	d8800215 	stw	r2,8(sp)
 4014930:	d8802604 	addi	r2,sp,152
 4014934:	d8800115 	stw	r2,4(sp)
 4014938:	01c000c4 	movi	r7,3
 401493c:	a00d883a 	mov	r6,r20
 4014940:	9809883a 	mov	r4,r19
 4014944:	da003e15 	stw	r8,248(sp)
 4014948:	40172000 	call	4017200 <_dtoa_r>
 401494c:	d8c02917 	ldw	r3,164(sp)
 4014950:	da003e17 	ldw	r8,248(sp)
 4014954:	1021883a 	mov	r16,r2
 4014958:	00801184 	movi	r2,70
 401495c:	80f9883a 	add	fp,r16,r3
 4014960:	88bfcc26 	beq	r17,r2,4014894 <__reset+0xfb013894>
 4014964:	003e9306 	br	40143b4 <__reset+0xfb0133b4>
 4014968:	df0022c4 	addi	fp,sp,139
 401496c:	dc002915 	stw	r16,164(sp)
 4014970:	9829883a 	mov	r20,r19
 4014974:	e021883a 	mov	r16,fp
 4014978:	4027883a 	mov	r19,r8
 401497c:	b009883a 	mov	r4,r22
 4014980:	01400284 	movi	r5,10
 4014984:	400dc380 	call	400dc38 <__modsi3>
 4014988:	10800c04 	addi	r2,r2,48
 401498c:	843fffc4 	addi	r16,r16,-1
 4014990:	b009883a 	mov	r4,r22
 4014994:	01400284 	movi	r5,10
 4014998:	80800005 	stb	r2,0(r16)
 401499c:	400dbb40 	call	400dbb4 <__divsi3>
 40149a0:	102d883a 	mov	r22,r2
 40149a4:	00800244 	movi	r2,9
 40149a8:	15bff416 	blt	r2,r22,401497c <__reset+0xfb01397c>
 40149ac:	9811883a 	mov	r8,r19
 40149b0:	b0800c04 	addi	r2,r22,48
 40149b4:	a027883a 	mov	r19,r20
 40149b8:	8029883a 	mov	r20,r16
 40149bc:	a17fffc4 	addi	r5,r20,-1
 40149c0:	a0bfffc5 	stb	r2,-1(r20)
 40149c4:	dc002917 	ldw	r16,164(sp)
 40149c8:	2f00752e 	bgeu	r5,fp,4014ba0 <___svfprintf_internal_r+0x219c>
 40149cc:	d9c02384 	addi	r7,sp,142
 40149d0:	3d0fc83a 	sub	r7,r7,r20
 40149d4:	d9002344 	addi	r4,sp,141
 40149d8:	e1cf883a 	add	r7,fp,r7
 40149dc:	00000106 	br	40149e4 <___svfprintf_internal_r+0x1fe0>
 40149e0:	28800003 	ldbu	r2,0(r5)
 40149e4:	20800005 	stb	r2,0(r4)
 40149e8:	21000044 	addi	r4,r4,1
 40149ec:	29400044 	addi	r5,r5,1
 40149f0:	21fffb1e 	bne	r4,r7,40149e0 <__reset+0xfb0139e0>
 40149f4:	d8802304 	addi	r2,sp,140
 40149f8:	1505c83a 	sub	r2,r2,r20
 40149fc:	d8c02344 	addi	r3,sp,141
 4014a00:	1885883a 	add	r2,r3,r2
 4014a04:	003f7006 	br	40147c8 <__reset+0xfb0137c8>
 4014a08:	0005883a 	mov	r2,zero
 4014a0c:	003f0b06 	br	401463c <__reset+0xfb01363c>
 4014a10:	d9002917 	ldw	r4,164(sp)
 4014a14:	d8c03217 	ldw	r3,200(sp)
 4014a18:	20800044 	addi	r2,r4,1
 4014a1c:	1885883a 	add	r2,r3,r2
 4014a20:	d8802e15 	stw	r2,184(sp)
 4014a24:	103e870e 	bge	r2,zero,4014444 <__reset+0xfb013444>
 4014a28:	0005883a 	mov	r2,zero
 4014a2c:	003e8506 	br	4014444 <__reset+0xfb013444>
 4014a30:	01010234 	movhi	r4,1032
 4014a34:	2107a084 	addi	r4,r4,7810
 4014a38:	d9002b15 	stw	r4,172(sp)
 4014a3c:	003cc506 	br	4013d54 <__reset+0xfb012d54>
 4014a40:	d8c03217 	ldw	r3,200(sp)
 4014a44:	18c00044 	addi	r3,r3,1
 4014a48:	d8c02e15 	stw	r3,184(sp)
 4014a4c:	1805883a 	mov	r2,r3
 4014a50:	183fa10e 	bge	r3,zero,40148d8 <__reset+0xfb0138d8>
 4014a54:	0005883a 	mov	r2,zero
 4014a58:	003f9f06 	br	40148d8 <__reset+0xfb0138d8>
 4014a5c:	d9003617 	ldw	r4,216(sp)
 4014a60:	000d883a 	mov	r6,zero
 4014a64:	000f883a 	mov	r7,zero
 4014a68:	a00b883a 	mov	r5,r20
 4014a6c:	d8c03d15 	stw	r3,244(sp)
 4014a70:	da003e15 	stw	r8,248(sp)
 4014a74:	40104ec0 	call	40104ec <__eqdf2>
 4014a78:	d8c03d17 	ldw	r3,244(sp)
 4014a7c:	da003e17 	ldw	r8,248(sp)
 4014a80:	103f8726 	beq	r2,zero,40148a0 <__reset+0xfb0138a0>
 4014a84:	00800044 	movi	r2,1
 4014a88:	10c7c83a 	sub	r3,r2,r3
 4014a8c:	d8c02615 	stw	r3,152(sp)
 4014a90:	003f8406 	br	40148a4 <__reset+0xfb0138a4>
 4014a94:	20000e1e 	bne	r4,zero,4014ad0 <___svfprintf_internal_r+0x20cc>
 4014a98:	9480004c 	andi	r18,r18,1
 4014a9c:	90000c1e 	bne	r18,zero,4014ad0 <___svfprintf_internal_r+0x20cc>
 4014aa0:	00800044 	movi	r2,1
 4014aa4:	d8802e15 	stw	r2,184(sp)
 4014aa8:	003e6606 	br	4014444 <__reset+0xfb013444>
 4014aac:	00800b44 	movi	r2,45
 4014ab0:	05adc83a 	sub	r22,zero,r22
 4014ab4:	d8802305 	stb	r2,140(sp)
 4014ab8:	003f3b06 	br	40147a8 <__reset+0xfb0137a8>
 4014abc:	0005883a 	mov	r2,zero
 4014ac0:	003f4e06 	br	40147fc <__reset+0xfb0137fc>
 4014ac4:	90a4703a 	and	r18,r18,r2
 4014ac8:	903f4a26 	beq	r18,zero,40147f4 <__reset+0xfb0137f4>
 4014acc:	003f4606 	br	40147e8 <__reset+0xfb0137e8>
 4014ad0:	d8c02917 	ldw	r3,164(sp)
 4014ad4:	18c00084 	addi	r3,r3,2
 4014ad8:	d8c02e15 	stw	r3,184(sp)
 4014adc:	1805883a 	mov	r2,r3
 4014ae0:	183e580e 	bge	r3,zero,4014444 <__reset+0xfb013444>
 4014ae4:	003fd006 	br	4014a28 <__reset+0xfb013a28>
 4014ae8:	00800084 	movi	r2,2
 4014aec:	10c5c83a 	sub	r2,r2,r3
 4014af0:	003f7506 	br	40148c8 <__reset+0xfb0138c8>
 4014af4:	d8802d17 	ldw	r2,180(sp)
 4014af8:	d9002d17 	ldw	r4,180(sp)
 4014afc:	bc400043 	ldbu	r17,1(r23)
 4014b00:	10800017 	ldw	r2,0(r2)
 4014b04:	582f883a 	mov	r23,r11
 4014b08:	d8802915 	stw	r2,164(sp)
 4014b0c:	20800104 	addi	r2,r4,4
 4014b10:	d9002917 	ldw	r4,164(sp)
 4014b14:	d8802d15 	stw	r2,180(sp)
 4014b18:	203df00e 	bge	r4,zero,40142dc <__reset+0xfb0132dc>
 4014b1c:	8c403fcc 	andi	r17,r17,255
 4014b20:	00bfffc4 	movi	r2,-1
 4014b24:	8c40201c 	xori	r17,r17,128
 4014b28:	d8802915 	stw	r2,164(sp)
 4014b2c:	8c7fe004 	addi	r17,r17,-128
 4014b30:	00380806 	br	4012b54 <__reset+0xfb011b54>
 4014b34:	9080004c 	andi	r2,r18,1
 4014b38:	0039883a 	mov	fp,zero
 4014b3c:	10000726 	beq	r2,zero,4014b5c <___svfprintf_internal_r+0x2158>
 4014b40:	d8c02817 	ldw	r3,160(sp)
 4014b44:	dc001dc4 	addi	r16,sp,119
 4014b48:	00800c04 	movi	r2,48
 4014b4c:	1c07c83a 	sub	r3,r3,r16
 4014b50:	d8801dc5 	stb	r2,119(sp)
 4014b54:	d8c02e15 	stw	r3,184(sp)
 4014b58:	00395206 	br	40130a4 <__reset+0xfb0120a4>
 4014b5c:	d8002e15 	stw	zero,184(sp)
 4014b60:	dc001e04 	addi	r16,sp,120
 4014b64:	00394f06 	br	40130a4 <__reset+0xfb0120a4>
 4014b68:	0005883a 	mov	r2,zero
 4014b6c:	003e3206 	br	4014438 <__reset+0xfb013438>
 4014b70:	dd802617 	ldw	r22,152(sp)
 4014b74:	003f0606 	br	4014790 <__reset+0xfb013790>
 4014b78:	d9c02785 	stb	r7,158(sp)
 4014b7c:	003a5106 	br	40134c4 <__reset+0xfb0124c4>
 4014b80:	d9c02785 	stb	r7,158(sp)
 4014b84:	003a3706 	br	4013464 <__reset+0xfb012464>
 4014b88:	0005883a 	mov	r2,zero
 4014b8c:	003f5e06 	br	4014908 <__reset+0xfb013908>
 4014b90:	d9c02785 	stb	r7,158(sp)
 4014b94:	00391706 	br	4012ff4 <__reset+0xfb011ff4>
 4014b98:	d9c02785 	stb	r7,158(sp)
 4014b9c:	0038e606 	br	4012f38 <__reset+0xfb011f38>
 4014ba0:	d8802344 	addi	r2,sp,141
 4014ba4:	003f0806 	br	40147c8 <__reset+0xfb0137c8>
 4014ba8:	d9c02785 	stb	r7,158(sp)
 4014bac:	0038b706 	br	4012e8c <__reset+0xfb011e8c>
 4014bb0:	d9c02785 	stb	r7,158(sp)
 4014bb4:	003adc06 	br	4013728 <__reset+0xfb012728>
 4014bb8:	d9403917 	ldw	r5,228(sp)
 4014bbc:	00800304 	movi	r2,12
 4014bc0:	28800015 	stw	r2,0(r5)
 4014bc4:	00bfffc4 	movi	r2,-1
 4014bc8:	00387806 	br	4012dac <__reset+0xfb011dac>
 4014bcc:	d9c02785 	stb	r7,158(sp)
 4014bd0:	003abf06 	br	40136d0 <__reset+0xfb0126d0>
 4014bd4:	d9c02785 	stb	r7,158(sp)
 4014bd8:	003a9b06 	br	4013648 <__reset+0xfb012648>

04014bdc <___vfprintf_internal_r>:
 4014bdc:	deffb804 	addi	sp,sp,-288
 4014be0:	dfc04715 	stw	ra,284(sp)
 4014be4:	ddc04515 	stw	r23,276(sp)
 4014be8:	dd404315 	stw	r21,268(sp)
 4014bec:	d9002c15 	stw	r4,176(sp)
 4014bf0:	282f883a 	mov	r23,r5
 4014bf4:	302b883a 	mov	r21,r6
 4014bf8:	d9c02d15 	stw	r7,180(sp)
 4014bfc:	df004615 	stw	fp,280(sp)
 4014c00:	dd804415 	stw	r22,272(sp)
 4014c04:	dd004215 	stw	r20,264(sp)
 4014c08:	dcc04115 	stw	r19,260(sp)
 4014c0c:	dc804015 	stw	r18,256(sp)
 4014c10:	dc403f15 	stw	r17,252(sp)
 4014c14:	dc003e15 	stw	r16,248(sp)
 4014c18:	40199f40 	call	40199f4 <_localeconv_r>
 4014c1c:	10800017 	ldw	r2,0(r2)
 4014c20:	1009883a 	mov	r4,r2
 4014c24:	d8803415 	stw	r2,208(sp)
 4014c28:	401296c0 	call	401296c <strlen>
 4014c2c:	d8803715 	stw	r2,220(sp)
 4014c30:	d8802c17 	ldw	r2,176(sp)
 4014c34:	10000226 	beq	r2,zero,4014c40 <___vfprintf_internal_r+0x64>
 4014c38:	10800e17 	ldw	r2,56(r2)
 4014c3c:	1000f926 	beq	r2,zero,4015024 <___vfprintf_internal_r+0x448>
 4014c40:	b880030b 	ldhu	r2,12(r23)
 4014c44:	10c8000c 	andi	r3,r2,8192
 4014c48:	1800061e 	bne	r3,zero,4014c64 <___vfprintf_internal_r+0x88>
 4014c4c:	b9001917 	ldw	r4,100(r23)
 4014c50:	00f7ffc4 	movi	r3,-8193
 4014c54:	10880014 	ori	r2,r2,8192
 4014c58:	20c6703a 	and	r3,r4,r3
 4014c5c:	b880030d 	sth	r2,12(r23)
 4014c60:	b8c01915 	stw	r3,100(r23)
 4014c64:	10c0020c 	andi	r3,r2,8
 4014c68:	1800c126 	beq	r3,zero,4014f70 <___vfprintf_internal_r+0x394>
 4014c6c:	b8c00417 	ldw	r3,16(r23)
 4014c70:	1800bf26 	beq	r3,zero,4014f70 <___vfprintf_internal_r+0x394>
 4014c74:	1080068c 	andi	r2,r2,26
 4014c78:	00c00284 	movi	r3,10
 4014c7c:	10c0c426 	beq	r2,r3,4014f90 <___vfprintf_internal_r+0x3b4>
 4014c80:	d8c00404 	addi	r3,sp,16
 4014c84:	05010234 	movhi	r20,1032
 4014c88:	d9001e04 	addi	r4,sp,120
 4014c8c:	a507a884 	addi	r20,r20,7842
 4014c90:	d8c01e15 	stw	r3,120(sp)
 4014c94:	d8002015 	stw	zero,128(sp)
 4014c98:	d8001f15 	stw	zero,124(sp)
 4014c9c:	d8003315 	stw	zero,204(sp)
 4014ca0:	d8003615 	stw	zero,216(sp)
 4014ca4:	d8003815 	stw	zero,224(sp)
 4014ca8:	1811883a 	mov	r8,r3
 4014cac:	d8003915 	stw	zero,228(sp)
 4014cb0:	d8003a15 	stw	zero,232(sp)
 4014cb4:	d8002f15 	stw	zero,188(sp)
 4014cb8:	d9002815 	stw	r4,160(sp)
 4014cbc:	a8800007 	ldb	r2,0(r21)
 4014cc0:	10027b26 	beq	r2,zero,40156b0 <___vfprintf_internal_r+0xad4>
 4014cc4:	00c00944 	movi	r3,37
 4014cc8:	a821883a 	mov	r16,r21
 4014ccc:	10c0021e 	bne	r2,r3,4014cd8 <___vfprintf_internal_r+0xfc>
 4014cd0:	00001406 	br	4014d24 <___vfprintf_internal_r+0x148>
 4014cd4:	10c00326 	beq	r2,r3,4014ce4 <___vfprintf_internal_r+0x108>
 4014cd8:	84000044 	addi	r16,r16,1
 4014cdc:	80800007 	ldb	r2,0(r16)
 4014ce0:	103ffc1e 	bne	r2,zero,4014cd4 <__reset+0xfb013cd4>
 4014ce4:	8563c83a 	sub	r17,r16,r21
 4014ce8:	88000e26 	beq	r17,zero,4014d24 <___vfprintf_internal_r+0x148>
 4014cec:	d8c02017 	ldw	r3,128(sp)
 4014cf0:	d8801f17 	ldw	r2,124(sp)
 4014cf4:	45400015 	stw	r21,0(r8)
 4014cf8:	1c47883a 	add	r3,r3,r17
 4014cfc:	10800044 	addi	r2,r2,1
 4014d00:	d8c02015 	stw	r3,128(sp)
 4014d04:	44400115 	stw	r17,4(r8)
 4014d08:	d8801f15 	stw	r2,124(sp)
 4014d0c:	00c001c4 	movi	r3,7
 4014d10:	1880a716 	blt	r3,r2,4014fb0 <___vfprintf_internal_r+0x3d4>
 4014d14:	42000204 	addi	r8,r8,8
 4014d18:	d9402f17 	ldw	r5,188(sp)
 4014d1c:	2c4b883a 	add	r5,r5,r17
 4014d20:	d9402f15 	stw	r5,188(sp)
 4014d24:	80800007 	ldb	r2,0(r16)
 4014d28:	1000a826 	beq	r2,zero,4014fcc <___vfprintf_internal_r+0x3f0>
 4014d2c:	84400047 	ldb	r17,1(r16)
 4014d30:	00bfffc4 	movi	r2,-1
 4014d34:	85400044 	addi	r21,r16,1
 4014d38:	d8002785 	stb	zero,158(sp)
 4014d3c:	0007883a 	mov	r3,zero
 4014d40:	000f883a 	mov	r7,zero
 4014d44:	d8802915 	stw	r2,164(sp)
 4014d48:	d8003115 	stw	zero,196(sp)
 4014d4c:	0025883a 	mov	r18,zero
 4014d50:	01401604 	movi	r5,88
 4014d54:	01800244 	movi	r6,9
 4014d58:	02800a84 	movi	r10,42
 4014d5c:	02401b04 	movi	r9,108
 4014d60:	ad400044 	addi	r21,r21,1
 4014d64:	88bff804 	addi	r2,r17,-32
 4014d68:	28830436 	bltu	r5,r2,401597c <___vfprintf_internal_r+0xda0>
 4014d6c:	100490ba 	slli	r2,r2,2
 4014d70:	01010074 	movhi	r4,1025
 4014d74:	21136104 	addi	r4,r4,19844
 4014d78:	1105883a 	add	r2,r2,r4
 4014d7c:	10800017 	ldw	r2,0(r2)
 4014d80:	1000683a 	jmp	r2
 4014d84:	0401589c 	xori	r16,zero,1378
 4014d88:	0401597c 	xorhi	r16,zero,1381
 4014d8c:	0401597c 	xorhi	r16,zero,1381
 4014d90:	040158bc 	xorhi	r16,zero,1378
 4014d94:	0401597c 	xorhi	r16,zero,1381
 4014d98:	0401597c 	xorhi	r16,zero,1381
 4014d9c:	0401597c 	xorhi	r16,zero,1381
 4014da0:	0401597c 	xorhi	r16,zero,1381
 4014da4:	0401597c 	xorhi	r16,zero,1381
 4014da8:	0401597c 	xorhi	r16,zero,1381
 4014dac:	04015030 	cmpltui	r16,zero,1344
 4014db0:	040157d8 	cmpnei	r16,zero,1375
 4014db4:	0401597c 	xorhi	r16,zero,1381
 4014db8:	04014ef8 	rdprs	r16,zero,1339
 4014dbc:	04015058 	cmpnei	r16,zero,1345
 4014dc0:	0401597c 	xorhi	r16,zero,1381
 4014dc4:	04015098 	cmpnei	r16,zero,1346
 4014dc8:	040150a4 	muli	r16,zero,1346
 4014dcc:	040150a4 	muli	r16,zero,1346
 4014dd0:	040150a4 	muli	r16,zero,1346
 4014dd4:	040150a4 	muli	r16,zero,1346
 4014dd8:	040150a4 	muli	r16,zero,1346
 4014ddc:	040150a4 	muli	r16,zero,1346
 4014de0:	040150a4 	muli	r16,zero,1346
 4014de4:	040150a4 	muli	r16,zero,1346
 4014de8:	040150a4 	muli	r16,zero,1346
 4014dec:	0401597c 	xorhi	r16,zero,1381
 4014df0:	0401597c 	xorhi	r16,zero,1381
 4014df4:	0401597c 	xorhi	r16,zero,1381
 4014df8:	0401597c 	xorhi	r16,zero,1381
 4014dfc:	0401597c 	xorhi	r16,zero,1381
 4014e00:	0401597c 	xorhi	r16,zero,1381
 4014e04:	0401597c 	xorhi	r16,zero,1381
 4014e08:	0401597c 	xorhi	r16,zero,1381
 4014e0c:	0401597c 	xorhi	r16,zero,1381
 4014e10:	0401597c 	xorhi	r16,zero,1381
 4014e14:	040150d8 	cmpnei	r16,zero,1347
 4014e18:	04015194 	movui	r16,1350
 4014e1c:	0401597c 	xorhi	r16,zero,1381
 4014e20:	04015194 	movui	r16,1350
 4014e24:	0401597c 	xorhi	r16,zero,1381
 4014e28:	0401597c 	xorhi	r16,zero,1381
 4014e2c:	0401597c 	xorhi	r16,zero,1381
 4014e30:	0401597c 	xorhi	r16,zero,1381
 4014e34:	04015234 	movhi	r16,1352
 4014e38:	0401597c 	xorhi	r16,zero,1381
 4014e3c:	0401597c 	xorhi	r16,zero,1381
 4014e40:	04015240 	call	401524 <__alt_mem_sdram-0x3bfeadc>
 4014e44:	0401597c 	xorhi	r16,zero,1381
 4014e48:	0401597c 	xorhi	r16,zero,1381
 4014e4c:	0401597c 	xorhi	r16,zero,1381
 4014e50:	0401597c 	xorhi	r16,zero,1381
 4014e54:	0401597c 	xorhi	r16,zero,1381
 4014e58:	040156b8 	rdprs	r16,zero,1370
 4014e5c:	0401597c 	xorhi	r16,zero,1381
 4014e60:	0401597c 	xorhi	r16,zero,1381
 4014e64:	04015718 	cmpnei	r16,zero,1372
 4014e68:	0401597c 	xorhi	r16,zero,1381
 4014e6c:	0401597c 	xorhi	r16,zero,1381
 4014e70:	0401597c 	xorhi	r16,zero,1381
 4014e74:	0401597c 	xorhi	r16,zero,1381
 4014e78:	0401597c 	xorhi	r16,zero,1381
 4014e7c:	0401597c 	xorhi	r16,zero,1381
 4014e80:	0401597c 	xorhi	r16,zero,1381
 4014e84:	0401597c 	xorhi	r16,zero,1381
 4014e88:	0401597c 	xorhi	r16,zero,1381
 4014e8c:	0401597c 	xorhi	r16,zero,1381
 4014e90:	04015928 	cmpgeui	r16,zero,1380
 4014e94:	040158c8 	cmpgei	r16,zero,1379
 4014e98:	04015194 	movui	r16,1350
 4014e9c:	04015194 	movui	r16,1350
 4014ea0:	04015194 	movui	r16,1350
 4014ea4:	040158d8 	cmpnei	r16,zero,1379
 4014ea8:	040158c8 	cmpgei	r16,zero,1379
 4014eac:	0401597c 	xorhi	r16,zero,1381
 4014eb0:	0401597c 	xorhi	r16,zero,1381
 4014eb4:	040158e4 	muli	r16,zero,1379
 4014eb8:	0401597c 	xorhi	r16,zero,1381
 4014ebc:	040158f4 	movhi	r16,1379
 4014ec0:	040157c8 	cmpgei	r16,zero,1375
 4014ec4:	04014f04 	movi	r16,1340
 4014ec8:	040157e8 	cmpgeui	r16,zero,1375
 4014ecc:	0401597c 	xorhi	r16,zero,1381
 4014ed0:	040157f4 	movhi	r16,1375
 4014ed4:	0401597c 	xorhi	r16,zero,1381
 4014ed8:	04015850 	cmplti	r16,zero,1377
 4014edc:	0401597c 	xorhi	r16,zero,1381
 4014ee0:	0401597c 	xorhi	r16,zero,1381
 4014ee4:	04015860 	cmpeqi	r16,zero,1377
 4014ee8:	d9003117 	ldw	r4,196(sp)
 4014eec:	d8802d15 	stw	r2,180(sp)
 4014ef0:	0109c83a 	sub	r4,zero,r4
 4014ef4:	d9003115 	stw	r4,196(sp)
 4014ef8:	94800114 	ori	r18,r18,4
 4014efc:	ac400007 	ldb	r17,0(r21)
 4014f00:	003f9706 	br	4014d60 <__reset+0xfb013d60>
 4014f04:	00800c04 	movi	r2,48
 4014f08:	d9002d17 	ldw	r4,180(sp)
 4014f0c:	d9402917 	ldw	r5,164(sp)
 4014f10:	d8802705 	stb	r2,156(sp)
 4014f14:	00801e04 	movi	r2,120
 4014f18:	d8802745 	stb	r2,157(sp)
 4014f1c:	d8002785 	stb	zero,158(sp)
 4014f20:	20c00104 	addi	r3,r4,4
 4014f24:	24c00017 	ldw	r19,0(r4)
 4014f28:	002d883a 	mov	r22,zero
 4014f2c:	90800094 	ori	r2,r18,2
 4014f30:	28029a16 	blt	r5,zero,401599c <___vfprintf_internal_r+0xdc0>
 4014f34:	00bfdfc4 	movi	r2,-129
 4014f38:	90a4703a 	and	r18,r18,r2
 4014f3c:	d8c02d15 	stw	r3,180(sp)
 4014f40:	94800094 	ori	r18,r18,2
 4014f44:	9802871e 	bne	r19,zero,4015964 <___vfprintf_internal_r+0xd88>
 4014f48:	00810234 	movhi	r2,1032
 4014f4c:	10879904 	addi	r2,r2,7780
 4014f50:	d8803915 	stw	r2,228(sp)
 4014f54:	04401e04 	movi	r17,120
 4014f58:	d8802917 	ldw	r2,164(sp)
 4014f5c:	0039883a 	mov	fp,zero
 4014f60:	1001e926 	beq	r2,zero,4015708 <___vfprintf_internal_r+0xb2c>
 4014f64:	0027883a 	mov	r19,zero
 4014f68:	002d883a 	mov	r22,zero
 4014f6c:	00020506 	br	4015784 <___vfprintf_internal_r+0xba8>
 4014f70:	d9002c17 	ldw	r4,176(sp)
 4014f74:	b80b883a 	mov	r5,r23
 4014f78:	4016eac0 	call	4016eac <__swsetup_r>
 4014f7c:	1005ac1e 	bne	r2,zero,4016630 <___vfprintf_internal_r+0x1a54>
 4014f80:	b880030b 	ldhu	r2,12(r23)
 4014f84:	00c00284 	movi	r3,10
 4014f88:	1080068c 	andi	r2,r2,26
 4014f8c:	10ff3c1e 	bne	r2,r3,4014c80 <__reset+0xfb013c80>
 4014f90:	b880038f 	ldh	r2,14(r23)
 4014f94:	103f3a16 	blt	r2,zero,4014c80 <__reset+0xfb013c80>
 4014f98:	d9c02d17 	ldw	r7,180(sp)
 4014f9c:	d9002c17 	ldw	r4,176(sp)
 4014fa0:	a80d883a 	mov	r6,r21
 4014fa4:	b80b883a 	mov	r5,r23
 4014fa8:	4016df00 	call	4016df0 <__sbprintf>
 4014fac:	00001106 	br	4014ff4 <___vfprintf_internal_r+0x418>
 4014fb0:	d9002c17 	ldw	r4,176(sp)
 4014fb4:	d9801e04 	addi	r6,sp,120
 4014fb8:	b80b883a 	mov	r5,r23
 4014fbc:	401caa00 	call	401caa0 <__sprint_r>
 4014fc0:	1000081e 	bne	r2,zero,4014fe4 <___vfprintf_internal_r+0x408>
 4014fc4:	da000404 	addi	r8,sp,16
 4014fc8:	003f5306 	br	4014d18 <__reset+0xfb013d18>
 4014fcc:	d8802017 	ldw	r2,128(sp)
 4014fd0:	10000426 	beq	r2,zero,4014fe4 <___vfprintf_internal_r+0x408>
 4014fd4:	d9002c17 	ldw	r4,176(sp)
 4014fd8:	d9801e04 	addi	r6,sp,120
 4014fdc:	b80b883a 	mov	r5,r23
 4014fe0:	401caa00 	call	401caa0 <__sprint_r>
 4014fe4:	b880030b 	ldhu	r2,12(r23)
 4014fe8:	1080100c 	andi	r2,r2,64
 4014fec:	1005901e 	bne	r2,zero,4016630 <___vfprintf_internal_r+0x1a54>
 4014ff0:	d8802f17 	ldw	r2,188(sp)
 4014ff4:	dfc04717 	ldw	ra,284(sp)
 4014ff8:	df004617 	ldw	fp,280(sp)
 4014ffc:	ddc04517 	ldw	r23,276(sp)
 4015000:	dd804417 	ldw	r22,272(sp)
 4015004:	dd404317 	ldw	r21,268(sp)
 4015008:	dd004217 	ldw	r20,264(sp)
 401500c:	dcc04117 	ldw	r19,260(sp)
 4015010:	dc804017 	ldw	r18,256(sp)
 4015014:	dc403f17 	ldw	r17,252(sp)
 4015018:	dc003e17 	ldw	r16,248(sp)
 401501c:	dec04804 	addi	sp,sp,288
 4015020:	f800283a 	ret
 4015024:	d9002c17 	ldw	r4,176(sp)
 4015028:	4018e800 	call	4018e80 <__sinit>
 401502c:	003f0406 	br	4014c40 <__reset+0xfb013c40>
 4015030:	d8802d17 	ldw	r2,180(sp)
 4015034:	d9002d17 	ldw	r4,180(sp)
 4015038:	10800017 	ldw	r2,0(r2)
 401503c:	d8803115 	stw	r2,196(sp)
 4015040:	20800104 	addi	r2,r4,4
 4015044:	d9003117 	ldw	r4,196(sp)
 4015048:	203fa716 	blt	r4,zero,4014ee8 <__reset+0xfb013ee8>
 401504c:	d8802d15 	stw	r2,180(sp)
 4015050:	ac400007 	ldb	r17,0(r21)
 4015054:	003f4206 	br	4014d60 <__reset+0xfb013d60>
 4015058:	ac400007 	ldb	r17,0(r21)
 401505c:	aac00044 	addi	r11,r21,1
 4015060:	8a872826 	beq	r17,r10,4016d04 <___vfprintf_internal_r+0x2128>
 4015064:	88bff404 	addi	r2,r17,-48
 4015068:	0009883a 	mov	r4,zero
 401506c:	30867d36 	bltu	r6,r2,4016a64 <___vfprintf_internal_r+0x1e88>
 4015070:	5c400007 	ldb	r17,0(r11)
 4015074:	210002a4 	muli	r4,r4,10
 4015078:	5d400044 	addi	r21,r11,1
 401507c:	a817883a 	mov	r11,r21
 4015080:	2089883a 	add	r4,r4,r2
 4015084:	88bff404 	addi	r2,r17,-48
 4015088:	30bff92e 	bgeu	r6,r2,4015070 <__reset+0xfb014070>
 401508c:	2005c916 	blt	r4,zero,40167b4 <___vfprintf_internal_r+0x1bd8>
 4015090:	d9002915 	stw	r4,164(sp)
 4015094:	003f3306 	br	4014d64 <__reset+0xfb013d64>
 4015098:	94802014 	ori	r18,r18,128
 401509c:	ac400007 	ldb	r17,0(r21)
 40150a0:	003f2f06 	br	4014d60 <__reset+0xfb013d60>
 40150a4:	a809883a 	mov	r4,r21
 40150a8:	d8003115 	stw	zero,196(sp)
 40150ac:	88bff404 	addi	r2,r17,-48
 40150b0:	0017883a 	mov	r11,zero
 40150b4:	24400007 	ldb	r17,0(r4)
 40150b8:	5ac002a4 	muli	r11,r11,10
 40150bc:	ad400044 	addi	r21,r21,1
 40150c0:	a809883a 	mov	r4,r21
 40150c4:	12d7883a 	add	r11,r2,r11
 40150c8:	88bff404 	addi	r2,r17,-48
 40150cc:	30bff92e 	bgeu	r6,r2,40150b4 <__reset+0xfb0140b4>
 40150d0:	dac03115 	stw	r11,196(sp)
 40150d4:	003f2306 	br	4014d64 <__reset+0xfb013d64>
 40150d8:	18c03fcc 	andi	r3,r3,255
 40150dc:	18072b1e 	bne	r3,zero,4016d8c <___vfprintf_internal_r+0x21b0>
 40150e0:	94800414 	ori	r18,r18,16
 40150e4:	9080080c 	andi	r2,r18,32
 40150e8:	10037b26 	beq	r2,zero,4015ed8 <___vfprintf_internal_r+0x12fc>
 40150ec:	d9402d17 	ldw	r5,180(sp)
 40150f0:	28800117 	ldw	r2,4(r5)
 40150f4:	2cc00017 	ldw	r19,0(r5)
 40150f8:	29400204 	addi	r5,r5,8
 40150fc:	d9402d15 	stw	r5,180(sp)
 4015100:	102d883a 	mov	r22,r2
 4015104:	10044b16 	blt	r2,zero,4016234 <___vfprintf_internal_r+0x1658>
 4015108:	d9402917 	ldw	r5,164(sp)
 401510c:	df002783 	ldbu	fp,158(sp)
 4015110:	2803bc16 	blt	r5,zero,4016004 <___vfprintf_internal_r+0x1428>
 4015114:	00ffdfc4 	movi	r3,-129
 4015118:	9d84b03a 	or	r2,r19,r22
 401511c:	90e4703a 	and	r18,r18,r3
 4015120:	10017726 	beq	r2,zero,4015700 <___vfprintf_internal_r+0xb24>
 4015124:	b0038326 	beq	r22,zero,4015f34 <___vfprintf_internal_r+0x1358>
 4015128:	dc402a15 	stw	r17,168(sp)
 401512c:	dc001e04 	addi	r16,sp,120
 4015130:	b023883a 	mov	r17,r22
 4015134:	402d883a 	mov	r22,r8
 4015138:	9809883a 	mov	r4,r19
 401513c:	880b883a 	mov	r5,r17
 4015140:	01800284 	movi	r6,10
 4015144:	000f883a 	mov	r7,zero
 4015148:	401ee980 	call	401ee98 <__umoddi3>
 401514c:	10800c04 	addi	r2,r2,48
 4015150:	843fffc4 	addi	r16,r16,-1
 4015154:	9809883a 	mov	r4,r19
 4015158:	880b883a 	mov	r5,r17
 401515c:	80800005 	stb	r2,0(r16)
 4015160:	01800284 	movi	r6,10
 4015164:	000f883a 	mov	r7,zero
 4015168:	401e9200 	call	401e920 <__udivdi3>
 401516c:	1027883a 	mov	r19,r2
 4015170:	10c4b03a 	or	r2,r2,r3
 4015174:	1823883a 	mov	r17,r3
 4015178:	103fef1e 	bne	r2,zero,4015138 <__reset+0xfb014138>
 401517c:	d8c02817 	ldw	r3,160(sp)
 4015180:	dc402a17 	ldw	r17,168(sp)
 4015184:	b011883a 	mov	r8,r22
 4015188:	1c07c83a 	sub	r3,r3,r16
 401518c:	d8c02e15 	stw	r3,184(sp)
 4015190:	00005906 	br	40152f8 <___vfprintf_internal_r+0x71c>
 4015194:	18c03fcc 	andi	r3,r3,255
 4015198:	1806fa1e 	bne	r3,zero,4016d84 <___vfprintf_internal_r+0x21a8>
 401519c:	9080020c 	andi	r2,r18,8
 40151a0:	10048a26 	beq	r2,zero,40163cc <___vfprintf_internal_r+0x17f0>
 40151a4:	d8c02d17 	ldw	r3,180(sp)
 40151a8:	d9002d17 	ldw	r4,180(sp)
 40151ac:	d9402d17 	ldw	r5,180(sp)
 40151b0:	18c00017 	ldw	r3,0(r3)
 40151b4:	21000117 	ldw	r4,4(r4)
 40151b8:	29400204 	addi	r5,r5,8
 40151bc:	d8c03615 	stw	r3,216(sp)
 40151c0:	d9003815 	stw	r4,224(sp)
 40151c4:	d9402d15 	stw	r5,180(sp)
 40151c8:	d9003617 	ldw	r4,216(sp)
 40151cc:	d9403817 	ldw	r5,224(sp)
 40151d0:	da003d15 	stw	r8,244(sp)
 40151d4:	04000044 	movi	r16,1
 40151d8:	400d9800 	call	400d980 <__fpclassifyd>
 40151dc:	da003d17 	ldw	r8,244(sp)
 40151e0:	14041f1e 	bne	r2,r16,4016260 <___vfprintf_internal_r+0x1684>
 40151e4:	d9003617 	ldw	r4,216(sp)
 40151e8:	d9403817 	ldw	r5,224(sp)
 40151ec:	000d883a 	mov	r6,zero
 40151f0:	000f883a 	mov	r7,zero
 40151f4:	40106500 	call	4010650 <__ledf2>
 40151f8:	da003d17 	ldw	r8,244(sp)
 40151fc:	1005be16 	blt	r2,zero,40168f8 <___vfprintf_internal_r+0x1d1c>
 4015200:	df002783 	ldbu	fp,158(sp)
 4015204:	008011c4 	movi	r2,71
 4015208:	1445330e 	bge	r2,r17,40166d8 <___vfprintf_internal_r+0x1afc>
 401520c:	04010234 	movhi	r16,1032
 4015210:	84079104 	addi	r16,r16,7748
 4015214:	00c000c4 	movi	r3,3
 4015218:	00bfdfc4 	movi	r2,-129
 401521c:	d8c02a15 	stw	r3,168(sp)
 4015220:	90a4703a 	and	r18,r18,r2
 4015224:	d8c02e15 	stw	r3,184(sp)
 4015228:	d8002915 	stw	zero,164(sp)
 401522c:	d8003215 	stw	zero,200(sp)
 4015230:	00003706 	br	4015310 <___vfprintf_internal_r+0x734>
 4015234:	94800214 	ori	r18,r18,8
 4015238:	ac400007 	ldb	r17,0(r21)
 401523c:	003ec806 	br	4014d60 <__reset+0xfb013d60>
 4015240:	18c03fcc 	andi	r3,r3,255
 4015244:	1806db1e 	bne	r3,zero,4016db4 <___vfprintf_internal_r+0x21d8>
 4015248:	94800414 	ori	r18,r18,16
 401524c:	9080080c 	andi	r2,r18,32
 4015250:	1002d826 	beq	r2,zero,4015db4 <___vfprintf_internal_r+0x11d8>
 4015254:	d9402d17 	ldw	r5,180(sp)
 4015258:	d8c02917 	ldw	r3,164(sp)
 401525c:	d8002785 	stb	zero,158(sp)
 4015260:	28800204 	addi	r2,r5,8
 4015264:	2cc00017 	ldw	r19,0(r5)
 4015268:	2d800117 	ldw	r22,4(r5)
 401526c:	18048f16 	blt	r3,zero,40164ac <___vfprintf_internal_r+0x18d0>
 4015270:	013fdfc4 	movi	r4,-129
 4015274:	9d86b03a 	or	r3,r19,r22
 4015278:	d8802d15 	stw	r2,180(sp)
 401527c:	9124703a 	and	r18,r18,r4
 4015280:	1802d91e 	bne	r3,zero,4015de8 <___vfprintf_internal_r+0x120c>
 4015284:	d8c02917 	ldw	r3,164(sp)
 4015288:	0039883a 	mov	fp,zero
 401528c:	1805c326 	beq	r3,zero,401699c <___vfprintf_internal_r+0x1dc0>
 4015290:	0027883a 	mov	r19,zero
 4015294:	002d883a 	mov	r22,zero
 4015298:	dc001e04 	addi	r16,sp,120
 401529c:	9806d0fa 	srli	r3,r19,3
 40152a0:	b008977a 	slli	r4,r22,29
 40152a4:	b02cd0fa 	srli	r22,r22,3
 40152a8:	9cc001cc 	andi	r19,r19,7
 40152ac:	98800c04 	addi	r2,r19,48
 40152b0:	843fffc4 	addi	r16,r16,-1
 40152b4:	20e6b03a 	or	r19,r4,r3
 40152b8:	80800005 	stb	r2,0(r16)
 40152bc:	9d86b03a 	or	r3,r19,r22
 40152c0:	183ff61e 	bne	r3,zero,401529c <__reset+0xfb01429c>
 40152c4:	90c0004c 	andi	r3,r18,1
 40152c8:	18013b26 	beq	r3,zero,40157b8 <___vfprintf_internal_r+0xbdc>
 40152cc:	10803fcc 	andi	r2,r2,255
 40152d0:	1080201c 	xori	r2,r2,128
 40152d4:	10bfe004 	addi	r2,r2,-128
 40152d8:	00c00c04 	movi	r3,48
 40152dc:	10c13626 	beq	r2,r3,40157b8 <___vfprintf_internal_r+0xbdc>
 40152e0:	80ffffc5 	stb	r3,-1(r16)
 40152e4:	d8c02817 	ldw	r3,160(sp)
 40152e8:	80bfffc4 	addi	r2,r16,-1
 40152ec:	1021883a 	mov	r16,r2
 40152f0:	1887c83a 	sub	r3,r3,r2
 40152f4:	d8c02e15 	stw	r3,184(sp)
 40152f8:	d8802e17 	ldw	r2,184(sp)
 40152fc:	d9002917 	ldw	r4,164(sp)
 4015300:	1100010e 	bge	r2,r4,4015308 <___vfprintf_internal_r+0x72c>
 4015304:	2005883a 	mov	r2,r4
 4015308:	d8802a15 	stw	r2,168(sp)
 401530c:	d8003215 	stw	zero,200(sp)
 4015310:	e7003fcc 	andi	fp,fp,255
 4015314:	e700201c 	xori	fp,fp,128
 4015318:	e73fe004 	addi	fp,fp,-128
 401531c:	e0000326 	beq	fp,zero,401532c <___vfprintf_internal_r+0x750>
 4015320:	d8c02a17 	ldw	r3,168(sp)
 4015324:	18c00044 	addi	r3,r3,1
 4015328:	d8c02a15 	stw	r3,168(sp)
 401532c:	90c0008c 	andi	r3,r18,2
 4015330:	d8c02b15 	stw	r3,172(sp)
 4015334:	18000326 	beq	r3,zero,4015344 <___vfprintf_internal_r+0x768>
 4015338:	d8c02a17 	ldw	r3,168(sp)
 401533c:	18c00084 	addi	r3,r3,2
 4015340:	d8c02a15 	stw	r3,168(sp)
 4015344:	90c0210c 	andi	r3,r18,132
 4015348:	d8c03015 	stw	r3,192(sp)
 401534c:	1801a31e 	bne	r3,zero,40159dc <___vfprintf_internal_r+0xe00>
 4015350:	d9003117 	ldw	r4,196(sp)
 4015354:	d8c02a17 	ldw	r3,168(sp)
 4015358:	20e7c83a 	sub	r19,r4,r3
 401535c:	04c19f0e 	bge	zero,r19,40159dc <___vfprintf_internal_r+0xe00>
 4015360:	02400404 	movi	r9,16
 4015364:	d8c02017 	ldw	r3,128(sp)
 4015368:	d8801f17 	ldw	r2,124(sp)
 401536c:	4cc50d0e 	bge	r9,r19,40167a4 <___vfprintf_internal_r+0x1bc8>
 4015370:	01410234 	movhi	r5,1032
 4015374:	2947ac84 	addi	r5,r5,7858
 4015378:	dc403b15 	stw	r17,236(sp)
 401537c:	d9403515 	stw	r5,212(sp)
 4015380:	9823883a 	mov	r17,r19
 4015384:	482d883a 	mov	r22,r9
 4015388:	9027883a 	mov	r19,r18
 401538c:	070001c4 	movi	fp,7
 4015390:	8025883a 	mov	r18,r16
 4015394:	dc002c17 	ldw	r16,176(sp)
 4015398:	00000306 	br	40153a8 <___vfprintf_internal_r+0x7cc>
 401539c:	8c7ffc04 	addi	r17,r17,-16
 40153a0:	42000204 	addi	r8,r8,8
 40153a4:	b440130e 	bge	r22,r17,40153f4 <___vfprintf_internal_r+0x818>
 40153a8:	01010234 	movhi	r4,1032
 40153ac:	18c00404 	addi	r3,r3,16
 40153b0:	10800044 	addi	r2,r2,1
 40153b4:	2107ac84 	addi	r4,r4,7858
 40153b8:	41000015 	stw	r4,0(r8)
 40153bc:	45800115 	stw	r22,4(r8)
 40153c0:	d8c02015 	stw	r3,128(sp)
 40153c4:	d8801f15 	stw	r2,124(sp)
 40153c8:	e0bff40e 	bge	fp,r2,401539c <__reset+0xfb01439c>
 40153cc:	d9801e04 	addi	r6,sp,120
 40153d0:	b80b883a 	mov	r5,r23
 40153d4:	8009883a 	mov	r4,r16
 40153d8:	401caa00 	call	401caa0 <__sprint_r>
 40153dc:	103f011e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40153e0:	8c7ffc04 	addi	r17,r17,-16
 40153e4:	d8c02017 	ldw	r3,128(sp)
 40153e8:	d8801f17 	ldw	r2,124(sp)
 40153ec:	da000404 	addi	r8,sp,16
 40153f0:	b47fed16 	blt	r22,r17,40153a8 <__reset+0xfb0143a8>
 40153f4:	9021883a 	mov	r16,r18
 40153f8:	9825883a 	mov	r18,r19
 40153fc:	8827883a 	mov	r19,r17
 4015400:	dc403b17 	ldw	r17,236(sp)
 4015404:	d9403517 	ldw	r5,212(sp)
 4015408:	98c7883a 	add	r3,r19,r3
 401540c:	10800044 	addi	r2,r2,1
 4015410:	41400015 	stw	r5,0(r8)
 4015414:	44c00115 	stw	r19,4(r8)
 4015418:	d8c02015 	stw	r3,128(sp)
 401541c:	d8801f15 	stw	r2,124(sp)
 4015420:	010001c4 	movi	r4,7
 4015424:	2082a316 	blt	r4,r2,4015eb4 <___vfprintf_internal_r+0x12d8>
 4015428:	df002787 	ldb	fp,158(sp)
 401542c:	42000204 	addi	r8,r8,8
 4015430:	e0000c26 	beq	fp,zero,4015464 <___vfprintf_internal_r+0x888>
 4015434:	d8801f17 	ldw	r2,124(sp)
 4015438:	d9002784 	addi	r4,sp,158
 401543c:	18c00044 	addi	r3,r3,1
 4015440:	10800044 	addi	r2,r2,1
 4015444:	41000015 	stw	r4,0(r8)
 4015448:	01000044 	movi	r4,1
 401544c:	41000115 	stw	r4,4(r8)
 4015450:	d8c02015 	stw	r3,128(sp)
 4015454:	d8801f15 	stw	r2,124(sp)
 4015458:	010001c4 	movi	r4,7
 401545c:	20823c16 	blt	r4,r2,4015d50 <___vfprintf_internal_r+0x1174>
 4015460:	42000204 	addi	r8,r8,8
 4015464:	d8802b17 	ldw	r2,172(sp)
 4015468:	10000c26 	beq	r2,zero,401549c <___vfprintf_internal_r+0x8c0>
 401546c:	d8801f17 	ldw	r2,124(sp)
 4015470:	d9002704 	addi	r4,sp,156
 4015474:	18c00084 	addi	r3,r3,2
 4015478:	10800044 	addi	r2,r2,1
 401547c:	41000015 	stw	r4,0(r8)
 4015480:	01000084 	movi	r4,2
 4015484:	41000115 	stw	r4,4(r8)
 4015488:	d8c02015 	stw	r3,128(sp)
 401548c:	d8801f15 	stw	r2,124(sp)
 4015490:	010001c4 	movi	r4,7
 4015494:	20823616 	blt	r4,r2,4015d70 <___vfprintf_internal_r+0x1194>
 4015498:	42000204 	addi	r8,r8,8
 401549c:	d9003017 	ldw	r4,192(sp)
 40154a0:	00802004 	movi	r2,128
 40154a4:	20819926 	beq	r4,r2,4015b0c <___vfprintf_internal_r+0xf30>
 40154a8:	d9402917 	ldw	r5,164(sp)
 40154ac:	d8802e17 	ldw	r2,184(sp)
 40154b0:	28adc83a 	sub	r22,r5,r2
 40154b4:	0580310e 	bge	zero,r22,401557c <___vfprintf_internal_r+0x9a0>
 40154b8:	07000404 	movi	fp,16
 40154bc:	d8801f17 	ldw	r2,124(sp)
 40154c0:	e584140e 	bge	fp,r22,4016514 <___vfprintf_internal_r+0x1938>
 40154c4:	01410234 	movhi	r5,1032
 40154c8:	2947a884 	addi	r5,r5,7842
 40154cc:	dc402915 	stw	r17,164(sp)
 40154d0:	d9402b15 	stw	r5,172(sp)
 40154d4:	b023883a 	mov	r17,r22
 40154d8:	04c001c4 	movi	r19,7
 40154dc:	a82d883a 	mov	r22,r21
 40154e0:	902b883a 	mov	r21,r18
 40154e4:	8025883a 	mov	r18,r16
 40154e8:	dc002c17 	ldw	r16,176(sp)
 40154ec:	00000306 	br	40154fc <___vfprintf_internal_r+0x920>
 40154f0:	8c7ffc04 	addi	r17,r17,-16
 40154f4:	42000204 	addi	r8,r8,8
 40154f8:	e440110e 	bge	fp,r17,4015540 <___vfprintf_internal_r+0x964>
 40154fc:	18c00404 	addi	r3,r3,16
 4015500:	10800044 	addi	r2,r2,1
 4015504:	45000015 	stw	r20,0(r8)
 4015508:	47000115 	stw	fp,4(r8)
 401550c:	d8c02015 	stw	r3,128(sp)
 4015510:	d8801f15 	stw	r2,124(sp)
 4015514:	98bff60e 	bge	r19,r2,40154f0 <__reset+0xfb0144f0>
 4015518:	d9801e04 	addi	r6,sp,120
 401551c:	b80b883a 	mov	r5,r23
 4015520:	8009883a 	mov	r4,r16
 4015524:	401caa00 	call	401caa0 <__sprint_r>
 4015528:	103eae1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 401552c:	8c7ffc04 	addi	r17,r17,-16
 4015530:	d8c02017 	ldw	r3,128(sp)
 4015534:	d8801f17 	ldw	r2,124(sp)
 4015538:	da000404 	addi	r8,sp,16
 401553c:	e47fef16 	blt	fp,r17,40154fc <__reset+0xfb0144fc>
 4015540:	9021883a 	mov	r16,r18
 4015544:	a825883a 	mov	r18,r21
 4015548:	b02b883a 	mov	r21,r22
 401554c:	882d883a 	mov	r22,r17
 4015550:	dc402917 	ldw	r17,164(sp)
 4015554:	d9002b17 	ldw	r4,172(sp)
 4015558:	1d87883a 	add	r3,r3,r22
 401555c:	10800044 	addi	r2,r2,1
 4015560:	41000015 	stw	r4,0(r8)
 4015564:	45800115 	stw	r22,4(r8)
 4015568:	d8c02015 	stw	r3,128(sp)
 401556c:	d8801f15 	stw	r2,124(sp)
 4015570:	010001c4 	movi	r4,7
 4015574:	2081ee16 	blt	r4,r2,4015d30 <___vfprintf_internal_r+0x1154>
 4015578:	42000204 	addi	r8,r8,8
 401557c:	9080400c 	andi	r2,r18,256
 4015580:	1001181e 	bne	r2,zero,40159e4 <___vfprintf_internal_r+0xe08>
 4015584:	d9402e17 	ldw	r5,184(sp)
 4015588:	d8801f17 	ldw	r2,124(sp)
 401558c:	44000015 	stw	r16,0(r8)
 4015590:	1947883a 	add	r3,r3,r5
 4015594:	10800044 	addi	r2,r2,1
 4015598:	41400115 	stw	r5,4(r8)
 401559c:	d8c02015 	stw	r3,128(sp)
 40155a0:	d8801f15 	stw	r2,124(sp)
 40155a4:	010001c4 	movi	r4,7
 40155a8:	2081d316 	blt	r4,r2,4015cf8 <___vfprintf_internal_r+0x111c>
 40155ac:	42000204 	addi	r8,r8,8
 40155b0:	9480010c 	andi	r18,r18,4
 40155b4:	90003226 	beq	r18,zero,4015680 <___vfprintf_internal_r+0xaa4>
 40155b8:	d9403117 	ldw	r5,196(sp)
 40155bc:	d8802a17 	ldw	r2,168(sp)
 40155c0:	28a1c83a 	sub	r16,r5,r2
 40155c4:	04002e0e 	bge	zero,r16,4015680 <___vfprintf_internal_r+0xaa4>
 40155c8:	04400404 	movi	r17,16
 40155cc:	d8801f17 	ldw	r2,124(sp)
 40155d0:	8c04a20e 	bge	r17,r16,401685c <___vfprintf_internal_r+0x1c80>
 40155d4:	01410234 	movhi	r5,1032
 40155d8:	2947ac84 	addi	r5,r5,7858
 40155dc:	d9403515 	stw	r5,212(sp)
 40155e0:	048001c4 	movi	r18,7
 40155e4:	dcc02c17 	ldw	r19,176(sp)
 40155e8:	00000306 	br	40155f8 <___vfprintf_internal_r+0xa1c>
 40155ec:	843ffc04 	addi	r16,r16,-16
 40155f0:	42000204 	addi	r8,r8,8
 40155f4:	8c00130e 	bge	r17,r16,4015644 <___vfprintf_internal_r+0xa68>
 40155f8:	01010234 	movhi	r4,1032
 40155fc:	18c00404 	addi	r3,r3,16
 4015600:	10800044 	addi	r2,r2,1
 4015604:	2107ac84 	addi	r4,r4,7858
 4015608:	41000015 	stw	r4,0(r8)
 401560c:	44400115 	stw	r17,4(r8)
 4015610:	d8c02015 	stw	r3,128(sp)
 4015614:	d8801f15 	stw	r2,124(sp)
 4015618:	90bff40e 	bge	r18,r2,40155ec <__reset+0xfb0145ec>
 401561c:	d9801e04 	addi	r6,sp,120
 4015620:	b80b883a 	mov	r5,r23
 4015624:	9809883a 	mov	r4,r19
 4015628:	401caa00 	call	401caa0 <__sprint_r>
 401562c:	103e6d1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015630:	843ffc04 	addi	r16,r16,-16
 4015634:	d8c02017 	ldw	r3,128(sp)
 4015638:	d8801f17 	ldw	r2,124(sp)
 401563c:	da000404 	addi	r8,sp,16
 4015640:	8c3fed16 	blt	r17,r16,40155f8 <__reset+0xfb0145f8>
 4015644:	d9403517 	ldw	r5,212(sp)
 4015648:	1c07883a 	add	r3,r3,r16
 401564c:	10800044 	addi	r2,r2,1
 4015650:	41400015 	stw	r5,0(r8)
 4015654:	44000115 	stw	r16,4(r8)
 4015658:	d8c02015 	stw	r3,128(sp)
 401565c:	d8801f15 	stw	r2,124(sp)
 4015660:	010001c4 	movi	r4,7
 4015664:	2080060e 	bge	r4,r2,4015680 <___vfprintf_internal_r+0xaa4>
 4015668:	d9002c17 	ldw	r4,176(sp)
 401566c:	d9801e04 	addi	r6,sp,120
 4015670:	b80b883a 	mov	r5,r23
 4015674:	401caa00 	call	401caa0 <__sprint_r>
 4015678:	103e5a1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 401567c:	d8c02017 	ldw	r3,128(sp)
 4015680:	d8803117 	ldw	r2,196(sp)
 4015684:	d9002a17 	ldw	r4,168(sp)
 4015688:	1100010e 	bge	r2,r4,4015690 <___vfprintf_internal_r+0xab4>
 401568c:	2005883a 	mov	r2,r4
 4015690:	d9402f17 	ldw	r5,188(sp)
 4015694:	288b883a 	add	r5,r5,r2
 4015698:	d9402f15 	stw	r5,188(sp)
 401569c:	18019e1e 	bne	r3,zero,4015d18 <___vfprintf_internal_r+0x113c>
 40156a0:	a8800007 	ldb	r2,0(r21)
 40156a4:	d8001f15 	stw	zero,124(sp)
 40156a8:	da000404 	addi	r8,sp,16
 40156ac:	103d851e 	bne	r2,zero,4014cc4 <__reset+0xfb013cc4>
 40156b0:	a821883a 	mov	r16,r21
 40156b4:	003d9b06 	br	4014d24 <__reset+0xfb013d24>
 40156b8:	18c03fcc 	andi	r3,r3,255
 40156bc:	1805c11e 	bne	r3,zero,4016dc4 <___vfprintf_internal_r+0x21e8>
 40156c0:	94800414 	ori	r18,r18,16
 40156c4:	9080080c 	andi	r2,r18,32
 40156c8:	10020c26 	beq	r2,zero,4015efc <___vfprintf_internal_r+0x1320>
 40156cc:	d8802d17 	ldw	r2,180(sp)
 40156d0:	d9002917 	ldw	r4,164(sp)
 40156d4:	d8002785 	stb	zero,158(sp)
 40156d8:	10c00204 	addi	r3,r2,8
 40156dc:	14c00017 	ldw	r19,0(r2)
 40156e0:	15800117 	ldw	r22,4(r2)
 40156e4:	20040f16 	blt	r4,zero,4016724 <___vfprintf_internal_r+0x1b48>
 40156e8:	013fdfc4 	movi	r4,-129
 40156ec:	9d84b03a 	or	r2,r19,r22
 40156f0:	d8c02d15 	stw	r3,180(sp)
 40156f4:	9124703a 	and	r18,r18,r4
 40156f8:	0039883a 	mov	fp,zero
 40156fc:	103e891e 	bne	r2,zero,4015124 <__reset+0xfb014124>
 4015700:	d9002917 	ldw	r4,164(sp)
 4015704:	2002c11e 	bne	r4,zero,401620c <___vfprintf_internal_r+0x1630>
 4015708:	d8002915 	stw	zero,164(sp)
 401570c:	d8002e15 	stw	zero,184(sp)
 4015710:	dc001e04 	addi	r16,sp,120
 4015714:	003ef806 	br	40152f8 <__reset+0xfb0142f8>
 4015718:	18c03fcc 	andi	r3,r3,255
 401571c:	18059d1e 	bne	r3,zero,4016d94 <___vfprintf_internal_r+0x21b8>
 4015720:	01410234 	movhi	r5,1032
 4015724:	29479404 	addi	r5,r5,7760
 4015728:	d9403915 	stw	r5,228(sp)
 401572c:	9080080c 	andi	r2,r18,32
 4015730:	10005226 	beq	r2,zero,401587c <___vfprintf_internal_r+0xca0>
 4015734:	d8802d17 	ldw	r2,180(sp)
 4015738:	14c00017 	ldw	r19,0(r2)
 401573c:	15800117 	ldw	r22,4(r2)
 4015740:	10800204 	addi	r2,r2,8
 4015744:	d8802d15 	stw	r2,180(sp)
 4015748:	9080004c 	andi	r2,r18,1
 401574c:	10019026 	beq	r2,zero,4015d90 <___vfprintf_internal_r+0x11b4>
 4015750:	9d84b03a 	or	r2,r19,r22
 4015754:	10036926 	beq	r2,zero,40164fc <___vfprintf_internal_r+0x1920>
 4015758:	d8c02917 	ldw	r3,164(sp)
 401575c:	00800c04 	movi	r2,48
 4015760:	d8802705 	stb	r2,156(sp)
 4015764:	dc402745 	stb	r17,157(sp)
 4015768:	d8002785 	stb	zero,158(sp)
 401576c:	90800094 	ori	r2,r18,2
 4015770:	18045d16 	blt	r3,zero,40168e8 <___vfprintf_internal_r+0x1d0c>
 4015774:	00bfdfc4 	movi	r2,-129
 4015778:	90a4703a 	and	r18,r18,r2
 401577c:	94800094 	ori	r18,r18,2
 4015780:	0039883a 	mov	fp,zero
 4015784:	d9003917 	ldw	r4,228(sp)
 4015788:	dc001e04 	addi	r16,sp,120
 401578c:	988003cc 	andi	r2,r19,15
 4015790:	b006973a 	slli	r3,r22,28
 4015794:	2085883a 	add	r2,r4,r2
 4015798:	9826d13a 	srli	r19,r19,4
 401579c:	10800003 	ldbu	r2,0(r2)
 40157a0:	b02cd13a 	srli	r22,r22,4
 40157a4:	843fffc4 	addi	r16,r16,-1
 40157a8:	1ce6b03a 	or	r19,r3,r19
 40157ac:	80800005 	stb	r2,0(r16)
 40157b0:	9d84b03a 	or	r2,r19,r22
 40157b4:	103ff51e 	bne	r2,zero,401578c <__reset+0xfb01478c>
 40157b8:	d8c02817 	ldw	r3,160(sp)
 40157bc:	1c07c83a 	sub	r3,r3,r16
 40157c0:	d8c02e15 	stw	r3,184(sp)
 40157c4:	003ecc06 	br	40152f8 <__reset+0xfb0142f8>
 40157c8:	18c03fcc 	andi	r3,r3,255
 40157cc:	183e9f26 	beq	r3,zero,401524c <__reset+0xfb01424c>
 40157d0:	d9c02785 	stb	r7,158(sp)
 40157d4:	003e9d06 	br	401524c <__reset+0xfb01424c>
 40157d8:	00c00044 	movi	r3,1
 40157dc:	01c00ac4 	movi	r7,43
 40157e0:	ac400007 	ldb	r17,0(r21)
 40157e4:	003d5e06 	br	4014d60 <__reset+0xfb013d60>
 40157e8:	94800814 	ori	r18,r18,32
 40157ec:	ac400007 	ldb	r17,0(r21)
 40157f0:	003d5b06 	br	4014d60 <__reset+0xfb013d60>
 40157f4:	d8c02d17 	ldw	r3,180(sp)
 40157f8:	d8002785 	stb	zero,158(sp)
 40157fc:	1c000017 	ldw	r16,0(r3)
 4015800:	1cc00104 	addi	r19,r3,4
 4015804:	80041926 	beq	r16,zero,401686c <___vfprintf_internal_r+0x1c90>
 4015808:	d9002917 	ldw	r4,164(sp)
 401580c:	2003d016 	blt	r4,zero,4016750 <___vfprintf_internal_r+0x1b74>
 4015810:	200d883a 	mov	r6,r4
 4015814:	000b883a 	mov	r5,zero
 4015818:	8009883a 	mov	r4,r16
 401581c:	da003d15 	stw	r8,244(sp)
 4015820:	4019be00 	call	4019be0 <memchr>
 4015824:	da003d17 	ldw	r8,244(sp)
 4015828:	10045426 	beq	r2,zero,401697c <___vfprintf_internal_r+0x1da0>
 401582c:	1405c83a 	sub	r2,r2,r16
 4015830:	d8802e15 	stw	r2,184(sp)
 4015834:	1003cc16 	blt	r2,zero,4016768 <___vfprintf_internal_r+0x1b8c>
 4015838:	df002783 	ldbu	fp,158(sp)
 401583c:	d8802a15 	stw	r2,168(sp)
 4015840:	dcc02d15 	stw	r19,180(sp)
 4015844:	d8002915 	stw	zero,164(sp)
 4015848:	d8003215 	stw	zero,200(sp)
 401584c:	003eb006 	br	4015310 <__reset+0xfb014310>
 4015850:	18c03fcc 	andi	r3,r3,255
 4015854:	183f9b26 	beq	r3,zero,40156c4 <__reset+0xfb0146c4>
 4015858:	d9c02785 	stb	r7,158(sp)
 401585c:	003f9906 	br	40156c4 <__reset+0xfb0146c4>
 4015860:	18c03fcc 	andi	r3,r3,255
 4015864:	1805551e 	bne	r3,zero,4016dbc <___vfprintf_internal_r+0x21e0>
 4015868:	01410234 	movhi	r5,1032
 401586c:	29479904 	addi	r5,r5,7780
 4015870:	d9403915 	stw	r5,228(sp)
 4015874:	9080080c 	andi	r2,r18,32
 4015878:	103fae1e 	bne	r2,zero,4015734 <__reset+0xfb014734>
 401587c:	9080040c 	andi	r2,r18,16
 4015880:	1002de26 	beq	r2,zero,40163fc <___vfprintf_internal_r+0x1820>
 4015884:	d8c02d17 	ldw	r3,180(sp)
 4015888:	002d883a 	mov	r22,zero
 401588c:	1cc00017 	ldw	r19,0(r3)
 4015890:	18c00104 	addi	r3,r3,4
 4015894:	d8c02d15 	stw	r3,180(sp)
 4015898:	003fab06 	br	4015748 <__reset+0xfb014748>
 401589c:	38803fcc 	andi	r2,r7,255
 40158a0:	1080201c 	xori	r2,r2,128
 40158a4:	10bfe004 	addi	r2,r2,-128
 40158a8:	1002d21e 	bne	r2,zero,40163f4 <___vfprintf_internal_r+0x1818>
 40158ac:	00c00044 	movi	r3,1
 40158b0:	01c00804 	movi	r7,32
 40158b4:	ac400007 	ldb	r17,0(r21)
 40158b8:	003d2906 	br	4014d60 <__reset+0xfb013d60>
 40158bc:	94800054 	ori	r18,r18,1
 40158c0:	ac400007 	ldb	r17,0(r21)
 40158c4:	003d2606 	br	4014d60 <__reset+0xfb013d60>
 40158c8:	18c03fcc 	andi	r3,r3,255
 40158cc:	183e0526 	beq	r3,zero,40150e4 <__reset+0xfb0140e4>
 40158d0:	d9c02785 	stb	r7,158(sp)
 40158d4:	003e0306 	br	40150e4 <__reset+0xfb0140e4>
 40158d8:	94801014 	ori	r18,r18,64
 40158dc:	ac400007 	ldb	r17,0(r21)
 40158e0:	003d1f06 	br	4014d60 <__reset+0xfb013d60>
 40158e4:	ac400007 	ldb	r17,0(r21)
 40158e8:	8a438726 	beq	r17,r9,4016708 <___vfprintf_internal_r+0x1b2c>
 40158ec:	94800414 	ori	r18,r18,16
 40158f0:	003d1b06 	br	4014d60 <__reset+0xfb013d60>
 40158f4:	18c03fcc 	andi	r3,r3,255
 40158f8:	1805341e 	bne	r3,zero,4016dcc <___vfprintf_internal_r+0x21f0>
 40158fc:	9080080c 	andi	r2,r18,32
 4015900:	1002cd26 	beq	r2,zero,4016438 <___vfprintf_internal_r+0x185c>
 4015904:	d9402d17 	ldw	r5,180(sp)
 4015908:	d9002f17 	ldw	r4,188(sp)
 401590c:	28800017 	ldw	r2,0(r5)
 4015910:	2007d7fa 	srai	r3,r4,31
 4015914:	29400104 	addi	r5,r5,4
 4015918:	d9402d15 	stw	r5,180(sp)
 401591c:	11000015 	stw	r4,0(r2)
 4015920:	10c00115 	stw	r3,4(r2)
 4015924:	003ce506 	br	4014cbc <__reset+0xfb013cbc>
 4015928:	d8c02d17 	ldw	r3,180(sp)
 401592c:	d9002d17 	ldw	r4,180(sp)
 4015930:	d8002785 	stb	zero,158(sp)
 4015934:	18800017 	ldw	r2,0(r3)
 4015938:	21000104 	addi	r4,r4,4
 401593c:	00c00044 	movi	r3,1
 4015940:	d8c02a15 	stw	r3,168(sp)
 4015944:	d8801405 	stb	r2,80(sp)
 4015948:	d9002d15 	stw	r4,180(sp)
 401594c:	d8c02e15 	stw	r3,184(sp)
 4015950:	d8002915 	stw	zero,164(sp)
 4015954:	d8003215 	stw	zero,200(sp)
 4015958:	dc001404 	addi	r16,sp,80
 401595c:	0039883a 	mov	fp,zero
 4015960:	003e7206 	br	401532c <__reset+0xfb01432c>
 4015964:	01010234 	movhi	r4,1032
 4015968:	21079904 	addi	r4,r4,7780
 401596c:	0039883a 	mov	fp,zero
 4015970:	d9003915 	stw	r4,228(sp)
 4015974:	04401e04 	movi	r17,120
 4015978:	003f8206 	br	4015784 <__reset+0xfb014784>
 401597c:	18c03fcc 	andi	r3,r3,255
 4015980:	1805061e 	bne	r3,zero,4016d9c <___vfprintf_internal_r+0x21c0>
 4015984:	883d9126 	beq	r17,zero,4014fcc <__reset+0xfb013fcc>
 4015988:	00c00044 	movi	r3,1
 401598c:	d8c02a15 	stw	r3,168(sp)
 4015990:	dc401405 	stb	r17,80(sp)
 4015994:	d8002785 	stb	zero,158(sp)
 4015998:	003fec06 	br	401594c <__reset+0xfb01494c>
 401599c:	01410234 	movhi	r5,1032
 40159a0:	29479904 	addi	r5,r5,7780
 40159a4:	d9403915 	stw	r5,228(sp)
 40159a8:	d8c02d15 	stw	r3,180(sp)
 40159ac:	1025883a 	mov	r18,r2
 40159b0:	04401e04 	movi	r17,120
 40159b4:	9d84b03a 	or	r2,r19,r22
 40159b8:	1000fc1e 	bne	r2,zero,4015dac <___vfprintf_internal_r+0x11d0>
 40159bc:	0039883a 	mov	fp,zero
 40159c0:	00800084 	movi	r2,2
 40159c4:	10803fcc 	andi	r2,r2,255
 40159c8:	00c00044 	movi	r3,1
 40159cc:	10c20f26 	beq	r2,r3,401620c <___vfprintf_internal_r+0x1630>
 40159d0:	00c00084 	movi	r3,2
 40159d4:	10fd6326 	beq	r2,r3,4014f64 <__reset+0xfb013f64>
 40159d8:	003e2d06 	br	4015290 <__reset+0xfb014290>
 40159dc:	d8c02017 	ldw	r3,128(sp)
 40159e0:	003e9306 	br	4015430 <__reset+0xfb014430>
 40159e4:	00801944 	movi	r2,101
 40159e8:	14407e0e 	bge	r2,r17,4015be4 <___vfprintf_internal_r+0x1008>
 40159ec:	d9003617 	ldw	r4,216(sp)
 40159f0:	d9403817 	ldw	r5,224(sp)
 40159f4:	000d883a 	mov	r6,zero
 40159f8:	000f883a 	mov	r7,zero
 40159fc:	d8c03c15 	stw	r3,240(sp)
 4015a00:	da003d15 	stw	r8,244(sp)
 4015a04:	40104ec0 	call	40104ec <__eqdf2>
 4015a08:	d8c03c17 	ldw	r3,240(sp)
 4015a0c:	da003d17 	ldw	r8,244(sp)
 4015a10:	1000f71e 	bne	r2,zero,4015df0 <___vfprintf_internal_r+0x1214>
 4015a14:	d8801f17 	ldw	r2,124(sp)
 4015a18:	01010234 	movhi	r4,1032
 4015a1c:	2107a004 	addi	r4,r4,7808
 4015a20:	18c00044 	addi	r3,r3,1
 4015a24:	10800044 	addi	r2,r2,1
 4015a28:	41000015 	stw	r4,0(r8)
 4015a2c:	01000044 	movi	r4,1
 4015a30:	41000115 	stw	r4,4(r8)
 4015a34:	d8c02015 	stw	r3,128(sp)
 4015a38:	d8801f15 	stw	r2,124(sp)
 4015a3c:	010001c4 	movi	r4,7
 4015a40:	2082b816 	blt	r4,r2,4016524 <___vfprintf_internal_r+0x1948>
 4015a44:	42000204 	addi	r8,r8,8
 4015a48:	d8802617 	ldw	r2,152(sp)
 4015a4c:	d9403317 	ldw	r5,204(sp)
 4015a50:	11400216 	blt	r2,r5,4015a5c <___vfprintf_internal_r+0xe80>
 4015a54:	9080004c 	andi	r2,r18,1
 4015a58:	103ed526 	beq	r2,zero,40155b0 <__reset+0xfb0145b0>
 4015a5c:	d8803717 	ldw	r2,220(sp)
 4015a60:	d9003417 	ldw	r4,208(sp)
 4015a64:	d9403717 	ldw	r5,220(sp)
 4015a68:	1887883a 	add	r3,r3,r2
 4015a6c:	d8801f17 	ldw	r2,124(sp)
 4015a70:	41000015 	stw	r4,0(r8)
 4015a74:	41400115 	stw	r5,4(r8)
 4015a78:	10800044 	addi	r2,r2,1
 4015a7c:	d8c02015 	stw	r3,128(sp)
 4015a80:	d8801f15 	stw	r2,124(sp)
 4015a84:	010001c4 	movi	r4,7
 4015a88:	20832916 	blt	r4,r2,4016730 <___vfprintf_internal_r+0x1b54>
 4015a8c:	42000204 	addi	r8,r8,8
 4015a90:	d8803317 	ldw	r2,204(sp)
 4015a94:	143fffc4 	addi	r16,r2,-1
 4015a98:	043ec50e 	bge	zero,r16,40155b0 <__reset+0xfb0145b0>
 4015a9c:	04400404 	movi	r17,16
 4015aa0:	d8801f17 	ldw	r2,124(sp)
 4015aa4:	8c00880e 	bge	r17,r16,4015cc8 <___vfprintf_internal_r+0x10ec>
 4015aa8:	01410234 	movhi	r5,1032
 4015aac:	2947a884 	addi	r5,r5,7842
 4015ab0:	d9402b15 	stw	r5,172(sp)
 4015ab4:	058001c4 	movi	r22,7
 4015ab8:	dcc02c17 	ldw	r19,176(sp)
 4015abc:	00000306 	br	4015acc <___vfprintf_internal_r+0xef0>
 4015ac0:	42000204 	addi	r8,r8,8
 4015ac4:	843ffc04 	addi	r16,r16,-16
 4015ac8:	8c00820e 	bge	r17,r16,4015cd4 <___vfprintf_internal_r+0x10f8>
 4015acc:	18c00404 	addi	r3,r3,16
 4015ad0:	10800044 	addi	r2,r2,1
 4015ad4:	45000015 	stw	r20,0(r8)
 4015ad8:	44400115 	stw	r17,4(r8)
 4015adc:	d8c02015 	stw	r3,128(sp)
 4015ae0:	d8801f15 	stw	r2,124(sp)
 4015ae4:	b0bff60e 	bge	r22,r2,4015ac0 <__reset+0xfb014ac0>
 4015ae8:	d9801e04 	addi	r6,sp,120
 4015aec:	b80b883a 	mov	r5,r23
 4015af0:	9809883a 	mov	r4,r19
 4015af4:	401caa00 	call	401caa0 <__sprint_r>
 4015af8:	103d3a1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015afc:	d8c02017 	ldw	r3,128(sp)
 4015b00:	d8801f17 	ldw	r2,124(sp)
 4015b04:	da000404 	addi	r8,sp,16
 4015b08:	003fee06 	br	4015ac4 <__reset+0xfb014ac4>
 4015b0c:	d9403117 	ldw	r5,196(sp)
 4015b10:	d8802a17 	ldw	r2,168(sp)
 4015b14:	28adc83a 	sub	r22,r5,r2
 4015b18:	05be630e 	bge	zero,r22,40154a8 <__reset+0xfb0144a8>
 4015b1c:	07000404 	movi	fp,16
 4015b20:	d8801f17 	ldw	r2,124(sp)
 4015b24:	e5838f0e 	bge	fp,r22,4016964 <___vfprintf_internal_r+0x1d88>
 4015b28:	01410234 	movhi	r5,1032
 4015b2c:	2947a884 	addi	r5,r5,7842
 4015b30:	dc403015 	stw	r17,192(sp)
 4015b34:	d9402b15 	stw	r5,172(sp)
 4015b38:	b023883a 	mov	r17,r22
 4015b3c:	04c001c4 	movi	r19,7
 4015b40:	a82d883a 	mov	r22,r21
 4015b44:	902b883a 	mov	r21,r18
 4015b48:	8025883a 	mov	r18,r16
 4015b4c:	dc002c17 	ldw	r16,176(sp)
 4015b50:	00000306 	br	4015b60 <___vfprintf_internal_r+0xf84>
 4015b54:	8c7ffc04 	addi	r17,r17,-16
 4015b58:	42000204 	addi	r8,r8,8
 4015b5c:	e440110e 	bge	fp,r17,4015ba4 <___vfprintf_internal_r+0xfc8>
 4015b60:	18c00404 	addi	r3,r3,16
 4015b64:	10800044 	addi	r2,r2,1
 4015b68:	45000015 	stw	r20,0(r8)
 4015b6c:	47000115 	stw	fp,4(r8)
 4015b70:	d8c02015 	stw	r3,128(sp)
 4015b74:	d8801f15 	stw	r2,124(sp)
 4015b78:	98bff60e 	bge	r19,r2,4015b54 <__reset+0xfb014b54>
 4015b7c:	d9801e04 	addi	r6,sp,120
 4015b80:	b80b883a 	mov	r5,r23
 4015b84:	8009883a 	mov	r4,r16
 4015b88:	401caa00 	call	401caa0 <__sprint_r>
 4015b8c:	103d151e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015b90:	8c7ffc04 	addi	r17,r17,-16
 4015b94:	d8c02017 	ldw	r3,128(sp)
 4015b98:	d8801f17 	ldw	r2,124(sp)
 4015b9c:	da000404 	addi	r8,sp,16
 4015ba0:	e47fef16 	blt	fp,r17,4015b60 <__reset+0xfb014b60>
 4015ba4:	9021883a 	mov	r16,r18
 4015ba8:	a825883a 	mov	r18,r21
 4015bac:	b02b883a 	mov	r21,r22
 4015bb0:	882d883a 	mov	r22,r17
 4015bb4:	dc403017 	ldw	r17,192(sp)
 4015bb8:	d9002b17 	ldw	r4,172(sp)
 4015bbc:	1d87883a 	add	r3,r3,r22
 4015bc0:	10800044 	addi	r2,r2,1
 4015bc4:	41000015 	stw	r4,0(r8)
 4015bc8:	45800115 	stw	r22,4(r8)
 4015bcc:	d8c02015 	stw	r3,128(sp)
 4015bd0:	d8801f15 	stw	r2,124(sp)
 4015bd4:	010001c4 	movi	r4,7
 4015bd8:	20818e16 	blt	r4,r2,4016214 <___vfprintf_internal_r+0x1638>
 4015bdc:	42000204 	addi	r8,r8,8
 4015be0:	003e3106 	br	40154a8 <__reset+0xfb0144a8>
 4015be4:	d9403317 	ldw	r5,204(sp)
 4015be8:	00800044 	movi	r2,1
 4015bec:	18c00044 	addi	r3,r3,1
 4015bf0:	1141530e 	bge	r2,r5,4016140 <___vfprintf_internal_r+0x1564>
 4015bf4:	dc401f17 	ldw	r17,124(sp)
 4015bf8:	00800044 	movi	r2,1
 4015bfc:	40800115 	stw	r2,4(r8)
 4015c00:	8c400044 	addi	r17,r17,1
 4015c04:	44000015 	stw	r16,0(r8)
 4015c08:	d8c02015 	stw	r3,128(sp)
 4015c0c:	dc401f15 	stw	r17,124(sp)
 4015c10:	008001c4 	movi	r2,7
 4015c14:	14416b16 	blt	r2,r17,40161c4 <___vfprintf_internal_r+0x15e8>
 4015c18:	42000204 	addi	r8,r8,8
 4015c1c:	d8803717 	ldw	r2,220(sp)
 4015c20:	d9003417 	ldw	r4,208(sp)
 4015c24:	8c400044 	addi	r17,r17,1
 4015c28:	10c7883a 	add	r3,r2,r3
 4015c2c:	40800115 	stw	r2,4(r8)
 4015c30:	41000015 	stw	r4,0(r8)
 4015c34:	d8c02015 	stw	r3,128(sp)
 4015c38:	dc401f15 	stw	r17,124(sp)
 4015c3c:	008001c4 	movi	r2,7
 4015c40:	14416916 	blt	r2,r17,40161e8 <___vfprintf_internal_r+0x160c>
 4015c44:	45800204 	addi	r22,r8,8
 4015c48:	d9003617 	ldw	r4,216(sp)
 4015c4c:	d9403817 	ldw	r5,224(sp)
 4015c50:	000d883a 	mov	r6,zero
 4015c54:	000f883a 	mov	r7,zero
 4015c58:	d8c03c15 	stw	r3,240(sp)
 4015c5c:	40104ec0 	call	40104ec <__eqdf2>
 4015c60:	d8c03c17 	ldw	r3,240(sp)
 4015c64:	1000bc26 	beq	r2,zero,4015f58 <___vfprintf_internal_r+0x137c>
 4015c68:	d9403317 	ldw	r5,204(sp)
 4015c6c:	84000044 	addi	r16,r16,1
 4015c70:	8c400044 	addi	r17,r17,1
 4015c74:	28bfffc4 	addi	r2,r5,-1
 4015c78:	1887883a 	add	r3,r3,r2
 4015c7c:	b0800115 	stw	r2,4(r22)
 4015c80:	b4000015 	stw	r16,0(r22)
 4015c84:	d8c02015 	stw	r3,128(sp)
 4015c88:	dc401f15 	stw	r17,124(sp)
 4015c8c:	008001c4 	movi	r2,7
 4015c90:	14414316 	blt	r2,r17,40161a0 <___vfprintf_internal_r+0x15c4>
 4015c94:	b5800204 	addi	r22,r22,8
 4015c98:	d9003a17 	ldw	r4,232(sp)
 4015c9c:	df0022c4 	addi	fp,sp,139
 4015ca0:	8c400044 	addi	r17,r17,1
 4015ca4:	20c7883a 	add	r3,r4,r3
 4015ca8:	b7000015 	stw	fp,0(r22)
 4015cac:	b1000115 	stw	r4,4(r22)
 4015cb0:	d8c02015 	stw	r3,128(sp)
 4015cb4:	dc401f15 	stw	r17,124(sp)
 4015cb8:	008001c4 	movi	r2,7
 4015cbc:	14400e16 	blt	r2,r17,4015cf8 <___vfprintf_internal_r+0x111c>
 4015cc0:	b2000204 	addi	r8,r22,8
 4015cc4:	003e3a06 	br	40155b0 <__reset+0xfb0145b0>
 4015cc8:	01010234 	movhi	r4,1032
 4015ccc:	2107a884 	addi	r4,r4,7842
 4015cd0:	d9002b15 	stw	r4,172(sp)
 4015cd4:	d9002b17 	ldw	r4,172(sp)
 4015cd8:	1c07883a 	add	r3,r3,r16
 4015cdc:	44000115 	stw	r16,4(r8)
 4015ce0:	41000015 	stw	r4,0(r8)
 4015ce4:	10800044 	addi	r2,r2,1
 4015ce8:	d8c02015 	stw	r3,128(sp)
 4015cec:	d8801f15 	stw	r2,124(sp)
 4015cf0:	010001c4 	movi	r4,7
 4015cf4:	20be2d0e 	bge	r4,r2,40155ac <__reset+0xfb0145ac>
 4015cf8:	d9002c17 	ldw	r4,176(sp)
 4015cfc:	d9801e04 	addi	r6,sp,120
 4015d00:	b80b883a 	mov	r5,r23
 4015d04:	401caa00 	call	401caa0 <__sprint_r>
 4015d08:	103cb61e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015d0c:	d8c02017 	ldw	r3,128(sp)
 4015d10:	da000404 	addi	r8,sp,16
 4015d14:	003e2606 	br	40155b0 <__reset+0xfb0145b0>
 4015d18:	d9002c17 	ldw	r4,176(sp)
 4015d1c:	d9801e04 	addi	r6,sp,120
 4015d20:	b80b883a 	mov	r5,r23
 4015d24:	401caa00 	call	401caa0 <__sprint_r>
 4015d28:	103e5d26 	beq	r2,zero,40156a0 <__reset+0xfb0146a0>
 4015d2c:	003cad06 	br	4014fe4 <__reset+0xfb013fe4>
 4015d30:	d9002c17 	ldw	r4,176(sp)
 4015d34:	d9801e04 	addi	r6,sp,120
 4015d38:	b80b883a 	mov	r5,r23
 4015d3c:	401caa00 	call	401caa0 <__sprint_r>
 4015d40:	103ca81e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015d44:	d8c02017 	ldw	r3,128(sp)
 4015d48:	da000404 	addi	r8,sp,16
 4015d4c:	003e0b06 	br	401557c <__reset+0xfb01457c>
 4015d50:	d9002c17 	ldw	r4,176(sp)
 4015d54:	d9801e04 	addi	r6,sp,120
 4015d58:	b80b883a 	mov	r5,r23
 4015d5c:	401caa00 	call	401caa0 <__sprint_r>
 4015d60:	103ca01e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015d64:	d8c02017 	ldw	r3,128(sp)
 4015d68:	da000404 	addi	r8,sp,16
 4015d6c:	003dbd06 	br	4015464 <__reset+0xfb014464>
 4015d70:	d9002c17 	ldw	r4,176(sp)
 4015d74:	d9801e04 	addi	r6,sp,120
 4015d78:	b80b883a 	mov	r5,r23
 4015d7c:	401caa00 	call	401caa0 <__sprint_r>
 4015d80:	103c981e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015d84:	d8c02017 	ldw	r3,128(sp)
 4015d88:	da000404 	addi	r8,sp,16
 4015d8c:	003dc306 	br	401549c <__reset+0xfb01449c>
 4015d90:	d8802917 	ldw	r2,164(sp)
 4015d94:	d8002785 	stb	zero,158(sp)
 4015d98:	103f0616 	blt	r2,zero,40159b4 <__reset+0xfb0149b4>
 4015d9c:	00ffdfc4 	movi	r3,-129
 4015da0:	9d84b03a 	or	r2,r19,r22
 4015da4:	90e4703a 	and	r18,r18,r3
 4015da8:	103c6b26 	beq	r2,zero,4014f58 <__reset+0xfb013f58>
 4015dac:	0039883a 	mov	fp,zero
 4015db0:	003e7406 	br	4015784 <__reset+0xfb014784>
 4015db4:	9080040c 	andi	r2,r18,16
 4015db8:	1001b326 	beq	r2,zero,4016488 <___vfprintf_internal_r+0x18ac>
 4015dbc:	d9002d17 	ldw	r4,180(sp)
 4015dc0:	d9402917 	ldw	r5,164(sp)
 4015dc4:	d8002785 	stb	zero,158(sp)
 4015dc8:	20800104 	addi	r2,r4,4
 4015dcc:	24c00017 	ldw	r19,0(r4)
 4015dd0:	002d883a 	mov	r22,zero
 4015dd4:	2801b516 	blt	r5,zero,40164ac <___vfprintf_internal_r+0x18d0>
 4015dd8:	00ffdfc4 	movi	r3,-129
 4015ddc:	d8802d15 	stw	r2,180(sp)
 4015de0:	90e4703a 	and	r18,r18,r3
 4015de4:	983d2726 	beq	r19,zero,4015284 <__reset+0xfb014284>
 4015de8:	0039883a 	mov	fp,zero
 4015dec:	003d2a06 	br	4015298 <__reset+0xfb014298>
 4015df0:	dc402617 	ldw	r17,152(sp)
 4015df4:	0441d30e 	bge	zero,r17,4016544 <___vfprintf_internal_r+0x1968>
 4015df8:	dc403217 	ldw	r17,200(sp)
 4015dfc:	d8803317 	ldw	r2,204(sp)
 4015e00:	1440010e 	bge	r2,r17,4015e08 <___vfprintf_internal_r+0x122c>
 4015e04:	1023883a 	mov	r17,r2
 4015e08:	04400a0e 	bge	zero,r17,4015e34 <___vfprintf_internal_r+0x1258>
 4015e0c:	d8801f17 	ldw	r2,124(sp)
 4015e10:	1c47883a 	add	r3,r3,r17
 4015e14:	44000015 	stw	r16,0(r8)
 4015e18:	10800044 	addi	r2,r2,1
 4015e1c:	44400115 	stw	r17,4(r8)
 4015e20:	d8c02015 	stw	r3,128(sp)
 4015e24:	d8801f15 	stw	r2,124(sp)
 4015e28:	010001c4 	movi	r4,7
 4015e2c:	20826516 	blt	r4,r2,40167c4 <___vfprintf_internal_r+0x1be8>
 4015e30:	42000204 	addi	r8,r8,8
 4015e34:	88026116 	blt	r17,zero,40167bc <___vfprintf_internal_r+0x1be0>
 4015e38:	d9003217 	ldw	r4,200(sp)
 4015e3c:	2463c83a 	sub	r17,r4,r17
 4015e40:	04407b0e 	bge	zero,r17,4016030 <___vfprintf_internal_r+0x1454>
 4015e44:	05800404 	movi	r22,16
 4015e48:	d8801f17 	ldw	r2,124(sp)
 4015e4c:	b4419d0e 	bge	r22,r17,40164c4 <___vfprintf_internal_r+0x18e8>
 4015e50:	01010234 	movhi	r4,1032
 4015e54:	2107a884 	addi	r4,r4,7842
 4015e58:	d9002b15 	stw	r4,172(sp)
 4015e5c:	070001c4 	movi	fp,7
 4015e60:	dcc02c17 	ldw	r19,176(sp)
 4015e64:	00000306 	br	4015e74 <___vfprintf_internal_r+0x1298>
 4015e68:	42000204 	addi	r8,r8,8
 4015e6c:	8c7ffc04 	addi	r17,r17,-16
 4015e70:	b441970e 	bge	r22,r17,40164d0 <___vfprintf_internal_r+0x18f4>
 4015e74:	18c00404 	addi	r3,r3,16
 4015e78:	10800044 	addi	r2,r2,1
 4015e7c:	45000015 	stw	r20,0(r8)
 4015e80:	45800115 	stw	r22,4(r8)
 4015e84:	d8c02015 	stw	r3,128(sp)
 4015e88:	d8801f15 	stw	r2,124(sp)
 4015e8c:	e0bff60e 	bge	fp,r2,4015e68 <__reset+0xfb014e68>
 4015e90:	d9801e04 	addi	r6,sp,120
 4015e94:	b80b883a 	mov	r5,r23
 4015e98:	9809883a 	mov	r4,r19
 4015e9c:	401caa00 	call	401caa0 <__sprint_r>
 4015ea0:	103c501e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015ea4:	d8c02017 	ldw	r3,128(sp)
 4015ea8:	d8801f17 	ldw	r2,124(sp)
 4015eac:	da000404 	addi	r8,sp,16
 4015eb0:	003fee06 	br	4015e6c <__reset+0xfb014e6c>
 4015eb4:	d9002c17 	ldw	r4,176(sp)
 4015eb8:	d9801e04 	addi	r6,sp,120
 4015ebc:	b80b883a 	mov	r5,r23
 4015ec0:	401caa00 	call	401caa0 <__sprint_r>
 4015ec4:	103c471e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015ec8:	d8c02017 	ldw	r3,128(sp)
 4015ecc:	df002787 	ldb	fp,158(sp)
 4015ed0:	da000404 	addi	r8,sp,16
 4015ed4:	003d5606 	br	4015430 <__reset+0xfb014430>
 4015ed8:	9080040c 	andi	r2,r18,16
 4015edc:	10016126 	beq	r2,zero,4016464 <___vfprintf_internal_r+0x1888>
 4015ee0:	d8802d17 	ldw	r2,180(sp)
 4015ee4:	14c00017 	ldw	r19,0(r2)
 4015ee8:	10800104 	addi	r2,r2,4
 4015eec:	d8802d15 	stw	r2,180(sp)
 4015ef0:	982dd7fa 	srai	r22,r19,31
 4015ef4:	b005883a 	mov	r2,r22
 4015ef8:	003c8206 	br	4015104 <__reset+0xfb014104>
 4015efc:	9080040c 	andi	r2,r18,16
 4015f00:	10003526 	beq	r2,zero,4015fd8 <___vfprintf_internal_r+0x13fc>
 4015f04:	d9402d17 	ldw	r5,180(sp)
 4015f08:	d8c02917 	ldw	r3,164(sp)
 4015f0c:	d8002785 	stb	zero,158(sp)
 4015f10:	28800104 	addi	r2,r5,4
 4015f14:	2cc00017 	ldw	r19,0(r5)
 4015f18:	002d883a 	mov	r22,zero
 4015f1c:	18003716 	blt	r3,zero,4015ffc <___vfprintf_internal_r+0x1420>
 4015f20:	00ffdfc4 	movi	r3,-129
 4015f24:	d8802d15 	stw	r2,180(sp)
 4015f28:	90e4703a 	and	r18,r18,r3
 4015f2c:	0039883a 	mov	fp,zero
 4015f30:	983df326 	beq	r19,zero,4015700 <__reset+0xfb014700>
 4015f34:	00800244 	movi	r2,9
 4015f38:	14fc7b36 	bltu	r2,r19,4015128 <__reset+0xfb014128>
 4015f3c:	d8c02817 	ldw	r3,160(sp)
 4015f40:	dc001dc4 	addi	r16,sp,119
 4015f44:	9cc00c04 	addi	r19,r19,48
 4015f48:	1c07c83a 	sub	r3,r3,r16
 4015f4c:	dcc01dc5 	stb	r19,119(sp)
 4015f50:	d8c02e15 	stw	r3,184(sp)
 4015f54:	003ce806 	br	40152f8 <__reset+0xfb0142f8>
 4015f58:	d8803317 	ldw	r2,204(sp)
 4015f5c:	143fffc4 	addi	r16,r2,-1
 4015f60:	043f4d0e 	bge	zero,r16,4015c98 <__reset+0xfb014c98>
 4015f64:	07000404 	movi	fp,16
 4015f68:	e400810e 	bge	fp,r16,4016170 <___vfprintf_internal_r+0x1594>
 4015f6c:	01410234 	movhi	r5,1032
 4015f70:	2947a884 	addi	r5,r5,7842
 4015f74:	d9402b15 	stw	r5,172(sp)
 4015f78:	01c001c4 	movi	r7,7
 4015f7c:	dcc02c17 	ldw	r19,176(sp)
 4015f80:	00000306 	br	4015f90 <___vfprintf_internal_r+0x13b4>
 4015f84:	b5800204 	addi	r22,r22,8
 4015f88:	843ffc04 	addi	r16,r16,-16
 4015f8c:	e4007b0e 	bge	fp,r16,401617c <___vfprintf_internal_r+0x15a0>
 4015f90:	18c00404 	addi	r3,r3,16
 4015f94:	8c400044 	addi	r17,r17,1
 4015f98:	b5000015 	stw	r20,0(r22)
 4015f9c:	b7000115 	stw	fp,4(r22)
 4015fa0:	d8c02015 	stw	r3,128(sp)
 4015fa4:	dc401f15 	stw	r17,124(sp)
 4015fa8:	3c7ff60e 	bge	r7,r17,4015f84 <__reset+0xfb014f84>
 4015fac:	d9801e04 	addi	r6,sp,120
 4015fb0:	b80b883a 	mov	r5,r23
 4015fb4:	9809883a 	mov	r4,r19
 4015fb8:	d9c03c15 	stw	r7,240(sp)
 4015fbc:	401caa00 	call	401caa0 <__sprint_r>
 4015fc0:	d9c03c17 	ldw	r7,240(sp)
 4015fc4:	103c071e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4015fc8:	d8c02017 	ldw	r3,128(sp)
 4015fcc:	dc401f17 	ldw	r17,124(sp)
 4015fd0:	dd800404 	addi	r22,sp,16
 4015fd4:	003fec06 	br	4015f88 <__reset+0xfb014f88>
 4015fd8:	9080100c 	andi	r2,r18,64
 4015fdc:	d8002785 	stb	zero,158(sp)
 4015fe0:	10010e26 	beq	r2,zero,401641c <___vfprintf_internal_r+0x1840>
 4015fe4:	d9002d17 	ldw	r4,180(sp)
 4015fe8:	d9402917 	ldw	r5,164(sp)
 4015fec:	002d883a 	mov	r22,zero
 4015ff0:	20800104 	addi	r2,r4,4
 4015ff4:	24c0000b 	ldhu	r19,0(r4)
 4015ff8:	283fc90e 	bge	r5,zero,4015f20 <__reset+0xfb014f20>
 4015ffc:	d8802d15 	stw	r2,180(sp)
 4016000:	0039883a 	mov	fp,zero
 4016004:	9d84b03a 	or	r2,r19,r22
 4016008:	103c461e 	bne	r2,zero,4015124 <__reset+0xfb014124>
 401600c:	00800044 	movi	r2,1
 4016010:	003e6c06 	br	40159c4 <__reset+0xfb0149c4>
 4016014:	d9002c17 	ldw	r4,176(sp)
 4016018:	d9801e04 	addi	r6,sp,120
 401601c:	b80b883a 	mov	r5,r23
 4016020:	401caa00 	call	401caa0 <__sprint_r>
 4016024:	103bef1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016028:	d8c02017 	ldw	r3,128(sp)
 401602c:	da000404 	addi	r8,sp,16
 4016030:	d9003217 	ldw	r4,200(sp)
 4016034:	d8802617 	ldw	r2,152(sp)
 4016038:	d9403317 	ldw	r5,204(sp)
 401603c:	8123883a 	add	r17,r16,r4
 4016040:	11400216 	blt	r2,r5,401604c <___vfprintf_internal_r+0x1470>
 4016044:	9100004c 	andi	r4,r18,1
 4016048:	20000d26 	beq	r4,zero,4016080 <___vfprintf_internal_r+0x14a4>
 401604c:	d9003717 	ldw	r4,220(sp)
 4016050:	d9403417 	ldw	r5,208(sp)
 4016054:	1907883a 	add	r3,r3,r4
 4016058:	d9001f17 	ldw	r4,124(sp)
 401605c:	41400015 	stw	r5,0(r8)
 4016060:	d9403717 	ldw	r5,220(sp)
 4016064:	21000044 	addi	r4,r4,1
 4016068:	d8c02015 	stw	r3,128(sp)
 401606c:	41400115 	stw	r5,4(r8)
 4016070:	d9001f15 	stw	r4,124(sp)
 4016074:	014001c4 	movi	r5,7
 4016078:	2901e816 	blt	r5,r4,401681c <___vfprintf_internal_r+0x1c40>
 401607c:	42000204 	addi	r8,r8,8
 4016080:	d9003317 	ldw	r4,204(sp)
 4016084:	8121883a 	add	r16,r16,r4
 4016088:	2085c83a 	sub	r2,r4,r2
 401608c:	8461c83a 	sub	r16,r16,r17
 4016090:	1400010e 	bge	r2,r16,4016098 <___vfprintf_internal_r+0x14bc>
 4016094:	1021883a 	mov	r16,r2
 4016098:	04000a0e 	bge	zero,r16,40160c4 <___vfprintf_internal_r+0x14e8>
 401609c:	d9001f17 	ldw	r4,124(sp)
 40160a0:	1c07883a 	add	r3,r3,r16
 40160a4:	44400015 	stw	r17,0(r8)
 40160a8:	21000044 	addi	r4,r4,1
 40160ac:	44000115 	stw	r16,4(r8)
 40160b0:	d8c02015 	stw	r3,128(sp)
 40160b4:	d9001f15 	stw	r4,124(sp)
 40160b8:	014001c4 	movi	r5,7
 40160bc:	2901fb16 	blt	r5,r4,40168ac <___vfprintf_internal_r+0x1cd0>
 40160c0:	42000204 	addi	r8,r8,8
 40160c4:	8001f716 	blt	r16,zero,40168a4 <___vfprintf_internal_r+0x1cc8>
 40160c8:	1421c83a 	sub	r16,r2,r16
 40160cc:	043d380e 	bge	zero,r16,40155b0 <__reset+0xfb0145b0>
 40160d0:	04400404 	movi	r17,16
 40160d4:	d8801f17 	ldw	r2,124(sp)
 40160d8:	8c3efb0e 	bge	r17,r16,4015cc8 <__reset+0xfb014cc8>
 40160dc:	01410234 	movhi	r5,1032
 40160e0:	2947a884 	addi	r5,r5,7842
 40160e4:	d9402b15 	stw	r5,172(sp)
 40160e8:	058001c4 	movi	r22,7
 40160ec:	dcc02c17 	ldw	r19,176(sp)
 40160f0:	00000306 	br	4016100 <___vfprintf_internal_r+0x1524>
 40160f4:	42000204 	addi	r8,r8,8
 40160f8:	843ffc04 	addi	r16,r16,-16
 40160fc:	8c3ef50e 	bge	r17,r16,4015cd4 <__reset+0xfb014cd4>
 4016100:	18c00404 	addi	r3,r3,16
 4016104:	10800044 	addi	r2,r2,1
 4016108:	45000015 	stw	r20,0(r8)
 401610c:	44400115 	stw	r17,4(r8)
 4016110:	d8c02015 	stw	r3,128(sp)
 4016114:	d8801f15 	stw	r2,124(sp)
 4016118:	b0bff60e 	bge	r22,r2,40160f4 <__reset+0xfb0150f4>
 401611c:	d9801e04 	addi	r6,sp,120
 4016120:	b80b883a 	mov	r5,r23
 4016124:	9809883a 	mov	r4,r19
 4016128:	401caa00 	call	401caa0 <__sprint_r>
 401612c:	103bad1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016130:	d8c02017 	ldw	r3,128(sp)
 4016134:	d8801f17 	ldw	r2,124(sp)
 4016138:	da000404 	addi	r8,sp,16
 401613c:	003fee06 	br	40160f8 <__reset+0xfb0150f8>
 4016140:	9088703a 	and	r4,r18,r2
 4016144:	203eab1e 	bne	r4,zero,4015bf4 <__reset+0xfb014bf4>
 4016148:	dc401f17 	ldw	r17,124(sp)
 401614c:	40800115 	stw	r2,4(r8)
 4016150:	44000015 	stw	r16,0(r8)
 4016154:	8c400044 	addi	r17,r17,1
 4016158:	d8c02015 	stw	r3,128(sp)
 401615c:	dc401f15 	stw	r17,124(sp)
 4016160:	008001c4 	movi	r2,7
 4016164:	14400e16 	blt	r2,r17,40161a0 <___vfprintf_internal_r+0x15c4>
 4016168:	45800204 	addi	r22,r8,8
 401616c:	003eca06 	br	4015c98 <__reset+0xfb014c98>
 4016170:	01010234 	movhi	r4,1032
 4016174:	2107a884 	addi	r4,r4,7842
 4016178:	d9002b15 	stw	r4,172(sp)
 401617c:	d8802b17 	ldw	r2,172(sp)
 4016180:	1c07883a 	add	r3,r3,r16
 4016184:	8c400044 	addi	r17,r17,1
 4016188:	b0800015 	stw	r2,0(r22)
 401618c:	b4000115 	stw	r16,4(r22)
 4016190:	d8c02015 	stw	r3,128(sp)
 4016194:	dc401f15 	stw	r17,124(sp)
 4016198:	008001c4 	movi	r2,7
 401619c:	147ebd0e 	bge	r2,r17,4015c94 <__reset+0xfb014c94>
 40161a0:	d9002c17 	ldw	r4,176(sp)
 40161a4:	d9801e04 	addi	r6,sp,120
 40161a8:	b80b883a 	mov	r5,r23
 40161ac:	401caa00 	call	401caa0 <__sprint_r>
 40161b0:	103b8c1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40161b4:	d8c02017 	ldw	r3,128(sp)
 40161b8:	dc401f17 	ldw	r17,124(sp)
 40161bc:	dd800404 	addi	r22,sp,16
 40161c0:	003eb506 	br	4015c98 <__reset+0xfb014c98>
 40161c4:	d9002c17 	ldw	r4,176(sp)
 40161c8:	d9801e04 	addi	r6,sp,120
 40161cc:	b80b883a 	mov	r5,r23
 40161d0:	401caa00 	call	401caa0 <__sprint_r>
 40161d4:	103b831e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40161d8:	d8c02017 	ldw	r3,128(sp)
 40161dc:	dc401f17 	ldw	r17,124(sp)
 40161e0:	da000404 	addi	r8,sp,16
 40161e4:	003e8d06 	br	4015c1c <__reset+0xfb014c1c>
 40161e8:	d9002c17 	ldw	r4,176(sp)
 40161ec:	d9801e04 	addi	r6,sp,120
 40161f0:	b80b883a 	mov	r5,r23
 40161f4:	401caa00 	call	401caa0 <__sprint_r>
 40161f8:	103b7a1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40161fc:	d8c02017 	ldw	r3,128(sp)
 4016200:	dc401f17 	ldw	r17,124(sp)
 4016204:	dd800404 	addi	r22,sp,16
 4016208:	003e8f06 	br	4015c48 <__reset+0xfb014c48>
 401620c:	0027883a 	mov	r19,zero
 4016210:	003f4a06 	br	4015f3c <__reset+0xfb014f3c>
 4016214:	d9002c17 	ldw	r4,176(sp)
 4016218:	d9801e04 	addi	r6,sp,120
 401621c:	b80b883a 	mov	r5,r23
 4016220:	401caa00 	call	401caa0 <__sprint_r>
 4016224:	103b6f1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016228:	d8c02017 	ldw	r3,128(sp)
 401622c:	da000404 	addi	r8,sp,16
 4016230:	003c9d06 	br	40154a8 <__reset+0xfb0144a8>
 4016234:	04e7c83a 	sub	r19,zero,r19
 4016238:	9804c03a 	cmpne	r2,r19,zero
 401623c:	05adc83a 	sub	r22,zero,r22
 4016240:	b0adc83a 	sub	r22,r22,r2
 4016244:	d8802917 	ldw	r2,164(sp)
 4016248:	07000b44 	movi	fp,45
 401624c:	df002785 	stb	fp,158(sp)
 4016250:	10017b16 	blt	r2,zero,4016840 <___vfprintf_internal_r+0x1c64>
 4016254:	00bfdfc4 	movi	r2,-129
 4016258:	90a4703a 	and	r18,r18,r2
 401625c:	003bb106 	br	4015124 <__reset+0xfb014124>
 4016260:	d9003617 	ldw	r4,216(sp)
 4016264:	d9403817 	ldw	r5,224(sp)
 4016268:	da003d15 	stw	r8,244(sp)
 401626c:	400d9800 	call	400d980 <__fpclassifyd>
 4016270:	da003d17 	ldw	r8,244(sp)
 4016274:	1000f026 	beq	r2,zero,4016638 <___vfprintf_internal_r+0x1a5c>
 4016278:	d9002917 	ldw	r4,164(sp)
 401627c:	05bff7c4 	movi	r22,-33
 4016280:	00bfffc4 	movi	r2,-1
 4016284:	8dac703a 	and	r22,r17,r22
 4016288:	20820026 	beq	r4,r2,4016a8c <___vfprintf_internal_r+0x1eb0>
 401628c:	008011c4 	movi	r2,71
 4016290:	b081f726 	beq	r22,r2,4016a70 <___vfprintf_internal_r+0x1e94>
 4016294:	d9003817 	ldw	r4,224(sp)
 4016298:	90c04014 	ori	r3,r18,256
 401629c:	d8c02b15 	stw	r3,172(sp)
 40162a0:	20021516 	blt	r4,zero,4016af8 <___vfprintf_internal_r+0x1f1c>
 40162a4:	dcc03817 	ldw	r19,224(sp)
 40162a8:	d8002a05 	stb	zero,168(sp)
 40162ac:	00801984 	movi	r2,102
 40162b0:	8881f926 	beq	r17,r2,4016a98 <___vfprintf_internal_r+0x1ebc>
 40162b4:	00801184 	movi	r2,70
 40162b8:	88821c26 	beq	r17,r2,4016b2c <___vfprintf_internal_r+0x1f50>
 40162bc:	00801144 	movi	r2,69
 40162c0:	b081ef26 	beq	r22,r2,4016a80 <___vfprintf_internal_r+0x1ea4>
 40162c4:	d8c02917 	ldw	r3,164(sp)
 40162c8:	d8802104 	addi	r2,sp,132
 40162cc:	d8800315 	stw	r2,12(sp)
 40162d0:	d9403617 	ldw	r5,216(sp)
 40162d4:	d8802504 	addi	r2,sp,148
 40162d8:	d9002c17 	ldw	r4,176(sp)
 40162dc:	d8800215 	stw	r2,8(sp)
 40162e0:	d8802604 	addi	r2,sp,152
 40162e4:	d8c00015 	stw	r3,0(sp)
 40162e8:	d8800115 	stw	r2,4(sp)
 40162ec:	01c00084 	movi	r7,2
 40162f0:	980d883a 	mov	r6,r19
 40162f4:	d8c03c15 	stw	r3,240(sp)
 40162f8:	da003d15 	stw	r8,244(sp)
 40162fc:	40172000 	call	4017200 <_dtoa_r>
 4016300:	1021883a 	mov	r16,r2
 4016304:	008019c4 	movi	r2,103
 4016308:	d8c03c17 	ldw	r3,240(sp)
 401630c:	da003d17 	ldw	r8,244(sp)
 4016310:	88817126 	beq	r17,r2,40168d8 <___vfprintf_internal_r+0x1cfc>
 4016314:	008011c4 	movi	r2,71
 4016318:	88829226 	beq	r17,r2,4016d64 <___vfprintf_internal_r+0x2188>
 401631c:	80f9883a 	add	fp,r16,r3
 4016320:	d9003617 	ldw	r4,216(sp)
 4016324:	000d883a 	mov	r6,zero
 4016328:	000f883a 	mov	r7,zero
 401632c:	980b883a 	mov	r5,r19
 4016330:	da003d15 	stw	r8,244(sp)
 4016334:	40104ec0 	call	40104ec <__eqdf2>
 4016338:	da003d17 	ldw	r8,244(sp)
 401633c:	10018d26 	beq	r2,zero,4016974 <___vfprintf_internal_r+0x1d98>
 4016340:	d8802117 	ldw	r2,132(sp)
 4016344:	1700062e 	bgeu	r2,fp,4016360 <___vfprintf_internal_r+0x1784>
 4016348:	01000c04 	movi	r4,48
 401634c:	10c00044 	addi	r3,r2,1
 4016350:	d8c02115 	stw	r3,132(sp)
 4016354:	11000005 	stb	r4,0(r2)
 4016358:	d8802117 	ldw	r2,132(sp)
 401635c:	173ffb36 	bltu	r2,fp,401634c <__reset+0xfb01534c>
 4016360:	1405c83a 	sub	r2,r2,r16
 4016364:	d8803315 	stw	r2,204(sp)
 4016368:	008011c4 	movi	r2,71
 401636c:	b0817626 	beq	r22,r2,4016948 <___vfprintf_internal_r+0x1d6c>
 4016370:	00801944 	movi	r2,101
 4016374:	1442810e 	bge	r2,r17,4016d7c <___vfprintf_internal_r+0x21a0>
 4016378:	d8c02617 	ldw	r3,152(sp)
 401637c:	00801984 	movi	r2,102
 4016380:	d8c03215 	stw	r3,200(sp)
 4016384:	8881fe26 	beq	r17,r2,4016b80 <___vfprintf_internal_r+0x1fa4>
 4016388:	d8c03217 	ldw	r3,200(sp)
 401638c:	d9003317 	ldw	r4,204(sp)
 4016390:	1901dd16 	blt	r3,r4,4016b08 <___vfprintf_internal_r+0x1f2c>
 4016394:	9480004c 	andi	r18,r18,1
 4016398:	90022b1e 	bne	r18,zero,4016c48 <___vfprintf_internal_r+0x206c>
 401639c:	1805883a 	mov	r2,r3
 40163a0:	18028016 	blt	r3,zero,4016da4 <___vfprintf_internal_r+0x21c8>
 40163a4:	d8c03217 	ldw	r3,200(sp)
 40163a8:	044019c4 	movi	r17,103
 40163ac:	d8c02e15 	stw	r3,184(sp)
 40163b0:	df002a07 	ldb	fp,168(sp)
 40163b4:	e001531e 	bne	fp,zero,4016904 <___vfprintf_internal_r+0x1d28>
 40163b8:	df002783 	ldbu	fp,158(sp)
 40163bc:	d8802a15 	stw	r2,168(sp)
 40163c0:	dc802b17 	ldw	r18,172(sp)
 40163c4:	d8002915 	stw	zero,164(sp)
 40163c8:	003bd106 	br	4015310 <__reset+0xfb014310>
 40163cc:	d8802d17 	ldw	r2,180(sp)
 40163d0:	d8c02d17 	ldw	r3,180(sp)
 40163d4:	d9002d17 	ldw	r4,180(sp)
 40163d8:	10800017 	ldw	r2,0(r2)
 40163dc:	18c00117 	ldw	r3,4(r3)
 40163e0:	21000204 	addi	r4,r4,8
 40163e4:	d8803615 	stw	r2,216(sp)
 40163e8:	d8c03815 	stw	r3,224(sp)
 40163ec:	d9002d15 	stw	r4,180(sp)
 40163f0:	003b7506 	br	40151c8 <__reset+0xfb0141c8>
 40163f4:	ac400007 	ldb	r17,0(r21)
 40163f8:	003a5906 	br	4014d60 <__reset+0xfb013d60>
 40163fc:	9080100c 	andi	r2,r18,64
 4016400:	1000a826 	beq	r2,zero,40166a4 <___vfprintf_internal_r+0x1ac8>
 4016404:	d9002d17 	ldw	r4,180(sp)
 4016408:	002d883a 	mov	r22,zero
 401640c:	24c0000b 	ldhu	r19,0(r4)
 4016410:	21000104 	addi	r4,r4,4
 4016414:	d9002d15 	stw	r4,180(sp)
 4016418:	003ccb06 	br	4015748 <__reset+0xfb014748>
 401641c:	d8c02d17 	ldw	r3,180(sp)
 4016420:	d9002917 	ldw	r4,164(sp)
 4016424:	002d883a 	mov	r22,zero
 4016428:	18800104 	addi	r2,r3,4
 401642c:	1cc00017 	ldw	r19,0(r3)
 4016430:	203ebb0e 	bge	r4,zero,4015f20 <__reset+0xfb014f20>
 4016434:	003ef106 	br	4015ffc <__reset+0xfb014ffc>
 4016438:	9080040c 	andi	r2,r18,16
 401643c:	1000921e 	bne	r2,zero,4016688 <___vfprintf_internal_r+0x1aac>
 4016440:	9480100c 	andi	r18,r18,64
 4016444:	90013926 	beq	r18,zero,401692c <___vfprintf_internal_r+0x1d50>
 4016448:	d9002d17 	ldw	r4,180(sp)
 401644c:	d9402f17 	ldw	r5,188(sp)
 4016450:	20800017 	ldw	r2,0(r4)
 4016454:	21000104 	addi	r4,r4,4
 4016458:	d9002d15 	stw	r4,180(sp)
 401645c:	1140000d 	sth	r5,0(r2)
 4016460:	003a1606 	br	4014cbc <__reset+0xfb013cbc>
 4016464:	9080100c 	andi	r2,r18,64
 4016468:	10008026 	beq	r2,zero,401666c <___vfprintf_internal_r+0x1a90>
 401646c:	d8c02d17 	ldw	r3,180(sp)
 4016470:	1cc0000f 	ldh	r19,0(r3)
 4016474:	18c00104 	addi	r3,r3,4
 4016478:	d8c02d15 	stw	r3,180(sp)
 401647c:	982dd7fa 	srai	r22,r19,31
 4016480:	b005883a 	mov	r2,r22
 4016484:	003b1f06 	br	4015104 <__reset+0xfb014104>
 4016488:	9080100c 	andi	r2,r18,64
 401648c:	d8002785 	stb	zero,158(sp)
 4016490:	10008a1e 	bne	r2,zero,40166bc <___vfprintf_internal_r+0x1ae0>
 4016494:	d9402d17 	ldw	r5,180(sp)
 4016498:	d8c02917 	ldw	r3,164(sp)
 401649c:	002d883a 	mov	r22,zero
 40164a0:	28800104 	addi	r2,r5,4
 40164a4:	2cc00017 	ldw	r19,0(r5)
 40164a8:	183e4b0e 	bge	r3,zero,4015dd8 <__reset+0xfb014dd8>
 40164ac:	9d86b03a 	or	r3,r19,r22
 40164b0:	d8802d15 	stw	r2,180(sp)
 40164b4:	183e4c1e 	bne	r3,zero,4015de8 <__reset+0xfb014de8>
 40164b8:	0039883a 	mov	fp,zero
 40164bc:	0005883a 	mov	r2,zero
 40164c0:	003d4006 	br	40159c4 <__reset+0xfb0149c4>
 40164c4:	01410234 	movhi	r5,1032
 40164c8:	2947a884 	addi	r5,r5,7842
 40164cc:	d9402b15 	stw	r5,172(sp)
 40164d0:	d9402b17 	ldw	r5,172(sp)
 40164d4:	1c47883a 	add	r3,r3,r17
 40164d8:	10800044 	addi	r2,r2,1
 40164dc:	41400015 	stw	r5,0(r8)
 40164e0:	44400115 	stw	r17,4(r8)
 40164e4:	d8c02015 	stw	r3,128(sp)
 40164e8:	d8801f15 	stw	r2,124(sp)
 40164ec:	010001c4 	movi	r4,7
 40164f0:	20bec816 	blt	r4,r2,4016014 <__reset+0xfb015014>
 40164f4:	42000204 	addi	r8,r8,8
 40164f8:	003ecd06 	br	4016030 <__reset+0xfb015030>
 40164fc:	d9002917 	ldw	r4,164(sp)
 4016500:	d8002785 	stb	zero,158(sp)
 4016504:	203d2d16 	blt	r4,zero,40159bc <__reset+0xfb0149bc>
 4016508:	00bfdfc4 	movi	r2,-129
 401650c:	90a4703a 	and	r18,r18,r2
 4016510:	003a9106 	br	4014f58 <__reset+0xfb013f58>
 4016514:	01010234 	movhi	r4,1032
 4016518:	2107a884 	addi	r4,r4,7842
 401651c:	d9002b15 	stw	r4,172(sp)
 4016520:	003c0c06 	br	4015554 <__reset+0xfb014554>
 4016524:	d9002c17 	ldw	r4,176(sp)
 4016528:	d9801e04 	addi	r6,sp,120
 401652c:	b80b883a 	mov	r5,r23
 4016530:	401caa00 	call	401caa0 <__sprint_r>
 4016534:	103aab1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016538:	d8c02017 	ldw	r3,128(sp)
 401653c:	da000404 	addi	r8,sp,16
 4016540:	003d4106 	br	4015a48 <__reset+0xfb014a48>
 4016544:	d8801f17 	ldw	r2,124(sp)
 4016548:	01410234 	movhi	r5,1032
 401654c:	01000044 	movi	r4,1
 4016550:	18c00044 	addi	r3,r3,1
 4016554:	10800044 	addi	r2,r2,1
 4016558:	2947a004 	addi	r5,r5,7808
 401655c:	41000115 	stw	r4,4(r8)
 4016560:	41400015 	stw	r5,0(r8)
 4016564:	d8c02015 	stw	r3,128(sp)
 4016568:	d8801f15 	stw	r2,124(sp)
 401656c:	010001c4 	movi	r4,7
 4016570:	20805c16 	blt	r4,r2,40166e4 <___vfprintf_internal_r+0x1b08>
 4016574:	42000204 	addi	r8,r8,8
 4016578:	8800041e 	bne	r17,zero,401658c <___vfprintf_internal_r+0x19b0>
 401657c:	d8803317 	ldw	r2,204(sp)
 4016580:	1000021e 	bne	r2,zero,401658c <___vfprintf_internal_r+0x19b0>
 4016584:	9080004c 	andi	r2,r18,1
 4016588:	103c0926 	beq	r2,zero,40155b0 <__reset+0xfb0145b0>
 401658c:	d9003717 	ldw	r4,220(sp)
 4016590:	d8801f17 	ldw	r2,124(sp)
 4016594:	d9403417 	ldw	r5,208(sp)
 4016598:	20c7883a 	add	r3,r4,r3
 401659c:	10800044 	addi	r2,r2,1
 40165a0:	41000115 	stw	r4,4(r8)
 40165a4:	41400015 	stw	r5,0(r8)
 40165a8:	d8c02015 	stw	r3,128(sp)
 40165ac:	d8801f15 	stw	r2,124(sp)
 40165b0:	010001c4 	movi	r4,7
 40165b4:	20812116 	blt	r4,r2,4016a3c <___vfprintf_internal_r+0x1e60>
 40165b8:	42000204 	addi	r8,r8,8
 40165bc:	0463c83a 	sub	r17,zero,r17
 40165c0:	0440730e 	bge	zero,r17,4016790 <___vfprintf_internal_r+0x1bb4>
 40165c4:	05800404 	movi	r22,16
 40165c8:	b440860e 	bge	r22,r17,40167e4 <___vfprintf_internal_r+0x1c08>
 40165cc:	01410234 	movhi	r5,1032
 40165d0:	2947a884 	addi	r5,r5,7842
 40165d4:	d9402b15 	stw	r5,172(sp)
 40165d8:	070001c4 	movi	fp,7
 40165dc:	dcc02c17 	ldw	r19,176(sp)
 40165e0:	00000306 	br	40165f0 <___vfprintf_internal_r+0x1a14>
 40165e4:	42000204 	addi	r8,r8,8
 40165e8:	8c7ffc04 	addi	r17,r17,-16
 40165ec:	b440800e 	bge	r22,r17,40167f0 <___vfprintf_internal_r+0x1c14>
 40165f0:	18c00404 	addi	r3,r3,16
 40165f4:	10800044 	addi	r2,r2,1
 40165f8:	45000015 	stw	r20,0(r8)
 40165fc:	45800115 	stw	r22,4(r8)
 4016600:	d8c02015 	stw	r3,128(sp)
 4016604:	d8801f15 	stw	r2,124(sp)
 4016608:	e0bff60e 	bge	fp,r2,40165e4 <__reset+0xfb0155e4>
 401660c:	d9801e04 	addi	r6,sp,120
 4016610:	b80b883a 	mov	r5,r23
 4016614:	9809883a 	mov	r4,r19
 4016618:	401caa00 	call	401caa0 <__sprint_r>
 401661c:	103a711e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016620:	d8c02017 	ldw	r3,128(sp)
 4016624:	d8801f17 	ldw	r2,124(sp)
 4016628:	da000404 	addi	r8,sp,16
 401662c:	003fee06 	br	40165e8 <__reset+0xfb0155e8>
 4016630:	00bfffc4 	movi	r2,-1
 4016634:	003a6f06 	br	4014ff4 <__reset+0xfb013ff4>
 4016638:	008011c4 	movi	r2,71
 401663c:	1440b816 	blt	r2,r17,4016920 <___vfprintf_internal_r+0x1d44>
 4016640:	04010234 	movhi	r16,1032
 4016644:	84079204 	addi	r16,r16,7752
 4016648:	00c000c4 	movi	r3,3
 401664c:	00bfdfc4 	movi	r2,-129
 4016650:	d8c02a15 	stw	r3,168(sp)
 4016654:	90a4703a 	and	r18,r18,r2
 4016658:	df002783 	ldbu	fp,158(sp)
 401665c:	d8c02e15 	stw	r3,184(sp)
 4016660:	d8002915 	stw	zero,164(sp)
 4016664:	d8003215 	stw	zero,200(sp)
 4016668:	003b2906 	br	4015310 <__reset+0xfb014310>
 401666c:	d9002d17 	ldw	r4,180(sp)
 4016670:	24c00017 	ldw	r19,0(r4)
 4016674:	21000104 	addi	r4,r4,4
 4016678:	d9002d15 	stw	r4,180(sp)
 401667c:	982dd7fa 	srai	r22,r19,31
 4016680:	b005883a 	mov	r2,r22
 4016684:	003a9f06 	br	4015104 <__reset+0xfb014104>
 4016688:	d9402d17 	ldw	r5,180(sp)
 401668c:	d8c02f17 	ldw	r3,188(sp)
 4016690:	28800017 	ldw	r2,0(r5)
 4016694:	29400104 	addi	r5,r5,4
 4016698:	d9402d15 	stw	r5,180(sp)
 401669c:	10c00015 	stw	r3,0(r2)
 40166a0:	00398606 	br	4014cbc <__reset+0xfb013cbc>
 40166a4:	d9402d17 	ldw	r5,180(sp)
 40166a8:	002d883a 	mov	r22,zero
 40166ac:	2cc00017 	ldw	r19,0(r5)
 40166b0:	29400104 	addi	r5,r5,4
 40166b4:	d9402d15 	stw	r5,180(sp)
 40166b8:	003c2306 	br	4015748 <__reset+0xfb014748>
 40166bc:	d8c02d17 	ldw	r3,180(sp)
 40166c0:	d9002917 	ldw	r4,164(sp)
 40166c4:	002d883a 	mov	r22,zero
 40166c8:	18800104 	addi	r2,r3,4
 40166cc:	1cc0000b 	ldhu	r19,0(r3)
 40166d0:	203dc10e 	bge	r4,zero,4015dd8 <__reset+0xfb014dd8>
 40166d4:	003f7506 	br	40164ac <__reset+0xfb0154ac>
 40166d8:	04010234 	movhi	r16,1032
 40166dc:	84079004 	addi	r16,r16,7744
 40166e0:	003acc06 	br	4015214 <__reset+0xfb014214>
 40166e4:	d9002c17 	ldw	r4,176(sp)
 40166e8:	d9801e04 	addi	r6,sp,120
 40166ec:	b80b883a 	mov	r5,r23
 40166f0:	401caa00 	call	401caa0 <__sprint_r>
 40166f4:	103a3b1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40166f8:	dc402617 	ldw	r17,152(sp)
 40166fc:	d8c02017 	ldw	r3,128(sp)
 4016700:	da000404 	addi	r8,sp,16
 4016704:	003f9c06 	br	4016578 <__reset+0xfb015578>
 4016708:	ac400043 	ldbu	r17,1(r21)
 401670c:	94800814 	ori	r18,r18,32
 4016710:	ad400044 	addi	r21,r21,1
 4016714:	8c403fcc 	andi	r17,r17,255
 4016718:	8c40201c 	xori	r17,r17,128
 401671c:	8c7fe004 	addi	r17,r17,-128
 4016720:	00398f06 	br	4014d60 <__reset+0xfb013d60>
 4016724:	d8c02d15 	stw	r3,180(sp)
 4016728:	0039883a 	mov	fp,zero
 401672c:	003e3506 	br	4016004 <__reset+0xfb015004>
 4016730:	d9002c17 	ldw	r4,176(sp)
 4016734:	d9801e04 	addi	r6,sp,120
 4016738:	b80b883a 	mov	r5,r23
 401673c:	401caa00 	call	401caa0 <__sprint_r>
 4016740:	103a281e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016744:	d8c02017 	ldw	r3,128(sp)
 4016748:	da000404 	addi	r8,sp,16
 401674c:	003cd006 	br	4015a90 <__reset+0xfb014a90>
 4016750:	8009883a 	mov	r4,r16
 4016754:	da003d15 	stw	r8,244(sp)
 4016758:	401296c0 	call	401296c <strlen>
 401675c:	d8802e15 	stw	r2,184(sp)
 4016760:	da003d17 	ldw	r8,244(sp)
 4016764:	103c340e 	bge	r2,zero,4015838 <__reset+0xfb014838>
 4016768:	0005883a 	mov	r2,zero
 401676c:	003c3206 	br	4015838 <__reset+0xfb014838>
 4016770:	d9002c17 	ldw	r4,176(sp)
 4016774:	d9801e04 	addi	r6,sp,120
 4016778:	b80b883a 	mov	r5,r23
 401677c:	401caa00 	call	401caa0 <__sprint_r>
 4016780:	103a181e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016784:	d8c02017 	ldw	r3,128(sp)
 4016788:	d8801f17 	ldw	r2,124(sp)
 401678c:	da000404 	addi	r8,sp,16
 4016790:	d9403317 	ldw	r5,204(sp)
 4016794:	10800044 	addi	r2,r2,1
 4016798:	44000015 	stw	r16,0(r8)
 401679c:	28c7883a 	add	r3,r5,r3
 40167a0:	003b7d06 	br	4015598 <__reset+0xfb014598>
 40167a4:	01010234 	movhi	r4,1032
 40167a8:	2107ac84 	addi	r4,r4,7858
 40167ac:	d9003515 	stw	r4,212(sp)
 40167b0:	003b1406 	br	4015404 <__reset+0xfb014404>
 40167b4:	013fffc4 	movi	r4,-1
 40167b8:	003a3506 	br	4015090 <__reset+0xfb014090>
 40167bc:	0023883a 	mov	r17,zero
 40167c0:	003d9d06 	br	4015e38 <__reset+0xfb014e38>
 40167c4:	d9002c17 	ldw	r4,176(sp)
 40167c8:	d9801e04 	addi	r6,sp,120
 40167cc:	b80b883a 	mov	r5,r23
 40167d0:	401caa00 	call	401caa0 <__sprint_r>
 40167d4:	103a031e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40167d8:	d8c02017 	ldw	r3,128(sp)
 40167dc:	da000404 	addi	r8,sp,16
 40167e0:	003d9406 	br	4015e34 <__reset+0xfb014e34>
 40167e4:	01010234 	movhi	r4,1032
 40167e8:	2107a884 	addi	r4,r4,7842
 40167ec:	d9002b15 	stw	r4,172(sp)
 40167f0:	d9002b17 	ldw	r4,172(sp)
 40167f4:	1c47883a 	add	r3,r3,r17
 40167f8:	10800044 	addi	r2,r2,1
 40167fc:	41000015 	stw	r4,0(r8)
 4016800:	44400115 	stw	r17,4(r8)
 4016804:	d8c02015 	stw	r3,128(sp)
 4016808:	d8801f15 	stw	r2,124(sp)
 401680c:	010001c4 	movi	r4,7
 4016810:	20bfd716 	blt	r4,r2,4016770 <__reset+0xfb015770>
 4016814:	42000204 	addi	r8,r8,8
 4016818:	003fdd06 	br	4016790 <__reset+0xfb015790>
 401681c:	d9002c17 	ldw	r4,176(sp)
 4016820:	d9801e04 	addi	r6,sp,120
 4016824:	b80b883a 	mov	r5,r23
 4016828:	401caa00 	call	401caa0 <__sprint_r>
 401682c:	1039ed1e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016830:	d8802617 	ldw	r2,152(sp)
 4016834:	d8c02017 	ldw	r3,128(sp)
 4016838:	da000404 	addi	r8,sp,16
 401683c:	003e1006 	br	4016080 <__reset+0xfb015080>
 4016840:	00800044 	movi	r2,1
 4016844:	10803fcc 	andi	r2,r2,255
 4016848:	00c00044 	movi	r3,1
 401684c:	10fa3526 	beq	r2,r3,4015124 <__reset+0xfb014124>
 4016850:	00c00084 	movi	r3,2
 4016854:	10fbcb26 	beq	r2,r3,4015784 <__reset+0xfb014784>
 4016858:	003a8f06 	br	4015298 <__reset+0xfb014298>
 401685c:	01010234 	movhi	r4,1032
 4016860:	2107ac84 	addi	r4,r4,7858
 4016864:	d9003515 	stw	r4,212(sp)
 4016868:	003b7606 	br	4015644 <__reset+0xfb014644>
 401686c:	d8802917 	ldw	r2,164(sp)
 4016870:	00c00184 	movi	r3,6
 4016874:	1880012e 	bgeu	r3,r2,401687c <___vfprintf_internal_r+0x1ca0>
 4016878:	1805883a 	mov	r2,r3
 401687c:	d8802e15 	stw	r2,184(sp)
 4016880:	1000ef16 	blt	r2,zero,4016c40 <___vfprintf_internal_r+0x2064>
 4016884:	04010234 	movhi	r16,1032
 4016888:	d8802a15 	stw	r2,168(sp)
 401688c:	dcc02d15 	stw	r19,180(sp)
 4016890:	d8002915 	stw	zero,164(sp)
 4016894:	d8003215 	stw	zero,200(sp)
 4016898:	84079e04 	addi	r16,r16,7800
 401689c:	0039883a 	mov	fp,zero
 40168a0:	003aa206 	br	401532c <__reset+0xfb01432c>
 40168a4:	0021883a 	mov	r16,zero
 40168a8:	003e0706 	br	40160c8 <__reset+0xfb0150c8>
 40168ac:	d9002c17 	ldw	r4,176(sp)
 40168b0:	d9801e04 	addi	r6,sp,120
 40168b4:	b80b883a 	mov	r5,r23
 40168b8:	401caa00 	call	401caa0 <__sprint_r>
 40168bc:	1039c91e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 40168c0:	d8802617 	ldw	r2,152(sp)
 40168c4:	d9403317 	ldw	r5,204(sp)
 40168c8:	d8c02017 	ldw	r3,128(sp)
 40168cc:	da000404 	addi	r8,sp,16
 40168d0:	2885c83a 	sub	r2,r5,r2
 40168d4:	003dfb06 	br	40160c4 <__reset+0xfb0150c4>
 40168d8:	9080004c 	andi	r2,r18,1
 40168dc:	103e8f1e 	bne	r2,zero,401631c <__reset+0xfb01531c>
 40168e0:	d8802117 	ldw	r2,132(sp)
 40168e4:	003e9e06 	br	4016360 <__reset+0xfb015360>
 40168e8:	1025883a 	mov	r18,r2
 40168ec:	0039883a 	mov	fp,zero
 40168f0:	00800084 	movi	r2,2
 40168f4:	003fd306 	br	4016844 <__reset+0xfb015844>
 40168f8:	07000b44 	movi	fp,45
 40168fc:	df002785 	stb	fp,158(sp)
 4016900:	003a4006 	br	4015204 <__reset+0xfb014204>
 4016904:	00c00b44 	movi	r3,45
 4016908:	d8c02785 	stb	r3,158(sp)
 401690c:	d8802a15 	stw	r2,168(sp)
 4016910:	dc802b17 	ldw	r18,172(sp)
 4016914:	d8002915 	stw	zero,164(sp)
 4016918:	07000b44 	movi	fp,45
 401691c:	003a8006 	br	4015320 <__reset+0xfb014320>
 4016920:	04010234 	movhi	r16,1032
 4016924:	84079304 	addi	r16,r16,7756
 4016928:	003f4706 	br	4016648 <__reset+0xfb015648>
 401692c:	d8c02d17 	ldw	r3,180(sp)
 4016930:	d9002f17 	ldw	r4,188(sp)
 4016934:	18800017 	ldw	r2,0(r3)
 4016938:	18c00104 	addi	r3,r3,4
 401693c:	d8c02d15 	stw	r3,180(sp)
 4016940:	11000015 	stw	r4,0(r2)
 4016944:	0038dd06 	br	4014cbc <__reset+0xfb013cbc>
 4016948:	dd802617 	ldw	r22,152(sp)
 401694c:	00bfff44 	movi	r2,-3
 4016950:	b0801c16 	blt	r22,r2,40169c4 <___vfprintf_internal_r+0x1de8>
 4016954:	d9402917 	ldw	r5,164(sp)
 4016958:	2d801a16 	blt	r5,r22,40169c4 <___vfprintf_internal_r+0x1de8>
 401695c:	dd803215 	stw	r22,200(sp)
 4016960:	003e8906 	br	4016388 <__reset+0xfb015388>
 4016964:	01010234 	movhi	r4,1032
 4016968:	2107a884 	addi	r4,r4,7842
 401696c:	d9002b15 	stw	r4,172(sp)
 4016970:	003c9106 	br	4015bb8 <__reset+0xfb014bb8>
 4016974:	e005883a 	mov	r2,fp
 4016978:	003e7906 	br	4016360 <__reset+0xfb015360>
 401697c:	d9402917 	ldw	r5,164(sp)
 4016980:	df002783 	ldbu	fp,158(sp)
 4016984:	dcc02d15 	stw	r19,180(sp)
 4016988:	d9402a15 	stw	r5,168(sp)
 401698c:	d9402e15 	stw	r5,184(sp)
 4016990:	d8002915 	stw	zero,164(sp)
 4016994:	d8003215 	stw	zero,200(sp)
 4016998:	003a5d06 	br	4015310 <__reset+0xfb014310>
 401699c:	9080004c 	andi	r2,r18,1
 40169a0:	0039883a 	mov	fp,zero
 40169a4:	10000426 	beq	r2,zero,40169b8 <___vfprintf_internal_r+0x1ddc>
 40169a8:	00800c04 	movi	r2,48
 40169ac:	dc001dc4 	addi	r16,sp,119
 40169b0:	d8801dc5 	stb	r2,119(sp)
 40169b4:	003b8006 	br	40157b8 <__reset+0xfb0147b8>
 40169b8:	d8002e15 	stw	zero,184(sp)
 40169bc:	dc001e04 	addi	r16,sp,120
 40169c0:	003a4d06 	br	40152f8 <__reset+0xfb0142f8>
 40169c4:	8c7fff84 	addi	r17,r17,-2
 40169c8:	b5bfffc4 	addi	r22,r22,-1
 40169cc:	dd802615 	stw	r22,152(sp)
 40169d0:	dc4022c5 	stb	r17,139(sp)
 40169d4:	b000bf16 	blt	r22,zero,4016cd4 <___vfprintf_internal_r+0x20f8>
 40169d8:	00800ac4 	movi	r2,43
 40169dc:	d8802305 	stb	r2,140(sp)
 40169e0:	00800244 	movi	r2,9
 40169e4:	15807016 	blt	r2,r22,4016ba8 <___vfprintf_internal_r+0x1fcc>
 40169e8:	00800c04 	movi	r2,48
 40169ec:	b5800c04 	addi	r22,r22,48
 40169f0:	d8802345 	stb	r2,141(sp)
 40169f4:	dd802385 	stb	r22,142(sp)
 40169f8:	d88023c4 	addi	r2,sp,143
 40169fc:	df0022c4 	addi	fp,sp,139
 4016a00:	d8c03317 	ldw	r3,204(sp)
 4016a04:	1739c83a 	sub	fp,r2,fp
 4016a08:	d9003317 	ldw	r4,204(sp)
 4016a0c:	e0c7883a 	add	r3,fp,r3
 4016a10:	df003a15 	stw	fp,232(sp)
 4016a14:	d8c02e15 	stw	r3,184(sp)
 4016a18:	00800044 	movi	r2,1
 4016a1c:	1100b30e 	bge	r2,r4,4016cec <___vfprintf_internal_r+0x2110>
 4016a20:	d8c02e17 	ldw	r3,184(sp)
 4016a24:	18c00044 	addi	r3,r3,1
 4016a28:	d8c02e15 	stw	r3,184(sp)
 4016a2c:	1805883a 	mov	r2,r3
 4016a30:	1800ac16 	blt	r3,zero,4016ce4 <___vfprintf_internal_r+0x2108>
 4016a34:	d8003215 	stw	zero,200(sp)
 4016a38:	003e5d06 	br	40163b0 <__reset+0xfb0153b0>
 4016a3c:	d9002c17 	ldw	r4,176(sp)
 4016a40:	d9801e04 	addi	r6,sp,120
 4016a44:	b80b883a 	mov	r5,r23
 4016a48:	401caa00 	call	401caa0 <__sprint_r>
 4016a4c:	1039651e 	bne	r2,zero,4014fe4 <__reset+0xfb013fe4>
 4016a50:	dc402617 	ldw	r17,152(sp)
 4016a54:	d8c02017 	ldw	r3,128(sp)
 4016a58:	d8801f17 	ldw	r2,124(sp)
 4016a5c:	da000404 	addi	r8,sp,16
 4016a60:	003ed606 	br	40165bc <__reset+0xfb0155bc>
 4016a64:	582b883a 	mov	r21,r11
 4016a68:	d8002915 	stw	zero,164(sp)
 4016a6c:	0038bd06 	br	4014d64 <__reset+0xfb013d64>
 4016a70:	d8802917 	ldw	r2,164(sp)
 4016a74:	103e071e 	bne	r2,zero,4016294 <__reset+0xfb015294>
 4016a78:	dc002915 	stw	r16,164(sp)
 4016a7c:	003e0506 	br	4016294 <__reset+0xfb015294>
 4016a80:	d9002917 	ldw	r4,164(sp)
 4016a84:	20c00044 	addi	r3,r4,1
 4016a88:	003e0f06 	br	40162c8 <__reset+0xfb0152c8>
 4016a8c:	01400184 	movi	r5,6
 4016a90:	d9402915 	stw	r5,164(sp)
 4016a94:	003dff06 	br	4016294 <__reset+0xfb015294>
 4016a98:	d8802104 	addi	r2,sp,132
 4016a9c:	d8800315 	stw	r2,12(sp)
 4016aa0:	d8802504 	addi	r2,sp,148
 4016aa4:	d8800215 	stw	r2,8(sp)
 4016aa8:	d8802604 	addi	r2,sp,152
 4016aac:	d8800115 	stw	r2,4(sp)
 4016ab0:	d8802917 	ldw	r2,164(sp)
 4016ab4:	d9403617 	ldw	r5,216(sp)
 4016ab8:	d9002c17 	ldw	r4,176(sp)
 4016abc:	d8800015 	stw	r2,0(sp)
 4016ac0:	01c000c4 	movi	r7,3
 4016ac4:	980d883a 	mov	r6,r19
 4016ac8:	da003d15 	stw	r8,244(sp)
 4016acc:	40172000 	call	4017200 <_dtoa_r>
 4016ad0:	d8c02917 	ldw	r3,164(sp)
 4016ad4:	da003d17 	ldw	r8,244(sp)
 4016ad8:	1021883a 	mov	r16,r2
 4016adc:	10f9883a 	add	fp,r2,r3
 4016ae0:	81000007 	ldb	r4,0(r16)
 4016ae4:	00800c04 	movi	r2,48
 4016ae8:	20805e26 	beq	r4,r2,4016c64 <___vfprintf_internal_r+0x2088>
 4016aec:	d8c02617 	ldw	r3,152(sp)
 4016af0:	e0f9883a 	add	fp,fp,r3
 4016af4:	003e0a06 	br	4016320 <__reset+0xfb015320>
 4016af8:	00c00b44 	movi	r3,45
 4016afc:	24e0003c 	xorhi	r19,r4,32768
 4016b00:	d8c02a05 	stb	r3,168(sp)
 4016b04:	003de906 	br	40162ac <__reset+0xfb0152ac>
 4016b08:	d8c03217 	ldw	r3,200(sp)
 4016b0c:	00c07a0e 	bge	zero,r3,4016cf8 <___vfprintf_internal_r+0x211c>
 4016b10:	00800044 	movi	r2,1
 4016b14:	d9003317 	ldw	r4,204(sp)
 4016b18:	1105883a 	add	r2,r2,r4
 4016b1c:	d8802e15 	stw	r2,184(sp)
 4016b20:	10004e16 	blt	r2,zero,4016c5c <___vfprintf_internal_r+0x2080>
 4016b24:	044019c4 	movi	r17,103
 4016b28:	003e2106 	br	40163b0 <__reset+0xfb0153b0>
 4016b2c:	d9002917 	ldw	r4,164(sp)
 4016b30:	d8802104 	addi	r2,sp,132
 4016b34:	d8800315 	stw	r2,12(sp)
 4016b38:	d9000015 	stw	r4,0(sp)
 4016b3c:	d8802504 	addi	r2,sp,148
 4016b40:	d9403617 	ldw	r5,216(sp)
 4016b44:	d9002c17 	ldw	r4,176(sp)
 4016b48:	d8800215 	stw	r2,8(sp)
 4016b4c:	d8802604 	addi	r2,sp,152
 4016b50:	d8800115 	stw	r2,4(sp)
 4016b54:	01c000c4 	movi	r7,3
 4016b58:	980d883a 	mov	r6,r19
 4016b5c:	da003d15 	stw	r8,244(sp)
 4016b60:	40172000 	call	4017200 <_dtoa_r>
 4016b64:	d8c02917 	ldw	r3,164(sp)
 4016b68:	da003d17 	ldw	r8,244(sp)
 4016b6c:	1021883a 	mov	r16,r2
 4016b70:	00801184 	movi	r2,70
 4016b74:	80f9883a 	add	fp,r16,r3
 4016b78:	88bfd926 	beq	r17,r2,4016ae0 <__reset+0xfb015ae0>
 4016b7c:	003de806 	br	4016320 <__reset+0xfb015320>
 4016b80:	d9002917 	ldw	r4,164(sp)
 4016b84:	00c04d0e 	bge	zero,r3,4016cbc <___vfprintf_internal_r+0x20e0>
 4016b88:	2000441e 	bne	r4,zero,4016c9c <___vfprintf_internal_r+0x20c0>
 4016b8c:	9480004c 	andi	r18,r18,1
 4016b90:	9000421e 	bne	r18,zero,4016c9c <___vfprintf_internal_r+0x20c0>
 4016b94:	1805883a 	mov	r2,r3
 4016b98:	18007016 	blt	r3,zero,4016d5c <___vfprintf_internal_r+0x2180>
 4016b9c:	d8c03217 	ldw	r3,200(sp)
 4016ba0:	d8c02e15 	stw	r3,184(sp)
 4016ba4:	003e0206 	br	40163b0 <__reset+0xfb0153b0>
 4016ba8:	df0022c4 	addi	fp,sp,139
 4016bac:	dc002915 	stw	r16,164(sp)
 4016bb0:	4027883a 	mov	r19,r8
 4016bb4:	e021883a 	mov	r16,fp
 4016bb8:	b009883a 	mov	r4,r22
 4016bbc:	01400284 	movi	r5,10
 4016bc0:	400dc380 	call	400dc38 <__modsi3>
 4016bc4:	10800c04 	addi	r2,r2,48
 4016bc8:	843fffc4 	addi	r16,r16,-1
 4016bcc:	b009883a 	mov	r4,r22
 4016bd0:	01400284 	movi	r5,10
 4016bd4:	80800005 	stb	r2,0(r16)
 4016bd8:	400dbb40 	call	400dbb4 <__divsi3>
 4016bdc:	102d883a 	mov	r22,r2
 4016be0:	00800244 	movi	r2,9
 4016be4:	15bff416 	blt	r2,r22,4016bb8 <__reset+0xfb015bb8>
 4016be8:	9811883a 	mov	r8,r19
 4016bec:	b0800c04 	addi	r2,r22,48
 4016bf0:	8027883a 	mov	r19,r16
 4016bf4:	997fffc4 	addi	r5,r19,-1
 4016bf8:	98bfffc5 	stb	r2,-1(r19)
 4016bfc:	dc002917 	ldw	r16,164(sp)
 4016c00:	2f006a2e 	bgeu	r5,fp,4016dac <___vfprintf_internal_r+0x21d0>
 4016c04:	d9c02384 	addi	r7,sp,142
 4016c08:	3ccfc83a 	sub	r7,r7,r19
 4016c0c:	d9002344 	addi	r4,sp,141
 4016c10:	e1cf883a 	add	r7,fp,r7
 4016c14:	00000106 	br	4016c1c <___vfprintf_internal_r+0x2040>
 4016c18:	28800003 	ldbu	r2,0(r5)
 4016c1c:	20800005 	stb	r2,0(r4)
 4016c20:	21000044 	addi	r4,r4,1
 4016c24:	29400044 	addi	r5,r5,1
 4016c28:	393ffb1e 	bne	r7,r4,4016c18 <__reset+0xfb015c18>
 4016c2c:	d8802304 	addi	r2,sp,140
 4016c30:	14c5c83a 	sub	r2,r2,r19
 4016c34:	d8c02344 	addi	r3,sp,141
 4016c38:	1885883a 	add	r2,r3,r2
 4016c3c:	003f7006 	br	4016a00 <__reset+0xfb015a00>
 4016c40:	0005883a 	mov	r2,zero
 4016c44:	003f0f06 	br	4016884 <__reset+0xfb015884>
 4016c48:	d8c03217 	ldw	r3,200(sp)
 4016c4c:	18c00044 	addi	r3,r3,1
 4016c50:	d8c02e15 	stw	r3,184(sp)
 4016c54:	1805883a 	mov	r2,r3
 4016c58:	183fb20e 	bge	r3,zero,4016b24 <__reset+0xfb015b24>
 4016c5c:	0005883a 	mov	r2,zero
 4016c60:	003fb006 	br	4016b24 <__reset+0xfb015b24>
 4016c64:	d9003617 	ldw	r4,216(sp)
 4016c68:	000d883a 	mov	r6,zero
 4016c6c:	000f883a 	mov	r7,zero
 4016c70:	980b883a 	mov	r5,r19
 4016c74:	d8c03c15 	stw	r3,240(sp)
 4016c78:	da003d15 	stw	r8,244(sp)
 4016c7c:	40104ec0 	call	40104ec <__eqdf2>
 4016c80:	d8c03c17 	ldw	r3,240(sp)
 4016c84:	da003d17 	ldw	r8,244(sp)
 4016c88:	103f9826 	beq	r2,zero,4016aec <__reset+0xfb015aec>
 4016c8c:	00800044 	movi	r2,1
 4016c90:	10c7c83a 	sub	r3,r2,r3
 4016c94:	d8c02615 	stw	r3,152(sp)
 4016c98:	003f9506 	br	4016af0 <__reset+0xfb015af0>
 4016c9c:	d9002917 	ldw	r4,164(sp)
 4016ca0:	d8c03217 	ldw	r3,200(sp)
 4016ca4:	20800044 	addi	r2,r4,1
 4016ca8:	1885883a 	add	r2,r3,r2
 4016cac:	d8802e15 	stw	r2,184(sp)
 4016cb0:	103dbf0e 	bge	r2,zero,40163b0 <__reset+0xfb0153b0>
 4016cb4:	0005883a 	mov	r2,zero
 4016cb8:	003dbd06 	br	40163b0 <__reset+0xfb0153b0>
 4016cbc:	2000211e 	bne	r4,zero,4016d44 <___vfprintf_internal_r+0x2168>
 4016cc0:	9480004c 	andi	r18,r18,1
 4016cc4:	90001f1e 	bne	r18,zero,4016d44 <___vfprintf_internal_r+0x2168>
 4016cc8:	00800044 	movi	r2,1
 4016ccc:	d8802e15 	stw	r2,184(sp)
 4016cd0:	003db706 	br	40163b0 <__reset+0xfb0153b0>
 4016cd4:	00800b44 	movi	r2,45
 4016cd8:	05adc83a 	sub	r22,zero,r22
 4016cdc:	d8802305 	stb	r2,140(sp)
 4016ce0:	003f3f06 	br	40169e0 <__reset+0xfb0159e0>
 4016ce4:	0005883a 	mov	r2,zero
 4016ce8:	003f5206 	br	4016a34 <__reset+0xfb015a34>
 4016cec:	90a4703a 	and	r18,r18,r2
 4016cf0:	903f4e26 	beq	r18,zero,4016a2c <__reset+0xfb015a2c>
 4016cf4:	003f4a06 	br	4016a20 <__reset+0xfb015a20>
 4016cf8:	00800084 	movi	r2,2
 4016cfc:	10c5c83a 	sub	r2,r2,r3
 4016d00:	003f8406 	br	4016b14 <__reset+0xfb015b14>
 4016d04:	d8802d17 	ldw	r2,180(sp)
 4016d08:	d9002d17 	ldw	r4,180(sp)
 4016d0c:	ac400043 	ldbu	r17,1(r21)
 4016d10:	10800017 	ldw	r2,0(r2)
 4016d14:	582b883a 	mov	r21,r11
 4016d18:	d8802915 	stw	r2,164(sp)
 4016d1c:	20800104 	addi	r2,r4,4
 4016d20:	d9002917 	ldw	r4,164(sp)
 4016d24:	d8802d15 	stw	r2,180(sp)
 4016d28:	203e7a0e 	bge	r4,zero,4016714 <__reset+0xfb015714>
 4016d2c:	8c403fcc 	andi	r17,r17,255
 4016d30:	00bfffc4 	movi	r2,-1
 4016d34:	8c40201c 	xori	r17,r17,128
 4016d38:	d8802915 	stw	r2,164(sp)
 4016d3c:	8c7fe004 	addi	r17,r17,-128
 4016d40:	00380706 	br	4014d60 <__reset+0xfb013d60>
 4016d44:	d8c02917 	ldw	r3,164(sp)
 4016d48:	18c00084 	addi	r3,r3,2
 4016d4c:	d8c02e15 	stw	r3,184(sp)
 4016d50:	1805883a 	mov	r2,r3
 4016d54:	183d960e 	bge	r3,zero,40163b0 <__reset+0xfb0153b0>
 4016d58:	003fd606 	br	4016cb4 <__reset+0xfb015cb4>
 4016d5c:	0005883a 	mov	r2,zero
 4016d60:	003f8e06 	br	4016b9c <__reset+0xfb015b9c>
 4016d64:	9080004c 	andi	r2,r18,1
 4016d68:	103f811e 	bne	r2,zero,4016b70 <__reset+0xfb015b70>
 4016d6c:	d8802117 	ldw	r2,132(sp)
 4016d70:	1405c83a 	sub	r2,r2,r16
 4016d74:	d8803315 	stw	r2,204(sp)
 4016d78:	b47ef326 	beq	r22,r17,4016948 <__reset+0xfb015948>
 4016d7c:	dd802617 	ldw	r22,152(sp)
 4016d80:	003f1106 	br	40169c8 <__reset+0xfb0159c8>
 4016d84:	d9c02785 	stb	r7,158(sp)
 4016d88:	00390406 	br	401519c <__reset+0xfb01419c>
 4016d8c:	d9c02785 	stb	r7,158(sp)
 4016d90:	0038d306 	br	40150e0 <__reset+0xfb0140e0>
 4016d94:	d9c02785 	stb	r7,158(sp)
 4016d98:	003a6106 	br	4015720 <__reset+0xfb014720>
 4016d9c:	d9c02785 	stb	r7,158(sp)
 4016da0:	003af806 	br	4015984 <__reset+0xfb014984>
 4016da4:	0005883a 	mov	r2,zero
 4016da8:	003d7e06 	br	40163a4 <__reset+0xfb0153a4>
 4016dac:	d8802344 	addi	r2,sp,141
 4016db0:	003f1306 	br	4016a00 <__reset+0xfb015a00>
 4016db4:	d9c02785 	stb	r7,158(sp)
 4016db8:	00392306 	br	4015248 <__reset+0xfb014248>
 4016dbc:	d9c02785 	stb	r7,158(sp)
 4016dc0:	003aa906 	br	4015868 <__reset+0xfb014868>
 4016dc4:	d9c02785 	stb	r7,158(sp)
 4016dc8:	003a3d06 	br	40156c0 <__reset+0xfb0146c0>
 4016dcc:	d9c02785 	stb	r7,158(sp)
 4016dd0:	003aca06 	br	40158fc <__reset+0xfb0148fc>

04016dd4 <__vfprintf_internal>:
 4016dd4:	00810474 	movhi	r2,1041
 4016dd8:	109a5804 	addi	r2,r2,26976
 4016ddc:	300f883a 	mov	r7,r6
 4016de0:	280d883a 	mov	r6,r5
 4016de4:	200b883a 	mov	r5,r4
 4016de8:	11000017 	ldw	r4,0(r2)
 4016dec:	4014bdc1 	jmpi	4014bdc <___vfprintf_internal_r>

04016df0 <__sbprintf>:
 4016df0:	2880030b 	ldhu	r2,12(r5)
 4016df4:	2ac01917 	ldw	r11,100(r5)
 4016df8:	2a80038b 	ldhu	r10,14(r5)
 4016dfc:	2a400717 	ldw	r9,28(r5)
 4016e00:	2a000917 	ldw	r8,36(r5)
 4016e04:	defee204 	addi	sp,sp,-1144
 4016e08:	00c10004 	movi	r3,1024
 4016e0c:	dc011a15 	stw	r16,1128(sp)
 4016e10:	10bfff4c 	andi	r2,r2,65533
 4016e14:	2821883a 	mov	r16,r5
 4016e18:	d8cb883a 	add	r5,sp,r3
 4016e1c:	dc811c15 	stw	r18,1136(sp)
 4016e20:	dc411b15 	stw	r17,1132(sp)
 4016e24:	dfc11d15 	stw	ra,1140(sp)
 4016e28:	2025883a 	mov	r18,r4
 4016e2c:	d881030d 	sth	r2,1036(sp)
 4016e30:	dac11915 	stw	r11,1124(sp)
 4016e34:	da81038d 	sth	r10,1038(sp)
 4016e38:	da410715 	stw	r9,1052(sp)
 4016e3c:	da010915 	stw	r8,1060(sp)
 4016e40:	dec10015 	stw	sp,1024(sp)
 4016e44:	dec10415 	stw	sp,1040(sp)
 4016e48:	d8c10215 	stw	r3,1032(sp)
 4016e4c:	d8c10515 	stw	r3,1044(sp)
 4016e50:	d8010615 	stw	zero,1048(sp)
 4016e54:	4014bdc0 	call	4014bdc <___vfprintf_internal_r>
 4016e58:	1023883a 	mov	r17,r2
 4016e5c:	10000416 	blt	r2,zero,4016e70 <__sbprintf+0x80>
 4016e60:	d9410004 	addi	r5,sp,1024
 4016e64:	9009883a 	mov	r4,r18
 4016e68:	4018aa40 	call	4018aa4 <_fflush_r>
 4016e6c:	10000d1e 	bne	r2,zero,4016ea4 <__sbprintf+0xb4>
 4016e70:	d881030b 	ldhu	r2,1036(sp)
 4016e74:	1080100c 	andi	r2,r2,64
 4016e78:	10000326 	beq	r2,zero,4016e88 <__sbprintf+0x98>
 4016e7c:	8080030b 	ldhu	r2,12(r16)
 4016e80:	10801014 	ori	r2,r2,64
 4016e84:	8080030d 	sth	r2,12(r16)
 4016e88:	8805883a 	mov	r2,r17
 4016e8c:	dfc11d17 	ldw	ra,1140(sp)
 4016e90:	dc811c17 	ldw	r18,1136(sp)
 4016e94:	dc411b17 	ldw	r17,1132(sp)
 4016e98:	dc011a17 	ldw	r16,1128(sp)
 4016e9c:	dec11e04 	addi	sp,sp,1144
 4016ea0:	f800283a 	ret
 4016ea4:	047fffc4 	movi	r17,-1
 4016ea8:	003ff106 	br	4016e70 <__reset+0xfb015e70>

04016eac <__swsetup_r>:
 4016eac:	00810474 	movhi	r2,1041
 4016eb0:	defffd04 	addi	sp,sp,-12
 4016eb4:	109a5804 	addi	r2,r2,26976
 4016eb8:	dc400115 	stw	r17,4(sp)
 4016ebc:	2023883a 	mov	r17,r4
 4016ec0:	11000017 	ldw	r4,0(r2)
 4016ec4:	dc000015 	stw	r16,0(sp)
 4016ec8:	dfc00215 	stw	ra,8(sp)
 4016ecc:	2821883a 	mov	r16,r5
 4016ed0:	20000226 	beq	r4,zero,4016edc <__swsetup_r+0x30>
 4016ed4:	20800e17 	ldw	r2,56(r4)
 4016ed8:	10003126 	beq	r2,zero,4016fa0 <__swsetup_r+0xf4>
 4016edc:	8080030b 	ldhu	r2,12(r16)
 4016ee0:	10c0020c 	andi	r3,r2,8
 4016ee4:	1009883a 	mov	r4,r2
 4016ee8:	18000f26 	beq	r3,zero,4016f28 <__swsetup_r+0x7c>
 4016eec:	80c00417 	ldw	r3,16(r16)
 4016ef0:	18001526 	beq	r3,zero,4016f48 <__swsetup_r+0x9c>
 4016ef4:	1100004c 	andi	r4,r2,1
 4016ef8:	20001c1e 	bne	r4,zero,4016f6c <__swsetup_r+0xc0>
 4016efc:	1080008c 	andi	r2,r2,2
 4016f00:	1000291e 	bne	r2,zero,4016fa8 <__swsetup_r+0xfc>
 4016f04:	80800517 	ldw	r2,20(r16)
 4016f08:	80800215 	stw	r2,8(r16)
 4016f0c:	18001c26 	beq	r3,zero,4016f80 <__swsetup_r+0xd4>
 4016f10:	0005883a 	mov	r2,zero
 4016f14:	dfc00217 	ldw	ra,8(sp)
 4016f18:	dc400117 	ldw	r17,4(sp)
 4016f1c:	dc000017 	ldw	r16,0(sp)
 4016f20:	dec00304 	addi	sp,sp,12
 4016f24:	f800283a 	ret
 4016f28:	2080040c 	andi	r2,r4,16
 4016f2c:	10002e26 	beq	r2,zero,4016fe8 <__swsetup_r+0x13c>
 4016f30:	2080010c 	andi	r2,r4,4
 4016f34:	10001e1e 	bne	r2,zero,4016fb0 <__swsetup_r+0x104>
 4016f38:	80c00417 	ldw	r3,16(r16)
 4016f3c:	20800214 	ori	r2,r4,8
 4016f40:	8080030d 	sth	r2,12(r16)
 4016f44:	183feb1e 	bne	r3,zero,4016ef4 <__reset+0xfb015ef4>
 4016f48:	1100a00c 	andi	r4,r2,640
 4016f4c:	01408004 	movi	r5,512
 4016f50:	217fe826 	beq	r4,r5,4016ef4 <__reset+0xfb015ef4>
 4016f54:	800b883a 	mov	r5,r16
 4016f58:	8809883a 	mov	r4,r17
 4016f5c:	4019a240 	call	4019a24 <__smakebuf_r>
 4016f60:	8080030b 	ldhu	r2,12(r16)
 4016f64:	80c00417 	ldw	r3,16(r16)
 4016f68:	003fe206 	br	4016ef4 <__reset+0xfb015ef4>
 4016f6c:	80800517 	ldw	r2,20(r16)
 4016f70:	80000215 	stw	zero,8(r16)
 4016f74:	0085c83a 	sub	r2,zero,r2
 4016f78:	80800615 	stw	r2,24(r16)
 4016f7c:	183fe41e 	bne	r3,zero,4016f10 <__reset+0xfb015f10>
 4016f80:	80c0030b 	ldhu	r3,12(r16)
 4016f84:	0005883a 	mov	r2,zero
 4016f88:	1900200c 	andi	r4,r3,128
 4016f8c:	203fe126 	beq	r4,zero,4016f14 <__reset+0xfb015f14>
 4016f90:	18c01014 	ori	r3,r3,64
 4016f94:	80c0030d 	sth	r3,12(r16)
 4016f98:	00bfffc4 	movi	r2,-1
 4016f9c:	003fdd06 	br	4016f14 <__reset+0xfb015f14>
 4016fa0:	4018e800 	call	4018e80 <__sinit>
 4016fa4:	003fcd06 	br	4016edc <__reset+0xfb015edc>
 4016fa8:	0005883a 	mov	r2,zero
 4016fac:	003fd606 	br	4016f08 <__reset+0xfb015f08>
 4016fb0:	81400c17 	ldw	r5,48(r16)
 4016fb4:	28000626 	beq	r5,zero,4016fd0 <__swsetup_r+0x124>
 4016fb8:	80801004 	addi	r2,r16,64
 4016fbc:	28800326 	beq	r5,r2,4016fcc <__swsetup_r+0x120>
 4016fc0:	8809883a 	mov	r4,r17
 4016fc4:	4018ff40 	call	4018ff4 <_free_r>
 4016fc8:	8100030b 	ldhu	r4,12(r16)
 4016fcc:	80000c15 	stw	zero,48(r16)
 4016fd0:	80c00417 	ldw	r3,16(r16)
 4016fd4:	00bff6c4 	movi	r2,-37
 4016fd8:	1108703a 	and	r4,r2,r4
 4016fdc:	80000115 	stw	zero,4(r16)
 4016fe0:	80c00015 	stw	r3,0(r16)
 4016fe4:	003fd506 	br	4016f3c <__reset+0xfb015f3c>
 4016fe8:	00800244 	movi	r2,9
 4016fec:	88800015 	stw	r2,0(r17)
 4016ff0:	20801014 	ori	r2,r4,64
 4016ff4:	8080030d 	sth	r2,12(r16)
 4016ff8:	00bfffc4 	movi	r2,-1
 4016ffc:	003fc506 	br	4016f14 <__reset+0xfb015f14>

04017000 <quorem>:
 4017000:	defff704 	addi	sp,sp,-36
 4017004:	dc800215 	stw	r18,8(sp)
 4017008:	20800417 	ldw	r2,16(r4)
 401700c:	2c800417 	ldw	r18,16(r5)
 4017010:	dfc00815 	stw	ra,32(sp)
 4017014:	ddc00715 	stw	r23,28(sp)
 4017018:	dd800615 	stw	r22,24(sp)
 401701c:	dd400515 	stw	r21,20(sp)
 4017020:	dd000415 	stw	r20,16(sp)
 4017024:	dcc00315 	stw	r19,12(sp)
 4017028:	dc400115 	stw	r17,4(sp)
 401702c:	dc000015 	stw	r16,0(sp)
 4017030:	14807116 	blt	r2,r18,40171f8 <quorem+0x1f8>
 4017034:	94bfffc4 	addi	r18,r18,-1
 4017038:	94ad883a 	add	r22,r18,r18
 401703c:	b5ad883a 	add	r22,r22,r22
 4017040:	2c400504 	addi	r17,r5,20
 4017044:	8da9883a 	add	r20,r17,r22
 4017048:	25400504 	addi	r21,r4,20
 401704c:	282f883a 	mov	r23,r5
 4017050:	adad883a 	add	r22,r21,r22
 4017054:	a1400017 	ldw	r5,0(r20)
 4017058:	2021883a 	mov	r16,r4
 401705c:	b1000017 	ldw	r4,0(r22)
 4017060:	29400044 	addi	r5,r5,1
 4017064:	400dcac0 	call	400dcac <__udivsi3>
 4017068:	1027883a 	mov	r19,r2
 401706c:	10002c26 	beq	r2,zero,4017120 <quorem+0x120>
 4017070:	a813883a 	mov	r9,r21
 4017074:	880b883a 	mov	r5,r17
 4017078:	0009883a 	mov	r4,zero
 401707c:	000d883a 	mov	r6,zero
 4017080:	2a000017 	ldw	r8,0(r5)
 4017084:	49c00017 	ldw	r7,0(r9)
 4017088:	29400104 	addi	r5,r5,4
 401708c:	40bfffcc 	andi	r2,r8,65535
 4017090:	14c5383a 	mul	r2,r2,r19
 4017094:	4010d43a 	srli	r8,r8,16
 4017098:	38ffffcc 	andi	r3,r7,65535
 401709c:	1105883a 	add	r2,r2,r4
 40170a0:	1008d43a 	srli	r4,r2,16
 40170a4:	44d1383a 	mul	r8,r8,r19
 40170a8:	198d883a 	add	r6,r3,r6
 40170ac:	10ffffcc 	andi	r3,r2,65535
 40170b0:	30c7c83a 	sub	r3,r6,r3
 40170b4:	380ed43a 	srli	r7,r7,16
 40170b8:	4105883a 	add	r2,r8,r4
 40170bc:	180dd43a 	srai	r6,r3,16
 40170c0:	113fffcc 	andi	r4,r2,65535
 40170c4:	390fc83a 	sub	r7,r7,r4
 40170c8:	398d883a 	add	r6,r7,r6
 40170cc:	300e943a 	slli	r7,r6,16
 40170d0:	18ffffcc 	andi	r3,r3,65535
 40170d4:	1008d43a 	srli	r4,r2,16
 40170d8:	38ceb03a 	or	r7,r7,r3
 40170dc:	49c00015 	stw	r7,0(r9)
 40170e0:	300dd43a 	srai	r6,r6,16
 40170e4:	4a400104 	addi	r9,r9,4
 40170e8:	a17fe52e 	bgeu	r20,r5,4017080 <__reset+0xfb016080>
 40170ec:	b0800017 	ldw	r2,0(r22)
 40170f0:	10000b1e 	bne	r2,zero,4017120 <quorem+0x120>
 40170f4:	b0bfff04 	addi	r2,r22,-4
 40170f8:	a880082e 	bgeu	r21,r2,401711c <quorem+0x11c>
 40170fc:	b0ffff17 	ldw	r3,-4(r22)
 4017100:	18000326 	beq	r3,zero,4017110 <quorem+0x110>
 4017104:	00000506 	br	401711c <quorem+0x11c>
 4017108:	10c00017 	ldw	r3,0(r2)
 401710c:	1800031e 	bne	r3,zero,401711c <quorem+0x11c>
 4017110:	10bfff04 	addi	r2,r2,-4
 4017114:	94bfffc4 	addi	r18,r18,-1
 4017118:	a8bffb36 	bltu	r21,r2,4017108 <__reset+0xfb016108>
 401711c:	84800415 	stw	r18,16(r16)
 4017120:	b80b883a 	mov	r5,r23
 4017124:	8009883a 	mov	r4,r16
 4017128:	401a6e80 	call	401a6e8 <__mcmp>
 401712c:	10002616 	blt	r2,zero,40171c8 <quorem+0x1c8>
 4017130:	9cc00044 	addi	r19,r19,1
 4017134:	a805883a 	mov	r2,r21
 4017138:	000b883a 	mov	r5,zero
 401713c:	11000017 	ldw	r4,0(r2)
 4017140:	89800017 	ldw	r6,0(r17)
 4017144:	10800104 	addi	r2,r2,4
 4017148:	20ffffcc 	andi	r3,r4,65535
 401714c:	194b883a 	add	r5,r3,r5
 4017150:	30ffffcc 	andi	r3,r6,65535
 4017154:	28c7c83a 	sub	r3,r5,r3
 4017158:	300cd43a 	srli	r6,r6,16
 401715c:	2008d43a 	srli	r4,r4,16
 4017160:	180bd43a 	srai	r5,r3,16
 4017164:	18ffffcc 	andi	r3,r3,65535
 4017168:	2189c83a 	sub	r4,r4,r6
 401716c:	2149883a 	add	r4,r4,r5
 4017170:	200c943a 	slli	r6,r4,16
 4017174:	8c400104 	addi	r17,r17,4
 4017178:	200bd43a 	srai	r5,r4,16
 401717c:	30c6b03a 	or	r3,r6,r3
 4017180:	10ffff15 	stw	r3,-4(r2)
 4017184:	a47fed2e 	bgeu	r20,r17,401713c <__reset+0xfb01613c>
 4017188:	9485883a 	add	r2,r18,r18
 401718c:	1085883a 	add	r2,r2,r2
 4017190:	a887883a 	add	r3,r21,r2
 4017194:	18800017 	ldw	r2,0(r3)
 4017198:	10000b1e 	bne	r2,zero,40171c8 <quorem+0x1c8>
 401719c:	18bfff04 	addi	r2,r3,-4
 40171a0:	a880082e 	bgeu	r21,r2,40171c4 <quorem+0x1c4>
 40171a4:	18ffff17 	ldw	r3,-4(r3)
 40171a8:	18000326 	beq	r3,zero,40171b8 <quorem+0x1b8>
 40171ac:	00000506 	br	40171c4 <quorem+0x1c4>
 40171b0:	10c00017 	ldw	r3,0(r2)
 40171b4:	1800031e 	bne	r3,zero,40171c4 <quorem+0x1c4>
 40171b8:	10bfff04 	addi	r2,r2,-4
 40171bc:	94bfffc4 	addi	r18,r18,-1
 40171c0:	a8bffb36 	bltu	r21,r2,40171b0 <__reset+0xfb0161b0>
 40171c4:	84800415 	stw	r18,16(r16)
 40171c8:	9805883a 	mov	r2,r19
 40171cc:	dfc00817 	ldw	ra,32(sp)
 40171d0:	ddc00717 	ldw	r23,28(sp)
 40171d4:	dd800617 	ldw	r22,24(sp)
 40171d8:	dd400517 	ldw	r21,20(sp)
 40171dc:	dd000417 	ldw	r20,16(sp)
 40171e0:	dcc00317 	ldw	r19,12(sp)
 40171e4:	dc800217 	ldw	r18,8(sp)
 40171e8:	dc400117 	ldw	r17,4(sp)
 40171ec:	dc000017 	ldw	r16,0(sp)
 40171f0:	dec00904 	addi	sp,sp,36
 40171f4:	f800283a 	ret
 40171f8:	0005883a 	mov	r2,zero
 40171fc:	003ff306 	br	40171cc <__reset+0xfb0161cc>

04017200 <_dtoa_r>:
 4017200:	20801017 	ldw	r2,64(r4)
 4017204:	deffde04 	addi	sp,sp,-136
 4017208:	df002015 	stw	fp,128(sp)
 401720c:	dcc01b15 	stw	r19,108(sp)
 4017210:	dc801a15 	stw	r18,104(sp)
 4017214:	dc401915 	stw	r17,100(sp)
 4017218:	dc001815 	stw	r16,96(sp)
 401721c:	dfc02115 	stw	ra,132(sp)
 4017220:	ddc01f15 	stw	r23,124(sp)
 4017224:	dd801e15 	stw	r22,120(sp)
 4017228:	dd401d15 	stw	r21,116(sp)
 401722c:	dd001c15 	stw	r20,112(sp)
 4017230:	d9c00315 	stw	r7,12(sp)
 4017234:	2039883a 	mov	fp,r4
 4017238:	3023883a 	mov	r17,r6
 401723c:	2825883a 	mov	r18,r5
 4017240:	dc002417 	ldw	r16,144(sp)
 4017244:	3027883a 	mov	r19,r6
 4017248:	10000826 	beq	r2,zero,401726c <_dtoa_r+0x6c>
 401724c:	21801117 	ldw	r6,68(r4)
 4017250:	00c00044 	movi	r3,1
 4017254:	100b883a 	mov	r5,r2
 4017258:	1986983a 	sll	r3,r3,r6
 401725c:	11800115 	stw	r6,4(r2)
 4017260:	10c00215 	stw	r3,8(r2)
 4017264:	4019ec80 	call	4019ec8 <_Bfree>
 4017268:	e0001015 	stw	zero,64(fp)
 401726c:	88002e16 	blt	r17,zero,4017328 <_dtoa_r+0x128>
 4017270:	80000015 	stw	zero,0(r16)
 4017274:	889ffc2c 	andhi	r2,r17,32752
 4017278:	00dffc34 	movhi	r3,32752
 401727c:	10c01c26 	beq	r2,r3,40172f0 <_dtoa_r+0xf0>
 4017280:	000d883a 	mov	r6,zero
 4017284:	000f883a 	mov	r7,zero
 4017288:	9009883a 	mov	r4,r18
 401728c:	980b883a 	mov	r5,r19
 4017290:	40104ec0 	call	40104ec <__eqdf2>
 4017294:	10002b1e 	bne	r2,zero,4017344 <_dtoa_r+0x144>
 4017298:	d9c02317 	ldw	r7,140(sp)
 401729c:	00800044 	movi	r2,1
 40172a0:	38800015 	stw	r2,0(r7)
 40172a4:	d8802517 	ldw	r2,148(sp)
 40172a8:	10019e26 	beq	r2,zero,4017924 <_dtoa_r+0x724>
 40172ac:	d8c02517 	ldw	r3,148(sp)
 40172b0:	00810234 	movhi	r2,1032
 40172b4:	1087a044 	addi	r2,r2,7809
 40172b8:	18800015 	stw	r2,0(r3)
 40172bc:	10bfffc4 	addi	r2,r2,-1
 40172c0:	dfc02117 	ldw	ra,132(sp)
 40172c4:	df002017 	ldw	fp,128(sp)
 40172c8:	ddc01f17 	ldw	r23,124(sp)
 40172cc:	dd801e17 	ldw	r22,120(sp)
 40172d0:	dd401d17 	ldw	r21,116(sp)
 40172d4:	dd001c17 	ldw	r20,112(sp)
 40172d8:	dcc01b17 	ldw	r19,108(sp)
 40172dc:	dc801a17 	ldw	r18,104(sp)
 40172e0:	dc401917 	ldw	r17,100(sp)
 40172e4:	dc001817 	ldw	r16,96(sp)
 40172e8:	dec02204 	addi	sp,sp,136
 40172ec:	f800283a 	ret
 40172f0:	d8c02317 	ldw	r3,140(sp)
 40172f4:	0089c3c4 	movi	r2,9999
 40172f8:	18800015 	stw	r2,0(r3)
 40172fc:	90017726 	beq	r18,zero,40178dc <_dtoa_r+0x6dc>
 4017300:	00810234 	movhi	r2,1032
 4017304:	1087b404 	addi	r2,r2,7888
 4017308:	d9002517 	ldw	r4,148(sp)
 401730c:	203fec26 	beq	r4,zero,40172c0 <__reset+0xfb0162c0>
 4017310:	10c000c7 	ldb	r3,3(r2)
 4017314:	1801781e 	bne	r3,zero,40178f8 <_dtoa_r+0x6f8>
 4017318:	10c000c4 	addi	r3,r2,3
 401731c:	d9802517 	ldw	r6,148(sp)
 4017320:	30c00015 	stw	r3,0(r6)
 4017324:	003fe606 	br	40172c0 <__reset+0xfb0162c0>
 4017328:	04e00034 	movhi	r19,32768
 401732c:	9cffffc4 	addi	r19,r19,-1
 4017330:	00800044 	movi	r2,1
 4017334:	8ce6703a 	and	r19,r17,r19
 4017338:	80800015 	stw	r2,0(r16)
 401733c:	9823883a 	mov	r17,r19
 4017340:	003fcc06 	br	4017274 <__reset+0xfb016274>
 4017344:	d8800204 	addi	r2,sp,8
 4017348:	d8800015 	stw	r2,0(sp)
 401734c:	d9c00104 	addi	r7,sp,4
 4017350:	900b883a 	mov	r5,r18
 4017354:	980d883a 	mov	r6,r19
 4017358:	e009883a 	mov	r4,fp
 401735c:	8820d53a 	srli	r16,r17,20
 4017360:	401aab40 	call	401aab4 <__d2b>
 4017364:	d8800915 	stw	r2,36(sp)
 4017368:	8001651e 	bne	r16,zero,4017900 <_dtoa_r+0x700>
 401736c:	dd800217 	ldw	r22,8(sp)
 4017370:	dc000117 	ldw	r16,4(sp)
 4017374:	00800804 	movi	r2,32
 4017378:	b421883a 	add	r16,r22,r16
 401737c:	80c10c84 	addi	r3,r16,1074
 4017380:	10c2d10e 	bge	r2,r3,4017ec8 <_dtoa_r+0xcc8>
 4017384:	00801004 	movi	r2,64
 4017388:	81010484 	addi	r4,r16,1042
 401738c:	10c7c83a 	sub	r3,r2,r3
 4017390:	9108d83a 	srl	r4,r18,r4
 4017394:	88e2983a 	sll	r17,r17,r3
 4017398:	2448b03a 	or	r4,r4,r17
 401739c:	401f3d00 	call	401f3d0 <__floatunsidf>
 40173a0:	017f8434 	movhi	r5,65040
 40173a4:	01800044 	movi	r6,1
 40173a8:	1009883a 	mov	r4,r2
 40173ac:	194b883a 	add	r5,r3,r5
 40173b0:	843fffc4 	addi	r16,r16,-1
 40173b4:	d9801115 	stw	r6,68(sp)
 40173b8:	000d883a 	mov	r6,zero
 40173bc:	01cffe34 	movhi	r7,16376
 40173c0:	4010e5c0 	call	4010e5c <__subdf3>
 40173c4:	0198dbf4 	movhi	r6,25455
 40173c8:	01cff4f4 	movhi	r7,16339
 40173cc:	3190d844 	addi	r6,r6,17249
 40173d0:	39e1e9c4 	addi	r7,r7,-30809
 40173d4:	1009883a 	mov	r4,r2
 40173d8:	180b883a 	mov	r5,r3
 40173dc:	40107440 	call	4010744 <__muldf3>
 40173e0:	01a2d874 	movhi	r6,35681
 40173e4:	01cff1f4 	movhi	r7,16327
 40173e8:	31b22cc4 	addi	r6,r6,-14157
 40173ec:	39e28a04 	addi	r7,r7,-30168
 40173f0:	180b883a 	mov	r5,r3
 40173f4:	1009883a 	mov	r4,r2
 40173f8:	400f3580 	call	400f358 <__adddf3>
 40173fc:	8009883a 	mov	r4,r16
 4017400:	1029883a 	mov	r20,r2
 4017404:	1823883a 	mov	r17,r3
 4017408:	40117d80 	call	40117d8 <__floatsidf>
 401740c:	019427f4 	movhi	r6,20639
 4017410:	01cff4f4 	movhi	r7,16339
 4017414:	319e7ec4 	addi	r6,r6,31227
 4017418:	39d104c4 	addi	r7,r7,17427
 401741c:	1009883a 	mov	r4,r2
 4017420:	180b883a 	mov	r5,r3
 4017424:	40107440 	call	4010744 <__muldf3>
 4017428:	100d883a 	mov	r6,r2
 401742c:	180f883a 	mov	r7,r3
 4017430:	a009883a 	mov	r4,r20
 4017434:	880b883a 	mov	r5,r17
 4017438:	400f3580 	call	400f358 <__adddf3>
 401743c:	1009883a 	mov	r4,r2
 4017440:	180b883a 	mov	r5,r3
 4017444:	1029883a 	mov	r20,r2
 4017448:	1823883a 	mov	r17,r3
 401744c:	40117580 	call	4011758 <__fixdfsi>
 4017450:	000d883a 	mov	r6,zero
 4017454:	000f883a 	mov	r7,zero
 4017458:	a009883a 	mov	r4,r20
 401745c:	880b883a 	mov	r5,r17
 4017460:	d8800515 	stw	r2,20(sp)
 4017464:	40106500 	call	4010650 <__ledf2>
 4017468:	10028716 	blt	r2,zero,4017e88 <_dtoa_r+0xc88>
 401746c:	d8c00517 	ldw	r3,20(sp)
 4017470:	00800584 	movi	r2,22
 4017474:	10c27536 	bltu	r2,r3,4017e4c <_dtoa_r+0xc4c>
 4017478:	180490fa 	slli	r2,r3,3
 401747c:	00c10234 	movhi	r3,1032
 4017480:	18c7cf04 	addi	r3,r3,7996
 4017484:	1885883a 	add	r2,r3,r2
 4017488:	11000017 	ldw	r4,0(r2)
 401748c:	11400117 	ldw	r5,4(r2)
 4017490:	900d883a 	mov	r6,r18
 4017494:	980f883a 	mov	r7,r19
 4017498:	40105740 	call	4010574 <__gedf2>
 401749c:	00828d0e 	bge	zero,r2,4017ed4 <_dtoa_r+0xcd4>
 40174a0:	d9000517 	ldw	r4,20(sp)
 40174a4:	d8000e15 	stw	zero,56(sp)
 40174a8:	213fffc4 	addi	r4,r4,-1
 40174ac:	d9000515 	stw	r4,20(sp)
 40174b0:	b42dc83a 	sub	r22,r22,r16
 40174b4:	b5bfffc4 	addi	r22,r22,-1
 40174b8:	b0026f16 	blt	r22,zero,4017e78 <_dtoa_r+0xc78>
 40174bc:	d8000815 	stw	zero,32(sp)
 40174c0:	d9c00517 	ldw	r7,20(sp)
 40174c4:	38026416 	blt	r7,zero,4017e58 <_dtoa_r+0xc58>
 40174c8:	b1ed883a 	add	r22,r22,r7
 40174cc:	d9c00d15 	stw	r7,52(sp)
 40174d0:	d8000a15 	stw	zero,40(sp)
 40174d4:	d9800317 	ldw	r6,12(sp)
 40174d8:	00800244 	movi	r2,9
 40174dc:	11811436 	bltu	r2,r6,4017930 <_dtoa_r+0x730>
 40174e0:	00800144 	movi	r2,5
 40174e4:	1184e10e 	bge	r2,r6,401886c <_dtoa_r+0x166c>
 40174e8:	31bfff04 	addi	r6,r6,-4
 40174ec:	d9800315 	stw	r6,12(sp)
 40174f0:	0023883a 	mov	r17,zero
 40174f4:	d9800317 	ldw	r6,12(sp)
 40174f8:	008000c4 	movi	r2,3
 40174fc:	30836726 	beq	r6,r2,401829c <_dtoa_r+0x109c>
 4017500:	1183410e 	bge	r2,r6,4018208 <_dtoa_r+0x1008>
 4017504:	d9c00317 	ldw	r7,12(sp)
 4017508:	00800104 	movi	r2,4
 401750c:	38827c26 	beq	r7,r2,4017f00 <_dtoa_r+0xd00>
 4017510:	00800144 	movi	r2,5
 4017514:	3884c41e 	bne	r7,r2,4018828 <_dtoa_r+0x1628>
 4017518:	00800044 	movi	r2,1
 401751c:	d8800b15 	stw	r2,44(sp)
 4017520:	d8c00517 	ldw	r3,20(sp)
 4017524:	d9002217 	ldw	r4,136(sp)
 4017528:	1907883a 	add	r3,r3,r4
 401752c:	19800044 	addi	r6,r3,1
 4017530:	d8c00c15 	stw	r3,48(sp)
 4017534:	d9800615 	stw	r6,24(sp)
 4017538:	0183a40e 	bge	zero,r6,40183cc <_dtoa_r+0x11cc>
 401753c:	d9800617 	ldw	r6,24(sp)
 4017540:	3021883a 	mov	r16,r6
 4017544:	e0001115 	stw	zero,68(fp)
 4017548:	008005c4 	movi	r2,23
 401754c:	1184c92e 	bgeu	r2,r6,4018874 <_dtoa_r+0x1674>
 4017550:	00c00044 	movi	r3,1
 4017554:	00800104 	movi	r2,4
 4017558:	1085883a 	add	r2,r2,r2
 401755c:	11000504 	addi	r4,r2,20
 4017560:	180b883a 	mov	r5,r3
 4017564:	18c00044 	addi	r3,r3,1
 4017568:	313ffb2e 	bgeu	r6,r4,4017558 <__reset+0xfb016558>
 401756c:	e1401115 	stw	r5,68(fp)
 4017570:	e009883a 	mov	r4,fp
 4017574:	4019e200 	call	4019e20 <_Balloc>
 4017578:	d8800715 	stw	r2,28(sp)
 401757c:	e0801015 	stw	r2,64(fp)
 4017580:	00800384 	movi	r2,14
 4017584:	1400f736 	bltu	r2,r16,4017964 <_dtoa_r+0x764>
 4017588:	8800f626 	beq	r17,zero,4017964 <_dtoa_r+0x764>
 401758c:	d9c00517 	ldw	r7,20(sp)
 4017590:	01c39a0e 	bge	zero,r7,40183fc <_dtoa_r+0x11fc>
 4017594:	388003cc 	andi	r2,r7,15
 4017598:	100490fa 	slli	r2,r2,3
 401759c:	382bd13a 	srai	r21,r7,4
 40175a0:	00c10234 	movhi	r3,1032
 40175a4:	18c7cf04 	addi	r3,r3,7996
 40175a8:	1885883a 	add	r2,r3,r2
 40175ac:	a8c0040c 	andi	r3,r21,16
 40175b0:	12400017 	ldw	r9,0(r2)
 40175b4:	12000117 	ldw	r8,4(r2)
 40175b8:	18037926 	beq	r3,zero,40183a0 <_dtoa_r+0x11a0>
 40175bc:	00810234 	movhi	r2,1032
 40175c0:	1087c504 	addi	r2,r2,7956
 40175c4:	11800817 	ldw	r6,32(r2)
 40175c8:	11c00917 	ldw	r7,36(r2)
 40175cc:	9009883a 	mov	r4,r18
 40175d0:	980b883a 	mov	r5,r19
 40175d4:	da001715 	stw	r8,92(sp)
 40175d8:	da401615 	stw	r9,88(sp)
 40175dc:	400fc040 	call	400fc04 <__divdf3>
 40175e0:	da001717 	ldw	r8,92(sp)
 40175e4:	da401617 	ldw	r9,88(sp)
 40175e8:	ad4003cc 	andi	r21,r21,15
 40175ec:	040000c4 	movi	r16,3
 40175f0:	1023883a 	mov	r17,r2
 40175f4:	1829883a 	mov	r20,r3
 40175f8:	a8001126 	beq	r21,zero,4017640 <_dtoa_r+0x440>
 40175fc:	05c10234 	movhi	r23,1032
 4017600:	bdc7c504 	addi	r23,r23,7956
 4017604:	4805883a 	mov	r2,r9
 4017608:	4007883a 	mov	r3,r8
 401760c:	a980004c 	andi	r6,r21,1
 4017610:	1009883a 	mov	r4,r2
 4017614:	a82bd07a 	srai	r21,r21,1
 4017618:	180b883a 	mov	r5,r3
 401761c:	30000426 	beq	r6,zero,4017630 <_dtoa_r+0x430>
 4017620:	b9800017 	ldw	r6,0(r23)
 4017624:	b9c00117 	ldw	r7,4(r23)
 4017628:	84000044 	addi	r16,r16,1
 401762c:	40107440 	call	4010744 <__muldf3>
 4017630:	bdc00204 	addi	r23,r23,8
 4017634:	a83ff51e 	bne	r21,zero,401760c <__reset+0xfb01660c>
 4017638:	1013883a 	mov	r9,r2
 401763c:	1811883a 	mov	r8,r3
 4017640:	480d883a 	mov	r6,r9
 4017644:	400f883a 	mov	r7,r8
 4017648:	8809883a 	mov	r4,r17
 401764c:	a00b883a 	mov	r5,r20
 4017650:	400fc040 	call	400fc04 <__divdf3>
 4017654:	d8800f15 	stw	r2,60(sp)
 4017658:	d8c01015 	stw	r3,64(sp)
 401765c:	d8c00e17 	ldw	r3,56(sp)
 4017660:	18000626 	beq	r3,zero,401767c <_dtoa_r+0x47c>
 4017664:	d9000f17 	ldw	r4,60(sp)
 4017668:	d9401017 	ldw	r5,64(sp)
 401766c:	000d883a 	mov	r6,zero
 4017670:	01cffc34 	movhi	r7,16368
 4017674:	40106500 	call	4010650 <__ledf2>
 4017678:	10040b16 	blt	r2,zero,40186a8 <_dtoa_r+0x14a8>
 401767c:	8009883a 	mov	r4,r16
 4017680:	40117d80 	call	40117d8 <__floatsidf>
 4017684:	d9800f17 	ldw	r6,60(sp)
 4017688:	d9c01017 	ldw	r7,64(sp)
 401768c:	1009883a 	mov	r4,r2
 4017690:	180b883a 	mov	r5,r3
 4017694:	40107440 	call	4010744 <__muldf3>
 4017698:	000d883a 	mov	r6,zero
 401769c:	01d00734 	movhi	r7,16412
 40176a0:	1009883a 	mov	r4,r2
 40176a4:	180b883a 	mov	r5,r3
 40176a8:	400f3580 	call	400f358 <__adddf3>
 40176ac:	1021883a 	mov	r16,r2
 40176b0:	d8800617 	ldw	r2,24(sp)
 40176b4:	047f3034 	movhi	r17,64704
 40176b8:	1c63883a 	add	r17,r3,r17
 40176bc:	10031826 	beq	r2,zero,4018320 <_dtoa_r+0x1120>
 40176c0:	d8c00517 	ldw	r3,20(sp)
 40176c4:	db000617 	ldw	r12,24(sp)
 40176c8:	d8c01315 	stw	r3,76(sp)
 40176cc:	d9000b17 	ldw	r4,44(sp)
 40176d0:	20038f26 	beq	r4,zero,4018510 <_dtoa_r+0x1310>
 40176d4:	60bfffc4 	addi	r2,r12,-1
 40176d8:	100490fa 	slli	r2,r2,3
 40176dc:	00c10234 	movhi	r3,1032
 40176e0:	18c7cf04 	addi	r3,r3,7996
 40176e4:	1885883a 	add	r2,r3,r2
 40176e8:	11800017 	ldw	r6,0(r2)
 40176ec:	11c00117 	ldw	r7,4(r2)
 40176f0:	d8800717 	ldw	r2,28(sp)
 40176f4:	0009883a 	mov	r4,zero
 40176f8:	014ff834 	movhi	r5,16352
 40176fc:	db001615 	stw	r12,88(sp)
 4017700:	15c00044 	addi	r23,r2,1
 4017704:	400fc040 	call	400fc04 <__divdf3>
 4017708:	800d883a 	mov	r6,r16
 401770c:	880f883a 	mov	r7,r17
 4017710:	1009883a 	mov	r4,r2
 4017714:	180b883a 	mov	r5,r3
 4017718:	4010e5c0 	call	4010e5c <__subdf3>
 401771c:	d9401017 	ldw	r5,64(sp)
 4017720:	d9000f17 	ldw	r4,60(sp)
 4017724:	102b883a 	mov	r21,r2
 4017728:	d8c01215 	stw	r3,72(sp)
 401772c:	40117580 	call	4011758 <__fixdfsi>
 4017730:	1009883a 	mov	r4,r2
 4017734:	1029883a 	mov	r20,r2
 4017738:	40117d80 	call	40117d8 <__floatsidf>
 401773c:	d9000f17 	ldw	r4,60(sp)
 4017740:	d9401017 	ldw	r5,64(sp)
 4017744:	100d883a 	mov	r6,r2
 4017748:	180f883a 	mov	r7,r3
 401774c:	4010e5c0 	call	4010e5c <__subdf3>
 4017750:	1823883a 	mov	r17,r3
 4017754:	d8c00717 	ldw	r3,28(sp)
 4017758:	d9401217 	ldw	r5,72(sp)
 401775c:	a2000c04 	addi	r8,r20,48
 4017760:	1021883a 	mov	r16,r2
 4017764:	1a000005 	stb	r8,0(r3)
 4017768:	800d883a 	mov	r6,r16
 401776c:	880f883a 	mov	r7,r17
 4017770:	a809883a 	mov	r4,r21
 4017774:	4029883a 	mov	r20,r8
 4017778:	40105740 	call	4010574 <__gedf2>
 401777c:	00841d16 	blt	zero,r2,40187f4 <_dtoa_r+0x15f4>
 4017780:	800d883a 	mov	r6,r16
 4017784:	880f883a 	mov	r7,r17
 4017788:	0009883a 	mov	r4,zero
 401778c:	014ffc34 	movhi	r5,16368
 4017790:	4010e5c0 	call	4010e5c <__subdf3>
 4017794:	d9401217 	ldw	r5,72(sp)
 4017798:	100d883a 	mov	r6,r2
 401779c:	180f883a 	mov	r7,r3
 40177a0:	a809883a 	mov	r4,r21
 40177a4:	40105740 	call	4010574 <__gedf2>
 40177a8:	db001617 	ldw	r12,88(sp)
 40177ac:	00840e16 	blt	zero,r2,40187e8 <_dtoa_r+0x15e8>
 40177b0:	00800044 	movi	r2,1
 40177b4:	13006b0e 	bge	r2,r12,4017964 <_dtoa_r+0x764>
 40177b8:	d9000717 	ldw	r4,28(sp)
 40177bc:	dd800f15 	stw	r22,60(sp)
 40177c0:	dcc01015 	stw	r19,64(sp)
 40177c4:	2319883a 	add	r12,r4,r12
 40177c8:	dcc01217 	ldw	r19,72(sp)
 40177cc:	602d883a 	mov	r22,r12
 40177d0:	dc801215 	stw	r18,72(sp)
 40177d4:	b825883a 	mov	r18,r23
 40177d8:	00000906 	br	4017800 <_dtoa_r+0x600>
 40177dc:	4010e5c0 	call	4010e5c <__subdf3>
 40177e0:	a80d883a 	mov	r6,r21
 40177e4:	980f883a 	mov	r7,r19
 40177e8:	1009883a 	mov	r4,r2
 40177ec:	180b883a 	mov	r5,r3
 40177f0:	40106500 	call	4010650 <__ledf2>
 40177f4:	1003e816 	blt	r2,zero,4018798 <_dtoa_r+0x1598>
 40177f8:	b825883a 	mov	r18,r23
 40177fc:	bd83e926 	beq	r23,r22,40187a4 <_dtoa_r+0x15a4>
 4017800:	a809883a 	mov	r4,r21
 4017804:	980b883a 	mov	r5,r19
 4017808:	000d883a 	mov	r6,zero
 401780c:	01d00934 	movhi	r7,16420
 4017810:	40107440 	call	4010744 <__muldf3>
 4017814:	000d883a 	mov	r6,zero
 4017818:	01d00934 	movhi	r7,16420
 401781c:	8009883a 	mov	r4,r16
 4017820:	880b883a 	mov	r5,r17
 4017824:	102b883a 	mov	r21,r2
 4017828:	1827883a 	mov	r19,r3
 401782c:	40107440 	call	4010744 <__muldf3>
 4017830:	180b883a 	mov	r5,r3
 4017834:	1009883a 	mov	r4,r2
 4017838:	1821883a 	mov	r16,r3
 401783c:	1023883a 	mov	r17,r2
 4017840:	40117580 	call	4011758 <__fixdfsi>
 4017844:	1009883a 	mov	r4,r2
 4017848:	1029883a 	mov	r20,r2
 401784c:	40117d80 	call	40117d8 <__floatsidf>
 4017850:	8809883a 	mov	r4,r17
 4017854:	800b883a 	mov	r5,r16
 4017858:	100d883a 	mov	r6,r2
 401785c:	180f883a 	mov	r7,r3
 4017860:	4010e5c0 	call	4010e5c <__subdf3>
 4017864:	a5000c04 	addi	r20,r20,48
 4017868:	a80d883a 	mov	r6,r21
 401786c:	980f883a 	mov	r7,r19
 4017870:	1009883a 	mov	r4,r2
 4017874:	180b883a 	mov	r5,r3
 4017878:	95000005 	stb	r20,0(r18)
 401787c:	1021883a 	mov	r16,r2
 4017880:	1823883a 	mov	r17,r3
 4017884:	40106500 	call	4010650 <__ledf2>
 4017888:	bdc00044 	addi	r23,r23,1
 401788c:	800d883a 	mov	r6,r16
 4017890:	880f883a 	mov	r7,r17
 4017894:	0009883a 	mov	r4,zero
 4017898:	014ffc34 	movhi	r5,16368
 401789c:	103fcf0e 	bge	r2,zero,40177dc <__reset+0xfb0167dc>
 40178a0:	d8c01317 	ldw	r3,76(sp)
 40178a4:	d8c00515 	stw	r3,20(sp)
 40178a8:	d9400917 	ldw	r5,36(sp)
 40178ac:	e009883a 	mov	r4,fp
 40178b0:	4019ec80 	call	4019ec8 <_Bfree>
 40178b4:	d9000517 	ldw	r4,20(sp)
 40178b8:	d9802317 	ldw	r6,140(sp)
 40178bc:	d9c02517 	ldw	r7,148(sp)
 40178c0:	b8000005 	stb	zero,0(r23)
 40178c4:	20800044 	addi	r2,r4,1
 40178c8:	30800015 	stw	r2,0(r6)
 40178cc:	3802aa26 	beq	r7,zero,4018378 <_dtoa_r+0x1178>
 40178d0:	3dc00015 	stw	r23,0(r7)
 40178d4:	d8800717 	ldw	r2,28(sp)
 40178d8:	003e7906 	br	40172c0 <__reset+0xfb0162c0>
 40178dc:	00800434 	movhi	r2,16
 40178e0:	10bfffc4 	addi	r2,r2,-1
 40178e4:	88a2703a 	and	r17,r17,r2
 40178e8:	883e851e 	bne	r17,zero,4017300 <__reset+0xfb016300>
 40178ec:	00810234 	movhi	r2,1032
 40178f0:	1087b104 	addi	r2,r2,7876
 40178f4:	003e8406 	br	4017308 <__reset+0xfb016308>
 40178f8:	10c00204 	addi	r3,r2,8
 40178fc:	003e8706 	br	401731c <__reset+0xfb01631c>
 4017900:	01400434 	movhi	r5,16
 4017904:	297fffc4 	addi	r5,r5,-1
 4017908:	994a703a 	and	r5,r19,r5
 401790c:	9009883a 	mov	r4,r18
 4017910:	843f0044 	addi	r16,r16,-1023
 4017914:	294ffc34 	orhi	r5,r5,16368
 4017918:	dd800217 	ldw	r22,8(sp)
 401791c:	d8001115 	stw	zero,68(sp)
 4017920:	003ea506 	br	40173b8 <__reset+0xfb0163b8>
 4017924:	00810234 	movhi	r2,1032
 4017928:	1087a004 	addi	r2,r2,7808
 401792c:	003e6406 	br	40172c0 <__reset+0xfb0162c0>
 4017930:	e0001115 	stw	zero,68(fp)
 4017934:	000b883a 	mov	r5,zero
 4017938:	e009883a 	mov	r4,fp
 401793c:	4019e200 	call	4019e20 <_Balloc>
 4017940:	01bfffc4 	movi	r6,-1
 4017944:	01c00044 	movi	r7,1
 4017948:	d8800715 	stw	r2,28(sp)
 401794c:	d9800c15 	stw	r6,48(sp)
 4017950:	e0801015 	stw	r2,64(fp)
 4017954:	d8000315 	stw	zero,12(sp)
 4017958:	d9c00b15 	stw	r7,44(sp)
 401795c:	d9800615 	stw	r6,24(sp)
 4017960:	d8002215 	stw	zero,136(sp)
 4017964:	d8800117 	ldw	r2,4(sp)
 4017968:	10008916 	blt	r2,zero,4017b90 <_dtoa_r+0x990>
 401796c:	d9000517 	ldw	r4,20(sp)
 4017970:	00c00384 	movi	r3,14
 4017974:	19008616 	blt	r3,r4,4017b90 <_dtoa_r+0x990>
 4017978:	200490fa 	slli	r2,r4,3
 401797c:	00c10234 	movhi	r3,1032
 4017980:	d9802217 	ldw	r6,136(sp)
 4017984:	18c7cf04 	addi	r3,r3,7996
 4017988:	1885883a 	add	r2,r3,r2
 401798c:	14000017 	ldw	r16,0(r2)
 4017990:	14400117 	ldw	r17,4(r2)
 4017994:	30016316 	blt	r6,zero,4017f24 <_dtoa_r+0xd24>
 4017998:	800d883a 	mov	r6,r16
 401799c:	880f883a 	mov	r7,r17
 40179a0:	9009883a 	mov	r4,r18
 40179a4:	980b883a 	mov	r5,r19
 40179a8:	400fc040 	call	400fc04 <__divdf3>
 40179ac:	180b883a 	mov	r5,r3
 40179b0:	1009883a 	mov	r4,r2
 40179b4:	40117580 	call	4011758 <__fixdfsi>
 40179b8:	1009883a 	mov	r4,r2
 40179bc:	102b883a 	mov	r21,r2
 40179c0:	40117d80 	call	40117d8 <__floatsidf>
 40179c4:	800d883a 	mov	r6,r16
 40179c8:	880f883a 	mov	r7,r17
 40179cc:	1009883a 	mov	r4,r2
 40179d0:	180b883a 	mov	r5,r3
 40179d4:	40107440 	call	4010744 <__muldf3>
 40179d8:	100d883a 	mov	r6,r2
 40179dc:	180f883a 	mov	r7,r3
 40179e0:	9009883a 	mov	r4,r18
 40179e4:	980b883a 	mov	r5,r19
 40179e8:	4010e5c0 	call	4010e5c <__subdf3>
 40179ec:	d9c00717 	ldw	r7,28(sp)
 40179f0:	1009883a 	mov	r4,r2
 40179f4:	a8800c04 	addi	r2,r21,48
 40179f8:	38800005 	stb	r2,0(r7)
 40179fc:	3dc00044 	addi	r23,r7,1
 4017a00:	d9c00617 	ldw	r7,24(sp)
 4017a04:	01800044 	movi	r6,1
 4017a08:	180b883a 	mov	r5,r3
 4017a0c:	2005883a 	mov	r2,r4
 4017a10:	39803826 	beq	r7,r6,4017af4 <_dtoa_r+0x8f4>
 4017a14:	000d883a 	mov	r6,zero
 4017a18:	01d00934 	movhi	r7,16420
 4017a1c:	40107440 	call	4010744 <__muldf3>
 4017a20:	000d883a 	mov	r6,zero
 4017a24:	000f883a 	mov	r7,zero
 4017a28:	1009883a 	mov	r4,r2
 4017a2c:	180b883a 	mov	r5,r3
 4017a30:	1025883a 	mov	r18,r2
 4017a34:	1827883a 	mov	r19,r3
 4017a38:	40104ec0 	call	40104ec <__eqdf2>
 4017a3c:	103f9a26 	beq	r2,zero,40178a8 <__reset+0xfb0168a8>
 4017a40:	d9c00617 	ldw	r7,24(sp)
 4017a44:	d8c00717 	ldw	r3,28(sp)
 4017a48:	b829883a 	mov	r20,r23
 4017a4c:	38bfffc4 	addi	r2,r7,-1
 4017a50:	18ad883a 	add	r22,r3,r2
 4017a54:	00000a06 	br	4017a80 <_dtoa_r+0x880>
 4017a58:	40107440 	call	4010744 <__muldf3>
 4017a5c:	000d883a 	mov	r6,zero
 4017a60:	000f883a 	mov	r7,zero
 4017a64:	1009883a 	mov	r4,r2
 4017a68:	180b883a 	mov	r5,r3
 4017a6c:	1025883a 	mov	r18,r2
 4017a70:	1827883a 	mov	r19,r3
 4017a74:	b829883a 	mov	r20,r23
 4017a78:	40104ec0 	call	40104ec <__eqdf2>
 4017a7c:	103f8a26 	beq	r2,zero,40178a8 <__reset+0xfb0168a8>
 4017a80:	800d883a 	mov	r6,r16
 4017a84:	880f883a 	mov	r7,r17
 4017a88:	9009883a 	mov	r4,r18
 4017a8c:	980b883a 	mov	r5,r19
 4017a90:	400fc040 	call	400fc04 <__divdf3>
 4017a94:	180b883a 	mov	r5,r3
 4017a98:	1009883a 	mov	r4,r2
 4017a9c:	40117580 	call	4011758 <__fixdfsi>
 4017aa0:	1009883a 	mov	r4,r2
 4017aa4:	102b883a 	mov	r21,r2
 4017aa8:	40117d80 	call	40117d8 <__floatsidf>
 4017aac:	800d883a 	mov	r6,r16
 4017ab0:	880f883a 	mov	r7,r17
 4017ab4:	1009883a 	mov	r4,r2
 4017ab8:	180b883a 	mov	r5,r3
 4017abc:	40107440 	call	4010744 <__muldf3>
 4017ac0:	100d883a 	mov	r6,r2
 4017ac4:	180f883a 	mov	r7,r3
 4017ac8:	9009883a 	mov	r4,r18
 4017acc:	980b883a 	mov	r5,r19
 4017ad0:	4010e5c0 	call	4010e5c <__subdf3>
 4017ad4:	aa000c04 	addi	r8,r21,48
 4017ad8:	a2000005 	stb	r8,0(r20)
 4017adc:	000d883a 	mov	r6,zero
 4017ae0:	01d00934 	movhi	r7,16420
 4017ae4:	1009883a 	mov	r4,r2
 4017ae8:	180b883a 	mov	r5,r3
 4017aec:	a5c00044 	addi	r23,r20,1
 4017af0:	b53fd91e 	bne	r22,r20,4017a58 <__reset+0xfb016a58>
 4017af4:	100d883a 	mov	r6,r2
 4017af8:	180f883a 	mov	r7,r3
 4017afc:	1009883a 	mov	r4,r2
 4017b00:	180b883a 	mov	r5,r3
 4017b04:	400f3580 	call	400f358 <__adddf3>
 4017b08:	100d883a 	mov	r6,r2
 4017b0c:	180f883a 	mov	r7,r3
 4017b10:	8009883a 	mov	r4,r16
 4017b14:	880b883a 	mov	r5,r17
 4017b18:	1027883a 	mov	r19,r2
 4017b1c:	1825883a 	mov	r18,r3
 4017b20:	40106500 	call	4010650 <__ledf2>
 4017b24:	10000816 	blt	r2,zero,4017b48 <_dtoa_r+0x948>
 4017b28:	980d883a 	mov	r6,r19
 4017b2c:	900f883a 	mov	r7,r18
 4017b30:	8009883a 	mov	r4,r16
 4017b34:	880b883a 	mov	r5,r17
 4017b38:	40104ec0 	call	40104ec <__eqdf2>
 4017b3c:	103f5a1e 	bne	r2,zero,40178a8 <__reset+0xfb0168a8>
 4017b40:	ad40004c 	andi	r21,r21,1
 4017b44:	a83f5826 	beq	r21,zero,40178a8 <__reset+0xfb0168a8>
 4017b48:	bd3fffc3 	ldbu	r20,-1(r23)
 4017b4c:	b8bfffc4 	addi	r2,r23,-1
 4017b50:	1007883a 	mov	r3,r2
 4017b54:	01400e44 	movi	r5,57
 4017b58:	d9800717 	ldw	r6,28(sp)
 4017b5c:	00000506 	br	4017b74 <_dtoa_r+0x974>
 4017b60:	18ffffc4 	addi	r3,r3,-1
 4017b64:	11824726 	beq	r2,r6,4018484 <_dtoa_r+0x1284>
 4017b68:	1d000003 	ldbu	r20,0(r3)
 4017b6c:	102f883a 	mov	r23,r2
 4017b70:	10bfffc4 	addi	r2,r2,-1
 4017b74:	a1003fcc 	andi	r4,r20,255
 4017b78:	2100201c 	xori	r4,r4,128
 4017b7c:	213fe004 	addi	r4,r4,-128
 4017b80:	217ff726 	beq	r4,r5,4017b60 <__reset+0xfb016b60>
 4017b84:	a2000044 	addi	r8,r20,1
 4017b88:	12000005 	stb	r8,0(r2)
 4017b8c:	003f4606 	br	40178a8 <__reset+0xfb0168a8>
 4017b90:	d9000b17 	ldw	r4,44(sp)
 4017b94:	2000c826 	beq	r4,zero,4017eb8 <_dtoa_r+0xcb8>
 4017b98:	d9800317 	ldw	r6,12(sp)
 4017b9c:	00c00044 	movi	r3,1
 4017ba0:	1980f90e 	bge	r3,r6,4017f88 <_dtoa_r+0xd88>
 4017ba4:	d8800617 	ldw	r2,24(sp)
 4017ba8:	d8c00a17 	ldw	r3,40(sp)
 4017bac:	157fffc4 	addi	r21,r2,-1
 4017bb0:	1d41f316 	blt	r3,r21,4018380 <_dtoa_r+0x1180>
 4017bb4:	1d6bc83a 	sub	r21,r3,r21
 4017bb8:	d9c00617 	ldw	r7,24(sp)
 4017bbc:	3802aa16 	blt	r7,zero,4018668 <_dtoa_r+0x1468>
 4017bc0:	dd000817 	ldw	r20,32(sp)
 4017bc4:	d8800617 	ldw	r2,24(sp)
 4017bc8:	d8c00817 	ldw	r3,32(sp)
 4017bcc:	01400044 	movi	r5,1
 4017bd0:	e009883a 	mov	r4,fp
 4017bd4:	1887883a 	add	r3,r3,r2
 4017bd8:	d8c00815 	stw	r3,32(sp)
 4017bdc:	b0ad883a 	add	r22,r22,r2
 4017be0:	401a22c0 	call	401a22c <__i2b>
 4017be4:	1023883a 	mov	r17,r2
 4017be8:	a0000826 	beq	r20,zero,4017c0c <_dtoa_r+0xa0c>
 4017bec:	0580070e 	bge	zero,r22,4017c0c <_dtoa_r+0xa0c>
 4017bf0:	a005883a 	mov	r2,r20
 4017bf4:	b500b916 	blt	r22,r20,4017edc <_dtoa_r+0xcdc>
 4017bf8:	d9000817 	ldw	r4,32(sp)
 4017bfc:	a0a9c83a 	sub	r20,r20,r2
 4017c00:	b0adc83a 	sub	r22,r22,r2
 4017c04:	2089c83a 	sub	r4,r4,r2
 4017c08:	d9000815 	stw	r4,32(sp)
 4017c0c:	d9800a17 	ldw	r6,40(sp)
 4017c10:	0181810e 	bge	zero,r6,4018218 <_dtoa_r+0x1018>
 4017c14:	d9c00b17 	ldw	r7,44(sp)
 4017c18:	3800b326 	beq	r7,zero,4017ee8 <_dtoa_r+0xce8>
 4017c1c:	a800b226 	beq	r21,zero,4017ee8 <_dtoa_r+0xce8>
 4017c20:	880b883a 	mov	r5,r17
 4017c24:	a80d883a 	mov	r6,r21
 4017c28:	e009883a 	mov	r4,fp
 4017c2c:	401a4600 	call	401a460 <__pow5mult>
 4017c30:	d9800917 	ldw	r6,36(sp)
 4017c34:	100b883a 	mov	r5,r2
 4017c38:	e009883a 	mov	r4,fp
 4017c3c:	1023883a 	mov	r17,r2
 4017c40:	401a2680 	call	401a268 <__multiply>
 4017c44:	1021883a 	mov	r16,r2
 4017c48:	d8800a17 	ldw	r2,40(sp)
 4017c4c:	d9400917 	ldw	r5,36(sp)
 4017c50:	e009883a 	mov	r4,fp
 4017c54:	1545c83a 	sub	r2,r2,r21
 4017c58:	d8800a15 	stw	r2,40(sp)
 4017c5c:	4019ec80 	call	4019ec8 <_Bfree>
 4017c60:	d8c00a17 	ldw	r3,40(sp)
 4017c64:	18009f1e 	bne	r3,zero,4017ee4 <_dtoa_r+0xce4>
 4017c68:	05c00044 	movi	r23,1
 4017c6c:	e009883a 	mov	r4,fp
 4017c70:	b80b883a 	mov	r5,r23
 4017c74:	401a22c0 	call	401a22c <__i2b>
 4017c78:	d9000d17 	ldw	r4,52(sp)
 4017c7c:	102b883a 	mov	r21,r2
 4017c80:	2000ce26 	beq	r4,zero,4017fbc <_dtoa_r+0xdbc>
 4017c84:	200d883a 	mov	r6,r4
 4017c88:	100b883a 	mov	r5,r2
 4017c8c:	e009883a 	mov	r4,fp
 4017c90:	401a4600 	call	401a460 <__pow5mult>
 4017c94:	d9800317 	ldw	r6,12(sp)
 4017c98:	102b883a 	mov	r21,r2
 4017c9c:	b981810e 	bge	r23,r6,40182a4 <_dtoa_r+0x10a4>
 4017ca0:	0027883a 	mov	r19,zero
 4017ca4:	a8800417 	ldw	r2,16(r21)
 4017ca8:	05c00804 	movi	r23,32
 4017cac:	10800104 	addi	r2,r2,4
 4017cb0:	1085883a 	add	r2,r2,r2
 4017cb4:	1085883a 	add	r2,r2,r2
 4017cb8:	a885883a 	add	r2,r21,r2
 4017cbc:	11000017 	ldw	r4,0(r2)
 4017cc0:	401a1140 	call	401a114 <__hi0bits>
 4017cc4:	b885c83a 	sub	r2,r23,r2
 4017cc8:	1585883a 	add	r2,r2,r22
 4017ccc:	108007cc 	andi	r2,r2,31
 4017cd0:	1000b326 	beq	r2,zero,4017fa0 <_dtoa_r+0xda0>
 4017cd4:	00c00804 	movi	r3,32
 4017cd8:	1887c83a 	sub	r3,r3,r2
 4017cdc:	01000104 	movi	r4,4
 4017ce0:	20c2cd0e 	bge	r4,r3,4018818 <_dtoa_r+0x1618>
 4017ce4:	00c00704 	movi	r3,28
 4017ce8:	1885c83a 	sub	r2,r3,r2
 4017cec:	d8c00817 	ldw	r3,32(sp)
 4017cf0:	a0a9883a 	add	r20,r20,r2
 4017cf4:	b0ad883a 	add	r22,r22,r2
 4017cf8:	1887883a 	add	r3,r3,r2
 4017cfc:	d8c00815 	stw	r3,32(sp)
 4017d00:	d9800817 	ldw	r6,32(sp)
 4017d04:	0180040e 	bge	zero,r6,4017d18 <_dtoa_r+0xb18>
 4017d08:	800b883a 	mov	r5,r16
 4017d0c:	e009883a 	mov	r4,fp
 4017d10:	401a5a00 	call	401a5a0 <__lshift>
 4017d14:	1021883a 	mov	r16,r2
 4017d18:	0580050e 	bge	zero,r22,4017d30 <_dtoa_r+0xb30>
 4017d1c:	a80b883a 	mov	r5,r21
 4017d20:	b00d883a 	mov	r6,r22
 4017d24:	e009883a 	mov	r4,fp
 4017d28:	401a5a00 	call	401a5a0 <__lshift>
 4017d2c:	102b883a 	mov	r21,r2
 4017d30:	d9c00e17 	ldw	r7,56(sp)
 4017d34:	3801211e 	bne	r7,zero,40181bc <_dtoa_r+0xfbc>
 4017d38:	d9800617 	ldw	r6,24(sp)
 4017d3c:	0181380e 	bge	zero,r6,4018220 <_dtoa_r+0x1020>
 4017d40:	d8c00b17 	ldw	r3,44(sp)
 4017d44:	1800ab1e 	bne	r3,zero,4017ff4 <_dtoa_r+0xdf4>
 4017d48:	dc800717 	ldw	r18,28(sp)
 4017d4c:	dcc00617 	ldw	r19,24(sp)
 4017d50:	9029883a 	mov	r20,r18
 4017d54:	00000206 	br	4017d60 <_dtoa_r+0xb60>
 4017d58:	4019ef00 	call	4019ef0 <__multadd>
 4017d5c:	1021883a 	mov	r16,r2
 4017d60:	a80b883a 	mov	r5,r21
 4017d64:	8009883a 	mov	r4,r16
 4017d68:	40170000 	call	4017000 <quorem>
 4017d6c:	10800c04 	addi	r2,r2,48
 4017d70:	90800005 	stb	r2,0(r18)
 4017d74:	94800044 	addi	r18,r18,1
 4017d78:	9507c83a 	sub	r3,r18,r20
 4017d7c:	000f883a 	mov	r7,zero
 4017d80:	01800284 	movi	r6,10
 4017d84:	800b883a 	mov	r5,r16
 4017d88:	e009883a 	mov	r4,fp
 4017d8c:	1cfff216 	blt	r3,r19,4017d58 <__reset+0xfb016d58>
 4017d90:	1011883a 	mov	r8,r2
 4017d94:	d8800617 	ldw	r2,24(sp)
 4017d98:	0082370e 	bge	zero,r2,4018678 <_dtoa_r+0x1478>
 4017d9c:	d9000717 	ldw	r4,28(sp)
 4017da0:	0025883a 	mov	r18,zero
 4017da4:	20af883a 	add	r23,r4,r2
 4017da8:	01800044 	movi	r6,1
 4017dac:	800b883a 	mov	r5,r16
 4017db0:	e009883a 	mov	r4,fp
 4017db4:	da001715 	stw	r8,92(sp)
 4017db8:	401a5a00 	call	401a5a0 <__lshift>
 4017dbc:	a80b883a 	mov	r5,r21
 4017dc0:	1009883a 	mov	r4,r2
 4017dc4:	d8800915 	stw	r2,36(sp)
 4017dc8:	401a6e80 	call	401a6e8 <__mcmp>
 4017dcc:	da001717 	ldw	r8,92(sp)
 4017dd0:	0081800e 	bge	zero,r2,40183d4 <_dtoa_r+0x11d4>
 4017dd4:	b93fffc3 	ldbu	r4,-1(r23)
 4017dd8:	b8bfffc4 	addi	r2,r23,-1
 4017ddc:	1007883a 	mov	r3,r2
 4017de0:	01800e44 	movi	r6,57
 4017de4:	d9c00717 	ldw	r7,28(sp)
 4017de8:	00000506 	br	4017e00 <_dtoa_r+0xc00>
 4017dec:	18ffffc4 	addi	r3,r3,-1
 4017df0:	11c12326 	beq	r2,r7,4018280 <_dtoa_r+0x1080>
 4017df4:	19000003 	ldbu	r4,0(r3)
 4017df8:	102f883a 	mov	r23,r2
 4017dfc:	10bfffc4 	addi	r2,r2,-1
 4017e00:	21403fcc 	andi	r5,r4,255
 4017e04:	2940201c 	xori	r5,r5,128
 4017e08:	297fe004 	addi	r5,r5,-128
 4017e0c:	29bff726 	beq	r5,r6,4017dec <__reset+0xfb016dec>
 4017e10:	21000044 	addi	r4,r4,1
 4017e14:	11000005 	stb	r4,0(r2)
 4017e18:	a80b883a 	mov	r5,r21
 4017e1c:	e009883a 	mov	r4,fp
 4017e20:	4019ec80 	call	4019ec8 <_Bfree>
 4017e24:	883ea026 	beq	r17,zero,40178a8 <__reset+0xfb0168a8>
 4017e28:	90000426 	beq	r18,zero,4017e3c <_dtoa_r+0xc3c>
 4017e2c:	94400326 	beq	r18,r17,4017e3c <_dtoa_r+0xc3c>
 4017e30:	900b883a 	mov	r5,r18
 4017e34:	e009883a 	mov	r4,fp
 4017e38:	4019ec80 	call	4019ec8 <_Bfree>
 4017e3c:	880b883a 	mov	r5,r17
 4017e40:	e009883a 	mov	r4,fp
 4017e44:	4019ec80 	call	4019ec8 <_Bfree>
 4017e48:	003e9706 	br	40178a8 <__reset+0xfb0168a8>
 4017e4c:	01800044 	movi	r6,1
 4017e50:	d9800e15 	stw	r6,56(sp)
 4017e54:	003d9606 	br	40174b0 <__reset+0xfb0164b0>
 4017e58:	d8800817 	ldw	r2,32(sp)
 4017e5c:	d8c00517 	ldw	r3,20(sp)
 4017e60:	d8000d15 	stw	zero,52(sp)
 4017e64:	10c5c83a 	sub	r2,r2,r3
 4017e68:	00c9c83a 	sub	r4,zero,r3
 4017e6c:	d8800815 	stw	r2,32(sp)
 4017e70:	d9000a15 	stw	r4,40(sp)
 4017e74:	003d9706 	br	40174d4 <__reset+0xfb0164d4>
 4017e78:	05adc83a 	sub	r22,zero,r22
 4017e7c:	dd800815 	stw	r22,32(sp)
 4017e80:	002d883a 	mov	r22,zero
 4017e84:	003d8e06 	br	40174c0 <__reset+0xfb0164c0>
 4017e88:	d9000517 	ldw	r4,20(sp)
 4017e8c:	40117d80 	call	40117d8 <__floatsidf>
 4017e90:	100d883a 	mov	r6,r2
 4017e94:	180f883a 	mov	r7,r3
 4017e98:	a009883a 	mov	r4,r20
 4017e9c:	880b883a 	mov	r5,r17
 4017ea0:	40104ec0 	call	40104ec <__eqdf2>
 4017ea4:	103d7126 	beq	r2,zero,401746c <__reset+0xfb01646c>
 4017ea8:	d9c00517 	ldw	r7,20(sp)
 4017eac:	39ffffc4 	addi	r7,r7,-1
 4017eb0:	d9c00515 	stw	r7,20(sp)
 4017eb4:	003d6d06 	br	401746c <__reset+0xfb01646c>
 4017eb8:	dd400a17 	ldw	r21,40(sp)
 4017ebc:	dd000817 	ldw	r20,32(sp)
 4017ec0:	0023883a 	mov	r17,zero
 4017ec4:	003f4806 	br	4017be8 <__reset+0xfb016be8>
 4017ec8:	10e3c83a 	sub	r17,r2,r3
 4017ecc:	9448983a 	sll	r4,r18,r17
 4017ed0:	003d3206 	br	401739c <__reset+0xfb01639c>
 4017ed4:	d8000e15 	stw	zero,56(sp)
 4017ed8:	003d7506 	br	40174b0 <__reset+0xfb0164b0>
 4017edc:	b005883a 	mov	r2,r22
 4017ee0:	003f4506 	br	4017bf8 <__reset+0xfb016bf8>
 4017ee4:	dc000915 	stw	r16,36(sp)
 4017ee8:	d9800a17 	ldw	r6,40(sp)
 4017eec:	d9400917 	ldw	r5,36(sp)
 4017ef0:	e009883a 	mov	r4,fp
 4017ef4:	401a4600 	call	401a460 <__pow5mult>
 4017ef8:	1021883a 	mov	r16,r2
 4017efc:	003f5a06 	br	4017c68 <__reset+0xfb016c68>
 4017f00:	01c00044 	movi	r7,1
 4017f04:	d9c00b15 	stw	r7,44(sp)
 4017f08:	d8802217 	ldw	r2,136(sp)
 4017f0c:	0081280e 	bge	zero,r2,40183b0 <_dtoa_r+0x11b0>
 4017f10:	100d883a 	mov	r6,r2
 4017f14:	1021883a 	mov	r16,r2
 4017f18:	d8800c15 	stw	r2,48(sp)
 4017f1c:	d8800615 	stw	r2,24(sp)
 4017f20:	003d8806 	br	4017544 <__reset+0xfb016544>
 4017f24:	d8800617 	ldw	r2,24(sp)
 4017f28:	00be9b16 	blt	zero,r2,4017998 <__reset+0xfb016998>
 4017f2c:	10010f1e 	bne	r2,zero,401836c <_dtoa_r+0x116c>
 4017f30:	880b883a 	mov	r5,r17
 4017f34:	000d883a 	mov	r6,zero
 4017f38:	01d00534 	movhi	r7,16404
 4017f3c:	8009883a 	mov	r4,r16
 4017f40:	40107440 	call	4010744 <__muldf3>
 4017f44:	900d883a 	mov	r6,r18
 4017f48:	980f883a 	mov	r7,r19
 4017f4c:	1009883a 	mov	r4,r2
 4017f50:	180b883a 	mov	r5,r3
 4017f54:	40105740 	call	4010574 <__gedf2>
 4017f58:	002b883a 	mov	r21,zero
 4017f5c:	0023883a 	mov	r17,zero
 4017f60:	1000bf16 	blt	r2,zero,4018260 <_dtoa_r+0x1060>
 4017f64:	d9802217 	ldw	r6,136(sp)
 4017f68:	ddc00717 	ldw	r23,28(sp)
 4017f6c:	018c303a 	nor	r6,zero,r6
 4017f70:	d9800515 	stw	r6,20(sp)
 4017f74:	a80b883a 	mov	r5,r21
 4017f78:	e009883a 	mov	r4,fp
 4017f7c:	4019ec80 	call	4019ec8 <_Bfree>
 4017f80:	883e4926 	beq	r17,zero,40178a8 <__reset+0xfb0168a8>
 4017f84:	003fad06 	br	4017e3c <__reset+0xfb016e3c>
 4017f88:	d9c01117 	ldw	r7,68(sp)
 4017f8c:	3801bc26 	beq	r7,zero,4018680 <_dtoa_r+0x1480>
 4017f90:	10810cc4 	addi	r2,r2,1075
 4017f94:	dd400a17 	ldw	r21,40(sp)
 4017f98:	dd000817 	ldw	r20,32(sp)
 4017f9c:	003f0a06 	br	4017bc8 <__reset+0xfb016bc8>
 4017fa0:	00800704 	movi	r2,28
 4017fa4:	d9000817 	ldw	r4,32(sp)
 4017fa8:	a0a9883a 	add	r20,r20,r2
 4017fac:	b0ad883a 	add	r22,r22,r2
 4017fb0:	2089883a 	add	r4,r4,r2
 4017fb4:	d9000815 	stw	r4,32(sp)
 4017fb8:	003f5106 	br	4017d00 <__reset+0xfb016d00>
 4017fbc:	d8c00317 	ldw	r3,12(sp)
 4017fc0:	b8c1fc0e 	bge	r23,r3,40187b4 <_dtoa_r+0x15b4>
 4017fc4:	0027883a 	mov	r19,zero
 4017fc8:	b805883a 	mov	r2,r23
 4017fcc:	003f3e06 	br	4017cc8 <__reset+0xfb016cc8>
 4017fd0:	880b883a 	mov	r5,r17
 4017fd4:	e009883a 	mov	r4,fp
 4017fd8:	000f883a 	mov	r7,zero
 4017fdc:	01800284 	movi	r6,10
 4017fe0:	4019ef00 	call	4019ef0 <__multadd>
 4017fe4:	d9000c17 	ldw	r4,48(sp)
 4017fe8:	1023883a 	mov	r17,r2
 4017fec:	0102040e 	bge	zero,r4,4018800 <_dtoa_r+0x1600>
 4017ff0:	d9000615 	stw	r4,24(sp)
 4017ff4:	0500050e 	bge	zero,r20,401800c <_dtoa_r+0xe0c>
 4017ff8:	880b883a 	mov	r5,r17
 4017ffc:	a00d883a 	mov	r6,r20
 4018000:	e009883a 	mov	r4,fp
 4018004:	401a5a00 	call	401a5a0 <__lshift>
 4018008:	1023883a 	mov	r17,r2
 401800c:	9801241e 	bne	r19,zero,40184a0 <_dtoa_r+0x12a0>
 4018010:	8829883a 	mov	r20,r17
 4018014:	d9000617 	ldw	r4,24(sp)
 4018018:	dcc00717 	ldw	r19,28(sp)
 401801c:	9480004c 	andi	r18,r18,1
 4018020:	20bfffc4 	addi	r2,r4,-1
 4018024:	9885883a 	add	r2,r19,r2
 4018028:	d8800415 	stw	r2,16(sp)
 401802c:	dc800615 	stw	r18,24(sp)
 4018030:	a80b883a 	mov	r5,r21
 4018034:	8009883a 	mov	r4,r16
 4018038:	40170000 	call	4017000 <quorem>
 401803c:	880b883a 	mov	r5,r17
 4018040:	8009883a 	mov	r4,r16
 4018044:	102f883a 	mov	r23,r2
 4018048:	401a6e80 	call	401a6e8 <__mcmp>
 401804c:	a80b883a 	mov	r5,r21
 4018050:	a00d883a 	mov	r6,r20
 4018054:	e009883a 	mov	r4,fp
 4018058:	102d883a 	mov	r22,r2
 401805c:	401a7480 	call	401a748 <__mdiff>
 4018060:	1007883a 	mov	r3,r2
 4018064:	10800317 	ldw	r2,12(r2)
 4018068:	bc800c04 	addi	r18,r23,48
 401806c:	180b883a 	mov	r5,r3
 4018070:	10004e1e 	bne	r2,zero,40181ac <_dtoa_r+0xfac>
 4018074:	8009883a 	mov	r4,r16
 4018078:	d8c01615 	stw	r3,88(sp)
 401807c:	401a6e80 	call	401a6e8 <__mcmp>
 4018080:	d8c01617 	ldw	r3,88(sp)
 4018084:	e009883a 	mov	r4,fp
 4018088:	d8801615 	stw	r2,88(sp)
 401808c:	180b883a 	mov	r5,r3
 4018090:	4019ec80 	call	4019ec8 <_Bfree>
 4018094:	d8801617 	ldw	r2,88(sp)
 4018098:	1000041e 	bne	r2,zero,40180ac <_dtoa_r+0xeac>
 401809c:	d9800317 	ldw	r6,12(sp)
 40180a0:	3000021e 	bne	r6,zero,40180ac <_dtoa_r+0xeac>
 40180a4:	d8c00617 	ldw	r3,24(sp)
 40180a8:	18003726 	beq	r3,zero,4018188 <_dtoa_r+0xf88>
 40180ac:	b0002016 	blt	r22,zero,4018130 <_dtoa_r+0xf30>
 40180b0:	b000041e 	bne	r22,zero,40180c4 <_dtoa_r+0xec4>
 40180b4:	d9000317 	ldw	r4,12(sp)
 40180b8:	2000021e 	bne	r4,zero,40180c4 <_dtoa_r+0xec4>
 40180bc:	d8c00617 	ldw	r3,24(sp)
 40180c0:	18001b26 	beq	r3,zero,4018130 <_dtoa_r+0xf30>
 40180c4:	00810716 	blt	zero,r2,40184e4 <_dtoa_r+0x12e4>
 40180c8:	d8c00417 	ldw	r3,16(sp)
 40180cc:	9d800044 	addi	r22,r19,1
 40180d0:	9c800005 	stb	r18,0(r19)
 40180d4:	b02f883a 	mov	r23,r22
 40180d8:	98c10626 	beq	r19,r3,40184f4 <_dtoa_r+0x12f4>
 40180dc:	800b883a 	mov	r5,r16
 40180e0:	000f883a 	mov	r7,zero
 40180e4:	01800284 	movi	r6,10
 40180e8:	e009883a 	mov	r4,fp
 40180ec:	4019ef00 	call	4019ef0 <__multadd>
 40180f0:	1021883a 	mov	r16,r2
 40180f4:	000f883a 	mov	r7,zero
 40180f8:	01800284 	movi	r6,10
 40180fc:	880b883a 	mov	r5,r17
 4018100:	e009883a 	mov	r4,fp
 4018104:	8d002526 	beq	r17,r20,401819c <_dtoa_r+0xf9c>
 4018108:	4019ef00 	call	4019ef0 <__multadd>
 401810c:	a00b883a 	mov	r5,r20
 4018110:	000f883a 	mov	r7,zero
 4018114:	01800284 	movi	r6,10
 4018118:	e009883a 	mov	r4,fp
 401811c:	1023883a 	mov	r17,r2
 4018120:	4019ef00 	call	4019ef0 <__multadd>
 4018124:	1029883a 	mov	r20,r2
 4018128:	b027883a 	mov	r19,r22
 401812c:	003fc006 	br	4018030 <__reset+0xfb017030>
 4018130:	9011883a 	mov	r8,r18
 4018134:	00800e0e 	bge	zero,r2,4018170 <_dtoa_r+0xf70>
 4018138:	800b883a 	mov	r5,r16
 401813c:	01800044 	movi	r6,1
 4018140:	e009883a 	mov	r4,fp
 4018144:	da001715 	stw	r8,92(sp)
 4018148:	401a5a00 	call	401a5a0 <__lshift>
 401814c:	a80b883a 	mov	r5,r21
 4018150:	1009883a 	mov	r4,r2
 4018154:	1021883a 	mov	r16,r2
 4018158:	401a6e80 	call	401a6e8 <__mcmp>
 401815c:	da001717 	ldw	r8,92(sp)
 4018160:	0081960e 	bge	zero,r2,40187bc <_dtoa_r+0x15bc>
 4018164:	00800e44 	movi	r2,57
 4018168:	40817026 	beq	r8,r2,401872c <_dtoa_r+0x152c>
 401816c:	ba000c44 	addi	r8,r23,49
 4018170:	8825883a 	mov	r18,r17
 4018174:	9dc00044 	addi	r23,r19,1
 4018178:	9a000005 	stb	r8,0(r19)
 401817c:	a023883a 	mov	r17,r20
 4018180:	dc000915 	stw	r16,36(sp)
 4018184:	003f2406 	br	4017e18 <__reset+0xfb016e18>
 4018188:	00800e44 	movi	r2,57
 401818c:	9011883a 	mov	r8,r18
 4018190:	90816626 	beq	r18,r2,401872c <_dtoa_r+0x152c>
 4018194:	05bff516 	blt	zero,r22,401816c <__reset+0xfb01716c>
 4018198:	003ff506 	br	4018170 <__reset+0xfb017170>
 401819c:	4019ef00 	call	4019ef0 <__multadd>
 40181a0:	1023883a 	mov	r17,r2
 40181a4:	1029883a 	mov	r20,r2
 40181a8:	003fdf06 	br	4018128 <__reset+0xfb017128>
 40181ac:	e009883a 	mov	r4,fp
 40181b0:	4019ec80 	call	4019ec8 <_Bfree>
 40181b4:	00800044 	movi	r2,1
 40181b8:	003fbc06 	br	40180ac <__reset+0xfb0170ac>
 40181bc:	a80b883a 	mov	r5,r21
 40181c0:	8009883a 	mov	r4,r16
 40181c4:	401a6e80 	call	401a6e8 <__mcmp>
 40181c8:	103edb0e 	bge	r2,zero,4017d38 <__reset+0xfb016d38>
 40181cc:	800b883a 	mov	r5,r16
 40181d0:	000f883a 	mov	r7,zero
 40181d4:	01800284 	movi	r6,10
 40181d8:	e009883a 	mov	r4,fp
 40181dc:	4019ef00 	call	4019ef0 <__multadd>
 40181e0:	1021883a 	mov	r16,r2
 40181e4:	d8800517 	ldw	r2,20(sp)
 40181e8:	d8c00b17 	ldw	r3,44(sp)
 40181ec:	10bfffc4 	addi	r2,r2,-1
 40181f0:	d8800515 	stw	r2,20(sp)
 40181f4:	183f761e 	bne	r3,zero,4017fd0 <__reset+0xfb016fd0>
 40181f8:	d9000c17 	ldw	r4,48(sp)
 40181fc:	0101730e 	bge	zero,r4,40187cc <_dtoa_r+0x15cc>
 4018200:	d9000615 	stw	r4,24(sp)
 4018204:	003ed006 	br	4017d48 <__reset+0xfb016d48>
 4018208:	00800084 	movi	r2,2
 401820c:	3081861e 	bne	r6,r2,4018828 <_dtoa_r+0x1628>
 4018210:	d8000b15 	stw	zero,44(sp)
 4018214:	003f3c06 	br	4017f08 <__reset+0xfb016f08>
 4018218:	dc000917 	ldw	r16,36(sp)
 401821c:	003e9206 	br	4017c68 <__reset+0xfb016c68>
 4018220:	d9c00317 	ldw	r7,12(sp)
 4018224:	00800084 	movi	r2,2
 4018228:	11fec50e 	bge	r2,r7,4017d40 <__reset+0xfb016d40>
 401822c:	d9000617 	ldw	r4,24(sp)
 4018230:	20013c1e 	bne	r4,zero,4018724 <_dtoa_r+0x1524>
 4018234:	a80b883a 	mov	r5,r21
 4018238:	000f883a 	mov	r7,zero
 401823c:	01800144 	movi	r6,5
 4018240:	e009883a 	mov	r4,fp
 4018244:	4019ef00 	call	4019ef0 <__multadd>
 4018248:	100b883a 	mov	r5,r2
 401824c:	8009883a 	mov	r4,r16
 4018250:	102b883a 	mov	r21,r2
 4018254:	401a6e80 	call	401a6e8 <__mcmp>
 4018258:	dc000915 	stw	r16,36(sp)
 401825c:	00bf410e 	bge	zero,r2,4017f64 <__reset+0xfb016f64>
 4018260:	d9c00717 	ldw	r7,28(sp)
 4018264:	00800c44 	movi	r2,49
 4018268:	38800005 	stb	r2,0(r7)
 401826c:	d8800517 	ldw	r2,20(sp)
 4018270:	3dc00044 	addi	r23,r7,1
 4018274:	10800044 	addi	r2,r2,1
 4018278:	d8800515 	stw	r2,20(sp)
 401827c:	003f3d06 	br	4017f74 <__reset+0xfb016f74>
 4018280:	d9800517 	ldw	r6,20(sp)
 4018284:	d9c00717 	ldw	r7,28(sp)
 4018288:	00800c44 	movi	r2,49
 401828c:	31800044 	addi	r6,r6,1
 4018290:	d9800515 	stw	r6,20(sp)
 4018294:	38800005 	stb	r2,0(r7)
 4018298:	003edf06 	br	4017e18 <__reset+0xfb016e18>
 401829c:	d8000b15 	stw	zero,44(sp)
 40182a0:	003c9f06 	br	4017520 <__reset+0xfb016520>
 40182a4:	903e7e1e 	bne	r18,zero,4017ca0 <__reset+0xfb016ca0>
 40182a8:	00800434 	movhi	r2,16
 40182ac:	10bfffc4 	addi	r2,r2,-1
 40182b0:	9884703a 	and	r2,r19,r2
 40182b4:	1000ea1e 	bne	r2,zero,4018660 <_dtoa_r+0x1460>
 40182b8:	9cdffc2c 	andhi	r19,r19,32752
 40182bc:	9800e826 	beq	r19,zero,4018660 <_dtoa_r+0x1460>
 40182c0:	d9c00817 	ldw	r7,32(sp)
 40182c4:	b5800044 	addi	r22,r22,1
 40182c8:	04c00044 	movi	r19,1
 40182cc:	39c00044 	addi	r7,r7,1
 40182d0:	d9c00815 	stw	r7,32(sp)
 40182d4:	d8800d17 	ldw	r2,52(sp)
 40182d8:	103e721e 	bne	r2,zero,4017ca4 <__reset+0xfb016ca4>
 40182dc:	00800044 	movi	r2,1
 40182e0:	003e7906 	br	4017cc8 <__reset+0xfb016cc8>
 40182e4:	8009883a 	mov	r4,r16
 40182e8:	40117d80 	call	40117d8 <__floatsidf>
 40182ec:	d9800f17 	ldw	r6,60(sp)
 40182f0:	d9c01017 	ldw	r7,64(sp)
 40182f4:	1009883a 	mov	r4,r2
 40182f8:	180b883a 	mov	r5,r3
 40182fc:	40107440 	call	4010744 <__muldf3>
 4018300:	000d883a 	mov	r6,zero
 4018304:	01d00734 	movhi	r7,16412
 4018308:	1009883a 	mov	r4,r2
 401830c:	180b883a 	mov	r5,r3
 4018310:	400f3580 	call	400f358 <__adddf3>
 4018314:	047f3034 	movhi	r17,64704
 4018318:	1021883a 	mov	r16,r2
 401831c:	1c63883a 	add	r17,r3,r17
 4018320:	d9000f17 	ldw	r4,60(sp)
 4018324:	d9401017 	ldw	r5,64(sp)
 4018328:	000d883a 	mov	r6,zero
 401832c:	01d00534 	movhi	r7,16404
 4018330:	4010e5c0 	call	4010e5c <__subdf3>
 4018334:	800d883a 	mov	r6,r16
 4018338:	880f883a 	mov	r7,r17
 401833c:	1009883a 	mov	r4,r2
 4018340:	180b883a 	mov	r5,r3
 4018344:	102b883a 	mov	r21,r2
 4018348:	1829883a 	mov	r20,r3
 401834c:	40105740 	call	4010574 <__gedf2>
 4018350:	00806c16 	blt	zero,r2,4018504 <_dtoa_r+0x1304>
 4018354:	89e0003c 	xorhi	r7,r17,32768
 4018358:	800d883a 	mov	r6,r16
 401835c:	a809883a 	mov	r4,r21
 4018360:	a00b883a 	mov	r5,r20
 4018364:	40106500 	call	4010650 <__ledf2>
 4018368:	103d7e0e 	bge	r2,zero,4017964 <__reset+0xfb016964>
 401836c:	002b883a 	mov	r21,zero
 4018370:	0023883a 	mov	r17,zero
 4018374:	003efb06 	br	4017f64 <__reset+0xfb016f64>
 4018378:	d8800717 	ldw	r2,28(sp)
 401837c:	003bd006 	br	40172c0 <__reset+0xfb0162c0>
 4018380:	d9000a17 	ldw	r4,40(sp)
 4018384:	d9800d17 	ldw	r6,52(sp)
 4018388:	dd400a15 	stw	r21,40(sp)
 401838c:	a905c83a 	sub	r2,r21,r4
 4018390:	308d883a 	add	r6,r6,r2
 4018394:	d9800d15 	stw	r6,52(sp)
 4018398:	002b883a 	mov	r21,zero
 401839c:	003e0606 	br	4017bb8 <__reset+0xfb016bb8>
 40183a0:	9023883a 	mov	r17,r18
 40183a4:	9829883a 	mov	r20,r19
 40183a8:	04000084 	movi	r16,2
 40183ac:	003c9206 	br	40175f8 <__reset+0xfb0165f8>
 40183b0:	04000044 	movi	r16,1
 40183b4:	dc000c15 	stw	r16,48(sp)
 40183b8:	dc000615 	stw	r16,24(sp)
 40183bc:	dc002215 	stw	r16,136(sp)
 40183c0:	e0001115 	stw	zero,68(fp)
 40183c4:	000b883a 	mov	r5,zero
 40183c8:	003c6906 	br	4017570 <__reset+0xfb016570>
 40183cc:	3021883a 	mov	r16,r6
 40183d0:	003ffb06 	br	40183c0 <__reset+0xfb0173c0>
 40183d4:	1000021e 	bne	r2,zero,40183e0 <_dtoa_r+0x11e0>
 40183d8:	4200004c 	andi	r8,r8,1
 40183dc:	403e7d1e 	bne	r8,zero,4017dd4 <__reset+0xfb016dd4>
 40183e0:	01000c04 	movi	r4,48
 40183e4:	00000106 	br	40183ec <_dtoa_r+0x11ec>
 40183e8:	102f883a 	mov	r23,r2
 40183ec:	b8bfffc4 	addi	r2,r23,-1
 40183f0:	10c00007 	ldb	r3,0(r2)
 40183f4:	193ffc26 	beq	r3,r4,40183e8 <__reset+0xfb0173e8>
 40183f8:	003e8706 	br	4017e18 <__reset+0xfb016e18>
 40183fc:	d8800517 	ldw	r2,20(sp)
 4018400:	00a3c83a 	sub	r17,zero,r2
 4018404:	8800a426 	beq	r17,zero,4018698 <_dtoa_r+0x1498>
 4018408:	888003cc 	andi	r2,r17,15
 401840c:	100490fa 	slli	r2,r2,3
 4018410:	00c10234 	movhi	r3,1032
 4018414:	18c7cf04 	addi	r3,r3,7996
 4018418:	1885883a 	add	r2,r3,r2
 401841c:	11800017 	ldw	r6,0(r2)
 4018420:	11c00117 	ldw	r7,4(r2)
 4018424:	9009883a 	mov	r4,r18
 4018428:	980b883a 	mov	r5,r19
 401842c:	8823d13a 	srai	r17,r17,4
 4018430:	40107440 	call	4010744 <__muldf3>
 4018434:	d8800f15 	stw	r2,60(sp)
 4018438:	d8c01015 	stw	r3,64(sp)
 401843c:	8800e826 	beq	r17,zero,40187e0 <_dtoa_r+0x15e0>
 4018440:	05010234 	movhi	r20,1032
 4018444:	a507c504 	addi	r20,r20,7956
 4018448:	04000084 	movi	r16,2
 401844c:	8980004c 	andi	r6,r17,1
 4018450:	1009883a 	mov	r4,r2
 4018454:	8823d07a 	srai	r17,r17,1
 4018458:	180b883a 	mov	r5,r3
 401845c:	30000426 	beq	r6,zero,4018470 <_dtoa_r+0x1270>
 4018460:	a1800017 	ldw	r6,0(r20)
 4018464:	a1c00117 	ldw	r7,4(r20)
 4018468:	84000044 	addi	r16,r16,1
 401846c:	40107440 	call	4010744 <__muldf3>
 4018470:	a5000204 	addi	r20,r20,8
 4018474:	883ff51e 	bne	r17,zero,401844c <__reset+0xfb01744c>
 4018478:	d8800f15 	stw	r2,60(sp)
 401847c:	d8c01015 	stw	r3,64(sp)
 4018480:	003c7606 	br	401765c <__reset+0xfb01665c>
 4018484:	00c00c04 	movi	r3,48
 4018488:	10c00005 	stb	r3,0(r2)
 401848c:	d8c00517 	ldw	r3,20(sp)
 4018490:	bd3fffc3 	ldbu	r20,-1(r23)
 4018494:	18c00044 	addi	r3,r3,1
 4018498:	d8c00515 	stw	r3,20(sp)
 401849c:	003db906 	br	4017b84 <__reset+0xfb016b84>
 40184a0:	89400117 	ldw	r5,4(r17)
 40184a4:	e009883a 	mov	r4,fp
 40184a8:	4019e200 	call	4019e20 <_Balloc>
 40184ac:	89800417 	ldw	r6,16(r17)
 40184b0:	89400304 	addi	r5,r17,12
 40184b4:	11000304 	addi	r4,r2,12
 40184b8:	31800084 	addi	r6,r6,2
 40184bc:	318d883a 	add	r6,r6,r6
 40184c0:	318d883a 	add	r6,r6,r6
 40184c4:	1027883a 	mov	r19,r2
 40184c8:	40124140 	call	4012414 <memcpy>
 40184cc:	01800044 	movi	r6,1
 40184d0:	980b883a 	mov	r5,r19
 40184d4:	e009883a 	mov	r4,fp
 40184d8:	401a5a00 	call	401a5a0 <__lshift>
 40184dc:	1029883a 	mov	r20,r2
 40184e0:	003ecc06 	br	4018014 <__reset+0xfb017014>
 40184e4:	00800e44 	movi	r2,57
 40184e8:	90809026 	beq	r18,r2,401872c <_dtoa_r+0x152c>
 40184ec:	92000044 	addi	r8,r18,1
 40184f0:	003f1f06 	br	4018170 <__reset+0xfb017170>
 40184f4:	9011883a 	mov	r8,r18
 40184f8:	8825883a 	mov	r18,r17
 40184fc:	a023883a 	mov	r17,r20
 4018500:	003e2906 	br	4017da8 <__reset+0xfb016da8>
 4018504:	002b883a 	mov	r21,zero
 4018508:	0023883a 	mov	r17,zero
 401850c:	003f5406 	br	4018260 <__reset+0xfb017260>
 4018510:	61bfffc4 	addi	r6,r12,-1
 4018514:	300490fa 	slli	r2,r6,3
 4018518:	00c10234 	movhi	r3,1032
 401851c:	18c7cf04 	addi	r3,r3,7996
 4018520:	1885883a 	add	r2,r3,r2
 4018524:	11000017 	ldw	r4,0(r2)
 4018528:	11400117 	ldw	r5,4(r2)
 401852c:	d8800717 	ldw	r2,28(sp)
 4018530:	880f883a 	mov	r7,r17
 4018534:	d9801215 	stw	r6,72(sp)
 4018538:	800d883a 	mov	r6,r16
 401853c:	db001615 	stw	r12,88(sp)
 4018540:	15c00044 	addi	r23,r2,1
 4018544:	40107440 	call	4010744 <__muldf3>
 4018548:	d9401017 	ldw	r5,64(sp)
 401854c:	d9000f17 	ldw	r4,60(sp)
 4018550:	d8c01515 	stw	r3,84(sp)
 4018554:	d8801415 	stw	r2,80(sp)
 4018558:	40117580 	call	4011758 <__fixdfsi>
 401855c:	1009883a 	mov	r4,r2
 4018560:	1021883a 	mov	r16,r2
 4018564:	40117d80 	call	40117d8 <__floatsidf>
 4018568:	d9000f17 	ldw	r4,60(sp)
 401856c:	d9401017 	ldw	r5,64(sp)
 4018570:	100d883a 	mov	r6,r2
 4018574:	180f883a 	mov	r7,r3
 4018578:	4010e5c0 	call	4010e5c <__subdf3>
 401857c:	1829883a 	mov	r20,r3
 4018580:	d8c00717 	ldw	r3,28(sp)
 4018584:	84000c04 	addi	r16,r16,48
 4018588:	1023883a 	mov	r17,r2
 401858c:	1c000005 	stb	r16,0(r3)
 4018590:	db001617 	ldw	r12,88(sp)
 4018594:	00800044 	movi	r2,1
 4018598:	60802226 	beq	r12,r2,4018624 <_dtoa_r+0x1424>
 401859c:	d9c00717 	ldw	r7,28(sp)
 40185a0:	8805883a 	mov	r2,r17
 40185a4:	b82b883a 	mov	r21,r23
 40185a8:	3b19883a 	add	r12,r7,r12
 40185ac:	6023883a 	mov	r17,r12
 40185b0:	a007883a 	mov	r3,r20
 40185b4:	dc800f15 	stw	r18,60(sp)
 40185b8:	000d883a 	mov	r6,zero
 40185bc:	01d00934 	movhi	r7,16420
 40185c0:	1009883a 	mov	r4,r2
 40185c4:	180b883a 	mov	r5,r3
 40185c8:	40107440 	call	4010744 <__muldf3>
 40185cc:	180b883a 	mov	r5,r3
 40185d0:	1009883a 	mov	r4,r2
 40185d4:	1829883a 	mov	r20,r3
 40185d8:	1025883a 	mov	r18,r2
 40185dc:	40117580 	call	4011758 <__fixdfsi>
 40185e0:	1009883a 	mov	r4,r2
 40185e4:	1021883a 	mov	r16,r2
 40185e8:	40117d80 	call	40117d8 <__floatsidf>
 40185ec:	100d883a 	mov	r6,r2
 40185f0:	180f883a 	mov	r7,r3
 40185f4:	9009883a 	mov	r4,r18
 40185f8:	a00b883a 	mov	r5,r20
 40185fc:	84000c04 	addi	r16,r16,48
 4018600:	4010e5c0 	call	4010e5c <__subdf3>
 4018604:	ad400044 	addi	r21,r21,1
 4018608:	ac3fffc5 	stb	r16,-1(r21)
 401860c:	ac7fea1e 	bne	r21,r17,40185b8 <__reset+0xfb0175b8>
 4018610:	1023883a 	mov	r17,r2
 4018614:	d8801217 	ldw	r2,72(sp)
 4018618:	dc800f17 	ldw	r18,60(sp)
 401861c:	1829883a 	mov	r20,r3
 4018620:	b8af883a 	add	r23,r23,r2
 4018624:	d9001417 	ldw	r4,80(sp)
 4018628:	d9401517 	ldw	r5,84(sp)
 401862c:	000d883a 	mov	r6,zero
 4018630:	01cff834 	movhi	r7,16352
 4018634:	400f3580 	call	400f358 <__adddf3>
 4018638:	880d883a 	mov	r6,r17
 401863c:	a00f883a 	mov	r7,r20
 4018640:	1009883a 	mov	r4,r2
 4018644:	180b883a 	mov	r5,r3
 4018648:	40106500 	call	4010650 <__ledf2>
 401864c:	10003e0e 	bge	r2,zero,4018748 <_dtoa_r+0x1548>
 4018650:	d9001317 	ldw	r4,76(sp)
 4018654:	bd3fffc3 	ldbu	r20,-1(r23)
 4018658:	d9000515 	stw	r4,20(sp)
 401865c:	003d3b06 	br	4017b4c <__reset+0xfb016b4c>
 4018660:	0027883a 	mov	r19,zero
 4018664:	003f1b06 	br	40182d4 <__reset+0xfb0172d4>
 4018668:	d8800817 	ldw	r2,32(sp)
 401866c:	11e9c83a 	sub	r20,r2,r7
 4018670:	0005883a 	mov	r2,zero
 4018674:	003d5406 	br	4017bc8 <__reset+0xfb016bc8>
 4018678:	00800044 	movi	r2,1
 401867c:	003dc706 	br	4017d9c <__reset+0xfb016d9c>
 4018680:	d8c00217 	ldw	r3,8(sp)
 4018684:	00800d84 	movi	r2,54
 4018688:	dd400a17 	ldw	r21,40(sp)
 401868c:	10c5c83a 	sub	r2,r2,r3
 4018690:	dd000817 	ldw	r20,32(sp)
 4018694:	003d4c06 	br	4017bc8 <__reset+0xfb016bc8>
 4018698:	dc800f15 	stw	r18,60(sp)
 401869c:	dcc01015 	stw	r19,64(sp)
 40186a0:	04000084 	movi	r16,2
 40186a4:	003bed06 	br	401765c <__reset+0xfb01665c>
 40186a8:	d9000617 	ldw	r4,24(sp)
 40186ac:	203f0d26 	beq	r4,zero,40182e4 <__reset+0xfb0172e4>
 40186b0:	d9800c17 	ldw	r6,48(sp)
 40186b4:	01bcab0e 	bge	zero,r6,4017964 <__reset+0xfb016964>
 40186b8:	d9401017 	ldw	r5,64(sp)
 40186bc:	d9000f17 	ldw	r4,60(sp)
 40186c0:	000d883a 	mov	r6,zero
 40186c4:	01d00934 	movhi	r7,16420
 40186c8:	40107440 	call	4010744 <__muldf3>
 40186cc:	81000044 	addi	r4,r16,1
 40186d0:	d8800f15 	stw	r2,60(sp)
 40186d4:	d8c01015 	stw	r3,64(sp)
 40186d8:	40117d80 	call	40117d8 <__floatsidf>
 40186dc:	d9800f17 	ldw	r6,60(sp)
 40186e0:	d9c01017 	ldw	r7,64(sp)
 40186e4:	1009883a 	mov	r4,r2
 40186e8:	180b883a 	mov	r5,r3
 40186ec:	40107440 	call	4010744 <__muldf3>
 40186f0:	01d00734 	movhi	r7,16412
 40186f4:	000d883a 	mov	r6,zero
 40186f8:	1009883a 	mov	r4,r2
 40186fc:	180b883a 	mov	r5,r3
 4018700:	400f3580 	call	400f358 <__adddf3>
 4018704:	d9c00517 	ldw	r7,20(sp)
 4018708:	047f3034 	movhi	r17,64704
 401870c:	1021883a 	mov	r16,r2
 4018710:	39ffffc4 	addi	r7,r7,-1
 4018714:	d9c01315 	stw	r7,76(sp)
 4018718:	1c63883a 	add	r17,r3,r17
 401871c:	db000c17 	ldw	r12,48(sp)
 4018720:	003bea06 	br	40176cc <__reset+0xfb0166cc>
 4018724:	dc000915 	stw	r16,36(sp)
 4018728:	003e0e06 	br	4017f64 <__reset+0xfb016f64>
 401872c:	01000e44 	movi	r4,57
 4018730:	8825883a 	mov	r18,r17
 4018734:	9dc00044 	addi	r23,r19,1
 4018738:	99000005 	stb	r4,0(r19)
 401873c:	a023883a 	mov	r17,r20
 4018740:	dc000915 	stw	r16,36(sp)
 4018744:	003da406 	br	4017dd8 <__reset+0xfb016dd8>
 4018748:	d9801417 	ldw	r6,80(sp)
 401874c:	d9c01517 	ldw	r7,84(sp)
 4018750:	0009883a 	mov	r4,zero
 4018754:	014ff834 	movhi	r5,16352
 4018758:	4010e5c0 	call	4010e5c <__subdf3>
 401875c:	880d883a 	mov	r6,r17
 4018760:	a00f883a 	mov	r7,r20
 4018764:	1009883a 	mov	r4,r2
 4018768:	180b883a 	mov	r5,r3
 401876c:	40105740 	call	4010574 <__gedf2>
 4018770:	00bc7c0e 	bge	zero,r2,4017964 <__reset+0xfb016964>
 4018774:	01000c04 	movi	r4,48
 4018778:	00000106 	br	4018780 <_dtoa_r+0x1580>
 401877c:	102f883a 	mov	r23,r2
 4018780:	b8bfffc4 	addi	r2,r23,-1
 4018784:	10c00007 	ldb	r3,0(r2)
 4018788:	193ffc26 	beq	r3,r4,401877c <__reset+0xfb01777c>
 401878c:	d9801317 	ldw	r6,76(sp)
 4018790:	d9800515 	stw	r6,20(sp)
 4018794:	003c4406 	br	40178a8 <__reset+0xfb0168a8>
 4018798:	d9801317 	ldw	r6,76(sp)
 401879c:	d9800515 	stw	r6,20(sp)
 40187a0:	003cea06 	br	4017b4c <__reset+0xfb016b4c>
 40187a4:	dd800f17 	ldw	r22,60(sp)
 40187a8:	dcc01017 	ldw	r19,64(sp)
 40187ac:	dc801217 	ldw	r18,72(sp)
 40187b0:	003c6c06 	br	4017964 <__reset+0xfb016964>
 40187b4:	903e031e 	bne	r18,zero,4017fc4 <__reset+0xfb016fc4>
 40187b8:	003ebb06 	br	40182a8 <__reset+0xfb0172a8>
 40187bc:	103e6c1e 	bne	r2,zero,4018170 <__reset+0xfb017170>
 40187c0:	4080004c 	andi	r2,r8,1
 40187c4:	103e6a26 	beq	r2,zero,4018170 <__reset+0xfb017170>
 40187c8:	003e6606 	br	4018164 <__reset+0xfb017164>
 40187cc:	d8c00317 	ldw	r3,12(sp)
 40187d0:	00800084 	movi	r2,2
 40187d4:	10c02916 	blt	r2,r3,401887c <_dtoa_r+0x167c>
 40187d8:	d9000c17 	ldw	r4,48(sp)
 40187dc:	003e8806 	br	4018200 <__reset+0xfb017200>
 40187e0:	04000084 	movi	r16,2
 40187e4:	003b9d06 	br	401765c <__reset+0xfb01665c>
 40187e8:	d9001317 	ldw	r4,76(sp)
 40187ec:	d9000515 	stw	r4,20(sp)
 40187f0:	003cd606 	br	4017b4c <__reset+0xfb016b4c>
 40187f4:	d8801317 	ldw	r2,76(sp)
 40187f8:	d8800515 	stw	r2,20(sp)
 40187fc:	003c2a06 	br	40178a8 <__reset+0xfb0168a8>
 4018800:	d9800317 	ldw	r6,12(sp)
 4018804:	00800084 	movi	r2,2
 4018808:	11801516 	blt	r2,r6,4018860 <_dtoa_r+0x1660>
 401880c:	d9c00c17 	ldw	r7,48(sp)
 4018810:	d9c00615 	stw	r7,24(sp)
 4018814:	003df706 	br	4017ff4 <__reset+0xfb016ff4>
 4018818:	193d3926 	beq	r3,r4,4017d00 <__reset+0xfb016d00>
 401881c:	00c00f04 	movi	r3,60
 4018820:	1885c83a 	sub	r2,r3,r2
 4018824:	003ddf06 	br	4017fa4 <__reset+0xfb016fa4>
 4018828:	e009883a 	mov	r4,fp
 401882c:	e0001115 	stw	zero,68(fp)
 4018830:	000b883a 	mov	r5,zero
 4018834:	4019e200 	call	4019e20 <_Balloc>
 4018838:	d8800715 	stw	r2,28(sp)
 401883c:	d8c00717 	ldw	r3,28(sp)
 4018840:	00bfffc4 	movi	r2,-1
 4018844:	01000044 	movi	r4,1
 4018848:	d8800c15 	stw	r2,48(sp)
 401884c:	e0c01015 	stw	r3,64(fp)
 4018850:	d9000b15 	stw	r4,44(sp)
 4018854:	d8800615 	stw	r2,24(sp)
 4018858:	d8002215 	stw	zero,136(sp)
 401885c:	003c4106 	br	4017964 <__reset+0xfb016964>
 4018860:	d8c00c17 	ldw	r3,48(sp)
 4018864:	d8c00615 	stw	r3,24(sp)
 4018868:	003e7006 	br	401822c <__reset+0xfb01722c>
 401886c:	04400044 	movi	r17,1
 4018870:	003b2006 	br	40174f4 <__reset+0xfb0164f4>
 4018874:	000b883a 	mov	r5,zero
 4018878:	003b3d06 	br	4017570 <__reset+0xfb016570>
 401887c:	d8800c17 	ldw	r2,48(sp)
 4018880:	d8800615 	stw	r2,24(sp)
 4018884:	003e6906 	br	401822c <__reset+0xfb01722c>

04018888 <__sflush_r>:
 4018888:	2880030b 	ldhu	r2,12(r5)
 401888c:	defffb04 	addi	sp,sp,-20
 4018890:	dcc00315 	stw	r19,12(sp)
 4018894:	dc400115 	stw	r17,4(sp)
 4018898:	dfc00415 	stw	ra,16(sp)
 401889c:	dc800215 	stw	r18,8(sp)
 40188a0:	dc000015 	stw	r16,0(sp)
 40188a4:	10c0020c 	andi	r3,r2,8
 40188a8:	2823883a 	mov	r17,r5
 40188ac:	2027883a 	mov	r19,r4
 40188b0:	1800311e 	bne	r3,zero,4018978 <__sflush_r+0xf0>
 40188b4:	28c00117 	ldw	r3,4(r5)
 40188b8:	10820014 	ori	r2,r2,2048
 40188bc:	2880030d 	sth	r2,12(r5)
 40188c0:	00c04b0e 	bge	zero,r3,40189f0 <__sflush_r+0x168>
 40188c4:	8a000a17 	ldw	r8,40(r17)
 40188c8:	40002326 	beq	r8,zero,4018958 <__sflush_r+0xd0>
 40188cc:	9c000017 	ldw	r16,0(r19)
 40188d0:	10c4000c 	andi	r3,r2,4096
 40188d4:	98000015 	stw	zero,0(r19)
 40188d8:	18004826 	beq	r3,zero,40189fc <__sflush_r+0x174>
 40188dc:	89801417 	ldw	r6,80(r17)
 40188e0:	10c0010c 	andi	r3,r2,4
 40188e4:	18000626 	beq	r3,zero,4018900 <__sflush_r+0x78>
 40188e8:	88c00117 	ldw	r3,4(r17)
 40188ec:	88800c17 	ldw	r2,48(r17)
 40188f0:	30cdc83a 	sub	r6,r6,r3
 40188f4:	10000226 	beq	r2,zero,4018900 <__sflush_r+0x78>
 40188f8:	88800f17 	ldw	r2,60(r17)
 40188fc:	308dc83a 	sub	r6,r6,r2
 4018900:	89400717 	ldw	r5,28(r17)
 4018904:	000f883a 	mov	r7,zero
 4018908:	9809883a 	mov	r4,r19
 401890c:	403ee83a 	callr	r8
 4018910:	00ffffc4 	movi	r3,-1
 4018914:	10c04426 	beq	r2,r3,4018a28 <__sflush_r+0x1a0>
 4018918:	88c0030b 	ldhu	r3,12(r17)
 401891c:	89000417 	ldw	r4,16(r17)
 4018920:	88000115 	stw	zero,4(r17)
 4018924:	197dffcc 	andi	r5,r3,63487
 4018928:	8940030d 	sth	r5,12(r17)
 401892c:	89000015 	stw	r4,0(r17)
 4018930:	18c4000c 	andi	r3,r3,4096
 4018934:	18002c1e 	bne	r3,zero,40189e8 <__sflush_r+0x160>
 4018938:	89400c17 	ldw	r5,48(r17)
 401893c:	9c000015 	stw	r16,0(r19)
 4018940:	28000526 	beq	r5,zero,4018958 <__sflush_r+0xd0>
 4018944:	88801004 	addi	r2,r17,64
 4018948:	28800226 	beq	r5,r2,4018954 <__sflush_r+0xcc>
 401894c:	9809883a 	mov	r4,r19
 4018950:	4018ff40 	call	4018ff4 <_free_r>
 4018954:	88000c15 	stw	zero,48(r17)
 4018958:	0005883a 	mov	r2,zero
 401895c:	dfc00417 	ldw	ra,16(sp)
 4018960:	dcc00317 	ldw	r19,12(sp)
 4018964:	dc800217 	ldw	r18,8(sp)
 4018968:	dc400117 	ldw	r17,4(sp)
 401896c:	dc000017 	ldw	r16,0(sp)
 4018970:	dec00504 	addi	sp,sp,20
 4018974:	f800283a 	ret
 4018978:	2c800417 	ldw	r18,16(r5)
 401897c:	903ff626 	beq	r18,zero,4018958 <__reset+0xfb017958>
 4018980:	2c000017 	ldw	r16,0(r5)
 4018984:	108000cc 	andi	r2,r2,3
 4018988:	2c800015 	stw	r18,0(r5)
 401898c:	84a1c83a 	sub	r16,r16,r18
 4018990:	1000131e 	bne	r2,zero,40189e0 <__sflush_r+0x158>
 4018994:	28800517 	ldw	r2,20(r5)
 4018998:	88800215 	stw	r2,8(r17)
 401899c:	04000316 	blt	zero,r16,40189ac <__sflush_r+0x124>
 40189a0:	003fed06 	br	4018958 <__reset+0xfb017958>
 40189a4:	90a5883a 	add	r18,r18,r2
 40189a8:	043feb0e 	bge	zero,r16,4018958 <__reset+0xfb017958>
 40189ac:	88800917 	ldw	r2,36(r17)
 40189b0:	89400717 	ldw	r5,28(r17)
 40189b4:	800f883a 	mov	r7,r16
 40189b8:	900d883a 	mov	r6,r18
 40189bc:	9809883a 	mov	r4,r19
 40189c0:	103ee83a 	callr	r2
 40189c4:	80a1c83a 	sub	r16,r16,r2
 40189c8:	00bff616 	blt	zero,r2,40189a4 <__reset+0xfb0179a4>
 40189cc:	88c0030b 	ldhu	r3,12(r17)
 40189d0:	00bfffc4 	movi	r2,-1
 40189d4:	18c01014 	ori	r3,r3,64
 40189d8:	88c0030d 	sth	r3,12(r17)
 40189dc:	003fdf06 	br	401895c <__reset+0xfb01795c>
 40189e0:	0005883a 	mov	r2,zero
 40189e4:	003fec06 	br	4018998 <__reset+0xfb017998>
 40189e8:	88801415 	stw	r2,80(r17)
 40189ec:	003fd206 	br	4018938 <__reset+0xfb017938>
 40189f0:	28c00f17 	ldw	r3,60(r5)
 40189f4:	00ffb316 	blt	zero,r3,40188c4 <__reset+0xfb0178c4>
 40189f8:	003fd706 	br	4018958 <__reset+0xfb017958>
 40189fc:	89400717 	ldw	r5,28(r17)
 4018a00:	000d883a 	mov	r6,zero
 4018a04:	01c00044 	movi	r7,1
 4018a08:	9809883a 	mov	r4,r19
 4018a0c:	403ee83a 	callr	r8
 4018a10:	100d883a 	mov	r6,r2
 4018a14:	00bfffc4 	movi	r2,-1
 4018a18:	30801426 	beq	r6,r2,4018a6c <__sflush_r+0x1e4>
 4018a1c:	8880030b 	ldhu	r2,12(r17)
 4018a20:	8a000a17 	ldw	r8,40(r17)
 4018a24:	003fae06 	br	40188e0 <__reset+0xfb0178e0>
 4018a28:	98c00017 	ldw	r3,0(r19)
 4018a2c:	183fba26 	beq	r3,zero,4018918 <__reset+0xfb017918>
 4018a30:	01000744 	movi	r4,29
 4018a34:	19000626 	beq	r3,r4,4018a50 <__sflush_r+0x1c8>
 4018a38:	01000584 	movi	r4,22
 4018a3c:	19000426 	beq	r3,r4,4018a50 <__sflush_r+0x1c8>
 4018a40:	88c0030b 	ldhu	r3,12(r17)
 4018a44:	18c01014 	ori	r3,r3,64
 4018a48:	88c0030d 	sth	r3,12(r17)
 4018a4c:	003fc306 	br	401895c <__reset+0xfb01795c>
 4018a50:	8880030b 	ldhu	r2,12(r17)
 4018a54:	88c00417 	ldw	r3,16(r17)
 4018a58:	88000115 	stw	zero,4(r17)
 4018a5c:	10bdffcc 	andi	r2,r2,63487
 4018a60:	8880030d 	sth	r2,12(r17)
 4018a64:	88c00015 	stw	r3,0(r17)
 4018a68:	003fb306 	br	4018938 <__reset+0xfb017938>
 4018a6c:	98800017 	ldw	r2,0(r19)
 4018a70:	103fea26 	beq	r2,zero,4018a1c <__reset+0xfb017a1c>
 4018a74:	00c00744 	movi	r3,29
 4018a78:	10c00226 	beq	r2,r3,4018a84 <__sflush_r+0x1fc>
 4018a7c:	00c00584 	movi	r3,22
 4018a80:	10c0031e 	bne	r2,r3,4018a90 <__sflush_r+0x208>
 4018a84:	9c000015 	stw	r16,0(r19)
 4018a88:	0005883a 	mov	r2,zero
 4018a8c:	003fb306 	br	401895c <__reset+0xfb01795c>
 4018a90:	88c0030b 	ldhu	r3,12(r17)
 4018a94:	3005883a 	mov	r2,r6
 4018a98:	18c01014 	ori	r3,r3,64
 4018a9c:	88c0030d 	sth	r3,12(r17)
 4018aa0:	003fae06 	br	401895c <__reset+0xfb01795c>

04018aa4 <_fflush_r>:
 4018aa4:	defffd04 	addi	sp,sp,-12
 4018aa8:	dc000115 	stw	r16,4(sp)
 4018aac:	dfc00215 	stw	ra,8(sp)
 4018ab0:	2021883a 	mov	r16,r4
 4018ab4:	20000226 	beq	r4,zero,4018ac0 <_fflush_r+0x1c>
 4018ab8:	20800e17 	ldw	r2,56(r4)
 4018abc:	10000c26 	beq	r2,zero,4018af0 <_fflush_r+0x4c>
 4018ac0:	2880030f 	ldh	r2,12(r5)
 4018ac4:	1000051e 	bne	r2,zero,4018adc <_fflush_r+0x38>
 4018ac8:	0005883a 	mov	r2,zero
 4018acc:	dfc00217 	ldw	ra,8(sp)
 4018ad0:	dc000117 	ldw	r16,4(sp)
 4018ad4:	dec00304 	addi	sp,sp,12
 4018ad8:	f800283a 	ret
 4018adc:	8009883a 	mov	r4,r16
 4018ae0:	dfc00217 	ldw	ra,8(sp)
 4018ae4:	dc000117 	ldw	r16,4(sp)
 4018ae8:	dec00304 	addi	sp,sp,12
 4018aec:	40188881 	jmpi	4018888 <__sflush_r>
 4018af0:	d9400015 	stw	r5,0(sp)
 4018af4:	4018e800 	call	4018e80 <__sinit>
 4018af8:	d9400017 	ldw	r5,0(sp)
 4018afc:	003ff006 	br	4018ac0 <__reset+0xfb017ac0>

04018b00 <fflush>:
 4018b00:	20000526 	beq	r4,zero,4018b18 <fflush+0x18>
 4018b04:	00810474 	movhi	r2,1041
 4018b08:	109a5804 	addi	r2,r2,26976
 4018b0c:	200b883a 	mov	r5,r4
 4018b10:	11000017 	ldw	r4,0(r2)
 4018b14:	4018aa41 	jmpi	4018aa4 <_fflush_r>
 4018b18:	00810474 	movhi	r2,1041
 4018b1c:	109a5704 	addi	r2,r2,26972
 4018b20:	11000017 	ldw	r4,0(r2)
 4018b24:	014100b4 	movhi	r5,1026
 4018b28:	2962a904 	addi	r5,r5,-30044
 4018b2c:	40198841 	jmpi	4019884 <_fwalk_reent>

04018b30 <__fp_unlock>:
 4018b30:	0005883a 	mov	r2,zero
 4018b34:	f800283a 	ret

04018b38 <_cleanup_r>:
 4018b38:	014100b4 	movhi	r5,1026
 4018b3c:	29785904 	addi	r5,r5,-7836
 4018b40:	40198841 	jmpi	4019884 <_fwalk_reent>

04018b44 <__sinit.part.1>:
 4018b44:	defff704 	addi	sp,sp,-36
 4018b48:	00c100b4 	movhi	r3,1026
 4018b4c:	dfc00815 	stw	ra,32(sp)
 4018b50:	ddc00715 	stw	r23,28(sp)
 4018b54:	dd800615 	stw	r22,24(sp)
 4018b58:	dd400515 	stw	r21,20(sp)
 4018b5c:	dd000415 	stw	r20,16(sp)
 4018b60:	dcc00315 	stw	r19,12(sp)
 4018b64:	dc800215 	stw	r18,8(sp)
 4018b68:	dc400115 	stw	r17,4(sp)
 4018b6c:	dc000015 	stw	r16,0(sp)
 4018b70:	18e2ce04 	addi	r3,r3,-29896
 4018b74:	24000117 	ldw	r16,4(r4)
 4018b78:	20c00f15 	stw	r3,60(r4)
 4018b7c:	2080bb04 	addi	r2,r4,748
 4018b80:	00c000c4 	movi	r3,3
 4018b84:	20c0b915 	stw	r3,740(r4)
 4018b88:	2080ba15 	stw	r2,744(r4)
 4018b8c:	2000b815 	stw	zero,736(r4)
 4018b90:	05c00204 	movi	r23,8
 4018b94:	00800104 	movi	r2,4
 4018b98:	2025883a 	mov	r18,r4
 4018b9c:	b80d883a 	mov	r6,r23
 4018ba0:	81001704 	addi	r4,r16,92
 4018ba4:	000b883a 	mov	r5,zero
 4018ba8:	80000015 	stw	zero,0(r16)
 4018bac:	80000115 	stw	zero,4(r16)
 4018bb0:	80000215 	stw	zero,8(r16)
 4018bb4:	8080030d 	sth	r2,12(r16)
 4018bb8:	80001915 	stw	zero,100(r16)
 4018bbc:	8000038d 	sth	zero,14(r16)
 4018bc0:	80000415 	stw	zero,16(r16)
 4018bc4:	80000515 	stw	zero,20(r16)
 4018bc8:	80000615 	stw	zero,24(r16)
 4018bcc:	401255c0 	call	401255c <memset>
 4018bd0:	058100b4 	movhi	r22,1026
 4018bd4:	94400217 	ldw	r17,8(r18)
 4018bd8:	054100b4 	movhi	r21,1026
 4018bdc:	050100b4 	movhi	r20,1026
 4018be0:	04c100b4 	movhi	r19,1026
 4018be4:	b5ace004 	addi	r22,r22,-19584
 4018be8:	ad6cf704 	addi	r21,r21,-19492
 4018bec:	a52d1604 	addi	r20,r20,-19368
 4018bf0:	9ced2d04 	addi	r19,r19,-19276
 4018bf4:	85800815 	stw	r22,32(r16)
 4018bf8:	85400915 	stw	r21,36(r16)
 4018bfc:	85000a15 	stw	r20,40(r16)
 4018c00:	84c00b15 	stw	r19,44(r16)
 4018c04:	84000715 	stw	r16,28(r16)
 4018c08:	00800284 	movi	r2,10
 4018c0c:	8880030d 	sth	r2,12(r17)
 4018c10:	00800044 	movi	r2,1
 4018c14:	b80d883a 	mov	r6,r23
 4018c18:	89001704 	addi	r4,r17,92
 4018c1c:	000b883a 	mov	r5,zero
 4018c20:	88000015 	stw	zero,0(r17)
 4018c24:	88000115 	stw	zero,4(r17)
 4018c28:	88000215 	stw	zero,8(r17)
 4018c2c:	88001915 	stw	zero,100(r17)
 4018c30:	8880038d 	sth	r2,14(r17)
 4018c34:	88000415 	stw	zero,16(r17)
 4018c38:	88000515 	stw	zero,20(r17)
 4018c3c:	88000615 	stw	zero,24(r17)
 4018c40:	401255c0 	call	401255c <memset>
 4018c44:	94000317 	ldw	r16,12(r18)
 4018c48:	00800484 	movi	r2,18
 4018c4c:	8c400715 	stw	r17,28(r17)
 4018c50:	8d800815 	stw	r22,32(r17)
 4018c54:	8d400915 	stw	r21,36(r17)
 4018c58:	8d000a15 	stw	r20,40(r17)
 4018c5c:	8cc00b15 	stw	r19,44(r17)
 4018c60:	8080030d 	sth	r2,12(r16)
 4018c64:	00800084 	movi	r2,2
 4018c68:	80000015 	stw	zero,0(r16)
 4018c6c:	80000115 	stw	zero,4(r16)
 4018c70:	80000215 	stw	zero,8(r16)
 4018c74:	80001915 	stw	zero,100(r16)
 4018c78:	8080038d 	sth	r2,14(r16)
 4018c7c:	80000415 	stw	zero,16(r16)
 4018c80:	80000515 	stw	zero,20(r16)
 4018c84:	80000615 	stw	zero,24(r16)
 4018c88:	b80d883a 	mov	r6,r23
 4018c8c:	000b883a 	mov	r5,zero
 4018c90:	81001704 	addi	r4,r16,92
 4018c94:	401255c0 	call	401255c <memset>
 4018c98:	00800044 	movi	r2,1
 4018c9c:	84000715 	stw	r16,28(r16)
 4018ca0:	85800815 	stw	r22,32(r16)
 4018ca4:	85400915 	stw	r21,36(r16)
 4018ca8:	85000a15 	stw	r20,40(r16)
 4018cac:	84c00b15 	stw	r19,44(r16)
 4018cb0:	90800e15 	stw	r2,56(r18)
 4018cb4:	dfc00817 	ldw	ra,32(sp)
 4018cb8:	ddc00717 	ldw	r23,28(sp)
 4018cbc:	dd800617 	ldw	r22,24(sp)
 4018cc0:	dd400517 	ldw	r21,20(sp)
 4018cc4:	dd000417 	ldw	r20,16(sp)
 4018cc8:	dcc00317 	ldw	r19,12(sp)
 4018ccc:	dc800217 	ldw	r18,8(sp)
 4018cd0:	dc400117 	ldw	r17,4(sp)
 4018cd4:	dc000017 	ldw	r16,0(sp)
 4018cd8:	dec00904 	addi	sp,sp,36
 4018cdc:	f800283a 	ret

04018ce0 <__fp_lock>:
 4018ce0:	0005883a 	mov	r2,zero
 4018ce4:	f800283a 	ret

04018ce8 <__sfmoreglue>:
 4018ce8:	defffc04 	addi	sp,sp,-16
 4018cec:	dc400115 	stw	r17,4(sp)
 4018cf0:	2c7fffc4 	addi	r17,r5,-1
 4018cf4:	8c401a24 	muli	r17,r17,104
 4018cf8:	dc800215 	stw	r18,8(sp)
 4018cfc:	2825883a 	mov	r18,r5
 4018d00:	89401d04 	addi	r5,r17,116
 4018d04:	dc000015 	stw	r16,0(sp)
 4018d08:	dfc00315 	stw	ra,12(sp)
 4018d0c:	4011c080 	call	4011c08 <_malloc_r>
 4018d10:	1021883a 	mov	r16,r2
 4018d14:	10000726 	beq	r2,zero,4018d34 <__sfmoreglue+0x4c>
 4018d18:	11000304 	addi	r4,r2,12
 4018d1c:	10000015 	stw	zero,0(r2)
 4018d20:	14800115 	stw	r18,4(r2)
 4018d24:	11000215 	stw	r4,8(r2)
 4018d28:	89801a04 	addi	r6,r17,104
 4018d2c:	000b883a 	mov	r5,zero
 4018d30:	401255c0 	call	401255c <memset>
 4018d34:	8005883a 	mov	r2,r16
 4018d38:	dfc00317 	ldw	ra,12(sp)
 4018d3c:	dc800217 	ldw	r18,8(sp)
 4018d40:	dc400117 	ldw	r17,4(sp)
 4018d44:	dc000017 	ldw	r16,0(sp)
 4018d48:	dec00404 	addi	sp,sp,16
 4018d4c:	f800283a 	ret

04018d50 <__sfp>:
 4018d50:	defffb04 	addi	sp,sp,-20
 4018d54:	dc000015 	stw	r16,0(sp)
 4018d58:	04010474 	movhi	r16,1041
 4018d5c:	841a5704 	addi	r16,r16,26972
 4018d60:	dcc00315 	stw	r19,12(sp)
 4018d64:	2027883a 	mov	r19,r4
 4018d68:	81000017 	ldw	r4,0(r16)
 4018d6c:	dfc00415 	stw	ra,16(sp)
 4018d70:	dc800215 	stw	r18,8(sp)
 4018d74:	20800e17 	ldw	r2,56(r4)
 4018d78:	dc400115 	stw	r17,4(sp)
 4018d7c:	1000021e 	bne	r2,zero,4018d88 <__sfp+0x38>
 4018d80:	4018b440 	call	4018b44 <__sinit.part.1>
 4018d84:	81000017 	ldw	r4,0(r16)
 4018d88:	2480b804 	addi	r18,r4,736
 4018d8c:	047fffc4 	movi	r17,-1
 4018d90:	91000117 	ldw	r4,4(r18)
 4018d94:	94000217 	ldw	r16,8(r18)
 4018d98:	213fffc4 	addi	r4,r4,-1
 4018d9c:	20000a16 	blt	r4,zero,4018dc8 <__sfp+0x78>
 4018da0:	8080030f 	ldh	r2,12(r16)
 4018da4:	10000c26 	beq	r2,zero,4018dd8 <__sfp+0x88>
 4018da8:	80c01d04 	addi	r3,r16,116
 4018dac:	00000206 	br	4018db8 <__sfp+0x68>
 4018db0:	18bfe60f 	ldh	r2,-104(r3)
 4018db4:	10000826 	beq	r2,zero,4018dd8 <__sfp+0x88>
 4018db8:	213fffc4 	addi	r4,r4,-1
 4018dbc:	1c3ffd04 	addi	r16,r3,-12
 4018dc0:	18c01a04 	addi	r3,r3,104
 4018dc4:	247ffa1e 	bne	r4,r17,4018db0 <__reset+0xfb017db0>
 4018dc8:	90800017 	ldw	r2,0(r18)
 4018dcc:	10001d26 	beq	r2,zero,4018e44 <__sfp+0xf4>
 4018dd0:	1025883a 	mov	r18,r2
 4018dd4:	003fee06 	br	4018d90 <__reset+0xfb017d90>
 4018dd8:	00bfffc4 	movi	r2,-1
 4018ddc:	8080038d 	sth	r2,14(r16)
 4018de0:	00800044 	movi	r2,1
 4018de4:	8080030d 	sth	r2,12(r16)
 4018de8:	80001915 	stw	zero,100(r16)
 4018dec:	80000015 	stw	zero,0(r16)
 4018df0:	80000215 	stw	zero,8(r16)
 4018df4:	80000115 	stw	zero,4(r16)
 4018df8:	80000415 	stw	zero,16(r16)
 4018dfc:	80000515 	stw	zero,20(r16)
 4018e00:	80000615 	stw	zero,24(r16)
 4018e04:	01800204 	movi	r6,8
 4018e08:	000b883a 	mov	r5,zero
 4018e0c:	81001704 	addi	r4,r16,92
 4018e10:	401255c0 	call	401255c <memset>
 4018e14:	8005883a 	mov	r2,r16
 4018e18:	80000c15 	stw	zero,48(r16)
 4018e1c:	80000d15 	stw	zero,52(r16)
 4018e20:	80001115 	stw	zero,68(r16)
 4018e24:	80001215 	stw	zero,72(r16)
 4018e28:	dfc00417 	ldw	ra,16(sp)
 4018e2c:	dcc00317 	ldw	r19,12(sp)
 4018e30:	dc800217 	ldw	r18,8(sp)
 4018e34:	dc400117 	ldw	r17,4(sp)
 4018e38:	dc000017 	ldw	r16,0(sp)
 4018e3c:	dec00504 	addi	sp,sp,20
 4018e40:	f800283a 	ret
 4018e44:	01400104 	movi	r5,4
 4018e48:	9809883a 	mov	r4,r19
 4018e4c:	4018ce80 	call	4018ce8 <__sfmoreglue>
 4018e50:	90800015 	stw	r2,0(r18)
 4018e54:	103fde1e 	bne	r2,zero,4018dd0 <__reset+0xfb017dd0>
 4018e58:	00800304 	movi	r2,12
 4018e5c:	98800015 	stw	r2,0(r19)
 4018e60:	0005883a 	mov	r2,zero
 4018e64:	003ff006 	br	4018e28 <__reset+0xfb017e28>

04018e68 <_cleanup>:
 4018e68:	00810474 	movhi	r2,1041
 4018e6c:	109a5704 	addi	r2,r2,26972
 4018e70:	11000017 	ldw	r4,0(r2)
 4018e74:	014100b4 	movhi	r5,1026
 4018e78:	29785904 	addi	r5,r5,-7836
 4018e7c:	40198841 	jmpi	4019884 <_fwalk_reent>

04018e80 <__sinit>:
 4018e80:	20800e17 	ldw	r2,56(r4)
 4018e84:	10000126 	beq	r2,zero,4018e8c <__sinit+0xc>
 4018e88:	f800283a 	ret
 4018e8c:	4018b441 	jmpi	4018b44 <__sinit.part.1>

04018e90 <__sfp_lock_acquire>:
 4018e90:	f800283a 	ret

04018e94 <__sfp_lock_release>:
 4018e94:	f800283a 	ret

04018e98 <__sinit_lock_acquire>:
 4018e98:	f800283a 	ret

04018e9c <__sinit_lock_release>:
 4018e9c:	f800283a 	ret

04018ea0 <__fp_lock_all>:
 4018ea0:	00810474 	movhi	r2,1041
 4018ea4:	109a5804 	addi	r2,r2,26976
 4018ea8:	11000017 	ldw	r4,0(r2)
 4018eac:	014100b4 	movhi	r5,1026
 4018eb0:	29633804 	addi	r5,r5,-29472
 4018eb4:	40197c01 	jmpi	40197c0 <_fwalk>

04018eb8 <__fp_unlock_all>:
 4018eb8:	00810474 	movhi	r2,1041
 4018ebc:	109a5804 	addi	r2,r2,26976
 4018ec0:	11000017 	ldw	r4,0(r2)
 4018ec4:	014100b4 	movhi	r5,1026
 4018ec8:	2962cc04 	addi	r5,r5,-29904
 4018ecc:	40197c01 	jmpi	40197c0 <_fwalk>

04018ed0 <_malloc_trim_r>:
 4018ed0:	defffb04 	addi	sp,sp,-20
 4018ed4:	dcc00315 	stw	r19,12(sp)
 4018ed8:	04c10474 	movhi	r19,1041
 4018edc:	dc800215 	stw	r18,8(sp)
 4018ee0:	dc400115 	stw	r17,4(sp)
 4018ee4:	dc000015 	stw	r16,0(sp)
 4018ee8:	dfc00415 	stw	ra,16(sp)
 4018eec:	2821883a 	mov	r16,r5
 4018ef0:	9cd48004 	addi	r19,r19,20992
 4018ef4:	2025883a 	mov	r18,r4
 4018ef8:	401fd4c0 	call	401fd4c <__malloc_lock>
 4018efc:	98800217 	ldw	r2,8(r19)
 4018f00:	14400117 	ldw	r17,4(r2)
 4018f04:	00bfff04 	movi	r2,-4
 4018f08:	88a2703a 	and	r17,r17,r2
 4018f0c:	8c21c83a 	sub	r16,r17,r16
 4018f10:	8403fbc4 	addi	r16,r16,4079
 4018f14:	8020d33a 	srli	r16,r16,12
 4018f18:	0083ffc4 	movi	r2,4095
 4018f1c:	843fffc4 	addi	r16,r16,-1
 4018f20:	8020933a 	slli	r16,r16,12
 4018f24:	1400060e 	bge	r2,r16,4018f40 <_malloc_trim_r+0x70>
 4018f28:	000b883a 	mov	r5,zero
 4018f2c:	9009883a 	mov	r4,r18
 4018f30:	40127c40 	call	40127c4 <_sbrk_r>
 4018f34:	98c00217 	ldw	r3,8(r19)
 4018f38:	1c47883a 	add	r3,r3,r17
 4018f3c:	10c00a26 	beq	r2,r3,4018f68 <_malloc_trim_r+0x98>
 4018f40:	9009883a 	mov	r4,r18
 4018f44:	401fd700 	call	401fd70 <__malloc_unlock>
 4018f48:	0005883a 	mov	r2,zero
 4018f4c:	dfc00417 	ldw	ra,16(sp)
 4018f50:	dcc00317 	ldw	r19,12(sp)
 4018f54:	dc800217 	ldw	r18,8(sp)
 4018f58:	dc400117 	ldw	r17,4(sp)
 4018f5c:	dc000017 	ldw	r16,0(sp)
 4018f60:	dec00504 	addi	sp,sp,20
 4018f64:	f800283a 	ret
 4018f68:	040bc83a 	sub	r5,zero,r16
 4018f6c:	9009883a 	mov	r4,r18
 4018f70:	40127c40 	call	40127c4 <_sbrk_r>
 4018f74:	00ffffc4 	movi	r3,-1
 4018f78:	10c00d26 	beq	r2,r3,4018fb0 <_malloc_trim_r+0xe0>
 4018f7c:	00c10474 	movhi	r3,1041
 4018f80:	18da7704 	addi	r3,r3,27100
 4018f84:	18800017 	ldw	r2,0(r3)
 4018f88:	99000217 	ldw	r4,8(r19)
 4018f8c:	8c23c83a 	sub	r17,r17,r16
 4018f90:	8c400054 	ori	r17,r17,1
 4018f94:	1421c83a 	sub	r16,r2,r16
 4018f98:	24400115 	stw	r17,4(r4)
 4018f9c:	9009883a 	mov	r4,r18
 4018fa0:	1c000015 	stw	r16,0(r3)
 4018fa4:	401fd700 	call	401fd70 <__malloc_unlock>
 4018fa8:	00800044 	movi	r2,1
 4018fac:	003fe706 	br	4018f4c <__reset+0xfb017f4c>
 4018fb0:	000b883a 	mov	r5,zero
 4018fb4:	9009883a 	mov	r4,r18
 4018fb8:	40127c40 	call	40127c4 <_sbrk_r>
 4018fbc:	99000217 	ldw	r4,8(r19)
 4018fc0:	014003c4 	movi	r5,15
 4018fc4:	1107c83a 	sub	r3,r2,r4
 4018fc8:	28ffdd0e 	bge	r5,r3,4018f40 <__reset+0xfb017f40>
 4018fcc:	01410474 	movhi	r5,1041
 4018fd0:	295a5904 	addi	r5,r5,26980
 4018fd4:	29400017 	ldw	r5,0(r5)
 4018fd8:	18c00054 	ori	r3,r3,1
 4018fdc:	20c00115 	stw	r3,4(r4)
 4018fe0:	00c10474 	movhi	r3,1041
 4018fe4:	1145c83a 	sub	r2,r2,r5
 4018fe8:	18da7704 	addi	r3,r3,27100
 4018fec:	18800015 	stw	r2,0(r3)
 4018ff0:	003fd306 	br	4018f40 <__reset+0xfb017f40>

04018ff4 <_free_r>:
 4018ff4:	28004126 	beq	r5,zero,40190fc <_free_r+0x108>
 4018ff8:	defffd04 	addi	sp,sp,-12
 4018ffc:	dc400115 	stw	r17,4(sp)
 4019000:	dc000015 	stw	r16,0(sp)
 4019004:	2023883a 	mov	r17,r4
 4019008:	2821883a 	mov	r16,r5
 401900c:	dfc00215 	stw	ra,8(sp)
 4019010:	401fd4c0 	call	401fd4c <__malloc_lock>
 4019014:	81ffff17 	ldw	r7,-4(r16)
 4019018:	00bfff84 	movi	r2,-2
 401901c:	01010474 	movhi	r4,1041
 4019020:	81bffe04 	addi	r6,r16,-8
 4019024:	3884703a 	and	r2,r7,r2
 4019028:	21148004 	addi	r4,r4,20992
 401902c:	308b883a 	add	r5,r6,r2
 4019030:	2a400117 	ldw	r9,4(r5)
 4019034:	22000217 	ldw	r8,8(r4)
 4019038:	00ffff04 	movi	r3,-4
 401903c:	48c6703a 	and	r3,r9,r3
 4019040:	2a005726 	beq	r5,r8,40191a0 <_free_r+0x1ac>
 4019044:	28c00115 	stw	r3,4(r5)
 4019048:	39c0004c 	andi	r7,r7,1
 401904c:	3800091e 	bne	r7,zero,4019074 <_free_r+0x80>
 4019050:	823ffe17 	ldw	r8,-8(r16)
 4019054:	22400204 	addi	r9,r4,8
 4019058:	320dc83a 	sub	r6,r6,r8
 401905c:	31c00217 	ldw	r7,8(r6)
 4019060:	1205883a 	add	r2,r2,r8
 4019064:	3a406526 	beq	r7,r9,40191fc <_free_r+0x208>
 4019068:	32000317 	ldw	r8,12(r6)
 401906c:	3a000315 	stw	r8,12(r7)
 4019070:	41c00215 	stw	r7,8(r8)
 4019074:	28cf883a 	add	r7,r5,r3
 4019078:	39c00117 	ldw	r7,4(r7)
 401907c:	39c0004c 	andi	r7,r7,1
 4019080:	38003a26 	beq	r7,zero,401916c <_free_r+0x178>
 4019084:	10c00054 	ori	r3,r2,1
 4019088:	30c00115 	stw	r3,4(r6)
 401908c:	3087883a 	add	r3,r6,r2
 4019090:	18800015 	stw	r2,0(r3)
 4019094:	00c07fc4 	movi	r3,511
 4019098:	18801936 	bltu	r3,r2,4019100 <_free_r+0x10c>
 401909c:	1004d0fa 	srli	r2,r2,3
 40190a0:	01c00044 	movi	r7,1
 40190a4:	21400117 	ldw	r5,4(r4)
 40190a8:	10c00044 	addi	r3,r2,1
 40190ac:	18c7883a 	add	r3,r3,r3
 40190b0:	1005d0ba 	srai	r2,r2,2
 40190b4:	18c7883a 	add	r3,r3,r3
 40190b8:	18c7883a 	add	r3,r3,r3
 40190bc:	1907883a 	add	r3,r3,r4
 40190c0:	3884983a 	sll	r2,r7,r2
 40190c4:	19c00017 	ldw	r7,0(r3)
 40190c8:	1a3ffe04 	addi	r8,r3,-8
 40190cc:	1144b03a 	or	r2,r2,r5
 40190d0:	32000315 	stw	r8,12(r6)
 40190d4:	31c00215 	stw	r7,8(r6)
 40190d8:	20800115 	stw	r2,4(r4)
 40190dc:	19800015 	stw	r6,0(r3)
 40190e0:	39800315 	stw	r6,12(r7)
 40190e4:	8809883a 	mov	r4,r17
 40190e8:	dfc00217 	ldw	ra,8(sp)
 40190ec:	dc400117 	ldw	r17,4(sp)
 40190f0:	dc000017 	ldw	r16,0(sp)
 40190f4:	dec00304 	addi	sp,sp,12
 40190f8:	401fd701 	jmpi	401fd70 <__malloc_unlock>
 40190fc:	f800283a 	ret
 4019100:	100ad27a 	srli	r5,r2,9
 4019104:	00c00104 	movi	r3,4
 4019108:	19404a36 	bltu	r3,r5,4019234 <_free_r+0x240>
 401910c:	100ad1ba 	srli	r5,r2,6
 4019110:	28c00e44 	addi	r3,r5,57
 4019114:	18c7883a 	add	r3,r3,r3
 4019118:	29400e04 	addi	r5,r5,56
 401911c:	18c7883a 	add	r3,r3,r3
 4019120:	18c7883a 	add	r3,r3,r3
 4019124:	1909883a 	add	r4,r3,r4
 4019128:	20c00017 	ldw	r3,0(r4)
 401912c:	01c10474 	movhi	r7,1041
 4019130:	213ffe04 	addi	r4,r4,-8
 4019134:	39d48004 	addi	r7,r7,20992
 4019138:	20c04426 	beq	r4,r3,401924c <_free_r+0x258>
 401913c:	01ffff04 	movi	r7,-4
 4019140:	19400117 	ldw	r5,4(r3)
 4019144:	29ca703a 	and	r5,r5,r7
 4019148:	1140022e 	bgeu	r2,r5,4019154 <_free_r+0x160>
 401914c:	18c00217 	ldw	r3,8(r3)
 4019150:	20fffb1e 	bne	r4,r3,4019140 <__reset+0xfb018140>
 4019154:	19000317 	ldw	r4,12(r3)
 4019158:	31000315 	stw	r4,12(r6)
 401915c:	30c00215 	stw	r3,8(r6)
 4019160:	21800215 	stw	r6,8(r4)
 4019164:	19800315 	stw	r6,12(r3)
 4019168:	003fde06 	br	40190e4 <__reset+0xfb0180e4>
 401916c:	29c00217 	ldw	r7,8(r5)
 4019170:	10c5883a 	add	r2,r2,r3
 4019174:	00c10474 	movhi	r3,1041
 4019178:	18d48204 	addi	r3,r3,21000
 401917c:	38c03b26 	beq	r7,r3,401926c <_free_r+0x278>
 4019180:	2a000317 	ldw	r8,12(r5)
 4019184:	11400054 	ori	r5,r2,1
 4019188:	3087883a 	add	r3,r6,r2
 401918c:	3a000315 	stw	r8,12(r7)
 4019190:	41c00215 	stw	r7,8(r8)
 4019194:	31400115 	stw	r5,4(r6)
 4019198:	18800015 	stw	r2,0(r3)
 401919c:	003fbd06 	br	4019094 <__reset+0xfb018094>
 40191a0:	39c0004c 	andi	r7,r7,1
 40191a4:	10c5883a 	add	r2,r2,r3
 40191a8:	3800071e 	bne	r7,zero,40191c8 <_free_r+0x1d4>
 40191ac:	81fffe17 	ldw	r7,-8(r16)
 40191b0:	31cdc83a 	sub	r6,r6,r7
 40191b4:	30c00317 	ldw	r3,12(r6)
 40191b8:	31400217 	ldw	r5,8(r6)
 40191bc:	11c5883a 	add	r2,r2,r7
 40191c0:	28c00315 	stw	r3,12(r5)
 40191c4:	19400215 	stw	r5,8(r3)
 40191c8:	10c00054 	ori	r3,r2,1
 40191cc:	30c00115 	stw	r3,4(r6)
 40191d0:	00c10474 	movhi	r3,1041
 40191d4:	18da5a04 	addi	r3,r3,26984
 40191d8:	18c00017 	ldw	r3,0(r3)
 40191dc:	21800215 	stw	r6,8(r4)
 40191e0:	10ffc036 	bltu	r2,r3,40190e4 <__reset+0xfb0180e4>
 40191e4:	00810474 	movhi	r2,1041
 40191e8:	109a6b04 	addi	r2,r2,27052
 40191ec:	11400017 	ldw	r5,0(r2)
 40191f0:	8809883a 	mov	r4,r17
 40191f4:	4018ed00 	call	4018ed0 <_malloc_trim_r>
 40191f8:	003fba06 	br	40190e4 <__reset+0xfb0180e4>
 40191fc:	28c9883a 	add	r4,r5,r3
 4019200:	21000117 	ldw	r4,4(r4)
 4019204:	2100004c 	andi	r4,r4,1
 4019208:	2000391e 	bne	r4,zero,40192f0 <_free_r+0x2fc>
 401920c:	29c00217 	ldw	r7,8(r5)
 4019210:	29000317 	ldw	r4,12(r5)
 4019214:	1885883a 	add	r2,r3,r2
 4019218:	10c00054 	ori	r3,r2,1
 401921c:	39000315 	stw	r4,12(r7)
 4019220:	21c00215 	stw	r7,8(r4)
 4019224:	30c00115 	stw	r3,4(r6)
 4019228:	308d883a 	add	r6,r6,r2
 401922c:	30800015 	stw	r2,0(r6)
 4019230:	003fac06 	br	40190e4 <__reset+0xfb0180e4>
 4019234:	00c00504 	movi	r3,20
 4019238:	19401536 	bltu	r3,r5,4019290 <_free_r+0x29c>
 401923c:	28c01704 	addi	r3,r5,92
 4019240:	18c7883a 	add	r3,r3,r3
 4019244:	294016c4 	addi	r5,r5,91
 4019248:	003fb406 	br	401911c <__reset+0xfb01811c>
 401924c:	280bd0ba 	srai	r5,r5,2
 4019250:	00c00044 	movi	r3,1
 4019254:	38800117 	ldw	r2,4(r7)
 4019258:	194a983a 	sll	r5,r3,r5
 401925c:	2007883a 	mov	r3,r4
 4019260:	2884b03a 	or	r2,r5,r2
 4019264:	38800115 	stw	r2,4(r7)
 4019268:	003fbb06 	br	4019158 <__reset+0xfb018158>
 401926c:	21800515 	stw	r6,20(r4)
 4019270:	21800415 	stw	r6,16(r4)
 4019274:	10c00054 	ori	r3,r2,1
 4019278:	31c00315 	stw	r7,12(r6)
 401927c:	31c00215 	stw	r7,8(r6)
 4019280:	30c00115 	stw	r3,4(r6)
 4019284:	308d883a 	add	r6,r6,r2
 4019288:	30800015 	stw	r2,0(r6)
 401928c:	003f9506 	br	40190e4 <__reset+0xfb0180e4>
 4019290:	00c01504 	movi	r3,84
 4019294:	19400536 	bltu	r3,r5,40192ac <_free_r+0x2b8>
 4019298:	100ad33a 	srli	r5,r2,12
 401929c:	28c01bc4 	addi	r3,r5,111
 40192a0:	18c7883a 	add	r3,r3,r3
 40192a4:	29401b84 	addi	r5,r5,110
 40192a8:	003f9c06 	br	401911c <__reset+0xfb01811c>
 40192ac:	00c05504 	movi	r3,340
 40192b0:	19400536 	bltu	r3,r5,40192c8 <_free_r+0x2d4>
 40192b4:	100ad3fa 	srli	r5,r2,15
 40192b8:	28c01e04 	addi	r3,r5,120
 40192bc:	18c7883a 	add	r3,r3,r3
 40192c0:	29401dc4 	addi	r5,r5,119
 40192c4:	003f9506 	br	401911c <__reset+0xfb01811c>
 40192c8:	00c15504 	movi	r3,1364
 40192cc:	19400536 	bltu	r3,r5,40192e4 <_free_r+0x2f0>
 40192d0:	100ad4ba 	srli	r5,r2,18
 40192d4:	28c01f44 	addi	r3,r5,125
 40192d8:	18c7883a 	add	r3,r3,r3
 40192dc:	29401f04 	addi	r5,r5,124
 40192e0:	003f8e06 	br	401911c <__reset+0xfb01811c>
 40192e4:	00c03f84 	movi	r3,254
 40192e8:	01401f84 	movi	r5,126
 40192ec:	003f8b06 	br	401911c <__reset+0xfb01811c>
 40192f0:	10c00054 	ori	r3,r2,1
 40192f4:	30c00115 	stw	r3,4(r6)
 40192f8:	308d883a 	add	r6,r6,r2
 40192fc:	30800015 	stw	r2,0(r6)
 4019300:	003f7806 	br	40190e4 <__reset+0xfb0180e4>

04019304 <__sfvwrite_r>:
 4019304:	30800217 	ldw	r2,8(r6)
 4019308:	10006726 	beq	r2,zero,40194a8 <__sfvwrite_r+0x1a4>
 401930c:	28c0030b 	ldhu	r3,12(r5)
 4019310:	defff404 	addi	sp,sp,-48
 4019314:	dd400715 	stw	r21,28(sp)
 4019318:	dd000615 	stw	r20,24(sp)
 401931c:	dc000215 	stw	r16,8(sp)
 4019320:	dfc00b15 	stw	ra,44(sp)
 4019324:	df000a15 	stw	fp,40(sp)
 4019328:	ddc00915 	stw	r23,36(sp)
 401932c:	dd800815 	stw	r22,32(sp)
 4019330:	dcc00515 	stw	r19,20(sp)
 4019334:	dc800415 	stw	r18,16(sp)
 4019338:	dc400315 	stw	r17,12(sp)
 401933c:	1880020c 	andi	r2,r3,8
 4019340:	2821883a 	mov	r16,r5
 4019344:	202b883a 	mov	r21,r4
 4019348:	3029883a 	mov	r20,r6
 401934c:	10002726 	beq	r2,zero,40193ec <__sfvwrite_r+0xe8>
 4019350:	28800417 	ldw	r2,16(r5)
 4019354:	10002526 	beq	r2,zero,40193ec <__sfvwrite_r+0xe8>
 4019358:	1880008c 	andi	r2,r3,2
 401935c:	a4400017 	ldw	r17,0(r20)
 4019360:	10002a26 	beq	r2,zero,401940c <__sfvwrite_r+0x108>
 4019364:	05a00034 	movhi	r22,32768
 4019368:	0027883a 	mov	r19,zero
 401936c:	0025883a 	mov	r18,zero
 4019370:	b5bf0004 	addi	r22,r22,-1024
 4019374:	980d883a 	mov	r6,r19
 4019378:	a809883a 	mov	r4,r21
 401937c:	90004626 	beq	r18,zero,4019498 <__sfvwrite_r+0x194>
 4019380:	900f883a 	mov	r7,r18
 4019384:	b480022e 	bgeu	r22,r18,4019390 <__sfvwrite_r+0x8c>
 4019388:	01e00034 	movhi	r7,32768
 401938c:	39ff0004 	addi	r7,r7,-1024
 4019390:	80800917 	ldw	r2,36(r16)
 4019394:	81400717 	ldw	r5,28(r16)
 4019398:	103ee83a 	callr	r2
 401939c:	0080570e 	bge	zero,r2,40194fc <__sfvwrite_r+0x1f8>
 40193a0:	a0c00217 	ldw	r3,8(r20)
 40193a4:	98a7883a 	add	r19,r19,r2
 40193a8:	90a5c83a 	sub	r18,r18,r2
 40193ac:	1885c83a 	sub	r2,r3,r2
 40193b0:	a0800215 	stw	r2,8(r20)
 40193b4:	103fef1e 	bne	r2,zero,4019374 <__reset+0xfb018374>
 40193b8:	0005883a 	mov	r2,zero
 40193bc:	dfc00b17 	ldw	ra,44(sp)
 40193c0:	df000a17 	ldw	fp,40(sp)
 40193c4:	ddc00917 	ldw	r23,36(sp)
 40193c8:	dd800817 	ldw	r22,32(sp)
 40193cc:	dd400717 	ldw	r21,28(sp)
 40193d0:	dd000617 	ldw	r20,24(sp)
 40193d4:	dcc00517 	ldw	r19,20(sp)
 40193d8:	dc800417 	ldw	r18,16(sp)
 40193dc:	dc400317 	ldw	r17,12(sp)
 40193e0:	dc000217 	ldw	r16,8(sp)
 40193e4:	dec00c04 	addi	sp,sp,48
 40193e8:	f800283a 	ret
 40193ec:	800b883a 	mov	r5,r16
 40193f0:	a809883a 	mov	r4,r21
 40193f4:	4016eac0 	call	4016eac <__swsetup_r>
 40193f8:	1000eb1e 	bne	r2,zero,40197a8 <__sfvwrite_r+0x4a4>
 40193fc:	80c0030b 	ldhu	r3,12(r16)
 4019400:	a4400017 	ldw	r17,0(r20)
 4019404:	1880008c 	andi	r2,r3,2
 4019408:	103fd61e 	bne	r2,zero,4019364 <__reset+0xfb018364>
 401940c:	1880004c 	andi	r2,r3,1
 4019410:	10003f1e 	bne	r2,zero,4019510 <__sfvwrite_r+0x20c>
 4019414:	0039883a 	mov	fp,zero
 4019418:	0025883a 	mov	r18,zero
 401941c:	90001a26 	beq	r18,zero,4019488 <__sfvwrite_r+0x184>
 4019420:	1880800c 	andi	r2,r3,512
 4019424:	84c00217 	ldw	r19,8(r16)
 4019428:	10002126 	beq	r2,zero,40194b0 <__sfvwrite_r+0x1ac>
 401942c:	982f883a 	mov	r23,r19
 4019430:	94c09336 	bltu	r18,r19,4019680 <__sfvwrite_r+0x37c>
 4019434:	1881200c 	andi	r2,r3,1152
 4019438:	10009e1e 	bne	r2,zero,40196b4 <__sfvwrite_r+0x3b0>
 401943c:	81000017 	ldw	r4,0(r16)
 4019440:	b80d883a 	mov	r6,r23
 4019444:	e00b883a 	mov	r5,fp
 4019448:	4019cc40 	call	4019cc4 <memmove>
 401944c:	80c00217 	ldw	r3,8(r16)
 4019450:	81000017 	ldw	r4,0(r16)
 4019454:	9005883a 	mov	r2,r18
 4019458:	1ce7c83a 	sub	r19,r3,r19
 401945c:	25cf883a 	add	r7,r4,r23
 4019460:	84c00215 	stw	r19,8(r16)
 4019464:	81c00015 	stw	r7,0(r16)
 4019468:	a0c00217 	ldw	r3,8(r20)
 401946c:	e0b9883a 	add	fp,fp,r2
 4019470:	90a5c83a 	sub	r18,r18,r2
 4019474:	18a7c83a 	sub	r19,r3,r2
 4019478:	a4c00215 	stw	r19,8(r20)
 401947c:	983fce26 	beq	r19,zero,40193b8 <__reset+0xfb0183b8>
 4019480:	80c0030b 	ldhu	r3,12(r16)
 4019484:	903fe61e 	bne	r18,zero,4019420 <__reset+0xfb018420>
 4019488:	8f000017 	ldw	fp,0(r17)
 401948c:	8c800117 	ldw	r18,4(r17)
 4019490:	8c400204 	addi	r17,r17,8
 4019494:	003fe106 	br	401941c <__reset+0xfb01841c>
 4019498:	8cc00017 	ldw	r19,0(r17)
 401949c:	8c800117 	ldw	r18,4(r17)
 40194a0:	8c400204 	addi	r17,r17,8
 40194a4:	003fb306 	br	4019374 <__reset+0xfb018374>
 40194a8:	0005883a 	mov	r2,zero
 40194ac:	f800283a 	ret
 40194b0:	81000017 	ldw	r4,0(r16)
 40194b4:	80800417 	ldw	r2,16(r16)
 40194b8:	11005736 	bltu	r2,r4,4019618 <__sfvwrite_r+0x314>
 40194bc:	85c00517 	ldw	r23,20(r16)
 40194c0:	95c05536 	bltu	r18,r23,4019618 <__sfvwrite_r+0x314>
 40194c4:	00a00034 	movhi	r2,32768
 40194c8:	10bfffc4 	addi	r2,r2,-1
 40194cc:	9009883a 	mov	r4,r18
 40194d0:	1480012e 	bgeu	r2,r18,40194d8 <__sfvwrite_r+0x1d4>
 40194d4:	1009883a 	mov	r4,r2
 40194d8:	b80b883a 	mov	r5,r23
 40194dc:	400dbb40 	call	400dbb4 <__divsi3>
 40194e0:	15cf383a 	mul	r7,r2,r23
 40194e4:	81400717 	ldw	r5,28(r16)
 40194e8:	80800917 	ldw	r2,36(r16)
 40194ec:	e00d883a 	mov	r6,fp
 40194f0:	a809883a 	mov	r4,r21
 40194f4:	103ee83a 	callr	r2
 40194f8:	00bfdb16 	blt	zero,r2,4019468 <__reset+0xfb018468>
 40194fc:	8080030b 	ldhu	r2,12(r16)
 4019500:	10801014 	ori	r2,r2,64
 4019504:	8080030d 	sth	r2,12(r16)
 4019508:	00bfffc4 	movi	r2,-1
 401950c:	003fab06 	br	40193bc <__reset+0xfb0183bc>
 4019510:	0027883a 	mov	r19,zero
 4019514:	0011883a 	mov	r8,zero
 4019518:	0039883a 	mov	fp,zero
 401951c:	0025883a 	mov	r18,zero
 4019520:	90001f26 	beq	r18,zero,40195a0 <__sfvwrite_r+0x29c>
 4019524:	40005a26 	beq	r8,zero,4019690 <__sfvwrite_r+0x38c>
 4019528:	982d883a 	mov	r22,r19
 401952c:	94c0012e 	bgeu	r18,r19,4019534 <__sfvwrite_r+0x230>
 4019530:	902d883a 	mov	r22,r18
 4019534:	81000017 	ldw	r4,0(r16)
 4019538:	80800417 	ldw	r2,16(r16)
 401953c:	b02f883a 	mov	r23,r22
 4019540:	81c00517 	ldw	r7,20(r16)
 4019544:	1100032e 	bgeu	r2,r4,4019554 <__sfvwrite_r+0x250>
 4019548:	80c00217 	ldw	r3,8(r16)
 401954c:	38c7883a 	add	r3,r7,r3
 4019550:	1d801816 	blt	r3,r22,40195b4 <__sfvwrite_r+0x2b0>
 4019554:	b1c03e16 	blt	r22,r7,4019650 <__sfvwrite_r+0x34c>
 4019558:	80800917 	ldw	r2,36(r16)
 401955c:	81400717 	ldw	r5,28(r16)
 4019560:	e00d883a 	mov	r6,fp
 4019564:	da000115 	stw	r8,4(sp)
 4019568:	a809883a 	mov	r4,r21
 401956c:	103ee83a 	callr	r2
 4019570:	102f883a 	mov	r23,r2
 4019574:	da000117 	ldw	r8,4(sp)
 4019578:	00bfe00e 	bge	zero,r2,40194fc <__reset+0xfb0184fc>
 401957c:	9de7c83a 	sub	r19,r19,r23
 4019580:	98001f26 	beq	r19,zero,4019600 <__sfvwrite_r+0x2fc>
 4019584:	a0800217 	ldw	r2,8(r20)
 4019588:	e5f9883a 	add	fp,fp,r23
 401958c:	95e5c83a 	sub	r18,r18,r23
 4019590:	15efc83a 	sub	r23,r2,r23
 4019594:	a5c00215 	stw	r23,8(r20)
 4019598:	b83f8726 	beq	r23,zero,40193b8 <__reset+0xfb0183b8>
 401959c:	903fe11e 	bne	r18,zero,4019524 <__reset+0xfb018524>
 40195a0:	8f000017 	ldw	fp,0(r17)
 40195a4:	8c800117 	ldw	r18,4(r17)
 40195a8:	0011883a 	mov	r8,zero
 40195ac:	8c400204 	addi	r17,r17,8
 40195b0:	003fdb06 	br	4019520 <__reset+0xfb018520>
 40195b4:	180d883a 	mov	r6,r3
 40195b8:	e00b883a 	mov	r5,fp
 40195bc:	da000115 	stw	r8,4(sp)
 40195c0:	d8c00015 	stw	r3,0(sp)
 40195c4:	4019cc40 	call	4019cc4 <memmove>
 40195c8:	d8c00017 	ldw	r3,0(sp)
 40195cc:	80800017 	ldw	r2,0(r16)
 40195d0:	800b883a 	mov	r5,r16
 40195d4:	a809883a 	mov	r4,r21
 40195d8:	10c5883a 	add	r2,r2,r3
 40195dc:	80800015 	stw	r2,0(r16)
 40195e0:	d8c00015 	stw	r3,0(sp)
 40195e4:	4018aa40 	call	4018aa4 <_fflush_r>
 40195e8:	d8c00017 	ldw	r3,0(sp)
 40195ec:	da000117 	ldw	r8,4(sp)
 40195f0:	103fc21e 	bne	r2,zero,40194fc <__reset+0xfb0184fc>
 40195f4:	182f883a 	mov	r23,r3
 40195f8:	9de7c83a 	sub	r19,r19,r23
 40195fc:	983fe11e 	bne	r19,zero,4019584 <__reset+0xfb018584>
 4019600:	800b883a 	mov	r5,r16
 4019604:	a809883a 	mov	r4,r21
 4019608:	4018aa40 	call	4018aa4 <_fflush_r>
 401960c:	103fbb1e 	bne	r2,zero,40194fc <__reset+0xfb0184fc>
 4019610:	0011883a 	mov	r8,zero
 4019614:	003fdb06 	br	4019584 <__reset+0xfb018584>
 4019618:	94c0012e 	bgeu	r18,r19,4019620 <__sfvwrite_r+0x31c>
 401961c:	9027883a 	mov	r19,r18
 4019620:	980d883a 	mov	r6,r19
 4019624:	e00b883a 	mov	r5,fp
 4019628:	4019cc40 	call	4019cc4 <memmove>
 401962c:	80800217 	ldw	r2,8(r16)
 4019630:	80c00017 	ldw	r3,0(r16)
 4019634:	14c5c83a 	sub	r2,r2,r19
 4019638:	1cc7883a 	add	r3,r3,r19
 401963c:	80800215 	stw	r2,8(r16)
 4019640:	80c00015 	stw	r3,0(r16)
 4019644:	10004326 	beq	r2,zero,4019754 <__sfvwrite_r+0x450>
 4019648:	9805883a 	mov	r2,r19
 401964c:	003f8606 	br	4019468 <__reset+0xfb018468>
 4019650:	b00d883a 	mov	r6,r22
 4019654:	e00b883a 	mov	r5,fp
 4019658:	da000115 	stw	r8,4(sp)
 401965c:	4019cc40 	call	4019cc4 <memmove>
 4019660:	80800217 	ldw	r2,8(r16)
 4019664:	80c00017 	ldw	r3,0(r16)
 4019668:	da000117 	ldw	r8,4(sp)
 401966c:	1585c83a 	sub	r2,r2,r22
 4019670:	1dad883a 	add	r22,r3,r22
 4019674:	80800215 	stw	r2,8(r16)
 4019678:	85800015 	stw	r22,0(r16)
 401967c:	003fbf06 	br	401957c <__reset+0xfb01857c>
 4019680:	81000017 	ldw	r4,0(r16)
 4019684:	9027883a 	mov	r19,r18
 4019688:	902f883a 	mov	r23,r18
 401968c:	003f6c06 	br	4019440 <__reset+0xfb018440>
 4019690:	900d883a 	mov	r6,r18
 4019694:	01400284 	movi	r5,10
 4019698:	e009883a 	mov	r4,fp
 401969c:	4019be00 	call	4019be0 <memchr>
 40196a0:	10003e26 	beq	r2,zero,401979c <__sfvwrite_r+0x498>
 40196a4:	10800044 	addi	r2,r2,1
 40196a8:	1727c83a 	sub	r19,r2,fp
 40196ac:	02000044 	movi	r8,1
 40196b0:	003f9d06 	br	4019528 <__reset+0xfb018528>
 40196b4:	80800517 	ldw	r2,20(r16)
 40196b8:	81400417 	ldw	r5,16(r16)
 40196bc:	81c00017 	ldw	r7,0(r16)
 40196c0:	10a7883a 	add	r19,r2,r2
 40196c4:	9885883a 	add	r2,r19,r2
 40196c8:	1026d7fa 	srli	r19,r2,31
 40196cc:	396dc83a 	sub	r22,r7,r5
 40196d0:	b1000044 	addi	r4,r22,1
 40196d4:	9885883a 	add	r2,r19,r2
 40196d8:	1027d07a 	srai	r19,r2,1
 40196dc:	2485883a 	add	r2,r4,r18
 40196e0:	980d883a 	mov	r6,r19
 40196e4:	9880022e 	bgeu	r19,r2,40196f0 <__sfvwrite_r+0x3ec>
 40196e8:	1027883a 	mov	r19,r2
 40196ec:	100d883a 	mov	r6,r2
 40196f0:	18c1000c 	andi	r3,r3,1024
 40196f4:	18001c26 	beq	r3,zero,4019768 <__sfvwrite_r+0x464>
 40196f8:	300b883a 	mov	r5,r6
 40196fc:	a809883a 	mov	r4,r21
 4019700:	4011c080 	call	4011c08 <_malloc_r>
 4019704:	102f883a 	mov	r23,r2
 4019708:	10002926 	beq	r2,zero,40197b0 <__sfvwrite_r+0x4ac>
 401970c:	81400417 	ldw	r5,16(r16)
 4019710:	b00d883a 	mov	r6,r22
 4019714:	1009883a 	mov	r4,r2
 4019718:	40124140 	call	4012414 <memcpy>
 401971c:	8080030b 	ldhu	r2,12(r16)
 4019720:	00fedfc4 	movi	r3,-1153
 4019724:	10c4703a 	and	r2,r2,r3
 4019728:	10802014 	ori	r2,r2,128
 401972c:	8080030d 	sth	r2,12(r16)
 4019730:	bd89883a 	add	r4,r23,r22
 4019734:	9d8fc83a 	sub	r7,r19,r22
 4019738:	85c00415 	stw	r23,16(r16)
 401973c:	84c00515 	stw	r19,20(r16)
 4019740:	81000015 	stw	r4,0(r16)
 4019744:	9027883a 	mov	r19,r18
 4019748:	81c00215 	stw	r7,8(r16)
 401974c:	902f883a 	mov	r23,r18
 4019750:	003f3b06 	br	4019440 <__reset+0xfb018440>
 4019754:	800b883a 	mov	r5,r16
 4019758:	a809883a 	mov	r4,r21
 401975c:	4018aa40 	call	4018aa4 <_fflush_r>
 4019760:	103fb926 	beq	r2,zero,4019648 <__reset+0xfb018648>
 4019764:	003f6506 	br	40194fc <__reset+0xfb0184fc>
 4019768:	a809883a 	mov	r4,r21
 401976c:	401ae1c0 	call	401ae1c <_realloc_r>
 4019770:	102f883a 	mov	r23,r2
 4019774:	103fee1e 	bne	r2,zero,4019730 <__reset+0xfb018730>
 4019778:	81400417 	ldw	r5,16(r16)
 401977c:	a809883a 	mov	r4,r21
 4019780:	4018ff40 	call	4018ff4 <_free_r>
 4019784:	8080030b 	ldhu	r2,12(r16)
 4019788:	00ffdfc4 	movi	r3,-129
 401978c:	1884703a 	and	r2,r3,r2
 4019790:	00c00304 	movi	r3,12
 4019794:	a8c00015 	stw	r3,0(r21)
 4019798:	003f5906 	br	4019500 <__reset+0xfb018500>
 401979c:	94c00044 	addi	r19,r18,1
 40197a0:	02000044 	movi	r8,1
 40197a4:	003f6006 	br	4019528 <__reset+0xfb018528>
 40197a8:	00bfffc4 	movi	r2,-1
 40197ac:	003f0306 	br	40193bc <__reset+0xfb0183bc>
 40197b0:	00800304 	movi	r2,12
 40197b4:	a8800015 	stw	r2,0(r21)
 40197b8:	8080030b 	ldhu	r2,12(r16)
 40197bc:	003f5006 	br	4019500 <__reset+0xfb018500>

040197c0 <_fwalk>:
 40197c0:	defff704 	addi	sp,sp,-36
 40197c4:	dd000415 	stw	r20,16(sp)
 40197c8:	dfc00815 	stw	ra,32(sp)
 40197cc:	ddc00715 	stw	r23,28(sp)
 40197d0:	dd800615 	stw	r22,24(sp)
 40197d4:	dd400515 	stw	r21,20(sp)
 40197d8:	dcc00315 	stw	r19,12(sp)
 40197dc:	dc800215 	stw	r18,8(sp)
 40197e0:	dc400115 	stw	r17,4(sp)
 40197e4:	dc000015 	stw	r16,0(sp)
 40197e8:	2500b804 	addi	r20,r4,736
 40197ec:	a0002326 	beq	r20,zero,401987c <_fwalk+0xbc>
 40197f0:	282b883a 	mov	r21,r5
 40197f4:	002f883a 	mov	r23,zero
 40197f8:	05800044 	movi	r22,1
 40197fc:	04ffffc4 	movi	r19,-1
 4019800:	a4400117 	ldw	r17,4(r20)
 4019804:	a4800217 	ldw	r18,8(r20)
 4019808:	8c7fffc4 	addi	r17,r17,-1
 401980c:	88000d16 	blt	r17,zero,4019844 <_fwalk+0x84>
 4019810:	94000304 	addi	r16,r18,12
 4019814:	94800384 	addi	r18,r18,14
 4019818:	8080000b 	ldhu	r2,0(r16)
 401981c:	8c7fffc4 	addi	r17,r17,-1
 4019820:	813ffd04 	addi	r4,r16,-12
 4019824:	b080042e 	bgeu	r22,r2,4019838 <_fwalk+0x78>
 4019828:	9080000f 	ldh	r2,0(r18)
 401982c:	14c00226 	beq	r2,r19,4019838 <_fwalk+0x78>
 4019830:	a83ee83a 	callr	r21
 4019834:	b8aeb03a 	or	r23,r23,r2
 4019838:	84001a04 	addi	r16,r16,104
 401983c:	94801a04 	addi	r18,r18,104
 4019840:	8cfff51e 	bne	r17,r19,4019818 <__reset+0xfb018818>
 4019844:	a5000017 	ldw	r20,0(r20)
 4019848:	a03fed1e 	bne	r20,zero,4019800 <__reset+0xfb018800>
 401984c:	b805883a 	mov	r2,r23
 4019850:	dfc00817 	ldw	ra,32(sp)
 4019854:	ddc00717 	ldw	r23,28(sp)
 4019858:	dd800617 	ldw	r22,24(sp)
 401985c:	dd400517 	ldw	r21,20(sp)
 4019860:	dd000417 	ldw	r20,16(sp)
 4019864:	dcc00317 	ldw	r19,12(sp)
 4019868:	dc800217 	ldw	r18,8(sp)
 401986c:	dc400117 	ldw	r17,4(sp)
 4019870:	dc000017 	ldw	r16,0(sp)
 4019874:	dec00904 	addi	sp,sp,36
 4019878:	f800283a 	ret
 401987c:	002f883a 	mov	r23,zero
 4019880:	003ff206 	br	401984c <__reset+0xfb01884c>

04019884 <_fwalk_reent>:
 4019884:	defff704 	addi	sp,sp,-36
 4019888:	dd000415 	stw	r20,16(sp)
 401988c:	dfc00815 	stw	ra,32(sp)
 4019890:	ddc00715 	stw	r23,28(sp)
 4019894:	dd800615 	stw	r22,24(sp)
 4019898:	dd400515 	stw	r21,20(sp)
 401989c:	dcc00315 	stw	r19,12(sp)
 40198a0:	dc800215 	stw	r18,8(sp)
 40198a4:	dc400115 	stw	r17,4(sp)
 40198a8:	dc000015 	stw	r16,0(sp)
 40198ac:	2500b804 	addi	r20,r4,736
 40198b0:	a0002326 	beq	r20,zero,4019940 <_fwalk_reent+0xbc>
 40198b4:	282b883a 	mov	r21,r5
 40198b8:	2027883a 	mov	r19,r4
 40198bc:	002f883a 	mov	r23,zero
 40198c0:	05800044 	movi	r22,1
 40198c4:	04bfffc4 	movi	r18,-1
 40198c8:	a4400117 	ldw	r17,4(r20)
 40198cc:	a4000217 	ldw	r16,8(r20)
 40198d0:	8c7fffc4 	addi	r17,r17,-1
 40198d4:	88000c16 	blt	r17,zero,4019908 <_fwalk_reent+0x84>
 40198d8:	84000304 	addi	r16,r16,12
 40198dc:	8080000b 	ldhu	r2,0(r16)
 40198e0:	8c7fffc4 	addi	r17,r17,-1
 40198e4:	817ffd04 	addi	r5,r16,-12
 40198e8:	b080052e 	bgeu	r22,r2,4019900 <_fwalk_reent+0x7c>
 40198ec:	8080008f 	ldh	r2,2(r16)
 40198f0:	9809883a 	mov	r4,r19
 40198f4:	14800226 	beq	r2,r18,4019900 <_fwalk_reent+0x7c>
 40198f8:	a83ee83a 	callr	r21
 40198fc:	b8aeb03a 	or	r23,r23,r2
 4019900:	84001a04 	addi	r16,r16,104
 4019904:	8cbff51e 	bne	r17,r18,40198dc <__reset+0xfb0188dc>
 4019908:	a5000017 	ldw	r20,0(r20)
 401990c:	a03fee1e 	bne	r20,zero,40198c8 <__reset+0xfb0188c8>
 4019910:	b805883a 	mov	r2,r23
 4019914:	dfc00817 	ldw	ra,32(sp)
 4019918:	ddc00717 	ldw	r23,28(sp)
 401991c:	dd800617 	ldw	r22,24(sp)
 4019920:	dd400517 	ldw	r21,20(sp)
 4019924:	dd000417 	ldw	r20,16(sp)
 4019928:	dcc00317 	ldw	r19,12(sp)
 401992c:	dc800217 	ldw	r18,8(sp)
 4019930:	dc400117 	ldw	r17,4(sp)
 4019934:	dc000017 	ldw	r16,0(sp)
 4019938:	dec00904 	addi	sp,sp,36
 401993c:	f800283a 	ret
 4019940:	002f883a 	mov	r23,zero
 4019944:	003ff206 	br	4019910 <__reset+0xfb018910>

04019948 <_setlocale_r>:
 4019948:	30001b26 	beq	r6,zero,40199b8 <_setlocale_r+0x70>
 401994c:	01410234 	movhi	r5,1032
 4019950:	defffe04 	addi	sp,sp,-8
 4019954:	2947b504 	addi	r5,r5,7892
 4019958:	3009883a 	mov	r4,r6
 401995c:	dc000015 	stw	r16,0(sp)
 4019960:	dfc00115 	stw	ra,4(sp)
 4019964:	3021883a 	mov	r16,r6
 4019968:	401b4bc0 	call	401b4bc <strcmp>
 401996c:	1000061e 	bne	r2,zero,4019988 <_setlocale_r+0x40>
 4019970:	00810234 	movhi	r2,1032
 4019974:	10878e04 	addi	r2,r2,7736
 4019978:	dfc00117 	ldw	ra,4(sp)
 401997c:	dc000017 	ldw	r16,0(sp)
 4019980:	dec00204 	addi	sp,sp,8
 4019984:	f800283a 	ret
 4019988:	01410234 	movhi	r5,1032
 401998c:	29478e04 	addi	r5,r5,7736
 4019990:	8009883a 	mov	r4,r16
 4019994:	401b4bc0 	call	401b4bc <strcmp>
 4019998:	103ff526 	beq	r2,zero,4019970 <__reset+0xfb018970>
 401999c:	01410234 	movhi	r5,1032
 40199a0:	29479804 	addi	r5,r5,7776
 40199a4:	8009883a 	mov	r4,r16
 40199a8:	401b4bc0 	call	401b4bc <strcmp>
 40199ac:	103ff026 	beq	r2,zero,4019970 <__reset+0xfb018970>
 40199b0:	0005883a 	mov	r2,zero
 40199b4:	003ff006 	br	4019978 <__reset+0xfb018978>
 40199b8:	00810234 	movhi	r2,1032
 40199bc:	10878e04 	addi	r2,r2,7736
 40199c0:	f800283a 	ret

040199c4 <__locale_charset>:
 40199c4:	00810474 	movhi	r2,1041
 40199c8:	10958a04 	addi	r2,r2,22056
 40199cc:	f800283a 	ret

040199d0 <__locale_mb_cur_max>:
 40199d0:	00810474 	movhi	r2,1041
 40199d4:	109a5b04 	addi	r2,r2,26988
 40199d8:	10800017 	ldw	r2,0(r2)
 40199dc:	f800283a 	ret

040199e0 <__locale_msgcharset>:
 40199e0:	00810474 	movhi	r2,1041
 40199e4:	10958204 	addi	r2,r2,22024
 40199e8:	f800283a 	ret

040199ec <__locale_cjk_lang>:
 40199ec:	0005883a 	mov	r2,zero
 40199f0:	f800283a 	ret

040199f4 <_localeconv_r>:
 40199f4:	00810474 	movhi	r2,1041
 40199f8:	10959204 	addi	r2,r2,22088
 40199fc:	f800283a 	ret

04019a00 <setlocale>:
 4019a00:	00810474 	movhi	r2,1041
 4019a04:	109a5804 	addi	r2,r2,26976
 4019a08:	280d883a 	mov	r6,r5
 4019a0c:	200b883a 	mov	r5,r4
 4019a10:	11000017 	ldw	r4,0(r2)
 4019a14:	40199481 	jmpi	4019948 <_setlocale_r>

04019a18 <localeconv>:
 4019a18:	00810474 	movhi	r2,1041
 4019a1c:	10959204 	addi	r2,r2,22088
 4019a20:	f800283a 	ret

04019a24 <__smakebuf_r>:
 4019a24:	2880030b 	ldhu	r2,12(r5)
 4019a28:	10c0008c 	andi	r3,r2,2
 4019a2c:	1800411e 	bne	r3,zero,4019b34 <__smakebuf_r+0x110>
 4019a30:	deffec04 	addi	sp,sp,-80
 4019a34:	dc000f15 	stw	r16,60(sp)
 4019a38:	2821883a 	mov	r16,r5
 4019a3c:	2940038f 	ldh	r5,14(r5)
 4019a40:	dc401015 	stw	r17,64(sp)
 4019a44:	dfc01315 	stw	ra,76(sp)
 4019a48:	dcc01215 	stw	r19,72(sp)
 4019a4c:	dc801115 	stw	r18,68(sp)
 4019a50:	2023883a 	mov	r17,r4
 4019a54:	28001c16 	blt	r5,zero,4019ac8 <__smakebuf_r+0xa4>
 4019a58:	d80d883a 	mov	r6,sp
 4019a5c:	401e4700 	call	401e470 <_fstat_r>
 4019a60:	10001816 	blt	r2,zero,4019ac4 <__smakebuf_r+0xa0>
 4019a64:	d8800117 	ldw	r2,4(sp)
 4019a68:	00e00014 	movui	r3,32768
 4019a6c:	10bc000c 	andi	r2,r2,61440
 4019a70:	14c80020 	cmpeqi	r19,r2,8192
 4019a74:	10c03726 	beq	r2,r3,4019b54 <__smakebuf_r+0x130>
 4019a78:	80c0030b 	ldhu	r3,12(r16)
 4019a7c:	18c20014 	ori	r3,r3,2048
 4019a80:	80c0030d 	sth	r3,12(r16)
 4019a84:	00c80004 	movi	r3,8192
 4019a88:	10c0521e 	bne	r2,r3,4019bd4 <__smakebuf_r+0x1b0>
 4019a8c:	8140038f 	ldh	r5,14(r16)
 4019a90:	8809883a 	mov	r4,r17
 4019a94:	401e4cc0 	call	401e4cc <_isatty_r>
 4019a98:	10004c26 	beq	r2,zero,4019bcc <__smakebuf_r+0x1a8>
 4019a9c:	8080030b 	ldhu	r2,12(r16)
 4019aa0:	80c010c4 	addi	r3,r16,67
 4019aa4:	80c00015 	stw	r3,0(r16)
 4019aa8:	10800054 	ori	r2,r2,1
 4019aac:	8080030d 	sth	r2,12(r16)
 4019ab0:	00800044 	movi	r2,1
 4019ab4:	80c00415 	stw	r3,16(r16)
 4019ab8:	80800515 	stw	r2,20(r16)
 4019abc:	04810004 	movi	r18,1024
 4019ac0:	00000706 	br	4019ae0 <__smakebuf_r+0xbc>
 4019ac4:	8080030b 	ldhu	r2,12(r16)
 4019ac8:	10c0200c 	andi	r3,r2,128
 4019acc:	18001f1e 	bne	r3,zero,4019b4c <__smakebuf_r+0x128>
 4019ad0:	04810004 	movi	r18,1024
 4019ad4:	10820014 	ori	r2,r2,2048
 4019ad8:	8080030d 	sth	r2,12(r16)
 4019adc:	0027883a 	mov	r19,zero
 4019ae0:	900b883a 	mov	r5,r18
 4019ae4:	8809883a 	mov	r4,r17
 4019ae8:	4011c080 	call	4011c08 <_malloc_r>
 4019aec:	10002c26 	beq	r2,zero,4019ba0 <__smakebuf_r+0x17c>
 4019af0:	80c0030b 	ldhu	r3,12(r16)
 4019af4:	010100b4 	movhi	r4,1026
 4019af8:	2122ce04 	addi	r4,r4,-29896
 4019afc:	89000f15 	stw	r4,60(r17)
 4019b00:	18c02014 	ori	r3,r3,128
 4019b04:	80c0030d 	sth	r3,12(r16)
 4019b08:	80800015 	stw	r2,0(r16)
 4019b0c:	80800415 	stw	r2,16(r16)
 4019b10:	84800515 	stw	r18,20(r16)
 4019b14:	98001a1e 	bne	r19,zero,4019b80 <__smakebuf_r+0x15c>
 4019b18:	dfc01317 	ldw	ra,76(sp)
 4019b1c:	dcc01217 	ldw	r19,72(sp)
 4019b20:	dc801117 	ldw	r18,68(sp)
 4019b24:	dc401017 	ldw	r17,64(sp)
 4019b28:	dc000f17 	ldw	r16,60(sp)
 4019b2c:	dec01404 	addi	sp,sp,80
 4019b30:	f800283a 	ret
 4019b34:	288010c4 	addi	r2,r5,67
 4019b38:	28800015 	stw	r2,0(r5)
 4019b3c:	28800415 	stw	r2,16(r5)
 4019b40:	00800044 	movi	r2,1
 4019b44:	28800515 	stw	r2,20(r5)
 4019b48:	f800283a 	ret
 4019b4c:	04801004 	movi	r18,64
 4019b50:	003fe006 	br	4019ad4 <__reset+0xfb018ad4>
 4019b54:	81000a17 	ldw	r4,40(r16)
 4019b58:	00c100b4 	movhi	r3,1026
 4019b5c:	18ed1604 	addi	r3,r3,-19368
 4019b60:	20ffc51e 	bne	r4,r3,4019a78 <__reset+0xfb018a78>
 4019b64:	8080030b 	ldhu	r2,12(r16)
 4019b68:	04810004 	movi	r18,1024
 4019b6c:	84801315 	stw	r18,76(r16)
 4019b70:	1484b03a 	or	r2,r2,r18
 4019b74:	8080030d 	sth	r2,12(r16)
 4019b78:	0027883a 	mov	r19,zero
 4019b7c:	003fd806 	br	4019ae0 <__reset+0xfb018ae0>
 4019b80:	8140038f 	ldh	r5,14(r16)
 4019b84:	8809883a 	mov	r4,r17
 4019b88:	401e4cc0 	call	401e4cc <_isatty_r>
 4019b8c:	103fe226 	beq	r2,zero,4019b18 <__reset+0xfb018b18>
 4019b90:	8080030b 	ldhu	r2,12(r16)
 4019b94:	10800054 	ori	r2,r2,1
 4019b98:	8080030d 	sth	r2,12(r16)
 4019b9c:	003fde06 	br	4019b18 <__reset+0xfb018b18>
 4019ba0:	8080030b 	ldhu	r2,12(r16)
 4019ba4:	10c0800c 	andi	r3,r2,512
 4019ba8:	183fdb1e 	bne	r3,zero,4019b18 <__reset+0xfb018b18>
 4019bac:	10800094 	ori	r2,r2,2
 4019bb0:	80c010c4 	addi	r3,r16,67
 4019bb4:	8080030d 	sth	r2,12(r16)
 4019bb8:	00800044 	movi	r2,1
 4019bbc:	80c00015 	stw	r3,0(r16)
 4019bc0:	80c00415 	stw	r3,16(r16)
 4019bc4:	80800515 	stw	r2,20(r16)
 4019bc8:	003fd306 	br	4019b18 <__reset+0xfb018b18>
 4019bcc:	04810004 	movi	r18,1024
 4019bd0:	003fc306 	br	4019ae0 <__reset+0xfb018ae0>
 4019bd4:	0027883a 	mov	r19,zero
 4019bd8:	04810004 	movi	r18,1024
 4019bdc:	003fc006 	br	4019ae0 <__reset+0xfb018ae0>

04019be0 <memchr>:
 4019be0:	208000cc 	andi	r2,r4,3
 4019be4:	280f883a 	mov	r7,r5
 4019be8:	10003426 	beq	r2,zero,4019cbc <memchr+0xdc>
 4019bec:	30bfffc4 	addi	r2,r6,-1
 4019bf0:	30001a26 	beq	r6,zero,4019c5c <memchr+0x7c>
 4019bf4:	20c00003 	ldbu	r3,0(r4)
 4019bf8:	29803fcc 	andi	r6,r5,255
 4019bfc:	30c0051e 	bne	r6,r3,4019c14 <memchr+0x34>
 4019c00:	00001806 	br	4019c64 <memchr+0x84>
 4019c04:	10001526 	beq	r2,zero,4019c5c <memchr+0x7c>
 4019c08:	20c00003 	ldbu	r3,0(r4)
 4019c0c:	10bfffc4 	addi	r2,r2,-1
 4019c10:	30c01426 	beq	r6,r3,4019c64 <memchr+0x84>
 4019c14:	21000044 	addi	r4,r4,1
 4019c18:	20c000cc 	andi	r3,r4,3
 4019c1c:	183ff91e 	bne	r3,zero,4019c04 <__reset+0xfb018c04>
 4019c20:	020000c4 	movi	r8,3
 4019c24:	40801136 	bltu	r8,r2,4019c6c <memchr+0x8c>
 4019c28:	10000c26 	beq	r2,zero,4019c5c <memchr+0x7c>
 4019c2c:	20c00003 	ldbu	r3,0(r4)
 4019c30:	29403fcc 	andi	r5,r5,255
 4019c34:	28c00b26 	beq	r5,r3,4019c64 <memchr+0x84>
 4019c38:	20c00044 	addi	r3,r4,1
 4019c3c:	39803fcc 	andi	r6,r7,255
 4019c40:	2089883a 	add	r4,r4,r2
 4019c44:	00000306 	br	4019c54 <memchr+0x74>
 4019c48:	18c00044 	addi	r3,r3,1
 4019c4c:	197fffc3 	ldbu	r5,-1(r3)
 4019c50:	31400526 	beq	r6,r5,4019c68 <memchr+0x88>
 4019c54:	1805883a 	mov	r2,r3
 4019c58:	20fffb1e 	bne	r4,r3,4019c48 <__reset+0xfb018c48>
 4019c5c:	0005883a 	mov	r2,zero
 4019c60:	f800283a 	ret
 4019c64:	2005883a 	mov	r2,r4
 4019c68:	f800283a 	ret
 4019c6c:	28c03fcc 	andi	r3,r5,255
 4019c70:	1812923a 	slli	r9,r3,8
 4019c74:	02ffbff4 	movhi	r11,65279
 4019c78:	02a02074 	movhi	r10,32897
 4019c7c:	48d2b03a 	or	r9,r9,r3
 4019c80:	4806943a 	slli	r3,r9,16
 4019c84:	5affbfc4 	addi	r11,r11,-257
 4019c88:	52a02004 	addi	r10,r10,-32640
 4019c8c:	48d2b03a 	or	r9,r9,r3
 4019c90:	20c00017 	ldw	r3,0(r4)
 4019c94:	48c6f03a 	xor	r3,r9,r3
 4019c98:	1acd883a 	add	r6,r3,r11
 4019c9c:	00c6303a 	nor	r3,zero,r3
 4019ca0:	30c6703a 	and	r3,r6,r3
 4019ca4:	1a86703a 	and	r3,r3,r10
 4019ca8:	183fe01e 	bne	r3,zero,4019c2c <__reset+0xfb018c2c>
 4019cac:	10bfff04 	addi	r2,r2,-4
 4019cb0:	21000104 	addi	r4,r4,4
 4019cb4:	40bff636 	bltu	r8,r2,4019c90 <__reset+0xfb018c90>
 4019cb8:	003fdb06 	br	4019c28 <__reset+0xfb018c28>
 4019cbc:	3005883a 	mov	r2,r6
 4019cc0:	003fd706 	br	4019c20 <__reset+0xfb018c20>

04019cc4 <memmove>:
 4019cc4:	2005883a 	mov	r2,r4
 4019cc8:	29000b2e 	bgeu	r5,r4,4019cf8 <memmove+0x34>
 4019ccc:	298f883a 	add	r7,r5,r6
 4019cd0:	21c0092e 	bgeu	r4,r7,4019cf8 <memmove+0x34>
 4019cd4:	2187883a 	add	r3,r4,r6
 4019cd8:	198bc83a 	sub	r5,r3,r6
 4019cdc:	30004826 	beq	r6,zero,4019e00 <memmove+0x13c>
 4019ce0:	39ffffc4 	addi	r7,r7,-1
 4019ce4:	39000003 	ldbu	r4,0(r7)
 4019ce8:	18ffffc4 	addi	r3,r3,-1
 4019cec:	19000005 	stb	r4,0(r3)
 4019cf0:	28fffb1e 	bne	r5,r3,4019ce0 <__reset+0xfb018ce0>
 4019cf4:	f800283a 	ret
 4019cf8:	00c003c4 	movi	r3,15
 4019cfc:	1980412e 	bgeu	r3,r6,4019e04 <memmove+0x140>
 4019d00:	2886b03a 	or	r3,r5,r2
 4019d04:	18c000cc 	andi	r3,r3,3
 4019d08:	1800401e 	bne	r3,zero,4019e0c <memmove+0x148>
 4019d0c:	33fffc04 	addi	r15,r6,-16
 4019d10:	781ed13a 	srli	r15,r15,4
 4019d14:	28c00104 	addi	r3,r5,4
 4019d18:	13400104 	addi	r13,r2,4
 4019d1c:	781c913a 	slli	r14,r15,4
 4019d20:	2b000204 	addi	r12,r5,8
 4019d24:	12c00204 	addi	r11,r2,8
 4019d28:	73800504 	addi	r14,r14,20
 4019d2c:	2a800304 	addi	r10,r5,12
 4019d30:	12400304 	addi	r9,r2,12
 4019d34:	2b9d883a 	add	r14,r5,r14
 4019d38:	2811883a 	mov	r8,r5
 4019d3c:	100f883a 	mov	r7,r2
 4019d40:	41000017 	ldw	r4,0(r8)
 4019d44:	39c00404 	addi	r7,r7,16
 4019d48:	18c00404 	addi	r3,r3,16
 4019d4c:	393ffc15 	stw	r4,-16(r7)
 4019d50:	193ffc17 	ldw	r4,-16(r3)
 4019d54:	6b400404 	addi	r13,r13,16
 4019d58:	5ac00404 	addi	r11,r11,16
 4019d5c:	693ffc15 	stw	r4,-16(r13)
 4019d60:	61000017 	ldw	r4,0(r12)
 4019d64:	4a400404 	addi	r9,r9,16
 4019d68:	42000404 	addi	r8,r8,16
 4019d6c:	593ffc15 	stw	r4,-16(r11)
 4019d70:	51000017 	ldw	r4,0(r10)
 4019d74:	63000404 	addi	r12,r12,16
 4019d78:	52800404 	addi	r10,r10,16
 4019d7c:	493ffc15 	stw	r4,-16(r9)
 4019d80:	1bbfef1e 	bne	r3,r14,4019d40 <__reset+0xfb018d40>
 4019d84:	79000044 	addi	r4,r15,1
 4019d88:	2008913a 	slli	r4,r4,4
 4019d8c:	328003cc 	andi	r10,r6,15
 4019d90:	02c000c4 	movi	r11,3
 4019d94:	1107883a 	add	r3,r2,r4
 4019d98:	290b883a 	add	r5,r5,r4
 4019d9c:	5a801e2e 	bgeu	r11,r10,4019e18 <memmove+0x154>
 4019da0:	1813883a 	mov	r9,r3
 4019da4:	2811883a 	mov	r8,r5
 4019da8:	500f883a 	mov	r7,r10
 4019dac:	41000017 	ldw	r4,0(r8)
 4019db0:	4a400104 	addi	r9,r9,4
 4019db4:	39ffff04 	addi	r7,r7,-4
 4019db8:	493fff15 	stw	r4,-4(r9)
 4019dbc:	42000104 	addi	r8,r8,4
 4019dc0:	59fffa36 	bltu	r11,r7,4019dac <__reset+0xfb018dac>
 4019dc4:	513fff04 	addi	r4,r10,-4
 4019dc8:	2008d0ba 	srli	r4,r4,2
 4019dcc:	318000cc 	andi	r6,r6,3
 4019dd0:	21000044 	addi	r4,r4,1
 4019dd4:	2109883a 	add	r4,r4,r4
 4019dd8:	2109883a 	add	r4,r4,r4
 4019ddc:	1907883a 	add	r3,r3,r4
 4019de0:	290b883a 	add	r5,r5,r4
 4019de4:	30000b26 	beq	r6,zero,4019e14 <memmove+0x150>
 4019de8:	198d883a 	add	r6,r3,r6
 4019dec:	29c00003 	ldbu	r7,0(r5)
 4019df0:	18c00044 	addi	r3,r3,1
 4019df4:	29400044 	addi	r5,r5,1
 4019df8:	19ffffc5 	stb	r7,-1(r3)
 4019dfc:	19bffb1e 	bne	r3,r6,4019dec <__reset+0xfb018dec>
 4019e00:	f800283a 	ret
 4019e04:	1007883a 	mov	r3,r2
 4019e08:	003ff606 	br	4019de4 <__reset+0xfb018de4>
 4019e0c:	1007883a 	mov	r3,r2
 4019e10:	003ff506 	br	4019de8 <__reset+0xfb018de8>
 4019e14:	f800283a 	ret
 4019e18:	500d883a 	mov	r6,r10
 4019e1c:	003ff106 	br	4019de4 <__reset+0xfb018de4>

04019e20 <_Balloc>:
 4019e20:	20801317 	ldw	r2,76(r4)
 4019e24:	defffc04 	addi	sp,sp,-16
 4019e28:	dc400115 	stw	r17,4(sp)
 4019e2c:	dc000015 	stw	r16,0(sp)
 4019e30:	dfc00315 	stw	ra,12(sp)
 4019e34:	dc800215 	stw	r18,8(sp)
 4019e38:	2023883a 	mov	r17,r4
 4019e3c:	2821883a 	mov	r16,r5
 4019e40:	10000f26 	beq	r2,zero,4019e80 <_Balloc+0x60>
 4019e44:	8407883a 	add	r3,r16,r16
 4019e48:	18c7883a 	add	r3,r3,r3
 4019e4c:	10c7883a 	add	r3,r2,r3
 4019e50:	18800017 	ldw	r2,0(r3)
 4019e54:	10001126 	beq	r2,zero,4019e9c <_Balloc+0x7c>
 4019e58:	11000017 	ldw	r4,0(r2)
 4019e5c:	19000015 	stw	r4,0(r3)
 4019e60:	10000415 	stw	zero,16(r2)
 4019e64:	10000315 	stw	zero,12(r2)
 4019e68:	dfc00317 	ldw	ra,12(sp)
 4019e6c:	dc800217 	ldw	r18,8(sp)
 4019e70:	dc400117 	ldw	r17,4(sp)
 4019e74:	dc000017 	ldw	r16,0(sp)
 4019e78:	dec00404 	addi	sp,sp,16
 4019e7c:	f800283a 	ret
 4019e80:	01800844 	movi	r6,33
 4019e84:	01400104 	movi	r5,4
 4019e88:	401e0a00 	call	401e0a0 <_calloc_r>
 4019e8c:	88801315 	stw	r2,76(r17)
 4019e90:	103fec1e 	bne	r2,zero,4019e44 <__reset+0xfb018e44>
 4019e94:	0005883a 	mov	r2,zero
 4019e98:	003ff306 	br	4019e68 <__reset+0xfb018e68>
 4019e9c:	01400044 	movi	r5,1
 4019ea0:	2c24983a 	sll	r18,r5,r16
 4019ea4:	8809883a 	mov	r4,r17
 4019ea8:	91800144 	addi	r6,r18,5
 4019eac:	318d883a 	add	r6,r6,r6
 4019eb0:	318d883a 	add	r6,r6,r6
 4019eb4:	401e0a00 	call	401e0a0 <_calloc_r>
 4019eb8:	103ff626 	beq	r2,zero,4019e94 <__reset+0xfb018e94>
 4019ebc:	14000115 	stw	r16,4(r2)
 4019ec0:	14800215 	stw	r18,8(r2)
 4019ec4:	003fe606 	br	4019e60 <__reset+0xfb018e60>

04019ec8 <_Bfree>:
 4019ec8:	28000826 	beq	r5,zero,4019eec <_Bfree+0x24>
 4019ecc:	28c00117 	ldw	r3,4(r5)
 4019ed0:	20801317 	ldw	r2,76(r4)
 4019ed4:	18c7883a 	add	r3,r3,r3
 4019ed8:	18c7883a 	add	r3,r3,r3
 4019edc:	10c5883a 	add	r2,r2,r3
 4019ee0:	10c00017 	ldw	r3,0(r2)
 4019ee4:	28c00015 	stw	r3,0(r5)
 4019ee8:	11400015 	stw	r5,0(r2)
 4019eec:	f800283a 	ret

04019ef0 <__multadd>:
 4019ef0:	defffa04 	addi	sp,sp,-24
 4019ef4:	dc800315 	stw	r18,12(sp)
 4019ef8:	dc400215 	stw	r17,8(sp)
 4019efc:	dc000115 	stw	r16,4(sp)
 4019f00:	2823883a 	mov	r17,r5
 4019f04:	2c000417 	ldw	r16,16(r5)
 4019f08:	dfc00515 	stw	ra,20(sp)
 4019f0c:	dcc00415 	stw	r19,16(sp)
 4019f10:	2025883a 	mov	r18,r4
 4019f14:	29400504 	addi	r5,r5,20
 4019f18:	0011883a 	mov	r8,zero
 4019f1c:	28c00017 	ldw	r3,0(r5)
 4019f20:	29400104 	addi	r5,r5,4
 4019f24:	42000044 	addi	r8,r8,1
 4019f28:	18bfffcc 	andi	r2,r3,65535
 4019f2c:	1185383a 	mul	r2,r2,r6
 4019f30:	1806d43a 	srli	r3,r3,16
 4019f34:	11cf883a 	add	r7,r2,r7
 4019f38:	3808d43a 	srli	r4,r7,16
 4019f3c:	1987383a 	mul	r3,r3,r6
 4019f40:	38bfffcc 	andi	r2,r7,65535
 4019f44:	1907883a 	add	r3,r3,r4
 4019f48:	1808943a 	slli	r4,r3,16
 4019f4c:	180ed43a 	srli	r7,r3,16
 4019f50:	2085883a 	add	r2,r4,r2
 4019f54:	28bfff15 	stw	r2,-4(r5)
 4019f58:	443ff016 	blt	r8,r16,4019f1c <__reset+0xfb018f1c>
 4019f5c:	38000926 	beq	r7,zero,4019f84 <__multadd+0x94>
 4019f60:	88800217 	ldw	r2,8(r17)
 4019f64:	80800f0e 	bge	r16,r2,4019fa4 <__multadd+0xb4>
 4019f68:	80800144 	addi	r2,r16,5
 4019f6c:	1085883a 	add	r2,r2,r2
 4019f70:	1085883a 	add	r2,r2,r2
 4019f74:	8885883a 	add	r2,r17,r2
 4019f78:	11c00015 	stw	r7,0(r2)
 4019f7c:	84000044 	addi	r16,r16,1
 4019f80:	8c000415 	stw	r16,16(r17)
 4019f84:	8805883a 	mov	r2,r17
 4019f88:	dfc00517 	ldw	ra,20(sp)
 4019f8c:	dcc00417 	ldw	r19,16(sp)
 4019f90:	dc800317 	ldw	r18,12(sp)
 4019f94:	dc400217 	ldw	r17,8(sp)
 4019f98:	dc000117 	ldw	r16,4(sp)
 4019f9c:	dec00604 	addi	sp,sp,24
 4019fa0:	f800283a 	ret
 4019fa4:	89400117 	ldw	r5,4(r17)
 4019fa8:	9009883a 	mov	r4,r18
 4019fac:	d9c00015 	stw	r7,0(sp)
 4019fb0:	29400044 	addi	r5,r5,1
 4019fb4:	4019e200 	call	4019e20 <_Balloc>
 4019fb8:	89800417 	ldw	r6,16(r17)
 4019fbc:	89400304 	addi	r5,r17,12
 4019fc0:	11000304 	addi	r4,r2,12
 4019fc4:	31800084 	addi	r6,r6,2
 4019fc8:	318d883a 	add	r6,r6,r6
 4019fcc:	318d883a 	add	r6,r6,r6
 4019fd0:	1027883a 	mov	r19,r2
 4019fd4:	40124140 	call	4012414 <memcpy>
 4019fd8:	d9c00017 	ldw	r7,0(sp)
 4019fdc:	88000a26 	beq	r17,zero,401a008 <__multadd+0x118>
 4019fe0:	88c00117 	ldw	r3,4(r17)
 4019fe4:	90801317 	ldw	r2,76(r18)
 4019fe8:	18c7883a 	add	r3,r3,r3
 4019fec:	18c7883a 	add	r3,r3,r3
 4019ff0:	10c5883a 	add	r2,r2,r3
 4019ff4:	10c00017 	ldw	r3,0(r2)
 4019ff8:	88c00015 	stw	r3,0(r17)
 4019ffc:	14400015 	stw	r17,0(r2)
 401a000:	9823883a 	mov	r17,r19
 401a004:	003fd806 	br	4019f68 <__reset+0xfb018f68>
 401a008:	9823883a 	mov	r17,r19
 401a00c:	003fd606 	br	4019f68 <__reset+0xfb018f68>

0401a010 <__s2b>:
 401a010:	defff904 	addi	sp,sp,-28
 401a014:	dc400115 	stw	r17,4(sp)
 401a018:	dc000015 	stw	r16,0(sp)
 401a01c:	2023883a 	mov	r17,r4
 401a020:	2821883a 	mov	r16,r5
 401a024:	39000204 	addi	r4,r7,8
 401a028:	01400244 	movi	r5,9
 401a02c:	dcc00315 	stw	r19,12(sp)
 401a030:	dc800215 	stw	r18,8(sp)
 401a034:	dfc00615 	stw	ra,24(sp)
 401a038:	dd400515 	stw	r21,20(sp)
 401a03c:	dd000415 	stw	r20,16(sp)
 401a040:	3825883a 	mov	r18,r7
 401a044:	3027883a 	mov	r19,r6
 401a048:	400dbb40 	call	400dbb4 <__divsi3>
 401a04c:	00c00044 	movi	r3,1
 401a050:	000b883a 	mov	r5,zero
 401a054:	1880030e 	bge	r3,r2,401a064 <__s2b+0x54>
 401a058:	18c7883a 	add	r3,r3,r3
 401a05c:	29400044 	addi	r5,r5,1
 401a060:	18bffd16 	blt	r3,r2,401a058 <__reset+0xfb019058>
 401a064:	8809883a 	mov	r4,r17
 401a068:	4019e200 	call	4019e20 <_Balloc>
 401a06c:	d8c00717 	ldw	r3,28(sp)
 401a070:	10c00515 	stw	r3,20(r2)
 401a074:	00c00044 	movi	r3,1
 401a078:	10c00415 	stw	r3,16(r2)
 401a07c:	00c00244 	movi	r3,9
 401a080:	1cc0210e 	bge	r3,r19,401a108 <__s2b+0xf8>
 401a084:	80eb883a 	add	r21,r16,r3
 401a088:	a829883a 	mov	r20,r21
 401a08c:	84e1883a 	add	r16,r16,r19
 401a090:	a1c00007 	ldb	r7,0(r20)
 401a094:	01800284 	movi	r6,10
 401a098:	a5000044 	addi	r20,r20,1
 401a09c:	100b883a 	mov	r5,r2
 401a0a0:	39fff404 	addi	r7,r7,-48
 401a0a4:	8809883a 	mov	r4,r17
 401a0a8:	4019ef00 	call	4019ef0 <__multadd>
 401a0ac:	a43ff81e 	bne	r20,r16,401a090 <__reset+0xfb019090>
 401a0b0:	ace1883a 	add	r16,r21,r19
 401a0b4:	843ffe04 	addi	r16,r16,-8
 401a0b8:	9c800a0e 	bge	r19,r18,401a0e4 <__s2b+0xd4>
 401a0bc:	94e5c83a 	sub	r18,r18,r19
 401a0c0:	84a5883a 	add	r18,r16,r18
 401a0c4:	81c00007 	ldb	r7,0(r16)
 401a0c8:	01800284 	movi	r6,10
 401a0cc:	84000044 	addi	r16,r16,1
 401a0d0:	100b883a 	mov	r5,r2
 401a0d4:	39fff404 	addi	r7,r7,-48
 401a0d8:	8809883a 	mov	r4,r17
 401a0dc:	4019ef00 	call	4019ef0 <__multadd>
 401a0e0:	84bff81e 	bne	r16,r18,401a0c4 <__reset+0xfb0190c4>
 401a0e4:	dfc00617 	ldw	ra,24(sp)
 401a0e8:	dd400517 	ldw	r21,20(sp)
 401a0ec:	dd000417 	ldw	r20,16(sp)
 401a0f0:	dcc00317 	ldw	r19,12(sp)
 401a0f4:	dc800217 	ldw	r18,8(sp)
 401a0f8:	dc400117 	ldw	r17,4(sp)
 401a0fc:	dc000017 	ldw	r16,0(sp)
 401a100:	dec00704 	addi	sp,sp,28
 401a104:	f800283a 	ret
 401a108:	84000284 	addi	r16,r16,10
 401a10c:	1827883a 	mov	r19,r3
 401a110:	003fe906 	br	401a0b8 <__reset+0xfb0190b8>

0401a114 <__hi0bits>:
 401a114:	20bfffec 	andhi	r2,r4,65535
 401a118:	1000141e 	bne	r2,zero,401a16c <__hi0bits+0x58>
 401a11c:	2008943a 	slli	r4,r4,16
 401a120:	00800404 	movi	r2,16
 401a124:	20ffc02c 	andhi	r3,r4,65280
 401a128:	1800021e 	bne	r3,zero,401a134 <__hi0bits+0x20>
 401a12c:	2008923a 	slli	r4,r4,8
 401a130:	10800204 	addi	r2,r2,8
 401a134:	20fc002c 	andhi	r3,r4,61440
 401a138:	1800021e 	bne	r3,zero,401a144 <__hi0bits+0x30>
 401a13c:	2008913a 	slli	r4,r4,4
 401a140:	10800104 	addi	r2,r2,4
 401a144:	20f0002c 	andhi	r3,r4,49152
 401a148:	1800031e 	bne	r3,zero,401a158 <__hi0bits+0x44>
 401a14c:	2109883a 	add	r4,r4,r4
 401a150:	10800084 	addi	r2,r2,2
 401a154:	2109883a 	add	r4,r4,r4
 401a158:	20000316 	blt	r4,zero,401a168 <__hi0bits+0x54>
 401a15c:	2110002c 	andhi	r4,r4,16384
 401a160:	2000041e 	bne	r4,zero,401a174 <__hi0bits+0x60>
 401a164:	00800804 	movi	r2,32
 401a168:	f800283a 	ret
 401a16c:	0005883a 	mov	r2,zero
 401a170:	003fec06 	br	401a124 <__reset+0xfb019124>
 401a174:	10800044 	addi	r2,r2,1
 401a178:	f800283a 	ret

0401a17c <__lo0bits>:
 401a17c:	20c00017 	ldw	r3,0(r4)
 401a180:	188001cc 	andi	r2,r3,7
 401a184:	10000826 	beq	r2,zero,401a1a8 <__lo0bits+0x2c>
 401a188:	1880004c 	andi	r2,r3,1
 401a18c:	1000211e 	bne	r2,zero,401a214 <__lo0bits+0x98>
 401a190:	1880008c 	andi	r2,r3,2
 401a194:	1000211e 	bne	r2,zero,401a21c <__lo0bits+0xa0>
 401a198:	1806d0ba 	srli	r3,r3,2
 401a19c:	00800084 	movi	r2,2
 401a1a0:	20c00015 	stw	r3,0(r4)
 401a1a4:	f800283a 	ret
 401a1a8:	18bfffcc 	andi	r2,r3,65535
 401a1ac:	10001326 	beq	r2,zero,401a1fc <__lo0bits+0x80>
 401a1b0:	0005883a 	mov	r2,zero
 401a1b4:	19403fcc 	andi	r5,r3,255
 401a1b8:	2800021e 	bne	r5,zero,401a1c4 <__lo0bits+0x48>
 401a1bc:	1806d23a 	srli	r3,r3,8
 401a1c0:	10800204 	addi	r2,r2,8
 401a1c4:	194003cc 	andi	r5,r3,15
 401a1c8:	2800021e 	bne	r5,zero,401a1d4 <__lo0bits+0x58>
 401a1cc:	1806d13a 	srli	r3,r3,4
 401a1d0:	10800104 	addi	r2,r2,4
 401a1d4:	194000cc 	andi	r5,r3,3
 401a1d8:	2800021e 	bne	r5,zero,401a1e4 <__lo0bits+0x68>
 401a1dc:	1806d0ba 	srli	r3,r3,2
 401a1e0:	10800084 	addi	r2,r2,2
 401a1e4:	1940004c 	andi	r5,r3,1
 401a1e8:	2800081e 	bne	r5,zero,401a20c <__lo0bits+0x90>
 401a1ec:	1806d07a 	srli	r3,r3,1
 401a1f0:	1800051e 	bne	r3,zero,401a208 <__lo0bits+0x8c>
 401a1f4:	00800804 	movi	r2,32
 401a1f8:	f800283a 	ret
 401a1fc:	1806d43a 	srli	r3,r3,16
 401a200:	00800404 	movi	r2,16
 401a204:	003feb06 	br	401a1b4 <__reset+0xfb0191b4>
 401a208:	10800044 	addi	r2,r2,1
 401a20c:	20c00015 	stw	r3,0(r4)
 401a210:	f800283a 	ret
 401a214:	0005883a 	mov	r2,zero
 401a218:	f800283a 	ret
 401a21c:	1806d07a 	srli	r3,r3,1
 401a220:	00800044 	movi	r2,1
 401a224:	20c00015 	stw	r3,0(r4)
 401a228:	f800283a 	ret

0401a22c <__i2b>:
 401a22c:	defffd04 	addi	sp,sp,-12
 401a230:	dc000015 	stw	r16,0(sp)
 401a234:	04000044 	movi	r16,1
 401a238:	dc400115 	stw	r17,4(sp)
 401a23c:	2823883a 	mov	r17,r5
 401a240:	800b883a 	mov	r5,r16
 401a244:	dfc00215 	stw	ra,8(sp)
 401a248:	4019e200 	call	4019e20 <_Balloc>
 401a24c:	14400515 	stw	r17,20(r2)
 401a250:	14000415 	stw	r16,16(r2)
 401a254:	dfc00217 	ldw	ra,8(sp)
 401a258:	dc400117 	ldw	r17,4(sp)
 401a25c:	dc000017 	ldw	r16,0(sp)
 401a260:	dec00304 	addi	sp,sp,12
 401a264:	f800283a 	ret

0401a268 <__multiply>:
 401a268:	defffa04 	addi	sp,sp,-24
 401a26c:	dcc00315 	stw	r19,12(sp)
 401a270:	dc800215 	stw	r18,8(sp)
 401a274:	34c00417 	ldw	r19,16(r6)
 401a278:	2c800417 	ldw	r18,16(r5)
 401a27c:	dd000415 	stw	r20,16(sp)
 401a280:	dc400115 	stw	r17,4(sp)
 401a284:	dfc00515 	stw	ra,20(sp)
 401a288:	dc000015 	stw	r16,0(sp)
 401a28c:	2829883a 	mov	r20,r5
 401a290:	3023883a 	mov	r17,r6
 401a294:	94c0050e 	bge	r18,r19,401a2ac <__multiply+0x44>
 401a298:	9007883a 	mov	r3,r18
 401a29c:	3029883a 	mov	r20,r6
 401a2a0:	9825883a 	mov	r18,r19
 401a2a4:	2823883a 	mov	r17,r5
 401a2a8:	1827883a 	mov	r19,r3
 401a2ac:	a0800217 	ldw	r2,8(r20)
 401a2b0:	94e1883a 	add	r16,r18,r19
 401a2b4:	a1400117 	ldw	r5,4(r20)
 401a2b8:	1400010e 	bge	r2,r16,401a2c0 <__multiply+0x58>
 401a2bc:	29400044 	addi	r5,r5,1
 401a2c0:	4019e200 	call	4019e20 <_Balloc>
 401a2c4:	8415883a 	add	r10,r16,r16
 401a2c8:	12c00504 	addi	r11,r2,20
 401a2cc:	5295883a 	add	r10,r10,r10
 401a2d0:	5a95883a 	add	r10,r11,r10
 401a2d4:	5807883a 	mov	r3,r11
 401a2d8:	5a80032e 	bgeu	r11,r10,401a2e8 <__multiply+0x80>
 401a2dc:	18000015 	stw	zero,0(r3)
 401a2e0:	18c00104 	addi	r3,r3,4
 401a2e4:	1abffd36 	bltu	r3,r10,401a2dc <__reset+0xfb0192dc>
 401a2e8:	9ce7883a 	add	r19,r19,r19
 401a2ec:	94a5883a 	add	r18,r18,r18
 401a2f0:	89800504 	addi	r6,r17,20
 401a2f4:	9ce7883a 	add	r19,r19,r19
 401a2f8:	a3400504 	addi	r13,r20,20
 401a2fc:	94a5883a 	add	r18,r18,r18
 401a300:	34d9883a 	add	r12,r6,r19
 401a304:	6c93883a 	add	r9,r13,r18
 401a308:	3300422e 	bgeu	r6,r12,401a414 <__multiply+0x1ac>
 401a30c:	37c00017 	ldw	ra,0(r6)
 401a310:	fbffffcc 	andi	r15,ra,65535
 401a314:	78001b26 	beq	r15,zero,401a384 <__multiply+0x11c>
 401a318:	5811883a 	mov	r8,r11
 401a31c:	681d883a 	mov	r14,r13
 401a320:	000f883a 	mov	r7,zero
 401a324:	71000017 	ldw	r4,0(r14)
 401a328:	40c00017 	ldw	r3,0(r8)
 401a32c:	73800104 	addi	r14,r14,4
 401a330:	217fffcc 	andi	r5,r4,65535
 401a334:	2bcb383a 	mul	r5,r5,r15
 401a338:	2008d43a 	srli	r4,r4,16
 401a33c:	1c7fffcc 	andi	r17,r3,65535
 401a340:	2c4b883a 	add	r5,r5,r17
 401a344:	29cb883a 	add	r5,r5,r7
 401a348:	23c9383a 	mul	r4,r4,r15
 401a34c:	1806d43a 	srli	r3,r3,16
 401a350:	280ed43a 	srli	r7,r5,16
 401a354:	297fffcc 	andi	r5,r5,65535
 401a358:	20c7883a 	add	r3,r4,r3
 401a35c:	19c7883a 	add	r3,r3,r7
 401a360:	1808943a 	slli	r4,r3,16
 401a364:	4023883a 	mov	r17,r8
 401a368:	180ed43a 	srli	r7,r3,16
 401a36c:	214ab03a 	or	r5,r4,r5
 401a370:	41400015 	stw	r5,0(r8)
 401a374:	42000104 	addi	r8,r8,4
 401a378:	727fea36 	bltu	r14,r9,401a324 <__reset+0xfb019324>
 401a37c:	89c00115 	stw	r7,4(r17)
 401a380:	37c00017 	ldw	ra,0(r6)
 401a384:	f83ed43a 	srli	ra,ra,16
 401a388:	f8001f26 	beq	ra,zero,401a408 <__multiply+0x1a0>
 401a38c:	58c00017 	ldw	r3,0(r11)
 401a390:	681d883a 	mov	r14,r13
 401a394:	581f883a 	mov	r15,r11
 401a398:	1811883a 	mov	r8,r3
 401a39c:	5825883a 	mov	r18,r11
 401a3a0:	000f883a 	mov	r7,zero
 401a3a4:	00000106 	br	401a3ac <__multiply+0x144>
 401a3a8:	8825883a 	mov	r18,r17
 401a3ac:	7140000b 	ldhu	r5,0(r14)
 401a3b0:	4010d43a 	srli	r8,r8,16
 401a3b4:	193fffcc 	andi	r4,r3,65535
 401a3b8:	2fcb383a 	mul	r5,r5,ra
 401a3bc:	7bc00104 	addi	r15,r15,4
 401a3c0:	73800104 	addi	r14,r14,4
 401a3c4:	2a0b883a 	add	r5,r5,r8
 401a3c8:	29cb883a 	add	r5,r5,r7
 401a3cc:	2806943a 	slli	r3,r5,16
 401a3d0:	94400104 	addi	r17,r18,4
 401a3d4:	280ad43a 	srli	r5,r5,16
 401a3d8:	1908b03a 	or	r4,r3,r4
 401a3dc:	793fff15 	stw	r4,-4(r15)
 401a3e0:	70ffff17 	ldw	r3,-4(r14)
 401a3e4:	8a000017 	ldw	r8,0(r17)
 401a3e8:	1806d43a 	srli	r3,r3,16
 401a3ec:	413fffcc 	andi	r4,r8,65535
 401a3f0:	1fc7383a 	mul	r3,r3,ra
 401a3f4:	1907883a 	add	r3,r3,r4
 401a3f8:	1947883a 	add	r3,r3,r5
 401a3fc:	180ed43a 	srli	r7,r3,16
 401a400:	727fe936 	bltu	r14,r9,401a3a8 <__reset+0xfb0193a8>
 401a404:	90c00115 	stw	r3,4(r18)
 401a408:	31800104 	addi	r6,r6,4
 401a40c:	5ac00104 	addi	r11,r11,4
 401a410:	333fbe36 	bltu	r6,r12,401a30c <__reset+0xfb01930c>
 401a414:	0400090e 	bge	zero,r16,401a43c <__multiply+0x1d4>
 401a418:	50ffff17 	ldw	r3,-4(r10)
 401a41c:	52bfff04 	addi	r10,r10,-4
 401a420:	18000326 	beq	r3,zero,401a430 <__multiply+0x1c8>
 401a424:	00000506 	br	401a43c <__multiply+0x1d4>
 401a428:	50c00017 	ldw	r3,0(r10)
 401a42c:	1800031e 	bne	r3,zero,401a43c <__multiply+0x1d4>
 401a430:	843fffc4 	addi	r16,r16,-1
 401a434:	52bfff04 	addi	r10,r10,-4
 401a438:	803ffb1e 	bne	r16,zero,401a428 <__reset+0xfb019428>
 401a43c:	14000415 	stw	r16,16(r2)
 401a440:	dfc00517 	ldw	ra,20(sp)
 401a444:	dd000417 	ldw	r20,16(sp)
 401a448:	dcc00317 	ldw	r19,12(sp)
 401a44c:	dc800217 	ldw	r18,8(sp)
 401a450:	dc400117 	ldw	r17,4(sp)
 401a454:	dc000017 	ldw	r16,0(sp)
 401a458:	dec00604 	addi	sp,sp,24
 401a45c:	f800283a 	ret

0401a460 <__pow5mult>:
 401a460:	defffa04 	addi	sp,sp,-24
 401a464:	dcc00315 	stw	r19,12(sp)
 401a468:	dc000015 	stw	r16,0(sp)
 401a46c:	dfc00515 	stw	ra,20(sp)
 401a470:	dd000415 	stw	r20,16(sp)
 401a474:	dc800215 	stw	r18,8(sp)
 401a478:	dc400115 	stw	r17,4(sp)
 401a47c:	308000cc 	andi	r2,r6,3
 401a480:	3021883a 	mov	r16,r6
 401a484:	2027883a 	mov	r19,r4
 401a488:	10002f1e 	bne	r2,zero,401a548 <__pow5mult+0xe8>
 401a48c:	2825883a 	mov	r18,r5
 401a490:	8021d0ba 	srai	r16,r16,2
 401a494:	80001a26 	beq	r16,zero,401a500 <__pow5mult+0xa0>
 401a498:	9c401217 	ldw	r17,72(r19)
 401a49c:	8800061e 	bne	r17,zero,401a4b8 <__pow5mult+0x58>
 401a4a0:	00003406 	br	401a574 <__pow5mult+0x114>
 401a4a4:	8021d07a 	srai	r16,r16,1
 401a4a8:	80001526 	beq	r16,zero,401a500 <__pow5mult+0xa0>
 401a4ac:	88800017 	ldw	r2,0(r17)
 401a4b0:	10001c26 	beq	r2,zero,401a524 <__pow5mult+0xc4>
 401a4b4:	1023883a 	mov	r17,r2
 401a4b8:	8080004c 	andi	r2,r16,1
 401a4bc:	103ff926 	beq	r2,zero,401a4a4 <__reset+0xfb0194a4>
 401a4c0:	880d883a 	mov	r6,r17
 401a4c4:	900b883a 	mov	r5,r18
 401a4c8:	9809883a 	mov	r4,r19
 401a4cc:	401a2680 	call	401a268 <__multiply>
 401a4d0:	90001b26 	beq	r18,zero,401a540 <__pow5mult+0xe0>
 401a4d4:	91000117 	ldw	r4,4(r18)
 401a4d8:	98c01317 	ldw	r3,76(r19)
 401a4dc:	8021d07a 	srai	r16,r16,1
 401a4e0:	2109883a 	add	r4,r4,r4
 401a4e4:	2109883a 	add	r4,r4,r4
 401a4e8:	1907883a 	add	r3,r3,r4
 401a4ec:	19000017 	ldw	r4,0(r3)
 401a4f0:	91000015 	stw	r4,0(r18)
 401a4f4:	1c800015 	stw	r18,0(r3)
 401a4f8:	1025883a 	mov	r18,r2
 401a4fc:	803feb1e 	bne	r16,zero,401a4ac <__reset+0xfb0194ac>
 401a500:	9005883a 	mov	r2,r18
 401a504:	dfc00517 	ldw	ra,20(sp)
 401a508:	dd000417 	ldw	r20,16(sp)
 401a50c:	dcc00317 	ldw	r19,12(sp)
 401a510:	dc800217 	ldw	r18,8(sp)
 401a514:	dc400117 	ldw	r17,4(sp)
 401a518:	dc000017 	ldw	r16,0(sp)
 401a51c:	dec00604 	addi	sp,sp,24
 401a520:	f800283a 	ret
 401a524:	880d883a 	mov	r6,r17
 401a528:	880b883a 	mov	r5,r17
 401a52c:	9809883a 	mov	r4,r19
 401a530:	401a2680 	call	401a268 <__multiply>
 401a534:	88800015 	stw	r2,0(r17)
 401a538:	10000015 	stw	zero,0(r2)
 401a53c:	003fdd06 	br	401a4b4 <__reset+0xfb0194b4>
 401a540:	1025883a 	mov	r18,r2
 401a544:	003fd706 	br	401a4a4 <__reset+0xfb0194a4>
 401a548:	10bfffc4 	addi	r2,r2,-1
 401a54c:	1085883a 	add	r2,r2,r2
 401a550:	00c10234 	movhi	r3,1032
 401a554:	18c7b804 	addi	r3,r3,7904
 401a558:	1085883a 	add	r2,r2,r2
 401a55c:	1885883a 	add	r2,r3,r2
 401a560:	11800017 	ldw	r6,0(r2)
 401a564:	000f883a 	mov	r7,zero
 401a568:	4019ef00 	call	4019ef0 <__multadd>
 401a56c:	1025883a 	mov	r18,r2
 401a570:	003fc706 	br	401a490 <__reset+0xfb019490>
 401a574:	05000044 	movi	r20,1
 401a578:	a00b883a 	mov	r5,r20
 401a57c:	9809883a 	mov	r4,r19
 401a580:	4019e200 	call	4019e20 <_Balloc>
 401a584:	1023883a 	mov	r17,r2
 401a588:	00809c44 	movi	r2,625
 401a58c:	88800515 	stw	r2,20(r17)
 401a590:	8d000415 	stw	r20,16(r17)
 401a594:	9c401215 	stw	r17,72(r19)
 401a598:	88000015 	stw	zero,0(r17)
 401a59c:	003fc606 	br	401a4b8 <__reset+0xfb0194b8>

0401a5a0 <__lshift>:
 401a5a0:	defff904 	addi	sp,sp,-28
 401a5a4:	dd400515 	stw	r21,20(sp)
 401a5a8:	dcc00315 	stw	r19,12(sp)
 401a5ac:	302bd17a 	srai	r21,r6,5
 401a5b0:	2cc00417 	ldw	r19,16(r5)
 401a5b4:	28800217 	ldw	r2,8(r5)
 401a5b8:	dd000415 	stw	r20,16(sp)
 401a5bc:	ace7883a 	add	r19,r21,r19
 401a5c0:	dc800215 	stw	r18,8(sp)
 401a5c4:	dc400115 	stw	r17,4(sp)
 401a5c8:	dc000015 	stw	r16,0(sp)
 401a5cc:	dfc00615 	stw	ra,24(sp)
 401a5d0:	9c000044 	addi	r16,r19,1
 401a5d4:	2823883a 	mov	r17,r5
 401a5d8:	3029883a 	mov	r20,r6
 401a5dc:	2025883a 	mov	r18,r4
 401a5e0:	29400117 	ldw	r5,4(r5)
 401a5e4:	1400030e 	bge	r2,r16,401a5f4 <__lshift+0x54>
 401a5e8:	1085883a 	add	r2,r2,r2
 401a5ec:	29400044 	addi	r5,r5,1
 401a5f0:	143ffd16 	blt	r2,r16,401a5e8 <__reset+0xfb0195e8>
 401a5f4:	9009883a 	mov	r4,r18
 401a5f8:	4019e200 	call	4019e20 <_Balloc>
 401a5fc:	10c00504 	addi	r3,r2,20
 401a600:	0540070e 	bge	zero,r21,401a620 <__lshift+0x80>
 401a604:	ad6b883a 	add	r21,r21,r21
 401a608:	ad6b883a 	add	r21,r21,r21
 401a60c:	1809883a 	mov	r4,r3
 401a610:	1d47883a 	add	r3,r3,r21
 401a614:	20000015 	stw	zero,0(r4)
 401a618:	21000104 	addi	r4,r4,4
 401a61c:	193ffd1e 	bne	r3,r4,401a614 <__reset+0xfb019614>
 401a620:	8a000417 	ldw	r8,16(r17)
 401a624:	89000504 	addi	r4,r17,20
 401a628:	a18007cc 	andi	r6,r20,31
 401a62c:	4211883a 	add	r8,r8,r8
 401a630:	4211883a 	add	r8,r8,r8
 401a634:	2211883a 	add	r8,r4,r8
 401a638:	30002326 	beq	r6,zero,401a6c8 <__lshift+0x128>
 401a63c:	02400804 	movi	r9,32
 401a640:	4993c83a 	sub	r9,r9,r6
 401a644:	000b883a 	mov	r5,zero
 401a648:	21c00017 	ldw	r7,0(r4)
 401a64c:	1815883a 	mov	r10,r3
 401a650:	18c00104 	addi	r3,r3,4
 401a654:	398e983a 	sll	r7,r7,r6
 401a658:	21000104 	addi	r4,r4,4
 401a65c:	394ab03a 	or	r5,r7,r5
 401a660:	197fff15 	stw	r5,-4(r3)
 401a664:	217fff17 	ldw	r5,-4(r4)
 401a668:	2a4ad83a 	srl	r5,r5,r9
 401a66c:	223ff636 	bltu	r4,r8,401a648 <__reset+0xfb019648>
 401a670:	51400115 	stw	r5,4(r10)
 401a674:	28001a1e 	bne	r5,zero,401a6e0 <__lshift+0x140>
 401a678:	843fffc4 	addi	r16,r16,-1
 401a67c:	14000415 	stw	r16,16(r2)
 401a680:	88000826 	beq	r17,zero,401a6a4 <__lshift+0x104>
 401a684:	89000117 	ldw	r4,4(r17)
 401a688:	90c01317 	ldw	r3,76(r18)
 401a68c:	2109883a 	add	r4,r4,r4
 401a690:	2109883a 	add	r4,r4,r4
 401a694:	1907883a 	add	r3,r3,r4
 401a698:	19000017 	ldw	r4,0(r3)
 401a69c:	89000015 	stw	r4,0(r17)
 401a6a0:	1c400015 	stw	r17,0(r3)
 401a6a4:	dfc00617 	ldw	ra,24(sp)
 401a6a8:	dd400517 	ldw	r21,20(sp)
 401a6ac:	dd000417 	ldw	r20,16(sp)
 401a6b0:	dcc00317 	ldw	r19,12(sp)
 401a6b4:	dc800217 	ldw	r18,8(sp)
 401a6b8:	dc400117 	ldw	r17,4(sp)
 401a6bc:	dc000017 	ldw	r16,0(sp)
 401a6c0:	dec00704 	addi	sp,sp,28
 401a6c4:	f800283a 	ret
 401a6c8:	21400017 	ldw	r5,0(r4)
 401a6cc:	18c00104 	addi	r3,r3,4
 401a6d0:	21000104 	addi	r4,r4,4
 401a6d4:	197fff15 	stw	r5,-4(r3)
 401a6d8:	223ffb36 	bltu	r4,r8,401a6c8 <__reset+0xfb0196c8>
 401a6dc:	003fe606 	br	401a678 <__reset+0xfb019678>
 401a6e0:	9c000084 	addi	r16,r19,2
 401a6e4:	003fe406 	br	401a678 <__reset+0xfb019678>

0401a6e8 <__mcmp>:
 401a6e8:	20800417 	ldw	r2,16(r4)
 401a6ec:	28c00417 	ldw	r3,16(r5)
 401a6f0:	10c5c83a 	sub	r2,r2,r3
 401a6f4:	1000111e 	bne	r2,zero,401a73c <__mcmp+0x54>
 401a6f8:	18c7883a 	add	r3,r3,r3
 401a6fc:	18c7883a 	add	r3,r3,r3
 401a700:	21000504 	addi	r4,r4,20
 401a704:	29400504 	addi	r5,r5,20
 401a708:	20c5883a 	add	r2,r4,r3
 401a70c:	28cb883a 	add	r5,r5,r3
 401a710:	00000106 	br	401a718 <__mcmp+0x30>
 401a714:	20800a2e 	bgeu	r4,r2,401a740 <__mcmp+0x58>
 401a718:	10bfff04 	addi	r2,r2,-4
 401a71c:	297fff04 	addi	r5,r5,-4
 401a720:	11800017 	ldw	r6,0(r2)
 401a724:	28c00017 	ldw	r3,0(r5)
 401a728:	30fffa26 	beq	r6,r3,401a714 <__reset+0xfb019714>
 401a72c:	30c00236 	bltu	r6,r3,401a738 <__mcmp+0x50>
 401a730:	00800044 	movi	r2,1
 401a734:	f800283a 	ret
 401a738:	00bfffc4 	movi	r2,-1
 401a73c:	f800283a 	ret
 401a740:	0005883a 	mov	r2,zero
 401a744:	f800283a 	ret

0401a748 <__mdiff>:
 401a748:	28c00417 	ldw	r3,16(r5)
 401a74c:	30800417 	ldw	r2,16(r6)
 401a750:	defffa04 	addi	sp,sp,-24
 401a754:	dcc00315 	stw	r19,12(sp)
 401a758:	dc800215 	stw	r18,8(sp)
 401a75c:	dfc00515 	stw	ra,20(sp)
 401a760:	dd000415 	stw	r20,16(sp)
 401a764:	dc400115 	stw	r17,4(sp)
 401a768:	dc000015 	stw	r16,0(sp)
 401a76c:	1887c83a 	sub	r3,r3,r2
 401a770:	2825883a 	mov	r18,r5
 401a774:	3027883a 	mov	r19,r6
 401a778:	1800141e 	bne	r3,zero,401a7cc <__mdiff+0x84>
 401a77c:	1085883a 	add	r2,r2,r2
 401a780:	1085883a 	add	r2,r2,r2
 401a784:	2a000504 	addi	r8,r5,20
 401a788:	34000504 	addi	r16,r6,20
 401a78c:	4087883a 	add	r3,r8,r2
 401a790:	8085883a 	add	r2,r16,r2
 401a794:	00000106 	br	401a79c <__mdiff+0x54>
 401a798:	40c0592e 	bgeu	r8,r3,401a900 <__mdiff+0x1b8>
 401a79c:	18ffff04 	addi	r3,r3,-4
 401a7a0:	10bfff04 	addi	r2,r2,-4
 401a7a4:	19c00017 	ldw	r7,0(r3)
 401a7a8:	11400017 	ldw	r5,0(r2)
 401a7ac:	397ffa26 	beq	r7,r5,401a798 <__reset+0xfb019798>
 401a7b0:	3940592e 	bgeu	r7,r5,401a918 <__mdiff+0x1d0>
 401a7b4:	9005883a 	mov	r2,r18
 401a7b8:	4023883a 	mov	r17,r8
 401a7bc:	9825883a 	mov	r18,r19
 401a7c0:	05000044 	movi	r20,1
 401a7c4:	1027883a 	mov	r19,r2
 401a7c8:	00000406 	br	401a7dc <__mdiff+0x94>
 401a7cc:	18005616 	blt	r3,zero,401a928 <__mdiff+0x1e0>
 401a7d0:	34400504 	addi	r17,r6,20
 401a7d4:	2c000504 	addi	r16,r5,20
 401a7d8:	0029883a 	mov	r20,zero
 401a7dc:	91400117 	ldw	r5,4(r18)
 401a7e0:	4019e200 	call	4019e20 <_Balloc>
 401a7e4:	92400417 	ldw	r9,16(r18)
 401a7e8:	9b000417 	ldw	r12,16(r19)
 401a7ec:	12c00504 	addi	r11,r2,20
 401a7f0:	4a51883a 	add	r8,r9,r9
 401a7f4:	6319883a 	add	r12,r12,r12
 401a7f8:	4211883a 	add	r8,r8,r8
 401a7fc:	6319883a 	add	r12,r12,r12
 401a800:	15000315 	stw	r20,12(r2)
 401a804:	8211883a 	add	r8,r16,r8
 401a808:	8b19883a 	add	r12,r17,r12
 401a80c:	0007883a 	mov	r3,zero
 401a810:	81400017 	ldw	r5,0(r16)
 401a814:	89c00017 	ldw	r7,0(r17)
 401a818:	59800104 	addi	r6,r11,4
 401a81c:	293fffcc 	andi	r4,r5,65535
 401a820:	20c7883a 	add	r3,r4,r3
 401a824:	393fffcc 	andi	r4,r7,65535
 401a828:	1909c83a 	sub	r4,r3,r4
 401a82c:	280ad43a 	srli	r5,r5,16
 401a830:	380ed43a 	srli	r7,r7,16
 401a834:	2007d43a 	srai	r3,r4,16
 401a838:	213fffcc 	andi	r4,r4,65535
 401a83c:	29cbc83a 	sub	r5,r5,r7
 401a840:	28c7883a 	add	r3,r5,r3
 401a844:	180a943a 	slli	r5,r3,16
 401a848:	8c400104 	addi	r17,r17,4
 401a84c:	84000104 	addi	r16,r16,4
 401a850:	2908b03a 	or	r4,r5,r4
 401a854:	59000015 	stw	r4,0(r11)
 401a858:	1807d43a 	srai	r3,r3,16
 401a85c:	3015883a 	mov	r10,r6
 401a860:	3017883a 	mov	r11,r6
 401a864:	8b3fea36 	bltu	r17,r12,401a810 <__reset+0xfb019810>
 401a868:	8200162e 	bgeu	r16,r8,401a8c4 <__mdiff+0x17c>
 401a86c:	8017883a 	mov	r11,r16
 401a870:	59400017 	ldw	r5,0(r11)
 401a874:	31800104 	addi	r6,r6,4
 401a878:	5ac00104 	addi	r11,r11,4
 401a87c:	293fffcc 	andi	r4,r5,65535
 401a880:	20c7883a 	add	r3,r4,r3
 401a884:	280ed43a 	srli	r7,r5,16
 401a888:	180bd43a 	srai	r5,r3,16
 401a88c:	193fffcc 	andi	r4,r3,65535
 401a890:	3947883a 	add	r3,r7,r5
 401a894:	180a943a 	slli	r5,r3,16
 401a898:	1807d43a 	srai	r3,r3,16
 401a89c:	2908b03a 	or	r4,r5,r4
 401a8a0:	313fff15 	stw	r4,-4(r6)
 401a8a4:	5a3ff236 	bltu	r11,r8,401a870 <__reset+0xfb019870>
 401a8a8:	0406303a 	nor	r3,zero,r16
 401a8ac:	1a07883a 	add	r3,r3,r8
 401a8b0:	1806d0ba 	srli	r3,r3,2
 401a8b4:	18c00044 	addi	r3,r3,1
 401a8b8:	18c7883a 	add	r3,r3,r3
 401a8bc:	18c7883a 	add	r3,r3,r3
 401a8c0:	50d5883a 	add	r10,r10,r3
 401a8c4:	50ffff04 	addi	r3,r10,-4
 401a8c8:	2000041e 	bne	r4,zero,401a8dc <__mdiff+0x194>
 401a8cc:	18ffff04 	addi	r3,r3,-4
 401a8d0:	19000017 	ldw	r4,0(r3)
 401a8d4:	4a7fffc4 	addi	r9,r9,-1
 401a8d8:	203ffc26 	beq	r4,zero,401a8cc <__reset+0xfb0198cc>
 401a8dc:	12400415 	stw	r9,16(r2)
 401a8e0:	dfc00517 	ldw	ra,20(sp)
 401a8e4:	dd000417 	ldw	r20,16(sp)
 401a8e8:	dcc00317 	ldw	r19,12(sp)
 401a8ec:	dc800217 	ldw	r18,8(sp)
 401a8f0:	dc400117 	ldw	r17,4(sp)
 401a8f4:	dc000017 	ldw	r16,0(sp)
 401a8f8:	dec00604 	addi	sp,sp,24
 401a8fc:	f800283a 	ret
 401a900:	000b883a 	mov	r5,zero
 401a904:	4019e200 	call	4019e20 <_Balloc>
 401a908:	00c00044 	movi	r3,1
 401a90c:	10c00415 	stw	r3,16(r2)
 401a910:	10000515 	stw	zero,20(r2)
 401a914:	003ff206 	br	401a8e0 <__reset+0xfb0198e0>
 401a918:	8023883a 	mov	r17,r16
 401a91c:	0029883a 	mov	r20,zero
 401a920:	4021883a 	mov	r16,r8
 401a924:	003fad06 	br	401a7dc <__reset+0xfb0197dc>
 401a928:	9005883a 	mov	r2,r18
 401a92c:	94400504 	addi	r17,r18,20
 401a930:	9c000504 	addi	r16,r19,20
 401a934:	9825883a 	mov	r18,r19
 401a938:	05000044 	movi	r20,1
 401a93c:	1027883a 	mov	r19,r2
 401a940:	003fa606 	br	401a7dc <__reset+0xfb0197dc>

0401a944 <__ulp>:
 401a944:	295ffc2c 	andhi	r5,r5,32752
 401a948:	00bf3034 	movhi	r2,64704
 401a94c:	2887883a 	add	r3,r5,r2
 401a950:	00c0020e 	bge	zero,r3,401a95c <__ulp+0x18>
 401a954:	0005883a 	mov	r2,zero
 401a958:	f800283a 	ret
 401a95c:	00c7c83a 	sub	r3,zero,r3
 401a960:	1807d53a 	srai	r3,r3,20
 401a964:	008004c4 	movi	r2,19
 401a968:	10c00b0e 	bge	r2,r3,401a998 <__ulp+0x54>
 401a96c:	18bffb04 	addi	r2,r3,-20
 401a970:	01000784 	movi	r4,30
 401a974:	0007883a 	mov	r3,zero
 401a978:	20800516 	blt	r4,r2,401a990 <__ulp+0x4c>
 401a97c:	010007c4 	movi	r4,31
 401a980:	2089c83a 	sub	r4,r4,r2
 401a984:	00800044 	movi	r2,1
 401a988:	1104983a 	sll	r2,r2,r4
 401a98c:	f800283a 	ret
 401a990:	00800044 	movi	r2,1
 401a994:	f800283a 	ret
 401a998:	01400234 	movhi	r5,8
 401a99c:	28c7d83a 	sra	r3,r5,r3
 401a9a0:	0005883a 	mov	r2,zero
 401a9a4:	f800283a 	ret

0401a9a8 <__b2d>:
 401a9a8:	defffa04 	addi	sp,sp,-24
 401a9ac:	dc000015 	stw	r16,0(sp)
 401a9b0:	24000417 	ldw	r16,16(r4)
 401a9b4:	dc400115 	stw	r17,4(sp)
 401a9b8:	24400504 	addi	r17,r4,20
 401a9bc:	8421883a 	add	r16,r16,r16
 401a9c0:	8421883a 	add	r16,r16,r16
 401a9c4:	8c21883a 	add	r16,r17,r16
 401a9c8:	dc800215 	stw	r18,8(sp)
 401a9cc:	84bfff17 	ldw	r18,-4(r16)
 401a9d0:	dd000415 	stw	r20,16(sp)
 401a9d4:	dcc00315 	stw	r19,12(sp)
 401a9d8:	9009883a 	mov	r4,r18
 401a9dc:	2829883a 	mov	r20,r5
 401a9e0:	dfc00515 	stw	ra,20(sp)
 401a9e4:	401a1140 	call	401a114 <__hi0bits>
 401a9e8:	00c00804 	movi	r3,32
 401a9ec:	1889c83a 	sub	r4,r3,r2
 401a9f0:	a1000015 	stw	r4,0(r20)
 401a9f4:	01000284 	movi	r4,10
 401a9f8:	84ffff04 	addi	r19,r16,-4
 401a9fc:	20801216 	blt	r4,r2,401aa48 <__b2d+0xa0>
 401aa00:	018002c4 	movi	r6,11
 401aa04:	308dc83a 	sub	r6,r6,r2
 401aa08:	9186d83a 	srl	r3,r18,r6
 401aa0c:	18cffc34 	orhi	r3,r3,16368
 401aa10:	8cc0212e 	bgeu	r17,r19,401aa98 <__b2d+0xf0>
 401aa14:	813ffe17 	ldw	r4,-8(r16)
 401aa18:	218cd83a 	srl	r6,r4,r6
 401aa1c:	10800544 	addi	r2,r2,21
 401aa20:	9084983a 	sll	r2,r18,r2
 401aa24:	1184b03a 	or	r2,r2,r6
 401aa28:	dfc00517 	ldw	ra,20(sp)
 401aa2c:	dd000417 	ldw	r20,16(sp)
 401aa30:	dcc00317 	ldw	r19,12(sp)
 401aa34:	dc800217 	ldw	r18,8(sp)
 401aa38:	dc400117 	ldw	r17,4(sp)
 401aa3c:	dc000017 	ldw	r16,0(sp)
 401aa40:	dec00604 	addi	sp,sp,24
 401aa44:	f800283a 	ret
 401aa48:	8cc00f2e 	bgeu	r17,r19,401aa88 <__b2d+0xe0>
 401aa4c:	117ffd44 	addi	r5,r2,-11
 401aa50:	80bffe17 	ldw	r2,-8(r16)
 401aa54:	28000e26 	beq	r5,zero,401aa90 <__b2d+0xe8>
 401aa58:	1949c83a 	sub	r4,r3,r5
 401aa5c:	9164983a 	sll	r18,r18,r5
 401aa60:	1106d83a 	srl	r3,r2,r4
 401aa64:	81bffe04 	addi	r6,r16,-8
 401aa68:	948ffc34 	orhi	r18,r18,16368
 401aa6c:	90c6b03a 	or	r3,r18,r3
 401aa70:	89800e2e 	bgeu	r17,r6,401aaac <__b2d+0x104>
 401aa74:	81bffd17 	ldw	r6,-12(r16)
 401aa78:	1144983a 	sll	r2,r2,r5
 401aa7c:	310ad83a 	srl	r5,r6,r4
 401aa80:	2884b03a 	or	r2,r5,r2
 401aa84:	003fe806 	br	401aa28 <__reset+0xfb019a28>
 401aa88:	10bffd44 	addi	r2,r2,-11
 401aa8c:	1000041e 	bne	r2,zero,401aaa0 <__b2d+0xf8>
 401aa90:	90cffc34 	orhi	r3,r18,16368
 401aa94:	003fe406 	br	401aa28 <__reset+0xfb019a28>
 401aa98:	000d883a 	mov	r6,zero
 401aa9c:	003fdf06 	br	401aa1c <__reset+0xfb019a1c>
 401aaa0:	90a4983a 	sll	r18,r18,r2
 401aaa4:	0005883a 	mov	r2,zero
 401aaa8:	003ff906 	br	401aa90 <__reset+0xfb019a90>
 401aaac:	1144983a 	sll	r2,r2,r5
 401aab0:	003fdd06 	br	401aa28 <__reset+0xfb019a28>

0401aab4 <__d2b>:
 401aab4:	defff804 	addi	sp,sp,-32
 401aab8:	dc000215 	stw	r16,8(sp)
 401aabc:	3021883a 	mov	r16,r6
 401aac0:	dc400315 	stw	r17,12(sp)
 401aac4:	8022907a 	slli	r17,r16,1
 401aac8:	dd000615 	stw	r20,24(sp)
 401aacc:	2829883a 	mov	r20,r5
 401aad0:	01400044 	movi	r5,1
 401aad4:	dcc00515 	stw	r19,20(sp)
 401aad8:	dc800415 	stw	r18,16(sp)
 401aadc:	dfc00715 	stw	ra,28(sp)
 401aae0:	3825883a 	mov	r18,r7
 401aae4:	8822d57a 	srli	r17,r17,21
 401aae8:	4019e200 	call	4019e20 <_Balloc>
 401aaec:	1027883a 	mov	r19,r2
 401aaf0:	00800434 	movhi	r2,16
 401aaf4:	10bfffc4 	addi	r2,r2,-1
 401aaf8:	808c703a 	and	r6,r16,r2
 401aafc:	88000126 	beq	r17,zero,401ab04 <__d2b+0x50>
 401ab00:	31800434 	orhi	r6,r6,16
 401ab04:	d9800015 	stw	r6,0(sp)
 401ab08:	a0002426 	beq	r20,zero,401ab9c <__d2b+0xe8>
 401ab0c:	d9000104 	addi	r4,sp,4
 401ab10:	dd000115 	stw	r20,4(sp)
 401ab14:	401a17c0 	call	401a17c <__lo0bits>
 401ab18:	d8c00017 	ldw	r3,0(sp)
 401ab1c:	10002f1e 	bne	r2,zero,401abdc <__d2b+0x128>
 401ab20:	d9000117 	ldw	r4,4(sp)
 401ab24:	99000515 	stw	r4,20(r19)
 401ab28:	1821003a 	cmpeq	r16,r3,zero
 401ab2c:	01000084 	movi	r4,2
 401ab30:	2421c83a 	sub	r16,r4,r16
 401ab34:	98c00615 	stw	r3,24(r19)
 401ab38:	9c000415 	stw	r16,16(r19)
 401ab3c:	88001f1e 	bne	r17,zero,401abbc <__d2b+0x108>
 401ab40:	10bef384 	addi	r2,r2,-1074
 401ab44:	90800015 	stw	r2,0(r18)
 401ab48:	00900034 	movhi	r2,16384
 401ab4c:	10bfffc4 	addi	r2,r2,-1
 401ab50:	8085883a 	add	r2,r16,r2
 401ab54:	1085883a 	add	r2,r2,r2
 401ab58:	1085883a 	add	r2,r2,r2
 401ab5c:	9885883a 	add	r2,r19,r2
 401ab60:	11000517 	ldw	r4,20(r2)
 401ab64:	8020917a 	slli	r16,r16,5
 401ab68:	401a1140 	call	401a114 <__hi0bits>
 401ab6c:	d8c00817 	ldw	r3,32(sp)
 401ab70:	8085c83a 	sub	r2,r16,r2
 401ab74:	18800015 	stw	r2,0(r3)
 401ab78:	9805883a 	mov	r2,r19
 401ab7c:	dfc00717 	ldw	ra,28(sp)
 401ab80:	dd000617 	ldw	r20,24(sp)
 401ab84:	dcc00517 	ldw	r19,20(sp)
 401ab88:	dc800417 	ldw	r18,16(sp)
 401ab8c:	dc400317 	ldw	r17,12(sp)
 401ab90:	dc000217 	ldw	r16,8(sp)
 401ab94:	dec00804 	addi	sp,sp,32
 401ab98:	f800283a 	ret
 401ab9c:	d809883a 	mov	r4,sp
 401aba0:	401a17c0 	call	401a17c <__lo0bits>
 401aba4:	d8c00017 	ldw	r3,0(sp)
 401aba8:	04000044 	movi	r16,1
 401abac:	9c000415 	stw	r16,16(r19)
 401abb0:	98c00515 	stw	r3,20(r19)
 401abb4:	10800804 	addi	r2,r2,32
 401abb8:	883fe126 	beq	r17,zero,401ab40 <__reset+0xfb019b40>
 401abbc:	00c00d44 	movi	r3,53
 401abc0:	8c7ef344 	addi	r17,r17,-1075
 401abc4:	88a3883a 	add	r17,r17,r2
 401abc8:	1885c83a 	sub	r2,r3,r2
 401abcc:	d8c00817 	ldw	r3,32(sp)
 401abd0:	94400015 	stw	r17,0(r18)
 401abd4:	18800015 	stw	r2,0(r3)
 401abd8:	003fe706 	br	401ab78 <__reset+0xfb019b78>
 401abdc:	01000804 	movi	r4,32
 401abe0:	2089c83a 	sub	r4,r4,r2
 401abe4:	1908983a 	sll	r4,r3,r4
 401abe8:	d9400117 	ldw	r5,4(sp)
 401abec:	1886d83a 	srl	r3,r3,r2
 401abf0:	2148b03a 	or	r4,r4,r5
 401abf4:	99000515 	stw	r4,20(r19)
 401abf8:	d8c00015 	stw	r3,0(sp)
 401abfc:	003fca06 	br	401ab28 <__reset+0xfb019b28>

0401ac00 <__ratio>:
 401ac00:	defff904 	addi	sp,sp,-28
 401ac04:	dc400315 	stw	r17,12(sp)
 401ac08:	2823883a 	mov	r17,r5
 401ac0c:	d9400104 	addi	r5,sp,4
 401ac10:	dfc00615 	stw	ra,24(sp)
 401ac14:	dcc00515 	stw	r19,20(sp)
 401ac18:	dc800415 	stw	r18,16(sp)
 401ac1c:	2027883a 	mov	r19,r4
 401ac20:	dc000215 	stw	r16,8(sp)
 401ac24:	401a9a80 	call	401a9a8 <__b2d>
 401ac28:	d80b883a 	mov	r5,sp
 401ac2c:	8809883a 	mov	r4,r17
 401ac30:	1025883a 	mov	r18,r2
 401ac34:	1821883a 	mov	r16,r3
 401ac38:	401a9a80 	call	401a9a8 <__b2d>
 401ac3c:	8a000417 	ldw	r8,16(r17)
 401ac40:	99000417 	ldw	r4,16(r19)
 401ac44:	d9400117 	ldw	r5,4(sp)
 401ac48:	2209c83a 	sub	r4,r4,r8
 401ac4c:	2010917a 	slli	r8,r4,5
 401ac50:	d9000017 	ldw	r4,0(sp)
 401ac54:	2909c83a 	sub	r4,r5,r4
 401ac58:	4109883a 	add	r4,r8,r4
 401ac5c:	01000e0e 	bge	zero,r4,401ac98 <__ratio+0x98>
 401ac60:	2008953a 	slli	r4,r4,20
 401ac64:	2421883a 	add	r16,r4,r16
 401ac68:	100d883a 	mov	r6,r2
 401ac6c:	180f883a 	mov	r7,r3
 401ac70:	9009883a 	mov	r4,r18
 401ac74:	800b883a 	mov	r5,r16
 401ac78:	400fc040 	call	400fc04 <__divdf3>
 401ac7c:	dfc00617 	ldw	ra,24(sp)
 401ac80:	dcc00517 	ldw	r19,20(sp)
 401ac84:	dc800417 	ldw	r18,16(sp)
 401ac88:	dc400317 	ldw	r17,12(sp)
 401ac8c:	dc000217 	ldw	r16,8(sp)
 401ac90:	dec00704 	addi	sp,sp,28
 401ac94:	f800283a 	ret
 401ac98:	2008953a 	slli	r4,r4,20
 401ac9c:	1907c83a 	sub	r3,r3,r4
 401aca0:	003ff106 	br	401ac68 <__reset+0xfb019c68>

0401aca4 <_mprec_log10>:
 401aca4:	defffe04 	addi	sp,sp,-8
 401aca8:	dc000015 	stw	r16,0(sp)
 401acac:	dfc00115 	stw	ra,4(sp)
 401acb0:	008005c4 	movi	r2,23
 401acb4:	2021883a 	mov	r16,r4
 401acb8:	11000d0e 	bge	r2,r4,401acf0 <_mprec_log10+0x4c>
 401acbc:	0005883a 	mov	r2,zero
 401acc0:	00cffc34 	movhi	r3,16368
 401acc4:	843fffc4 	addi	r16,r16,-1
 401acc8:	000d883a 	mov	r6,zero
 401accc:	01d00934 	movhi	r7,16420
 401acd0:	1009883a 	mov	r4,r2
 401acd4:	180b883a 	mov	r5,r3
 401acd8:	40107440 	call	4010744 <__muldf3>
 401acdc:	803ff91e 	bne	r16,zero,401acc4 <__reset+0xfb019cc4>
 401ace0:	dfc00117 	ldw	ra,4(sp)
 401ace4:	dc000017 	ldw	r16,0(sp)
 401ace8:	dec00204 	addi	sp,sp,8
 401acec:	f800283a 	ret
 401acf0:	202090fa 	slli	r16,r4,3
 401acf4:	00810234 	movhi	r2,1032
 401acf8:	1087cf04 	addi	r2,r2,7996
 401acfc:	1421883a 	add	r16,r2,r16
 401ad00:	80800017 	ldw	r2,0(r16)
 401ad04:	80c00117 	ldw	r3,4(r16)
 401ad08:	dfc00117 	ldw	ra,4(sp)
 401ad0c:	dc000017 	ldw	r16,0(sp)
 401ad10:	dec00204 	addi	sp,sp,8
 401ad14:	f800283a 	ret

0401ad18 <__copybits>:
 401ad18:	297fffc4 	addi	r5,r5,-1
 401ad1c:	280fd17a 	srai	r7,r5,5
 401ad20:	30c00417 	ldw	r3,16(r6)
 401ad24:	30800504 	addi	r2,r6,20
 401ad28:	39c00044 	addi	r7,r7,1
 401ad2c:	18c7883a 	add	r3,r3,r3
 401ad30:	39cf883a 	add	r7,r7,r7
 401ad34:	18c7883a 	add	r3,r3,r3
 401ad38:	39cf883a 	add	r7,r7,r7
 401ad3c:	10c7883a 	add	r3,r2,r3
 401ad40:	21cf883a 	add	r7,r4,r7
 401ad44:	10c00d2e 	bgeu	r2,r3,401ad7c <__copybits+0x64>
 401ad48:	200b883a 	mov	r5,r4
 401ad4c:	12000017 	ldw	r8,0(r2)
 401ad50:	29400104 	addi	r5,r5,4
 401ad54:	10800104 	addi	r2,r2,4
 401ad58:	2a3fff15 	stw	r8,-4(r5)
 401ad5c:	10fffb36 	bltu	r2,r3,401ad4c <__reset+0xfb019d4c>
 401ad60:	1985c83a 	sub	r2,r3,r6
 401ad64:	10bffac4 	addi	r2,r2,-21
 401ad68:	1004d0ba 	srli	r2,r2,2
 401ad6c:	10800044 	addi	r2,r2,1
 401ad70:	1085883a 	add	r2,r2,r2
 401ad74:	1085883a 	add	r2,r2,r2
 401ad78:	2089883a 	add	r4,r4,r2
 401ad7c:	21c0032e 	bgeu	r4,r7,401ad8c <__copybits+0x74>
 401ad80:	20000015 	stw	zero,0(r4)
 401ad84:	21000104 	addi	r4,r4,4
 401ad88:	21fffd36 	bltu	r4,r7,401ad80 <__reset+0xfb019d80>
 401ad8c:	f800283a 	ret

0401ad90 <__any_on>:
 401ad90:	20c00417 	ldw	r3,16(r4)
 401ad94:	2805d17a 	srai	r2,r5,5
 401ad98:	21000504 	addi	r4,r4,20
 401ad9c:	18800d0e 	bge	r3,r2,401add4 <__any_on+0x44>
 401ada0:	18c7883a 	add	r3,r3,r3
 401ada4:	18c7883a 	add	r3,r3,r3
 401ada8:	20c7883a 	add	r3,r4,r3
 401adac:	20c0192e 	bgeu	r4,r3,401ae14 <__any_on+0x84>
 401adb0:	18bfff17 	ldw	r2,-4(r3)
 401adb4:	18ffff04 	addi	r3,r3,-4
 401adb8:	1000041e 	bne	r2,zero,401adcc <__any_on+0x3c>
 401adbc:	20c0142e 	bgeu	r4,r3,401ae10 <__any_on+0x80>
 401adc0:	18ffff04 	addi	r3,r3,-4
 401adc4:	19400017 	ldw	r5,0(r3)
 401adc8:	283ffc26 	beq	r5,zero,401adbc <__reset+0xfb019dbc>
 401adcc:	00800044 	movi	r2,1
 401add0:	f800283a 	ret
 401add4:	10c00a0e 	bge	r2,r3,401ae00 <__any_on+0x70>
 401add8:	1085883a 	add	r2,r2,r2
 401addc:	1085883a 	add	r2,r2,r2
 401ade0:	294007cc 	andi	r5,r5,31
 401ade4:	2087883a 	add	r3,r4,r2
 401ade8:	283ff026 	beq	r5,zero,401adac <__reset+0xfb019dac>
 401adec:	19800017 	ldw	r6,0(r3)
 401adf0:	3144d83a 	srl	r2,r6,r5
 401adf4:	114a983a 	sll	r5,r2,r5
 401adf8:	317ff41e 	bne	r6,r5,401adcc <__reset+0xfb019dcc>
 401adfc:	003feb06 	br	401adac <__reset+0xfb019dac>
 401ae00:	1085883a 	add	r2,r2,r2
 401ae04:	1085883a 	add	r2,r2,r2
 401ae08:	2087883a 	add	r3,r4,r2
 401ae0c:	003fe706 	br	401adac <__reset+0xfb019dac>
 401ae10:	f800283a 	ret
 401ae14:	0005883a 	mov	r2,zero
 401ae18:	f800283a 	ret

0401ae1c <_realloc_r>:
 401ae1c:	defff604 	addi	sp,sp,-40
 401ae20:	dc800215 	stw	r18,8(sp)
 401ae24:	dfc00915 	stw	ra,36(sp)
 401ae28:	df000815 	stw	fp,32(sp)
 401ae2c:	ddc00715 	stw	r23,28(sp)
 401ae30:	dd800615 	stw	r22,24(sp)
 401ae34:	dd400515 	stw	r21,20(sp)
 401ae38:	dd000415 	stw	r20,16(sp)
 401ae3c:	dcc00315 	stw	r19,12(sp)
 401ae40:	dc400115 	stw	r17,4(sp)
 401ae44:	dc000015 	stw	r16,0(sp)
 401ae48:	3025883a 	mov	r18,r6
 401ae4c:	2800b726 	beq	r5,zero,401b12c <_realloc_r+0x310>
 401ae50:	282b883a 	mov	r21,r5
 401ae54:	2029883a 	mov	r20,r4
 401ae58:	401fd4c0 	call	401fd4c <__malloc_lock>
 401ae5c:	a8bfff17 	ldw	r2,-4(r21)
 401ae60:	043fff04 	movi	r16,-4
 401ae64:	90c002c4 	addi	r3,r18,11
 401ae68:	01000584 	movi	r4,22
 401ae6c:	acfffe04 	addi	r19,r21,-8
 401ae70:	1420703a 	and	r16,r2,r16
 401ae74:	20c0332e 	bgeu	r4,r3,401af44 <_realloc_r+0x128>
 401ae78:	047ffe04 	movi	r17,-8
 401ae7c:	1c62703a 	and	r17,r3,r17
 401ae80:	8807883a 	mov	r3,r17
 401ae84:	88005816 	blt	r17,zero,401afe8 <_realloc_r+0x1cc>
 401ae88:	8c805736 	bltu	r17,r18,401afe8 <_realloc_r+0x1cc>
 401ae8c:	80c0300e 	bge	r16,r3,401af50 <_realloc_r+0x134>
 401ae90:	07010474 	movhi	fp,1041
 401ae94:	e7148004 	addi	fp,fp,20992
 401ae98:	e1c00217 	ldw	r7,8(fp)
 401ae9c:	9c09883a 	add	r4,r19,r16
 401aea0:	22000117 	ldw	r8,4(r4)
 401aea4:	21c06326 	beq	r4,r7,401b034 <_realloc_r+0x218>
 401aea8:	017fff84 	movi	r5,-2
 401aeac:	414a703a 	and	r5,r8,r5
 401aeb0:	214b883a 	add	r5,r4,r5
 401aeb4:	29800117 	ldw	r6,4(r5)
 401aeb8:	3180004c 	andi	r6,r6,1
 401aebc:	30003f26 	beq	r6,zero,401afbc <_realloc_r+0x1a0>
 401aec0:	1080004c 	andi	r2,r2,1
 401aec4:	10008326 	beq	r2,zero,401b0d4 <_realloc_r+0x2b8>
 401aec8:	900b883a 	mov	r5,r18
 401aecc:	a009883a 	mov	r4,r20
 401aed0:	4011c080 	call	4011c08 <_malloc_r>
 401aed4:	1025883a 	mov	r18,r2
 401aed8:	10011e26 	beq	r2,zero,401b354 <_realloc_r+0x538>
 401aedc:	a93fff17 	ldw	r4,-4(r21)
 401aee0:	10fffe04 	addi	r3,r2,-8
 401aee4:	00bfff84 	movi	r2,-2
 401aee8:	2084703a 	and	r2,r4,r2
 401aeec:	9885883a 	add	r2,r19,r2
 401aef0:	1880ee26 	beq	r3,r2,401b2ac <_realloc_r+0x490>
 401aef4:	81bfff04 	addi	r6,r16,-4
 401aef8:	00800904 	movi	r2,36
 401aefc:	1180b836 	bltu	r2,r6,401b1e0 <_realloc_r+0x3c4>
 401af00:	00c004c4 	movi	r3,19
 401af04:	19809636 	bltu	r3,r6,401b160 <_realloc_r+0x344>
 401af08:	9005883a 	mov	r2,r18
 401af0c:	a807883a 	mov	r3,r21
 401af10:	19000017 	ldw	r4,0(r3)
 401af14:	11000015 	stw	r4,0(r2)
 401af18:	19000117 	ldw	r4,4(r3)
 401af1c:	11000115 	stw	r4,4(r2)
 401af20:	18c00217 	ldw	r3,8(r3)
 401af24:	10c00215 	stw	r3,8(r2)
 401af28:	a80b883a 	mov	r5,r21
 401af2c:	a009883a 	mov	r4,r20
 401af30:	4018ff40 	call	4018ff4 <_free_r>
 401af34:	a009883a 	mov	r4,r20
 401af38:	401fd700 	call	401fd70 <__malloc_unlock>
 401af3c:	9005883a 	mov	r2,r18
 401af40:	00001206 	br	401af8c <_realloc_r+0x170>
 401af44:	00c00404 	movi	r3,16
 401af48:	1823883a 	mov	r17,r3
 401af4c:	003fce06 	br	401ae88 <__reset+0xfb019e88>
 401af50:	a825883a 	mov	r18,r21
 401af54:	8445c83a 	sub	r2,r16,r17
 401af58:	00c003c4 	movi	r3,15
 401af5c:	18802636 	bltu	r3,r2,401aff8 <_realloc_r+0x1dc>
 401af60:	99800117 	ldw	r6,4(r19)
 401af64:	9c07883a 	add	r3,r19,r16
 401af68:	3180004c 	andi	r6,r6,1
 401af6c:	3420b03a 	or	r16,r6,r16
 401af70:	9c000115 	stw	r16,4(r19)
 401af74:	18800117 	ldw	r2,4(r3)
 401af78:	10800054 	ori	r2,r2,1
 401af7c:	18800115 	stw	r2,4(r3)
 401af80:	a009883a 	mov	r4,r20
 401af84:	401fd700 	call	401fd70 <__malloc_unlock>
 401af88:	9005883a 	mov	r2,r18
 401af8c:	dfc00917 	ldw	ra,36(sp)
 401af90:	df000817 	ldw	fp,32(sp)
 401af94:	ddc00717 	ldw	r23,28(sp)
 401af98:	dd800617 	ldw	r22,24(sp)
 401af9c:	dd400517 	ldw	r21,20(sp)
 401afa0:	dd000417 	ldw	r20,16(sp)
 401afa4:	dcc00317 	ldw	r19,12(sp)
 401afa8:	dc800217 	ldw	r18,8(sp)
 401afac:	dc400117 	ldw	r17,4(sp)
 401afb0:	dc000017 	ldw	r16,0(sp)
 401afb4:	dec00a04 	addi	sp,sp,40
 401afb8:	f800283a 	ret
 401afbc:	017fff04 	movi	r5,-4
 401afc0:	414a703a 	and	r5,r8,r5
 401afc4:	814d883a 	add	r6,r16,r5
 401afc8:	30c01f16 	blt	r6,r3,401b048 <_realloc_r+0x22c>
 401afcc:	20800317 	ldw	r2,12(r4)
 401afd0:	20c00217 	ldw	r3,8(r4)
 401afd4:	a825883a 	mov	r18,r21
 401afd8:	3021883a 	mov	r16,r6
 401afdc:	18800315 	stw	r2,12(r3)
 401afe0:	10c00215 	stw	r3,8(r2)
 401afe4:	003fdb06 	br	401af54 <__reset+0xfb019f54>
 401afe8:	00800304 	movi	r2,12
 401afec:	a0800015 	stw	r2,0(r20)
 401aff0:	0005883a 	mov	r2,zero
 401aff4:	003fe506 	br	401af8c <__reset+0xfb019f8c>
 401aff8:	98c00117 	ldw	r3,4(r19)
 401affc:	9c4b883a 	add	r5,r19,r17
 401b000:	11000054 	ori	r4,r2,1
 401b004:	18c0004c 	andi	r3,r3,1
 401b008:	1c62b03a 	or	r17,r3,r17
 401b00c:	9c400115 	stw	r17,4(r19)
 401b010:	29000115 	stw	r4,4(r5)
 401b014:	2885883a 	add	r2,r5,r2
 401b018:	10c00117 	ldw	r3,4(r2)
 401b01c:	29400204 	addi	r5,r5,8
 401b020:	a009883a 	mov	r4,r20
 401b024:	18c00054 	ori	r3,r3,1
 401b028:	10c00115 	stw	r3,4(r2)
 401b02c:	4018ff40 	call	4018ff4 <_free_r>
 401b030:	003fd306 	br	401af80 <__reset+0xfb019f80>
 401b034:	017fff04 	movi	r5,-4
 401b038:	414a703a 	and	r5,r8,r5
 401b03c:	89800404 	addi	r6,r17,16
 401b040:	8151883a 	add	r8,r16,r5
 401b044:	4180590e 	bge	r8,r6,401b1ac <_realloc_r+0x390>
 401b048:	1080004c 	andi	r2,r2,1
 401b04c:	103f9e1e 	bne	r2,zero,401aec8 <__reset+0xfb019ec8>
 401b050:	adbffe17 	ldw	r22,-8(r21)
 401b054:	00bfff04 	movi	r2,-4
 401b058:	9dadc83a 	sub	r22,r19,r22
 401b05c:	b1800117 	ldw	r6,4(r22)
 401b060:	3084703a 	and	r2,r6,r2
 401b064:	20002026 	beq	r4,zero,401b0e8 <_realloc_r+0x2cc>
 401b068:	80af883a 	add	r23,r16,r2
 401b06c:	b96f883a 	add	r23,r23,r5
 401b070:	21c05f26 	beq	r4,r7,401b1f0 <_realloc_r+0x3d4>
 401b074:	b8c01c16 	blt	r23,r3,401b0e8 <_realloc_r+0x2cc>
 401b078:	20800317 	ldw	r2,12(r4)
 401b07c:	20c00217 	ldw	r3,8(r4)
 401b080:	81bfff04 	addi	r6,r16,-4
 401b084:	01000904 	movi	r4,36
 401b088:	18800315 	stw	r2,12(r3)
 401b08c:	10c00215 	stw	r3,8(r2)
 401b090:	b0c00217 	ldw	r3,8(r22)
 401b094:	b0800317 	ldw	r2,12(r22)
 401b098:	b4800204 	addi	r18,r22,8
 401b09c:	18800315 	stw	r2,12(r3)
 401b0a0:	10c00215 	stw	r3,8(r2)
 401b0a4:	21801b36 	bltu	r4,r6,401b114 <_realloc_r+0x2f8>
 401b0a8:	008004c4 	movi	r2,19
 401b0ac:	1180352e 	bgeu	r2,r6,401b184 <_realloc_r+0x368>
 401b0b0:	a8800017 	ldw	r2,0(r21)
 401b0b4:	b0800215 	stw	r2,8(r22)
 401b0b8:	a8800117 	ldw	r2,4(r21)
 401b0bc:	b0800315 	stw	r2,12(r22)
 401b0c0:	008006c4 	movi	r2,27
 401b0c4:	11807f36 	bltu	r2,r6,401b2c4 <_realloc_r+0x4a8>
 401b0c8:	b0800404 	addi	r2,r22,16
 401b0cc:	ad400204 	addi	r21,r21,8
 401b0d0:	00002d06 	br	401b188 <_realloc_r+0x36c>
 401b0d4:	adbffe17 	ldw	r22,-8(r21)
 401b0d8:	00bfff04 	movi	r2,-4
 401b0dc:	9dadc83a 	sub	r22,r19,r22
 401b0e0:	b1000117 	ldw	r4,4(r22)
 401b0e4:	2084703a 	and	r2,r4,r2
 401b0e8:	b03f7726 	beq	r22,zero,401aec8 <__reset+0xfb019ec8>
 401b0ec:	80af883a 	add	r23,r16,r2
 401b0f0:	b8ff7516 	blt	r23,r3,401aec8 <__reset+0xfb019ec8>
 401b0f4:	b0800317 	ldw	r2,12(r22)
 401b0f8:	b0c00217 	ldw	r3,8(r22)
 401b0fc:	81bfff04 	addi	r6,r16,-4
 401b100:	01000904 	movi	r4,36
 401b104:	18800315 	stw	r2,12(r3)
 401b108:	10c00215 	stw	r3,8(r2)
 401b10c:	b4800204 	addi	r18,r22,8
 401b110:	21bfe52e 	bgeu	r4,r6,401b0a8 <__reset+0xfb01a0a8>
 401b114:	a80b883a 	mov	r5,r21
 401b118:	9009883a 	mov	r4,r18
 401b11c:	4019cc40 	call	4019cc4 <memmove>
 401b120:	b821883a 	mov	r16,r23
 401b124:	b027883a 	mov	r19,r22
 401b128:	003f8a06 	br	401af54 <__reset+0xfb019f54>
 401b12c:	300b883a 	mov	r5,r6
 401b130:	dfc00917 	ldw	ra,36(sp)
 401b134:	df000817 	ldw	fp,32(sp)
 401b138:	ddc00717 	ldw	r23,28(sp)
 401b13c:	dd800617 	ldw	r22,24(sp)
 401b140:	dd400517 	ldw	r21,20(sp)
 401b144:	dd000417 	ldw	r20,16(sp)
 401b148:	dcc00317 	ldw	r19,12(sp)
 401b14c:	dc800217 	ldw	r18,8(sp)
 401b150:	dc400117 	ldw	r17,4(sp)
 401b154:	dc000017 	ldw	r16,0(sp)
 401b158:	dec00a04 	addi	sp,sp,40
 401b15c:	4011c081 	jmpi	4011c08 <_malloc_r>
 401b160:	a8c00017 	ldw	r3,0(r21)
 401b164:	90c00015 	stw	r3,0(r18)
 401b168:	a8c00117 	ldw	r3,4(r21)
 401b16c:	90c00115 	stw	r3,4(r18)
 401b170:	00c006c4 	movi	r3,27
 401b174:	19804536 	bltu	r3,r6,401b28c <_realloc_r+0x470>
 401b178:	90800204 	addi	r2,r18,8
 401b17c:	a8c00204 	addi	r3,r21,8
 401b180:	003f6306 	br	401af10 <__reset+0xfb019f10>
 401b184:	9005883a 	mov	r2,r18
 401b188:	a8c00017 	ldw	r3,0(r21)
 401b18c:	b821883a 	mov	r16,r23
 401b190:	b027883a 	mov	r19,r22
 401b194:	10c00015 	stw	r3,0(r2)
 401b198:	a8c00117 	ldw	r3,4(r21)
 401b19c:	10c00115 	stw	r3,4(r2)
 401b1a0:	a8c00217 	ldw	r3,8(r21)
 401b1a4:	10c00215 	stw	r3,8(r2)
 401b1a8:	003f6a06 	br	401af54 <__reset+0xfb019f54>
 401b1ac:	9c67883a 	add	r19,r19,r17
 401b1b0:	4445c83a 	sub	r2,r8,r17
 401b1b4:	e4c00215 	stw	r19,8(fp)
 401b1b8:	10800054 	ori	r2,r2,1
 401b1bc:	98800115 	stw	r2,4(r19)
 401b1c0:	a8bfff17 	ldw	r2,-4(r21)
 401b1c4:	a009883a 	mov	r4,r20
 401b1c8:	1080004c 	andi	r2,r2,1
 401b1cc:	1462b03a 	or	r17,r2,r17
 401b1d0:	ac7fff15 	stw	r17,-4(r21)
 401b1d4:	401fd700 	call	401fd70 <__malloc_unlock>
 401b1d8:	a805883a 	mov	r2,r21
 401b1dc:	003f6b06 	br	401af8c <__reset+0xfb019f8c>
 401b1e0:	a80b883a 	mov	r5,r21
 401b1e4:	9009883a 	mov	r4,r18
 401b1e8:	4019cc40 	call	4019cc4 <memmove>
 401b1ec:	003f4e06 	br	401af28 <__reset+0xfb019f28>
 401b1f0:	89000404 	addi	r4,r17,16
 401b1f4:	b93fbc16 	blt	r23,r4,401b0e8 <__reset+0xfb01a0e8>
 401b1f8:	b0800317 	ldw	r2,12(r22)
 401b1fc:	b0c00217 	ldw	r3,8(r22)
 401b200:	81bfff04 	addi	r6,r16,-4
 401b204:	01000904 	movi	r4,36
 401b208:	18800315 	stw	r2,12(r3)
 401b20c:	10c00215 	stw	r3,8(r2)
 401b210:	b4800204 	addi	r18,r22,8
 401b214:	21804336 	bltu	r4,r6,401b324 <_realloc_r+0x508>
 401b218:	008004c4 	movi	r2,19
 401b21c:	11803f2e 	bgeu	r2,r6,401b31c <_realloc_r+0x500>
 401b220:	a8800017 	ldw	r2,0(r21)
 401b224:	b0800215 	stw	r2,8(r22)
 401b228:	a8800117 	ldw	r2,4(r21)
 401b22c:	b0800315 	stw	r2,12(r22)
 401b230:	008006c4 	movi	r2,27
 401b234:	11803f36 	bltu	r2,r6,401b334 <_realloc_r+0x518>
 401b238:	b0800404 	addi	r2,r22,16
 401b23c:	ad400204 	addi	r21,r21,8
 401b240:	a8c00017 	ldw	r3,0(r21)
 401b244:	10c00015 	stw	r3,0(r2)
 401b248:	a8c00117 	ldw	r3,4(r21)
 401b24c:	10c00115 	stw	r3,4(r2)
 401b250:	a8c00217 	ldw	r3,8(r21)
 401b254:	10c00215 	stw	r3,8(r2)
 401b258:	b447883a 	add	r3,r22,r17
 401b25c:	bc45c83a 	sub	r2,r23,r17
 401b260:	e0c00215 	stw	r3,8(fp)
 401b264:	10800054 	ori	r2,r2,1
 401b268:	18800115 	stw	r2,4(r3)
 401b26c:	b0800117 	ldw	r2,4(r22)
 401b270:	a009883a 	mov	r4,r20
 401b274:	1080004c 	andi	r2,r2,1
 401b278:	1462b03a 	or	r17,r2,r17
 401b27c:	b4400115 	stw	r17,4(r22)
 401b280:	401fd700 	call	401fd70 <__malloc_unlock>
 401b284:	9005883a 	mov	r2,r18
 401b288:	003f4006 	br	401af8c <__reset+0xfb019f8c>
 401b28c:	a8c00217 	ldw	r3,8(r21)
 401b290:	90c00215 	stw	r3,8(r18)
 401b294:	a8c00317 	ldw	r3,12(r21)
 401b298:	90c00315 	stw	r3,12(r18)
 401b29c:	30801126 	beq	r6,r2,401b2e4 <_realloc_r+0x4c8>
 401b2a0:	90800404 	addi	r2,r18,16
 401b2a4:	a8c00404 	addi	r3,r21,16
 401b2a8:	003f1906 	br	401af10 <__reset+0xfb019f10>
 401b2ac:	90ffff17 	ldw	r3,-4(r18)
 401b2b0:	00bfff04 	movi	r2,-4
 401b2b4:	a825883a 	mov	r18,r21
 401b2b8:	1884703a 	and	r2,r3,r2
 401b2bc:	80a1883a 	add	r16,r16,r2
 401b2c0:	003f2406 	br	401af54 <__reset+0xfb019f54>
 401b2c4:	a8800217 	ldw	r2,8(r21)
 401b2c8:	b0800415 	stw	r2,16(r22)
 401b2cc:	a8800317 	ldw	r2,12(r21)
 401b2d0:	b0800515 	stw	r2,20(r22)
 401b2d4:	31000a26 	beq	r6,r4,401b300 <_realloc_r+0x4e4>
 401b2d8:	b0800604 	addi	r2,r22,24
 401b2dc:	ad400404 	addi	r21,r21,16
 401b2e0:	003fa906 	br	401b188 <__reset+0xfb01a188>
 401b2e4:	a9000417 	ldw	r4,16(r21)
 401b2e8:	90800604 	addi	r2,r18,24
 401b2ec:	a8c00604 	addi	r3,r21,24
 401b2f0:	91000415 	stw	r4,16(r18)
 401b2f4:	a9000517 	ldw	r4,20(r21)
 401b2f8:	91000515 	stw	r4,20(r18)
 401b2fc:	003f0406 	br	401af10 <__reset+0xfb019f10>
 401b300:	a8c00417 	ldw	r3,16(r21)
 401b304:	ad400604 	addi	r21,r21,24
 401b308:	b0800804 	addi	r2,r22,32
 401b30c:	b0c00615 	stw	r3,24(r22)
 401b310:	a8ffff17 	ldw	r3,-4(r21)
 401b314:	b0c00715 	stw	r3,28(r22)
 401b318:	003f9b06 	br	401b188 <__reset+0xfb01a188>
 401b31c:	9005883a 	mov	r2,r18
 401b320:	003fc706 	br	401b240 <__reset+0xfb01a240>
 401b324:	a80b883a 	mov	r5,r21
 401b328:	9009883a 	mov	r4,r18
 401b32c:	4019cc40 	call	4019cc4 <memmove>
 401b330:	003fc906 	br	401b258 <__reset+0xfb01a258>
 401b334:	a8800217 	ldw	r2,8(r21)
 401b338:	b0800415 	stw	r2,16(r22)
 401b33c:	a8800317 	ldw	r2,12(r21)
 401b340:	b0800515 	stw	r2,20(r22)
 401b344:	31000726 	beq	r6,r4,401b364 <_realloc_r+0x548>
 401b348:	b0800604 	addi	r2,r22,24
 401b34c:	ad400404 	addi	r21,r21,16
 401b350:	003fbb06 	br	401b240 <__reset+0xfb01a240>
 401b354:	a009883a 	mov	r4,r20
 401b358:	401fd700 	call	401fd70 <__malloc_unlock>
 401b35c:	0005883a 	mov	r2,zero
 401b360:	003f0a06 	br	401af8c <__reset+0xfb019f8c>
 401b364:	a8c00417 	ldw	r3,16(r21)
 401b368:	ad400604 	addi	r21,r21,24
 401b36c:	b0800804 	addi	r2,r22,32
 401b370:	b0c00615 	stw	r3,24(r22)
 401b374:	a8ffff17 	ldw	r3,-4(r21)
 401b378:	b0c00715 	stw	r3,28(r22)
 401b37c:	003fb006 	br	401b240 <__reset+0xfb01a240>

0401b380 <__sread>:
 401b380:	defffe04 	addi	sp,sp,-8
 401b384:	dc000015 	stw	r16,0(sp)
 401b388:	2821883a 	mov	r16,r5
 401b38c:	2940038f 	ldh	r5,14(r5)
 401b390:	dfc00115 	stw	ra,4(sp)
 401b394:	401e5800 	call	401e580 <_read_r>
 401b398:	10000716 	blt	r2,zero,401b3b8 <__sread+0x38>
 401b39c:	80c01417 	ldw	r3,80(r16)
 401b3a0:	1887883a 	add	r3,r3,r2
 401b3a4:	80c01415 	stw	r3,80(r16)
 401b3a8:	dfc00117 	ldw	ra,4(sp)
 401b3ac:	dc000017 	ldw	r16,0(sp)
 401b3b0:	dec00204 	addi	sp,sp,8
 401b3b4:	f800283a 	ret
 401b3b8:	80c0030b 	ldhu	r3,12(r16)
 401b3bc:	18fbffcc 	andi	r3,r3,61439
 401b3c0:	80c0030d 	sth	r3,12(r16)
 401b3c4:	dfc00117 	ldw	ra,4(sp)
 401b3c8:	dc000017 	ldw	r16,0(sp)
 401b3cc:	dec00204 	addi	sp,sp,8
 401b3d0:	f800283a 	ret

0401b3d4 <__seofread>:
 401b3d4:	0005883a 	mov	r2,zero
 401b3d8:	f800283a 	ret

0401b3dc <__swrite>:
 401b3dc:	2880030b 	ldhu	r2,12(r5)
 401b3e0:	defffb04 	addi	sp,sp,-20
 401b3e4:	dcc00315 	stw	r19,12(sp)
 401b3e8:	dc800215 	stw	r18,8(sp)
 401b3ec:	dc400115 	stw	r17,4(sp)
 401b3f0:	dc000015 	stw	r16,0(sp)
 401b3f4:	dfc00415 	stw	ra,16(sp)
 401b3f8:	10c0400c 	andi	r3,r2,256
 401b3fc:	2821883a 	mov	r16,r5
 401b400:	2023883a 	mov	r17,r4
 401b404:	3025883a 	mov	r18,r6
 401b408:	3827883a 	mov	r19,r7
 401b40c:	18000526 	beq	r3,zero,401b424 <__swrite+0x48>
 401b410:	2940038f 	ldh	r5,14(r5)
 401b414:	01c00084 	movi	r7,2
 401b418:	000d883a 	mov	r6,zero
 401b41c:	401e5200 	call	401e520 <_lseek_r>
 401b420:	8080030b 	ldhu	r2,12(r16)
 401b424:	8140038f 	ldh	r5,14(r16)
 401b428:	10bbffcc 	andi	r2,r2,61439
 401b42c:	980f883a 	mov	r7,r19
 401b430:	900d883a 	mov	r6,r18
 401b434:	8809883a 	mov	r4,r17
 401b438:	8080030d 	sth	r2,12(r16)
 401b43c:	dfc00417 	ldw	ra,16(sp)
 401b440:	dcc00317 	ldw	r19,12(sp)
 401b444:	dc800217 	ldw	r18,8(sp)
 401b448:	dc400117 	ldw	r17,4(sp)
 401b44c:	dc000017 	ldw	r16,0(sp)
 401b450:	dec00504 	addi	sp,sp,20
 401b454:	401dfec1 	jmpi	401dfec <_write_r>

0401b458 <__sseek>:
 401b458:	defffe04 	addi	sp,sp,-8
 401b45c:	dc000015 	stw	r16,0(sp)
 401b460:	2821883a 	mov	r16,r5
 401b464:	2940038f 	ldh	r5,14(r5)
 401b468:	dfc00115 	stw	ra,4(sp)
 401b46c:	401e5200 	call	401e520 <_lseek_r>
 401b470:	00ffffc4 	movi	r3,-1
 401b474:	10c00826 	beq	r2,r3,401b498 <__sseek+0x40>
 401b478:	80c0030b 	ldhu	r3,12(r16)
 401b47c:	80801415 	stw	r2,80(r16)
 401b480:	18c40014 	ori	r3,r3,4096
 401b484:	80c0030d 	sth	r3,12(r16)
 401b488:	dfc00117 	ldw	ra,4(sp)
 401b48c:	dc000017 	ldw	r16,0(sp)
 401b490:	dec00204 	addi	sp,sp,8
 401b494:	f800283a 	ret
 401b498:	80c0030b 	ldhu	r3,12(r16)
 401b49c:	18fbffcc 	andi	r3,r3,61439
 401b4a0:	80c0030d 	sth	r3,12(r16)
 401b4a4:	dfc00117 	ldw	ra,4(sp)
 401b4a8:	dc000017 	ldw	r16,0(sp)
 401b4ac:	dec00204 	addi	sp,sp,8
 401b4b0:	f800283a 	ret

0401b4b4 <__sclose>:
 401b4b4:	2940038f 	ldh	r5,14(r5)
 401b4b8:	401e04c1 	jmpi	401e04c <_close_r>

0401b4bc <strcmp>:
 401b4bc:	2144b03a 	or	r2,r4,r5
 401b4c0:	108000cc 	andi	r2,r2,3
 401b4c4:	1000171e 	bne	r2,zero,401b524 <strcmp+0x68>
 401b4c8:	20800017 	ldw	r2,0(r4)
 401b4cc:	28c00017 	ldw	r3,0(r5)
 401b4d0:	10c0141e 	bne	r2,r3,401b524 <strcmp+0x68>
 401b4d4:	027fbff4 	movhi	r9,65279
 401b4d8:	4a7fbfc4 	addi	r9,r9,-257
 401b4dc:	0086303a 	nor	r3,zero,r2
 401b4e0:	02202074 	movhi	r8,32897
 401b4e4:	1245883a 	add	r2,r2,r9
 401b4e8:	42202004 	addi	r8,r8,-32640
 401b4ec:	10c4703a 	and	r2,r2,r3
 401b4f0:	1204703a 	and	r2,r2,r8
 401b4f4:	10000226 	beq	r2,zero,401b500 <strcmp+0x44>
 401b4f8:	00002306 	br	401b588 <strcmp+0xcc>
 401b4fc:	1000221e 	bne	r2,zero,401b588 <strcmp+0xcc>
 401b500:	21000104 	addi	r4,r4,4
 401b504:	20c00017 	ldw	r3,0(r4)
 401b508:	29400104 	addi	r5,r5,4
 401b50c:	29800017 	ldw	r6,0(r5)
 401b510:	1a4f883a 	add	r7,r3,r9
 401b514:	00c4303a 	nor	r2,zero,r3
 401b518:	3884703a 	and	r2,r7,r2
 401b51c:	1204703a 	and	r2,r2,r8
 401b520:	19bff626 	beq	r3,r6,401b4fc <__reset+0xfb01a4fc>
 401b524:	20800003 	ldbu	r2,0(r4)
 401b528:	10c03fcc 	andi	r3,r2,255
 401b52c:	18c0201c 	xori	r3,r3,128
 401b530:	18ffe004 	addi	r3,r3,-128
 401b534:	18000c26 	beq	r3,zero,401b568 <strcmp+0xac>
 401b538:	29800007 	ldb	r6,0(r5)
 401b53c:	19800326 	beq	r3,r6,401b54c <strcmp+0x90>
 401b540:	00001306 	br	401b590 <strcmp+0xd4>
 401b544:	29800007 	ldb	r6,0(r5)
 401b548:	11800b1e 	bne	r2,r6,401b578 <strcmp+0xbc>
 401b54c:	21000044 	addi	r4,r4,1
 401b550:	20c00003 	ldbu	r3,0(r4)
 401b554:	29400044 	addi	r5,r5,1
 401b558:	18803fcc 	andi	r2,r3,255
 401b55c:	1080201c 	xori	r2,r2,128
 401b560:	10bfe004 	addi	r2,r2,-128
 401b564:	103ff71e 	bne	r2,zero,401b544 <__reset+0xfb01a544>
 401b568:	0007883a 	mov	r3,zero
 401b56c:	28800003 	ldbu	r2,0(r5)
 401b570:	1885c83a 	sub	r2,r3,r2
 401b574:	f800283a 	ret
 401b578:	28800003 	ldbu	r2,0(r5)
 401b57c:	18c03fcc 	andi	r3,r3,255
 401b580:	1885c83a 	sub	r2,r3,r2
 401b584:	f800283a 	ret
 401b588:	0005883a 	mov	r2,zero
 401b58c:	f800283a 	ret
 401b590:	10c03fcc 	andi	r3,r2,255
 401b594:	003ff506 	br	401b56c <__reset+0xfb01a56c>

0401b598 <__ssprint_r>:
 401b598:	30800217 	ldw	r2,8(r6)
 401b59c:	defff604 	addi	sp,sp,-40
 401b5a0:	dc800215 	stw	r18,8(sp)
 401b5a4:	dfc00915 	stw	ra,36(sp)
 401b5a8:	df000815 	stw	fp,32(sp)
 401b5ac:	ddc00715 	stw	r23,28(sp)
 401b5b0:	dd800615 	stw	r22,24(sp)
 401b5b4:	dd400515 	stw	r21,20(sp)
 401b5b8:	dd000415 	stw	r20,16(sp)
 401b5bc:	dcc00315 	stw	r19,12(sp)
 401b5c0:	dc400115 	stw	r17,4(sp)
 401b5c4:	dc000015 	stw	r16,0(sp)
 401b5c8:	3025883a 	mov	r18,r6
 401b5cc:	10005826 	beq	r2,zero,401b730 <__ssprint_r+0x198>
 401b5d0:	2027883a 	mov	r19,r4
 401b5d4:	35c00017 	ldw	r23,0(r6)
 401b5d8:	29000017 	ldw	r4,0(r5)
 401b5dc:	28800217 	ldw	r2,8(r5)
 401b5e0:	2823883a 	mov	r17,r5
 401b5e4:	0039883a 	mov	fp,zero
 401b5e8:	0021883a 	mov	r16,zero
 401b5ec:	80003926 	beq	r16,zero,401b6d4 <__ssprint_r+0x13c>
 401b5f0:	102b883a 	mov	r21,r2
 401b5f4:	102d883a 	mov	r22,r2
 401b5f8:	80803a36 	bltu	r16,r2,401b6e4 <__ssprint_r+0x14c>
 401b5fc:	88c0030b 	ldhu	r3,12(r17)
 401b600:	1881200c 	andi	r2,r3,1152
 401b604:	10002626 	beq	r2,zero,401b6a0 <__ssprint_r+0x108>
 401b608:	88800517 	ldw	r2,20(r17)
 401b60c:	89400417 	ldw	r5,16(r17)
 401b610:	81800044 	addi	r6,r16,1
 401b614:	108f883a 	add	r7,r2,r2
 401b618:	3885883a 	add	r2,r7,r2
 401b61c:	100ed7fa 	srli	r7,r2,31
 401b620:	216dc83a 	sub	r22,r4,r5
 401b624:	3589883a 	add	r4,r6,r22
 401b628:	3885883a 	add	r2,r7,r2
 401b62c:	102bd07a 	srai	r21,r2,1
 401b630:	a80d883a 	mov	r6,r21
 401b634:	a900022e 	bgeu	r21,r4,401b640 <__ssprint_r+0xa8>
 401b638:	202b883a 	mov	r21,r4
 401b63c:	200d883a 	mov	r6,r4
 401b640:	18c1000c 	andi	r3,r3,1024
 401b644:	18002a26 	beq	r3,zero,401b6f0 <__ssprint_r+0x158>
 401b648:	300b883a 	mov	r5,r6
 401b64c:	9809883a 	mov	r4,r19
 401b650:	4011c080 	call	4011c08 <_malloc_r>
 401b654:	1029883a 	mov	r20,r2
 401b658:	10002c26 	beq	r2,zero,401b70c <__ssprint_r+0x174>
 401b65c:	89400417 	ldw	r5,16(r17)
 401b660:	b00d883a 	mov	r6,r22
 401b664:	1009883a 	mov	r4,r2
 401b668:	40124140 	call	4012414 <memcpy>
 401b66c:	8880030b 	ldhu	r2,12(r17)
 401b670:	00fedfc4 	movi	r3,-1153
 401b674:	10c4703a 	and	r2,r2,r3
 401b678:	10802014 	ori	r2,r2,128
 401b67c:	8880030d 	sth	r2,12(r17)
 401b680:	a589883a 	add	r4,r20,r22
 401b684:	adadc83a 	sub	r22,r21,r22
 401b688:	8d400515 	stw	r21,20(r17)
 401b68c:	8d800215 	stw	r22,8(r17)
 401b690:	8d000415 	stw	r20,16(r17)
 401b694:	89000015 	stw	r4,0(r17)
 401b698:	802b883a 	mov	r21,r16
 401b69c:	802d883a 	mov	r22,r16
 401b6a0:	b00d883a 	mov	r6,r22
 401b6a4:	e00b883a 	mov	r5,fp
 401b6a8:	4019cc40 	call	4019cc4 <memmove>
 401b6ac:	88800217 	ldw	r2,8(r17)
 401b6b0:	89000017 	ldw	r4,0(r17)
 401b6b4:	90c00217 	ldw	r3,8(r18)
 401b6b8:	1545c83a 	sub	r2,r2,r21
 401b6bc:	2589883a 	add	r4,r4,r22
 401b6c0:	88800215 	stw	r2,8(r17)
 401b6c4:	89000015 	stw	r4,0(r17)
 401b6c8:	1c21c83a 	sub	r16,r3,r16
 401b6cc:	94000215 	stw	r16,8(r18)
 401b6d0:	80001726 	beq	r16,zero,401b730 <__ssprint_r+0x198>
 401b6d4:	bf000017 	ldw	fp,0(r23)
 401b6d8:	bc000117 	ldw	r16,4(r23)
 401b6dc:	bdc00204 	addi	r23,r23,8
 401b6e0:	003fc206 	br	401b5ec <__reset+0xfb01a5ec>
 401b6e4:	802b883a 	mov	r21,r16
 401b6e8:	802d883a 	mov	r22,r16
 401b6ec:	003fec06 	br	401b6a0 <__reset+0xfb01a6a0>
 401b6f0:	9809883a 	mov	r4,r19
 401b6f4:	401ae1c0 	call	401ae1c <_realloc_r>
 401b6f8:	1029883a 	mov	r20,r2
 401b6fc:	103fe01e 	bne	r2,zero,401b680 <__reset+0xfb01a680>
 401b700:	89400417 	ldw	r5,16(r17)
 401b704:	9809883a 	mov	r4,r19
 401b708:	4018ff40 	call	4018ff4 <_free_r>
 401b70c:	88c0030b 	ldhu	r3,12(r17)
 401b710:	00800304 	movi	r2,12
 401b714:	98800015 	stw	r2,0(r19)
 401b718:	18c01014 	ori	r3,r3,64
 401b71c:	88c0030d 	sth	r3,12(r17)
 401b720:	00bfffc4 	movi	r2,-1
 401b724:	90000215 	stw	zero,8(r18)
 401b728:	90000115 	stw	zero,4(r18)
 401b72c:	00000206 	br	401b738 <__ssprint_r+0x1a0>
 401b730:	90000115 	stw	zero,4(r18)
 401b734:	0005883a 	mov	r2,zero
 401b738:	dfc00917 	ldw	ra,36(sp)
 401b73c:	df000817 	ldw	fp,32(sp)
 401b740:	ddc00717 	ldw	r23,28(sp)
 401b744:	dd800617 	ldw	r22,24(sp)
 401b748:	dd400517 	ldw	r21,20(sp)
 401b74c:	dd000417 	ldw	r20,16(sp)
 401b750:	dcc00317 	ldw	r19,12(sp)
 401b754:	dc800217 	ldw	r18,8(sp)
 401b758:	dc400117 	ldw	r17,4(sp)
 401b75c:	dc000017 	ldw	r16,0(sp)
 401b760:	dec00a04 	addi	sp,sp,40
 401b764:	f800283a 	ret

0401b768 <___svfiprintf_internal_r>:
 401b768:	2880030b 	ldhu	r2,12(r5)
 401b76c:	deffc804 	addi	sp,sp,-224
 401b770:	dcc03115 	stw	r19,196(sp)
 401b774:	dfc03715 	stw	ra,220(sp)
 401b778:	df003615 	stw	fp,216(sp)
 401b77c:	ddc03515 	stw	r23,212(sp)
 401b780:	dd803415 	stw	r22,208(sp)
 401b784:	dd403315 	stw	r21,204(sp)
 401b788:	dd003215 	stw	r20,200(sp)
 401b78c:	dc803015 	stw	r18,192(sp)
 401b790:	dc402f15 	stw	r17,188(sp)
 401b794:	dc002e15 	stw	r16,184(sp)
 401b798:	d9402715 	stw	r5,156(sp)
 401b79c:	d9002a15 	stw	r4,168(sp)
 401b7a0:	1080200c 	andi	r2,r2,128
 401b7a4:	d9c02315 	stw	r7,140(sp)
 401b7a8:	3027883a 	mov	r19,r6
 401b7ac:	10000226 	beq	r2,zero,401b7b8 <___svfiprintf_internal_r+0x50>
 401b7b0:	28800417 	ldw	r2,16(r5)
 401b7b4:	10041d26 	beq	r2,zero,401c82c <___svfiprintf_internal_r+0x10c4>
 401b7b8:	dac01a04 	addi	r11,sp,104
 401b7bc:	dac01e15 	stw	r11,120(sp)
 401b7c0:	d8801e17 	ldw	r2,120(sp)
 401b7c4:	dac019c4 	addi	r11,sp,103
 401b7c8:	dd402a17 	ldw	r21,168(sp)
 401b7cc:	ddc02717 	ldw	r23,156(sp)
 401b7d0:	05810234 	movhi	r22,1032
 401b7d4:	05010234 	movhi	r20,1032
 401b7d8:	dac01f15 	stw	r11,124(sp)
 401b7dc:	12d7c83a 	sub	r11,r2,r11
 401b7e0:	b5880504 	addi	r22,r22,8212
 401b7e4:	a5080104 	addi	r20,r20,8196
 401b7e8:	dec01a15 	stw	sp,104(sp)
 401b7ec:	d8001c15 	stw	zero,112(sp)
 401b7f0:	d8001b15 	stw	zero,108(sp)
 401b7f4:	d811883a 	mov	r8,sp
 401b7f8:	d8002915 	stw	zero,164(sp)
 401b7fc:	d8002515 	stw	zero,148(sp)
 401b800:	dac02b15 	stw	r11,172(sp)
 401b804:	98800007 	ldb	r2,0(r19)
 401b808:	1002dd26 	beq	r2,zero,401c380 <___svfiprintf_internal_r+0xc18>
 401b80c:	00c00944 	movi	r3,37
 401b810:	9823883a 	mov	r17,r19
 401b814:	10c0021e 	bne	r2,r3,401b820 <___svfiprintf_internal_r+0xb8>
 401b818:	00001406 	br	401b86c <___svfiprintf_internal_r+0x104>
 401b81c:	10c00326 	beq	r2,r3,401b82c <___svfiprintf_internal_r+0xc4>
 401b820:	8c400044 	addi	r17,r17,1
 401b824:	88800007 	ldb	r2,0(r17)
 401b828:	103ffc1e 	bne	r2,zero,401b81c <__reset+0xfb01a81c>
 401b82c:	8ce1c83a 	sub	r16,r17,r19
 401b830:	80000e26 	beq	r16,zero,401b86c <___svfiprintf_internal_r+0x104>
 401b834:	d8c01c17 	ldw	r3,112(sp)
 401b838:	d8801b17 	ldw	r2,108(sp)
 401b83c:	44c00015 	stw	r19,0(r8)
 401b840:	1c07883a 	add	r3,r3,r16
 401b844:	10800044 	addi	r2,r2,1
 401b848:	d8c01c15 	stw	r3,112(sp)
 401b84c:	44000115 	stw	r16,4(r8)
 401b850:	d8801b15 	stw	r2,108(sp)
 401b854:	00c001c4 	movi	r3,7
 401b858:	18831e16 	blt	r3,r2,401c4d4 <___svfiprintf_internal_r+0xd6c>
 401b85c:	42000204 	addi	r8,r8,8
 401b860:	dac02517 	ldw	r11,148(sp)
 401b864:	5c17883a 	add	r11,r11,r16
 401b868:	dac02515 	stw	r11,148(sp)
 401b86c:	88800007 	ldb	r2,0(r17)
 401b870:	1002c526 	beq	r2,zero,401c388 <___svfiprintf_internal_r+0xc20>
 401b874:	88c00047 	ldb	r3,1(r17)
 401b878:	8cc00044 	addi	r19,r17,1
 401b87c:	d8001d85 	stb	zero,118(sp)
 401b880:	0009883a 	mov	r4,zero
 401b884:	000f883a 	mov	r7,zero
 401b888:	043fffc4 	movi	r16,-1
 401b88c:	d8002415 	stw	zero,144(sp)
 401b890:	0025883a 	mov	r18,zero
 401b894:	01401604 	movi	r5,88
 401b898:	01800244 	movi	r6,9
 401b89c:	02800a84 	movi	r10,42
 401b8a0:	02401b04 	movi	r9,108
 401b8a4:	9cc00044 	addi	r19,r19,1
 401b8a8:	18bff804 	addi	r2,r3,-32
 401b8ac:	2881dd36 	bltu	r5,r2,401c024 <___svfiprintf_internal_r+0x8bc>
 401b8b0:	100490ba 	slli	r2,r2,2
 401b8b4:	02c100b4 	movhi	r11,1026
 401b8b8:	5aee3204 	addi	r11,r11,-18232
 401b8bc:	12c5883a 	add	r2,r2,r11
 401b8c0:	10800017 	ldw	r2,0(r2)
 401b8c4:	1000683a 	jmp	r2
 401b8c8:	0401bac4 	movi	r16,1771
 401b8cc:	0401c024 	muli	r16,zero,1792
 401b8d0:	0401c024 	muli	r16,zero,1792
 401b8d4:	0401bab8 	rdprs	r16,zero,1770
 401b8d8:	0401c024 	muli	r16,zero,1792
 401b8dc:	0401c024 	muli	r16,zero,1792
 401b8e0:	0401c024 	muli	r16,zero,1792
 401b8e4:	0401c024 	muli	r16,zero,1792
 401b8e8:	0401c024 	muli	r16,zero,1792
 401b8ec:	0401c024 	muli	r16,zero,1792
 401b8f0:	0401ba2c 	andhi	r16,zero,1768
 401b8f4:	0401bc08 	cmpgei	r16,zero,1776
 401b8f8:	0401c024 	muli	r16,zero,1792
 401b8fc:	0401ba58 	cmpnei	r16,zero,1769
 401b900:	0401c058 	cmpnei	r16,zero,1793
 401b904:	0401c024 	muli	r16,zero,1792
 401b908:	0401c04c 	andi	r16,zero,1793
 401b90c:	0401bfec 	andhi	r16,zero,1791
 401b910:	0401bfec 	andhi	r16,zero,1791
 401b914:	0401bfec 	andhi	r16,zero,1791
 401b918:	0401bfec 	andhi	r16,zero,1791
 401b91c:	0401bfec 	andhi	r16,zero,1791
 401b920:	0401bfec 	andhi	r16,zero,1791
 401b924:	0401bfec 	andhi	r16,zero,1791
 401b928:	0401bfec 	andhi	r16,zero,1791
 401b92c:	0401bfec 	andhi	r16,zero,1791
 401b930:	0401c024 	muli	r16,zero,1792
 401b934:	0401c024 	muli	r16,zero,1792
 401b938:	0401c024 	muli	r16,zero,1792
 401b93c:	0401c024 	muli	r16,zero,1792
 401b940:	0401c024 	muli	r16,zero,1792
 401b944:	0401c024 	muli	r16,zero,1792
 401b948:	0401c024 	muli	r16,zero,1792
 401b94c:	0401c024 	muli	r16,zero,1792
 401b950:	0401c024 	muli	r16,zero,1792
 401b954:	0401c024 	muli	r16,zero,1792
 401b958:	0401bf88 	cmpgei	r16,zero,1790
 401b95c:	0401c024 	muli	r16,zero,1792
 401b960:	0401c024 	muli	r16,zero,1792
 401b964:	0401c024 	muli	r16,zero,1792
 401b968:	0401c024 	muli	r16,zero,1792
 401b96c:	0401c024 	muli	r16,zero,1792
 401b970:	0401c024 	muli	r16,zero,1792
 401b974:	0401c024 	muli	r16,zero,1792
 401b978:	0401c024 	muli	r16,zero,1792
 401b97c:	0401c024 	muli	r16,zero,1792
 401b980:	0401c024 	muli	r16,zero,1792
 401b984:	0401c100 	call	401c10 <__alt_mem_sdram-0x3bfe3f0>
 401b988:	0401c024 	muli	r16,zero,1792
 401b98c:	0401c024 	muli	r16,zero,1792
 401b990:	0401c024 	muli	r16,zero,1792
 401b994:	0401c024 	muli	r16,zero,1792
 401b998:	0401c024 	muli	r16,zero,1792
 401b99c:	0401c098 	cmpnei	r16,zero,1794
 401b9a0:	0401c024 	muli	r16,zero,1792
 401b9a4:	0401c024 	muli	r16,zero,1792
 401b9a8:	0401bdcc 	andi	r16,zero,1783
 401b9ac:	0401c024 	muli	r16,zero,1792
 401b9b0:	0401c024 	muli	r16,zero,1792
 401b9b4:	0401c024 	muli	r16,zero,1792
 401b9b8:	0401c024 	muli	r16,zero,1792
 401b9bc:	0401c024 	muli	r16,zero,1792
 401b9c0:	0401c024 	muli	r16,zero,1792
 401b9c4:	0401c024 	muli	r16,zero,1792
 401b9c8:	0401c024 	muli	r16,zero,1792
 401b9cc:	0401c024 	muli	r16,zero,1792
 401b9d0:	0401c024 	muli	r16,zero,1792
 401b9d4:	0401bcbc 	xorhi	r16,zero,1778
 401b9d8:	0401be68 	cmpgeui	r16,zero,1785
 401b9dc:	0401c024 	muli	r16,zero,1792
 401b9e0:	0401c024 	muli	r16,zero,1792
 401b9e4:	0401c024 	muli	r16,zero,1792
 401b9e8:	0401be5c 	xori	r16,zero,1785
 401b9ec:	0401be68 	cmpgeui	r16,zero,1785
 401b9f0:	0401c024 	muli	r16,zero,1792
 401b9f4:	0401c024 	muli	r16,zero,1792
 401b9f8:	0401be4c 	andi	r16,zero,1785
 401b9fc:	0401c024 	muli	r16,zero,1792
 401ba00:	0401be10 	cmplti	r16,zero,1784
 401ba04:	0401bc18 	cmpnei	r16,zero,1776
 401ba08:	0401ba64 	muli	r16,zero,1769
 401ba0c:	0401bf7c 	xorhi	r16,zero,1789
 401ba10:	0401c024 	muli	r16,zero,1792
 401ba14:	0401bf30 	cmpltui	r16,zero,1788
 401ba18:	0401c024 	muli	r16,zero,1792
 401ba1c:	0401bb88 	cmpgei	r16,zero,1774
 401ba20:	0401c024 	muli	r16,zero,1792
 401ba24:	0401c024 	muli	r16,zero,1792
 401ba28:	0401bae4 	muli	r16,zero,1771
 401ba2c:	dac02317 	ldw	r11,140(sp)
 401ba30:	5ac00017 	ldw	r11,0(r11)
 401ba34:	dac02415 	stw	r11,144(sp)
 401ba38:	dac02317 	ldw	r11,140(sp)
 401ba3c:	58800104 	addi	r2,r11,4
 401ba40:	dac02417 	ldw	r11,144(sp)
 401ba44:	5802e90e 	bge	r11,zero,401c5ec <___svfiprintf_internal_r+0xe84>
 401ba48:	dac02417 	ldw	r11,144(sp)
 401ba4c:	d8802315 	stw	r2,140(sp)
 401ba50:	02d7c83a 	sub	r11,zero,r11
 401ba54:	dac02415 	stw	r11,144(sp)
 401ba58:	94800114 	ori	r18,r18,4
 401ba5c:	98c00007 	ldb	r3,0(r19)
 401ba60:	003f9006 	br	401b8a4 <__reset+0xfb01a8a4>
 401ba64:	00800c04 	movi	r2,48
 401ba68:	dac02317 	ldw	r11,140(sp)
 401ba6c:	d8801d05 	stb	r2,116(sp)
 401ba70:	00801e04 	movi	r2,120
 401ba74:	d8801d45 	stb	r2,117(sp)
 401ba78:	d8001d85 	stb	zero,118(sp)
 401ba7c:	58c00104 	addi	r3,r11,4
 401ba80:	5f000017 	ldw	fp,0(r11)
 401ba84:	0013883a 	mov	r9,zero
 401ba88:	90800094 	ori	r2,r18,2
 401ba8c:	80032b16 	blt	r16,zero,401c73c <___svfiprintf_internal_r+0xfd4>
 401ba90:	00bfdfc4 	movi	r2,-129
 401ba94:	90a4703a 	and	r18,r18,r2
 401ba98:	d8c02315 	stw	r3,140(sp)
 401ba9c:	94800094 	ori	r18,r18,2
 401baa0:	e002dc26 	beq	fp,zero,401c614 <___svfiprintf_internal_r+0xeac>
 401baa4:	01010234 	movhi	r4,1032
 401baa8:	21079904 	addi	r4,r4,7780
 401baac:	0015883a 	mov	r10,zero
 401bab0:	d9002915 	stw	r4,164(sp)
 401bab4:	00002306 	br	401bb44 <___svfiprintf_internal_r+0x3dc>
 401bab8:	94800054 	ori	r18,r18,1
 401babc:	98c00007 	ldb	r3,0(r19)
 401bac0:	003f7806 	br	401b8a4 <__reset+0xfb01a8a4>
 401bac4:	38803fcc 	andi	r2,r7,255
 401bac8:	1080201c 	xori	r2,r2,128
 401bacc:	10bfe004 	addi	r2,r2,-128
 401bad0:	1002f31e 	bne	r2,zero,401c6a0 <___svfiprintf_internal_r+0xf38>
 401bad4:	01000044 	movi	r4,1
 401bad8:	01c00804 	movi	r7,32
 401badc:	98c00007 	ldb	r3,0(r19)
 401bae0:	003f7006 	br	401b8a4 <__reset+0xfb01a8a4>
 401bae4:	21003fcc 	andi	r4,r4,255
 401bae8:	2003aa1e 	bne	r4,zero,401c994 <___svfiprintf_internal_r+0x122c>
 401baec:	00810234 	movhi	r2,1032
 401baf0:	10879904 	addi	r2,r2,7780
 401baf4:	d8802915 	stw	r2,164(sp)
 401baf8:	9080080c 	andi	r2,r18,32
 401bafc:	1000ba26 	beq	r2,zero,401bde8 <___svfiprintf_internal_r+0x680>
 401bb00:	dac02317 	ldw	r11,140(sp)
 401bb04:	5f000017 	ldw	fp,0(r11)
 401bb08:	5a400117 	ldw	r9,4(r11)
 401bb0c:	5ac00204 	addi	r11,r11,8
 401bb10:	dac02315 	stw	r11,140(sp)
 401bb14:	9080004c 	andi	r2,r18,1
 401bb18:	10029026 	beq	r2,zero,401c55c <___svfiprintf_internal_r+0xdf4>
 401bb1c:	e244b03a 	or	r2,fp,r9
 401bb20:	1002d41e 	bne	r2,zero,401c674 <___svfiprintf_internal_r+0xf0c>
 401bb24:	d8001d85 	stb	zero,118(sp)
 401bb28:	80030b16 	blt	r16,zero,401c758 <___svfiprintf_internal_r+0xff0>
 401bb2c:	00bfdfc4 	movi	r2,-129
 401bb30:	90a4703a 	and	r18,r18,r2
 401bb34:	0015883a 	mov	r10,zero
 401bb38:	80002426 	beq	r16,zero,401bbcc <___svfiprintf_internal_r+0x464>
 401bb3c:	0039883a 	mov	fp,zero
 401bb40:	0013883a 	mov	r9,zero
 401bb44:	d9002917 	ldw	r4,164(sp)
 401bb48:	dc401a04 	addi	r17,sp,104
 401bb4c:	e08003cc 	andi	r2,fp,15
 401bb50:	4806973a 	slli	r3,r9,28
 401bb54:	2085883a 	add	r2,r4,r2
 401bb58:	e038d13a 	srli	fp,fp,4
 401bb5c:	10800003 	ldbu	r2,0(r2)
 401bb60:	4812d13a 	srli	r9,r9,4
 401bb64:	8c7fffc4 	addi	r17,r17,-1
 401bb68:	1f38b03a 	or	fp,r3,fp
 401bb6c:	88800005 	stb	r2,0(r17)
 401bb70:	e244b03a 	or	r2,fp,r9
 401bb74:	103ff51e 	bne	r2,zero,401bb4c <__reset+0xfb01ab4c>
 401bb78:	dac01e17 	ldw	r11,120(sp)
 401bb7c:	5c57c83a 	sub	r11,r11,r17
 401bb80:	dac02115 	stw	r11,132(sp)
 401bb84:	00001406 	br	401bbd8 <___svfiprintf_internal_r+0x470>
 401bb88:	21003fcc 	andi	r4,r4,255
 401bb8c:	2003741e 	bne	r4,zero,401c960 <___svfiprintf_internal_r+0x11f8>
 401bb90:	9080080c 	andi	r2,r18,32
 401bb94:	10014526 	beq	r2,zero,401c0ac <___svfiprintf_internal_r+0x944>
 401bb98:	dac02317 	ldw	r11,140(sp)
 401bb9c:	d8001d85 	stb	zero,118(sp)
 401bba0:	58c00204 	addi	r3,r11,8
 401bba4:	5f000017 	ldw	fp,0(r11)
 401bba8:	5a400117 	ldw	r9,4(r11)
 401bbac:	8002d916 	blt	r16,zero,401c714 <___svfiprintf_internal_r+0xfac>
 401bbb0:	013fdfc4 	movi	r4,-129
 401bbb4:	e244b03a 	or	r2,fp,r9
 401bbb8:	d8c02315 	stw	r3,140(sp)
 401bbbc:	9124703a 	and	r18,r18,r4
 401bbc0:	0015883a 	mov	r10,zero
 401bbc4:	1000b91e 	bne	r2,zero,401beac <___svfiprintf_internal_r+0x744>
 401bbc8:	8002e61e 	bne	r16,zero,401c764 <___svfiprintf_internal_r+0xffc>
 401bbcc:	0021883a 	mov	r16,zero
 401bbd0:	d8002115 	stw	zero,132(sp)
 401bbd4:	dc401a04 	addi	r17,sp,104
 401bbd8:	d8c02117 	ldw	r3,132(sp)
 401bbdc:	dc002015 	stw	r16,128(sp)
 401bbe0:	80c0010e 	bge	r16,r3,401bbe8 <___svfiprintf_internal_r+0x480>
 401bbe4:	d8c02015 	stw	r3,128(sp)
 401bbe8:	52803fcc 	andi	r10,r10,255
 401bbec:	5280201c 	xori	r10,r10,128
 401bbf0:	52bfe004 	addi	r10,r10,-128
 401bbf4:	50003c26 	beq	r10,zero,401bce8 <___svfiprintf_internal_r+0x580>
 401bbf8:	dac02017 	ldw	r11,128(sp)
 401bbfc:	5ac00044 	addi	r11,r11,1
 401bc00:	dac02015 	stw	r11,128(sp)
 401bc04:	00003806 	br	401bce8 <___svfiprintf_internal_r+0x580>
 401bc08:	01000044 	movi	r4,1
 401bc0c:	01c00ac4 	movi	r7,43
 401bc10:	98c00007 	ldb	r3,0(r19)
 401bc14:	003f2306 	br	401b8a4 <__reset+0xfb01a8a4>
 401bc18:	21003fcc 	andi	r4,r4,255
 401bc1c:	2003481e 	bne	r4,zero,401c940 <___svfiprintf_internal_r+0x11d8>
 401bc20:	9080080c 	andi	r2,r18,32
 401bc24:	10013b26 	beq	r2,zero,401c114 <___svfiprintf_internal_r+0x9ac>
 401bc28:	dac02317 	ldw	r11,140(sp)
 401bc2c:	d8001d85 	stb	zero,118(sp)
 401bc30:	58800204 	addi	r2,r11,8
 401bc34:	5f000017 	ldw	fp,0(r11)
 401bc38:	5a400117 	ldw	r9,4(r11)
 401bc3c:	8002a816 	blt	r16,zero,401c6e0 <___svfiprintf_internal_r+0xf78>
 401bc40:	013fdfc4 	movi	r4,-129
 401bc44:	e246b03a 	or	r3,fp,r9
 401bc48:	d8802315 	stw	r2,140(sp)
 401bc4c:	9124703a 	and	r18,r18,r4
 401bc50:	18013c26 	beq	r3,zero,401c144 <___svfiprintf_internal_r+0x9dc>
 401bc54:	0015883a 	mov	r10,zero
 401bc58:	dc401a04 	addi	r17,sp,104
 401bc5c:	e006d0fa 	srli	r3,fp,3
 401bc60:	4808977a 	slli	r4,r9,29
 401bc64:	4812d0fa 	srli	r9,r9,3
 401bc68:	e70001cc 	andi	fp,fp,7
 401bc6c:	e0800c04 	addi	r2,fp,48
 401bc70:	8c7fffc4 	addi	r17,r17,-1
 401bc74:	20f8b03a 	or	fp,r4,r3
 401bc78:	88800005 	stb	r2,0(r17)
 401bc7c:	e246b03a 	or	r3,fp,r9
 401bc80:	183ff61e 	bne	r3,zero,401bc5c <__reset+0xfb01ac5c>
 401bc84:	90c0004c 	andi	r3,r18,1
 401bc88:	1800a526 	beq	r3,zero,401bf20 <___svfiprintf_internal_r+0x7b8>
 401bc8c:	10803fcc 	andi	r2,r2,255
 401bc90:	1080201c 	xori	r2,r2,128
 401bc94:	10bfe004 	addi	r2,r2,-128
 401bc98:	00c00c04 	movi	r3,48
 401bc9c:	10ffb626 	beq	r2,r3,401bb78 <__reset+0xfb01ab78>
 401bca0:	88ffffc5 	stb	r3,-1(r17)
 401bca4:	d8c01e17 	ldw	r3,120(sp)
 401bca8:	88bfffc4 	addi	r2,r17,-1
 401bcac:	1023883a 	mov	r17,r2
 401bcb0:	1887c83a 	sub	r3,r3,r2
 401bcb4:	d8c02115 	stw	r3,132(sp)
 401bcb8:	003fc706 	br	401bbd8 <__reset+0xfb01abd8>
 401bcbc:	dac02317 	ldw	r11,140(sp)
 401bcc0:	00c00044 	movi	r3,1
 401bcc4:	d8c02015 	stw	r3,128(sp)
 401bcc8:	58800017 	ldw	r2,0(r11)
 401bccc:	5ac00104 	addi	r11,r11,4
 401bcd0:	d8001d85 	stb	zero,118(sp)
 401bcd4:	d8801005 	stb	r2,64(sp)
 401bcd8:	dac02315 	stw	r11,140(sp)
 401bcdc:	d8c02115 	stw	r3,132(sp)
 401bce0:	dc401004 	addi	r17,sp,64
 401bce4:	0021883a 	mov	r16,zero
 401bce8:	90c0008c 	andi	r3,r18,2
 401bcec:	d8c02215 	stw	r3,136(sp)
 401bcf0:	18000326 	beq	r3,zero,401bd00 <___svfiprintf_internal_r+0x598>
 401bcf4:	dac02017 	ldw	r11,128(sp)
 401bcf8:	5ac00084 	addi	r11,r11,2
 401bcfc:	dac02015 	stw	r11,128(sp)
 401bd00:	90c0210c 	andi	r3,r18,132
 401bd04:	d8c02615 	stw	r3,152(sp)
 401bd08:	1801131e 	bne	r3,zero,401c158 <___svfiprintf_internal_r+0x9f0>
 401bd0c:	dac02417 	ldw	r11,144(sp)
 401bd10:	d8c02017 	ldw	r3,128(sp)
 401bd14:	58f9c83a 	sub	fp,r11,r3
 401bd18:	07010f0e 	bge	zero,fp,401c158 <___svfiprintf_internal_r+0x9f0>
 401bd1c:	02400404 	movi	r9,16
 401bd20:	d8c01c17 	ldw	r3,112(sp)
 401bd24:	d8801b17 	ldw	r2,108(sp)
 401bd28:	4f02d60e 	bge	r9,fp,401c884 <___svfiprintf_internal_r+0x111c>
 401bd2c:	01410234 	movhi	r5,1032
 401bd30:	29480504 	addi	r5,r5,8212
 401bd34:	d9402815 	stw	r5,160(sp)
 401bd38:	028001c4 	movi	r10,7
 401bd3c:	00000306 	br	401bd4c <___svfiprintf_internal_r+0x5e4>
 401bd40:	e73ffc04 	addi	fp,fp,-16
 401bd44:	42000204 	addi	r8,r8,8
 401bd48:	4f00150e 	bge	r9,fp,401bda0 <___svfiprintf_internal_r+0x638>
 401bd4c:	18c00404 	addi	r3,r3,16
 401bd50:	10800044 	addi	r2,r2,1
 401bd54:	45800015 	stw	r22,0(r8)
 401bd58:	42400115 	stw	r9,4(r8)
 401bd5c:	d8c01c15 	stw	r3,112(sp)
 401bd60:	d8801b15 	stw	r2,108(sp)
 401bd64:	50bff60e 	bge	r10,r2,401bd40 <__reset+0xfb01ad40>
 401bd68:	d9801a04 	addi	r6,sp,104
 401bd6c:	b80b883a 	mov	r5,r23
 401bd70:	a809883a 	mov	r4,r21
 401bd74:	da402c15 	stw	r9,176(sp)
 401bd78:	da802d15 	stw	r10,180(sp)
 401bd7c:	401b5980 	call	401b598 <__ssprint_r>
 401bd80:	da402c17 	ldw	r9,176(sp)
 401bd84:	da802d17 	ldw	r10,180(sp)
 401bd88:	1001851e 	bne	r2,zero,401c3a0 <___svfiprintf_internal_r+0xc38>
 401bd8c:	e73ffc04 	addi	fp,fp,-16
 401bd90:	d8c01c17 	ldw	r3,112(sp)
 401bd94:	d8801b17 	ldw	r2,108(sp)
 401bd98:	d811883a 	mov	r8,sp
 401bd9c:	4f3feb16 	blt	r9,fp,401bd4c <__reset+0xfb01ad4c>
 401bda0:	dac02817 	ldw	r11,160(sp)
 401bda4:	e0c7883a 	add	r3,fp,r3
 401bda8:	10800044 	addi	r2,r2,1
 401bdac:	42c00015 	stw	r11,0(r8)
 401bdb0:	47000115 	stw	fp,4(r8)
 401bdb4:	d8c01c15 	stw	r3,112(sp)
 401bdb8:	d8801b15 	stw	r2,108(sp)
 401bdbc:	010001c4 	movi	r4,7
 401bdc0:	2081ee16 	blt	r4,r2,401c57c <___svfiprintf_internal_r+0xe14>
 401bdc4:	42000204 	addi	r8,r8,8
 401bdc8:	0000e506 	br	401c160 <___svfiprintf_internal_r+0x9f8>
 401bdcc:	21003fcc 	andi	r4,r4,255
 401bdd0:	2002dd1e 	bne	r4,zero,401c948 <___svfiprintf_internal_r+0x11e0>
 401bdd4:	00810234 	movhi	r2,1032
 401bdd8:	10879404 	addi	r2,r2,7760
 401bddc:	d8802915 	stw	r2,164(sp)
 401bde0:	9080080c 	andi	r2,r18,32
 401bde4:	103f461e 	bne	r2,zero,401bb00 <__reset+0xfb01ab00>
 401bde8:	9080040c 	andi	r2,r18,16
 401bdec:	10022e1e 	bne	r2,zero,401c6a8 <___svfiprintf_internal_r+0xf40>
 401bdf0:	9080100c 	andi	r2,r18,64
 401bdf4:	dac02317 	ldw	r11,140(sp)
 401bdf8:	10027326 	beq	r2,zero,401c7c8 <___svfiprintf_internal_r+0x1060>
 401bdfc:	5f00000b 	ldhu	fp,0(r11)
 401be00:	5ac00104 	addi	r11,r11,4
 401be04:	0013883a 	mov	r9,zero
 401be08:	dac02315 	stw	r11,140(sp)
 401be0c:	003f4106 	br	401bb14 <__reset+0xfb01ab14>
 401be10:	21003fcc 	andi	r4,r4,255
 401be14:	2002e11e 	bne	r4,zero,401c99c <___svfiprintf_internal_r+0x1234>
 401be18:	9080080c 	andi	r2,r18,32
 401be1c:	1002011e 	bne	r2,zero,401c624 <___svfiprintf_internal_r+0xebc>
 401be20:	9080040c 	andi	r2,r18,16
 401be24:	10023e1e 	bne	r2,zero,401c720 <___svfiprintf_internal_r+0xfb8>
 401be28:	9480100c 	andi	r18,r18,64
 401be2c:	90023c26 	beq	r18,zero,401c720 <___svfiprintf_internal_r+0xfb8>
 401be30:	dac02317 	ldw	r11,140(sp)
 401be34:	58800017 	ldw	r2,0(r11)
 401be38:	5ac00104 	addi	r11,r11,4
 401be3c:	dac02315 	stw	r11,140(sp)
 401be40:	dac02517 	ldw	r11,148(sp)
 401be44:	12c0000d 	sth	r11,0(r2)
 401be48:	003e6e06 	br	401b804 <__reset+0xfb01a804>
 401be4c:	98c00007 	ldb	r3,0(r19)
 401be50:	1a422926 	beq	r3,r9,401c6f8 <___svfiprintf_internal_r+0xf90>
 401be54:	94800414 	ori	r18,r18,16
 401be58:	003e9206 	br	401b8a4 <__reset+0xfb01a8a4>
 401be5c:	94801014 	ori	r18,r18,64
 401be60:	98c00007 	ldb	r3,0(r19)
 401be64:	003e8f06 	br	401b8a4 <__reset+0xfb01a8a4>
 401be68:	21003fcc 	andi	r4,r4,255
 401be6c:	2002c71e 	bne	r4,zero,401c98c <___svfiprintf_internal_r+0x1224>
 401be70:	9080080c 	andi	r2,r18,32
 401be74:	10004926 	beq	r2,zero,401bf9c <___svfiprintf_internal_r+0x834>
 401be78:	dac02317 	ldw	r11,140(sp)
 401be7c:	58800117 	ldw	r2,4(r11)
 401be80:	5f000017 	ldw	fp,0(r11)
 401be84:	5ac00204 	addi	r11,r11,8
 401be88:	dac02315 	stw	r11,140(sp)
 401be8c:	1013883a 	mov	r9,r2
 401be90:	10004b16 	blt	r2,zero,401bfc0 <___svfiprintf_internal_r+0x858>
 401be94:	da801d83 	ldbu	r10,118(sp)
 401be98:	8001cb16 	blt	r16,zero,401c5c8 <___svfiprintf_internal_r+0xe60>
 401be9c:	00ffdfc4 	movi	r3,-129
 401bea0:	e244b03a 	or	r2,fp,r9
 401bea4:	90e4703a 	and	r18,r18,r3
 401bea8:	103f4726 	beq	r2,zero,401bbc8 <__reset+0xfb01abc8>
 401beac:	48008c26 	beq	r9,zero,401c0e0 <___svfiprintf_internal_r+0x978>
 401beb0:	dc802015 	stw	r18,128(sp)
 401beb4:	dc002115 	stw	r16,132(sp)
 401beb8:	dc401a04 	addi	r17,sp,104
 401bebc:	e021883a 	mov	r16,fp
 401bec0:	da002215 	stw	r8,136(sp)
 401bec4:	5039883a 	mov	fp,r10
 401bec8:	4825883a 	mov	r18,r9
 401becc:	8009883a 	mov	r4,r16
 401bed0:	900b883a 	mov	r5,r18
 401bed4:	01800284 	movi	r6,10
 401bed8:	000f883a 	mov	r7,zero
 401bedc:	401ee980 	call	401ee98 <__umoddi3>
 401bee0:	10800c04 	addi	r2,r2,48
 401bee4:	8c7fffc4 	addi	r17,r17,-1
 401bee8:	8009883a 	mov	r4,r16
 401beec:	900b883a 	mov	r5,r18
 401bef0:	88800005 	stb	r2,0(r17)
 401bef4:	01800284 	movi	r6,10
 401bef8:	000f883a 	mov	r7,zero
 401befc:	401e9200 	call	401e920 <__udivdi3>
 401bf00:	1021883a 	mov	r16,r2
 401bf04:	10c4b03a 	or	r2,r2,r3
 401bf08:	1825883a 	mov	r18,r3
 401bf0c:	103fef1e 	bne	r2,zero,401becc <__reset+0xfb01aecc>
 401bf10:	dc802017 	ldw	r18,128(sp)
 401bf14:	dc002117 	ldw	r16,132(sp)
 401bf18:	da002217 	ldw	r8,136(sp)
 401bf1c:	e015883a 	mov	r10,fp
 401bf20:	d8c01e17 	ldw	r3,120(sp)
 401bf24:	1c47c83a 	sub	r3,r3,r17
 401bf28:	d8c02115 	stw	r3,132(sp)
 401bf2c:	003f2a06 	br	401bbd8 <__reset+0xfb01abd8>
 401bf30:	dac02317 	ldw	r11,140(sp)
 401bf34:	d8001d85 	stb	zero,118(sp)
 401bf38:	5c400017 	ldw	r17,0(r11)
 401bf3c:	5f000104 	addi	fp,r11,4
 401bf40:	88022f26 	beq	r17,zero,401c800 <___svfiprintf_internal_r+0x1098>
 401bf44:	80022516 	blt	r16,zero,401c7dc <___svfiprintf_internal_r+0x1074>
 401bf48:	800d883a 	mov	r6,r16
 401bf4c:	000b883a 	mov	r5,zero
 401bf50:	8809883a 	mov	r4,r17
 401bf54:	da002c15 	stw	r8,176(sp)
 401bf58:	4019be00 	call	4019be0 <memchr>
 401bf5c:	da002c17 	ldw	r8,176(sp)
 401bf60:	10026426 	beq	r2,zero,401c8f4 <___svfiprintf_internal_r+0x118c>
 401bf64:	1445c83a 	sub	r2,r2,r17
 401bf68:	d8802115 	stw	r2,132(sp)
 401bf6c:	da801d83 	ldbu	r10,118(sp)
 401bf70:	df002315 	stw	fp,140(sp)
 401bf74:	0021883a 	mov	r16,zero
 401bf78:	003f1706 	br	401bbd8 <__reset+0xfb01abd8>
 401bf7c:	94800814 	ori	r18,r18,32
 401bf80:	98c00007 	ldb	r3,0(r19)
 401bf84:	003e4706 	br	401b8a4 <__reset+0xfb01a8a4>
 401bf88:	21003fcc 	andi	r4,r4,255
 401bf8c:	2002701e 	bne	r4,zero,401c950 <___svfiprintf_internal_r+0x11e8>
 401bf90:	94800414 	ori	r18,r18,16
 401bf94:	9080080c 	andi	r2,r18,32
 401bf98:	103fb71e 	bne	r2,zero,401be78 <__reset+0xfb01ae78>
 401bf9c:	9080040c 	andi	r2,r18,16
 401bfa0:	1001ab26 	beq	r2,zero,401c650 <___svfiprintf_internal_r+0xee8>
 401bfa4:	dac02317 	ldw	r11,140(sp)
 401bfa8:	5f000017 	ldw	fp,0(r11)
 401bfac:	5ac00104 	addi	r11,r11,4
 401bfb0:	dac02315 	stw	r11,140(sp)
 401bfb4:	e013d7fa 	srai	r9,fp,31
 401bfb8:	4805883a 	mov	r2,r9
 401bfbc:	103fb50e 	bge	r2,zero,401be94 <__reset+0xfb01ae94>
 401bfc0:	0739c83a 	sub	fp,zero,fp
 401bfc4:	02800b44 	movi	r10,45
 401bfc8:	e004c03a 	cmpne	r2,fp,zero
 401bfcc:	0253c83a 	sub	r9,zero,r9
 401bfd0:	da801d85 	stb	r10,118(sp)
 401bfd4:	4893c83a 	sub	r9,r9,r2
 401bfd8:	80023016 	blt	r16,zero,401c89c <___svfiprintf_internal_r+0x1134>
 401bfdc:	00bfdfc4 	movi	r2,-129
 401bfe0:	90a4703a 	and	r18,r18,r2
 401bfe4:	483fb21e 	bne	r9,zero,401beb0 <__reset+0xfb01aeb0>
 401bfe8:	00003d06 	br	401c0e0 <___svfiprintf_internal_r+0x978>
 401bfec:	9817883a 	mov	r11,r19
 401bff0:	d8002415 	stw	zero,144(sp)
 401bff4:	18bff404 	addi	r2,r3,-48
 401bff8:	0019883a 	mov	r12,zero
 401bffc:	58c00007 	ldb	r3,0(r11)
 401c000:	630002a4 	muli	r12,r12,10
 401c004:	9cc00044 	addi	r19,r19,1
 401c008:	9817883a 	mov	r11,r19
 401c00c:	1319883a 	add	r12,r2,r12
 401c010:	18bff404 	addi	r2,r3,-48
 401c014:	30bff92e 	bgeu	r6,r2,401bffc <__reset+0xfb01affc>
 401c018:	db002415 	stw	r12,144(sp)
 401c01c:	18bff804 	addi	r2,r3,-32
 401c020:	28be232e 	bgeu	r5,r2,401b8b0 <__reset+0xfb01a8b0>
 401c024:	21003fcc 	andi	r4,r4,255
 401c028:	20024b1e 	bne	r4,zero,401c958 <___svfiprintf_internal_r+0x11f0>
 401c02c:	1800d626 	beq	r3,zero,401c388 <___svfiprintf_internal_r+0xc20>
 401c030:	02c00044 	movi	r11,1
 401c034:	dac02015 	stw	r11,128(sp)
 401c038:	d8c01005 	stb	r3,64(sp)
 401c03c:	d8001d85 	stb	zero,118(sp)
 401c040:	dac02115 	stw	r11,132(sp)
 401c044:	dc401004 	addi	r17,sp,64
 401c048:	003f2606 	br	401bce4 <__reset+0xfb01ace4>
 401c04c:	94802014 	ori	r18,r18,128
 401c050:	98c00007 	ldb	r3,0(r19)
 401c054:	003e1306 	br	401b8a4 <__reset+0xfb01a8a4>
 401c058:	98c00007 	ldb	r3,0(r19)
 401c05c:	9ac00044 	addi	r11,r19,1
 401c060:	1a822b26 	beq	r3,r10,401c910 <___svfiprintf_internal_r+0x11a8>
 401c064:	18bff404 	addi	r2,r3,-48
 401c068:	0021883a 	mov	r16,zero
 401c06c:	30821e36 	bltu	r6,r2,401c8e8 <___svfiprintf_internal_r+0x1180>
 401c070:	58c00007 	ldb	r3,0(r11)
 401c074:	840002a4 	muli	r16,r16,10
 401c078:	5cc00044 	addi	r19,r11,1
 401c07c:	9817883a 	mov	r11,r19
 401c080:	80a1883a 	add	r16,r16,r2
 401c084:	18bff404 	addi	r2,r3,-48
 401c088:	30bff92e 	bgeu	r6,r2,401c070 <__reset+0xfb01b070>
 401c08c:	803e060e 	bge	r16,zero,401b8a8 <__reset+0xfb01a8a8>
 401c090:	043fffc4 	movi	r16,-1
 401c094:	003e0406 	br	401b8a8 <__reset+0xfb01a8a8>
 401c098:	21003fcc 	andi	r4,r4,255
 401c09c:	2002371e 	bne	r4,zero,401c97c <___svfiprintf_internal_r+0x1214>
 401c0a0:	94800414 	ori	r18,r18,16
 401c0a4:	9080080c 	andi	r2,r18,32
 401c0a8:	103ebb1e 	bne	r2,zero,401bb98 <__reset+0xfb01ab98>
 401c0ac:	9080040c 	andi	r2,r18,16
 401c0b0:	10013b26 	beq	r2,zero,401c5a0 <___svfiprintf_internal_r+0xe38>
 401c0b4:	dac02317 	ldw	r11,140(sp)
 401c0b8:	d8001d85 	stb	zero,118(sp)
 401c0bc:	0013883a 	mov	r9,zero
 401c0c0:	58800104 	addi	r2,r11,4
 401c0c4:	5f000017 	ldw	fp,0(r11)
 401c0c8:	80013d16 	blt	r16,zero,401c5c0 <___svfiprintf_internal_r+0xe58>
 401c0cc:	00ffdfc4 	movi	r3,-129
 401c0d0:	d8802315 	stw	r2,140(sp)
 401c0d4:	90e4703a 	and	r18,r18,r3
 401c0d8:	0015883a 	mov	r10,zero
 401c0dc:	e03eba26 	beq	fp,zero,401bbc8 <__reset+0xfb01abc8>
 401c0e0:	00800244 	movi	r2,9
 401c0e4:	173f7236 	bltu	r2,fp,401beb0 <__reset+0xfb01aeb0>
 401c0e8:	dac02b17 	ldw	r11,172(sp)
 401c0ec:	e7000c04 	addi	fp,fp,48
 401c0f0:	df0019c5 	stb	fp,103(sp)
 401c0f4:	dac02115 	stw	r11,132(sp)
 401c0f8:	dc4019c4 	addi	r17,sp,103
 401c0fc:	003eb606 	br	401bbd8 <__reset+0xfb01abd8>
 401c100:	21003fcc 	andi	r4,r4,255
 401c104:	20021f1e 	bne	r4,zero,401c984 <___svfiprintf_internal_r+0x121c>
 401c108:	94800414 	ori	r18,r18,16
 401c10c:	9080080c 	andi	r2,r18,32
 401c110:	103ec51e 	bne	r2,zero,401bc28 <__reset+0xfb01ac28>
 401c114:	9080040c 	andi	r2,r18,16
 401c118:	10016926 	beq	r2,zero,401c6c0 <___svfiprintf_internal_r+0xf58>
 401c11c:	dac02317 	ldw	r11,140(sp)
 401c120:	d8001d85 	stb	zero,118(sp)
 401c124:	0013883a 	mov	r9,zero
 401c128:	58800104 	addi	r2,r11,4
 401c12c:	5f000017 	ldw	fp,0(r11)
 401c130:	80016b16 	blt	r16,zero,401c6e0 <___svfiprintf_internal_r+0xf78>
 401c134:	00ffdfc4 	movi	r3,-129
 401c138:	d8802315 	stw	r2,140(sp)
 401c13c:	90e4703a 	and	r18,r18,r3
 401c140:	e03ec41e 	bne	fp,zero,401bc54 <__reset+0xfb01ac54>
 401c144:	0015883a 	mov	r10,zero
 401c148:	8001c226 	beq	r16,zero,401c854 <___svfiprintf_internal_r+0x10ec>
 401c14c:	0039883a 	mov	fp,zero
 401c150:	0013883a 	mov	r9,zero
 401c154:	003ec006 	br	401bc58 <__reset+0xfb01ac58>
 401c158:	d8c01c17 	ldw	r3,112(sp)
 401c15c:	d8801b17 	ldw	r2,108(sp)
 401c160:	d9001d87 	ldb	r4,118(sp)
 401c164:	20000b26 	beq	r4,zero,401c194 <___svfiprintf_internal_r+0xa2c>
 401c168:	d9001d84 	addi	r4,sp,118
 401c16c:	18c00044 	addi	r3,r3,1
 401c170:	10800044 	addi	r2,r2,1
 401c174:	41000015 	stw	r4,0(r8)
 401c178:	01000044 	movi	r4,1
 401c17c:	41000115 	stw	r4,4(r8)
 401c180:	d8c01c15 	stw	r3,112(sp)
 401c184:	d8801b15 	stw	r2,108(sp)
 401c188:	010001c4 	movi	r4,7
 401c18c:	2080e116 	blt	r4,r2,401c514 <___svfiprintf_internal_r+0xdac>
 401c190:	42000204 	addi	r8,r8,8
 401c194:	dac02217 	ldw	r11,136(sp)
 401c198:	58000b26 	beq	r11,zero,401c1c8 <___svfiprintf_internal_r+0xa60>
 401c19c:	d9001d04 	addi	r4,sp,116
 401c1a0:	18c00084 	addi	r3,r3,2
 401c1a4:	10800044 	addi	r2,r2,1
 401c1a8:	41000015 	stw	r4,0(r8)
 401c1ac:	01000084 	movi	r4,2
 401c1b0:	41000115 	stw	r4,4(r8)
 401c1b4:	d8c01c15 	stw	r3,112(sp)
 401c1b8:	d8801b15 	stw	r2,108(sp)
 401c1bc:	010001c4 	movi	r4,7
 401c1c0:	2080dd16 	blt	r4,r2,401c538 <___svfiprintf_internal_r+0xdd0>
 401c1c4:	42000204 	addi	r8,r8,8
 401c1c8:	dac02617 	ldw	r11,152(sp)
 401c1cc:	01002004 	movi	r4,128
 401c1d0:	59008426 	beq	r11,r4,401c3e4 <___svfiprintf_internal_r+0xc7c>
 401c1d4:	dac02117 	ldw	r11,132(sp)
 401c1d8:	82e1c83a 	sub	r16,r16,r11
 401c1dc:	0400270e 	bge	zero,r16,401c27c <___svfiprintf_internal_r+0xb14>
 401c1e0:	01c00404 	movi	r7,16
 401c1e4:	3c016a0e 	bge	r7,r16,401c790 <___svfiprintf_internal_r+0x1028>
 401c1e8:	01410234 	movhi	r5,1032
 401c1ec:	29480104 	addi	r5,r5,8196
 401c1f0:	d9402215 	stw	r5,136(sp)
 401c1f4:	070001c4 	movi	fp,7
 401c1f8:	00000306 	br	401c208 <___svfiprintf_internal_r+0xaa0>
 401c1fc:	843ffc04 	addi	r16,r16,-16
 401c200:	42000204 	addi	r8,r8,8
 401c204:	3c00130e 	bge	r7,r16,401c254 <___svfiprintf_internal_r+0xaec>
 401c208:	18c00404 	addi	r3,r3,16
 401c20c:	10800044 	addi	r2,r2,1
 401c210:	45000015 	stw	r20,0(r8)
 401c214:	41c00115 	stw	r7,4(r8)
 401c218:	d8c01c15 	stw	r3,112(sp)
 401c21c:	d8801b15 	stw	r2,108(sp)
 401c220:	e0bff60e 	bge	fp,r2,401c1fc <__reset+0xfb01b1fc>
 401c224:	d9801a04 	addi	r6,sp,104
 401c228:	b80b883a 	mov	r5,r23
 401c22c:	a809883a 	mov	r4,r21
 401c230:	d9c02c15 	stw	r7,176(sp)
 401c234:	401b5980 	call	401b598 <__ssprint_r>
 401c238:	d9c02c17 	ldw	r7,176(sp)
 401c23c:	1000581e 	bne	r2,zero,401c3a0 <___svfiprintf_internal_r+0xc38>
 401c240:	843ffc04 	addi	r16,r16,-16
 401c244:	d8c01c17 	ldw	r3,112(sp)
 401c248:	d8801b17 	ldw	r2,108(sp)
 401c24c:	d811883a 	mov	r8,sp
 401c250:	3c3fed16 	blt	r7,r16,401c208 <__reset+0xfb01b208>
 401c254:	dac02217 	ldw	r11,136(sp)
 401c258:	1c07883a 	add	r3,r3,r16
 401c25c:	10800044 	addi	r2,r2,1
 401c260:	42c00015 	stw	r11,0(r8)
 401c264:	44000115 	stw	r16,4(r8)
 401c268:	d8c01c15 	stw	r3,112(sp)
 401c26c:	d8801b15 	stw	r2,108(sp)
 401c270:	010001c4 	movi	r4,7
 401c274:	20809e16 	blt	r4,r2,401c4f0 <___svfiprintf_internal_r+0xd88>
 401c278:	42000204 	addi	r8,r8,8
 401c27c:	dac02117 	ldw	r11,132(sp)
 401c280:	10800044 	addi	r2,r2,1
 401c284:	44400015 	stw	r17,0(r8)
 401c288:	58c7883a 	add	r3,r11,r3
 401c28c:	42c00115 	stw	r11,4(r8)
 401c290:	d8c01c15 	stw	r3,112(sp)
 401c294:	d8801b15 	stw	r2,108(sp)
 401c298:	010001c4 	movi	r4,7
 401c29c:	20807f16 	blt	r4,r2,401c49c <___svfiprintf_internal_r+0xd34>
 401c2a0:	42000204 	addi	r8,r8,8
 401c2a4:	9480010c 	andi	r18,r18,4
 401c2a8:	90002926 	beq	r18,zero,401c350 <___svfiprintf_internal_r+0xbe8>
 401c2ac:	dac02417 	ldw	r11,144(sp)
 401c2b0:	d8802017 	ldw	r2,128(sp)
 401c2b4:	58a1c83a 	sub	r16,r11,r2
 401c2b8:	0400250e 	bge	zero,r16,401c350 <___svfiprintf_internal_r+0xbe8>
 401c2bc:	04400404 	movi	r17,16
 401c2c0:	d8801b17 	ldw	r2,108(sp)
 401c2c4:	8c017c0e 	bge	r17,r16,401c8b8 <___svfiprintf_internal_r+0x1150>
 401c2c8:	01410234 	movhi	r5,1032
 401c2cc:	29480504 	addi	r5,r5,8212
 401c2d0:	d9402815 	stw	r5,160(sp)
 401c2d4:	048001c4 	movi	r18,7
 401c2d8:	00000306 	br	401c2e8 <___svfiprintf_internal_r+0xb80>
 401c2dc:	843ffc04 	addi	r16,r16,-16
 401c2e0:	42000204 	addi	r8,r8,8
 401c2e4:	8c00110e 	bge	r17,r16,401c32c <___svfiprintf_internal_r+0xbc4>
 401c2e8:	18c00404 	addi	r3,r3,16
 401c2ec:	10800044 	addi	r2,r2,1
 401c2f0:	45800015 	stw	r22,0(r8)
 401c2f4:	44400115 	stw	r17,4(r8)
 401c2f8:	d8c01c15 	stw	r3,112(sp)
 401c2fc:	d8801b15 	stw	r2,108(sp)
 401c300:	90bff60e 	bge	r18,r2,401c2dc <__reset+0xfb01b2dc>
 401c304:	d9801a04 	addi	r6,sp,104
 401c308:	b80b883a 	mov	r5,r23
 401c30c:	a809883a 	mov	r4,r21
 401c310:	401b5980 	call	401b598 <__ssprint_r>
 401c314:	1000221e 	bne	r2,zero,401c3a0 <___svfiprintf_internal_r+0xc38>
 401c318:	843ffc04 	addi	r16,r16,-16
 401c31c:	d8c01c17 	ldw	r3,112(sp)
 401c320:	d8801b17 	ldw	r2,108(sp)
 401c324:	d811883a 	mov	r8,sp
 401c328:	8c3fef16 	blt	r17,r16,401c2e8 <__reset+0xfb01b2e8>
 401c32c:	dac02817 	ldw	r11,160(sp)
 401c330:	1c07883a 	add	r3,r3,r16
 401c334:	10800044 	addi	r2,r2,1
 401c338:	42c00015 	stw	r11,0(r8)
 401c33c:	44000115 	stw	r16,4(r8)
 401c340:	d8c01c15 	stw	r3,112(sp)
 401c344:	d8801b15 	stw	r2,108(sp)
 401c348:	010001c4 	movi	r4,7
 401c34c:	2080aa16 	blt	r4,r2,401c5f8 <___svfiprintf_internal_r+0xe90>
 401c350:	d8802417 	ldw	r2,144(sp)
 401c354:	dac02017 	ldw	r11,128(sp)
 401c358:	12c0010e 	bge	r2,r11,401c360 <___svfiprintf_internal_r+0xbf8>
 401c35c:	5805883a 	mov	r2,r11
 401c360:	dac02517 	ldw	r11,148(sp)
 401c364:	5897883a 	add	r11,r11,r2
 401c368:	dac02515 	stw	r11,148(sp)
 401c36c:	1800531e 	bne	r3,zero,401c4bc <___svfiprintf_internal_r+0xd54>
 401c370:	98800007 	ldb	r2,0(r19)
 401c374:	d8001b15 	stw	zero,108(sp)
 401c378:	d811883a 	mov	r8,sp
 401c37c:	103d231e 	bne	r2,zero,401b80c <__reset+0xfb01a80c>
 401c380:	9823883a 	mov	r17,r19
 401c384:	003d3906 	br	401b86c <__reset+0xfb01a86c>
 401c388:	d8801c17 	ldw	r2,112(sp)
 401c38c:	10000426 	beq	r2,zero,401c3a0 <___svfiprintf_internal_r+0xc38>
 401c390:	d9402717 	ldw	r5,156(sp)
 401c394:	d9002a17 	ldw	r4,168(sp)
 401c398:	d9801a04 	addi	r6,sp,104
 401c39c:	401b5980 	call	401b598 <__ssprint_r>
 401c3a0:	dac02717 	ldw	r11,156(sp)
 401c3a4:	d8802517 	ldw	r2,148(sp)
 401c3a8:	58c0030b 	ldhu	r3,12(r11)
 401c3ac:	18c0100c 	andi	r3,r3,64
 401c3b0:	1801381e 	bne	r3,zero,401c894 <___svfiprintf_internal_r+0x112c>
 401c3b4:	dfc03717 	ldw	ra,220(sp)
 401c3b8:	df003617 	ldw	fp,216(sp)
 401c3bc:	ddc03517 	ldw	r23,212(sp)
 401c3c0:	dd803417 	ldw	r22,208(sp)
 401c3c4:	dd403317 	ldw	r21,204(sp)
 401c3c8:	dd003217 	ldw	r20,200(sp)
 401c3cc:	dcc03117 	ldw	r19,196(sp)
 401c3d0:	dc803017 	ldw	r18,192(sp)
 401c3d4:	dc402f17 	ldw	r17,188(sp)
 401c3d8:	dc002e17 	ldw	r16,184(sp)
 401c3dc:	dec03804 	addi	sp,sp,224
 401c3e0:	f800283a 	ret
 401c3e4:	dac02417 	ldw	r11,144(sp)
 401c3e8:	d9002017 	ldw	r4,128(sp)
 401c3ec:	5939c83a 	sub	fp,r11,r4
 401c3f0:	073f780e 	bge	zero,fp,401c1d4 <__reset+0xfb01b1d4>
 401c3f4:	02400404 	movi	r9,16
 401c3f8:	4f01370e 	bge	r9,fp,401c8d8 <___svfiprintf_internal_r+0x1170>
 401c3fc:	02c10234 	movhi	r11,1032
 401c400:	5ac80104 	addi	r11,r11,8196
 401c404:	dac02215 	stw	r11,136(sp)
 401c408:	028001c4 	movi	r10,7
 401c40c:	00000306 	br	401c41c <___svfiprintf_internal_r+0xcb4>
 401c410:	e73ffc04 	addi	fp,fp,-16
 401c414:	42000204 	addi	r8,r8,8
 401c418:	4f00150e 	bge	r9,fp,401c470 <___svfiprintf_internal_r+0xd08>
 401c41c:	18c00404 	addi	r3,r3,16
 401c420:	10800044 	addi	r2,r2,1
 401c424:	45000015 	stw	r20,0(r8)
 401c428:	42400115 	stw	r9,4(r8)
 401c42c:	d8c01c15 	stw	r3,112(sp)
 401c430:	d8801b15 	stw	r2,108(sp)
 401c434:	50bff60e 	bge	r10,r2,401c410 <__reset+0xfb01b410>
 401c438:	d9801a04 	addi	r6,sp,104
 401c43c:	b80b883a 	mov	r5,r23
 401c440:	a809883a 	mov	r4,r21
 401c444:	da402c15 	stw	r9,176(sp)
 401c448:	da802d15 	stw	r10,180(sp)
 401c44c:	401b5980 	call	401b598 <__ssprint_r>
 401c450:	da402c17 	ldw	r9,176(sp)
 401c454:	da802d17 	ldw	r10,180(sp)
 401c458:	103fd11e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c45c:	e73ffc04 	addi	fp,fp,-16
 401c460:	d8c01c17 	ldw	r3,112(sp)
 401c464:	d8801b17 	ldw	r2,108(sp)
 401c468:	d811883a 	mov	r8,sp
 401c46c:	4f3feb16 	blt	r9,fp,401c41c <__reset+0xfb01b41c>
 401c470:	dac02217 	ldw	r11,136(sp)
 401c474:	1f07883a 	add	r3,r3,fp
 401c478:	10800044 	addi	r2,r2,1
 401c47c:	42c00015 	stw	r11,0(r8)
 401c480:	47000115 	stw	fp,4(r8)
 401c484:	d8c01c15 	stw	r3,112(sp)
 401c488:	d8801b15 	stw	r2,108(sp)
 401c48c:	010001c4 	movi	r4,7
 401c490:	2080b616 	blt	r4,r2,401c76c <___svfiprintf_internal_r+0x1004>
 401c494:	42000204 	addi	r8,r8,8
 401c498:	003f4e06 	br	401c1d4 <__reset+0xfb01b1d4>
 401c49c:	d9801a04 	addi	r6,sp,104
 401c4a0:	b80b883a 	mov	r5,r23
 401c4a4:	a809883a 	mov	r4,r21
 401c4a8:	401b5980 	call	401b598 <__ssprint_r>
 401c4ac:	103fbc1e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c4b0:	d8c01c17 	ldw	r3,112(sp)
 401c4b4:	d811883a 	mov	r8,sp
 401c4b8:	003f7a06 	br	401c2a4 <__reset+0xfb01b2a4>
 401c4bc:	d9801a04 	addi	r6,sp,104
 401c4c0:	b80b883a 	mov	r5,r23
 401c4c4:	a809883a 	mov	r4,r21
 401c4c8:	401b5980 	call	401b598 <__ssprint_r>
 401c4cc:	103fa826 	beq	r2,zero,401c370 <__reset+0xfb01b370>
 401c4d0:	003fb306 	br	401c3a0 <__reset+0xfb01b3a0>
 401c4d4:	d9801a04 	addi	r6,sp,104
 401c4d8:	b80b883a 	mov	r5,r23
 401c4dc:	a809883a 	mov	r4,r21
 401c4e0:	401b5980 	call	401b598 <__ssprint_r>
 401c4e4:	103fae1e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c4e8:	d811883a 	mov	r8,sp
 401c4ec:	003cdc06 	br	401b860 <__reset+0xfb01a860>
 401c4f0:	d9801a04 	addi	r6,sp,104
 401c4f4:	b80b883a 	mov	r5,r23
 401c4f8:	a809883a 	mov	r4,r21
 401c4fc:	401b5980 	call	401b598 <__ssprint_r>
 401c500:	103fa71e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c504:	d8c01c17 	ldw	r3,112(sp)
 401c508:	d8801b17 	ldw	r2,108(sp)
 401c50c:	d811883a 	mov	r8,sp
 401c510:	003f5a06 	br	401c27c <__reset+0xfb01b27c>
 401c514:	d9801a04 	addi	r6,sp,104
 401c518:	b80b883a 	mov	r5,r23
 401c51c:	a809883a 	mov	r4,r21
 401c520:	401b5980 	call	401b598 <__ssprint_r>
 401c524:	103f9e1e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c528:	d8c01c17 	ldw	r3,112(sp)
 401c52c:	d8801b17 	ldw	r2,108(sp)
 401c530:	d811883a 	mov	r8,sp
 401c534:	003f1706 	br	401c194 <__reset+0xfb01b194>
 401c538:	d9801a04 	addi	r6,sp,104
 401c53c:	b80b883a 	mov	r5,r23
 401c540:	a809883a 	mov	r4,r21
 401c544:	401b5980 	call	401b598 <__ssprint_r>
 401c548:	103f951e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c54c:	d8c01c17 	ldw	r3,112(sp)
 401c550:	d8801b17 	ldw	r2,108(sp)
 401c554:	d811883a 	mov	r8,sp
 401c558:	003f1b06 	br	401c1c8 <__reset+0xfb01b1c8>
 401c55c:	d8001d85 	stb	zero,118(sp)
 401c560:	80007b16 	blt	r16,zero,401c750 <___svfiprintf_internal_r+0xfe8>
 401c564:	00ffdfc4 	movi	r3,-129
 401c568:	e244b03a 	or	r2,fp,r9
 401c56c:	90e4703a 	and	r18,r18,r3
 401c570:	103d7026 	beq	r2,zero,401bb34 <__reset+0xfb01ab34>
 401c574:	0015883a 	mov	r10,zero
 401c578:	003d7206 	br	401bb44 <__reset+0xfb01ab44>
 401c57c:	d9801a04 	addi	r6,sp,104
 401c580:	b80b883a 	mov	r5,r23
 401c584:	a809883a 	mov	r4,r21
 401c588:	401b5980 	call	401b598 <__ssprint_r>
 401c58c:	103f841e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c590:	d8c01c17 	ldw	r3,112(sp)
 401c594:	d8801b17 	ldw	r2,108(sp)
 401c598:	d811883a 	mov	r8,sp
 401c59c:	003ef006 	br	401c160 <__reset+0xfb01b160>
 401c5a0:	9080100c 	andi	r2,r18,64
 401c5a4:	d8001d85 	stb	zero,118(sp)
 401c5a8:	dac02317 	ldw	r11,140(sp)
 401c5ac:	10008126 	beq	r2,zero,401c7b4 <___svfiprintf_internal_r+0x104c>
 401c5b0:	58800104 	addi	r2,r11,4
 401c5b4:	5f00000b 	ldhu	fp,0(r11)
 401c5b8:	0013883a 	mov	r9,zero
 401c5bc:	803ec30e 	bge	r16,zero,401c0cc <__reset+0xfb01b0cc>
 401c5c0:	d8802315 	stw	r2,140(sp)
 401c5c4:	0015883a 	mov	r10,zero
 401c5c8:	e244b03a 	or	r2,fp,r9
 401c5cc:	103e371e 	bne	r2,zero,401beac <__reset+0xfb01aeac>
 401c5d0:	00800044 	movi	r2,1
 401c5d4:	10803fcc 	andi	r2,r2,255
 401c5d8:	00c00044 	movi	r3,1
 401c5dc:	10c06126 	beq	r2,r3,401c764 <___svfiprintf_internal_r+0xffc>
 401c5e0:	00c00084 	movi	r3,2
 401c5e4:	10fd5526 	beq	r2,r3,401bb3c <__reset+0xfb01ab3c>
 401c5e8:	003ed806 	br	401c14c <__reset+0xfb01b14c>
 401c5ec:	d8802315 	stw	r2,140(sp)
 401c5f0:	98c00007 	ldb	r3,0(r19)
 401c5f4:	003cab06 	br	401b8a4 <__reset+0xfb01a8a4>
 401c5f8:	d9801a04 	addi	r6,sp,104
 401c5fc:	b80b883a 	mov	r5,r23
 401c600:	a809883a 	mov	r4,r21
 401c604:	401b5980 	call	401b598 <__ssprint_r>
 401c608:	103f651e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c60c:	d8c01c17 	ldw	r3,112(sp)
 401c610:	003f4f06 	br	401c350 <__reset+0xfb01b350>
 401c614:	00810234 	movhi	r2,1032
 401c618:	10879904 	addi	r2,r2,7780
 401c61c:	d8802915 	stw	r2,164(sp)
 401c620:	003d4406 	br	401bb34 <__reset+0xfb01ab34>
 401c624:	dac02317 	ldw	r11,140(sp)
 401c628:	58800017 	ldw	r2,0(r11)
 401c62c:	dac02517 	ldw	r11,148(sp)
 401c630:	5807d7fa 	srai	r3,r11,31
 401c634:	dac02317 	ldw	r11,140(sp)
 401c638:	10c00115 	stw	r3,4(r2)
 401c63c:	5ac00104 	addi	r11,r11,4
 401c640:	dac02315 	stw	r11,140(sp)
 401c644:	dac02517 	ldw	r11,148(sp)
 401c648:	12c00015 	stw	r11,0(r2)
 401c64c:	003c6d06 	br	401b804 <__reset+0xfb01a804>
 401c650:	9080100c 	andi	r2,r18,64
 401c654:	dac02317 	ldw	r11,140(sp)
 401c658:	103e5326 	beq	r2,zero,401bfa8 <__reset+0xfb01afa8>
 401c65c:	5f00000f 	ldh	fp,0(r11)
 401c660:	5ac00104 	addi	r11,r11,4
 401c664:	dac02315 	stw	r11,140(sp)
 401c668:	e013d7fa 	srai	r9,fp,31
 401c66c:	4805883a 	mov	r2,r9
 401c670:	003e0706 	br	401be90 <__reset+0xfb01ae90>
 401c674:	00800c04 	movi	r2,48
 401c678:	d8801d05 	stb	r2,116(sp)
 401c67c:	d8c01d45 	stb	r3,117(sp)
 401c680:	d8001d85 	stb	zero,118(sp)
 401c684:	90800094 	ori	r2,r18,2
 401c688:	80008f16 	blt	r16,zero,401c8c8 <___svfiprintf_internal_r+0x1160>
 401c68c:	00bfdfc4 	movi	r2,-129
 401c690:	90a4703a 	and	r18,r18,r2
 401c694:	94800094 	ori	r18,r18,2
 401c698:	0015883a 	mov	r10,zero
 401c69c:	003d2906 	br	401bb44 <__reset+0xfb01ab44>
 401c6a0:	98c00007 	ldb	r3,0(r19)
 401c6a4:	003c7f06 	br	401b8a4 <__reset+0xfb01a8a4>
 401c6a8:	dac02317 	ldw	r11,140(sp)
 401c6ac:	0013883a 	mov	r9,zero
 401c6b0:	5f000017 	ldw	fp,0(r11)
 401c6b4:	5ac00104 	addi	r11,r11,4
 401c6b8:	dac02315 	stw	r11,140(sp)
 401c6bc:	003d1506 	br	401bb14 <__reset+0xfb01ab14>
 401c6c0:	9080100c 	andi	r2,r18,64
 401c6c4:	d8001d85 	stb	zero,118(sp)
 401c6c8:	dac02317 	ldw	r11,140(sp)
 401c6cc:	10003426 	beq	r2,zero,401c7a0 <___svfiprintf_internal_r+0x1038>
 401c6d0:	58800104 	addi	r2,r11,4
 401c6d4:	5f00000b 	ldhu	fp,0(r11)
 401c6d8:	0013883a 	mov	r9,zero
 401c6dc:	803e950e 	bge	r16,zero,401c134 <__reset+0xfb01b134>
 401c6e0:	e246b03a 	or	r3,fp,r9
 401c6e4:	d8802315 	stw	r2,140(sp)
 401c6e8:	183d5a1e 	bne	r3,zero,401bc54 <__reset+0xfb01ac54>
 401c6ec:	0015883a 	mov	r10,zero
 401c6f0:	0005883a 	mov	r2,zero
 401c6f4:	003fb706 	br	401c5d4 <__reset+0xfb01b5d4>
 401c6f8:	98c00043 	ldbu	r3,1(r19)
 401c6fc:	94800814 	ori	r18,r18,32
 401c700:	9cc00044 	addi	r19,r19,1
 401c704:	18c03fcc 	andi	r3,r3,255
 401c708:	18c0201c 	xori	r3,r3,128
 401c70c:	18ffe004 	addi	r3,r3,-128
 401c710:	003c6406 	br	401b8a4 <__reset+0xfb01a8a4>
 401c714:	d8c02315 	stw	r3,140(sp)
 401c718:	0015883a 	mov	r10,zero
 401c71c:	003faa06 	br	401c5c8 <__reset+0xfb01b5c8>
 401c720:	dac02317 	ldw	r11,140(sp)
 401c724:	58800017 	ldw	r2,0(r11)
 401c728:	5ac00104 	addi	r11,r11,4
 401c72c:	dac02315 	stw	r11,140(sp)
 401c730:	dac02517 	ldw	r11,148(sp)
 401c734:	12c00015 	stw	r11,0(r2)
 401c738:	003c3206 	br	401b804 <__reset+0xfb01a804>
 401c73c:	01010234 	movhi	r4,1032
 401c740:	21079904 	addi	r4,r4,7780
 401c744:	d9002915 	stw	r4,164(sp)
 401c748:	d8c02315 	stw	r3,140(sp)
 401c74c:	1025883a 	mov	r18,r2
 401c750:	e244b03a 	or	r2,fp,r9
 401c754:	103f871e 	bne	r2,zero,401c574 <__reset+0xfb01b574>
 401c758:	0015883a 	mov	r10,zero
 401c75c:	00800084 	movi	r2,2
 401c760:	003f9c06 	br	401c5d4 <__reset+0xfb01b5d4>
 401c764:	0039883a 	mov	fp,zero
 401c768:	003e5f06 	br	401c0e8 <__reset+0xfb01b0e8>
 401c76c:	d9801a04 	addi	r6,sp,104
 401c770:	b80b883a 	mov	r5,r23
 401c774:	a809883a 	mov	r4,r21
 401c778:	401b5980 	call	401b598 <__ssprint_r>
 401c77c:	103f081e 	bne	r2,zero,401c3a0 <__reset+0xfb01b3a0>
 401c780:	d8c01c17 	ldw	r3,112(sp)
 401c784:	d8801b17 	ldw	r2,108(sp)
 401c788:	d811883a 	mov	r8,sp
 401c78c:	003e9106 	br	401c1d4 <__reset+0xfb01b1d4>
 401c790:	01010234 	movhi	r4,1032
 401c794:	21080104 	addi	r4,r4,8196
 401c798:	d9002215 	stw	r4,136(sp)
 401c79c:	003ead06 	br	401c254 <__reset+0xfb01b254>
 401c7a0:	58800104 	addi	r2,r11,4
 401c7a4:	5f000017 	ldw	fp,0(r11)
 401c7a8:	0013883a 	mov	r9,zero
 401c7ac:	803e610e 	bge	r16,zero,401c134 <__reset+0xfb01b134>
 401c7b0:	003fcb06 	br	401c6e0 <__reset+0xfb01b6e0>
 401c7b4:	58800104 	addi	r2,r11,4
 401c7b8:	5f000017 	ldw	fp,0(r11)
 401c7bc:	0013883a 	mov	r9,zero
 401c7c0:	803e420e 	bge	r16,zero,401c0cc <__reset+0xfb01b0cc>
 401c7c4:	003f7e06 	br	401c5c0 <__reset+0xfb01b5c0>
 401c7c8:	5f000017 	ldw	fp,0(r11)
 401c7cc:	5ac00104 	addi	r11,r11,4
 401c7d0:	0013883a 	mov	r9,zero
 401c7d4:	dac02315 	stw	r11,140(sp)
 401c7d8:	003cce06 	br	401bb14 <__reset+0xfb01ab14>
 401c7dc:	8809883a 	mov	r4,r17
 401c7e0:	da002c15 	stw	r8,176(sp)
 401c7e4:	401296c0 	call	401296c <strlen>
 401c7e8:	d8802115 	stw	r2,132(sp)
 401c7ec:	da801d83 	ldbu	r10,118(sp)
 401c7f0:	df002315 	stw	fp,140(sp)
 401c7f4:	0021883a 	mov	r16,zero
 401c7f8:	da002c17 	ldw	r8,176(sp)
 401c7fc:	003cf606 	br	401bbd8 <__reset+0xfb01abd8>
 401c800:	00800184 	movi	r2,6
 401c804:	1400012e 	bgeu	r2,r16,401c80c <___svfiprintf_internal_r+0x10a4>
 401c808:	1021883a 	mov	r16,r2
 401c80c:	dc002115 	stw	r16,132(sp)
 401c810:	8005883a 	mov	r2,r16
 401c814:	80003c16 	blt	r16,zero,401c908 <___svfiprintf_internal_r+0x11a0>
 401c818:	04410234 	movhi	r17,1032
 401c81c:	d8802015 	stw	r2,128(sp)
 401c820:	df002315 	stw	fp,140(sp)
 401c824:	8c479e04 	addi	r17,r17,7800
 401c828:	003d2e06 	br	401bce4 <__reset+0xfb01ace4>
 401c82c:	04001004 	movi	r16,64
 401c830:	800b883a 	mov	r5,r16
 401c834:	4011c080 	call	4011c08 <_malloc_r>
 401c838:	dac02717 	ldw	r11,156(sp)
 401c83c:	58800015 	stw	r2,0(r11)
 401c840:	58800415 	stw	r2,16(r11)
 401c844:	10004826 	beq	r2,zero,401c968 <___svfiprintf_internal_r+0x1200>
 401c848:	dac02717 	ldw	r11,156(sp)
 401c84c:	5c000515 	stw	r16,20(r11)
 401c850:	003bd906 	br	401b7b8 <__reset+0xfb01a7b8>
 401c854:	9080004c 	andi	r2,r18,1
 401c858:	0015883a 	mov	r10,zero
 401c85c:	10000626 	beq	r2,zero,401c878 <___svfiprintf_internal_r+0x1110>
 401c860:	dac02b17 	ldw	r11,172(sp)
 401c864:	00800c04 	movi	r2,48
 401c868:	d88019c5 	stb	r2,103(sp)
 401c86c:	dac02115 	stw	r11,132(sp)
 401c870:	dc4019c4 	addi	r17,sp,103
 401c874:	003cd806 	br	401bbd8 <__reset+0xfb01abd8>
 401c878:	d8002115 	stw	zero,132(sp)
 401c87c:	dc401a04 	addi	r17,sp,104
 401c880:	003cd506 	br	401bbd8 <__reset+0xfb01abd8>
 401c884:	01010234 	movhi	r4,1032
 401c888:	21080504 	addi	r4,r4,8212
 401c88c:	d9002815 	stw	r4,160(sp)
 401c890:	003d4306 	br	401bda0 <__reset+0xfb01ada0>
 401c894:	00bfffc4 	movi	r2,-1
 401c898:	003ec606 	br	401c3b4 <__reset+0xfb01b3b4>
 401c89c:	00800044 	movi	r2,1
 401c8a0:	10803fcc 	andi	r2,r2,255
 401c8a4:	00c00044 	movi	r3,1
 401c8a8:	10fd8026 	beq	r2,r3,401beac <__reset+0xfb01aeac>
 401c8ac:	00c00084 	movi	r3,2
 401c8b0:	10fca426 	beq	r2,r3,401bb44 <__reset+0xfb01ab44>
 401c8b4:	003ce806 	br	401bc58 <__reset+0xfb01ac58>
 401c8b8:	01010234 	movhi	r4,1032
 401c8bc:	21080504 	addi	r4,r4,8212
 401c8c0:	d9002815 	stw	r4,160(sp)
 401c8c4:	003e9906 	br	401c32c <__reset+0xfb01b32c>
 401c8c8:	1025883a 	mov	r18,r2
 401c8cc:	0015883a 	mov	r10,zero
 401c8d0:	00800084 	movi	r2,2
 401c8d4:	003ff206 	br	401c8a0 <__reset+0xfb01b8a0>
 401c8d8:	01410234 	movhi	r5,1032
 401c8dc:	29480104 	addi	r5,r5,8196
 401c8e0:	d9402215 	stw	r5,136(sp)
 401c8e4:	003ee206 	br	401c470 <__reset+0xfb01b470>
 401c8e8:	5827883a 	mov	r19,r11
 401c8ec:	0021883a 	mov	r16,zero
 401c8f0:	003bed06 	br	401b8a8 <__reset+0xfb01a8a8>
 401c8f4:	dc002115 	stw	r16,132(sp)
 401c8f8:	da801d83 	ldbu	r10,118(sp)
 401c8fc:	df002315 	stw	fp,140(sp)
 401c900:	0021883a 	mov	r16,zero
 401c904:	003cb406 	br	401bbd8 <__reset+0xfb01abd8>
 401c908:	0005883a 	mov	r2,zero
 401c90c:	003fc206 	br	401c818 <__reset+0xfb01b818>
 401c910:	d8802317 	ldw	r2,140(sp)
 401c914:	98c00043 	ldbu	r3,1(r19)
 401c918:	5827883a 	mov	r19,r11
 401c91c:	14000017 	ldw	r16,0(r2)
 401c920:	10800104 	addi	r2,r2,4
 401c924:	d8802315 	stw	r2,140(sp)
 401c928:	803f760e 	bge	r16,zero,401c704 <__reset+0xfb01b704>
 401c92c:	18c03fcc 	andi	r3,r3,255
 401c930:	18c0201c 	xori	r3,r3,128
 401c934:	043fffc4 	movi	r16,-1
 401c938:	18ffe004 	addi	r3,r3,-128
 401c93c:	003bd906 	br	401b8a4 <__reset+0xfb01a8a4>
 401c940:	d9c01d85 	stb	r7,118(sp)
 401c944:	003cb606 	br	401bc20 <__reset+0xfb01ac20>
 401c948:	d9c01d85 	stb	r7,118(sp)
 401c94c:	003d2106 	br	401bdd4 <__reset+0xfb01add4>
 401c950:	d9c01d85 	stb	r7,118(sp)
 401c954:	003d8e06 	br	401bf90 <__reset+0xfb01af90>
 401c958:	d9c01d85 	stb	r7,118(sp)
 401c95c:	003db306 	br	401c02c <__reset+0xfb01b02c>
 401c960:	d9c01d85 	stb	r7,118(sp)
 401c964:	003c8a06 	br	401bb90 <__reset+0xfb01ab90>
 401c968:	dac02a17 	ldw	r11,168(sp)
 401c96c:	00800304 	movi	r2,12
 401c970:	58800015 	stw	r2,0(r11)
 401c974:	00bfffc4 	movi	r2,-1
 401c978:	003e8e06 	br	401c3b4 <__reset+0xfb01b3b4>
 401c97c:	d9c01d85 	stb	r7,118(sp)
 401c980:	003dc706 	br	401c0a0 <__reset+0xfb01b0a0>
 401c984:	d9c01d85 	stb	r7,118(sp)
 401c988:	003ddf06 	br	401c108 <__reset+0xfb01b108>
 401c98c:	d9c01d85 	stb	r7,118(sp)
 401c990:	003d3706 	br	401be70 <__reset+0xfb01ae70>
 401c994:	d9c01d85 	stb	r7,118(sp)
 401c998:	003c5406 	br	401baec <__reset+0xfb01aaec>
 401c99c:	d9c01d85 	stb	r7,118(sp)
 401c9a0:	003d1d06 	br	401be18 <__reset+0xfb01ae18>

0401c9a4 <__sprint_r.part.0>:
 401c9a4:	28801917 	ldw	r2,100(r5)
 401c9a8:	defff604 	addi	sp,sp,-40
 401c9ac:	dd400515 	stw	r21,20(sp)
 401c9b0:	dfc00915 	stw	ra,36(sp)
 401c9b4:	df000815 	stw	fp,32(sp)
 401c9b8:	ddc00715 	stw	r23,28(sp)
 401c9bc:	dd800615 	stw	r22,24(sp)
 401c9c0:	dd000415 	stw	r20,16(sp)
 401c9c4:	dcc00315 	stw	r19,12(sp)
 401c9c8:	dc800215 	stw	r18,8(sp)
 401c9cc:	dc400115 	stw	r17,4(sp)
 401c9d0:	dc000015 	stw	r16,0(sp)
 401c9d4:	1088000c 	andi	r2,r2,8192
 401c9d8:	302b883a 	mov	r21,r6
 401c9dc:	10002e26 	beq	r2,zero,401ca98 <__sprint_r.part.0+0xf4>
 401c9e0:	30800217 	ldw	r2,8(r6)
 401c9e4:	35800017 	ldw	r22,0(r6)
 401c9e8:	10002926 	beq	r2,zero,401ca90 <__sprint_r.part.0+0xec>
 401c9ec:	2827883a 	mov	r19,r5
 401c9f0:	2029883a 	mov	r20,r4
 401c9f4:	b5c00104 	addi	r23,r22,4
 401c9f8:	04bfffc4 	movi	r18,-1
 401c9fc:	bc400017 	ldw	r17,0(r23)
 401ca00:	b4000017 	ldw	r16,0(r22)
 401ca04:	0039883a 	mov	fp,zero
 401ca08:	8822d0ba 	srli	r17,r17,2
 401ca0c:	8800031e 	bne	r17,zero,401ca1c <__sprint_r.part.0+0x78>
 401ca10:	00001806 	br	401ca74 <__sprint_r.part.0+0xd0>
 401ca14:	84000104 	addi	r16,r16,4
 401ca18:	8f001526 	beq	r17,fp,401ca70 <__sprint_r.part.0+0xcc>
 401ca1c:	81400017 	ldw	r5,0(r16)
 401ca20:	980d883a 	mov	r6,r19
 401ca24:	a009883a 	mov	r4,r20
 401ca28:	401e3cc0 	call	401e3cc <_fputwc_r>
 401ca2c:	e7000044 	addi	fp,fp,1
 401ca30:	14bff81e 	bne	r2,r18,401ca14 <__reset+0xfb01ba14>
 401ca34:	9005883a 	mov	r2,r18
 401ca38:	a8000215 	stw	zero,8(r21)
 401ca3c:	a8000115 	stw	zero,4(r21)
 401ca40:	dfc00917 	ldw	ra,36(sp)
 401ca44:	df000817 	ldw	fp,32(sp)
 401ca48:	ddc00717 	ldw	r23,28(sp)
 401ca4c:	dd800617 	ldw	r22,24(sp)
 401ca50:	dd400517 	ldw	r21,20(sp)
 401ca54:	dd000417 	ldw	r20,16(sp)
 401ca58:	dcc00317 	ldw	r19,12(sp)
 401ca5c:	dc800217 	ldw	r18,8(sp)
 401ca60:	dc400117 	ldw	r17,4(sp)
 401ca64:	dc000017 	ldw	r16,0(sp)
 401ca68:	dec00a04 	addi	sp,sp,40
 401ca6c:	f800283a 	ret
 401ca70:	a8800217 	ldw	r2,8(r21)
 401ca74:	8c63883a 	add	r17,r17,r17
 401ca78:	8c63883a 	add	r17,r17,r17
 401ca7c:	1445c83a 	sub	r2,r2,r17
 401ca80:	a8800215 	stw	r2,8(r21)
 401ca84:	b5800204 	addi	r22,r22,8
 401ca88:	bdc00204 	addi	r23,r23,8
 401ca8c:	103fdb1e 	bne	r2,zero,401c9fc <__reset+0xfb01b9fc>
 401ca90:	0005883a 	mov	r2,zero
 401ca94:	003fe806 	br	401ca38 <__reset+0xfb01ba38>
 401ca98:	40193040 	call	4019304 <__sfvwrite_r>
 401ca9c:	003fe606 	br	401ca38 <__reset+0xfb01ba38>

0401caa0 <__sprint_r>:
 401caa0:	30c00217 	ldw	r3,8(r6)
 401caa4:	18000126 	beq	r3,zero,401caac <__sprint_r+0xc>
 401caa8:	401c9a41 	jmpi	401c9a4 <__sprint_r.part.0>
 401caac:	30000115 	stw	zero,4(r6)
 401cab0:	0005883a 	mov	r2,zero
 401cab4:	f800283a 	ret

0401cab8 <___vfiprintf_internal_r>:
 401cab8:	deffc904 	addi	sp,sp,-220
 401cabc:	df003515 	stw	fp,212(sp)
 401cac0:	dd003115 	stw	r20,196(sp)
 401cac4:	dfc03615 	stw	ra,216(sp)
 401cac8:	ddc03415 	stw	r23,208(sp)
 401cacc:	dd803315 	stw	r22,204(sp)
 401cad0:	dd403215 	stw	r21,200(sp)
 401cad4:	dcc03015 	stw	r19,192(sp)
 401cad8:	dc802f15 	stw	r18,188(sp)
 401cadc:	dc402e15 	stw	r17,184(sp)
 401cae0:	dc002d15 	stw	r16,180(sp)
 401cae4:	d9002015 	stw	r4,128(sp)
 401cae8:	d9c02215 	stw	r7,136(sp)
 401caec:	2829883a 	mov	r20,r5
 401caf0:	3039883a 	mov	fp,r6
 401caf4:	20000226 	beq	r4,zero,401cb00 <___vfiprintf_internal_r+0x48>
 401caf8:	20800e17 	ldw	r2,56(r4)
 401cafc:	1000cf26 	beq	r2,zero,401ce3c <___vfiprintf_internal_r+0x384>
 401cb00:	a080030b 	ldhu	r2,12(r20)
 401cb04:	10c8000c 	andi	r3,r2,8192
 401cb08:	1800061e 	bne	r3,zero,401cb24 <___vfiprintf_internal_r+0x6c>
 401cb0c:	a1001917 	ldw	r4,100(r20)
 401cb10:	00f7ffc4 	movi	r3,-8193
 401cb14:	10880014 	ori	r2,r2,8192
 401cb18:	20c6703a 	and	r3,r4,r3
 401cb1c:	a080030d 	sth	r2,12(r20)
 401cb20:	a0c01915 	stw	r3,100(r20)
 401cb24:	10c0020c 	andi	r3,r2,8
 401cb28:	1800a926 	beq	r3,zero,401cdd0 <___vfiprintf_internal_r+0x318>
 401cb2c:	a0c00417 	ldw	r3,16(r20)
 401cb30:	1800a726 	beq	r3,zero,401cdd0 <___vfiprintf_internal_r+0x318>
 401cb34:	1080068c 	andi	r2,r2,26
 401cb38:	00c00284 	movi	r3,10
 401cb3c:	10c0ac26 	beq	r2,r3,401cdf0 <___vfiprintf_internal_r+0x338>
 401cb40:	da801a04 	addi	r10,sp,104
 401cb44:	da801e15 	stw	r10,120(sp)
 401cb48:	d8801e17 	ldw	r2,120(sp)
 401cb4c:	da8019c4 	addi	r10,sp,103
 401cb50:	05810234 	movhi	r22,1032
 401cb54:	05c10234 	movhi	r23,1032
 401cb58:	da801f15 	stw	r10,124(sp)
 401cb5c:	1295c83a 	sub	r10,r2,r10
 401cb60:	b5880d04 	addi	r22,r22,8244
 401cb64:	bdc80904 	addi	r23,r23,8228
 401cb68:	dec01a15 	stw	sp,104(sp)
 401cb6c:	d8001c15 	stw	zero,112(sp)
 401cb70:	d8001b15 	stw	zero,108(sp)
 401cb74:	d8002615 	stw	zero,152(sp)
 401cb78:	d8002315 	stw	zero,140(sp)
 401cb7c:	da802715 	stw	r10,156(sp)
 401cb80:	d811883a 	mov	r8,sp
 401cb84:	dd002115 	stw	r20,132(sp)
 401cb88:	e021883a 	mov	r16,fp
 401cb8c:	80800007 	ldb	r2,0(r16)
 401cb90:	1003ea26 	beq	r2,zero,401db3c <___vfiprintf_internal_r+0x1084>
 401cb94:	00c00944 	movi	r3,37
 401cb98:	8025883a 	mov	r18,r16
 401cb9c:	10c0021e 	bne	r2,r3,401cba8 <___vfiprintf_internal_r+0xf0>
 401cba0:	00001606 	br	401cbfc <___vfiprintf_internal_r+0x144>
 401cba4:	10c00326 	beq	r2,r3,401cbb4 <___vfiprintf_internal_r+0xfc>
 401cba8:	94800044 	addi	r18,r18,1
 401cbac:	90800007 	ldb	r2,0(r18)
 401cbb0:	103ffc1e 	bne	r2,zero,401cba4 <__reset+0xfb01bba4>
 401cbb4:	9423c83a 	sub	r17,r18,r16
 401cbb8:	88001026 	beq	r17,zero,401cbfc <___vfiprintf_internal_r+0x144>
 401cbbc:	d8c01c17 	ldw	r3,112(sp)
 401cbc0:	d8801b17 	ldw	r2,108(sp)
 401cbc4:	44000015 	stw	r16,0(r8)
 401cbc8:	88c7883a 	add	r3,r17,r3
 401cbcc:	10800044 	addi	r2,r2,1
 401cbd0:	44400115 	stw	r17,4(r8)
 401cbd4:	d8c01c15 	stw	r3,112(sp)
 401cbd8:	d8801b15 	stw	r2,108(sp)
 401cbdc:	010001c4 	movi	r4,7
 401cbe0:	2080760e 	bge	r4,r2,401cdbc <___vfiprintf_internal_r+0x304>
 401cbe4:	1803821e 	bne	r3,zero,401d9f0 <___vfiprintf_internal_r+0xf38>
 401cbe8:	da802317 	ldw	r10,140(sp)
 401cbec:	d8001b15 	stw	zero,108(sp)
 401cbf0:	d811883a 	mov	r8,sp
 401cbf4:	5455883a 	add	r10,r10,r17
 401cbf8:	da802315 	stw	r10,140(sp)
 401cbfc:	90800007 	ldb	r2,0(r18)
 401cc00:	10044626 	beq	r2,zero,401dd1c <___vfiprintf_internal_r+0x1264>
 401cc04:	90c00047 	ldb	r3,1(r18)
 401cc08:	94000044 	addi	r16,r18,1
 401cc0c:	d8001d85 	stb	zero,118(sp)
 401cc10:	0009883a 	mov	r4,zero
 401cc14:	000f883a 	mov	r7,zero
 401cc18:	027fffc4 	movi	r9,-1
 401cc1c:	0023883a 	mov	r17,zero
 401cc20:	0029883a 	mov	r20,zero
 401cc24:	01401604 	movi	r5,88
 401cc28:	01800244 	movi	r6,9
 401cc2c:	03400a84 	movi	r13,42
 401cc30:	03001b04 	movi	r12,108
 401cc34:	84000044 	addi	r16,r16,1
 401cc38:	18bff804 	addi	r2,r3,-32
 401cc3c:	28827336 	bltu	r5,r2,401d60c <___vfiprintf_internal_r+0xb54>
 401cc40:	100490ba 	slli	r2,r2,2
 401cc44:	028100b4 	movhi	r10,1026
 401cc48:	52b31604 	addi	r10,r10,-13224
 401cc4c:	1285883a 	add	r2,r2,r10
 401cc50:	10800017 	ldw	r2,0(r2)
 401cc54:	1000683a 	jmp	r2
 401cc58:	0401d340 	call	401d34 <__alt_mem_sdram-0x3bfe2cc>
 401cc5c:	0401d60c 	andi	r16,zero,1880
 401cc60:	0401d60c 	andi	r16,zero,1880
 401cc64:	0401d360 	cmpeqi	r16,zero,1869
 401cc68:	0401d60c 	andi	r16,zero,1880
 401cc6c:	0401d60c 	andi	r16,zero,1880
 401cc70:	0401d60c 	andi	r16,zero,1880
 401cc74:	0401d60c 	andi	r16,zero,1880
 401cc78:	0401d60c 	andi	r16,zero,1880
 401cc7c:	0401d60c 	andi	r16,zero,1880
 401cc80:	0401d548 	cmpgei	r16,zero,1877
 401cc84:	0401d564 	muli	r16,zero,1877
 401cc88:	0401d60c 	andi	r16,zero,1880
 401cc8c:	0401ce4c 	andi	r16,zero,1849
 401cc90:	0401d574 	movhi	r16,1877
 401cc94:	0401d60c 	andi	r16,zero,1880
 401cc98:	0401d36c 	andhi	r16,zero,1869
 401cc9c:	0401d378 	rdprs	r16,zero,1869
 401cca0:	0401d378 	rdprs	r16,zero,1869
 401cca4:	0401d378 	rdprs	r16,zero,1869
 401cca8:	0401d378 	rdprs	r16,zero,1869
 401ccac:	0401d378 	rdprs	r16,zero,1869
 401ccb0:	0401d378 	rdprs	r16,zero,1869
 401ccb4:	0401d378 	rdprs	r16,zero,1869
 401ccb8:	0401d378 	rdprs	r16,zero,1869
 401ccbc:	0401d378 	rdprs	r16,zero,1869
 401ccc0:	0401d60c 	andi	r16,zero,1880
 401ccc4:	0401d60c 	andi	r16,zero,1880
 401ccc8:	0401d60c 	andi	r16,zero,1880
 401cccc:	0401d60c 	andi	r16,zero,1880
 401ccd0:	0401d60c 	andi	r16,zero,1880
 401ccd4:	0401d60c 	andi	r16,zero,1880
 401ccd8:	0401d60c 	andi	r16,zero,1880
 401ccdc:	0401d60c 	andi	r16,zero,1880
 401cce0:	0401d60c 	andi	r16,zero,1880
 401cce4:	0401d60c 	andi	r16,zero,1880
 401cce8:	0401d3a4 	muli	r16,zero,1870
 401ccec:	0401d60c 	andi	r16,zero,1880
 401ccf0:	0401d60c 	andi	r16,zero,1880
 401ccf4:	0401d60c 	andi	r16,zero,1880
 401ccf8:	0401d60c 	andi	r16,zero,1880
 401ccfc:	0401d60c 	andi	r16,zero,1880
 401cd00:	0401d60c 	andi	r16,zero,1880
 401cd04:	0401d60c 	andi	r16,zero,1880
 401cd08:	0401d60c 	andi	r16,zero,1880
 401cd0c:	0401d60c 	andi	r16,zero,1880
 401cd10:	0401d60c 	andi	r16,zero,1880
 401cd14:	0401d3dc 	xori	r16,zero,1871
 401cd18:	0401d60c 	andi	r16,zero,1880
 401cd1c:	0401d60c 	andi	r16,zero,1880
 401cd20:	0401d60c 	andi	r16,zero,1880
 401cd24:	0401d60c 	andi	r16,zero,1880
 401cd28:	0401d60c 	andi	r16,zero,1880
 401cd2c:	0401d434 	movhi	r16,1872
 401cd30:	0401d60c 	andi	r16,zero,1880
 401cd34:	0401d60c 	andi	r16,zero,1880
 401cd38:	0401d4a4 	muli	r16,zero,1874
 401cd3c:	0401d60c 	andi	r16,zero,1880
 401cd40:	0401d60c 	andi	r16,zero,1880
 401cd44:	0401d60c 	andi	r16,zero,1880
 401cd48:	0401d60c 	andi	r16,zero,1880
 401cd4c:	0401d60c 	andi	r16,zero,1880
 401cd50:	0401d60c 	andi	r16,zero,1880
 401cd54:	0401d60c 	andi	r16,zero,1880
 401cd58:	0401d60c 	andi	r16,zero,1880
 401cd5c:	0401d60c 	andi	r16,zero,1880
 401cd60:	0401d60c 	andi	r16,zero,1880
 401cd64:	0401d250 	cmplti	r16,zero,1865
 401cd68:	0401d27c 	xorhi	r16,zero,1865
 401cd6c:	0401d60c 	andi	r16,zero,1880
 401cd70:	0401d60c 	andi	r16,zero,1880
 401cd74:	0401d60c 	andi	r16,zero,1880
 401cd78:	0401d5b4 	movhi	r16,1878
 401cd7c:	0401d27c 	xorhi	r16,zero,1865
 401cd80:	0401d60c 	andi	r16,zero,1880
 401cd84:	0401d60c 	andi	r16,zero,1880
 401cd88:	0401d110 	cmplti	r16,zero,1860
 401cd8c:	0401d60c 	andi	r16,zero,1880
 401cd90:	0401d120 	cmpeqi	r16,zero,1860
 401cd94:	0401d15c 	xori	r16,zero,1861
 401cd98:	0401ce58 	cmpnei	r16,zero,1849
 401cd9c:	0401d104 	movi	r16,1860
 401cda0:	0401d60c 	andi	r16,zero,1880
 401cda4:	0401d4e0 	cmpeqi	r16,zero,1875
 401cda8:	0401d60c 	andi	r16,zero,1880
 401cdac:	0401d538 	rdprs	r16,zero,1876
 401cdb0:	0401d60c 	andi	r16,zero,1880
 401cdb4:	0401d60c 	andi	r16,zero,1880
 401cdb8:	0401d1fc 	xorhi	r16,zero,1863
 401cdbc:	42000204 	addi	r8,r8,8
 401cdc0:	da802317 	ldw	r10,140(sp)
 401cdc4:	5455883a 	add	r10,r10,r17
 401cdc8:	da802315 	stw	r10,140(sp)
 401cdcc:	003f8b06 	br	401cbfc <__reset+0xfb01bbfc>
 401cdd0:	d9002017 	ldw	r4,128(sp)
 401cdd4:	a00b883a 	mov	r5,r20
 401cdd8:	4016eac0 	call	4016eac <__swsetup_r>
 401cddc:	1003b11e 	bne	r2,zero,401dca4 <___vfiprintf_internal_r+0x11ec>
 401cde0:	a080030b 	ldhu	r2,12(r20)
 401cde4:	00c00284 	movi	r3,10
 401cde8:	1080068c 	andi	r2,r2,26
 401cdec:	10ff541e 	bne	r2,r3,401cb40 <__reset+0xfb01bb40>
 401cdf0:	a080038f 	ldh	r2,14(r20)
 401cdf4:	103f5216 	blt	r2,zero,401cb40 <__reset+0xfb01bb40>
 401cdf8:	d9c02217 	ldw	r7,136(sp)
 401cdfc:	d9002017 	ldw	r4,128(sp)
 401ce00:	e00d883a 	mov	r6,fp
 401ce04:	a00b883a 	mov	r5,r20
 401ce08:	401df300 	call	401df30 <__sbprintf>
 401ce0c:	dfc03617 	ldw	ra,216(sp)
 401ce10:	df003517 	ldw	fp,212(sp)
 401ce14:	ddc03417 	ldw	r23,208(sp)
 401ce18:	dd803317 	ldw	r22,204(sp)
 401ce1c:	dd403217 	ldw	r21,200(sp)
 401ce20:	dd003117 	ldw	r20,196(sp)
 401ce24:	dcc03017 	ldw	r19,192(sp)
 401ce28:	dc802f17 	ldw	r18,188(sp)
 401ce2c:	dc402e17 	ldw	r17,184(sp)
 401ce30:	dc002d17 	ldw	r16,180(sp)
 401ce34:	dec03704 	addi	sp,sp,220
 401ce38:	f800283a 	ret
 401ce3c:	4018e800 	call	4018e80 <__sinit>
 401ce40:	003f2f06 	br	401cb00 <__reset+0xfb01bb00>
 401ce44:	0463c83a 	sub	r17,zero,r17
 401ce48:	d8802215 	stw	r2,136(sp)
 401ce4c:	a5000114 	ori	r20,r20,4
 401ce50:	80c00007 	ldb	r3,0(r16)
 401ce54:	003f7706 	br	401cc34 <__reset+0xfb01bc34>
 401ce58:	00800c04 	movi	r2,48
 401ce5c:	da802217 	ldw	r10,136(sp)
 401ce60:	d8801d05 	stb	r2,116(sp)
 401ce64:	00801e04 	movi	r2,120
 401ce68:	d8801d45 	stb	r2,117(sp)
 401ce6c:	d8001d85 	stb	zero,118(sp)
 401ce70:	50c00104 	addi	r3,r10,4
 401ce74:	54800017 	ldw	r18,0(r10)
 401ce78:	0027883a 	mov	r19,zero
 401ce7c:	a0800094 	ori	r2,r20,2
 401ce80:	48030b16 	blt	r9,zero,401dab0 <___vfiprintf_internal_r+0xff8>
 401ce84:	00bfdfc4 	movi	r2,-129
 401ce88:	a096703a 	and	r11,r20,r2
 401ce8c:	d8c02215 	stw	r3,136(sp)
 401ce90:	5d000094 	ori	r20,r11,2
 401ce94:	90032b1e 	bne	r18,zero,401db44 <___vfiprintf_internal_r+0x108c>
 401ce98:	00810234 	movhi	r2,1032
 401ce9c:	10879904 	addi	r2,r2,7780
 401cea0:	d8802615 	stw	r2,152(sp)
 401cea4:	0039883a 	mov	fp,zero
 401cea8:	48017b1e 	bne	r9,zero,401d498 <___vfiprintf_internal_r+0x9e0>
 401ceac:	0013883a 	mov	r9,zero
 401ceb0:	0027883a 	mov	r19,zero
 401ceb4:	dd401a04 	addi	r21,sp,104
 401ceb8:	4825883a 	mov	r18,r9
 401cebc:	4cc0010e 	bge	r9,r19,401cec4 <___vfiprintf_internal_r+0x40c>
 401cec0:	9825883a 	mov	r18,r19
 401cec4:	e7003fcc 	andi	fp,fp,255
 401cec8:	e700201c 	xori	fp,fp,128
 401cecc:	e73fe004 	addi	fp,fp,-128
 401ced0:	e0000126 	beq	fp,zero,401ced8 <___vfiprintf_internal_r+0x420>
 401ced4:	94800044 	addi	r18,r18,1
 401ced8:	a380008c 	andi	r14,r20,2
 401cedc:	70000126 	beq	r14,zero,401cee4 <___vfiprintf_internal_r+0x42c>
 401cee0:	94800084 	addi	r18,r18,2
 401cee4:	a700210c 	andi	fp,r20,132
 401cee8:	e001df1e 	bne	fp,zero,401d668 <___vfiprintf_internal_r+0xbb0>
 401ceec:	8c87c83a 	sub	r3,r17,r18
 401cef0:	00c1dd0e 	bge	zero,r3,401d668 <___vfiprintf_internal_r+0xbb0>
 401cef4:	01c00404 	movi	r7,16
 401cef8:	d8801c17 	ldw	r2,112(sp)
 401cefc:	38c3ad0e 	bge	r7,r3,401ddb4 <___vfiprintf_internal_r+0x12fc>
 401cf00:	02810234 	movhi	r10,1032
 401cf04:	52880d04 	addi	r10,r10,8244
 401cf08:	dc002915 	stw	r16,164(sp)
 401cf0c:	d9801b17 	ldw	r6,108(sp)
 401cf10:	da802415 	stw	r10,144(sp)
 401cf14:	03c001c4 	movi	r15,7
 401cf18:	da402515 	stw	r9,148(sp)
 401cf1c:	db802815 	stw	r14,160(sp)
 401cf20:	1821883a 	mov	r16,r3
 401cf24:	00000506 	br	401cf3c <___vfiprintf_internal_r+0x484>
 401cf28:	31400084 	addi	r5,r6,2
 401cf2c:	42000204 	addi	r8,r8,8
 401cf30:	200d883a 	mov	r6,r4
 401cf34:	843ffc04 	addi	r16,r16,-16
 401cf38:	3c000d0e 	bge	r7,r16,401cf70 <___vfiprintf_internal_r+0x4b8>
 401cf3c:	10800404 	addi	r2,r2,16
 401cf40:	31000044 	addi	r4,r6,1
 401cf44:	45800015 	stw	r22,0(r8)
 401cf48:	41c00115 	stw	r7,4(r8)
 401cf4c:	d8801c15 	stw	r2,112(sp)
 401cf50:	d9001b15 	stw	r4,108(sp)
 401cf54:	793ff40e 	bge	r15,r4,401cf28 <__reset+0xfb01bf28>
 401cf58:	1001b51e 	bne	r2,zero,401d630 <___vfiprintf_internal_r+0xb78>
 401cf5c:	843ffc04 	addi	r16,r16,-16
 401cf60:	000d883a 	mov	r6,zero
 401cf64:	01400044 	movi	r5,1
 401cf68:	d811883a 	mov	r8,sp
 401cf6c:	3c3ff316 	blt	r7,r16,401cf3c <__reset+0xfb01bf3c>
 401cf70:	8007883a 	mov	r3,r16
 401cf74:	da402517 	ldw	r9,148(sp)
 401cf78:	db802817 	ldw	r14,160(sp)
 401cf7c:	dc002917 	ldw	r16,164(sp)
 401cf80:	da802417 	ldw	r10,144(sp)
 401cf84:	1885883a 	add	r2,r3,r2
 401cf88:	40c00115 	stw	r3,4(r8)
 401cf8c:	42800015 	stw	r10,0(r8)
 401cf90:	d8801c15 	stw	r2,112(sp)
 401cf94:	d9401b15 	stw	r5,108(sp)
 401cf98:	00c001c4 	movi	r3,7
 401cf9c:	19426016 	blt	r3,r5,401d920 <___vfiprintf_internal_r+0xe68>
 401cfa0:	d8c01d87 	ldb	r3,118(sp)
 401cfa4:	42000204 	addi	r8,r8,8
 401cfa8:	29000044 	addi	r4,r5,1
 401cfac:	1801b31e 	bne	r3,zero,401d67c <___vfiprintf_internal_r+0xbc4>
 401cfb0:	7001c026 	beq	r14,zero,401d6b4 <___vfiprintf_internal_r+0xbfc>
 401cfb4:	d8c01d04 	addi	r3,sp,116
 401cfb8:	10800084 	addi	r2,r2,2
 401cfbc:	40c00015 	stw	r3,0(r8)
 401cfc0:	00c00084 	movi	r3,2
 401cfc4:	40c00115 	stw	r3,4(r8)
 401cfc8:	d8801c15 	stw	r2,112(sp)
 401cfcc:	d9001b15 	stw	r4,108(sp)
 401cfd0:	00c001c4 	movi	r3,7
 401cfd4:	1902650e 	bge	r3,r4,401d96c <___vfiprintf_internal_r+0xeb4>
 401cfd8:	10029a1e 	bne	r2,zero,401da44 <___vfiprintf_internal_r+0xf8c>
 401cfdc:	00c02004 	movi	r3,128
 401cfe0:	01000044 	movi	r4,1
 401cfe4:	000b883a 	mov	r5,zero
 401cfe8:	d811883a 	mov	r8,sp
 401cfec:	e0c1b31e 	bne	fp,r3,401d6bc <___vfiprintf_internal_r+0xc04>
 401cff0:	8cb9c83a 	sub	fp,r17,r18
 401cff4:	0701b10e 	bge	zero,fp,401d6bc <___vfiprintf_internal_r+0xc04>
 401cff8:	01c00404 	movi	r7,16
 401cffc:	3f03890e 	bge	r7,fp,401de24 <___vfiprintf_internal_r+0x136c>
 401d000:	00c10234 	movhi	r3,1032
 401d004:	18c80904 	addi	r3,r3,8228
 401d008:	d8c02415 	stw	r3,144(sp)
 401d00c:	8007883a 	mov	r3,r16
 401d010:	034001c4 	movi	r13,7
 401d014:	e021883a 	mov	r16,fp
 401d018:	da402515 	stw	r9,148(sp)
 401d01c:	1839883a 	mov	fp,r3
 401d020:	00000506 	br	401d038 <___vfiprintf_internal_r+0x580>
 401d024:	29800084 	addi	r6,r5,2
 401d028:	42000204 	addi	r8,r8,8
 401d02c:	180b883a 	mov	r5,r3
 401d030:	843ffc04 	addi	r16,r16,-16
 401d034:	3c000d0e 	bge	r7,r16,401d06c <___vfiprintf_internal_r+0x5b4>
 401d038:	10800404 	addi	r2,r2,16
 401d03c:	28c00044 	addi	r3,r5,1
 401d040:	45c00015 	stw	r23,0(r8)
 401d044:	41c00115 	stw	r7,4(r8)
 401d048:	d8801c15 	stw	r2,112(sp)
 401d04c:	d8c01b15 	stw	r3,108(sp)
 401d050:	68fff40e 	bge	r13,r3,401d024 <__reset+0xfb01c024>
 401d054:	1002241e 	bne	r2,zero,401d8e8 <___vfiprintf_internal_r+0xe30>
 401d058:	843ffc04 	addi	r16,r16,-16
 401d05c:	01800044 	movi	r6,1
 401d060:	000b883a 	mov	r5,zero
 401d064:	d811883a 	mov	r8,sp
 401d068:	3c3ff316 	blt	r7,r16,401d038 <__reset+0xfb01c038>
 401d06c:	da402517 	ldw	r9,148(sp)
 401d070:	e007883a 	mov	r3,fp
 401d074:	8039883a 	mov	fp,r16
 401d078:	1821883a 	mov	r16,r3
 401d07c:	d8c02417 	ldw	r3,144(sp)
 401d080:	1705883a 	add	r2,r2,fp
 401d084:	47000115 	stw	fp,4(r8)
 401d088:	40c00015 	stw	r3,0(r8)
 401d08c:	d8801c15 	stw	r2,112(sp)
 401d090:	d9801b15 	stw	r6,108(sp)
 401d094:	00c001c4 	movi	r3,7
 401d098:	19827616 	blt	r3,r6,401da74 <___vfiprintf_internal_r+0xfbc>
 401d09c:	4cf9c83a 	sub	fp,r9,r19
 401d0a0:	42000204 	addi	r8,r8,8
 401d0a4:	31000044 	addi	r4,r6,1
 401d0a8:	300b883a 	mov	r5,r6
 401d0ac:	07018516 	blt	zero,fp,401d6c4 <___vfiprintf_internal_r+0xc0c>
 401d0b0:	9885883a 	add	r2,r19,r2
 401d0b4:	45400015 	stw	r21,0(r8)
 401d0b8:	44c00115 	stw	r19,4(r8)
 401d0bc:	d8801c15 	stw	r2,112(sp)
 401d0c0:	d9001b15 	stw	r4,108(sp)
 401d0c4:	00c001c4 	movi	r3,7
 401d0c8:	1901dd0e 	bge	r3,r4,401d840 <___vfiprintf_internal_r+0xd88>
 401d0cc:	1002401e 	bne	r2,zero,401d9d0 <___vfiprintf_internal_r+0xf18>
 401d0d0:	d8001b15 	stw	zero,108(sp)
 401d0d4:	a2c0010c 	andi	r11,r20,4
 401d0d8:	58000226 	beq	r11,zero,401d0e4 <___vfiprintf_internal_r+0x62c>
 401d0dc:	8ca7c83a 	sub	r19,r17,r18
 401d0e0:	04c2f216 	blt	zero,r19,401dcac <___vfiprintf_internal_r+0x11f4>
 401d0e4:	8c80010e 	bge	r17,r18,401d0ec <___vfiprintf_internal_r+0x634>
 401d0e8:	9023883a 	mov	r17,r18
 401d0ec:	da802317 	ldw	r10,140(sp)
 401d0f0:	5455883a 	add	r10,r10,r17
 401d0f4:	da802315 	stw	r10,140(sp)
 401d0f8:	d8001b15 	stw	zero,108(sp)
 401d0fc:	d811883a 	mov	r8,sp
 401d100:	003ea206 	br	401cb8c <__reset+0xfb01bb8c>
 401d104:	a5000814 	ori	r20,r20,32
 401d108:	80c00007 	ldb	r3,0(r16)
 401d10c:	003ec906 	br	401cc34 <__reset+0xfb01bc34>
 401d110:	80c00007 	ldb	r3,0(r16)
 401d114:	1b030926 	beq	r3,r12,401dd3c <___vfiprintf_internal_r+0x1284>
 401d118:	a5000414 	ori	r20,r20,16
 401d11c:	003ec506 	br	401cc34 <__reset+0xfb01bc34>
 401d120:	21003fcc 	andi	r4,r4,255
 401d124:	20035e1e 	bne	r4,zero,401dea0 <___vfiprintf_internal_r+0x13e8>
 401d128:	a080080c 	andi	r2,r20,32
 401d12c:	1002a526 	beq	r2,zero,401dbc4 <___vfiprintf_internal_r+0x110c>
 401d130:	da802217 	ldw	r10,136(sp)
 401d134:	50800017 	ldw	r2,0(r10)
 401d138:	da802317 	ldw	r10,140(sp)
 401d13c:	5007d7fa 	srai	r3,r10,31
 401d140:	da802217 	ldw	r10,136(sp)
 401d144:	10c00115 	stw	r3,4(r2)
 401d148:	52800104 	addi	r10,r10,4
 401d14c:	da802215 	stw	r10,136(sp)
 401d150:	da802317 	ldw	r10,140(sp)
 401d154:	12800015 	stw	r10,0(r2)
 401d158:	003e8c06 	br	401cb8c <__reset+0xfb01bb8c>
 401d15c:	21003fcc 	andi	r4,r4,255
 401d160:	2003511e 	bne	r4,zero,401dea8 <___vfiprintf_internal_r+0x13f0>
 401d164:	a080080c 	andi	r2,r20,32
 401d168:	1000a126 	beq	r2,zero,401d3f0 <___vfiprintf_internal_r+0x938>
 401d16c:	da802217 	ldw	r10,136(sp)
 401d170:	d8001d85 	stb	zero,118(sp)
 401d174:	50800204 	addi	r2,r10,8
 401d178:	54800017 	ldw	r18,0(r10)
 401d17c:	54c00117 	ldw	r19,4(r10)
 401d180:	4802b416 	blt	r9,zero,401dc54 <___vfiprintf_internal_r+0x119c>
 401d184:	013fdfc4 	movi	r4,-129
 401d188:	94c6b03a 	or	r3,r18,r19
 401d18c:	d8802215 	stw	r2,136(sp)
 401d190:	a128703a 	and	r20,r20,r4
 401d194:	1800a226 	beq	r3,zero,401d420 <___vfiprintf_internal_r+0x968>
 401d198:	0039883a 	mov	fp,zero
 401d19c:	dd401a04 	addi	r21,sp,104
 401d1a0:	9006d0fa 	srli	r3,r18,3
 401d1a4:	9808977a 	slli	r4,r19,29
 401d1a8:	9826d0fa 	srli	r19,r19,3
 401d1ac:	948001cc 	andi	r18,r18,7
 401d1b0:	90800c04 	addi	r2,r18,48
 401d1b4:	ad7fffc4 	addi	r21,r21,-1
 401d1b8:	20e4b03a 	or	r18,r4,r3
 401d1bc:	a8800005 	stb	r2,0(r21)
 401d1c0:	94c6b03a 	or	r3,r18,r19
 401d1c4:	183ff61e 	bne	r3,zero,401d1a0 <__reset+0xfb01c1a0>
 401d1c8:	a0c0004c 	andi	r3,r20,1
 401d1cc:	18005926 	beq	r3,zero,401d334 <___vfiprintf_internal_r+0x87c>
 401d1d0:	10803fcc 	andi	r2,r2,255
 401d1d4:	1080201c 	xori	r2,r2,128
 401d1d8:	10bfe004 	addi	r2,r2,-128
 401d1dc:	00c00c04 	movi	r3,48
 401d1e0:	10c05426 	beq	r2,r3,401d334 <___vfiprintf_internal_r+0x87c>
 401d1e4:	da801e17 	ldw	r10,120(sp)
 401d1e8:	a8bfffc4 	addi	r2,r21,-1
 401d1ec:	a8ffffc5 	stb	r3,-1(r21)
 401d1f0:	50a7c83a 	sub	r19,r10,r2
 401d1f4:	102b883a 	mov	r21,r2
 401d1f8:	003f2f06 	br	401ceb8 <__reset+0xfb01beb8>
 401d1fc:	21003fcc 	andi	r4,r4,255
 401d200:	2003421e 	bne	r4,zero,401df0c <___vfiprintf_internal_r+0x1454>
 401d204:	00810234 	movhi	r2,1032
 401d208:	10879904 	addi	r2,r2,7780
 401d20c:	d8802615 	stw	r2,152(sp)
 401d210:	a080080c 	andi	r2,r20,32
 401d214:	1000aa26 	beq	r2,zero,401d4c0 <___vfiprintf_internal_r+0xa08>
 401d218:	da802217 	ldw	r10,136(sp)
 401d21c:	54800017 	ldw	r18,0(r10)
 401d220:	54c00117 	ldw	r19,4(r10)
 401d224:	52800204 	addi	r10,r10,8
 401d228:	da802215 	stw	r10,136(sp)
 401d22c:	a080004c 	andi	r2,r20,1
 401d230:	1001d226 	beq	r2,zero,401d97c <___vfiprintf_internal_r+0xec4>
 401d234:	94c4b03a 	or	r2,r18,r19
 401d238:	1002351e 	bne	r2,zero,401db10 <___vfiprintf_internal_r+0x1058>
 401d23c:	d8001d85 	stb	zero,118(sp)
 401d240:	48022216 	blt	r9,zero,401dacc <___vfiprintf_internal_r+0x1014>
 401d244:	00bfdfc4 	movi	r2,-129
 401d248:	a0a8703a 	and	r20,r20,r2
 401d24c:	003f1506 	br	401cea4 <__reset+0xfb01bea4>
 401d250:	da802217 	ldw	r10,136(sp)
 401d254:	04800044 	movi	r18,1
 401d258:	d8001d85 	stb	zero,118(sp)
 401d25c:	50800017 	ldw	r2,0(r10)
 401d260:	52800104 	addi	r10,r10,4
 401d264:	da802215 	stw	r10,136(sp)
 401d268:	d8801005 	stb	r2,64(sp)
 401d26c:	9027883a 	mov	r19,r18
 401d270:	dd401004 	addi	r21,sp,64
 401d274:	0013883a 	mov	r9,zero
 401d278:	003f1706 	br	401ced8 <__reset+0xfb01bed8>
 401d27c:	21003fcc 	andi	r4,r4,255
 401d280:	2003201e 	bne	r4,zero,401df04 <___vfiprintf_internal_r+0x144c>
 401d284:	a080080c 	andi	r2,r20,32
 401d288:	10004b26 	beq	r2,zero,401d3b8 <___vfiprintf_internal_r+0x900>
 401d28c:	da802217 	ldw	r10,136(sp)
 401d290:	50800117 	ldw	r2,4(r10)
 401d294:	54800017 	ldw	r18,0(r10)
 401d298:	52800204 	addi	r10,r10,8
 401d29c:	da802215 	stw	r10,136(sp)
 401d2a0:	1027883a 	mov	r19,r2
 401d2a4:	10022c16 	blt	r2,zero,401db58 <___vfiprintf_internal_r+0x10a0>
 401d2a8:	df001d83 	ldbu	fp,118(sp)
 401d2ac:	48007216 	blt	r9,zero,401d478 <___vfiprintf_internal_r+0x9c0>
 401d2b0:	00ffdfc4 	movi	r3,-129
 401d2b4:	94c4b03a 	or	r2,r18,r19
 401d2b8:	a0e8703a 	and	r20,r20,r3
 401d2bc:	1000cc26 	beq	r2,zero,401d5f0 <___vfiprintf_internal_r+0xb38>
 401d2c0:	98021026 	beq	r19,zero,401db04 <___vfiprintf_internal_r+0x104c>
 401d2c4:	dc402415 	stw	r17,144(sp)
 401d2c8:	dc002515 	stw	r16,148(sp)
 401d2cc:	9823883a 	mov	r17,r19
 401d2d0:	9021883a 	mov	r16,r18
 401d2d4:	dd401a04 	addi	r21,sp,104
 401d2d8:	4825883a 	mov	r18,r9
 401d2dc:	4027883a 	mov	r19,r8
 401d2e0:	8009883a 	mov	r4,r16
 401d2e4:	880b883a 	mov	r5,r17
 401d2e8:	01800284 	movi	r6,10
 401d2ec:	000f883a 	mov	r7,zero
 401d2f0:	401ee980 	call	401ee98 <__umoddi3>
 401d2f4:	10800c04 	addi	r2,r2,48
 401d2f8:	ad7fffc4 	addi	r21,r21,-1
 401d2fc:	8009883a 	mov	r4,r16
 401d300:	880b883a 	mov	r5,r17
 401d304:	a8800005 	stb	r2,0(r21)
 401d308:	01800284 	movi	r6,10
 401d30c:	000f883a 	mov	r7,zero
 401d310:	401e9200 	call	401e920 <__udivdi3>
 401d314:	1021883a 	mov	r16,r2
 401d318:	10c4b03a 	or	r2,r2,r3
 401d31c:	1823883a 	mov	r17,r3
 401d320:	103fef1e 	bne	r2,zero,401d2e0 <__reset+0xfb01c2e0>
 401d324:	dc402417 	ldw	r17,144(sp)
 401d328:	dc002517 	ldw	r16,148(sp)
 401d32c:	9013883a 	mov	r9,r18
 401d330:	9811883a 	mov	r8,r19
 401d334:	da801e17 	ldw	r10,120(sp)
 401d338:	5567c83a 	sub	r19,r10,r21
 401d33c:	003ede06 	br	401ceb8 <__reset+0xfb01beb8>
 401d340:	38803fcc 	andi	r2,r7,255
 401d344:	1080201c 	xori	r2,r2,128
 401d348:	10bfe004 	addi	r2,r2,-128
 401d34c:	1002371e 	bne	r2,zero,401dc2c <___vfiprintf_internal_r+0x1174>
 401d350:	01000044 	movi	r4,1
 401d354:	01c00804 	movi	r7,32
 401d358:	80c00007 	ldb	r3,0(r16)
 401d35c:	003e3506 	br	401cc34 <__reset+0xfb01bc34>
 401d360:	a5000054 	ori	r20,r20,1
 401d364:	80c00007 	ldb	r3,0(r16)
 401d368:	003e3206 	br	401cc34 <__reset+0xfb01bc34>
 401d36c:	a5002014 	ori	r20,r20,128
 401d370:	80c00007 	ldb	r3,0(r16)
 401d374:	003e2f06 	br	401cc34 <__reset+0xfb01bc34>
 401d378:	8015883a 	mov	r10,r16
 401d37c:	0023883a 	mov	r17,zero
 401d380:	18bff404 	addi	r2,r3,-48
 401d384:	50c00007 	ldb	r3,0(r10)
 401d388:	8c4002a4 	muli	r17,r17,10
 401d38c:	84000044 	addi	r16,r16,1
 401d390:	8015883a 	mov	r10,r16
 401d394:	1463883a 	add	r17,r2,r17
 401d398:	18bff404 	addi	r2,r3,-48
 401d39c:	30bff92e 	bgeu	r6,r2,401d384 <__reset+0xfb01c384>
 401d3a0:	003e2506 	br	401cc38 <__reset+0xfb01bc38>
 401d3a4:	21003fcc 	andi	r4,r4,255
 401d3a8:	2002d41e 	bne	r4,zero,401defc <___vfiprintf_internal_r+0x1444>
 401d3ac:	a5000414 	ori	r20,r20,16
 401d3b0:	a080080c 	andi	r2,r20,32
 401d3b4:	103fb51e 	bne	r2,zero,401d28c <__reset+0xfb01c28c>
 401d3b8:	a080040c 	andi	r2,r20,16
 401d3bc:	1001f826 	beq	r2,zero,401dba0 <___vfiprintf_internal_r+0x10e8>
 401d3c0:	da802217 	ldw	r10,136(sp)
 401d3c4:	54800017 	ldw	r18,0(r10)
 401d3c8:	52800104 	addi	r10,r10,4
 401d3cc:	da802215 	stw	r10,136(sp)
 401d3d0:	9027d7fa 	srai	r19,r18,31
 401d3d4:	9805883a 	mov	r2,r19
 401d3d8:	003fb206 	br	401d2a4 <__reset+0xfb01c2a4>
 401d3dc:	21003fcc 	andi	r4,r4,255
 401d3e0:	2002c41e 	bne	r4,zero,401def4 <___vfiprintf_internal_r+0x143c>
 401d3e4:	a5000414 	ori	r20,r20,16
 401d3e8:	a080080c 	andi	r2,r20,32
 401d3ec:	103f5f1e 	bne	r2,zero,401d16c <__reset+0xfb01c16c>
 401d3f0:	a080040c 	andi	r2,r20,16
 401d3f4:	10020f26 	beq	r2,zero,401dc34 <___vfiprintf_internal_r+0x117c>
 401d3f8:	da802217 	ldw	r10,136(sp)
 401d3fc:	d8001d85 	stb	zero,118(sp)
 401d400:	0027883a 	mov	r19,zero
 401d404:	50800104 	addi	r2,r10,4
 401d408:	54800017 	ldw	r18,0(r10)
 401d40c:	48021116 	blt	r9,zero,401dc54 <___vfiprintf_internal_r+0x119c>
 401d410:	00ffdfc4 	movi	r3,-129
 401d414:	d8802215 	stw	r2,136(sp)
 401d418:	a0e8703a 	and	r20,r20,r3
 401d41c:	903f5e1e 	bne	r18,zero,401d198 <__reset+0xfb01c198>
 401d420:	0039883a 	mov	fp,zero
 401d424:	4802a626 	beq	r9,zero,401dec0 <___vfiprintf_internal_r+0x1408>
 401d428:	0025883a 	mov	r18,zero
 401d42c:	0027883a 	mov	r19,zero
 401d430:	003f5a06 	br	401d19c <__reset+0xfb01c19c>
 401d434:	21003fcc 	andi	r4,r4,255
 401d438:	20029f1e 	bne	r4,zero,401deb8 <___vfiprintf_internal_r+0x1400>
 401d43c:	a5000414 	ori	r20,r20,16
 401d440:	a080080c 	andi	r2,r20,32
 401d444:	10005e1e 	bne	r2,zero,401d5c0 <___vfiprintf_internal_r+0xb08>
 401d448:	a080040c 	andi	r2,r20,16
 401d44c:	1001a21e 	bne	r2,zero,401dad8 <___vfiprintf_internal_r+0x1020>
 401d450:	a080100c 	andi	r2,r20,64
 401d454:	d8001d85 	stb	zero,118(sp)
 401d458:	da802217 	ldw	r10,136(sp)
 401d45c:	1002231e 	bne	r2,zero,401dcec <___vfiprintf_internal_r+0x1234>
 401d460:	50800104 	addi	r2,r10,4
 401d464:	54800017 	ldw	r18,0(r10)
 401d468:	0027883a 	mov	r19,zero
 401d46c:	4801a00e 	bge	r9,zero,401daf0 <___vfiprintf_internal_r+0x1038>
 401d470:	d8802215 	stw	r2,136(sp)
 401d474:	0039883a 	mov	fp,zero
 401d478:	94c4b03a 	or	r2,r18,r19
 401d47c:	103f901e 	bne	r2,zero,401d2c0 <__reset+0xfb01c2c0>
 401d480:	00800044 	movi	r2,1
 401d484:	10803fcc 	andi	r2,r2,255
 401d488:	00c00044 	movi	r3,1
 401d48c:	10c05926 	beq	r2,r3,401d5f4 <___vfiprintf_internal_r+0xb3c>
 401d490:	00c00084 	movi	r3,2
 401d494:	10ffe41e 	bne	r2,r3,401d428 <__reset+0xfb01c428>
 401d498:	0025883a 	mov	r18,zero
 401d49c:	0027883a 	mov	r19,zero
 401d4a0:	00013d06 	br	401d998 <___vfiprintf_internal_r+0xee0>
 401d4a4:	21003fcc 	andi	r4,r4,255
 401d4a8:	2002811e 	bne	r4,zero,401deb0 <___vfiprintf_internal_r+0x13f8>
 401d4ac:	00810234 	movhi	r2,1032
 401d4b0:	10879404 	addi	r2,r2,7760
 401d4b4:	d8802615 	stw	r2,152(sp)
 401d4b8:	a080080c 	andi	r2,r20,32
 401d4bc:	103f561e 	bne	r2,zero,401d218 <__reset+0xfb01c218>
 401d4c0:	a080040c 	andi	r2,r20,16
 401d4c4:	1001d126 	beq	r2,zero,401dc0c <___vfiprintf_internal_r+0x1154>
 401d4c8:	da802217 	ldw	r10,136(sp)
 401d4cc:	0027883a 	mov	r19,zero
 401d4d0:	54800017 	ldw	r18,0(r10)
 401d4d4:	52800104 	addi	r10,r10,4
 401d4d8:	da802215 	stw	r10,136(sp)
 401d4dc:	003f5306 	br	401d22c <__reset+0xfb01c22c>
 401d4e0:	da802217 	ldw	r10,136(sp)
 401d4e4:	d8001d85 	stb	zero,118(sp)
 401d4e8:	55400017 	ldw	r21,0(r10)
 401d4ec:	50c00104 	addi	r3,r10,4
 401d4f0:	a8024226 	beq	r21,zero,401ddfc <___vfiprintf_internal_r+0x1344>
 401d4f4:	48021816 	blt	r9,zero,401dd58 <___vfiprintf_internal_r+0x12a0>
 401d4f8:	480d883a 	mov	r6,r9
 401d4fc:	000b883a 	mov	r5,zero
 401d500:	a809883a 	mov	r4,r21
 401d504:	d8c02a15 	stw	r3,168(sp)
 401d508:	da002b15 	stw	r8,172(sp)
 401d50c:	da402c15 	stw	r9,176(sp)
 401d510:	4019be00 	call	4019be0 <memchr>
 401d514:	d8c02a17 	ldw	r3,168(sp)
 401d518:	da002b17 	ldw	r8,172(sp)
 401d51c:	da402c17 	ldw	r9,176(sp)
 401d520:	10024826 	beq	r2,zero,401de44 <___vfiprintf_internal_r+0x138c>
 401d524:	1567c83a 	sub	r19,r2,r21
 401d528:	df001d83 	ldbu	fp,118(sp)
 401d52c:	d8c02215 	stw	r3,136(sp)
 401d530:	0013883a 	mov	r9,zero
 401d534:	003e6006 	br	401ceb8 <__reset+0xfb01beb8>
 401d538:	21003fcc 	andi	r4,r4,255
 401d53c:	203fc026 	beq	r4,zero,401d440 <__reset+0xfb01c440>
 401d540:	d9c01d85 	stb	r7,118(sp)
 401d544:	003fbe06 	br	401d440 <__reset+0xfb01c440>
 401d548:	da802217 	ldw	r10,136(sp)
 401d54c:	54400017 	ldw	r17,0(r10)
 401d550:	50800104 	addi	r2,r10,4
 401d554:	883e3b16 	blt	r17,zero,401ce44 <__reset+0xfb01be44>
 401d558:	d8802215 	stw	r2,136(sp)
 401d55c:	80c00007 	ldb	r3,0(r16)
 401d560:	003db406 	br	401cc34 <__reset+0xfb01bc34>
 401d564:	01000044 	movi	r4,1
 401d568:	01c00ac4 	movi	r7,43
 401d56c:	80c00007 	ldb	r3,0(r16)
 401d570:	003db006 	br	401cc34 <__reset+0xfb01bc34>
 401d574:	80c00007 	ldb	r3,0(r16)
 401d578:	82800044 	addi	r10,r16,1
 401d57c:	1b423c26 	beq	r3,r13,401de70 <___vfiprintf_internal_r+0x13b8>
 401d580:	18bff404 	addi	r2,r3,-48
 401d584:	0013883a 	mov	r9,zero
 401d588:	30822b36 	bltu	r6,r2,401de38 <___vfiprintf_internal_r+0x1380>
 401d58c:	50c00007 	ldb	r3,0(r10)
 401d590:	4a4002a4 	muli	r9,r9,10
 401d594:	54000044 	addi	r16,r10,1
 401d598:	8015883a 	mov	r10,r16
 401d59c:	4893883a 	add	r9,r9,r2
 401d5a0:	18bff404 	addi	r2,r3,-48
 401d5a4:	30bff92e 	bgeu	r6,r2,401d58c <__reset+0xfb01c58c>
 401d5a8:	483da30e 	bge	r9,zero,401cc38 <__reset+0xfb01bc38>
 401d5ac:	027fffc4 	movi	r9,-1
 401d5b0:	003da106 	br	401cc38 <__reset+0xfb01bc38>
 401d5b4:	a5001014 	ori	r20,r20,64
 401d5b8:	80c00007 	ldb	r3,0(r16)
 401d5bc:	003d9d06 	br	401cc34 <__reset+0xfb01bc34>
 401d5c0:	da802217 	ldw	r10,136(sp)
 401d5c4:	d8001d85 	stb	zero,118(sp)
 401d5c8:	50c00204 	addi	r3,r10,8
 401d5cc:	54800017 	ldw	r18,0(r10)
 401d5d0:	54c00117 	ldw	r19,4(r10)
 401d5d4:	4801ca16 	blt	r9,zero,401dd00 <___vfiprintf_internal_r+0x1248>
 401d5d8:	013fdfc4 	movi	r4,-129
 401d5dc:	94c4b03a 	or	r2,r18,r19
 401d5e0:	d8c02215 	stw	r3,136(sp)
 401d5e4:	a128703a 	and	r20,r20,r4
 401d5e8:	0039883a 	mov	fp,zero
 401d5ec:	103f341e 	bne	r2,zero,401d2c0 <__reset+0xfb01c2c0>
 401d5f0:	483e2e26 	beq	r9,zero,401ceac <__reset+0xfb01beac>
 401d5f4:	0025883a 	mov	r18,zero
 401d5f8:	94800c04 	addi	r18,r18,48
 401d5fc:	dc8019c5 	stb	r18,103(sp)
 401d600:	dcc02717 	ldw	r19,156(sp)
 401d604:	dd4019c4 	addi	r21,sp,103
 401d608:	003e2b06 	br	401ceb8 <__reset+0xfb01beb8>
 401d60c:	21003fcc 	andi	r4,r4,255
 401d610:	2002361e 	bne	r4,zero,401deec <___vfiprintf_internal_r+0x1434>
 401d614:	1801c126 	beq	r3,zero,401dd1c <___vfiprintf_internal_r+0x1264>
 401d618:	04800044 	movi	r18,1
 401d61c:	d8c01005 	stb	r3,64(sp)
 401d620:	d8001d85 	stb	zero,118(sp)
 401d624:	9027883a 	mov	r19,r18
 401d628:	dd401004 	addi	r21,sp,64
 401d62c:	003f1106 	br	401d274 <__reset+0xfb01c274>
 401d630:	d9402117 	ldw	r5,132(sp)
 401d634:	d9002017 	ldw	r4,128(sp)
 401d638:	d9801a04 	addi	r6,sp,104
 401d63c:	d9c02b15 	stw	r7,172(sp)
 401d640:	dbc02a15 	stw	r15,168(sp)
 401d644:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d648:	d9c02b17 	ldw	r7,172(sp)
 401d64c:	dbc02a17 	ldw	r15,168(sp)
 401d650:	10006d1e 	bne	r2,zero,401d808 <___vfiprintf_internal_r+0xd50>
 401d654:	d9801b17 	ldw	r6,108(sp)
 401d658:	d8801c17 	ldw	r2,112(sp)
 401d65c:	d811883a 	mov	r8,sp
 401d660:	31400044 	addi	r5,r6,1
 401d664:	003e3306 	br	401cf34 <__reset+0xfb01bf34>
 401d668:	d9401b17 	ldw	r5,108(sp)
 401d66c:	d8801c17 	ldw	r2,112(sp)
 401d670:	29000044 	addi	r4,r5,1
 401d674:	d8c01d87 	ldb	r3,118(sp)
 401d678:	183e4d26 	beq	r3,zero,401cfb0 <__reset+0xfb01bfb0>
 401d67c:	00c00044 	movi	r3,1
 401d680:	d9401d84 	addi	r5,sp,118
 401d684:	10c5883a 	add	r2,r2,r3
 401d688:	41400015 	stw	r5,0(r8)
 401d68c:	40c00115 	stw	r3,4(r8)
 401d690:	d8801c15 	stw	r2,112(sp)
 401d694:	d9001b15 	stw	r4,108(sp)
 401d698:	014001c4 	movi	r5,7
 401d69c:	2900a90e 	bge	r5,r4,401d944 <___vfiprintf_internal_r+0xe8c>
 401d6a0:	1000da1e 	bne	r2,zero,401da0c <___vfiprintf_internal_r+0xf54>
 401d6a4:	7000ab1e 	bne	r14,zero,401d954 <___vfiprintf_internal_r+0xe9c>
 401d6a8:	000b883a 	mov	r5,zero
 401d6ac:	1809883a 	mov	r4,r3
 401d6b0:	d811883a 	mov	r8,sp
 401d6b4:	00c02004 	movi	r3,128
 401d6b8:	e0fe4d26 	beq	fp,r3,401cff0 <__reset+0xfb01bff0>
 401d6bc:	4cf9c83a 	sub	fp,r9,r19
 401d6c0:	073e7b0e 	bge	zero,fp,401d0b0 <__reset+0xfb01c0b0>
 401d6c4:	01c00404 	movi	r7,16
 401d6c8:	3f01900e 	bge	r7,fp,401dd0c <___vfiprintf_internal_r+0x1254>
 401d6cc:	00c10234 	movhi	r3,1032
 401d6d0:	18c80904 	addi	r3,r3,8228
 401d6d4:	d8c02415 	stw	r3,144(sp)
 401d6d8:	034001c4 	movi	r13,7
 401d6dc:	00000506 	br	401d6f4 <___vfiprintf_internal_r+0xc3c>
 401d6e0:	29000084 	addi	r4,r5,2
 401d6e4:	42000204 	addi	r8,r8,8
 401d6e8:	180b883a 	mov	r5,r3
 401d6ec:	e73ffc04 	addi	fp,fp,-16
 401d6f0:	3f000d0e 	bge	r7,fp,401d728 <___vfiprintf_internal_r+0xc70>
 401d6f4:	10800404 	addi	r2,r2,16
 401d6f8:	28c00044 	addi	r3,r5,1
 401d6fc:	45c00015 	stw	r23,0(r8)
 401d700:	41c00115 	stw	r7,4(r8)
 401d704:	d8801c15 	stw	r2,112(sp)
 401d708:	d8c01b15 	stw	r3,108(sp)
 401d70c:	68fff40e 	bge	r13,r3,401d6e0 <__reset+0xfb01c6e0>
 401d710:	1000101e 	bne	r2,zero,401d754 <___vfiprintf_internal_r+0xc9c>
 401d714:	e73ffc04 	addi	fp,fp,-16
 401d718:	01000044 	movi	r4,1
 401d71c:	000b883a 	mov	r5,zero
 401d720:	d811883a 	mov	r8,sp
 401d724:	3f3ff316 	blt	r7,fp,401d6f4 <__reset+0xfb01c6f4>
 401d728:	da802417 	ldw	r10,144(sp)
 401d72c:	1705883a 	add	r2,r2,fp
 401d730:	47000115 	stw	fp,4(r8)
 401d734:	42800015 	stw	r10,0(r8)
 401d738:	d8801c15 	stw	r2,112(sp)
 401d73c:	d9001b15 	stw	r4,108(sp)
 401d740:	00c001c4 	movi	r3,7
 401d744:	19003616 	blt	r3,r4,401d820 <___vfiprintf_internal_r+0xd68>
 401d748:	42000204 	addi	r8,r8,8
 401d74c:	21000044 	addi	r4,r4,1
 401d750:	003e5706 	br	401d0b0 <__reset+0xfb01c0b0>
 401d754:	d9402117 	ldw	r5,132(sp)
 401d758:	d9002017 	ldw	r4,128(sp)
 401d75c:	d9801a04 	addi	r6,sp,104
 401d760:	d9c02b15 	stw	r7,172(sp)
 401d764:	db402a15 	stw	r13,168(sp)
 401d768:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d76c:	d9c02b17 	ldw	r7,172(sp)
 401d770:	db402a17 	ldw	r13,168(sp)
 401d774:	1000241e 	bne	r2,zero,401d808 <___vfiprintf_internal_r+0xd50>
 401d778:	d9401b17 	ldw	r5,108(sp)
 401d77c:	d8801c17 	ldw	r2,112(sp)
 401d780:	d811883a 	mov	r8,sp
 401d784:	29000044 	addi	r4,r5,1
 401d788:	003fd806 	br	401d6ec <__reset+0xfb01c6ec>
 401d78c:	d9401b17 	ldw	r5,108(sp)
 401d790:	00c10234 	movhi	r3,1032
 401d794:	18c80d04 	addi	r3,r3,8244
 401d798:	d8c02415 	stw	r3,144(sp)
 401d79c:	29400044 	addi	r5,r5,1
 401d7a0:	d8c02417 	ldw	r3,144(sp)
 401d7a4:	14c5883a 	add	r2,r2,r19
 401d7a8:	44c00115 	stw	r19,4(r8)
 401d7ac:	40c00015 	stw	r3,0(r8)
 401d7b0:	d8801c15 	stw	r2,112(sp)
 401d7b4:	d9401b15 	stw	r5,108(sp)
 401d7b8:	00c001c4 	movi	r3,7
 401d7bc:	1940070e 	bge	r3,r5,401d7dc <___vfiprintf_internal_r+0xd24>
 401d7c0:	103e4826 	beq	r2,zero,401d0e4 <__reset+0xfb01c0e4>
 401d7c4:	d9402117 	ldw	r5,132(sp)
 401d7c8:	d9002017 	ldw	r4,128(sp)
 401d7cc:	d9801a04 	addi	r6,sp,104
 401d7d0:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d7d4:	10000c1e 	bne	r2,zero,401d808 <___vfiprintf_internal_r+0xd50>
 401d7d8:	d8801c17 	ldw	r2,112(sp)
 401d7dc:	8c80010e 	bge	r17,r18,401d7e4 <___vfiprintf_internal_r+0xd2c>
 401d7e0:	9023883a 	mov	r17,r18
 401d7e4:	da802317 	ldw	r10,140(sp)
 401d7e8:	5455883a 	add	r10,r10,r17
 401d7ec:	da802315 	stw	r10,140(sp)
 401d7f0:	103e4126 	beq	r2,zero,401d0f8 <__reset+0xfb01c0f8>
 401d7f4:	d9402117 	ldw	r5,132(sp)
 401d7f8:	d9002017 	ldw	r4,128(sp)
 401d7fc:	d9801a04 	addi	r6,sp,104
 401d800:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d804:	103e3c26 	beq	r2,zero,401d0f8 <__reset+0xfb01c0f8>
 401d808:	dd002117 	ldw	r20,132(sp)
 401d80c:	a080030b 	ldhu	r2,12(r20)
 401d810:	1080100c 	andi	r2,r2,64
 401d814:	1001231e 	bne	r2,zero,401dca4 <___vfiprintf_internal_r+0x11ec>
 401d818:	d8802317 	ldw	r2,140(sp)
 401d81c:	003d7b06 	br	401ce0c <__reset+0xfb01be0c>
 401d820:	1000991e 	bne	r2,zero,401da88 <___vfiprintf_internal_r+0xfd0>
 401d824:	00c00044 	movi	r3,1
 401d828:	9805883a 	mov	r2,r19
 401d82c:	dd400015 	stw	r21,0(sp)
 401d830:	dcc00115 	stw	r19,4(sp)
 401d834:	dcc01c15 	stw	r19,112(sp)
 401d838:	d8c01b15 	stw	r3,108(sp)
 401d83c:	d811883a 	mov	r8,sp
 401d840:	42000204 	addi	r8,r8,8
 401d844:	a2c0010c 	andi	r11,r20,4
 401d848:	583fe426 	beq	r11,zero,401d7dc <__reset+0xfb01c7dc>
 401d84c:	8ca7c83a 	sub	r19,r17,r18
 401d850:	04ffe20e 	bge	zero,r19,401d7dc <__reset+0xfb01c7dc>
 401d854:	01c00404 	movi	r7,16
 401d858:	3cffcc0e 	bge	r7,r19,401d78c <__reset+0xfb01c78c>
 401d85c:	02810234 	movhi	r10,1032
 401d860:	52880d04 	addi	r10,r10,8244
 401d864:	d9001b17 	ldw	r4,108(sp)
 401d868:	da802415 	stw	r10,144(sp)
 401d86c:	382b883a 	mov	r21,r7
 401d870:	050001c4 	movi	r20,7
 401d874:	df002017 	ldw	fp,128(sp)
 401d878:	00000506 	br	401d890 <___vfiprintf_internal_r+0xdd8>
 401d87c:	21400084 	addi	r5,r4,2
 401d880:	42000204 	addi	r8,r8,8
 401d884:	1809883a 	mov	r4,r3
 401d888:	9cfffc04 	addi	r19,r19,-16
 401d88c:	acffc40e 	bge	r21,r19,401d7a0 <__reset+0xfb01c7a0>
 401d890:	10800404 	addi	r2,r2,16
 401d894:	20c00044 	addi	r3,r4,1
 401d898:	45800015 	stw	r22,0(r8)
 401d89c:	45400115 	stw	r21,4(r8)
 401d8a0:	d8801c15 	stw	r2,112(sp)
 401d8a4:	d8c01b15 	stw	r3,108(sp)
 401d8a8:	a0fff40e 	bge	r20,r3,401d87c <__reset+0xfb01c87c>
 401d8ac:	1000041e 	bne	r2,zero,401d8c0 <___vfiprintf_internal_r+0xe08>
 401d8b0:	01400044 	movi	r5,1
 401d8b4:	0009883a 	mov	r4,zero
 401d8b8:	d811883a 	mov	r8,sp
 401d8bc:	003ff206 	br	401d888 <__reset+0xfb01c888>
 401d8c0:	d9402117 	ldw	r5,132(sp)
 401d8c4:	d9801a04 	addi	r6,sp,104
 401d8c8:	e009883a 	mov	r4,fp
 401d8cc:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d8d0:	103fcd1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401d8d4:	d9001b17 	ldw	r4,108(sp)
 401d8d8:	d8801c17 	ldw	r2,112(sp)
 401d8dc:	d811883a 	mov	r8,sp
 401d8e0:	21400044 	addi	r5,r4,1
 401d8e4:	003fe806 	br	401d888 <__reset+0xfb01c888>
 401d8e8:	d9402117 	ldw	r5,132(sp)
 401d8ec:	d9002017 	ldw	r4,128(sp)
 401d8f0:	d9801a04 	addi	r6,sp,104
 401d8f4:	d9c02b15 	stw	r7,172(sp)
 401d8f8:	db402a15 	stw	r13,168(sp)
 401d8fc:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d900:	d9c02b17 	ldw	r7,172(sp)
 401d904:	db402a17 	ldw	r13,168(sp)
 401d908:	103fbf1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401d90c:	d9401b17 	ldw	r5,108(sp)
 401d910:	d8801c17 	ldw	r2,112(sp)
 401d914:	d811883a 	mov	r8,sp
 401d918:	29800044 	addi	r6,r5,1
 401d91c:	003dc406 	br	401d030 <__reset+0xfb01c030>
 401d920:	1000d21e 	bne	r2,zero,401dc6c <___vfiprintf_internal_r+0x11b4>
 401d924:	d8c01d87 	ldb	r3,118(sp)
 401d928:	18009526 	beq	r3,zero,401db80 <___vfiprintf_internal_r+0x10c8>
 401d92c:	00800044 	movi	r2,1
 401d930:	d8c01d84 	addi	r3,sp,118
 401d934:	1009883a 	mov	r4,r2
 401d938:	d8c00015 	stw	r3,0(sp)
 401d93c:	d8800115 	stw	r2,4(sp)
 401d940:	d811883a 	mov	r8,sp
 401d944:	200b883a 	mov	r5,r4
 401d948:	42000204 	addi	r8,r8,8
 401d94c:	21000044 	addi	r4,r4,1
 401d950:	003d9706 	br	401cfb0 <__reset+0xfb01bfb0>
 401d954:	d9001d04 	addi	r4,sp,116
 401d958:	00800084 	movi	r2,2
 401d95c:	d9000015 	stw	r4,0(sp)
 401d960:	d8800115 	stw	r2,4(sp)
 401d964:	1809883a 	mov	r4,r3
 401d968:	d811883a 	mov	r8,sp
 401d96c:	200b883a 	mov	r5,r4
 401d970:	42000204 	addi	r8,r8,8
 401d974:	21000044 	addi	r4,r4,1
 401d978:	003f4e06 	br	401d6b4 <__reset+0xfb01c6b4>
 401d97c:	d8001d85 	stb	zero,118(sp)
 401d980:	48005016 	blt	r9,zero,401dac4 <___vfiprintf_internal_r+0x100c>
 401d984:	00ffdfc4 	movi	r3,-129
 401d988:	94c4b03a 	or	r2,r18,r19
 401d98c:	a0e8703a 	and	r20,r20,r3
 401d990:	103d4426 	beq	r2,zero,401cea4 <__reset+0xfb01bea4>
 401d994:	0039883a 	mov	fp,zero
 401d998:	d9002617 	ldw	r4,152(sp)
 401d99c:	dd401a04 	addi	r21,sp,104
 401d9a0:	908003cc 	andi	r2,r18,15
 401d9a4:	9806973a 	slli	r3,r19,28
 401d9a8:	2085883a 	add	r2,r4,r2
 401d9ac:	9024d13a 	srli	r18,r18,4
 401d9b0:	10800003 	ldbu	r2,0(r2)
 401d9b4:	9826d13a 	srli	r19,r19,4
 401d9b8:	ad7fffc4 	addi	r21,r21,-1
 401d9bc:	1ca4b03a 	or	r18,r3,r18
 401d9c0:	a8800005 	stb	r2,0(r21)
 401d9c4:	94c4b03a 	or	r2,r18,r19
 401d9c8:	103ff51e 	bne	r2,zero,401d9a0 <__reset+0xfb01c9a0>
 401d9cc:	003e5906 	br	401d334 <__reset+0xfb01c334>
 401d9d0:	d9402117 	ldw	r5,132(sp)
 401d9d4:	d9002017 	ldw	r4,128(sp)
 401d9d8:	d9801a04 	addi	r6,sp,104
 401d9dc:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401d9e0:	103f891e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401d9e4:	d8801c17 	ldw	r2,112(sp)
 401d9e8:	d811883a 	mov	r8,sp
 401d9ec:	003f9506 	br	401d844 <__reset+0xfb01c844>
 401d9f0:	d9402117 	ldw	r5,132(sp)
 401d9f4:	d9002017 	ldw	r4,128(sp)
 401d9f8:	d9801a04 	addi	r6,sp,104
 401d9fc:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401da00:	103f811e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401da04:	d811883a 	mov	r8,sp
 401da08:	003ced06 	br	401cdc0 <__reset+0xfb01bdc0>
 401da0c:	d9402117 	ldw	r5,132(sp)
 401da10:	d9002017 	ldw	r4,128(sp)
 401da14:	d9801a04 	addi	r6,sp,104
 401da18:	da402c15 	stw	r9,176(sp)
 401da1c:	db802a15 	stw	r14,168(sp)
 401da20:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401da24:	da402c17 	ldw	r9,176(sp)
 401da28:	db802a17 	ldw	r14,168(sp)
 401da2c:	103f761e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401da30:	d9401b17 	ldw	r5,108(sp)
 401da34:	d8801c17 	ldw	r2,112(sp)
 401da38:	d811883a 	mov	r8,sp
 401da3c:	29000044 	addi	r4,r5,1
 401da40:	003d5b06 	br	401cfb0 <__reset+0xfb01bfb0>
 401da44:	d9402117 	ldw	r5,132(sp)
 401da48:	d9002017 	ldw	r4,128(sp)
 401da4c:	d9801a04 	addi	r6,sp,104
 401da50:	da402c15 	stw	r9,176(sp)
 401da54:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401da58:	da402c17 	ldw	r9,176(sp)
 401da5c:	103f6a1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401da60:	d9401b17 	ldw	r5,108(sp)
 401da64:	d8801c17 	ldw	r2,112(sp)
 401da68:	d811883a 	mov	r8,sp
 401da6c:	29000044 	addi	r4,r5,1
 401da70:	003f1006 	br	401d6b4 <__reset+0xfb01c6b4>
 401da74:	1000c31e 	bne	r2,zero,401dd84 <___vfiprintf_internal_r+0x12cc>
 401da78:	01000044 	movi	r4,1
 401da7c:	000b883a 	mov	r5,zero
 401da80:	d811883a 	mov	r8,sp
 401da84:	003f0d06 	br	401d6bc <__reset+0xfb01c6bc>
 401da88:	d9402117 	ldw	r5,132(sp)
 401da8c:	d9002017 	ldw	r4,128(sp)
 401da90:	d9801a04 	addi	r6,sp,104
 401da94:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401da98:	103f5b1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401da9c:	d9001b17 	ldw	r4,108(sp)
 401daa0:	d8801c17 	ldw	r2,112(sp)
 401daa4:	d811883a 	mov	r8,sp
 401daa8:	21000044 	addi	r4,r4,1
 401daac:	003d8006 	br	401d0b0 <__reset+0xfb01c0b0>
 401dab0:	01010234 	movhi	r4,1032
 401dab4:	21079904 	addi	r4,r4,7780
 401dab8:	d9002615 	stw	r4,152(sp)
 401dabc:	d8c02215 	stw	r3,136(sp)
 401dac0:	1029883a 	mov	r20,r2
 401dac4:	94c4b03a 	or	r2,r18,r19
 401dac8:	103fb21e 	bne	r2,zero,401d994 <__reset+0xfb01c994>
 401dacc:	0039883a 	mov	fp,zero
 401dad0:	00800084 	movi	r2,2
 401dad4:	003e6b06 	br	401d484 <__reset+0xfb01c484>
 401dad8:	da802217 	ldw	r10,136(sp)
 401dadc:	d8001d85 	stb	zero,118(sp)
 401dae0:	0027883a 	mov	r19,zero
 401dae4:	50800104 	addi	r2,r10,4
 401dae8:	54800017 	ldw	r18,0(r10)
 401daec:	483e6016 	blt	r9,zero,401d470 <__reset+0xfb01c470>
 401daf0:	00ffdfc4 	movi	r3,-129
 401daf4:	d8802215 	stw	r2,136(sp)
 401daf8:	a0e8703a 	and	r20,r20,r3
 401dafc:	0039883a 	mov	fp,zero
 401db00:	903ebb26 	beq	r18,zero,401d5f0 <__reset+0xfb01c5f0>
 401db04:	00800244 	movi	r2,9
 401db08:	14bdee36 	bltu	r2,r18,401d2c4 <__reset+0xfb01c2c4>
 401db0c:	003eba06 	br	401d5f8 <__reset+0xfb01c5f8>
 401db10:	00800c04 	movi	r2,48
 401db14:	d8c01d45 	stb	r3,117(sp)
 401db18:	d8801d05 	stb	r2,116(sp)
 401db1c:	d8001d85 	stb	zero,118(sp)
 401db20:	a0c00094 	ori	r3,r20,2
 401db24:	4800a916 	blt	r9,zero,401ddcc <___vfiprintf_internal_r+0x1314>
 401db28:	00bfdfc4 	movi	r2,-129
 401db2c:	a096703a 	and	r11,r20,r2
 401db30:	5d000094 	ori	r20,r11,2
 401db34:	0039883a 	mov	fp,zero
 401db38:	003f9706 	br	401d998 <__reset+0xfb01c998>
 401db3c:	8025883a 	mov	r18,r16
 401db40:	003c2e06 	br	401cbfc <__reset+0xfb01bbfc>
 401db44:	00810234 	movhi	r2,1032
 401db48:	10879904 	addi	r2,r2,7780
 401db4c:	0039883a 	mov	fp,zero
 401db50:	d8802615 	stw	r2,152(sp)
 401db54:	003f9006 	br	401d998 <__reset+0xfb01c998>
 401db58:	04a5c83a 	sub	r18,zero,r18
 401db5c:	07000b44 	movi	fp,45
 401db60:	9004c03a 	cmpne	r2,r18,zero
 401db64:	04e7c83a 	sub	r19,zero,r19
 401db68:	df001d85 	stb	fp,118(sp)
 401db6c:	98a7c83a 	sub	r19,r19,r2
 401db70:	48009f16 	blt	r9,zero,401ddf0 <___vfiprintf_internal_r+0x1338>
 401db74:	00bfdfc4 	movi	r2,-129
 401db78:	a0a8703a 	and	r20,r20,r2
 401db7c:	003dd006 	br	401d2c0 <__reset+0xfb01c2c0>
 401db80:	70004c26 	beq	r14,zero,401dcb4 <___vfiprintf_internal_r+0x11fc>
 401db84:	00800084 	movi	r2,2
 401db88:	d8c01d04 	addi	r3,sp,116
 401db8c:	d8c00015 	stw	r3,0(sp)
 401db90:	d8800115 	stw	r2,4(sp)
 401db94:	01000044 	movi	r4,1
 401db98:	d811883a 	mov	r8,sp
 401db9c:	003f7306 	br	401d96c <__reset+0xfb01c96c>
 401dba0:	a080100c 	andi	r2,r20,64
 401dba4:	da802217 	ldw	r10,136(sp)
 401dba8:	103e0626 	beq	r2,zero,401d3c4 <__reset+0xfb01c3c4>
 401dbac:	5480000f 	ldh	r18,0(r10)
 401dbb0:	52800104 	addi	r10,r10,4
 401dbb4:	da802215 	stw	r10,136(sp)
 401dbb8:	9027d7fa 	srai	r19,r18,31
 401dbbc:	9805883a 	mov	r2,r19
 401dbc0:	003db806 	br	401d2a4 <__reset+0xfb01c2a4>
 401dbc4:	a080040c 	andi	r2,r20,16
 401dbc8:	1000091e 	bne	r2,zero,401dbf0 <___vfiprintf_internal_r+0x1138>
 401dbcc:	a2c0100c 	andi	r11,r20,64
 401dbd0:	58000726 	beq	r11,zero,401dbf0 <___vfiprintf_internal_r+0x1138>
 401dbd4:	da802217 	ldw	r10,136(sp)
 401dbd8:	50800017 	ldw	r2,0(r10)
 401dbdc:	52800104 	addi	r10,r10,4
 401dbe0:	da802215 	stw	r10,136(sp)
 401dbe4:	da802317 	ldw	r10,140(sp)
 401dbe8:	1280000d 	sth	r10,0(r2)
 401dbec:	003be706 	br	401cb8c <__reset+0xfb01bb8c>
 401dbf0:	da802217 	ldw	r10,136(sp)
 401dbf4:	50800017 	ldw	r2,0(r10)
 401dbf8:	52800104 	addi	r10,r10,4
 401dbfc:	da802215 	stw	r10,136(sp)
 401dc00:	da802317 	ldw	r10,140(sp)
 401dc04:	12800015 	stw	r10,0(r2)
 401dc08:	003be006 	br	401cb8c <__reset+0xfb01bb8c>
 401dc0c:	a080100c 	andi	r2,r20,64
 401dc10:	da802217 	ldw	r10,136(sp)
 401dc14:	10003026 	beq	r2,zero,401dcd8 <___vfiprintf_internal_r+0x1220>
 401dc18:	5480000b 	ldhu	r18,0(r10)
 401dc1c:	52800104 	addi	r10,r10,4
 401dc20:	0027883a 	mov	r19,zero
 401dc24:	da802215 	stw	r10,136(sp)
 401dc28:	003d8006 	br	401d22c <__reset+0xfb01c22c>
 401dc2c:	80c00007 	ldb	r3,0(r16)
 401dc30:	003c0006 	br	401cc34 <__reset+0xfb01bc34>
 401dc34:	a080100c 	andi	r2,r20,64
 401dc38:	d8001d85 	stb	zero,118(sp)
 401dc3c:	da802217 	ldw	r10,136(sp)
 401dc40:	1000201e 	bne	r2,zero,401dcc4 <___vfiprintf_internal_r+0x120c>
 401dc44:	50800104 	addi	r2,r10,4
 401dc48:	54800017 	ldw	r18,0(r10)
 401dc4c:	0027883a 	mov	r19,zero
 401dc50:	483def0e 	bge	r9,zero,401d410 <__reset+0xfb01c410>
 401dc54:	94c6b03a 	or	r3,r18,r19
 401dc58:	d8802215 	stw	r2,136(sp)
 401dc5c:	183d4e1e 	bne	r3,zero,401d198 <__reset+0xfb01c198>
 401dc60:	0039883a 	mov	fp,zero
 401dc64:	0005883a 	mov	r2,zero
 401dc68:	003e0606 	br	401d484 <__reset+0xfb01c484>
 401dc6c:	d9402117 	ldw	r5,132(sp)
 401dc70:	d9002017 	ldw	r4,128(sp)
 401dc74:	d9801a04 	addi	r6,sp,104
 401dc78:	da402c15 	stw	r9,176(sp)
 401dc7c:	db802a15 	stw	r14,168(sp)
 401dc80:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401dc84:	da402c17 	ldw	r9,176(sp)
 401dc88:	db802a17 	ldw	r14,168(sp)
 401dc8c:	103ede1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401dc90:	d9401b17 	ldw	r5,108(sp)
 401dc94:	d8801c17 	ldw	r2,112(sp)
 401dc98:	d811883a 	mov	r8,sp
 401dc9c:	29000044 	addi	r4,r5,1
 401dca0:	003e7406 	br	401d674 <__reset+0xfb01c674>
 401dca4:	00bfffc4 	movi	r2,-1
 401dca8:	003c5806 	br	401ce0c <__reset+0xfb01be0c>
 401dcac:	d811883a 	mov	r8,sp
 401dcb0:	003ee806 	br	401d854 <__reset+0xfb01c854>
 401dcb4:	000b883a 	mov	r5,zero
 401dcb8:	01000044 	movi	r4,1
 401dcbc:	d811883a 	mov	r8,sp
 401dcc0:	003e7c06 	br	401d6b4 <__reset+0xfb01c6b4>
 401dcc4:	50800104 	addi	r2,r10,4
 401dcc8:	5480000b 	ldhu	r18,0(r10)
 401dccc:	0027883a 	mov	r19,zero
 401dcd0:	483dcf0e 	bge	r9,zero,401d410 <__reset+0xfb01c410>
 401dcd4:	003fdf06 	br	401dc54 <__reset+0xfb01cc54>
 401dcd8:	54800017 	ldw	r18,0(r10)
 401dcdc:	52800104 	addi	r10,r10,4
 401dce0:	0027883a 	mov	r19,zero
 401dce4:	da802215 	stw	r10,136(sp)
 401dce8:	003d5006 	br	401d22c <__reset+0xfb01c22c>
 401dcec:	50800104 	addi	r2,r10,4
 401dcf0:	5480000b 	ldhu	r18,0(r10)
 401dcf4:	0027883a 	mov	r19,zero
 401dcf8:	483f7d0e 	bge	r9,zero,401daf0 <__reset+0xfb01caf0>
 401dcfc:	003ddc06 	br	401d470 <__reset+0xfb01c470>
 401dd00:	d8c02215 	stw	r3,136(sp)
 401dd04:	0039883a 	mov	fp,zero
 401dd08:	003ddb06 	br	401d478 <__reset+0xfb01c478>
 401dd0c:	02810234 	movhi	r10,1032
 401dd10:	52880904 	addi	r10,r10,8228
 401dd14:	da802415 	stw	r10,144(sp)
 401dd18:	003e8306 	br	401d728 <__reset+0xfb01c728>
 401dd1c:	d8801c17 	ldw	r2,112(sp)
 401dd20:	dd002117 	ldw	r20,132(sp)
 401dd24:	103eb926 	beq	r2,zero,401d80c <__reset+0xfb01c80c>
 401dd28:	d9002017 	ldw	r4,128(sp)
 401dd2c:	d9801a04 	addi	r6,sp,104
 401dd30:	a00b883a 	mov	r5,r20
 401dd34:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401dd38:	003eb406 	br	401d80c <__reset+0xfb01c80c>
 401dd3c:	80c00043 	ldbu	r3,1(r16)
 401dd40:	a5000814 	ori	r20,r20,32
 401dd44:	84000044 	addi	r16,r16,1
 401dd48:	18c03fcc 	andi	r3,r3,255
 401dd4c:	18c0201c 	xori	r3,r3,128
 401dd50:	18ffe004 	addi	r3,r3,-128
 401dd54:	003bb706 	br	401cc34 <__reset+0xfb01bc34>
 401dd58:	a809883a 	mov	r4,r21
 401dd5c:	d8c02a15 	stw	r3,168(sp)
 401dd60:	da002b15 	stw	r8,172(sp)
 401dd64:	401296c0 	call	401296c <strlen>
 401dd68:	d8c02a17 	ldw	r3,168(sp)
 401dd6c:	1027883a 	mov	r19,r2
 401dd70:	df001d83 	ldbu	fp,118(sp)
 401dd74:	d8c02215 	stw	r3,136(sp)
 401dd78:	0013883a 	mov	r9,zero
 401dd7c:	da002b17 	ldw	r8,172(sp)
 401dd80:	003c4d06 	br	401ceb8 <__reset+0xfb01beb8>
 401dd84:	d9402117 	ldw	r5,132(sp)
 401dd88:	d9002017 	ldw	r4,128(sp)
 401dd8c:	d9801a04 	addi	r6,sp,104
 401dd90:	da402c15 	stw	r9,176(sp)
 401dd94:	401c9a40 	call	401c9a4 <__sprint_r.part.0>
 401dd98:	da402c17 	ldw	r9,176(sp)
 401dd9c:	103e9a1e 	bne	r2,zero,401d808 <__reset+0xfb01c808>
 401dda0:	d9401b17 	ldw	r5,108(sp)
 401dda4:	d8801c17 	ldw	r2,112(sp)
 401dda8:	d811883a 	mov	r8,sp
 401ddac:	29000044 	addi	r4,r5,1
 401ddb0:	003e4206 	br	401d6bc <__reset+0xfb01c6bc>
 401ddb4:	d9401b17 	ldw	r5,108(sp)
 401ddb8:	01010234 	movhi	r4,1032
 401ddbc:	21080d04 	addi	r4,r4,8244
 401ddc0:	d9002415 	stw	r4,144(sp)
 401ddc4:	29400044 	addi	r5,r5,1
 401ddc8:	003c6d06 	br	401cf80 <__reset+0xfb01bf80>
 401ddcc:	0039883a 	mov	fp,zero
 401ddd0:	00800084 	movi	r2,2
 401ddd4:	10803fcc 	andi	r2,r2,255
 401ddd8:	01000044 	movi	r4,1
 401dddc:	11001e26 	beq	r2,r4,401de58 <___vfiprintf_internal_r+0x13a0>
 401dde0:	01000084 	movi	r4,2
 401dde4:	11001e1e 	bne	r2,r4,401de60 <___vfiprintf_internal_r+0x13a8>
 401dde8:	1829883a 	mov	r20,r3
 401ddec:	003eea06 	br	401d998 <__reset+0xfb01c998>
 401ddf0:	a007883a 	mov	r3,r20
 401ddf4:	00800044 	movi	r2,1
 401ddf8:	003ff606 	br	401ddd4 <__reset+0xfb01cdd4>
 401ddfc:	00800184 	movi	r2,6
 401de00:	1240012e 	bgeu	r2,r9,401de08 <___vfiprintf_internal_r+0x1350>
 401de04:	1013883a 	mov	r9,r2
 401de08:	4827883a 	mov	r19,r9
 401de0c:	4825883a 	mov	r18,r9
 401de10:	48001516 	blt	r9,zero,401de68 <___vfiprintf_internal_r+0x13b0>
 401de14:	05410234 	movhi	r21,1032
 401de18:	d8c02215 	stw	r3,136(sp)
 401de1c:	ad479e04 	addi	r21,r21,7800
 401de20:	003d1406 	br	401d274 <__reset+0xfb01c274>
 401de24:	02810234 	movhi	r10,1032
 401de28:	52880904 	addi	r10,r10,8228
 401de2c:	da802415 	stw	r10,144(sp)
 401de30:	200d883a 	mov	r6,r4
 401de34:	003c9106 	br	401d07c <__reset+0xfb01c07c>
 401de38:	5021883a 	mov	r16,r10
 401de3c:	0013883a 	mov	r9,zero
 401de40:	003b7d06 	br	401cc38 <__reset+0xfb01bc38>
 401de44:	4827883a 	mov	r19,r9
 401de48:	df001d83 	ldbu	fp,118(sp)
 401de4c:	d8c02215 	stw	r3,136(sp)
 401de50:	0013883a 	mov	r9,zero
 401de54:	003c1806 	br	401ceb8 <__reset+0xfb01beb8>
 401de58:	1829883a 	mov	r20,r3
 401de5c:	003d1806 	br	401d2c0 <__reset+0xfb01c2c0>
 401de60:	1829883a 	mov	r20,r3
 401de64:	003ccd06 	br	401d19c <__reset+0xfb01c19c>
 401de68:	0025883a 	mov	r18,zero
 401de6c:	003fe906 	br	401de14 <__reset+0xfb01ce14>
 401de70:	d8802217 	ldw	r2,136(sp)
 401de74:	80c00043 	ldbu	r3,1(r16)
 401de78:	5021883a 	mov	r16,r10
 401de7c:	12400017 	ldw	r9,0(r2)
 401de80:	10800104 	addi	r2,r2,4
 401de84:	d8802215 	stw	r2,136(sp)
 401de88:	483faf0e 	bge	r9,zero,401dd48 <__reset+0xfb01cd48>
 401de8c:	18c03fcc 	andi	r3,r3,255
 401de90:	18c0201c 	xori	r3,r3,128
 401de94:	027fffc4 	movi	r9,-1
 401de98:	18ffe004 	addi	r3,r3,-128
 401de9c:	003b6506 	br	401cc34 <__reset+0xfb01bc34>
 401dea0:	d9c01d85 	stb	r7,118(sp)
 401dea4:	003ca006 	br	401d128 <__reset+0xfb01c128>
 401dea8:	d9c01d85 	stb	r7,118(sp)
 401deac:	003cad06 	br	401d164 <__reset+0xfb01c164>
 401deb0:	d9c01d85 	stb	r7,118(sp)
 401deb4:	003d7d06 	br	401d4ac <__reset+0xfb01c4ac>
 401deb8:	d9c01d85 	stb	r7,118(sp)
 401debc:	003d5f06 	br	401d43c <__reset+0xfb01c43c>
 401dec0:	a080004c 	andi	r2,r20,1
 401dec4:	0039883a 	mov	fp,zero
 401dec8:	10000526 	beq	r2,zero,401dee0 <___vfiprintf_internal_r+0x1428>
 401decc:	00800c04 	movi	r2,48
 401ded0:	d88019c5 	stb	r2,103(sp)
 401ded4:	dcc02717 	ldw	r19,156(sp)
 401ded8:	dd4019c4 	addi	r21,sp,103
 401dedc:	003bf606 	br	401ceb8 <__reset+0xfb01beb8>
 401dee0:	0027883a 	mov	r19,zero
 401dee4:	dd401a04 	addi	r21,sp,104
 401dee8:	003bf306 	br	401ceb8 <__reset+0xfb01beb8>
 401deec:	d9c01d85 	stb	r7,118(sp)
 401def0:	003dc806 	br	401d614 <__reset+0xfb01c614>
 401def4:	d9c01d85 	stb	r7,118(sp)
 401def8:	003d3a06 	br	401d3e4 <__reset+0xfb01c3e4>
 401defc:	d9c01d85 	stb	r7,118(sp)
 401df00:	003d2a06 	br	401d3ac <__reset+0xfb01c3ac>
 401df04:	d9c01d85 	stb	r7,118(sp)
 401df08:	003cde06 	br	401d284 <__reset+0xfb01c284>
 401df0c:	d9c01d85 	stb	r7,118(sp)
 401df10:	003cbc06 	br	401d204 <__reset+0xfb01c204>

0401df14 <__vfiprintf_internal>:
 401df14:	00810474 	movhi	r2,1041
 401df18:	109a5804 	addi	r2,r2,26976
 401df1c:	300f883a 	mov	r7,r6
 401df20:	280d883a 	mov	r6,r5
 401df24:	200b883a 	mov	r5,r4
 401df28:	11000017 	ldw	r4,0(r2)
 401df2c:	401cab81 	jmpi	401cab8 <___vfiprintf_internal_r>

0401df30 <__sbprintf>:
 401df30:	2880030b 	ldhu	r2,12(r5)
 401df34:	2ac01917 	ldw	r11,100(r5)
 401df38:	2a80038b 	ldhu	r10,14(r5)
 401df3c:	2a400717 	ldw	r9,28(r5)
 401df40:	2a000917 	ldw	r8,36(r5)
 401df44:	defee204 	addi	sp,sp,-1144
 401df48:	00c10004 	movi	r3,1024
 401df4c:	dc011a15 	stw	r16,1128(sp)
 401df50:	10bfff4c 	andi	r2,r2,65533
 401df54:	2821883a 	mov	r16,r5
 401df58:	d8cb883a 	add	r5,sp,r3
 401df5c:	dc811c15 	stw	r18,1136(sp)
 401df60:	dc411b15 	stw	r17,1132(sp)
 401df64:	dfc11d15 	stw	ra,1140(sp)
 401df68:	2025883a 	mov	r18,r4
 401df6c:	d881030d 	sth	r2,1036(sp)
 401df70:	dac11915 	stw	r11,1124(sp)
 401df74:	da81038d 	sth	r10,1038(sp)
 401df78:	da410715 	stw	r9,1052(sp)
 401df7c:	da010915 	stw	r8,1060(sp)
 401df80:	dec10015 	stw	sp,1024(sp)
 401df84:	dec10415 	stw	sp,1040(sp)
 401df88:	d8c10215 	stw	r3,1032(sp)
 401df8c:	d8c10515 	stw	r3,1044(sp)
 401df90:	d8010615 	stw	zero,1048(sp)
 401df94:	401cab80 	call	401cab8 <___vfiprintf_internal_r>
 401df98:	1023883a 	mov	r17,r2
 401df9c:	10000416 	blt	r2,zero,401dfb0 <__sbprintf+0x80>
 401dfa0:	d9410004 	addi	r5,sp,1024
 401dfa4:	9009883a 	mov	r4,r18
 401dfa8:	4018aa40 	call	4018aa4 <_fflush_r>
 401dfac:	10000d1e 	bne	r2,zero,401dfe4 <__sbprintf+0xb4>
 401dfb0:	d881030b 	ldhu	r2,1036(sp)
 401dfb4:	1080100c 	andi	r2,r2,64
 401dfb8:	10000326 	beq	r2,zero,401dfc8 <__sbprintf+0x98>
 401dfbc:	8080030b 	ldhu	r2,12(r16)
 401dfc0:	10801014 	ori	r2,r2,64
 401dfc4:	8080030d 	sth	r2,12(r16)
 401dfc8:	8805883a 	mov	r2,r17
 401dfcc:	dfc11d17 	ldw	ra,1140(sp)
 401dfd0:	dc811c17 	ldw	r18,1136(sp)
 401dfd4:	dc411b17 	ldw	r17,1132(sp)
 401dfd8:	dc011a17 	ldw	r16,1128(sp)
 401dfdc:	dec11e04 	addi	sp,sp,1144
 401dfe0:	f800283a 	ret
 401dfe4:	047fffc4 	movi	r17,-1
 401dfe8:	003ff106 	br	401dfb0 <__reset+0xfb01cfb0>

0401dfec <_write_r>:
 401dfec:	defffd04 	addi	sp,sp,-12
 401dff0:	2805883a 	mov	r2,r5
 401dff4:	dc000015 	stw	r16,0(sp)
 401dff8:	04010474 	movhi	r16,1041
 401dffc:	dc400115 	stw	r17,4(sp)
 401e000:	300b883a 	mov	r5,r6
 401e004:	841a6c04 	addi	r16,r16,27056
 401e008:	2023883a 	mov	r17,r4
 401e00c:	380d883a 	mov	r6,r7
 401e010:	1009883a 	mov	r4,r2
 401e014:	dfc00215 	stw	ra,8(sp)
 401e018:	80000015 	stw	zero,0(r16)
 401e01c:	40204440 	call	4020444 <write>
 401e020:	00ffffc4 	movi	r3,-1
 401e024:	10c00526 	beq	r2,r3,401e03c <_write_r+0x50>
 401e028:	dfc00217 	ldw	ra,8(sp)
 401e02c:	dc400117 	ldw	r17,4(sp)
 401e030:	dc000017 	ldw	r16,0(sp)
 401e034:	dec00304 	addi	sp,sp,12
 401e038:	f800283a 	ret
 401e03c:	80c00017 	ldw	r3,0(r16)
 401e040:	183ff926 	beq	r3,zero,401e028 <__reset+0xfb01d028>
 401e044:	88c00015 	stw	r3,0(r17)
 401e048:	003ff706 	br	401e028 <__reset+0xfb01d028>

0401e04c <_close_r>:
 401e04c:	defffd04 	addi	sp,sp,-12
 401e050:	dc000015 	stw	r16,0(sp)
 401e054:	04010474 	movhi	r16,1041
 401e058:	dc400115 	stw	r17,4(sp)
 401e05c:	841a6c04 	addi	r16,r16,27056
 401e060:	2023883a 	mov	r17,r4
 401e064:	2809883a 	mov	r4,r5
 401e068:	dfc00215 	stw	ra,8(sp)
 401e06c:	80000015 	stw	zero,0(r16)
 401e070:	401f4b40 	call	401f4b4 <close>
 401e074:	00ffffc4 	movi	r3,-1
 401e078:	10c00526 	beq	r2,r3,401e090 <_close_r+0x44>
 401e07c:	dfc00217 	ldw	ra,8(sp)
 401e080:	dc400117 	ldw	r17,4(sp)
 401e084:	dc000017 	ldw	r16,0(sp)
 401e088:	dec00304 	addi	sp,sp,12
 401e08c:	f800283a 	ret
 401e090:	80c00017 	ldw	r3,0(r16)
 401e094:	183ff926 	beq	r3,zero,401e07c <__reset+0xfb01d07c>
 401e098:	88c00015 	stw	r3,0(r17)
 401e09c:	003ff706 	br	401e07c <__reset+0xfb01d07c>

0401e0a0 <_calloc_r>:
 401e0a0:	298b383a 	mul	r5,r5,r6
 401e0a4:	defffe04 	addi	sp,sp,-8
 401e0a8:	dfc00115 	stw	ra,4(sp)
 401e0ac:	dc000015 	stw	r16,0(sp)
 401e0b0:	4011c080 	call	4011c08 <_malloc_r>
 401e0b4:	10002926 	beq	r2,zero,401e15c <_calloc_r+0xbc>
 401e0b8:	11bfff17 	ldw	r6,-4(r2)
 401e0bc:	1021883a 	mov	r16,r2
 401e0c0:	00bfff04 	movi	r2,-4
 401e0c4:	308c703a 	and	r6,r6,r2
 401e0c8:	00c00904 	movi	r3,36
 401e0cc:	308d883a 	add	r6,r6,r2
 401e0d0:	19801636 	bltu	r3,r6,401e12c <_calloc_r+0x8c>
 401e0d4:	008004c4 	movi	r2,19
 401e0d8:	11800b2e 	bgeu	r2,r6,401e108 <_calloc_r+0x68>
 401e0dc:	80000015 	stw	zero,0(r16)
 401e0e0:	80000115 	stw	zero,4(r16)
 401e0e4:	008006c4 	movi	r2,27
 401e0e8:	11801a2e 	bgeu	r2,r6,401e154 <_calloc_r+0xb4>
 401e0ec:	80000215 	stw	zero,8(r16)
 401e0f0:	80000315 	stw	zero,12(r16)
 401e0f4:	30c0151e 	bne	r6,r3,401e14c <_calloc_r+0xac>
 401e0f8:	80000415 	stw	zero,16(r16)
 401e0fc:	80800604 	addi	r2,r16,24
 401e100:	80000515 	stw	zero,20(r16)
 401e104:	00000106 	br	401e10c <_calloc_r+0x6c>
 401e108:	8005883a 	mov	r2,r16
 401e10c:	10000015 	stw	zero,0(r2)
 401e110:	10000115 	stw	zero,4(r2)
 401e114:	10000215 	stw	zero,8(r2)
 401e118:	8005883a 	mov	r2,r16
 401e11c:	dfc00117 	ldw	ra,4(sp)
 401e120:	dc000017 	ldw	r16,0(sp)
 401e124:	dec00204 	addi	sp,sp,8
 401e128:	f800283a 	ret
 401e12c:	000b883a 	mov	r5,zero
 401e130:	8009883a 	mov	r4,r16
 401e134:	401255c0 	call	401255c <memset>
 401e138:	8005883a 	mov	r2,r16
 401e13c:	dfc00117 	ldw	ra,4(sp)
 401e140:	dc000017 	ldw	r16,0(sp)
 401e144:	dec00204 	addi	sp,sp,8
 401e148:	f800283a 	ret
 401e14c:	80800404 	addi	r2,r16,16
 401e150:	003fee06 	br	401e10c <__reset+0xfb01d10c>
 401e154:	80800204 	addi	r2,r16,8
 401e158:	003fec06 	br	401e10c <__reset+0xfb01d10c>
 401e15c:	0005883a 	mov	r2,zero
 401e160:	003fee06 	br	401e11c <__reset+0xfb01d11c>

0401e164 <_fclose_r>:
 401e164:	28003926 	beq	r5,zero,401e24c <_fclose_r+0xe8>
 401e168:	defffc04 	addi	sp,sp,-16
 401e16c:	dc400115 	stw	r17,4(sp)
 401e170:	dc000015 	stw	r16,0(sp)
 401e174:	dfc00315 	stw	ra,12(sp)
 401e178:	dc800215 	stw	r18,8(sp)
 401e17c:	2023883a 	mov	r17,r4
 401e180:	2821883a 	mov	r16,r5
 401e184:	20000226 	beq	r4,zero,401e190 <_fclose_r+0x2c>
 401e188:	20800e17 	ldw	r2,56(r4)
 401e18c:	10002726 	beq	r2,zero,401e22c <_fclose_r+0xc8>
 401e190:	8080030f 	ldh	r2,12(r16)
 401e194:	1000071e 	bne	r2,zero,401e1b4 <_fclose_r+0x50>
 401e198:	0005883a 	mov	r2,zero
 401e19c:	dfc00317 	ldw	ra,12(sp)
 401e1a0:	dc800217 	ldw	r18,8(sp)
 401e1a4:	dc400117 	ldw	r17,4(sp)
 401e1a8:	dc000017 	ldw	r16,0(sp)
 401e1ac:	dec00404 	addi	sp,sp,16
 401e1b0:	f800283a 	ret
 401e1b4:	800b883a 	mov	r5,r16
 401e1b8:	8809883a 	mov	r4,r17
 401e1bc:	40188880 	call	4018888 <__sflush_r>
 401e1c0:	1025883a 	mov	r18,r2
 401e1c4:	80800b17 	ldw	r2,44(r16)
 401e1c8:	10000426 	beq	r2,zero,401e1dc <_fclose_r+0x78>
 401e1cc:	81400717 	ldw	r5,28(r16)
 401e1d0:	8809883a 	mov	r4,r17
 401e1d4:	103ee83a 	callr	r2
 401e1d8:	10001616 	blt	r2,zero,401e234 <_fclose_r+0xd0>
 401e1dc:	8080030b 	ldhu	r2,12(r16)
 401e1e0:	1080200c 	andi	r2,r2,128
 401e1e4:	1000151e 	bne	r2,zero,401e23c <_fclose_r+0xd8>
 401e1e8:	81400c17 	ldw	r5,48(r16)
 401e1ec:	28000526 	beq	r5,zero,401e204 <_fclose_r+0xa0>
 401e1f0:	80801004 	addi	r2,r16,64
 401e1f4:	28800226 	beq	r5,r2,401e200 <_fclose_r+0x9c>
 401e1f8:	8809883a 	mov	r4,r17
 401e1fc:	4018ff40 	call	4018ff4 <_free_r>
 401e200:	80000c15 	stw	zero,48(r16)
 401e204:	81401117 	ldw	r5,68(r16)
 401e208:	28000326 	beq	r5,zero,401e218 <_fclose_r+0xb4>
 401e20c:	8809883a 	mov	r4,r17
 401e210:	4018ff40 	call	4018ff4 <_free_r>
 401e214:	80001115 	stw	zero,68(r16)
 401e218:	4018e900 	call	4018e90 <__sfp_lock_acquire>
 401e21c:	8000030d 	sth	zero,12(r16)
 401e220:	4018e940 	call	4018e94 <__sfp_lock_release>
 401e224:	9005883a 	mov	r2,r18
 401e228:	003fdc06 	br	401e19c <__reset+0xfb01d19c>
 401e22c:	4018e800 	call	4018e80 <__sinit>
 401e230:	003fd706 	br	401e190 <__reset+0xfb01d190>
 401e234:	04bfffc4 	movi	r18,-1
 401e238:	003fe806 	br	401e1dc <__reset+0xfb01d1dc>
 401e23c:	81400417 	ldw	r5,16(r16)
 401e240:	8809883a 	mov	r4,r17
 401e244:	4018ff40 	call	4018ff4 <_free_r>
 401e248:	003fe706 	br	401e1e8 <__reset+0xfb01d1e8>
 401e24c:	0005883a 	mov	r2,zero
 401e250:	f800283a 	ret

0401e254 <fclose>:
 401e254:	00810474 	movhi	r2,1041
 401e258:	109a5804 	addi	r2,r2,26976
 401e25c:	200b883a 	mov	r5,r4
 401e260:	11000017 	ldw	r4,0(r2)
 401e264:	401e1641 	jmpi	401e164 <_fclose_r>

0401e268 <__fputwc>:
 401e268:	defff804 	addi	sp,sp,-32
 401e26c:	dcc00415 	stw	r19,16(sp)
 401e270:	dc800315 	stw	r18,12(sp)
 401e274:	dc000115 	stw	r16,4(sp)
 401e278:	dfc00715 	stw	ra,28(sp)
 401e27c:	dd400615 	stw	r21,24(sp)
 401e280:	dd000515 	stw	r20,20(sp)
 401e284:	dc400215 	stw	r17,8(sp)
 401e288:	2027883a 	mov	r19,r4
 401e28c:	2825883a 	mov	r18,r5
 401e290:	3021883a 	mov	r16,r6
 401e294:	40199d00 	call	40199d0 <__locale_mb_cur_max>
 401e298:	00c00044 	movi	r3,1
 401e29c:	10c03e26 	beq	r2,r3,401e398 <__fputwc+0x130>
 401e2a0:	81c01704 	addi	r7,r16,92
 401e2a4:	900d883a 	mov	r6,r18
 401e2a8:	d80b883a 	mov	r5,sp
 401e2ac:	9809883a 	mov	r4,r19
 401e2b0:	401e7380 	call	401e738 <_wcrtomb_r>
 401e2b4:	1029883a 	mov	r20,r2
 401e2b8:	00bfffc4 	movi	r2,-1
 401e2bc:	a0802026 	beq	r20,r2,401e340 <__fputwc+0xd8>
 401e2c0:	d9400003 	ldbu	r5,0(sp)
 401e2c4:	a0001c26 	beq	r20,zero,401e338 <__fputwc+0xd0>
 401e2c8:	0023883a 	mov	r17,zero
 401e2cc:	05400284 	movi	r21,10
 401e2d0:	00000906 	br	401e2f8 <__fputwc+0x90>
 401e2d4:	80800017 	ldw	r2,0(r16)
 401e2d8:	11400005 	stb	r5,0(r2)
 401e2dc:	80c00017 	ldw	r3,0(r16)
 401e2e0:	18c00044 	addi	r3,r3,1
 401e2e4:	80c00015 	stw	r3,0(r16)
 401e2e8:	8c400044 	addi	r17,r17,1
 401e2ec:	dc45883a 	add	r2,sp,r17
 401e2f0:	8d00112e 	bgeu	r17,r20,401e338 <__fputwc+0xd0>
 401e2f4:	11400003 	ldbu	r5,0(r2)
 401e2f8:	80c00217 	ldw	r3,8(r16)
 401e2fc:	18ffffc4 	addi	r3,r3,-1
 401e300:	80c00215 	stw	r3,8(r16)
 401e304:	183ff30e 	bge	r3,zero,401e2d4 <__reset+0xfb01d2d4>
 401e308:	80800617 	ldw	r2,24(r16)
 401e30c:	18801916 	blt	r3,r2,401e374 <__fputwc+0x10c>
 401e310:	80800017 	ldw	r2,0(r16)
 401e314:	11400005 	stb	r5,0(r2)
 401e318:	80800017 	ldw	r2,0(r16)
 401e31c:	10c00003 	ldbu	r3,0(r2)
 401e320:	10800044 	addi	r2,r2,1
 401e324:	1d402326 	beq	r3,r21,401e3b4 <__fputwc+0x14c>
 401e328:	80800015 	stw	r2,0(r16)
 401e32c:	8c400044 	addi	r17,r17,1
 401e330:	dc45883a 	add	r2,sp,r17
 401e334:	8d3fef36 	bltu	r17,r20,401e2f4 <__reset+0xfb01d2f4>
 401e338:	9005883a 	mov	r2,r18
 401e33c:	00000406 	br	401e350 <__fputwc+0xe8>
 401e340:	80c0030b 	ldhu	r3,12(r16)
 401e344:	a005883a 	mov	r2,r20
 401e348:	18c01014 	ori	r3,r3,64
 401e34c:	80c0030d 	sth	r3,12(r16)
 401e350:	dfc00717 	ldw	ra,28(sp)
 401e354:	dd400617 	ldw	r21,24(sp)
 401e358:	dd000517 	ldw	r20,20(sp)
 401e35c:	dcc00417 	ldw	r19,16(sp)
 401e360:	dc800317 	ldw	r18,12(sp)
 401e364:	dc400217 	ldw	r17,8(sp)
 401e368:	dc000117 	ldw	r16,4(sp)
 401e36c:	dec00804 	addi	sp,sp,32
 401e370:	f800283a 	ret
 401e374:	800d883a 	mov	r6,r16
 401e378:	29403fcc 	andi	r5,r5,255
 401e37c:	9809883a 	mov	r4,r19
 401e380:	401e5e00 	call	401e5e0 <__swbuf_r>
 401e384:	10bfffe0 	cmpeqi	r2,r2,-1
 401e388:	10803fcc 	andi	r2,r2,255
 401e38c:	103fd626 	beq	r2,zero,401e2e8 <__reset+0xfb01d2e8>
 401e390:	00bfffc4 	movi	r2,-1
 401e394:	003fee06 	br	401e350 <__reset+0xfb01d350>
 401e398:	90ffffc4 	addi	r3,r18,-1
 401e39c:	01003f84 	movi	r4,254
 401e3a0:	20ffbf36 	bltu	r4,r3,401e2a0 <__reset+0xfb01d2a0>
 401e3a4:	900b883a 	mov	r5,r18
 401e3a8:	dc800005 	stb	r18,0(sp)
 401e3ac:	1029883a 	mov	r20,r2
 401e3b0:	003fc506 	br	401e2c8 <__reset+0xfb01d2c8>
 401e3b4:	800d883a 	mov	r6,r16
 401e3b8:	a80b883a 	mov	r5,r21
 401e3bc:	9809883a 	mov	r4,r19
 401e3c0:	401e5e00 	call	401e5e0 <__swbuf_r>
 401e3c4:	10bfffe0 	cmpeqi	r2,r2,-1
 401e3c8:	003fef06 	br	401e388 <__reset+0xfb01d388>

0401e3cc <_fputwc_r>:
 401e3cc:	3080030b 	ldhu	r2,12(r6)
 401e3d0:	10c8000c 	andi	r3,r2,8192
 401e3d4:	1800051e 	bne	r3,zero,401e3ec <_fputwc_r+0x20>
 401e3d8:	30c01917 	ldw	r3,100(r6)
 401e3dc:	10880014 	ori	r2,r2,8192
 401e3e0:	3080030d 	sth	r2,12(r6)
 401e3e4:	18880014 	ori	r2,r3,8192
 401e3e8:	30801915 	stw	r2,100(r6)
 401e3ec:	401e2681 	jmpi	401e268 <__fputwc>

0401e3f0 <fputwc>:
 401e3f0:	00810474 	movhi	r2,1041
 401e3f4:	defffc04 	addi	sp,sp,-16
 401e3f8:	109a5804 	addi	r2,r2,26976
 401e3fc:	dc000115 	stw	r16,4(sp)
 401e400:	14000017 	ldw	r16,0(r2)
 401e404:	dc400215 	stw	r17,8(sp)
 401e408:	dfc00315 	stw	ra,12(sp)
 401e40c:	2023883a 	mov	r17,r4
 401e410:	80000226 	beq	r16,zero,401e41c <fputwc+0x2c>
 401e414:	80800e17 	ldw	r2,56(r16)
 401e418:	10001026 	beq	r2,zero,401e45c <fputwc+0x6c>
 401e41c:	2880030b 	ldhu	r2,12(r5)
 401e420:	10c8000c 	andi	r3,r2,8192
 401e424:	1800051e 	bne	r3,zero,401e43c <fputwc+0x4c>
 401e428:	28c01917 	ldw	r3,100(r5)
 401e42c:	10880014 	ori	r2,r2,8192
 401e430:	2880030d 	sth	r2,12(r5)
 401e434:	18880014 	ori	r2,r3,8192
 401e438:	28801915 	stw	r2,100(r5)
 401e43c:	280d883a 	mov	r6,r5
 401e440:	8009883a 	mov	r4,r16
 401e444:	880b883a 	mov	r5,r17
 401e448:	dfc00317 	ldw	ra,12(sp)
 401e44c:	dc400217 	ldw	r17,8(sp)
 401e450:	dc000117 	ldw	r16,4(sp)
 401e454:	dec00404 	addi	sp,sp,16
 401e458:	401e2681 	jmpi	401e268 <__fputwc>
 401e45c:	8009883a 	mov	r4,r16
 401e460:	d9400015 	stw	r5,0(sp)
 401e464:	4018e800 	call	4018e80 <__sinit>
 401e468:	d9400017 	ldw	r5,0(sp)
 401e46c:	003feb06 	br	401e41c <__reset+0xfb01d41c>

0401e470 <_fstat_r>:
 401e470:	defffd04 	addi	sp,sp,-12
 401e474:	2805883a 	mov	r2,r5
 401e478:	dc000015 	stw	r16,0(sp)
 401e47c:	04010474 	movhi	r16,1041
 401e480:	dc400115 	stw	r17,4(sp)
 401e484:	841a6c04 	addi	r16,r16,27056
 401e488:	2023883a 	mov	r17,r4
 401e48c:	300b883a 	mov	r5,r6
 401e490:	1009883a 	mov	r4,r2
 401e494:	dfc00215 	stw	ra,8(sp)
 401e498:	80000015 	stw	zero,0(r16)
 401e49c:	401f7900 	call	401f790 <fstat>
 401e4a0:	00ffffc4 	movi	r3,-1
 401e4a4:	10c00526 	beq	r2,r3,401e4bc <_fstat_r+0x4c>
 401e4a8:	dfc00217 	ldw	ra,8(sp)
 401e4ac:	dc400117 	ldw	r17,4(sp)
 401e4b0:	dc000017 	ldw	r16,0(sp)
 401e4b4:	dec00304 	addi	sp,sp,12
 401e4b8:	f800283a 	ret
 401e4bc:	80c00017 	ldw	r3,0(r16)
 401e4c0:	183ff926 	beq	r3,zero,401e4a8 <__reset+0xfb01d4a8>
 401e4c4:	88c00015 	stw	r3,0(r17)
 401e4c8:	003ff706 	br	401e4a8 <__reset+0xfb01d4a8>

0401e4cc <_isatty_r>:
 401e4cc:	defffd04 	addi	sp,sp,-12
 401e4d0:	dc000015 	stw	r16,0(sp)
 401e4d4:	04010474 	movhi	r16,1041
 401e4d8:	dc400115 	stw	r17,4(sp)
 401e4dc:	841a6c04 	addi	r16,r16,27056
 401e4e0:	2023883a 	mov	r17,r4
 401e4e4:	2809883a 	mov	r4,r5
 401e4e8:	dfc00215 	stw	ra,8(sp)
 401e4ec:	80000015 	stw	zero,0(r16)
 401e4f0:	401fb1c0 	call	401fb1c <isatty>
 401e4f4:	00ffffc4 	movi	r3,-1
 401e4f8:	10c00526 	beq	r2,r3,401e510 <_isatty_r+0x44>
 401e4fc:	dfc00217 	ldw	ra,8(sp)
 401e500:	dc400117 	ldw	r17,4(sp)
 401e504:	dc000017 	ldw	r16,0(sp)
 401e508:	dec00304 	addi	sp,sp,12
 401e50c:	f800283a 	ret
 401e510:	80c00017 	ldw	r3,0(r16)
 401e514:	183ff926 	beq	r3,zero,401e4fc <__reset+0xfb01d4fc>
 401e518:	88c00015 	stw	r3,0(r17)
 401e51c:	003ff706 	br	401e4fc <__reset+0xfb01d4fc>

0401e520 <_lseek_r>:
 401e520:	defffd04 	addi	sp,sp,-12
 401e524:	2805883a 	mov	r2,r5
 401e528:	dc000015 	stw	r16,0(sp)
 401e52c:	04010474 	movhi	r16,1041
 401e530:	dc400115 	stw	r17,4(sp)
 401e534:	300b883a 	mov	r5,r6
 401e538:	841a6c04 	addi	r16,r16,27056
 401e53c:	2023883a 	mov	r17,r4
 401e540:	380d883a 	mov	r6,r7
 401e544:	1009883a 	mov	r4,r2
 401e548:	dfc00215 	stw	ra,8(sp)
 401e54c:	80000015 	stw	zero,0(r16)
 401e550:	401fbfc0 	call	401fbfc <lseek>
 401e554:	00ffffc4 	movi	r3,-1
 401e558:	10c00526 	beq	r2,r3,401e570 <_lseek_r+0x50>
 401e55c:	dfc00217 	ldw	ra,8(sp)
 401e560:	dc400117 	ldw	r17,4(sp)
 401e564:	dc000017 	ldw	r16,0(sp)
 401e568:	dec00304 	addi	sp,sp,12
 401e56c:	f800283a 	ret
 401e570:	80c00017 	ldw	r3,0(r16)
 401e574:	183ff926 	beq	r3,zero,401e55c <__reset+0xfb01d55c>
 401e578:	88c00015 	stw	r3,0(r17)
 401e57c:	003ff706 	br	401e55c <__reset+0xfb01d55c>

0401e580 <_read_r>:
 401e580:	defffd04 	addi	sp,sp,-12
 401e584:	2805883a 	mov	r2,r5
 401e588:	dc000015 	stw	r16,0(sp)
 401e58c:	04010474 	movhi	r16,1041
 401e590:	dc400115 	stw	r17,4(sp)
 401e594:	300b883a 	mov	r5,r6
 401e598:	841a6c04 	addi	r16,r16,27056
 401e59c:	2023883a 	mov	r17,r4
 401e5a0:	380d883a 	mov	r6,r7
 401e5a4:	1009883a 	mov	r4,r2
 401e5a8:	dfc00215 	stw	ra,8(sp)
 401e5ac:	80000015 	stw	zero,0(r16)
 401e5b0:	40200240 	call	4020024 <read>
 401e5b4:	00ffffc4 	movi	r3,-1
 401e5b8:	10c00526 	beq	r2,r3,401e5d0 <_read_r+0x50>
 401e5bc:	dfc00217 	ldw	ra,8(sp)
 401e5c0:	dc400117 	ldw	r17,4(sp)
 401e5c4:	dc000017 	ldw	r16,0(sp)
 401e5c8:	dec00304 	addi	sp,sp,12
 401e5cc:	f800283a 	ret
 401e5d0:	80c00017 	ldw	r3,0(r16)
 401e5d4:	183ff926 	beq	r3,zero,401e5bc <__reset+0xfb01d5bc>
 401e5d8:	88c00015 	stw	r3,0(r17)
 401e5dc:	003ff706 	br	401e5bc <__reset+0xfb01d5bc>

0401e5e0 <__swbuf_r>:
 401e5e0:	defffb04 	addi	sp,sp,-20
 401e5e4:	dcc00315 	stw	r19,12(sp)
 401e5e8:	dc800215 	stw	r18,8(sp)
 401e5ec:	dc000015 	stw	r16,0(sp)
 401e5f0:	dfc00415 	stw	ra,16(sp)
 401e5f4:	dc400115 	stw	r17,4(sp)
 401e5f8:	2025883a 	mov	r18,r4
 401e5fc:	2827883a 	mov	r19,r5
 401e600:	3021883a 	mov	r16,r6
 401e604:	20000226 	beq	r4,zero,401e610 <__swbuf_r+0x30>
 401e608:	20800e17 	ldw	r2,56(r4)
 401e60c:	10004226 	beq	r2,zero,401e718 <__swbuf_r+0x138>
 401e610:	80800617 	ldw	r2,24(r16)
 401e614:	8100030b 	ldhu	r4,12(r16)
 401e618:	80800215 	stw	r2,8(r16)
 401e61c:	2080020c 	andi	r2,r4,8
 401e620:	10003626 	beq	r2,zero,401e6fc <__swbuf_r+0x11c>
 401e624:	80c00417 	ldw	r3,16(r16)
 401e628:	18003426 	beq	r3,zero,401e6fc <__swbuf_r+0x11c>
 401e62c:	2088000c 	andi	r2,r4,8192
 401e630:	9c403fcc 	andi	r17,r19,255
 401e634:	10001a26 	beq	r2,zero,401e6a0 <__swbuf_r+0xc0>
 401e638:	80800017 	ldw	r2,0(r16)
 401e63c:	81000517 	ldw	r4,20(r16)
 401e640:	10c7c83a 	sub	r3,r2,r3
 401e644:	1900200e 	bge	r3,r4,401e6c8 <__swbuf_r+0xe8>
 401e648:	18c00044 	addi	r3,r3,1
 401e64c:	81000217 	ldw	r4,8(r16)
 401e650:	11400044 	addi	r5,r2,1
 401e654:	81400015 	stw	r5,0(r16)
 401e658:	213fffc4 	addi	r4,r4,-1
 401e65c:	81000215 	stw	r4,8(r16)
 401e660:	14c00005 	stb	r19,0(r2)
 401e664:	80800517 	ldw	r2,20(r16)
 401e668:	10c01e26 	beq	r2,r3,401e6e4 <__swbuf_r+0x104>
 401e66c:	8080030b 	ldhu	r2,12(r16)
 401e670:	1080004c 	andi	r2,r2,1
 401e674:	10000226 	beq	r2,zero,401e680 <__swbuf_r+0xa0>
 401e678:	00800284 	movi	r2,10
 401e67c:	88801926 	beq	r17,r2,401e6e4 <__swbuf_r+0x104>
 401e680:	8805883a 	mov	r2,r17
 401e684:	dfc00417 	ldw	ra,16(sp)
 401e688:	dcc00317 	ldw	r19,12(sp)
 401e68c:	dc800217 	ldw	r18,8(sp)
 401e690:	dc400117 	ldw	r17,4(sp)
 401e694:	dc000017 	ldw	r16,0(sp)
 401e698:	dec00504 	addi	sp,sp,20
 401e69c:	f800283a 	ret
 401e6a0:	81401917 	ldw	r5,100(r16)
 401e6a4:	00b7ffc4 	movi	r2,-8193
 401e6a8:	21080014 	ori	r4,r4,8192
 401e6ac:	2884703a 	and	r2,r5,r2
 401e6b0:	80801915 	stw	r2,100(r16)
 401e6b4:	80800017 	ldw	r2,0(r16)
 401e6b8:	8100030d 	sth	r4,12(r16)
 401e6bc:	81000517 	ldw	r4,20(r16)
 401e6c0:	10c7c83a 	sub	r3,r2,r3
 401e6c4:	193fe016 	blt	r3,r4,401e648 <__reset+0xfb01d648>
 401e6c8:	800b883a 	mov	r5,r16
 401e6cc:	9009883a 	mov	r4,r18
 401e6d0:	4018aa40 	call	4018aa4 <_fflush_r>
 401e6d4:	1000071e 	bne	r2,zero,401e6f4 <__swbuf_r+0x114>
 401e6d8:	80800017 	ldw	r2,0(r16)
 401e6dc:	00c00044 	movi	r3,1
 401e6e0:	003fda06 	br	401e64c <__reset+0xfb01d64c>
 401e6e4:	800b883a 	mov	r5,r16
 401e6e8:	9009883a 	mov	r4,r18
 401e6ec:	4018aa40 	call	4018aa4 <_fflush_r>
 401e6f0:	103fe326 	beq	r2,zero,401e680 <__reset+0xfb01d680>
 401e6f4:	00bfffc4 	movi	r2,-1
 401e6f8:	003fe206 	br	401e684 <__reset+0xfb01d684>
 401e6fc:	800b883a 	mov	r5,r16
 401e700:	9009883a 	mov	r4,r18
 401e704:	4016eac0 	call	4016eac <__swsetup_r>
 401e708:	103ffa1e 	bne	r2,zero,401e6f4 <__reset+0xfb01d6f4>
 401e70c:	8100030b 	ldhu	r4,12(r16)
 401e710:	80c00417 	ldw	r3,16(r16)
 401e714:	003fc506 	br	401e62c <__reset+0xfb01d62c>
 401e718:	4018e800 	call	4018e80 <__sinit>
 401e71c:	003fbc06 	br	401e610 <__reset+0xfb01d610>

0401e720 <__swbuf>:
 401e720:	00810474 	movhi	r2,1041
 401e724:	109a5804 	addi	r2,r2,26976
 401e728:	280d883a 	mov	r6,r5
 401e72c:	200b883a 	mov	r5,r4
 401e730:	11000017 	ldw	r4,0(r2)
 401e734:	401e5e01 	jmpi	401e5e0 <__swbuf_r>

0401e738 <_wcrtomb_r>:
 401e738:	defff604 	addi	sp,sp,-40
 401e73c:	00810474 	movhi	r2,1041
 401e740:	dc800815 	stw	r18,32(sp)
 401e744:	dc400715 	stw	r17,28(sp)
 401e748:	dc000615 	stw	r16,24(sp)
 401e74c:	109a5c04 	addi	r2,r2,26992
 401e750:	dfc00915 	stw	ra,36(sp)
 401e754:	2021883a 	mov	r16,r4
 401e758:	3823883a 	mov	r17,r7
 401e75c:	14800017 	ldw	r18,0(r2)
 401e760:	28001426 	beq	r5,zero,401e7b4 <_wcrtomb_r+0x7c>
 401e764:	d9400415 	stw	r5,16(sp)
 401e768:	d9800515 	stw	r6,20(sp)
 401e76c:	40199c40 	call	40199c4 <__locale_charset>
 401e770:	d9800517 	ldw	r6,20(sp)
 401e774:	d9400417 	ldw	r5,16(sp)
 401e778:	100f883a 	mov	r7,r2
 401e77c:	dc400015 	stw	r17,0(sp)
 401e780:	8009883a 	mov	r4,r16
 401e784:	903ee83a 	callr	r18
 401e788:	00ffffc4 	movi	r3,-1
 401e78c:	10c0031e 	bne	r2,r3,401e79c <_wcrtomb_r+0x64>
 401e790:	88000015 	stw	zero,0(r17)
 401e794:	00c02284 	movi	r3,138
 401e798:	80c00015 	stw	r3,0(r16)
 401e79c:	dfc00917 	ldw	ra,36(sp)
 401e7a0:	dc800817 	ldw	r18,32(sp)
 401e7a4:	dc400717 	ldw	r17,28(sp)
 401e7a8:	dc000617 	ldw	r16,24(sp)
 401e7ac:	dec00a04 	addi	sp,sp,40
 401e7b0:	f800283a 	ret
 401e7b4:	40199c40 	call	40199c4 <__locale_charset>
 401e7b8:	100f883a 	mov	r7,r2
 401e7bc:	dc400015 	stw	r17,0(sp)
 401e7c0:	000d883a 	mov	r6,zero
 401e7c4:	d9400104 	addi	r5,sp,4
 401e7c8:	8009883a 	mov	r4,r16
 401e7cc:	903ee83a 	callr	r18
 401e7d0:	003fed06 	br	401e788 <__reset+0xfb01d788>

0401e7d4 <wcrtomb>:
 401e7d4:	defff604 	addi	sp,sp,-40
 401e7d8:	00810474 	movhi	r2,1041
 401e7dc:	dc800615 	stw	r18,24(sp)
 401e7e0:	dc400515 	stw	r17,20(sp)
 401e7e4:	109a5804 	addi	r2,r2,26976
 401e7e8:	dfc00915 	stw	ra,36(sp)
 401e7ec:	dd000815 	stw	r20,32(sp)
 401e7f0:	dcc00715 	stw	r19,28(sp)
 401e7f4:	dc000415 	stw	r16,16(sp)
 401e7f8:	3025883a 	mov	r18,r6
 401e7fc:	14400017 	ldw	r17,0(r2)
 401e800:	20001926 	beq	r4,zero,401e868 <wcrtomb+0x94>
 401e804:	00810474 	movhi	r2,1041
 401e808:	109a5c04 	addi	r2,r2,26992
 401e80c:	15000017 	ldw	r20,0(r2)
 401e810:	2021883a 	mov	r16,r4
 401e814:	2827883a 	mov	r19,r5
 401e818:	40199c40 	call	40199c4 <__locale_charset>
 401e81c:	100f883a 	mov	r7,r2
 401e820:	dc800015 	stw	r18,0(sp)
 401e824:	980d883a 	mov	r6,r19
 401e828:	800b883a 	mov	r5,r16
 401e82c:	8809883a 	mov	r4,r17
 401e830:	a03ee83a 	callr	r20
 401e834:	00ffffc4 	movi	r3,-1
 401e838:	10c0031e 	bne	r2,r3,401e848 <wcrtomb+0x74>
 401e83c:	90000015 	stw	zero,0(r18)
 401e840:	00c02284 	movi	r3,138
 401e844:	88c00015 	stw	r3,0(r17)
 401e848:	dfc00917 	ldw	ra,36(sp)
 401e84c:	dd000817 	ldw	r20,32(sp)
 401e850:	dcc00717 	ldw	r19,28(sp)
 401e854:	dc800617 	ldw	r18,24(sp)
 401e858:	dc400517 	ldw	r17,20(sp)
 401e85c:	dc000417 	ldw	r16,16(sp)
 401e860:	dec00a04 	addi	sp,sp,40
 401e864:	f800283a 	ret
 401e868:	00810474 	movhi	r2,1041
 401e86c:	109a5c04 	addi	r2,r2,26992
 401e870:	14000017 	ldw	r16,0(r2)
 401e874:	40199c40 	call	40199c4 <__locale_charset>
 401e878:	100f883a 	mov	r7,r2
 401e87c:	dc800015 	stw	r18,0(sp)
 401e880:	000d883a 	mov	r6,zero
 401e884:	d9400104 	addi	r5,sp,4
 401e888:	8809883a 	mov	r4,r17
 401e88c:	803ee83a 	callr	r16
 401e890:	003fe806 	br	401e834 <__reset+0xfb01d834>

0401e894 <__ascii_wctomb>:
 401e894:	28000526 	beq	r5,zero,401e8ac <__ascii_wctomb+0x18>
 401e898:	00803fc4 	movi	r2,255
 401e89c:	11800536 	bltu	r2,r6,401e8b4 <__ascii_wctomb+0x20>
 401e8a0:	29800005 	stb	r6,0(r5)
 401e8a4:	00800044 	movi	r2,1
 401e8a8:	f800283a 	ret
 401e8ac:	0005883a 	mov	r2,zero
 401e8b0:	f800283a 	ret
 401e8b4:	00802284 	movi	r2,138
 401e8b8:	20800015 	stw	r2,0(r4)
 401e8bc:	00bfffc4 	movi	r2,-1
 401e8c0:	f800283a 	ret

0401e8c4 <_wctomb_r>:
 401e8c4:	00810474 	movhi	r2,1041
 401e8c8:	defff904 	addi	sp,sp,-28
 401e8cc:	109a5c04 	addi	r2,r2,26992
 401e8d0:	dfc00615 	stw	ra,24(sp)
 401e8d4:	dc400515 	stw	r17,20(sp)
 401e8d8:	dc000415 	stw	r16,16(sp)
 401e8dc:	3823883a 	mov	r17,r7
 401e8e0:	14000017 	ldw	r16,0(r2)
 401e8e4:	d9000115 	stw	r4,4(sp)
 401e8e8:	d9400215 	stw	r5,8(sp)
 401e8ec:	d9800315 	stw	r6,12(sp)
 401e8f0:	40199c40 	call	40199c4 <__locale_charset>
 401e8f4:	d9800317 	ldw	r6,12(sp)
 401e8f8:	d9400217 	ldw	r5,8(sp)
 401e8fc:	d9000117 	ldw	r4,4(sp)
 401e900:	100f883a 	mov	r7,r2
 401e904:	dc400015 	stw	r17,0(sp)
 401e908:	803ee83a 	callr	r16
 401e90c:	dfc00617 	ldw	ra,24(sp)
 401e910:	dc400517 	ldw	r17,20(sp)
 401e914:	dc000417 	ldw	r16,16(sp)
 401e918:	dec00704 	addi	sp,sp,28
 401e91c:	f800283a 	ret

0401e920 <__udivdi3>:
 401e920:	defff504 	addi	sp,sp,-44
 401e924:	dcc00415 	stw	r19,16(sp)
 401e928:	dc000115 	stw	r16,4(sp)
 401e92c:	dfc00a15 	stw	ra,40(sp)
 401e930:	df000915 	stw	fp,36(sp)
 401e934:	ddc00815 	stw	r23,32(sp)
 401e938:	dd800715 	stw	r22,28(sp)
 401e93c:	dd400615 	stw	r21,24(sp)
 401e940:	dd000515 	stw	r20,20(sp)
 401e944:	dc800315 	stw	r18,12(sp)
 401e948:	dc400215 	stw	r17,8(sp)
 401e94c:	2027883a 	mov	r19,r4
 401e950:	2821883a 	mov	r16,r5
 401e954:	3800411e 	bne	r7,zero,401ea5c <__udivdi3+0x13c>
 401e958:	3023883a 	mov	r17,r6
 401e95c:	2025883a 	mov	r18,r4
 401e960:	2980522e 	bgeu	r5,r6,401eaac <__udivdi3+0x18c>
 401e964:	00bfffd4 	movui	r2,65535
 401e968:	282d883a 	mov	r22,r5
 401e96c:	1180a836 	bltu	r2,r6,401ec10 <__udivdi3+0x2f0>
 401e970:	00803fc4 	movi	r2,255
 401e974:	1185803a 	cmpltu	r2,r2,r6
 401e978:	100490fa 	slli	r2,r2,3
 401e97c:	3086d83a 	srl	r3,r6,r2
 401e980:	01010234 	movhi	r4,1032
 401e984:	21074e04 	addi	r4,r4,7480
 401e988:	20c7883a 	add	r3,r4,r3
 401e98c:	18c00003 	ldbu	r3,0(r3)
 401e990:	1885883a 	add	r2,r3,r2
 401e994:	00c00804 	movi	r3,32
 401e998:	1887c83a 	sub	r3,r3,r2
 401e99c:	18000526 	beq	r3,zero,401e9b4 <__udivdi3+0x94>
 401e9a0:	80e0983a 	sll	r16,r16,r3
 401e9a4:	9884d83a 	srl	r2,r19,r2
 401e9a8:	30e2983a 	sll	r17,r6,r3
 401e9ac:	98e4983a 	sll	r18,r19,r3
 401e9b0:	142cb03a 	or	r22,r2,r16
 401e9b4:	882ad43a 	srli	r21,r17,16
 401e9b8:	b009883a 	mov	r4,r22
 401e9bc:	8d3fffcc 	andi	r20,r17,65535
 401e9c0:	a80b883a 	mov	r5,r21
 401e9c4:	400dd100 	call	400dd10 <__umodsi3>
 401e9c8:	b009883a 	mov	r4,r22
 401e9cc:	a80b883a 	mov	r5,r21
 401e9d0:	1027883a 	mov	r19,r2
 401e9d4:	400dcac0 	call	400dcac <__udivsi3>
 401e9d8:	102d883a 	mov	r22,r2
 401e9dc:	9826943a 	slli	r19,r19,16
 401e9e0:	9004d43a 	srli	r2,r18,16
 401e9e4:	a5a1383a 	mul	r16,r20,r22
 401e9e8:	14c4b03a 	or	r2,r2,r19
 401e9ec:	1400052e 	bgeu	r2,r16,401ea04 <__udivdi3+0xe4>
 401e9f0:	1445883a 	add	r2,r2,r17
 401e9f4:	b0ffffc4 	addi	r3,r22,-1
 401e9f8:	14400136 	bltu	r2,r17,401ea00 <__udivdi3+0xe0>
 401e9fc:	14012336 	bltu	r2,r16,401ee8c <__udivdi3+0x56c>
 401ea00:	182d883a 	mov	r22,r3
 401ea04:	1421c83a 	sub	r16,r2,r16
 401ea08:	a80b883a 	mov	r5,r21
 401ea0c:	8009883a 	mov	r4,r16
 401ea10:	400dd100 	call	400dd10 <__umodsi3>
 401ea14:	1027883a 	mov	r19,r2
 401ea18:	a80b883a 	mov	r5,r21
 401ea1c:	8009883a 	mov	r4,r16
 401ea20:	400dcac0 	call	400dcac <__udivsi3>
 401ea24:	9826943a 	slli	r19,r19,16
 401ea28:	a0a9383a 	mul	r20,r20,r2
 401ea2c:	94bfffcc 	andi	r18,r18,65535
 401ea30:	94e4b03a 	or	r18,r18,r19
 401ea34:	9500052e 	bgeu	r18,r20,401ea4c <__udivdi3+0x12c>
 401ea38:	8ca5883a 	add	r18,r17,r18
 401ea3c:	10ffffc4 	addi	r3,r2,-1
 401ea40:	9440f136 	bltu	r18,r17,401ee08 <__udivdi3+0x4e8>
 401ea44:	9500f02e 	bgeu	r18,r20,401ee08 <__udivdi3+0x4e8>
 401ea48:	10bfff84 	addi	r2,r2,-2
 401ea4c:	b00c943a 	slli	r6,r22,16
 401ea50:	0007883a 	mov	r3,zero
 401ea54:	3084b03a 	or	r2,r6,r2
 401ea58:	00005906 	br	401ebc0 <__udivdi3+0x2a0>
 401ea5c:	29c05636 	bltu	r5,r7,401ebb8 <__udivdi3+0x298>
 401ea60:	00bfffd4 	movui	r2,65535
 401ea64:	11c0622e 	bgeu	r2,r7,401ebf0 <__udivdi3+0x2d0>
 401ea68:	00804034 	movhi	r2,256
 401ea6c:	10bfffc4 	addi	r2,r2,-1
 401ea70:	11c0ee36 	bltu	r2,r7,401ee2c <__udivdi3+0x50c>
 401ea74:	00800404 	movi	r2,16
 401ea78:	3886d83a 	srl	r3,r7,r2
 401ea7c:	01010234 	movhi	r4,1032
 401ea80:	21074e04 	addi	r4,r4,7480
 401ea84:	20c7883a 	add	r3,r4,r3
 401ea88:	18c00003 	ldbu	r3,0(r3)
 401ea8c:	05400804 	movi	r21,32
 401ea90:	1885883a 	add	r2,r3,r2
 401ea94:	a8abc83a 	sub	r21,r21,r2
 401ea98:	a800621e 	bne	r21,zero,401ec24 <__udivdi3+0x304>
 401ea9c:	3c00e936 	bltu	r7,r16,401ee44 <__udivdi3+0x524>
 401eaa0:	9985403a 	cmpgeu	r2,r19,r6
 401eaa4:	0007883a 	mov	r3,zero
 401eaa8:	00004506 	br	401ebc0 <__udivdi3+0x2a0>
 401eaac:	3000041e 	bne	r6,zero,401eac0 <__udivdi3+0x1a0>
 401eab0:	000b883a 	mov	r5,zero
 401eab4:	01000044 	movi	r4,1
 401eab8:	400dcac0 	call	400dcac <__udivsi3>
 401eabc:	1023883a 	mov	r17,r2
 401eac0:	00bfffd4 	movui	r2,65535
 401eac4:	14404e2e 	bgeu	r2,r17,401ec00 <__udivdi3+0x2e0>
 401eac8:	00804034 	movhi	r2,256
 401eacc:	10bfffc4 	addi	r2,r2,-1
 401ead0:	1440d836 	bltu	r2,r17,401ee34 <__udivdi3+0x514>
 401ead4:	00800404 	movi	r2,16
 401ead8:	8886d83a 	srl	r3,r17,r2
 401eadc:	01010234 	movhi	r4,1032
 401eae0:	21074e04 	addi	r4,r4,7480
 401eae4:	20c7883a 	add	r3,r4,r3
 401eae8:	18c00003 	ldbu	r3,0(r3)
 401eaec:	1885883a 	add	r2,r3,r2
 401eaf0:	00c00804 	movi	r3,32
 401eaf4:	1887c83a 	sub	r3,r3,r2
 401eaf8:	18008f1e 	bne	r3,zero,401ed38 <__udivdi3+0x418>
 401eafc:	882ad43a 	srli	r21,r17,16
 401eb00:	8461c83a 	sub	r16,r16,r17
 401eb04:	8d3fffcc 	andi	r20,r17,65535
 401eb08:	00c00044 	movi	r3,1
 401eb0c:	8009883a 	mov	r4,r16
 401eb10:	a80b883a 	mov	r5,r21
 401eb14:	d8c00015 	stw	r3,0(sp)
 401eb18:	400dd100 	call	400dd10 <__umodsi3>
 401eb1c:	8009883a 	mov	r4,r16
 401eb20:	a80b883a 	mov	r5,r21
 401eb24:	1027883a 	mov	r19,r2
 401eb28:	400dcac0 	call	400dcac <__udivsi3>
 401eb2c:	9826943a 	slli	r19,r19,16
 401eb30:	9008d43a 	srli	r4,r18,16
 401eb34:	1521383a 	mul	r16,r2,r20
 401eb38:	102d883a 	mov	r22,r2
 401eb3c:	24c8b03a 	or	r4,r4,r19
 401eb40:	d8c00017 	ldw	r3,0(sp)
 401eb44:	2400052e 	bgeu	r4,r16,401eb5c <__udivdi3+0x23c>
 401eb48:	2449883a 	add	r4,r4,r17
 401eb4c:	b0bfffc4 	addi	r2,r22,-1
 401eb50:	24400136 	bltu	r4,r17,401eb58 <__udivdi3+0x238>
 401eb54:	2400ca36 	bltu	r4,r16,401ee80 <__udivdi3+0x560>
 401eb58:	102d883a 	mov	r22,r2
 401eb5c:	2421c83a 	sub	r16,r4,r16
 401eb60:	a80b883a 	mov	r5,r21
 401eb64:	8009883a 	mov	r4,r16
 401eb68:	d8c00015 	stw	r3,0(sp)
 401eb6c:	400dd100 	call	400dd10 <__umodsi3>
 401eb70:	1027883a 	mov	r19,r2
 401eb74:	a80b883a 	mov	r5,r21
 401eb78:	8009883a 	mov	r4,r16
 401eb7c:	400dcac0 	call	400dcac <__udivsi3>
 401eb80:	9826943a 	slli	r19,r19,16
 401eb84:	1529383a 	mul	r20,r2,r20
 401eb88:	94bfffcc 	andi	r18,r18,65535
 401eb8c:	94e4b03a 	or	r18,r18,r19
 401eb90:	d8c00017 	ldw	r3,0(sp)
 401eb94:	9500052e 	bgeu	r18,r20,401ebac <__udivdi3+0x28c>
 401eb98:	8ca5883a 	add	r18,r17,r18
 401eb9c:	113fffc4 	addi	r4,r2,-1
 401eba0:	94409736 	bltu	r18,r17,401ee00 <__udivdi3+0x4e0>
 401eba4:	9500962e 	bgeu	r18,r20,401ee00 <__udivdi3+0x4e0>
 401eba8:	10bfff84 	addi	r2,r2,-2
 401ebac:	b00c943a 	slli	r6,r22,16
 401ebb0:	3084b03a 	or	r2,r6,r2
 401ebb4:	00000206 	br	401ebc0 <__udivdi3+0x2a0>
 401ebb8:	0007883a 	mov	r3,zero
 401ebbc:	0005883a 	mov	r2,zero
 401ebc0:	dfc00a17 	ldw	ra,40(sp)
 401ebc4:	df000917 	ldw	fp,36(sp)
 401ebc8:	ddc00817 	ldw	r23,32(sp)
 401ebcc:	dd800717 	ldw	r22,28(sp)
 401ebd0:	dd400617 	ldw	r21,24(sp)
 401ebd4:	dd000517 	ldw	r20,20(sp)
 401ebd8:	dcc00417 	ldw	r19,16(sp)
 401ebdc:	dc800317 	ldw	r18,12(sp)
 401ebe0:	dc400217 	ldw	r17,8(sp)
 401ebe4:	dc000117 	ldw	r16,4(sp)
 401ebe8:	dec00b04 	addi	sp,sp,44
 401ebec:	f800283a 	ret
 401ebf0:	00803fc4 	movi	r2,255
 401ebf4:	11c5803a 	cmpltu	r2,r2,r7
 401ebf8:	100490fa 	slli	r2,r2,3
 401ebfc:	003f9e06 	br	401ea78 <__reset+0xfb01da78>
 401ec00:	00803fc4 	movi	r2,255
 401ec04:	1445803a 	cmpltu	r2,r2,r17
 401ec08:	100490fa 	slli	r2,r2,3
 401ec0c:	003fb206 	br	401ead8 <__reset+0xfb01dad8>
 401ec10:	00804034 	movhi	r2,256
 401ec14:	10bfffc4 	addi	r2,r2,-1
 401ec18:	11808836 	bltu	r2,r6,401ee3c <__udivdi3+0x51c>
 401ec1c:	00800404 	movi	r2,16
 401ec20:	003f5606 	br	401e97c <__reset+0xfb01d97c>
 401ec24:	30aed83a 	srl	r23,r6,r2
 401ec28:	3d4e983a 	sll	r7,r7,r21
 401ec2c:	80acd83a 	srl	r22,r16,r2
 401ec30:	9884d83a 	srl	r2,r19,r2
 401ec34:	3deeb03a 	or	r23,r7,r23
 401ec38:	b824d43a 	srli	r18,r23,16
 401ec3c:	8560983a 	sll	r16,r16,r21
 401ec40:	b009883a 	mov	r4,r22
 401ec44:	900b883a 	mov	r5,r18
 401ec48:	3568983a 	sll	r20,r6,r21
 401ec4c:	1420b03a 	or	r16,r2,r16
 401ec50:	400dd100 	call	400dd10 <__umodsi3>
 401ec54:	b009883a 	mov	r4,r22
 401ec58:	900b883a 	mov	r5,r18
 401ec5c:	1023883a 	mov	r17,r2
 401ec60:	400dcac0 	call	400dcac <__udivsi3>
 401ec64:	8808943a 	slli	r4,r17,16
 401ec68:	bf3fffcc 	andi	fp,r23,65535
 401ec6c:	8006d43a 	srli	r3,r16,16
 401ec70:	e0a3383a 	mul	r17,fp,r2
 401ec74:	100d883a 	mov	r6,r2
 401ec78:	1906b03a 	or	r3,r3,r4
 401ec7c:	1c40042e 	bgeu	r3,r17,401ec90 <__udivdi3+0x370>
 401ec80:	1dc7883a 	add	r3,r3,r23
 401ec84:	10bfffc4 	addi	r2,r2,-1
 401ec88:	1dc0752e 	bgeu	r3,r23,401ee60 <__udivdi3+0x540>
 401ec8c:	100d883a 	mov	r6,r2
 401ec90:	1c63c83a 	sub	r17,r3,r17
 401ec94:	900b883a 	mov	r5,r18
 401ec98:	8809883a 	mov	r4,r17
 401ec9c:	d9800015 	stw	r6,0(sp)
 401eca0:	400dd100 	call	400dd10 <__umodsi3>
 401eca4:	102d883a 	mov	r22,r2
 401eca8:	8809883a 	mov	r4,r17
 401ecac:	900b883a 	mov	r5,r18
 401ecb0:	400dcac0 	call	400dcac <__udivsi3>
 401ecb4:	b02c943a 	slli	r22,r22,16
 401ecb8:	e089383a 	mul	r4,fp,r2
 401ecbc:	843fffcc 	andi	r16,r16,65535
 401ecc0:	85a0b03a 	or	r16,r16,r22
 401ecc4:	d9800017 	ldw	r6,0(sp)
 401ecc8:	8100042e 	bgeu	r16,r4,401ecdc <__udivdi3+0x3bc>
 401eccc:	85e1883a 	add	r16,r16,r23
 401ecd0:	10ffffc4 	addi	r3,r2,-1
 401ecd4:	85c05e2e 	bgeu	r16,r23,401ee50 <__udivdi3+0x530>
 401ecd8:	1805883a 	mov	r2,r3
 401ecdc:	300c943a 	slli	r6,r6,16
 401ece0:	a17fffcc 	andi	r5,r20,65535
 401ece4:	a028d43a 	srli	r20,r20,16
 401ece8:	3084b03a 	or	r2,r6,r2
 401ecec:	10ffffcc 	andi	r3,r2,65535
 401ecf0:	100cd43a 	srli	r6,r2,16
 401ecf4:	194f383a 	mul	r7,r3,r5
 401ecf8:	1d07383a 	mul	r3,r3,r20
 401ecfc:	314b383a 	mul	r5,r6,r5
 401ed00:	3810d43a 	srli	r8,r7,16
 401ed04:	8121c83a 	sub	r16,r16,r4
 401ed08:	1947883a 	add	r3,r3,r5
 401ed0c:	40c7883a 	add	r3,r8,r3
 401ed10:	350d383a 	mul	r6,r6,r20
 401ed14:	1940022e 	bgeu	r3,r5,401ed20 <__udivdi3+0x400>
 401ed18:	01000074 	movhi	r4,1
 401ed1c:	310d883a 	add	r6,r6,r4
 401ed20:	1828d43a 	srli	r20,r3,16
 401ed24:	a18d883a 	add	r6,r20,r6
 401ed28:	81803e36 	bltu	r16,r6,401ee24 <__udivdi3+0x504>
 401ed2c:	81803826 	beq	r16,r6,401ee10 <__udivdi3+0x4f0>
 401ed30:	0007883a 	mov	r3,zero
 401ed34:	003fa206 	br	401ebc0 <__reset+0xfb01dbc0>
 401ed38:	88e2983a 	sll	r17,r17,r3
 401ed3c:	80a8d83a 	srl	r20,r16,r2
 401ed40:	80e0983a 	sll	r16,r16,r3
 401ed44:	882ad43a 	srli	r21,r17,16
 401ed48:	9884d83a 	srl	r2,r19,r2
 401ed4c:	a009883a 	mov	r4,r20
 401ed50:	a80b883a 	mov	r5,r21
 401ed54:	142eb03a 	or	r23,r2,r16
 401ed58:	98e4983a 	sll	r18,r19,r3
 401ed5c:	400dd100 	call	400dd10 <__umodsi3>
 401ed60:	a009883a 	mov	r4,r20
 401ed64:	a80b883a 	mov	r5,r21
 401ed68:	1021883a 	mov	r16,r2
 401ed6c:	400dcac0 	call	400dcac <__udivsi3>
 401ed70:	1039883a 	mov	fp,r2
 401ed74:	8d3fffcc 	andi	r20,r17,65535
 401ed78:	8020943a 	slli	r16,r16,16
 401ed7c:	b804d43a 	srli	r2,r23,16
 401ed80:	a72d383a 	mul	r22,r20,fp
 401ed84:	1404b03a 	or	r2,r2,r16
 401ed88:	1580062e 	bgeu	r2,r22,401eda4 <__udivdi3+0x484>
 401ed8c:	1445883a 	add	r2,r2,r17
 401ed90:	e0ffffc4 	addi	r3,fp,-1
 401ed94:	14403836 	bltu	r2,r17,401ee78 <__udivdi3+0x558>
 401ed98:	1580372e 	bgeu	r2,r22,401ee78 <__udivdi3+0x558>
 401ed9c:	e73fff84 	addi	fp,fp,-2
 401eda0:	1445883a 	add	r2,r2,r17
 401eda4:	15adc83a 	sub	r22,r2,r22
 401eda8:	a80b883a 	mov	r5,r21
 401edac:	b009883a 	mov	r4,r22
 401edb0:	400dd100 	call	400dd10 <__umodsi3>
 401edb4:	1027883a 	mov	r19,r2
 401edb8:	b009883a 	mov	r4,r22
 401edbc:	a80b883a 	mov	r5,r21
 401edc0:	400dcac0 	call	400dcac <__udivsi3>
 401edc4:	9826943a 	slli	r19,r19,16
 401edc8:	a0a1383a 	mul	r16,r20,r2
 401edcc:	b93fffcc 	andi	r4,r23,65535
 401edd0:	24c8b03a 	or	r4,r4,r19
 401edd4:	2400062e 	bgeu	r4,r16,401edf0 <__udivdi3+0x4d0>
 401edd8:	2449883a 	add	r4,r4,r17
 401eddc:	10ffffc4 	addi	r3,r2,-1
 401ede0:	24402336 	bltu	r4,r17,401ee70 <__udivdi3+0x550>
 401ede4:	2400222e 	bgeu	r4,r16,401ee70 <__udivdi3+0x550>
 401ede8:	10bfff84 	addi	r2,r2,-2
 401edec:	2449883a 	add	r4,r4,r17
 401edf0:	e038943a 	slli	fp,fp,16
 401edf4:	2421c83a 	sub	r16,r4,r16
 401edf8:	e086b03a 	or	r3,fp,r2
 401edfc:	003f4306 	br	401eb0c <__reset+0xfb01db0c>
 401ee00:	2005883a 	mov	r2,r4
 401ee04:	003f6906 	br	401ebac <__reset+0xfb01dbac>
 401ee08:	1805883a 	mov	r2,r3
 401ee0c:	003f0f06 	br	401ea4c <__reset+0xfb01da4c>
 401ee10:	1806943a 	slli	r3,r3,16
 401ee14:	9d66983a 	sll	r19,r19,r21
 401ee18:	39ffffcc 	andi	r7,r7,65535
 401ee1c:	19c7883a 	add	r3,r3,r7
 401ee20:	98ffc32e 	bgeu	r19,r3,401ed30 <__reset+0xfb01dd30>
 401ee24:	10bfffc4 	addi	r2,r2,-1
 401ee28:	003fc106 	br	401ed30 <__reset+0xfb01dd30>
 401ee2c:	00800604 	movi	r2,24
 401ee30:	003f1106 	br	401ea78 <__reset+0xfb01da78>
 401ee34:	00800604 	movi	r2,24
 401ee38:	003f2706 	br	401ead8 <__reset+0xfb01dad8>
 401ee3c:	00800604 	movi	r2,24
 401ee40:	003ece06 	br	401e97c <__reset+0xfb01d97c>
 401ee44:	0007883a 	mov	r3,zero
 401ee48:	00800044 	movi	r2,1
 401ee4c:	003f5c06 	br	401ebc0 <__reset+0xfb01dbc0>
 401ee50:	813fa12e 	bgeu	r16,r4,401ecd8 <__reset+0xfb01dcd8>
 401ee54:	10bfff84 	addi	r2,r2,-2
 401ee58:	85e1883a 	add	r16,r16,r23
 401ee5c:	003f9f06 	br	401ecdc <__reset+0xfb01dcdc>
 401ee60:	1c7f8a2e 	bgeu	r3,r17,401ec8c <__reset+0xfb01dc8c>
 401ee64:	31bfff84 	addi	r6,r6,-2
 401ee68:	1dc7883a 	add	r3,r3,r23
 401ee6c:	003f8806 	br	401ec90 <__reset+0xfb01dc90>
 401ee70:	1805883a 	mov	r2,r3
 401ee74:	003fde06 	br	401edf0 <__reset+0xfb01ddf0>
 401ee78:	1839883a 	mov	fp,r3
 401ee7c:	003fc906 	br	401eda4 <__reset+0xfb01dda4>
 401ee80:	b5bfff84 	addi	r22,r22,-2
 401ee84:	2449883a 	add	r4,r4,r17
 401ee88:	003f3406 	br	401eb5c <__reset+0xfb01db5c>
 401ee8c:	b5bfff84 	addi	r22,r22,-2
 401ee90:	1445883a 	add	r2,r2,r17
 401ee94:	003edb06 	br	401ea04 <__reset+0xfb01da04>

0401ee98 <__umoddi3>:
 401ee98:	defff404 	addi	sp,sp,-48
 401ee9c:	df000a15 	stw	fp,40(sp)
 401eea0:	dc400315 	stw	r17,12(sp)
 401eea4:	dc000215 	stw	r16,8(sp)
 401eea8:	dfc00b15 	stw	ra,44(sp)
 401eeac:	ddc00915 	stw	r23,36(sp)
 401eeb0:	dd800815 	stw	r22,32(sp)
 401eeb4:	dd400715 	stw	r21,28(sp)
 401eeb8:	dd000615 	stw	r20,24(sp)
 401eebc:	dcc00515 	stw	r19,20(sp)
 401eec0:	dc800415 	stw	r18,16(sp)
 401eec4:	2021883a 	mov	r16,r4
 401eec8:	2823883a 	mov	r17,r5
 401eecc:	2839883a 	mov	fp,r5
 401eed0:	38003c1e 	bne	r7,zero,401efc4 <__umoddi3+0x12c>
 401eed4:	3027883a 	mov	r19,r6
 401eed8:	2029883a 	mov	r20,r4
 401eedc:	2980512e 	bgeu	r5,r6,401f024 <__umoddi3+0x18c>
 401eee0:	00bfffd4 	movui	r2,65535
 401eee4:	11809a36 	bltu	r2,r6,401f150 <__umoddi3+0x2b8>
 401eee8:	01003fc4 	movi	r4,255
 401eeec:	2189803a 	cmpltu	r4,r4,r6
 401eef0:	200890fa 	slli	r4,r4,3
 401eef4:	3104d83a 	srl	r2,r6,r4
 401eef8:	00c10234 	movhi	r3,1032
 401eefc:	18c74e04 	addi	r3,r3,7480
 401ef00:	1885883a 	add	r2,r3,r2
 401ef04:	10c00003 	ldbu	r3,0(r2)
 401ef08:	00800804 	movi	r2,32
 401ef0c:	1909883a 	add	r4,r3,r4
 401ef10:	1125c83a 	sub	r18,r2,r4
 401ef14:	90000526 	beq	r18,zero,401ef2c <__umoddi3+0x94>
 401ef18:	8ca2983a 	sll	r17,r17,r18
 401ef1c:	8108d83a 	srl	r4,r16,r4
 401ef20:	34a6983a 	sll	r19,r6,r18
 401ef24:	84a8983a 	sll	r20,r16,r18
 401ef28:	2478b03a 	or	fp,r4,r17
 401ef2c:	982ed43a 	srli	r23,r19,16
 401ef30:	e009883a 	mov	r4,fp
 401ef34:	9dbfffcc 	andi	r22,r19,65535
 401ef38:	b80b883a 	mov	r5,r23
 401ef3c:	400dd100 	call	400dd10 <__umodsi3>
 401ef40:	e009883a 	mov	r4,fp
 401ef44:	b80b883a 	mov	r5,r23
 401ef48:	102b883a 	mov	r21,r2
 401ef4c:	400dcac0 	call	400dcac <__udivsi3>
 401ef50:	a806943a 	slli	r3,r21,16
 401ef54:	a008d43a 	srli	r4,r20,16
 401ef58:	b085383a 	mul	r2,r22,r2
 401ef5c:	20c8b03a 	or	r4,r4,r3
 401ef60:	2080032e 	bgeu	r4,r2,401ef70 <__umoddi3+0xd8>
 401ef64:	24c9883a 	add	r4,r4,r19
 401ef68:	24c00136 	bltu	r4,r19,401ef70 <__umoddi3+0xd8>
 401ef6c:	20811036 	bltu	r4,r2,401f3b0 <__umoddi3+0x518>
 401ef70:	20abc83a 	sub	r21,r4,r2
 401ef74:	b80b883a 	mov	r5,r23
 401ef78:	a809883a 	mov	r4,r21
 401ef7c:	400dd100 	call	400dd10 <__umodsi3>
 401ef80:	1023883a 	mov	r17,r2
 401ef84:	b80b883a 	mov	r5,r23
 401ef88:	a809883a 	mov	r4,r21
 401ef8c:	400dcac0 	call	400dcac <__udivsi3>
 401ef90:	8822943a 	slli	r17,r17,16
 401ef94:	b085383a 	mul	r2,r22,r2
 401ef98:	a0ffffcc 	andi	r3,r20,65535
 401ef9c:	1c46b03a 	or	r3,r3,r17
 401efa0:	1880042e 	bgeu	r3,r2,401efb4 <__umoddi3+0x11c>
 401efa4:	1cc7883a 	add	r3,r3,r19
 401efa8:	1cc00236 	bltu	r3,r19,401efb4 <__umoddi3+0x11c>
 401efac:	1880012e 	bgeu	r3,r2,401efb4 <__umoddi3+0x11c>
 401efb0:	1cc7883a 	add	r3,r3,r19
 401efb4:	1885c83a 	sub	r2,r3,r2
 401efb8:	1484d83a 	srl	r2,r2,r18
 401efbc:	0007883a 	mov	r3,zero
 401efc0:	00004f06 	br	401f100 <__umoddi3+0x268>
 401efc4:	29c04c36 	bltu	r5,r7,401f0f8 <__umoddi3+0x260>
 401efc8:	00bfffd4 	movui	r2,65535
 401efcc:	11c0582e 	bgeu	r2,r7,401f130 <__umoddi3+0x298>
 401efd0:	00804034 	movhi	r2,256
 401efd4:	10bfffc4 	addi	r2,r2,-1
 401efd8:	11c0e736 	bltu	r2,r7,401f378 <__umoddi3+0x4e0>
 401efdc:	01000404 	movi	r4,16
 401efe0:	3904d83a 	srl	r2,r7,r4
 401efe4:	00c10234 	movhi	r3,1032
 401efe8:	18c74e04 	addi	r3,r3,7480
 401efec:	1885883a 	add	r2,r3,r2
 401eff0:	14c00003 	ldbu	r19,0(r2)
 401eff4:	00c00804 	movi	r3,32
 401eff8:	9927883a 	add	r19,r19,r4
 401effc:	1ce9c83a 	sub	r20,r3,r19
 401f000:	a000581e 	bne	r20,zero,401f164 <__umoddi3+0x2cc>
 401f004:	3c400136 	bltu	r7,r17,401f00c <__umoddi3+0x174>
 401f008:	8180eb36 	bltu	r16,r6,401f3b8 <__umoddi3+0x520>
 401f00c:	8185c83a 	sub	r2,r16,r6
 401f010:	89e3c83a 	sub	r17,r17,r7
 401f014:	8089803a 	cmpltu	r4,r16,r2
 401f018:	8939c83a 	sub	fp,r17,r4
 401f01c:	e007883a 	mov	r3,fp
 401f020:	00003706 	br	401f100 <__umoddi3+0x268>
 401f024:	3000041e 	bne	r6,zero,401f038 <__umoddi3+0x1a0>
 401f028:	000b883a 	mov	r5,zero
 401f02c:	01000044 	movi	r4,1
 401f030:	400dcac0 	call	400dcac <__udivsi3>
 401f034:	1027883a 	mov	r19,r2
 401f038:	00bfffd4 	movui	r2,65535
 401f03c:	14c0402e 	bgeu	r2,r19,401f140 <__umoddi3+0x2a8>
 401f040:	00804034 	movhi	r2,256
 401f044:	10bfffc4 	addi	r2,r2,-1
 401f048:	14c0cd36 	bltu	r2,r19,401f380 <__umoddi3+0x4e8>
 401f04c:	00800404 	movi	r2,16
 401f050:	9886d83a 	srl	r3,r19,r2
 401f054:	01010234 	movhi	r4,1032
 401f058:	21074e04 	addi	r4,r4,7480
 401f05c:	20c7883a 	add	r3,r4,r3
 401f060:	18c00003 	ldbu	r3,0(r3)
 401f064:	1887883a 	add	r3,r3,r2
 401f068:	00800804 	movi	r2,32
 401f06c:	10e5c83a 	sub	r18,r2,r3
 401f070:	9000901e 	bne	r18,zero,401f2b4 <__umoddi3+0x41c>
 401f074:	982cd43a 	srli	r22,r19,16
 401f078:	8ce3c83a 	sub	r17,r17,r19
 401f07c:	9d7fffcc 	andi	r21,r19,65535
 401f080:	b00b883a 	mov	r5,r22
 401f084:	8809883a 	mov	r4,r17
 401f088:	400dd100 	call	400dd10 <__umodsi3>
 401f08c:	8809883a 	mov	r4,r17
 401f090:	b00b883a 	mov	r5,r22
 401f094:	1021883a 	mov	r16,r2
 401f098:	400dcac0 	call	400dcac <__udivsi3>
 401f09c:	8006943a 	slli	r3,r16,16
 401f0a0:	a008d43a 	srli	r4,r20,16
 401f0a4:	1545383a 	mul	r2,r2,r21
 401f0a8:	20c8b03a 	or	r4,r4,r3
 401f0ac:	2080042e 	bgeu	r4,r2,401f0c0 <__umoddi3+0x228>
 401f0b0:	24c9883a 	add	r4,r4,r19
 401f0b4:	24c00236 	bltu	r4,r19,401f0c0 <__umoddi3+0x228>
 401f0b8:	2080012e 	bgeu	r4,r2,401f0c0 <__umoddi3+0x228>
 401f0bc:	24c9883a 	add	r4,r4,r19
 401f0c0:	20a1c83a 	sub	r16,r4,r2
 401f0c4:	b00b883a 	mov	r5,r22
 401f0c8:	8009883a 	mov	r4,r16
 401f0cc:	400dd100 	call	400dd10 <__umodsi3>
 401f0d0:	1023883a 	mov	r17,r2
 401f0d4:	b00b883a 	mov	r5,r22
 401f0d8:	8009883a 	mov	r4,r16
 401f0dc:	400dcac0 	call	400dcac <__udivsi3>
 401f0e0:	8822943a 	slli	r17,r17,16
 401f0e4:	1545383a 	mul	r2,r2,r21
 401f0e8:	a53fffcc 	andi	r20,r20,65535
 401f0ec:	a446b03a 	or	r3,r20,r17
 401f0f0:	18bfb02e 	bgeu	r3,r2,401efb4 <__reset+0xfb01dfb4>
 401f0f4:	003fab06 	br	401efa4 <__reset+0xfb01dfa4>
 401f0f8:	2005883a 	mov	r2,r4
 401f0fc:	2807883a 	mov	r3,r5
 401f100:	dfc00b17 	ldw	ra,44(sp)
 401f104:	df000a17 	ldw	fp,40(sp)
 401f108:	ddc00917 	ldw	r23,36(sp)
 401f10c:	dd800817 	ldw	r22,32(sp)
 401f110:	dd400717 	ldw	r21,28(sp)
 401f114:	dd000617 	ldw	r20,24(sp)
 401f118:	dcc00517 	ldw	r19,20(sp)
 401f11c:	dc800417 	ldw	r18,16(sp)
 401f120:	dc400317 	ldw	r17,12(sp)
 401f124:	dc000217 	ldw	r16,8(sp)
 401f128:	dec00c04 	addi	sp,sp,48
 401f12c:	f800283a 	ret
 401f130:	04c03fc4 	movi	r19,255
 401f134:	99c9803a 	cmpltu	r4,r19,r7
 401f138:	200890fa 	slli	r4,r4,3
 401f13c:	003fa806 	br	401efe0 <__reset+0xfb01dfe0>
 401f140:	00803fc4 	movi	r2,255
 401f144:	14c5803a 	cmpltu	r2,r2,r19
 401f148:	100490fa 	slli	r2,r2,3
 401f14c:	003fc006 	br	401f050 <__reset+0xfb01e050>
 401f150:	00804034 	movhi	r2,256
 401f154:	10bfffc4 	addi	r2,r2,-1
 401f158:	11808b36 	bltu	r2,r6,401f388 <__umoddi3+0x4f0>
 401f15c:	01000404 	movi	r4,16
 401f160:	003f6406 	br	401eef4 <__reset+0xfb01def4>
 401f164:	34c4d83a 	srl	r2,r6,r19
 401f168:	3d0e983a 	sll	r7,r7,r20
 401f16c:	8cf8d83a 	srl	fp,r17,r19
 401f170:	8d10983a 	sll	r8,r17,r20
 401f174:	38aab03a 	or	r21,r7,r2
 401f178:	a82cd43a 	srli	r22,r21,16
 401f17c:	84e2d83a 	srl	r17,r16,r19
 401f180:	e009883a 	mov	r4,fp
 401f184:	b00b883a 	mov	r5,r22
 401f188:	8a22b03a 	or	r17,r17,r8
 401f18c:	3524983a 	sll	r18,r6,r20
 401f190:	400dd100 	call	400dd10 <__umodsi3>
 401f194:	e009883a 	mov	r4,fp
 401f198:	b00b883a 	mov	r5,r22
 401f19c:	102f883a 	mov	r23,r2
 401f1a0:	400dcac0 	call	400dcac <__udivsi3>
 401f1a4:	100d883a 	mov	r6,r2
 401f1a8:	b808943a 	slli	r4,r23,16
 401f1ac:	aa3fffcc 	andi	r8,r21,65535
 401f1b0:	8804d43a 	srli	r2,r17,16
 401f1b4:	41af383a 	mul	r23,r8,r6
 401f1b8:	8520983a 	sll	r16,r16,r20
 401f1bc:	1104b03a 	or	r2,r2,r4
 401f1c0:	15c0042e 	bgeu	r2,r23,401f1d4 <__umoddi3+0x33c>
 401f1c4:	1545883a 	add	r2,r2,r21
 401f1c8:	30ffffc4 	addi	r3,r6,-1
 401f1cc:	1540742e 	bgeu	r2,r21,401f3a0 <__umoddi3+0x508>
 401f1d0:	180d883a 	mov	r6,r3
 401f1d4:	15efc83a 	sub	r23,r2,r23
 401f1d8:	b00b883a 	mov	r5,r22
 401f1dc:	b809883a 	mov	r4,r23
 401f1e0:	d9800115 	stw	r6,4(sp)
 401f1e4:	da000015 	stw	r8,0(sp)
 401f1e8:	400dd100 	call	400dd10 <__umodsi3>
 401f1ec:	b00b883a 	mov	r5,r22
 401f1f0:	b809883a 	mov	r4,r23
 401f1f4:	1039883a 	mov	fp,r2
 401f1f8:	400dcac0 	call	400dcac <__udivsi3>
 401f1fc:	da000017 	ldw	r8,0(sp)
 401f200:	e038943a 	slli	fp,fp,16
 401f204:	100b883a 	mov	r5,r2
 401f208:	4089383a 	mul	r4,r8,r2
 401f20c:	8a3fffcc 	andi	r8,r17,65535
 401f210:	4710b03a 	or	r8,r8,fp
 401f214:	d9800117 	ldw	r6,4(sp)
 401f218:	4100042e 	bgeu	r8,r4,401f22c <__umoddi3+0x394>
 401f21c:	4551883a 	add	r8,r8,r21
 401f220:	10bfffc4 	addi	r2,r2,-1
 401f224:	45405a2e 	bgeu	r8,r21,401f390 <__umoddi3+0x4f8>
 401f228:	100b883a 	mov	r5,r2
 401f22c:	300c943a 	slli	r6,r6,16
 401f230:	91ffffcc 	andi	r7,r18,65535
 401f234:	9004d43a 	srli	r2,r18,16
 401f238:	314cb03a 	or	r6,r6,r5
 401f23c:	317fffcc 	andi	r5,r6,65535
 401f240:	300cd43a 	srli	r6,r6,16
 401f244:	29d3383a 	mul	r9,r5,r7
 401f248:	288b383a 	mul	r5,r5,r2
 401f24c:	31cf383a 	mul	r7,r6,r7
 401f250:	4806d43a 	srli	r3,r9,16
 401f254:	4111c83a 	sub	r8,r8,r4
 401f258:	29cb883a 	add	r5,r5,r7
 401f25c:	194b883a 	add	r5,r3,r5
 401f260:	3085383a 	mul	r2,r6,r2
 401f264:	29c0022e 	bgeu	r5,r7,401f270 <__umoddi3+0x3d8>
 401f268:	00c00074 	movhi	r3,1
 401f26c:	10c5883a 	add	r2,r2,r3
 401f270:	2808d43a 	srli	r4,r5,16
 401f274:	280a943a 	slli	r5,r5,16
 401f278:	4a7fffcc 	andi	r9,r9,65535
 401f27c:	2085883a 	add	r2,r4,r2
 401f280:	2a4b883a 	add	r5,r5,r9
 401f284:	40803636 	bltu	r8,r2,401f360 <__umoddi3+0x4c8>
 401f288:	40804d26 	beq	r8,r2,401f3c0 <__umoddi3+0x528>
 401f28c:	4089c83a 	sub	r4,r8,r2
 401f290:	280f883a 	mov	r7,r5
 401f294:	81cfc83a 	sub	r7,r16,r7
 401f298:	81c7803a 	cmpltu	r3,r16,r7
 401f29c:	20c7c83a 	sub	r3,r4,r3
 401f2a0:	1cc4983a 	sll	r2,r3,r19
 401f2a4:	3d0ed83a 	srl	r7,r7,r20
 401f2a8:	1d06d83a 	srl	r3,r3,r20
 401f2ac:	11c4b03a 	or	r2,r2,r7
 401f2b0:	003f9306 	br	401f100 <__reset+0xfb01e100>
 401f2b4:	9ca6983a 	sll	r19,r19,r18
 401f2b8:	88e8d83a 	srl	r20,r17,r3
 401f2bc:	80c4d83a 	srl	r2,r16,r3
 401f2c0:	982cd43a 	srli	r22,r19,16
 401f2c4:	8ca2983a 	sll	r17,r17,r18
 401f2c8:	a009883a 	mov	r4,r20
 401f2cc:	b00b883a 	mov	r5,r22
 401f2d0:	1478b03a 	or	fp,r2,r17
 401f2d4:	400dd100 	call	400dd10 <__umodsi3>
 401f2d8:	a009883a 	mov	r4,r20
 401f2dc:	b00b883a 	mov	r5,r22
 401f2e0:	1023883a 	mov	r17,r2
 401f2e4:	400dcac0 	call	400dcac <__udivsi3>
 401f2e8:	9d7fffcc 	andi	r21,r19,65535
 401f2ec:	880a943a 	slli	r5,r17,16
 401f2f0:	e008d43a 	srli	r4,fp,16
 401f2f4:	a885383a 	mul	r2,r21,r2
 401f2f8:	84a8983a 	sll	r20,r16,r18
 401f2fc:	2148b03a 	or	r4,r4,r5
 401f300:	2080042e 	bgeu	r4,r2,401f314 <__umoddi3+0x47c>
 401f304:	24c9883a 	add	r4,r4,r19
 401f308:	24c00236 	bltu	r4,r19,401f314 <__umoddi3+0x47c>
 401f30c:	2080012e 	bgeu	r4,r2,401f314 <__umoddi3+0x47c>
 401f310:	24c9883a 	add	r4,r4,r19
 401f314:	20a3c83a 	sub	r17,r4,r2
 401f318:	b00b883a 	mov	r5,r22
 401f31c:	8809883a 	mov	r4,r17
 401f320:	400dd100 	call	400dd10 <__umodsi3>
 401f324:	102f883a 	mov	r23,r2
 401f328:	8809883a 	mov	r4,r17
 401f32c:	b00b883a 	mov	r5,r22
 401f330:	400dcac0 	call	400dcac <__udivsi3>
 401f334:	b82e943a 	slli	r23,r23,16
 401f338:	a885383a 	mul	r2,r21,r2
 401f33c:	e13fffcc 	andi	r4,fp,65535
 401f340:	25c8b03a 	or	r4,r4,r23
 401f344:	2080042e 	bgeu	r4,r2,401f358 <__umoddi3+0x4c0>
 401f348:	24c9883a 	add	r4,r4,r19
 401f34c:	24c00236 	bltu	r4,r19,401f358 <__umoddi3+0x4c0>
 401f350:	2080012e 	bgeu	r4,r2,401f358 <__umoddi3+0x4c0>
 401f354:	24c9883a 	add	r4,r4,r19
 401f358:	20a3c83a 	sub	r17,r4,r2
 401f35c:	003f4806 	br	401f080 <__reset+0xfb01e080>
 401f360:	2c8fc83a 	sub	r7,r5,r18
 401f364:	1545c83a 	sub	r2,r2,r21
 401f368:	29cb803a 	cmpltu	r5,r5,r7
 401f36c:	1145c83a 	sub	r2,r2,r5
 401f370:	4089c83a 	sub	r4,r8,r2
 401f374:	003fc706 	br	401f294 <__reset+0xfb01e294>
 401f378:	01000604 	movi	r4,24
 401f37c:	003f1806 	br	401efe0 <__reset+0xfb01dfe0>
 401f380:	00800604 	movi	r2,24
 401f384:	003f3206 	br	401f050 <__reset+0xfb01e050>
 401f388:	01000604 	movi	r4,24
 401f38c:	003ed906 	br	401eef4 <__reset+0xfb01def4>
 401f390:	413fa52e 	bgeu	r8,r4,401f228 <__reset+0xfb01e228>
 401f394:	297fff84 	addi	r5,r5,-2
 401f398:	4551883a 	add	r8,r8,r21
 401f39c:	003fa306 	br	401f22c <__reset+0xfb01e22c>
 401f3a0:	15ff8b2e 	bgeu	r2,r23,401f1d0 <__reset+0xfb01e1d0>
 401f3a4:	31bfff84 	addi	r6,r6,-2
 401f3a8:	1545883a 	add	r2,r2,r21
 401f3ac:	003f8906 	br	401f1d4 <__reset+0xfb01e1d4>
 401f3b0:	24c9883a 	add	r4,r4,r19
 401f3b4:	003eee06 	br	401ef70 <__reset+0xfb01df70>
 401f3b8:	8005883a 	mov	r2,r16
 401f3bc:	003f1706 	br	401f01c <__reset+0xfb01e01c>
 401f3c0:	817fe736 	bltu	r16,r5,401f360 <__reset+0xfb01e360>
 401f3c4:	280f883a 	mov	r7,r5
 401f3c8:	0009883a 	mov	r4,zero
 401f3cc:	003fb106 	br	401f294 <__reset+0xfb01e294>

0401f3d0 <__floatunsidf>:
 401f3d0:	defffe04 	addi	sp,sp,-8
 401f3d4:	dc000015 	stw	r16,0(sp)
 401f3d8:	dfc00115 	stw	ra,4(sp)
 401f3dc:	2021883a 	mov	r16,r4
 401f3e0:	20002226 	beq	r4,zero,401f46c <__floatunsidf+0x9c>
 401f3e4:	4011b6c0 	call	4011b6c <__clzsi2>
 401f3e8:	01010784 	movi	r4,1054
 401f3ec:	2089c83a 	sub	r4,r4,r2
 401f3f0:	01810cc4 	movi	r6,1075
 401f3f4:	310dc83a 	sub	r6,r6,r4
 401f3f8:	00c007c4 	movi	r3,31
 401f3fc:	1980120e 	bge	r3,r6,401f448 <__floatunsidf+0x78>
 401f400:	00c104c4 	movi	r3,1043
 401f404:	1907c83a 	sub	r3,r3,r4
 401f408:	80ca983a 	sll	r5,r16,r3
 401f40c:	00800434 	movhi	r2,16
 401f410:	10bfffc4 	addi	r2,r2,-1
 401f414:	2101ffcc 	andi	r4,r4,2047
 401f418:	0021883a 	mov	r16,zero
 401f41c:	288a703a 	and	r5,r5,r2
 401f420:	2008953a 	slli	r4,r4,20
 401f424:	00c00434 	movhi	r3,16
 401f428:	18ffffc4 	addi	r3,r3,-1
 401f42c:	28c6703a 	and	r3,r5,r3
 401f430:	8005883a 	mov	r2,r16
 401f434:	1906b03a 	or	r3,r3,r4
 401f438:	dfc00117 	ldw	ra,4(sp)
 401f43c:	dc000017 	ldw	r16,0(sp)
 401f440:	dec00204 	addi	sp,sp,8
 401f444:	f800283a 	ret
 401f448:	00c002c4 	movi	r3,11
 401f44c:	188bc83a 	sub	r5,r3,r2
 401f450:	814ad83a 	srl	r5,r16,r5
 401f454:	00c00434 	movhi	r3,16
 401f458:	18ffffc4 	addi	r3,r3,-1
 401f45c:	81a0983a 	sll	r16,r16,r6
 401f460:	2101ffcc 	andi	r4,r4,2047
 401f464:	28ca703a 	and	r5,r5,r3
 401f468:	003fed06 	br	401f420 <__reset+0xfb01e420>
 401f46c:	0009883a 	mov	r4,zero
 401f470:	000b883a 	mov	r5,zero
 401f474:	003fea06 	br	401f420 <__reset+0xfb01e420>

0401f478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f478:	defffe04 	addi	sp,sp,-8
 401f47c:	dfc00115 	stw	ra,4(sp)
 401f480:	df000015 	stw	fp,0(sp)
 401f484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f488:	d0a00d17 	ldw	r2,-32716(gp)
 401f48c:	10000326 	beq	r2,zero,401f49c <alt_get_errno+0x24>
 401f490:	d0a00d17 	ldw	r2,-32716(gp)
 401f494:	103ee83a 	callr	r2
 401f498:	00000106 	br	401f4a0 <alt_get_errno+0x28>
 401f49c:	d0a01704 	addi	r2,gp,-32676
}
 401f4a0:	e037883a 	mov	sp,fp
 401f4a4:	dfc00117 	ldw	ra,4(sp)
 401f4a8:	df000017 	ldw	fp,0(sp)
 401f4ac:	dec00204 	addi	sp,sp,8
 401f4b0:	f800283a 	ret

0401f4b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401f4b4:	defffb04 	addi	sp,sp,-20
 401f4b8:	dfc00415 	stw	ra,16(sp)
 401f4bc:	df000315 	stw	fp,12(sp)
 401f4c0:	df000304 	addi	fp,sp,12
 401f4c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401f4c8:	e0bfff17 	ldw	r2,-4(fp)
 401f4cc:	10000616 	blt	r2,zero,401f4e8 <close+0x34>
 401f4d0:	e0bfff17 	ldw	r2,-4(fp)
 401f4d4:	10c00324 	muli	r3,r2,12
 401f4d8:	00810474 	movhi	r2,1041
 401f4dc:	1095aa04 	addi	r2,r2,22184
 401f4e0:	1885883a 	add	r2,r3,r2
 401f4e4:	00000106 	br	401f4ec <close+0x38>
 401f4e8:	0005883a 	mov	r2,zero
 401f4ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401f4f0:	e0bffd17 	ldw	r2,-12(fp)
 401f4f4:	10001926 	beq	r2,zero,401f55c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401f4f8:	e0bffd17 	ldw	r2,-12(fp)
 401f4fc:	10800017 	ldw	r2,0(r2)
 401f500:	10800417 	ldw	r2,16(r2)
 401f504:	10000626 	beq	r2,zero,401f520 <close+0x6c>
 401f508:	e0bffd17 	ldw	r2,-12(fp)
 401f50c:	10800017 	ldw	r2,0(r2)
 401f510:	10800417 	ldw	r2,16(r2)
 401f514:	e13ffd17 	ldw	r4,-12(fp)
 401f518:	103ee83a 	callr	r2
 401f51c:	00000106 	br	401f524 <close+0x70>
 401f520:	0005883a 	mov	r2,zero
 401f524:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401f528:	e13fff17 	ldw	r4,-4(fp)
 401f52c:	40201200 	call	4020120 <alt_release_fd>
    if (rval < 0)
 401f530:	e0bffe17 	ldw	r2,-8(fp)
 401f534:	1000070e 	bge	r2,zero,401f554 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 401f538:	401f4780 	call	401f478 <alt_get_errno>
 401f53c:	1007883a 	mov	r3,r2
 401f540:	e0bffe17 	ldw	r2,-8(fp)
 401f544:	0085c83a 	sub	r2,zero,r2
 401f548:	18800015 	stw	r2,0(r3)
      return -1;
 401f54c:	00bfffc4 	movi	r2,-1
 401f550:	00000706 	br	401f570 <close+0xbc>
    }
    return 0;
 401f554:	0005883a 	mov	r2,zero
 401f558:	00000506 	br	401f570 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401f55c:	401f4780 	call	401f478 <alt_get_errno>
 401f560:	1007883a 	mov	r3,r2
 401f564:	00801444 	movi	r2,81
 401f568:	18800015 	stw	r2,0(r3)
    return -1;
 401f56c:	00bfffc4 	movi	r2,-1
  }
}
 401f570:	e037883a 	mov	sp,fp
 401f574:	dfc00117 	ldw	ra,4(sp)
 401f578:	df000017 	ldw	fp,0(sp)
 401f57c:	dec00204 	addi	sp,sp,8
 401f580:	f800283a 	ret

0401f584 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401f584:	defffe04 	addi	sp,sp,-8
 401f588:	df000115 	stw	fp,4(sp)
 401f58c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401f590:	e03fff15 	stw	zero,-4(fp)
 401f594:	00000506 	br	401f5ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 401f598:	e0bfff17 	ldw	r2,-4(fp)
 401f59c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 401f5a0:	e0bfff17 	ldw	r2,-4(fp)
 401f5a4:	10800804 	addi	r2,r2,32
 401f5a8:	e0bfff15 	stw	r2,-4(fp)
 401f5ac:	e0bfff17 	ldw	r2,-4(fp)
 401f5b0:	10820030 	cmpltui	r2,r2,2048
 401f5b4:	103ff81e 	bne	r2,zero,401f598 <__reset+0xfb01e598>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401f5b8:	0001883a 	nop
 401f5bc:	e037883a 	mov	sp,fp
 401f5c0:	df000017 	ldw	fp,0(sp)
 401f5c4:	dec00104 	addi	sp,sp,4
 401f5c8:	f800283a 	ret

0401f5cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401f5cc:	defffc04 	addi	sp,sp,-16
 401f5d0:	df000315 	stw	fp,12(sp)
 401f5d4:	df000304 	addi	fp,sp,12
 401f5d8:	e13ffd15 	stw	r4,-12(fp)
 401f5dc:	e17ffe15 	stw	r5,-8(fp)
 401f5e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401f5e4:	e0bfff17 	ldw	r2,-4(fp)
}
 401f5e8:	e037883a 	mov	sp,fp
 401f5ec:	df000017 	ldw	fp,0(sp)
 401f5f0:	dec00104 	addi	sp,sp,4
 401f5f4:	f800283a 	ret

0401f5f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f5f8:	defffe04 	addi	sp,sp,-8
 401f5fc:	dfc00115 	stw	ra,4(sp)
 401f600:	df000015 	stw	fp,0(sp)
 401f604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f608:	d0a00d17 	ldw	r2,-32716(gp)
 401f60c:	10000326 	beq	r2,zero,401f61c <alt_get_errno+0x24>
 401f610:	d0a00d17 	ldw	r2,-32716(gp)
 401f614:	103ee83a 	callr	r2
 401f618:	00000106 	br	401f620 <alt_get_errno+0x28>
 401f61c:	d0a01704 	addi	r2,gp,-32676
}
 401f620:	e037883a 	mov	sp,fp
 401f624:	dfc00117 	ldw	ra,4(sp)
 401f628:	df000017 	ldw	fp,0(sp)
 401f62c:	dec00204 	addi	sp,sp,8
 401f630:	f800283a 	ret

0401f634 <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 401f634:	defff704 	addi	sp,sp,-36
 401f638:	dfc00615 	stw	ra,24(sp)
 401f63c:	df000515 	stw	fp,20(sp)
 401f640:	df000504 	addi	fp,sp,20
 401f644:	e13ffe15 	stw	r4,-8(fp)
 401f648:	e17fff15 	stw	r5,-4(fp)
 401f64c:	e1800215 	stw	r6,8(fp)
 401f650:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401f654:	e0bffe17 	ldw	r2,-8(fp)
 401f658:	10000616 	blt	r2,zero,401f674 <fcntl+0x40>
 401f65c:	e0bffe17 	ldw	r2,-8(fp)
 401f660:	10c00324 	muli	r3,r2,12
 401f664:	00810474 	movhi	r2,1041
 401f668:	1095aa04 	addi	r2,r2,22184
 401f66c:	1885883a 	add	r2,r3,r2
 401f670:	00000106 	br	401f678 <fcntl+0x44>
 401f674:	0005883a 	mov	r2,zero
 401f678:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401f67c:	e0bffb17 	ldw	r2,-20(fp)
 401f680:	10002a26 	beq	r2,zero,401f72c <fcntl+0xf8>
  {
    switch (cmd)
 401f684:	e0bfff17 	ldw	r2,-4(fp)
 401f688:	10c000e0 	cmpeqi	r3,r2,3
 401f68c:	1800031e 	bne	r3,zero,401f69c <fcntl+0x68>
 401f690:	10800120 	cmpeqi	r2,r2,4
 401f694:	1000071e 	bne	r2,zero,401f6b4 <fcntl+0x80>
 401f698:	00001e06 	br	401f714 <fcntl+0xe0>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 401f69c:	e0bffb17 	ldw	r2,-20(fp)
 401f6a0:	10c00217 	ldw	r3,8(r2)
 401f6a4:	00900034 	movhi	r2,16384
 401f6a8:	10bfffc4 	addi	r2,r2,-1
 401f6ac:	1884703a 	and	r2,r3,r2
 401f6b0:	00002306 	br	401f740 <fcntl+0x10c>
    case F_SETFL:
      va_start(argp, cmd);
 401f6b4:	e0800204 	addi	r2,fp,8
 401f6b8:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
 401f6bc:	e0bffd17 	ldw	r2,-12(fp)
 401f6c0:	10c00104 	addi	r3,r2,4
 401f6c4:	e0fffd15 	stw	r3,-12(fp)
 401f6c8:	10800017 	ldw	r2,0(r2)
 401f6cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 401f6d0:	e0bffb17 	ldw	r2,-20(fp)
 401f6d4:	10c00217 	ldw	r3,8(r2)
 401f6d8:	00affdc4 	movi	r2,-16393
 401f6dc:	1886703a 	and	r3,r3,r2
 401f6e0:	e0bffb17 	ldw	r2,-20(fp)
 401f6e4:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 401f6e8:	e0bffb17 	ldw	r2,-20(fp)
 401f6ec:	10800217 	ldw	r2,8(r2)
 401f6f0:	1007883a 	mov	r3,r2
 401f6f4:	e0bffc17 	ldw	r2,-16(fp)
 401f6f8:	1090020c 	andi	r2,r2,16392
 401f6fc:	1884b03a 	or	r2,r3,r2
 401f700:	1007883a 	mov	r3,r2
 401f704:	e0bffb17 	ldw	r2,-20(fp)
 401f708:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
 401f70c:	0005883a 	mov	r2,zero
 401f710:	00000b06 	br	401f740 <fcntl+0x10c>
    default:
      ALT_ERRNO = EINVAL;
 401f714:	401f5f80 	call	401f5f8 <alt_get_errno>
 401f718:	1007883a 	mov	r3,r2
 401f71c:	00800584 	movi	r2,22
 401f720:	18800015 	stw	r2,0(r3)
      return -1;
 401f724:	00bfffc4 	movi	r2,-1
 401f728:	00000506 	br	401f740 <fcntl+0x10c>
    }
  }

  ALT_ERRNO = EBADFD;
 401f72c:	401f5f80 	call	401f5f8 <alt_get_errno>
 401f730:	1007883a 	mov	r3,r2
 401f734:	00801444 	movi	r2,81
 401f738:	18800015 	stw	r2,0(r3)
  return -1;
 401f73c:	00bfffc4 	movi	r2,-1
}
 401f740:	e037883a 	mov	sp,fp
 401f744:	dfc00117 	ldw	ra,4(sp)
 401f748:	df000017 	ldw	fp,0(sp)
 401f74c:	dec00404 	addi	sp,sp,16
 401f750:	f800283a 	ret

0401f754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f754:	defffe04 	addi	sp,sp,-8
 401f758:	dfc00115 	stw	ra,4(sp)
 401f75c:	df000015 	stw	fp,0(sp)
 401f760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f764:	d0a00d17 	ldw	r2,-32716(gp)
 401f768:	10000326 	beq	r2,zero,401f778 <alt_get_errno+0x24>
 401f76c:	d0a00d17 	ldw	r2,-32716(gp)
 401f770:	103ee83a 	callr	r2
 401f774:	00000106 	br	401f77c <alt_get_errno+0x28>
 401f778:	d0a01704 	addi	r2,gp,-32676
}
 401f77c:	e037883a 	mov	sp,fp
 401f780:	dfc00117 	ldw	ra,4(sp)
 401f784:	df000017 	ldw	fp,0(sp)
 401f788:	dec00204 	addi	sp,sp,8
 401f78c:	f800283a 	ret

0401f790 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401f790:	defffb04 	addi	sp,sp,-20
 401f794:	dfc00415 	stw	ra,16(sp)
 401f798:	df000315 	stw	fp,12(sp)
 401f79c:	df000304 	addi	fp,sp,12
 401f7a0:	e13ffe15 	stw	r4,-8(fp)
 401f7a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401f7a8:	e0bffe17 	ldw	r2,-8(fp)
 401f7ac:	10000616 	blt	r2,zero,401f7c8 <fstat+0x38>
 401f7b0:	e0bffe17 	ldw	r2,-8(fp)
 401f7b4:	10c00324 	muli	r3,r2,12
 401f7b8:	00810474 	movhi	r2,1041
 401f7bc:	1095aa04 	addi	r2,r2,22184
 401f7c0:	1885883a 	add	r2,r3,r2
 401f7c4:	00000106 	br	401f7cc <fstat+0x3c>
 401f7c8:	0005883a 	mov	r2,zero
 401f7cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401f7d0:	e0bffd17 	ldw	r2,-12(fp)
 401f7d4:	10001026 	beq	r2,zero,401f818 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401f7d8:	e0bffd17 	ldw	r2,-12(fp)
 401f7dc:	10800017 	ldw	r2,0(r2)
 401f7e0:	10800817 	ldw	r2,32(r2)
 401f7e4:	10000726 	beq	r2,zero,401f804 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 401f7e8:	e0bffd17 	ldw	r2,-12(fp)
 401f7ec:	10800017 	ldw	r2,0(r2)
 401f7f0:	10800817 	ldw	r2,32(r2)
 401f7f4:	e17fff17 	ldw	r5,-4(fp)
 401f7f8:	e13ffd17 	ldw	r4,-12(fp)
 401f7fc:	103ee83a 	callr	r2
 401f800:	00000a06 	br	401f82c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401f804:	e0bfff17 	ldw	r2,-4(fp)
 401f808:	00c80004 	movi	r3,8192
 401f80c:	10c00115 	stw	r3,4(r2)
      return 0;
 401f810:	0005883a 	mov	r2,zero
 401f814:	00000506 	br	401f82c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401f818:	401f7540 	call	401f754 <alt_get_errno>
 401f81c:	1007883a 	mov	r3,r2
 401f820:	00801444 	movi	r2,81
 401f824:	18800015 	stw	r2,0(r3)
    return -1;
 401f828:	00bfffc4 	movi	r2,-1
  }
}
 401f82c:	e037883a 	mov	sp,fp
 401f830:	dfc00117 	ldw	ra,4(sp)
 401f834:	df000017 	ldw	fp,0(sp)
 401f838:	dec00204 	addi	sp,sp,8
 401f83c:	f800283a 	ret

0401f840 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f840:	defff904 	addi	sp,sp,-28
 401f844:	dfc00615 	stw	ra,24(sp)
 401f848:	df000515 	stw	fp,20(sp)
 401f84c:	df000504 	addi	fp,sp,20
 401f850:	e13ffc15 	stw	r4,-16(fp)
 401f854:	e17ffd15 	stw	r5,-12(fp)
 401f858:	e1bffe15 	stw	r6,-8(fp)
 401f85c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401f860:	e0800217 	ldw	r2,8(fp)
 401f864:	d8800015 	stw	r2,0(sp)
 401f868:	e1ffff17 	ldw	r7,-4(fp)
 401f86c:	e1bffe17 	ldw	r6,-8(fp)
 401f870:	e17ffd17 	ldw	r5,-12(fp)
 401f874:	e13ffc17 	ldw	r4,-16(fp)
 401f878:	401f9f00 	call	401f9f0 <alt_iic_isr_register>
}  
 401f87c:	e037883a 	mov	sp,fp
 401f880:	dfc00117 	ldw	ra,4(sp)
 401f884:	df000017 	ldw	fp,0(sp)
 401f888:	dec00204 	addi	sp,sp,8
 401f88c:	f800283a 	ret

0401f890 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401f890:	defff904 	addi	sp,sp,-28
 401f894:	df000615 	stw	fp,24(sp)
 401f898:	df000604 	addi	fp,sp,24
 401f89c:	e13ffe15 	stw	r4,-8(fp)
 401f8a0:	e17fff15 	stw	r5,-4(fp)
 401f8a4:	e0bfff17 	ldw	r2,-4(fp)
 401f8a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f8ac:	0005303a 	rdctl	r2,status
 401f8b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f8b4:	e0fffb17 	ldw	r3,-20(fp)
 401f8b8:	00bfff84 	movi	r2,-2
 401f8bc:	1884703a 	and	r2,r3,r2
 401f8c0:	1001703a 	wrctl	status,r2
  
  return context;
 401f8c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f8c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401f8cc:	00c00044 	movi	r3,1
 401f8d0:	e0bffa17 	ldw	r2,-24(fp)
 401f8d4:	1884983a 	sll	r2,r3,r2
 401f8d8:	1007883a 	mov	r3,r2
 401f8dc:	d0a01b17 	ldw	r2,-32660(gp)
 401f8e0:	1884b03a 	or	r2,r3,r2
 401f8e4:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f8e8:	d0a01b17 	ldw	r2,-32660(gp)
 401f8ec:	100170fa 	wrctl	ienable,r2
 401f8f0:	e0bffc17 	ldw	r2,-16(fp)
 401f8f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f8f8:	e0bffd17 	ldw	r2,-12(fp)
 401f8fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f900:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401f904:	0001883a 	nop
}
 401f908:	e037883a 	mov	sp,fp
 401f90c:	df000017 	ldw	fp,0(sp)
 401f910:	dec00104 	addi	sp,sp,4
 401f914:	f800283a 	ret

0401f918 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401f918:	defff904 	addi	sp,sp,-28
 401f91c:	df000615 	stw	fp,24(sp)
 401f920:	df000604 	addi	fp,sp,24
 401f924:	e13ffe15 	stw	r4,-8(fp)
 401f928:	e17fff15 	stw	r5,-4(fp)
 401f92c:	e0bfff17 	ldw	r2,-4(fp)
 401f930:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f934:	0005303a 	rdctl	r2,status
 401f938:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f93c:	e0fffb17 	ldw	r3,-20(fp)
 401f940:	00bfff84 	movi	r2,-2
 401f944:	1884703a 	and	r2,r3,r2
 401f948:	1001703a 	wrctl	status,r2
  
  return context;
 401f94c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f950:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401f954:	00c00044 	movi	r3,1
 401f958:	e0bffa17 	ldw	r2,-24(fp)
 401f95c:	1884983a 	sll	r2,r3,r2
 401f960:	0084303a 	nor	r2,zero,r2
 401f964:	1007883a 	mov	r3,r2
 401f968:	d0a01b17 	ldw	r2,-32660(gp)
 401f96c:	1884703a 	and	r2,r3,r2
 401f970:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f974:	d0a01b17 	ldw	r2,-32660(gp)
 401f978:	100170fa 	wrctl	ienable,r2
 401f97c:	e0bffc17 	ldw	r2,-16(fp)
 401f980:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f984:	e0bffd17 	ldw	r2,-12(fp)
 401f988:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f98c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401f990:	0001883a 	nop
}
 401f994:	e037883a 	mov	sp,fp
 401f998:	df000017 	ldw	fp,0(sp)
 401f99c:	dec00104 	addi	sp,sp,4
 401f9a0:	f800283a 	ret

0401f9a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401f9a4:	defffc04 	addi	sp,sp,-16
 401f9a8:	df000315 	stw	fp,12(sp)
 401f9ac:	df000304 	addi	fp,sp,12
 401f9b0:	e13ffe15 	stw	r4,-8(fp)
 401f9b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401f9b8:	000530fa 	rdctl	r2,ienable
 401f9bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401f9c0:	00c00044 	movi	r3,1
 401f9c4:	e0bfff17 	ldw	r2,-4(fp)
 401f9c8:	1884983a 	sll	r2,r3,r2
 401f9cc:	1007883a 	mov	r3,r2
 401f9d0:	e0bffd17 	ldw	r2,-12(fp)
 401f9d4:	1884703a 	and	r2,r3,r2
 401f9d8:	1004c03a 	cmpne	r2,r2,zero
 401f9dc:	10803fcc 	andi	r2,r2,255
}
 401f9e0:	e037883a 	mov	sp,fp
 401f9e4:	df000017 	ldw	fp,0(sp)
 401f9e8:	dec00104 	addi	sp,sp,4
 401f9ec:	f800283a 	ret

0401f9f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f9f0:	defff504 	addi	sp,sp,-44
 401f9f4:	dfc00a15 	stw	ra,40(sp)
 401f9f8:	df000915 	stw	fp,36(sp)
 401f9fc:	df000904 	addi	fp,sp,36
 401fa00:	e13ffc15 	stw	r4,-16(fp)
 401fa04:	e17ffd15 	stw	r5,-12(fp)
 401fa08:	e1bffe15 	stw	r6,-8(fp)
 401fa0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401fa10:	00bffa84 	movi	r2,-22
 401fa14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401fa18:	e0bffd17 	ldw	r2,-12(fp)
 401fa1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401fa20:	e0bff817 	ldw	r2,-32(fp)
 401fa24:	10800808 	cmpgei	r2,r2,32
 401fa28:	1000271e 	bne	r2,zero,401fac8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fa2c:	0005303a 	rdctl	r2,status
 401fa30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fa34:	e0fffb17 	ldw	r3,-20(fp)
 401fa38:	00bfff84 	movi	r2,-2
 401fa3c:	1884703a 	and	r2,r3,r2
 401fa40:	1001703a 	wrctl	status,r2
  
  return context;
 401fa44:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401fa48:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401fa4c:	00810474 	movhi	r2,1041
 401fa50:	109a8104 	addi	r2,r2,27140
 401fa54:	e0fff817 	ldw	r3,-32(fp)
 401fa58:	180690fa 	slli	r3,r3,3
 401fa5c:	10c5883a 	add	r2,r2,r3
 401fa60:	e0fffe17 	ldw	r3,-8(fp)
 401fa64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401fa68:	00810474 	movhi	r2,1041
 401fa6c:	109a8104 	addi	r2,r2,27140
 401fa70:	e0fff817 	ldw	r3,-32(fp)
 401fa74:	180690fa 	slli	r3,r3,3
 401fa78:	10c5883a 	add	r2,r2,r3
 401fa7c:	10800104 	addi	r2,r2,4
 401fa80:	e0ffff17 	ldw	r3,-4(fp)
 401fa84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401fa88:	e0bffe17 	ldw	r2,-8(fp)
 401fa8c:	10000526 	beq	r2,zero,401faa4 <alt_iic_isr_register+0xb4>
 401fa90:	e0bff817 	ldw	r2,-32(fp)
 401fa94:	100b883a 	mov	r5,r2
 401fa98:	e13ffc17 	ldw	r4,-16(fp)
 401fa9c:	401f8900 	call	401f890 <alt_ic_irq_enable>
 401faa0:	00000406 	br	401fab4 <alt_iic_isr_register+0xc4>
 401faa4:	e0bff817 	ldw	r2,-32(fp)
 401faa8:	100b883a 	mov	r5,r2
 401faac:	e13ffc17 	ldw	r4,-16(fp)
 401fab0:	401f9180 	call	401f918 <alt_ic_irq_disable>
 401fab4:	e0bff715 	stw	r2,-36(fp)
 401fab8:	e0bffa17 	ldw	r2,-24(fp)
 401fabc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fac0:	e0bff917 	ldw	r2,-28(fp)
 401fac4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401fac8:	e0bff717 	ldw	r2,-36(fp)
}
 401facc:	e037883a 	mov	sp,fp
 401fad0:	dfc00117 	ldw	ra,4(sp)
 401fad4:	df000017 	ldw	fp,0(sp)
 401fad8:	dec00204 	addi	sp,sp,8
 401fadc:	f800283a 	ret

0401fae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401fae0:	defffe04 	addi	sp,sp,-8
 401fae4:	dfc00115 	stw	ra,4(sp)
 401fae8:	df000015 	stw	fp,0(sp)
 401faec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401faf0:	d0a00d17 	ldw	r2,-32716(gp)
 401faf4:	10000326 	beq	r2,zero,401fb04 <alt_get_errno+0x24>
 401faf8:	d0a00d17 	ldw	r2,-32716(gp)
 401fafc:	103ee83a 	callr	r2
 401fb00:	00000106 	br	401fb08 <alt_get_errno+0x28>
 401fb04:	d0a01704 	addi	r2,gp,-32676
}
 401fb08:	e037883a 	mov	sp,fp
 401fb0c:	dfc00117 	ldw	ra,4(sp)
 401fb10:	df000017 	ldw	fp,0(sp)
 401fb14:	dec00204 	addi	sp,sp,8
 401fb18:	f800283a 	ret

0401fb1c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401fb1c:	deffed04 	addi	sp,sp,-76
 401fb20:	dfc01215 	stw	ra,72(sp)
 401fb24:	df001115 	stw	fp,68(sp)
 401fb28:	df001104 	addi	fp,sp,68
 401fb2c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401fb30:	e0bfff17 	ldw	r2,-4(fp)
 401fb34:	10000616 	blt	r2,zero,401fb50 <isatty+0x34>
 401fb38:	e0bfff17 	ldw	r2,-4(fp)
 401fb3c:	10c00324 	muli	r3,r2,12
 401fb40:	00810474 	movhi	r2,1041
 401fb44:	1095aa04 	addi	r2,r2,22184
 401fb48:	1885883a 	add	r2,r3,r2
 401fb4c:	00000106 	br	401fb54 <isatty+0x38>
 401fb50:	0005883a 	mov	r2,zero
 401fb54:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401fb58:	e0bfef17 	ldw	r2,-68(fp)
 401fb5c:	10000e26 	beq	r2,zero,401fb98 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401fb60:	e0bfef17 	ldw	r2,-68(fp)
 401fb64:	10800017 	ldw	r2,0(r2)
 401fb68:	10800817 	ldw	r2,32(r2)
 401fb6c:	1000021e 	bne	r2,zero,401fb78 <isatty+0x5c>
    {
      return 1;
 401fb70:	00800044 	movi	r2,1
 401fb74:	00000d06 	br	401fbac <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401fb78:	e0bff004 	addi	r2,fp,-64
 401fb7c:	100b883a 	mov	r5,r2
 401fb80:	e13fff17 	ldw	r4,-4(fp)
 401fb84:	401f7900 	call	401f790 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401fb88:	e0bff117 	ldw	r2,-60(fp)
 401fb8c:	10880020 	cmpeqi	r2,r2,8192
 401fb90:	10803fcc 	andi	r2,r2,255
 401fb94:	00000506 	br	401fbac <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401fb98:	401fae00 	call	401fae0 <alt_get_errno>
 401fb9c:	1007883a 	mov	r3,r2
 401fba0:	00801444 	movi	r2,81
 401fba4:	18800015 	stw	r2,0(r3)
    return 0;
 401fba8:	0005883a 	mov	r2,zero
  }
}
 401fbac:	e037883a 	mov	sp,fp
 401fbb0:	dfc00117 	ldw	ra,4(sp)
 401fbb4:	df000017 	ldw	fp,0(sp)
 401fbb8:	dec00204 	addi	sp,sp,8
 401fbbc:	f800283a 	ret

0401fbc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401fbc0:	defffe04 	addi	sp,sp,-8
 401fbc4:	dfc00115 	stw	ra,4(sp)
 401fbc8:	df000015 	stw	fp,0(sp)
 401fbcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401fbd0:	d0a00d17 	ldw	r2,-32716(gp)
 401fbd4:	10000326 	beq	r2,zero,401fbe4 <alt_get_errno+0x24>
 401fbd8:	d0a00d17 	ldw	r2,-32716(gp)
 401fbdc:	103ee83a 	callr	r2
 401fbe0:	00000106 	br	401fbe8 <alt_get_errno+0x28>
 401fbe4:	d0a01704 	addi	r2,gp,-32676
}
 401fbe8:	e037883a 	mov	sp,fp
 401fbec:	dfc00117 	ldw	ra,4(sp)
 401fbf0:	df000017 	ldw	fp,0(sp)
 401fbf4:	dec00204 	addi	sp,sp,8
 401fbf8:	f800283a 	ret

0401fbfc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401fbfc:	defff904 	addi	sp,sp,-28
 401fc00:	dfc00615 	stw	ra,24(sp)
 401fc04:	df000515 	stw	fp,20(sp)
 401fc08:	df000504 	addi	fp,sp,20
 401fc0c:	e13ffd15 	stw	r4,-12(fp)
 401fc10:	e17ffe15 	stw	r5,-8(fp)
 401fc14:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401fc18:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401fc1c:	e0bffd17 	ldw	r2,-12(fp)
 401fc20:	10000616 	blt	r2,zero,401fc3c <lseek+0x40>
 401fc24:	e0bffd17 	ldw	r2,-12(fp)
 401fc28:	10c00324 	muli	r3,r2,12
 401fc2c:	00810474 	movhi	r2,1041
 401fc30:	1095aa04 	addi	r2,r2,22184
 401fc34:	1885883a 	add	r2,r3,r2
 401fc38:	00000106 	br	401fc40 <lseek+0x44>
 401fc3c:	0005883a 	mov	r2,zero
 401fc40:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401fc44:	e0bffc17 	ldw	r2,-16(fp)
 401fc48:	10001026 	beq	r2,zero,401fc8c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401fc4c:	e0bffc17 	ldw	r2,-16(fp)
 401fc50:	10800017 	ldw	r2,0(r2)
 401fc54:	10800717 	ldw	r2,28(r2)
 401fc58:	10000926 	beq	r2,zero,401fc80 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401fc5c:	e0bffc17 	ldw	r2,-16(fp)
 401fc60:	10800017 	ldw	r2,0(r2)
 401fc64:	10800717 	ldw	r2,28(r2)
 401fc68:	e1bfff17 	ldw	r6,-4(fp)
 401fc6c:	e17ffe17 	ldw	r5,-8(fp)
 401fc70:	e13ffc17 	ldw	r4,-16(fp)
 401fc74:	103ee83a 	callr	r2
 401fc78:	e0bffb15 	stw	r2,-20(fp)
 401fc7c:	00000506 	br	401fc94 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401fc80:	00bfde84 	movi	r2,-134
 401fc84:	e0bffb15 	stw	r2,-20(fp)
 401fc88:	00000206 	br	401fc94 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 401fc8c:	00bfebc4 	movi	r2,-81
 401fc90:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401fc94:	e0bffb17 	ldw	r2,-20(fp)
 401fc98:	1000070e 	bge	r2,zero,401fcb8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 401fc9c:	401fbc00 	call	401fbc0 <alt_get_errno>
 401fca0:	1007883a 	mov	r3,r2
 401fca4:	e0bffb17 	ldw	r2,-20(fp)
 401fca8:	0085c83a 	sub	r2,zero,r2
 401fcac:	18800015 	stw	r2,0(r3)
    rc = -1;
 401fcb0:	00bfffc4 	movi	r2,-1
 401fcb4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401fcb8:	e0bffb17 	ldw	r2,-20(fp)
}
 401fcbc:	e037883a 	mov	sp,fp
 401fcc0:	dfc00117 	ldw	ra,4(sp)
 401fcc4:	df000017 	ldw	fp,0(sp)
 401fcc8:	dec00204 	addi	sp,sp,8
 401fccc:	f800283a 	ret

0401fcd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401fcd0:	defffd04 	addi	sp,sp,-12
 401fcd4:	dfc00215 	stw	ra,8(sp)
 401fcd8:	df000115 	stw	fp,4(sp)
 401fcdc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401fce0:	0009883a 	mov	r4,zero
 401fce4:	40205700 	call	4020570 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401fce8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401fcec:	40205a80 	call	40205a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401fcf0:	01810234 	movhi	r6,1032
 401fcf4:	31881404 	addi	r6,r6,8272
 401fcf8:	01410234 	movhi	r5,1032
 401fcfc:	29481404 	addi	r5,r5,8272
 401fd00:	01010234 	movhi	r4,1032
 401fd04:	21081404 	addi	r4,r4,8272
 401fd08:	4022b240 	call	4022b24 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401fd0c:	402260c0 	call	402260c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401fd10:	010100b4 	movhi	r4,1026
 401fd14:	21099b04 	addi	r4,r4,9836
 401fd18:	4022dc00 	call	4022dc0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401fd1c:	d0a01c17 	ldw	r2,-32656(gp)
 401fd20:	d0e01d17 	ldw	r3,-32652(gp)
 401fd24:	d1201e17 	ldw	r4,-32648(gp)
 401fd28:	200d883a 	mov	r6,r4
 401fd2c:	180b883a 	mov	r5,r3
 401fd30:	1009883a 	mov	r4,r2
 401fd34:	40075280 	call	4007528 <main>
 401fd38:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401fd3c:	01000044 	movi	r4,1
 401fd40:	401f4b40 	call	401f4b4 <close>
  exit (result);
 401fd44:	e13fff17 	ldw	r4,-4(fp)
 401fd48:	4022dd40 	call	4022dd4 <exit>

0401fd4c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401fd4c:	defffe04 	addi	sp,sp,-8
 401fd50:	df000115 	stw	fp,4(sp)
 401fd54:	df000104 	addi	fp,sp,4
 401fd58:	e13fff15 	stw	r4,-4(fp)
}
 401fd5c:	0001883a 	nop
 401fd60:	e037883a 	mov	sp,fp
 401fd64:	df000017 	ldw	fp,0(sp)
 401fd68:	dec00104 	addi	sp,sp,4
 401fd6c:	f800283a 	ret

0401fd70 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401fd70:	defffe04 	addi	sp,sp,-8
 401fd74:	df000115 	stw	fp,4(sp)
 401fd78:	df000104 	addi	fp,sp,4
 401fd7c:	e13fff15 	stw	r4,-4(fp)
}
 401fd80:	0001883a 	nop
 401fd84:	e037883a 	mov	sp,fp
 401fd88:	df000017 	ldw	fp,0(sp)
 401fd8c:	dec00104 	addi	sp,sp,4
 401fd90:	f800283a 	ret

0401fd94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401fd94:	defffe04 	addi	sp,sp,-8
 401fd98:	dfc00115 	stw	ra,4(sp)
 401fd9c:	df000015 	stw	fp,0(sp)
 401fda0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401fda4:	d0a00d17 	ldw	r2,-32716(gp)
 401fda8:	10000326 	beq	r2,zero,401fdb8 <alt_get_errno+0x24>
 401fdac:	d0a00d17 	ldw	r2,-32716(gp)
 401fdb0:	103ee83a 	callr	r2
 401fdb4:	00000106 	br	401fdbc <alt_get_errno+0x28>
 401fdb8:	d0a01704 	addi	r2,gp,-32676
}
 401fdbc:	e037883a 	mov	sp,fp
 401fdc0:	dfc00117 	ldw	ra,4(sp)
 401fdc4:	df000017 	ldw	fp,0(sp)
 401fdc8:	dec00204 	addi	sp,sp,8
 401fdcc:	f800283a 	ret

0401fdd0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401fdd0:	defffd04 	addi	sp,sp,-12
 401fdd4:	df000215 	stw	fp,8(sp)
 401fdd8:	df000204 	addi	fp,sp,8
 401fddc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401fde0:	e0bfff17 	ldw	r2,-4(fp)
 401fde4:	10800217 	ldw	r2,8(r2)
 401fde8:	10d00034 	orhi	r3,r2,16384
 401fdec:	e0bfff17 	ldw	r2,-4(fp)
 401fdf0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fdf4:	e03ffe15 	stw	zero,-8(fp)
 401fdf8:	00001d06 	br	401fe70 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fdfc:	00810474 	movhi	r2,1041
 401fe00:	1095aa04 	addi	r2,r2,22184
 401fe04:	e0fffe17 	ldw	r3,-8(fp)
 401fe08:	18c00324 	muli	r3,r3,12
 401fe0c:	10c5883a 	add	r2,r2,r3
 401fe10:	10c00017 	ldw	r3,0(r2)
 401fe14:	e0bfff17 	ldw	r2,-4(fp)
 401fe18:	10800017 	ldw	r2,0(r2)
 401fe1c:	1880111e 	bne	r3,r2,401fe64 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401fe20:	00810474 	movhi	r2,1041
 401fe24:	1095aa04 	addi	r2,r2,22184
 401fe28:	e0fffe17 	ldw	r3,-8(fp)
 401fe2c:	18c00324 	muli	r3,r3,12
 401fe30:	10c5883a 	add	r2,r2,r3
 401fe34:	10800204 	addi	r2,r2,8
 401fe38:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401fe3c:	1000090e 	bge	r2,zero,401fe64 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401fe40:	e0bffe17 	ldw	r2,-8(fp)
 401fe44:	10c00324 	muli	r3,r2,12
 401fe48:	00810474 	movhi	r2,1041
 401fe4c:	1095aa04 	addi	r2,r2,22184
 401fe50:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401fe54:	e0bfff17 	ldw	r2,-4(fp)
 401fe58:	18800226 	beq	r3,r2,401fe64 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401fe5c:	00bffcc4 	movi	r2,-13
 401fe60:	00000806 	br	401fe84 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401fe64:	e0bffe17 	ldw	r2,-8(fp)
 401fe68:	10800044 	addi	r2,r2,1
 401fe6c:	e0bffe15 	stw	r2,-8(fp)
 401fe70:	d0a00c17 	ldw	r2,-32720(gp)
 401fe74:	1007883a 	mov	r3,r2
 401fe78:	e0bffe17 	ldw	r2,-8(fp)
 401fe7c:	18bfdf2e 	bgeu	r3,r2,401fdfc <__reset+0xfb01edfc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401fe80:	0005883a 	mov	r2,zero
}
 401fe84:	e037883a 	mov	sp,fp
 401fe88:	df000017 	ldw	fp,0(sp)
 401fe8c:	dec00104 	addi	sp,sp,4
 401fe90:	f800283a 	ret

0401fe94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401fe94:	defff604 	addi	sp,sp,-40
 401fe98:	dfc00915 	stw	ra,36(sp)
 401fe9c:	df000815 	stw	fp,32(sp)
 401fea0:	df000804 	addi	fp,sp,32
 401fea4:	e13ffd15 	stw	r4,-12(fp)
 401fea8:	e17ffe15 	stw	r5,-8(fp)
 401feac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401feb0:	00bfffc4 	movi	r2,-1
 401feb4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401feb8:	00bffb44 	movi	r2,-19
 401febc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401fec0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401fec4:	d1600a04 	addi	r5,gp,-32728
 401fec8:	e13ffd17 	ldw	r4,-12(fp)
 401fecc:	40226cc0 	call	40226cc <alt_find_dev>
 401fed0:	e0bff815 	stw	r2,-32(fp)
 401fed4:	e0bff817 	ldw	r2,-32(fp)
 401fed8:	1000051e 	bne	r2,zero,401fef0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401fedc:	e13ffd17 	ldw	r4,-12(fp)
 401fee0:	402275c0 	call	402275c <alt_find_file>
 401fee4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401fee8:	00800044 	movi	r2,1
 401feec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401fef0:	e0bff817 	ldw	r2,-32(fp)
 401fef4:	10002926 	beq	r2,zero,401ff9c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401fef8:	e13ff817 	ldw	r4,-32(fp)
 401fefc:	40229200 	call	4022920 <alt_get_fd>
 401ff00:	e0bff915 	stw	r2,-28(fp)
 401ff04:	e0bff917 	ldw	r2,-28(fp)
 401ff08:	1000030e 	bge	r2,zero,401ff18 <open+0x84>
    {
      status = index;
 401ff0c:	e0bff917 	ldw	r2,-28(fp)
 401ff10:	e0bffa15 	stw	r2,-24(fp)
 401ff14:	00002306 	br	401ffa4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 401ff18:	e0bff917 	ldw	r2,-28(fp)
 401ff1c:	10c00324 	muli	r3,r2,12
 401ff20:	00810474 	movhi	r2,1041
 401ff24:	1095aa04 	addi	r2,r2,22184
 401ff28:	1885883a 	add	r2,r3,r2
 401ff2c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401ff30:	e0fffe17 	ldw	r3,-8(fp)
 401ff34:	00900034 	movhi	r2,16384
 401ff38:	10bfffc4 	addi	r2,r2,-1
 401ff3c:	1886703a 	and	r3,r3,r2
 401ff40:	e0bffc17 	ldw	r2,-16(fp)
 401ff44:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401ff48:	e0bffb17 	ldw	r2,-20(fp)
 401ff4c:	1000051e 	bne	r2,zero,401ff64 <open+0xd0>
 401ff50:	e13ffc17 	ldw	r4,-16(fp)
 401ff54:	401fdd00 	call	401fdd0 <alt_file_locked>
 401ff58:	e0bffa15 	stw	r2,-24(fp)
 401ff5c:	e0bffa17 	ldw	r2,-24(fp)
 401ff60:	10001016 	blt	r2,zero,401ffa4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401ff64:	e0bff817 	ldw	r2,-32(fp)
 401ff68:	10800317 	ldw	r2,12(r2)
 401ff6c:	10000826 	beq	r2,zero,401ff90 <open+0xfc>
 401ff70:	e0bff817 	ldw	r2,-32(fp)
 401ff74:	10800317 	ldw	r2,12(r2)
 401ff78:	e1ffff17 	ldw	r7,-4(fp)
 401ff7c:	e1bffe17 	ldw	r6,-8(fp)
 401ff80:	e17ffd17 	ldw	r5,-12(fp)
 401ff84:	e13ffc17 	ldw	r4,-16(fp)
 401ff88:	103ee83a 	callr	r2
 401ff8c:	00000106 	br	401ff94 <open+0x100>
 401ff90:	0005883a 	mov	r2,zero
 401ff94:	e0bffa15 	stw	r2,-24(fp)
 401ff98:	00000206 	br	401ffa4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401ff9c:	00bffb44 	movi	r2,-19
 401ffa0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401ffa4:	e0bffa17 	ldw	r2,-24(fp)
 401ffa8:	1000090e 	bge	r2,zero,401ffd0 <open+0x13c>
  {
    alt_release_fd (index);  
 401ffac:	e13ff917 	ldw	r4,-28(fp)
 401ffb0:	40201200 	call	4020120 <alt_release_fd>
    ALT_ERRNO = -status;
 401ffb4:	401fd940 	call	401fd94 <alt_get_errno>
 401ffb8:	1007883a 	mov	r3,r2
 401ffbc:	e0bffa17 	ldw	r2,-24(fp)
 401ffc0:	0085c83a 	sub	r2,zero,r2
 401ffc4:	18800015 	stw	r2,0(r3)
    return -1;
 401ffc8:	00bfffc4 	movi	r2,-1
 401ffcc:	00000106 	br	401ffd4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 401ffd0:	e0bff917 	ldw	r2,-28(fp)
}
 401ffd4:	e037883a 	mov	sp,fp
 401ffd8:	dfc00117 	ldw	ra,4(sp)
 401ffdc:	df000017 	ldw	fp,0(sp)
 401ffe0:	dec00204 	addi	sp,sp,8
 401ffe4:	f800283a 	ret

0401ffe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ffe8:	defffe04 	addi	sp,sp,-8
 401ffec:	dfc00115 	stw	ra,4(sp)
 401fff0:	df000015 	stw	fp,0(sp)
 401fff4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401fff8:	d0a00d17 	ldw	r2,-32716(gp)
 401fffc:	10000326 	beq	r2,zero,402000c <alt_get_errno+0x24>
 4020000:	d0a00d17 	ldw	r2,-32716(gp)
 4020004:	103ee83a 	callr	r2
 4020008:	00000106 	br	4020010 <alt_get_errno+0x28>
 402000c:	d0a01704 	addi	r2,gp,-32676
}
 4020010:	e037883a 	mov	sp,fp
 4020014:	dfc00117 	ldw	ra,4(sp)
 4020018:	df000017 	ldw	fp,0(sp)
 402001c:	dec00204 	addi	sp,sp,8
 4020020:	f800283a 	ret

04020024 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4020024:	defff904 	addi	sp,sp,-28
 4020028:	dfc00615 	stw	ra,24(sp)
 402002c:	df000515 	stw	fp,20(sp)
 4020030:	df000504 	addi	fp,sp,20
 4020034:	e13ffd15 	stw	r4,-12(fp)
 4020038:	e17ffe15 	stw	r5,-8(fp)
 402003c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4020040:	e0bffd17 	ldw	r2,-12(fp)
 4020044:	10000616 	blt	r2,zero,4020060 <read+0x3c>
 4020048:	e0bffd17 	ldw	r2,-12(fp)
 402004c:	10c00324 	muli	r3,r2,12
 4020050:	00810474 	movhi	r2,1041
 4020054:	1095aa04 	addi	r2,r2,22184
 4020058:	1885883a 	add	r2,r3,r2
 402005c:	00000106 	br	4020064 <read+0x40>
 4020060:	0005883a 	mov	r2,zero
 4020064:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4020068:	e0bffb17 	ldw	r2,-20(fp)
 402006c:	10002226 	beq	r2,zero,40200f8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4020070:	e0bffb17 	ldw	r2,-20(fp)
 4020074:	10800217 	ldw	r2,8(r2)
 4020078:	108000cc 	andi	r2,r2,3
 402007c:	10800060 	cmpeqi	r2,r2,1
 4020080:	1000181e 	bne	r2,zero,40200e4 <read+0xc0>
        (fd->dev->read))
 4020084:	e0bffb17 	ldw	r2,-20(fp)
 4020088:	10800017 	ldw	r2,0(r2)
 402008c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4020090:	10001426 	beq	r2,zero,40200e4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4020094:	e0bffb17 	ldw	r2,-20(fp)
 4020098:	10800017 	ldw	r2,0(r2)
 402009c:	10800517 	ldw	r2,20(r2)
 40200a0:	e0ffff17 	ldw	r3,-4(fp)
 40200a4:	180d883a 	mov	r6,r3
 40200a8:	e17ffe17 	ldw	r5,-8(fp)
 40200ac:	e13ffb17 	ldw	r4,-20(fp)
 40200b0:	103ee83a 	callr	r2
 40200b4:	e0bffc15 	stw	r2,-16(fp)
 40200b8:	e0bffc17 	ldw	r2,-16(fp)
 40200bc:	1000070e 	bge	r2,zero,40200dc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 40200c0:	401ffe80 	call	401ffe8 <alt_get_errno>
 40200c4:	1007883a 	mov	r3,r2
 40200c8:	e0bffc17 	ldw	r2,-16(fp)
 40200cc:	0085c83a 	sub	r2,zero,r2
 40200d0:	18800015 	stw	r2,0(r3)
          return -1;
 40200d4:	00bfffc4 	movi	r2,-1
 40200d8:	00000c06 	br	402010c <read+0xe8>
        }
        return rval;
 40200dc:	e0bffc17 	ldw	r2,-16(fp)
 40200e0:	00000a06 	br	402010c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40200e4:	401ffe80 	call	401ffe8 <alt_get_errno>
 40200e8:	1007883a 	mov	r3,r2
 40200ec:	00800344 	movi	r2,13
 40200f0:	18800015 	stw	r2,0(r3)
 40200f4:	00000406 	br	4020108 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40200f8:	401ffe80 	call	401ffe8 <alt_get_errno>
 40200fc:	1007883a 	mov	r3,r2
 4020100:	00801444 	movi	r2,81
 4020104:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4020108:	00bfffc4 	movi	r2,-1
}
 402010c:	e037883a 	mov	sp,fp
 4020110:	dfc00117 	ldw	ra,4(sp)
 4020114:	df000017 	ldw	fp,0(sp)
 4020118:	dec00204 	addi	sp,sp,8
 402011c:	f800283a 	ret

04020120 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4020120:	defffe04 	addi	sp,sp,-8
 4020124:	df000115 	stw	fp,4(sp)
 4020128:	df000104 	addi	fp,sp,4
 402012c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4020130:	e0bfff17 	ldw	r2,-4(fp)
 4020134:	108000d0 	cmplti	r2,r2,3
 4020138:	10000d1e 	bne	r2,zero,4020170 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402013c:	00810474 	movhi	r2,1041
 4020140:	1095aa04 	addi	r2,r2,22184
 4020144:	e0ffff17 	ldw	r3,-4(fp)
 4020148:	18c00324 	muli	r3,r3,12
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10800204 	addi	r2,r2,8
 4020154:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4020158:	00810474 	movhi	r2,1041
 402015c:	1095aa04 	addi	r2,r2,22184
 4020160:	e0ffff17 	ldw	r3,-4(fp)
 4020164:	18c00324 	muli	r3,r3,12
 4020168:	10c5883a 	add	r2,r2,r3
 402016c:	10000015 	stw	zero,0(r2)
  }
}
 4020170:	0001883a 	nop
 4020174:	e037883a 	mov	sp,fp
 4020178:	df000017 	ldw	fp,0(sp)
 402017c:	dec00104 	addi	sp,sp,4
 4020180:	f800283a 	ret

04020184 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4020184:	defff904 	addi	sp,sp,-28
 4020188:	df000615 	stw	fp,24(sp)
 402018c:	df000604 	addi	fp,sp,24
 4020190:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4020194:	0005303a 	rdctl	r2,status
 4020198:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402019c:	e0fffe17 	ldw	r3,-8(fp)
 40201a0:	00bfff84 	movi	r2,-2
 40201a4:	1884703a 	and	r2,r3,r2
 40201a8:	1001703a 	wrctl	status,r2
  
  return context;
 40201ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40201b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40201b4:	d0a00f17 	ldw	r2,-32708(gp)
 40201b8:	10c000c4 	addi	r3,r2,3
 40201bc:	00bfff04 	movi	r2,-4
 40201c0:	1884703a 	and	r2,r3,r2
 40201c4:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40201c8:	d0e00f17 	ldw	r3,-32708(gp)
 40201cc:	e0bfff17 	ldw	r2,-4(fp)
 40201d0:	1887883a 	add	r3,r3,r2
 40201d4:	00820034 	movhi	r2,2048
 40201d8:	10800004 	addi	r2,r2,0
 40201dc:	10c0062e 	bgeu	r2,r3,40201f8 <sbrk+0x74>
 40201e0:	e0bffb17 	ldw	r2,-20(fp)
 40201e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40201e8:	e0bffa17 	ldw	r2,-24(fp)
 40201ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40201f0:	00bfffc4 	movi	r2,-1
 40201f4:	00000b06 	br	4020224 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 40201f8:	d0a00f17 	ldw	r2,-32708(gp)
 40201fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4020200:	d0e00f17 	ldw	r3,-32708(gp)
 4020204:	e0bfff17 	ldw	r2,-4(fp)
 4020208:	1885883a 	add	r2,r3,r2
 402020c:	d0a00f15 	stw	r2,-32708(gp)
 4020210:	e0bffb17 	ldw	r2,-20(fp)
 4020214:	e0bffc15 	stw	r2,-16(fp)
 4020218:	e0bffc17 	ldw	r2,-16(fp)
 402021c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4020220:	e0bffd17 	ldw	r2,-12(fp)
} 
 4020224:	e037883a 	mov	sp,fp
 4020228:	df000017 	ldw	fp,0(sp)
 402022c:	dec00104 	addi	sp,sp,4
 4020230:	f800283a 	ret

04020234 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4020234:	defffa04 	addi	sp,sp,-24
 4020238:	df000515 	stw	fp,20(sp)
 402023c:	df000504 	addi	fp,sp,20
 4020240:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4020244:	0005303a 	rdctl	r2,status
 4020248:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402024c:	e0fffc17 	ldw	r3,-16(fp)
 4020250:	00bfff84 	movi	r2,-2
 4020254:	1884703a 	and	r2,r3,r2
 4020258:	1001703a 	wrctl	status,r2
  
  return context;
 402025c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4020260:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4020264:	e0bfff17 	ldw	r2,-4(fp)
 4020268:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402026c:	e0bffd17 	ldw	r2,-12(fp)
 4020270:	10800017 	ldw	r2,0(r2)
 4020274:	e0fffd17 	ldw	r3,-12(fp)
 4020278:	18c00117 	ldw	r3,4(r3)
 402027c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4020280:	e0bffd17 	ldw	r2,-12(fp)
 4020284:	10800117 	ldw	r2,4(r2)
 4020288:	e0fffd17 	ldw	r3,-12(fp)
 402028c:	18c00017 	ldw	r3,0(r3)
 4020290:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4020294:	e0bffd17 	ldw	r2,-12(fp)
 4020298:	e0fffd17 	ldw	r3,-12(fp)
 402029c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40202a0:	e0bffd17 	ldw	r2,-12(fp)
 40202a4:	e0fffd17 	ldw	r3,-12(fp)
 40202a8:	10c00015 	stw	r3,0(r2)
 40202ac:	e0bffb17 	ldw	r2,-20(fp)
 40202b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40202b4:	e0bffe17 	ldw	r2,-8(fp)
 40202b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40202bc:	0001883a 	nop
 40202c0:	e037883a 	mov	sp,fp
 40202c4:	df000017 	ldw	fp,0(sp)
 40202c8:	dec00104 	addi	sp,sp,4
 40202cc:	f800283a 	ret

040202d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40202d0:	defffb04 	addi	sp,sp,-20
 40202d4:	dfc00415 	stw	ra,16(sp)
 40202d8:	df000315 	stw	fp,12(sp)
 40202dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40202e0:	d0a01017 	ldw	r2,-32704(gp)
 40202e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40202e8:	d0a02017 	ldw	r2,-32640(gp)
 40202ec:	10800044 	addi	r2,r2,1
 40202f0:	d0a02015 	stw	r2,-32640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40202f4:	00002e06 	br	40203b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40202f8:	e0bffd17 	ldw	r2,-12(fp)
 40202fc:	10800017 	ldw	r2,0(r2)
 4020300:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4020304:	e0bffd17 	ldw	r2,-12(fp)
 4020308:	10800403 	ldbu	r2,16(r2)
 402030c:	10803fcc 	andi	r2,r2,255
 4020310:	10000426 	beq	r2,zero,4020324 <alt_tick+0x54>
 4020314:	d0a02017 	ldw	r2,-32640(gp)
 4020318:	1000021e 	bne	r2,zero,4020324 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402031c:	e0bffd17 	ldw	r2,-12(fp)
 4020320:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4020324:	e0bffd17 	ldw	r2,-12(fp)
 4020328:	10800217 	ldw	r2,8(r2)
 402032c:	d0e02017 	ldw	r3,-32640(gp)
 4020330:	18801d36 	bltu	r3,r2,40203a8 <alt_tick+0xd8>
 4020334:	e0bffd17 	ldw	r2,-12(fp)
 4020338:	10800403 	ldbu	r2,16(r2)
 402033c:	10803fcc 	andi	r2,r2,255
 4020340:	1000191e 	bne	r2,zero,40203a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4020344:	e0bffd17 	ldw	r2,-12(fp)
 4020348:	10800317 	ldw	r2,12(r2)
 402034c:	e0fffd17 	ldw	r3,-12(fp)
 4020350:	18c00517 	ldw	r3,20(r3)
 4020354:	1809883a 	mov	r4,r3
 4020358:	103ee83a 	callr	r2
 402035c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4020360:	e0bfff17 	ldw	r2,-4(fp)
 4020364:	1000031e 	bne	r2,zero,4020374 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4020368:	e13ffd17 	ldw	r4,-12(fp)
 402036c:	40202340 	call	4020234 <alt_alarm_stop>
 4020370:	00000d06 	br	40203a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4020374:	e0bffd17 	ldw	r2,-12(fp)
 4020378:	10c00217 	ldw	r3,8(r2)
 402037c:	e0bfff17 	ldw	r2,-4(fp)
 4020380:	1887883a 	add	r3,r3,r2
 4020384:	e0bffd17 	ldw	r2,-12(fp)
 4020388:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402038c:	e0bffd17 	ldw	r2,-12(fp)
 4020390:	10c00217 	ldw	r3,8(r2)
 4020394:	d0a02017 	ldw	r2,-32640(gp)
 4020398:	1880032e 	bgeu	r3,r2,40203a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402039c:	e0bffd17 	ldw	r2,-12(fp)
 40203a0:	00c00044 	movi	r3,1
 40203a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40203a8:	e0bffe17 	ldw	r2,-8(fp)
 40203ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40203b0:	e0fffd17 	ldw	r3,-12(fp)
 40203b4:	d0a01004 	addi	r2,gp,-32704
 40203b8:	18bfcf1e 	bne	r3,r2,40202f8 <__reset+0xfb01f2f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40203bc:	0001883a 	nop
}
 40203c0:	0001883a 	nop
 40203c4:	e037883a 	mov	sp,fp
 40203c8:	dfc00117 	ldw	ra,4(sp)
 40203cc:	df000017 	ldw	fp,0(sp)
 40203d0:	dec00204 	addi	sp,sp,8
 40203d4:	f800283a 	ret

040203d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40203d8:	defffd04 	addi	sp,sp,-12
 40203dc:	dfc00215 	stw	ra,8(sp)
 40203e0:	df000115 	stw	fp,4(sp)
 40203e4:	df000104 	addi	fp,sp,4
 40203e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40203ec:	e13fff17 	ldw	r4,-4(fp)
 40203f0:	40223d40 	call	40223d4 <alt_busy_sleep>
}
 40203f4:	e037883a 	mov	sp,fp
 40203f8:	dfc00117 	ldw	ra,4(sp)
 40203fc:	df000017 	ldw	fp,0(sp)
 4020400:	dec00204 	addi	sp,sp,8
 4020404:	f800283a 	ret

04020408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4020408:	defffe04 	addi	sp,sp,-8
 402040c:	dfc00115 	stw	ra,4(sp)
 4020410:	df000015 	stw	fp,0(sp)
 4020414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4020418:	d0a00d17 	ldw	r2,-32716(gp)
 402041c:	10000326 	beq	r2,zero,402042c <alt_get_errno+0x24>
 4020420:	d0a00d17 	ldw	r2,-32716(gp)
 4020424:	103ee83a 	callr	r2
 4020428:	00000106 	br	4020430 <alt_get_errno+0x28>
 402042c:	d0a01704 	addi	r2,gp,-32676
}
 4020430:	e037883a 	mov	sp,fp
 4020434:	dfc00117 	ldw	ra,4(sp)
 4020438:	df000017 	ldw	fp,0(sp)
 402043c:	dec00204 	addi	sp,sp,8
 4020440:	f800283a 	ret

04020444 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4020444:	defff904 	addi	sp,sp,-28
 4020448:	dfc00615 	stw	ra,24(sp)
 402044c:	df000515 	stw	fp,20(sp)
 4020450:	df000504 	addi	fp,sp,20
 4020454:	e13ffd15 	stw	r4,-12(fp)
 4020458:	e17ffe15 	stw	r5,-8(fp)
 402045c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4020460:	e0bffd17 	ldw	r2,-12(fp)
 4020464:	10000616 	blt	r2,zero,4020480 <write+0x3c>
 4020468:	e0bffd17 	ldw	r2,-12(fp)
 402046c:	10c00324 	muli	r3,r2,12
 4020470:	00810474 	movhi	r2,1041
 4020474:	1095aa04 	addi	r2,r2,22184
 4020478:	1885883a 	add	r2,r3,r2
 402047c:	00000106 	br	4020484 <write+0x40>
 4020480:	0005883a 	mov	r2,zero
 4020484:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4020488:	e0bffb17 	ldw	r2,-20(fp)
 402048c:	10002126 	beq	r2,zero,4020514 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4020490:	e0bffb17 	ldw	r2,-20(fp)
 4020494:	10800217 	ldw	r2,8(r2)
 4020498:	108000cc 	andi	r2,r2,3
 402049c:	10001826 	beq	r2,zero,4020500 <write+0xbc>
 40204a0:	e0bffb17 	ldw	r2,-20(fp)
 40204a4:	10800017 	ldw	r2,0(r2)
 40204a8:	10800617 	ldw	r2,24(r2)
 40204ac:	10001426 	beq	r2,zero,4020500 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40204b0:	e0bffb17 	ldw	r2,-20(fp)
 40204b4:	10800017 	ldw	r2,0(r2)
 40204b8:	10800617 	ldw	r2,24(r2)
 40204bc:	e0ffff17 	ldw	r3,-4(fp)
 40204c0:	180d883a 	mov	r6,r3
 40204c4:	e17ffe17 	ldw	r5,-8(fp)
 40204c8:	e13ffb17 	ldw	r4,-20(fp)
 40204cc:	103ee83a 	callr	r2
 40204d0:	e0bffc15 	stw	r2,-16(fp)
 40204d4:	e0bffc17 	ldw	r2,-16(fp)
 40204d8:	1000070e 	bge	r2,zero,40204f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 40204dc:	40204080 	call	4020408 <alt_get_errno>
 40204e0:	1007883a 	mov	r3,r2
 40204e4:	e0bffc17 	ldw	r2,-16(fp)
 40204e8:	0085c83a 	sub	r2,zero,r2
 40204ec:	18800015 	stw	r2,0(r3)
        return -1;
 40204f0:	00bfffc4 	movi	r2,-1
 40204f4:	00000c06 	br	4020528 <write+0xe4>
      }
      return rval;
 40204f8:	e0bffc17 	ldw	r2,-16(fp)
 40204fc:	00000a06 	br	4020528 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4020500:	40204080 	call	4020408 <alt_get_errno>
 4020504:	1007883a 	mov	r3,r2
 4020508:	00800344 	movi	r2,13
 402050c:	18800015 	stw	r2,0(r3)
 4020510:	00000406 	br	4020524 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4020514:	40204080 	call	4020408 <alt_get_errno>
 4020518:	1007883a 	mov	r3,r2
 402051c:	00801444 	movi	r2,81
 4020520:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4020524:	00bfffc4 	movi	r2,-1
}
 4020528:	e037883a 	mov	sp,fp
 402052c:	dfc00117 	ldw	ra,4(sp)
 4020530:	df000017 	ldw	fp,0(sp)
 4020534:	dec00204 	addi	sp,sp,8
 4020538:	f800283a 	ret

0402053c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402053c:	defffd04 	addi	sp,sp,-12
 4020540:	dfc00215 	stw	ra,8(sp)
 4020544:	df000115 	stw	fp,4(sp)
 4020548:	df000104 	addi	fp,sp,4
 402054c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4020550:	d1600a04 	addi	r5,gp,-32728
 4020554:	e13fff17 	ldw	r4,-4(fp)
 4020558:	40225680 	call	4022568 <alt_dev_llist_insert>
}
 402055c:	e037883a 	mov	sp,fp
 4020560:	dfc00117 	ldw	ra,4(sp)
 4020564:	df000017 	ldw	fp,0(sp)
 4020568:	dec00204 	addi	sp,sp,8
 402056c:	f800283a 	ret

04020570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4020570:	defffd04 	addi	sp,sp,-12
 4020574:	dfc00215 	stw	ra,8(sp)
 4020578:	df000115 	stw	fp,4(sp)
 402057c:	df000104 	addi	fp,sp,4
 4020580:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
 4020584:	4022ba00 	call	4022ba0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4020588:	00800044 	movi	r2,1
 402058c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4020590:	0001883a 	nop
 4020594:	e037883a 	mov	sp,fp
 4020598:	dfc00117 	ldw	ra,4(sp)
 402059c:	df000017 	ldw	fp,0(sp)
 40205a0:	dec00204 	addi	sp,sp,8
 40205a4:	f800283a 	ret

040205a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40205a8:	defffe04 	addi	sp,sp,-8
 40205ac:	dfc00115 	stw	ra,4(sp)
 40205b0:	df000015 	stw	fp,0(sp)
 40205b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 40205b8:	01c0fa04 	movi	r7,1000
 40205bc:	000d883a 	mov	r6,zero
 40205c0:	000b883a 	mov	r5,zero
 40205c4:	01020034 	movhi	r4,2048
 40205c8:	4021bf00 	call	4021bf0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 40205cc:	01010474 	movhi	r4,1041
 40205d0:	21160a04 	addi	r4,r4,22568
 40205d4:	40206480 	call	4020648 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40205d8:	018000c4 	movi	r6,3
 40205dc:	000b883a 	mov	r5,zero
 40205e0:	01010474 	movhi	r4,1041
 40205e4:	21164704 	addi	r4,r4,22812
 40205e8:	40212740 	call	4021274 <altera_avalon_jtag_uart_init>
 40205ec:	01010474 	movhi	r4,1041
 40205f0:	21163d04 	addi	r4,r4,22772
 40205f4:	402053c0 	call	402053c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 40205f8:	0001883a 	nop
}
 40205fc:	0001883a 	nop
 4020600:	e037883a 	mov	sp,fp
 4020604:	dfc00117 	ldw	ra,4(sp)
 4020608:	df000017 	ldw	fp,0(sp)
 402060c:	dec00204 	addi	sp,sp,8
 4020610:	f800283a 	ret

04020614 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 4020614:	defffd04 	addi	sp,sp,-12
 4020618:	dfc00215 	stw	ra,8(sp)
 402061c:	df000115 	stw	fp,4(sp)
 4020620:	df000104 	addi	fp,sp,4
 4020624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4020628:	d1601204 	addi	r5,gp,-32696
 402062c:	e13fff17 	ldw	r4,-4(fp)
 4020630:	40225680 	call	4022568 <alt_dev_llist_insert>
}
 4020634:	e037883a 	mov	sp,fp
 4020638:	dfc00117 	ldw	ra,4(sp)
 402063c:	df000017 	ldw	fp,0(sp)
 4020640:	dec00204 	addi	sp,sp,8
 4020644:	f800283a 	ret

04020648 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 4020648:	defffc04 	addi	sp,sp,-16
 402064c:	dfc00315 	stw	ra,12(sp)
 4020650:	df000215 	stw	fp,8(sp)
 4020654:	df000204 	addi	fp,sp,8
 4020658:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 402065c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 4020660:	e13fff17 	ldw	r4,-4(fp)
 4020664:	402069c0 	call	402069c <alt_epcs_flash_query>
 4020668:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 402066c:	e0bffe17 	ldw	r2,-8(fp)
 4020670:	1000041e 	bne	r2,zero,4020684 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 4020674:	e0bfff17 	ldw	r2,-4(fp)
 4020678:	1009883a 	mov	r4,r2
 402067c:	40206140 	call	4020614 <alt_flash_device_register>
 4020680:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 4020684:	e0bffe17 	ldw	r2,-8(fp)
}
 4020688:	e037883a 	mov	sp,fp
 402068c:	dfc00117 	ldw	ra,4(sp)
 4020690:	df000017 	ldw	fp,0(sp)
 4020694:	dec00204 	addi	sp,sp,8
 4020698:	f800283a 	ret

0402069c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 402069c:	defffc04 	addi	sp,sp,-16
 40206a0:	dfc00315 	stw	ra,12(sp)
 40206a4:	df000215 	stw	fp,8(sp)
 40206a8:	df000204 	addi	fp,sp,8
 40206ac:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 40206b0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 40206b4:	e0bfff17 	ldw	r2,-4(fp)
 40206b8:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 40206bc:	e0bfff17 	ldw	r2,-4(fp)
 40206c0:	10802e17 	ldw	r2,184(r2)
 40206c4:	1009883a 	mov	r4,r2
 40206c8:	40221080 	call	4022108 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 40206cc:	10c03fcc 	andi	r3,r2,255
 40206d0:	e0bfff17 	ldw	r2,-4(fp)
 40206d4:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 40206d8:	e0bfff17 	ldw	r2,-4(fp)
 40206dc:	10803017 	ldw	r2,192(r2)
 40206e0:	10800598 	cmpnei	r2,r2,22
 40206e4:	10000a1e 	bne	r2,zero,4020710 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 40206e8:	e0bfff17 	ldw	r2,-4(fp)
 40206ec:	00c02034 	movhi	r3,128
 40206f0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 40206f4:	e0bfff17 	ldw	r2,-4(fp)
 40206f8:	00c02004 	movi	r3,128
 40206fc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4020700:	e0bfff17 	ldw	r2,-4(fp)
 4020704:	00c00074 	movhi	r3,1
 4020708:	10c01015 	stw	r3,64(r2)
 402070c:	0000ce06 	br	4020a48 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 4020710:	e0bfff17 	ldw	r2,-4(fp)
 4020714:	10803017 	ldw	r2,192(r2)
 4020718:	10800518 	cmpnei	r2,r2,20
 402071c:	10000a1e 	bne	r2,zero,4020748 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 4020720:	e0bfff17 	ldw	r2,-4(fp)
 4020724:	00c00834 	movhi	r3,32
 4020728:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 402072c:	e0bfff17 	ldw	r2,-4(fp)
 4020730:	00c00804 	movi	r3,32
 4020734:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4020738:	e0bfff17 	ldw	r2,-4(fp)
 402073c:	00c00074 	movhi	r3,1
 4020740:	10c01015 	stw	r3,64(r2)
 4020744:	0000c006 	br	4020a48 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 4020748:	e0bfff17 	ldw	r2,-4(fp)
 402074c:	10803017 	ldw	r2,192(r2)
 4020750:	108004d8 	cmpnei	r2,r2,19
 4020754:	10000a1e 	bne	r2,zero,4020780 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 4020758:	e0bfff17 	ldw	r2,-4(fp)
 402075c:	00c00434 	movhi	r3,16
 4020760:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 4020764:	e0bfff17 	ldw	r2,-4(fp)
 4020768:	00c00404 	movi	r3,16
 402076c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 4020770:	e0bfff17 	ldw	r2,-4(fp)
 4020774:	00c00074 	movhi	r3,1
 4020778:	10c01015 	stw	r3,64(r2)
 402077c:	0000b206 	br	4020a48 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 4020780:	e0bfff17 	ldw	r2,-4(fp)
 4020784:	10803017 	ldw	r2,192(r2)
 4020788:	10800498 	cmpnei	r2,r2,18
 402078c:	10000a1e 	bne	r2,zero,40207b8 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 4020790:	e0bfff17 	ldw	r2,-4(fp)
 4020794:	00c00234 	movhi	r3,8
 4020798:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 402079c:	e0bfff17 	ldw	r2,-4(fp)
 40207a0:	00c00204 	movi	r3,8
 40207a4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 40207a8:	e0bfff17 	ldw	r2,-4(fp)
 40207ac:	00c00074 	movhi	r3,1
 40207b0:	10c01015 	stw	r3,64(r2)
 40207b4:	0000a406 	br	4020a48 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 40207b8:	e0bfff17 	ldw	r2,-4(fp)
 40207bc:	10803017 	ldw	r2,192(r2)
 40207c0:	10800418 	cmpnei	r2,r2,16
 40207c4:	10000a1e 	bne	r2,zero,40207f0 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 40207c8:	e0bfff17 	ldw	r2,-4(fp)
 40207cc:	00c000b4 	movhi	r3,2
 40207d0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 40207d4:	e0bfff17 	ldw	r2,-4(fp)
 40207d8:	00c00104 	movi	r3,4
 40207dc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 40207e0:	e0bfff17 	ldw	r2,-4(fp)
 40207e4:	00e00014 	movui	r3,32768
 40207e8:	10c01015 	stw	r3,64(r2)
 40207ec:	00009606 	br	4020a48 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 40207f0:	e0bfff17 	ldw	r2,-4(fp)
 40207f4:	10802e17 	ldw	r2,184(r2)
 40207f8:	1009883a 	mov	r4,r2
 40207fc:	40221700 	call	4022170 <epcs_read_device_id>
 4020800:	1007883a 	mov	r3,r2
 4020804:	e0bfff17 	ldw	r2,-4(fp)
 4020808:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 402080c:	e0bfff17 	ldw	r2,-4(fp)
 4020810:	10c03017 	ldw	r3,192(r2)
 4020814:	00804034 	movhi	r2,256
 4020818:	10bfffc4 	addi	r2,r2,-1
 402081c:	1886703a 	and	r3,r3,r2
 4020820:	00800874 	movhi	r2,33
 4020824:	10ae8544 	addi	r2,r2,-17899
 4020828:	18800a1e 	bne	r3,r2,4020854 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 402082c:	e0bfff17 	ldw	r2,-4(fp)
 4020830:	00c00834 	movhi	r3,32
 4020834:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 4020838:	e0bfff17 	ldw	r2,-4(fp)
 402083c:	00c00804 	movi	r3,32
 4020840:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4020844:	e0bfff17 	ldw	r2,-4(fp)
 4020848:	00c00074 	movhi	r3,1
 402084c:	10c01015 	stw	r3,64(r2)
 4020850:	00007d06 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 4020854:	e0bfff17 	ldw	r2,-4(fp)
 4020858:	10c03017 	ldw	r3,192(r2)
 402085c:	00804034 	movhi	r2,256
 4020860:	10bfffc4 	addi	r2,r2,-1
 4020864:	1886703a 	and	r3,r3,r2
 4020868:	00800874 	movhi	r2,33
 402086c:	10ae8584 	addi	r2,r2,-17898
 4020870:	18800a1e 	bne	r3,r2,402089c <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 4020874:	e0bfff17 	ldw	r2,-4(fp)
 4020878:	00c01034 	movhi	r3,64
 402087c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 4020880:	e0bfff17 	ldw	r2,-4(fp)
 4020884:	00c01004 	movi	r3,64
 4020888:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 402088c:	e0bfff17 	ldw	r2,-4(fp)
 4020890:	00c00074 	movhi	r3,1
 4020894:	10c01015 	stw	r3,64(r2)
 4020898:	00006b06 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 402089c:	e0bfff17 	ldw	r2,-4(fp)
 40208a0:	10c03017 	ldw	r3,192(r2)
 40208a4:	00804034 	movhi	r2,256
 40208a8:	10bfffc4 	addi	r2,r2,-1
 40208ac:	1886703a 	and	r3,r3,r2
 40208b0:	00800874 	movhi	r2,33
 40208b4:	10ae85c4 	addi	r2,r2,-17897
 40208b8:	18800a1e 	bne	r3,r2,40208e4 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 40208bc:	e0bfff17 	ldw	r2,-4(fp)
 40208c0:	00c02034 	movhi	r3,128
 40208c4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 40208c8:	e0bfff17 	ldw	r2,-4(fp)
 40208cc:	00c02004 	movi	r3,128
 40208d0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 40208d4:	e0bfff17 	ldw	r2,-4(fp)
 40208d8:	00c00074 	movhi	r3,1
 40208dc:	10c01015 	stw	r3,64(r2)
 40208e0:	00005906 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 40208e4:	e0bfff17 	ldw	r2,-4(fp)
 40208e8:	10c03017 	ldw	r3,192(r2)
 40208ec:	00804034 	movhi	r2,256
 40208f0:	10bfffc4 	addi	r2,r2,-1
 40208f4:	1886703a 	and	r3,r3,r2
 40208f8:	00800874 	movhi	r2,33
 40208fc:	10ae8604 	addi	r2,r2,-17896
 4020900:	18800a1e 	bne	r3,r2,402092c <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 4020904:	e0bfff17 	ldw	r2,-4(fp)
 4020908:	00c04034 	movhi	r3,256
 402090c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 4020910:	e0bfff17 	ldw	r2,-4(fp)
 4020914:	00c04004 	movi	r3,256
 4020918:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 402091c:	e0bfff17 	ldw	r2,-4(fp)
 4020920:	00c00074 	movhi	r3,1
 4020924:	10c01015 	stw	r3,64(r2)
 4020928:	00004706 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 402092c:	e0bfff17 	ldw	r2,-4(fp)
 4020930:	10803017 	ldw	r2,192(r2)
 4020934:	10803fcc 	andi	r2,r2,255
 4020938:	10800618 	cmpnei	r2,r2,24
 402093c:	10000a1e 	bne	r2,zero,4020968 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 4020940:	e0bfff17 	ldw	r2,-4(fp)
 4020944:	00c04034 	movhi	r3,256
 4020948:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 402094c:	e0bfff17 	ldw	r2,-4(fp)
 4020950:	00c01004 	movi	r3,64
 4020954:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 4020958:	e0bfff17 	ldw	r2,-4(fp)
 402095c:	00c00134 	movhi	r3,4
 4020960:	10c01015 	stw	r3,64(r2)
 4020964:	00003806 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 4020968:	e0bfff17 	ldw	r2,-4(fp)
 402096c:	10803017 	ldw	r2,192(r2)
 4020970:	10803fcc 	andi	r2,r2,255
 4020974:	10800658 	cmpnei	r2,r2,25
 4020978:	10000d1e 	bne	r2,zero,40209b0 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 402097c:	e0bfff17 	ldw	r2,-4(fp)
 4020980:	00c08034 	movhi	r3,512
 4020984:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 4020988:	e0bfff17 	ldw	r2,-4(fp)
 402098c:	00c08004 	movi	r3,512
 4020990:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4020994:	e0bfff17 	ldw	r2,-4(fp)
 4020998:	00c00074 	movhi	r3,1
 402099c:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 40209a0:	e0bfff17 	ldw	r2,-4(fp)
 40209a4:	00c00044 	movi	r3,1
 40209a8:	10c03215 	stw	r3,200(r2)
 40209ac:	00002606 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 40209b0:	e0bfff17 	ldw	r2,-4(fp)
 40209b4:	10803017 	ldw	r2,192(r2)
 40209b8:	10803fcc 	andi	r2,r2,255
 40209bc:	10800818 	cmpnei	r2,r2,32
 40209c0:	10000d1e 	bne	r2,zero,40209f8 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 40209c4:	e0bfff17 	ldw	r2,-4(fp)
 40209c8:	00c10034 	movhi	r3,1024
 40209cc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 40209d0:	e0bfff17 	ldw	r2,-4(fp)
 40209d4:	00c10004 	movi	r3,1024
 40209d8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 40209dc:	e0bfff17 	ldw	r2,-4(fp)
 40209e0:	00c00074 	movhi	r3,1
 40209e4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 40209e8:	e0bfff17 	ldw	r2,-4(fp)
 40209ec:	00c00044 	movi	r3,1
 40209f0:	10c03215 	stw	r3,200(r2)
 40209f4:	00001406 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 40209f8:	e0bfff17 	ldw	r2,-4(fp)
 40209fc:	10803017 	ldw	r2,192(r2)
 4020a00:	10803fcc 	andi	r2,r2,255
 4020a04:	10800858 	cmpnei	r2,r2,33
 4020a08:	10000d1e 	bne	r2,zero,4020a40 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 4020a0c:	e0bfff17 	ldw	r2,-4(fp)
 4020a10:	00c20034 	movhi	r3,2048
 4020a14:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 4020a18:	e0bfff17 	ldw	r2,-4(fp)
 4020a1c:	00c20004 	movi	r3,2048
 4020a20:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 4020a24:	e0bfff17 	ldw	r2,-4(fp)
 4020a28:	00c00074 	movhi	r3,1
 4020a2c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 4020a30:	e0bfff17 	ldw	r2,-4(fp)
 4020a34:	00c00044 	movi	r3,1
 4020a38:	10c03215 	stw	r3,200(r2)
 4020a3c:	00000206 	br	4020a48 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 4020a40:	00bffb44 	movi	r2,-19
 4020a44:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 4020a48:	e0bfff17 	ldw	r2,-4(fp)
 4020a4c:	10800e17 	ldw	r2,56(r2)
 4020a50:	1007883a 	mov	r3,r2
 4020a54:	e0bfff17 	ldw	r2,-4(fp)
 4020a58:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 4020a5c:	e0bfff17 	ldw	r2,-4(fp)
 4020a60:	00c00044 	movi	r3,1
 4020a64:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 4020a68:	e0bfff17 	ldw	r2,-4(fp)
 4020a6c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 4020a70:	e0bfff17 	ldw	r2,-4(fp)
 4020a74:	00c04004 	movi	r3,256
 4020a78:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 4020a7c:	e0bffe17 	ldw	r2,-8(fp)
}
 4020a80:	e037883a 	mov	sp,fp
 4020a84:	dfc00117 	ldw	ra,4(sp)
 4020a88:	df000017 	ldw	fp,0(sp)
 4020a8c:	dec00204 	addi	sp,sp,8
 4020a90:	f800283a 	ret

04020a94 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 4020a94:	deffee04 	addi	sp,sp,-72
 4020a98:	dfc01115 	stw	ra,68(sp)
 4020a9c:	df001015 	stw	fp,64(sp)
 4020aa0:	df001004 	addi	fp,sp,64
 4020aa4:	e13ffc15 	stw	r4,-16(fp)
 4020aa8:	e17ffd15 	stw	r5,-12(fp)
 4020aac:	e1bffe15 	stw	r6,-8(fp)
 4020ab0:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 4020ab4:	00800804 	movi	r2,32
 4020ab8:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 4020abc:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 4020ac0:	00002706 	br	4020b60 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 4020ac4:	e0fff117 	ldw	r3,-60(fp)
 4020ac8:	e0bfff17 	ldw	r2,-4(fp)
 4020acc:	1880012e 	bgeu	r3,r2,4020ad4 <alt_epcs_flash_memcmp+0x40>
 4020ad0:	1805883a 	mov	r2,r3
 4020ad4:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 4020ad8:	e0fffe17 	ldw	r3,-8(fp)
 4020adc:	e0bff017 	ldw	r2,-64(fp)
 4020ae0:	1885883a 	add	r2,r3,r2
 4020ae4:	e0fff404 	addi	r3,fp,-48
 4020ae8:	e1fff217 	ldw	r7,-56(fp)
 4020aec:	180d883a 	mov	r6,r3
 4020af0:	100b883a 	mov	r5,r2
 4020af4:	e13ffc17 	ldw	r4,-16(fp)
 4020af8:	40210780 	call	4021078 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 4020afc:	1000020e 	bge	r2,zero,4020b08 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 4020b00:	00bfffc4 	movi	r2,-1
 4020b04:	00001906 	br	4020b6c <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 4020b08:	e0bff017 	ldw	r2,-64(fp)
 4020b0c:	e0fffd17 	ldw	r3,-12(fp)
 4020b10:	1885883a 	add	r2,r3,r2
 4020b14:	e13ff217 	ldw	r4,-56(fp)
 4020b18:	e0fff404 	addi	r3,fp,-48
 4020b1c:	200d883a 	mov	r6,r4
 4020b20:	180b883a 	mov	r5,r3
 4020b24:	1009883a 	mov	r4,r2
 4020b28:	4022e0c0 	call	4022e0c <memcmp>
 4020b2c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 4020b30:	e0bff317 	ldw	r2,-52(fp)
 4020b34:	10000226 	beq	r2,zero,4020b40 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
 4020b38:	e0bff317 	ldw	r2,-52(fp)
 4020b3c:	00000b06 	br	4020b6c <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
 4020b40:	e0bff217 	ldw	r2,-56(fp)
 4020b44:	e0ffff17 	ldw	r3,-4(fp)
 4020b48:	1885c83a 	sub	r2,r3,r2
 4020b4c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 4020b50:	e0fff017 	ldw	r3,-64(fp)
 4020b54:	e0bff217 	ldw	r2,-56(fp)
 4020b58:	1885883a 	add	r2,r3,r2
 4020b5c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 4020b60:	e0bfff17 	ldw	r2,-4(fp)
 4020b64:	103fd71e 	bne	r2,zero,4020ac4 <__reset+0xfb01fac4>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 4020b68:	0005883a 	mov	r2,zero
}
 4020b6c:	e037883a 	mov	sp,fp
 4020b70:	dfc00117 	ldw	ra,4(sp)
 4020b74:	df000017 	ldw	fp,0(sp)
 4020b78:	dec00204 	addi	sp,sp,8
 4020b7c:	f800283a 	ret

04020b80 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 4020b80:	defff404 	addi	sp,sp,-48
 4020b84:	dfc00b15 	stw	ra,44(sp)
 4020b88:	df000a15 	stw	fp,40(sp)
 4020b8c:	df000a04 	addi	fp,sp,40
 4020b90:	e13ffc15 	stw	r4,-16(fp)
 4020b94:	e17ffd15 	stw	r5,-12(fp)
 4020b98:	e1bffe15 	stw	r6,-8(fp)
 4020b9c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 4020ba0:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 4020ba4:	e03ff815 	stw	zero,-32(fp)
 4020ba8:	00008306 	br	4020db8 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 4020bac:	e0fffc17 	ldw	r3,-16(fp)
 4020bb0:	e0bff817 	ldw	r2,-32(fp)
 4020bb4:	1004913a 	slli	r2,r2,4
 4020bb8:	1885883a 	add	r2,r3,r2
 4020bbc:	10800d04 	addi	r2,r2,52
 4020bc0:	10800017 	ldw	r2,0(r2)
 4020bc4:	e0fffd17 	ldw	r3,-12(fp)
 4020bc8:	18807816 	blt	r3,r2,4020dac <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 4020bcc:	e0fffc17 	ldw	r3,-16(fp)
 4020bd0:	e0bff817 	ldw	r2,-32(fp)
 4020bd4:	1004913a 	slli	r2,r2,4
 4020bd8:	1885883a 	add	r2,r3,r2
 4020bdc:	10800d04 	addi	r2,r2,52
 4020be0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 4020be4:	e13ffc17 	ldw	r4,-16(fp)
 4020be8:	e0bff817 	ldw	r2,-32(fp)
 4020bec:	1004913a 	slli	r2,r2,4
 4020bf0:	2085883a 	add	r2,r4,r2
 4020bf4:	10800e04 	addi	r2,r2,56
 4020bf8:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 4020bfc:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 4020c00:	e0fffd17 	ldw	r3,-12(fp)
 4020c04:	1880690e 	bge	r3,r2,4020dac <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 4020c08:	e0fffc17 	ldw	r3,-16(fp)
 4020c0c:	e0bff817 	ldw	r2,-32(fp)
 4020c10:	1004913a 	slli	r2,r2,4
 4020c14:	1885883a 	add	r2,r3,r2
 4020c18:	10800d04 	addi	r2,r2,52
 4020c1c:	10800017 	ldw	r2,0(r2)
 4020c20:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4020c24:	e03ff915 	stw	zero,-28(fp)
 4020c28:	00005806 	br	4020d8c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 4020c2c:	e0fffd17 	ldw	r3,-12(fp)
 4020c30:	e0bffa17 	ldw	r2,-24(fp)
 4020c34:	18804916 	blt	r3,r2,4020d5c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 4020c38:	e0fffc17 	ldw	r3,-16(fp)
 4020c3c:	e0bff817 	ldw	r2,-32(fp)
 4020c40:	10800104 	addi	r2,r2,4
 4020c44:	1004913a 	slli	r2,r2,4
 4020c48:	1885883a 	add	r2,r3,r2
 4020c4c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 4020c50:	e0bffa17 	ldw	r2,-24(fp)
 4020c54:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 4020c58:	e0fffd17 	ldw	r3,-12(fp)
 4020c5c:	18803f0e 	bge	r3,r2,4020d5c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 4020c60:	e0fffc17 	ldw	r3,-16(fp)
 4020c64:	e0bff817 	ldw	r2,-32(fp)
 4020c68:	10800104 	addi	r2,r2,4
 4020c6c:	1004913a 	slli	r2,r2,4
 4020c70:	1885883a 	add	r2,r3,r2
 4020c74:	10c00017 	ldw	r3,0(r2)
 4020c78:	e0bffa17 	ldw	r2,-24(fp)
 4020c7c:	1887883a 	add	r3,r3,r2
 4020c80:	e0bffd17 	ldw	r2,-12(fp)
 4020c84:	1885c83a 	sub	r2,r3,r2
 4020c88:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 4020c8c:	e0fffb17 	ldw	r3,-20(fp)
 4020c90:	e0bfff17 	ldw	r2,-4(fp)
 4020c94:	1880010e 	bge	r3,r2,4020c9c <alt_epcs_flash_write+0x11c>
 4020c98:	1805883a 	mov	r2,r3
 4020c9c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 4020ca0:	e0bffb17 	ldw	r2,-20(fp)
 4020ca4:	100f883a 	mov	r7,r2
 4020ca8:	e1bffd17 	ldw	r6,-12(fp)
 4020cac:	e17ffe17 	ldw	r5,-8(fp)
 4020cb0:	e13ffc17 	ldw	r4,-16(fp)
 4020cb4:	4020a940 	call	4020a94 <alt_epcs_flash_memcmp>
 4020cb8:	10001226 	beq	r2,zero,4020d04 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 4020cbc:	e0bffc17 	ldw	r2,-16(fp)
 4020cc0:	10800817 	ldw	r2,32(r2)
 4020cc4:	e17ffa17 	ldw	r5,-24(fp)
 4020cc8:	e13ffc17 	ldw	r4,-16(fp)
 4020ccc:	103ee83a 	callr	r2
 4020cd0:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 4020cd4:	e0bff717 	ldw	r2,-36(fp)
 4020cd8:	10000a1e 	bne	r2,zero,4020d04 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 4020cdc:	e0bffc17 	ldw	r2,-16(fp)
 4020ce0:	10800917 	ldw	r2,36(r2)
 4020ce4:	e0fffb17 	ldw	r3,-20(fp)
 4020ce8:	d8c00015 	stw	r3,0(sp)
 4020cec:	e1fffe17 	ldw	r7,-8(fp)
 4020cf0:	e1bffd17 	ldw	r6,-12(fp)
 4020cf4:	e17ffa17 	ldw	r5,-24(fp)
 4020cf8:	e13ffc17 	ldw	r4,-16(fp)
 4020cfc:	103ee83a 	callr	r2
 4020d00:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 4020d04:	e0ffff17 	ldw	r3,-4(fp)
 4020d08:	e0bffb17 	ldw	r2,-20(fp)
 4020d0c:	18802e26 	beq	r3,r2,4020dc8 <alt_epcs_flash_write+0x248>
 4020d10:	e0bff717 	ldw	r2,-36(fp)
 4020d14:	10002c1e 	bne	r2,zero,4020dc8 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 4020d18:	e0ffff17 	ldw	r3,-4(fp)
 4020d1c:	e0bffb17 	ldw	r2,-20(fp)
 4020d20:	1885c83a 	sub	r2,r3,r2
 4020d24:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 4020d28:	e0fffc17 	ldw	r3,-16(fp)
 4020d2c:	e0bff817 	ldw	r2,-32(fp)
 4020d30:	10800104 	addi	r2,r2,4
 4020d34:	1004913a 	slli	r2,r2,4
 4020d38:	1885883a 	add	r2,r3,r2
 4020d3c:	10c00017 	ldw	r3,0(r2)
 4020d40:	e0bffa17 	ldw	r2,-24(fp)
 4020d44:	1885883a 	add	r2,r3,r2
 4020d48:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 4020d4c:	e0bffb17 	ldw	r2,-20(fp)
 4020d50:	e0fffe17 	ldw	r3,-8(fp)
 4020d54:	1885883a 	add	r2,r3,r2
 4020d58:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 4020d5c:	e0fffc17 	ldw	r3,-16(fp)
 4020d60:	e0bff817 	ldw	r2,-32(fp)
 4020d64:	10800104 	addi	r2,r2,4
 4020d68:	1004913a 	slli	r2,r2,4
 4020d6c:	1885883a 	add	r2,r3,r2
 4020d70:	10800017 	ldw	r2,0(r2)
 4020d74:	e0fffa17 	ldw	r3,-24(fp)
 4020d78:	1885883a 	add	r2,r3,r2
 4020d7c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 4020d80:	e0bff917 	ldw	r2,-28(fp)
 4020d84:	10800044 	addi	r2,r2,1
 4020d88:	e0bff915 	stw	r2,-28(fp)
 4020d8c:	e0fffc17 	ldw	r3,-16(fp)
 4020d90:	e0bff817 	ldw	r2,-32(fp)
 4020d94:	1004913a 	slli	r2,r2,4
 4020d98:	1885883a 	add	r2,r3,r2
 4020d9c:	10800f04 	addi	r2,r2,60
 4020da0:	10800017 	ldw	r2,0(r2)
 4020da4:	e0fff917 	ldw	r3,-28(fp)
 4020da8:	18bfa016 	blt	r3,r2,4020c2c <__reset+0xfb01fc2c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 4020dac:	e0bff817 	ldw	r2,-32(fp)
 4020db0:	10800044 	addi	r2,r2,1
 4020db4:	e0bff815 	stw	r2,-32(fp)
 4020db8:	e0bffc17 	ldw	r2,-16(fp)
 4020dbc:	10800c17 	ldw	r2,48(r2)
 4020dc0:	e0fff817 	ldw	r3,-32(fp)
 4020dc4:	18bf7916 	blt	r3,r2,4020bac <__reset+0xfb01fbac>
      }
    }
  }

finished:
  return ret_code;
 4020dc8:	e0bff717 	ldw	r2,-36(fp)
}
 4020dcc:	e037883a 	mov	sp,fp
 4020dd0:	dfc00117 	ldw	ra,4(sp)
 4020dd4:	df000017 	ldw	fp,0(sp)
 4020dd8:	dec00204 	addi	sp,sp,8
 4020ddc:	f800283a 	ret

04020de0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 4020de0:	defffa04 	addi	sp,sp,-24
 4020de4:	df000515 	stw	fp,20(sp)
 4020de8:	df000504 	addi	fp,sp,20
 4020dec:	e13ffd15 	stw	r4,-12(fp)
 4020df0:	e17ffe15 	stw	r5,-8(fp)
 4020df4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 4020df8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 4020dfc:	e0bffd17 	ldw	r2,-12(fp)
 4020e00:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 4020e04:	e0bffc17 	ldw	r2,-16(fp)
 4020e08:	10c00c17 	ldw	r3,48(r2)
 4020e0c:	e0bfff17 	ldw	r2,-4(fp)
 4020e10:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 4020e14:	e0bffc17 	ldw	r2,-16(fp)
 4020e18:	10800c17 	ldw	r2,48(r2)
 4020e1c:	1000031e 	bne	r2,zero,4020e2c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 4020e20:	00bffec4 	movi	r2,-5
 4020e24:	e0bffb15 	stw	r2,-20(fp)
 4020e28:	00000b06 	br	4020e58 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 4020e2c:	e0bffc17 	ldw	r2,-16(fp)
 4020e30:	10800c17 	ldw	r2,48(r2)
 4020e34:	10800250 	cmplti	r2,r2,9
 4020e38:	1000031e 	bne	r2,zero,4020e48 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 4020e3c:	00bffd04 	movi	r2,-12
 4020e40:	e0bffb15 	stw	r2,-20(fp)
 4020e44:	00000406 	br	4020e58 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 4020e48:	e0bffc17 	ldw	r2,-16(fp)
 4020e4c:	10c00d04 	addi	r3,r2,52
 4020e50:	e0bffe17 	ldw	r2,-8(fp)
 4020e54:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 4020e58:	e0bffb17 	ldw	r2,-20(fp)
}
 4020e5c:	e037883a 	mov	sp,fp
 4020e60:	df000017 	ldw	fp,0(sp)
 4020e64:	dec00104 	addi	sp,sp,4
 4020e68:	f800283a 	ret

04020e6c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 4020e6c:	defff904 	addi	sp,sp,-28
 4020e70:	df000615 	stw	fp,24(sp)
 4020e74:	df000604 	addi	fp,sp,24
 4020e78:	e13ffe15 	stw	r4,-8(fp)
 4020e7c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4020e80:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020e84:	e0bffe17 	ldw	r2,-8(fp)
 4020e88:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 4020e8c:	e0bffb17 	ldw	r2,-20(fp)
 4020e90:	10800c17 	ldw	r2,48(r2)
 4020e94:	10bfffc4 	addi	r2,r2,-1
 4020e98:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 4020e9c:	e0fffb17 	ldw	r3,-20(fp)
 4020ea0:	e0bffc17 	ldw	r2,-16(fp)
 4020ea4:	1004913a 	slli	r2,r2,4
 4020ea8:	1885883a 	add	r2,r3,r2
 4020eac:	10800d04 	addi	r2,r2,52
 4020eb0:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 4020eb4:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 4020eb8:	e13ffb17 	ldw	r4,-20(fp)
 4020ebc:	e0bffc17 	ldw	r2,-16(fp)
 4020ec0:	1004913a 	slli	r2,r2,4
 4020ec4:	2085883a 	add	r2,r4,r2
 4020ec8:	10800e04 	addi	r2,r2,56
 4020ecc:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 4020ed0:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 4020ed4:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 4020ed8:	e0bfff17 	ldw	r2,-4(fp)
 4020edc:	e0fffd17 	ldw	r3,-12(fp)
 4020ee0:	1880022e 	bgeu	r3,r2,4020eec <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 4020ee4:	00bffec4 	movi	r2,-5
 4020ee8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 4020eec:	e0bffa17 	ldw	r2,-24(fp)
}
 4020ef0:	e037883a 	mov	sp,fp
 4020ef4:	df000017 	ldw	fp,0(sp)
 4020ef8:	dec00104 	addi	sp,sp,4
 4020efc:	f800283a 	ret

04020f00 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 4020f00:	defffa04 	addi	sp,sp,-24
 4020f04:	dfc00515 	stw	ra,20(sp)
 4020f08:	df000415 	stw	fp,16(sp)
 4020f0c:	df000404 	addi	fp,sp,16
 4020f10:	e13ffe15 	stw	r4,-8(fp)
 4020f14:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 4020f18:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020f1c:	e0bffe17 	ldw	r2,-8(fp)
 4020f20:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 4020f24:	e17fff17 	ldw	r5,-4(fp)
 4020f28:	e13ffe17 	ldw	r4,-8(fp)
 4020f2c:	4020e6c0 	call	4020e6c <alt_epcs_test_address>
 4020f30:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 4020f34:	e0bffc17 	ldw	r2,-16(fp)
 4020f38:	10000916 	blt	r2,zero,4020f60 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 4020f3c:	e0bffd17 	ldw	r2,-12(fp)
 4020f40:	10c02e17 	ldw	r3,184(r2)
 4020f44:	e13fff17 	ldw	r4,-4(fp)
 4020f48:	e0bffd17 	ldw	r2,-12(fp)
 4020f4c:	10803217 	ldw	r2,200(r2)
 4020f50:	100d883a 	mov	r6,r2
 4020f54:	200b883a 	mov	r5,r4
 4020f58:	1809883a 	mov	r4,r3
 4020f5c:	4021d3c0 	call	4021d3c <epcs_sector_erase>
  }
  return ret_code;
 4020f60:	e0bffc17 	ldw	r2,-16(fp)
}
 4020f64:	e037883a 	mov	sp,fp
 4020f68:	dfc00117 	ldw	ra,4(sp)
 4020f6c:	df000017 	ldw	fp,0(sp)
 4020f70:	dec00204 	addi	sp,sp,8
 4020f74:	f800283a 	ret

04020f78 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 4020f78:	defff404 	addi	sp,sp,-48
 4020f7c:	dfc00b15 	stw	ra,44(sp)
 4020f80:	df000a15 	stw	fp,40(sp)
 4020f84:	df000a04 	addi	fp,sp,40
 4020f88:	e13ffc15 	stw	r4,-16(fp)
 4020f8c:	e17ffd15 	stw	r5,-12(fp)
 4020f90:	e1bffe15 	stw	r6,-8(fp)
 4020f94:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 4020f98:	e0bffc17 	ldw	r2,-16(fp)
 4020f9c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 4020fa0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 4020fa4:	e17ffe17 	ldw	r5,-8(fp)
 4020fa8:	e13ffc17 	ldw	r4,-16(fp)
 4020fac:	4020e6c0 	call	4020e6c <alt_epcs_test_address>
 4020fb0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 4020fb4:	e0bff917 	ldw	r2,-28(fp)
 4020fb8:	10002916 	blt	r2,zero,4021060 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4020fbc:	00002606 	br	4021058 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 4020fc0:	e0bff817 	ldw	r2,-32(fp)
 4020fc4:	10c03117 	ldw	r3,196(r2)
 4020fc8:	e0bffe17 	ldw	r2,-8(fp)
 4020fcc:	1887883a 	add	r3,r3,r2
 4020fd0:	e0bff817 	ldw	r2,-32(fp)
 4020fd4:	10803117 	ldw	r2,196(r2)
 4020fd8:	0085c83a 	sub	r2,zero,r2
 4020fdc:	1884703a 	and	r2,r3,r2
 4020fe0:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 4020fe4:	e0fffa17 	ldw	r3,-24(fp)
 4020fe8:	e0bffe17 	ldw	r2,-8(fp)
 4020fec:	1885c83a 	sub	r2,r3,r2
 4020ff0:	e0c00217 	ldw	r3,8(fp)
 4020ff4:	1880010e 	bge	r3,r2,4020ffc <alt_epcs_flash_write_block+0x84>
 4020ff8:	1805883a 	mov	r2,r3
 4020ffc:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 4021000:	e0bff817 	ldw	r2,-32(fp)
 4021004:	11002e17 	ldw	r4,184(r2)
 4021008:	e0bff717 	ldw	r2,-36(fp)
 402100c:	e0ffff17 	ldw	r3,-4(fp)
 4021010:	1887883a 	add	r3,r3,r2
 4021014:	e0bff817 	ldw	r2,-32(fp)
 4021018:	10803217 	ldw	r2,200(r2)
 402101c:	d8800015 	stw	r2,0(sp)
 4021020:	e1fffb17 	ldw	r7,-20(fp)
 4021024:	180d883a 	mov	r6,r3
 4021028:	e17ffe17 	ldw	r5,-8(fp)
 402102c:	4021fec0 	call	4021fec <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 4021030:	e0c00217 	ldw	r3,8(fp)
 4021034:	e0bffb17 	ldw	r2,-20(fp)
 4021038:	1885c83a 	sub	r2,r3,r2
 402103c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 4021040:	e0fff717 	ldw	r3,-36(fp)
 4021044:	e0bffb17 	ldw	r2,-20(fp)
 4021048:	1885883a 	add	r2,r3,r2
 402104c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 4021050:	e0bffa17 	ldw	r2,-24(fp)
 4021054:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 4021058:	e0800217 	ldw	r2,8(fp)
 402105c:	103fd81e 	bne	r2,zero,4020fc0 <__reset+0xfb01ffc0>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 4021060:	e0bff917 	ldw	r2,-28(fp)
}
 4021064:	e037883a 	mov	sp,fp
 4021068:	dfc00117 	ldw	ra,4(sp)
 402106c:	df000017 	ldw	fp,0(sp)
 4021070:	dec00204 	addi	sp,sp,8
 4021074:	f800283a 	ret

04021078 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 4021078:	defff704 	addi	sp,sp,-36
 402107c:	dfc00815 	stw	ra,32(sp)
 4021080:	df000715 	stw	fp,28(sp)
 4021084:	df000704 	addi	fp,sp,28
 4021088:	e13ffc15 	stw	r4,-16(fp)
 402108c:	e17ffd15 	stw	r5,-12(fp)
 4021090:	e1bffe15 	stw	r6,-8(fp)
 4021094:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 4021098:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 402109c:	e0bffc17 	ldw	r2,-16(fp)
 40210a0:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 40210a4:	e17ffd17 	ldw	r5,-12(fp)
 40210a8:	e13ffc17 	ldw	r4,-16(fp)
 40210ac:	4020e6c0 	call	4020e6c <alt_epcs_test_address>
 40210b0:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 40210b4:	e0bffa17 	ldw	r2,-24(fp)
 40210b8:	10000f16 	blt	r2,zero,40210f8 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 40210bc:	e0bffb17 	ldw	r2,-20(fp)
 40210c0:	10c02e17 	ldw	r3,184(r2)
 40210c4:	e0bffb17 	ldw	r2,-20(fp)
 40210c8:	10803217 	ldw	r2,200(r2)
 40210cc:	d8800015 	stw	r2,0(sp)
 40210d0:	e1ffff17 	ldw	r7,-4(fp)
 40210d4:	e1bffe17 	ldw	r6,-8(fp)
 40210d8:	e17ffd17 	ldw	r5,-12(fp)
 40210dc:	1809883a 	mov	r4,r3
 40210e0:	4021e380 	call	4021e38 <epcs_read_buffer>
 40210e4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 40210e8:	e0fffa17 	ldw	r3,-24(fp)
 40210ec:	e0bfff17 	ldw	r2,-4(fp)
 40210f0:	1880011e 	bne	r3,r2,40210f8 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 40210f4:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 40210f8:	e0bffa17 	ldw	r2,-24(fp)
}
 40210fc:	e037883a 	mov	sp,fp
 4021100:	dfc00117 	ldw	ra,4(sp)
 4021104:	df000017 	ldw	fp,0(sp)
 4021108:	dec00204 	addi	sp,sp,8
 402110c:	f800283a 	ret

04021110 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4021110:	defffa04 	addi	sp,sp,-24
 4021114:	dfc00515 	stw	ra,20(sp)
 4021118:	df000415 	stw	fp,16(sp)
 402111c:	df000404 	addi	fp,sp,16
 4021120:	e13ffd15 	stw	r4,-12(fp)
 4021124:	e17ffe15 	stw	r5,-8(fp)
 4021128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402112c:	e0bffd17 	ldw	r2,-12(fp)
 4021130:	10800017 	ldw	r2,0(r2)
 4021134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4021138:	e0bffc17 	ldw	r2,-16(fp)
 402113c:	10c00a04 	addi	r3,r2,40
 4021140:	e0bffd17 	ldw	r2,-12(fp)
 4021144:	10800217 	ldw	r2,8(r2)
 4021148:	100f883a 	mov	r7,r2
 402114c:	e1bfff17 	ldw	r6,-4(fp)
 4021150:	e17ffe17 	ldw	r5,-8(fp)
 4021154:	1809883a 	mov	r4,r3
 4021158:	40217380 	call	4021738 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402115c:	e037883a 	mov	sp,fp
 4021160:	dfc00117 	ldw	ra,4(sp)
 4021164:	df000017 	ldw	fp,0(sp)
 4021168:	dec00204 	addi	sp,sp,8
 402116c:	f800283a 	ret

04021170 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4021170:	defffa04 	addi	sp,sp,-24
 4021174:	dfc00515 	stw	ra,20(sp)
 4021178:	df000415 	stw	fp,16(sp)
 402117c:	df000404 	addi	fp,sp,16
 4021180:	e13ffd15 	stw	r4,-12(fp)
 4021184:	e17ffe15 	stw	r5,-8(fp)
 4021188:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402118c:	e0bffd17 	ldw	r2,-12(fp)
 4021190:	10800017 	ldw	r2,0(r2)
 4021194:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4021198:	e0bffc17 	ldw	r2,-16(fp)
 402119c:	10c00a04 	addi	r3,r2,40
 40211a0:	e0bffd17 	ldw	r2,-12(fp)
 40211a4:	10800217 	ldw	r2,8(r2)
 40211a8:	100f883a 	mov	r7,r2
 40211ac:	e1bfff17 	ldw	r6,-4(fp)
 40211b0:	e17ffe17 	ldw	r5,-8(fp)
 40211b4:	1809883a 	mov	r4,r3
 40211b8:	40219540 	call	4021954 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40211bc:	e037883a 	mov	sp,fp
 40211c0:	dfc00117 	ldw	ra,4(sp)
 40211c4:	df000017 	ldw	fp,0(sp)
 40211c8:	dec00204 	addi	sp,sp,8
 40211cc:	f800283a 	ret

040211d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40211d0:	defffc04 	addi	sp,sp,-16
 40211d4:	dfc00315 	stw	ra,12(sp)
 40211d8:	df000215 	stw	fp,8(sp)
 40211dc:	df000204 	addi	fp,sp,8
 40211e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40211e4:	e0bfff17 	ldw	r2,-4(fp)
 40211e8:	10800017 	ldw	r2,0(r2)
 40211ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40211f0:	e0bffe17 	ldw	r2,-8(fp)
 40211f4:	10c00a04 	addi	r3,r2,40
 40211f8:	e0bfff17 	ldw	r2,-4(fp)
 40211fc:	10800217 	ldw	r2,8(r2)
 4021200:	100b883a 	mov	r5,r2
 4021204:	1809883a 	mov	r4,r3
 4021208:	40215e00 	call	40215e0 <altera_avalon_jtag_uart_close>
}
 402120c:	e037883a 	mov	sp,fp
 4021210:	dfc00117 	ldw	ra,4(sp)
 4021214:	df000017 	ldw	fp,0(sp)
 4021218:	dec00204 	addi	sp,sp,8
 402121c:	f800283a 	ret

04021220 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4021220:	defffa04 	addi	sp,sp,-24
 4021224:	dfc00515 	stw	ra,20(sp)
 4021228:	df000415 	stw	fp,16(sp)
 402122c:	df000404 	addi	fp,sp,16
 4021230:	e13ffd15 	stw	r4,-12(fp)
 4021234:	e17ffe15 	stw	r5,-8(fp)
 4021238:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402123c:	e0bffd17 	ldw	r2,-12(fp)
 4021240:	10800017 	ldw	r2,0(r2)
 4021244:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4021248:	e0bffc17 	ldw	r2,-16(fp)
 402124c:	10800a04 	addi	r2,r2,40
 4021250:	e1bfff17 	ldw	r6,-4(fp)
 4021254:	e17ffe17 	ldw	r5,-8(fp)
 4021258:	1009883a 	mov	r4,r2
 402125c:	40216480 	call	4021648 <altera_avalon_jtag_uart_ioctl>
}
 4021260:	e037883a 	mov	sp,fp
 4021264:	dfc00117 	ldw	ra,4(sp)
 4021268:	df000017 	ldw	fp,0(sp)
 402126c:	dec00204 	addi	sp,sp,8
 4021270:	f800283a 	ret

04021274 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4021274:	defffa04 	addi	sp,sp,-24
 4021278:	dfc00515 	stw	ra,20(sp)
 402127c:	df000415 	stw	fp,16(sp)
 4021280:	df000404 	addi	fp,sp,16
 4021284:	e13ffd15 	stw	r4,-12(fp)
 4021288:	e17ffe15 	stw	r5,-8(fp)
 402128c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4021290:	e0bffd17 	ldw	r2,-12(fp)
 4021294:	00c00044 	movi	r3,1
 4021298:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402129c:	e0bffd17 	ldw	r2,-12(fp)
 40212a0:	10800017 	ldw	r2,0(r2)
 40212a4:	10800104 	addi	r2,r2,4
 40212a8:	1007883a 	mov	r3,r2
 40212ac:	e0bffd17 	ldw	r2,-12(fp)
 40212b0:	10800817 	ldw	r2,32(r2)
 40212b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40212b8:	e0bffe17 	ldw	r2,-8(fp)
 40212bc:	e0ffff17 	ldw	r3,-4(fp)
 40212c0:	d8000015 	stw	zero,0(sp)
 40212c4:	e1fffd17 	ldw	r7,-12(fp)
 40212c8:	018100b4 	movhi	r6,1026
 40212cc:	3184cd04 	addi	r6,r6,4916
 40212d0:	180b883a 	mov	r5,r3
 40212d4:	1009883a 	mov	r4,r2
 40212d8:	401f8400 	call	401f840 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40212dc:	e0bffd17 	ldw	r2,-12(fp)
 40212e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40212e4:	e0bffd17 	ldw	r2,-12(fp)
 40212e8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40212ec:	d0e01f17 	ldw	r3,-32644(gp)
 40212f0:	e1fffd17 	ldw	r7,-12(fp)
 40212f4:	018100b4 	movhi	r6,1026
 40212f8:	31855004 	addi	r6,r6,5440
 40212fc:	180b883a 	mov	r5,r3
 4021300:	1009883a 	mov	r4,r2
 4021304:	40222a80 	call	40222a8 <alt_alarm_start>
 4021308:	1000040e 	bge	r2,zero,402131c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402130c:	e0fffd17 	ldw	r3,-12(fp)
 4021310:	00a00034 	movhi	r2,32768
 4021314:	10bfffc4 	addi	r2,r2,-1
 4021318:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402131c:	0001883a 	nop
 4021320:	e037883a 	mov	sp,fp
 4021324:	dfc00117 	ldw	ra,4(sp)
 4021328:	df000017 	ldw	fp,0(sp)
 402132c:	dec00204 	addi	sp,sp,8
 4021330:	f800283a 	ret

04021334 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4021334:	defff804 	addi	sp,sp,-32
 4021338:	df000715 	stw	fp,28(sp)
 402133c:	df000704 	addi	fp,sp,28
 4021340:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4021344:	e0bfff17 	ldw	r2,-4(fp)
 4021348:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 402134c:	e0bffb17 	ldw	r2,-20(fp)
 4021350:	10800017 	ldw	r2,0(r2)
 4021354:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4021358:	e0bffc17 	ldw	r2,-16(fp)
 402135c:	10800104 	addi	r2,r2,4
 4021360:	10800037 	ldwio	r2,0(r2)
 4021364:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4021368:	e0bffd17 	ldw	r2,-12(fp)
 402136c:	1080c00c 	andi	r2,r2,768
 4021370:	10006d26 	beq	r2,zero,4021528 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4021374:	e0bffd17 	ldw	r2,-12(fp)
 4021378:	1080400c 	andi	r2,r2,256
 402137c:	10003526 	beq	r2,zero,4021454 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4021380:	00800074 	movhi	r2,1
 4021384:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021388:	e0bffb17 	ldw	r2,-20(fp)
 402138c:	10800a17 	ldw	r2,40(r2)
 4021390:	10800044 	addi	r2,r2,1
 4021394:	1081ffcc 	andi	r2,r2,2047
 4021398:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402139c:	e0bffb17 	ldw	r2,-20(fp)
 40213a0:	10c00b17 	ldw	r3,44(r2)
 40213a4:	e0bffe17 	ldw	r2,-8(fp)
 40213a8:	18801526 	beq	r3,r2,4021400 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40213ac:	e0bffc17 	ldw	r2,-16(fp)
 40213b0:	10800037 	ldwio	r2,0(r2)
 40213b4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40213b8:	e0bff917 	ldw	r2,-28(fp)
 40213bc:	10a0000c 	andi	r2,r2,32768
 40213c0:	10001126 	beq	r2,zero,4021408 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40213c4:	e0bffb17 	ldw	r2,-20(fp)
 40213c8:	10800a17 	ldw	r2,40(r2)
 40213cc:	e0fff917 	ldw	r3,-28(fp)
 40213d0:	1809883a 	mov	r4,r3
 40213d4:	e0fffb17 	ldw	r3,-20(fp)
 40213d8:	1885883a 	add	r2,r3,r2
 40213dc:	10800e04 	addi	r2,r2,56
 40213e0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40213e4:	e0bffb17 	ldw	r2,-20(fp)
 40213e8:	10800a17 	ldw	r2,40(r2)
 40213ec:	10800044 	addi	r2,r2,1
 40213f0:	10c1ffcc 	andi	r3,r2,2047
 40213f4:	e0bffb17 	ldw	r2,-20(fp)
 40213f8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40213fc:	003fe206 	br	4021388 <__reset+0xfb020388>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4021400:	0001883a 	nop
 4021404:	00000106 	br	402140c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4021408:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402140c:	e0bff917 	ldw	r2,-28(fp)
 4021410:	10bfffec 	andhi	r2,r2,65535
 4021414:	10000f26 	beq	r2,zero,4021454 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4021418:	e0bffb17 	ldw	r2,-20(fp)
 402141c:	10c00817 	ldw	r3,32(r2)
 4021420:	00bfff84 	movi	r2,-2
 4021424:	1886703a 	and	r3,r3,r2
 4021428:	e0bffb17 	ldw	r2,-20(fp)
 402142c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4021430:	e0bffc17 	ldw	r2,-16(fp)
 4021434:	10800104 	addi	r2,r2,4
 4021438:	1007883a 	mov	r3,r2
 402143c:	e0bffb17 	ldw	r2,-20(fp)
 4021440:	10800817 	ldw	r2,32(r2)
 4021444:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4021448:	e0bffc17 	ldw	r2,-16(fp)
 402144c:	10800104 	addi	r2,r2,4
 4021450:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4021454:	e0bffd17 	ldw	r2,-12(fp)
 4021458:	1080800c 	andi	r2,r2,512
 402145c:	103fbe26 	beq	r2,zero,4021358 <__reset+0xfb020358>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4021460:	e0bffd17 	ldw	r2,-12(fp)
 4021464:	1004d43a 	srli	r2,r2,16
 4021468:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402146c:	00001406 	br	40214c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4021470:	e0bffc17 	ldw	r2,-16(fp)
 4021474:	e0fffb17 	ldw	r3,-20(fp)
 4021478:	18c00d17 	ldw	r3,52(r3)
 402147c:	e13ffb17 	ldw	r4,-20(fp)
 4021480:	20c7883a 	add	r3,r4,r3
 4021484:	18c20e04 	addi	r3,r3,2104
 4021488:	18c00003 	ldbu	r3,0(r3)
 402148c:	18c03fcc 	andi	r3,r3,255
 4021490:	18c0201c 	xori	r3,r3,128
 4021494:	18ffe004 	addi	r3,r3,-128
 4021498:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402149c:	e0bffb17 	ldw	r2,-20(fp)
 40214a0:	10800d17 	ldw	r2,52(r2)
 40214a4:	10800044 	addi	r2,r2,1
 40214a8:	10c1ffcc 	andi	r3,r2,2047
 40214ac:	e0bffb17 	ldw	r2,-20(fp)
 40214b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 40214b4:	e0bffa17 	ldw	r2,-24(fp)
 40214b8:	10bfffc4 	addi	r2,r2,-1
 40214bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 40214c0:	e0bffa17 	ldw	r2,-24(fp)
 40214c4:	10000526 	beq	r2,zero,40214dc <altera_avalon_jtag_uart_irq+0x1a8>
 40214c8:	e0bffb17 	ldw	r2,-20(fp)
 40214cc:	10c00d17 	ldw	r3,52(r2)
 40214d0:	e0bffb17 	ldw	r2,-20(fp)
 40214d4:	10800c17 	ldw	r2,48(r2)
 40214d8:	18bfe51e 	bne	r3,r2,4021470 <__reset+0xfb020470>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 40214dc:	e0bffa17 	ldw	r2,-24(fp)
 40214e0:	103f9d26 	beq	r2,zero,4021358 <__reset+0xfb020358>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40214e4:	e0bffb17 	ldw	r2,-20(fp)
 40214e8:	10c00817 	ldw	r3,32(r2)
 40214ec:	00bfff44 	movi	r2,-3
 40214f0:	1886703a 	and	r3,r3,r2
 40214f4:	e0bffb17 	ldw	r2,-20(fp)
 40214f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40214fc:	e0bffb17 	ldw	r2,-20(fp)
 4021500:	10800017 	ldw	r2,0(r2)
 4021504:	10800104 	addi	r2,r2,4
 4021508:	1007883a 	mov	r3,r2
 402150c:	e0bffb17 	ldw	r2,-20(fp)
 4021510:	10800817 	ldw	r2,32(r2)
 4021514:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4021518:	e0bffc17 	ldw	r2,-16(fp)
 402151c:	10800104 	addi	r2,r2,4
 4021520:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4021524:	003f8c06 	br	4021358 <__reset+0xfb020358>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4021528:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402152c:	0001883a 	nop
 4021530:	e037883a 	mov	sp,fp
 4021534:	df000017 	ldw	fp,0(sp)
 4021538:	dec00104 	addi	sp,sp,4
 402153c:	f800283a 	ret

04021540 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4021540:	defff804 	addi	sp,sp,-32
 4021544:	df000715 	stw	fp,28(sp)
 4021548:	df000704 	addi	fp,sp,28
 402154c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4021550:	e0bffb17 	ldw	r2,-20(fp)
 4021554:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4021558:	e0bff917 	ldw	r2,-28(fp)
 402155c:	10800017 	ldw	r2,0(r2)
 4021560:	10800104 	addi	r2,r2,4
 4021564:	10800037 	ldwio	r2,0(r2)
 4021568:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402156c:	e0bffa17 	ldw	r2,-24(fp)
 4021570:	1081000c 	andi	r2,r2,1024
 4021574:	10000b26 	beq	r2,zero,40215a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4021578:	e0bff917 	ldw	r2,-28(fp)
 402157c:	10800017 	ldw	r2,0(r2)
 4021580:	10800104 	addi	r2,r2,4
 4021584:	1007883a 	mov	r3,r2
 4021588:	e0bff917 	ldw	r2,-28(fp)
 402158c:	10800817 	ldw	r2,32(r2)
 4021590:	10810014 	ori	r2,r2,1024
 4021594:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4021598:	e0bff917 	ldw	r2,-28(fp)
 402159c:	10000915 	stw	zero,36(r2)
 40215a0:	00000a06 	br	40215cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 40215a4:	e0bff917 	ldw	r2,-28(fp)
 40215a8:	10c00917 	ldw	r3,36(r2)
 40215ac:	00a00034 	movhi	r2,32768
 40215b0:	10bfff04 	addi	r2,r2,-4
 40215b4:	10c00536 	bltu	r2,r3,40215cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 40215b8:	e0bff917 	ldw	r2,-28(fp)
 40215bc:	10800917 	ldw	r2,36(r2)
 40215c0:	10c00044 	addi	r3,r2,1
 40215c4:	e0bff917 	ldw	r2,-28(fp)
 40215c8:	10c00915 	stw	r3,36(r2)
 40215cc:	d0a01f17 	ldw	r2,-32644(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40215d0:	e037883a 	mov	sp,fp
 40215d4:	df000017 	ldw	fp,0(sp)
 40215d8:	dec00104 	addi	sp,sp,4
 40215dc:	f800283a 	ret

040215e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40215e0:	defffd04 	addi	sp,sp,-12
 40215e4:	df000215 	stw	fp,8(sp)
 40215e8:	df000204 	addi	fp,sp,8
 40215ec:	e13ffe15 	stw	r4,-8(fp)
 40215f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40215f4:	00000506 	br	402160c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40215f8:	e0bfff17 	ldw	r2,-4(fp)
 40215fc:	1090000c 	andi	r2,r2,16384
 4021600:	10000226 	beq	r2,zero,402160c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4021604:	00bffd44 	movi	r2,-11
 4021608:	00000b06 	br	4021638 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402160c:	e0bffe17 	ldw	r2,-8(fp)
 4021610:	10c00d17 	ldw	r3,52(r2)
 4021614:	e0bffe17 	ldw	r2,-8(fp)
 4021618:	10800c17 	ldw	r2,48(r2)
 402161c:	18800526 	beq	r3,r2,4021634 <altera_avalon_jtag_uart_close+0x54>
 4021620:	e0bffe17 	ldw	r2,-8(fp)
 4021624:	10c00917 	ldw	r3,36(r2)
 4021628:	e0bffe17 	ldw	r2,-8(fp)
 402162c:	10800117 	ldw	r2,4(r2)
 4021630:	18bff136 	bltu	r3,r2,40215f8 <__reset+0xfb0205f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4021634:	0005883a 	mov	r2,zero
}
 4021638:	e037883a 	mov	sp,fp
 402163c:	df000017 	ldw	fp,0(sp)
 4021640:	dec00104 	addi	sp,sp,4
 4021644:	f800283a 	ret

04021648 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4021648:	defffa04 	addi	sp,sp,-24
 402164c:	df000515 	stw	fp,20(sp)
 4021650:	df000504 	addi	fp,sp,20
 4021654:	e13ffd15 	stw	r4,-12(fp)
 4021658:	e17ffe15 	stw	r5,-8(fp)
 402165c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4021660:	00bff9c4 	movi	r2,-25
 4021664:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4021668:	e0bffe17 	ldw	r2,-8(fp)
 402166c:	10da8060 	cmpeqi	r3,r2,27137
 4021670:	1800031e 	bne	r3,zero,4021680 <altera_avalon_jtag_uart_ioctl+0x38>
 4021674:	109a80a0 	cmpeqi	r2,r2,27138
 4021678:	1000181e 	bne	r2,zero,40216dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402167c:	00002906 	br	4021724 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4021680:	e0bffd17 	ldw	r2,-12(fp)
 4021684:	10c00117 	ldw	r3,4(r2)
 4021688:	00a00034 	movhi	r2,32768
 402168c:	10bfffc4 	addi	r2,r2,-1
 4021690:	18802126 	beq	r3,r2,4021718 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4021694:	e0bfff17 	ldw	r2,-4(fp)
 4021698:	10800017 	ldw	r2,0(r2)
 402169c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40216a0:	e0bffc17 	ldw	r2,-16(fp)
 40216a4:	10800090 	cmplti	r2,r2,2
 40216a8:	1000061e 	bne	r2,zero,40216c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40216ac:	e0fffc17 	ldw	r3,-16(fp)
 40216b0:	00a00034 	movhi	r2,32768
 40216b4:	10bfffc4 	addi	r2,r2,-1
 40216b8:	18800226 	beq	r3,r2,40216c4 <altera_avalon_jtag_uart_ioctl+0x7c>
 40216bc:	e0bffc17 	ldw	r2,-16(fp)
 40216c0:	00000206 	br	40216cc <altera_avalon_jtag_uart_ioctl+0x84>
 40216c4:	00a00034 	movhi	r2,32768
 40216c8:	10bfff84 	addi	r2,r2,-2
 40216cc:	e0fffd17 	ldw	r3,-12(fp)
 40216d0:	18800115 	stw	r2,4(r3)
      rc = 0;
 40216d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40216d8:	00000f06 	br	4021718 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40216dc:	e0bffd17 	ldw	r2,-12(fp)
 40216e0:	10c00117 	ldw	r3,4(r2)
 40216e4:	00a00034 	movhi	r2,32768
 40216e8:	10bfffc4 	addi	r2,r2,-1
 40216ec:	18800c26 	beq	r3,r2,4021720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40216f0:	e0bffd17 	ldw	r2,-12(fp)
 40216f4:	10c00917 	ldw	r3,36(r2)
 40216f8:	e0bffd17 	ldw	r2,-12(fp)
 40216fc:	10800117 	ldw	r2,4(r2)
 4021700:	1885803a 	cmpltu	r2,r3,r2
 4021704:	10c03fcc 	andi	r3,r2,255
 4021708:	e0bfff17 	ldw	r2,-4(fp)
 402170c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4021710:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4021714:	00000206 	br	4021720 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4021718:	0001883a 	nop
 402171c:	00000106 	br	4021724 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4021720:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4021724:	e0bffb17 	ldw	r2,-20(fp)
}
 4021728:	e037883a 	mov	sp,fp
 402172c:	df000017 	ldw	fp,0(sp)
 4021730:	dec00104 	addi	sp,sp,4
 4021734:	f800283a 	ret

04021738 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4021738:	defff304 	addi	sp,sp,-52
 402173c:	dfc00c15 	stw	ra,48(sp)
 4021740:	df000b15 	stw	fp,44(sp)
 4021744:	df000b04 	addi	fp,sp,44
 4021748:	e13ffc15 	stw	r4,-16(fp)
 402174c:	e17ffd15 	stw	r5,-12(fp)
 4021750:	e1bffe15 	stw	r6,-8(fp)
 4021754:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4021758:	e0bffd17 	ldw	r2,-12(fp)
 402175c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4021760:	00004706 	br	4021880 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4021764:	e0bffc17 	ldw	r2,-16(fp)
 4021768:	10800a17 	ldw	r2,40(r2)
 402176c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4021770:	e0bffc17 	ldw	r2,-16(fp)
 4021774:	10800b17 	ldw	r2,44(r2)
 4021778:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402177c:	e0fff717 	ldw	r3,-36(fp)
 4021780:	e0bff817 	ldw	r2,-32(fp)
 4021784:	18800536 	bltu	r3,r2,402179c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4021788:	e0fff717 	ldw	r3,-36(fp)
 402178c:	e0bff817 	ldw	r2,-32(fp)
 4021790:	1885c83a 	sub	r2,r3,r2
 4021794:	e0bff615 	stw	r2,-40(fp)
 4021798:	00000406 	br	40217ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402179c:	00c20004 	movi	r3,2048
 40217a0:	e0bff817 	ldw	r2,-32(fp)
 40217a4:	1885c83a 	sub	r2,r3,r2
 40217a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40217ac:	e0bff617 	ldw	r2,-40(fp)
 40217b0:	10001e26 	beq	r2,zero,402182c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40217b4:	e0fffe17 	ldw	r3,-8(fp)
 40217b8:	e0bff617 	ldw	r2,-40(fp)
 40217bc:	1880022e 	bgeu	r3,r2,40217c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40217c0:	e0bffe17 	ldw	r2,-8(fp)
 40217c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 40217c8:	e0bffc17 	ldw	r2,-16(fp)
 40217cc:	10c00e04 	addi	r3,r2,56
 40217d0:	e0bff817 	ldw	r2,-32(fp)
 40217d4:	1885883a 	add	r2,r3,r2
 40217d8:	e1bff617 	ldw	r6,-40(fp)
 40217dc:	100b883a 	mov	r5,r2
 40217e0:	e13ff517 	ldw	r4,-44(fp)
 40217e4:	40124140 	call	4012414 <memcpy>
      ptr   += n;
 40217e8:	e0fff517 	ldw	r3,-44(fp)
 40217ec:	e0bff617 	ldw	r2,-40(fp)
 40217f0:	1885883a 	add	r2,r3,r2
 40217f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 40217f8:	e0fffe17 	ldw	r3,-8(fp)
 40217fc:	e0bff617 	ldw	r2,-40(fp)
 4021800:	1885c83a 	sub	r2,r3,r2
 4021804:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021808:	e0fff817 	ldw	r3,-32(fp)
 402180c:	e0bff617 	ldw	r2,-40(fp)
 4021810:	1885883a 	add	r2,r3,r2
 4021814:	10c1ffcc 	andi	r3,r2,2047
 4021818:	e0bffc17 	ldw	r2,-16(fp)
 402181c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4021820:	e0bffe17 	ldw	r2,-8(fp)
 4021824:	00bfcf16 	blt	zero,r2,4021764 <__reset+0xfb020764>
 4021828:	00000106 	br	4021830 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402182c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4021830:	e0fff517 	ldw	r3,-44(fp)
 4021834:	e0bffd17 	ldw	r2,-12(fp)
 4021838:	1880141e 	bne	r3,r2,402188c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402183c:	e0bfff17 	ldw	r2,-4(fp)
 4021840:	1090000c 	andi	r2,r2,16384
 4021844:	1000131e 	bne	r2,zero,4021894 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4021848:	0001883a 	nop
 402184c:	e0bffc17 	ldw	r2,-16(fp)
 4021850:	10c00a17 	ldw	r3,40(r2)
 4021854:	e0bff717 	ldw	r2,-36(fp)
 4021858:	1880051e 	bne	r3,r2,4021870 <altera_avalon_jtag_uart_read+0x138>
 402185c:	e0bffc17 	ldw	r2,-16(fp)
 4021860:	10c00917 	ldw	r3,36(r2)
 4021864:	e0bffc17 	ldw	r2,-16(fp)
 4021868:	10800117 	ldw	r2,4(r2)
 402186c:	18bff736 	bltu	r3,r2,402184c <__reset+0xfb02084c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4021870:	e0bffc17 	ldw	r2,-16(fp)
 4021874:	10c00a17 	ldw	r3,40(r2)
 4021878:	e0bff717 	ldw	r2,-36(fp)
 402187c:	18800726 	beq	r3,r2,402189c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4021880:	e0bffe17 	ldw	r2,-8(fp)
 4021884:	00bfb716 	blt	zero,r2,4021764 <__reset+0xfb020764>
 4021888:	00000506 	br	40218a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402188c:	0001883a 	nop
 4021890:	00000306 	br	40218a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4021894:	0001883a 	nop
 4021898:	00000106 	br	40218a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402189c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40218a0:	e0fff517 	ldw	r3,-44(fp)
 40218a4:	e0bffd17 	ldw	r2,-12(fp)
 40218a8:	18801826 	beq	r3,r2,402190c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40218ac:	0005303a 	rdctl	r2,status
 40218b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40218b4:	e0fffb17 	ldw	r3,-20(fp)
 40218b8:	00bfff84 	movi	r2,-2
 40218bc:	1884703a 	and	r2,r3,r2
 40218c0:	1001703a 	wrctl	status,r2
  
  return context;
 40218c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 40218c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40218cc:	e0bffc17 	ldw	r2,-16(fp)
 40218d0:	10800817 	ldw	r2,32(r2)
 40218d4:	10c00054 	ori	r3,r2,1
 40218d8:	e0bffc17 	ldw	r2,-16(fp)
 40218dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40218e0:	e0bffc17 	ldw	r2,-16(fp)
 40218e4:	10800017 	ldw	r2,0(r2)
 40218e8:	10800104 	addi	r2,r2,4
 40218ec:	1007883a 	mov	r3,r2
 40218f0:	e0bffc17 	ldw	r2,-16(fp)
 40218f4:	10800817 	ldw	r2,32(r2)
 40218f8:	18800035 	stwio	r2,0(r3)
 40218fc:	e0bffa17 	ldw	r2,-24(fp)
 4021900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021904:	e0bff917 	ldw	r2,-28(fp)
 4021908:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402190c:	e0fff517 	ldw	r3,-44(fp)
 4021910:	e0bffd17 	ldw	r2,-12(fp)
 4021914:	18800426 	beq	r3,r2,4021928 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4021918:	e0fff517 	ldw	r3,-44(fp)
 402191c:	e0bffd17 	ldw	r2,-12(fp)
 4021920:	1885c83a 	sub	r2,r3,r2
 4021924:	00000606 	br	4021940 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4021928:	e0bfff17 	ldw	r2,-4(fp)
 402192c:	1090000c 	andi	r2,r2,16384
 4021930:	10000226 	beq	r2,zero,402193c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4021934:	00bffd44 	movi	r2,-11
 4021938:	00000106 	br	4021940 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402193c:	00bffec4 	movi	r2,-5
}
 4021940:	e037883a 	mov	sp,fp
 4021944:	dfc00117 	ldw	ra,4(sp)
 4021948:	df000017 	ldw	fp,0(sp)
 402194c:	dec00204 	addi	sp,sp,8
 4021950:	f800283a 	ret

04021954 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4021954:	defff304 	addi	sp,sp,-52
 4021958:	dfc00c15 	stw	ra,48(sp)
 402195c:	df000b15 	stw	fp,44(sp)
 4021960:	df000b04 	addi	fp,sp,44
 4021964:	e13ffc15 	stw	r4,-16(fp)
 4021968:	e17ffd15 	stw	r5,-12(fp)
 402196c:	e1bffe15 	stw	r6,-8(fp)
 4021970:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4021974:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4021978:	e0bffd17 	ldw	r2,-12(fp)
 402197c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4021980:	00003706 	br	4021a60 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4021984:	e0bffc17 	ldw	r2,-16(fp)
 4021988:	10800c17 	ldw	r2,48(r2)
 402198c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4021990:	e0bffc17 	ldw	r2,-16(fp)
 4021994:	10800d17 	ldw	r2,52(r2)
 4021998:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402199c:	e0fff917 	ldw	r3,-28(fp)
 40219a0:	e0bff517 	ldw	r2,-44(fp)
 40219a4:	1880062e 	bgeu	r3,r2,40219c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40219a8:	e0fff517 	ldw	r3,-44(fp)
 40219ac:	e0bff917 	ldw	r2,-28(fp)
 40219b0:	1885c83a 	sub	r2,r3,r2
 40219b4:	10bfffc4 	addi	r2,r2,-1
 40219b8:	e0bff615 	stw	r2,-40(fp)
 40219bc:	00000b06 	br	40219ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40219c0:	e0bff517 	ldw	r2,-44(fp)
 40219c4:	10000526 	beq	r2,zero,40219dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40219c8:	00c20004 	movi	r3,2048
 40219cc:	e0bff917 	ldw	r2,-28(fp)
 40219d0:	1885c83a 	sub	r2,r3,r2
 40219d4:	e0bff615 	stw	r2,-40(fp)
 40219d8:	00000406 	br	40219ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40219dc:	00c1ffc4 	movi	r3,2047
 40219e0:	e0bff917 	ldw	r2,-28(fp)
 40219e4:	1885c83a 	sub	r2,r3,r2
 40219e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40219ec:	e0bff617 	ldw	r2,-40(fp)
 40219f0:	10001e26 	beq	r2,zero,4021a6c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 40219f4:	e0fffe17 	ldw	r3,-8(fp)
 40219f8:	e0bff617 	ldw	r2,-40(fp)
 40219fc:	1880022e 	bgeu	r3,r2,4021a08 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4021a00:	e0bffe17 	ldw	r2,-8(fp)
 4021a04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4021a08:	e0bffc17 	ldw	r2,-16(fp)
 4021a0c:	10c20e04 	addi	r3,r2,2104
 4021a10:	e0bff917 	ldw	r2,-28(fp)
 4021a14:	1885883a 	add	r2,r3,r2
 4021a18:	e1bff617 	ldw	r6,-40(fp)
 4021a1c:	e17ffd17 	ldw	r5,-12(fp)
 4021a20:	1009883a 	mov	r4,r2
 4021a24:	40124140 	call	4012414 <memcpy>
      ptr   += n;
 4021a28:	e0fffd17 	ldw	r3,-12(fp)
 4021a2c:	e0bff617 	ldw	r2,-40(fp)
 4021a30:	1885883a 	add	r2,r3,r2
 4021a34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4021a38:	e0fffe17 	ldw	r3,-8(fp)
 4021a3c:	e0bff617 	ldw	r2,-40(fp)
 4021a40:	1885c83a 	sub	r2,r3,r2
 4021a44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021a48:	e0fff917 	ldw	r3,-28(fp)
 4021a4c:	e0bff617 	ldw	r2,-40(fp)
 4021a50:	1885883a 	add	r2,r3,r2
 4021a54:	10c1ffcc 	andi	r3,r2,2047
 4021a58:	e0bffc17 	ldw	r2,-16(fp)
 4021a5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4021a60:	e0bffe17 	ldw	r2,-8(fp)
 4021a64:	00bfc716 	blt	zero,r2,4021984 <__reset+0xfb020984>
 4021a68:	00000106 	br	4021a70 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4021a6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4021a70:	0005303a 	rdctl	r2,status
 4021a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021a78:	e0fffb17 	ldw	r3,-20(fp)
 4021a7c:	00bfff84 	movi	r2,-2
 4021a80:	1884703a 	and	r2,r3,r2
 4021a84:	1001703a 	wrctl	status,r2
  
  return context;
 4021a88:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4021a8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4021a90:	e0bffc17 	ldw	r2,-16(fp)
 4021a94:	10800817 	ldw	r2,32(r2)
 4021a98:	10c00094 	ori	r3,r2,2
 4021a9c:	e0bffc17 	ldw	r2,-16(fp)
 4021aa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4021aa4:	e0bffc17 	ldw	r2,-16(fp)
 4021aa8:	10800017 	ldw	r2,0(r2)
 4021aac:	10800104 	addi	r2,r2,4
 4021ab0:	1007883a 	mov	r3,r2
 4021ab4:	e0bffc17 	ldw	r2,-16(fp)
 4021ab8:	10800817 	ldw	r2,32(r2)
 4021abc:	18800035 	stwio	r2,0(r3)
 4021ac0:	e0bffa17 	ldw	r2,-24(fp)
 4021ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021ac8:	e0bff817 	ldw	r2,-32(fp)
 4021acc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4021ad0:	e0bffe17 	ldw	r2,-8(fp)
 4021ad4:	0080100e 	bge	zero,r2,4021b18 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4021ad8:	e0bfff17 	ldw	r2,-4(fp)
 4021adc:	1090000c 	andi	r2,r2,16384
 4021ae0:	1000101e 	bne	r2,zero,4021b24 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4021ae4:	0001883a 	nop
 4021ae8:	e0bffc17 	ldw	r2,-16(fp)
 4021aec:	10c00d17 	ldw	r3,52(r2)
 4021af0:	e0bff517 	ldw	r2,-44(fp)
 4021af4:	1880051e 	bne	r3,r2,4021b0c <altera_avalon_jtag_uart_write+0x1b8>
 4021af8:	e0bffc17 	ldw	r2,-16(fp)
 4021afc:	10c00917 	ldw	r3,36(r2)
 4021b00:	e0bffc17 	ldw	r2,-16(fp)
 4021b04:	10800117 	ldw	r2,4(r2)
 4021b08:	18bff736 	bltu	r3,r2,4021ae8 <__reset+0xfb020ae8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4021b0c:	e0bffc17 	ldw	r2,-16(fp)
 4021b10:	10800917 	ldw	r2,36(r2)
 4021b14:	1000051e 	bne	r2,zero,4021b2c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4021b18:	e0bffe17 	ldw	r2,-8(fp)
 4021b1c:	00bfd016 	blt	zero,r2,4021a60 <__reset+0xfb020a60>
 4021b20:	00000306 	br	4021b30 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4021b24:	0001883a 	nop
 4021b28:	00000106 	br	4021b30 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4021b2c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4021b30:	e0fffd17 	ldw	r3,-12(fp)
 4021b34:	e0bff717 	ldw	r2,-36(fp)
 4021b38:	18800426 	beq	r3,r2,4021b4c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4021b3c:	e0fffd17 	ldw	r3,-12(fp)
 4021b40:	e0bff717 	ldw	r2,-36(fp)
 4021b44:	1885c83a 	sub	r2,r3,r2
 4021b48:	00000606 	br	4021b64 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4021b4c:	e0bfff17 	ldw	r2,-4(fp)
 4021b50:	1090000c 	andi	r2,r2,16384
 4021b54:	10000226 	beq	r2,zero,4021b60 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4021b58:	00bffd44 	movi	r2,-11
 4021b5c:	00000106 	br	4021b64 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4021b60:	00bffec4 	movi	r2,-5
}
 4021b64:	e037883a 	mov	sp,fp
 4021b68:	dfc00117 	ldw	ra,4(sp)
 4021b6c:	df000017 	ldw	fp,0(sp)
 4021b70:	dec00204 	addi	sp,sp,8
 4021b74:	f800283a 	ret

04021b78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4021b78:	defffa04 	addi	sp,sp,-24
 4021b7c:	dfc00515 	stw	ra,20(sp)
 4021b80:	df000415 	stw	fp,16(sp)
 4021b84:	df000404 	addi	fp,sp,16
 4021b88:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4021b8c:	0007883a 	mov	r3,zero
 4021b90:	e0bfff17 	ldw	r2,-4(fp)
 4021b94:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4021b98:	e0bfff17 	ldw	r2,-4(fp)
 4021b9c:	10800104 	addi	r2,r2,4
 4021ba0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4021ba4:	0005303a 	rdctl	r2,status
 4021ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021bac:	e0fffd17 	ldw	r3,-12(fp)
 4021bb0:	00bfff84 	movi	r2,-2
 4021bb4:	1884703a 	and	r2,r3,r2
 4021bb8:	1001703a 	wrctl	status,r2
  
  return context;
 4021bbc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4021bc0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4021bc4:	40202d00 	call	40202d0 <alt_tick>
 4021bc8:	e0bffc17 	ldw	r2,-16(fp)
 4021bcc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021bd0:	e0bffe17 	ldw	r2,-8(fp)
 4021bd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4021bd8:	0001883a 	nop
 4021bdc:	e037883a 	mov	sp,fp
 4021be0:	dfc00117 	ldw	ra,4(sp)
 4021be4:	df000017 	ldw	fp,0(sp)
 4021be8:	dec00204 	addi	sp,sp,8
 4021bec:	f800283a 	ret

04021bf0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4021bf0:	defff804 	addi	sp,sp,-32
 4021bf4:	dfc00715 	stw	ra,28(sp)
 4021bf8:	df000615 	stw	fp,24(sp)
 4021bfc:	df000604 	addi	fp,sp,24
 4021c00:	e13ffc15 	stw	r4,-16(fp)
 4021c04:	e17ffd15 	stw	r5,-12(fp)
 4021c08:	e1bffe15 	stw	r6,-8(fp)
 4021c0c:	e1ffff15 	stw	r7,-4(fp)
 4021c10:	e0bfff17 	ldw	r2,-4(fp)
 4021c14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4021c18:	d0a01f17 	ldw	r2,-32644(gp)
 4021c1c:	1000021e 	bne	r2,zero,4021c28 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4021c20:	e0bffb17 	ldw	r2,-20(fp)
 4021c24:	d0a01f15 	stw	r2,-32644(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4021c28:	e0bffc17 	ldw	r2,-16(fp)
 4021c2c:	10800104 	addi	r2,r2,4
 4021c30:	00c001c4 	movi	r3,7
 4021c34:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4021c38:	d8000015 	stw	zero,0(sp)
 4021c3c:	e1fffc17 	ldw	r7,-16(fp)
 4021c40:	018100b4 	movhi	r6,1026
 4021c44:	3186de04 	addi	r6,r6,7032
 4021c48:	e17ffe17 	ldw	r5,-8(fp)
 4021c4c:	e13ffd17 	ldw	r4,-12(fp)
 4021c50:	401f8400 	call	401f840 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4021c54:	0001883a 	nop
 4021c58:	e037883a 	mov	sp,fp
 4021c5c:	dfc00117 	ldw	ra,4(sp)
 4021c60:	df000017 	ldw	fp,0(sp)
 4021c64:	dec00204 	addi	sp,sp,8
 4021c68:	f800283a 	ret

04021c6c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 4021c6c:	defff904 	addi	sp,sp,-28
 4021c70:	dfc00615 	stw	ra,24(sp)
 4021c74:	df000515 	stw	fp,20(sp)
 4021c78:	df000504 	addi	fp,sp,20
 4021c7c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 4021c80:	00800144 	movi	r2,5
 4021c84:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 4021c88:	d8000215 	stw	zero,8(sp)
 4021c8c:	e0bffe44 	addi	r2,fp,-7
 4021c90:	d8800115 	stw	r2,4(sp)
 4021c94:	00800044 	movi	r2,1
 4021c98:	d8800015 	stw	r2,0(sp)
 4021c9c:	e1fffe04 	addi	r7,fp,-8
 4021ca0:	01800044 	movi	r6,1
 4021ca4:	000b883a 	mov	r5,zero
 4021ca8:	e13fff17 	ldw	r4,-4(fp)
 4021cac:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 4021cb0:	e0bffe43 	ldbu	r2,-7(fp)
}
 4021cb4:	e037883a 	mov	sp,fp
 4021cb8:	dfc00117 	ldw	ra,4(sp)
 4021cbc:	df000017 	ldw	fp,0(sp)
 4021cc0:	dec00204 	addi	sp,sp,8
 4021cc4:	f800283a 	ret

04021cc8 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 4021cc8:	defffd04 	addi	sp,sp,-12
 4021ccc:	dfc00215 	stw	ra,8(sp)
 4021cd0:	df000115 	stw	fp,4(sp)
 4021cd4:	df000104 	addi	fp,sp,4
 4021cd8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 4021cdc:	e13fff17 	ldw	r4,-4(fp)
 4021ce0:	4021c6c0 	call	4021c6c <epcs_read_status_register>
 4021ce4:	10803fcc 	andi	r2,r2,255
 4021ce8:	1080004c 	andi	r2,r2,1
}
 4021cec:	e037883a 	mov	sp,fp
 4021cf0:	dfc00117 	ldw	ra,4(sp)
 4021cf4:	df000017 	ldw	fp,0(sp)
 4021cf8:	dec00204 	addi	sp,sp,8
 4021cfc:	f800283a 	ret

04021d00 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 4021d00:	defffd04 	addi	sp,sp,-12
 4021d04:	dfc00215 	stw	ra,8(sp)
 4021d08:	df000115 	stw	fp,4(sp)
 4021d0c:	df000104 	addi	fp,sp,4
 4021d10:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 4021d14:	0001883a 	nop
 4021d18:	e13fff17 	ldw	r4,-4(fp)
 4021d1c:	4021cc80 	call	4021cc8 <epcs_test_wip>
 4021d20:	103ffd1e 	bne	r2,zero,4021d18 <__reset+0xfb020d18>
  {
  }
}
 4021d24:	0001883a 	nop
 4021d28:	e037883a 	mov	sp,fp
 4021d2c:	dfc00117 	ldw	ra,4(sp)
 4021d30:	df000017 	ldw	fp,0(sp)
 4021d34:	dec00204 	addi	sp,sp,8
 4021d38:	f800283a 	ret

04021d3c <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 4021d3c:	defff604 	addi	sp,sp,-40
 4021d40:	dfc00915 	stw	ra,36(sp)
 4021d44:	df000815 	stw	fp,32(sp)
 4021d48:	df000804 	addi	fp,sp,32
 4021d4c:	e13ffd15 	stw	r4,-12(fp)
 4021d50:	e17ffe15 	stw	r5,-8(fp)
 4021d54:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 4021d58:	e0bfff17 	ldw	r2,-4(fp)
 4021d5c:	10001226 	beq	r2,zero,4021da8 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 4021d60:	00bff604 	movi	r2,-40
 4021d64:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 4021d68:	e0bffe17 	ldw	r2,-8(fp)
 4021d6c:	1004d63a 	srli	r2,r2,24
 4021d70:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 4021d74:	e0bffe17 	ldw	r2,-8(fp)
 4021d78:	1004d43a 	srli	r2,r2,16
 4021d7c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 4021d80:	e0bffe17 	ldw	r2,-8(fp)
 4021d84:	1004d23a 	srli	r2,r2,8
 4021d88:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 4021d8c:	e0bffe17 	ldw	r2,-8(fp)
 4021d90:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 4021d94:	00800144 	movi	r2,5
 4021d98:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 4021d9c:	e13ffd17 	ldw	r4,-12(fp)
 4021da0:	40221f00 	call	40221f0 <epcs_enter_4_bytes_mode>
 4021da4:	00000c06 	br	4021dd8 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 4021da8:	00bff604 	movi	r2,-40
 4021dac:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 4021db0:	e0bffe17 	ldw	r2,-8(fp)
 4021db4:	1004d43a 	srli	r2,r2,16
 4021db8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 4021dbc:	e0bffe17 	ldw	r2,-8(fp)
 4021dc0:	1004d23a 	srli	r2,r2,8
 4021dc4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 4021dc8:	e0bffe17 	ldw	r2,-8(fp)
 4021dcc:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 4021dd0:	00800104 	movi	r2,4
 4021dd4:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 4021dd8:	e13ffd17 	ldw	r4,-12(fp)
 4021ddc:	4021f2c0 	call	4021f2c <epcs_write_enable>

  alt_avalon_spi_command(
 4021de0:	e0bffb03 	ldbu	r2,-20(fp)
 4021de4:	e0fffb44 	addi	r3,fp,-19
 4021de8:	d8000215 	stw	zero,8(sp)
 4021dec:	d8000115 	stw	zero,4(sp)
 4021df0:	d8000015 	stw	zero,0(sp)
 4021df4:	180f883a 	mov	r7,r3
 4021df8:	100d883a 	mov	r6,r2
 4021dfc:	000b883a 	mov	r5,zero
 4021e00:	e13ffd17 	ldw	r4,-12(fp)
 4021e04:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4021e08:	e13ffd17 	ldw	r4,-12(fp)
 4021e0c:	4021d000 	call	4021d00 <epcs_await_wip_released>

  if(four_bytes_mode)
 4021e10:	e0bfff17 	ldw	r2,-4(fp)
 4021e14:	10000226 	beq	r2,zero,4021e20 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 4021e18:	e13ffd17 	ldw	r4,-12(fp)
 4021e1c:	402224c0 	call	402224c <epcs_exit_4_bytes_mode>
  }
}
 4021e20:	0001883a 	nop
 4021e24:	e037883a 	mov	sp,fp
 4021e28:	dfc00117 	ldw	ra,4(sp)
 4021e2c:	df000017 	ldw	fp,0(sp)
 4021e30:	dec00204 	addi	sp,sp,8
 4021e34:	f800283a 	ret

04021e38 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 4021e38:	defff404 	addi	sp,sp,-48
 4021e3c:	dfc00b15 	stw	ra,44(sp)
 4021e40:	df000a15 	stw	fp,40(sp)
 4021e44:	df000a04 	addi	fp,sp,40
 4021e48:	e13ffc15 	stw	r4,-16(fp)
 4021e4c:	e17ffd15 	stw	r5,-12(fp)
 4021e50:	e1bffe15 	stw	r6,-8(fp)
 4021e54:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 4021e58:	008000c4 	movi	r2,3
 4021e5c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4021e60:	e0800217 	ldw	r2,8(fp)
 4021e64:	10001026 	beq	r2,zero,4021ea8 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 4021e68:	e0bffd17 	ldw	r2,-12(fp)
 4021e6c:	1004d63a 	srli	r2,r2,24
 4021e70:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 4021e74:	e0bffd17 	ldw	r2,-12(fp)
 4021e78:	1005d43a 	srai	r2,r2,16
 4021e7c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 4021e80:	e0bffd17 	ldw	r2,-12(fp)
 4021e84:	1005d23a 	srai	r2,r2,8
 4021e88:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 4021e8c:	e0bffd17 	ldw	r2,-12(fp)
 4021e90:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 4021e94:	00800144 	movi	r2,5
 4021e98:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 4021e9c:	e13ffc17 	ldw	r4,-16(fp)
 4021ea0:	40221f00 	call	40221f0 <epcs_enter_4_bytes_mode>
 4021ea4:	00000a06 	br	4021ed0 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 4021ea8:	e0bffd17 	ldw	r2,-12(fp)
 4021eac:	1005d43a 	srai	r2,r2,16
 4021eb0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 4021eb4:	e0bffd17 	ldw	r2,-12(fp)
 4021eb8:	1005d23a 	srai	r2,r2,8
 4021ebc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 4021ec0:	e0bffd17 	ldw	r2,-12(fp)
 4021ec4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 4021ec8:	00800104 	movi	r2,4
 4021ecc:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 4021ed0:	e13ffc17 	ldw	r4,-16(fp)
 4021ed4:	4021d000 	call	4021d00 <epcs_await_wip_released>

  alt_avalon_spi_command(
 4021ed8:	e0bfff17 	ldw	r2,-4(fp)
 4021edc:	e13ffa04 	addi	r4,fp,-24
 4021ee0:	d8000215 	stw	zero,8(sp)
 4021ee4:	e0fffe17 	ldw	r3,-8(fp)
 4021ee8:	d8c00115 	stw	r3,4(sp)
 4021eec:	d8800015 	stw	r2,0(sp)
 4021ef0:	200f883a 	mov	r7,r4
 4021ef4:	e1bff917 	ldw	r6,-28(fp)
 4021ef8:	000b883a 	mov	r5,zero
 4021efc:	e13ffc17 	ldw	r4,-16(fp)
 4021f00:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 4021f04:	e0800217 	ldw	r2,8(fp)
 4021f08:	10000226 	beq	r2,zero,4021f14 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 4021f0c:	e13ffc17 	ldw	r4,-16(fp)
 4021f10:	402224c0 	call	402224c <epcs_exit_4_bytes_mode>
  }

  return length;
 4021f14:	e0bfff17 	ldw	r2,-4(fp)
}
 4021f18:	e037883a 	mov	sp,fp
 4021f1c:	dfc00117 	ldw	ra,4(sp)
 4021f20:	df000017 	ldw	fp,0(sp)
 4021f24:	dec00204 	addi	sp,sp,8
 4021f28:	f800283a 	ret

04021f2c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 4021f2c:	defff904 	addi	sp,sp,-28
 4021f30:	dfc00615 	stw	ra,24(sp)
 4021f34:	df000515 	stw	fp,20(sp)
 4021f38:	df000504 	addi	fp,sp,20
 4021f3c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 4021f40:	00800184 	movi	r2,6
 4021f44:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 4021f48:	d8000215 	stw	zero,8(sp)
 4021f4c:	d8000115 	stw	zero,4(sp)
 4021f50:	d8000015 	stw	zero,0(sp)
 4021f54:	e1fffe04 	addi	r7,fp,-8
 4021f58:	01800044 	movi	r6,1
 4021f5c:	000b883a 	mov	r5,zero
 4021f60:	e13fff17 	ldw	r4,-4(fp)
 4021f64:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 4021f68:	0001883a 	nop
 4021f6c:	e037883a 	mov	sp,fp
 4021f70:	dfc00117 	ldw	ra,4(sp)
 4021f74:	df000017 	ldw	fp,0(sp)
 4021f78:	dec00204 	addi	sp,sp,8
 4021f7c:	f800283a 	ret

04021f80 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 4021f80:	defff804 	addi	sp,sp,-32
 4021f84:	dfc00715 	stw	ra,28(sp)
 4021f88:	df000615 	stw	fp,24(sp)
 4021f8c:	df000604 	addi	fp,sp,24
 4021f90:	e13ffe15 	stw	r4,-8(fp)
 4021f94:	2805883a 	mov	r2,r5
 4021f98:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 4021f9c:	00800044 	movi	r2,1
 4021fa0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 4021fa4:	e0bfff03 	ldbu	r2,-4(fp)
 4021fa8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 4021fac:	d8000215 	stw	zero,8(sp)
 4021fb0:	d8000115 	stw	zero,4(sp)
 4021fb4:	d8000015 	stw	zero,0(sp)
 4021fb8:	e1fffd04 	addi	r7,fp,-12
 4021fbc:	01800084 	movi	r6,2
 4021fc0:	000b883a 	mov	r5,zero
 4021fc4:	e13ffe17 	ldw	r4,-8(fp)
 4021fc8:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 4021fcc:	e13ffe17 	ldw	r4,-8(fp)
 4021fd0:	4021d000 	call	4021d00 <epcs_await_wip_released>
}
 4021fd4:	0001883a 	nop
 4021fd8:	e037883a 	mov	sp,fp
 4021fdc:	dfc00117 	ldw	ra,4(sp)
 4021fe0:	df000017 	ldw	fp,0(sp)
 4021fe4:	dec00204 	addi	sp,sp,8
 4021fe8:	f800283a 	ret

04021fec <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 4021fec:	defff404 	addi	sp,sp,-48
 4021ff0:	dfc00b15 	stw	ra,44(sp)
 4021ff4:	df000a15 	stw	fp,40(sp)
 4021ff8:	df000a04 	addi	fp,sp,40
 4021ffc:	e13ffc15 	stw	r4,-16(fp)
 4022000:	e17ffd15 	stw	r5,-12(fp)
 4022004:	e1bffe15 	stw	r6,-8(fp)
 4022008:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 402200c:	00800084 	movi	r2,2
 4022010:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 4022014:	e0800217 	ldw	r2,8(fp)
 4022018:	10001026 	beq	r2,zero,402205c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 402201c:	e0bffd17 	ldw	r2,-12(fp)
 4022020:	1004d63a 	srli	r2,r2,24
 4022024:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 4022028:	e0bffd17 	ldw	r2,-12(fp)
 402202c:	1005d43a 	srai	r2,r2,16
 4022030:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 4022034:	e0bffd17 	ldw	r2,-12(fp)
 4022038:	1005d23a 	srai	r2,r2,8
 402203c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 4022040:	e0bffd17 	ldw	r2,-12(fp)
 4022044:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 4022048:	00800144 	movi	r2,5
 402204c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 4022050:	e13ffc17 	ldw	r4,-16(fp)
 4022054:	40221f00 	call	40221f0 <epcs_enter_4_bytes_mode>
 4022058:	00000a06 	br	4022084 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 402205c:	e0bffd17 	ldw	r2,-12(fp)
 4022060:	1005d43a 	srai	r2,r2,16
 4022064:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 4022068:	e0bffd17 	ldw	r2,-12(fp)
 402206c:	1005d23a 	srai	r2,r2,8
 4022070:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 4022074:	e0bffd17 	ldw	r2,-12(fp)
 4022078:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 402207c:	00800104 	movi	r2,4
 4022080:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 4022084:	e13ffc17 	ldw	r4,-16(fp)
 4022088:	4021f2c0 	call	4021f2c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 402208c:	e0fffa04 	addi	r3,fp,-24
 4022090:	00800044 	movi	r2,1
 4022094:	d8800215 	stw	r2,8(sp)
 4022098:	d8000115 	stw	zero,4(sp)
 402209c:	d8000015 	stw	zero,0(sp)
 40220a0:	180f883a 	mov	r7,r3
 40220a4:	e1bff917 	ldw	r6,-28(fp)
 40220a8:	000b883a 	mov	r5,zero
 40220ac:	e13ffc17 	ldw	r4,-16(fp)
 40220b0:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 40220b4:	e0bfff17 	ldw	r2,-4(fp)
 40220b8:	d8000215 	stw	zero,8(sp)
 40220bc:	d8000115 	stw	zero,4(sp)
 40220c0:	d8000015 	stw	zero,0(sp)
 40220c4:	e1fffe17 	ldw	r7,-8(fp)
 40220c8:	100d883a 	mov	r6,r2
 40220cc:	000b883a 	mov	r5,zero
 40220d0:	e13ffc17 	ldw	r4,-16(fp)
 40220d4:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 40220d8:	e13ffc17 	ldw	r4,-16(fp)
 40220dc:	4021d000 	call	4021d00 <epcs_await_wip_released>

  if(four_bytes_mode)
 40220e0:	e0800217 	ldw	r2,8(fp)
 40220e4:	10000226 	beq	r2,zero,40220f0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 40220e8:	e13ffc17 	ldw	r4,-16(fp)
 40220ec:	402224c0 	call	402224c <epcs_exit_4_bytes_mode>
  }

  return length;
 40220f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40220f4:	e037883a 	mov	sp,fp
 40220f8:	dfc00117 	ldw	ra,4(sp)
 40220fc:	df000017 	ldw	fp,0(sp)
 4022100:	dec00204 	addi	sp,sp,8
 4022104:	f800283a 	ret

04022108 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 4022108:	defff804 	addi	sp,sp,-32
 402210c:	dfc00715 	stw	ra,28(sp)
 4022110:	df000615 	stw	fp,24(sp)
 4022114:	df000604 	addi	fp,sp,24
 4022118:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 402211c:	00bfeac4 	movi	r2,-85
 4022120:	e0bffd05 	stb	r2,-12(fp)
 4022124:	e03ffd45 	stb	zero,-11(fp)
 4022128:	e03ffd85 	stb	zero,-10(fp)
 402212c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 4022130:	d8000215 	stw	zero,8(sp)
 4022134:	e0bffe04 	addi	r2,fp,-8
 4022138:	d8800115 	stw	r2,4(sp)
 402213c:	00800044 	movi	r2,1
 4022140:	d8800015 	stw	r2,0(sp)
 4022144:	e1fffd04 	addi	r7,fp,-12
 4022148:	01800104 	movi	r6,4
 402214c:	000b883a 	mov	r5,zero
 4022150:	e13fff17 	ldw	r4,-4(fp)
 4022154:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 4022158:	e0bffe03 	ldbu	r2,-8(fp)
}
 402215c:	e037883a 	mov	sp,fp
 4022160:	dfc00117 	ldw	ra,4(sp)
 4022164:	df000017 	ldw	fp,0(sp)
 4022168:	dec00204 	addi	sp,sp,8
 402216c:	f800283a 	ret

04022170 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 4022170:	defff904 	addi	sp,sp,-28
 4022174:	dfc00615 	stw	ra,24(sp)
 4022178:	df000515 	stw	fp,20(sp)
 402217c:	df000504 	addi	fp,sp,20
 4022180:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 4022184:	00bfe7c4 	movi	r2,-97
 4022188:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 402218c:	d8000215 	stw	zero,8(sp)
 4022190:	e0bffe44 	addi	r2,fp,-7
 4022194:	d8800115 	stw	r2,4(sp)
 4022198:	008000c4 	movi	r2,3
 402219c:	d8800015 	stw	r2,0(sp)
 40221a0:	e1fffe04 	addi	r7,fp,-8
 40221a4:	01800044 	movi	r6,1
 40221a8:	000b883a 	mov	r5,zero
 40221ac:	e13fff17 	ldw	r4,-4(fp)
 40221b0:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 40221b4:	e0bffe43 	ldbu	r2,-7(fp)
 40221b8:	10803fcc 	andi	r2,r2,255
 40221bc:	1006943a 	slli	r3,r2,16
 40221c0:	e0bffe83 	ldbu	r2,-6(fp)
 40221c4:	10803fcc 	andi	r2,r2,255
 40221c8:	1004923a 	slli	r2,r2,8
 40221cc:	1886b03a 	or	r3,r3,r2
 40221d0:	e0bffec3 	ldbu	r2,-5(fp)
 40221d4:	10803fcc 	andi	r2,r2,255
 40221d8:	1884b03a 	or	r2,r3,r2
}
 40221dc:	e037883a 	mov	sp,fp
 40221e0:	dfc00117 	ldw	ra,4(sp)
 40221e4:	df000017 	ldw	fp,0(sp)
 40221e8:	dec00204 	addi	sp,sp,8
 40221ec:	f800283a 	ret

040221f0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 40221f0:	defff904 	addi	sp,sp,-28
 40221f4:	dfc00615 	stw	ra,24(sp)
 40221f8:	df000515 	stw	fp,20(sp)
 40221fc:	df000504 	addi	fp,sp,20
 4022200:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 4022204:	00bfedc4 	movi	r2,-73
 4022208:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 402220c:	e13fff17 	ldw	r4,-4(fp)
 4022210:	4021f2c0 	call	4021f2c <epcs_write_enable>

  alt_avalon_spi_command(
 4022214:	d8000215 	stw	zero,8(sp)
 4022218:	d8000115 	stw	zero,4(sp)
 402221c:	d8000015 	stw	zero,0(sp)
 4022220:	e1fffe04 	addi	r7,fp,-8
 4022224:	01800044 	movi	r6,1
 4022228:	000b883a 	mov	r5,zero
 402222c:	e13fff17 	ldw	r4,-4(fp)
 4022230:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 4022234:	0001883a 	nop
}
 4022238:	e037883a 	mov	sp,fp
 402223c:	dfc00117 	ldw	ra,4(sp)
 4022240:	df000017 	ldw	fp,0(sp)
 4022244:	dec00204 	addi	sp,sp,8
 4022248:	f800283a 	ret

0402224c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 402224c:	defff904 	addi	sp,sp,-28
 4022250:	dfc00615 	stw	ra,24(sp)
 4022254:	df000515 	stw	fp,20(sp)
 4022258:	df000504 	addi	fp,sp,20
 402225c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 4022260:	00bffa44 	movi	r2,-23
 4022264:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 4022268:	e13fff17 	ldw	r4,-4(fp)
 402226c:	4021f2c0 	call	4021f2c <epcs_write_enable>

  alt_avalon_spi_command(
 4022270:	d8000215 	stw	zero,8(sp)
 4022274:	d8000115 	stw	zero,4(sp)
 4022278:	d8000015 	stw	zero,0(sp)
 402227c:	e1fffe04 	addi	r7,fp,-8
 4022280:	01800044 	movi	r6,1
 4022284:	000b883a 	mov	r5,zero
 4022288:	e13fff17 	ldw	r4,-4(fp)
 402228c:	4022bc40 	call	4022bc4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 4022290:	0001883a 	nop
}
 4022294:	e037883a 	mov	sp,fp
 4022298:	dfc00117 	ldw	ra,4(sp)
 402229c:	df000017 	ldw	fp,0(sp)
 40222a0:	dec00204 	addi	sp,sp,8
 40222a4:	f800283a 	ret

040222a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40222a8:	defff504 	addi	sp,sp,-44
 40222ac:	df000a15 	stw	fp,40(sp)
 40222b0:	df000a04 	addi	fp,sp,40
 40222b4:	e13ffc15 	stw	r4,-16(fp)
 40222b8:	e17ffd15 	stw	r5,-12(fp)
 40222bc:	e1bffe15 	stw	r6,-8(fp)
 40222c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40222c4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40222c8:	d0a01f17 	ldw	r2,-32644(gp)
  
  if (alt_ticks_per_second ())
 40222cc:	10003c26 	beq	r2,zero,40223c0 <alt_alarm_start+0x118>
  {
    if (alarm)
 40222d0:	e0bffc17 	ldw	r2,-16(fp)
 40222d4:	10003826 	beq	r2,zero,40223b8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40222d8:	e0bffc17 	ldw	r2,-16(fp)
 40222dc:	e0fffe17 	ldw	r3,-8(fp)
 40222e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40222e4:	e0bffc17 	ldw	r2,-16(fp)
 40222e8:	e0ffff17 	ldw	r3,-4(fp)
 40222ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40222f0:	0005303a 	rdctl	r2,status
 40222f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40222f8:	e0fff917 	ldw	r3,-28(fp)
 40222fc:	00bfff84 	movi	r2,-2
 4022300:	1884703a 	and	r2,r3,r2
 4022304:	1001703a 	wrctl	status,r2
  
  return context;
 4022308:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402230c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4022310:	d0a02017 	ldw	r2,-32640(gp)
      
      current_nticks = alt_nticks();
 4022314:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4022318:	e0fffd17 	ldw	r3,-12(fp)
 402231c:	e0bff617 	ldw	r2,-40(fp)
 4022320:	1885883a 	add	r2,r3,r2
 4022324:	10c00044 	addi	r3,r2,1
 4022328:	e0bffc17 	ldw	r2,-16(fp)
 402232c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4022330:	e0bffc17 	ldw	r2,-16(fp)
 4022334:	10c00217 	ldw	r3,8(r2)
 4022338:	e0bff617 	ldw	r2,-40(fp)
 402233c:	1880042e 	bgeu	r3,r2,4022350 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4022340:	e0bffc17 	ldw	r2,-16(fp)
 4022344:	00c00044 	movi	r3,1
 4022348:	10c00405 	stb	r3,16(r2)
 402234c:	00000206 	br	4022358 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4022350:	e0bffc17 	ldw	r2,-16(fp)
 4022354:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4022358:	e0bffc17 	ldw	r2,-16(fp)
 402235c:	d0e01004 	addi	r3,gp,-32704
 4022360:	e0fffa15 	stw	r3,-24(fp)
 4022364:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4022368:	e0bffb17 	ldw	r2,-20(fp)
 402236c:	e0fffa17 	ldw	r3,-24(fp)
 4022370:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4022374:	e0bffa17 	ldw	r2,-24(fp)
 4022378:	10c00017 	ldw	r3,0(r2)
 402237c:	e0bffb17 	ldw	r2,-20(fp)
 4022380:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4022384:	e0bffa17 	ldw	r2,-24(fp)
 4022388:	10800017 	ldw	r2,0(r2)
 402238c:	e0fffb17 	ldw	r3,-20(fp)
 4022390:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4022394:	e0bffa17 	ldw	r2,-24(fp)
 4022398:	e0fffb17 	ldw	r3,-20(fp)
 402239c:	10c00015 	stw	r3,0(r2)
 40223a0:	e0bff817 	ldw	r2,-32(fp)
 40223a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40223a8:	e0bff717 	ldw	r2,-36(fp)
 40223ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40223b0:	0005883a 	mov	r2,zero
 40223b4:	00000306 	br	40223c4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40223b8:	00bffa84 	movi	r2,-22
 40223bc:	00000106 	br	40223c4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40223c0:	00bfde84 	movi	r2,-134
  }
}
 40223c4:	e037883a 	mov	sp,fp
 40223c8:	df000017 	ldw	fp,0(sp)
 40223cc:	dec00104 	addi	sp,sp,4
 40223d0:	f800283a 	ret

040223d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40223d4:	defffa04 	addi	sp,sp,-24
 40223d8:	dfc00515 	stw	ra,20(sp)
 40223dc:	df000415 	stw	fp,16(sp)
 40223e0:	df000404 	addi	fp,sp,16
 40223e4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 40223e8:	008000c4 	movi	r2,3
 40223ec:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40223f0:	e0fffd17 	ldw	r3,-12(fp)
 40223f4:	008003f4 	movhi	r2,15
 40223f8:	10909004 	addi	r2,r2,16960
 40223fc:	1885383a 	mul	r2,r3,r2
 4022400:	100b883a 	mov	r5,r2
 4022404:	0101c9f4 	movhi	r4,1831
 4022408:	21038004 	addi	r4,r4,3584
 402240c:	400dcac0 	call	400dcac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4022410:	100b883a 	mov	r5,r2
 4022414:	01200034 	movhi	r4,32768
 4022418:	213fffc4 	addi	r4,r4,-1
 402241c:	400dcac0 	call	400dcac <__udivsi3>
 4022420:	100b883a 	mov	r5,r2
 4022424:	e13fff17 	ldw	r4,-4(fp)
 4022428:	400dcac0 	call	400dcac <__udivsi3>
 402242c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4022430:	e0bffe17 	ldw	r2,-8(fp)
 4022434:	10002a26 	beq	r2,zero,40224e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4022438:	e03ffc15 	stw	zero,-16(fp)
 402243c:	00001706 	br	402249c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4022440:	00a00034 	movhi	r2,32768
 4022444:	10bfffc4 	addi	r2,r2,-1
 4022448:	10bfffc4 	addi	r2,r2,-1
 402244c:	103ffe1e 	bne	r2,zero,4022448 <__reset+0xfb021448>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4022450:	e0fffd17 	ldw	r3,-12(fp)
 4022454:	008003f4 	movhi	r2,15
 4022458:	10909004 	addi	r2,r2,16960
 402245c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4022460:	100b883a 	mov	r5,r2
 4022464:	0101c9f4 	movhi	r4,1831
 4022468:	21038004 	addi	r4,r4,3584
 402246c:	400dcac0 	call	400dcac <__udivsi3>
 4022470:	100b883a 	mov	r5,r2
 4022474:	01200034 	movhi	r4,32768
 4022478:	213fffc4 	addi	r4,r4,-1
 402247c:	400dcac0 	call	400dcac <__udivsi3>
 4022480:	1007883a 	mov	r3,r2
 4022484:	e0bfff17 	ldw	r2,-4(fp)
 4022488:	10c5c83a 	sub	r2,r2,r3
 402248c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4022490:	e0bffc17 	ldw	r2,-16(fp)
 4022494:	10800044 	addi	r2,r2,1
 4022498:	e0bffc15 	stw	r2,-16(fp)
 402249c:	e0fffc17 	ldw	r3,-16(fp)
 40224a0:	e0bffe17 	ldw	r2,-8(fp)
 40224a4:	18bfe616 	blt	r3,r2,4022440 <__reset+0xfb021440>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40224a8:	e0fffd17 	ldw	r3,-12(fp)
 40224ac:	008003f4 	movhi	r2,15
 40224b0:	10909004 	addi	r2,r2,16960
 40224b4:	1885383a 	mul	r2,r3,r2
 40224b8:	100b883a 	mov	r5,r2
 40224bc:	0101c9f4 	movhi	r4,1831
 40224c0:	21038004 	addi	r4,r4,3584
 40224c4:	400dcac0 	call	400dcac <__udivsi3>
 40224c8:	1007883a 	mov	r3,r2
 40224cc:	e0bfff17 	ldw	r2,-4(fp)
 40224d0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40224d4:	10bfffc4 	addi	r2,r2,-1
 40224d8:	103ffe1e 	bne	r2,zero,40224d4 <__reset+0xfb0214d4>
 40224dc:	00000d06 	br	4022514 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40224e0:	e0fffd17 	ldw	r3,-12(fp)
 40224e4:	008003f4 	movhi	r2,15
 40224e8:	10909004 	addi	r2,r2,16960
 40224ec:	1885383a 	mul	r2,r3,r2
 40224f0:	100b883a 	mov	r5,r2
 40224f4:	0101c9f4 	movhi	r4,1831
 40224f8:	21038004 	addi	r4,r4,3584
 40224fc:	400dcac0 	call	400dcac <__udivsi3>
 4022500:	1007883a 	mov	r3,r2
 4022504:	e0bfff17 	ldw	r2,-4(fp)
 4022508:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402250c:	10bfffc4 	addi	r2,r2,-1
 4022510:	00bffe16 	blt	zero,r2,402250c <__reset+0xfb02150c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4022514:	0005883a 	mov	r2,zero
}
 4022518:	e037883a 	mov	sp,fp
 402251c:	dfc00117 	ldw	ra,4(sp)
 4022520:	df000017 	ldw	fp,0(sp)
 4022524:	dec00204 	addi	sp,sp,8
 4022528:	f800283a 	ret

0402252c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402252c:	defffe04 	addi	sp,sp,-8
 4022530:	dfc00115 	stw	ra,4(sp)
 4022534:	df000015 	stw	fp,0(sp)
 4022538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402253c:	d0a00d17 	ldw	r2,-32716(gp)
 4022540:	10000326 	beq	r2,zero,4022550 <alt_get_errno+0x24>
 4022544:	d0a00d17 	ldw	r2,-32716(gp)
 4022548:	103ee83a 	callr	r2
 402254c:	00000106 	br	4022554 <alt_get_errno+0x28>
 4022550:	d0a01704 	addi	r2,gp,-32676
}
 4022554:	e037883a 	mov	sp,fp
 4022558:	dfc00117 	ldw	ra,4(sp)
 402255c:	df000017 	ldw	fp,0(sp)
 4022560:	dec00204 	addi	sp,sp,8
 4022564:	f800283a 	ret

04022568 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4022568:	defffa04 	addi	sp,sp,-24
 402256c:	dfc00515 	stw	ra,20(sp)
 4022570:	df000415 	stw	fp,16(sp)
 4022574:	df000404 	addi	fp,sp,16
 4022578:	e13ffe15 	stw	r4,-8(fp)
 402257c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4022580:	e0bffe17 	ldw	r2,-8(fp)
 4022584:	10000326 	beq	r2,zero,4022594 <alt_dev_llist_insert+0x2c>
 4022588:	e0bffe17 	ldw	r2,-8(fp)
 402258c:	10800217 	ldw	r2,8(r2)
 4022590:	1000061e 	bne	r2,zero,40225ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4022594:	402252c0 	call	402252c <alt_get_errno>
 4022598:	1007883a 	mov	r3,r2
 402259c:	00800584 	movi	r2,22
 40225a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40225a4:	00bffa84 	movi	r2,-22
 40225a8:	00001306 	br	40225f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40225ac:	e0bffe17 	ldw	r2,-8(fp)
 40225b0:	e0ffff17 	ldw	r3,-4(fp)
 40225b4:	e0fffc15 	stw	r3,-16(fp)
 40225b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40225bc:	e0bffd17 	ldw	r2,-12(fp)
 40225c0:	e0fffc17 	ldw	r3,-16(fp)
 40225c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40225c8:	e0bffc17 	ldw	r2,-16(fp)
 40225cc:	10c00017 	ldw	r3,0(r2)
 40225d0:	e0bffd17 	ldw	r2,-12(fp)
 40225d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40225d8:	e0bffc17 	ldw	r2,-16(fp)
 40225dc:	10800017 	ldw	r2,0(r2)
 40225e0:	e0fffd17 	ldw	r3,-12(fp)
 40225e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40225e8:	e0bffc17 	ldw	r2,-16(fp)
 40225ec:	e0fffd17 	ldw	r3,-12(fp)
 40225f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 40225f4:	0005883a 	mov	r2,zero
}
 40225f8:	e037883a 	mov	sp,fp
 40225fc:	dfc00117 	ldw	ra,4(sp)
 4022600:	df000017 	ldw	fp,0(sp)
 4022604:	dec00204 	addi	sp,sp,8
 4022608:	f800283a 	ret

0402260c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402260c:	defffd04 	addi	sp,sp,-12
 4022610:	dfc00215 	stw	ra,8(sp)
 4022614:	df000115 	stw	fp,4(sp)
 4022618:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402261c:	008100b4 	movhi	r2,1026
 4022620:	108c5404 	addi	r2,r2,12624
 4022624:	e0bfff15 	stw	r2,-4(fp)
 4022628:	00000606 	br	4022644 <_do_ctors+0x38>
        (*ctor) (); 
 402262c:	e0bfff17 	ldw	r2,-4(fp)
 4022630:	10800017 	ldw	r2,0(r2)
 4022634:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4022638:	e0bfff17 	ldw	r2,-4(fp)
 402263c:	10bfff04 	addi	r2,r2,-4
 4022640:	e0bfff15 	stw	r2,-4(fp)
 4022644:	e0ffff17 	ldw	r3,-4(fp)
 4022648:	008100b4 	movhi	r2,1026
 402264c:	108c5504 	addi	r2,r2,12628
 4022650:	18bff62e 	bgeu	r3,r2,402262c <__reset+0xfb02162c>
        (*ctor) (); 
}
 4022654:	0001883a 	nop
 4022658:	e037883a 	mov	sp,fp
 402265c:	dfc00117 	ldw	ra,4(sp)
 4022660:	df000017 	ldw	fp,0(sp)
 4022664:	dec00204 	addi	sp,sp,8
 4022668:	f800283a 	ret

0402266c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 402266c:	defffd04 	addi	sp,sp,-12
 4022670:	dfc00215 	stw	ra,8(sp)
 4022674:	df000115 	stw	fp,4(sp)
 4022678:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402267c:	008100b4 	movhi	r2,1026
 4022680:	108c5404 	addi	r2,r2,12624
 4022684:	e0bfff15 	stw	r2,-4(fp)
 4022688:	00000606 	br	40226a4 <_do_dtors+0x38>
        (*dtor) (); 
 402268c:	e0bfff17 	ldw	r2,-4(fp)
 4022690:	10800017 	ldw	r2,0(r2)
 4022694:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4022698:	e0bfff17 	ldw	r2,-4(fp)
 402269c:	10bfff04 	addi	r2,r2,-4
 40226a0:	e0bfff15 	stw	r2,-4(fp)
 40226a4:	e0ffff17 	ldw	r3,-4(fp)
 40226a8:	008100b4 	movhi	r2,1026
 40226ac:	108c5504 	addi	r2,r2,12628
 40226b0:	18bff62e 	bgeu	r3,r2,402268c <__reset+0xfb02168c>
        (*dtor) (); 
}
 40226b4:	0001883a 	nop
 40226b8:	e037883a 	mov	sp,fp
 40226bc:	dfc00117 	ldw	ra,4(sp)
 40226c0:	df000017 	ldw	fp,0(sp)
 40226c4:	dec00204 	addi	sp,sp,8
 40226c8:	f800283a 	ret

040226cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40226cc:	defffa04 	addi	sp,sp,-24
 40226d0:	dfc00515 	stw	ra,20(sp)
 40226d4:	df000415 	stw	fp,16(sp)
 40226d8:	df000404 	addi	fp,sp,16
 40226dc:	e13ffe15 	stw	r4,-8(fp)
 40226e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40226e4:	e0bfff17 	ldw	r2,-4(fp)
 40226e8:	10800017 	ldw	r2,0(r2)
 40226ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40226f0:	e13ffe17 	ldw	r4,-8(fp)
 40226f4:	401296c0 	call	401296c <strlen>
 40226f8:	10800044 	addi	r2,r2,1
 40226fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4022700:	00000d06 	br	4022738 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4022704:	e0bffc17 	ldw	r2,-16(fp)
 4022708:	10800217 	ldw	r2,8(r2)
 402270c:	e0fffd17 	ldw	r3,-12(fp)
 4022710:	180d883a 	mov	r6,r3
 4022714:	e17ffe17 	ldw	r5,-8(fp)
 4022718:	1009883a 	mov	r4,r2
 402271c:	4022e0c0 	call	4022e0c <memcmp>
 4022720:	1000021e 	bne	r2,zero,402272c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4022724:	e0bffc17 	ldw	r2,-16(fp)
 4022728:	00000706 	br	4022748 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 402272c:	e0bffc17 	ldw	r2,-16(fp)
 4022730:	10800017 	ldw	r2,0(r2)
 4022734:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4022738:	e0fffc17 	ldw	r3,-16(fp)
 402273c:	e0bfff17 	ldw	r2,-4(fp)
 4022740:	18bff01e 	bne	r3,r2,4022704 <__reset+0xfb021704>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4022744:	0005883a 	mov	r2,zero
}
 4022748:	e037883a 	mov	sp,fp
 402274c:	dfc00117 	ldw	ra,4(sp)
 4022750:	df000017 	ldw	fp,0(sp)
 4022754:	dec00204 	addi	sp,sp,8
 4022758:	f800283a 	ret

0402275c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402275c:	defffb04 	addi	sp,sp,-20
 4022760:	dfc00415 	stw	ra,16(sp)
 4022764:	df000315 	stw	fp,12(sp)
 4022768:	df000304 	addi	fp,sp,12
 402276c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4022770:	d0a00817 	ldw	r2,-32736(gp)
 4022774:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4022778:	00003106 	br	4022840 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402277c:	e0bffd17 	ldw	r2,-12(fp)
 4022780:	10800217 	ldw	r2,8(r2)
 4022784:	1009883a 	mov	r4,r2
 4022788:	401296c0 	call	401296c <strlen>
 402278c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4022790:	e0bffd17 	ldw	r2,-12(fp)
 4022794:	10c00217 	ldw	r3,8(r2)
 4022798:	e0bffe17 	ldw	r2,-8(fp)
 402279c:	10bfffc4 	addi	r2,r2,-1
 40227a0:	1885883a 	add	r2,r3,r2
 40227a4:	10800003 	ldbu	r2,0(r2)
 40227a8:	10803fcc 	andi	r2,r2,255
 40227ac:	1080201c 	xori	r2,r2,128
 40227b0:	10bfe004 	addi	r2,r2,-128
 40227b4:	10800bd8 	cmpnei	r2,r2,47
 40227b8:	1000031e 	bne	r2,zero,40227c8 <alt_find_file+0x6c>
    {
      len -= 1;
 40227bc:	e0bffe17 	ldw	r2,-8(fp)
 40227c0:	10bfffc4 	addi	r2,r2,-1
 40227c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40227c8:	e0bffe17 	ldw	r2,-8(fp)
 40227cc:	e0ffff17 	ldw	r3,-4(fp)
 40227d0:	1885883a 	add	r2,r3,r2
 40227d4:	10800003 	ldbu	r2,0(r2)
 40227d8:	10803fcc 	andi	r2,r2,255
 40227dc:	1080201c 	xori	r2,r2,128
 40227e0:	10bfe004 	addi	r2,r2,-128
 40227e4:	10800be0 	cmpeqi	r2,r2,47
 40227e8:	1000081e 	bne	r2,zero,402280c <alt_find_file+0xb0>
 40227ec:	e0bffe17 	ldw	r2,-8(fp)
 40227f0:	e0ffff17 	ldw	r3,-4(fp)
 40227f4:	1885883a 	add	r2,r3,r2
 40227f8:	10800003 	ldbu	r2,0(r2)
 40227fc:	10803fcc 	andi	r2,r2,255
 4022800:	1080201c 	xori	r2,r2,128
 4022804:	10bfe004 	addi	r2,r2,-128
 4022808:	10000a1e 	bne	r2,zero,4022834 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402280c:	e0bffd17 	ldw	r2,-12(fp)
 4022810:	10800217 	ldw	r2,8(r2)
 4022814:	e0fffe17 	ldw	r3,-8(fp)
 4022818:	180d883a 	mov	r6,r3
 402281c:	e17fff17 	ldw	r5,-4(fp)
 4022820:	1009883a 	mov	r4,r2
 4022824:	4022e0c0 	call	4022e0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4022828:	1000021e 	bne	r2,zero,4022834 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402282c:	e0bffd17 	ldw	r2,-12(fp)
 4022830:	00000706 	br	4022850 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4022834:	e0bffd17 	ldw	r2,-12(fp)
 4022838:	10800017 	ldw	r2,0(r2)
 402283c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4022840:	e0fffd17 	ldw	r3,-12(fp)
 4022844:	d0a00804 	addi	r2,gp,-32736
 4022848:	18bfcc1e 	bne	r3,r2,402277c <__reset+0xfb02177c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402284c:	0005883a 	mov	r2,zero
}
 4022850:	e037883a 	mov	sp,fp
 4022854:	dfc00117 	ldw	ra,4(sp)
 4022858:	df000017 	ldw	fp,0(sp)
 402285c:	dec00204 	addi	sp,sp,8
 4022860:	f800283a 	ret

04022864 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4022864:	defffc04 	addi	sp,sp,-16
 4022868:	dfc00315 	stw	ra,12(sp)
 402286c:	df000215 	stw	fp,8(sp)
 4022870:	df000204 	addi	fp,sp,8
 4022874:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4022878:	d1601204 	addi	r5,gp,-32696
 402287c:	e13fff17 	ldw	r4,-4(fp)
 4022880:	40226cc0 	call	40226cc <alt_find_dev>
 4022884:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 4022888:	e0bffe17 	ldw	r2,-8(fp)
 402288c:	10000926 	beq	r2,zero,40228b4 <alt_flash_open_dev+0x50>
 4022890:	e0bffe17 	ldw	r2,-8(fp)
 4022894:	10800317 	ldw	r2,12(r2)
 4022898:	10000626 	beq	r2,zero,40228b4 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 402289c:	e0bffe17 	ldw	r2,-8(fp)
 40228a0:	10800317 	ldw	r2,12(r2)
 40228a4:	e17fff17 	ldw	r5,-4(fp)
 40228a8:	e13ffe17 	ldw	r4,-8(fp)
 40228ac:	103ee83a 	callr	r2
 40228b0:	00000106 	br	40228b8 <alt_flash_open_dev+0x54>
  }

  return dev;
 40228b4:	e0bffe17 	ldw	r2,-8(fp)
}
 40228b8:	e037883a 	mov	sp,fp
 40228bc:	dfc00117 	ldw	ra,4(sp)
 40228c0:	df000017 	ldw	fp,0(sp)
 40228c4:	dec00204 	addi	sp,sp,8
 40228c8:	f800283a 	ret

040228cc <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 40228cc:	defffd04 	addi	sp,sp,-12
 40228d0:	dfc00215 	stw	ra,8(sp)
 40228d4:	df000115 	stw	fp,4(sp)
 40228d8:	df000104 	addi	fp,sp,4
 40228dc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 40228e0:	e0bfff17 	ldw	r2,-4(fp)
 40228e4:	10000826 	beq	r2,zero,4022908 <alt_flash_close_dev+0x3c>
 40228e8:	e0bfff17 	ldw	r2,-4(fp)
 40228ec:	10800417 	ldw	r2,16(r2)
 40228f0:	10000526 	beq	r2,zero,4022908 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 40228f4:	e0bfff17 	ldw	r2,-4(fp)
 40228f8:	10800417 	ldw	r2,16(r2)
 40228fc:	e13fff17 	ldw	r4,-4(fp)
 4022900:	103ee83a 	callr	r2
  }
  return;
 4022904:	0001883a 	nop
 4022908:	0001883a 	nop
}
 402290c:	e037883a 	mov	sp,fp
 4022910:	dfc00117 	ldw	ra,4(sp)
 4022914:	df000017 	ldw	fp,0(sp)
 4022918:	dec00204 	addi	sp,sp,8
 402291c:	f800283a 	ret

04022920 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4022920:	defffc04 	addi	sp,sp,-16
 4022924:	df000315 	stw	fp,12(sp)
 4022928:	df000304 	addi	fp,sp,12
 402292c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4022930:	00bffa04 	movi	r2,-24
 4022934:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4022938:	e03ffd15 	stw	zero,-12(fp)
 402293c:	00001906 	br	40229a4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4022940:	00810474 	movhi	r2,1041
 4022944:	1095aa04 	addi	r2,r2,22184
 4022948:	e0fffd17 	ldw	r3,-12(fp)
 402294c:	18c00324 	muli	r3,r3,12
 4022950:	10c5883a 	add	r2,r2,r3
 4022954:	10800017 	ldw	r2,0(r2)
 4022958:	10000f1e 	bne	r2,zero,4022998 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 402295c:	00810474 	movhi	r2,1041
 4022960:	1095aa04 	addi	r2,r2,22184
 4022964:	e0fffd17 	ldw	r3,-12(fp)
 4022968:	18c00324 	muli	r3,r3,12
 402296c:	10c5883a 	add	r2,r2,r3
 4022970:	e0ffff17 	ldw	r3,-4(fp)
 4022974:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4022978:	d0e00c17 	ldw	r3,-32720(gp)
 402297c:	e0bffd17 	ldw	r2,-12(fp)
 4022980:	1880020e 	bge	r3,r2,402298c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4022984:	e0bffd17 	ldw	r2,-12(fp)
 4022988:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 402298c:	e0bffd17 	ldw	r2,-12(fp)
 4022990:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4022994:	00000606 	br	40229b0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4022998:	e0bffd17 	ldw	r2,-12(fp)
 402299c:	10800044 	addi	r2,r2,1
 40229a0:	e0bffd15 	stw	r2,-12(fp)
 40229a4:	e0bffd17 	ldw	r2,-12(fp)
 40229a8:	10800810 	cmplti	r2,r2,32
 40229ac:	103fe41e 	bne	r2,zero,4022940 <__reset+0xfb021940>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40229b0:	e0bffe17 	ldw	r2,-8(fp)
}
 40229b4:	e037883a 	mov	sp,fp
 40229b8:	df000017 	ldw	fp,0(sp)
 40229bc:	dec00104 	addi	sp,sp,4
 40229c0:	f800283a 	ret

040229c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40229c4:	defffe04 	addi	sp,sp,-8
 40229c8:	df000115 	stw	fp,4(sp)
 40229cc:	df000104 	addi	fp,sp,4
 40229d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40229d4:	e0bfff17 	ldw	r2,-4(fp)
 40229d8:	10bffe84 	addi	r2,r2,-6
 40229dc:	10c00428 	cmpgeui	r3,r2,16
 40229e0:	18001a1e 	bne	r3,zero,4022a4c <alt_exception_cause_generated_bad_addr+0x88>
 40229e4:	100690ba 	slli	r3,r2,2
 40229e8:	008100b4 	movhi	r2,1026
 40229ec:	108a7f04 	addi	r2,r2,10748
 40229f0:	1885883a 	add	r2,r3,r2
 40229f4:	10800017 	ldw	r2,0(r2)
 40229f8:	1000683a 	jmp	r2
 40229fc:	04022a3c 	xorhi	r16,zero,2216
 4022a00:	04022a3c 	xorhi	r16,zero,2216
 4022a04:	04022a4c 	andi	r16,zero,2217
 4022a08:	04022a4c 	andi	r16,zero,2217
 4022a0c:	04022a4c 	andi	r16,zero,2217
 4022a10:	04022a3c 	xorhi	r16,zero,2216
 4022a14:	04022a44 	movi	r16,2217
 4022a18:	04022a4c 	andi	r16,zero,2217
 4022a1c:	04022a3c 	xorhi	r16,zero,2216
 4022a20:	04022a3c 	xorhi	r16,zero,2216
 4022a24:	04022a4c 	andi	r16,zero,2217
 4022a28:	04022a3c 	xorhi	r16,zero,2216
 4022a2c:	04022a44 	movi	r16,2217
 4022a30:	04022a4c 	andi	r16,zero,2217
 4022a34:	04022a4c 	andi	r16,zero,2217
 4022a38:	04022a3c 	xorhi	r16,zero,2216
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4022a3c:	00800044 	movi	r2,1
 4022a40:	00000306 	br	4022a50 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4022a44:	0005883a 	mov	r2,zero
 4022a48:	00000106 	br	4022a50 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4022a4c:	0005883a 	mov	r2,zero
  }
}
 4022a50:	e037883a 	mov	sp,fp
 4022a54:	df000017 	ldw	fp,0(sp)
 4022a58:	dec00104 	addi	sp,sp,4
 4022a5c:	f800283a 	ret

04022a60 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4022a60:	defff904 	addi	sp,sp,-28
 4022a64:	dfc00615 	stw	ra,24(sp)
 4022a68:	df000515 	stw	fp,20(sp)
 4022a6c:	df000504 	addi	fp,sp,20
 4022a70:	e13ffc15 	stw	r4,-16(fp)
 4022a74:	e17ffd15 	stw	r5,-12(fp)
 4022a78:	e1bffe15 	stw	r6,-8(fp)
 4022a7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4022a80:	e1bfff17 	ldw	r6,-4(fp)
 4022a84:	e17ffe17 	ldw	r5,-8(fp)
 4022a88:	e13ffd17 	ldw	r4,-12(fp)
 4022a8c:	401fe940 	call	401fe94 <open>
 4022a90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4022a94:	e0bffb17 	ldw	r2,-20(fp)
 4022a98:	10001c16 	blt	r2,zero,4022b0c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4022a9c:	00810474 	movhi	r2,1041
 4022aa0:	1095aa04 	addi	r2,r2,22184
 4022aa4:	e0fffb17 	ldw	r3,-20(fp)
 4022aa8:	18c00324 	muli	r3,r3,12
 4022aac:	10c5883a 	add	r2,r2,r3
 4022ab0:	10c00017 	ldw	r3,0(r2)
 4022ab4:	e0bffc17 	ldw	r2,-16(fp)
 4022ab8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4022abc:	00810474 	movhi	r2,1041
 4022ac0:	1095aa04 	addi	r2,r2,22184
 4022ac4:	e0fffb17 	ldw	r3,-20(fp)
 4022ac8:	18c00324 	muli	r3,r3,12
 4022acc:	10c5883a 	add	r2,r2,r3
 4022ad0:	10800104 	addi	r2,r2,4
 4022ad4:	10c00017 	ldw	r3,0(r2)
 4022ad8:	e0bffc17 	ldw	r2,-16(fp)
 4022adc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4022ae0:	00810474 	movhi	r2,1041
 4022ae4:	1095aa04 	addi	r2,r2,22184
 4022ae8:	e0fffb17 	ldw	r3,-20(fp)
 4022aec:	18c00324 	muli	r3,r3,12
 4022af0:	10c5883a 	add	r2,r2,r3
 4022af4:	10800204 	addi	r2,r2,8
 4022af8:	10c00017 	ldw	r3,0(r2)
 4022afc:	e0bffc17 	ldw	r2,-16(fp)
 4022b00:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4022b04:	e13ffb17 	ldw	r4,-20(fp)
 4022b08:	40201200 	call	4020120 <alt_release_fd>
  }
} 
 4022b0c:	0001883a 	nop
 4022b10:	e037883a 	mov	sp,fp
 4022b14:	dfc00117 	ldw	ra,4(sp)
 4022b18:	df000017 	ldw	fp,0(sp)
 4022b1c:	dec00204 	addi	sp,sp,8
 4022b20:	f800283a 	ret

04022b24 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4022b24:	defffb04 	addi	sp,sp,-20
 4022b28:	dfc00415 	stw	ra,16(sp)
 4022b2c:	df000315 	stw	fp,12(sp)
 4022b30:	df000304 	addi	fp,sp,12
 4022b34:	e13ffd15 	stw	r4,-12(fp)
 4022b38:	e17ffe15 	stw	r5,-8(fp)
 4022b3c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4022b40:	01c07fc4 	movi	r7,511
 4022b44:	01800044 	movi	r6,1
 4022b48:	e17ffd17 	ldw	r5,-12(fp)
 4022b4c:	01010474 	movhi	r4,1041
 4022b50:	2115ad04 	addi	r4,r4,22196
 4022b54:	4022a600 	call	4022a60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4022b58:	01c07fc4 	movi	r7,511
 4022b5c:	000d883a 	mov	r6,zero
 4022b60:	e17ffe17 	ldw	r5,-8(fp)
 4022b64:	01010474 	movhi	r4,1041
 4022b68:	2115aa04 	addi	r4,r4,22184
 4022b6c:	4022a600 	call	4022a60 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4022b70:	01c07fc4 	movi	r7,511
 4022b74:	01800044 	movi	r6,1
 4022b78:	e17fff17 	ldw	r5,-4(fp)
 4022b7c:	01010474 	movhi	r4,1041
 4022b80:	2115b004 	addi	r4,r4,22208
 4022b84:	4022a600 	call	4022a60 <alt_open_fd>
}  
 4022b88:	0001883a 	nop
 4022b8c:	e037883a 	mov	sp,fp
 4022b90:	dfc00117 	ldw	ra,4(sp)
 4022b94:	df000017 	ldw	fp,0(sp)
 4022b98:	dec00204 	addi	sp,sp,8
 4022b9c:	f800283a 	ret

04022ba0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4022ba0:	deffff04 	addi	sp,sp,-4
 4022ba4:	df000015 	stw	fp,0(sp)
 4022ba8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4022bac:	000170fa 	wrctl	ienable,zero
}
 4022bb0:	0001883a 	nop
 4022bb4:	e037883a 	mov	sp,fp
 4022bb8:	df000017 	ldw	fp,0(sp)
 4022bbc:	dec00104 	addi	sp,sp,4
 4022bc0:	f800283a 	ret

04022bc4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4022bc4:	defff404 	addi	sp,sp,-48
 4022bc8:	df000b15 	stw	fp,44(sp)
 4022bcc:	df000b04 	addi	fp,sp,44
 4022bd0:	e13ffc15 	stw	r4,-16(fp)
 4022bd4:	e17ffd15 	stw	r5,-12(fp)
 4022bd8:	e1bffe15 	stw	r6,-8(fp)
 4022bdc:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4022be0:	e0ffff17 	ldw	r3,-4(fp)
 4022be4:	e0bffe17 	ldw	r2,-8(fp)
 4022be8:	1885883a 	add	r2,r3,r2
 4022bec:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 4022bf0:	e0c00217 	ldw	r3,8(fp)
 4022bf4:	e0800117 	ldw	r2,4(fp)
 4022bf8:	1885883a 	add	r2,r3,r2
 4022bfc:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 4022c00:	e0800117 	ldw	r2,4(fp)
 4022c04:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4022c08:	e0bffe17 	ldw	r2,-8(fp)
 4022c0c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4022c10:	00800044 	movi	r2,1
 4022c14:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4022c18:	e0bffc17 	ldw	r2,-16(fp)
 4022c1c:	10800504 	addi	r2,r2,20
 4022c20:	1009883a 	mov	r4,r2
 4022c24:	00c00044 	movi	r3,1
 4022c28:	e0bffd17 	ldw	r2,-12(fp)
 4022c2c:	1884983a 	sll	r2,r3,r2
 4022c30:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4022c34:	e0800317 	ldw	r2,12(fp)
 4022c38:	1080008c 	andi	r2,r2,2
 4022c3c:	1000051e 	bne	r2,zero,4022c54 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4022c40:	e0bffc17 	ldw	r2,-16(fp)
 4022c44:	10800304 	addi	r2,r2,12
 4022c48:	1007883a 	mov	r3,r2
 4022c4c:	00810004 	movi	r2,1024
 4022c50:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4022c54:	e0bffc17 	ldw	r2,-16(fp)
 4022c58:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4022c5c:	e0bffc17 	ldw	r2,-16(fp)
 4022c60:	10800204 	addi	r2,r2,8
 4022c64:	10800037 	ldwio	r2,0(r2)
 4022c68:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4022c6c:	e0bffa17 	ldw	r2,-24(fp)
 4022c70:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4022c74:	10000226 	beq	r2,zero,4022c80 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4022c78:	e0bff717 	ldw	r2,-36(fp)
 4022c7c:	1000031e 	bne	r2,zero,4022c8c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4022c80:	e0bffa17 	ldw	r2,-24(fp)
 4022c84:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4022c88:	103ff426 	beq	r2,zero,4022c5c <__reset+0xfb021c5c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4022c8c:	e0bffa17 	ldw	r2,-24(fp)
 4022c90:	1080100c 	andi	r2,r2,64
 4022c94:	10001e26 	beq	r2,zero,4022d10 <alt_avalon_spi_command+0x14c>
 4022c98:	e0bff717 	ldw	r2,-36(fp)
 4022c9c:	00801c0e 	bge	zero,r2,4022d10 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4022ca0:	e0bff717 	ldw	r2,-36(fp)
 4022ca4:	10bfffc4 	addi	r2,r2,-1
 4022ca8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4022cac:	e0ffff17 	ldw	r3,-4(fp)
 4022cb0:	e0bff817 	ldw	r2,-32(fp)
 4022cb4:	18800a2e 	bgeu	r3,r2,4022ce0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4022cb8:	e0bffc17 	ldw	r2,-16(fp)
 4022cbc:	10800104 	addi	r2,r2,4
 4022cc0:	1009883a 	mov	r4,r2
 4022cc4:	e0bfff17 	ldw	r2,-4(fp)
 4022cc8:	10c00044 	addi	r3,r2,1
 4022ccc:	e0ffff15 	stw	r3,-4(fp)
 4022cd0:	10800003 	ldbu	r2,0(r2)
 4022cd4:	10803fcc 	andi	r2,r2,255
 4022cd8:	20800035 	stwio	r2,0(r4)
 4022cdc:	00000c06 	br	4022d10 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 4022ce0:	e0bff517 	ldw	r2,-44(fp)
 4022ce4:	10000826 	beq	r2,zero,4022d08 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4022ce8:	e0bff517 	ldw	r2,-44(fp)
 4022cec:	10bfffc4 	addi	r2,r2,-1
 4022cf0:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4022cf4:	e0bffc17 	ldw	r2,-16(fp)
 4022cf8:	10800104 	addi	r2,r2,4
 4022cfc:	0007883a 	mov	r3,zero
 4022d00:	10c00035 	stwio	r3,0(r2)
 4022d04:	00000206 	br	4022d10 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4022d08:	00bf0004 	movi	r2,-1024
 4022d0c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4022d10:	e0bffa17 	ldw	r2,-24(fp)
 4022d14:	1080200c 	andi	r2,r2,128
 4022d18:	103fd026 	beq	r2,zero,4022c5c <__reset+0xfb021c5c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4022d1c:	e0bffc17 	ldw	r2,-16(fp)
 4022d20:	10800037 	ldwio	r2,0(r2)
 4022d24:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4022d28:	e0bff617 	ldw	r2,-40(fp)
 4022d2c:	10000426 	beq	r2,zero,4022d40 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4022d30:	e0bff617 	ldw	r2,-40(fp)
 4022d34:	10bfffc4 	addi	r2,r2,-1
 4022d38:	e0bff615 	stw	r2,-40(fp)
 4022d3c:	00000506 	br	4022d54 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4022d40:	e0800217 	ldw	r2,8(fp)
 4022d44:	10c00044 	addi	r3,r2,1
 4022d48:	e0c00215 	stw	r3,8(fp)
 4022d4c:	e0fffb17 	ldw	r3,-20(fp)
 4022d50:	10c00005 	stb	r3,0(r2)
      credits++;
 4022d54:	e0bff717 	ldw	r2,-36(fp)
 4022d58:	10800044 	addi	r2,r2,1
 4022d5c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4022d60:	e0bff617 	ldw	r2,-40(fp)
 4022d64:	103fbd1e 	bne	r2,zero,4022c5c <__reset+0xfb021c5c>
 4022d68:	e0c00217 	ldw	r3,8(fp)
 4022d6c:	e0bff917 	ldw	r2,-28(fp)
 4022d70:	18bfba1e 	bne	r3,r2,4022c5c <__reset+0xfb021c5c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4022d74:	e0bffc17 	ldw	r2,-16(fp)
 4022d78:	10800204 	addi	r2,r2,8
 4022d7c:	10800037 	ldwio	r2,0(r2)
 4022d80:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4022d84:	e0bffa17 	ldw	r2,-24(fp)
 4022d88:	1080080c 	andi	r2,r2,32
 4022d8c:	103ff926 	beq	r2,zero,4022d74 <__reset+0xfb021d74>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4022d90:	e0800317 	ldw	r2,12(fp)
 4022d94:	1080004c 	andi	r2,r2,1
 4022d98:	1000041e 	bne	r2,zero,4022dac <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4022d9c:	e0bffc17 	ldw	r2,-16(fp)
 4022da0:	10800304 	addi	r2,r2,12
 4022da4:	0007883a 	mov	r3,zero
 4022da8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4022dac:	e0800117 	ldw	r2,4(fp)
}
 4022db0:	e037883a 	mov	sp,fp
 4022db4:	df000017 	ldw	fp,0(sp)
 4022db8:	dec00104 	addi	sp,sp,4
 4022dbc:	f800283a 	ret

04022dc0 <atexit>:
 4022dc0:	200b883a 	mov	r5,r4
 4022dc4:	000f883a 	mov	r7,zero
 4022dc8:	000d883a 	mov	r6,zero
 4022dcc:	0009883a 	mov	r4,zero
 4022dd0:	4022e881 	jmpi	4022e88 <__register_exitproc>

04022dd4 <exit>:
 4022dd4:	defffe04 	addi	sp,sp,-8
 4022dd8:	000b883a 	mov	r5,zero
 4022ddc:	dc000015 	stw	r16,0(sp)
 4022de0:	dfc00115 	stw	ra,4(sp)
 4022de4:	2021883a 	mov	r16,r4
 4022de8:	4022fa00 	call	4022fa0 <__call_exitprocs>
 4022dec:	00810474 	movhi	r2,1041
 4022df0:	109a5704 	addi	r2,r2,26972
 4022df4:	11000017 	ldw	r4,0(r2)
 4022df8:	20800f17 	ldw	r2,60(r4)
 4022dfc:	10000126 	beq	r2,zero,4022e04 <exit+0x30>
 4022e00:	103ee83a 	callr	r2
 4022e04:	8009883a 	mov	r4,r16
 4022e08:	40231200 	call	4023120 <_exit>

04022e0c <memcmp>:
 4022e0c:	01c000c4 	movi	r7,3
 4022e10:	3980192e 	bgeu	r7,r6,4022e78 <memcmp+0x6c>
 4022e14:	2144b03a 	or	r2,r4,r5
 4022e18:	11c4703a 	and	r2,r2,r7
 4022e1c:	10000f26 	beq	r2,zero,4022e5c <memcmp+0x50>
 4022e20:	20800003 	ldbu	r2,0(r4)
 4022e24:	28c00003 	ldbu	r3,0(r5)
 4022e28:	10c0151e 	bne	r2,r3,4022e80 <memcmp+0x74>
 4022e2c:	31bfff84 	addi	r6,r6,-2
 4022e30:	01ffffc4 	movi	r7,-1
 4022e34:	00000406 	br	4022e48 <memcmp+0x3c>
 4022e38:	20800003 	ldbu	r2,0(r4)
 4022e3c:	28c00003 	ldbu	r3,0(r5)
 4022e40:	31bfffc4 	addi	r6,r6,-1
 4022e44:	10c00e1e 	bne	r2,r3,4022e80 <memcmp+0x74>
 4022e48:	21000044 	addi	r4,r4,1
 4022e4c:	29400044 	addi	r5,r5,1
 4022e50:	31fff91e 	bne	r6,r7,4022e38 <__reset+0xfb021e38>
 4022e54:	0005883a 	mov	r2,zero
 4022e58:	f800283a 	ret
 4022e5c:	20c00017 	ldw	r3,0(r4)
 4022e60:	28800017 	ldw	r2,0(r5)
 4022e64:	18bfee1e 	bne	r3,r2,4022e20 <__reset+0xfb021e20>
 4022e68:	31bfff04 	addi	r6,r6,-4
 4022e6c:	21000104 	addi	r4,r4,4
 4022e70:	29400104 	addi	r5,r5,4
 4022e74:	39bff936 	bltu	r7,r6,4022e5c <__reset+0xfb021e5c>
 4022e78:	303fe91e 	bne	r6,zero,4022e20 <__reset+0xfb021e20>
 4022e7c:	003ff506 	br	4022e54 <__reset+0xfb021e54>
 4022e80:	10c5c83a 	sub	r2,r2,r3
 4022e84:	f800283a 	ret

04022e88 <__register_exitproc>:
 4022e88:	defffa04 	addi	sp,sp,-24
 4022e8c:	dc000315 	stw	r16,12(sp)
 4022e90:	04010474 	movhi	r16,1041
 4022e94:	841a5704 	addi	r16,r16,26972
 4022e98:	80c00017 	ldw	r3,0(r16)
 4022e9c:	dc400415 	stw	r17,16(sp)
 4022ea0:	dfc00515 	stw	ra,20(sp)
 4022ea4:	18805217 	ldw	r2,328(r3)
 4022ea8:	2023883a 	mov	r17,r4
 4022eac:	10003726 	beq	r2,zero,4022f8c <__register_exitproc+0x104>
 4022eb0:	10c00117 	ldw	r3,4(r2)
 4022eb4:	010007c4 	movi	r4,31
 4022eb8:	20c00e16 	blt	r4,r3,4022ef4 <__register_exitproc+0x6c>
 4022ebc:	1a000044 	addi	r8,r3,1
 4022ec0:	8800221e 	bne	r17,zero,4022f4c <__register_exitproc+0xc4>
 4022ec4:	18c00084 	addi	r3,r3,2
 4022ec8:	18c7883a 	add	r3,r3,r3
 4022ecc:	18c7883a 	add	r3,r3,r3
 4022ed0:	12000115 	stw	r8,4(r2)
 4022ed4:	10c7883a 	add	r3,r2,r3
 4022ed8:	19400015 	stw	r5,0(r3)
 4022edc:	0005883a 	mov	r2,zero
 4022ee0:	dfc00517 	ldw	ra,20(sp)
 4022ee4:	dc400417 	ldw	r17,16(sp)
 4022ee8:	dc000317 	ldw	r16,12(sp)
 4022eec:	dec00604 	addi	sp,sp,24
 4022ef0:	f800283a 	ret
 4022ef4:	00810074 	movhi	r2,1025
 4022ef8:	1086f804 	addi	r2,r2,7136
 4022efc:	10002626 	beq	r2,zero,4022f98 <__register_exitproc+0x110>
 4022f00:	01006404 	movi	r4,400
 4022f04:	d9400015 	stw	r5,0(sp)
 4022f08:	d9800115 	stw	r6,4(sp)
 4022f0c:	d9c00215 	stw	r7,8(sp)
 4022f10:	4011be00 	call	4011be0 <malloc>
 4022f14:	d9400017 	ldw	r5,0(sp)
 4022f18:	d9800117 	ldw	r6,4(sp)
 4022f1c:	d9c00217 	ldw	r7,8(sp)
 4022f20:	10001d26 	beq	r2,zero,4022f98 <__register_exitproc+0x110>
 4022f24:	81000017 	ldw	r4,0(r16)
 4022f28:	10000115 	stw	zero,4(r2)
 4022f2c:	02000044 	movi	r8,1
 4022f30:	22405217 	ldw	r9,328(r4)
 4022f34:	0007883a 	mov	r3,zero
 4022f38:	12400015 	stw	r9,0(r2)
 4022f3c:	20805215 	stw	r2,328(r4)
 4022f40:	10006215 	stw	zero,392(r2)
 4022f44:	10006315 	stw	zero,396(r2)
 4022f48:	883fde26 	beq	r17,zero,4022ec4 <__reset+0xfb021ec4>
 4022f4c:	18c9883a 	add	r4,r3,r3
 4022f50:	2109883a 	add	r4,r4,r4
 4022f54:	1109883a 	add	r4,r2,r4
 4022f58:	21802215 	stw	r6,136(r4)
 4022f5c:	01800044 	movi	r6,1
 4022f60:	12406217 	ldw	r9,392(r2)
 4022f64:	30cc983a 	sll	r6,r6,r3
 4022f68:	4992b03a 	or	r9,r9,r6
 4022f6c:	12406215 	stw	r9,392(r2)
 4022f70:	21c04215 	stw	r7,264(r4)
 4022f74:	01000084 	movi	r4,2
 4022f78:	893fd21e 	bne	r17,r4,4022ec4 <__reset+0xfb021ec4>
 4022f7c:	11006317 	ldw	r4,396(r2)
 4022f80:	218cb03a 	or	r6,r4,r6
 4022f84:	11806315 	stw	r6,396(r2)
 4022f88:	003fce06 	br	4022ec4 <__reset+0xfb021ec4>
 4022f8c:	18805304 	addi	r2,r3,332
 4022f90:	18805215 	stw	r2,328(r3)
 4022f94:	003fc606 	br	4022eb0 <__reset+0xfb021eb0>
 4022f98:	00bfffc4 	movi	r2,-1
 4022f9c:	003fd006 	br	4022ee0 <__reset+0xfb021ee0>

04022fa0 <__call_exitprocs>:
 4022fa0:	defff504 	addi	sp,sp,-44
 4022fa4:	df000915 	stw	fp,36(sp)
 4022fa8:	dd400615 	stw	r21,24(sp)
 4022fac:	dc800315 	stw	r18,12(sp)
 4022fb0:	dfc00a15 	stw	ra,40(sp)
 4022fb4:	ddc00815 	stw	r23,32(sp)
 4022fb8:	dd800715 	stw	r22,28(sp)
 4022fbc:	dd000515 	stw	r20,20(sp)
 4022fc0:	dcc00415 	stw	r19,16(sp)
 4022fc4:	dc400215 	stw	r17,8(sp)
 4022fc8:	dc000115 	stw	r16,4(sp)
 4022fcc:	d9000015 	stw	r4,0(sp)
 4022fd0:	2839883a 	mov	fp,r5
 4022fd4:	04800044 	movi	r18,1
 4022fd8:	057fffc4 	movi	r21,-1
 4022fdc:	00810474 	movhi	r2,1041
 4022fe0:	109a5704 	addi	r2,r2,26972
 4022fe4:	12000017 	ldw	r8,0(r2)
 4022fe8:	45005217 	ldw	r20,328(r8)
 4022fec:	44c05204 	addi	r19,r8,328
 4022ff0:	a0001c26 	beq	r20,zero,4023064 <__call_exitprocs+0xc4>
 4022ff4:	a0800117 	ldw	r2,4(r20)
 4022ff8:	15ffffc4 	addi	r23,r2,-1
 4022ffc:	b8000d16 	blt	r23,zero,4023034 <__call_exitprocs+0x94>
 4023000:	14000044 	addi	r16,r2,1
 4023004:	8421883a 	add	r16,r16,r16
 4023008:	8421883a 	add	r16,r16,r16
 402300c:	84402004 	addi	r17,r16,128
 4023010:	a463883a 	add	r17,r20,r17
 4023014:	a421883a 	add	r16,r20,r16
 4023018:	e0001e26 	beq	fp,zero,4023094 <__call_exitprocs+0xf4>
 402301c:	80804017 	ldw	r2,256(r16)
 4023020:	e0801c26 	beq	fp,r2,4023094 <__call_exitprocs+0xf4>
 4023024:	bdffffc4 	addi	r23,r23,-1
 4023028:	843fff04 	addi	r16,r16,-4
 402302c:	8c7fff04 	addi	r17,r17,-4
 4023030:	bd7ff91e 	bne	r23,r21,4023018 <__reset+0xfb022018>
 4023034:	00810074 	movhi	r2,1025
 4023038:	1086fd04 	addi	r2,r2,7156
 402303c:	10000926 	beq	r2,zero,4023064 <__call_exitprocs+0xc4>
 4023040:	a0800117 	ldw	r2,4(r20)
 4023044:	1000301e 	bne	r2,zero,4023108 <__call_exitprocs+0x168>
 4023048:	a0800017 	ldw	r2,0(r20)
 402304c:	10003226 	beq	r2,zero,4023118 <__call_exitprocs+0x178>
 4023050:	a009883a 	mov	r4,r20
 4023054:	98800015 	stw	r2,0(r19)
 4023058:	4011bf40 	call	4011bf4 <free>
 402305c:	9d000017 	ldw	r20,0(r19)
 4023060:	a03fe41e 	bne	r20,zero,4022ff4 <__reset+0xfb021ff4>
 4023064:	dfc00a17 	ldw	ra,40(sp)
 4023068:	df000917 	ldw	fp,36(sp)
 402306c:	ddc00817 	ldw	r23,32(sp)
 4023070:	dd800717 	ldw	r22,28(sp)
 4023074:	dd400617 	ldw	r21,24(sp)
 4023078:	dd000517 	ldw	r20,20(sp)
 402307c:	dcc00417 	ldw	r19,16(sp)
 4023080:	dc800317 	ldw	r18,12(sp)
 4023084:	dc400217 	ldw	r17,8(sp)
 4023088:	dc000117 	ldw	r16,4(sp)
 402308c:	dec00b04 	addi	sp,sp,44
 4023090:	f800283a 	ret
 4023094:	a0800117 	ldw	r2,4(r20)
 4023098:	80c00017 	ldw	r3,0(r16)
 402309c:	10bfffc4 	addi	r2,r2,-1
 40230a0:	15c01426 	beq	r2,r23,40230f4 <__call_exitprocs+0x154>
 40230a4:	80000015 	stw	zero,0(r16)
 40230a8:	183fde26 	beq	r3,zero,4023024 <__reset+0xfb022024>
 40230ac:	95c8983a 	sll	r4,r18,r23
 40230b0:	a0806217 	ldw	r2,392(r20)
 40230b4:	a5800117 	ldw	r22,4(r20)
 40230b8:	2084703a 	and	r2,r4,r2
 40230bc:	10000b26 	beq	r2,zero,40230ec <__call_exitprocs+0x14c>
 40230c0:	a0806317 	ldw	r2,396(r20)
 40230c4:	2088703a 	and	r4,r4,r2
 40230c8:	20000c1e 	bne	r4,zero,40230fc <__call_exitprocs+0x15c>
 40230cc:	89400017 	ldw	r5,0(r17)
 40230d0:	d9000017 	ldw	r4,0(sp)
 40230d4:	183ee83a 	callr	r3
 40230d8:	a0800117 	ldw	r2,4(r20)
 40230dc:	15bfbf1e 	bne	r2,r22,4022fdc <__reset+0xfb021fdc>
 40230e0:	98800017 	ldw	r2,0(r19)
 40230e4:	153fcf26 	beq	r2,r20,4023024 <__reset+0xfb022024>
 40230e8:	003fbc06 	br	4022fdc <__reset+0xfb021fdc>
 40230ec:	183ee83a 	callr	r3
 40230f0:	003ff906 	br	40230d8 <__reset+0xfb0220d8>
 40230f4:	a5c00115 	stw	r23,4(r20)
 40230f8:	003feb06 	br	40230a8 <__reset+0xfb0220a8>
 40230fc:	89000017 	ldw	r4,0(r17)
 4023100:	183ee83a 	callr	r3
 4023104:	003ff406 	br	40230d8 <__reset+0xfb0220d8>
 4023108:	a0800017 	ldw	r2,0(r20)
 402310c:	a027883a 	mov	r19,r20
 4023110:	1029883a 	mov	r20,r2
 4023114:	003fb606 	br	4022ff0 <__reset+0xfb021ff0>
 4023118:	0005883a 	mov	r2,zero
 402311c:	003ffb06 	br	402310c <__reset+0xfb02210c>

04023120 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4023120:	defffd04 	addi	sp,sp,-12
 4023124:	df000215 	stw	fp,8(sp)
 4023128:	df000204 	addi	fp,sp,8
 402312c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4023130:	0001883a 	nop
 4023134:	e0bfff17 	ldw	r2,-4(fp)
 4023138:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 402313c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4023140:	10000226 	beq	r2,zero,402314c <_exit+0x2c>
    ALT_SIM_FAIL();
 4023144:	002af070 	cmpltui	zero,zero,43969
 4023148:	00000106 	br	4023150 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 402314c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4023150:	003fff06 	br	4023150 <__reset+0xfb022150>
